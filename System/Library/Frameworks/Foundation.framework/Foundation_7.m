BOOL __CharacterSetStorage.isSuperset(of:)(uint64_t a1)
{
  uint64_t v1;

  return CFCharacterSetIsSupersetOfSet(*(CFCharacterSetRef *)(v1 + 16), *(CFCharacterSetRef *)(a1 + 16)) != 0;
}

__CFString *__CharacterSetStorage.description.getter()
{
  char v1 = *(unsigned char *)(v0 + 24);
  id v2 = *(id *)(v0 + 16);
  result = (__CFString *)CFCopyDescription(v2);
  v4 = result;
  if (v1)
  {
    if (result)
    {
LABEL_5:
      id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

      return (__CFString *)v5;
    }
    __break(1u);
  }
  if (result) {
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

Swift::Int __CharacterSetStorage.hashValue.getter()
{
  Hasher.init(_seed:)();
  id v1 = *(id *)(v0 + 16);
  Swift::UInt v2 = CFHash(v1);
  Hasher._combine(_:)(v2);

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __CharacterSetStorage()
{
  return __CharacterSetStorage.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance __CharacterSetStorage()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __CharacterSetStorage()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = *(id *)(v1 + 16);
  Swift::UInt v3 = CFHash(v2);
  Hasher._combine(_:)(v3);

  return Hasher._finalize()();
}

uint64_t CharacterSet.init(bitmapRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1)
      {
        __break(1u);
        goto LABEL_11;
      }
      swift_retain();
      v7 = __DataStorage.bridgedReference(_:)((int)a1, a1 >> 32);
      outlined consume of Data._Representation(a1, a2);
LABEL_8:
      CFCharacterSetRef v10 = CFCharacterSetCreateWithBitmapRepresentation(0, (CFDataRef)v7);

      if (!v10) {
LABEL_11:
      }
        __break(1u);
      type metadata accessor for __CharacterSetStorage();
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v10;
      *(unsigned char *)(result + 24) = 0;
      *a3 = result;
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      v7 = __DataStorage.bridgedReference(_:)(v8, v9);
      swift_release();
      swift_release();
      goto LABEL_8;
    case 3uLL:
      v6 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
      goto LABEL_7;
    default:
      uint64_t v12 = a1;
      __int16 v13 = a2;
      char v14 = BYTE2(a2);
      char v15 = BYTE3(a2);
      char v16 = BYTE4(a2);
      char v17 = BYTE5(a2);
      v6 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, &v12, BYTE6(a2));
LABEL_7:
      v7 = v6;
      goto LABEL_8;
  }
}

uint64_t CharacterSet.init(contentsOfFile:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  URL.init(fileURLWithPath:)(a1, a2, (uint64_t)&v15);
  v4 = v15;
  v14[0] = v15;
  v14[1] = v16;
  v14[2] = v17;
  uint64_t v5 = (uint64_t)specialized Data.init(contentsOf:options:)((uint64_t)v14, (void *)1);
  unint64_t v7 = v6;

  swift_release();
  swift_release();
  switch(v7 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5) {
        __break(1u);
      }
      swift_retain();
      uint64_t v9 = __DataStorage.bridgedReference(_:)((int)v5, v5 >> 32);
      outlined consume of Data._Representation(v5, v7);
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(v5 + 16);
      uint64_t v11 = *(void *)(v5 + 24);
      swift_retain();
      swift_retain();
      uint64_t v9 = __DataStorage.bridgedReference(_:)(v10, v11);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      uint64_t v8 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
      goto LABEL_7;
    default:
      char v15 = (void *)v5;
      LOWORD(v16) = v7;
      BYTE2(v16) = BYTE2(v7);
      BYTE3(v16) = BYTE3(v7);
      BYTE4(v16) = BYTE4(v7);
      BYTE5(v16) = BYTE5(v7);
      uint64_t v8 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, &v15, BYTE6(v7));
LABEL_7:
      uint64_t v9 = v8;
      break;
  }
  CFCharacterSetRef v12 = CFCharacterSetCreateWithBitmapRepresentation(0, (CFDataRef)v9);

  if (!v12)
  {
    __break(1u);
    JUMPOUT(0x181B5E3A8);
  }
  outlined consume of Data._Representation(v5, v7);
  type metadata accessor for __CharacterSetStorage();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v12;
  *(unsigned char *)(result + 24) = 0;
  *a3 = result;
  return result;
}

CFCharacterSetRef static CharacterSet.controlCharacters.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetControl);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((unsigned char *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

CFCharacterSetRef static CharacterSet.decimalDigits.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetDecimalDigit);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((unsigned char *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

CFCharacterSetRef static CharacterSet.letters.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetLetter);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((unsigned char *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

CFCharacterSetRef static CharacterSet.lowercaseLetters.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetLowercaseLetter);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((unsigned char *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

CFCharacterSetRef static CharacterSet.uppercaseLetters.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetUppercaseLetter);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((unsigned char *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

CFCharacterSetRef static CharacterSet.illegalCharacters.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetIllegal);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((unsigned char *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

CFCharacterSetRef static CharacterSet.capitalizedLetters.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetCapitalizedLetter);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((unsigned char *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

CFCharacterSetRef static CharacterSet.symbols.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetSymbol);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((unsigned char *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static CharacterSet.urlUserAllowed.getter@<X0>(uint64_t *a1@<X8>)
{
  return static CharacterSet.urlUserAllowed.getter(MEMORY[0x1E4F1CB88], a1);
}

uint64_t static CharacterSet.urlPasswordAllowed.getter@<X0>(uint64_t *a1@<X8>)
{
  return static CharacterSet.urlUserAllowed.getter(MEMORY[0x1E4F1CB70], a1);
}

uint64_t static CharacterSet.urlHostAllowed.getter@<X0>(uint64_t *a1@<X8>)
{
  return static CharacterSet.urlUserAllowed.getter(MEMORY[0x1E4F1CB68], a1);
}

uint64_t static CharacterSet.urlPathAllowed.getter@<X0>(uint64_t *a1@<X8>)
{
  return static CharacterSet.urlUserAllowed.getter(MEMORY[0x1E4F1CB78], a1);
}

uint64_t static CharacterSet.urlFragmentAllowed.getter@<X0>(uint64_t *a1@<X8>)
{
  return static CharacterSet.urlUserAllowed.getter(MEMORY[0x1E4F1CB60], a1);
}

CFDataRef CharacterSet.bitmapRepresentation.getter()
{
  return __CharacterSetStorage.bitmapRepresentation.getter();
}

Swift::Bool __swiftcall CharacterSet.hasMember(inPlane:)(Swift::UInt8 inPlane)
{
  return CFCharacterSetHasMemberInPlane(*(CFCharacterSetRef *)(*(void *)v1 + 16), inPlane) != 0;
}

uint64_t CharacterSet.insert(charactersIn:)(uint64_t a1)
{
  return CharacterSet.insert(charactersIn:)(a1, MEMORY[0x1E4F1C1F0], (uint64_t (*)(uint64_t, uint64_t))__CharacterSetStorage.insert(charactersIn:));
}

{
  return CharacterSet.insert(charactersIn:)(a1, MEMORY[0x1E4F1C1F0], (uint64_t (*)(uint64_t, uint64_t))__CharacterSetStorage.insert(charactersIn:));
}

uint64_t CharacterSet.insert(charactersIn:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *CFCharacterSetRef v3 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }
  return a3(a1, a2);
}

uint64_t CharacterSet.remove(charactersIn:)(uint64_t a1)
{
  return CharacterSet.insert(charactersIn:)(a1, MEMORY[0x1E4F1C208], (uint64_t (*)(uint64_t, uint64_t))__CharacterSetStorage.insert(charactersIn:));
}

{
  return CharacterSet.insert(charactersIn:)(a1, MEMORY[0x1E4F1C208], (uint64_t (*)(uint64_t, uint64_t))__CharacterSetStorage.insert(charactersIn:));
}

Swift::Void __swiftcall CharacterSet.remove(charactersIn:)(Swift::String charactersIn)
{
}

Swift::Void __swiftcall CharacterSet.invert()()
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *uint64_t v0 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }
  uint64_t v1 = *v0;
  id v2 = *(__CFCharacterSet **)(*v0 + 16);
  if (*(unsigned char *)(*v0 + 24))
  {
    CFCharacterSetInvert(v2);
  }
  else
  {
    CFCharacterSetRef v3 = v2;
    CFMutableCharacterSetRef MutableCopy = CFCharacterSetCreateMutableCopy(0, v3);
    if (MutableCopy)
    {
      CFMutableCharacterSetRef v5 = MutableCopy;
      unint64_t v6 = MutableCopy;
      CFCharacterSetInvert(v6);

      unint64_t v7 = *(void **)(v1 + 16);
      *(void *)(v1 + 16) = v5;
      *(unsigned char *)(v1 + 24) = 1;
    }
    else
    {
      __break(1u);
    }
  }
}

unint64_t CharacterSet.insert(_:)(unsigned int a1)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *uint64_t v1 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }
  __CharacterSetStorage.insert(charactersIn:)(a1 | ((unint64_t)a1 << 32), MEMORY[0x1E4F1C1F0]);
  return ((unint64_t)a1 << 32) | 1;
}

uint64_t CharacterSet.update(with:)(unsigned int a1)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *uint64_t v1 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }
  __CharacterSetStorage.insert(charactersIn:)(a1 | ((unint64_t)a1 << 32), MEMORY[0x1E4F1C1F0]);
  return a1;
}

uint64_t CharacterSet.intersection(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return __CharacterSetStorage.union(_:)(*a1, MEMORY[0x1E4F1C200], a2);
}

void CharacterSet.formIntersection(_:)(uint64_t *a1)
{
}

void CharacterSet.subtract(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *uint64_t v1 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }
  __CharacterSetStorage.subtract(_:)(v2);
}

uint64_t CharacterSet.symmetricDifference(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  __CharacterSetStorage.union(_:)(*a1, MEMORY[0x1E4F1C218], &v6);
  __CharacterSetStorage.union(_:)(v3, MEMORY[0x1E4F1C200], &v5);
  __CharacterSetStorage.subtracting(_:)(v5, a2);
  swift_release();

  return swift_release();
}

uint64_t CharacterSet.formSymmetricDifference(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  __CharacterSetStorage.union(_:)(*a1, MEMORY[0x1E4F1C218], &v5);
  __CharacterSetStorage.union(_:)(v2, MEMORY[0x1E4F1C200], &v4);
  __CharacterSetStorage.subtracting(_:)(v4, &v6);
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

BOOL CharacterSet.isSuperset(of:)(uint64_t a1)
{
  return CFCharacterSetIsSupersetOfSet(*(CFCharacterSetRef *)(*(void *)v1 + 16), *(CFCharacterSetRef *)(*(void *)a1 + 16)) != 0;
}

void CharacterSet.hash(into:)()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 16);
  swift_retain();
  id v3 = v1;
  Swift::UInt v2 = CFHash(v3);
  Hasher._combine(_:)(v2);
  swift_release();
}

BOOL static CharacterSet.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return CFEqual(*(CFTypeRef *)(*(void *)a1 + 16), *(CFTypeRef *)(*(void *)a2 + 16)) != 0;
}

Swift::Int CharacterSet.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = *(id *)(v1 + 16);
  Swift::UInt v3 = CFHash(v2);
  Hasher._combine(_:)(v3);

  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CharacterSet(uint64_t *a1, uint64_t *a2)
{
  return specialized static __CharacterSetStorage.== infix(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hash(into:) in conformance CharacterSet()
{
  id v2 = *(id *)(*(void *)v0 + 16);
  Swift::UInt v1 = CFHash(v2);
  Hasher._combine(_:)(v1);
}

BOOL protocol witness for SetAlgebra.contains(_:) in conformance CharacterSet(UTF32Char *a1)
{
  return CFCharacterSetIsLongCharacterMember(*(CFCharacterSetRef *)(*(void *)v1 + 16), *a1) != 0;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance CharacterSet@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  __CharacterSetStorage.union(_:)(*a1, MEMORY[0x1E4F1C218], a2);
  swift_release();

  return swift_release();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance CharacterSet@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  __CharacterSetStorage.union(_:)(*a1, MEMORY[0x1E4F1C200], a2);

  return swift_release();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance CharacterSet@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  __CharacterSetStorage.union(_:)(*a1, MEMORY[0x1E4F1C218], &v6);
  __CharacterSetStorage.union(_:)(v3, MEMORY[0x1E4F1C200], &v5);
  __CharacterSetStorage.subtracting(_:)(v5, a2);
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

unint64_t protocol witness for SetAlgebra.remove(_:) in conformance CharacterSet@<X0>(UTF32Char *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = CharacterSet.remove(_:)(*a1);
  *(_DWORD *)a2 = result;
  *(unsigned char *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

void protocol witness for SetAlgebra.update(with:) in conformance CharacterSet(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *id v2 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }
  __CharacterSetStorage.insert(charactersIn:)(v4 | (v4 << 32), MEMORY[0x1E4F1C1F0]);
  *(_DWORD *)a2 = v4;
  *(unsigned char *)(a2 + 4) = 0;
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance CharacterSet(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *uint64_t v1 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }
  __CharacterSetStorage.formUnion(_:)(v2, MEMORY[0x1E4F1C218]);

  return swift_release();
}

void protocol witness for SetAlgebra.formIntersection(_:) in conformance CharacterSet(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *uint64_t v1 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }
  __CharacterSetStorage.formUnion(_:)(v2, MEMORY[0x1E4F1C200]);
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance CharacterSet(uint64_t *a1)
{
  uint64_t v2 = *a1;
  __CharacterSetStorage.union(_:)(*a1, MEMORY[0x1E4F1C218], &v5);
  __CharacterSetStorage.union(_:)(v2, MEMORY[0x1E4F1C200], &v4);
  __CharacterSetStorage.subtracting(_:)(v4, &v6);
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance CharacterSet@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  __CharacterSetStorage.subtracting(_:)(*a1, a2);

  return swift_release();
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance CharacterSet(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *v1;
  swift_retain();
  __CharacterSetStorage.union(_:)(v2, MEMORY[0x1E4F1C200], &v5);
  swift_release();
  LOBYTE(v3) = specialized static __CharacterSetStorage.== infix(_:_:)(v5, v3);
  swift_release();
  return v3 & 1;
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance CharacterSet(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_retain();
  __CharacterSetStorage.union(_:)(v1, MEMORY[0x1E4F1C200], &v4);
  swift_release();
  unsigned __int8 v2 = specialized SetAlgebra.isEmpty.getter(v4);
  swift_release();
  return v2 & 1;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance CharacterSet(uint64_t *a1)
{
  return __CharacterSetStorage.isSuperset(of:)(*a1);
}

CFMutableCharacterSetRef protocol witness for SetAlgebra.isEmpty.getter in conformance CharacterSet()
{
  return specialized SetAlgebra.isEmpty.getter(*v0);
}

void protocol witness for SetAlgebra.subtract(_:) in conformance CharacterSet(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *uint64_t v1 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }
  __CharacterSetStorage.subtract(_:)(v2);
}

unint64_t static CharacterSet._getObjectiveCType()()
{
  return type metadata accessor for NSCharacterSet();
}

NSCharacterSet __swiftcall CharacterSet._bridgeToObjectiveC()()
{
  objc_msgSend(*(id *)(*(void *)v0 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSCharacterSet();
  swift_dynamicCast();
  return v2;
}

uint64_t static CharacterSet._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  swift_release();
  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for CFCharacterSetRef(0);
  swift_dynamicCast();
  type metadata accessor for __CharacterSetStorage();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v5;
  *(unsigned char *)(result + 24) = 0;
  *a2 = result;
  return result;
}

uint64_t static CharacterSet._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  swift_release();
  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for CFCharacterSetRef(0);
  swift_dynamicCast();
  type metadata accessor for __CharacterSetStorage();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v6;
  *(unsigned char *)(v4 + 24) = 0;
  *a2 = v4;
  return 1;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CharacterSet()
{
  objc_msgSend(*(id *)(*(void *)v0 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSCharacterSet();
  swift_dynamicCast();
  return v2;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance CharacterSet(void *a1, uint64_t *a2)
{
  swift_release();
  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for CFCharacterSetRef(0);
  swift_dynamicCast();
  type metadata accessor for __CharacterSetStorage();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v5;
  *(unsigned char *)(result + 24) = 0;
  *a2 = result;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance CharacterSet(void *a1, uint64_t *a2)
{
  swift_release();
  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for CFCharacterSetRef(0);
  swift_dynamicCast();
  type metadata accessor for __CharacterSetStorage();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v6;
  *(unsigned char *)(v4 + 24) = 0;
  *a2 = v4;
  return 1;
}

__CFString *CharacterSet.description.getter()
{
  return __CharacterSetStorage.description.getter();
}

__CFString *CharacterSet.debugDescription.getter()
{
  return __CharacterSetStorage.description.getter();
}

__CFString *protocol witness for CustomStringConvertible.description.getter in conformance CharacterSet()
{
  return __CharacterSetStorage.description.getter();
}

uint64_t NSCharacterSet._toCustomAnyHashable()()
{
  id v1 = v0;
  objc_msgSend(v1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for CFCharacterSetRef(0);
  swift_dynamicCast();
  type metadata accessor for __CharacterSetStorage();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v4;
  *(unsigned char *)(v2 + 24) = 0;

  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSCharacterSet()
{
  id v1 = *v0;
  NSCharacterSet._toCustomAnyHashable()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CharacterSet.CodingKeys()
{
  return 0x70616D746962;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CharacterSet.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x70616D746962 && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CharacterSet.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CharacterSet.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t CharacterSet.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CharacterSet.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v9 = v19;
    unint64_t v10 = v20;
    uint64_t v18 = a2;
    switch(v20 >> 62)
    {
      case 1uLL:
        if (v19 >> 32 < (int)v19) {
          __break(1u);
        }
        swift_retain();
        CFCharacterSetRef v12 = __DataStorage.bridgedReference(_:)((int)v9, v9 >> 32);
        outlined consume of Data._Representation(v9, v10);
        break;
      case 2uLL:
        uint64_t v14 = *(void *)(v19 + 16);
        uint64_t v13 = *(void *)(v19 + 24);
        swift_retain();
        swift_retain();
        CFCharacterSetRef v12 = __DataStorage.bridgedReference(_:)(v14, v13);
        swift_release();
        swift_release();
        break;
      case 3uLL:
        uint64_t v11 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
        goto LABEL_8;
      default:
        uint64_t v11 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, &v19, BYTE6(v20));
LABEL_8:
        CFCharacterSetRef v12 = v11;
        break;
    }
    CFCharacterSetRef v15 = CFCharacterSetCreateWithBitmapRepresentation(0, (CFDataRef)v12);

    if (!v15)
    {
      __break(1u);
      JUMPOUT(0x181B5FD74);
    }
    type metadata accessor for __CharacterSetStorage();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v15;
    *(unsigned char *)(v16 + 24) = 0;
    outlined consume of Data._Representation(v9, v10);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *uint64_t v18 = v16;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t CharacterSet.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CharacterSet.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_retain();
  CFDataRef v6 = __CharacterSetStorage.bitmapRepresentation.getter();
  unint64_t v8 = v7;
  swift_release();
  v10[0] = v6;
  v10[1] = v8;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  outlined consume of Data._Representation((uint64_t)v6, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CharacterSet@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return CharacterSet.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CharacterSet(void *a1)
{
  return CharacterSet.encode(to:)(a1);
}

BOOL specialized static __CharacterSetStorage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return CFEqual(*(CFTypeRef *)(a1 + 16), *(CFTypeRef *)(a2 + 16)) != 0;
}

unint64_t type metadata accessor for NSCharacterSet()
{
  unint64_t result = lazy cache variable for type metadata for NSCharacterSet;
  if (!lazy cache variable for type metadata for NSCharacterSet)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSCharacterSet);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys;
  if (!lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys;
  if (!lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys;
  if (!lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys;
  if (!lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for CharacterSet(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet();
  a1[2] = lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet();
  a1[3] = lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet();
  unint64_t result = lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet();
  a1[4] = result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for __CharacterSetStorage.Backing(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  id v5 = v3;
  return a1;
}

uint64_t assignWithCopy for __CharacterSetStorage.Backing(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  id v6 = v3;

  return a1;
}

uint64_t assignWithTake for __CharacterSetStorage.Backing(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;

  return a1;
}

void *type metadata accessor for __CharacterSetStorage.Backing()
{
  return &unk_1ECA3F100;
}

unsigned char *storeEnumTagSinglePayload for CharacterSet.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        __CFString *result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      __CFString *result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181B6032CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for CharacterSet.CodingKeys()
{
  return &unk_1ECA32500;
}

unint64_t lazy protocol witness table accessor for type __CharacterSetStorage and conformance __CharacterSetStorage()
{
  unint64_t result = lazy protocol witness table cache variable for type __CharacterSetStorage and conformance __CharacterSetStorage;
  if (!lazy protocol witness table cache variable for type __CharacterSetStorage and conformance __CharacterSetStorage)
  {
    type metadata accessor for __CharacterSetStorage();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __CharacterSetStorage and conformance __CharacterSetStorage);
  }
  return result;
}

uint64_t closure #1 in _TimeZoneICU.deinit(uint64_t *a1, uint64_t a2)
{
  if (*a1) {
    return ucal_close();
  }
  uint64_t v4 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (specialized _copyCollectionToContiguousArray<A>(_:)(v4, v5)[2] >> 31) {
    __break(1u);
  }
  uint64_t v6 = ucal_open();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (v6)
  {
    *a1 = v6;
    return ucal_close();
  }
  return result;
}

uint64_t _TimeZoneICU.__deallocating_deinit()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  partial apply for closure #1 in _TimeZoneICU.deinit((uint64_t *)(v1 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t _TimeZoneICU.localizedName(for:locale:)(uint64_t a1, void *a2)
{
  if (*a2)
  {
    uint64_t v3 = a2[1];
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 64);
    swift_unknownObjectRetain();
    v5(ObjectType, v3);
    a1 = swift_unknownObjectRelease();
  }
  uint64_t v6 = *(void *)(v2 + 16);
  MEMORY[0x1F4188790](a1);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 24));
  partial apply for closure #1 in _TimeZoneICU.localizedName(for:locale:)((uint64_t *)(v6 + 16), &v8);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 24));
  swift_bridgeObjectRelease();
  swift_release();
  return v8;
}

uint64_t closure #1 in _TimeZoneICU.localizedName(for:locale:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v9 = a4;
  v31[2] = *MEMORY[0x1E4F143B8];
  uint64_t v13 = *(void *)(a2 + 24);
  unint64_t v12 = *(void *)(a2 + 32);
  uint64_t v14 = *a1;
  if (*a1) {
    goto LABEL_2;
  }
  uint64_t v30 = a4;
  LODWORD(v31[0]) = 0;
  swift_bridgeObjectRetain();
  if (specialized _copyCollectionToContiguousArray<A>(_:)(v13, v12)[2] >> 31) {
    __break(1u);
  }
  uint64_t v14 = ucal_open();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v14)
  {
    *a6 = 0;
    a6[1] = 0;
    return result;
  }
  *a1 = v14;
  uint64_t v9 = v30;
  if (a3 <= 5)
  {
LABEL_2:
    switch(a3)
    {
      case 0uLL:
      case 1uLL:
      case 2uLL:
      case 3uLL:
        uint64_t v23 = swift_bridgeObjectRetain_n();
        MEMORY[0x1F4188790](v23);
        swift_bridgeObjectRetain();
        specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v29, v31);
        if (v7)
        {
          swift_bridgeObjectRelease_n();
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x181B60B24);
        }
        uint64_t v24 = v31[0];
        uint64_t v25 = v31[1];
        uint64_t result = swift_bridgeObjectRelease_n();
        *a6 = v24;
        a6[1] = v25;
        break;
      case 4uLL:
        goto LABEL_9;
      case 5uLL:
        swift_bridgeObjectRetain();
        uint64_t v17 = v14;
        uint64_t v18 = v13;
        unint64_t v19 = v12;
        uint64_t v20 = v9;
        uint64_t v21 = a5;
        char v22 = 1;
        goto LABEL_13;
      default:
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    type metadata accessor for NSTimeZoneNameStyle(0);
    v31[0] = a3;
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
LABEL_9:
    swift_bridgeObjectRetain();
    uint64_t v17 = v14;
    uint64_t v18 = v13;
    unint64_t v19 = v12;
    uint64_t v20 = v9;
    uint64_t v21 = a5;
    char v22 = 0;
LABEL_13:
    uint64_t v26 = specialized static _TimeZoneICU.timeZoneDisplayName(for:timeZoneName:localeName:isShort:isGeneric:isDaylight:)(v17, v18, v19, v20, v21, v22, 1);
    uint64_t v28 = v27;
    uint64_t result = swift_bridgeObjectRelease();
    *a6 = v26;
    a6[1] = v28;
  }
  return result;
}

void protocol witness for _TimeZoneProtocol.init(secondsFromGMT:) in conformance _TimeZoneICU()
{
}

void *protocol witness for _TimeZoneProtocol.init(identifier:) in conformance _TimeZoneICU(uint64_t a1, unint64_t a2)
{
  return _TimeZoneICU.init(identifier:)(a1, a2);
}

void *one-time initialization function for icuTZIdentifiers()
{
  uint64_t result = specialized static _TimeZoneICU.timeZoneNamesFromICU()();
  icuTZIdentifiers._rawValue = result;
  return result;
}

uint64_t static TimeZone.knownTimeZoneIdentifiers.getter()
{
  if (one-time initialization token for icuTZIdentifiers != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t static TimeZone.timeZoneDataVersion.getter()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v3 = 0;
  uint64_t v0 = MEMORY[0x1853099C0](&v3);
  uint64_t result = 0;
  if (v0 && v3 <= 0)
  {
    uint64_t result = MEMORY[0x185301F80](v0, 0xE000000000000000);
    if (!v2) {
      return 0;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in _TimeZoneICU.localizedName(for:locale:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _TimeZoneICU.localizedName(for:locale:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

uint64_t specialized static _TimeZoneICU.timeZoneDisplayName(for:timeZoneName:localeName:isShort:isGeneric:isDaylight:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  v19[2] = *MEMORY[0x1E4F143B8];
  if (a7)
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = specialized _copyCollectionToContiguousArray<A>(_:)(a2, a3);
    swift_bridgeObjectRelease();
    unint64_t v11 = v10[2];
    LODWORD(v19[0]) = 0;
    if (v11 >> 31)
    {
      __break(1u);
    }
    else
    {
      String.utf8CString.getter();
      uint64_t v12 = udat_open();
      swift_release();
      uint64_t v13 = 0;
      if (!v12)
      {
LABEL_11:
        swift_release();
        return v13;
      }
      uint64_t v14 = specialized _copyCollectionToContiguousArray<A>(_:)(1987475062, 0xE400000000000000);
      if (a6) {
        uint64_t v15 = 1;
      }
      else {
        uint64_t v15 = v14[2];
      }
      if (v15 >= (uint64_t)0xFFFFFFFF80000000)
      {
        if (v15 <= 0x7FFFFFFF)
        {
          udat_applyPattern();
          uint64_t v13 = specialized _withResizingUCharBuffer(initialSize:_:)(32);
          swift_release();
          udat_close();
          goto LABEL_11;
        }
LABEL_15:
        __break(1u);
      }
    }
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v16 = swift_bridgeObjectRetain_n();
  MEMORY[0x1F4188790](v16);
  swift_bridgeObjectRetain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v18, v19);
  uint64_t v13 = v19[0];
  swift_bridgeObjectRelease_n();
  return v13;
}

uint64_t partial apply for closure #1 in _TimeZoneICU.deinit(uint64_t *a1)
{
  return closure #1 in _TimeZoneICU.deinit(a1, v1);
}

void *specialized static _TimeZoneICU.timeZoneNamesFromICU()()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v14 = 0;
  ucal_openTimeZones();
  unsigned int v13 = 0;
  uint64_t isStackAllocationSafe = uenum_unext();
  uint64_t v1 = (void *)MEMORY[0x1E4FBC860];
  if (isStackAllocationSafe)
  {
    uint64_t v2 = (unsigned __int16 *)isStackAllocationSafe;
    while (1)
    {
      uint64_t v3 = v13;
      if ((int)v13 >= 1)
      {
        uint64_t v4 = 3 * v13;
        if (v13 < 0x156
          || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
        {
          MEMORY[0x1F4188790](isStackAllocationSafe);
          closure #1 in String.init(_utf16:)((unsigned char *)&v12 - ((v4 + 15) & 0x7FFFFFFF0), v2, v3, &v15);
          uint64_t v6 = v15;
          uint64_t v5 = v16;
          if (v16) {
            goto LABEL_9;
          }
        }
        else
        {
          uint64_t v7 = (unsigned char *)swift_slowAlloc();
          closure #1 in String.init(_utf16:)(v7, v2, v3, &v15);
          MEMORY[0x185309510](v7, -1, -1);
          uint64_t v6 = v15;
          uint64_t v5 = v16;
          if (v16)
          {
LABEL_9:
            if ((specialized Sequence<>.starts<A>(with:)() & 1) != 0
              || (specialized Sequence<>.starts<A>(with:)() & 1) != 0
              || (specialized Sequence<>.starts<A>(with:)() & 1) != 0
              || (specialized Sequence<>.starts<A>(with:)() & 1) != 0
              || (specialized Sequence<>.starts<A>(with:)() & 1) != 0
              || (specialized Sequence<>.contains(_:)(v6, v5, outlined read-only object #0 of static _TimeZoneICU.timeZoneNamesFromICU()) & 1) != 0)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1[2] + 1, 1, v1);
              }
              unint64_t v9 = v1[2];
              unint64_t v8 = v1[3];
              if (v9 >= v8 >> 1) {
                uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v1);
              }
              v1[2] = v9 + 1;
              unint64_t v10 = &v1[2 * v9];
              v10[4] = v6;
              v10[5] = v5;
            }
          }
        }
      }
      uint64_t isStackAllocationSafe = uenum_unext();
      if (isStackAllocationSafe)
      {
        uint64_t v2 = (unsigned __int16 *)isStackAllocationSafe;
        if (v14 <= 0) {
          continue;
        }
      }
      break;
    }
  }
  uenum_close();
  return v1;
}

uint64_t (*Measurement.value.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Measurement.hash(into:)()
{
  uint64_t v1 = *(void **)v0;
  double v2 = *(double *)(v0 + 8);
  self;
  uint64_t v3 = (void *)swift_dynamicCastObjCClass();
  id v9 = v1;
  if (v3)
  {
    id v4 = objc_msgSend(v3, sel_converter);
    objc_msgSend(v4, sel_baseUnitValueFromValue_, v2);
    Swift::UInt64 v6 = v5;

    if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v7 = v6;
    }
    else {
      Swift::UInt64 v7 = 0;
    }
    Hasher._combine(_:)(v7);
  }
  else
  {
    NSObject.hash(into:)();

    if ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v8 = *(void *)&v2;
    }
    else {
      Swift::UInt64 v8 = 0;
    }
    Hasher._combine(_:)(v8);
  }
}

Swift::Int Measurement.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance Measurement<A>()
{
  return MEMORY[0x1F4183768]();
}

uint64_t protocol witness for static Comparable.>= infix(_:_:) in conformance Measurement<A>()
{
  return MEMORY[0x1F4183760]();
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance Measurement<A>()
{
  return MEMORY[0x1F4183758]();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A>()
{
  return Hasher._finalize()();
}

uint64_t Measurement.description.getter()
{
  uint64_t v1 = *v0;
  Double.write<A>(to:)();
  v2._countAndFlagsBits = 32;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  id v3 = objc_msgSend(v1, sel_symbol);
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  Swift::UInt64 v6 = v5;

  v7._countAndFlagsBits = (uint64_t)v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t Measurement.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v33 = a1;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  Swift::UInt64 v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v7 - 8);
  id v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void **)v2;
  uint64_t v11 = *(void *)(v2 + 8);
  uint64_t v38 = MEMORY[0x1E4FBB3D0];
  *(void *)&long long v37 = v11;
  long long v34 = xmmword_182107E60;
  outlined init with take of Any(&v37, &v35);
  uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v14 = v12[2];
  unint64_t v13 = v12[3];
  if (v14 >= v13 >> 1) {
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v12);
  }
  v12[2] = v14 + 1;
  uint64_t v15 = &v12[6 * v14];
  long long v16 = v34;
  long long v17 = v36;
  v15[3] = v35;
  v15[4] = v17;
  v15[2] = v16;
  id v18 = objc_msgSend(v10, sel_symbol, v32, v33);
  id v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  uint64_t v21 = v20;

  uint64_t v38 = MEMORY[0x1E4FBB1A0];
  *(void *)&long long v37 = v19;
  *((void *)&v37 + 1) = v21;
  long long v34 = xmmword_182110DC0;
  outlined init with take of Any(&v37, &v35);
  unint64_t v23 = v12[2];
  unint64_t v22 = v12[3];
  if (v23 >= v22 >> 1) {
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v12);
  }
  v12[2] = v23 + 1;
  uint64_t v24 = &v12[6 * v23];
  long long v25 = v34;
  long long v26 = v36;
  v24[3] = v35;
  v24[4] = v26;
  v24[2] = v25;
  *(void *)&long long v34 = v10;
  *((void *)&v34 + 1) = v11;
  *(void *)&long long v37 = v12;
  uint64_t v27 = *MEMORY[0x1E4FBC410];
  uint64_t v28 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v29 = *(void *)(v28 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 104))(v9, v27, v28);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v9, 0, 1, v28);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBC430], v3);
  id v30 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [(label: String?, value: Any)] and conformance [A], &demangling cache variable for type metadata for [(label: String?, value: Any)]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

double Measurement<>.convert(to:)(void *a1)
{
  uint64_t v2 = *(void **)v1;
  Measurement<>.converted(to:)(a1, v4);

  double result = v4[1];
  *(double *)uint64_t v1 = v4[0];
  *(double *)(v1 + 8) = result;
  return result;
}

id static Measurement<>.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v4 = *(id *)a1;
  double v5 = *(double *)(a1 + 8);
  Swift::UInt64 v6 = *(void **)a2;
  double v7 = *(double *)(a2 + 8);
  if (objc_msgSend(*(id *)a1, sel_isEqual_, *(void *)a2))
  {
    double v8 = v5 + v7;
    id result = v4;
  }
  else
  {
    id v10 = objc_msgSend(v4, sel_converter);
    objc_msgSend(v10, sel_baseUnitValueFromValue_, v5);
    double v12 = v11;

    id v13 = objc_msgSend(v6, sel_converter);
    objc_msgSend(v13, sel_baseUnitValueFromValue_, v7);
    double v15 = v14;

    double v8 = v12 + v15;
    swift_getObjectType();
    id result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_baseUnit);
  }
  *(void *)a3 = result;
  *(double *)(a3 + 8) = v8;
  return result;
}

id static Measurement<>.- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v4 = *(void **)a1;
  double v5 = *(double *)(a1 + 8);
  Swift::UInt64 v6 = *(void **)a2;
  double v7 = *(double *)(a2 + 8);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  if (static NSObject.== infix(_:_:)())
  {
    double v8 = v5 - v7;
    id result = v4;
  }
  else
  {
    id v10 = objc_msgSend(v4, sel_converter);
    objc_msgSend(v10, sel_baseUnitValueFromValue_, v5);
    double v12 = v11;

    id v13 = objc_msgSend(v6, sel_converter);
    objc_msgSend(v13, sel_baseUnitValueFromValue_, v7);
    double v15 = v14;

    double v8 = v12 - v15;
    swift_getObjectType();
    id result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_baseUnit);
  }
  *(void *)a3 = result;
  *(double *)(a3 + 8) = v8;
  return result;
}

id static Measurement.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v4 = *(double *)(a1 + 8);
  double v5 = *(double *)(a2 + 8);
  id v7 = *(id *)a1;
  if (objc_msgSend(*(id *)a1, sel_isEqual_, *(void *)a2))
  {
    *(void *)a3 = v7;
    *(double *)(a3 + 8) = v4 + v5;
    return v7;
  }
  else
  {
    id result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

id static Measurement.- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v4 = *(double *)(a1 + 8);
  double v5 = *(double *)(a2 + 8);
  id v7 = *(id *)a1;
  if (objc_msgSend(*(id *)a1, sel_isEqual_, *(void *)a2))
  {
    *(void *)a3 = v7;
    *(double *)(a3 + 8) = v4 - v5;
    return v7;
  }
  else
  {
    id result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

id static Measurement.* infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3 = *(void **)a1;
  double v4 = *(double *)(a1 + 8) * a3;
  *(void *)a2 = *(void *)a1;
  *(double *)(a2 + 8) = v4;
  return v3;
}

{
  void *v3;
  double v4;

  uint64_t v3 = *(void **)a1;
  double v4 = *(double *)(a1 + 8) * a3;
  *(void *)a2 = *(void *)a1;
  *(double *)(a2 + 8) = v4;
  return v3;
}

id static Measurement./ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3 = *(void **)a1;
  double v4 = *(double *)(a1 + 8) / a3;
  *(void *)a2 = *(void *)a1;
  *(double *)(a2 + 8) = v4;
  return v3;
}

{
  void *v3;
  double v4;

  uint64_t v3 = *(void **)a1;
  double v4 = a3 / *(double *)(a1 + 8);
  *(void *)a2 = *(void *)a1;
  *(double *)(a2 + 8) = v4;
  return v3;
}

NSMeasurement __swiftcall Measurement._bridgeToObjectiveC()()
{
  double v1 = *v0;
  double v2 = v0[1];
  id v3 = objc_allocWithZone((Class)NSMeasurement);

  double v4 = (objc_class *)objc_msgSend(v3, sel_initWithDoubleValue_unit_, *(void *)&v1, v2);
  result._doubleValue = v6;
  result._unit = v5;
  result.super.isa = v4;
  return result;
}

uint64_t static Measurement._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  objc_msgSend(a1, sel_doubleValue);
  uint64_t v5 = v4;
  id v6 = objc_msgSend(a1, sel_unit);
  uint64_t result = swift_dynamicCastUnknownClassUnconditional();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  return result;
}

BOOL static Measurement._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v4 = objc_msgSend(a1, sel_unit);
  uint64_t v5 = swift_dynamicCastUnknownClass();
  if (v5)
  {

    objc_msgSend(a1, sel_doubleValue);
    *(void *)a2 = v5;
    *(void *)(a2 + 8) = v6;
  }
  else
  {
  }
  return v5 != 0;
}

id static Measurement._unconditionallyBridgeFromObjectiveC(_:)@<X0>(id result@<X0>, uint64_t *a2@<X8>)
{
  if (result)
  {
    double v2 = result;
    id v4 = objc_msgSend(result, sel_unit);
    uint64_t v5 = swift_dynamicCastUnknownClassUnconditional();
    uint64_t result = objc_msgSend(v2, sel_doubleValue);
    *a2 = v5;
    a2[1] = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance Measurement<A>(void *a1, uint64_t a2)
{
  return static Measurement._forceBridgeFromObjectiveC(_:result:)(a1, a2);
}

BOOL protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Measurement<A>(void *a1, uint64_t a2)
{
  return static Measurement._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Measurement<A>@<X0>(id result@<X0>, uint64_t *a2@<X8>)
{
  return static Measurement._unconditionallyBridgeFromObjectiveC(_:)(result, a2);
}

uint64_t NSMeasurement._toCustomAnyHashable()()
{
  objc_msgSend(v0, sel_unit);
  objc_msgSend(v0, sel_doubleValue);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Measurement<NSUnit> and conformance Measurement<A>, &demangling cache variable for type metadata for Measurement<NSUnit>);
  return AnyHashable.init<A>(_:)();
}

uint64_t Measurement.CodingKeys.init(rawValue:)(uint64_t a1)
{
  if (a1 == 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (a1) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t Measurement.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1953066613 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t Measurement.CodingKeys.intValue.getter(char a1)
{
  return a1 & 1;
}

uint64_t Measurement.CodingKeys.rawValue.getter(char a1)
{
  return a1 & 1;
}

uint64_t Measurement.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 1953066613;
  }
  else {
    return 0x65756C6176;
  }
}

uint64_t Measurement.UnitCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C6F626D7973 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65747265766E6F63 && a2 == 0xE900000000000072)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t Measurement.UnitCodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x65747265766E6F63;
  }
  else {
    return 0x6C6F626D7973;
  }
}

uint64_t Measurement.LinearConverterCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6963696666656F63 && a2 == 0xEB00000000746E65;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E6174736E6F63 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t Measurement.LinearConverterCodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x746E6174736E6F63;
  }
  else {
    return 0x6963696666656F63;
  }
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSMeasurement()
{
  unsigned int v1 = *v0;
  objc_msgSend(v1, sel_unit);
  objc_msgSend(v1, sel_doubleValue);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Measurement<NSUnit> and conformance Measurement<A>, &demangling cache variable for type metadata for Measurement<NSUnit>);
  AnyHashable.init<A>(_:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Measurement<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB570];

  return MEMORY[0x1F4185BB0](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Measurement<A>.CodingKeys(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB560];

  return MEMORY[0x1F4183DE0](a1, a2, WitnessTable, v5);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Measurement<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB560];

  return MEMORY[0x1F4183DF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB560];

  return MEMORY[0x1F4183DE8](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Measurement<A>.CodingKeys@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = Measurement.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Measurement<A>.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Measurement.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Measurement<A>.CodingKeys()
{
  return Measurement.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Measurement<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = Measurement.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance Measurement<A>.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for CodingKey.intValue.getter in conformance Measurement<A>.CodingKeys(a1, a2, (uint64_t (*)(void, void))Measurement.CodingKeys.intValue.getter);
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Measurement<A>.CodingKeys@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = Measurement.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Measurement<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Measurement<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Measurement<A>.UnitCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB570];

  return MEMORY[0x1F4185BB0](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Measurement<A>.UnitCodingKeys(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB560];

  return MEMORY[0x1F4183DE0](a1, a2, WitnessTable, v5);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Measurement<A>.UnitCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB560];

  return MEMORY[0x1F4183DF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A>.UnitCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB560];

  return MEMORY[0x1F4183DE8](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Measurement<A>.UnitCodingKeys()
{
  return Measurement.UnitCodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Measurement<A>.UnitCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = Measurement.UnitCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance Measurement<A>.UnitCodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for CodingKey.intValue.getter in conformance Measurement<A>.CodingKeys(a1, a2, (uint64_t (*)(void, void))Measurement.UnitCodingKeys.intValue.getter);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Measurement<A>.UnitCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Measurement<A>.UnitCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Measurement<A>.LinearConverterCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB570];

  return MEMORY[0x1F4185BB0](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Measurement<A>.LinearConverterCodingKeys(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB560];

  return MEMORY[0x1F4183DE0](a1, a2, WitnessTable, v5);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Measurement<A>.LinearConverterCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB560];

  return MEMORY[0x1F4183DF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A>.LinearConverterCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB560];

  return MEMORY[0x1F4183DE8](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Measurement<A>.LinearConverterCodingKeys()
{
  return Measurement.LinearConverterCodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Measurement<A>.LinearConverterCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = Measurement.LinearConverterCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance Measurement<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void))
{
  return a3(*v3, *(void *)(a1 + 16));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Measurement<A>.LinearConverterCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Measurement<A>.LinearConverterCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t Measurement.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v38 = a3;
  uint64_t v5 = type metadata accessor for Measurement.LinearConverterCodingKeys();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v41 = v5;
  uint64_t v6 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v36 = v6;
  uint64_t v37 = v7;
  MEMORY[0x1F4188790](v6);
  v39 = (char *)v34 - v8;
  type metadata accessor for Measurement.UnitCodingKeys();
  uint64_t v45 = swift_getWitnessTable();
  uint64_t v46 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v43 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46);
  id v10 = (char *)v34 - v9;
  uint64_t v42 = a2;
  type metadata accessor for Measurement.CodingKeys();
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v44 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  id v13 = (char *)v34 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  double v14 = v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v14)
  {
    v47 = v10;
    uint64_t v15 = v46;
    uint64_t v16 = v44;
    char v53 = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v18 = v17;
    char v52 = 1;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v45 = (uint64_t)v13;
    char v51 = 0;
    v34[1] = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v35 = v11;
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSDimension);
    if (swift_dynamicCastMetatype())
    {
      char v50 = 1;
      uint64_t v20 = v39;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      char v49 = 0;
      uint64_t v24 = v36;
      KeyedDecodingContainer.decode(_:forKey:)();
      double v26 = v25;
      char v48 = 1;
      KeyedDecodingContainer.decode(_:forKey:)();
      double v28 = v27;
      swift_dynamicCastMetatypeUnconditional();
      uint64_t v29 = v24;
      id v30 = objc_msgSend(objc_allocWithZone((Class)NSUnitConverterLinear), sel_initWithCoefficient_constant_, v26, v28);
      id v31 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      uint64_t v32 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      objc_msgSend(v31, sel_initWithSymbol_converter_, v32, v30);
      swift_unknownObjectRelease();

      (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v29);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v47, v46);
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v45, v35);
      id v33 = (id)swift_dynamicCastUnknownClassUnconditional();
    }
    else
    {
      id v21 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      uint64_t v22 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v33 = objc_msgSend(v21, sel_initWithSymbol_, v22);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v47, v15);
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v45, v35);
    }
    unint64_t v23 = v38;
    *uint64_t v38 = v33;
    v23[1] = v18;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t Measurement.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = type metadata accessor for Measurement.LinearConverterCodingKeys();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v27 = v5;
  uint64_t v6 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v29 = *(void *)(v6 - 8);
  uint64_t v30 = v6;
  MEMORY[0x1F4188790](v6);
  double v28 = (char *)&WitnessTable - v7;
  uint64_t v8 = type metadata accessor for Measurement.UnitCodingKeys();
  uint64_t v32 = swift_getWitnessTable();
  uint64_t v33 = v8;
  uint64_t v35 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v31 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v36 = (char *)&WitnessTable - v9;
  uint64_t v34 = v4;
  type metadata accessor for Measurement.CodingKeys();
  swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  id v13 = (char *)&WitnessTable - v12;
  id v37 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v44 = 0;
  uint64_t v14 = v38;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v14) {
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  uint64_t v38 = v11;
  char v43 = 1;
  uint64_t v16 = v36;
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  uint64_t v17 = v10;
  id v18 = objc_msgSend(v37, sel_symbol, WitnessTable, v27);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v18);

  char v42 = 0;
  uint64_t v19 = v35;
  KeyedEncodingContainer.encode(_:forKey:)();
  uint64_t v32 = (uint64_t)v13;
  uint64_t v33 = v17;
  swift_bridgeObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSDimension);
  if (swift_dynamicCastMetatype())
  {
    self;
    id v20 = objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_converter);
    swift_getObjectType();

    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSUnitConverterLinear);
    uint64_t result = swift_dynamicCastMetatype();
    if (result)
    {
      self;
      id v21 = objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_converter);
      self;
      uint64_t v22 = (void *)swift_dynamicCastObjCClassUnconditional();
      char v41 = 1;
      unint64_t v23 = v28;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      objc_msgSend(v22, sel_coefficient);
      char v40 = 0;
      uint64_t v24 = v30;
      KeyedEncodingContainer.encode(_:forKey:)();
      objc_msgSend(v22, sel_constant);
      char v39 = 1;
      KeyedEncodingContainer.encode(_:forKey:)();
      uint64_t v25 = v31;

      (*(void (**)(char *, uint64_t))(v29 + 8))(v23, v24);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v36, v35);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v32, v33);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v16, v19);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v32, v33);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Measurement<A>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Measurement.init(from:)(a1, *(void *)(a2 + 16), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Measurement<A>(void *a1, uint64_t a2)
{
  return Measurement.encode(to:)(a1, a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Usage(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = Usage.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == Usage.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Usage@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Usage.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Usage@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Usage.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Usage()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Usage()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Usage()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  Usage.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Usage()
{
  Usage.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Usage()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  Usage.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t type metadata accessor for Measurement.LinearConverterCodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for Measurement.UnitCodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for Measurement.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t instantiation function for generic protocol witness table for Measurement<A>(void *a1)
{
  a1[1] = swift_getWitnessTable();
  a1[2] = swift_getWitnessTable();
  a1[3] = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  a1[4] = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Usage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Usage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    void *result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181B63E94);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 13;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Usage()
{
  return &type metadata for Usage;
}

unsigned char *storeEnumTagSinglePayload for Measurement.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    void *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181B63F9CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in Measurement<A>.LinearConverterCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in Measurement<A>.UnitCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in Measurement<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type Usage and conformance Usage()
{
  unint64_t result = lazy protocol witness table cache variable for type Usage and conformance Usage;
  if (!lazy protocol witness table cache variable for type Usage and conformance Usage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Usage and conformance Usage);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Usage and conformance Usage;
  if (!lazy protocol witness table cache variable for type Usage and conformance Usage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Usage and conformance Usage);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Usage and conformance Usage;
  if (!lazy protocol witness table cache variable for type Usage and conformance Usage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Usage and conformance Usage);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Usage and conformance Usage;
  if (!lazy protocol witness table cache variable for type Usage and conformance Usage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Usage and conformance Usage);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Measurement<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in Measurement<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Measurement<A>.UnitCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in Measurement<A>.UnitCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Measurement<A>.LinearConverterCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in Measurement<A>.LinearConverterCodingKeys()
{
  return swift_getWitnessTable();
}

unint64_t specialized Usage.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Usage.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xE) {
    return 14;
  }
  else {
    return v3;
  }
}

uint64_t _LocaleBridged.copy(newCalendarIdentifier:)(char *a1)
{
  char v2 = *a1;
  id v3 = objc_msgSend(*(id *)(v1 + 16), sel_localeIdentifier);
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  Locale.Components.init(identifier:)((uint64_t)v4, v6, v13);
  LOBYTE(v13[6]) = v2;
  v15[0] = v13[0];
  v15[1] = v13[1];
  v15[2] = v13[2];
  v15[3] = v13[3];
  v15[4] = v13[4];
  v15[5] = v13[5];
  LOBYTE(v15[6]) = v2;
  *(_OWORD *)((char *)&v15[6] + 8) = *(_OWORD *)((char *)&v13[6] + 8);
  *(_OWORD *)((char *)&v15[7] + 8) = *(_OWORD *)((char *)&v13[7] + 8);
  *(_OWORD *)((char *)&v15[8] + 8) = *(_OWORD *)((char *)&v13[8] + 8);
  *(_OWORD *)((char *)&v15[9] + 8) = *(_OWORD *)((char *)&v13[9] + 8);
  *(_OWORD *)((char *)&v15[10] + 8) = *(_OWORD *)((char *)&v13[10] + 8);
  *(_OWORD *)((char *)&v15[11] + 8) = *(_OWORD *)((char *)&v13[11] + 8);
  WORD4(v15[12]) = WORD4(v13[12]);
  v15[13] = v13[13];
  v15[14] = v13[14];
  v15[15] = v13[15];
  v15[16] = v13[16];
  v15[17] = v13[17];
  v15[18] = v13[18];
  v15[19] = v13[19];
  v15[20] = v13[20];
  v15[21] = v13[21];
  memcpy(v14, v15, sizeof(v14));
  uint64_t v7 = (uint64_t)outlined retain of Locale.Components((uint64_t *)v15);
  if (one-time initialization token for cache != -1) {
    uint64_t v7 = swift_once();
  }
  int v8 = (os_unfair_lock_s *)static LocaleCache.cache;
  MEMORY[0x1F4188790](v7);
  swift_retain_n();
  os_unfair_lock_lock(v8 + 31);
  partial apply for closure #1 in LocaleCache.fixedComponents(_:)((uint64_t)&v8[4], &v12);
  os_unfair_lock_unlock(v8 + 31);
  swift_release_n();
  outlined release of Locale.Components((uint64_t *)v15);
  uint64_t v9 = v12;
  memcpy(v11, v13, 0x160uLL);
  outlined release of Locale.Components(v11);
  return v9;
}

Swift::String_optional __swiftcall _LocaleBridged.calendarIdentifierDisplayName(for:)(Foundation::Calendar::Identifier a1)
{
  char v2 = *(void **)(v1 + 16);
  CFStringRef v3 = (const __CFString *)*MEMORY[0x1E4F1D1E0];
  char v14 = *(unsigned char *)a1;
  id v4 = (void *)specialized static Calendar._toNSCalendarIdentifier(_:)(&v14);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  CFStringRef v5 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  CFLocaleRef v6 = v2;
  swift_bridgeObjectRelease();
  uint64_t v7 = (__CFString *)CFLocaleCopyDisplayNameForPropertyValue(v6, v3, v5);

  swift_unknownObjectRelease();
  if (v7)
  {
    id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v10 = v9;
  }
  else
  {
    id v8 = 0;
    uint64_t v10 = 0;
  }
  uint64_t v11 = (uint64_t)v8;
  long long v12 = v10;
  result.value._object = v12;
  result.value._countAndFlagsBits = v11;
  return result;
}

uint64_t _LocaleBridged.languageCode.getter(void *a1)
{
  if (objc_msgSend(*(id *)(v1 + 16), sel_objectForKey_, *a1))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of LocalePreferences?((uint64_t)v4, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v6)
  {
    if (swift_dynamicCast()) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v5);
    return 0;
  }
}

uint64_t _LocaleBridged.variantCode.getter(void *a1)
{
  if (objc_msgSend(*(id *)(v1 + 16), sel_objectForKey_, *a1))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  outlined init with take of LocalePreferences?((uint64_t)v6, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v8)
  {
    outlined destroy of Any?((uint64_t)v7);
    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t result = v4;
  uint64_t v3 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    uint64_t v3 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

uint64_t _LocaleBridged.exemplarCharacterSet.getter@<X0>(void *a1@<X8>)
{
  if (objc_msgSend(*(id *)(v1 + 16), sel_objectForKey_, *MEMORY[0x1E4F1C420]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of LocalePreferences?((uint64_t)v4, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v6)
  {
    uint64_t result = outlined destroy of Any?((uint64_t)v5);
    goto LABEL_8;
  }
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0) {
LABEL_8:
  }
    *a1 = 0;
  return result;
}

uint64_t _LocaleBridged.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  if (objc_msgSend(*(id *)(v1 + 16), sel_objectForKey_, *MEMORY[0x1E4F1C3E0]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  outlined init with take of LocalePreferences?((uint64_t)v7, (uint64_t)&v8, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v9)
  {
    uint64_t result = swift_dynamicCast();
    if (result)
    {
      long long v4 = v6;
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t result = outlined destroy of Any?((uint64_t)&v8);
  }
  if (one-time initialization token for cache != -1) {
    uint64_t result = swift_once();
  }
  unint64_t v5 = (os_unfair_lock_s *)static CalendarCache.cache;
  MEMORY[0x1F4188790](result);
  swift_retain_n();
  os_unfair_lock_lock(v5 + 15);
  partial apply for closure #1 in CalendarCache.fixed(_:)((uint64_t)&v5[4], &v8);
  os_unfair_lock_unlock(v5 + 15);
  uint64_t result = swift_release_n();
  long long v4 = v8;
LABEL_11:
  *a1 = v4;
  return result;
}

void _LocaleBridged.calendarIdentifier.getter(char *a1@<X8>)
{
  id v3 = objc_msgSend(*(id *)(v1 + 16), sel_calendarIdentifier);
  if (!v3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    id v3 = (id)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
  }
  static Calendar._fromNSCalendarIdentifier(_:)(v3, &v5);

  char v4 = v5;
  if (v5 == 16) {
    char v4 = 0;
  }
  *a1 = v4;
}

id _LocaleBridged.usesMetricSystem.getter()
{
  if (objc_msgSend(*(id *)(v0 + 16), sel_objectForKey_, *MEMORY[0x1E4F1C490]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of LocalePreferences?((uint64_t)v4, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v6)
  {
    outlined destroy of Any?((uint64_t)v5);
    return 0;
  }
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  id v1 = objc_msgSend(v3, sel_BOOLValue);

  return v1;
}

uint64_t _LocaleBridged.measurementSystem.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  id v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  MEMORY[0x1F4188790](v4);
  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)partial apply((uint64_t)&v1[4], &v8);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v5 = *((void *)&v8 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v5 + 296))(ObjectType, v5);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.currency.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  id v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  MEMORY[0x1F4188790](v4);
  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)partial apply((uint64_t)&v1[4], &v8);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v5 = *((void *)&v8 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v5 + 304))(ObjectType, v5);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.numberingSystem.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  id v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  MEMORY[0x1F4188790](v4);
  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)partial apply((uint64_t)&v1[4], &v8);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v5 = *((void *)&v8 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v5 + 312))(ObjectType, v5);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.availableNumberingSystems.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  id v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  MEMORY[0x1F4188790](v4);
  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)partial apply((uint64_t)&v1[4], &v9);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v5 = *((void *)&v9 + 1);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 320))(ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t _LocaleBridged.firstDayOfWeek.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  id v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  MEMORY[0x1F4188790](v4);
  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)partial apply((uint64_t)&v1[4], &v8);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v5 = *((void *)&v8 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v5 + 328))(ObjectType, v5);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.weekendRange.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  id v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  MEMORY[0x1F4188790](v4);
  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)partial apply((uint64_t)&v1[4], &v8);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v5 = *((void *)&v8 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v5 + 336))(ObjectType, v5);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.language.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  id v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  MEMORY[0x1F4188790](v4);
  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)partial apply((uint64_t)&v1[4], &v8);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v5 = *((void *)&v8 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v5 + 352))(ObjectType, v5);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.minimumDaysInFirstWeek.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  id v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  MEMORY[0x1F4188790](v4);
  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)partial apply((uint64_t)&v1[4], &v9);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v5 = *((void *)&v9 + 1);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 344))(ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

Swift::String __swiftcall _LocaleBridged.identifier(_:)(Foundation::Locale::IdentifierType a1)
{
  char v2 = *(unsigned char *)a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  id v3 = (os_unfair_lock_s *)static LocaleCache.cache;
  uint64_t v4 = *(void **)(v1 + 16);
  swift_retain();
  id v5 = objc_msgSend(v4, sel_localeIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v5);

  MEMORY[0x1F4188790](v6);
  swift_retain();
  os_unfair_lock_lock(v3 + 31);
  partial apply for closure #1 in LocaleCache.fixed(_:)((uint64_t)&v3[4], &v15);
  os_unfair_lock_unlock(v3 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v7 = *((void *)&v15 + 1);
  uint64_t ObjectType = swift_getObjectType();
  LOBYTE(v15) = v2;
  uint64_t v9 = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v7 + 416))(&v15, ObjectType, v7);
  uint64_t v11 = v10;
  swift_unknownObjectRelease();
  uint64_t v12 = v9;
  id v13 = v11;
  result._object = v13;
  result._countAndFlagsBits = v12;
  return result;
}

uint64_t _LocaleBridged.hourCycle.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  MEMORY[0x1F4188790](v4);
  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)partial apply((uint64_t)&v1[4], &v8);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v5 = *((void *)&v8 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v5 + 360))(ObjectType, v5);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.collation.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  MEMORY[0x1F4188790](v4);
  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)partial apply((uint64_t)&v1[4], &v8);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v5 = *((void *)&v8 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v5 + 368))(ObjectType, v5);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.region.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  MEMORY[0x1F4188790](v4);
  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)partial apply((uint64_t)&v1[4], &v8);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v5 = *((void *)&v8 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v5 + 376))(ObjectType, v5);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.timeZone.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  MEMORY[0x1F4188790](v4);
  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)partial apply((uint64_t)&v1[4], &v8);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v5 = *((void *)&v8 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v5 + 384))(ObjectType, v5);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.subdivision.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  MEMORY[0x1F4188790](v4);
  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)partial apply((uint64_t)&v1[4], &v8);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v5 = *((void *)&v8 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v5 + 392))(ObjectType, v5);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.variant.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  MEMORY[0x1F4188790](v4);
  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)partial apply((uint64_t)&v1[4], &v8);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v5 = *((void *)&v8 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v5 + 400))(ObjectType, v5);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.temperatureUnit.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  MEMORY[0x1F4188790](v4);
  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)partial apply((uint64_t)&v1[4], &v8);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v5 = *((void *)&v8 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v5 + 408))(ObjectType, v5);
  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for _LocaleBridged()
{
  return self;
}

void protocol witness for _LocaleProtocol.init(identifier:prefs:) in conformance _LocaleBridged()
{
}

void protocol witness for _LocaleProtocol.init(name:prefs:disableBundleMatching:) in conformance _LocaleBridged()
{
}

void protocol witness for _LocaleProtocol.init(components:) in conformance _LocaleBridged()
{
}

id protocol witness for _LocaleProtocol.identifier.getter in conformance _LocaleBridged()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_localeIdentifier);
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

id protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged(a1, a2, a3, a4, MEMORY[0x1E4F1C430]);
}

id protocol witness for _LocaleProtocol.languageCodeDisplayName(for:) in conformance _LocaleBridged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged(a1, a2, a3, a4, MEMORY[0x1E4F1C438]);
}

id protocol witness for _LocaleProtocol.countryCodeDisplayName(for:) in conformance _LocaleBridged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged(a1, a2, a3, a4, MEMORY[0x1E4F1C400]);
}

id protocol witness for _LocaleProtocol.scriptCodeDisplayName(for:) in conformance _LocaleBridged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged(a1, a2, a3, a4, MEMORY[0x1E4F1C470]);
}

id protocol witness for _LocaleProtocol.variantCodeDisplayName(for:) in conformance _LocaleBridged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged(a1, a2, a3, a4, MEMORY[0x1E4F1C498]);
}

id protocol witness for _LocaleProtocol.currencyCodeDisplayName(for:) in conformance _LocaleBridged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged(a1, a2, a3, a4, MEMORY[0x1E4F1C408]);
}

id protocol witness for _LocaleProtocol.currencySymbolDisplayName(for:) in conformance _LocaleBridged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged(a1, a2, a3, a4, MEMORY[0x1E4F1C410]);
}

id protocol witness for _LocaleProtocol.collationIdentifierDisplayName(for:) in conformance _LocaleBridged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged(a1, a2, a3, a4, MEMORY[0x1E4F1C3F0]);
}

id protocol witness for _LocaleProtocol.collatorIdentifierDisplayName(for:) in conformance _LocaleBridged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged(a1, a2, a3, a4, MEMORY[0x1E4F1C3F8]);
}

id protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v6 = objc_msgSend(*(id *)(v5 + 16), sel_displayNameForKey_value_, *a5, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if (!v6) {
    return 0;
  }
  id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

  return v7;
}

uint64_t protocol witness for _LocaleProtocol.languageCode.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x1E4F1C438]);
}

uint64_t protocol witness for _LocaleProtocol.scriptCode.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x1E4F1C470]);
}

uint64_t protocol witness for _LocaleProtocol.variantCode.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.variantCode.getter(MEMORY[0x1E4F1C498]);
}

uint64_t protocol witness for _LocaleProtocol.regionCode.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.variantCode.getter(MEMORY[0x1E4F1C400]);
}

uint64_t protocol witness for _LocaleProtocol.collationIdentifier.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x1E4F1C3F0]);
}

uint64_t protocol witness for _LocaleProtocol.decimalSeparator.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x1E4F1C418]);
}

uint64_t protocol witness for _LocaleProtocol.groupingSeparator.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x1E4F1C428]);
}

uint64_t protocol witness for _LocaleProtocol.currencySymbol.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x1E4F1C410]);
}

uint64_t protocol witness for _LocaleProtocol.currencyCode.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x1E4F1C408]);
}

uint64_t protocol witness for _LocaleProtocol.collatorIdentifier.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x1E4F1C3F8]);
}

uint64_t protocol witness for _LocaleProtocol.quotationBeginDelimiter.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x1E4F1C460]);
}

uint64_t protocol witness for _LocaleProtocol.quotationEndDelimiter.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x1E4F1C468]);
}

uint64_t protocol witness for _LocaleProtocol.alternateQuotationBeginDelimiter.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x1E4F1C3D0]);
}

uint64_t protocol witness for _LocaleProtocol.alternateQuotationEndDelimiter.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x1E4F1C3D8]);
}

uint64_t protocol witness for _LocaleProtocol.prefs.getter in conformance _LocaleBridged@<X0>(uint64_t a1@<X8>)
{
  _s10Foundation17LocalePreferencesVSgWOi0_(v3);
  return outlined init with take of LocalePreferences?((uint64_t)v3, a1, &demangling cache variable for type metadata for LocalePreferences?);
}

uint64_t protocol witness for _LocaleProtocol.bridgeToNSLocale() in conformance _LocaleBridged()
{
  objc_msgSend(*(id *)(v0 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSLocale);
  swift_dynamicCast();
  return v2;
}

id protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _LocaleBridged()
{
  id v1 = objc_msgSend(*(id *)(*(void *)v0 + 16), sel_debugDescription);
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

unint64_t instantiation function for generic protocol witness table for _LocaleBridged(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _LocaleBridged and conformance _LocaleBridged();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _LocaleBridged and conformance _LocaleBridged()
{
  unint64_t result = lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged;
  if (!lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged)
  {
    type metadata accessor for _LocaleBridged();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged);
  }
  return result;
}

uint64_t specialized static JSONReference.number<A, B>(from:with:for:_:)(long long *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, float a7)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if ((~LODWORD(a7) & 0x7F800000) != 0)
  {
    uint64_t v20 = Float.description.getter();
    uint64_t v22 = v21;
    uint64_t v35 = v21;
    swift_bridgeObjectRetain();
    v23._countAndFlagsBits = 12334;
    v23._object = (void *)0xE200000000000000;
    Swift::Bool v24 = String.hasSuffix(_:)(v23);
    swift_bridgeObjectRelease();
    if (v24)
    {
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
      uint64_t v22 = v35;
    }
    type metadata accessor for JSONReference();
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v20;
    *(void *)(v19 + 24) = v22;
    *(unsigned char *)(v19 + 32) = 1;
  }
  else
  {
    outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy(a1, &v36);
    uint64_t v13 = *((void *)&v36 + 1);
    if (*((void *)&v36 + 1))
    {
      uint64_t v15 = v37;
      uint64_t v14 = v38;
      uint64_t v17 = v39;
      uint64_t v16 = v40;
      type metadata accessor for JSONReference();
      if (a7 == INFINITY)
      {
        uint64_t v18 = v36;
        uint64_t v19 = swift_allocObject();
        *(void *)(v19 + 16) = v18;
        *(void *)(v19 + 24) = v13;
        *(unsigned char *)(v19 + 32) = 0;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v27 = swift_allocObject();
        uint64_t v19 = v27;
        if (a7 == -INFINITY)
        {
          *(void *)(v27 + 16) = v15;
          *(void *)(v27 + 24) = v14;
        }
        else
        {
          *(void *)(v27 + 16) = v17;
          *(void *)(v27 + 24) = v16;
        }
        *(unsigned char *)(v27 + 32) = 0;
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      if (a6 == -1)
      {
        _CodingPathNode.path.getter(a2);
      }
      else
      {
        outlined copy of _CodingKey(a3, a4, a5, a6);
        _CodingPathNode.path.getter(a2);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v26 = swift_allocObject();
        *(void *)(inited + 32) = v26;
        *(void *)(v26 + 16) = a3;
        *(void *)(v26 + 24) = a4;
        *(void *)(v26 + 32) = a5;
        *(unsigned char *)(v26 + 40) = a6;
        specialized Array.append<A>(contentsOf:)(inited);
      }
      uint64_t v28 = type metadata accessor for EncodingError();
      uint64_t v29 = swift_allocError();
      uint64_t v31 = v30;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
      *(void *)(v31 + 24) = MEMORY[0x1E4FBB470];
      *(float *)uint64_t v31 = a7;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      v32._countAndFlagsBits = Float.description.getter();
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      v33._object = (void *)0x80000001823AB780;
      v33._countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v33);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v28 - 8) + 104))(v31, *MEMORY[0x1E4FBBAA0], v28);
      uint64_t v19 = v29;
      swift_willThrow();
    }
  }
  return v19;
}

uint64_t JSONEncoder.OutputFormatting.rawValue.getter()
{
  return *(void *)v0;
}

Foundation::JSONEncoder::OutputFormatting __swiftcall JSONEncoder.OutputFormatting.init(rawValue:)(Foundation::JSONEncoder::OutputFormatting rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

uint64_t (*JSONEncoder.outputFormatting.modify(void *a1))(void *a1)
{
  id v3 = *(os_unfair_lock_s **)(v1 + 136);
  a1[1] = v1;
  a1[2] = v3;
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *a1 = *(void *)(v1 + 16);
  return PropertyListEncoder.outputFormat.modify;
}

uint64_t key path setter for JSONEncoder.dateEncodingStrategy : JSONEncoder(uint64_t a1, uint64_t *a2)
{
  id v2 = *(void **)(a1 + 8);
  uint64_t v3 = *a2;
  char v4 = *(unsigned char *)(a1 + 16);
  v7[0] = *(id *)a1;
  v7[1] = v2;
  char v8 = v4;
  uint64_t v5 = *(uint64_t (**)(id *))(*(void *)v3 + 128);
  outlined copy of JSONEncoder.DateEncodingStrategy(v7[0], (uint64_t)v2, v4);
  return v5(v7);
}

uint64_t JSONEncoder.dateEncodingStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 136);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  char v4 = *(void **)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  char v6 = *(unsigned char *)(v1 + 40);
  *(unsigned char *)(a1 + 16) = v6;
  swift_retain();
  outlined copy of JSONEncoder.DateEncodingStrategy(v4, v5, v6);
  os_unfair_lock_unlock(v3 + 4);

  return swift_release();
}

void (*JSONEncoder.dateEncodingStrategy.modify(void *a1))(void ***a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  char v4 = *(os_unfair_lock_s **)(v1 + 136);
  v3[3] = v1;
  v3[4] = v4;
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  uint64_t v5 = *(void **)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  *uint64_t v3 = v5;
  v3[1] = v6;
  char v7 = *(unsigned char *)(v1 + 40);
  *((unsigned char *)v3 + 16) = v7;
  outlined copy of JSONEncoder.DateEncodingStrategy(v5, v6, v7);
  return JSONEncoder.dateEncodingStrategy.modify;
}

void JSONEncoder.dateEncodingStrategy.modify(void ***a1)
{
  uint64_t v1 = *a1;
  id v2 = (*a1)[3];
  uint64_t v3 = (os_unfair_lock_s *)(*a1)[4];
  char v4 = **a1;
  uint64_t v5 = (uint64_t)v1[1];
  uint64_t v6 = (void *)*((void *)v2 + 3);
  uint64_t v7 = *((void *)v2 + 4);
  char v8 = *((unsigned char *)v1 + 16);
  *((void *)v2 + 3) = v4;
  *((void *)v2 + 4) = v5;
  char v9 = *((unsigned char *)v2 + 40);
  *((unsigned char *)v2 + 40) = v8;
  outlined copy of JSONEncoder.DateEncodingStrategy(v4, v5, v8);
  outlined consume of JSONEncoder.DateEncodingStrategy(v6, v7, v9);
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  outlined consume of JSONEncoder.DateEncodingStrategy(*v1, (uint64_t)v1[1], *((unsigned char *)v1 + 16));

  free(v1);
}

uint64_t JSONEncoder.dataEncodingStrategy.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v3 = (os_unfair_lock_s *)v1[17];
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  unint64_t v5 = v1[6];
  unint64_t v4 = v1[7];
  *a1 = v5;
  a1[1] = v4;
  swift_retain();
  outlined copy of JSONEncoder.KeyEncodingStrategy(v5);
  os_unfair_lock_unlock(v3 + 4);

  return swift_release();
}

unint64_t (*JSONEncoder.dataEncodingStrategy.modify(unint64_t *a1))(unint64_t *a1)
{
  uint64_t v3 = (os_unfair_lock_s *)v1[17];
  a1[2] = (unint64_t)v1;
  a1[3] = (unint64_t)v3;
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  unint64_t v4 = v1[6];
  unint64_t v5 = v1[7];
  *a1 = v4;
  a1[1] = v5;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v4);
  return JSONEncoder.dataEncodingStrategy.modify;
}

unint64_t JSONEncoder.dataEncodingStrategy.modify(unint64_t *a1)
{
  unint64_t v1 = a1[2];
  id v2 = (os_unfair_lock_s *)a1[3];
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v5 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = *a1;
  *(void *)(v1 + 56) = v4;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v3);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v5);
  swift_retain();
  os_unfair_lock_unlock(v2 + 4);
  swift_release();

  return outlined consume of JSONEncoder.KeyEncodingStrategy(v3);
}

uint64_t key path setter for JSONEncoder.nonConformingFloatEncodingStrategy : JSONEncoder(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = *a2;
  v10[0] = *a1;
  v10[1] = v2;
  void v10[2] = v3;
  v10[3] = v4;
  v10[4] = v5;
  v10[5] = v6;
  char v8 = *(uint64_t (**)(uint64_t *))(*(void *)v7 + 176);
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v10[0], v2);
  return v8(v10);
}

uint64_t JSONEncoder.nonConformingFloatEncodingStrategy.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (os_unfair_lock_s *)v1[17];
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  uint64_t v4 = v1[8];
  uint64_t v5 = v1[9];
  uint64_t v6 = v1[10];
  uint64_t v7 = v1[11];
  uint64_t v9 = v1[12];
  uint64_t v8 = v1[13];
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v9;
  a1[5] = v8;
  swift_retain();
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v4, v5);
  os_unfair_lock_unlock(v3 + 4);

  return swift_release();
}

void (*JSONEncoder.nonConformingFloatEncodingStrategy.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v4 = (os_unfair_lock_s *)v1[17];
  v3[6] = v1;
  v3[7] = v4;
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  uint64_t v5 = v1[8];
  uint64_t v6 = v1[9];
  uint64_t v7 = v1[10];
  uint64_t v8 = v1[11];
  uint64_t v9 = v1[12];
  uint64_t v10 = v1[13];
  *uint64_t v3 = v5;
  v3[1] = v6;
  v3[2] = v7;
  v3[3] = v8;
  v3[4] = v9;
  v3[5] = v10;
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v5, v6);
  return JSONEncoder.nonConformingFloatEncodingStrategy.modify;
}

void JSONEncoder.nonConformingFloatEncodingStrategy.modify(uint64_t **a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = (void *)(*a1)[6];
  uint64_t v3 = (os_unfair_lock_s *)(*a1)[7];
  uint64_t v4 = **a1;
  uint64_t v5 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v2[8];
  uint64_t v11 = v2[9];
  v2[8] = v4;
  v2[9] = v5;
  v2[10] = v6;
  v2[11] = v7;
  v2[12] = v8;
  v2[13] = v9;
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v4, v5);
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v10, v11);
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(*v1, v1[1]);

  free(v1);
}

uint64_t JSONEncoder.keyEncodingStrategy.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v3 = (os_unfair_lock_s *)v1[17];
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  unint64_t v5 = v1[14];
  unint64_t v4 = v1[15];
  *a1 = v5;
  a1[1] = v4;
  swift_retain();
  outlined copy of JSONEncoder.KeyEncodingStrategy(v5);
  os_unfair_lock_unlock(v3 + 4);

  return swift_release();
}

unint64_t (*JSONEncoder.keyEncodingStrategy.modify(unint64_t *a1))(unint64_t *a1)
{
  uint64_t v3 = (os_unfair_lock_s *)v1[17];
  a1[2] = (unint64_t)v1;
  a1[3] = (unint64_t)v3;
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  unint64_t v4 = v1[14];
  unint64_t v5 = v1[15];
  *a1 = v4;
  a1[1] = v5;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v4);
  return JSONEncoder.keyEncodingStrategy.modify;
}

unint64_t JSONEncoder.keyEncodingStrategy.modify(unint64_t *a1)
{
  unint64_t v1 = a1[2];
  uint64_t v2 = (os_unfair_lock_s *)a1[3];
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v5 = *(void *)(v1 + 112);
  *(void *)(v1 + 112) = *a1;
  *(void *)(v1 + 120) = v4;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v3);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v5);
  swift_retain();
  os_unfair_lock_unlock(v2 + 4);
  swift_release();

  return outlined consume of JSONEncoder.KeyEncodingStrategy(v3);
}

uint64_t JSONEncoder.userInfo.getter()
{
  unint64_t v1 = *(os_unfair_lock_s **)(v0 + 136);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  swift_release();
  uint64_t v2 = *(void *)(v0 + 128);
  swift_retain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v2;
}

uint64_t JSONEncoder.userInfo.setter(uint64_t a1)
{
  unint64_t v3 = *(os_unfair_lock_s **)(v1 + 136);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *(void *)(v1 + 128) = a1;
  swift_bridgeObjectRelease();
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);

  return swift_release();
}

uint64_t JSONEncoder.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 40) = 2;
  *(void *)(v0 + 48) = 1;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  uint64_t v1 = MEMORY[0x1E4FBC868];
  *(void *)(v0 + 120) = 0;
  *(void *)(v0 + 128) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = 0;
  *(void *)(v0 + 136) = v2;
  return v0;
}

void JSONEncoder.encode<A>(_:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = v4;
  uint64_t v31 = v4[2];
  uint64_t v6 = (void *)v4[3];
  uint64_t v7 = v4[4];
  unint64_t v8 = v5[6];
  uint64_t v9 = v5[8];
  Swift::Bool v24 = v6;
  uint64_t v26 = v5[10];
  uint64_t v27 = v5[7];
  uint64_t v10 = v5[12];
  unint64_t v11 = v5[14];
  uint64_t v28 = v5[13];
  uint64_t v29 = v5[9];
  uint64_t v25 = v5[11];
  uint64_t v12 = v5[16];
  uint64_t v30 = v5[15];
  char v13 = *((unsigned char *)v5 + 40);
  type metadata accessor for __JSONEncoder();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 32) = v24;
  *(void *)(v14 + 40) = v7;
  *(unsigned char *)(v14 + 48) = v13;
  *(void *)(v14 + 56) = v8;
  *(void *)(v14 + 64) = v27;
  *(void *)(v14 + 72) = v9;
  *(void *)(v14 + 80) = v29;
  *(void *)(v14 + 88) = v26;
  *(void *)(v14 + 96) = v25;
  *(void *)(v14 + 104) = v10;
  *(void *)(v14 + 112) = v28;
  *(void *)(v14 + 120) = v11;
  *(void *)(v14 + 128) = v30;
  *(void *)(v14 + 136) = v12;
  *(void *)(v14 + 16) = MEMORY[0x1E4FBC860];
  *(void *)(v14 + 24) = v31;
  *(_OWORD *)(v14 + 144) = xmmword_18210F290;
  uint64_t v38 = a3;
  uint64_t v39 = a4;
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  outlined copy of JSONEncoder.DateEncodingStrategy(v24, v7, v13);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v8);
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v9, v29);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v11);
  swift_bridgeObjectRetain();
  specialized __JSONEncoder._wrapGeneric<A>(_:for:_:)((void (*)(void))partial apply for specialized closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:configuration:for:_:), (uint64_t)v37, 0x8000000000000000, 0, 0, 0, 255);
  if (v34) {
    goto LABEL_2;
  }
  uint64_t v16 = v15;
  if (!v15)
  {
    uint64_t v18 = type metadata accessor for EncodingError();
    swift_allocError();
    uint64_t v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
    v20[3] = a3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v20);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
    uint64_t v42 = 0;
    unint64_t v43 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    uint64_t v42 = 0x6576656C2D706F54;
    unint64_t v43 = 0xEA0000000000206CLL;
    v22._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._object = (void *)0x80000001823AAF20;
    v23._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v23);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBAA0], v18);
    swift_willThrow();
LABEL_2:
    swift_release();
    return;
  }
  (*(void (**)(uint64_t *__return_ptr))(*v5 + 96))(&v42);
  char v17 = v42;
  uint64_t v42 = 0;
  LOBYTE(v43) = v17 & 1;
  BYTE1(v43) = (v17 & 2) != 0;
  BYTE2(v43) = (v17 & 8) != 0;
  long long v44 = xmmword_1821115B0;
  JSONWriter.serializeJSON(_:depth:)(v16, 0);
  swift_release();
  swift_release();
}

uint64_t JSONEncoder.encode<A, B>(_:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  double v15 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v17 = (char *)&v20 - v16;
  (*(void (**)(uint64_t, uint64_t, double))(a6 + 16))(a4, a6, v15);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)v7 + 280))(a1, v17, a3, a5);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, AssociatedTypeWitness);
  return v18;
}

uint64_t JSONEncoder.deinit()
{
  unint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  unint64_t v4 = *(void *)(v0 + 112);
  outlined consume of JSONEncoder.DateEncodingStrategy(*(void **)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  outlined consume of JSONEncoder.KeyEncodingStrategy(v1);
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v2, v3);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v4);
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t _JSONKeyedEncodingContainer.codingPath.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return _CodingPathNode.path.getter(a3);
}

uint64_t _JSONKeyedEncodingContainer.encodeNil(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[1];
  type metadata accessor for JSONReference();
  uint64_t inited = swift_initStaticObject();
  uint64_t v7 = *v2;
  unint64_t v8 = v2[2];
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  v52[3] = v10;
  v52[4] = v9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v52);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(boxed_opaque_existential_1, a1, v10);
  uint64_t v12 = _JSONKeyedEncodingContainer._converted(_:)(v52, v7, v5, v8);
  uint64_t v14 = v13;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
  if (*(unsigned char *)(v5 + 32) != 4)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v15 = *(void *)(v5 + 16);
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = 0;
  *(unsigned char *)(v5 + 32) = 7;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v52[0] = v15;
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v14);
  uint64_t v19 = *(void *)(v15 + 16);
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v10) = v17;
    if (*(void *)(v15 + 24) < v21)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, isUniquelyReferenced_nonNull_native);
      uint64_t v22 = v52[0];
      unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v14);
      if ((v10 & 1) != (v24 & 1)) {
        goto LABEL_51;
      }
      unint64_t v18 = v23;
      if ((v10 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      uint64_t v25 = *(void *)(v22 + 56);
      swift_release();
      *(void *)(v25 + 8 * v18) = inited;
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v45 = *(void *)(v5 + 16);
      uint64_t v46 = *(void *)(v5 + 24);
      *(void *)(v5 + 16) = v22;
      *(void *)(v5 + 24) = 0;
      char v47 = *(unsigned char *)(v5 + 32);
      *(unsigned char *)(v5 + 32) = 4;
      outlined consume of JSONReference.Backing(v45, v46, v47);
      return swift_bridgeObjectRelease();
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v22 = v15;
      if (v17) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v18, v12, v14, inited, v22);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  uint64_t v26 = static _DictionaryStorage.copy(original:)();
  uint64_t v22 = v26;
  if (!*(void *)(v15 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }
  uint64_t v27 = (void *)(v26 + 64);
  unint64_t v28 = (unint64_t)((1 << *(unsigned char *)(v22 + 32)) + 63) >> 6;
  if (v22 != v15 || (unint64_t)v27 >= v15 + 64 + 8 * v28) {
    memmove(v27, (const void *)(v15 + 64), 8 * v28);
  }
  uint64_t v49 = v15 + 64;
  int64_t v29 = 0;
  *(void *)(v22 + 16) = *(void *)(v15 + 16);
  uint64_t v30 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v31 = -1;
  if (v30 < 64) {
    uint64_t v31 = ~(-1 << v30);
  }
  unint64_t v32 = v31 & *(void *)(v15 + 64);
  int64_t v50 = (unint64_t)(v30 + 63) >> 6;
  while (1)
  {
    if (v32)
    {
      unint64_t v33 = __clz(__rbit64(v32));
      v32 &= v32 - 1;
      int64_t v51 = v29;
      unint64_t v34 = v33 | (v29 << 6);
      goto LABEL_19;
    }
    int64_t v41 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v41 >= v50) {
      goto LABEL_45;
    }
    unint64_t v42 = *(void *)(v49 + 8 * v41);
    int64_t v43 = v29 + 1;
    if (!v42)
    {
      int64_t v43 = v29 + 2;
      if (v29 + 2 >= v50) {
        goto LABEL_45;
      }
      unint64_t v42 = *(void *)(v49 + 8 * v43);
      if (!v42)
      {
        int64_t v43 = v29 + 3;
        if (v29 + 3 >= v50) {
          goto LABEL_45;
        }
        unint64_t v42 = *(void *)(v49 + 8 * v43);
        if (!v42)
        {
          int64_t v43 = v29 + 4;
          if (v29 + 4 >= v50) {
            goto LABEL_45;
          }
          unint64_t v42 = *(void *)(v49 + 8 * v43);
          if (!v42)
          {
            int64_t v43 = v29 + 5;
            if (v29 + 5 >= v50) {
              goto LABEL_45;
            }
            unint64_t v42 = *(void *)(v49 + 8 * v43);
            if (!v42)
            {
              int64_t v43 = v29 + 6;
              if (v29 + 6 >= v50) {
                goto LABEL_45;
              }
              unint64_t v42 = *(void *)(v49 + 8 * v43);
              if (!v42)
              {
                int64_t v43 = v29 + 7;
                if (v29 + 7 >= v50) {
                  goto LABEL_45;
                }
                unint64_t v42 = *(void *)(v49 + 8 * v43);
                if (!v42)
                {
                  int64_t v43 = v29 + 8;
                  if (v29 + 8 >= v50) {
                    goto LABEL_45;
                  }
                  unint64_t v42 = *(void *)(v49 + 8 * v43);
                  if (!v42) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    unint64_t v32 = (v42 - 1) & v42;
    int64_t v51 = v43;
    unint64_t v34 = __clz(__rbit64(v42)) + (v43 << 6);
LABEL_19:
    uint64_t v35 = 16 * v34;
    long long v36 = (void *)(*(void *)(v15 + 48) + 16 * v34);
    uint64_t v37 = v36[1];
    uint64_t v38 = 8 * v34;
    uint64_t v39 = *(void *)(*(void *)(v15 + 56) + v38);
    uint64_t v40 = (void *)(*(void *)(v22 + 48) + v35);
    *uint64_t v40 = *v36;
    v40[1] = v37;
    *(void *)(*(void *)(v22 + 56) + v38) = v39;
    swift_bridgeObjectRetain();
    swift_retain();
    int64_t v29 = v51;
  }
  uint64_t v44 = v29 + 9;
  if (v29 + 9 >= v50) {
    goto LABEL_45;
  }
  unint64_t v42 = *(void *)(v49 + 8 * v44);
  if (v42)
  {
    int64_t v43 = v29 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    int64_t v43 = v44 + 1;
    if (__OFADD__(v44, 1)) {
      break;
    }
    if (v43 >= v50) {
      goto LABEL_45;
    }
    unint64_t v42 = *(void *)(v49 + 8 * v43);
    ++v44;
    if (v42) {
      goto LABEL_44;
    }
  }
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(char a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v7 = v3[1];
  LOBYTE(v57[0]) = a1;
  uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v10 = v9;
  type metadata accessor for JSONReference();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v8;
  *(void *)(v11 + 24) = v10;
  *(unsigned char *)(v11 + 32) = 1;
  uint64_t v12 = *v4;
  unint64_t v13 = v4[2];
  uint64_t v15 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)(a3 + 24);
  v57[3] = v15;
  v57[4] = v14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v57);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(boxed_opaque_existential_1, a2, v15);
  uint64_t v17 = _JSONKeyedEncodingContainer._converted(_:)(v57, v12, v7, v13);
  uint64_t v19 = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
  if (*(unsigned char *)(v7 + 32) != 4)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v20 = *(void *)(v7 + 16);
  *(void *)(v7 + 16) = 0;
  *(void *)(v7 + 24) = 0;
  *(unsigned char *)(v7 + 32) = 7;
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v57[0] = v20;
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
  uint64_t v24 = *(void *)(v20 + 16);
  BOOL v25 = (v22 & 1) == 0;
  uint64_t v26 = v24 + v25;
  if (__OFADD__(v24, v25))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v15) = v22;
    if (*(void *)(v20 + 24) < v26)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, isUniquelyReferenced_nonNull_native);
      uint64_t v27 = v57[0];
      unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
      if ((v15 & 1) != (v29 & 1)) {
        goto LABEL_51;
      }
      unint64_t v23 = v28;
      if ((v15 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      uint64_t v30 = *(void *)(v27 + 56);
      swift_release();
      *(void *)(v30 + 8 * v23) = v11;
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v50 = *(void *)(v7 + 16);
      uint64_t v51 = *(void *)(v7 + 24);
      *(void *)(v7 + 16) = v27;
      *(void *)(v7 + 24) = 0;
      char v52 = *(unsigned char *)(v7 + 32);
      *(unsigned char *)(v7 + 32) = 4;
      outlined consume of JSONReference.Backing(v50, v51, v52);
      swift_release();
      return swift_bridgeObjectRelease();
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v27 = v20;
      if (v22) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v23, v17, v19, v11, v27);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  uint64_t v31 = static _DictionaryStorage.copy(original:)();
  uint64_t v27 = v31;
  if (!*(void *)(v20 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }
  unint64_t v32 = (void *)(v31 + 64);
  unint64_t v33 = (unint64_t)((1 << *(unsigned char *)(v27 + 32)) + 63) >> 6;
  if (v27 != v20 || (unint64_t)v32 >= v20 + 64 + 8 * v33) {
    memmove(v32, (const void *)(v20 + 64), 8 * v33);
  }
  uint64_t v54 = v20 + 64;
  int64_t v34 = 0;
  *(void *)(v27 + 16) = *(void *)(v20 + 16);
  uint64_t v35 = 1 << *(unsigned char *)(v20 + 32);
  uint64_t v36 = -1;
  if (v35 < 64) {
    uint64_t v36 = ~(-1 << v35);
  }
  unint64_t v37 = v36 & *(void *)(v20 + 64);
  int64_t v55 = (unint64_t)(v35 + 63) >> 6;
  while (1)
  {
    if (v37)
    {
      unint64_t v38 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      int64_t v56 = v34;
      unint64_t v39 = v38 | (v34 << 6);
      goto LABEL_19;
    }
    int64_t v46 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v46 >= v55) {
      goto LABEL_45;
    }
    unint64_t v47 = *(void *)(v54 + 8 * v46);
    int64_t v48 = v34 + 1;
    if (!v47)
    {
      int64_t v48 = v34 + 2;
      if (v34 + 2 >= v55) {
        goto LABEL_45;
      }
      unint64_t v47 = *(void *)(v54 + 8 * v48);
      if (!v47)
      {
        int64_t v48 = v34 + 3;
        if (v34 + 3 >= v55) {
          goto LABEL_45;
        }
        unint64_t v47 = *(void *)(v54 + 8 * v48);
        if (!v47)
        {
          int64_t v48 = v34 + 4;
          if (v34 + 4 >= v55) {
            goto LABEL_45;
          }
          unint64_t v47 = *(void *)(v54 + 8 * v48);
          if (!v47)
          {
            int64_t v48 = v34 + 5;
            if (v34 + 5 >= v55) {
              goto LABEL_45;
            }
            unint64_t v47 = *(void *)(v54 + 8 * v48);
            if (!v47)
            {
              int64_t v48 = v34 + 6;
              if (v34 + 6 >= v55) {
                goto LABEL_45;
              }
              unint64_t v47 = *(void *)(v54 + 8 * v48);
              if (!v47)
              {
                int64_t v48 = v34 + 7;
                if (v34 + 7 >= v55) {
                  goto LABEL_45;
                }
                unint64_t v47 = *(void *)(v54 + 8 * v48);
                if (!v47)
                {
                  int64_t v48 = v34 + 8;
                  if (v34 + 8 >= v55) {
                    goto LABEL_45;
                  }
                  unint64_t v47 = *(void *)(v54 + 8 * v48);
                  if (!v47) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    unint64_t v37 = (v47 - 1) & v47;
    int64_t v56 = v48;
    unint64_t v39 = __clz(__rbit64(v47)) + (v48 << 6);
LABEL_19:
    uint64_t v40 = 16 * v39;
    int64_t v41 = (void *)(*(void *)(v20 + 48) + 16 * v39);
    uint64_t v42 = v41[1];
    uint64_t v43 = 8 * v39;
    uint64_t v44 = *(void *)(*(void *)(v20 + 56) + v43);
    uint64_t v45 = (void *)(*(void *)(v27 + 48) + v40);
    *uint64_t v45 = *v41;
    v45[1] = v42;
    *(void *)(*(void *)(v27 + 56) + v43) = v44;
    swift_bridgeObjectRetain();
    swift_retain();
    int64_t v34 = v56;
  }
  uint64_t v49 = v34 + 9;
  if (v34 + 9 >= v55) {
    goto LABEL_45;
  }
  unint64_t v47 = *(void *)(v54 + 8 * v49);
  if (v47)
  {
    int64_t v48 = v34 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    int64_t v48 = v49 + 1;
    if (__OFADD__(v49, 1)) {
      break;
    }
    if (v48 >= v55) {
      goto LABEL_45;
    }
    unint64_t v47 = *(void *)(v54 + 8 * v48);
    ++v49;
    if (v47) {
      goto LABEL_44;
    }
  }
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(__int16 a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v7 = v3[1];
  LOWORD(v57[0]) = a1;
  uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v10 = v9;
  type metadata accessor for JSONReference();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v8;
  *(void *)(v11 + 24) = v10;
  *(unsigned char *)(v11 + 32) = 1;
  uint64_t v12 = *v4;
  unint64_t v13 = v4[2];
  uint64_t v15 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)(a3 + 24);
  v57[3] = v15;
  v57[4] = v14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v57);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(boxed_opaque_existential_1, a2, v15);
  uint64_t v17 = _JSONKeyedEncodingContainer._converted(_:)(v57, v12, v7, v13);
  uint64_t v19 = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
  if (*(unsigned char *)(v7 + 32) != 4)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v20 = *(void *)(v7 + 16);
  *(void *)(v7 + 16) = 0;
  *(void *)(v7 + 24) = 0;
  *(unsigned char *)(v7 + 32) = 7;
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v57[0] = v20;
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
  uint64_t v24 = *(void *)(v20 + 16);
  BOOL v25 = (v22 & 1) == 0;
  uint64_t v26 = v24 + v25;
  if (__OFADD__(v24, v25))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v15) = v22;
    if (*(void *)(v20 + 24) < v26)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, isUniquelyReferenced_nonNull_native);
      uint64_t v27 = v57[0];
      unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
      if ((v15 & 1) != (v29 & 1)) {
        goto LABEL_51;
      }
      unint64_t v23 = v28;
      if ((v15 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      uint64_t v30 = *(void *)(v27 + 56);
      swift_release();
      *(void *)(v30 + 8 * v23) = v11;
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v50 = *(void *)(v7 + 16);
      uint64_t v51 = *(void *)(v7 + 24);
      *(void *)(v7 + 16) = v27;
      *(void *)(v7 + 24) = 0;
      char v52 = *(unsigned char *)(v7 + 32);
      *(unsigned char *)(v7 + 32) = 4;
      outlined consume of JSONReference.Backing(v50, v51, v52);
      swift_release();
      return swift_bridgeObjectRelease();
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v27 = v20;
      if (v22) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v23, v17, v19, v11, v27);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  uint64_t v31 = static _DictionaryStorage.copy(original:)();
  uint64_t v27 = v31;
  if (!*(void *)(v20 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }
  unint64_t v32 = (void *)(v31 + 64);
  unint64_t v33 = (unint64_t)((1 << *(unsigned char *)(v27 + 32)) + 63) >> 6;
  if (v27 != v20 || (unint64_t)v32 >= v20 + 64 + 8 * v33) {
    memmove(v32, (const void *)(v20 + 64), 8 * v33);
  }
  uint64_t v54 = v20 + 64;
  int64_t v34 = 0;
  *(void *)(v27 + 16) = *(void *)(v20 + 16);
  uint64_t v35 = 1 << *(unsigned char *)(v20 + 32);
  uint64_t v36 = -1;
  if (v35 < 64) {
    uint64_t v36 = ~(-1 << v35);
  }
  unint64_t v37 = v36 & *(void *)(v20 + 64);
  int64_t v55 = (unint64_t)(v35 + 63) >> 6;
  while (1)
  {
    if (v37)
    {
      unint64_t v38 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      int64_t v56 = v34;
      unint64_t v39 = v38 | (v34 << 6);
      goto LABEL_19;
    }
    int64_t v46 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v46 >= v55) {
      goto LABEL_45;
    }
    unint64_t v47 = *(void *)(v54 + 8 * v46);
    int64_t v48 = v34 + 1;
    if (!v47)
    {
      int64_t v48 = v34 + 2;
      if (v34 + 2 >= v55) {
        goto LABEL_45;
      }
      unint64_t v47 = *(void *)(v54 + 8 * v48);
      if (!v47)
      {
        int64_t v48 = v34 + 3;
        if (v34 + 3 >= v55) {
          goto LABEL_45;
        }
        unint64_t v47 = *(void *)(v54 + 8 * v48);
        if (!v47)
        {
          int64_t v48 = v34 + 4;
          if (v34 + 4 >= v55) {
            goto LABEL_45;
          }
          unint64_t v47 = *(void *)(v54 + 8 * v48);
          if (!v47)
          {
            int64_t v48 = v34 + 5;
            if (v34 + 5 >= v55) {
              goto LABEL_45;
            }
            unint64_t v47 = *(void *)(v54 + 8 * v48);
            if (!v47)
            {
              int64_t v48 = v34 + 6;
              if (v34 + 6 >= v55) {
                goto LABEL_45;
              }
              unint64_t v47 = *(void *)(v54 + 8 * v48);
              if (!v47)
              {
                int64_t v48 = v34 + 7;
                if (v34 + 7 >= v55) {
                  goto LABEL_45;
                }
                unint64_t v47 = *(void *)(v54 + 8 * v48);
                if (!v47)
                {
                  int64_t v48 = v34 + 8;
                  if (v34 + 8 >= v55) {
                    goto LABEL_45;
                  }
                  unint64_t v47 = *(void *)(v54 + 8 * v48);
                  if (!v47) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    unint64_t v37 = (v47 - 1) & v47;
    int64_t v56 = v48;
    unint64_t v39 = __clz(__rbit64(v47)) + (v48 << 6);
LABEL_19:
    uint64_t v40 = 16 * v39;
    int64_t v41 = (void *)(*(void *)(v20 + 48) + 16 * v39);
    uint64_t v42 = v41[1];
    uint64_t v43 = 8 * v39;
    uint64_t v44 = *(void *)(*(void *)(v20 + 56) + v43);
    uint64_t v45 = (void *)(*(void *)(v27 + 48) + v40);
    *uint64_t v45 = *v41;
    v45[1] = v42;
    *(void *)(*(void *)(v27 + 56) + v43) = v44;
    swift_bridgeObjectRetain();
    swift_retain();
    int64_t v34 = v56;
  }
  uint64_t v49 = v34 + 9;
  if (v34 + 9 >= v55) {
    goto LABEL_45;
  }
  unint64_t v47 = *(void *)(v54 + 8 * v49);
  if (v47)
  {
    int64_t v48 = v34 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    int64_t v48 = v49 + 1;
    if (__OFADD__(v49, 1)) {
      break;
    }
    if (v48 >= v55) {
      goto LABEL_45;
    }
    unint64_t v47 = *(void *)(v54 + 8 * v48);
    ++v49;
    if (v47) {
      goto LABEL_44;
    }
  }
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _JSONKeyedEncodingContainer.superEncoder()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  unint64_t v5 = v1[2];
  v17[3] = &type metadata for _CodingKey;
  v17[4] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v6 = swift_allocObject();
  v17[0] = v6;
  *(_OWORD *)(v6 + 16) = xmmword_1821115C0;
  *(void *)(v6 + 32) = 0;
  *(unsigned char *)(v6 + 40) = 0;
  swift_retain();
  uint64_t v7 = _JSONKeyedEncodingContainer._converted(_:)(v17, v3, v4, v5);
  uint64_t v9 = v8;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  uint64_t v10 = *v1;
  uint64_t v11 = v1[1];
  uint64_t v12 = *(void *)(v10 + 144);
  uint64_t v13 = type metadata accessor for __JSONReferencingEncoder();
  uint64_t v14 = swift_allocObject();
  swift_retain();
  swift_retain();
  uint64_t v15 = specialized __JSONReferencingEncoder.init(referencing:key:convertedKey:codingPathNode:wrapping:)(v3, 0x7265707573, 0xE500000000000000, 0, 0, v7, v9, v12, v11, v14);
  a1[3] = v13;
  uint64_t result = lazy protocol witness table accessor for type __JSONEncoder and conformance __JSONEncoder((unint64_t *)&lazy protocol witness table cache variable for type __JSONReferencingEncoder and conformance __JSONEncoder, (void (*)(uint64_t))type metadata accessor for __JSONReferencingEncoder);
  a1[4] = result;
  *a1 = v15;
  return result;
}

uint64_t _JSONKeyedEncodingContainer.superEncoder(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v36 = a3;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v7 = v35;
  MEMORY[0x1F4188790](a1);
  int64_t v34 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v30 - v11;
  uint64_t v33 = *v3;
  uint64_t v13 = v33;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
  v14((char *)&v30 - v11, a1, v6, v10);
  uint64_t v15 = v3[1];
  unint64_t v16 = v3[2];
  uint64_t v17 = *(void *)(a2 + 24);
  v37[3] = v6;
  v37[4] = v17;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v37);
  ((void (*)(uint64_t *, uint64_t, uint64_t))v14)(boxed_opaque_existential_1, a1, v6);
  swift_retain();
  uint64_t v19 = _JSONKeyedEncodingContainer._converted(_:)(v37, v13, v15, v16);
  uint64_t v31 = v20;
  uint64_t v32 = v19;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  uint64_t v21 = *v3;
  uint64_t v22 = v3[1];
  unint64_t v23 = *(void *)(v21 + 144);
  uint64_t v24 = type metadata accessor for __JSONReferencingEncoder();
  uint64_t v25 = swift_allocObject();
  uint64_t v26 = (uint64_t)v34;
  ((void (*)(char *, char *, uint64_t))v14)(v34, v12, v6);
  swift_retain();
  swift_retain();
  uint64_t v27 = specialized __JSONReferencingEncoder.init(referencing:key:convertedKey:codingPathNode:wrapping:)(v33, v26, v32, v31, v23, v22, v25, v6, v17);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v6);
  unint64_t v28 = v36;
  v36[3] = v24;
  uint64_t result = lazy protocol witness table accessor for type __JSONEncoder and conformance __JSONEncoder((unint64_t *)&lazy protocol witness table cache variable for type __JSONReferencingEncoder and conformance __JSONEncoder, (void (*)(uint64_t))type metadata accessor for __JSONReferencingEncoder);
  v28[4] = result;
  *unint64_t v28 = v27;
  return result;
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.codingPath.getter in conformance _JSONKeyedEncodingContainer<A>()
{
  return _JSONKeyedEncodingContainer.codingPath.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeNil(forKey:) in conformance _JSONKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return _JSONKeyedEncodingContainer.encodeNil(forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(char a1, uint64_t a2, uint64_t a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(__int16 a1, uint64_t a2, uint64_t a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>()
{
  return KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E4FBBFF0]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E4FBC018]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E4FBC040]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E4FBC008]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E4FBC028]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E4FBC010]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E4FBC038]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(a1 & 0x1FF);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(a1 & 0x1FFFF);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  return a5(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t _JSONUnkeyedEncodingContainer.encodeNil()()
{
  uint64_t v1 = *(void *)(v0 + 8);
  type metadata accessor for JSONReference();
  uint64_t result = swift_initStaticObject();
  if (*(unsigned char *)(v1 + 32) == 3)
  {
    uint64_t v6 = *(void *)(v1 + 16);
    *(void *)(v1 + 16) = 0;
    *(void *)(v1 + 24) = 0;
    *(unsigned char *)(v1 + 32) = 7;
    MEMORY[0x185302590]();
    if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v3 = *(void *)(v1 + 16);
    uint64_t v4 = *(void *)(v1 + 24);
    *(void *)(v1 + 16) = v6;
    *(void *)(v1 + 24) = 0;
    char v5 = *(unsigned char *)(v1 + 32);
    *(unsigned char *)(v1 + 32) = 3;
    return outlined consume of JSONReference.Backing(v3, v4, v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _JSONUnkeyedEncodingContainer.encode(_:)()
{
  uint64_t v1 = *(void *)(v0 + 8);
  type metadata accessor for JSONReference();
  uint64_t result = swift_initStaticObject();
  if (*(unsigned char *)(v1 + 32) == 3)
  {
    uint64_t v7 = *(void *)(v1 + 16);
    *(void *)(v1 + 16) = 0;
    *(void *)(v1 + 24) = 0;
    *(unsigned char *)(v1 + 32) = 7;
    uint64_t v3 = swift_retain_n();
    MEMORY[0x185302590](v3);
    if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v4 = *(void *)(v1 + 16);
    uint64_t v5 = *(void *)(v1 + 24);
    *(void *)(v1 + 16) = v7;
    *(void *)(v1 + 24) = 0;
    char v6 = *(unsigned char *)(v1 + 32);
    *(unsigned char *)(v1 + 32) = 3;
    outlined consume of JSONReference.Backing(v4, v5, v6);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v4 = v3;
  type metadata accessor for JSONReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  *(void *)(result + 24) = v4;
  *(unsigned char *)(result + 32) = 1;
  if (*(unsigned char *)(v1 + 32) == 3)
  {
    double v10 = *(void *)(v1 + 16);
    *(void *)(v1 + 16) = 0;
    *(void *)(v1 + 24) = 0;
    *(unsigned char *)(v1 + 32) = 7;
    char v6 = swift_retain();
    MEMORY[0x185302590](v6);
    if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v7 = *(void *)(v1 + 16);
    uint64_t v8 = *(void *)(v1 + 24);
    *(void *)(v1 + 16) = v10;
    *(void *)(v1 + 24) = 0;
    uint64_t v9 = *(unsigned char *)(v1 + 32);
    *(unsigned char *)(v1 + 32) = 3;
    outlined consume of JSONReference.Backing(v7, v8, v9);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v4 = v3;
  type metadata accessor for JSONReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  *(void *)(result + 24) = v4;
  *(unsigned char *)(result + 32) = 1;
  if (*(unsigned char *)(v1 + 32) == 3)
  {
    double v10 = *(void *)(v1 + 16);
    *(void *)(v1 + 16) = 0;
    *(void *)(v1 + 24) = 0;
    *(unsigned char *)(v1 + 32) = 7;
    char v6 = swift_retain();
    MEMORY[0x185302590](v6);
    if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v7 = *(void *)(v1 + 16);
    uint64_t v8 = *(void *)(v1 + 24);
    *(void *)(v1 + 16) = v10;
    *(void *)(v1 + 24) = 0;
    uint64_t v9 = *(unsigned char *)(v1 + 32);
    *(unsigned char *)(v1 + 32) = 3;
    outlined consume of JSONReference.Backing(v7, v8, v9);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v4 = v3;
  type metadata accessor for JSONReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  *(void *)(result + 24) = v4;
  *(unsigned char *)(result + 32) = 1;
  if (*(unsigned char *)(v1 + 32) == 3)
  {
    double v10 = *(void *)(v1 + 16);
    *(void *)(v1 + 16) = 0;
    *(void *)(v1 + 24) = 0;
    *(unsigned char *)(v1 + 32) = 7;
    char v6 = swift_retain();
    MEMORY[0x185302590](v6);
    if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v7 = *(void *)(v1 + 16);
    uint64_t v8 = *(void *)(v1 + 24);
    *(void *)(v1 + 16) = v10;
    *(void *)(v1 + 24) = 0;
    uint64_t v9 = *(unsigned char *)(v1 + 32);
    *(unsigned char *)(v1 + 32) = 3;
    outlined consume of JSONReference.Backing(v7, v8, v9);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v4 = v3;
  type metadata accessor for JSONReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  *(void *)(result + 24) = v4;
  *(unsigned char *)(result + 32) = 1;
  if (*(unsigned char *)(v1 + 32) == 3)
  {
    double v10 = *(void *)(v1 + 16);
    *(void *)(v1 + 16) = 0;
    *(void *)(v1 + 24) = 0;
    *(unsigned char *)(v1 + 32) = 7;
    char v6 = swift_retain();
    MEMORY[0x185302590](v6);
    if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v7 = *(void *)(v1 + 16);
    uint64_t v8 = *(void *)(v1 + 24);
    *(void *)(v1 + 16) = v10;
    *(void *)(v1 + 24) = 0;
    uint64_t v9 = *(unsigned char *)(v1 + 32);
    *(unsigned char *)(v1 + 32) = 3;
    outlined consume of JSONReference.Backing(v7, v8, v9);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v4 = v3;
  type metadata accessor for JSONReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  *(void *)(result + 24) = v4;
  *(unsigned char *)(result + 32) = 1;
  if (*(unsigned char *)(v1 + 32) == 3)
  {
    double v10 = *(void *)(v1 + 16);
    *(void *)(v1 + 16) = 0;
    *(void *)(v1 + 24) = 0;
    *(unsigned char *)(v1 + 32) = 7;
    char v6 = swift_retain();
    MEMORY[0x185302590](v6);
    if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v7 = *(void *)(v1 + 16);
    uint64_t v8 = *(void *)(v1 + 24);
    *(void *)(v1 + 16) = v10;
    *(void *)(v1 + 24) = 0;
    uint64_t v9 = *(unsigned char *)(v1 + 32);
    *(unsigned char *)(v1 + 32) = 3;
    outlined consume of JSONReference.Backing(v7, v8, v9);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _JSONUnkeyedEncodingContainer.encode(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 8);
  type metadata accessor for JSONReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  *(unsigned char *)(result + 32) = 0;
  if (*(unsigned char *)(v5 + 32) == 3)
  {
    uint64_t v11 = *(void *)(v5 + 16);
    *(void *)(v5 + 16) = 0;
    *(void *)(v5 + 24) = 0;
    *(unsigned char *)(v5 + 32) = 7;
    swift_bridgeObjectRetain();
    uint64_t v7 = swift_retain();
    MEMORY[0x185302590](v7);
    if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v8 = *(void *)(v5 + 16);
    uint64_t v9 = *(void *)(v5 + 24);
    *(void *)(v5 + 16) = v11;
    *(void *)(v5 + 24) = 0;
    char v10 = *(unsigned char *)(v5 + 32);
    *(unsigned char *)(v5 + 32) = 3;
    outlined consume of JSONReference.Backing(v8, v9, v10);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *_JSONUnkeyedEncodingContainer.encode(_:)(float a1)
{
  char v6 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = v6[1];
  uint64_t result = outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy((long long *)(v4 + 72), v17);
  unint64_t v8 = *(void *)(v4 + 144);
  unint64_t v9 = *(void *)(v5 + 16);
  int v10 = *(unsigned __int8 *)(v5 + 32);
  if (v10 == 4)
  {
    uint64_t v11 = *(void *)(v9 + 16);
    outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v17, (void (*)(void, void, void, void, void, void))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
    goto LABEL_6;
  }
  if (v10 != 3)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (!(v9 >> 62))
  {
    uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v17, (void (*)(void, void, void, void, void, void))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
LABEL_6:
    swift_retain();
    goto LABEL_7;
  }
  uint64_t v16 = *(void *)(v5 + 24);
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v17, (void (*)(void, void, void, void, void, void))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
  swift_retain();
  outlined copy of JSONReference.Backing(v9, v16, 3);
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  outlined consume of JSONReference.Backing(v9, v16, 3);
LABEL_7:
  specialized static JSONReference.number<A, B>(from:with:for:_:)(v17, v8, v11, 0, 0, 2, a1);
  swift_release();
  uint64_t result = outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v17, (void (*)(void, void, void, void, void, void))outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy);
  if (v2) {
    return result;
  }
  if (*(unsigned char *)(v5 + 32) != 3)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  uint64_t v18 = *(void *)(v5 + 16);
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = 0;
  *(unsigned char *)(v5 + 32) = 7;
  uint64_t v12 = swift_retain();
  MEMORY[0x185302590](v12);
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v13 = *(void *)(v5 + 16);
  uint64_t v14 = *(void *)(v5 + 24);
  *(void *)(v5 + 16) = v18;
  *(void *)(v5 + 24) = 0;
  char v15 = *(unsigned char *)(v5 + 32);
  *(unsigned char *)(v5 + 32) = 3;
  outlined consume of JSONReference.Backing(v13, v14, v15);
  return (void *)swift_release();
}

void *_JSONUnkeyedEncodingContainer.encode(_:)(double a1)
{
  char v6 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = v6[1];
  uint64_t result = outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy((long long *)(v4 + 72), v17);
  unint64_t v8 = *(void *)(v4 + 144);
  unint64_t v9 = *(void *)(v5 + 16);
  int v10 = *(unsigned __int8 *)(v5 + 32);
  if (v10 == 4)
  {
    uint64_t v11 = *(void *)(v9 + 16);
    outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v17, (void (*)(void, void, void, void, void, void))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
    goto LABEL_6;
  }
  if (v10 != 3)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (!(v9 >> 62))
  {
    uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v17, (void (*)(void, void, void, void, void, void))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
LABEL_6:
    swift_retain();
    goto LABEL_7;
  }
  uint64_t v16 = *(void *)(v5 + 24);
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v17, (void (*)(void, void, void, void, void, void))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
  swift_retain();
  outlined copy of JSONReference.Backing(v9, v16, 3);
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  outlined consume of JSONReference.Backing(v9, v16, 3);
LABEL_7:
  specialized static JSONReference.number<A, B>(from:with:for:_:)(v17, v8, v11, 0, 0, 2, a1);
  swift_release();
  uint64_t result = outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v17, (void (*)(void, void, void, void, void, void))outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy);
  if (v2) {
    return result;
  }
  if (*(unsigned char *)(v5 + 32) != 3)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  uint64_t v18 = *(void *)(v5 + 16);
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = 0;
  *(unsigned char *)(v5 + 32) = 7;
  uint64_t v12 = swift_retain();
  MEMORY[0x185302590](v12);
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v13 = *(void *)(v5 + 16);
  uint64_t v14 = *(void *)(v5 + 24);
  *(void *)(v5 + 16) = v18;
  *(void *)(v5 + 24) = 0;
  char v15 = *(unsigned char *)(v5 + 32);
  *(unsigned char *)(v5 + 32) = 3;
  outlined consume of JSONReference.Backing(v13, v14, v15);
  return (void *)swift_release();
}

void _JSONUnkeyedEncodingContainer.nestedUnkeyedContainer()(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  unint64_t v4 = v1[1];
  unint64_t v6 = v4 + 16;
  unint64_t v5 = *(void *)(v4 + 16);
  int v7 = *(unsigned __int8 *)(v4 + 32);
  if (v7 == 4)
  {
    uint64_t v8 = *(void *)(v5 + 16);
    goto LABEL_6;
  }
  if (v7 != 3)
  {
LABEL_21:
    __break(1u);
    return;
  }
  if (v5 >> 62) {
    goto LABEL_19;
  }
  uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
LABEL_6:
    type metadata accessor for JSONReference();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = MEMORY[0x1E4FBC860];
    *(void *)(v9 + 24) = 0;
    *(unsigned char *)(v9 + 32) = 3;
    if (*(unsigned char *)(v4 + 32) != 3)
    {
      __break(1u);
      goto LABEL_21;
    }
    uint64_t v10 = v9;
    uint64_t v19 = *(void *)(v4 + 16);
    *(void *)unint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    *(unsigned char *)(v4 + 32) = 7;
    uint64_t v11 = swift_retain();
    MEMORY[0x185302590](v11);
    if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v12 = *(void *)(v4 + 16);
    uint64_t v13 = *(void *)(v4 + 24);
    *(void *)(v4 + 16) = v19;
    *(void *)(v4 + 24) = 0;
    char v14 = *(unsigned char *)(v4 + 32);
    *(unsigned char *)(v4 + 32) = 3;
    outlined consume of JSONReference.Backing(v12, v13, v14);
    unint64_t v5 = *v2;
    unint64_t v6 = v2[2];
    uint64_t v2 = (unint64_t *)swift_allocObject();
    v2[5] = (unint64_t)&type metadata for _CodingKey;
    v2[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v15 = swift_allocObject();
    v2[2] = v15;
    *(void *)(v15 + 24) = 0;
    *(void *)(v15 + 32) = 0;
    *(void *)(v15 + 16) = v8;
    *(unsigned char *)(v15 + 40) = 2;
    v2[7] = v6;
    if (v6 >> 62)
    {
      uint64_t v16 = 0;
      if (v6 >> 62 != 1) {
        goto LABEL_14;
      }
      uint64_t v17 = (uint64_t *)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      uint64_t v17 = (uint64_t *)(v6 + 64);
    }
    uint64_t v16 = *v17;
    swift_retain();
LABEL_14:
    if (!__OFADD__(v16, 1)) {
      break;
    }
    __break(1u);
LABEL_19:
    uint64_t v18 = *(void *)(v4 + 24);
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    outlined consume of JSONReference.Backing(v5, v18, 3);
  }
  v2[8] = v16 + 1;
  a1[3] = (unint64_t)&unk_1ECA41F28;
  a1[4] = lazy protocol witness table accessor for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer();
  *a1 = v5;
  a1[1] = v10;
  a1[2] = (unint64_t)v2;

  swift_retain();
}

void _JSONUnkeyedEncodingContainer.superEncoder()(uint64_t *a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  unint64_t v5 = *(void *)(v3 + 16);
  int v6 = *(unsigned __int8 *)(v3 + 32);
  if (v6 == 4)
  {
    uint64_t v7 = *(void *)(v5 + 16);
    goto LABEL_6;
  }
  if (v6 == 3)
  {
    if (v5 >> 62)
    {
      uint64_t v11 = *(void *)(v3 + 24);
      swift_retain();
      outlined copy of JSONReference.Backing(v5, v11, 3);
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      outlined consume of JSONReference.Backing(v5, v11, 3);
      goto LABEL_7;
    }
    uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_6:
    swift_retain();
LABEL_7:
    unint64_t v8 = *(void *)(v4 + 144);
    uint64_t v9 = type metadata accessor for __JSONReferencingEncoder();
    swift_allocObject();
    swift_retain();
    swift_retain();
    uint64_t v10 = __JSONReferencingEncoder.init(referencing:at:codingPathNode:wrapping:)(v4, v7, v8, v3);
    a1[3] = v9;
    a1[4] = lazy protocol witness table accessor for type __JSONEncoder and conformance __JSONEncoder((unint64_t *)&lazy protocol witness table cache variable for type __JSONReferencingEncoder and conformance __JSONEncoder, (void (*)(uint64_t))type metadata accessor for __JSONReferencingEncoder);
    *a1 = v10;
    return;
  }
  __break(1u);
}

uint64_t protocol witness for UnkeyedEncodingContainer.codingPath.getter in conformance _JSONUnkeyedEncodingContainer()
{
  return _CodingPathNode.path.getter(*(void *)(v0 + 16));
}

uint64_t protocol witness for UnkeyedEncodingContainer.count.getter in conformance _JSONUnkeyedEncodingContainer()
{
  return specialized _JSONUnkeyedEncodingContainer.count.getter(*(void *)(v0 + 8));
}

uint64_t protocol witness for UnkeyedEncodingContainer.encodeNil() in conformance _JSONUnkeyedEncodingContainer()
{
  return _JSONUnkeyedEncodingContainer.encodeNil()();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer()
{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(uint64_t a1, uint64_t a2)
{
  return _JSONUnkeyedEncodingContainer.encode(_:)(a1, a2);
}

void *protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(double a1)
{
  return _JSONUnkeyedEncodingContainer.encode(_:)(a1);
}

void *protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(float a1)
{
  return _JSONUnkeyedEncodingContainer.encode(_:)(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encodeConditional<A>(_:) in conformance _JSONUnkeyedEncodingContainer()
{
  return UnkeyedEncodingContainer.encodeConditional<A>(_:)();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(contentsOf:) in conformance _JSONUnkeyedEncodingContainer()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t __JSONEncoder.encode(_:)(float a1)
{
  uint64_t v3 = v1;
  if (((*(uint64_t (**)(void))(*v1 + 208))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_4;
  }
  unint64_t v5 = v1[18];
  outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy((long long *)(v3 + 9), v8);
  swift_retain();
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v8, (void (*)(void, void, void, void, void, void))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
  specialized static JSONReference.number<A, B>(from:with:for:_:)(v8, v5, 0, 0, 0, 255, a1);
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v8, (void (*)(void, void, void, void, void, void))outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy);
  uint64_t result = swift_release();
  if (v2) {
    return result;
  }
  uint64_t v7 = swift_retain();
  MEMORY[0x185302590](v7);
  if (*(void *)((v3[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v3[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    goto LABEL_7;
  }
LABEL_4:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_release();
}

uint64_t protocol witness for Encoder.codingPath.getter in conformance __JSONEncoder()
{
  unint64_t v1 = *(void *)(*(void *)v0 + 144);
  swift_retain();
  uint64_t v2 = _CodingPathNode.path.getter(v1);
  swift_release();
  return v2;
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __JSONEncoder(float a1)
{
  return __JSONEncoder.encode(_:)(a1);
}

uint64_t specialized closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:configuration:for:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v11[3] = type metadata accessor for __JSONEncoder();
  v11[4] = lazy protocol witness table accessor for type __JSONEncoder and conformance __JSONEncoder(&lazy protocol witness table cache variable for type __JSONEncoder and conformance __JSONEncoder, (void (*)(uint64_t))type metadata accessor for __JSONEncoder);
  v11[0] = a1;
  uint64_t v9 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(a5 + 16);
  swift_retain();
  v9(v11, a3, a4, a5);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t __JSONReferencingEncoder.init(referencing:at:codingPathNode:wrapping:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 160) = a1;
  *(void *)(v4 + 168) = a4;
  *(void *)(v4 + 176) = a2;
  *(void *)(v4 + 184) = 0;
  uint64_t v30 = *(void *)(a1 + 40);
  uint64_t v31 = *(void **)(a1 + 32);
  char v29 = *(unsigned char *)(a1 + 48);
  uint64_t v32 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 80);
  uint64_t v27 = *(void *)(a1 + 88);
  unint64_t v28 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 104);
  uint64_t v25 = *(void *)(a1 + 24);
  uint64_t v26 = *(void *)(a1 + 96);
  uint64_t v9 = *(void *)(a1 + 112);
  unint64_t v10 = *(void *)(a1 + 120);
  uint64_t v11 = *(void *)(a1 + 128);
  uint64_t v23 = *(void *)(a1 + 72);
  uint64_t v24 = *(void *)(a1 + 136);
  uint64_t v12 = (void *)swift_allocObject();
  v12[5] = &type metadata for _CodingKey;
  v12[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t result = swift_allocObject();
  v12[2] = result;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = a2;
  *(unsigned char *)(result + 40) = 2;
  unint64_t v14 = a3 >> 62;
  v12[7] = a3;
  if (a3 >> 62)
  {
    uint64_t v15 = 0;
    if (v14 != 1) {
      goto LABEL_6;
    }
    uint64_t v16 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v16 = (uint64_t *)(a3 + 64);
  }
  uint64_t v15 = *v16;
  uint64_t result = swift_retain();
LABEL_6:
  if (__OFADD__(v15, 1))
  {
    __break(1u);
  }
  else
  {
    v12[8] = v15 + 1;
    if (v14)
    {
      uint64_t v17 = v25;
      if (v14 == 1)
      {
        uint64_t v21 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
        outlined copy of JSONEncoder.DateEncodingStrategy(v31, v30, v29);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v28);
        uint64_t v18 = v23;
        outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v23, v7);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v10);
        uint64_t v19 = v24;
        swift_bridgeObjectRetain();
        swift_release();
        uint64_t v20 = v21;
      }
      else
      {
        outlined copy of JSONEncoder.DateEncodingStrategy(v31, v30, v29);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v28);
        uint64_t v18 = v23;
        outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v23, v7);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v10);
        uint64_t v19 = v24;
        swift_bridgeObjectRetain();
        uint64_t v20 = 0;
      }
    }
    else
    {
      uint64_t v22 = *(void *)(a3 + 64);
      outlined copy of JSONEncoder.DateEncodingStrategy(v31, v30, v29);
      outlined copy of JSONEncoder.KeyEncodingStrategy(v28);
      uint64_t v18 = v23;
      outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v23, v7);
      outlined copy of JSONEncoder.KeyEncodingStrategy(v10);
      swift_bridgeObjectRetain();
      uint64_t v19 = v24;
      swift_release();
      uint64_t v20 = v22;
      uint64_t v17 = v25;
    }
    *(void *)(v4 + 32) = v31;
    *(void *)(v4 + 40) = v30;
    *(unsigned char *)(v4 + 48) = v29;
    *(void *)(v4 + 56) = v28;
    *(void *)(v4 + 64) = v32;
    *(void *)(v4 + 72) = v18;
    *(void *)(v4 + 80) = v7;
    *(void *)(v4 + 88) = v27;
    *(void *)(v4 + 96) = v26;
    *(void *)(v4 + 104) = v8;
    *(void *)(v4 + 112) = v9;
    *(void *)(v4 + 120) = v10;
    *(void *)(v4 + 128) = v11;
    *(void *)(v4 + 16) = MEMORY[0x1E4FBC860];
    *(void *)(v4 + 24) = v17;
    *(void *)(v4 + 136) = v19;
    *(void *)(v4 + 144) = v12;
    *(void *)(v4 + 152) = v20;
    return v4;
  }
  return result;
}

BOOL __JSONReferencingEncoder.canEncodeNewValue.getter()
{
  unint64_t v1 = v0[2];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v3 = v0[18];
  swift_retain();
  uint64_t v4 = _CodingPathNode.path.getter(v3);
  swift_release();
  uint64_t v5 = *(void *)(v4 + 16);
  swift_bridgeObjectRelease();
  unint64_t v6 = *(void *)(v0[20] + 144);
  swift_retain();
  uint64_t v7 = _CodingPathNode.path.getter(v6);
  swift_release();
  uint64_t v8 = *(void *)(v7 + 16);
  swift_bridgeObjectRelease();
  return v2 == v5 + ~v8;
}

uint64_t __JSONReferencingEncoder.__ivar_destroyer()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 168);

  return outlined consume of __JSONReferencingEncoder.Reference(v1);
}

uint64_t __JSONReferencingEncoder.deinit(unint64_t a1)
{
  uint64_t v6 = v1;
  unint64_t v9 = *(void *)(v1 + 16);
  uint64_t v7 = (uint64_t *)(v1 + 16);
  unint64_t v8 = v9;
  if (!(v9 >> 62))
  {
    uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v10 == 1) {
      goto LABEL_3;
    }
LABEL_7:
    if (v10) {
      goto LABEL_72;
    }
    type metadata accessor for JSONReference();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = MEMORY[0x1E4FBC868];
    *(void *)(v11 + 24) = 0;
    *(unsigned char *)(v11 + 32) = 4;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  a1 = swift_bridgeObjectRelease();
  if (v10 != 1) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v11 = *v7;
  if ((unint64_t)*v7 >> 62) {
    goto LABEL_27;
  }
  uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v12)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  while (1)
  {
    specialized RangeReplaceableCollection<>.popLast()();
    uint64_t v11 = v13;
LABEL_9:
    uint64_t v4 = *(void *)(v6 + 168);
    uint64_t v2 = *(void *)(v6 + 176);
    uint64_t v12 = *(void *)(v6 + 184);
    if (v4 < 0) {
      break;
    }
    unint64_t v14 = *(void *)(v4 + 16);
    if (*(unsigned char *)(v4 + 32) != 3)
    {
      __break(1u);
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
    uint64_t v3 = *(void *)(v4 + 24);
    uint64_t v58 = *(void *)(v4 + 16);
    *(void *)(v4 + 16) = 0;
    *(void *)(v4 + 24) = 0;
    *(unsigned char *)(v4 + 32) = 7;
    if (v14 >> 62)
    {
      outlined copy of __JSONReferencingEncoder.Reference(v4);
      swift_retain();
      outlined copy of JSONReference.Backing(v14, v3, 3);
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      outlined consume of JSONReference.Backing(v14, v3, 3);
      if (v5 < v2)
      {
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v5 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      outlined copy of __JSONReferencingEncoder.Reference(v4);
      swift_retain();
      if (v5 < v2) {
        goto LABEL_25;
      }
    }
    if ((v2 & 0x8000000000000000) == 0)
    {
      specialized Array.replaceSubrange<A>(_:with:)(v2, v2, v11);
      uint64_t v15 = *(void *)(v4 + 16);
      uint64_t v16 = *(void *)(v4 + 24);
      *(void *)(v4 + 16) = v58;
      *(void *)(v4 + 24) = 0;
      char v17 = *(unsigned char *)(v4 + 32);
      *(unsigned char *)(v4 + 32) = 3;
      outlined consume of JSONReference.Backing(v15, v16, v17);
      swift_release();
      outlined consume of __JSONReferencingEncoder.Reference(v4);
LABEL_67:
      swift_bridgeObjectRelease();
      unint64_t v49 = *(void *)(v6 + 56);
      uint64_t v50 = *(void *)(v6 + 72);
      uint64_t v51 = *(void *)(v6 + 80);
      __srca = *(void **)(v6 + 120);
      outlined consume of JSONEncoder.DateEncodingStrategy(*(void **)(v6 + 32), *(void *)(v6 + 40), *(unsigned char *)(v6 + 48));
      outlined consume of JSONEncoder.KeyEncodingStrategy(v49);
      outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v50, v51);
      outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)__srca);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      outlined consume of __JSONReferencingEncoder.Reference(*(void *)(v6 + 168));
      return v6;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    a1 = swift_bridgeObjectRelease();
    if (!v12) {
      goto LABEL_28;
    }
  }
  uint64_t v3 = v4 & 0x7FFFFFFFFFFFFFFFLL;
  if (*(unsigned char *)((v4 & 0x7FFFFFFFFFFFFFFFLL) + 0x20) != 4)
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  uint64_t v5 = *(void *)((v4 & 0x7FFFFFFFFFFFFFFFLL) + 0x10);
  *(void *)((v4 & 0x7FFFFFFFFFFFFFFFLL) + 0x10) = 0;
  *(void *)((v4 & 0x7FFFFFFFFFFFFFFFLL) + 0x18) = 0;
  *(unsigned char *)((v4 & 0x7FFFFFFFFFFFFFFFLL) + 0x20) = 7;
  outlined copy of __JSONReferencingEncoder.Reference(v4);
  swift_retain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  a1 = specialized __RawDictionaryStorage.find<A>(_:)(v2, v12);
  uint64_t v20 = *(void *)(v5 + 16);
  BOOL v21 = (v19 & 1) == 0;
  BOOL v22 = __OFADD__(v20, v21);
  uint64_t v23 = v20 + v21;
  if (v22)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  LOBYTE(v4) = v19;
  if (*(void *)(v5 + 24) >= v23) {
    goto LABEL_20;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, isUniquelyReferenced_nonNull_native);
  uint64_t v24 = v5;
  a1 = specialized __RawDictionaryStorage.find<A>(_:)(v2, v12);
  if ((v4 & 1) == (v25 & 1))
  {
LABEL_22:
    if ((v4 & 1) == 0)
    {
LABEL_65:
      specialized _NativeDictionary._insert(at:key:value:)(a1, v2, v12, v11, v24);
      swift_bridgeObjectRetain();
      goto LABEL_66;
    }
LABEL_23:
    uint64_t v26 = *(void *)(v24 + 56);
    uint64_t v27 = 8 * a1;
    swift_release();
    *(void *)(v26 + v27) = v11;
LABEL_66:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v46 = *(void *)(v3 + 16);
    uint64_t v47 = *(void *)(v3 + 24);
    *(void *)(v3 + 16) = v24;
    *(void *)(v3 + 24) = 0;
    char v48 = *(unsigned char *)(v3 + 32);
    *(unsigned char *)(v3 + 32) = 4;
    outlined consume of JSONReference.Backing(v46, v47, v48);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    goto LABEL_67;
  }
  a1 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_20:
  if (isUniquelyReferenced_nonNull_native)
  {
    uint64_t v24 = v5;
    goto LABEL_22;
  }
LABEL_30:
  unint64_t v53 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  uint64_t v28 = static _DictionaryStorage.copy(original:)();
  uint64_t v24 = v28;
  if (!*(void *)(v5 + 16))
  {
LABEL_64:
    swift_bridgeObjectRelease();
    a1 = v53;
    if ((v4 & 1) == 0) {
      goto LABEL_65;
    }
    goto LABEL_23;
  }
  char v29 = (char *)(v28 + 64);
  __src = (char *)(v5 + 64);
  uint64_t v57 = v6;
  unint64_t v30 = (unint64_t)((1 << *(unsigned char *)(v24 + 32)) + 63) >> 6;
  if (v24 != v5 || v29 >= &__src[8 * v30]) {
    memmove(v29, __src, 8 * v30);
  }
  int64_t v31 = 0;
  *(void *)(v24 + 16) = *(void *)(v5 + 16);
  uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v33 = -1;
  if (v32 < 64) {
    uint64_t v33 = ~(-1 << v32);
  }
  unint64_t v34 = v33 & *(void *)(v5 + 64);
  int64_t v54 = (unint64_t)(v32 + 63) >> 6;
  while (2)
  {
    uint64_t v6 = v57;
    if (v34)
    {
      unint64_t v35 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      unint64_t v36 = v35 | (v31 << 6);
LABEL_38:
      uint64_t v37 = 16 * v36;
      unint64_t v38 = (void *)(*(void *)(v5 + 48) + 16 * v36);
      uint64_t v39 = v38[1];
      uint64_t v40 = 8 * v36;
      uint64_t v41 = *(void *)(*(void *)(v5 + 56) + v40);
      uint64_t v42 = (void *)(*(void *)(v24 + 48) + v37);
      *uint64_t v42 = *v38;
      v42[1] = v39;
      *(void *)(*(void *)(v24 + 56) + v40) = v41;
      swift_bridgeObjectRetain();
      swift_retain();
      continue;
    }
    break;
  }
  int64_t v43 = v31 + 1;
  if (__OFADD__(v31, 1)) {
    goto LABEL_69;
  }
  if (v43 >= v54) {
    goto LABEL_64;
  }
  unint64_t v44 = *(void *)&__src[8 * v43];
  ++v31;
  if (v44) {
    goto LABEL_63;
  }
  int64_t v31 = v43 + 1;
  if (v43 + 1 >= v54) {
    goto LABEL_64;
  }
  unint64_t v44 = *(void *)&__src[8 * v31];
  if (v44) {
    goto LABEL_63;
  }
  int64_t v31 = v43 + 2;
  if (v43 + 2 >= v54) {
    goto LABEL_64;
  }
  unint64_t v44 = *(void *)&__src[8 * v31];
  if (v44) {
    goto LABEL_63;
  }
  int64_t v31 = v43 + 3;
  if (v43 + 3 >= v54) {
    goto LABEL_64;
  }
  unint64_t v44 = *(void *)&__src[8 * v31];
  if (v44) {
    goto LABEL_63;
  }
  int64_t v31 = v43 + 4;
  if (v43 + 4 >= v54) {
    goto LABEL_64;
  }
  unint64_t v44 = *(void *)&__src[8 * v31];
  if (v44) {
    goto LABEL_63;
  }
  int64_t v31 = v43 + 5;
  if (v43 + 5 >= v54) {
    goto LABEL_64;
  }
  unint64_t v44 = *(void *)&__src[8 * v31];
  if (v44) {
    goto LABEL_63;
  }
  int64_t v31 = v43 + 6;
  if (v43 + 6 >= v54) {
    goto LABEL_64;
  }
  unint64_t v44 = *(void *)&__src[8 * v31];
  if (v44) {
    goto LABEL_63;
  }
  int64_t v31 = v43 + 7;
  if (v43 + 7 >= v54) {
    goto LABEL_64;
  }
  unint64_t v44 = *(void *)&__src[8 * v31];
  if (v44)
  {
LABEL_63:
    unint64_t v34 = (v44 - 1) & v44;
    unint64_t v36 = __clz(__rbit64(v44)) + (v31 << 6);
    goto LABEL_38;
  }
  int64_t v45 = v43 + 8;
  if (v45 >= v54) {
    goto LABEL_64;
  }
  unint64_t v44 = *(void *)&__src[8 * v45];
  if (v44)
  {
    int64_t v31 = v45;
    goto LABEL_63;
  }
  while (1)
  {
    int64_t v31 = v45 + 1;
    if (__OFADD__(v45, 1)) {
      break;
    }
    uint64_t v6 = v57;
    if (v31 >= v54) {
      goto LABEL_64;
    }
    unint64_t v44 = *(void *)&__src[8 * v31];
    ++v45;
    if (v44) {
      goto LABEL_63;
    }
  }
LABEL_71:
  __break(1u);
LABEL_72:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t __JSONReferencingEncoder.__deallocating_deinit(unint64_t a1)
{
  __JSONReferencingEncoder.deinit(a1);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance Int()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance Int8()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance Int16()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance Int64()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance Int128()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance UInt()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance UInt8()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance UInt16()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance UInt32()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance UInt64()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance UInt128()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t outlined init with take of JSONError(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined release of JSONError(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of JSONError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  unsigned int v7 = (((a7 - 1) >> 1) | ((a7 - 1) << 7));
  BOOL v8 = v7 > 5;
  int v9 = (1 << v7) & 0x27;
  if (!v8 && v9 != 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:configuration:for:_:)(uint64_t a1)
{
  return specialized closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:configuration:for:_:)(a1, v1[4], v1[5], v1[2], v1[3]);
}

void *sub_181B6C19C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 96))(&v4);
  *a2 = v4;
  return result;
}

uint64_t sub_181B6C1F8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v4 = *a1;
  return (*(uint64_t (**)(uint64_t *))(*(void *)v2 + 104))(&v4);
}

double sub_181B6C250@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(long long *__return_ptr))(**(void **)a1 + 120))(&v5);
  char v3 = v6;
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(unsigned char *)(a2 + 16) = v3;
  return result;
}

double sub_181B6C2B8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  (*(void (**)(long long *__return_ptr))(**(void **)a1 + 144))(&v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_181B6C314(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = *a2;
  v6[0] = *a1;
  v6[1] = v2;
  long long v4 = *(uint64_t (**)(unint64_t *))(*(void *)v3 + 152);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v6[0]);
  return v4(v6);
}

double sub_181B6C380@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))(**(void **)a1 + 168))(v5);
  long long v3 = v5[1];
  *a2 = v5[0];
  a2[1] = v3;
  double result = *(double *)&v6;
  a2[2] = v6;
  return result;
}

double sub_181B6C3E8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  (*(void (**)(long long *__return_ptr))(**(void **)a1 + 192))(&v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_181B6C444(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = *a2;
  v6[0] = *a1;
  v6[1] = v2;
  long long v4 = *(uint64_t (**)(unint64_t *))(*(void *)v3 + 200);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v6[0]);
  return v4(v6);
}

uint64_t sub_181B6C4B0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 216))();
  *a2 = result;
  return result;
}

uint64_t sub_181B6C4FC(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 224);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t method lookup function for JSONEncoder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for JSONEncoder);
}

uint64_t dispatch thunk of JSONEncoder.outputFormatting.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of JSONEncoder.outputFormatting.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of JSONEncoder.dateEncodingStrategy.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of JSONEncoder.dateEncodingStrategy.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of JSONEncoder.dataEncodingStrategy.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of JSONEncoder.dataEncodingStrategy.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of JSONEncoder.nonConformingFloatEncodingStrategy.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of JSONEncoder.nonConformingFloatEncodingStrategy.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of JSONEncoder.keyEncodingStrategy.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of JSONEncoder.keyEncodingStrategy.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of JSONEncoder.userInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of JSONEncoder.userInfo.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of JSONEncoder.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 264))();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:configuration:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of JSONEncoder.encode<A, B>(_:configuration:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t initializeBufferWithCopyOfBuffer for JSONEncoder.DateEncodingStrategy(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for JSONEncoder.DateEncodingStrategy(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of JSONEncoder.DateEncodingStrategy);
}

void destroy for JSONEncoder.DateEncodingStrategy(uint64_t a1)
{
}

uint64_t *assignWithCopy for JSONEncoder.DateEncodingStrategy(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for JSONEncoder.DateEncodingStrategy(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of JSONEncoder.DateEncodingStrategy, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of JSONEncoder.DateEncodingStrategy);
}

uint64_t *assignWithTake for JSONEncoder.DateEncodingStrategy(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for JSONEncoder.DateEncodingStrategy(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of JSONEncoder.DateEncodingStrategy);
}

uint64_t getEnumTagSinglePayload for JSONEncoder.DateEncodingStrategy(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for JSONEncoder.DateEncodingStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for JSONEncoder.DateEncodingStrategy(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

unint64_t destroy for JSONEncoder.NonConformingFloatEncodingStrategy(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for JSONEncoder.NonConformingFloatEncodingStrategy(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    uint64_t v4 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v4;
    uint64_t v5 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for JSONEncoder.NonConformingFloatEncodingStrategy(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    long long v5 = *(_OWORD *)a2;
    long long v6 = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    *((_OWORD *)a1 + 2) = v6;
    *(_OWORD *)a1 = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for JSONEncoder.NonConformingFloatEncodingStrategy(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for JSONEncoder.NonConformingFloatEncodingStrategy(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for JSONEncoder.NonConformingFloatEncodingStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)unint64_t result = 0u;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t getEnumTag for JSONEncoder.NonConformingFloatEncodingStrategy(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t initializeBufferWithCopyOfBuffer for JSONEncoder.DataEncodingStrategy(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_retain();
  }
  return a1;
}

unint64_t *assignWithCopy for JSONEncoder.DataEncodingStrategy(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      unint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
  return a1;
}

unint64_t *assignWithTake for JSONEncoder.DataEncodingStrategy(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      unint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for JSONEncoder.DataEncodingStrategy(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for JSONEncoder.DataEncodingStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t getEnumTag for JSONEncoder.KeyEncodingStrategy(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t type metadata accessor for __JSONReferencingEncoder()
{
  return self;
}

uint64_t outlined copy of __JSONReferencingEncoder.Reference(uint64_t a1)
{
  if (a1 < 0)
  {
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  else
  {
    return swift_retain();
  }
}

uint64_t destroy for __JSONReferencingEncoder.Reference(uint64_t *a1)
{
  return outlined consume of __JSONReferencingEncoder.Reference(*a1);
}

uint64_t outlined consume of __JSONReferencingEncoder.Reference(uint64_t a1)
{
  if (a1 < 0)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    return swift_release();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for __JSONReferencingEncoder.Reference(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  outlined copy of __JSONReferencingEncoder.Reference(*a2);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t *assignWithCopy for __JSONReferencingEncoder.Reference(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  outlined copy of __JSONReferencingEncoder.Reference(*a2);
  uint64_t v6 = *a1;
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  outlined consume of __JSONReferencingEncoder.Reference(v6);
  return a1;
}

uint64_t *assignWithTake for __JSONReferencingEncoder.Reference(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v3;
  outlined consume of __JSONReferencingEncoder.Reference(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for __JSONReferencingEncoder.Reference(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 6) | (2 * ((*(void *)a1 >> 57) & 0x38 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for __JSONReferencingEncoder.Reference(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 127;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for __JSONReferencingEncoder.Reference(void *a1)
{
  return *a1 >> 63;
}

void *destructiveProjectEnumData for __JSONReferencingEncoder.Reference(void *result)
{
  *result &= ~0x8000000000000000;
  return result;
}

uint64_t *destructiveInjectEnumTag for __JSONReferencingEncoder.Reference(uint64_t *result, uint64_t a2)
{
  void *result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

void *type metadata accessor for __JSONReferencingEncoder.Reference()
{
  return &unk_1ECA403E8;
}

uint64_t initializeBufferWithCopyOfBuffer for JSONReference.Backing(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for JSONEncoder.DateEncodingStrategy(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of JSONReference.Backing);
}

uint64_t destroy for JSONReference.Backing(uint64_t a1)
{
  return outlined consume of JSONReference.Backing(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for JSONEncoder.DateEncodingStrategy(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for JSONReference.Backing(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for JSONEncoder.DateEncodingStrategy(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of JSONReference.Backing, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of JSONReference.Backing);
}

uint64_t *assignWithCopy for JSONEncoder.DateEncodingStrategy(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  *a1 = v7;
  a1[1] = v8;
  uint64_t v12 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for JSONReference.Backing(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for JSONEncoder.DateEncodingStrategy(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of JSONReference.Backing);
}

uint64_t *assignWithTake for JSONEncoder.DateEncodingStrategy(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v8 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for JSONReference.Backing(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF9 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 249);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 7) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for JSONReference.Backing(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 249;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for JSONReference.Backing(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 6u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 7);
  }
}

uint64_t destructiveInjectEnumTag for JSONReference.Backing(uint64_t result, unsigned int a2)
{
  if (a2 >= 7)
  {
    *(void *)unint64_t result = a2 - 7;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 7;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for JSONReference.Backing()
{
  return &type metadata for JSONReference.Backing;
}

void *type metadata accessor for _JSONEncodingStorage()
{
  return &unk_1ECA3ECA8;
}

uint64_t destroy for JSONEncoder._Options(uint64_t a1)
{
  outlined consume of JSONEncoder.DateEncodingStrategy(*(void **)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  if (*(void *)(a1 + 32) >= 2uLL) {
    swift_release();
  }
  if (*(void *)(a1 + 56))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 96) >= 2uLL) {
    swift_release();
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for JSONEncoder._Options(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of JSONEncoder.DateEncodingStrategy(v4, v5, v6);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  unint64_t v7 = *(void *)(a2 + 32);
  if (v7 >= 2)
  {
    uint64_t v11 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = v11;
    swift_retain();
    uint64_t v8 = *(void *)(a2 + 56);
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    uint64_t v8 = *(void *)(a2 + 56);
    if (v8)
    {
LABEL_3:
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v8;
      uint64_t v9 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v9;
      uint64_t v10 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_6;
    }
  }
  long long v12 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_6:
  unint64_t v13 = *(void *)(a2 + 96);
  if (v13 >= 2)
  {
    uint64_t v14 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = v13;
    *(void *)(a1 + 104) = v14;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  }
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for JSONEncoder._Options(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  int v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of JSONEncoder.DateEncodingStrategy(v4, v5, v6);
  unint64_t v7 = *(void **)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  char v9 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  outlined consume of JSONEncoder.DateEncodingStrategy(v7, v8, v9);
  unint64_t v10 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) < 2uLL)
  {
    if (v10 >= 2)
    {
      uint64_t v11 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v10;
      *(void *)(a1 + 40) = v11;
      swift_retain();
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 < 2)
  {
    swift_release();
LABEL_6:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }
  uint64_t v12 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v12;
  swift_retain();
  swift_release();
LABEL_8:
  unint64_t v13 = (_OWORD *)(a1 + 48);
  uint64_t v14 = (_OWORD *)(a2 + 48);
  uint64_t v15 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56))
  {
    if (v15)
    {
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of (positiveInfinity: String, negativeInfinity: String, nan: String)(a1 + 48);
      long long v17 = *(_OWORD *)(a2 + 64);
      long long v16 = *(_OWORD *)(a2 + 80);
      *unint64_t v13 = *v14;
      *(_OWORD *)(a1 + 64) = v17;
      *(_OWORD *)(a1 + 80) = v16;
    }
  }
  else if (v15)
  {
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v18 = *v14;
    long long v19 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v19;
    *unint64_t v13 = v18;
  }
  unint64_t v20 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96) >= 2uLL)
  {
    if (v20 >= 2)
    {
      uint64_t v22 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = v20;
      *(void *)(a1 + 104) = v22;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
    goto LABEL_20;
  }
  if (v20 < 2)
  {
LABEL_20:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    goto LABEL_22;
  }
  uint64_t v21 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v20;
  *(void *)(a1 + 104) = v21;
  swift_retain();
LABEL_22:
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of (positiveInfinity: String, negativeInfinity: String, nan: String)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (positiveInfinity: String, negativeInfinity: String, nan: String));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

__n128 __swift_memcpy120_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for JSONEncoder._Options(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 24);
  long long v6 = *(void **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  char v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v5;
  outlined consume of JSONEncoder.DateEncodingStrategy(v6, v7, v8);
  unint64_t v9 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) < 2uLL)
  {
    if (v9 >= 2)
    {
      uint64_t v10 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v9;
      *(void *)(a1 + 40) = v10;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v9 < 2)
  {
    swift_release();
LABEL_6:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }
  uint64_t v11 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v11;
  swift_release();
LABEL_8:
  if (*(void *)(a1 + 56))
  {
    uint64_t v12 = *(void *)(a2 + 56);
    if (v12)
    {
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v12;
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v13;
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v14;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    outlined destroy of (positiveInfinity: String, negativeInfinity: String, nan: String)(a1 + 48);
  }
  long long v15 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_13:
  unint64_t v16 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96) >= 2uLL)
  {
    if (v16 >= 2)
    {
      uint64_t v18 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = v16;
      *(void *)(a1 + 104) = v18;
      swift_release();
      goto LABEL_20;
    }
    swift_release();
    goto LABEL_18;
  }
  if (v16 < 2)
  {
LABEL_18:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    goto LABEL_20;
  }
  uint64_t v17 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
LABEL_20:
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for JSONEncoder._Options(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 112);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JSONEncoder._Options(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 112) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for JSONEncoder._Options()
{
  return &unk_1ECA31918;
}

uint64_t sub_181B6D9F4()
{
  outlined consume of _CodingKey(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));

  return MEMORY[0x1F4186498](v0, 41, 7);
}

uint64_t specialized __JSONReferencingEncoder.init(referencing:key:convertedKey:codingPathNode:wrapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v76 = a8;
  v90[3] = &type metadata for _CodingKey;
  unint64_t v69 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v90[4] = v69;
  uint64_t v17 = swift_allocObject();
  v90[0] = v17;
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  *(void *)(v17 + 32) = a4;
  *(unsigned char *)(v17 + 40) = a5;
  uint64_t v75 = a9;
  *(void *)(a10 + 160) = a1;
  *(void *)(a10 + 168) = a9 | 0x8000000000000000;
  *(void *)(a10 + 176) = a6;
  *(void *)(a10 + 184) = a7;
  uint64_t v70 = *(void *)(a1 + 24);
  uint64_t v18 = *(void **)(a1 + 32);
  uint64_t v88 = *(void *)(a1 + 40);
  int v87 = *(unsigned __int8 *)(a1 + 48);
  unint64_t v19 = *(void *)(a1 + 56);
  uint64_t v85 = *(void *)(a1 + 64);
  unint64_t v86 = v19;
  uint64_t v20 = *(void *)(a1 + 72);
  uint64_t v83 = *(void *)(a1 + 80);
  uint64_t v84 = v20;
  uint64_t v21 = *(void *)(a1 + 88);
  uint64_t v81 = *(void *)(a1 + 96);
  uint64_t v82 = v21;
  uint64_t v80 = *(void *)(a1 + 104);
  uint64_t v22 = *(void *)(a1 + 112);
  id v78 = v18;
  uint64_t v79 = v22;
  unint64_t v72 = *(void *)(a1 + 120);
  uint64_t v74 = *(void *)(a1 + 128);
  uint64_t v77 = *(void *)(a1 + 136);
  uint64_t v23 = __swift_project_boxed_opaque_existential_1(v90, (uint64_t)&type metadata for _CodingKey);
  uint64_t v24 = type metadata accessor for Optional();
  v89 = *(void **)(v24 - 8);
  uint64_t v25 = v89[8];
  v26.n128_f64[0] = MEMORY[0x1F4188790](v24);
  unint64_t v27 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v28 = off_1ECA30F70;
  ((void (*)(char *, void *, __n128))off_1ECA30F70->initializeWithCopy)((char *)&v68 - v27, v23, v26);
  uint64_t v29 = ((uint64_t (*)(char *, void, uint64_t, ValueMetadata *))v28->storeEnumTagSinglePayload)((char *)&v68 - v27, 0, 1, &type metadata for _CodingKey);
  MEMORY[0x1F4188790](v29);
  int64_t v31 = (char *)&v68 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v33 = MEMORY[0x1F4188790](v32);
  unint64_t v34 = (char *)&v68 - v27;
  unint64_t v35 = (void (*)(char *, char *, uint64_t, double))v89[2];
  v71 = (char *)&v68 - v27;
  uint64_t v73 = v24;
  v35((char *)&v68 - v27, (char *)&v68 - v27, v24, v33);
  if (((unsigned int (*)(char *, uint64_t, ValueMetadata *))v28->getEnumTagSinglePayload)((char *)&v68 - v27, 1, &type metadata for _CodingKey) == 1)
  {
    swift_retain();
    swift_retain();
    outlined copy of JSONEncoder.DateEncodingStrategy(v78, v88, v87);
    outlined copy of JSONEncoder.KeyEncodingStrategy(v86);
    outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v84, v83);
    unint64_t v36 = v72;
    uint64_t v37 = v74;
    outlined copy of JSONEncoder.KeyEncodingStrategy(v72);
    unint64_t v38 = (void (*)(char *, uint64_t))v89[1];
    uint64_t v39 = v77;
    swift_bridgeObjectRetain();
    uint64_t v40 = v73;
    v38(v71, v73);
    v38(v34, v40);
    unint64_t v41 = v76;
    swift_retain();
    swift_release();
    swift_release();
    unint64_t v42 = v41 >> 62;
    int64_t v43 = (uint64_t *)v41;
    unint64_t v44 = v36;
    id v45 = v78;
    uint64_t v46 = v88;
    char v47 = v87;
    if (v41 >> 62)
    {
LABEL_3:
      if (v42 != 1)
      {
        uint64_t v54 = 0;
LABEL_14:
        uint64_t v58 = v70;
        uint64_t v60 = v85;
        unint64_t v59 = v86;
        uint64_t v62 = v83;
        uint64_t v61 = v84;
        uint64_t v64 = v81;
        uint64_t v63 = v82;
        uint64_t v66 = v79;
        uint64_t v65 = v80;
        *(void *)(a10 + 32) = v45;
        *(void *)(a10 + 40) = v46;
        *(unsigned char *)(a10 + 48) = v47;
        *(void *)(a10 + 56) = v59;
        *(void *)(a10 + 64) = v60;
        *(void *)(a10 + 72) = v61;
        *(void *)(a10 + 80) = v62;
        *(void *)(a10 + 88) = v63;
        *(void *)(a10 + 96) = v64;
        *(void *)(a10 + 104) = v65;
        *(void *)(a10 + 112) = v66;
        uint64_t v67 = MEMORY[0x1E4FBC860];
        *(void *)(a10 + 120) = v44;
        *(void *)(a10 + 128) = v37;
        *(void *)(a10 + 16) = v67;
        *(void *)(a10 + 24) = v58;
        *(void *)(a10 + 136) = v39;
        *(void *)(a10 + 144) = v43;
        *(void *)(a10 + 152) = v54;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
        return a10;
      }
      char v48 = (uint64_t *)((v41 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_13:
      uint64_t v54 = *v48;
      swift_release();
      goto LABEL_14;
    }
LABEL_12:
    char v48 = (uint64_t *)(v41 + 64);
    goto LABEL_13;
  }
  initializeWithTake = (void (*)(char *, char *, ValueMetadata *))v28->initializeWithTake;
  initializeWithTake(v31, (char *)&v68 - v27, &type metadata for _CodingKey);
  int64_t v43 = (uint64_t *)swift_allocObject();
  unint64_t v50 = v69;
  v43[5] = (uint64_t)&type metadata for _CodingKey;
  v43[6] = v50;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v43 + 2);
  initializeWithTake((char *)boxed_opaque_existential_1, v31, &type metadata for _CodingKey);
  swift_retain();
  swift_retain();
  id v45 = v78;
  outlined copy of JSONEncoder.DateEncodingStrategy(v78, v88, v87);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v86);
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v84, v83);
  unint64_t v44 = v72;
  uint64_t v37 = v74;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v72);
  char v52 = (void (*)(char *, uint64_t))v89[1];
  swift_bridgeObjectRetain();
  v52(v71, v73);
  unint64_t v41 = v76;
  v43[7] = v76;
  unint64_t v42 = v41 >> 62;
  if (v41 >> 62)
  {
    if (v42 != 1)
    {
      uint64_t v57 = 1;
LABEL_11:
      v43[8] = v57;
      swift_release();
      swift_release();
      uint64_t v46 = v88;
      char v47 = v87;
      uint64_t v39 = v77;
      if (v42) {
        goto LABEL_3;
      }
      goto LABEL_12;
    }
    unint64_t v53 = (uint64_t *)((v41 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    unint64_t v53 = (uint64_t *)(v41 + 64);
  }
  uint64_t v55 = *v53;
  uint64_t result = swift_retain();
  uint64_t v57 = v55 + 1;
  if (!__OFADD__(v55, 1)) {
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t specialized __JSONReferencingEncoder.init(referencing:key:convertedKey:codingPathNode:wrapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v78 = a5;
  *(void *)&long long v92 = a8;
  *((void *)&v92 + 1) = a9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v91);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32))(boxed_opaque_existential_1, a2, a8);
  uint64_t v77 = a6;
  *(void *)(a7 + 160) = a1;
  *(void *)(a7 + 168) = a6 | 0x8000000000000000;
  *(void *)(a7 + 176) = a3;
  *(void *)(a7 + 184) = a4;
  uint64_t v71 = *(void *)(a1 + 24);
  uint64_t v17 = *(void **)(a1 + 32);
  uint64_t v90 = *(void *)(a1 + 40);
  int v89 = *(unsigned __int8 *)(a1 + 48);
  unint64_t v18 = *(void *)(a1 + 56);
  uint64_t v87 = *(void *)(a1 + 64);
  unint64_t v88 = v18;
  uint64_t v19 = *(void *)(a1 + 72);
  uint64_t v85 = *(void *)(a1 + 80);
  uint64_t v86 = v19;
  uint64_t v20 = *(void *)(a1 + 88);
  uint64_t v83 = *(void *)(a1 + 96);
  uint64_t v84 = v20;
  uint64_t v82 = *(void *)(a1 + 104);
  uint64_t v21 = *(void *)(a1 + 112);
  id v80 = v17;
  uint64_t v81 = v21;
  unint64_t v76 = *(void *)(a1 + 120);
  uint64_t v79 = *(void *)(a1 + 128);
  long long v70 = v92;
  uint64_t v22 = v92;
  uint64_t v75 = *(void *)(a1 + 136);
  uint64_t v74 = (char *)__swift_project_boxed_opaque_existential_1(v91, v92);
  uint64_t v23 = type metadata accessor for Optional();
  uint64_t v72 = *(void *)(v23 - 8);
  uint64_t v24 = *(void *)(v72 + 64);
  v25.n128_f64[0] = MEMORY[0x1F4188790](v23);
  __n128 v26 = (char *)&v70 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(void *)(v22 - 8);
  (*(void (**)(char *, char *, uint64_t, __n128))(v27 + 16))(v26, v74, v22, v25);
  uint64_t v28 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v26, 0, 1, v22);
  uint64_t v29 = v72;
  MEMORY[0x1F4188790](v28);
  int64_t v31 = (char *)&v70 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v33 = MEMORY[0x1F4188790](v32);
  unint64_t v34 = v26;
  unint64_t v35 = *(void (**)(char *, char *, double))(v29 + 16);
  uint64_t v74 = v26;
  uint64_t v73 = v36;
  v35(v26, v26, v33);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v26, 1, v22) == 1)
  {
    swift_retain();
    swift_retain();
    outlined copy of JSONEncoder.DateEncodingStrategy(v80, v90, v89);
    outlined copy of JSONEncoder.KeyEncodingStrategy(v88);
    outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v86, v85);
    unint64_t v37 = v76;
    uint64_t v38 = v79;
    outlined copy of JSONEncoder.KeyEncodingStrategy(v76);
    uint64_t v39 = *(void (**)(char *, uint64_t))(v29 + 8);
    uint64_t v40 = v75;
    swift_bridgeObjectRetain();
    uint64_t v41 = v73;
    v39(v74, v73);
    v39(v34, v41);
    unint64_t v42 = v78;
    swift_retain();
    swift_release();
    swift_release();
    unint64_t v43 = v42 >> 62;
    uint64_t v44 = v42;
    unint64_t v45 = v37;
    id v46 = v80;
    uint64_t v47 = v90;
    char v48 = v89;
    if (v42 >> 62)
    {
LABEL_3:
      if (v43 != 1)
      {
        uint64_t v56 = 0;
LABEL_14:
        uint64_t v60 = v71;
        uint64_t v62 = v87;
        unint64_t v61 = v88;
        uint64_t v64 = v85;
        uint64_t v63 = v86;
        uint64_t v66 = v83;
        uint64_t v65 = v84;
        uint64_t v68 = v81;
        uint64_t v67 = v82;
        *(void *)(a7 + 32) = v46;
        *(void *)(a7 + 40) = v47;
        *(unsigned char *)(a7 + 48) = v48;
        *(void *)(a7 + 56) = v61;
        *(void *)(a7 + 64) = v62;
        *(void *)(a7 + 72) = v63;
        *(void *)(a7 + 80) = v64;
        *(void *)(a7 + 88) = v65;
        *(void *)(a7 + 96) = v66;
        *(void *)(a7 + 104) = v67;
        *(void *)(a7 + 112) = v68;
        uint64_t v69 = MEMORY[0x1E4FBC860];
        *(void *)(a7 + 120) = v45;
        *(void *)(a7 + 128) = v38;
        *(void *)(a7 + 16) = v69;
        *(void *)(a7 + 24) = v60;
        *(void *)(a7 + 136) = v40;
        *(void *)(a7 + 144) = v44;
        *(void *)(a7 + 152) = v56;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v91);
        return a7;
      }
      unint64_t v49 = (uint64_t *)((v42 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_13:
      uint64_t v56 = *v49;
      swift_release();
      goto LABEL_14;
    }
LABEL_12:
    unint64_t v49 = (uint64_t *)(v42 + 64);
    goto LABEL_13;
  }
  unint64_t v50 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
  v50(v31, v26, v22);
  uint64_t v51 = swift_allocObject();
  *(_OWORD *)(v51 + 40) = v70;
  char v52 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v51 + 16));
  v50((char *)v52, v31, v22);
  swift_retain();
  swift_retain();
  id v46 = v80;
  outlined copy of JSONEncoder.DateEncodingStrategy(v80, v90, v89);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v88);
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v86, v85);
  unint64_t v53 = v76;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v76);
  uint64_t v54 = *(void (**)(void *, uint64_t))(v29 + 8);
  uint64_t v40 = v75;
  swift_bridgeObjectRetain();
  v54(v74, v73);
  unint64_t v42 = v78;
  *(void *)(v51 + 56) = v78;
  unint64_t v43 = v42 >> 62;
  if (v42 >> 62)
  {
    if (v43 != 1)
    {
      uint64_t v44 = v51;
      uint64_t v59 = 1;
LABEL_11:
      *(void *)(v44 + 64) = v59;
      swift_release();
      swift_release();
      uint64_t v47 = v90;
      char v48 = v89;
      unint64_t v45 = v53;
      uint64_t v38 = v79;
      if (v43) {
        goto LABEL_3;
      }
      goto LABEL_12;
    }
    uint64_t v55 = (uint64_t *)((v42 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v55 = (uint64_t *)(v42 + 64);
  }
  uint64_t v44 = v51;
  uint64_t v57 = *v55;
  uint64_t result = swift_retain();
  uint64_t v59 = v57 + 1;
  if (!__OFADD__(v57, 1)) {
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t sub_181B6E568()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

void *initializeBufferWithCopyOfBuffer for _JSONKeyedEncodingContainer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for _JSONKeyedEncodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _JSONKeyedEncodingContainer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

void *type metadata accessor for _JSONUnkeyedEncodingContainer()
{
  return &unk_1ECA41F28;
}

uint64_t associated type witness table accessor for KeyedEncodingContainerProtocol.Key : CodingKey in _JSONKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

uint64_t specialized _JSONUnkeyedEncodingContainer.count.getter(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  int v2 = *(unsigned __int8 *)(result + 32);
  if (v2 == 4) {
    return *(void *)(v1 + 16);
  }
  if (v2 == 3)
  {
    if (v1 >> 62)
    {
      uint64_t v3 = *(void *)(result + 24);
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      outlined consume of JSONReference.Backing(v1, v3, 3);
      return v4;
    }
    else
    {
      return *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void NSCoder.decodeTopLevelObject()(_OWORD *a1@<X8>)
{
  int v2 = v1;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v9 = 0;
  id v4 = (id)__NSCoderDecodeObject(v2, (const char *)&v9);
  char v5 = (void *)v9;
  if (v4)
  {
    id v6 = (id)v9;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v9 = 0u;
    long long v10 = 0u;
    id v7 = v5;
  }
  outlined init with take of Any?((uint64_t)&v9, (uint64_t)v11);
  if (v5)
  {
    id v8 = v5;
    if (objc_msgSend(v8, sel_code) != (id)4865)
    {
      swift_willThrow();
      outlined destroy of Any?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for Any?);

      return;
    }
  }
  outlined init with copy of Any?((uint64_t)v11, (uint64_t)&v9);
  if (*((void *)&v10 + 1))
  {
    outlined init with take of Any(&v9, a1);
  }
  else
  {
    *a1 = 0u;
    a1[1] = 0u;
  }
  outlined destroy of Any?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for Any?);
}

const char *NSCoder.decodeTopLevelObject(forKey:)()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v1 = (const char *)String._bridgeToObjectiveCImpl()();
  *(void *)&long long v14 = 0;
  id v2 = (id)__NSCoderDecodeObjectForKey(v0, v1, (uint64_t)&v14);
  swift_unknownObjectRelease();
  uint64_t v3 = (void *)v14;
  if (v2)
  {
    id v4 = (id)v14;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v14 = 0u;
    long long v15 = 0u;
    id v5 = v3;
  }
  outlined init with take of Any?((uint64_t)&v14, (uint64_t)v16);
  if (v3)
  {
    id v6 = v3;
    if (objc_msgSend(v6, sel_code) != (id)4865)
    {
      swift_willThrow();
      outlined destroy of Any?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for Any?);

      return v1;
    }
  }
  outlined init with copy of Any?((uint64_t)v16, (uint64_t)&v14);
  uint64_t v7 = *((void *)&v15 + 1);
  if (*((void *)&v15 + 1))
  {
    id v8 = __swift_project_boxed_opaque_existential_1(&v14, *((uint64_t *)&v15 + 1));
    uint64_t v9 = *(void *)(v7 - 8);
    double v10 = MEMORY[0x1F4188790](v8);
    uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v9 + 16))(v12, v10);
    unint64_t v1 = (const char *)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v7);
    outlined destroy of Any?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for Any?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  }
  else
  {
    outlined destroy of Any?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for Any?);
    unint64_t v1 = 0;
  }

  return v1;
}

void NSCoder.decodeTopLevelObject(forKey:)(uint64_t a1@<X8>)
{
  id v2 = v1;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v4 = (const char *)String._bridgeToObjectiveCImpl()();
  *(void *)&v10[0] = 0;
  id v5 = (id)__NSCoderDecodeObjectForKey(v2, v4, (uint64_t)v10);
  swift_unknownObjectRelease();
  id v6 = *(void **)&v10[0];
  if (v5)
  {
    id v7 = *(id *)&v10[0];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    id v8 = v6;
  }
  outlined init with take of Any?((uint64_t)v10, (uint64_t)v11);
  if (!v6) {
    goto LABEL_7;
  }
  id v9 = v6;
  if (objc_msgSend(v9, sel_code) == (id)4865)
  {

LABEL_7:
    outlined init with take of Any?((uint64_t)v11, a1);

    return;
  }
  swift_willThrow();
  outlined destroy of Any?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for Any?);
}

uint64_t NSCoder.decodeTopLevelObject<A>(of:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5 = v4;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  ObjCClassFromMetadata = (const char *)swift_getObjCClassFromMetadata();
  uint64_t v8 = String._bridgeToObjectiveCImpl()();
  *(void *)&long long v16 = 0;
  id v9 = (id)__NSCoderDecodeObjectOfClassForKey(v5, ObjCClassFromMetadata, v8, (uint64_t)&v16);
  swift_unknownObjectRelease();
  double v10 = (void *)v16;
  if (v9)
  {
    id v11 = (id)v16;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v16 = 0u;
    long long v17 = 0u;
    id v12 = v10;
  }
  outlined init with take of Any?((uint64_t)&v16, (uint64_t)v18);
  if (v10)
  {
    id v13 = v10;
    if (objc_msgSend(v13, sel_code) != (id)4865)
    {
      swift_willThrow();
      outlined destroy of Any?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for Any?);

      return a4;
    }
  }
  outlined init with take of Any?((uint64_t)v18, (uint64_t)&v16);
  if (*((void *)&v17 + 1))
  {
    if (swift_dynamicCast()) {
      a4 = v15;
    }
    else {
      a4 = 0;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v16, (uint64_t *)&demangling cache variable for type metadata for Any?);
    a4 = 0;
  }

  return a4;
}

void NSCoder.decodeTopLevelObject(of:forKey:)(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  id v4 = a1;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a1[2] == 1)
    {
      ObjCClassFromMetadata = (const char *)swift_getObjCClassFromMetadata();
      uint64_t v7 = String._bridgeToObjectiveCImpl()();
      *(void *)&long long v14 = 0;
      id v8 = (id)__NSCoderDecodeObjectOfClassForKey(v3, ObjCClassFromMetadata, v7, (uint64_t)&v14);
      goto LABEL_6;
    }
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
    id v4 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
  }
  uint64_t v9 = String._bridgeToObjectiveCImpl()();
  *(void *)&long long v14 = 0;
  id v8 = (id)__NSCoderDecodeObjectOfClassesForKey(v3, (uint64_t)v4, v9, (uint64_t)&v14);

LABEL_6:
  swift_unknownObjectRelease();
  double v10 = (void *)v14;
  if (v8)
  {
    id v11 = (id)v14;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v14 = 0u;
    long long v15 = 0u;
    id v12 = v10;
  }
  outlined init with take of Any?((uint64_t)&v14, (uint64_t)v16);
  if (v10)
  {
    id v13 = v10;
    if (objc_msgSend(v13, sel_code) != (id)4865)
    {
      swift_willThrow();
      outlined destroy of Any?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for Any?);

      return;
    }
  }
  outlined init with copy of Any?((uint64_t)v16, (uint64_t)&v14);
  if (*((void *)&v15 + 1))
  {
    outlined init with take of Any(&v14, a2);
  }
  else
  {
    *a2 = 0u;
    a2[1] = 0u;
  }
  outlined destroy of Any?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for Any?);
}

Swift::OpaquePointer_optional __swiftcall NSCoder.decodeArrayOfObjects(ofClasses:forKey:)(Swift::OpaquePointer ofClasses, Swift::String forKey)
{
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  uint64_t v3 = _ContiguousArrayBuffer._asCocoaArray()();
  uint64_t v4 = String._bridgeToObjectiveCImpl()();
  id v5 = (id)__NSCoderDecodeArrayOfObjectsOfClassesForKey(v2, v3, v4);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (v5)
  {
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      uint64_t v8 = v7;
    }
    else
    {
      swift_unknownObjectRelease();
      objc_msgSend(v5, sel_copy);
      uint64_t v9 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      uint64_t v8 = specialized _arrayForceCast<A, B>(_:)(v9);

      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  double v10 = (void *)v8;
  result.value._rawValue = v10;
  result.is_nil = v6;
  return result;
}

Swift::OpaquePointer_optional __swiftcall NSCoder.decodeDictionary(withKeysOfClasses:objectsOfClasses:forKey:)(Swift::OpaquePointer withKeysOfClasses, Swift::OpaquePointer objectsOfClasses, Swift::String forKey)
{
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  uint64_t v5 = _ContiguousArrayBuffer._asCocoaArray()();
  specialized _arrayForceCast<A, B>(_:)((uint64_t)objectsOfClasses._rawValue);
  uint64_t v6 = _ContiguousArrayBuffer._asCocoaArray()();
  uint64_t v7 = String._bridgeToObjectiveCImpl()();
  id v8 = (id)__NSCoderDecodeDictionaryWithKeysOfClassesObjectsOfClassesForKey(v3, v5, v6, v7);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (v8)
  {
    uint64_t v10 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v8);
  }
  else
  {
    uint64_t v10 = 0;
  }
  id v11 = (void *)v10;
  result.value._rawValue = v11;
  result.is_nil = v9;
  return result;
}

unint64_t specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v177 = a4;
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v155 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  v188 = (char *)v154 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  v185 = (char *)v154 - v10;
  uint64_t v158 = type metadata accessor for Optional();
  uint64_t v157 = *(void *)(v158 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v158);
  v189 = (char *)v154 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  long long v14 = (char *)v154 - v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v15 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  v173 = (char *)v154 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  v183 = (char *)v154 - v17;
  uint64_t v175 = swift_getTupleTypeMetadata2();
  uint64_t v18 = MEMORY[0x1F4188790](v175);
  v172 = (char *)v154 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  v182 = (char *)v154 - v21;
  uint64_t v190 = a3;
  uint64_t v179 = *(void *)(a3 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  v186 = (char *)v154 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  v171 = (char *)v154 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  v170 = (char *)v154 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  v181 = (char *)v154 - v29;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  v168 = (char *)v154 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  v167 = (char *)v154 - v33;
  uint64_t v180 = *(void *)(a2 - 8);
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  v187 = (char *)v154 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  v174 = (char *)v154 - v37;
  uint64_t v38 = MEMORY[0x1F4188790](v36);
  v169 = (char *)v154 - v39;
  uint64_t v40 = MEMORY[0x1F4188790](v38);
  v166 = (char *)v154 - v41;
  uint64_t v42 = MEMORY[0x1F4188790](v40);
  v184 = (void *)((char *)v154 - v43);
  MEMORY[0x1F4188790](v42);
  v165 = (char *)v154 - v44;
  unint64_t v45 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_3;
    }
LABEL_5:
    id v46 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_6;
  }
  if (!__CocoaSet.count.getter()) {
    goto LABEL_5;
  }
LABEL_3:
  type metadata accessor for _DictionaryStorage();
  id v46 = (void *)static _DictionaryStorage.allocate(capacity:)();
LABEL_6:
  v178 = v46;
  uint64_t v156 = v7;
  if (a2 == MEMORY[0x1E4FBB1A0])
  {
    if (v45)
    {
      uint64_t v51 = __CocoaDictionary.makeIterator()();
      v169 = 0;
      uint64_t v52 = 0;
      unint64_t v53 = 0;
      unint64_t v54 = v51 | 0x8000000000000000;
    }
    else
    {
      uint64_t v107 = -1 << *(unsigned char *)(a1 + 32);
      uint64_t v52 = ~v107;
      uint64_t v108 = *(void *)(a1 + 64);
      v169 = (char *)(a1 + 64);
      uint64_t v109 = -v107;
      if (v109 < 64) {
        uint64_t v110 = ~(-1 << v109);
      }
      else {
        uint64_t v110 = -1;
      }
      unint64_t v53 = v110 & v108;
      unint64_t v54 = a1;
    }
    uint64_t v159 = v54 & 0x7FFFFFFFFFFFFFFFLL;
    v154[1] = v52;
    int64_t v160 = (unint64_t)(v52 + 64) >> 6;
    v111 = (char *)(v180 + 32);
    v173 = (char *)(v179 + 56);
    v174 = (char *)(v180 + 56);
    v186 = (char *)(v179 + 32);
    v161 = v46 + 8;
    unint64_t v163 = v180 + 40;
    int64_t v162 = v179 + 40;
    unint64_t result = swift_bridgeObjectRetain();
    v112 = 0;
    uint64_t v113 = MEMORY[0x1E4FBB1A0];
    v172 = (char *)(MEMORY[0x1E4FBC838] + 8);
    v164 = v14;
    v170 = (char *)v54;
    v171 = v111;
    while (1)
    {
      if ((v54 & 0x8000000000000000) != 0)
      {
        v115 = v112;
        uint64_t v116 = __CocoaDictionary.Iterator.next()();
        if (!v116)
        {
          id v46 = v178;
          goto LABEL_98;
        }
        uint64_t v118 = v117;
        uint64_t v191 = v116;
        type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        swift_dynamicCast();
        uint64_t v193 = v118;
        v119 = v192;
        v188 = (char *)v53;
        v189 = v115;
      }
      else
      {
        if (v53)
        {
          v188 = (char *)((v53 - 1) & v53);
          v189 = v112;
          unint64_t v114 = __clz(__rbit64(v53)) | ((void)v112 << 6);
        }
        else
        {
          int64_t v120 = (int64_t)(v112 + 1);
          if (__OFADD__(v112, 1)) {
            goto LABEL_104;
          }
          if (v120 >= v160) {
            goto LABEL_98;
          }
          unint64_t v121 = *(void *)&v169[8 * v120];
          int64_t v122 = (int64_t)(v112 + 1);
          if (!v121)
          {
            int64_t v122 = (int64_t)(v112 + 2);
            if ((uint64_t)(v112 + 2) >= v160) {
              goto LABEL_98;
            }
            unint64_t v121 = *(void *)&v169[8 * v122];
            if (!v121)
            {
              int64_t v122 = (int64_t)(v112 + 3);
              if ((uint64_t)(v112 + 3) >= v160) {
                goto LABEL_98;
              }
              unint64_t v121 = *(void *)&v169[8 * v122];
              if (!v121)
              {
                int64_t v122 = (int64_t)(v112 + 4);
                if ((uint64_t)(v112 + 4) >= v160) {
                  goto LABEL_98;
                }
                unint64_t v121 = *(void *)&v169[8 * v122];
                if (!v121)
                {
                  v123 = v112 + 5;
                  if ((uint64_t)(v112 + 5) >= v160) {
                    goto LABEL_98;
                  }
                  unint64_t v121 = *(void *)&v169[8 * (void)v123];
                  if (!v121)
                  {
                    while (1)
                    {
                      int64_t v122 = (int64_t)(v123 + 1);
                      if (__OFADD__(v123, 1)) {
                        goto LABEL_106;
                      }
                      if (v122 >= v160) {
                        break;
                      }
                      unint64_t v121 = *(void *)&v169[8 * v122];
                      ++v123;
                      if (v121) {
                        goto LABEL_81;
                      }
                    }
LABEL_98:
                    v192 = 0;
                    uint64_t v193 = 0;
LABEL_99:
                    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
                    return (unint64_t)v46;
                  }
                  int64_t v122 = (int64_t)(v112 + 5);
                }
              }
            }
          }
LABEL_81:
          v188 = (char *)((v121 - 1) & v121);
          v189 = (char *)v122;
          unint64_t v114 = __clz(__rbit64(v121)) + (v122 << 6);
        }
        uint64_t v124 = 8 * v114;
        v119 = *(void **)(*(void *)(v54 + 48) + v124);
        uint64_t v118 = *(void *)(*(void *)(v54 + 56) + v124);
        v192 = v119;
        uint64_t v193 = v118;
        id v125 = v119;
        swift_unknownObjectRetain();
      }
      uint64_t v191 = (uint64_t)v119;
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      id v126 = v119;
      int v127 = swift_dynamicCast();
      v128 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v174;
      if (!v127) {
        break;
      }
      v128(v14, 0, 1, v113);
      v129 = *(void (**)(char *, char *, uint64_t))v111;
      v130 = (char *)v184;
      (*(void (**)(char *, char *, uint64_t))v111)((char *)v184, v14, v113);
      uint64_t v191 = v118;

      char v131 = swift_dynamicCast();
      v132 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v173;
      if ((v131 & 1) == 0)
      {
        v153 = v185;
        v132(v185, 1, 1, v190);
        (*(void (**)(char *, void))(v180 + 8))(v130, MEMORY[0x1E4FBB1A0]);
        (*(void (**)(char *, uint64_t))(v155 + 8))(v153, v156);
LABEL_91:
        outlined consume of Set<A1>.Iterator._Variant<A><A1>();
LABEL_92:
        swift_release();
        return 0;
      }
      v133 = v185;
      uint64_t v134 = v190;
      v132(v185, 0, 1, v190);
      v135 = *(void (**)(char *, char *, uint64_t))v186;
      v136 = v168;
      (*(void (**)(char *, char *, uint64_t))v186)(v168, v133, v134);
      v137 = v183;
      v187 = &v183[*(int *)(TupleTypeMetadata2 + 48)];
      v138 = v187;
      v129(v183, v130, v113);
      v135(v138, v136, v134);
      uint64_t v139 = v113;
      uint64_t v140 = v175;
      v141 = v182;
      v142 = &v182[*(int *)(v175 + 48)];
      v129(v182, v137, v139);
      v135(v142, v187, v134);
      v143 = &v141[*(int *)(v140 + 48)];
      v144 = v165;
      v129(v165, v141, v139);
      v145 = v167;
      v135(v167, v143, v134);
      uint64_t v146 = (uint64_t)v166;
      v129(v166, v144, v139);
      v147 = v181;
      v135(v181, v145, v134);
      id v46 = v178;
      unint64_t result = __RawDictionaryStorage.find<A>(_:)(v146, v139, v177);
      unint64_t v148 = result;
      if (v149)
      {
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v180 + 40))(v46[6] + *(void *)(v180 + 72) * result, v146, v139);
        unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v179 + 40))(v46[7] + *(void *)(v179 + 72) * v148, v147, v190);
        unint64_t v53 = (unint64_t)v188;
        v112 = v189;
        long long v14 = v164;
        unint64_t v54 = (unint64_t)v170;
        v111 = v171;
      }
      else
      {
        if (v46[2] >= v46[3])
        {
LABEL_101:
          __break(1u);
LABEL_102:
          __break(1u);
LABEL_103:
          __break(1u);
LABEL_104:
          __break(1u);
          goto LABEL_105;
        }
        *(void *)((char *)v161 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
        v111 = v171;
        v129((char *)(v46[6] + *(void *)(v180 + 72) * result), (char *)v146, v139);
        unint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v135)(v46[7] + *(void *)(v179 + 72) * v148, v147, v190);
        uint64_t v150 = v46[2];
        BOOL v151 = __OFADD__(v150, 1);
        uint64_t v152 = v150 + 1;
        if (v151) {
          goto LABEL_102;
        }
        v46[2] = v152;
        unint64_t v53 = (unint64_t)v188;
        v112 = v189;
        long long v14 = v164;
        unint64_t v54 = (unint64_t)v170;
      }
      uint64_t v113 = v139;
    }
    v128(v14, 1, 1, MEMORY[0x1E4FBB1A0]);
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v157 + 8))(v14, v158);
    goto LABEL_91;
  }
  if (v45)
  {
    uint64_t v47 = __CocoaDictionary.makeIterator()();
    unint64_t v163 = 0;
    int64_t v48 = 0;
    unint64_t v49 = 0;
    unint64_t v50 = v47 | 0x8000000000000000;
  }
  else
  {
    uint64_t v55 = -1 << *(unsigned char *)(a1 + 32);
    int64_t v48 = ~v55;
    uint64_t v56 = *(void *)(a1 + 64);
    unint64_t v163 = a1 + 64;
    uint64_t v57 = -v55;
    if (v57 < 64) {
      uint64_t v58 = ~(-1 << v57);
    }
    else {
      uint64_t v58 = -1;
    }
    unint64_t v49 = v58 & v56;
    unint64_t v50 = a1;
  }
  uint64_t v59 = v174;
  v161 = (void *)(v50 & 0x7FFFFFFFFFFFFFFFLL);
  int64_t v160 = v48;
  int64_t v162 = (unint64_t)(v48 + 64) >> 6;
  uint64_t v60 = (char *)(v180 + 56);
  v185 = (char *)(v180 + 32);
  v168 = (char *)(v179 + 56);
  v184 = (void *)(v179 + 32);
  v164 = (char *)(v46 + 8);
  swift_bridgeObjectRetain();
  unint64_t result = swift_retain();
  uint64_t v62 = 0;
  v167 = (char *)(MEMORY[0x1E4FBC838] + 8);
  v166 = (char *)v50;
  v165 = v60;
  while (1)
  {
    v181 = v62;
    if ((v50 & 0x8000000000000000) == 0) {
      break;
    }
    uint64_t v65 = __CocoaDictionary.Iterator.next()();
    if (!v65)
    {
      id v46 = v178;
LABEL_95:
      v192 = 0;
      uint64_t v193 = 0;
      swift_release();
      goto LABEL_99;
    }
    uint64_t v67 = v66;
    uint64_t v191 = v65;
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    swift_dynamicCast();
    uint64_t v193 = v67;
    uint64_t v68 = v192;
    v182 = (char *)v49;
    v183 = v181;
LABEL_40:
    uint64_t v191 = (uint64_t)v68;
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v75 = v68;
    int v76 = swift_dynamicCast();
    uint64_t v77 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v60;
    if (!v76)
    {
      v105 = v189;
      v77(v189, 1, 1, a2);
      swift_unknownObjectRelease();

      (*(void (**)(char *, uint64_t))(v157 + 8))(v105, v158);
LABEL_53:
      swift_release();
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      goto LABEL_92;
    }
    unint64_t v78 = v189;
    v77(v189, 0, 1, a2);
    uint64_t v79 = *(void (**)(char *, char *, uint64_t))v185;
    (*(void (**)(char *, char *, uint64_t))v185)(v59, v78, a2);
    uint64_t v191 = v67;

    char v80 = swift_dynamicCast();
    uint64_t v81 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v168;
    if ((v80 & 1) == 0)
    {
      v106 = v188;
      v81(v188, 1, 1, v190);
      (*(void (**)(char *, uint64_t))(v180 + 8))(v59, a2);
      (*(void (**)(char *, uint64_t))(v155 + 8))(v106, v156);
      goto LABEL_53;
    }
    uint64_t v82 = v188;
    uint64_t v83 = v190;
    v81(v188, 0, 1, v190);
    uint64_t v84 = (void (*)(char *, char *, uint64_t))*v184;
    uint64_t v85 = v171;
    ((void (*)(char *, char *, uint64_t))*v184)(v171, v82, v83);
    uint64_t v86 = v84;
    uint64_t v87 = v173;
    unint64_t v88 = &v173[*(int *)(TupleTypeMetadata2 + 48)];
    v79(v173, v59, a2);
    v86(v88, v85, v83);
    uint64_t v89 = v175;
    uint64_t v90 = v172;
    v181 = &v172[*(int *)(v175 + 48)];
    v79(v172, v87, a2);
    v86(v181, v88, v83);
    v91 = &v90[*(int *)(v89 + 48)];
    long long v92 = v169;
    v79(v169, v90, a2);
    v93 = v170;
    v86(v170, v91, v83);
    v94 = v92;
    v95 = (void (*)(unint64_t, char *, uint64_t))v79;
    v79(v187, v94, a2);
    v96 = (uint64_t (*)(unint64_t, char *, uint64_t))v86;
    v86(v186, v93, v83);
    v97 = v178;
    unint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    id v46 = v97;
    uint64_t v98 = -1 << *((unsigned char *)v97 + 32);
    unint64_t v99 = result & ~v98;
    unint64_t v100 = v99 >> 6;
    if (((-1 << v99) & ~*(void *)&v164[8 * (v99 >> 6)]) != 0)
    {
      unint64_t v63 = __clz(__rbit64((-1 << v99) & ~*(void *)&v164[8 * (v99 >> 6)])) | v99 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v59 = v174;
      unint64_t v50 = (unint64_t)v166;
      uint64_t v60 = v165;
    }
    else
    {
      char v101 = 0;
      unint64_t v102 = (unint64_t)(63 - v98) >> 6;
      uint64_t v59 = v174;
      unint64_t v50 = (unint64_t)v166;
      uint64_t v60 = v165;
      do
      {
        if (++v100 == v102 && (v101 & 1) != 0)
        {
          __break(1u);
          goto LABEL_101;
        }
        BOOL v103 = v100 == v102;
        if (v100 == v102) {
          unint64_t v100 = 0;
        }
        v101 |= v103;
        uint64_t v104 = *(void *)&v164[8 * v100];
      }
      while (v104 == -1);
      unint64_t v63 = __clz(__rbit64(~v104)) + (v100 << 6);
    }
    *(void *)&v164[(v63 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v63;
    v95(v46[6] + *(void *)(v180 + 72) * v63, v187, a2);
    unint64_t result = v96(v46[7] + *(void *)(v179 + 72) * v63, v186, v190);
    ++v46[2];
    unint64_t v49 = (unint64_t)v182;
    uint64_t v62 = v183;
  }
  if (v49)
  {
    v182 = (char *)((v49 - 1) & v49);
    v183 = v62;
    unint64_t v64 = __clz(__rbit64(v49)) | ((void)v62 << 6);
LABEL_39:
    uint64_t v73 = 8 * v64;
    uint64_t v68 = *(void **)(*(void *)(v50 + 48) + v73);
    uint64_t v67 = *(void *)(*(void *)(v50 + 56) + v73);
    v192 = v68;
    uint64_t v193 = v67;
    id v74 = v68;
    swift_unknownObjectRetain();
    goto LABEL_40;
  }
  int64_t v69 = (int64_t)(v62 + 1);
  if (__OFADD__(v62, 1)) {
    goto LABEL_103;
  }
  if (v69 >= v162) {
    goto LABEL_95;
  }
  unint64_t v70 = *(void *)(v163 + 8 * v69);
  int64_t v71 = (int64_t)(v62 + 1);
  if (v70) {
    goto LABEL_38;
  }
  int64_t v71 = (int64_t)(v62 + 2);
  if ((uint64_t)(v62 + 2) >= v162) {
    goto LABEL_95;
  }
  unint64_t v70 = *(void *)(v163 + 8 * v71);
  if (v70) {
    goto LABEL_38;
  }
  int64_t v71 = (int64_t)(v62 + 3);
  if ((uint64_t)(v62 + 3) >= v162) {
    goto LABEL_95;
  }
  unint64_t v70 = *(void *)(v163 + 8 * v71);
  if (v70) {
    goto LABEL_38;
  }
  int64_t v71 = (int64_t)(v62 + 4);
  if ((uint64_t)(v62 + 4) >= v162) {
    goto LABEL_95;
  }
  unint64_t v70 = *(void *)(v163 + 8 * v71);
  if (v70)
  {
LABEL_38:
    v182 = (char *)((v70 - 1) & v70);
    v183 = (char *)v71;
    unint64_t v64 = __clz(__rbit64(v70)) + (v71 << 6);
    goto LABEL_39;
  }
  uint64_t v72 = v62 + 5;
  if ((uint64_t)(v62 + 5) >= v162) {
    goto LABEL_95;
  }
  unint64_t v70 = *(void *)(v163 + 8 * (void)v72);
  if (v70)
  {
    int64_t v71 = (int64_t)(v62 + 5);
    goto LABEL_38;
  }
  while (1)
  {
    int64_t v71 = (int64_t)(v72 + 1);
    if (__OFADD__(v72, 1)) {
      break;
    }
    if (v71 >= v162) {
      goto LABEL_95;
    }
    unint64_t v70 = *(void *)(v163 + 8 * v71);
    ++v72;
    if (v70) {
      goto LABEL_38;
    }
  }
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
  return result;
}

uint64_t NSKeyedArchiver.encodeEncodable<A>(_:forKey:)(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v7 = v5;
  type metadata accessor for __PlistDictionaryEncoder();
  uint64_t result = static __PlistDictionaryEncoder.encodeToTopLevelContainer<A>(_:)(a1, a4, a5, v13);
  if (!v6)
  {
    __swift_project_boxed_opaque_existential_1(v13, v13[3]);
    uint64_t v12 = _bridgeAnythingToObjectiveC<A>(_:)();
    objc_msgSend(v7, sel_encodeObject_forKey_, v12, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  return result;
}

const char *static NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(_:)(const char *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSKeyedUnarchiver.Type);
  id v2 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  *(void *)&long long v15 = 0;
  id v3 = (id)__NSKeyedUnarchiverUnarchiveObject(v2, a1, (uint64_t)&v15);
  swift_unknownObjectRelease();
  uint64_t v4 = (void *)v15;
  if (v3)
  {
    id v5 = (id)v15;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v15 = 0u;
    long long v16 = 0u;
    id v6 = v4;
  }
  outlined init with take of Any?((uint64_t)&v15, (uint64_t)v17);
  if (v4)
  {
    id v7 = v4;
    if (objc_msgSend(v7, sel_code) != (id)4865)
    {
      swift_willThrow();
      outlined destroy of Any?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Any?);

      return a1;
    }
  }
  outlined init with copy of Any?((uint64_t)v17, (uint64_t)&v15);
  uint64_t v8 = *((void *)&v16 + 1);
  if (*((void *)&v16 + 1))
  {
    uint64_t v9 = __swift_project_boxed_opaque_existential_1(&v15, *((uint64_t *)&v16 + 1));
    uint64_t v10 = *(void *)(v8 - 8);
    double v11 = MEMORY[0x1F4188790](v9);
    uint64_t v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v10 + 16))(v13, v11);
    a1 = (const char *)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v8);
    outlined destroy of Any?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Any?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
  }
  else
  {
    outlined destroy of Any?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Any?);
    a1 = 0;
  }

  return a1;
}

uint64_t one-time initialization function for __plistClasses()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_18210C660;
  *(void *)(v0 + 32) = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSArray);
  *(void *)(v0 + 40) = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSData);
  *(void *)(v0 + 48) = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSDate);
  *(void *)(v0 + 56) = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSDictionary);
  *(void *)(v0 + 64) = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  uint64_t result = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  *(void *)(v0 + 72) = result;
  static NSKeyedUnarchiver.__plistClasses = (_UNKNOWN *)v0;
  return result;
}

uint64_t NSKeyedUnarchiver.decodeDecodable<A>(_:forKey:)@<X0>(ValueMetadata *a1@<X3>, uint64_t a2@<X8>)
{
  if (one-time initialization token for __plistClasses != -1) {
    swift_once();
  }
  if (*((void *)static NSKeyedUnarchiver.__plistClasses + 2) == 1)
  {
    ObjCClassFromMetadata = (const char *)swift_getObjCClassFromMetadata();
    uint64_t v6 = String._bridgeToObjectiveCImpl()();
    id v7 = (id)__NSCoderDecodeObjectOfClassForKey(v2, ObjCClassFromMetadata, v6, 0);
  }
  else
  {
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
    uint64_t v8 = _ContiguousArrayBuffer._asCocoaArray()();
    uint64_t v9 = String._bridgeToObjectiveCImpl()();
    id v7 = (id)__NSCoderDecodeObjectOfClassesForKey(v2, v8, v9, 0);
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRelease();
  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  outlined init with take of Any?((uint64_t)v13, (uint64_t)&v14);
  if (v15)
  {
    outlined init with take of Any(&v14, v16);
    type metadata accessor for PropertyListDecoder();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = MEMORY[0x1E4FBC868];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
    uint64_t v11 = swift_allocObject();
    *(_DWORD *)(v11 + 16) = 0;
    *(void *)(inited + 24) = v11;
    PropertyListDecoder.decode<A>(_:fromTopLevel:)(a1, v16, (uint64_t)a1, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    swift_release();
    return (*((uint64_t (**)(uint64_t, void, uint64_t, ValueMetadata *))a1[-1].Description + 7))(a2, 0, 1, a1);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return (*((uint64_t (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *))a1[-1].Description + 7))(a2, 1, 1, a1);
  }
}

void NSKeyedUnarchiver.decodeTopLevelDecodable<A>(_:forKey:)(ValueMetadata *a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (one-time initialization token for __plistClasses != -1) {
    swift_once();
  }
  if (*((void *)static NSKeyedUnarchiver.__plistClasses + 2) == 1)
  {
    ObjCClassFromMetadata = (const char *)swift_getObjCClassFromMetadata();
    uint64_t v7 = String._bridgeToObjectiveCImpl()();
    *(void *)&long long v18 = 0;
    id v8 = (id)__NSCoderDecodeObjectOfClassForKey(v2, ObjCClassFromMetadata, v7, (uint64_t)&v18);
  }
  else
  {
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
    uint64_t v9 = _ContiguousArrayBuffer._asCocoaArray()();
    uint64_t v10 = String._bridgeToObjectiveCImpl()();
    *(void *)&long long v18 = 0;
    id v8 = (id)__NSCoderDecodeObjectOfClassesForKey(v2, v9, v10, (uint64_t)&v18);
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRelease();
  uint64_t v11 = (void *)v18;
  if (v8)
  {
    id v12 = (id)v18;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v18 = 0u;
    long long v19 = 0u;
    id v13 = v11;
  }
  outlined init with take of Any?((uint64_t)&v18, (uint64_t)v20);
  if (v11)
  {
    id v14 = v11;
    if (objc_msgSend(v14, sel_code) != (id)4865)
    {
      swift_willThrow();
      outlined destroy of Any?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for Any?);

      return;
    }
  }
  outlined init with copy of Any?((uint64_t)v20, (uint64_t)&v18);
  if (*((void *)&v19 + 1))
  {
    outlined init with take of Any(&v18, &v21);
  }
  else
  {
    long long v21 = 0u;
    long long v22 = 0u;
  }
  outlined destroy of Any?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for Any?);

  if (*((void *)&v22 + 1))
  {
    outlined init with take of Any(&v21, v23);
    type metadata accessor for PropertyListDecoder();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = MEMORY[0x1E4FBC868];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
    uint64_t v16 = swift_allocObject();
    *(_DWORD *)(v16 + 16) = 0;
    *(void *)(inited + 24) = v16;
    PropertyListDecoder.decode<A>(_:fromTopLevel:)(a1, v23, (uint64_t)a1, a2);
    if (v3)
    {
      id v17 = v3;
      objc_msgSend(v2, sel_failWithError_, _swift_stdlib_bridgeErrorToNSError());
      swift_unknownObjectRelease();
      swift_willThrow();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
      swift_setDeallocating();
      swift_bridgeObjectRelease();
      swift_release();
      (*((void (**)(uint64_t, void, uint64_t, ValueMetadata *))a1[-1].Description + 7))(a2, 0, 1, a1);
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v21, (uint64_t *)&demangling cache variable for type metadata for Any?);
    (*((void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *))a1[-1].Description + 7))(a2, 1, 1, a1);
  }
}

NSArray *static NSKeyedUnarchiver.unarchivedArrayOfObjects<A>(ofClass:from:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1821037E0;
  *(void *)(v8 + 32) = a1;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  uint64_t v9 = _ContiguousArrayBuffer._asCocoaArray()();
  switch(a3 >> 62)
  {
    case 1uLL:
      if (a2 >> 32 < (int)a2) {
        __break(1u);
      }
      swift_retain();
      uint64_t v11 = __DataStorage.bridgedReference(_:)((int)a2, a2 >> 32);
      outlined consume of Data._Representation(a2, a3);
      break;
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      uint64_t v13 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v11 = __DataStorage.bridgedReference(_:)(v12, v13);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      uint64_t v10 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
      goto LABEL_7;
    default:
      id v22 = (id)a2;
      __int16 v23 = a3;
      char v24 = BYTE2(a3);
      char v25 = BYTE3(a3);
      char v26 = BYTE4(a3);
      char v27 = BYTE5(a3);
      uint64_t v10 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, &v22, BYTE6(a3));
LABEL_7:
      uint64_t v11 = v10;
      break;
  }
  id v22 = 0;
  id v14 = __NSKeyedUnarchiverSecureUnarchivedArrayOfObjectsOfClasses(v9, (uint64_t)v11, (uint64_t)&v22);
  swift_unknownObjectRelease();

  id v15 = v22;
  if (!v14)
  {
    id v19 = v22;
    if (!v15)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_17:
    id v20 = v15;
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_bridgeObjectRelease();

    return v14;
  }
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v16 = swift_dynamicCastClass();
  if (!v16)
  {
    swift_unknownObjectRelease();
    [(NSArray *)v14 copy];
    uint64_t v17 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v16 = specialized _arrayForceCast<A, B>(_:)(v17);
    swift_bridgeObjectRelease();
  }
  id v18 = v15;

  if (v18) {
    goto LABEL_17;
  }
  swift_bridgeObjectRelease();
  if (!v16) {
    return 0;
  }
  id v14 = (NSArray *)specialized _arrayConditionalCast<A, B>(_:)(v16, a4);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t static NSKeyedUnarchiver.unarchivedArrayOfObjects(ofClasses:from:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  uint64_t v5 = _ContiguousArrayBuffer._asCocoaArray()();
  switch(a3 >> 62)
  {
    case 1uLL:
      if (a2 >> 32 < (int)a2) {
        __break(1u);
      }
      swift_retain();
      uint64_t v7 = __DataStorage.bridgedReference(_:)((int)a2, a2 >> 32);
      outlined consume of Data._Representation(a2, a3);
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v7 = __DataStorage.bridgedReference(_:)(v8, v9);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      uint64_t v6 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
      goto LABEL_7;
    default:
      id v19 = (id)a2;
      __int16 v20 = a3;
      char v21 = BYTE2(a3);
      char v22 = BYTE3(a3);
      char v23 = BYTE4(a3);
      char v24 = BYTE5(a3);
      uint64_t v6 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, &v19, BYTE6(a3));
LABEL_7:
      uint64_t v7 = v6;
      break;
  }
  id v19 = 0;
  uint64_t v10 = __NSKeyedUnarchiverSecureUnarchivedArrayOfObjectsOfClasses(v5, (uint64_t)v7, (uint64_t)&v19);
  swift_unknownObjectRelease();

  id v11 = v19;
  if (!v10)
  {
    id v14 = v19;
    uint64_t v13 = 0;
    if (!v11) {
      return v13;
    }
    goto LABEL_17;
  }
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v12 = swift_dynamicCastClass();
  if (v12)
  {
    uint64_t v13 = v12;
  }
  else
  {
    swift_unknownObjectRelease();
    [(NSArray *)v10 copy];
    uint64_t v15 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v13 = specialized _arrayForceCast<A, B>(_:)(v15);
    swift_bridgeObjectRelease();
  }
  id v16 = v11;

  if (v11)
  {
LABEL_17:
    id v17 = v11;
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  return v13;
}

NSDictionary *static NSKeyedUnarchiver.unarchivedDictionary<A, B>(ofKeyClass:objectClass:from:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1821037E0;
  *(void *)(v10 + 32) = a1;
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1821037E0;
  *(void *)(v11 + 32) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  uint64_t v12 = _ContiguousArrayBuffer._asCocoaArray()();
  swift_bridgeObjectRetain();
  uint64_t v13 = _ContiguousArrayBuffer._asCocoaArray()();
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3) {
        __break(1u);
      }
      swift_retain();
      uint64_t v15 = __DataStorage.bridgedReference(_:)((int)a3, a3 >> 32);
      outlined consume of Data._Representation(a3, a4);
      break;
    case 2uLL:
      uint64_t v17 = *(void *)(a3 + 16);
      uint64_t v16 = *(void *)(a3 + 24);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage.bridgedReference(_:)(v17, v16);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      id v14 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
      goto LABEL_7;
    default:
      id v28 = (id)a3;
      __int16 v29 = a4;
      char v30 = BYTE2(a4);
      char v31 = BYTE3(a4);
      char v32 = BYTE4(a4);
      char v33 = BYTE5(a4);
      id v14 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, &v28, BYTE6(a4));
LABEL_7:
      uint64_t v15 = v14;
      break;
  }
  id v28 = 0;
  id v18 = __NSKeyedUnarchiverSecureUnarchivedDictionaryOfKeysOfClassesObjectsOfClasses(v12, v13, (uint64_t)v15, (uint64_t)&v28);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  id v19 = v28;
  if (v18)
  {
    uint64_t v20 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v18);
    id v21 = v19;

    if (v19)
    {
LABEL_10:
      id v22 = v19;
      swift_bridgeObjectRelease();
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return v18;
    }
  }
  else
  {
    id v23 = v28;
    uint64_t v20 = 0;
    if (v19) {
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v20) {
    return 0;
  }
  uint64_t WitnessTable = swift_getWitnessTable();
  id v18 = (NSDictionary *)specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v20, a5, a6, WitnessTable);
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t static NSKeyedUnarchiver.unarchivedDictionary(keysOfClasses:objectsOfClasses:from:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  uint64_t v6 = _ContiguousArrayBuffer._asCocoaArray()();
  swift_bridgeObjectRetain();
  uint64_t v7 = _ContiguousArrayBuffer._asCocoaArray()();
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3) {
        __break(1u);
      }
      swift_retain();
      uint64_t v9 = __DataStorage.bridgedReference(_:)((int)a3, a3 >> 32);
      outlined consume of Data._Representation(a3, a4);
      break;
    case 2uLL:
      uint64_t v11 = *(void *)(a3 + 16);
      uint64_t v10 = *(void *)(a3 + 24);
      swift_retain();
      swift_retain();
      uint64_t v9 = __DataStorage.bridgedReference(_:)(v11, v10);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      uint64_t v8 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
      goto LABEL_7;
    default:
      id v19 = (id)a3;
      __int16 v20 = a4;
      char v21 = BYTE2(a4);
      char v22 = BYTE3(a4);
      char v23 = BYTE4(a4);
      char v24 = BYTE5(a4);
      uint64_t v8 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, &v19, BYTE6(a4));
LABEL_7:
      uint64_t v9 = v8;
      break;
  }
  id v19 = 0;
  uint64_t v12 = __NSKeyedUnarchiverSecureUnarchivedDictionaryOfKeysOfClassesObjectsOfClasses(v6, v7, (uint64_t)v9, (uint64_t)&v19);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  id v13 = v19;
  if (!v12)
  {
    id v18 = v19;
    uint64_t v14 = 0;
    if (!v13) {
      return v14;
    }
    goto LABEL_10;
  }
  uint64_t v14 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v12);
  id v15 = v13;

  if (v13)
  {
LABEL_10:
    id v16 = v13;
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  return v14;
}

uint64_t closure #1 in String._lastPathComponent.getter(void *a1)
{
  if (*a1 == 47 && a1[1] == 0xE100000000000000) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t one-time initialization function for invalidExtensionScalars()
{
  uint64_t v2 = Set.init(minimumCapacity:)();
  specialized Set._Variant.insert(_:)(&v1, dword_1ECA2FAF8);
  specialized Set._Variant.insert(_:)(&v1, dword_1ECA2FAFC);
  specialized Set._Variant.insert(_:)(&v1, dword_1ECA2FB00);
  specialized Set._Variant.insert(_:)(&v1, dword_1ECA2FB04);
  specialized Set._Variant.insert(_:)(&v1, dword_1ECA2FB08);
  specialized Set._Variant.insert(_:)(&v1, dword_1ECA2FB0C);
  specialized Set._Variant.insert(_:)(&v1, dword_1ECA2FB10);
  specialized Set._Variant.insert(_:)(&v1, dword_1ECA2FB14);
  specialized Set._Variant.insert(_:)(&v1, dword_1ECA2FB18);
  specialized Set._Variant.insert(_:)(&v1, dword_1ECA2FB1C);
  specialized Set._Variant.insert(_:)(&v1, dword_1ECA2FB20);
  specialized Set._Variant.insert(_:)(&v1, dword_1ECA2FB24);
  specialized Set._Variant.insert(_:)(&v1, dword_1ECA2FB28);
  uint64_t result = specialized Set._Variant.insert(_:)(&v1, dword_1ECA2FB2C);
  static String.invalidExtensionScalars = v2;
  return result;
}

unint64_t String.pathExtension.getter(uint64_t a1, unint64_t a2)
{
  swift_bridgeObjectRetain();
  unint64_t Path = String._lastPathComponent.getter(a1, a2);
  unint64_t v6 = v5;
  swift_bridgeObjectRelease();
  if ((specialized BidirectionalCollection.last.getter(Path, v6) & 0x1FF) != 0x2E)
  {
    unint64_t v7 = specialized Sequence<>.starts<A>(with:)((unint64_t)&outlined read-only object #0 of String.pathExtension.getter, Path, v6);
    if ((v7 & 1) == 0)
    {
      char v29 = 46;
      MEMORY[0x1F4188790](v7);
      v28[2] = &v29;
      unint64_t v10 = specialized BidirectionalCollection.lastIndex(where:)((unint64_t)closure #1 in BidirectionalCollection<>.lastIndex(of:)specialized partial apply, (uint64_t)v28, Path, v6);
      if ((v11 & 1) == 0)
      {
        unint64_t v12 = v10;
        if (v10 >= 0x4000)
        {
          swift_bridgeObjectRetain();
          unint64_t v13 = String._lastPathComponent.getter(a1, a2);
          unint64_t v15 = v14;
          swift_bridgeObjectRelease();
          uint64_t v16 = (Path >> 59) & 1;
          if ((v6 & 0x1000000000000000) == 0) {
            LOBYTE(v16) = 1;
          }
          if ((v12 & 0xC) == 4 << v16)
          {
            unint64_t v12 = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, Path, v6);
            if ((v6 & 0x1000000000000000) == 0) {
              goto LABEL_11;
            }
          }
          else if ((v6 & 0x1000000000000000) == 0)
          {
LABEL_11:
            unint64_t v17 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
            goto LABEL_12;
          }
          unint64_t v27 = HIBYTE(v6) & 0xF;
          if ((v6 & 0x2000000000000000) == 0) {
            unint64_t v27 = Path & 0xFFFFFFFFFFFFLL;
          }
          if (v27 <= v12 >> 16)
          {
            __break(1u);
            JUMPOUT(0x181B72810);
          }
          unint64_t v17 = String.UTF8View._foreignIndex(after:)();
LABEL_12:
          unint64_t v18 = specialized Collection.suffix(from:)(v17, v13, v15);
          uint64_t v20 = v19;
          uint64_t v22 = v21;
          uint64_t v24 = v23;
          swift_bridgeObjectRelease();
          unint64_t v8 = MEMORY[0x185301F50](v18, v20, v22, v24);
          unint64_t v26 = v25;
          swift_bridgeObjectRelease();
          LOBYTE(v20) = specialized String.validatePathExtension(_:)(v8, v26);
          swift_bridgeObjectRelease();
          if (v20) {
            return v8;
          }
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t static String._resolvingSymlinksInPathUsingFullPathAttribute(_:)(const char *a1)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  v6[1] = 0;
  unint64_t v6[2] = 0;
  v6[0] = 0x800000000000005;
  bzero(v4, 0x40CuLL);
  int v2 = getattrlist(a1, v6, v4, 0x40CuLL, 0);
  uint64_t result = 0;
  if (!v2)
  {
    if (v5) {
      return String.init(cString:)();
    }
  }
  return result;
}

uint64_t closure #1 in String._resolvingSymlinksInPath()@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, size_t *a4@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!result)
  {
    *a4 = 0;
    a4[1] = 0;
    return result;
  }
  unint64_t v8 = (char *)result;
  if ((specialized Collection.first.getter(a2, a3) & 0x1FF) == 0x2F
    || (specialized Collection.first.getter(a2, a3) & 0x1FF) == 0x7E)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = static String._resolvingSymlinksInPathUsingFullPathAttribute(_:)(v8);
    if (v10)
    {
      size_t v11 = v9;
      size_t v12 = v10;
      uint64_t result = swift_bridgeObjectRelease();
      *a4 = v11;
      a4[1] = v12;
      return result;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if (isStackAllocationSafe)
  {
    unint64_t v14 = (char *)&v16;
    MEMORY[0x1F4188790](isStackAllocationSafe);
    closure #1 in closure #1 in String._resolvingSymlinksInPath()(&v15, v8, 0x402uLL, (size_t *)&v16);
    if (!v4)
    {
      uint64_t result = swift_bridgeObjectRelease();
      *(_OWORD *)a4 = v16;
      return result;
    }
    swift_willThrow();

    __break(1u);
  }
  else
  {
    unint64_t v14 = (char *)swift_slowAlloc();
    closure #1 in closure #1 in String._resolvingSymlinksInPath()(v14, v8, 0x402uLL, a4);
    if (!v4)
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x185309510](v14, -1, -1);
    }
  }

  uint64_t result = MEMORY[0x185309510](v14, -1, -1);
  __break(1u);
  return result;
}

size_t closure #1 in closure #1 in String._resolvingSymlinksInPath()@<X0>(char *__dst@<X0>, char *__source@<X2>, size_t a3@<X1>, size_t *a4@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!__dst) {
LABEL_14:
  }
    __break(1u);
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (a3) {
    bzero(__dst, a3);
  }
  size_t v9 = strlcpy(__dst, __source, 0x402uLL);
  if (__OFADD__(v9, 1)) {
    goto LABEL_13;
  }
  size_t v15 = v9 + 1;
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if (isStackAllocationSafe)
  {
    size_t v11 = (char *)&v14;
    MEMORY[0x1F4188790](isStackAllocationSafe);
    size_t result = closure #1 in closure #1 in closure #1 in String._resolvingSymlinksInPath()(&v13, __dst, 0x402uLL, a3, &v15, v16);
    if (!v4)
    {
      *(_OWORD *)a4 = *(_OWORD *)v16;
      return result;
    }
    swift_willThrow();

    __break(1u);
    goto LABEL_16;
  }
  size_t v11 = (char *)swift_slowAlloc();
  closure #1 in closure #1 in closure #1 in String._resolvingSymlinksInPath()(v11, __dst, 0x402uLL, a3, &v15, a4);
  a4 = (size_t *)v4;
  if (v4)
  {
LABEL_16:

    size_t result = MEMORY[0x185309510](v11, -1, -1);
    __break(1u);
    return result;
  }
  return MEMORY[0x185309510](v11, -1, -1);
}

size_t closure #1 in closure #1 in closure #1 in String._resolvingSymlinksInPath()@<X0>(char *a1@<X0>, char *a2@<X2>, size_t a3@<X1>, uint64_t a4@<X3>, void *a5@<X4>, size_t *a6@<X8>)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if ((a3 & 0x8000000000000000) != 0) {
      goto LABEL_64;
    }
    if (a3) {
      bzero(a1, a3);
    }
  }
  uint64_t v37 = a6;
  if (!a2) {
LABEL_66:
  }
    __break(1u);
  uint64_t v10 = 0;
  size_t v11 = a2;
  size_t v12 = a2;
  uint64_t v38 = a5;
  while (1)
  {
    while (1)
    {
      int v13 = *v11;
      if (v13 == 47)
      {
        size_t v12 = v11;
        do
        {
          int v14 = *++v12;
          int v13 = v14;
        }
        while (v14 == 47);
      }
      if (v13)
      {
        do
        {
          int v16 = *++v12;
          int v15 = v16;
        }
        while (v16 != 47 && v15 != 0);
      }
      else
      {
        int v15 = 0;
      }
      *size_t v12 = 0;
      memset(&v41, 0, 28);
      memset(&v41.st_atimespec, 0, 112);
      size_t result = lstat(a2, &v41);
      if ((result & 0x80000000) != 0)
      {
LABEL_53:
        *uint64_t v37 = 0;
        v37[1] = 0;
        return result;
      }
      uint64_t v19 = a2;
      int st_mode = v41.st_mode;
      int v21 = S_IFMT.getter() & st_mode;
      size_t result = S_IFLNK.getter();
      if (v21 == (unsigned __int16)result) {
        break;
      }
      *size_t v12 = v15;
      a2 = v19;
      if (!v15) {
        goto LABEL_54;
      }
LABEL_34:
      size_t v11 = v12;
    }
    if (v10 >= 33) {
      goto LABEL_53;
    }
    uint64_t v40 = v11;
    if (!a1) {
      goto LABEL_65;
    }
    uint64_t v22 = v10;
    a2 = v19;
    size_t result = readlink(v19, a1, 0x401uLL);
    if ((result & 0x8000000000000000) != 0) {
      goto LABEL_53;
    }
    size_t v23 = result;
    uint64_t v24 = &a1[result];
    a1[result] = 0;
    *size_t v12 = v15;
    if (!result) {
      break;
    }
    if (*a1 == 47)
    {
      uint64_t v25 = 0;
    }
    else
    {
      uint64_t v25 = v40 - v19 + 1;
      if (__OFADD__(v40 - v19, 1)) {
        goto LABEL_63;
      }
    }
    int64_t v26 = v12 - v19;
    int64_t v27 = *a5;
    int64_t v28 = *a5 - (v12 - v19);
    if (__OFSUB__(*a5, v12 - v19))
    {
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    uint64_t v29 = v25 + result;
    if (__OFADD__(v25, result)) {
      goto LABEL_56;
    }
    if (__OFADD__(v29, v28)) {
      goto LABEL_57;
    }
    if (v29 + v28 >= 1027) {
      goto LABEL_53;
    }
    BOOL v30 = __OFADD__(v26, v28);
    uint64_t v31 = v26 + v28;
    if (v30) {
      goto LABEL_58;
    }
    if (v27 < v26) {
      goto LABEL_59;
    }
    if (a4 < v29) {
      goto LABEL_59;
    }
    uint64_t v32 = v31 - v26;
    if (v31 < v26) {
      goto LABEL_59;
    }
    if (a4 - v29 < v32) {
      goto LABEL_60;
    }
    if (v29 != v26 || v29 >= v31)
    {
      char v33 = &a1[result];
      memmove(&v19[v29], &v19[v26], v31 - v26);
      uint64_t v24 = v33;
    }
    BOOL v30 = __OFADD__(v29, v32);
    uint64_t v34 = v29 + v32;
    if (v30) {
      goto LABEL_61;
    }
    if (v29 < v25) {
      goto LABEL_62;
    }
    uint64_t v35 = &v19[v25];
    if (&v19[v25] != a1 || v35 >= v24) {
      memmove(v35, a1, v23);
    }
    uint64_t v10 = v22 + 1;
    a5 = v38;
    *uint64_t v38 = v34;
    a2 = v19;
    if (*a1 == 47) {
      size_t v12 = v19;
    }
    else {
      size_t v12 = v40;
    }
    size_t v11 = v12;
  }
  uint64_t v10 = v22;
  if (v15) {
    goto LABEL_34;
  }
LABEL_54:
  size_t result = String.init(cString:)();
  *uint64_t v37 = result;
  v37[1] = v36;
  return result;
}

uint64_t specialized String.validatePathExtension(_:)(unint64_t a1, unint64_t a2)
{
  unint64_t v4 = specialized BidirectionalCollection.last.getter(a1, a2);
  if ((v4 & 0x1FF) == 0x2E) {
    return 0;
  }
  LOBYTE(v73) = 46;
  MEMORY[0x1F4188790](v4);
  v70[2] = &v73;
  swift_bridgeObjectRetain();
  specialized BidirectionalCollection.lastIndex(where:)((unint64_t)partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:), (uint64_t)v70, a1, a2);
  char v7 = v6;
  swift_bridgeObjectRelease();
  if (v7)
  {
    if ((a2 & 0x2000000000000000) != 0) {
      uint64_t v37 = HIBYTE(a2) & 0xF;
    }
    else {
      uint64_t v37 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (!v37) {
      return 1;
    }
    uint64_t v71 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v72 = a2 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    uint64_t v38 = 0;
    while (1)
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        Swift::UInt32 v40 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        uint64_t v43 = v42;
      }
      else
      {
        if ((a2 & 0x2000000000000000) != 0)
        {
          unint64_t v73 = a1;
          uint64_t v74 = v72;
          Swift::UInt32 v40 = *((unsigned __int8 *)&v73 + v38);
          if (*((char *)&v73 + v38) < 0)
          {
            switch(__clz(v40 ^ 0xFF))
            {
              case 0x1Au:
                stat v41 = (char *)&v73 + v38;
LABEL_59:
                Swift::UInt32 v40 = v41[1] & 0x3F | ((v40 & 0x1F) << 6);
                uint64_t v43 = 2;
                break;
              case 0x1Bu:
                uint64_t v52 = (char *)&v73 + v38;
LABEL_63:
                Swift::UInt32 v40 = ((v40 & 0xF) << 12) | ((v52[1] & 0x3F) << 6) | v52[2] & 0x3F;
                uint64_t v43 = 3;
                break;
              case 0x1Cu:
                unint64_t v53 = (char *)&v73 + v38;
LABEL_65:
                Swift::UInt32 v40 = ((v40 & 0xF) << 18) | ((v53[1] & 0x3F) << 12) | ((v53[2] & 0x3F) << 6) | v53[3] & 0x3F;
                uint64_t v43 = 4;
                break;
              default:
                goto LABEL_46;
            }
            goto LABEL_47;
          }
        }
        else
        {
          uint64_t v39 = v71;
          if ((a1 & 0x1000000000000000) == 0) {
            uint64_t v39 = _StringObject.sharedUTF8.getter();
          }
          Swift::UInt32 v40 = *(unsigned __int8 *)(v39 + v38);
          if (*(char *)(v39 + v38) < 0)
          {
            switch(__clz(v40 ^ 0xFF))
            {
              case 0x1Au:
                stat v41 = (char *)(v38 + v39);
                goto LABEL_59;
              case 0x1Bu:
                uint64_t v52 = (char *)(v38 + v39);
                goto LABEL_63;
              case 0x1Cu:
                unint64_t v53 = (char *)(v38 + v39);
                goto LABEL_65;
              default:
                break;
            }
          }
        }
LABEL_46:
        uint64_t v43 = 1;
      }
LABEL_47:
      if (one-time initialization token for invalidExtensionScalars != -1) {
        swift_once();
      }
      uint64_t v44 = static String.invalidExtensionScalars;
      if (*(void *)(static String.invalidExtensionScalars + 16))
      {
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v40);
        Swift::Int v45 = Hasher._finalize()();
        uint64_t v46 = -1 << *(unsigned char *)(v44 + 32);
        unint64_t v47 = v45 & ~v46;
        uint64_t v48 = v44 + 56;
        if ((*(void *)(v44 + 56 + ((v47 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v47))
        {
          uint64_t v49 = *(void *)(v44 + 48);
          if (*(_DWORD *)(v49 + 4 * v47) == v40) {
            goto LABEL_66;
          }
          uint64_t v50 = ~v46;
          unint64_t v51 = (v47 + 1) & v50;
          if ((*(void *)(v48 + ((v51 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v51))
          {
            if (*(_DWORD *)(v49 + 4 * v51) == v40)
            {
LABEL_66:
              uint64_t v5 = 0;
              goto LABEL_69;
            }
            while (1)
            {
              unint64_t v51 = (v51 + 1) & v50;
              if (((*(void *)(v48 + ((v51 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v51) & 1) == 0) {
                break;
              }
              if (*(_DWORD *)(v49 + 4 * v51) == v40) {
                goto LABEL_66;
              }
            }
          }
        }
      }
      v38 += v43;
      if (v38 >= v37)
      {
        uint64_t v5 = 1;
        goto LABEL_69;
      }
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = String.subscript.getter();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  unint64_t v73 = v8;
  uint64_t v74 = v10;
  uint64_t v75 = v12;
  uint64_t v76 = v14;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  uint64_t v15 = String.init<A>(_:)();
  unint64_t v17 = v16;
  unint64_t v18 = String.index(after:)();
  swift_bridgeObjectRetain();
  unint64_t v19 = specialized Collection.suffix(from:)(v18, a1, a2);
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  unint64_t v73 = v19;
  uint64_t v74 = v21;
  uint64_t v75 = v23;
  uint64_t v76 = v25;
  uint64_t v26 = String.init<A>(_:)();
  unint64_t v28 = v27;
  if ((v17 & 0x2000000000000000) != 0) {
    uint64_t v29 = HIBYTE(v17) & 0xF;
  }
  else {
    uint64_t v29 = v15 & 0xFFFFFFFFFFFFLL;
  }
  if (v29)
  {
    for (uint64_t i = 0; i < v29; i += v34)
    {
      if ((v17 & 0x1000000000000000) != 0)
      {
        int v32 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((v17 & 0x2000000000000000) != 0)
        {
          unint64_t v73 = v15;
          uint64_t v74 = v17 & 0xFFFFFFFFFFFFFFLL;
          int v32 = *((unsigned __int8 *)&v73 + i);
          if (*((char *)&v73 + i) < 0)
          {
            switch(__clz(v32 ^ 0xFF))
            {
              case 0x1Au:
                char v33 = (char *)&v73 + i;
LABEL_24:
                int v32 = v33[1] & 0x3F | ((v32 & 0x1F) << 6);
                uint64_t v34 = 2;
                break;
              case 0x1Bu:
                uint64_t v35 = (char *)&v73 + i;
LABEL_28:
                int v32 = ((v32 & 0xF) << 12) | ((v35[1] & 0x3F) << 6) | v35[2] & 0x3F;
                uint64_t v34 = 3;
                break;
              case 0x1Cu:
                size_t v36 = (char *)&v73 + i;
LABEL_30:
                int v32 = ((v32 & 0xF) << 18) | ((v36[1] & 0x3F) << 12) | ((v36[2] & 0x3F) << 6) | v36[3] & 0x3F;
                uint64_t v34 = 4;
                break;
              default:
                goto LABEL_18;
            }
            goto LABEL_19;
          }
        }
        else
        {
          uint64_t v31 = (v17 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v15 & 0x1000000000000000) == 0) {
            uint64_t v31 = _StringObject.sharedUTF8.getter();
          }
          int v32 = *(unsigned __int8 *)(v31 + i);
          if (*(char *)(v31 + i) < 0)
          {
            switch(__clz(v32 ^ 0xFF))
            {
              case 0x1Au:
                char v33 = (char *)(i + v31);
                goto LABEL_24;
              case 0x1Bu:
                uint64_t v35 = (char *)(i + v31);
                goto LABEL_28;
              case 0x1Cu:
                size_t v36 = (char *)(i + v31);
                goto LABEL_30;
              default:
                break;
            }
          }
        }
LABEL_18:
        uint64_t v34 = 1;
      }
LABEL_19:
      if (v32 == 47)
      {
        uint64_t v5 = 0;
        goto LABEL_68;
      }
    }
  }
  if ((v28 & 0x2000000000000000) != 0) {
    uint64_t v55 = HIBYTE(v28) & 0xF;
  }
  else {
    uint64_t v55 = v26 & 0xFFFFFFFFFFFFLL;
  }
  if (!v55)
  {
    uint64_t v5 = 1;
    goto LABEL_68;
  }
  uint64_t v71 = (v28 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v72 = v28 & 0xFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  for (uint64_t j = 0; j < v55; j += v61)
  {
    if ((v28 & 0x1000000000000000) != 0)
    {
      Swift::UInt32 v58 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      uint64_t v61 = v60;
      goto LABEL_87;
    }
    if ((v28 & 0x2000000000000000) == 0)
    {
      uint64_t v57 = v71;
      if ((v26 & 0x1000000000000000) == 0) {
        uint64_t v57 = _StringObject.sharedUTF8.getter();
      }
      Swift::UInt32 v58 = *(unsigned __int8 *)(v57 + j);
      if (*(char *)(v57 + j) < 0)
      {
        switch(__clz(v58 ^ 0xFF))
        {
          case 0x1Au:
            uint64_t v59 = (char *)(j + v57);
            goto LABEL_98;
          case 0x1Bu:
            uint64_t v68 = (char *)(j + v57);
            goto LABEL_102;
          case 0x1Cu:
            int64_t v69 = (char *)(j + v57);
            goto LABEL_104;
          default:
            break;
        }
      }
LABEL_86:
      uint64_t v61 = 1;
      goto LABEL_87;
    }
    unint64_t v73 = v26;
    uint64_t v74 = v72;
    Swift::UInt32 v58 = *((unsigned __int8 *)&v73 + j);
    if ((*((char *)&v73 + j) & 0x80000000) == 0) {
      goto LABEL_86;
    }
    switch(__clz(v58 ^ 0xFF))
    {
      case 0x1Au:
        uint64_t v59 = (char *)&v73 + j;
LABEL_98:
        Swift::UInt32 v58 = v59[1] & 0x3F | ((v58 & 0x1F) << 6);
        uint64_t v61 = 2;
        break;
      case 0x1Bu:
        uint64_t v68 = (char *)&v73 + j;
LABEL_102:
        Swift::UInt32 v58 = ((v58 & 0xF) << 12) | ((v68[1] & 0x3F) << 6) | v68[2] & 0x3F;
        uint64_t v61 = 3;
        break;
      case 0x1Cu:
        int64_t v69 = (char *)&v73 + j;
LABEL_104:
        Swift::UInt32 v58 = ((v58 & 0xF) << 18) | ((v69[1] & 0x3F) << 12) | ((v69[2] & 0x3F) << 6) | v69[3] & 0x3F;
        uint64_t v61 = 4;
        break;
      default:
        goto LABEL_86;
    }
LABEL_87:
    if (one-time initialization token for invalidExtensionScalars != -1) {
      swift_once();
    }
    uint64_t v62 = static String.invalidExtensionScalars;
    if (*(void *)(static String.invalidExtensionScalars + 16))
    {
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v58);
      Swift::Int v63 = Hasher._finalize()();
      uint64_t v64 = -1 << *(unsigned char *)(v62 + 32);
      unint64_t v65 = v63 & ~v64;
      if ((*(void *)(v62 + 56 + ((v65 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v65))
      {
        uint64_t v66 = *(void *)(v62 + 48);
        if (*(_DWORD *)(v66 + 4 * v65) == v58)
        {
LABEL_105:
          uint64_t v5 = 0;
          goto LABEL_106;
        }
        uint64_t v67 = ~v64;
        while (1)
        {
          unint64_t v65 = (v65 + 1) & v67;
          if (((*(void *)(v62 + 56 + ((v65 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v65) & 1) == 0) {
            break;
          }
          if (*(_DWORD *)(v66 + 4 * v65) == v58) {
            goto LABEL_105;
          }
        }
      }
    }
  }
  uint64_t v5 = 1;
LABEL_106:
  swift_bridgeObjectRelease();
LABEL_68:
  swift_bridgeObjectRelease();
LABEL_69:
  swift_bridgeObjectRelease();
  return v5;
}

BOOL partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:)(unsigned __int8 *a1)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance PredicateExpressionCodingKeys(a1, *(unsigned __int8 **)(v1 + 16));
}

BOOL closure #1 in BidirectionalCollection<>.lastIndex(of:)specialized partial apply(unsigned __int8 *a1)
{
  return partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:)(a1);
}

_UNKNOWN **associated type witness table accessor for PlistDecodingMap.DictionaryIterator : PlistDictionaryIterator in BPlistMap()
{
  return &protocol witness table for BPlistMap.DictionaryIterator;
}

void protocol witness for static PlistDecodingMap.nullValue.getter in conformance BPlistMap(void *a1@<X8>)
{
  *a1 = 0x9000000000000008;
}

unint64_t protocol witness for PlistDecodingMap.topObject.getter in conformance BPlistMap@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = BPlistMap.loadValue(at:)(*(void *)(v1 + 48));
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t BPlistError.debugDescription.getter(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0x2064696C61766E49;
  }
  if (a2 == (void *)1) {
    return 0xD000000000000016;
  }
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 0x65756C617620;
  v6._object = (void *)0xE600000000000000;
  String.append(_:)(v6);
  return 0x2074707572726F43;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BPlistError(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = a2[1];
  if (!v3) {
    return !v4;
  }
  if (v3 == 1) {
    return v4 == 1;
  }
  if (v4 < 2) {
    return 0;
  }
  if (*a1 != *a2 || v3 != v4) {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return 1;
}

unint64_t lazy protocol witness table accessor for type BPlistError and conformance BPlistError()
{
  unint64_t result = lazy protocol witness table cache variable for type BPlistError and conformance BPlistError;
  if (!lazy protocol witness table cache variable for type BPlistError and conformance BPlistError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BPlistError and conformance BPlistError);
  }
  return result;
}

uint64_t sub_181B73DBC()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_181B73DF4()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_181B73E04()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181B73E14()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_181B73E24()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

unint64_t destroy for BPlistError(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for BPlistError(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for BPlistError(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for BPlistError(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BPlistError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for BPlistError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

void *destructiveInjectEnumTag for BPlistError(void *result, int a2)
{
  if (a2 < 0)
  {
    void *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for BPlistError()
{
  return &type metadata for BPlistError;
}

void *initializeBufferWithCopyOfBuffer for BPlistMap.ArrayIterator(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for BPlistMap.ArrayIterator()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for BPlistMap.ArrayIterator(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for BPlistMap.ArrayIterator(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t destroy for BPlistMap.DictionaryIterator()
{
  return outlined consume of Set<A1>.Iterator._Variant<A><A1>();
}

void *initializeWithCopy for BPlistMap.DictionaryIterator(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  outlined copy of [A : B].Iterator._Variant<A, B>();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  return a1;
}

void *assignWithCopy for BPlistMap.DictionaryIterator(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  outlined copy of [A : B].Iterator._Variant<A, B>();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  return a1;
}

uint64_t assignWithTake for BPlistMap.DictionaryIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v3;
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  return a1;
}

uint64_t getEnumTagSinglePayload for BPlistMap.DictionaryIterator(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 6) | (2 * ((*(void *)a1 >> 57) & 0x38 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for BPlistMap.DictionaryIterator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 - 127;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_OWORD *)(result + 8) = 0u;
      *(_OWORD *)(result + 24) = 0u;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BPlistMap.DictionaryIterator()
{
  return &type metadata for BPlistMap.DictionaryIterator;
}

unint64_t *assignWithCopy for BPlistMap.Value(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of BPlistMap.Value(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  outlined consume of BPlistMap.Value(v4);
  return a1;
}

unint64_t *assignWithTake for BPlistMap.Value(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  outlined consume of BPlistMap.Value(v3);
  return a1;
}

uint64_t getEnumTag for BPlistMap.Value(void *a1)
{
  uint64_t v1 = *a1 >> 60;
  if (v1 <= 8) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 9;
  }
}

unint64_t *destructiveInjectEnumTag for BPlistMap.Value(unint64_t *result, uint64_t a2)
{
  if (a2 < 9)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 60;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 9);
    unint64_t v3 = 0x9000000000000000;
  }
  void *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for BPlistMap.Region()
{
  return &type metadata for BPlistMap.Region;
}

uint64_t PredicateExpressions.OptionalFlatMap.init<>(_:_:)@<X0>(uint64_t a1@<X0>, void (*a2)(void *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  return PredicateExpressions.OptionalFlatMap.init<>(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

{
  return PredicateExpressions.OptionalFlatMap.init<>(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

{
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t add_explicit;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(void *);
  void v28[6];

  uint64_t v24 = a7;
  uint64_t v25 = a8;
  uint64_t v26 = a3;
  unint64_t v27 = a2;
  uint64_t v15 = *(void *)(a6 - 8);
  v16.n128_f64[0] = MEMORY[0x1F4188790](a1);
  unint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(v19 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 16))(a9, a1, v19, v16);
  if (one-time initialization token for nextID != -1) {
    swift_once();
  }
  add_explicit = atomic_fetch_add_explicit(&static PredicateExpressions.VariableID.nextID, 1uLL, memory_order_relaxed);
  v28[0] = a4;
  v28[1] = a5;
  v28[2] = a6;
  v28[3] = v24;
  v28[4] = v25;
  void v28[5] = a10;
  uint64_t v22 = type metadata accessor for PredicateExpressions.OptionalFlatMap();
  *(void *)(a9 + *(int *)(v22 + 72)) = add_explicit;
  v28[0] = add_explicit;
  v27(v28);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a1, a4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(a9 + *(int *)(v22 + 68), v18, a6);
}

uint64_t PredicateExpressions.OptionalFlatMap.evaluate(_:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v82 = a3;
  uint64_t v6 = a2[4];
  uint64_t v79 = a2[7];
  uint64_t v80 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v76 = (char *)v67 - v7;
  uint64_t v86 = *(void *)(a2[3] - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v75 = (char *)v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v81 = (char *)v67 - v11;
  uint64_t v88 = v12;
  uint64_t v85 = type metadata accessor for Optional();
  uint64_t v87 = *(void *)(v85 - 8);
  MEMORY[0x1F4188790](v85);
  unint64_t v78 = (char *)v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v84 = (char *)v67 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v83 = (char *)v67 - v17;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)v67 - v19;
  v95 = (void *)*a1;
  uint64_t v21 = v95;
  *(void *)&long long v92 = v95;
  uint64_t v22 = a2[6];
  uint64_t v23 = *(void (**)(long long *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v24 = a2[2];
  swift_bridgeObjectRetain();
  uint64_t v25 = v89;
  v23(&v92, v24, v22);
  if (v25) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v71 = v21;
  uint64_t v73 = 0;
  uint64_t v74 = v3;
  uint64_t v89 = a2;
  uint64_t v26 = v87;
  unint64_t v27 = *(void (**)(char *, char *, uint64_t))(v87 + 16);
  unint64_t v28 = v83;
  uint64_t v72 = v20;
  uint64_t v29 = v85;
  v27(v83, v20, v85);
  BOOL v30 = (void *)v86;
  uint64_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48);
  uint64_t v32 = v88;
  if (v31(v28, 1, v88) == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v89[5] - 8) + 56))(v82, 1, 1);
    char v33 = *(void (**)(char *, uint64_t))(v26 + 8);
    goto LABEL_30;
  }
  int64_t v69 = v31;
  unint64_t v70 = v27;
  uint64_t v34 = (void (*)(char *, char *, uint64_t))v30[4];
  uint64_t v35 = v81;
  v67[1] = v30 + 4;
  v67[0] = v34;
  v34(v81, v28, v32);
  uint64_t v36 = *(void *)(v74 + *((int *)v89 + 18));
  uint64_t v37 = (char *)(v30 + 2);
  uint64_t v38 = v84;
  uint64_t v68 = (void (*)(char *, char *, uint64_t))v30[2];
  v68(v84, v35, v32);
  uint64_t v39 = (void (*)(char *, void, uint64_t, uint64_t))v30[7];
  char v40 = 1;
  v39(v38, 0, 1, v32);
  uint64_t v41 = v71[2];
  uint64_t v83 = v37;
  if (v41)
  {
    uint64_t v42 = v85;
    uint64_t v43 = (uint64_t)(v71 + 4);
    swift_bridgeObjectRetain();
    unint64_t v44 = 0;
    while (1)
    {
      outlined init with copy of (id: PredicateExpressions.VariableID, value: Any)(v43, (uint64_t)&v92);
      uint64_t v45 = v92;
      outlined destroy of (id: PredicateExpressions.VariableID, value: Any)((uint64_t)&v92);
      if (v45 == v36) {
        break;
      }
      ++v44;
      v43 += 40;
      if (v41 == v44)
      {
        swift_bridgeObjectRelease();
        unint64_t v44 = 0;
        char v40 = 1;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    char v40 = 0;
LABEL_11:
    uint64_t v29 = v42;
  }
  else
  {
    unint64_t v44 = 0;
    uint64_t v29 = v85;
  }
  uint64_t v46 = v78;
  unint64_t v47 = v84;
  v70(v78, v84, v29);
  uint64_t v48 = v46;
  uint64_t v49 = v46;
  uint64_t v50 = v88;
  if (v69(v49, 1, v88) == 1)
  {
    char v33 = *(void (**)(char *, uint64_t))(v87 + 8);
    v33(v48, v29);
    uint64_t v51 = v79;
    if (v40)
    {
      v33(v47, v29);
    }
    else
    {
      specialized Array.remove(at:)(v44, (uint64_t)&v92);
      v33(v47, v29);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92 + 8);
    }
    uint64_t v56 = v80;
    goto LABEL_27;
  }
  uint64_t v52 = v75;
  ((void (*)(char *, char *, uint64_t))v67[0])(v75, v48, v50);
  uint64_t v51 = v79;
  if (v40)
  {
    uint64_t v91 = v50;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v90);
    v68((char *)boxed_opaque_existential_1, v52, v50);
    *(void *)&long long v92 = v36;
    outlined init with take of Any(&v90, (long long *)((char *)&v92 + 8));
    unint64_t v54 = v95;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v54[2] + 1, 1, v54);
    }
    uint64_t v55 = v87;
    uint64_t v56 = v80;
    unint64_t v58 = v54[2];
    unint64_t v57 = v54[3];
    if (v58 >= v57 >> 1) {
      unint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v57 > 1), v58 + 1, 1, v54);
    }
    v54[2] = v58 + 1;
    uint64_t v59 = &v54[5 * v58];
    long long v60 = v92;
    long long v61 = v93;
    v59[8] = v94;
    *((_OWORD *)v59 + 2) = v60;
    *((_OWORD *)v59 + 3) = v61;
    v95 = v54;
    char v33 = *(void (**)(char *, uint64_t))(v55 + 8);
    v33(v84, v29);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v75, v88);
    goto LABEL_27;
  }
  *((void *)&v93 + 1) = v50;
  uint64_t v62 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v92);
  v68((char *)v62, v52, v50);
  Swift::Int v63 = v95;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v63);
    Swift::Int v63 = (void *)result;
    v95 = (void *)result;
  }
  uint64_t v56 = v80;
  if (v44 < v63[2])
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v63[5 * v44 + 5]);
    outlined init with take of Any(&v92, &v63[5 * v44 + 5]);
    char v33 = *(void (**)(char *, uint64_t))(v87 + 8);
    v33(v47, v29);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v75, v50);
LABEL_27:
    *(void *)&long long v92 = v95;
    uint64_t v65 = v73;
    (*(void (**)(long long *, uint64_t, uint64_t))(v51 + 16))(&v92, v56, v51);
    if (v65)
    {
      (*(void (**)(char *, uint64_t))(v86 + 8))(v81, v88);
      uint64_t v66 = v72;
LABEL_31:
      v33(v66, v29);
      return swift_bridgeObjectRelease();
    }
    type metadata accessor for Optional();
    swift_dynamicCast();
    (*(void (**)(char *, uint64_t))(v86 + 8))(v81, v88);
LABEL_30:
    uint64_t v66 = v72;
    goto LABEL_31;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.OptionalFlatMap<A, B, C, D>@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.OptionalFlatMap.evaluate(_:)(a1, a2, a3);
}

uint64_t PredicateExpressions.NilCoalesce.rhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t PredicateExpressions.NilCoalesce.init(lhs:rhs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for PredicateExpressions.NilCoalesce();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t PredicateExpressions.NilCoalesce.evaluate(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v28 = a3;
  uint64_t v29 = a2;
  uint64_t v6 = (void *)(a2 - 8);
  uint64_t v27 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v26 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v6[6];
  uint64_t v9 = v6[4];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v25 = *(void *)(v11 - 8);
  double v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v15 = *a1;
  uint64_t v30 = v15;
  uint64_t result = (*(uint64_t (**)(uint64_t *, void, double))(v6[5] + 16))(&v30, v6[3], v12);
  if (!v4)
  {
    uint64_t v23 = v9;
    uint64_t v24 = v11;
    uint64_t v18 = v26;
    uint64_t v17 = v27;
    uint64_t v19 = v3;
    uint64_t v20 = v29;
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v26, v19, v29);
    uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v14, 1, AssociatedTypeWitness) == 1)
    {
      uint64_t v30 = v15;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16))(&v30, v23, v8);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v18, v29);
      return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v14, v24);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v17 + 8))(v18, v20);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 32))(v28, v14, AssociatedTypeWitness);
    }
  }
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.NilCoalesce<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.NilCoalesce.evaluate(_:)(a1, a2, a3);
}

uint64_t static PredicateExpressions.build_NilCoalesce<A, B>(lhs:rhs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a5, a1);
  uint64_t v8 = type metadata accessor for PredicateExpressions.NilCoalesce();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t PredicateExpressions.ForcedUnwrap.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t PredicateExpressions.ForcedUnwrap.evaluate(_:)@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = a2[3];
  uint64_t v29 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v27 - v13;
  unint64_t v27 = *a1;
  uint64_t result = (*(uint64_t (**)(unint64_t *, void, double))(a2[4] + 16))(&v27, a2[2], v12);
  if (!v3)
  {
    uint64_t v16 = v8;
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    uint64_t v18 = v29;
    v17(v10, v14, v29);
    uint64_t v19 = *(void *)(v7 - 8);
    int v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v10, 1, v7);
    uint64_t v21 = *(void (**)(char *, uint64_t))(v16 + 8);
    if (v20 == 1)
    {
      v21(v10, v18);
      unint64_t v27 = 0;
      unint64_t v28 = 0xE000000000000000;
      _StringGuts.grow(_:)(44);
      swift_bridgeObjectRelease();
      unint64_t v27 = 0xD000000000000029;
      unint64_t v28 = 0x80000001823AB900;
      v22._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._countAndFlagsBits = 39;
      v23._object = (void *)0xE100000000000000;
      String.append(_:)(v23);
      unint64_t v24 = v27;
      unint64_t v25 = v28;
      lazy protocol witness table accessor for type PredicateError and conformance PredicateError();
      swift_allocError();
      *(void *)uint64_t v26 = v24;
      *(void *)(v26 + 8) = v25;
      *(unsigned char *)(v26 + 16) = 0;
      swift_willThrow();
      return ((uint64_t (*)(char *, uint64_t))v21)(v14, v18);
    }
    else
    {
      v21(v14, v18);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(a3, v10, v7);
    }
  }
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.ForcedUnwrap<A, B>@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.ForcedUnwrap.evaluate(_:)(a1, a2, a3);
}

uint64_t static PredicateExpressions.build_ForcedUnwrap<A, B>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

uint64_t PredicateExpressions.OptionalFlatMap.description.getter()
{
  _StringGuts.grow(_:)(57);
  v0._object = (void *)0x80000001823AB930;
  v0._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x626169726176202CLL;
  v1._object = (void *)0xEC000000203A656CLL;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 0x656C626169726156;
  v4._object = (void *)0xE900000000000028;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x66736E617274202CLL;
  v5._object = (void *)0xED0000203A6D726FLL;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t PredicateExpressions.NilCoalesce.description.getter()
{
  _StringGuts.grow(_:)(29);
  v0._object = (void *)0x80000001823AB950;
  v0._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x203A736872202CLL;
  v1._object = (void *)0xE700000000000000;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t PredicateExpressions.ForcedUnwrap.description.getter()
{
  _StringGuts.grow(_:)(23);
  v0._object = (void *)0x80000001823AB970;
  v0._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t PredicateExpressions.OptionalFlatMap<>.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    type metadata accessor for PredicateExpressions.Variable();
    swift_getWitnessTable();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t PredicateExpressions.OptionalFlatMap<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v37 = a4;
  uint64_t v32 = a5;
  uint64_t v35 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v36 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39[0] = v13;
  v39[1] = v14;
  uint64_t v33 = v14;
  v39[2] = v15;
  uint64_t v40 = v16;
  uint64_t v41 = v17;
  uint64_t v42 = v18;
  uint64_t v19 = type metadata accessor for PredicateExpressions.OptionalFlatMap();
  uint64_t v31 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v29 - v20;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  Swift::String v22 = v38;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v22) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v38 = a1;
  uint64_t v30 = v21;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v39, v40);
  Swift::String v23 = v36;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  unint64_t v24 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
  uint64_t v37 = a2;
  v24(v30, v23, a2);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v39, v40);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  unint64_t v25 = v30;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v30[*(int *)(v19 + 68)], v9, a3);
  type metadata accessor for PredicateExpressions.Variable();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v39, v40);
  swift_getWitnessTable();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v26 = (uint64_t)v38;
  *(void *)&v25[*(int *)(v19 + 72)] = v43;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  uint64_t v27 = v31;
  (*(void (**)(uint64_t, char *, uint64_t))(v31 + 16))(v32, v25, v19);
  __swift_destroy_boxed_opaque_existential_1(v26);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v25, v19);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.OptionalFlatMap<A, B, C, D>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.OptionalFlatMap<>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 32), *(void *)(a3 - 8), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(void *a1)
{
  return PredicateExpressions.OptionalFlatMap<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.NilCoalesce<>.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t PredicateExpressions.NilCoalesce<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v31 = a4;
  uint64_t v33 = a3;
  uint64_t v29 = a5;
  uint64_t v28 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v32 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = v13;
  v34[0] = v13;
  v34[1] = v14;
  void v34[2] = v15;
  uint64_t v35 = v16;
  uint64_t v17 = type metadata accessor for PredicateExpressions.NilCoalesce();
  uint64_t v27 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v25 - v18;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v5) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v25 = v17;
  uint64_t v26 = v19;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v34, v35);
  uint64_t v20 = v32;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v21 = v26;
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v26, v20, v36);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v34, v35);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v22 = v25;
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(&v21[*(int *)(v25 + 52)], v9, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  uint64_t v23 = v27;
  (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v29, v21, v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v21, v22);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.NilCoalesce<A, B>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.NilCoalesce<>.init(from:)(a1, *(void *)(a2 + 24), *(void *)(a3 - 8), *(void *)(a3 - 24), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.NilCoalesce<A, B>(void *a1)
{
  return PredicateExpressions.NilCoalesce<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.ForcedUnwrap<>.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t PredicateExpressions.ForcedUnwrap<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v17 = a4;
  uint64_t v18 = a3;
  uint64_t v16 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v20 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PredicateExpressions.ForcedUnwrap();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v14 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v4)
  {
    uint64_t v14 = v8;
    uint64_t v15 = v9;
    __swift_project_boxed_opaque_existential_1(v19, v19[3]);
    uint64_t v12 = v20;
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v11, v12, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v17, v11, v14);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.ForcedUnwrap<A, B>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.ForcedUnwrap<>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.ForcedUnwrap<A, B>(void *a1)
{
  return PredicateExpressions.ForcedUnwrap<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.NilLiteral.evaluate(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56))(a2, 1, 1);
}

uint64_t PredicateExpressions.NilLiteral.encode(to:)(void *a1)
{
  return specialized PredicateExpressions.NilLiteral.encode(to:)(a1);
}

uint64_t PredicateExpressions.NilLiteral.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PredicateExpressions.NilLiteral<A>(uint64_t a1)
{
  return PredicateExpressions.NilLiteral.init(from:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PredicateExpressions.NilLiteral<A>(void *a1)
{
  return specialized PredicateExpressions.NilLiteral.encode(to:)(a1);
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.NilLiteral<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return PredicateExpressions.NilLiteral.evaluate(_:)(a1, a2);
}

uint64_t specialized Array.remove(at:)(unint64_t a1)
{
  unint64_t v3 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v3 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    unint64_t v3 = v5;
    *uint64_t v1 = v5;
  }
  uint64_t v6 = v3 & 0xFFFFFFFFFFFFFF8;
  unint64_t v7 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v8 = v7 - 1;
    uint64_t v9 = v7 - 1 - a1;
    if (v9 >= 0)
    {
      uint64_t v10 = v6 + 8 * a1;
      uint64_t v11 = *(void *)(v10 + 32);
      memmove((void *)(v10 + 32), (const void *)(v10 + 40), 8 * v9);
      *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
      specialized Array._endMutation()();
      return v11;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    unint64_t v8 = &v5[5 * a1];
    long long v9 = *((_OWORD *)v8 + 3);
    *(_OWORD *)a2 = *((_OWORD *)v8 + 2);
    *(_OWORD *)(a2 + 16) = v9;
    *(void *)(a2 + 32) = v8[8];
    if ((uint64_t)(v7 - a1) >= 0)
    {
      uint64_t result = (uint64_t)memmove(v8 + 4, v8 + 9, 40 * (v7 - a1));
      _OWORD v5[2] = v7;
      *Swift::String v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined destroy of (id: PredicateExpressions.VariableID, value: Any)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: PredicateExpressions.VariableID, value: Any));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type PredicateError and conformance PredicateError()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateError and conformance PredicateError;
  if (!lazy protocol witness table cache variable for type PredicateError and conformance PredicateError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateError and conformance PredicateError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateError and conformance PredicateError;
  if (!lazy protocol witness table cache variable for type PredicateError and conformance PredicateError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateError and conformance PredicateError);
  }
  return result;
}

uint64_t specialized PredicateExpressions.NilLiteral.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encodeNil()();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.NilCoalesce<A, B>(void *a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ForcedUnwrap<A, B>(void *a1)
{
  a1[1] = swift_getWitnessTable();
  a1[2] = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  a1[3] = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.OptionalFlatMap(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 32);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = *(void *)(v8 + 64) + 7;
  unint64_t v12 = ((v11 + ((v6 + v9) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 8;
  unsigned int v13 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v13 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v12 > 0x18)
  {
    uint64_t v16 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v17 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v18 = ((unint64_t)a2 + v10) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v17, v18, v7);
    *(void *)((v11 + (((unint64_t)v4 + v10) & v17)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v11 + v18) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t assignWithCopy for PredicateExpressions.OptionalFlatMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v12, v13);
  *(void *)((*(void *)(v9 + 40) + 7 + v12) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v9 + 40) + 7 + v13) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.OptionalFlatMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v12, v13);
  *(void *)((*(void *)(v9 + 32) + 7 + v12) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v9 + 32) + 7 + v13) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.OptionalFlatMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v12, v13);
  *(void *)((*(void *)(v9 + 24) + 7 + v12) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v9 + 24) + 7 + v13) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.OptionalFlatMap(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 32);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  if (v10 < a2)
  {
    unint64_t v12 = ((*(void *)(*(void *)(v5 - 8) + 64) + (v11 & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v13 = a2 - v10;
    uint64_t v14 = v12 & 0xFFFFFFF8;
    if ((v12 & 0xFFFFFFF8) != 0) {
      unsigned int v15 = 2;
    }
    else {
      unsigned int v15 = v13 + 1;
    }
    if (v15 >= 0x10000) {
      LODWORD(v16) = 4;
    }
    else {
      LODWORD(v16) = 2;
    }
    if (v15 < 0x100) {
      LODWORD(v16) = 1;
    }
    if (v15 >= 2) {
      uint64_t v16 = v16;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *((unsigned __int8 *)a1 + v12);
        if (!v17) {
          break;
        }
        goto LABEL_21;
      case 2:
        int v17 = *(unsigned __int16 *)((char *)a1 + v12);
        if (v17) {
          goto LABEL_21;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x181B7721CLL);
      case 4:
        int v17 = *(int *)((char *)a1 + v12);
        if (!v17) {
          break;
        }
LABEL_21:
        unsigned int v18 = v17 - 1;
        if (v14)
        {
          unsigned int v18 = 0;
          int v19 = *a1;
        }
        else
        {
          int v19 = 0;
        }
        return v10 + (v19 | v18) + 1;
      default:
        break;
    }
  }
  if (!v10) {
    return 0;
  }
  if (v6 >= v8) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
}

void storeEnumTagSinglePayload for PredicateExpressions.OptionalFlatMap(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 32);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = ((*(void *)(*(void *)(v8 - 8) + 64) + (v13 & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v12 >= a3)
  {
    int v18 = 0;
    int v19 = a2 - v12;
    if (a2 <= v12)
    {
LABEL_17:
      switch(v18)
      {
        case 1:
          a1[v14] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v14] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_41;
        case 4:
          *(_DWORD *)&a1[v14] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 >= v10)
            {
              unint64_t v24 = *(void (**)(void))(v6 + 56);
              v24();
            }
            else
            {
              unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
              uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
              v23(v22);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v15 = a3 - v12;
    if (((*(_DWORD *)(*(void *)(v8 - 8) + 64) + (v13 & ~v11) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v16 = v15 + 1;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v16 >= 0x10000) {
      int v17 = 4;
    }
    else {
      int v17 = 2;
    }
    if (v16 < 0x100) {
      int v17 = 1;
    }
    if (v16 >= 2) {
      int v18 = v17;
    }
    else {
      int v18 = 0;
    }
    int v19 = a2 - v12;
    if (a2 <= v12) {
      goto LABEL_17;
    }
  }
  if (((*(_DWORD *)(*(void *)(v8 - 8) + 64) + (v13 & ~v11) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v20 = v19;
  }
  else {
    int v20 = 1;
  }
  if (((*(_DWORD *)(*(void *)(v8 - 8) + 64) + (v13 & ~v11) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v21 = ~v12 + a2;
    bzero(a1, v14);
    *(_DWORD *)a1 = v21;
  }
  switch(v18)
  {
    case 1:
      a1[v14] = v20;
      break;
    case 2:
      *(_WORD *)&a1[v14] = v20;
      break;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x181B77490);
    case 4:
      *(_DWORD *)&a1[v14] = v20;
      break;
    default:
      return;
  }
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.NilCoalesce(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for PredicateExpressions.NilCoalesce(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x181B7797CLL);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          unint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.ForcedUnwrap(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t assignWithCopy for PredicateExpressions.ForcedUnwrap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.ForcedUnwrap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.ForcedUnwrap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.ForcedUnwrap(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for PredicateExpressions.ForcedUnwrap(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x181B77EC0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unsigned int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

void static CocoaError.errorWithFilePath(_:errno:reading:variant:source:destination:)(Swift::Int32 fileErrno@<W1>, uint64_t a2@<X0>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, id a8@<X7>, void *a9@<X8>, void *a10)
{
  uint64_t v11 = a7;
  uint64_t v13 = a5;
  Swift::Int32 v15 = fileErrno;
  v97 = a9;
  unsigned int v16 = a10;
  int v17 = *(void **)a2;
  uint64_t v18 = *(void *)(a2 + 16);
  char v19 = *(unsigned char *)(a2 + 24);
  unint64_t v98 = *(void *)(a2 + 8);
  unint64_t v99 = (uint64_t (*)(void))v18;
  if (v19)
  {
    CocoaError.Code.init(fileErrno:reading:)(fileErrno, a3 & 1);
    uint64_t v92 = v105;
    swift_retain_n();
    id v20 = v17;
    swift_retain_n();
    id v93 = v20;
    uint64_t v94 = a6;
    id v95 = a8;
    uint64_t v89 = a4;
    if (v15 == 102)
    {
      id v96 = 0;
      int v21 = v99;
      goto LABEL_22;
    }
    uint64_t v22 = v13;
    a6 = (uint64_t)v17;
    uint64_t v23 = v11;
    int v17 = a10;
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
    {
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      v103._uint64_t countAndFlagsBits = 0xD000000000000014;
      v103._unint64_t object = (void *)0x80000001823A9780;
      LODWORD(v100) = v15;
      goto LABEL_63;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
    uint64_t v25 = (int)POSIXErrorCode.rawValue.getter();
    a8 = objc_allocWithZone((Class)NSError);
    uint64_t v26 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v27 = objc_msgSend(a8, sel_initWithDomain_code_userInfo_, v26, v25, _NativeDictionary.bridged()(), v89);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v96 = v27;
    id v28 = objc_msgSend(v27, sel_domain);
    id v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    uint64_t v31 = v30;

    if (v29 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v31 == v32) {
      goto LABEL_20;
    }
    Swift::Int32 v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unsigned int v16 = a10;
    int v21 = v99;
    if (v15)
    {
LABEL_21:
      uint64_t v11 = v23;
      int v17 = (void *)a6;
      uint64_t v13 = v22;
LABEL_22:
      swift_bridgeObjectRetain();
      uint64_t v44 = v13;
      swift_bridgeObjectRetain();
      uint64_t v90 = v11;
      swift_bridgeObjectRetain();
      uint64_t v45 = v98;
      outlined copy of PathOrURL(v17, v98, (uint64_t)v21, 1);
      if (_foundation_swift_url_feature_enabled())
      {
        uint64_t v46 = v17;
        uint64_t v104 = v21;
        swift_retain();
        id v47 = v93;
        swift_retain();
        Swift::String v48 = URL.path(percentEncoded:)(1);
        uint64_t countAndFlagsBits = v48._countAndFlagsBits;
        Swift::String v103 = v48;
        swift_bridgeObjectRetain();
        uint64_t v91 = v16;
        if (String.count.getter() <= 1)
        {
          unint64_t object = (unint64_t)v48._object;
        }
        else
        {
          unint64_t object = (unint64_t)v48._object;
          if ((specialized BidirectionalCollection.last.getter(v48._countAndFlagsBits, (unint64_t)v48._object) & 0x1FF) == 0x2F)
          {
            specialized RangeReplaceableCollection<>.popLast()();
            swift_bridgeObjectRelease();
            uint64_t countAndFlagsBits = v103._countAndFlagsBits;
            unint64_t object = (unint64_t)v103._object;
          }
        }
        uint64_t v100 = Set.init(minimumCapacity:)();
        uint64_t v67 = specialized Set._Variant.insert(_:)(&v102, 0x2FuLL);
        uint64_t v68 = v100;
        uint64_t v69 = HIBYTE(object) & 0xF;
        if ((object & 0x2000000000000000) == 0) {
          uint64_t v69 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        }
        if (v69)
        {
          uint64_t v100 = countAndFlagsBits;
          unint64_t v101 = object;
          MEMORY[0x1F4188790](v67);
          v88[2] = &v100;
          v88[3] = v68;
          swift_bridgeObjectRetain();
          specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:), (uint64_t)v88, countAndFlagsBits, object);
          if (v70 == 1)
          {
            Swift::Int v71 = v100;
            unint64_t v72 = v101;
            swift_bridgeObjectRetain();
            specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v71, v72, v68);
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v45 = v98;
          unsigned int v16 = v91;
        }
        else
        {
          swift_bridgeObjectRelease();
          unsigned int v16 = v91;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int v17 = v46;
        uint64_t v74 = (uint64_t)v99;
        outlined consume of PathOrURL(v46, v45, (uint64_t)v99, 1);
        outlined consume of PathOrURL(v46, v45, v74, 1);
        id v51 = v93;
      }
      else
      {
        id v51 = v93;
        id v52 = objc_msgSend(v93, sel__parameterString);
        if (v52)
        {
          unint64_t v53 = v52;
          id v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
          uint64_t v56 = v55;

          uint64_t v45 = v98;
          if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
            && (id v57 = objc_msgSend(v93, sel_path)) != 0)
          {
            unint64_t v58 = v57;
            uint64_t v59 = v17;
            long long v60 = v16;
            id v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
            Swift::Int v63 = v62;

            v103._uint64_t countAndFlagsBits = (uint64_t)v61;
            v103._unint64_t object = v63;
            swift_bridgeObjectRetain();
            v64._uint64_t countAndFlagsBits = 59;
            v64._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v64);
            uint64_t v45 = v98;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            v65._uint64_t countAndFlagsBits = (uint64_t)v54;
            v65._unint64_t object = v56;
            String.append(_:)(v65);
            swift_bridgeObjectRelease();
            unsigned int v16 = v60;
            int v17 = v59;
            id v51 = v93;
            swift_bridgeObjectRelease();
            uint64_t v66 = v59;
          }
          else
          {
            v103._uint64_t countAndFlagsBits = 59;
            v103._unint64_t object = (void *)0xE100000000000000;
            v73._uint64_t countAndFlagsBits = (uint64_t)v54;
            v73._unint64_t object = v56;
            String.append(_:)(v73);
            swift_bridgeObjectRelease();
            uint64_t v66 = v17;
          }
          uint64_t v74 = (uint64_t)v99;
          outlined consume of PathOrURL(v66, v45, (uint64_t)v99, 1);
        }
        else
        {
          id v75 = objc_msgSend(v93, sel_path);
          uint64_t v45 = v98;
          if (v75)
          {
            uint64_t v76 = v75;
            static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
          }
          uint64_t v74 = (uint64_t)v99;
          outlined consume of PathOrURL(v17, v98, (uint64_t)v99, 1);
        }
      }
      uint64_t v77 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v78 = v51;
      uint64_t v79 = v17;
      outlined consume of PathOrURL(v17, v45, v74, 1);
      id v80 = v96;
      if (v96)
      {
        v103._uint64_t countAndFlagsBits = (uint64_t)v96;
        lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
        id v81 = v80;
        if (_getErrorEmbeddedNSError<A>(_:)())
        {
        }
        else
        {
          swift_allocError();
          *uint64_t v82 = v81;
        }
        id v80 = (id)_swift_stdlib_bridgeErrorToNSError();
      }
      if (v44)
      {
        uint64_t v83 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        if (v90) {
          goto LABEL_54;
        }
      }
      else
      {
        uint64_t v83 = 0;
        if (v90)
        {
LABEL_54:
          uint64_t v84 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v85 = v92;
          if (!v16)
          {
LABEL_56:
            id v86 = objc_msgSend(self, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, v85, v77, v78, v80, v83, v84, v16);
            swift_unknownObjectRelease();

            outlined consume of PathOrURL(v79, v98, (uint64_t)v99, 1);
            void *v97 = v86;
            return;
          }
LABEL_55:
          unsigned int v16 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          goto LABEL_56;
        }
      }
      uint64_t v84 = 0;
      uint64_t v85 = v92;
      if (!v16) {
        goto LABEL_56;
      }
      goto LABEL_55;
    }
    __break(1u);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = a7;
    CocoaError.Code.init(fileErrno:reading:)(fileErrno, a3 & 1);
    int v21 = (uint64_t (*)(void))v100;
    if (v15 == 102)
    {
      id v24 = 0;
      goto LABEL_32;
    }
  }
  uint64_t v94 = a6;
  id v95 = a8;
  a6 = (uint64_t)v17;
  uint64_t v91 = v16;
  if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
    uint64_t v34 = (int)POSIXErrorCode.rawValue.getter();
    id v35 = objc_allocWithZone((Class)NSError);
    uint64_t v36 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v24 = objc_msgSend(v35, sel_initWithDomain_code_userInfo_, v36, v34, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v37 = objc_msgSend(v24, sel_domain);
    id v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    uint64_t v40 = v39;

    if (v38 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v40 == v41)
    {
      swift_bridgeObjectRelease_n();
      int v17 = (void *)a6;
    }
    else
    {
      char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v17 = (void *)a6;
      if ((v43 & 1) == 0)
      {
        __break(1u);
LABEL_20:
        swift_bridgeObjectRelease_n();
        unsigned int v16 = v17;
        int v21 = v99;
        goto LABEL_21;
      }
    }
    a6 = v94;
    a8 = v95;
    unsigned int v16 = v91;
LABEL_32:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of PathOrURL(v17, v98, (uint64_t)v99, 0);
    specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)(v21, (uint64_t)v17, v98, v24, a4, v22, a6, v23, (void *(*)(void *__return_ptr, void *, uint64_t))v97, (uint64_t)a8, (uint64_t)v16);
    return;
  }
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v103._uint64_t countAndFlagsBits = 0xD000000000000014;
  v103._unint64_t object = (void *)0x80000001823A9780;
  LODWORD(v105) = v15;
LABEL_63:
  v87._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v87);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Foundation::CocoaError::Code __swiftcall CocoaError.Code.init(fileErrno:reading:)(Swift::Int32 fileErrno, Swift::Bool reading)
{
  if (reading)
  {
    uint64_t v3 = 263;
    switch(fileErrno)
    {
      case 1:
      case 13:
        *uint64_t v2 = 257;
        break;
      case 2:
        *uint64_t v2 = 260;
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
        goto LABEL_9;
      case 27:
        goto LABEL_12;
      default:
        if (fileErrno == 63) {
          *uint64_t v2 = 258;
        }
        else {
LABEL_9:
        }
          *uint64_t v2 = 256;
        break;
    }
  }
  else
  {
    uint64_t v3 = 4;
    switch(fileErrno)
    {
      case 1:
      case 13:
        *uint64_t v2 = 513;
        break;
      case 2:
        goto LABEL_12;
      case 17:
        *uint64_t v2 = 516;
        break;
      case 28:
      case 69:
        *uint64_t v2 = 640;
        break;
      case 30:
        *uint64_t v2 = 642;
        break;
      case 63:
        *uint64_t v2 = 514;
        break;
      default:
        uint64_t v3 = 512;
LABEL_12:
        *uint64_t v2 = v3;
        break;
    }
  }
  LODWORD(result.rawValue) = fileErrno;
  return result;
}

id NSSortDescriptor.init<A, B>(keyPath:ascending:comparator:)(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  id v8 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  _bridgeKeyPathToString(_:)();
  uint64_t v9 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v14[4] = a3;
  v14[5] = a4;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 1107296256;
  v14[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @in_guaranteed Any) -> (@unowned NSComparisonResult);
  void v14[3] = &block_descriptor_2;
  unsigned int v10 = _Block_copy(v14);
  swift_retain();
  swift_release();
  id v11 = objc_msgSend(v8, sel_initWithKey_ascending_comparator_, v9, a2 & 1, v10);
  _Block_release(v10);
  swift_unknownObjectRelease();
  id v12 = v11;
  swift_retain();
  objc_setAssociatedObject(v12, v12, a1, (void *)0x301);

  swift_release_n();
  swift_release();
  return v12;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @in_guaranteed Any) -> (@unowned NSComparisonResult)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = *(uint64_t (**)(void *, void *))(a1 + 32);
  v9[3] = swift_getObjectType();
  v9[0] = a2;
  long long v8[3] = swift_getObjectType();
  v8[0] = a3;
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v6 = v5(v9, v8);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  return v6;
}

uint64_t NSSortDescriptor.keyPath.getter()
{
  if (objc_getAssociatedObject(v0, v0))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v3, 0, sizeof(v3));
  }
  outlined init with take of Any?((uint64_t)v3, (uint64_t)v4);
  if (v5)
  {
    type metadata accessor for AnyKeyPath();
    if (swift_dynamicCast()) {
      return v2;
    }
    else {
      return 0;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v4);
    return 0;
  }
}

id MachError._nsError.getter()
{
  return *v0;
}

void __swiftcall MachError.init(_nsError:)(Foundation::MachError *__return_ptr retstr, NSError *_nsError)
{
  uint64_t v4 = [(NSError *)_nsError domain];
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSMachErrorDomain") && v7 == v8) {
    goto LABEL_7;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    swift_bridgeObjectRelease_n();
  }
  retstr->_nsError.super.isa = (Class)_nsError;
}

id static MachError.errorDomain.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSMachErrorDomain");
}

uint64_t MachError.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

id protocol witness for static CustomNSError.errorDomain.getter in conformance MachError()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSMachErrorDomain");
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance MachError()
{
  return NSObject.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance MachError()
{
  id v1 = *v0;
  NSObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MachError()
{
  id v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = v1;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

id protocol witness for Error._code.getter in conformance MachError()
{
  return objc_msgSend(*v0, sel_code);
}

id protocol witness for static Equatable.== infix(_:_:) in conformance MachError(id *a1, void *a2)
{
  return objc_msgSend(*a1, sel_isEqual_, *a2);
}

uint64_t static MachError.success.getter()
{
  return 0;
}

uint64_t static MachError.invalidAddress.getter()
{
  return 1;
}

uint64_t static MachError.protectionFailure.getter()
{
  return 2;
}

uint64_t static MachError.noSpace.getter()
{
  return 3;
}

uint64_t static MachError.invalidArgument.getter()
{
  return 4;
}

uint64_t static MachError.failure.getter()
{
  return 5;
}

uint64_t static MachError.resourceShortage.getter()
{
  return 6;
}

uint64_t static MachError.notReceiver.getter()
{
  return 7;
}

uint64_t static MachError.noAccess.getter()
{
  return 8;
}

uint64_t static MachError.memoryFailure.getter()
{
  return 9;
}

uint64_t static MachError.memoryError.getter()
{
  return 10;
}

uint64_t static MachError.alreadyInSet.getter()
{
  return 11;
}

uint64_t static MachError.notInSet.getter()
{
  return 12;
}

uint64_t static MachError.nameExists.getter()
{
  return 13;
}

uint64_t static MachError.aborted.getter()
{
  return 14;
}

uint64_t static MachError.invalidName.getter()
{
  return 15;
}

uint64_t static MachError.invalidTask.getter()
{
  return 16;
}

uint64_t static MachError.invalidRight.getter()
{
  return 17;
}

uint64_t static MachError.invalidValue.getter()
{
  return 18;
}

uint64_t static MachError.userReferencesOverflow.getter()
{
  return 19;
}

uint64_t static MachError.invalidCapability.getter()
{
  return 20;
}

uint64_t static MachError.rightExists.getter()
{
  return 21;
}

uint64_t static MachError.invalidHost.getter()
{
  return 22;
}

uint64_t static MachError.memoryPresent.getter()
{
  return 23;
}

uint64_t static MachError.memoryDataMoved.getter()
{
  return 24;
}

uint64_t static MachError.memoryRestartCopy.getter()
{
  return 25;
}

uint64_t static MachError.invalidProcessorSet.getter()
{
  return 26;
}

uint64_t static MachError.policyLimit.getter()
{
  return 27;
}

uint64_t static MachError.invalidPolicy.getter()
{
  return 28;
}

uint64_t static MachError.invalidObject.getter()
{
  return 29;
}

uint64_t static MachError.alreadyWaiting.getter()
{
  return 30;
}

uint64_t static MachError.defaultSet.getter()
{
  return 31;
}

uint64_t static MachError.exceptionProtected.getter()
{
  return 32;
}

uint64_t static MachError.invalidLedger.getter()
{
  return 33;
}

uint64_t static MachError.invalidMemoryControl.getter()
{
  return 34;
}

uint64_t static MachError.invalidSecurity.getter()
{
  return 35;
}

uint64_t static MachError.notDepressed.getter()
{
  return 36;
}

uint64_t static MachError.terminated.getter()
{
  return 37;
}

uint64_t static MachError.lockSetDestroyed.getter()
{
  return 38;
}

uint64_t static MachError.lockUnstable.getter()
{
  return 39;
}

uint64_t static MachError.lockOwned.getter()
{
  return 40;
}

uint64_t static MachError.lockOwnedSelf.getter()
{
  return 41;
}

uint64_t static MachError.semaphoreDestroyed.getter()
{
  return 42;
}

uint64_t static MachError.rpcServerTerminated.getter()
{
  return 43;
}

uint64_t static MachError.rpcTerminateOrphan.getter()
{
  return 44;
}

uint64_t static MachError.rpcContinueOrphan.getter()
{
  return 45;
}

uint64_t static MachError.notSupported.getter()
{
  return 46;
}

uint64_t static MachError.nodeDown.getter()
{
  return 47;
}

uint64_t static MachError.notWaiting.getter()
{
  return 48;
}

uint64_t static MachError.operationTimedOut.getter()
{
  return 49;
}

uint64_t static MachError.codesignError.getter()
{
  return 50;
}

uint64_t static MachError.policyStatic.getter()
{
  return 51;
}

unint64_t lazy protocol witness table accessor for type MachErrorCode and conformance MachErrorCode()
{
  unint64_t result = lazy protocol witness table cache variable for type MachErrorCode and conformance MachErrorCode;
  if (!lazy protocol witness table cache variable for type MachErrorCode and conformance MachErrorCode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MachErrorCode and conformance MachErrorCode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MachErrorCode and conformance MachErrorCode;
  if (!lazy protocol witness table cache variable for type MachErrorCode and conformance MachErrorCode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MachErrorCode and conformance MachErrorCode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MachErrorCode and conformance MachErrorCode;
  if (!lazy protocol witness table cache variable for type MachErrorCode and conformance MachErrorCode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MachErrorCode and conformance MachErrorCode);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for MachError(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type MachError and conformance MachError();
  a1[2] = lazy protocol witness table accessor for type MachError and conformance MachError();
  unint64_t result = lazy protocol witness table accessor for type MachError and conformance MachError();
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type MachError and conformance MachError()
{
  unint64_t result = lazy protocol witness table cache variable for type MachError and conformance MachError;
  if (!lazy protocol witness table cache variable for type MachError and conformance MachError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MachError and conformance MachError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MachError and conformance MachError;
  if (!lazy protocol witness table cache variable for type MachError and conformance MachError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MachError and conformance MachError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MachError and conformance MachError;
  if (!lazy protocol witness table cache variable for type MachError and conformance MachError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MachError and conformance MachError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MachError and conformance MachError;
  if (!lazy protocol witness table cache variable for type MachError and conformance MachError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MachError and conformance MachError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MachError and conformance MachError;
  if (!lazy protocol witness table cache variable for type MachError and conformance MachError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MachError and conformance MachError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MachError and conformance MachError;
  if (!lazy protocol witness table cache variable for type MachError and conformance MachError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MachError and conformance MachError);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for MachError(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type MachError and conformance MachError();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for MachErrorCode(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type MachErrorCode and conformance MachErrorCode();
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for MachError()
{
  return &type metadata for MachError;
}

uint64_t Predicate.encode(to:configuration:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v113 = (uint64_t *)(8 * v6);
  if (v6 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    if (v6)
    {
      unint64_t v9 = *(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL;
      char v10 = (uint64_t *)((char *)&v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v11 = v6;
      do
      {
        v9 += 8;
        *v10++ = swift_getMetatypeMetadata();
        --v11;
      }
      while (v11);
    }
    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
  }
  char v102 = &v93;
  uint64_t v95 = MetatypeMetadata;
  MEMORY[0x1F4188790](MetatypeMetadata);
  uint64_t v13 = (char *)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressionCodingKeys>);
  unint64_t v101 = &v93;
  uint64_t v110 = v14;
  uint64_t v100 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  v112 = (char *)&v93 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = a3;
  if (v6 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
  }
  else
  {
    v111 = &v93;
    MEMORY[0x1F4188790](v15);
    if (v6)
    {
      unint64_t v19 = *(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL;
      id v20 = (uint64_t *)((char *)&v93 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v21 = v6;
      do
      {
        v19 += 8;
        *v20++ = type metadata accessor for PredicateExpressions.Variable();
        --v21;
      }
      while (v21);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  v111 = (uint64_t *)TupleTypeMetadata;
  unint64_t v99 = &v93;
  uint64_t v22 = *(void *)(TupleTypeMetadata - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata);
  id v24 = (char *)&v93 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v98 = &v93;
  MEMORY[0x1F4188790](v25);
  id v27 = (char *)&v93 - v26;
  v97 = &v93;
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&v93 - v29;
  uint64_t v105 = *(void *)a2;
  uint64_t v106 = *(void *)(a2 + 8);
  LODWORD(v104) = *(unsigned __int8 *)(a2 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v31 = (uint64_t)v111;
  dispatch thunk of Encoder.unkeyedContainer()();
  uint64_t v32 = v107;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v107, (uint64_t)&v123);
  uint64_t v93 = v125;
  uint64_t v108 = v124;
  uint64_t v109 = __swift_project_boxed_opaque_existential_1(&v123, v124);
  id v96 = &v93;
  double v33 = MEMORY[0x1F4188790](v109);
  unint64_t v103 = (v34 + 15) & 0xFFFFFFFFFFFFFFF0;
  id v35 = (char **)((char *)&v93 - v103);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16))(v27, v32 + *(int *)(v114 + 36), v31, v33);
  if (v6)
  {
    uint64_t v36 = (int *)(v31 + 32);
    id v37 = v35;
    uint64_t v38 = v6;
    do
    {
      if (v6 == 1)
      {
        LODWORD(v39) = 0;
        uint64_t v40 = v30;
      }
      else
      {
        uint64_t v39 = *v36;
        uint64_t v40 = &v30[v39];
      }
      *(void *)uint64_t v40 = *(void *)&v27[(int)v39];
      *v37++ = v40;
      v36 += 4;
      --v38;
    }
    while (v38);
  }
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v126, v127);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  uint64_t v41 = dispatch thunk of UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)();
  MEMORY[0x1F4188790](v41);
  uint64_t v42 = (uint64_t **)((char *)&v93 - v103);
  if (v6)
  {
    uint64_t v43 = 0;
    uint64_t v44 = (int *)(v111 + 4);
    unint64_t v45 = v106;
    uint64_t v46 = v105;
    do
    {
      if (v6 == 1) {
        int v47 = 0;
      }
      else {
        int v47 = *v44;
      }
      *(void *)&v24[v47] = *(void *)v35[v43];
      v42[v43++] = (uint64_t *)&v24[v47];
      v44 += 4;
    }
    while (v6 != v43);
    uint64_t v120 = v46;
    unint64_t v121 = v45;
    unsigned __int8 v122 = v104;
    MEMORY[0x1F4188790](v46);
    uint64_t v49 = (char *)&v93 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v50 = 0;
    unint64_t v51 = *(void *)(v114 + 24) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v53 = (int *)(v52 + 32);
    do
    {
      if (v6 == 1) {
        int v54 = 0;
      }
      else {
        int v54 = *v53;
      }
      uint64_t v55 = &v13[v54];
      *(void *)uint64_t v55 = *(void *)(v51 + 8 * v50);
      *(void *)&v49[8 * v50++] = v55;
      v53 += 4;
    }
    while (v6 != v50);
  }
  else
  {
    uint64_t v120 = v105;
    unint64_t v121 = v106;
    uint64_t v49 = &v128;
    unsigned __int8 v122 = v104;
  }
  uint64_t v56 = *(void *)(v114 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v49, v6, v56);
  uint64_t v57 = v108;
  uint64_t v118 = v108;
  unint64_t v58 = __swift_allocate_boxed_opaque_existential_1(&v115);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v57 - 8) + 16))(v58, v109, v57);
  __swift_project_boxed_opaque_existential_1(&v115, v118);
  DynamicType = (uint64_t *)swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v115);
  uint64_t v60 = v120;
  uint64_t v61 = v121;
  uint64_t v115 = v120;
  unint64_t v116 = v121;
  LODWORD(v114) = v122;
  unsigned __int8 v117 = v122;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v62 = PredicateCodableConfiguration._identifier(for:)(DynamicType);
  if (!v63)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v75 = _typeName(_:qualified:)();
    uint64_t v77 = v76;
    uint64_t v115 = 47;
    unint64_t v116 = 0xE100000000000000;
    uint64_t v119 = MEMORY[0x1E4FBC860];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    v78._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v78);
    swift_bridgeObjectRelease();
    uint64_t v79 = v115;
    unint64_t v80 = v116;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(void *)uint64_t v81 = v75;
    *(void *)(v81 + 8) = v77;
    *(void *)(v81 + 16) = v79;
    *(void *)(v81 + 24) = v80;
    *(unsigned char *)(v81 + 32) = 0;
    swift_willThrow();
    goto LABEL_36;
  }
  uint64_t v113 = v62;
  if (v64)
  {
    uint64_t v106 = v63;
    uint64_t v104 = &v93;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v105 = MEMORY[0x1E4FBC860];
    uint64_t v74 = v94;
  }
  else
  {
    uint64_t v65 = v63;
    uint64_t v66 = Type.genericArguments2.getter();
    uint64_t v68 = v67;
    uint64_t v70 = v69;
    swift_bridgeObjectRetain();
    LOBYTE(v92) = 0;
    uint64_t v71 = v66;
    uint64_t v72 = v94;
    uint64_t v73 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n(v71, v68, v70, v60, v61, v114, MEMORY[0x1E4FBC860], (uint64_t)v113, v65);
    uint64_t v74 = v72;
    if (v72)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_36:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v82 = v100;
      goto LABEL_47;
    }
    uint64_t v105 = v73;
    uint64_t v104 = &v93;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v106 = v65;
    swift_bridgeObjectRelease();
  }
  LOBYTE(v119) = 0;
  uint64_t v83 = KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  v111 = (uint64_t *)v60;
  unint64_t v103 = v56;
  uint64_t v107 = v61;
  if (v6)
  {
    unint64_t v84 = v56 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v85 = v6;
    while (1)
    {
      uint64_t v119 = **v42;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v115, v118);
      type metadata accessor for PredicateExpressions.Variable();
      swift_getWitnessTable();
      uint64_t v83 = dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (v74) {
        break;
      }
      ++v42;
      v84 += 8;
      if (!--v85) {
        goto LABEL_43;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v115);
  }
  else
  {
LABEL_43:
    MEMORY[0x1F4188790](v83);
    uint64_t v86 = v108;
    *(&v93 - 10) = v6;
    *(&v93 - 9) = v86;
    *(&v93 - 8) = v103;
    uint64_t v87 = v93;
    *(&v93 - 7) = *(void *)(v93 + 8);
    uint64_t v88 = v112;
    *(&v93 - 6) = *(void *)(v87 + 24);
    *(&v93 - 5) = (uint64_t)v88;
    uint64_t v89 = v106;
    *(&v93 - 4) = (uint64_t)v113;
    *(&v93 - 3) = v89;
    uint64_t v91 = v105;
    uint64_t v92 = v109;
    specialized _withPredicateArchivingState<A>(_:_:)((uint64_t)v111, v107, v114, (void (*)(uint64_t))partial apply for closure #1 in KeyedEncodingContainer<>._encode<A, B>(_:variable:predicateConfiguration:));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v115);
    if (!v74)
    {
      (*(void (**)(char *, uint64_t))(v100 + 8))(v88, v110);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v123);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v126);
    }
  }
  uint64_t v82 = v100;
LABEL_47:
  (*(void (**)(char *, uint64_t))(v82 + 8))(v112, v110);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v123);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v126);
}

uint64_t Expression.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v120 = (uint64_t *)(8 * v4);
  uint64_t v121 = a2;
  if (v4 == 1)
  {
    uint64_t v5 = a2;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    if (v4)
    {
      unint64_t v8 = *(void *)(v121 + 24) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v9 = (uint64_t *)((char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v10 = v4;
      do
      {
        v8 += 8;
        *v9++ = swift_getMetatypeMetadata();
        --v10;
      }
      while (v10);
    }
    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v5 = v121;
  }
  uint64_t v109 = &v99;
  uint64_t v101 = MetatypeMetadata;
  MEMORY[0x1F4188790](MetatypeMetadata);
  uint64_t v12 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressionCodingKeys>);
  uint64_t v108 = &v99;
  uint64_t v115 = v13;
  uint64_t v107 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v119 = (char *)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = v2;
  if (v4 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
  }
  else
  {
    MEMORY[0x1F4188790](v14);
    if (v4)
    {
      unint64_t v18 = *(void *)(v121 + 24) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v19 = (uint64_t *)((char *)&v99 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v20 = v4;
      do
      {
        v18 += 8;
        *v19++ = type metadata accessor for PredicateExpressions.Variable();
        --v20;
      }
      while (v20);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v5 = v121;
  }
  uint64_t v106 = &v99;
  uint64_t v118 = (void *)TupleTypeMetadata;
  uint64_t v110 = *(void *)(TupleTypeMetadata - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata);
  uint64_t v22 = (char *)&v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = &v99;
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v99 - v24;
  uint64_t v104 = &v99;
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v99 - v27;
  if (one-time initialization token for predicateArchivingState != -1) {
    swift_once();
  }
  uint64_t v29 = pthread_getspecific(static _ThreadLocal.Key<A>.predicateArchivingState);
  if (v29)
  {
    LODWORD(v111) = 0;
    uint64_t v30 = (uint64_t *)(*v29 + 16);
    uint64_t v31 = (uint64_t *)(*v29 + 24);
  }
  else
  {
    if (one-time initialization token for standardConfiguration != -1) {
      swift_once();
    }
    uint64_t v30 = &static PredicateCodableConfiguration.standardConfiguration;
    uint64_t v31 = &qword_1E8ED4730;
    LODWORD(v111) = byte_1E8ED4738;
  }
  uint64_t v32 = *v31;
  uint64_t v117 = *v30;
  swift_bridgeObjectRetain();
  uint64_t v116 = v32;
  swift_bridgeObjectRetain();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  uint64_t v33 = v112;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v112, (uint64_t)&v129);
  uint64_t v100 = v131;
  uint64_t v113 = v130;
  uint64_t v114 = __swift_project_boxed_opaque_existential_1(&v129, v130);
  unint64_t v103 = &v99;
  double v34 = MEMORY[0x1F4188790](v114);
  unint64_t v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF0;
  id v37 = (void **)((char *)&v99 - v36);
  (*(void (**)(char *, uint64_t, void *, double))(v110 + 16))(v25, v33 + *(int *)(v5 + 44), v118, v34);
  if (v4)
  {
    uint64_t v38 = (int *)(v118 + 4);
    uint64_t v39 = (char **)((char *)&v99 - v36);
    uint64_t v40 = v4;
    do
    {
      if (v4 == 1)
      {
        LODWORD(v41) = 0;
        uint64_t v42 = v28;
      }
      else
      {
        uint64_t v41 = *v38;
        uint64_t v42 = &v28[v41];
      }
      *(void *)uint64_t v42 = *(void *)&v25[(int)v41];
      *v39++ = v42;
      v38 += 4;
      --v40;
    }
    while (v40);
  }
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v132, v133);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  uint64_t v43 = dispatch thunk of UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)();
  MEMORY[0x1F4188790](v43);
  uint64_t v44 = (uint64_t **)((char *)&v99 - v36);
  uint64_t v45 = v117;
  unint64_t v46 = v116;
  if (v4)
  {
    int v47 = (int *)(v118 + 4);
    uint64_t v48 = v44;
    uint64_t v49 = v4;
    do
    {
      if (v4 == 1) {
        int v50 = 0;
      }
      else {
        int v50 = *v47;
      }
      unint64_t v51 = *v37++;
      *(void *)&v22[v50] = *v51;
      *v48++ = (uint64_t *)&v22[v50];
      v47 += 4;
      --v49;
    }
    while (v49);
  }
  uint64_t v126 = v45;
  unint64_t v127 = v46;
  unsigned __int8 v128 = v111;
  MEMORY[0x1F4188790](v45);
  unint64_t v53 = (char *)&v99 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = v121;
  if (v4)
  {
    uint64_t v55 = (uint64_t *)(*(void *)(v121 + 24) & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v56 = (int *)(v101 + 32);
    uint64_t v57 = v53;
    uint64_t v58 = v4;
    do
    {
      if (v4 == 1) {
        int v59 = 0;
      }
      else {
        int v59 = *v56;
      }
      uint64_t v60 = *v55++;
      *(void *)&v12[v59] = v60;
      *v57++ = &v12[v59];
      v56 += 4;
      --v58;
    }
    while (v58);
  }
  uint64_t v61 = *(void *)(v54 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v53, v4, v61);
  uint64_t v62 = v113;
  uint64_t v125 = v113;
  uint64_t v63 = __swift_allocate_boxed_opaque_existential_1(&v122);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v62 - 8) + 16))(v63, v114, v62);
  __swift_project_boxed_opaque_existential_1(&v122, v125);
  DynamicType = (uint64_t *)swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v122);
  uint64_t v65 = v126;
  uint64_t v66 = v127;
  uint64_t v122 = v126;
  unint64_t v123 = v127;
  LODWORD(v121) = v128;
  unsigned __int8 v124 = v128;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v67 = PredicateCodableConfiguration._identifier(for:)(DynamicType);
  uint64_t v118 = &v99;
  if (!v68)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v81 = _typeName(_:qualified:)();
    uint64_t v83 = v82;
    uint64_t v122 = 47;
    unint64_t v123 = 0xE100000000000000;
    uint64_t v134 = MEMORY[0x1E4FBC860];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    v84._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v84);
    swift_bridgeObjectRelease();
    uint64_t v85 = v122;
    unint64_t v86 = v123;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(void *)uint64_t v87 = v81;
    *(void *)(v87 + 8) = v83;
    *(void *)(v87 + 16) = v85;
    *(void *)(v87 + 24) = v86;
    *(unsigned char *)(v87 + 32) = 0;
    swift_willThrow();
    goto LABEL_43;
  }
  uint64_t v70 = v68;
  uint64_t v120 = v67;
  if (v69)
  {
    uint64_t v110 = v68;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v101 = MEMORY[0x1E4FBC860];
    uint64_t v80 = v102;
  }
  else
  {
    uint64_t v71 = Type.genericArguments2.getter();
    uint64_t v73 = v72;
    uint64_t v75 = v74;
    swift_bridgeObjectRetain();
    LOBYTE(v98) = 0;
    uint64_t v76 = v71;
    uint64_t v77 = v102;
    uint64_t v78 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n(v76, v73, v75, v65, v66, v121, MEMORY[0x1E4FBC860], (uint64_t)v120, v70);
    uint64_t v79 = v70;
    uint64_t v80 = v77;
    if (v77)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_43:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_44:
      uint64_t v88 = v107;
      uint64_t v89 = v119;
LABEL_53:
      (*(void (**)(char *, uint64_t))(v88 + 8))(v89, v115);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v129);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v132);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    uint64_t v101 = v78;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v110 = v79;
    swift_bridgeObjectRelease();
  }
  uint64_t v111 = v66;
  uint64_t v112 = v65;
  LOBYTE(v134) = 0;
  uint64_t v90 = KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  uint64_t v99 = v61;
  if (v4)
  {
    unint64_t v91 = v61 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v92 = v4;
    while (1)
    {
      uint64_t v134 = **v44;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v122, v125);
      type metadata accessor for PredicateExpressions.Variable();
      swift_getWitnessTable();
      uint64_t v90 = dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (v80) {
        break;
      }
      ++v44;
      v91 += 8;
      if (!--v92) {
        goto LABEL_51;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v122);
    goto LABEL_44;
  }
LABEL_51:
  MEMORY[0x1F4188790](v90);
  uint64_t v93 = v113;
  *(&v99 - 10) = v4;
  *(&v99 - 9) = v93;
  *(&v99 - 8) = v99;
  uint64_t v94 = v100;
  *(&v99 - 7) = *(void *)(v100 + 8);
  uint64_t v89 = v119;
  *(&v99 - 6) = *(void *)(v94 + 24);
  *(&v99 - 5) = (uint64_t)v89;
  uint64_t v95 = v110;
  *(&v99 - 4) = (uint64_t)v120;
  *(&v99 - 3) = v95;
  uint64_t v97 = v101;
  unint64_t v98 = v114;
  specialized _withPredicateArchivingState<A>(_:_:)(v112, v111, v121, (void (*)(uint64_t))partial apply for closure #1 in KeyedEncodingContainer<>._encode<A, B>(_:variable:predicateConfiguration:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v122);
  if (v80)
  {
    uint64_t v88 = v107;
    goto LABEL_53;
  }
  (*(void (**)(char *, uint64_t))(v107 + 8))(v89, v115);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v129);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v132);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Expression.encode(to:configuration:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v113 = (uint64_t *)(8 * v6);
  if (v6 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    if (v6)
    {
      unint64_t v9 = *(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v10 = (uint64_t *)((char *)&v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v11 = v6;
      do
      {
        v9 += 8;
        *v10++ = swift_getMetatypeMetadata();
        --v11;
      }
      while (v11);
    }
    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
  }
  uint64_t v102 = &v93;
  uint64_t v95 = MetatypeMetadata;
  MEMORY[0x1F4188790](MetatypeMetadata);
  uint64_t v13 = (char *)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressionCodingKeys>);
  uint64_t v101 = &v93;
  uint64_t v110 = v14;
  uint64_t v100 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v112 = (char *)&v93 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = a3;
  if (v6 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
  }
  else
  {
    uint64_t v111 = &v93;
    MEMORY[0x1F4188790](v15);
    if (v6)
    {
      unint64_t v19 = *(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v20 = (uint64_t *)((char *)&v93 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v21 = v6;
      do
      {
        v19 += 8;
        *v20++ = type metadata accessor for PredicateExpressions.Variable();
        --v21;
      }
      while (v21);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  uint64_t v111 = (uint64_t *)TupleTypeMetadata;
  uint64_t v99 = &v93;
  uint64_t v22 = *(void *)(TupleTypeMetadata - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata);
  uint64_t v24 = (char *)&v93 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v98 = &v93;
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)&v93 - v26;
  uint64_t v97 = &v93;
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&v93 - v29;
  uint64_t v105 = *(void *)a2;
  uint64_t v106 = *(void *)(a2 + 8);
  LODWORD(v104) = *(unsigned __int8 *)(a2 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v31 = (uint64_t)v111;
  dispatch thunk of Encoder.unkeyedContainer()();
  uint64_t v32 = v107;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v107, (uint64_t)&v123);
  uint64_t v93 = v125;
  uint64_t v108 = v124;
  uint64_t v109 = __swift_project_boxed_opaque_existential_1(&v123, v124);
  id v96 = &v93;
  double v33 = MEMORY[0x1F4188790](v109);
  unint64_t v103 = (v34 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v35 = (char **)((char *)&v93 - v103);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16))(v27, v32 + *(int *)(v114 + 44), v31, v33);
  if (v6)
  {
    unint64_t v36 = (int *)(v31 + 32);
    id v37 = v35;
    uint64_t v38 = v6;
    do
    {
      if (v6 == 1)
      {
        LODWORD(v39) = 0;
        uint64_t v40 = v30;
      }
      else
      {
        uint64_t v39 = *v36;
        uint64_t v40 = &v30[v39];
      }
      *(void *)uint64_t v40 = *(void *)&v27[(int)v39];
      *v37++ = v40;
      v36 += 4;
      --v38;
    }
    while (v38);
  }
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v126, v127);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  uint64_t v41 = dispatch thunk of UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)();
  MEMORY[0x1F4188790](v41);
  uint64_t v42 = (uint64_t **)((char *)&v93 - v103);
  if (v6)
  {
    uint64_t v43 = 0;
    uint64_t v44 = (int *)(v111 + 4);
    unint64_t v45 = v106;
    uint64_t v46 = v105;
    do
    {
      if (v6 == 1) {
        int v47 = 0;
      }
      else {
        int v47 = *v44;
      }
      *(void *)&v24[v47] = *(void *)v35[v43];
      v42[v43++] = (uint64_t *)&v24[v47];
      v44 += 4;
    }
    while (v6 != v43);
    uint64_t v120 = v46;
    unint64_t v121 = v45;
    unsigned __int8 v122 = v104;
    MEMORY[0x1F4188790](v46);
    uint64_t v49 = (char *)&v93 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v50 = 0;
    unint64_t v51 = *(void *)(v114 + 24) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v53 = (int *)(v52 + 32);
    do
    {
      if (v6 == 1) {
        int v54 = 0;
      }
      else {
        int v54 = *v53;
      }
      uint64_t v55 = &v13[v54];
      *(void *)uint64_t v55 = *(void *)(v51 + 8 * v50);
      *(void *)&v49[8 * v50++] = v55;
      v53 += 4;
    }
    while (v6 != v50);
  }
  else
  {
    uint64_t v120 = v105;
    unint64_t v121 = v106;
    uint64_t v49 = &v128;
    unsigned __int8 v122 = v104;
  }
  uint64_t v56 = *(void *)(v114 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v49, v6, v56);
  uint64_t v57 = v108;
  uint64_t v118 = v108;
  uint64_t v58 = __swift_allocate_boxed_opaque_existential_1(&v115);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v57 - 8) + 16))(v58, v109, v57);
  __swift_project_boxed_opaque_existential_1(&v115, v118);
  DynamicType = (uint64_t *)swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v115);
  uint64_t v60 = v120;
  uint64_t v61 = v121;
  uint64_t v115 = v120;
  unint64_t v116 = v121;
  LODWORD(v114) = v122;
  unsigned __int8 v117 = v122;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v62 = PredicateCodableConfiguration._identifier(for:)(DynamicType);
  if (!v63)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v75 = _typeName(_:qualified:)();
    uint64_t v77 = v76;
    uint64_t v115 = 47;
    unint64_t v116 = 0xE100000000000000;
    uint64_t v119 = MEMORY[0x1E4FBC860];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    v78._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v78);
    swift_bridgeObjectRelease();
    uint64_t v79 = v115;
    unint64_t v80 = v116;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(void *)uint64_t v81 = v75;
    *(void *)(v81 + 8) = v77;
    *(void *)(v81 + 16) = v79;
    *(void *)(v81 + 24) = v80;
    *(unsigned char *)(v81 + 32) = 0;
    swift_willThrow();
    goto LABEL_36;
  }
  uint64_t v113 = v62;
  if (v64)
  {
    uint64_t v106 = v63;
    uint64_t v104 = &v93;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v105 = MEMORY[0x1E4FBC860];
    uint64_t v74 = v94;
  }
  else
  {
    uint64_t v65 = v63;
    uint64_t v66 = Type.genericArguments2.getter();
    uint64_t v68 = v67;
    uint64_t v70 = v69;
    swift_bridgeObjectRetain();
    LOBYTE(v92) = 0;
    uint64_t v71 = v66;
    uint64_t v72 = v94;
    uint64_t v73 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n(v71, v68, v70, v60, v61, v114, MEMORY[0x1E4FBC860], (uint64_t)v113, v65);
    uint64_t v74 = v72;
    if (v72)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_36:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v82 = v100;
      goto LABEL_47;
    }
    uint64_t v105 = v73;
    uint64_t v104 = &v93;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v106 = v65;
    swift_bridgeObjectRelease();
  }
  LOBYTE(v119) = 0;
  uint64_t v83 = KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  uint64_t v111 = (uint64_t *)v60;
  unint64_t v103 = v56;
  uint64_t v107 = v61;
  if (v6)
  {
    unint64_t v84 = v56 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v85 = v6;
    while (1)
    {
      uint64_t v119 = **v42;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v115, v118);
      type metadata accessor for PredicateExpressions.Variable();
      swift_getWitnessTable();
      uint64_t v83 = dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (v74) {
        break;
      }
      ++v42;
      v84 += 8;
      if (!--v85) {
        goto LABEL_43;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v115);
  }
  else
  {
LABEL_43:
    MEMORY[0x1F4188790](v83);
    uint64_t v86 = v108;
    *(&v93 - 10) = v6;
    *(&v93 - 9) = v86;
    *(&v93 - 8) = v103;
    uint64_t v87 = v93;
    *(&v93 - 7) = *(void *)(v93 + 8);
    uint64_t v88 = v112;
    *(&v93 - 6) = *(void *)(v87 + 24);
    *(&v93 - 5) = (uint64_t)v88;
    uint64_t v89 = v106;
    *(&v93 - 4) = (uint64_t)v113;
    *(&v93 - 3) = v89;
    uint64_t v91 = v105;
    uint64_t v92 = v109;
    specialized _withPredicateArchivingState<A>(_:_:)((uint64_t)v111, v107, v114, (void (*)(uint64_t))partial apply for closure #1 in KeyedEncodingContainer<>._encode<A, B>(_:variable:predicateConfiguration:));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v115);
    if (!v74)
    {
      (*(void (**)(char *, uint64_t))(v100 + 8))(v88, v110);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v123);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v126);
    }
  }
  uint64_t v82 = v100;
LABEL_47:
  (*(void (**)(char *, uint64_t))(v82 + 8))(v112, v110);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v123);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v126);
}

uint64_t Expression.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v155 = (void *)a3;
  uint64_t v133 = a5;
  uint64_t v8 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v139 = v9;
  uint64_t v140 = v10;
  MEMORY[0x1F4188790](v9);
  v136 = (char *)&v122 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  v144 = (char *)&v122 - v14;
  uint64_t v15 = 8 * a2;
  uint64_t v153 = a4;
  *(void *)&long long v154 = 8 * a2;
  uint64_t v157 = a2;
  if (a2 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  }
  else
  {
    MEMORY[0x1F4188790](v13);
    uint64_t v17 = (uint64_t *)((char *)&v122 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (a2)
    {
      uint64_t v18 = v8;
      unint64_t v19 = v17;
      uint64_t v20 = v157;
      do
      {
        ++v18;
        *v19++ = swift_getMetatypeMetadata();
        --v20;
      }
      while (v20);
    }
    a2 = v157;
    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
    a4 = v153;
    uint64_t v15 = v154;
  }
  uint64_t v21 = &v122;
  uint64_t v137 = MetatypeMetadata;
  MEMORY[0x1F4188790](MetatypeMetadata);
  uint64_t v23 = (char *)&v122 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169[0] = a4;
  uint64_t ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata();
  BOOL v151 = &v122;
  uint64_t v152 = ExtendedExistentialTypeMetadata;
  if (a2 == 1)
  {
    type metadata accessor for PredicateExpressions.Variable();
    uint64_t TupleTypeMetadata = swift_checkMetadataState();
  }
  else
  {
    v145 = &v122;
    uint64_t v26 = a1;
    MEMORY[0x1F4188790](ExtendedExistentialTypeMetadata);
    uint64_t v27 = (uint64_t *)((char *)&v122 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (a2)
    {
      uint64_t v28 = v8;
      uint64_t v29 = v27;
      uint64_t v30 = v157;
      do
      {
        ++v28;
        *v29++ = type metadata accessor for PredicateExpressions.Variable();
        --v30;
      }
      while (v30);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    a1 = v26;
    uint64_t v21 = v145;
  }
  uint64_t v141 = TupleTypeMetadata;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v132 = (uint64_t)&v122 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v149 = &v122;
  MEMORY[0x1F4188790](v32);
  uint64_t v134 = (uint64_t)&v122 - v33;
  unint64_t v148 = &v122;
  MEMORY[0x1F4188790](v34);
  v135 = (long long *)((char *)&v122 - v35);
  v147 = &v122;
  MEMORY[0x1F4188790](v36);
  uint64_t v143 = (uint64_t)&v122 - v37;
  uint64_t v38 = type metadata accessor for Expression();
  uint64_t v130 = *(void *)(v38 - 8);
  uint64_t v131 = v38;
  MEMORY[0x1F4188790](v38);
  uint64_t v129 = (uint64_t)&v122 - v39;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v169);
  if (one-time initialization token for predicateArchivingState != -1) {
    swift_once();
  }
  uint64_t v40 = pthread_getspecific(static _ThreadLocal.Key<A>.predicateArchivingState);
  uint64_t v146 = &v122;
  if (v40)
  {
    LODWORD(v138) = 0;
    uint64_t v41 = (uint64_t *)(*v40 + 16);
    uint64_t v42 = (uint64_t *)(*v40 + 24);
  }
  else
  {
    if (one-time initialization token for standardConfiguration != -1) {
      swift_once();
    }
    uint64_t v41 = &static PredicateCodableConfiguration.standardConfiguration;
    uint64_t v42 = &qword_1E8ED4730;
    LODWORD(v138) = byte_1E8ED4738;
  }
  uint64_t v150 = a1;
  uint64_t v43 = *v42;
  uint64_t v44 = *v41;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_project_boxed_opaque_existential_1(v169, v169[3]);
  uint64_t v45 = v156;
  uint64_t v46 = dispatch thunk of Decoder.unkeyedContainer()();
  if (v45)
  {
    uint64_t v156 = v45;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_47:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v169);
    return __swift_destroy_boxed_opaque_existential_1(v150);
  }
  uint64_t v127 = v43;
  uint64_t v128 = v44;
  uint64_t v126 = &v122;
  uint64_t v47 = v143 + *(int *)(TupleTypeMetadata2 + 48);
  MEMORY[0x1F4188790](v46);
  uint64_t v49 = (char *)&v122 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = v157;
  if (v157)
  {
    unint64_t v51 = (int *)(v141 + 32);
    uint64_t v52 = v49;
    uint64_t v53 = v157;
    do
    {
      if (v50 == 1) {
        int v54 = 0;
      }
      else {
        int v54 = *v51;
      }
      *v52++ = v47 + v54;
      v51 += 4;
      --v53;
    }
    while (v53);
  }
  v145 = v21;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v167, v168);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  uint64_t v55 = dispatch thunk of UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)();
  uint64_t v156 = 0;
  uint64_t v124 = &v122;
  size_t v56 = v154;
  MEMORY[0x1F4188790](v55);
  unint64_t v57 = (v56 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v58 = v127;
  if (v157) {
    memcpy((char *)&v122 - v57, v49, v56);
  }
  uint64_t v123 = (char *)&v122 - v57;
  uint64_t v125 = &v122;
  uint64_t v164 = v128;
  uint64_t v165 = v58;
  unsigned __int8 v166 = v138;
  MEMORY[0x1F4188790](v128);
  if (v59)
  {
    uint64_t v60 = (int *)(v137 + 32);
    uint64_t v61 = (uint64_t *)((char *)&v122 - v57);
    uint64_t v62 = v59;
    do
    {
      if (v59 == 1) {
        int v63 = 0;
      }
      else {
        int v63 = *v60;
      }
      uint64_t v64 = *v8++;
      *(void *)&v23[v63] = v64;
      *v61++ = &v23[v63];
      v60 += 4;
      --v62;
    }
    while (v62);
  }
  uint64_t v65 = v59;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)&v122 - v57, v65, (uint64_t)v155);
  LOBYTE(v159[0]) = 2;
  lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
  uint64_t v66 = v139;
  uint64_t v67 = v156;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v156 = v67;
  if (v67) {
    goto LABEL_45;
  }
  long long v68 = v162;
  *(void *)&long long v154 = v163;
  uint64_t v69 = v164;
  uint64_t v70 = v165;
  int v71 = v166;
  uint64_t v72 = *(void *)(v165 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v72) {
    goto LABEL_43;
  }
  LODWORD(v137) = v71;
  swift_bridgeObjectRetain();
  unint64_t v73 = specialized __RawDictionaryStorage.find<A>(_:)(v68, *((uint64_t *)&v68 + 1));
  if ((v74 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_43:
    *(void *)&long long v162 = 47;
    *((void *)&v162 + 1) = 0xE100000000000000;
    *(void *)&v159[0] = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    v82._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v82);
    swift_bridgeObjectRelease();
    long long v83 = v162;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    uint64_t v84 = swift_allocError();
    *(_OWORD *)uint64_t v85 = v68;
    *(_OWORD *)(v85 + 16) = v83;
    *(unsigned char *)(v85 + 32) = 1;
    uint64_t v156 = v84;
    swift_willThrow();
    goto LABEL_44;
  }
  uint64_t v138 = v69;
  uint64_t v75 = *(void *)(v70 + 56) + 16 * v73;
  uint64_t v122 = *(void *)v75;
  char v76 = *(unsigned char *)(v75 + 8);
  swift_bridgeObjectRelease();
  if (v76)
  {
    uint64_t v77 = v138;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v78 = swift_bridgeObjectRetain();
    uint64_t v79 = v77;
    uint64_t v80 = v156;
    uint64_t v81 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n(v78, v79, v70, v137, MEMORY[0x1E4FBC860], v68, *((uint64_t *)&v68 + 1));
    uint64_t v156 = v80;
    if (v80)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_44:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_45:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_46:
      (*(void (**)(char *, uint64_t))(v140 + 8))(v144, v66);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v167);
      goto LABEL_47;
    }
    uint64_t v95 = v81;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v96 = v122;
    uint64_t v97 = PartialType.create2(with:)();
    if (!v97)
    {
      lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
      uint64_t v104 = swift_allocError();
      *(void *)uint64_t v105 = v96;
      *(void *)(v105 + 8) = v95;
      *(void *)(v105 + 16) = 0;
      *(void *)(v105 + 24) = 0;
      *(unsigned char *)(v105 + 32) = 2;
      uint64_t v156 = v104;
      swift_willThrow();
      goto LABEL_44;
    }
    uint64_t v98 = v97;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v87 = v98;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v87 = v122;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)&v159[0] = v87;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  *(void *)&v158[0] = v153;
  swift_getExtendedExistentialTypeMetadata();
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v162) = 2;
    uint64_t v92 = v140;
    uint64_t v93 = v136;
    (*(void (**)(char *, char *, uint64_t))(v140 + 16))(v136, v144, v66);
    type metadata accessor for DecodingError();
    uint64_t v94 = swift_allocError();
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type KeyedDecodingContainer<PredicateExpressionCodingKeys> and conformance KeyedDecodingContainer<A>, &demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    (*(void (**)(char *, uint64_t))(v92 + 8))(v93, v66);
    uint64_t v156 = v94;
    swift_willThrow();
    goto LABEL_46;
  }
  long long v154 = v162;
  uint64_t v88 = v163;
  LOBYTE(v159[0]) = 0;
  uint64_t v89 = v144;
  uint64_t v90 = v156;
  uint64_t v91 = KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
  if (v90)
  {
    uint64_t v156 = v90;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v66 = v139;
    goto LABEL_46;
  }
  v160[0] = v138;
  v160[1] = v70;
  char v161 = v137;
  MEMORY[0x1F4188790](v91);
  uint64_t v99 = v157;
  uint64_t v100 = (uint64_t)v155;
  *(&v122 - 8) = v157;
  *(&v122 - 7) = v100;
  *(&v122 - 6) = v101;
  *(&v122 - 5) = (uint64_t)&v162;
  *((_OWORD *)&v122 - 2) = v154;
  *(&v122 - 2) = v88;
  *(&v122 - 1) = (uint64_t)v89;
  uint64_t v102 = v135;
  uint64_t v103 = TupleTypeMetadata2;
  _withPredicateArchivingState<A>(_:_:)(v160, (void (*)(uint64_t))_ss22KeyedDecodingContainerV10FoundationAC29PredicateExpressionCodingKeysORszrlE7_decode5input6output22predicateConfigurationAC0eF0_pqd_0_6OutputRts_XP10expression_AC0E11ExpressionsO8VariableVy_qd__Gqd__Qp_t8variabletqd__mqd__Qp_qd_0_mAC0e7CodableM0VtKRvd__r0_lFAcJ_pqd_0_ALRS_XPAM_ARqd__Qp_tAStyKXEfU_TA_0);
  uint64_t v156 = 0;
  uint64_t v155 = &v122;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of any PredicateExpression<Self.Output == B1>(v102, v143);
  uint64_t v106 = v139;
  uint64_t v107 = (void **)v123;
  if (v99)
  {
    uint64_t v108 = (char *)v102 + *(int *)(v103 + 48);
    uint64_t v109 = (int *)(v141 + 32);
    uint64_t v110 = v99;
    do
    {
      if (v99 == 1) {
        int v111 = 0;
      }
      else {
        int v111 = *v109;
      }
      uint64_t v112 = *v107++;
      void *v112 = *(void *)&v108[v111];
      v109 += 4;
      --v110;
    }
    while (v110);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v162);
  (*(void (**)(char *, uint64_t))(v140 + 8))(v144, v106);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v113 = v134 + *(int *)(v103 + 48);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v143, v134);
  uint64_t v114 = v141;
  uint64_t v115 = *(void *)(v141 - 8);
  unint64_t v116 = *(void (**)(uint64_t, uint64_t, uint64_t))(v115 + 16);
  v116(v113, v47, v141);
  v169[7] = v153;
  swift_getExtendedExistentialTypeMetadata();
  if (!swift_dynamicCast())
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v167, (uint64_t)v158);
    type metadata accessor for DecodingError();
    uint64_t v121 = swift_allocError();
    static DecodingError.dataCorruptedError(in:debugDescription:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v158);
    uint64_t v156 = v121;
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1(v143);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v167);
    goto LABEL_47;
  }
  outlined init with take of any PredicateExpression<Self.Output == B1>(v158, (uint64_t)v159);
  uint64_t v117 = v129;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v159, v129);
  uint64_t v118 = v132;
  uint64_t v119 = v132 + *(int *)(v103 + 48);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v143, v132);
  v116(v119, v47, v114);
  uint64_t v120 = v131;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v115 + 32))(v117 + *(int *)(v131 + 44), v119, v114);
  __swift_destroy_boxed_opaque_existential_1(v118);
  __swift_destroy_boxed_opaque_existential_1(v143);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v167);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v130 + 32))(v133, v117, v120);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v169);
  return __swift_destroy_boxed_opaque_existential_1(v150);
}

uint64_t Expression.init(from:configuration:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v150 = a2;
  unint64_t v12 = a4 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  uint64_t v135 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  MEMORY[0x1F4188790](v14);
  uint64_t v141 = (char *)v119 - v16;
  uint64_t v136 = v15;
  uint64_t v128 = a6;
  uint64_t v151 = a5;
  uint64_t v132 = v17;
  *(void *)&long long v152 = v12;
  uint64_t v149 = v6;
  if (a3 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    uint64_t v19 = MetatypeMetadata;
  }
  else
  {
    v142 = a1;
    MEMORY[0x1F4188790](v15);
    if (a3)
    {
      uint64_t v21 = v152;
      uint64_t v22 = (void *)((char *)v119 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v23 = a3;
      do
      {
        v21 += 8;
        *v22++ = swift_getMetatypeMetadata();
        --v23;
      }
      while (v23);
    }
    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v19 = MetatypeMetadata;
    a5 = v151;
    a1 = v142;
  }
  MEMORY[0x1F4188790](MetatypeMetadata);
  uint64_t v134 = (char *)v119 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163[0] = a5;
  uint64_t ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata();
  uint64_t v26 = ExtendedExistentialTypeMetadata;
  unint64_t v148 = v119;
  v147 = v119;
  uint64_t v140 = a4;
  uint64_t v133 = v19;
  if (a3 == 1)
  {
    type metadata accessor for PredicateExpressions.Variable();
    uint64_t TupleTypeMetadata = swift_checkMetadataState();
  }
  else
  {
    uint64_t v28 = a1;
    MEMORY[0x1F4188790](ExtendedExistentialTypeMetadata);
    if (a3)
    {
      uint64_t v30 = v152;
      uint64_t v31 = (void *)((char *)v119 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v32 = a3;
      do
      {
        v30 += 8;
        *v31++ = type metadata accessor for PredicateExpressions.Variable();
        --v32;
      }
      while (v32);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    a1 = v28;
  }
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v127 = (uint64_t)v119 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = v119;
  MEMORY[0x1F4188790](v34);
  uint64_t v129 = (char *)v119 - v35;
  v145 = v119;
  MEMORY[0x1F4188790](v36);
  uint64_t v131 = (long long *)((char *)v119 - v37);
  v144 = v119;
  MEMORY[0x1F4188790](v38);
  uint64_t v138 = (uint64_t)v119 - v39;
  uint64_t v40 = type metadata accessor for Expression();
  uint64_t v146 = v119;
  uint64_t v126 = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](v40);
  uint64_t v42 = (char *)v119 - v41;
  uint64_t v137 = a3;
  uint64_t v130 = v26;
  uint64_t v44 = *(void *)v150;
  uint64_t v43 = *(void *)(v150 + 8);
  LODWORD(v150) = *(unsigned __int8 *)(v150 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v45 = v149;
  uint64_t v46 = dispatch thunk of Decoder.unkeyedContainer()();
  if (v45)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v120 = v42;
  uint64_t v121 = v40;
  uint64_t v122 = TupleTypeMetadata;
  uint64_t v124 = v43;
  uint64_t v125 = v44;
  v142 = a1;
  uint64_t v123 = v119;
  uint64_t v47 = v138 + *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v48 = v137;
  uint64_t v49 = 8 * v137;
  MEMORY[0x1F4188790](v46);
  if (v48)
  {
    uint64_t v50 = (int *)(v122 + 32);
    unint64_t v51 = (void *)((char *)v119 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v52 = v48;
    do
    {
      if (v48 == 1) {
        int v53 = 0;
      }
      else {
        int v53 = *v50;
      }
      *v51++ = v47 + v53;
      v50 += 4;
      --v52;
    }
    while (v52);
  }
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v163, v163[3]);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  uint64_t v54 = dispatch thunk of UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)();
  uint64_t v149 = 0;
  v119[1] = v119;
  MEMORY[0x1F4188790](v54);
  unint64_t v55 = (v49 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v56 = v125;
  v119[0] = (char *)v119 - v55;
  if (v48)
  {
    unint64_t v57 = memcpy((char *)v119 - v55, (char *)v119 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0), 8 * v48);
    uint64_t v160 = v56;
    uint64_t v161 = v124;
    unsigned __int8 v162 = v150;
    MEMORY[0x1F4188790](v57);
    uint64_t v58 = (char *)v119 - v55;
    uint64_t v59 = 0;
    uint64_t v60 = (int *)(v133 + 32);
    uint64_t v61 = v136;
    uint64_t v62 = v152;
    int v63 = v134;
    do
    {
      if (v48 == 1) {
        int v64 = 0;
      }
      else {
        int v64 = *v60;
      }
      uint64_t v65 = &v63[v64];
      *(void *)uint64_t v65 = *(void *)(v62 + 8 * v59);
      *(void *)&v58[8 * v59++] = v65;
      v60 += 4;
    }
    while (v48 != v59);
  }
  else
  {
    uint64_t v160 = v125;
    uint64_t v161 = v124;
    uint64_t v58 = &v164;
    unsigned __int8 v162 = v150;
    uint64_t v61 = v136;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v58, v48, v140);
  LOBYTE(v155) = 2;
  lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
  uint64_t v66 = v149;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v149 = v66;
  if (v66)
  {
    uint64_t v67 = v61;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = v142;
    uint64_t v68 = v135;
    uint64_t v69 = v141;
LABEL_38:
    (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v67);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v163);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v134 = (char *)v119;
  long long v70 = v158;
  *(void *)&long long v152 = v159;
  uint64_t v71 = v161;
  int v72 = v162;
  uint64_t v73 = *(void *)(v161 + 16);
  uint64_t v150 = v160;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v73) {
    goto LABEL_36;
  }
  swift_bridgeObjectRetain();
  unint64_t v74 = specialized __RawDictionaryStorage.find<A>(_:)(v70, *((uint64_t *)&v70 + 1));
  if ((v75 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_36:
    uint64_t v67 = v61;
    *(void *)&long long v158 = 47;
    *((void *)&v158 + 1) = 0xE100000000000000;
    *(void *)&long long v155 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    v83._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v83);
    swift_bridgeObjectRelease();
    long long v84 = v158;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    uint64_t v85 = swift_allocError();
    *(_OWORD *)uint64_t v86 = v70;
    *(_OWORD *)(v86 + 16) = v84;
    *(unsigned char *)(v86 + 32) = 1;
    uint64_t v149 = v85;
    swift_willThrow();
    goto LABEL_37;
  }
  LODWORD(v133) = v72;
  uint64_t v76 = *(void *)(v71 + 56) + 16 * v74;
  uint64_t v77 = *(void *)v76;
  char v78 = *(unsigned char *)(v76 + 8);
  swift_bridgeObjectRelease();
  if (v78)
  {
    uint64_t v79 = v150;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v80 = swift_bridgeObjectRetain();
    uint64_t v81 = v149;
    uint64_t v82 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n(v80, v79, v71, v133, MEMORY[0x1E4FBC860], v70, *((uint64_t *)&v70 + 1));
    uint64_t v149 = v81;
    if (v81)
    {
      uint64_t v67 = v61;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_37:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v142;
      uint64_t v68 = v135;
      uint64_t v69 = v141;
      goto LABEL_38;
    }
    uint64_t v94 = v82;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v95 = PartialType.create2(with:)();
    if (!v95)
    {
      lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
      uint64_t v100 = swift_allocError();
      *(void *)uint64_t v101 = v77;
      *(void *)(v101 + 8) = v94;
      *(void *)(v101 + 16) = 0;
      *(void *)(v101 + 24) = 0;
      *(unsigned char *)(v101 + 32) = 2;
      uint64_t v149 = v100;
      swift_willThrow();
      uint64_t v67 = v136;
      goto LABEL_37;
    }
    uint64_t v96 = v95;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v77 = v96;
    uint64_t v61 = v136;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)&long long v155 = v77;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  *(void *)&long long v154 = v151;
  swift_getExtendedExistentialTypeMetadata();
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v158) = 2;
    uint64_t v68 = v135;
    uint64_t v92 = v132;
    uint64_t v69 = v141;
    (*(void (**)(void *, char *, uint64_t))(v135 + 16))(v132, v141, v61);
    type metadata accessor for DecodingError();
    uint64_t v93 = swift_allocError();
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type KeyedDecodingContainer<PredicateExpressionCodingKeys> and conformance KeyedDecodingContainer<A>, &demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    uint64_t v67 = v61;
    (*(void (**)(void *, uint64_t))(v68 + 8))(v92, v61);
    uint64_t v149 = v93;
    swift_willThrow();
    a1 = v142;
    goto LABEL_38;
  }
  long long v152 = v158;
  uint64_t v88 = v159;
  LOBYTE(v155) = 0;
  uint64_t v89 = v141;
  uint64_t v90 = v149;
  uint64_t v91 = KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
  if (v90)
  {
    uint64_t v67 = v61;
    uint64_t v149 = v90;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = v142;
    uint64_t v68 = v135;
    uint64_t v69 = v89;
    goto LABEL_38;
  }
  uint64_t v132 = v119;
  v156[0] = v150;
  v156[1] = v71;
  char v157 = v133;
  MEMORY[0x1F4188790](v91);
  uint64_t v97 = v140;
  v119[-8] = v48;
  v119[-7] = v97;
  v119[-6] = v151;
  v119[-5] = &v158;
  *(_OWORD *)&v119[-4] = v152;
  v119[-2] = v88;
  v119[-1] = v89;
  uint64_t v98 = v131;
  uint64_t v99 = TupleTypeMetadata2;
  _withPredicateArchivingState<A>(_:_:)(v156, (void (*)(uint64_t))_ss22KeyedDecodingContainerV10FoundationAC29PredicateExpressionCodingKeysORszrlE7_decode5input6output22predicateConfigurationAC0eF0_pqd_0_6OutputRts_XP10expression_AC0E11ExpressionsO8VariableVy_qd__Gqd__Qp_t8variabletqd__mqd__Qp_qd_0_mAC0e7CodableM0VtKRvd__r0_lFAcJ_pqd_0_ALRS_XPAM_ARqd__Qp_tAStyKXEfU_TA_0);
  uint64_t v149 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of any PredicateExpression<Self.Output == B1>(v98, v138);
  uint64_t v102 = v98;
  uint64_t v103 = (uint64_t)v129;
  uint64_t v104 = (void **)v119[0];
  if (v48)
  {
    uint64_t v105 = (char *)v102 + *(int *)(v99 + 48);
    uint64_t v106 = (int *)(v122 + 32);
    uint64_t v107 = v48;
    do
    {
      if (v48 == 1) {
        int v108 = 0;
      }
      else {
        int v108 = *v106;
      }
      uint64_t v109 = *v104++;
      *uint64_t v109 = *(void *)&v105[v108];
      v106 += 4;
      --v107;
    }
    while (v107);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v158);
  (*(void (**)(char *, uint64_t))(v135 + 8))(v141, v61);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v110 = v103 + *(int *)(v99 + 48);
  uint64_t v111 = v138;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v138, v103);
  uint64_t v112 = v122;
  uint64_t v113 = *(void *)(v122 - 8);
  uint64_t v114 = *(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 16);
  v114(v110, v47, v122);
  uint64_t v153 = v151;
  swift_getExtendedExistentialTypeMetadata();
  if ((swift_dynamicCast() & 1) == 0)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v163, (uint64_t)&v154);
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError.dataCorruptedError(in:debugDescription:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v154);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1(v111);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v163);
    a1 = v142;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v154, (uint64_t)&v155);
  uint64_t v115 = (uint64_t)v120;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v155, (uint64_t)v120);
  uint64_t v116 = v127;
  uint64_t v117 = v127 + *(int *)(v99 + 48);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v111, v127);
  v114(v117, v47, v112);
  uint64_t v118 = v121;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 32))(v115 + *(int *)(v121 + 44), v117, v112);
  __swift_destroy_boxed_opaque_existential_1(v116);
  __swift_destroy_boxed_opaque_existential_1(v111);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v163);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v126 + 32))(v128, v115, v118);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v142);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Expression<Pack{repeat A}, B>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return Expression.init(from:)(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Expression<Pack{repeat A}, B>(void *a1, uint64_t a2)
{
  return Expression.encode(to:)(a1, a2);
}

uint64_t protocol witness for EncodableWithConfiguration.encode(to:configuration:) in conformance Predicate<Pack{repeat A}>(void *a1, uint64_t a2, uint64_t a3)
{
  return Predicate.encode(to:configuration:)(a1, a2, a3);
}

uint64_t protocol witness for DecodableWithConfiguration.init(from:configuration:) in conformance Predicate<Pack{repeat A}>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Predicate.init(from:configuration:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t protocol witness for EncodableWithConfiguration.encode(to:configuration:) in conformance Expression<Pack{repeat A}, B>(void *a1, uint64_t a2, uint64_t a3)
{
  return Expression.encode(to:configuration:)(a1, a2, a3);
}

uint64_t protocol witness for DecodableWithConfiguration.init(from:configuration:) in conformance Expression<Pack{repeat A}, B>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  return Expression.init(from:configuration:)(a1, a2, a3[2], a3[3], a3[4], a4);
}

unint64_t specialized BidirectionalCollection.lastIndex(where:)(unint64_t a1, unint64_t a2)
{
  unint64_t v2 = a1 >> 14;
  if (a1 >> 14 == a2 >> 14) {
    return 0;
  }
  do
  {
    unint64_t v3 = Substring.index(before:)();
    if (Substring.subscript.getter() == 47 && v4 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0) {
        return v3;
      }
    }
  }
  while (v2 != v3 >> 14);
  return 0;
}

{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v6;

  unint64_t v2 = a1 >> 14;
  if (a1 >> 14 == a2 >> 14) {
    return 0;
  }
  while (1)
  {
    unint64_t v3 = Substring.index(before:)();
    if (Substring.subscript.getter() == 47 && v4 == 0xE100000000000000) {
      break;
    }
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return v3;
    }
    if (v2 == v3 >> 14) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t NSFileManager._shouldCopyItemAtPath(_:to:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, SEL *a5, SEL *a6)
{
  id v13 = objc_msgSend(v6, sel__safeDelegate);
  if (!v13) {
    return 1;
  }
  uint64_t v14 = v13;
  if ((objc_msgSend(v13, sel_respondsToSelector_, *a5) & 1) == 0)
  {
    if (objc_msgSend(v14, sel_respondsToSelector_, *a6))
    {
      uint64_t v18 = String._bridgeToObjectiveCImpl()();
      uint64_t v19 = String._bridgeToObjectiveCImpl()();
      id v17 = objc_msgSend((id)swift_unknownObjectRetain(), *a6, v6, v18, v19);
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return (uint64_t)v17;
    }
    swift_unknownObjectRelease();
    return 1;
  }
  swift_unknownObjectRetain();
  URL.init(fileURLWithPath:)(a1, a2, (uint64_t)&v22);
  uint64_t v15 = v22;
  URL.init(fileURLWithPath:)(a3, a4, (uint64_t)&v21);
  uint64_t v16 = v21;
  id v17 = objc_msgSend(v14, *a5, v6, v15, v21);

  swift_unknownObjectRelease_n();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return (uint64_t)v17;
}

void closure #1 in static _FileOperations.moveFile(_:to:with:options:)(const std::__fs::filesystem::path *a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8)
{
  if (a1)
  {
    char v75 = v72;
    MEMORY[0x1F4188790](a1);
    v68[2] = v15;
    v68[3] = v16;
    v68[4] = v17;
    v68[5] = v18;
    v69[0] = v19;
    v69[1] = a2;
    unint64_t v74 = a3;
    long long v70 = (uint64_t *)a3;
    uint64_t v71 = a4;
    uint64_t v20 = v16;
    uint64_t v21 = v17;
    if ((_foundation_swift_url_feature_enabled() & 1) == 0)
    {
      id v32 = a5;
      uint64_t v33 = (const std::__fs::filesystem::path *)objc_msgSend(v32, sel_fileSystemRepresentation);
      closure #1 in closure #1 in static _FileOperations.moveFile(_:to:with:options:)(v33, v32, v20, v21, a8, a1, a2, v74, a4);
      return;
    }
    v72[0] = v21;
    v72[1] = v68;
    v78._uint64_t countAndFlagsBits = (uint64_t)a5;
    v78._unint64_t object = v20;
    uint64_t v79 = v21;
    swift_retain();
    id v22 = a5;
    id v73 = v20;
    swift_retain();
    Swift::String v23 = URL.path(percentEncoded:)(1);
    uint64_t countAndFlagsBits = v23._countAndFlagsBits;
    Swift::String v78 = v23;
    swift_bridgeObjectRetain();
    if (String.count.getter() <= 1)
    {
      unint64_t object = (unint64_t)v23._object;
    }
    else
    {
      unint64_t object = (unint64_t)v23._object;
      if ((specialized BidirectionalCollection.last.getter(v23._countAndFlagsBits, (unint64_t)v23._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = v78._countAndFlagsBits;
        unint64_t object = (unint64_t)v78._object;
      }
    }
    uint64_t v76 = Set.init(minimumCapacity:)();
    uint64_t v46 = specialized Set._Variant.insert(_:)(&v80, 0x2FuLL);
    uint64_t v47 = v76;
    uint64_t v48 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0) {
      uint64_t v48 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v48)
    {
      uint64_t v76 = countAndFlagsBits;
      unint64_t v77 = object;
      MEMORY[0x1F4188790](v46);
      void v67[2] = &v76;
      v67[3] = v47;
      swift_bridgeObjectRetain();
      uint64_t v49 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v67, countAndFlagsBits, object);
      unint64_t v74 = v8;
      if (v50 == 1)
      {
        Swift::Int v51 = v76;
        unint64_t v52 = v77;
        swift_bridgeObjectRetain();
        int v53 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v51, v52, v47);
        unint64_t v55 = v54;
        swift_bridgeObjectRelease();
      }
      else
      {
        int v53 = (void (*)(char *, void))v49;
        unint64_t v55 = v50;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v55)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int v53 = 0;
        unint64_t v55 = 0xE000000000000000;
        goto LABEL_32;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      int v53 = 0;
      unint64_t v55 = 0xE000000000000000;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_32:
    _sSS10FoundationE28withFileSystemRepresentationyxxSPys4Int8VGSgKXEKlFyt_Tg5031_s10Foundation3URLV34withUnsafecd22RepresentationyxxSPys4F25VGSgKXEKlFxAHKXEfU_yt_Tg5AFxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n((uint64_t)v53, v55, (uint64_t (*)(char *))partial apply for closure #1 in closure #1 in static _FileOperations.moveFile(_:to:with:options:));
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v74 = v8;
  swift_retain_n();
  id v26 = a2;
  swift_retain_n();
  id v27 = v26;
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v79 = a4;
    uint64_t v28 = v27;
    swift_retain();
    swift_retain();
    Swift::String v29 = URL.path(percentEncoded:)(1);
    uint64_t v30 = v29._countAndFlagsBits;
    Swift::String v78 = v29;
    swift_bridgeObjectRetain();
    char v75 = v28;
    if (String.count.getter() <= 1)
    {
      unint64_t v31 = (unint64_t)v29._object;
    }
    else
    {
      unint64_t v31 = (unint64_t)v29._object;
      if ((specialized BidirectionalCollection.last.getter(v29._countAndFlagsBits, (unint64_t)v29._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t v30 = v78._countAndFlagsBits;
        unint64_t v31 = (unint64_t)v78._object;
      }
    }
    uint64_t v76 = Set.init(minimumCapacity:)();
    uint64_t v56 = specialized Set._Variant.insert(_:)(&v80, 0x2FuLL);
    uint64_t v57 = v76;
    uint64_t v58 = HIBYTE(v31) & 0xF;
    if ((v31 & 0x2000000000000000) == 0) {
      uint64_t v58 = v30 & 0xFFFFFFFFFFFFLL;
    }
    if (v58)
    {
      id v73 = v27;
      uint64_t v76 = v30;
      unint64_t v77 = v31;
      MEMORY[0x1F4188790](v56);
      long long v70 = &v76;
      uint64_t v71 = v57;
      swift_bridgeObjectRetain();
      specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v69, v30, v31);
      if (v59 == 1)
      {
        Swift::Int v60 = v76;
        unint64_t v61 = v77;
        swift_bridgeObjectRetain();
        specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v60, v61, v57);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v27 = v73;
      int v63 = v75;
    }
    else
    {
      swift_bridgeObjectRelease();
      int v63 = v75;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    id v34 = objc_msgSend(v27, sel__parameterString);
    if (v34)
    {
      uint64_t v35 = v34;
      id v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      uint64_t v38 = v37;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (id v39 = objc_msgSend(v27, sel_path)) != 0)
      {
        uint64_t v40 = v39;
        id v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
        uint64_t v43 = v42;

        v78._uint64_t countAndFlagsBits = (uint64_t)v41;
        v78._unint64_t object = v43;
        swift_bridgeObjectRetain();
        v44._uint64_t countAndFlagsBits = 59;
        v44._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v44);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v45._uint64_t countAndFlagsBits = (uint64_t)v36;
        v45._unint64_t object = v38;
        String.append(_:)(v45);
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
      }
      else
      {
        v78._uint64_t countAndFlagsBits = 59;
        v78._unint64_t object = (void *)0xE100000000000000;
        v64._uint64_t countAndFlagsBits = (uint64_t)v36;
        v64._unint64_t object = v38;
        String.append(_:)(v64);
        swift_release();
        swift_release();
      }
      swift_bridgeObjectRelease();
      goto LABEL_41;
    }
    id v62 = objc_msgSend(v27, sel_path);
    if (!v62)
    {
      swift_release();
      swift_release();

      goto LABEL_41;
    }
    int v63 = v62;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
    swift_release();
    swift_release();
  }
LABEL_41:
  uint64_t v65 = self;
  uint64_t v66 = String._bridgeToObjectiveCImpl()();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  objc_msgSend(v65, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, 4, v66, v27, 0, 0, 0, 0);
  swift_unknownObjectRelease();

  swift_willThrow();
}

uint64_t specialized closure #1 in static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)(char *a1, int a2, char *__source, const char *a4, int a5, void *a6)
{
  id v321 = a6;
  int v313 = a5;
  uint64_t v326 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    goto LABEL_345;
  }
  uint64_t v7 = v6;
  uint64_t v9 = a1;
  size_t v10 = strlcpy(a1, __source, 0x402uLL);
  size_t v319 = 1026 - v10;
  size_t v320 = strlen(a4);
  if (__OFSUB__(1026, v10))
  {
    __break(1u);
LABEL_325:
    __break(1u);
LABEL_326:
    __break(1u);
LABEL_327:
    __break(1u);
LABEL_328:
    __break(1u);
LABEL_329:
    __break(1u);
LABEL_330:
    __break(1u);
LABEL_331:
    __break(1u);
LABEL_332:
    __break(1u);
LABEL_333:
    __break(1u);
LABEL_334:
    __break(1u);
LABEL_335:
    __break(1u);
LABEL_336:
    __break(1u);
LABEL_337:
    __break(1u);
LABEL_338:
    __break(1u);
LABEL_339:
    __break(1u);
LABEL_340:
    __break(1u);
LABEL_341:
    __break(1u);
LABEL_342:
    __break(1u);
LABEL_343:
    __break(1u);
LABEL_344:
    __break(1u);
LABEL_345:
    __break(1u);
  }
  type metadata accessor for _FTSSequence.Iterator();
  swift_initStackObject();
  uint64_t v11 = _FTSSequence.Iterator.init(_:_:)(a4, 20);
  uint64_t v12 = _FTSSequence.Iterator.next()();
  if (v15 == 0xFF) {
    return swift_release();
  }
  uint64_t v16 = (FTSENT *)v12;
  uint64_t v17 = v13;
  unint64_t v18 = v14;
  unsigned __int8 v19 = v15;
  v318 = (char *)&v9[v10];
  v312 = @"NSPOSIXErrorDomain";
  if (v313) {
    copyfile_flags_t v20 = 17694735;
  }
  else {
    copyfile_flags_t v20 = 917519;
  }
  copyfile_flags_t v311 = v20;
  uint64_t v306 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v316 = v11;
  v315 = v9;
  while (2)
  {
    if (v19)
    {
      uint64_t v284 = 263;
      switch((int)v16)
      {
        case 1:
        case 13:
          uint64_t v284 = 257;
          goto LABEL_311;
        case 2:
          uint64_t v284 = 260;
          goto LABEL_311;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          goto LABEL_308;
        case 27:
          goto LABEL_311;
        default:
          if (v16 == 63)
          {
            uint64_t v284 = 258;
          }
          else
          {
            if (v16 == 102)
            {
              v285 = 0;
              uint64_t v286 = 256;
              goto LABEL_320;
            }
LABEL_308:
            uint64_t v284 = 256;
          }
LABEL_311:
          id v321 = (id)v284;
          unint64_t v317 = v17;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
            goto LABEL_358;
          }
          v287 = v312;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v312);
          uint64_t v288 = (int)POSIXErrorCode.rawValue.getter();
          id v289 = objc_allocWithZone((Class)NSError);
          uint64_t v290 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v291 = objc_msgSend(v289, sel_initWithDomain_code_userInfo_, v290, v288, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v285 = v291;
          id v292 = objc_msgSend(v291, sel_domain);
          id v293 = static String._unconditionallyBridgeFromObjectiveC(_:)(v292);
          uint64_t v295 = v294;

          if (v293 == static String._unconditionallyBridgeFromObjectiveC(_:)(v287) && v295 == v296) {
            goto LABEL_318;
          }
          char v298 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v17 = v317;
          if ((v298 & 1) == 0)
          {
            __break(1u);
LABEL_318:
            swift_bridgeObjectRelease_n();
            uint64_t v17 = v317;
          }
          uint64_t v286 = (uint64_t)v321;
LABEL_320:
          swift_bridgeObjectRetain();
          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v286, v17, v18, v285, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v323, 0, 0);
          swift_willThrow();
          swift_release();
          uint64_t result = outlined consume of _FTSSequence.Element?((uint64_t)v16, v17, v18, v19);
          break;
      }
      return result;
    }
    fts_path = v16->fts_path;
    if (!fts_path) {
      goto LABEL_342;
    }
    strlcpy(v318, &fts_path[v320], v319);
    if (v16->fts_info == 6)
    {
LABEL_8:
      specialized static _FileOperations._safeCopyDirectoryMetadata<A>(src:dst:delegate:extraFlags:)((uint64_t)fts_path, (uint64_t)v9, (uint64_t)v321, 0);
      if (v7) {
        return swift_release();
      }
      goto LABEL_9;
    }
    unint64_t v317 = v17;
    uint64_t v25 = v7;
    id v26 = v321;
    uint64_t v27 = String.init(cString:)();
    unint64_t v29 = v28;
    uint64_t v30 = String.init(cString:)();
    LOBYTE(v27) = NSFileManager._shouldCopyItemAtPath(_:to:)(v27, v29, v30, v31, (SEL *)&selRef_fileManager_shouldLinkItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldLinkItemAtPath_toPath_);
    id v314 = v26;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
    {
      if (v16->fts_info == 1)
      {
        uint64_t v9 = v315;
        uint64_t v7 = v25;
        if (!*(unsigned char *)(v316 + 40))
        {
          fts_set(*(FTS **)(v316 + 16), v16, 4);
          uint64_t v43 = _FTSSequence.Iterator.next()();
          outlined consume of _FTSSequence.Element?(v43, v44, v45, v46);
        }
      }
      else
      {
LABEL_22:
        uint64_t v9 = v315;
        uint64_t v7 = v25;
      }
      goto LABEL_9;
    }
    uint64_t v9 = v315;
    uint64_t v7 = v25;
    uint64_t v32 = v317;
    switch(v16->fts_info)
    {
      case 1u:
        if (!copyfile(fts_path, v315, 0, 0xE0008u)) {
          goto LABEL_9;
        }
        int v89 = MEMORY[0x185301870]();
        uint64_t v90 = String.init(cString:)();
        size_t v92 = v91;
        uint64_t v93 = String.init(cString:)();
        LODWORD(v307) = v89;
        v310 = (FTSENT *)v94;
        uint64_t v309 = v90;
        v308 = (uint64_t *)v93;
        if (v89 != 63)
        {
          swift_bridgeObjectRetain();
          uint64_t v131 = v90;
          size_t v132 = v92;
          size_t v133 = v92;
          goto LABEL_272;
        }
        uint64_t v95 = v93;
        unint64_t v96 = v94;
        if ((v94 & 0x2000000000000000) != 0) {
          uint64_t v97 = HIBYTE(v94) & 0xF;
        }
        else {
          uint64_t v97 = v93 & 0xFFFFFFFFFFFFLL;
        }
        size_t v302 = v92;
        uint64_t v98 = v93;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v99 = v95;
        v305 = (uint64_t *)v97;
        if (v97)
        {
          size_t v304 = 4 * v97;
          while (1)
          {
            unint64_t v100 = String.index(before:)();
            id v323 = (id)String.subscript.getter();
            unint64_t v324 = v101;
            char v102 = closure #1 in String._lastPathComponent.getter(&v323);
            swift_bridgeObjectRelease();
            if (v102) {
              break;
            }
            if (v100 < 0x4000)
            {
              uint64_t v98 = v95;
              unint64_t v33 = (unint64_t)v310;
              goto LABEL_228;
            }
          }
          if (v100 >> 14)
          {
            if ((String.index(before:)() ^ v100) >= 0x4000)
            {
              if (v304 < (unint64_t)String.index(after:)() >> 14) {
                goto LABEL_343;
              }
              goto LABEL_224;
            }
            unint64_t v186 = String.subscript.getter();
            unint64_t v188 = specialized BidirectionalCollection.lastIndex(where:)(v186, v187);
            char v190 = v189;
            swift_bridgeObjectRelease();
            if ((v190 & 1) == 0)
            {
              unint64_t v191 = String.subscript.getter();
              size_t v304 = specialized BidirectionalCollection.lastIndex(where:)(v191, v192);
              Swift::Int32 v47 = v193;
              swift_bridgeObjectRelease();
              if (v47)
              {
                swift_bridgeObjectRetain();
                uint64_t v233 = specialized Collection.subscript.getter();
                size_t v304 = v234;
                uint64_t v236 = v235;
                uint64_t v238 = v237;
                swift_bridgeObjectRelease();
                uint64_t v98 = MEMORY[0x185302390](v233, v304, v236, v238);
                unint64_t v33 = v239;
                goto LABEL_226;
              }
              if (v188 >> 14 >= (unint64_t)String.index(after:)() >> 14)
              {
                swift_bridgeObjectRetain();
                uint64_t v194 = specialized Collection.subscript.getter();
                uint64_t v196 = v195;
                uint64_t v198 = v197;
                uint64_t v200 = v199;
                swift_bridgeObjectRelease();
                uint64_t v98 = MEMORY[0x185302390](v194, v196, v198, v200);
                unint64_t v33 = v201;
LABEL_226:
                swift_bridgeObjectRelease();
                goto LABEL_227;
              }
              __break(1u);
LABEL_347:
              id v323 = 0;
              unint64_t v324 = 0xE000000000000000;
              _StringGuts.grow(_:)(22);
              swift_bridgeObjectRelease();
              id v323 = (id)0xD000000000000014;
              unint64_t v324 = 0x80000001823A9780;
              int v322 = v47;
              while (1)
              {
LABEL_357:
                v300._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                String.append(_:)(v300);
                swift_bridgeObjectRelease();
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
LABEL_358:
                id v323 = 0;
                unint64_t v324 = 0xE000000000000000;
                _StringGuts.grow(_:)(22);
                swift_bridgeObjectRelease();
                id v323 = (id)0xD000000000000014;
                unint64_t v324 = 0x80000001823A9780;
                LODWORD(v325) = v16;
              }
            }
          }
          else if (String.count.getter() != 1)
          {
            if (v304 < (unint64_t)String.index(after:)() >> 14) {
              goto LABEL_344;
            }
LABEL_224:
            uint64_t v231 = String.subscript.getter();
            uint64_t v98 = MEMORY[0x185302390](v231);
            unint64_t v33 = v232;
            swift_bridgeObjectRelease();
LABEL_227:
            swift_bridgeObjectRelease();
            goto LABEL_228;
          }
          swift_bridgeObjectRelease();
          unint64_t v33 = 0xE100000000000000;
          uint64_t v98 = 47;
        }
        else
        {
          unint64_t v33 = v96;
        }
LABEL_228:
        if ((v33 & 0x1000000000000000) != 0)
        {
          Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
        }
        else if ((v33 & 0x2000000000000000) != 0)
        {
          Swift::Int isStackAllocationSafe = HIBYTE(v33) & 0xF;
        }
        else
        {
          Swift::Int isStackAllocationSafe = v98 & 0xFFFFFFFFFFFFLL;
        }
        uint64_t v241 = 3 * isStackAllocationSafe;
        if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63) {
          goto LABEL_333;
        }
        if (v241 < -1) {
          goto LABEL_340;
        }
        uint64_t v242 = v241 + 1;
        if (v241 < 1024
          || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
        {
          v303 = (const char *)&v301;
          MEMORY[0x1F4188790](isStackAllocationSafe);
          v244 = (char *)&v301 - v243;
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v244, v242, 1, v98, v33);
          char v246 = v245;
          swift_bridgeObjectRelease();
          if (v246)
          {
            unint64_t v247 = (unint64_t)v310;
            if (v7) {
              goto LABEL_355;
            }
            size_t v304 = 0;
          }
          else
          {
            size_t v304 = strnlen(v244, 0x100uLL);
            unint64_t v247 = (unint64_t)v310;
            if (v7) {
              goto LABEL_355;
            }
          }
          uint64_t v248 = (uint64_t)v305;
        }
        else
        {
          v249 = (const char *)swift_slowAlloc();
          swift_bridgeObjectRetain();
          v303 = v249;
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v249, v242, 1, v98, v33);
          char v251 = v250;
          swift_bridgeObjectRelease();
          if (v251)
          {
            unint64_t v247 = (unint64_t)v310;
            uint64_t v248 = (uint64_t)v305;
            if (v7) {
              goto LABEL_349;
            }
            size_t v304 = 0;
          }
          else
          {
            unint64_t v247 = (unint64_t)v310;
            if (v303) {
              size_t v304 = strnlen(v303, 0x100uLL);
            }
            else {
              size_t v304 = 0;
            }
            uint64_t v248 = (uint64_t)v305;
            if (v7)
            {
LABEL_349:
              v299 = v303;
              goto LABEL_354;
            }
          }
          MEMORY[0x185309510](v303, -1, -1);
        }
        uint64_t v252 = swift_bridgeObjectRelease();
        if ((v247 & 0x1000000000000000) != 0)
        {
          uint64_t v252 = String.UTF8View._foreignCount()();
          uint64_t v248 = v252;
        }
        uint64_t v253 = 3 * v248;
        if ((unsigned __int128)(v248 * (__int128)3) >> 64 != (3 * v248) >> 63) {
          goto LABEL_335;
        }
        if (v253 < -1) {
          goto LABEL_341;
        }
        uint64_t v254 = v253 + 1;
        if (v253 < 1024 || (uint64_t v252 = swift_stdlib_isStackAllocationSafe(), (v252 & 1) != 0))
        {
          v305 = &v301;
          MEMORY[0x1F4188790](v252);
          v256 = (char *)&v301 - v255;
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v256, v254, 1, v99, v247);
          char v258 = v257;
          swift_bridgeObjectRelease();
          if (v258)
          {
            uint64_t v90 = v309;
            int64_t v259 = 0;
          }
          else
          {
            int64_t v259 = strnlen(v256, 0x401uLL);
            uint64_t v90 = v309;
          }
          unint64_t v247 = (unint64_t)v310;
          size_t v133 = v302;
        }
        else
        {
          v260 = (const char *)swift_slowAlloc();
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v260, v254, 1, v99, v247);
          char v262 = v261;
          swift_bridgeObjectRelease();
          if (v262)
          {
            size_t v133 = v302;
            int64_t v259 = 0;
          }
          else
          {
            if (v260) {
              int64_t v259 = strnlen(v260, 0x401uLL);
            }
            else {
              int64_t v259 = 0;
            }
            size_t v133 = v302;
          }
          MEMORY[0x185309510](v260, -1, -1);
          uint64_t v90 = v309;
        }
        swift_bridgeObjectRelease();
        if ((uint64_t)v304 <= 255 && v259 < 1025)
        {
          swift_bridgeObjectRelease();
          uint64_t v131 = v90;
          size_t v132 = v133;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v131 = v99;
          size_t v132 = v247;
        }
        uint64_t v32 = v317;
LABEL_272:
        int v263 = (int)v307;
        v305 = (uint64_t *)v131;
        size_t v304 = v132;
        switch(v307)
        {
          case 0xD:
            goto LABEL_275;
          case 2:
            uint64_t v264 = 4;
            goto LABEL_279;
          case 1:
LABEL_275:
            uint64_t v264 = 513;
            goto LABEL_279;
          case 0x3F:
            uint64_t v264 = 514;
            goto LABEL_279;
        }
        if ((int)v307 <= 29)
        {
          if (v307 != 17)
          {
            uint64_t v264 = 640;
            if (v307 == 28) {
              goto LABEL_279;
            }
            goto LABEL_294;
          }
          uint64_t v264 = 516;
        }
        else
        {
          if (v307 == 102)
          {
            v307 = 0;
            uint64_t v276 = 512;
            goto LABEL_285;
          }
          uint64_t v264 = 640;
          if (v307 != 69)
          {
            if (v307 == 30)
            {
              uint64_t v264 = 642;
              goto LABEL_279;
            }
LABEL_294:
            uint64_t v264 = 512;
          }
        }
LABEL_279:
        v303 = (const char *)v264;
        size_t v265 = v133;
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
        {
          id v323 = 0;
          unint64_t v324 = 0xE000000000000000;
          _StringGuts.grow(_:)(22);
          swift_bridgeObjectRelease();
          id v323 = (id)0xD000000000000014;
          unint64_t v324 = 0x80000001823A9780;
          LODWORD(v325) = v263;
          goto LABEL_357;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(v312);
        uint64_t v266 = (int)POSIXErrorCode.rawValue.getter();
        id v267 = objc_allocWithZone((Class)NSError);
        uint64_t v268 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v269 = objc_msgSend(v267, sel_initWithDomain_code_userInfo_, v268, v266, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v307 = v269;
        id v270 = objc_msgSend(v269, sel_domain);
        id v271 = static String._unconditionallyBridgeFromObjectiveC(_:)(v270);
        uint64_t v273 = v272;

        if (v271 == static String._unconditionallyBridgeFromObjectiveC(_:)(v312) && v273 == v274)
        {
          swift_bridgeObjectRelease_n();
          size_t v133 = v265;
        }
        else
        {
          char v275 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          size_t v133 = v265;
          if ((v275 & 1) == 0) {
            goto LABEL_337;
          }
        }
        uint64_t v32 = v317;
        uint64_t v90 = v309;
        uint64_t v276 = (uint64_t)v303;
LABEL_285:
        swift_bridgeObjectRetain();
        unint64_t v277 = v133;
        unint64_t v278 = (unint64_t)v310;
        swift_bridgeObjectRetain();
        uint64_t v279 = (uint64_t)v308;
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v276, (uint64_t)v305, v304, v307, 1802398028, 0xE400000000000000, v90, v277, (void *(*)(void *__return_ptr, void *, uint64_t))&v323, (uint64_t)v308, v278);
        id v280 = v323;
        uint64_t v281 = v90;
        id v282 = v280;
        LOBYTE(v279) = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)(v280, v281, v277, v279, v278, (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtPath_toPath_);

        if (v279)
        {

          outlined consume of _FTSSequence.Element?((uint64_t)v16, v32, v18, v19);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_222:
          uint64_t v9 = v315;
LABEL_9:
          uint64_t v16 = (FTSENT *)_FTSSequence.Iterator.next()();
          uint64_t v17 = v21;
          unint64_t v18 = v22;
          unsigned __int8 v19 = v23;
          if (v23 == 0xFF) {
            return swift_release();
          }
          continue;
        }
        swift_willThrow();
        swift_release();
        outlined consume of _FTSSequence.Element?((uint64_t)v16, v32, v18, v19);
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      case 2u:
      case 5u:
      case 9u:
      case 0xBu:
        goto LABEL_9;
      case 3u:
      case 8u:
        if (v313)
        {
          if (!copyfile(fts_path, v315, 0, 0x10E000Fu)) {
            goto LABEL_9;
          }
          Swift::Int32 v47 = MEMORY[0x185301870]();
          uint64_t v48 = String.init(cString:)();
          uint64_t v16 = v49;
          uint64_t v50 = String.init(cString:)();
          unint64_t v52 = v51;
          swift_bridgeObjectRetain();
          if (v47 == 63)
          {
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            unint64_t Path = String._lastPathComponent.getter(v50, v52);
            unint64_t v55 = v54;
            swift_bridgeObjectRelease();
            int64_t v56 = specialized String.withFileSystemRepresentation<A>(_:)(Path, v55);
            swift_bridgeObjectRelease();
            int64_t v57 = specialized String.withFileSystemRepresentation<A>(_:)(v50, v52);
            swift_bridgeObjectRelease();
            BOOL v59 = v56 > 255 || v57 > 1024;
            BOOL v60 = !v59;
            if (v59) {
              uint64_t v61 = v50;
            }
            else {
              uint64_t v61 = v48;
            }
            v308 = (uint64_t *)v61;
            if (v60) {
              uint64_t v62 = (uint64_t)v16;
            }
            else {
              uint64_t v62 = v52;
            }
            uint64_t v309 = v62;
            swift_bridgeObjectRelease();
            CocoaError.Code.init(fileErrno:reading:)(63, 0);
            int v63 = v325;
          }
          else
          {
            CocoaError.Code.init(fileErrno:reading:)(v47, 0);
            int v63 = v325;
            if (v47 == 102) {
              goto LABEL_96;
            }
            uint64_t v309 = (uint64_t)v16;
            v308 = (uint64_t *)v48;
          }
          v307 = v63;
          v310 = (FTSENT *)v50;
          unint64_t v317 = v48;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
            goto LABEL_347;
          }
          uint64_t v118 = v312;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v312);
          uint64_t v119 = (int)POSIXErrorCode.rawValue.getter();
          id v120 = objc_allocWithZone((Class)NSError);
          uint64_t v121 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v122 = objc_msgSend(v120, sel_initWithDomain_code_userInfo_, v121, v119, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v123 = objc_msgSend(v122, sel_domain);
          id v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(v123);
          uint64_t v126 = v125;

          if (v124 == static String._unconditionallyBridgeFromObjectiveC(_:)(v118) && v126 == v127) {
            goto LABEL_115;
          }
          char v128 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v128 & 1) == 0) {
            goto LABEL_338;
          }
        }
        else
        {
          if (!link(fts_path, v315)) {
            goto LABEL_9;
          }
          Swift::Int32 v47 = MEMORY[0x185301870]();
          uint64_t v48 = String.init(cString:)();
          uint64_t v16 = v77;
          uint64_t v50 = String.init(cString:)();
          unint64_t v52 = v78;
          swift_bridgeObjectRetain();
          if (v47 == 63)
          {
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            unint64_t v79 = String._lastPathComponent.getter(v50, v52);
            unint64_t v81 = v80;
            swift_bridgeObjectRelease();
            int64_t v82 = specialized String.withFileSystemRepresentation<A>(_:)(v79, v81);
            swift_bridgeObjectRelease();
            int64_t v83 = specialized String.withFileSystemRepresentation<A>(_:)(v50, v52);
            swift_bridgeObjectRelease();
            BOOL v85 = v82 > 255 || v83 > 1024;
            BOOL v86 = !v85;
            if (v85) {
              uint64_t v87 = v50;
            }
            else {
              uint64_t v87 = v48;
            }
            v308 = (uint64_t *)v87;
            if (v86) {
              uint64_t v88 = (uint64_t)v16;
            }
            else {
              uint64_t v88 = v52;
            }
            uint64_t v309 = v88;
            swift_bridgeObjectRelease();
            CocoaError.Code.init(fileErrno:reading:)(63, 0);
            int v63 = v325;
          }
          else
          {
            CocoaError.Code.init(fileErrno:reading:)(v47, 0);
            int v63 = v325;
            if (v47 == 102)
            {
LABEL_96:
              id v122 = 0;
              unint64_t v129 = (unint64_t)v16;
              uint64_t v130 = v48;
              goto LABEL_118;
            }
            uint64_t v309 = (uint64_t)v16;
            v308 = (uint64_t *)v48;
          }
          v307 = v63;
          v310 = (FTSENT *)v50;
          unint64_t v317 = v48;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
            goto LABEL_347;
          }
          v142 = v312;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v312);
          uint64_t v143 = (int)POSIXErrorCode.rawValue.getter();
          id v144 = objc_allocWithZone((Class)NSError);
          uint64_t v145 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v122 = objc_msgSend(v144, sel_initWithDomain_code_userInfo_, v145, v143, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v146 = objc_msgSend(v122, sel_domain);
          id v147 = static String._unconditionallyBridgeFromObjectiveC(_:)(v146);
          uint64_t v149 = v148;

          if (v147 == static String._unconditionallyBridgeFromObjectiveC(_:)(v142) && v149 == v150)
          {
LABEL_115:
            swift_bridgeObjectRelease_n();
            goto LABEL_117;
          }
          char v151 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v151 & 1) == 0) {
            goto LABEL_339;
          }
        }
LABEL_117:
        uint64_t v48 = v317;
        uint64_t v50 = (uint64_t)v310;
        unint64_t v129 = v309;
        uint64_t v130 = (uint64_t)v308;
        int v63 = v307;
LABEL_118:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v63, v130, v129, v122, 1802398028, 0xE400000000000000, v48, (uint64_t)v16, (void *(*)(void *__return_ptr, void *, uint64_t))&v323, v50, v52);
        id v152 = v323;
        unsigned __int8 v153 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)(v152, v48, (unint64_t)v16, v50, v52, (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtPath_toPath_);

        if ((v153 & 1) == 0) {
          goto LABEL_321;
        }
        goto LABEL_221;
      case 4u:
      case 7u:
      case 0xAu:
        LODWORD(v33) = v16->fts_errno;
        uint64_t v34 = String.init(cString:)();
        uint64_t v16 = v35;
        uint64_t v36 = String.init(cString:)();
        unint64_t v38 = v37;
        swift_bridgeObjectRetain();
        if (v33 == 63)
        {
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          unint64_t v39 = String._lastPathComponent.getter(v36, v38);
          unint64_t v41 = v40;
          swift_bridgeObjectRelease();
          if ((v41 & 0x1000000000000000) != 0)
          {
            Swift::Int v42 = String.UTF8View._foreignCount()();
          }
          else if ((v41 & 0x2000000000000000) != 0)
          {
            Swift::Int v42 = HIBYTE(v41) & 0xF;
          }
          else
          {
            Swift::Int v42 = v39 & 0xFFFFFFFFFFFFLL;
          }
          uint64_t v103 = 3 * v42;
          if ((unsigned __int128)(v42 * (__int128)3) >> 64 != (3 * v42) >> 63) {
            goto LABEL_325;
          }
          unint64_t v317 = v38;
          if (v103 < -1) {
            goto LABEL_328;
          }
          uint64_t v104 = v36;
          v310 = (FTSENT *)v34;
          uint64_t v105 = v103 + 1;
          if (v103 < 1024 || (Swift::Int v42 = swift_stdlib_isStackAllocationSafe(), (v42 & 1) != 0))
          {
            LODWORD(v309) = 63;
            v308 = &v301;
            MEMORY[0x1F4188790](v42);
            unint64_t v33 = (unint64_t)&v301 - v106;
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, v33, v105, 1, v39, v41);
            char v108 = v107;
            swift_bridgeObjectRelease();
            if (v108)
            {
              if (v25) {
                goto LABEL_351;
              }
              uint64_t v36 = v104;
              size_t v110 = 0;
            }
            else
            {
              size_t v109 = strnlen((const char *)v33, 0x100uLL);
              if (v25) {
                goto LABEL_351;
              }
              size_t v110 = v109;
              uint64_t v36 = v104;
            }
            unint64_t v115 = v317;
            LODWORD(v33) = v309;
          }
          else
          {
            uint64_t v25 = (const char *)swift_slowAlloc();
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v25, v105, 1, v39, v41);
            char v117 = v116;
            swift_bridgeObjectRelease();
            uint64_t v36 = v104;
            if (v117)
            {
              unint64_t v115 = v317;
              if (v7) {
                goto LABEL_352;
              }
              size_t v110 = 0;
            }
            else
            {
              if (v25) {
                size_t v110 = strnlen(v25, 0x100uLL);
              }
              else {
                size_t v110 = 0;
              }
              unint64_t v115 = v317;
              if (v7) {
                goto LABEL_352;
              }
            }
            MEMORY[0x185309510](v25, -1, -1);
          }
          swift_bridgeObjectRelease();
          if ((v115 & 0x1000000000000000) != 0)
          {
            Swift::Int v157 = String.UTF8View._foreignCount()();
          }
          else if ((v115 & 0x2000000000000000) != 0)
          {
            Swift::Int v157 = HIBYTE(v115) & 0xF;
          }
          else
          {
            Swift::Int v157 = v36 & 0xFFFFFFFFFFFFLL;
          }
          uint64_t v158 = 3 * v157;
          if ((unsigned __int128)(v157 * (__int128)3) >> 64 != (3 * v157) >> 63) {
            goto LABEL_326;
          }
          if (v158 < -1) {
            goto LABEL_329;
          }
          uint64_t v309 = v110;
          uint64_t v159 = v158 + 1;
          if (v158 < 1024 || (Swift::Int v157 = swift_stdlib_isStackAllocationSafe(), (v157 & 1) != 0))
          {
            MEMORY[0x1F4188790](v157);
            uint64_t v161 = (char *)&v301 - v160;
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v161, v159, 1, v36, v115);
            char v163 = v162;
            swift_bridgeObjectRelease();
            if (v163) {
              int64_t v164 = 0;
            }
            else {
              int64_t v164 = strnlen(v161, 0x401uLL);
            }
            uint64_t v34 = (uint64_t)v310;
          }
          else
          {
            uint64_t v165 = (const char *)swift_slowAlloc();
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v165, v159, 1, v36, v115);
            char v167 = v166;
            swift_bridgeObjectRelease();
            if (v167)
            {
              uint64_t v34 = (uint64_t)v310;
              int64_t v164 = 0;
            }
            else
            {
              if (v165) {
                int64_t v164 = strnlen(v165, 0x401uLL);
              }
              else {
                int64_t v164 = 0;
              }
              uint64_t v34 = (uint64_t)v310;
            }
            MEMORY[0x185309510](v165, -1, -1);
          }
          v307 = (void *)v7;
          swift_bridgeObjectRelease();
          BOOL v169 = v309 > 255 || v164 > 1024;
          BOOL v170 = !v169;
          if (v169) {
            uint64_t v171 = v36;
          }
          else {
            uint64_t v171 = v34;
          }
          v308 = (uint64_t *)v171;
          v310 = v16;
          if (v170) {
            uint64_t v172 = (uint64_t)v16;
          }
          else {
            uint64_t v172 = v115;
          }
          uint64_t v309 = v172;
          swift_bridgeObjectRelease();
          CocoaError.Code.init(fileErrno:reading:)(63, 0);
          id v73 = (uint64_t (*)(void))v325;
        }
        else
        {
          CocoaError.Code.init(fileErrno:reading:)(v33, 0);
          id v73 = (uint64_t (*)(void))v325;
          if (v33 == 102)
          {
            id v74 = 0;
            unint64_t v75 = (unint64_t)v16;
            uint64_t v76 = v34;
            goto LABEL_171;
          }
          v307 = (void *)v7;
          unint64_t v317 = v38;
          v310 = v16;
          uint64_t v309 = (uint64_t)v16;
          v308 = (uint64_t *)v34;
        }
        v173 = v73;
        uint64_t v16 = (FTSENT *)v34;
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
          goto LABEL_356;
        }
        v174 = v312;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v312);
        uint64_t v175 = (int)POSIXErrorCode.rawValue.getter();
        id v176 = objc_allocWithZone((Class)NSError);
        uint64_t v177 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v74 = objc_msgSend(v176, sel_initWithDomain_code_userInfo_, v177, v175, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v178 = objc_msgSend(v74, sel_domain);
        id v179 = static String._unconditionallyBridgeFromObjectiveC(_:)(v178);
        uint64_t v181 = v180;

        if (v179 == static String._unconditionallyBridgeFromObjectiveC(_:)(v174) && v181 == v182)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v9 = v315;
          uint64_t v34 = (uint64_t)v16;
        }
        else
        {
          char v183 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v9 = v315;
          uint64_t v34 = (uint64_t)v16;
          if ((v183 & 1) == 0) {
            goto LABEL_327;
          }
        }
        uint64_t v16 = v310;
        unint64_t v38 = v317;
        unint64_t v75 = v309;
        uint64_t v76 = (uint64_t)v308;
        id v73 = v173;
        uint64_t v7 = (const char *)v307;
LABEL_171:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)(v73, v76, v75, v74, 1802398028, 0xE400000000000000, v34, (uint64_t)v16, (void *(*)(void *__return_ptr, void *, uint64_t))&v323, v36, v38);
        id v184 = v323;
        unsigned __int8 v185 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)(v184, v34, (unint64_t)v16, v36, v38, (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtPath_toPath_);

        if ((v185 & 1) == 0) {
          goto LABEL_321;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_9;
      case 6u:
        goto LABEL_8;
      case 0xCu:
      case 0xDu:
        if (!copyfile(fts_path, v315, 0, v311)) {
          goto LABEL_9;
        }
        LODWORD(v33) = MEMORY[0x185301870]();
        uint64_t v64 = String.init(cString:)();
        unint64_t v66 = v65;
        uint64_t v67 = String.init(cString:)();
        unint64_t v69 = v68;
        swift_bridgeObjectRetain();
        unint64_t v317 = v67;
        if (v33 == 63)
        {
          LODWORD(v305) = 63;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          unint64_t v70 = String._lastPathComponent.getter(v67, v69);
          unint64_t v33 = v71;
          swift_bridgeObjectRelease();
          if ((v33 & 0x1000000000000000) != 0)
          {
            Swift::Int v72 = String.UTF8View._foreignCount()();
          }
          else if ((v33 & 0x2000000000000000) != 0)
          {
            Swift::Int v72 = HIBYTE(v33) & 0xF;
          }
          else
          {
            Swift::Int v72 = v70 & 0xFFFFFFFFFFFFLL;
          }
          v310 = (FTSENT *)v66;
          uint64_t v134 = 3 * v72;
          if ((unsigned __int128)(v72 * (__int128)3) >> 64 != (3 * v72) >> 63) {
            goto LABEL_330;
          }
          if (v134 < -1) {
            goto LABEL_334;
          }
          uint64_t v16 = (FTSENT *)v64;
          uint64_t v135 = v134 + 1;
          if (v134 < 1024 || (Swift::Int v72 = swift_stdlib_isStackAllocationSafe(), (v72 & 1) != 0))
          {
            MEMORY[0x1F4188790](v72);
            uint64_t v137 = (char *)&v301 - v136;
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v137, v135, 1, v70, v33);
            char v139 = v138;
            swift_bridgeObjectRelease();
            if (v139)
            {
              uint64_t v67 = v317;
              if (v25)
              {
LABEL_351:
                swift_willThrow();
                __break(1u);
LABEL_352:
                v299 = v25;
LABEL_354:
                MEMORY[0x185309510](v299, -1, -1);
                __break(1u);
LABEL_355:
                swift_willThrow();
                __break(1u);
LABEL_356:
                id v323 = 0;
                unint64_t v324 = 0xE000000000000000;
                _StringGuts.grow(_:)(22);
                swift_bridgeObjectRelease();
                id v323 = (id)0xD000000000000014;
                unint64_t v324 = 0x80000001823A9780;
                int v322 = v33;
                goto LABEL_357;
              }
              uint64_t v64 = (uint64_t)v16;
              int64_t v141 = 0;
              uint64_t v16 = v310;
            }
            else
            {
              size_t v140 = strnlen(v137, 0x100uLL);
              if (v25) {
                goto LABEL_351;
              }
              uint64_t v64 = (uint64_t)v16;
              uint64_t v16 = v310;
              uint64_t v67 = v317;
              int64_t v141 = v140;
            }
          }
          else
          {
            long long v154 = (const char *)swift_slowAlloc();
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v154, v135, 1, v70, v33);
            char v156 = v155;
            swift_bridgeObjectRelease();
            uint64_t v64 = (uint64_t)v16;
            if (v156)
            {
              uint64_t v16 = v310;
              if (v25) {
                goto LABEL_353;
              }
              int64_t v141 = 0;
            }
            else
            {
              if (v154) {
                int64_t v141 = strnlen(v154, 0x100uLL);
              }
              else {
                int64_t v141 = 0;
              }
              uint64_t v16 = v310;
              if (v7)
              {
LABEL_353:
                v299 = v154;
                goto LABEL_354;
              }
            }
            MEMORY[0x185309510](v154, -1, -1);
          }
          swift_bridgeObjectRelease();
          if ((v69 & 0x1000000000000000) != 0)
          {
            Swift::Int v202 = String.UTF8View._foreignCount()();
          }
          else if ((v69 & 0x2000000000000000) != 0)
          {
            Swift::Int v202 = HIBYTE(v69) & 0xF;
          }
          else
          {
            Swift::Int v202 = v67 & 0xFFFFFFFFFFFFLL;
          }
          uint64_t v203 = 3 * v202;
          if ((unsigned __int128)(v202 * (__int128)3) >> 64 != (3 * v202) >> 63) {
            goto LABEL_331;
          }
          if (v203 < -1) {
            goto LABEL_336;
          }
          uint64_t v204 = v203 + 1;
          if (v203 < 1024 || (Swift::Int v202 = swift_stdlib_isStackAllocationSafe(), (v202 & 1) != 0))
          {
            MEMORY[0x1F4188790](v202);
            v206 = (char *)&v301 - v205;
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v206, v204, 1, v67, v69);
            char v208 = v207;
            swift_bridgeObjectRelease();
            if (v208) {
              int64_t v209 = 0;
            }
            else {
              int64_t v209 = strnlen(v206, 0x401uLL);
            }
            uint64_t v210 = v317;
          }
          else
          {
            v211 = (const char *)swift_slowAlloc();
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v211, v204, 1, v67, v69);
            char v213 = v212;
            swift_bridgeObjectRelease();
            if (v213)
            {
              uint64_t v210 = v317;
              int64_t v209 = 0;
            }
            else
            {
              if (v211) {
                int64_t v209 = strnlen(v211, 0x401uLL);
              }
              else {
                int64_t v209 = 0;
              }
              uint64_t v210 = v317;
            }
            MEMORY[0x185309510](v211, -1, -1);
          }
          swift_bridgeObjectRelease();
          BOOL v215 = v141 > 255 || v209 > 1024;
          BOOL v216 = !v215;
          if (v215) {
            uint64_t v217 = v210;
          }
          else {
            uint64_t v217 = v64;
          }
          v308 = (uint64_t *)v217;
          v307 = (void *)v69;
          if (v216) {
            uint64_t v218 = (uint64_t)v16;
          }
          else {
            uint64_t v218 = v69;
          }
          uint64_t v309 = v218;
          swift_bridgeObjectRelease();
          CocoaError.Code.init(fileErrno:reading:)(63, 0);
          uint64_t v111 = (uint64_t (*)(void))v325;
          LODWORD(v33) = v305;
        }
        else
        {
          CocoaError.Code.init(fileErrno:reading:)(v33, 0);
          uint64_t v111 = (uint64_t (*)(void))v325;
          if (v33 == 102)
          {
            id v112 = 0;
            unint64_t v113 = v66;
            uint64_t v114 = v64;
LABEL_220:
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)(v111, v114, v113, v112, 1802398028, 0xE400000000000000, v64, v66, (void *(*)(void *__return_ptr, void *, uint64_t))&v323, v67, v69);
            id v152 = v323;
            unsigned __int8 v230 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)(v152, v64, v66, v67, v69, (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtPath_toPath_);

            if ((v230 & 1) == 0)
            {
LABEL_321:
              swift_willThrow();
              swift_release();
              swift_bridgeObjectRelease();
              return swift_bridgeObjectRelease();
            }
LABEL_221:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            goto LABEL_222;
          }
          v307 = (void *)v69;
          v310 = (FTSENT *)v66;
          uint64_t v309 = v66;
          v308 = (uint64_t *)v64;
        }
        v219 = v111;
        uint64_t v16 = (FTSENT *)v64;
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
          goto LABEL_356;
        }
        v220 = v312;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v312);
        uint64_t v221 = (int)POSIXErrorCode.rawValue.getter();
        id v222 = objc_allocWithZone((Class)NSError);
        uint64_t v223 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v112 = objc_msgSend(v222, sel_initWithDomain_code_userInfo_, v223, v221, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v224 = objc_msgSend(v112, sel_domain);
        id v225 = static String._unconditionallyBridgeFromObjectiveC(_:)(v224);
        uint64_t v227 = v226;

        if (v225 == static String._unconditionallyBridgeFromObjectiveC(_:)(v220) && v227 == v228)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v67 = v317;
          uint64_t v111 = v219;
        }
        else
        {
          char v229 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v67 = v317;
          uint64_t v111 = v219;
          if ((v229 & 1) == 0) {
            goto LABEL_332;
          }
        }
        uint64_t v64 = (uint64_t)v16;
        unint64_t v66 = (unint64_t)v310;
        unint64_t v113 = v309;
        uint64_t v114 = (uint64_t)v308;
        unint64_t v69 = (unint64_t)v307;
        goto LABEL_220;
      default:
        goto LABEL_22;
    }
  }
}

uint64_t specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  char v17 = a7;
  uint64_t v18 = a8;
  if (a1)
  {
    MEMORY[0x1F4188790](a1);
    v15[2] = v8;
    v15[3] = v9;
    v15[4] = v10;
    v15[5] = v11;
    v15[6] = &v17;
    return specialized String.withFileSystemRepresentation<A>(_:)((uint64_t (*)(char *))partial apply for specialized closure #1 in closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:), (uint64_t)v15, v8, v9);
  }
  else
  {
    swift_bridgeObjectRetain();
    specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))0x104, a2, a3, 0, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v16, 0, 0);
    return swift_willThrow();
  }
}

uint64_t specialized closure #1 in closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)(char *a1, uint64_t a2, unint64_t a3, const char *a4, uint64_t a5, uint64_t a6)
{
  if (a1) {
    return specialized static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)(a4, a1, *(unsigned char *)a6, *(void **)(a6 + 8));
  }
  swift_bridgeObjectRetain();
  specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))4, a2, a3, 0, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v9, 0, 0);
  return swift_willThrow();
}

void partial apply for closure #1 in static _FileOperations.moveFile(_:to:with:options:)(const std::__fs::filesystem::path *a1)
{
  closure #1 in static _FileOperations.moveFile(_:to:with:options:)(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void **)(v1 + 64));
}

void partial apply for closure #1 in closure #1 in static _FileOperations.moveFile(_:to:with:options:)(const std::__fs::filesystem::path *a1)
{
}

{
  uint64_t v1;

  closure #1 in closure #1 in static _FileOperations.moveFile(_:to:with:options:)(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), *(const std::__fs::filesystem::path **)(v1 + 48), *(void **)(v1 + 56), *(void **)(v1 + 64), *(void *)(v1 + 72));
}

unint64_t specialized static _FileOperations._openDirectoryFD<A>(_:srcPath:dstPath:delegate:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t (*a4)(void), uint64_t a5, uint64_t a6)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  int v10 = open(_:_:)();
  unsigned int v11 = v10;
  if ((v10 & 0x80000000) == 0) {
    goto LABEL_82;
  }
  uint64_t v103 = a6;
  int v100 = v10;
  uint64_t v101 = v6;
  int v12 = MEMORY[0x185301870]();
  uint64_t v13 = a2();
  unint64_t v15 = v14;
  uint64_t v16 = a4();
  unint64_t v18 = v17;
  unint64_t v105 = v15;
  uint64_t v106 = v16;
  uint64_t v104 = v13;
  if (v12 != 63)
  {
    swift_bridgeObjectRetain();
LABEL_22:
    unint64_t v29 = v15;
    goto LABEL_67;
  }
  uint64_t v19 = v16;
  if ((v17 & 0x2000000000000000) != 0) {
    uint64_t v20 = HIBYTE(v17) & 0xF;
  }
  else {
    uint64_t v20 = v16 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unint64_t v21 = v18;
  if (v20)
  {
    unint64_t v22 = String.index(before:)();
    if (String.subscript.getter() == 47 && v23 == 0xE100000000000000)
    {
LABEL_24:
      swift_bridgeObjectRelease();
    }
    else
    {
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v25 & 1) == 0)
      {
        uint64_t v19 = v106;
        unint64_t v21 = v18;
        if (v22 < 0x4000) {
          goto LABEL_36;
        }
        LODWORD(v102) = 63;
        while (1)
        {
          unint64_t v22 = String.index(before:)();
          if (String.subscript.getter() == 47 && v26 == 0xE100000000000000)
          {
            int v12 = v102;
            goto LABEL_24;
          }
          char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v28) {
            break;
          }
          if (v22 < 0x4000)
          {
            uint64_t v19 = v106;
            unint64_t v21 = v18;
            int v12 = v102;
            goto LABEL_36;
          }
        }
        int v12 = v102;
      }
    }
    unint64_t v30 = 4 * v20;
    if (!(v22 >> 14))
    {
      if (String.count.getter() == 1)
      {
        swift_bridgeObjectRelease();
        unint64_t v21 = 0xE100000000000000;
        uint64_t v19 = 47;
        goto LABEL_36;
      }
      if (v30 >= (unint64_t)String.index(after:)() >> 14) {
        goto LABEL_35;
      }
      __break(1u);
LABEL_34:
      if (v30 < (unint64_t)String.index(after:)() >> 14)
      {
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
      }
LABEL_35:
      uint64_t v33 = String.subscript.getter();
      uint64_t v19 = MEMORY[0x185301F50](v33);
      unint64_t v21 = v34;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    if ((String.index(before:)() ^ v22) >= 0x4000) {
      goto LABEL_34;
    }
    uint64_t v99 = v20;
    unint64_t v31 = (unint64_t)String.subscript.getter() >> 14;
    if (v31 == v32 >> 14) {
      goto LABEL_30;
    }
    unint64_t v102 = Substring.index(before:)();
    if (Substring.subscript.getter() == 47 && v74 == 0xE100000000000000)
    {
LABEL_95:
      swift_bridgeObjectRelease();
      goto LABEL_96;
    }
    char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v78)
    {
LABEL_96:
      while (v31 != v102 >> 14)
      {
        unint64_t v102 = Substring.index(before:)();
        if (Substring.subscript.getter() == 47 && v75 == 0xE100000000000000) {
          goto LABEL_95;
        }
        char v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v77 & 1) == 0) {
          goto LABEL_106;
        }
      }
LABEL_30:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v21 = 0xE100000000000000;
      uint64_t v19 = 47;
LABEL_31:
      unint64_t v15 = v105;
      uint64_t v20 = v99;
      goto LABEL_36;
    }
LABEL_106:
    swift_bridgeObjectRelease();
    unint64_t v80 = (unint64_t)String.subscript.getter() >> 14;
    if (v80 == v81 >> 14) {
      goto LABEL_107;
    }
    uint64_t v82 = v79;
    unint64_t v83 = Substring.index(before:)();
    if (Substring.subscript.getter() == 47 && v84 == 0xE100000000000000)
    {
LABEL_111:
      swift_bridgeObjectRelease();
    }
    else
    {
      v98[1] = v82;
      char v85 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v85 & 1) == 0)
      {
        while (v80 != v83 >> 14)
        {
          unint64_t v83 = Substring.index(before:)();
          if (Substring.subscript.getter() == 47 && v94 == 0xE100000000000000) {
            goto LABEL_111;
          }
          char v96 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v96) {
            goto LABEL_113;
          }
        }
LABEL_107:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        String.index(after:)();
LABEL_115:
        uint64_t v86 = String.subscript.getter();
        uint64_t v88 = v87;
        uint64_t v90 = v89;
        uint64_t v92 = v91;
        swift_bridgeObjectRelease();
        uint64_t v19 = MEMORY[0x185301F50](v86, v88, v90, v92);
        unint64_t v21 = v93;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }
    }
LABEL_113:
    swift_bridgeObjectRelease();
    if (v102 >> 14 < (unint64_t)String.index(after:)() >> 14) {
      goto LABEL_130;
    }
    swift_bridgeObjectRetain();
    String.index(after:)();
    goto LABEL_115;
  }
LABEL_36:
  unint64_t v102 = v18;
  if ((v21 & 0x1000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((v21 & 0x2000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(v21) & 0xF;
  }
  else
  {
    Swift::Int isStackAllocationSafe = v19 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v36 = v106;
  uint64_t v37 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
    goto LABEL_125;
  }
  if (v37 < -1)
  {
LABEL_127:
    __break(1u);
    goto LABEL_128;
  }
  uint64_t v38 = v37 + 1;
  if (v37 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    unint64_t v40 = (char *)v98 - v39;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v40, v38, 1, v19, v21);
    char v42 = v41;
    swift_bridgeObjectRelease();
    if (v42) {
      int64_t v43 = 0;
    }
    else {
      int64_t v43 = strnlen(v40, 0x100uLL);
    }
    uint64_t v44 = swift_bridgeObjectRelease();
    unint64_t v15 = v105;
    uint64_t v13 = v36;
    unint64_t v18 = v102;
    if ((v102 & 0x1000000000000000) == 0) {
      goto LABEL_48;
    }
LABEL_61:
    uint64_t v44 = String.UTF8View._foreignCount()();
    uint64_t v20 = v44;
    goto LABEL_48;
  }
  unint64_t v52 = (const char *)swift_slowAlloc();
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v52, v38, 1, v19, v21);
  char v54 = v53;
  swift_bridgeObjectRelease();
  if (v54) {
    int64_t v43 = 0;
  }
  else {
    int64_t v43 = strnlen(v52, 0x100uLL);
  }
  unint64_t v18 = v102;
  MEMORY[0x185309510](v52, -1, -1);
  uint64_t v44 = swift_bridgeObjectRelease();
  uint64_t v13 = v106;
  if ((v102 & 0x1000000000000000) != 0) {
    goto LABEL_61;
  }
LABEL_48:
  uint64_t v45 = 3 * v20;
  if ((unsigned __int128)(v20 * (__int128)3) >> 64 != (3 * v20) >> 63)
  {
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
    goto LABEL_127;
  }
  if (v45 < -1)
  {
LABEL_128:
    __break(1u);
    goto LABEL_129;
  }
  uint64_t v46 = v45 + 1;
  if (v45 < 1024 || (uint64_t v44 = swift_stdlib_isStackAllocationSafe(), (v44 & 1) != 0))
  {
    MEMORY[0x1F4188790](v44);
    uint64_t v48 = (char *)v98 - v47;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v48, v46, 1, v13, v18);
    char v50 = v49;
    swift_bridgeObjectRelease();
    if (v50) {
      int64_t v51 = 0;
    }
    else {
      int64_t v51 = strnlen(v48, 0x401uLL);
    }
  }
  else
  {
    unint64_t v55 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v55, v46, 1, v13, v18);
    char v57 = v56;
    swift_bridgeObjectRelease();
    if (v57) {
      int64_t v51 = 0;
    }
    else {
      int64_t v51 = strnlen(v55, 0x401uLL);
    }
    MEMORY[0x185309510](v55, -1, -1);
  }
  swift_bridgeObjectRelease();
  if (v43 <= 255 && v51 < 1025)
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = v104;
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  unint64_t v29 = v18;
LABEL_67:
  unint64_t v102 = v29;
  switch(v12)
  {
    case 13:
LABEL_70:
      uint64_t v58 = 513;
      goto LABEL_74;
    case 2:
      uint64_t v58 = 4;
      goto LABEL_74;
    case 1:
      goto LABEL_70;
    case 63:
      uint64_t v58 = 514;
      goto LABEL_74;
  }
  uint64_t v58 = 640;
  if (v12 <= 29)
  {
    if (v12 != 17)
    {
      if (v12 == 28) {
        goto LABEL_74;
      }
      goto LABEL_92;
    }
    uint64_t v58 = 516;
  }
  else
  {
    if (v12 == 102)
    {
      id v62 = 0;
      uint64_t v58 = 512;
      goto LABEL_80;
    }
    if (v12 != 69)
    {
      if (v12 == 30)
      {
        uint64_t v58 = 642;
        goto LABEL_74;
      }
LABEL_92:
      uint64_t v58 = 512;
    }
  }
LABEL_74:
  if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
  {
    id v108 = 0;
    unint64_t v109 = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    id v108 = (id)0xD000000000000014;
    unint64_t v109 = 0x80000001823A9780;
    int v107 = v12;
    v97._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v97);
    swift_bridgeObjectRelease();
    unint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
  uint64_t v59 = (int)POSIXErrorCode.rawValue.getter();
  id v60 = objc_allocWithZone((Class)NSError);
  uint64_t v61 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v62 = objc_msgSend(v60, sel_initWithDomain_code_userInfo_, v61, v59, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v63 = objc_msgSend(v62, sel_domain);
  id v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
  uint64_t v66 = v65;

  if (v64 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") || v66 != v67)
  {
    char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v68) {
      goto LABEL_79;
    }
    goto LABEL_126;
  }
  swift_bridgeObjectRelease_n();
LABEL_79:
  unint64_t v15 = v105;
  unint64_t v29 = v102;
LABEL_80:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v69 = v106;
  unint64_t v70 = v29;
  uint64_t v71 = v104;
  specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v58, v13, v70, v62, 2037411651, 0xE400000000000000, v104, v15, (void *(*)(void *__return_ptr, void *, uint64_t))&v108, v106, v18);
  id v72 = v108;
  LOBYTE(v71) = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)(v72, v71, v15, v69, v18, (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtPath_toPath_);

  if (v71)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    unsigned int v11 = 0;
    int v10 = v100;
LABEL_82:
    LOBYTE(v108) = v10 < 0;
    return v11 | ((unint64_t)(v10 < 0) << 32);
  }
  swift_willThrow();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v6;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v26;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  Swift::Int isStackAllocationSafe;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  char v41;
  char v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  char v49;
  char v50;
  int64_t v51;
  const char *v52;
  char v53;
  char v54;
  const char *v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  id v62;
  id v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  id v72;
  unint64_t result;
  uint64_t v74;
  uint64_t v75;
  char v77;
  char v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char v96;
  Swift::String v97;
  void v98[2];
  uint64_t v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  id v108;
  unint64_t v109;
  uint64_t v110;

  uint64_t v110 = *MEMORY[0x1E4F143B8];
  int v10 = open(_:_:)();
  unsigned int v11 = v10;
  if ((v10 & 0x80000000) == 0) {
    goto LABEL_82;
  }
  uint64_t v103 = a6;
  int v100 = v10;
  uint64_t v101 = v6;
  int v12 = MEMORY[0x185301870]();
  uint64_t v13 = a2();
  unint64_t v15 = v14;
  uint64_t v16 = a4();
  unint64_t v18 = v17;
  unint64_t v105 = v15;
  uint64_t v106 = v16;
  uint64_t v104 = v13;
  if (v12 != 63)
  {
    swift_bridgeObjectRetain();
LABEL_22:
    unint64_t v29 = v15;
    goto LABEL_67;
  }
  uint64_t v19 = v16;
  if ((v17 & 0x2000000000000000) != 0) {
    uint64_t v20 = HIBYTE(v17) & 0xF;
  }
  else {
    uint64_t v20 = v16 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unint64_t v21 = v18;
  if (v20)
  {
    unint64_t v22 = String.index(before:)();
    if (String.subscript.getter() == 47 && v23 == 0xE100000000000000)
    {
LABEL_24:
      swift_bridgeObjectRelease();
    }
    else
    {
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v25 & 1) == 0)
      {
        uint64_t v19 = v106;
        unint64_t v21 = v18;
        if (v22 < 0x4000) {
          goto LABEL_36;
        }
        LODWORD(v102) = 63;
        while (1)
        {
          unint64_t v22 = String.index(before:)();
          if (String.subscript.getter() == 47 && v26 == 0xE100000000000000)
          {
            int v12 = v102;
            goto LABEL_24;
          }
          char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v28) {
            break;
          }
          if (v22 < 0x4000)
          {
            uint64_t v19 = v106;
            unint64_t v21 = v18;
            int v12 = v102;
            goto LABEL_36;
          }
        }
        int v12 = v102;
      }
    }
    unint64_t v30 = 4 * v20;
    if (!(v22 >> 14))
    {
      if (String.count.getter() == 1)
      {
        swift_bridgeObjectRelease();
        unint64_t v21 = 0xE100000000000000;
        uint64_t v19 = 47;
        goto LABEL_36;
      }
      if (v30 >= (unint64_t)String.index(after:)() >> 14) {
        goto LABEL_35;
      }
      __break(1u);
LABEL_34:
      if (v30 < (unint64_t)String.index(after:)() >> 14)
      {
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
      }
LABEL_35:
      uint64_t v33 = String.subscript.getter();
      uint64_t v19 = MEMORY[0x185301F50](v33);
      unint64_t v21 = v34;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    if ((String.index(before:)() ^ v22) >= 0x4000) {
      goto LABEL_34;
    }
    uint64_t v99 = v20;
    unint64_t v31 = (unint64_t)String.subscript.getter() >> 14;
    if (v31 == v32 >> 14) {
      goto LABEL_30;
    }
    unint64_t v102 = Substring.index(before:)();
    if (Substring.subscript.getter() == 47 && v74 == 0xE100000000000000)
    {
LABEL_95:
      swift_bridgeObjectRelease();
      goto LABEL_96;
    }
    char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v78)
    {
LABEL_96:
      while (v31 != v102 >> 14)
      {
        unint64_t v102 = Substring.index(before:)();
        if (Substring.subscript.getter() == 47 && v75 == 0xE100000000000000) {
          goto LABEL_95;
        }
        char v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v77 & 1) == 0) {
          goto LABEL_106;
        }
      }
LABEL_30:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v21 = 0xE100000000000000;
      uint64_t v19 = 47;
LABEL_31:
      unint64_t v15 = v105;
      uint64_t v20 = v99;
      goto LABEL_36;
    }
LABEL_106:
    swift_bridgeObjectRelease();
    unint64_t v80 = (unint64_t)String.subscript.getter() >> 14;
    if (v80 == v81 >> 14) {
      goto LABEL_107;
    }
    uint64_t v82 = v79;
    unint64_t v83 = Substring.index(before:)();
    if (Substring.subscript.getter() == 47 && v84 == 0xE100000000000000)
    {
LABEL_111:
      swift_bridgeObjectRelease();
    }
    else
    {
      v98[1] = v82;
      char v85 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v85 & 1) == 0)
      {
        while (v80 != v83 >> 14)
        {
          unint64_t v83 = Substring.index(before:)();
          if (Substring.subscript.getter() == 47 && v94 == 0xE100000000000000) {
            goto LABEL_111;
          }
          char v96 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v96) {
            goto LABEL_113;
          }
        }
LABEL_107:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        String.index(after:)();
LABEL_115:
        uint64_t v86 = String.subscript.getter();
        uint64_t v88 = v87;
        uint64_t v90 = v89;
        uint64_t v92 = v91;
        swift_bridgeObjectRelease();
        uint64_t v19 = MEMORY[0x185301F50](v86, v88, v90, v92);
        unint64_t v21 = v93;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }
    }
LABEL_113:
    swift_bridgeObjectRelease();
    if (v102 >> 14 < (unint64_t)String.index(after:)() >> 14) {
      goto LABEL_130;
    }
    swift_bridgeObjectRetain();
    String.index(after:)();
    goto LABEL_115;
  }
LABEL_36:
  unint64_t v102 = v18;
  if ((v21 & 0x1000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((v21 & 0x2000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(v21) & 0xF;
  }
  else
  {
    Swift::Int isStackAllocationSafe = v19 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v36 = v106;
  uint64_t v37 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
    goto LABEL_125;
  }
  if (v37 < -1)
  {
LABEL_127:
    __break(1u);
    goto LABEL_128;
  }
  uint64_t v38 = v37 + 1;
  if (v37 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    unint64_t v40 = (char *)v98 - v39;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v40, v38, 1, v19, v21);
    char v42 = v41;
    swift_bridgeObjectRelease();
    if (v42) {
      int64_t v43 = 0;
    }
    else {
      int64_t v43 = strnlen(v40, 0x100uLL);
    }
    uint64_t v44 = swift_bridgeObjectRelease();
    unint64_t v15 = v105;
    uint64_t v13 = v36;
    unint64_t v18 = v102;
    if ((v102 & 0x1000000000000000) == 0) {
      goto LABEL_48;
    }
LABEL_61:
    uint64_t v44 = String.UTF8View._foreignCount()();
    uint64_t v20 = v44;
    goto LABEL_48;
  }
  unint64_t v52 = (const char *)swift_slowAlloc();
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v52, v38, 1, v19, v21);
  char v54 = v53;
  swift_bridgeObjectRelease();
  if (v54) {
    int64_t v43 = 0;
  }
  else {
    int64_t v43 = strnlen(v52, 0x100uLL);
  }
  unint64_t v18 = v102;
  MEMORY[0x185309510](v52, -1, -1);
  uint64_t v44 = swift_bridgeObjectRelease();
  uint64_t v13 = v106;
  if ((v102 & 0x1000000000000000) != 0) {
    goto LABEL_61;
  }
LABEL_48:
  uint64_t v45 = 3 * v20;
  if ((unsigned __int128)(v20 * (__int128)3) >> 64 != (3 * v20) >> 63)
  {
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
    goto LABEL_127;
  }
  if (v45 < -1)
  {
LABEL_128:
    __break(1u);
    goto LABEL_129;
  }
  uint64_t v46 = v45 + 1;
  if (v45 < 1024 || (uint64_t v44 = swift_stdlib_isStackAllocationSafe(), (v44 & 1) != 0))
  {
    MEMORY[0x1F4188790](v44);
    uint64_t v48 = (char *)v98 - v47;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v48, v46, 1, v13, v18);
    char v50 = v49;
    swift_bridgeObjectRelease();
    if (v50) {
      int64_t v51 = 0;
    }
    else {
      int64_t v51 = strnlen(v48, 0x401uLL);
    }
  }
  else
  {
    unint64_t v55 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v55, v46, 1, v13, v18);
    char v57 = v56;
    swift_bridgeObjectRelease();
    if (v57) {
      int64_t v51 = 0;
    }
    else {
      int64_t v51 = strnlen(v55, 0x401uLL);
    }
    MEMORY[0x185309510](v55, -1, -1);
  }
  swift_bridgeObjectRelease();
  if (v43 <= 255 && v51 < 1025)
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = v104;
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  unint64_t v29 = v18;
LABEL_67:
  unint64_t v102 = v29;
  switch(v12)
  {
    case 13:
LABEL_70:
      uint64_t v58 = 513;
      goto LABEL_74;
    case 2:
      uint64_t v58 = 4;
      goto LABEL_74;
    case 1:
      goto LABEL_70;
    case 63:
      uint64_t v58 = 514;
      goto LABEL_74;
  }
  uint64_t v58 = 640;
  if (v12 <= 29)
  {
    if (v12 != 17)
    {
      if (v12 == 28) {
        goto LABEL_74;
      }
      goto LABEL_92;
    }
    uint64_t v58 = 516;
  }
  else
  {
    if (v12 == 102)
    {
      id v62 = 0;
      uint64_t v58 = 512;
      goto LABEL_80;
    }
    if (v12 != 69)
    {
      if (v12 == 30)
      {
        uint64_t v58 = 642;
        goto LABEL_74;
      }
LABEL_92:
      uint64_t v58 = 512;
    }
  }
LABEL_74:
  if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
  {
    id v108 = 0;
    unint64_t v109 = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    id v108 = (id)0xD000000000000014;
    unint64_t v109 = 0x80000001823A9780;
    int v107 = v12;
    v97._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v97);
    swift_bridgeObjectRelease();
    unint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
  uint64_t v59 = (int)POSIXErrorCode.rawValue.getter();
  id v60 = objc_allocWithZone((Class)NSError);
  uint64_t v61 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v62 = objc_msgSend(v60, sel_initWithDomain_code_userInfo_, v61, v59, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v63 = objc_msgSend(v62, sel_domain);
  id v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
  uint64_t v66 = v65;

  if (v64 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") || v66 != v67)
  {
    char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v68) {
      goto LABEL_79;
    }
    goto LABEL_126;
  }
  swift_bridgeObjectRelease_n();
LABEL_79:
  unint64_t v15 = v105;
  unint64_t v29 = v102;
LABEL_80:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v69 = v106;
  unint64_t v70 = v29;
  uint64_t v71 = v104;
  specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v58, v13, v70, v62, 1802398028, 0xE400000000000000, v104, v15, (void *(*)(void *__return_ptr, void *, uint64_t))&v108, v106, v18);
  id v72 = v108;
  LOBYTE(v71) = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)(v72, v71, v15, v69, v18, (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtPath_toPath_);

  if (v71)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    unsigned int v11 = 0;
    int v10 = v100;
LABEL_82:
    LOBYTE(v108) = v10 < 0;
    return v11 | ((unint64_t)(v10 < 0) << 32);
  }
  swift_willThrow();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t specialized static _FileOperations._safeCopyDirectoryMetadata<A>(src:dst:delegate:extraFlags:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  uint64_t v140 = a1;
  uint64_t v138 = a2;
  unint64_t result = specialized static _FileOperations._openDirectoryFD<A>(_:srcPath:dstPath:delegate:)(a1, partial apply for implicit closure #1 in static _FileOperations._safeCopyDirectoryMetadata<A>(src:dst:delegate:extraFlags:), (uint64_t)v139, partial apply for implicit closure #2 in static _FileOperations._safeCopyDirectoryMetadata<A>(src:dst:delegate:extraFlags:), (uint64_t)v137, a3);
  if (v4) {
    return result;
  }
  int v10 = result;
  if ((result & 0x100000000) != 0) {
    return result;
  }
  unsigned int v11 = &v123;
  MEMORY[0x1F4188790](result);
  uint64_t v121 = a1;
  MEMORY[0x1F4188790](v12);
  v118[2] = a2;
  unint64_t v14 = specialized static _FileOperations._openDirectoryFD<A>(_:srcPath:dstPath:delegate:)(a2, partial apply for implicit closure #1 in static _FileOperations._safeCopyDirectoryMetadata<A>(src:dst:delegate:extraFlags:), v13, partial apply for implicit closure #1 in static _FileOperations._safeCopyDirectoryMetadata<A>(src:dst:delegate:extraFlags:), (uint64_t)v118, a3);
  uint64_t v15 = v14;
  if ((v14 & 0x100000000) != 0) {
    return close(v10);
  }
  if (a4 < 0) {
    goto LABEL_144;
  }
  if (!fcopyfile(v10, v14, 0, a4 | 0xC0007)) {
    goto LABEL_102;
  }
  LODWORD(v11) = MEMORY[0x185301870]();
  unint64_t v16 = String.init(cString:)();
  unint64_t v18 = v17;
  uint64_t v19 = String.init(cString:)();
  uint64_t v132 = v19;
  unint64_t v133 = v20;
  unint64_t v129 = v18;
  uint64_t v130 = v15;
  unint64_t v131 = v16;
  if (v11 != 63)
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = v16;
    unint64_t v28 = v18;
    goto LABEL_87;
  }
  uint64_t v21 = v19;
  unint64_t v22 = v20;
  LODWORD(v128) = 63;
  if ((v20 & 0x2000000000000000) != 0) {
    uint64_t v23 = HIBYTE(v20) & 0xF;
  }
  else {
    uint64_t v23 = v19 & 0xFFFFFFFFFFFFLL;
  }
  if (((v20 >> 60) & ((v19 & 0x800000000000000) == 0)) != 0) {
    uint64_t v24 = 11;
  }
  else {
    uint64_t v24 = 7;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v15 = v21;
  unint64_t v25 = v22;
  if (!v23)
  {
LABEL_45:
    if ((v25 & 0x1000000000000000) != 0) {
      goto LABEL_41;
    }
    goto LABEL_46;
  }
  uint64_t v127 = v24 | (v23 << 16);
  uint64_t v15 = v132;
  unint64_t v16 = String.index(before:)();
  if (String.subscript.getter() == 47 && v26 == 0xE100000000000000) {
    goto LABEL_16;
  }
  char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v29 & 1) == 0)
  {
    unint64_t v25 = v133;
    if (v16 < 0x4000) {
      goto LABEL_45;
    }
    uint64_t v15 = v132;
    while (1)
    {
      unint64_t v16 = String.index(before:)();
      if (String.subscript.getter() == 47 && v37 == 0xE100000000000000) {
        break;
      }
      char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v39) {
        goto LABEL_19;
      }
      if (v16 < 0x4000)
      {
        unint64_t v25 = v133;
        if ((v133 & 0x1000000000000000) != 0) {
          goto LABEL_41;
        }
        goto LABEL_46;
      }
    }
LABEL_16:
    swift_bridgeObjectRelease();
  }
LABEL_19:
  unsigned int v11 = (unint64_t *)(4 * v23);
  if (!(v16 >> 14))
  {
    if (String.count.getter() == 1)
    {
      swift_bridgeObjectRelease();
      unint64_t v25 = 0xE100000000000000;
      uint64_t v15 = 47;
      goto LABEL_46;
    }
    if ((unint64_t)v11 >= (unint64_t)String.index(after:)() >> 14)
    {
LABEL_40:
      uint64_t v40 = String.subscript.getter();
      unint64_t v16 = v41;
      uint64_t v15 = MEMORY[0x185301F50](v40);
      unint64_t v25 = v42;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v25 & 0x1000000000000000) != 0) {
        goto LABEL_41;
      }
      goto LABEL_46;
    }
    __break(1u);
    goto LABEL_39;
  }
  if ((String.index(before:)() ^ v16) >= 0x4000)
  {
LABEL_39:
    if ((unint64_t)v11 >= (unint64_t)String.index(after:)() >> 14) {
      goto LABEL_40;
    }
    __break(1u);
    goto LABEL_143;
  }
  uint64_t v125 = v23;
  unint64_t v30 = String.subscript.getter();
  unint64_t v126 = v32;
  uint64_t v127 = v33;
  unint64_t v34 = v30 >> 14;
  if (v30 >> 14 == v31 >> 14) {
    goto LABEL_44;
  }
  unint64_t v16 = v31;
  unint64_t v35 = Substring.index(before:)();
  if (Substring.subscript.getter() == 47 && v36 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v44 & 1) == 0) {
      goto LABEL_116;
    }
  }
  if (v34 == v35 >> 14)
  {
LABEL_44:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v25 = 0xE100000000000000;
    uint64_t v15 = 47;
    uint64_t v23 = v125;
    goto LABEL_45;
  }
  while (1)
  {
    unint64_t v52 = Substring.index(before:)();
    if (Substring.subscript.getter() != 47 || v53 != 0xE100000000000000) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_58:
    if (v34 == v52 >> 14) {
      goto LABEL_44;
    }
  }
  char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v55) {
    goto LABEL_58;
  }
  unint64_t v35 = v52;
LABEL_116:
  swift_bridgeObjectRelease();
  unint64_t v124 = v35;
  unint64_t v93 = String.subscript.getter();
  unint64_t v126 = v94;
  uint64_t v127 = v93;
  unint64_t v123 = v93 >> 14;
  if (v93 >> 14 == v95 >> 14)
  {
LABEL_117:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.index(after:)();
    uint64_t v96 = String.subscript.getter();
    uint64_t v98 = v97;
    uint64_t v100 = v99;
    unint64_t v16 = v101;
    swift_bridgeObjectRelease();
    uint64_t v15 = MEMORY[0x185301F50](v96, v98, v100, v16);
    unint64_t v25 = v102;
    goto LABEL_134;
  }
  unint64_t v103 = Substring.index(before:)();
  if (Substring.subscript.getter() == 47 && v104 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v105 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v105 & 1) == 0)
    {
      if (v123 == v103 >> 14) {
        goto LABEL_117;
      }
      while (1)
      {
        unint64_t v106 = Substring.index(before:)();
        if (Substring.subscript.getter() == 47 && v107 == 0xE100000000000000) {
          break;
        }
        char v109 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v109) {
          goto LABEL_131;
        }
        if (v123 == v106 >> 14) {
          goto LABEL_117;
        }
      }
      swift_bridgeObjectRelease();
    }
LABEL_131:
    swift_bridgeObjectRelease();
  }
  LODWORD(v11) = v133;
  if (v124 >> 14 < (unint64_t)String.index(after:)() >> 14)
  {
LABEL_143:
    __break(1u);
LABEL_144:
    LODWORD(v121) = 0;
    uint64_t v120 = 3451;
    char v119 = 2;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_145:
    id v135 = 0;
    unint64_t v136 = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    id v135 = (id)0xD000000000000014;
    unint64_t v136 = 0x80000001823A9780;
    int v134 = (int)v11;
    v117._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v117);
    swift_bridgeObjectRelease();
    LODWORD(v122) = 0;
    uint64_t v121 = 73;
    unint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
  String.index(after:)();
  uint64_t v110 = String.subscript.getter();
  uint64_t v112 = v111;
  uint64_t v114 = v113;
  unint64_t v16 = v115;
  swift_bridgeObjectRelease();
  uint64_t v15 = MEMORY[0x185301F50](v110, v112, v114, v16);
  unint64_t v25 = v116;
LABEL_134:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = v125;
  if ((v25 & 0x1000000000000000) != 0)
  {
LABEL_41:
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
    goto LABEL_49;
  }
LABEL_46:
  if ((v25 & 0x2000000000000000) != 0) {
    Swift::Int isStackAllocationSafe = HIBYTE(v25) & 0xF;
  }
  else {
    Swift::Int isStackAllocationSafe = v15 & 0xFFFFFFFFFFFFLL;
  }
LABEL_49:
  uint64_t v45 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
    goto LABEL_137;
  }
  if (v45 < -1)
  {
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
  }
  uint64_t v46 = v45 + 1;
  if (v45 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v48 = (char *)&v123 - v47;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v48, v46, 1, v15, v25);
    char v50 = v49;
    swift_bridgeObjectRelease();
    if (v50) {
      unint64_t v16 = 0;
    }
    else {
      unint64_t v16 = strnlen(v48, 0x100uLL);
    }
    LODWORD(v15) = v130;
    unint64_t v51 = v133;
  }
  else
  {
    char v56 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v56, v46, 1, v15, v25);
    char v58 = v57;
    swift_bridgeObjectRelease();
    if (v58) {
      unint64_t v16 = 0;
    }
    else {
      unint64_t v16 = strnlen(v56, 0x100uLL);
    }
    LODWORD(v15) = v130;
    MEMORY[0x185309510](v56, -1, -1);
    unint64_t v51 = v133;
  }
  uint64_t v59 = swift_bridgeObjectRelease();
  if ((v51 & 0x1000000000000000) != 0)
  {
LABEL_137:
    uint64_t v59 = String.UTF8View._foreignCount()();
    uint64_t v23 = v59;
  }
  uint64_t v60 = 3 * v23;
  if ((unsigned __int128)(v23 * (__int128)3) >> 64 != (3 * v23) >> 63)
  {
    __break(1u);
LABEL_139:
    __break(1u);
    goto LABEL_140;
  }
  unint64_t v18 = v129;
  if (v60 < -1) {
    goto LABEL_141;
  }
  uint64_t v127 = v16;
  uint64_t v61 = v60 + 1;
  if (v60 < 1024 || (uint64_t v59 = swift_stdlib_isStackAllocationSafe(), (v59 & 1) != 0))
  {
    MEMORY[0x1F4188790](v59);
    id v63 = (char *)&v123 - v62;
    unint64_t v64 = v133;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v63, v61, 1, v132, v64);
    char v66 = v65;
    swift_bridgeObjectRelease();
    if (v66) {
      int64_t v67 = 0;
    }
    else {
      int64_t v67 = strnlen(v63, 0x401uLL);
    }
    uint64_t v68 = v131;
  }
  else
  {
    uint64_t v69 = (const char *)swift_slowAlloc();
    unint64_t v70 = v133;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v69, v61, 1, v132, v70);
    char v72 = v71;
    swift_bridgeObjectRelease();
    uint64_t v68 = v131;
    if (v72) {
      int64_t v67 = 0;
    }
    else {
      int64_t v67 = strnlen(v69, 0x401uLL);
    }
    MEMORY[0x185309510](v69, -1, -1);
  }
  unint64_t v73 = v133;
  swift_bridgeObjectRelease();
  if (v127 <= 255 && v67 < 1025)
  {
    swift_bridgeObjectRelease();
    uint64_t v27 = v68;
    unint64_t v28 = v18;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v27 = v132;
    unint64_t v28 = v73;
  }
  LODWORD(v11) = v128;
LABEL_87:
  unint64_t v126 = v28;
  uint64_t v127 = v27;
  switch(v11)
  {
    case 0xD:
LABEL_90:
      uint64_t v74 = 513;
      goto LABEL_94;
    case 2:
      uint64_t v74 = 4;
      goto LABEL_94;
    case 1:
      goto LABEL_90;
    case 0x3F:
      uint64_t v74 = 514;
      goto LABEL_94;
  }
  uint64_t v74 = 640;
  if ((int)v11 <= 29)
  {
    if (v11 == 17)
    {
      uint64_t v74 = 516;
    }
    else if (v11 != 28)
    {
      goto LABEL_113;
    }
LABEL_94:
    uint64_t v128 = v74;
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
      goto LABEL_145;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
    uint64_t v75 = (int)POSIXErrorCode.rawValue.getter();
    id v76 = objc_allocWithZone((Class)NSError);
    uint64_t v77 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v78 = objc_msgSend(v76, sel_initWithDomain_code_userInfo_, v77, v75, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v79 = objc_msgSend(v78, sel_domain);
    id v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
    uint64_t v82 = v81;

    if (v80 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v82 == v83)
    {
      swift_bridgeObjectRelease_n();
      unint64_t v18 = v129;
      LODWORD(v15) = v130;
LABEL_99:
      id v85 = v78;
      unint64_t v28 = v126;
      uint64_t v27 = v127;
      goto LABEL_100;
    }
    char v84 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v18 = v129;
    LODWORD(v15) = v130;
    if (v84) {
      goto LABEL_99;
    }
    goto LABEL_139;
  }
  if (v11 != 102)
  {
    if (v11 == 69) {
      goto LABEL_94;
    }
    if (v11 == 30)
    {
      uint64_t v74 = 642;
      goto LABEL_94;
    }
LABEL_113:
    uint64_t v74 = 512;
    goto LABEL_94;
  }
  id v85 = 0;
  uint64_t v128 = 512;
LABEL_100:
  swift_bridgeObjectRetain();
  unint64_t v86 = v133;
  swift_bridgeObjectRetain();
  unint64_t v87 = v18;
  uint64_t v88 = v132;
  uint64_t v89 = v85;
  uint64_t v90 = v131;
  specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v128, v27, v28, v89, 2037411651, 0xE400000000000000, v131, v87, (void *(*)(void *__return_ptr, void *, uint64_t))&v135, v132, v86);
  id v91 = v135;
  unsigned __int8 v92 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)(v91, v90, v87, v88, v86, (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtPath_toPath_);

  if (v92)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

LABEL_102:
    close(v15);
    return close(v10);
  }
  else
  {
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    close(v15);
    return close(v10);
  }
}

{
  uint64_t v4;
  unint64_t result;
  int v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  Swift::Int isStackAllocationSafe;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  char v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char v55;
  const char *v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  unint64_t v64;
  char v65;
  char v66;
  int64_t v67;
  uint64_t v68;
  const char *v69;
  unint64_t v70;
  char v71;
  char v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  id v78;
  id v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  id v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  id v91;
  unsigned __int8 v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char v105;
  unint64_t v106;
  uint64_t v107;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  Swift::String v117;
  void v118[4];
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  int v134;
  id v135;
  unint64_t v136;
  char v137[16];
  uint64_t v138;
  char v139[16];
  uint64_t v140;
  uint64_t v141;

  uint64_t v141 = *MEMORY[0x1E4F143B8];
  uint64_t v140 = a1;
  uint64_t v138 = a2;
  unint64_t result = specialized static _FileOperations._openDirectoryFD<A>(_:srcPath:dstPath:delegate:)(a1, partial apply for implicit closure #1 in static _FileOperations._safeCopyDirectoryMetadata<A>(src:dst:delegate:extraFlags:), (uint64_t)v139, partial apply for implicit closure #1 in static _FileOperations._safeCopyDirectoryMetadata<A>(src:dst:delegate:extraFlags:), (uint64_t)v137, a3);
  if (v4) {
    return result;
  }
  int v10 = result;
  if ((result & 0x100000000) != 0) {
    return result;
  }
  unsigned int v11 = &v123;
  MEMORY[0x1F4188790](result);
  uint64_t v121 = a1;
  MEMORY[0x1F4188790](v12);
  v118[2] = a2;
  unint64_t v14 = specialized static _FileOperations._openDirectoryFD<A>(_:srcPath:dstPath:delegate:)(a2, partial apply for implicit closure #1 in static _FileOperations._safeCopyDirectoryMetadata<A>(src:dst:delegate:extraFlags:), v13, partial apply for implicit closure #1 in static _FileOperations._safeCopyDirectoryMetadata<A>(src:dst:delegate:extraFlags:), (uint64_t)v118, a3);
  uint64_t v15 = v14;
  if ((v14 & 0x100000000) != 0) {
    return close(v10);
  }
  if (a4 < 0) {
    goto LABEL_144;
  }
  if (!fcopyfile(v10, v14, 0, a4 | 0xC0007)) {
    goto LABEL_102;
  }
  LODWORD(v11) = MEMORY[0x185301870]();
  unint64_t v16 = String.init(cString:)();
  unint64_t v18 = v17;
  uint64_t v19 = String.init(cString:)();
  uint64_t v132 = v19;
  unint64_t v133 = v20;
  unint64_t v129 = v18;
  uint64_t v130 = v15;
  unint64_t v131 = v16;
  if (v11 != 63)
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = v16;
    unint64_t v28 = v18;
    goto LABEL_87;
  }
  uint64_t v21 = v19;
  unint64_t v22 = v20;
  LODWORD(v128) = 63;
  if ((v20 & 0x2000000000000000) != 0) {
    uint64_t v23 = HIBYTE(v20) & 0xF;
  }
  else {
    uint64_t v23 = v19 & 0xFFFFFFFFFFFFLL;
  }
  if (((v20 >> 60) & ((v19 & 0x800000000000000) == 0)) != 0) {
    uint64_t v24 = 11;
  }
  else {
    uint64_t v24 = 7;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v15 = v21;
  unint64_t v25 = v22;
  if (!v23)
  {
LABEL_45:
    if ((v25 & 0x1000000000000000) != 0) {
      goto LABEL_41;
    }
    goto LABEL_46;
  }
  uint64_t v127 = v24 | (v23 << 16);
  uint64_t v15 = v132;
  unint64_t v16 = String.index(before:)();
  if (String.subscript.getter() == 47 && v26 == 0xE100000000000000) {
    goto LABEL_16;
  }
  char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v29 & 1) == 0)
  {
    unint64_t v25 = v133;
    if (v16 < 0x4000) {
      goto LABEL_45;
    }
    uint64_t v15 = v132;
    while (1)
    {
      unint64_t v16 = String.index(before:)();
      if (String.subscript.getter() == 47 && v37 == 0xE100000000000000) {
        break;
      }
      char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v39) {
        goto LABEL_19;
      }
      if (v16 < 0x4000)
      {
        unint64_t v25 = v133;
        if ((v133 & 0x1000000000000000) != 0) {
          goto LABEL_41;
        }
        goto LABEL_46;
      }
    }
LABEL_16:
    swift_bridgeObjectRelease();
  }
LABEL_19:
  unsigned int v11 = (unint64_t *)(4 * v23);
  if (!(v16 >> 14))
  {
    if (String.count.getter() == 1)
    {
      swift_bridgeObjectRelease();
      unint64_t v25 = 0xE100000000000000;
      uint64_t v15 = 47;
      goto LABEL_46;
    }
    if ((unint64_t)v11 >= (unint64_t)String.index(after:)() >> 14)
    {
LABEL_40:
      uint64_t v40 = String.subscript.getter();
      unint64_t v16 = v41;
      uint64_t v15 = MEMORY[0x185301F50](v40);
      unint64_t v25 = v42;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v25 & 0x1000000000000000) != 0) {
        goto LABEL_41;
      }
      goto LABEL_46;
    }
    __break(1u);
    goto LABEL_39;
  }
  if ((String.index(before:)() ^ v16) >= 0x4000)
  {
LABEL_39:
    if ((unint64_t)v11 >= (unint64_t)String.index(after:)() >> 14) {
      goto LABEL_40;
    }
    __break(1u);
    goto LABEL_143;
  }
  uint64_t v125 = v23;
  unint64_t v30 = String.subscript.getter();
  unint64_t v126 = v32;
  uint64_t v127 = v33;
  unint64_t v34 = v30 >> 14;
  if (v30 >> 14 == v31 >> 14) {
    goto LABEL_44;
  }
  unint64_t v16 = v31;
  unint64_t v35 = Substring.index(before:)();
  if (Substring.subscript.getter() == 47 && v36 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v44 & 1) == 0) {
      goto LABEL_116;
    }
  }
  if (v34 == v35 >> 14)
  {
LABEL_44:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v25 = 0xE100000000000000;
    uint64_t v15 = 47;
    uint64_t v23 = v125;
    goto LABEL_45;
  }
  while (1)
  {
    unint64_t v52 = Substring.index(before:)();
    if (Substring.subscript.getter() != 47 || v53 != 0xE100000000000000) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_58:
    if (v34 == v52 >> 14) {
      goto LABEL_44;
    }
  }
  char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v55) {
    goto LABEL_58;
  }
  unint64_t v35 = v52;
LABEL_116:
  swift_bridgeObjectRelease();
  unint64_t v124 = v35;
  unint64_t v93 = String.subscript.getter();
  unint64_t v126 = v94;
  uint64_t v127 = v93;
  unint64_t v123 = v93 >> 14;
  if (v93 >> 14 == v95 >> 14)
  {
LABEL_117:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.index(after:)();
    uint64_t v96 = String.subscript.getter();
    uint64_t v98 = v97;
    uint64_t v100 = v99;
    unint64_t v16 = v101;
    swift_bridgeObjectRelease();
    uint64_t v15 = MEMORY[0x185301F50](v96, v98, v100, v16);
    unint64_t v25 = v102;
    goto LABEL_134;
  }
  unint64_t v103 = Substring.index(before:)();
  if (Substring.subscript.getter() == 47 && v104 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v105 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v105 & 1) == 0)
    {
      if (v123 == v103 >> 14) {
        goto LABEL_117;
      }
      while (1)
      {
        unint64_t v106 = Substring.index(before:)();
        if (Substring.subscript.getter() == 47 && v107 == 0xE100000000000000) {
          break;
        }
        char v109 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v109) {
          goto LABEL_131;
        }
        if (v123 == v106 >> 14) {
          goto LABEL_117;
        }
      }
      swift_bridgeObjectRelease();
    }
LABEL_131:
    swift_bridgeObjectRelease();
  }
  LODWORD(v11) = v133;
  if (v124 >> 14 < (unint64_t)String.index(after:)() >> 14)
  {
LABEL_143:
    __break(1u);
LABEL_144:
    LODWORD(v121) = 0;
    uint64_t v120 = 3451;
    char v119 = 2;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_145:
    id v135 = 0;
    unint64_t v136 = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    id v135 = (id)0xD000000000000014;
    unint64_t v136 = 0x80000001823A9780;
    int v134 = (int)v11;
    v117._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v117);
    swift_bridgeObjectRelease();
    LODWORD(v122) = 0;
    uint64_t v121 = 73;
    unint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
  String.index(after:)();
  uint64_t v110 = String.subscript.getter();
  uint64_t v112 = v111;
  uint64_t v114 = v113;
  unint64_t v16 = v115;
  swift_bridgeObjectRelease();
  uint64_t v15 = MEMORY[0x185301F50](v110, v112, v114, v16);
  unint64_t v25 = v116;
LABEL_134:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = v125;
  if ((v25 & 0x1000000000000000) != 0)
  {
LABEL_41:
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
    goto LABEL_49;
  }
LABEL_46:
  if ((v25 & 0x2000000000000000) != 0) {
    Swift::Int isStackAllocationSafe = HIBYTE(v25) & 0xF;
  }
  else {
    Swift::Int isStackAllocationSafe = v15 & 0xFFFFFFFFFFFFLL;
  }
LABEL_49:
  uint64_t v45 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
    goto LABEL_137;
  }
  if (v45 < -1)
  {
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
  }
  uint64_t v46 = v45 + 1;
  if (v45 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v48 = (char *)&v123 - v47;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v48, v46, 1, v15, v25);
    char v50 = v49;
    swift_bridgeObjectRelease();
    if (v50) {
      unint64_t v16 = 0;
    }
    else {
      unint64_t v16 = strnlen(v48, 0x100uLL);
    }
    LODWORD(v15) = v130;
    unint64_t v51 = v133;
  }
  else
  {
    char v56 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v56, v46, 1, v15, v25);
    char v58 = v57;
    swift_bridgeObjectRelease();
    if (v58) {
      unint64_t v16 = 0;
    }
    else {
      unint64_t v16 = strnlen(v56, 0x100uLL);
    }
    LODWORD(v15) = v130;
    MEMORY[0x185309510](v56, -1, -1);
    unint64_t v51 = v133;
  }
  uint64_t v59 = swift_bridgeObjectRelease();
  if ((v51 & 0x1000000000000000) != 0)
  {
LABEL_137:
    uint64_t v59 = String.UTF8View._foreignCount()();
    uint64_t v23 = v59;
  }
  uint64_t v60 = 3 * v23;
  if ((unsigned __int128)(v23 * (__int128)3) >> 64 != (3 * v23) >> 63)
  {
    __break(1u);
LABEL_139:
    __break(1u);
    goto LABEL_140;
  }
  unint64_t v18 = v129;
  if (v60 < -1) {
    goto LABEL_141;
  }
  uint64_t v127 = v16;
  uint64_t v61 = v60 + 1;
  if (v60 < 1024 || (uint64_t v59 = swift_stdlib_isStackAllocationSafe(), (v59 & 1) != 0))
  {
    MEMORY[0x1F4188790](v59);
    id v63 = (char *)&v123 - v62;
    unint64_t v64 = v133;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v63, v61, 1, v132, v64);
    char v66 = v65;
    swift_bridgeObjectRelease();
    if (v66) {
      int64_t v67 = 0;
    }
    else {
      int64_t v67 = strnlen(v63, 0x401uLL);
    }
    uint64_t v68 = v131;
  }
  else
  {
    uint64_t v69 = (const char *)swift_slowAlloc();
    unint64_t v70 = v133;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v69, v61, 1, v132, v70);
    char v72 = v71;
    swift_bridgeObjectRelease();
    uint64_t v68 = v131;
    if (v72) {
      int64_t v67 = 0;
    }
    else {
      int64_t v67 = strnlen(v69, 0x401uLL);
    }
    MEMORY[0x185309510](v69, -1, -1);
  }
  unint64_t v73 = v133;
  swift_bridgeObjectRelease();
  if (v127 <= 255 && v67 < 1025)
  {
    swift_bridgeObjectRelease();
    uint64_t v27 = v68;
    unint64_t v28 = v18;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v27 = v132;
    unint64_t v28 = v73;
  }
  LODWORD(v11) = v128;
LABEL_87:
  unint64_t v126 = v28;
  uint64_t v127 = v27;
  switch(v11)
  {
    case 0xD:
LABEL_90:
      uint64_t v74 = 513;
      goto LABEL_94;
    case 2:
      uint64_t v74 = 4;
      goto LABEL_94;
    case 1:
      goto LABEL_90;
    case 0x3F:
      uint64_t v74 = 514;
      goto LABEL_94;
  }
  uint64_t v74 = 640;
  if ((int)v11 <= 29)
  {
    if (v11 == 17)
    {
      uint64_t v74 = 516;
    }
    else if (v11 != 28)
    {
      goto LABEL_113;
    }
LABEL_94:
    uint64_t v128 = v74;
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
      goto LABEL_145;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
    uint64_t v75 = (int)POSIXErrorCode.rawValue.getter();
    id v76 = objc_allocWithZone((Class)NSError);
    uint64_t v77 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v78 = objc_msgSend(v76, sel_initWithDomain_code_userInfo_, v77, v75, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v79 = objc_msgSend(v78, sel_domain);
    id v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
    uint64_t v82 = v81;

    if (v80 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v82 == v83)
    {
      swift_bridgeObjectRelease_n();
      unint64_t v18 = v129;
      LODWORD(v15) = v130;
LABEL_99:
      id v85 = v78;
      unint64_t v28 = v126;
      uint64_t v27 = v127;
      goto LABEL_100;
    }
    char v84 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v18 = v129;
    LODWORD(v15) = v130;
    if (v84) {
      goto LABEL_99;
    }
    goto LABEL_139;
  }
  if (v11 != 102)
  {
    if (v11 == 69) {
      goto LABEL_94;
    }
    if (v11 == 30)
    {
      uint64_t v74 = 642;
      goto LABEL_94;
    }
LABEL_113:
    uint64_t v74 = 512;
    goto LABEL_94;
  }
  id v85 = 0;
  uint64_t v128 = 512;
LABEL_100:
  swift_bridgeObjectRetain();
  unint64_t v86 = v133;
  swift_bridgeObjectRetain();
  unint64_t v87 = v18;
  uint64_t v88 = v132;
  uint64_t v89 = v85;
  uint64_t v90 = v131;
  specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v128, v27, v28, v89, 1802398028, 0xE400000000000000, v131, v87, (void *(*)(void *__return_ptr, void *, uint64_t))&v135, v132, v86);
  id v91 = v135;
  unsigned __int8 v92 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)(v91, v90, v87, v88, v86, (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtPath_toPath_);

  if (v92)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

LABEL_102:
    close(v15);
    return close(v10);
  }
  else
  {
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    close(v15);
    return close(v10);
  }
}

uint64_t partial apply for implicit closure #2 in static _FileOperations._safeCopyDirectoryMetadata<A>(src:dst:delegate:extraFlags:)()
{
  return String.init(cString:)();
}

uint64_t specialized static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)(const char *a1, char *a2, char a3, void *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if (isStackAllocationSafe)
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t result = specialized closure #1 in static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)(&v12, 1026, a2, a1, a3 & 1, a4);
    if (v4) {
      return swift_willThrow();
    }
  }
  else
  {
    unsigned int v11 = (char *)swift_slowAlloc();
    specialized closure #1 in static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)(v11, 1026, a2, a1, a3 & 1, a4);
    return MEMORY[0x185309510](v11, -1, -1);
  }
  return result;
}

__n128 AttributedString.SingleAttributeTransformer.range.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 32);
  long long v4 = *(_OWORD *)(v1 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

__n128 AttributedString.SingleAttributeTransformer.range.setter(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(v1 + 32) = result;
  *(_OWORD *)(v1 + 48) = v4;
  return result;
}

uint64_t (*AttributedString.SingleAttributeTransformer.range.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AttributedString.SingleAttributeTransformer.value.getter@<X0>(uint64_t a1@<X8>)
{
  outlined init with copy of AttributedString._AttributeValue?(v1 + 80, (uint64_t)v7);
  if (v8)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v7, (uint64_t)&v6);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v7);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(a1, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v5 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a1, 1, 1, v5);
  }
}

uint64_t outlined init with copy of AttributedString._AttributeValue?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t AttributedString.SingleAttributeTransformer.value.setter(uint64_t a1, uint64_t a2)
{
  specialized AttributedString.SingleAttributeTransformer.value.setter(a1, a2);
  swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(a1, v3);
}

void (*AttributedString.SingleAttributeTransformer.value.modify(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0xA0uLL);
  *a1 = v5;
  v5[14] = a2;
  v5[15] = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  v5[16] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[17] = v8;
  size_t v9 = *(void *)(v8 + 64);
  v5[18] = malloc(v9);
  int v10 = malloc(v9);
  v5[19] = v10;
  outlined init with copy of AttributedString._AttributeValue?(v2 + 80, (uint64_t)v5);
  if (v5[3])
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v5, (uint64_t)(v5 + 9));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v5);
    uint64_t v11 = 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v11 = 1;
  }
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v10, v11, 1, AssociatedTypeWitness);
  return AttributedString.SingleAttributeTransformer.value.modify;
}

void AttributedString.SingleAttributeTransformer.value.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 144);
  uint64_t v4 = *(void **)(*(void *)a1 + 152);
  uint64_t v5 = *(void *)(*(void *)a1 + 128);
  uint64_t v6 = *(void *)(*(void *)a1 + 136);
  uint64_t v7 = *(void *)(*(void *)a1 + 112);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 144), v4, v5);
    specialized AttributedString.SingleAttributeTransformer.value.setter((uint64_t)v3, v7);
    uint64_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    specialized AttributedString.SingleAttributeTransformer.value.setter(*(void *)(*(void *)a1 + 152), v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t AttributedString.SingleAttributeTransformer.replace<A>(with:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  double v12 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v14 = (char *)&v22 - v13;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, double))(a5 + 24))(a4, a5, v12);
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  *(void *)(v6 + 64) = v15;
  *(void *)(v6 + 72) = v17;
  unint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v18(v14, a2, AssociatedTypeWitness);
  *((void *)&v24 + 1) = AssociatedTypeWitness;
  *(void *)unint64_t v25 = swift_getAssociatedConformanceWitness();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v23);
  v18((char *)boxed_opaque_existential_1, (uint64_t)v14, AssociatedTypeWitness);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(a5 + 32))(v26, a4, a5);
  *(_OWORD *)&v25[8] = v26[0];
  v25[24] = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 40))(a4, a5) & 1;
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 48))(a4, a5);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  uint64_t v27 = v20;
  v26[2] = *(_OWORD *)v25;
  v26[3] = *(_OWORD *)&v25[16];
  v26[0] = v23;
  v26[1] = v24;
  return outlined assign with take of AttributedString._AttributeValue?((uint64_t)v26, v6 + 80);
}

uint64_t AttributedString.SingleAttributeTransformer.replace<A>(with:value:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AttributedString.SingleAttributeTransformer.replace<A>(with:value:)(*(void *)(*MEMORY[0x1E4FBC5F0] + *a1 + 8), a2, a3, *(void *)(*MEMORY[0x1E4FBC5F0] + *a1 + 8), a4);
}

uint64_t AttributedString.applyRemovals<A>(withOriginal:andChanged:to:key:)(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (static BigString.Index.== infix(_:_:)()) {
    char v8 = static BigString.Index.== infix(_:_:)();
  }
  else {
    char v8 = 0;
  }
  uint64_t v9 = type metadata accessor for AttributedString.SingleAttributeTransformer();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(unsigned char *, _OWORD *, uint64_t))(v10 + 16);
  v11(v24, a1, v9);
  v11(v21, a2, v9);
  if ((v8 & 1) == 0)
  {
    unint64_t v14 = *(void (**)(unsigned char *, uint64_t))(v10 + 8);
    v14(v24, v9);
    v14(v21, v9);
LABEL_10:
    long long v17 = a1[1];
    v27[0] = *a1;
    v27[1] = v17;
    long long v18 = a1[3];
    v27[2] = a1[2];
    v27[3] = v18;
    return AttributedString.Guts.removeAttributeValue<A>(forKey:in:)(a5, (uint64_t)v27, a5, a6);
  }
  if (v25 == v22 && v26 == v23)
  {
    double v12 = *(void (**)(unsigned char *, uint64_t))(v10 + 8);
    v12(v24, v9);
    return ((uint64_t (*)(unsigned char *, uint64_t))v12)(v21, v9);
  }
  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v16 = *(void (**)(unsigned char *, uint64_t))(v10 + 8);
  v16(v24, v9);
  uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))v16)(v21, v9);
  if ((v15 & 1) == 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t AttributedString.applyChanges<A>(withOriginal:andChanged:to:key:)(uint64_t a1, long long *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  unint64_t v31 = a3;
  uint64_t v30 = *(void *)(a1 + 32);
  if (static BigString.Index.== infix(_:_:)()) {
    char v8 = static BigString.Index.== infix(_:_:)();
  }
  else {
    char v8 = 0;
  }
  uint64_t v9 = type metadata accessor for AttributedString.SingleAttributeTransformer();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16);
  v11(v59, a1, v9);
  v11(v58, (uint64_t)a2, v9);
  if (v8)
  {
    if (v59[8] == v58[8] && v59[9] == v58[9]) {
      char v12 = 0;
    }
    else {
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
    }
  }
  else
  {
    char v12 = 1;
  }
  uint64_t v13 = *(void (**)(unsigned char *, uint64_t))(v10 + 8);
  v13(v59, v9);
  v13(v58, v9);
  v11(v56, a1, v9);
  v11(v54, (uint64_t)a2, v9);
  if (v12)
  {
    v13(v54, v9);
    v13(v56, v9);
  }
  else
  {
    outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v57, (uint64_t)&v44);
    outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v55, (uint64_t)&v49);
    if (*((void *)&v45 + 1))
    {
      outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v44, (uint64_t)&v39);
      if (*((void *)&v50 + 1))
      {
        long long v36 = v51;
        long long v37 = v52;
        uint64_t v38 = v53;
        long long v34 = v49;
        long long v35 = v50;
        char v14 = specialized static AttributedString._AttributeValue.== infix(_:_:)((uint64_t)&v39, (uint64_t)&v34);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v34);
        v13(v54, v9);
        v13(v56, v9);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v39);
        uint64_t result = outlined destroy of Any?((uint64_t)&v44, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        if (v14) {
          return result;
        }
        goto LABEL_20;
      }
      v13(v54, v9);
      v13(v56, v9);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v39);
    }
    else
    {
      v13(v54, v9);
      v13(v56, v9);
      if (!*((void *)&v50 + 1)) {
        return outlined destroy of Any?((uint64_t)&v44, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      }
    }
    outlined destroy of Any?((uint64_t)&v44, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
  }
LABEL_20:
  outlined init with copy of AttributedString._AttributeValue?((uint64_t)(a2 + 5), (uint64_t)&v39);
  if (*((void *)&v40 + 1))
  {
    long long v46 = v41;
    long long v47 = v42;
    uint64_t v48 = v43;
    long long v44 = v39;
    long long v45 = v40;
    uint64_t v16 = *v31;
    uint64_t v17 = *((void *)a2 + 8);
    uint64_t v32 = *((void *)a2 + 9);
    uint64_t v33 = v17;
    long long v18 = (uint64_t *)*((void *)a2 + 4);
    uint64_t v30 = *((void *)a2 + 5);
    unint64_t v31 = v18;
    long long v19 = *(_OWORD *)(v16 + 16);
    long long v20 = *(_OWORD *)(v16 + 48);
    long long v40 = *(_OWORD *)(v16 + 32);
    long long v41 = v20;
    long long v39 = v19;
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v60);
    long long v21 = *(_OWORD *)(v16 + 32);
    long long v34 = *(_OWORD *)(v16 + 16);
    long long v35 = v21;
    long long v36 = *(_OWORD *)(v16 + 48);
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v61);
    uint64_t v22 = BigString.Index.utf8Offset.getter();
    uint64_t v23 = BigString.Index.utf8Offset.getter();
    MEMORY[0x1F4188790](v23);
    v29[2] = v33;
    v29[3] = v32;
    v29[4] = &v44;
    swift_retain();
    AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)partial apply for closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:), (uint64_t)v29, (void *)v16, v22, v23);
    swift_release();
    uint64_t v24 = v47;
    if ((void)v47 != 1)
    {
      uint64_t v25 = *((void *)&v46 + 1);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
      uint64_t v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = xmmword_1821037E0;
      *(void *)(v26 + 32) = v25;
      *(void *)(v26 + 40) = v24;
      swift_bridgeObjectRetain();
      AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v22, v23, 0, v26);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
    }
    return outlined destroy of AttributedString._AttributeValue((uint64_t)&v44);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v39, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    long long v27 = a2[1];
    long long v44 = *a2;
    long long v45 = v27;
    long long v28 = a2[3];
    long long v46 = a2[2];
    long long v47 = v28;
    return AttributedString.Guts.removeAttributeValue<A>(forKey:in:)(v32, (uint64_t)&v44, v32, v33);
  }
}

uint64_t AttributedString.transformingAttributes<A>(_:_:)@<X0>(void (*a1)(long long *)@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  void (*v147)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  void *v152;
  uint64_t (**v153)(char *, uint64_t, uint64_t);
  void (**v154)(char *, char *, uint64_t);
  void (**v155)(char *, uint64_t, uint64_t);
  long long *v156;
  char *v157;
  _OWORD *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t (*v162)(uint64_t, uint64_t);
  uint64_t v163;
  char *v164;
  uint64_t v165;
  void (*v166)(long long *);
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void (**v176)(char *, uint64_t);
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  long long v186;
  long long v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void v192[19];
  long long v193;
  long long v194;
  _OWORD v195[2];
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  long long v199;
  long long v200;
  long long v201;
  long long v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  long long v212;
  long long v213;
  long long v214;
  long long v215;
  uint64_t v216;
  uint64_t v217;
  void v218[16];
  uint64_t v219;
  _OWORD v220[8];
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  long long v232;
  long long v233;
  long long v234;
  long long v235;
  long long v236;
  long long v237;
  long long v238;
  long long v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  long long v248;
  long long v249;
  long long v250;
  long long v251;
  long long v252;
  long long v253;
  long long v254;
  long long v255;
  uint64_t v256;
  _OWORD v257[4];
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _OWORD v266[2];
  long long v267;
  _OWORD v268[3];
  _OWORD v269[3];
  long long v270[3];
  unsigned char v271[56];

  char v166 = a1;
  char v167 = a2;
  uint64_t v141 = a5;
  unsigned __int8 v185 = a4;
  unint64_t v191 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v188 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v150 = (char *)&v140 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v149 = (char *)&v140 - v9;
  uint64_t v165 = v10;
  uint64_t v11 = type metadata accessor for Optional();
  *((void *)&v187 + 1) = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  int64_t v164 = (char *)&v140 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v180 = (char *)&v140 - v14;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  uint64_t v181 = v11;
  *(void *)&unint64_t v187 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](v187);
  uint64_t v168 = (uint64_t)&v140 - v15;
  v256 = *v5;
  uint64_t v16 = v256;
  swift_retain_n();
  uint64_t v17 = v16;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    long long v18 = *(_OWORD *)(v16 + 32);
    v269[0] = *(_OWORD *)(v16 + 16);
    v269[1] = v18;
    v269[2] = *(_OWORD *)(v16 + 48);
    uint64_t v19 = v16;
    uint64_t v20 = *(void *)(v16 + 64);
    uint64_t v21 = *(void *)(v16 + 72);
    uint64_t v22 = *(void *)(v19 + 80);
    uint64_t v23 = *(void *)(v19 + 88);
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v269);
    swift_unknownObjectRetain();
    uint64_t v24 = v21;
    uint64_t v16 = v19;
    uint64_t v17 = AttributedString.Guts.init(string:runs:)(v269, v20, v24, v22, v23);
    v256 = v17;
    swift_release();
  }
  char v190 = v17;
  long long v25 = *(_OWORD *)(v16 + 32);
  v268[0] = *(_OWORD *)(v16 + 16);
  v268[1] = v25;
  v268[2] = *(_OWORD *)(v16 + 48);
  swift_retain();
  outlined retain of Locale((uint64_t)v268);
  uint64_t v26 = BigString.startIndex.getter();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  outlined release of Locale((uint64_t)v268);
  long long v33 = *(_OWORD *)(v16 + 16);
  long long v34 = *(_OWORD *)(v16 + 32);
  id v267 = *(_OWORD *)(v16 + 48);
  v266[1] = v34;
  v266[0] = v33;
  long long v35 = *(_OWORD *)(v16 + 16);
  v270[1] = *(_OWORD *)(v16 + 32);
  v270[2] = v267;
  v270[0] = v35;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v270, (uint64_t)v271);
  outlined retain of Locale((uint64_t)v271);
  uint64_t v36 = BigString.endIndex.getter();
  uint64_t v38 = v37;
  uint64_t v39 = v16;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  outlined release of Locale((uint64_t)v266);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_27:
    __break(1u);
  }
  else
  {
    char v258 = v26;
    int64_t v259 = v28;
    v260 = v30;
    char v261 = v32;
    char v262 = v36;
    int v263 = v38;
    uint64_t v264 = v41;
    size_t v265 = v43;
    uint64_t v140 = v39;
    AttributedString.Runs.init(_:in:)(v39, &v231);
    uint64_t v45 = v240;
    uint64_t v46 = v241;
    v173 = v243;
    v174 = v242;
    uint64_t v47 = v244;
    uint64_t v48 = v245;
    uint64_t v171 = v231;
    uint64_t v172 = v246;
    char v189 = v247;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v49 = swift_allocObject();
    unint64_t v186 = xmmword_1821037E0;
    *(_OWORD *)(v49 + 16) = xmmword_1821037E0;
    uint64_t v50 = v185;
    uint64_t v51 = v191;
    char v162 = *(uint64_t (**)(uint64_t, uint64_t))(v185 + 24);
    char v163 = v185 + 24;
    *(void *)(v49 + 32) = v162(v191, v185);
    *(void *)(v49 + 40) = v52;
    BOOL v170 = v49;
    id v147 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v50 + 32);
    uint64_t v148 = v50 + 32;
    v147(&v219, v51, v50);
    uint64_t v53 = *(void *)&v220[0];
    uint64_t v175 = v48;
    if (*(void *)&v220[0] == 1)
    {
      BOOL v169 = MEMORY[0x1E4FBC860];
    }
    else
    {
      uint64_t v54 = v219;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
      uint64_t v55 = swift_allocObject();
      *(_OWORD *)(v55 + 16) = v186;
      *(void *)(v55 + 32) = v54;
      *(void *)(v55 + 40) = v53;
      uint64_t v48 = v175;
      BOOL v169 = v55;
    }
    uint64_t v252 = v236;
    uint64_t v253 = v237;
    uint64_t v254 = v238;
    uint64_t v255 = v239;
    uint64_t v248 = v232;
    v249 = v233;
    char v250 = v234;
    char v251 = v235;
    uint64_t v57 = v173;
    uint64_t v56 = v174;
    uint64_t v58 = v172;
    uint64_t v59 = v189;
    if ((static BigString.Index.== infix(_:_:)() & 1) == 0)
    {
      char v156 = (long long *)(v168 + *(int *)(v187 + 48));
      uint64_t v158 = v220;
      uint64_t v159 = (char *)&v212 + 8;
      Swift::Int v157 = (char *)&v199 + 8;
      long long v154 = (void (**)(char *, char *, uint64_t))(*((void *)&v187 + 1) + 16);
      char v155 = (void (**)(char *, uint64_t, uint64_t))(*((void *)&v187 + 1) + 32);
      unsigned __int8 v153 = (uint64_t (**)(char *, uint64_t, uint64_t))(v188 + 48);
      uint64_t v145 = (void (**)(char *, char *, uint64_t))(v188 + 16);
      id v146 = (void (**)(char *, char *, uint64_t))(v188 + 32);
      uint64_t v143 = v185 + 48;
      uint64_t v144 = v185 + 40;
      v142 = (void (**)(char *, uint64_t))(v188 + 8);
      id v176 = (void (**)(char *, uint64_t))(*((void *)&v187 + 1) + 8);
      char v151 = v47;
      id v152 = v218;
      uint64_t v160 = v46;
      uint64_t v161 = v45;
      uint64_t v60 = v46;
      uint64_t v61 = v56;
      uint64_t v62 = v57;
      uint64_t v63 = v45;
      uint64_t v64 = v58;
      uint64_t v65 = v60;
      uint64_t v66 = v62;
      while (1)
      {
        long long v69 = v252;
        long long v70 = v253;
        long long v71 = v253;
        char v72 = v157;
        *((_OWORD *)v157 + 4) = v252;
        v72[5] = v70;
        long long v73 = v254;
        long long v74 = v255;
        long long v75 = v255;
        v72[6] = v254;
        v72[7] = v74;
        long long v76 = v248;
        long long v77 = v249;
        long long v78 = v249;
        *char v72 = v248;
        v72[1] = v77;
        long long v79 = v250;
        long long v80 = v251;
        long long v81 = v251;
        void v72[2] = v250;
        v72[3] = v80;
        uint64_t v82 = v159;
        *((_OWORD *)v159 + 4) = v69;
        v82[5] = v71;
        v82[6] = v73;
        v82[7] = v75;
        *uint64_t v82 = v76;
        v82[1] = v78;
        id v184 = v66;
        uint64_t v83 = v61;
        *((void *)&v187 + 1) = v65;
        unint64_t v188 = v61;
        uint64_t v84 = v65;
        uint64_t v85 = v63;
        *(void *)&unint64_t v187 = v63;
        v82[2] = v79;
        v82[3] = v81;
        uint64_t v86 = v171;
        *(void *)&char v212 = v171;
        uint64_t v87 = v160;
        uint64_t v88 = v161;
        v218[7] = v161;
        v218[8] = v160;
        uint64_t v89 = v173;
        uint64_t v90 = v174;
        v218[9] = v174;
        v218[10] = v173;
        v218[11] = v47;
        v218[12] = v48;
        v218[13] = v64;
        v218[14] = v189;
        v192[0] = v85;
        v192[1] = v84;
        v192[2] = v83;
        v192[3] = v66;
        AttributedString.Runs.subscript.getter(&v193);
        uint64_t v91 = v48;
        id v179 = v193;
        uint64_t v177 = v198;
        id v178 = *((void *)&v193 + 1);
        long long v92 = v253;
        unint64_t v93 = v158;
        v158[4] = v252;
        v93[5] = v92;
        long long v94 = v255;
        v93[6] = v254;
        v93[7] = v94;
        long long v95 = v249;
        _OWORD *v93 = v248;
        v93[1] = v95;
        long long v96 = v251;
        v93[2] = v250;
        v93[3] = v96;
        v219 = v86;
        uint64_t v221 = v88;
        id v222 = v87;
        uint64_t v223 = v90;
        id v224 = v89;
        id v225 = v47;
        uint64_t v226 = v48;
        uint64_t v227 = v64;
        uint64_t v228 = v189;
        uint64_t v98 = v169;
        uint64_t v97 = v170;
        char v229 = v170;
        unsigned __int8 v230 = v169;
        *(void *)&uint64_t v199 = v86;
        uint64_t v204 = v88;
        uint64_t v205 = v87;
        v206 = v90;
        char v207 = v89;
        char v208 = v47;
        int64_t v209 = v91;
        uint64_t v210 = v64;
        uint64_t v99 = v188;
        v211 = v189;
        long long v100 = v187;
        Swift::Int32 v193 = v187;
        *(void *)&uint64_t v194 = v188;
        uint64_t v101 = v184;
        *((void *)&v194 + 1) = v184;
        outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v219);
        swift_retain();
        uint64_t v102 = v97;
        uint64_t v103 = v101;
        uint64_t v104 = v98;
        uint64_t v105 = v99;
        AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)((uint64_t *)&v193, v102, v104, (uint64_t *)&v212);
        swift_release();
        outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v219);
        long long v106 = v212;
        long long v107 = v213;
        uint64_t result = static BigString.Index.< infix(_:_:)();
        if (result)
        {
          __break(1u);
          goto LABEL_27;
        }
        char v190 = *((void *)&v106 + 1);
        uint64_t v108 = v168;
        *(void *)&unint64_t v186 = v107;
        AttributedString._AttributeStorage.subscript.getter(v179, v191, v185, v168);
        swift_release();
        uint64_t v109 = *((void *)&v107 + 1);
        swift_bridgeObjectRelease();
        uint64_t v110 = v186;
        swift_bridgeObjectRelease();
        uint64_t v111 = v156;
        *char v156 = v100;
        *((void *)v111 + 2) = v105;
        *((void *)v111 + 3) = v103;
        uint64_t v112 = v190;
        *((void *)v111 + 4) = v106;
        *((void *)v111 + 5) = v112;
        *((void *)v111 + 6) = v110;
        *((void *)v111 + 7) = *((void *)&v107 + 1);
        uint64_t v113 = v180;
        uint64_t v114 = v181;
        uint64_t v115 = v106;
        uint64_t v116 = v190;
        (*v155)(v180, v108, v181);
        Swift::String v117 = v164;
        (*v154)(v164, v113, v114);
        uint64_t v118 = v165;
        int v119 = (*v153)(v117, 1, v165);
        uint64_t v182 = *((void *)&v107 + 1);
        char v183 = v106;
        if (v119 == 1)
        {
          (*v176)(v117, v114);
          uint64_t v203 = 0;
          unint64_t v201 = 0u;
          Swift::Int v202 = 0u;
          uint64_t v199 = 0u;
          uint64_t v200 = 0u;
          uint64_t v120 = v185;
          uint64_t v121 = v191;
        }
        else
        {
          uint64_t v122 = v149;
          (*v146)(v149, v117, v118);
          unint64_t v123 = *v145;
          unint64_t v124 = v150;
          (*v145)(v150, v122, v118);
          *((void *)&v194 + 1) = v118;
          uint64_t v120 = v185;
          *(void *)&v195[0] = swift_getAssociatedConformanceWitness();
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v193);
          v123((char *)boxed_opaque_existential_1, v124, v118);
          v147((uint64_t *)&v199, v191, v120);
          *(_OWORD *)((char *)v195 + 8) = v199;
          BYTE8(v195[1]) = (*(uint64_t (**)(uint64_t, uint64_t))(v120 + 40))(v191, v120) & 1;
          uint64_t v126 = (*(uint64_t (**)(uint64_t, uint64_t))(v120 + 48))(v191, v120);
          uint64_t v127 = *v142;
          uint64_t v128 = v124;
          uint64_t v121 = v191;
          (*v142)(v128, v118);
          uint64_t v203 = v126;
          unint64_t v201 = v195[0];
          Swift::Int v202 = v195[1];
          uint64_t v109 = v182;
          uint64_t v199 = v193;
          uint64_t v200 = v194;
          unint64_t v129 = v122;
          uint64_t v116 = v190;
          v127(v129, v118);
          uint64_t v110 = v186;
          uint64_t v115 = v183;
        }
        uint64_t v130 = v162(v121, v120);
        char v212 = v187;
        *(void *)&char v213 = v188;
        *((void *)&v213 + 1) = v184;
        *(void *)&v214 = v115;
        *((void *)&v214 + 1) = v116;
        *(void *)&BOOL v215 = v110;
        *((void *)&v215 + 1) = v109;
        BOOL v216 = v130;
        uint64_t v217 = v131;
        outlined init with take of AttributedString._AttributeValue?((uint64_t)&v199, (uint64_t)v152);
        uint64_t v132 = type metadata accessor for AttributedString.SingleAttributeTransformer();
        uint64_t v133 = *(void *)(v132 - 8);
        int v134 = *(void (**)(long long *, long long *, uint64_t))(v133 + 16);
        v134(&v199, &v212, v132);
        v166(&v199);
        id v178 = *((void *)&v202 + 1);
        id v179 = *((void *)&v201 + 1);
        if ((static BigString.Index.== infix(_:_:)() & 1) == 0) {
          break;
        }
        char v135 = static BigString.Index.== infix(_:_:)();
        v134(&v193, &v212, v132);
        v134((long long *)v192, &v199, v132);
        uint64_t v48 = v175;
        if ((v135 & 1) == 0) {
          goto LABEL_22;
        }
        uint64_t v136 = v185;
        uint64_t v61 = v186;
        uint64_t v137 = v191;
        uint64_t v138 = v181;
        if (v196 == v192[8] && v197 == v192[9])
        {
          int64_t v67 = *(void (**)(long long *, uint64_t))(v133 + 8);
          v67(&v193, v132);
          v67((long long *)v192, v132);
        }
        else
        {
          char v139 = _stringCompareWithSmolCheck(_:_:expecting:)();
          int64_t v67 = *(void (**)(long long *, uint64_t))(v133 + 8);
          v67(&v193, v132);
          v67((long long *)v192, v132);
          uint64_t v48 = v175;
          if ((v139 & 1) == 0) {
            goto LABEL_23;
          }
        }
LABEL_10:
        AttributedString.applyChanges<A>(withOriginal:andChanged:to:key:)((uint64_t)&v212, &v199, &v256, v68, v137, v136);
        v67(&v199, v132);
        v67(&v212, v132);
        (*v176)(v180, v138);
        uint64_t v66 = v182;
        uint64_t v63 = v183;
        uint64_t v65 = v190;
        uint64_t v47 = v151;
        uint64_t v64 = v172;
        if (static BigString.Index.== infix(_:_:)())
        {
          char v190 = v256;
          uint64_t v46 = v160;
          uint64_t v45 = v161;
          uint64_t v59 = v189;
          uint64_t v58 = v64;
          uint64_t v57 = v173;
          uint64_t v56 = v174;
          goto LABEL_25;
        }
      }
      v134(&v193, &v212, v132);
      v134((long long *)v192, &v199, v132);
      uint64_t v48 = v175;
LABEL_22:
      int64_t v67 = *(void (**)(long long *, uint64_t))(v133 + 8);
      v67(&v193, v132);
      v67((long long *)v192, v132);
      uint64_t v136 = v185;
      uint64_t v61 = v186;
      uint64_t v137 = v191;
      uint64_t v138 = v181;
LABEL_23:
      v257[0] = v212;
      v257[1] = v213;
      v257[2] = v214;
      v257[3] = v215;
      AttributedString.Guts.removeAttributeValue<A>(forKey:in:)(v137, (uint64_t)v257, v137, v136);
      goto LABEL_10;
    }
LABEL_25:
    v220[4] = v252;
    v220[5] = v253;
    v220[6] = v254;
    v220[7] = v255;
    v220[0] = v248;
    v220[1] = v249;
    v220[2] = v250;
    v220[3] = v251;
    v219 = v171;
    uint64_t v221 = v45;
    id v222 = v46;
    uint64_t v223 = v56;
    id v224 = v57;
    id v225 = v47;
    uint64_t v226 = v48;
    uint64_t v227 = v58;
    uint64_t v228 = v59;
    char v229 = v170;
    unsigned __int8 v230 = v169;
    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v219);
    uint64_t result = swift_release();
    uint64_t *v141 = v190;
  }
  return result;
}

uint64_t AttributedString.transformingAttributes<A, B>(_:_:_:)@<X0>(void (*a1)(long long *, long long *)@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, void *a7@<X8>)
{
  uint64_t v113 = a1;
  uint64_t v114 = a2;
  uint64_t v101 = a7;
  uint64_t v135 = a6;
  uint64_t v137 = a4;
  swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v134 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v128 = (char *)&v101 - v11;
  uint64_t v138 = a5;
  uint64_t v130 = a3;
  swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v133 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v126 = (char *)&v101 - v13;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  uint64_t v127 = v12;
  uint64_t v129 = v10;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v14 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v116 = (uint64_t)&v101 - v15;
  uint64_t v16 = *v7;
  uint64_t v185 = *v7;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    long long v17 = *(_OWORD *)(v16 + 32);
    v199[0] = *(_OWORD *)(v16 + 16);
    v199[1] = v17;
    v199[2] = *(_OWORD *)(v16 + 48);
    uint64_t v18 = *(void *)(v16 + 64);
    uint64_t v19 = *(void *)(v16 + 72);
    uint64_t v20 = *(void *)(v16 + 80);
    uint64_t v21 = *(void *)(v16 + 88);
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v199);
    swift_unknownObjectRetain();
    uint64_t v185 = AttributedString.Guts.init(string:runs:)(v199, v18, v19, v20, v21);
    swift_release();
  }
  long long v22 = *(_OWORD *)(v16 + 32);
  v198[0] = *(_OWORD *)(v16 + 16);
  v198[1] = v22;
  v198[2] = *(_OWORD *)(v16 + 48);
  swift_retain();
  outlined retain of Locale((uint64_t)v198);
  uint64_t v23 = BigString.startIndex.getter();
  uint64_t v25 = v24;
  uint64_t v136 = v26;
  uint64_t v28 = v27;
  outlined release of Locale((uint64_t)v198);
  long long v29 = *(_OWORD *)(v16 + 16);
  long long v30 = *(_OWORD *)(v16 + 32);
  long long v197 = *(_OWORD *)(v16 + 48);
  v196[1] = v30;
  v196[0] = v29;
  long long v31 = *(_OWORD *)(v16 + 16);
  v200[1] = *(_OWORD *)(v16 + 32);
  v200[2] = v197;
  v200[0] = v31;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v200, (uint64_t)v201);
  outlined retain of Locale((uint64_t)v201);
  uint64_t v32 = BigString.endIndex.getter();
  uint64_t v102 = v16;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  outlined release of Locale((uint64_t)v196);
  uint64_t v39 = v25;
  uint64_t v40 = v136;
  uint64_t v132 = v28;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    uint64_t v188 = v23;
    uint64_t v189 = v39;
    char v190 = v40;
    uint64_t v191 = v132;
    uint64_t v192 = v32;
    uint64_t v193 = v34;
    uint64_t v194 = v36;
    uint64_t v195 = v38;
    AttributedString.Runs.init(_:in:)(v102, v161);
    long long v176 = v161[6];
    long long v177 = v161[7];
    uint64_t v136 = v163;
    *(void *)&long long v178 = v162;
    long long v172 = v161[2];
    long long v173 = v161[3];
    long long v175 = v161[5];
    long long v174 = v161[4];
    long long v171 = v161[1];
    long long v170 = v161[0];
    uint64_t v42 = v164;
    uint64_t v43 = v165;
    long long v131 = v167;
    uint64_t v44 = v166;
    uint64_t v125 = v168;
    uint64_t v132 = v169;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_182106040;
    uint64_t v46 = v138;
    uint64_t v111 = *(uint64_t (**)(uint64_t, uint64_t))(v138 + 24);
    uint64_t v112 = v138 + 24;
    *(void *)(v45 + 32) = v111(v130, v138);
    *(void *)(v45 + 40) = v47;
    uint64_t v48 = v135;
    uint64_t v49 = v137;
    uint64_t v109 = *(uint64_t (**)(uint64_t, uint64_t))(v135 + 24);
    uint64_t v110 = v135 + 24;
    *(void *)(v45 + 48) = v109(v137, v135);
    *(void *)(v45 + 56) = v50;
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v46 + 32))(&v154, v130, v46);
    uint64_t v52 = *((void *)&v154 + 1);
    uint64_t v51 = v154;
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v48 + 32))(&v147, v49, v48);
    uint64_t v53 = specialized RangeReplaceableCollection.init(_contents:_:)(v51, v52, v147, *((uint64_t *)&v147 + 1));
    outlined consume of AttributedString.AttributeRunBoundaries?(v51, v52);
    *((void *)&v178 + 1) = v136;
    *(void *)&long long v179 = v42;
    *((void *)&v179 + 1) = v43;
    *(void *)&v180[0] = v44;
    *(_OWORD *)((char *)v180 + 8) = v131;
    *((void *)&v180[1] + 1) = v125;
    *(void *)&long long v181 = v132;
    *((void *)&v181 + 1) = v45;
    *(void *)&long long v182 = v53;
    uint64_t v54 = TupleTypeMetadata3;
    uint64_t v115 = TupleTypeMetadata3 - 8;
    *((void *)&v182 + 1) = v136;
    *(void *)&long long v183 = v42;
    long long v107 = (void (**)(char *, uint64_t, uint64_t))(v134 + 32);
    uint64_t v108 = (void (**)(char *, uint64_t, uint64_t))(v133 + 32);
    uint64_t v105 = &v153;
    long long v106 = v159;
    uint64_t v103 = (void (**)(char *, uint64_t))(v133 + 8);
    uint64_t v104 = (void (**)(char *, uint64_t))(v134 + 8);
    *((void *)&v183 + 1) = v43;
    uint64_t v55 = v48;
    uint64_t v184 = v44;
    uint64_t v56 = v130;
    while (1)
    {
      *(void *)&long long v154 = v56;
      *((void *)&v154 + 1) = v137;
      *(void *)&long long v155 = v138;
      *((void *)&v155 + 1) = v55;
      uint64_t v62 = type metadata accessor for AttributedString.Runs.AttributesSlice2.Iterator();
      uint64_t v63 = v116;
      AttributedString.Runs.AttributesSlice2.Iterator.next()(v62, v116);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 48))(v63, 1, v54) == 1)
      {
        v159[7] = v181;
        v159[8] = v182;
        v159[9] = v183;
        uint64_t v160 = v184;
        v159[3] = v178;
        v159[4] = v179;
        v159[5] = v180[0];
        v159[6] = v180[1];
        long long v158 = v174;
        v159[0] = v175;
        v159[1] = v176;
        long long v159[2] = v177;
        long long v154 = v170;
        long long v155 = v171;
        long long v156 = v172;
        long long v157 = v173;
        outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v154);
        uint64_t result = swift_release();
        *uint64_t v101 = v185;
        return result;
      }
      uint64_t v64 = v63 + *(int *)(v54 + 48);
      uint64_t v65 = (uint64_t *)(v63 + *(int *)(v54 + 64));
      uint64_t v66 = *v65;
      uint64_t v67 = v56;
      uint64_t v68 = v65[2];
      uint64_t v132 = v65[1];
      uint64_t v133 = v66;
      uint64_t v69 = v65[3];
      *(void *)&long long v131 = v65[4];
      uint64_t v70 = v131;
      uint64_t v71 = v65[5];
      uint64_t v119 = v65[6];
      uint64_t v136 = (void (*)(void, void))v65[7];
      uint64_t v72 = v138;
      uint64_t v73 = (uint64_t)v126;
      (*v108)(v126, v63, v127);
      long long v74 = v128;
      (*v107)(v128, v64, v129);
      static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)(v73, v67, v72, (uint64_t)v106);
      uint64_t v75 = v111(v67, v72);
      uint64_t v76 = v132;
      uint64_t v77 = v133;
      *(void *)&long long v154 = v133;
      *((void *)&v154 + 1) = v132;
      uint64_t v120 = v68;
      *(void *)&long long v155 = v68;
      *((void *)&v155 + 1) = v69;
      *(void *)&long long v156 = v70;
      *((void *)&v156 + 1) = v71;
      uint64_t v78 = v119;
      *(void *)&long long v157 = v119;
      *((void *)&v157 + 1) = v136;
      *(void *)&long long v158 = v75;
      *((void *)&v158 + 1) = v79;
      uint64_t v80 = (uint64_t)v74;
      uint64_t v81 = v137;
      uint64_t v82 = v135;
      static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)(v80, v137, v135, (uint64_t)v105);
      uint64_t v83 = v109(v81, v82);
      *(void *)&long long v147 = v77;
      *((void *)&v147 + 1) = v76;
      *(void *)&long long v148 = v68;
      *((void *)&v148 + 1) = v69;
      *(void *)&long long v149 = v131;
      uint64_t v118 = v71;
      *((void *)&v149 + 1) = v71;
      *(void *)&long long v150 = v78;
      *((void *)&v150 + 1) = v136;
      uint64_t v151 = v83;
      uint64_t v152 = v84;
      uint64_t v85 = type metadata accessor for AttributedString.SingleAttributeTransformer();
      uint64_t v134 = *(void *)(v85 - 8);
      uint64_t v86 = *(void (**)(long long *, long long *, uint64_t))(v134 + 16);
      v86(v146, &v154, v85);
      uint64_t v87 = type metadata accessor for AttributedString.SingleAttributeTransformer();
      uint64_t v123 = *(void *)(v87 - 8);
      uint64_t v124 = v87;
      uint64_t v121 = *(void (**)(long long *, long long *))(v123 + 16);
      uint64_t v122 = v123 + 16;
      v121(v145, &v147);
      v113(v146, v145);
      char v88 = static BigString.Index.== infix(_:_:)();
      uint64_t v125 = v85;
      if ((v88 & 1) == 0) {
        break;
      }
      char v89 = static BigString.Index.== infix(_:_:)();
      v86((long long *)v142, &v154, v85);
      v86((long long *)v139, v146, v85);
      if ((v89 & 1) == 0) {
        goto LABEL_14;
      }
      uint64_t v90 = v130;
      if (v143 == v140 && v144 == v141)
      {
        uint64_t v91 = *(void (**)(unsigned char *, uint64_t))(v134 + 8);
        v91(v142, v85);
        uint64_t v136 = (void (*)(void, void))v91;
        v91(v139, v85);
        goto LABEL_16;
      }
      char v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
      long long v100 = *(void (**)(unsigned char *, uint64_t))(v134 + 8);
      v100(v142, v85);
      uint64_t v136 = (void (*)(void, void))v100;
      v100(v139, v85);
      if ((v99 & 1) == 0) {
        goto LABEL_15;
      }
LABEL_16:
      if ((static BigString.Index.== infix(_:_:)() & 1) == 0)
      {
        uint64_t v94 = v124;
        uint64_t v98 = v121;
        ((void (*)(unsigned char *, long long *, uint64_t))v121)(v142, &v147, v124);
        ((void (*)(unsigned char *, long long *, uint64_t))v98)(v139, v145, v94);
        uint64_t v55 = v135;
LABEL_23:
        uint64_t v57 = *(void (**)(long long *, uint64_t))(v123 + 8);
        v57((long long *)v142, v94);
        v57((long long *)v139, v94);
        uint64_t v56 = v130;
LABEL_24:
        v186[0] = v147;
        v186[1] = v148;
        v186[2] = v149;
        v186[3] = v150;
        AttributedString.Guts.removeAttributeValue<A>(forKey:in:)(v137, (uint64_t)v186, v137, v55);
        goto LABEL_6;
      }
      char v93 = static BigString.Index.== infix(_:_:)();
      uint64_t v94 = v124;
      long long v95 = v121;
      ((void (*)(unsigned char *, long long *, uint64_t))v121)(v142, &v147, v124);
      ((void (*)(unsigned char *, long long *, uint64_t))v95)(v139, v145, v94);
      uint64_t v55 = v135;
      if ((v93 & 1) == 0) {
        goto LABEL_23;
      }
      uint64_t v56 = v130;
      uint64_t v96 = v123;
      if (v143 == v140 && v144 == v141)
      {
        uint64_t v57 = *(void (**)(long long *, uint64_t))(v123 + 8);
        v57((long long *)v142, v94);
        v57((long long *)v139, v94);
        goto LABEL_6;
      }
      char v97 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v57 = *(void (**)(long long *, uint64_t))(v96 + 8);
      v57((long long *)v142, v94);
      v57((long long *)v139, v94);
      if ((v97 & 1) == 0) {
        goto LABEL_24;
      }
LABEL_6:
      AttributedString.applyChanges<A>(withOriginal:andChanged:to:key:)((uint64_t)&v154, v146, &v185, v58, v56, v138);
      AttributedString.applyChanges<A>(withOriginal:andChanged:to:key:)((uint64_t)&v147, v145, &v185, v59, v137, v55);
      v57(v145, v94);
      uint64_t v60 = v125;
      uint64_t v61 = (void (*)(long long *, uint64_t))v136;
      v136(v146, v125);
      v57(&v147, v94);
      v61(&v154, v60);
      (*v104)(v128, v129);
      (*v103)(v126, v127);
      uint64_t v54 = TupleTypeMetadata3;
    }
    v86((long long *)v142, &v154, v85);
    v86((long long *)v139, v146, v85);
LABEL_14:
    long long v92 = *(void (**)(unsigned char *, uint64_t))(v134 + 8);
    v92(v142, v85);
    uint64_t v136 = (void (*)(void, void))v92;
    v92(v139, v85);
    uint64_t v90 = v130;
LABEL_15:
    v187[0] = v154;
    v187[1] = v155;
    v187[2] = v156;
    v187[3] = v157;
    AttributedString.Guts.removeAttributeValue<A>(forKey:in:)(v90, (uint64_t)v187, v90, v138);
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t AttributedString.transformingAttributes<A, B, C>(_:_:_:_:)@<X0>(void (*a1)(long long *, long long *, long long *)@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, void *a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v103 = a1;
  uint64_t v104 = a2;
  uint64_t v90 = a6;
  uint64_t v118 = a9;
  uint64_t v121 = a5;
  swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  char v93 = *(void (***)(uint64_t, uint64_t))(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v115 = (uint64_t)&v89 - v12;
  uint64_t v117 = a8;
  uint64_t v13 = a4;
  swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  long long v92 = *(void (***)(uint64_t, uint64_t))(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v114 = (uint64_t)&v89 - v15;
  uint64_t v116 = a7;
  swift_getAssociatedTypeWitness();
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v91 = *(void (***)(char *, uint64_t))(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v110 = (char *)&v89 - v18;
  uint64_t v111 = v17;
  *(void *)&long long v159 = v17;
  uint64_t v112 = v14;
  uint64_t v113 = v11;
  *((void *)&v159 + 1) = v14;
  *(void *)&long long v160 = v11;
  *((void *)&v160 + 1) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  uint64_t v19 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v106 = (uint64_t)&v89 - v20;
  uint64_t v21 = *v109;
  v174[0] = *v109;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    long long v22 = *(_OWORD *)(v21 + 32);
    v177[0] = *(_OWORD *)(v21 + 16);
    v177[1] = v22;
    v177[2] = *(_OWORD *)(v21 + 48);
    uint64_t v23 = *(void *)(v21 + 64);
    uint64_t v24 = *(void *)(v21 + 72);
    uint64_t v25 = *(void *)(v21 + 80);
    uint64_t v26 = *(void *)(v21 + 88);
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v177);
    swift_unknownObjectRetain();
    v174[0] = AttributedString.Guts.init(string:runs:)(v177, v23, v24, v25, v26);
    swift_release();
  }
  long long v27 = *(_OWORD *)(v21 + 32);
  v176[0] = *(_OWORD *)(v21 + 16);
  v176[1] = v27;
  v176[2] = *(_OWORD *)(v21 + 48);
  swift_retain();
  outlined retain of Locale((uint64_t)v176);
  uint64_t v28 = BigString.startIndex.getter();
  uint64_t v108 = v29;
  uint64_t v109 = (uint64_t *)v28;
  long long v31 = v30;
  uint64_t v105 = v32;
  outlined release of Locale((uint64_t)v176);
  long long v33 = *(_OWORD *)(v21 + 16);
  long long v34 = *(_OWORD *)(v21 + 48);
  v175[1] = *(_OWORD *)(v21 + 32);
  v175[2] = v34;
  v175[0] = v33;
  long long v35 = *(_OWORD *)(v21 + 16);
  v178[1] = *(_OWORD *)(v21 + 32);
  v178[2] = v34;
  v178[0] = v35;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v178, (uint64_t)v179);
  outlined retain of Locale((uint64_t)v179);
  uint64_t v36 = BigString.endIndex.getter();
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  outlined release of Locale((uint64_t)v175);
  uint64_t v102 = v31;
  uint64_t v43 = v105;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
  }
  else
  {
    v174[1] = (uint64_t)v109;
    v174[2] = (uint64_t)v102;
    v174[3] = v43;
    v174[4] = v108;
    v174[5] = v36;
    v174[6] = v38;
    v174[7] = v40;
    v174[8] = v42;
    uint64_t v89 = v21;
    AttributedString.Runs.init(_:in:)(v21, &v159);
    uint64_t v46 = v116;
    uint64_t v45 = v117;
    uint64_t v47 = v118;
    AttributedString.Runs.AttributesSlice3.init(runs:)((uint64_t)&v159, a3, v13, v121, v116, v117, v118, (uint64_t)&v145);
    long long v165 = v151;
    long long v166 = v152;
    long long v161 = v147;
    long long v162 = v148;
    long long v163 = v149;
    long long v164 = v150;
    long long v159 = v145;
    long long v160 = v146;
    *(_OWORD *)((char *)v171 + 8) = *(_OWORD *)((char *)v157 + 8);
    long long v167 = v153;
    long long v168 = v154;
    uint64_t v48 = (int *)TupleTypeMetadata;
    uint64_t v105 = TupleTypeMetadata - 8;
    uint64_t v102 = (void (**)(char *))(v91 + 4);
    uint64_t v101 = (void (**)(uint64_t, uint64_t, uint64_t))(v92 + 4);
    long long v100 = (void (**)(uint64_t, uint64_t, uint64_t))(v93 + 4);
    *(void *)&v171[0] = *(void *)&v157[0];
    *((void *)&v171[1] + 1) = *((void *)&v153 + 1);
    uint64_t v98 = v46 + 24;
    char v99 = &v150;
    long long v172 = v154;
    uint64_t v96 = v45 + 24;
    char v97 = &v144;
    uint64_t v94 = v47 + 24;
    long long v95 = &v134;
    long long v169 = v155;
    long long v170 = v156;
    ++v92;
    ++v93;
    ++v91;
    uint64_t v173 = v155;
    uint64_t v119 = a3;
    uint64_t v120 = v13;
    while (1)
    {
      *(void *)&long long v145 = a3;
      *((void *)&v145 + 1) = v13;
      *(void *)&long long v146 = v121;
      *((void *)&v146 + 1) = v46;
      *(void *)&long long v147 = v45;
      *((void *)&v147 + 1) = v47;
      uint64_t v49 = (void *)type metadata accessor for AttributedString.Runs.AttributesSlice3.Iterator();
      uint64_t v50 = v106;
      AttributedString.Runs.AttributesSlice3.Iterator.next()(v49, v106);
      if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v48 - 1) + 48))(v50, 1, v48) == 1) {
        break;
      }
      uint64_t v51 = v50 + v48[12];
      uint64_t v52 = v50;
      uint64_t v53 = v50 + v48[16];
      uint64_t v54 = (uint64_t **)(v52 + v48[20]);
      uint64_t v55 = *v54;
      uint64_t v56 = v54[1];
      uint64_t v58 = v54[2];
      uint64_t v57 = v54[3];
      uint64_t v59 = v54[5];
      uint64_t v108 = (uint64_t)v54[4];
      uint64_t v109 = v55;
      uint64_t v61 = v54[6];
      uint64_t v60 = v54[7];
      uint64_t v62 = (uint64_t)v110;
      (*v102)(v110);
      (*v101)(v114, v51, v112);
      (*v100)(v115, v53, v113);
      static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)(v62, v119, v116, (uint64_t)v99);
      uint64_t v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v116 + 24))(v119, v116);
      uint64_t v65 = v108;
      uint64_t v64 = v109;
      *(void *)&long long v145 = v109;
      *((void *)&v145 + 1) = v56;
      *(void *)&long long v146 = v58;
      *((void *)&v146 + 1) = v57;
      *(void *)&long long v147 = v108;
      *((void *)&v147 + 1) = v59;
      *(void *)&long long v148 = v61;
      *((void *)&v148 + 1) = v60;
      *(void *)&long long v149 = v63;
      *((void *)&v149 + 1) = v66;
      static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)(v114, v120, v117, (uint64_t)v97);
      uint64_t v67 = (*(uint64_t (**)(uint64_t, uint64_t))(v117 + 24))(v120, v117);
      *(void *)&long long v135 = v64;
      *((void *)&v135 + 1) = v56;
      uint64_t v136 = v58;
      uint64_t v137 = v57;
      uint64_t v138 = v65;
      char v139 = v59;
      uint64_t v140 = v61;
      uint64_t v141 = v60;
      uint64_t v142 = v67;
      uint64_t v143 = v68;
      static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)(v115, v121, v118, (uint64_t)v95);
      uint64_t v69 = (*(uint64_t (**)(uint64_t, uint64_t))(v118 + 24))(v121, v118);
      *(void *)&long long v125 = v64;
      *((void *)&v125 + 1) = v56;
      uint64_t v126 = v58;
      uint64_t v127 = v57;
      uint64_t v128 = v65;
      uint64_t v129 = v59;
      uint64_t v130 = v61;
      long long v131 = v60;
      uint64_t v132 = v69;
      uint64_t v133 = v70;
      uint64_t v71 = type metadata accessor for AttributedString.SingleAttributeTransformer();
      uint64_t v72 = *(void *)(v71 - 8);
      (*(void (**)(long long *, long long *, uint64_t))(v72 + 16))(v124, &v145, v71);
      uint64_t v73 = type metadata accessor for AttributedString.SingleAttributeTransformer();
      uint64_t v74 = *(void *)(v73 - 8);
      (*(void (**)(long long *, long long *, uint64_t))(v74 + 16))(v123, &v135, v73);
      uint64_t v75 = type metadata accessor for AttributedString.SingleAttributeTransformer();
      uint64_t v76 = *(void *)(v75 - 8);
      (*(void (**)(long long *, long long *, uint64_t))(v76 + 16))(v122, &v125, v75);
      v103(v124, v123, v122);
      AttributedString.applyRemovals<A>(withOriginal:andChanged:to:key:)(&v145, v124, (uint64_t)v174, v77, v119, v116);
      AttributedString.applyRemovals<A>(withOriginal:andChanged:to:key:)(&v135, v123, (uint64_t)v174, v78, v120, v117);
      AttributedString.applyRemovals<A>(withOriginal:andChanged:to:key:)(&v125, v122, (uint64_t)v174, v79, v121, v118);
      AttributedString.applyChanges<A>(withOriginal:andChanged:to:key:)((uint64_t)&v145, v124, v174, v80, v119, v116);
      AttributedString.applyChanges<A>(withOriginal:andChanged:to:key:)((uint64_t)&v135, v123, v174, v81, v120, v117);
      AttributedString.applyChanges<A>(withOriginal:andChanged:to:key:)((uint64_t)&v125, v122, v174, v82, v121, v118);
      uint64_t v83 = *(void (**)(long long *, uint64_t))(v76 + 8);
      v83(v122, v75);
      uint64_t v84 = *(void (**)(long long *, uint64_t))(v74 + 8);
      v84(v123, v73);
      uint64_t v85 = *(void (**)(long long *, uint64_t))(v72 + 8);
      v85(v124, v71);
      uint64_t v86 = v75;
      uint64_t v46 = v116;
      v83(&v125, v86);
      uint64_t v87 = v73;
      uint64_t v48 = (int *)TupleTypeMetadata;
      v84(&v135, v87);
      uint64_t v13 = v120;
      uint64_t v88 = v71;
      uint64_t v45 = v117;
      uint64_t v47 = v118;
      v85(&v145, v88);
      a3 = v119;
      (*v93)(v115, v113);
      (*v92)(v114, v112);
      (*v91)(v110, v111);
    }
    v157[0] = v171[0];
    v157[1] = v171[1];
    v157[2] = v172;
    uint64_t v158 = v173;
    long long v153 = v167;
    long long v154 = v168;
    long long v155 = v169;
    long long v156 = v170;
    long long v149 = v163;
    long long v150 = v164;
    long long v151 = v165;
    long long v152 = v166;
    long long v145 = v159;
    long long v146 = v160;
    long long v147 = v161;
    long long v148 = v162;
    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v145);
    uint64_t result = swift_release();
    *uint64_t v90 = v174[0];
  }
  return result;
}

uint64_t AttributedString.transformingAttributes<A, B, C, D>(_:_:_:_:_:)@<X0>(void (*a1)(long long *, long long *, long long *, long long *)@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, void *a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v136 = a1;
  uint64_t v137 = a2;
  uint64_t v118 = a5;
  uint64_t v159 = a11;
  uint64_t v162 = a7;
  swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v144 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v154 = (uint64_t)&v118 - v14;
  uint64_t v155 = a6;
  uint64_t v158 = a10;
  swift_getAssociatedTypeWitness();
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v143 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v153 = (uint64_t)&v118 - v16;
  uint64_t v157 = a9;
  swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v142 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  long long v149 = (char *)&v118 - v18;
  uint64_t v156 = a8;
  uint64_t v19 = a3;
  swift_getAssociatedTypeWitness();
  uint64_t v20 = type metadata accessor for Optional();
  uint64_t v141 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  long long v147 = (char *)&v118 - v22;
  uint64_t v148 = v21;
  *(void *)&long long v211 = v21;
  uint64_t v150 = v17;
  uint64_t v151 = v15;
  *((void *)&v211 + 1) = v17;
  *(void *)&long long v212 = v15;
  uint64_t v152 = v13;
  *((void *)&v212 + 1) = v13;
  *(void *)&long long v213 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  uint64_t v23 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v23 - 8);
  uint64_t v139 = (uint64_t)&v118 - v24;
  uint64_t v25 = *v146;
  v226[0] = *v146;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    long long v26 = *(_OWORD *)(v25 + 32);
    v229[0] = *(_OWORD *)(v25 + 16);
    v229[1] = v26;
    v229[2] = *(_OWORD *)(v25 + 48);
    uint64_t v27 = *(void *)(v25 + 64);
    uint64_t v28 = *(void *)(v25 + 72);
    uint64_t v29 = *(void *)(v25 + 80);
    uint64_t v30 = *(void *)(v25 + 88);
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v229);
    swift_unknownObjectRetain();
    v226[0] = AttributedString.Guts.init(string:runs:)(v229, v27, v28, v29, v30);
    swift_release();
  }
  uint64_t v119 = v25;
  long long v31 = *(_OWORD *)(v25 + 32);
  v228[0] = *(_OWORD *)(v25 + 16);
  v228[1] = v31;
  v228[2] = *(_OWORD *)(v25 + 48);
  swift_retain();
  outlined retain of Locale((uint64_t)v228);
  uint64_t v32 = BigString.startIndex.getter();
  uint64_t v145 = v34;
  long long v146 = v33;
  uint64_t v36 = v35;
  outlined release of Locale((uint64_t)v228);
  long long v37 = *(_OWORD *)(v25 + 16);
  long long v38 = *(_OWORD *)(v25 + 48);
  v227[1] = *(_OWORD *)(v25 + 32);
  v227[2] = v38;
  v227[0] = v37;
  long long v39 = *(_OWORD *)(v25 + 16);
  v230[1] = *(_OWORD *)(v25 + 32);
  v230[2] = v38;
  v230[0] = v39;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v230, (uint64_t)v231);
  outlined retain of Locale((uint64_t)v231);
  uint64_t v40 = BigString.endIndex.getter();
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  outlined release of Locale((uint64_t)v227);
  uint64_t v132 = (void (**)(uint64_t, uint64_t, uint64_t))v40;
  uint64_t v133 = v42;
  uint64_t v134 = v44;
  long long v135 = (void (**)(char *))v32;
  uint64_t v47 = v145;
  uint64_t v48 = (uint64_t)v146;
  uint64_t v138 = v36;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
  }
  else
  {
    v226[1] = (uint64_t)v135;
    v226[2] = v48;
    v226[3] = v138;
    v226[4] = v47;
    v226[5] = (uint64_t)v132;
    v226[6] = (uint64_t)v133;
    v226[7] = (uint64_t)v134;
    v226[8] = v46;
    AttributedString.Runs.init(_:in:)(v119, &v211);
    uint64_t v50 = v159;
    uint64_t v51 = v156;
    uint64_t v52 = v162;
    uint64_t v54 = v157;
    uint64_t v53 = v158;
    AttributedString.Runs.AttributesSlice4.init(runs:)((uint64_t)&v211, v19, a4, v155, v156, v157, v158, (uint64_t)&v197, v159);
    long long v217 = v203;
    long long v218 = v204;
    long long v213 = v199;
    long long v214 = v200;
    long long v215 = v201;
    long long v216 = v202;
    long long v211 = v197;
    long long v212 = v198;
    *(_OWORD *)((char *)v223 + 8) = *(_OWORD *)((char *)v209 + 8);
    long long v219 = v205;
    uint64_t v138 = TupleTypeMetadata - 8;
    long long v220 = v206;
    long long v135 = (void (**)(char *))(v141 + 32);
    uint64_t v134 = (void (**)(char *, uint64_t, uint64_t))(v142 + 32);
    uint64_t v133 = (void (**)(uint64_t, uint64_t, uint64_t))(v143 + 32);
    uint64_t v132 = (void (**)(uint64_t, uint64_t, uint64_t))(v144 + 32);
    long long v131 = &v202;
    uint64_t v130 = v51 + 24;
    uint64_t v129 = &v196;
    *(void *)&v223[0] = *(void *)&v209[0];
    *((void *)&v223[1] + 1) = *((void *)&v205 + 1);
    uint64_t v127 = &v186;
    uint64_t v128 = v54 + 24;
    long long v224 = v206;
    long long v125 = &v176;
    uint64_t v126 = v53 + 24;
    uint64_t v123 = (void (**)(uint64_t, uint64_t))(v144 + 8);
    uint64_t v124 = v50 + 24;
    long long v221 = v207;
    long long v222 = v208;
    uint64_t v121 = (void (**)(char *, uint64_t))(v142 + 8);
    uint64_t v122 = (void (**)(uint64_t, uint64_t))(v143 + 8);
    uint64_t v120 = (void (**)(char *, uint64_t))(v141 + 8);
    uint64_t v225 = v207;
    uint64_t v160 = v19;
    uint64_t v161 = a4;
    while (1)
    {
      *(void *)&long long v197 = v19;
      *((void *)&v197 + 1) = a4;
      *(void *)&long long v198 = v155;
      *((void *)&v198 + 1) = v52;
      *(void *)&long long v199 = v51;
      *((void *)&v199 + 1) = v54;
      *(void *)&long long v200 = v53;
      *((void *)&v200 + 1) = v159;
      uint64_t v55 = (void *)type metadata accessor for AttributedString.Runs.AttributesSlice4.Iterator();
      uint64_t v56 = v139;
      AttributedString.Runs.AttributesSlice4.Iterator.next()(v55, v139);
      uint64_t v57 = (int *)TupleTypeMetadata;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 48))(v56, 1, TupleTypeMetadata) == 1)break; {
      uint64_t v58 = v57;
      }
      uint64_t v59 = v56 + v57[12];
      uint64_t v60 = v56;
      uint64_t v61 = v56 + v58[16];
      uint64_t v62 = v60 + v58[20];
      uint64_t v63 = (uint64_t *)(v60 + v58[24]);
      uint64_t v65 = *v63;
      uint64_t v64 = v63[1];
      uint64_t v66 = v63[2];
      uint64_t v67 = v63[3];
      uint64_t v68 = v63[4];
      uint64_t v142 = v63[5];
      uint64_t v69 = v142;
      uint64_t v143 = v66;
      uint64_t v71 = (uint64_t *)v63[6];
      uint64_t v70 = v63[7];
      uint64_t v145 = v64;
      long long v146 = v71;
      uint64_t v144 = v70;
      uint64_t v72 = (uint64_t)v147;
      (*v135)(v147);
      uint64_t v73 = (uint64_t)v149;
      (*v134)(v149, v59, v150);
      (*v133)(v153, v61, v151);
      (*v132)(v154, v62, v152);
      static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)(v72, v160, v156, (uint64_t)v131);
      uint64_t v74 = (*(uint64_t (**)(uint64_t, uint64_t))(v156 + 24))(v160, v156);
      uint64_t v75 = v65;
      uint64_t v141 = v65;
      *(void *)&long long v197 = v65;
      uint64_t v76 = v145;
      *((void *)&v197 + 1) = v145;
      uint64_t v77 = v143;
      *(void *)&long long v198 = v143;
      *((void *)&v198 + 1) = v67;
      *(void *)&long long v199 = v68;
      uint64_t v78 = v68;
      *((void *)&v199 + 1) = v69;
      uint64_t v79 = v146;
      *(void *)&long long v200 = v146;
      uint64_t v80 = v144;
      *((void *)&v200 + 1) = v144;
      *(void *)&long long v201 = v74;
      *((void *)&v201 + 1) = v81;
      static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)(v73, v161, v157, (uint64_t)v129);
      uint64_t v82 = (*(uint64_t (**)(uint64_t, uint64_t))(v157 + 24))(v161, v157);
      *(void *)&long long v187 = v75;
      *((void *)&v187 + 1) = v76;
      uint64_t v188 = v77;
      uint64_t v83 = v77;
      uint64_t v189 = v67;
      uint64_t v84 = v78;
      uint64_t v190 = v78;
      uint64_t v85 = v142;
      uint64_t v191 = v142;
      uint64_t v192 = v79;
      uint64_t v193 = v80;
      uint64_t v194 = v82;
      uint64_t v195 = v86;
      uint64_t v87 = v155;
      static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)(v153, v155, v158, (uint64_t)v127);
      uint64_t v88 = (*(uint64_t (**)(uint64_t, uint64_t))(v158 + 24))(v87, v158);
      uint64_t v89 = v141;
      *(void *)&long long v177 = v141;
      *((void *)&v177 + 1) = v76;
      uint64_t v178 = v83;
      uint64_t v179 = v67;
      uint64_t v180 = v84;
      uint64_t v181 = v85;
      long long v182 = v79;
      uint64_t v183 = v80;
      uint64_t v184 = v88;
      uint64_t v185 = v90;
      static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)(v154, v162, v159, (uint64_t)v125);
      uint64_t v91 = (*(uint64_t (**)(uint64_t, uint64_t))(v159 + 24))(v162, v159);
      *(void *)&long long v167 = v89;
      *((void *)&v167 + 1) = v76;
      uint64_t v168 = v83;
      uint64_t v169 = v67;
      uint64_t v170 = v84;
      uint64_t v171 = v85;
      long long v172 = v79;
      uint64_t v173 = v80;
      uint64_t v174 = v91;
      uint64_t v175 = v92;
      long long v146 = (uint64_t *)type metadata accessor for AttributedString.SingleAttributeTransformer();
      uint64_t v93 = *(v146 - 1);
      (*(void (**)(long long *, long long *, uint64_t *))(v93 + 16))(v166, &v197, v146);
      uint64_t v94 = type metadata accessor for AttributedString.SingleAttributeTransformer();
      uint64_t v95 = *(void *)(v94 - 8);
      (*(void (**)(long long *, long long *, uint64_t))(v95 + 16))(v165, &v187, v94);
      uint64_t v96 = v155;
      uint64_t v97 = type metadata accessor for AttributedString.SingleAttributeTransformer();
      uint64_t v98 = *(void *)(v97 - 8);
      char v99 = *(void (**)(long long *, long long *, uint64_t))(v98 + 16);
      uint64_t v143 = v97;
      v99(v164, &v177, v97);
      uint64_t v100 = type metadata accessor for AttributedString.SingleAttributeTransformer();
      uint64_t v101 = *(void *)(v100 - 8);
      uint64_t v102 = *(void (**)(long long *, long long *, uint64_t))(v101 + 16);
      uint64_t v145 = v100;
      v102(v163, &v167, v100);
      v136(v166, v165, v164, v163);
      AttributedString.applyRemovals<A>(withOriginal:andChanged:to:key:)(&v197, v166, (uint64_t)v226, v103, v160, v156);
      AttributedString.applyRemovals<A>(withOriginal:andChanged:to:key:)(&v187, v165, (uint64_t)v226, v104, v161, v157);
      AttributedString.applyRemovals<A>(withOriginal:andChanged:to:key:)(&v177, v164, (uint64_t)v226, v105, v96, v158);
      AttributedString.applyRemovals<A>(withOriginal:andChanged:to:key:)(&v167, v163, (uint64_t)v226, v106, v162, v159);
      AttributedString.applyChanges<A>(withOriginal:andChanged:to:key:)((uint64_t)&v197, v166, v226, v107, v160, v156);
      AttributedString.applyChanges<A>(withOriginal:andChanged:to:key:)((uint64_t)&v187, v165, v226, v108, v161, v157);
      AttributedString.applyChanges<A>(withOriginal:andChanged:to:key:)((uint64_t)&v177, v164, v226, v109, v96, v158);
      AttributedString.applyChanges<A>(withOriginal:andChanged:to:key:)((uint64_t)&v167, v163, v226, v110, v162, v159);
      uint64_t v111 = *(void (**)(long long *, uint64_t))(v101 + 8);
      v111(v163, v100);
      uint64_t v112 = *(void (**)(long long *, uint64_t))(v98 + 8);
      uint64_t v144 = v98 + 8;
      v112(v164, v97);
      uint64_t v113 = *(void (**)(long long *, uint64_t))(v95 + 8);
      uint64_t v142 = v95 + 8;
      v113(v165, v94);
      uint64_t v114 = *(void (**)(long long *, uint64_t *))(v93 + 8);
      uint64_t v115 = v146;
      v114(v166, v146);
      uint64_t v116 = v157;
      v111(&v167, v145);
      uint64_t v51 = v156;
      v112(&v177, v143);
      uint64_t v52 = v162;
      uint64_t v19 = v160;
      uint64_t v117 = v94;
      uint64_t v54 = v116;
      v113(&v187, v117);
      uint64_t v53 = v158;
      a4 = v161;
      v114(&v197, v115);
      (*v123)(v154, v152);
      (*v122)(v153, v151);
      (*v121)(v149, v150);
      (*v120)(v147, v148);
    }
    v209[0] = v223[0];
    v209[1] = v223[1];
    v209[2] = v224;
    uint64_t v210 = v225;
    long long v205 = v219;
    long long v206 = v220;
    long long v207 = v221;
    long long v208 = v222;
    long long v201 = v215;
    long long v202 = v216;
    long long v203 = v217;
    long long v204 = v218;
    long long v197 = v211;
    long long v198 = v212;
    long long v199 = v213;
    long long v200 = v214;
    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v197);
    uint64_t result = swift_release();
    *uint64_t v118 = v226[0];
  }
  return result;
}

uint64_t AttributedString.transformingAttributes<A, B, C, D, E>(_:_:_:_:_:_:)@<X0>(void (*a1)(long long *, long long *, long long *, long long *, long long *)@<X5>, uint64_t a2@<X6>, uint64_t a3@<X7>, void *a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v151 = a1;
  uint64_t v152 = a2;
  uint64_t v129 = a4;
  uint64_t v183 = a10;
  uint64_t v182 = a13;
  uint64_t v185 = a8;
  swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v177 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v174 = (uint64_t)&v128 - v15;
  uint64_t v181 = a12;
  *((void *)&v176 + 1) = a7;
  swift_getAssociatedTypeWitness();
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v164 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v173 = (uint64_t)&v128 - v17;
  uint64_t v180 = a11;
  *(void *)&long long v176 = a6;
  swift_getAssociatedTypeWitness();
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v163 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v172 = (uint64_t)&v128 - v19;
  uint64_t v175 = a5;
  swift_getAssociatedTypeWitness();
  uint64_t v20 = type metadata accessor for Optional();
  uint64_t v162 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v171 = (uint64_t)&v128 - v21;
  uint64_t v179 = a9;
  swift_getAssociatedTypeWitness();
  uint64_t v22 = type metadata accessor for Optional();
  uint64_t v161 = *(char **)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  long long v165 = (char *)&v128 - v24;
  uint64_t v166 = v23;
  *(void *)&long long v245 = v23;
  uint64_t v167 = v20;
  uint64_t v168 = v18;
  *((void *)&v245 + 1) = v20;
  *(void *)&long long v246 = v18;
  uint64_t v169 = v16;
  uint64_t v170 = v14;
  *((void *)&v246 + 1) = v16;
  *(void *)&long long v247 = v14;
  *((void *)&v247 + 1) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  uint64_t v25 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v25 - 8);
  uint64_t v154 = (uint64_t)&v128 - v26;
  uint64_t v27 = *(void *)v178;
  v260[0] = *(void *)v178;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    long long v28 = *(_OWORD *)(v27 + 32);
    v263[0] = *(_OWORD *)(v27 + 16);
    v263[1] = v28;
    v263[2] = *(_OWORD *)(v27 + 48);
    uint64_t v29 = *(void *)(v27 + 64);
    uint64_t v30 = *(void *)(v27 + 72);
    uint64_t v31 = *(void *)(v27 + 80);
    uint64_t v32 = *(void *)(v27 + 88);
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v263);
    swift_unknownObjectRetain();
    v260[0] = AttributedString.Guts.init(string:runs:)(v263, v29, v30, v31, v32);
    swift_release();
  }
  long long v33 = *(_OWORD *)(v27 + 32);
  v262[0] = *(_OWORD *)(v27 + 16);
  v262[1] = v33;
  v262[2] = *(_OWORD *)(v27 + 48);
  swift_retain();
  outlined retain of Locale((uint64_t)v262);
  uint64_t v34 = BigString.startIndex.getter();
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  outlined release of Locale((uint64_t)v262);
  long long v41 = *(_OWORD *)(v27 + 16);
  long long v42 = *(_OWORD *)(v27 + 48);
  v261[1] = *(_OWORD *)(v27 + 32);
  v261[2] = v42;
  v261[0] = v41;
  long long v43 = *(_OWORD *)(v27 + 16);
  v264[1] = *(_OWORD *)(v27 + 32);
  v264[2] = v42;
  v264[0] = v43;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v264, (uint64_t)v265);
  outlined retain of Locale((uint64_t)v265);
  uint64_t v44 = v36;
  uint64_t v45 = BigString.endIndex.getter();
  uint64_t v130 = v27;
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  outlined release of Locale((uint64_t)v261);
  uint64_t v160 = v34;
  uint64_t v178 = v40;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
  }
  else
  {
    v260[1] = v160;
    v260[2] = v44;
    v260[3] = v38;
    v260[4] = v178;
    v260[5] = v45;
    v260[6] = v47;
    v260[7] = v49;
    v260[8] = v51;
    AttributedString.Runs.init(_:in:)(v130, &v245);
    uint64_t v53 = v182;
    uint64_t v54 = v181;
    uint64_t v55 = v180;
    uint64_t v56 = v185;
    uint64_t v57 = v179;
    uint64_t v58 = v183;
    AttributedString.Runs.AttributesSlice5.init(runs:)((uint64_t)&v245, a3, v175, v176, *((uint64_t *)&v176 + 1), v179, v183, (uint64_t)&v231, v180, v181, v182);
    long long v251 = v237;
    long long v252 = v238;
    long long v247 = v233;
    long long v248 = v234;
    long long v249 = v235;
    long long v250 = v236;
    long long v245 = v231;
    long long v246 = v232;
    *(_OWORD *)((char *)v257 + 8) = *(_OWORD *)((char *)v243 + 8);
    uint64_t v153 = TupleTypeMetadata - 8;
    long long v253 = v239;
    long long v149 = (void (**)(uint64_t, uint64_t, uint64_t))(v162 + 32);
    uint64_t v150 = (void (**)(char *))(v161 + 32);
    uint64_t v148 = (void (**)(uint64_t, uint64_t, uint64_t))(v163 + 32);
    long long v147 = (void (**)(uint64_t, uint64_t, uint64_t))(v164 + 32);
    long long v146 = (void (**)(uint64_t, uint64_t, uint64_t))(v177 + 32);
    long long v254 = v240;
    uint64_t v145 = &v236;
    uint64_t v144 = v57 + 24;
    uint64_t v143 = &v230;
    uint64_t v142 = v58 + 24;
    uint64_t v141 = &v220;
    uint64_t v140 = v55 + 24;
    *(void *)&v257[0] = *(void *)&v243[0];
    *((void *)&v257[1] + 1) = *((void *)&v239 + 1);
    uint64_t v138 = v54 + 24;
    uint64_t v139 = &v210;
    long long v258 = v240;
    uint64_t v136 = v53 + 24;
    uint64_t v137 = &v200;
    uint64_t v134 = (void (**)(uint64_t, uint64_t))(v164 + 8);
    long long v135 = (void (**)(uint64_t, uint64_t))(v177 + 8);
    long long v255 = v241;
    long long v256 = v242;
    uint64_t v132 = (void (**)(uint64_t, uint64_t))(v162 + 8);
    uint64_t v133 = (void (**)(uint64_t, uint64_t))(v163 + 8);
    long long v131 = (void (**)(char *, uint64_t))(v161 + 8);
    uint64_t v259 = v241;
    uint64_t v184 = a3;
    while (1)
    {
      *(void *)&long long v231 = a3;
      *((void *)&v231 + 1) = v175;
      long long v232 = v176;
      *(void *)&long long v233 = v56;
      *((void *)&v233 + 1) = v57;
      *(void *)&long long v234 = v58;
      *((void *)&v234 + 1) = v55;
      *(void *)&long long v235 = v54;
      *((void *)&v235 + 1) = v182;
      uint64_t v59 = (void *)type metadata accessor for AttributedString.Runs.AttributesSlice5.Iterator();
      uint64_t v60 = v154;
      AttributedString.Runs.AttributesSlice5.Iterator.next()(v59, v154);
      uint64_t v61 = (int *)TupleTypeMetadata;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 48))(v60, 1, TupleTypeMetadata) == 1)break; {
      uint64_t v62 = v61;
      }
      uint64_t v63 = v60 + v61[12];
      uint64_t v64 = v60;
      uint64_t v65 = v60 + v62[16];
      uint64_t v66 = v64 + v62[20];
      uint64_t v163 = v64 + v62[24];
      uint64_t v67 = (uint64_t *)(v64 + v62[28]);
      uint64_t v68 = *v67;
      uint64_t v164 = v67[1];
      uint64_t v69 = v67[2];
      uint64_t v70 = v67[3];
      uint64_t v72 = v67[4];
      uint64_t v71 = v67[5];
      uint64_t v73 = v67[7];
      uint64_t v177 = v67[6];
      uint64_t v178 = v71;
      uint64_t v74 = (uint64_t)v165;
      (*v150)(v165);
      (*v149)(v171, v63, v167);
      (*v148)(v172, v65, v168);
      (*v147)(v173, v66, v169);
      (*v146)(v174, v163, v170);
      static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)(v74, v184, v179, (uint64_t)v145);
      uint64_t v75 = (*(uint64_t (**)(uint64_t, uint64_t))(v179 + 24))(v184, v179);
      uint64_t v76 = v68;
      *(void *)&long long v231 = v68;
      uint64_t v77 = v164;
      *((void *)&v231 + 1) = v164;
      uint64_t v162 = v69;
      *(void *)&long long v232 = v69;
      *((void *)&v232 + 1) = v70;
      *(void *)&long long v233 = v72;
      uint64_t v79 = v177;
      uint64_t v78 = v178;
      *((void *)&v233 + 1) = v178;
      *(void *)&long long v234 = v177;
      *((void *)&v234 + 1) = v73;
      *(void *)&long long v235 = v75;
      *((void *)&v235 + 1) = v80;
      uint64_t v81 = v175;
      static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)(v171, v175, v183, (uint64_t)v143);
      uint64_t v82 = (*(uint64_t (**)(uint64_t, uint64_t))(v183 + 24))(v81, v183);
      *(void *)&long long v221 = v76;
      *((void *)&v221 + 1) = v77;
      uint64_t v222 = v69;
      uint64_t v83 = v70;
      uint64_t v223 = v70;
      uint64_t v224 = v72;
      uint64_t v225 = v78;
      uint64_t v226 = v79;
      uint64_t v84 = v79;
      uint64_t v85 = v73;
      uint64_t v227 = v73;
      uint64_t v228 = v82;
      uint64_t v229 = v86;
      uint64_t v87 = v176;
      static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)(v172, v176, v180, (uint64_t)v141);
      uint64_t v88 = (*(uint64_t (**)(uint64_t, uint64_t))(v180 + 24))(v87, v180);
      uint64_t v89 = v76;
      *(void *)&long long v211 = v76;
      *((void *)&v211 + 1) = v77;
      uint64_t v90 = v162;
      uint64_t v212 = v162;
      uint64_t v213 = v83;
      uint64_t v214 = v72;
      uint64_t v215 = v78;
      uint64_t v216 = v84;
      uint64_t v217 = v85;
      uint64_t v218 = v88;
      uint64_t v219 = v91;
      uint64_t v92 = *((void *)&v176 + 1);
      static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)(v173, *((uint64_t *)&v176 + 1), v181, (uint64_t)v139);
      uint64_t v93 = (*(uint64_t (**)(uint64_t, uint64_t))(v181 + 24))(v92, v181);
      *(void *)&long long v201 = v89;
      *((void *)&v201 + 1) = v77;
      uint64_t v202 = v90;
      uint64_t v203 = v83;
      uint64_t v204 = v72;
      uint64_t v205 = v78;
      uint64_t v206 = v84;
      uint64_t v207 = v85;
      uint64_t v208 = v93;
      uint64_t v209 = v94;
      static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)(v174, v185, v182, (uint64_t)v137);
      uint64_t v95 = (*(uint64_t (**)(uint64_t, uint64_t))(v182 + 24))(v185, v182);
      *(void *)&long long v191 = v89;
      *((void *)&v191 + 1) = v77;
      uint64_t v192 = v90;
      uint64_t v193 = v83;
      uint64_t v194 = v72;
      uint64_t v195 = v78;
      uint64_t v196 = v84;
      uint64_t v197 = v85;
      uint64_t v198 = v95;
      uint64_t v199 = v96;
      uint64_t v164 = type metadata accessor for AttributedString.SingleAttributeTransformer();
      uint64_t v178 = *(void *)(v164 - 8);
      (*(void (**)(long long *, long long *, uint64_t))(v178 + 16))(v190, &v231, v164);
      uint64_t v97 = v175;
      uint64_t v163 = type metadata accessor for AttributedString.SingleAttributeTransformer();
      uint64_t v177 = *(void *)(v163 - 8);
      (*(void (**)(long long *, long long *, uint64_t))(v177 + 16))(v189, &v221, v163);
      uint64_t v98 = v176;
      uint64_t v162 = type metadata accessor for AttributedString.SingleAttributeTransformer();
      uint64_t v99 = *(void *)(v162 - 8);
      (*(void (**)(long long *, long long *, uint64_t))(v99 + 16))(v188, &v211, v162);
      uint64_t v100 = *((void *)&v176 + 1);
      uint64_t v101 = type metadata accessor for AttributedString.SingleAttributeTransformer();
      uint64_t v102 = *(void *)(v101 - 8);
      uint64_t v103 = *(void (**)(long long *, long long *, uint64_t))(v102 + 16);
      uint64_t v157 = v101;
      v103(v187, &v201, v101);
      uint64_t v104 = type metadata accessor for AttributedString.SingleAttributeTransformer();
      uint64_t v105 = *(void *)(v104 - 8);
      (*(void (**)(long long *, long long *, uint64_t))(v105 + 16))(v186, &v191, v104);
      v151(v190, v189, v188, v187, v186);
      AttributedString.applyRemovals<A>(withOriginal:andChanged:to:key:)(&v231, v190, (uint64_t)v260, v106, v184, v179);
      AttributedString.applyRemovals<A>(withOriginal:andChanged:to:key:)(&v221, v189, (uint64_t)v260, v107, v97, v183);
      AttributedString.applyRemovals<A>(withOriginal:andChanged:to:key:)(&v211, v188, (uint64_t)v260, v108, v98, v180);
      AttributedString.applyRemovals<A>(withOriginal:andChanged:to:key:)(&v201, v187, (uint64_t)v260, v109, v100, v181);
      AttributedString.applyRemovals<A>(withOriginal:andChanged:to:key:)(&v191, v186, (uint64_t)v260, v110, v185, v182);
      AttributedString.applyChanges<A>(withOriginal:andChanged:to:key:)((uint64_t)&v231, v190, v260, v111, v184, v179);
      AttributedString.applyChanges<A>(withOriginal:andChanged:to:key:)((uint64_t)&v221, v189, v260, v112, v97, v183);
      AttributedString.applyChanges<A>(withOriginal:andChanged:to:key:)((uint64_t)&v211, v188, v260, v113, v98, v180);
      AttributedString.applyChanges<A>(withOriginal:andChanged:to:key:)((uint64_t)&v201, v187, v260, v114, v100, v181);
      AttributedString.applyChanges<A>(withOriginal:andChanged:to:key:)((uint64_t)&v191, v186, v260, v115, v185, v182);
      uint64_t v116 = *(char **)(v105 + 8);
      uint64_t v160 = v105 + 8;
      uint64_t v161 = v116;
      uint64_t v117 = v104;
      ((void (*)(long long *, uint64_t))v116)(v186, v104);
      uint64_t v118 = *(void (**)(long long *, uint64_t))(v102 + 8);
      uint64_t v158 = v102 + 8;
      uint64_t v159 = v118;
      v118(v187, v101);
      uint64_t v119 = *(void (**)(long long *, uint64_t))(v99 + 8);
      uint64_t v156 = v99 + 8;
      uint64_t v120 = v162;
      v119(v188, v162);
      uint64_t v121 = *(void (**)(long long *, uint64_t))(v177 + 8);
      v177 += 8;
      uint64_t v122 = v163;
      v121(v189, v163);
      uint64_t v123 = *(void (**)(long long *, uint64_t))(v178 + 8);
      v178 += 8;
      uint64_t v124 = v164;
      v123(v190, v164);
      uint64_t v125 = v117;
      uint64_t v58 = v183;
      ((void (*)(long long *, uint64_t))v161)(&v191, v125);
      uint64_t v55 = v180;
      v159(&v201, v157);
      uint64_t v126 = v181;
      v119(&v211, v120);
      uint64_t v57 = v179;
      v121(&v221, v122);
      a3 = v184;
      uint64_t v127 = v124;
      uint64_t v54 = v126;
      v123(&v231, v127);
      uint64_t v56 = v185;
      (*v135)(v174, v170);
      (*v134)(v173, v169);
      (*v133)(v172, v168);
      (*v132)(v171, v167);
      (*v131)(v165, v166);
    }
    v243[0] = v257[0];
    v243[1] = v257[1];
    v243[2] = v258;
    uint64_t v244 = v259;
    long long v239 = v253;
    long long v240 = v254;
    long long v241 = v255;
    long long v242 = v256;
    long long v235 = v249;
    long long v236 = v250;
    long long v237 = v251;
    long long v238 = v252;
    long long v231 = v245;
    long long v232 = v246;
    long long v233 = v247;
    long long v234 = v248;
    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v231);
    uint64_t result = swift_release();
    *uint64_t v129 = v260[0];
  }
  return result;
}

uint64_t AttributedString.transformingAttributes<A>(_:_:)@<X0>(void *a1@<X0>, void (*a2)(long long *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return AttributedString.transformingAttributes<A>(_:_:)(a2, a3, *(void *)(*MEMORY[0x1E4FBC5F0] + *a1 + 8), a4, a5);
}

uint64_t AttributedString.transformingAttributes<A, B>(_:_:_:)@<X0>(void *a1@<X0>, void *a2@<X1>, void (*a3)(long long *, long long *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  return AttributedString.transformingAttributes<A, B>(_:_:_:)(a3, a4, *(void *)(*a1 + *MEMORY[0x1E4FBC5F0] + 8), *(void *)(*a2 + *MEMORY[0x1E4FBC5F0] + 8), a5, a6, a7);
}

uint64_t AttributedString.transformingAttributes<A, B, C>(_:_:_:_:)@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void (*a4)(long long *, long long *, long long *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  return AttributedString.transformingAttributes<A, B, C>(_:_:_:_:)(a4, a5, *(void *)(*a1 + *MEMORY[0x1E4FBC5F0] + 8), *(void *)(*a2 + *MEMORY[0x1E4FBC5F0] + 8), *(void *)(*a3 + *MEMORY[0x1E4FBC5F0] + 8), a9, a6, a7, a8);
}

uint64_t AttributedString.transformingAttributes<A, B, C, D>(_:_:_:_:_:)@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void (*a5)(long long *, long long *, long long *, long long *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11)
{
  return AttributedString.transformingAttributes<A, B, C, D>(_:_:_:_:_:)(a5, a6, *(void *)(*a1 + *MEMORY[0x1E4FBC5F0] + 8), *(void *)(*a2 + *MEMORY[0x1E4FBC5F0] + 8), a9, *(void *)(*a3 + *MEMORY[0x1E4FBC5F0] + 8), *(void *)(*a4 + *MEMORY[0x1E4FBC5F0] + 8), a7, a8, a10, a11);
}

uint64_t AttributedString.transformingAttributes<A, B, C, D, E>(_:_:_:_:_:_:)@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void (*a6)(long long *, long long *, long long *, long long *, long long *)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return AttributedString.transformingAttributes<A, B, C, D, E>(_:_:_:_:_:_:)(a6, a7, *(void *)(*a1 + *MEMORY[0x1E4FBC5F0] + 8), a9, *(void *)(*a2 + *MEMORY[0x1E4FBC5F0] + 8), *(void *)(*a3 + *MEMORY[0x1E4FBC5F0] + 8), *(void *)(*a4 + *MEMORY[0x1E4FBC5F0] + 8), *(void *)(*a5 + *MEMORY[0x1E4FBC5F0] + 8), a8, a10, a11, a12, a13);
}

uint64_t specialized AttributedString.SingleAttributeTransformer.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v23 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a1, v6, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v31 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v9, AssociatedTypeWitness);
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v18(v13, v17, AssociatedTypeWitness);
    *((void *)&v25 + 1) = AssociatedTypeWitness;
    *(void *)uint64_t v26 = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v24);
    v18((char *)boxed_opaque_existential_1, v13, AssociatedTypeWitness);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v4 + 32))(&v27, v3, v4);
    *(_OWORD *)&v26[8] = v27;
    v26[24] = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 40))(v3, v4) & 1;
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 48))(v3, v4);
    uint64_t v21 = *(void (**)(char *, uint64_t))(v10 + 8);
    v21(v13, AssociatedTypeWitness);
    uint64_t v31 = v20;
    long long v29 = *(_OWORD *)v26;
    long long v30 = *(_OWORD *)&v26[16];
    long long v27 = v24;
    long long v28 = v25;
    v21(v17, AssociatedTypeWitness);
  }
  return outlined assign with take of AttributedString._AttributeValue?((uint64_t)&v27, v23 + 80);
}

uint64_t outlined assign with take of AttributedString._AttributeValue?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of AttributedString._AttributeValue?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AttributedString.SingleAttributeTransformer()
{
  return __swift_instantiateGenericMetadata();
}

void *specialized RangeReplaceableCollection.init(_contents:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 1;
  if (a2 != 1) {
    uint64_t v7 = 2;
  }
  if (a4 == 1) {
    int64_t v8 = a2 != 1;
  }
  else {
    int64_t v8 = v7;
  }
  if (v8)
  {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0, MEMORY[0x1E4FBC860]);
    uint64_t v11 = v10;
    if (a2 != 1)
    {
      unint64_t v12 = v10[2];
      unint64_t v13 = v10[3];
      swift_bridgeObjectRetain();
      if (v12 >= v13 >> 1) {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v12 + 1, 1, v11);
      }
      v11[2] = v12 + 1;
      uint64_t v14 = &v11[2 * v12];
      v14[4] = a1;
      v14[5] = a2;
    }
    if (a4 != 1)
    {
      unint64_t v16 = v11[2];
      unint64_t v15 = v11[3];
      if (v16 >= v15 >> 1) {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v11);
      }
      v11[2] = v16 + 1;
      uint64_t v17 = &v11[2 * v16];
      v17[4] = a3;
      void v17[5] = a4;
    }
  }
  else
  {
    outlined consume of AttributedString.AttributeRunBoundaries?(a3, a4);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v11;
}

uint64_t sub_181B8ACA8@<X0>(uint64_t a1@<X8>)
{
  return AttributedString.SingleAttributeTransformer.value.getter(a1);
}

uint64_t sub_181B8ACE4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AttributedString.SingleAttributeTransformer();
  return specialized AttributedString.SingleAttributeTransformer.value.setter(a1, v2);
}

uint64_t sub_181B8AD24()
{
  return 16;
}

__n128 sub_181B8AD30(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t destroy for AttributedString.SingleAttributeTransformer(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 104))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 80);
    if (*(void *)(a1 + 128) != 1) {
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for AttributedString.SingleAttributeTransformer(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = a2 + 80;
  uint64_t v8 = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = v8;
    *(void *)(a1 + 112) = v9;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8))(a1 + 80, v7, v8);
    uint64_t v10 = (_OWORD *)(a2 + 120);
    uint64_t v11 = *(void *)(a2 + 128);
    if (v11 == 1)
    {
      *(_OWORD *)(a1 + 120) = *v10;
    }
    else
    {
      *(void *)(a1 + 120) = *(void *)v10;
      *(void *)(a1 + 128) = v11;
      swift_bridgeObjectRetain();
    }
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v12 = *(_OWORD *)(v7 + 48);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(v7 + 32);
    *(_OWORD *)(a1 + 128) = v12;
    *(void *)(a1 + 144) = *(void *)(v7 + 64);
    long long v13 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v7;
    *(_OWORD *)(a1 + 96) = v13;
  }
  return a1;
}

uint64_t assignWithCopy for AttributedString.SingleAttributeTransformer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (_OWORD *)(a1 + 80);
  uint64_t v7 = (_OWORD *)(a2 + 80);
  uint64_t v8 = *(void *)(a2 + 104);
  if (*(void *)(a1 + 104))
  {
    if (v8)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 80), (uint64_t *)(a2 + 80));
      uint64_t v9 = *(void *)(a2 + 128);
      if (*(void *)(a1 + 128) == 1)
      {
        if (v9 != 1)
        {
          *(void *)(a1 + 120) = *(void *)(a2 + 120);
          *(void *)(a1 + 128) = *(void *)(a2 + 128);
          swift_bridgeObjectRetain();
LABEL_17:
          *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
          *(void *)(a1 + 144) = *(void *)(a2 + 144);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          return a1;
        }
      }
      else
      {
        if (v9 != 1)
        {
          *(void *)(a1 + 120) = *(void *)(a2 + 120);
          *(void *)(a1 + 128) = *(void *)(a2 + 128);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          goto LABEL_17;
        }
        outlined destroy of AttributedString.AttributeRunBoundaries(a1 + 120);
      }
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      goto LABEL_17;
    }
    outlined destroy of AttributedString._AttributeValue(a1 + 80);
    _OWORD *v6 = *v7;
    long long v11 = *(_OWORD *)(a2 + 112);
    long long v10 = *(_OWORD *)(a2 + 128);
    long long v12 = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)(a1 + 112) = v11;
    *(_OWORD *)(a1 + 128) = v10;
    *(_OWORD *)(a1 + 96) = v12;
  }
  else if (v8)
  {
    *(void *)(a1 + 104) = v8;
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 80, a2 + 80);
    if (*(void *)(a2 + 128) == 1)
    {
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    }
    else
    {
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
    }
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    swift_bridgeObjectRetain();
  }
  else
  {
    _OWORD *v6 = *v7;
    long long v13 = *(_OWORD *)(a2 + 96);
    long long v14 = *(_OWORD *)(a2 + 112);
    long long v15 = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)(a1 + 112) = v14;
    *(_OWORD *)(a1 + 128) = v15;
    *(_OWORD *)(a1 + 96) = v13;
  }
  return a1;
}

uint64_t outlined destroy of AttributedString.AttributeRunBoundaries(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for AttributedString.SingleAttributeTransformer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  long long v5 = (_OWORD *)(a1 + 80);
  uint64_t v6 = (_OWORD *)(a2 + 80);
  if (*(void *)(a1 + 104))
  {
    if (*(void *)(a2 + 104))
    {
      __swift_destroy_boxed_opaque_existential_1(a1 + 80);
      long long v7 = *(_OWORD *)(a2 + 96);
      *long long v5 = *v6;
      *(_OWORD *)(a1 + 96) = v7;
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      long long v8 = (void *)(a2 + 120);
      if (*(void *)(a1 + 128) != 1)
      {
        uint64_t v9 = *(void *)(a2 + 128);
        if (v9 != 1)
        {
          *(void *)(a1 + 120) = *v8;
          *(void *)(a1 + 128) = v9;
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
        outlined destroy of AttributedString.AttributeRunBoundaries(a1 + 120);
      }
      *(_OWORD *)(a1 + 120) = *(_OWORD *)v8;
LABEL_10:
      *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of AttributedString._AttributeValue(a1 + 80);
  }
  long long v10 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v10;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  long long v11 = *(_OWORD *)(a2 + 96);
  *long long v5 = *v6;
  *(_OWORD *)(a1 + 96) = v11;
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.SingleAttributeTransformer(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.SingleAttributeTransformer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 72) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t Locale.Language.isEquivalent(to:)()
{
  uint64_t v0 = Locale.Language.maximalIdentifier.getter();
  uint64_t v2 = v1;
  if (v0 == Locale.Language.maximalIdentifier.getter() && v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t Locale.LanguageCode.identifier(_:)(unsigned char *a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  if (*a1)
  {
    uint64_t v4 = String.utf8CString.getter() + 32;
    uint64_t ISO3Language = uloc_getISO3Language();
    if (!ISO3Language)
    {
      swift_release();
      return 0;
    }
    if (ISO3Language == v4)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v2 = String.init(cString:)();
      unint64_t v3 = v6;
    }
    swift_release();
    uint64_t v9 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v9 = v2 & 0xFFFFFFFFFFFFLL;
    }
    if (!v9)
    {
LABEL_16:
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v2 = specialized _withFixedCharBuffer(size:_:)(257);
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v8)
    {
      if (one-time initialization token for _isoLanguageCodeStrings != -1) {
        swift_once();
      }
      if ((specialized Sequence<>.contains(_:)(v2, v8, (void *)static Locale.LanguageCode._isoLanguageCodeStrings) & 1) == 0) {
        goto LABEL_16;
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Locale.LanguageCode.isISOLanguage.getter()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  if (one-time initialization token for _isoLanguageCodeStrings != -1) {
    swift_once();
  }
  uint64_t v3 = static Locale.LanguageCode._isoLanguageCodeStrings;
  uint64_t v4 = *(void *)(static Locale.LanguageCode._isoLanguageCodeStrings + 16);
  if (!v4) {
    goto LABEL_18;
  }
  if (*(void *)(static Locale.LanguageCode._isoLanguageCodeStrings + 32) == v2
    && *(void *)(static Locale.LanguageCode._isoLanguageCodeStrings + 40) == v1)
  {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v4 == 1)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v11 = specialized _withFixedCharBuffer(size:_:)(257);
    uint64_t v13 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v13) {
      return 0;
    }
    char v14 = specialized Sequence<>.contains(_:)(v11, v13, (void *)static Locale.LanguageCode._isoLanguageCodeStrings);
    swift_bridgeObjectRelease();
    return (v14 & 1) != 0;
  }
  uint64_t v7 = (void *)(v3 + 56);
  uint64_t v8 = 1;
  while (1)
  {
    uint64_t v9 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      break;
    }
    if (*(v7 - 1) == v2 && *v7 == v1) {
      return 1;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      return 1;
    }
    v7 += 2;
    ++v8;
    if (v9 == v4) {
      goto LABEL_18;
    }
  }
  __break(1u);
  return result;
}

uint64_t static Locale.LanguageCode.isoLanguageCodes.getter()
{
  if (one-time initialization token for _isoLanguageCodeStrings != -1) {
    swift_once();
  }
  uint64_t v0 = static Locale.LanguageCode._isoLanguageCodeStrings;
  int64_t v1 = *(void *)(static Locale.LanguageCode._isoLanguageCodeStrings + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v11;
    uint64_t v3 = (void **)(v0 + 40);
    do
    {
      uint64_t v4 = (uint64_t)*(v3 - 1);
      long long v5 = *v3;
      Swift::String v6 = String.lowercased()();
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      }
      v3 += 2;
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = (Swift::String *)(v11 + 32 * v8);
      v9[2]._uint64_t countAndFlagsBits = v4;
      v9[2]._unint64_t object = v5;
      v9[3] = v6;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  return v2;
}

void *one-time initialization function for _isoLanguageCodeStrings(uint64_t a1)
{
  return one-time initialization function for _isoLanguageCodeStrings(a1, MEMORY[0x1E4FBA680], &static Locale.LanguageCode._isoLanguageCodeStrings);
}

BOOL Locale.Script.isISOScript.getter()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.utf8CString.getter();
  int Code = uscript_getCode();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Code > 0 && v2 != -1;
}

BOOL Locale.Region.isISORegion.getter()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v4 = 0;
  uint64_t v0 = String.utf8CString.getter();
  uint64_t v1 = MEMORY[0x18530A2F0](v0 + 32, &v4);
  swift_release();
  return v4 < 1 && v1 != 0;
}

uint64_t Locale.Region.subRegions.getter()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v15 = 0;
  uint64_t v0 = String.utf8CString.getter();
  uint64_t v1 = MEMORY[0x18530A2F0](v0 + 32, &v15);
  swift_release();
  if (v15 > 0 || v1 == 0) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t ContainedRegions = uregion_getContainedRegions();
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v15 <= 0 && ContainedRegions != 0)
  {
    uint64_t v6 = ContainedRegions;
    type metadata accessor for ICU.Enumerator();
    *(void *)(swift_initStackObject() + 16) = v6;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
    while (uenum_next())
    {
      uint64_t v7 = String.init(cString:)();
      uint64_t v9 = v8;
      Swift::String v10 = String.uppercased()();
      unint64_t v12 = *(void *)(v3 + 16);
      unint64_t v11 = *(void *)(v3 + 24);
      if (v12 >= v11 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
      }
      *(void *)(v3 + 16) = v12 + 1;
      uint64_t v13 = (Swift::String *)(v3 + 32 * v12);
      v13[2]._uint64_t countAndFlagsBits = v7;
      v13[2]._unint64_t object = v9;
      v13[3] = v10;
    }
    swift_release();
  }
  return v3;
}

uint64_t Locale.Region.containingRegion.getter@<X0>(Swift::String *a1@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v10 = 0;
  uint64_t v2 = String.utf8CString.getter();
  uint64_t v3 = MEMORY[0x18530A2F0](v2 + 32, &v10);
  uint64_t result = swift_release();
  if (v10 <= 0 && v3 != 0)
  {
    uint64_t result = MEMORY[0x18530A2C0](v3);
    if (result)
    {
      uint64_t result = MEMORY[0x18530A2E0]();
      if (!result)
      {
        __break(1u);
        return result;
      }
      uint64_t result = MEMORY[0x185301F80]();
      if (v6)
      {
        uint64_t v7 = result;
        unint64_t v8 = v6;
        Swift::String v9 = String.uppercased()();
        uint64_t result = v9._countAndFlagsBits;
        a1->_uint64_t countAndFlagsBits = v7;
        a1->_unint64_t object = v8;
        a1[1] = v9;
        return result;
      }
    }
  }
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t Locale.Region.continent.getter@<X0>(Swift::String *a1@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v10 = 0;
  uint64_t v2 = String.utf8CString.getter();
  uint64_t v3 = MEMORY[0x18530A2F0](v2 + 32, &v10);
  uint64_t result = swift_release();
  if (v10 <= 0 && v3 != 0)
  {
    uint64_t result = MEMORY[0x18530A2D0](v3, 3);
    if (result)
    {
      uint64_t result = MEMORY[0x18530A2E0]();
      if (!result)
      {
        __break(1u);
        return result;
      }
      uint64_t result = MEMORY[0x185301F80]();
      if (v6)
      {
        uint64_t v7 = result;
        unint64_t v8 = v6;
        Swift::String v9 = String.uppercased()();
        uint64_t result = v9._countAndFlagsBits;
        a1->_uint64_t countAndFlagsBits = v7;
        a1->_unint64_t object = v8;
        a1[1] = v9;
        return result;
      }
    }
  }
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t static Locale.Region.isoRegions.getter()
{
  if (one-time initialization token for _isoRegionCodes != -1) {
    swift_once();
  }
  uint64_t v0 = static Locale.Region._isoRegionCodes;
  int64_t v1 = *(void *)(static Locale.Region._isoRegionCodes + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v11;
    uint64_t v3 = (void **)(v0 + 40);
    do
    {
      uint64_t v4 = (uint64_t)*(v3 - 1);
      uint64_t v5 = *v3;
      Swift::String v6 = String.uppercased()();
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      }
      v3 += 2;
      *(void *)(v11 + 16) = v8 + 1;
      Swift::String v9 = (Swift::String *)(v11 + 32 * v8);
      v9[2]._uint64_t countAndFlagsBits = v4;
      v9[2]._unint64_t object = v5;
      v9[3] = v6;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  return v2;
}

void *one-time initialization function for isoCountries(uint64_t a1)
{
  return one-time initialization function for _isoLanguageCodeStrings(a1, MEMORY[0x1E4FBA678], &static Locale.Region.isoCountries);
}

void *one-time initialization function for _isoLanguageCodeStrings(uint64_t a1, uint64_t (*a2)(void), void *a3)
{
  uint64_t result = (void *)a2();
  if (result && (uint64_t v5 = result, (result = (void *)*result) != 0))
  {
    Swift::String v6 = v5 + 1;
    unint64_t v7 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      uint64_t v8 = String.init(cString:)();
      uint64_t v10 = v9;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      }
      unint64_t v12 = v7[2];
      unint64_t v11 = v7[3];
      if (v12 >= v11 >> 1) {
        unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v7);
      }
      id v7[2] = v12 + 1;
      uint64_t v13 = &v7[2 * v12];
      uint64_t v13[4] = v8;
      v13[5] = v10;
      char v14 = (void *)*v6++;
      uint64_t result = v14;
    }
    while (v14);
  }
  else
  {
    unint64_t v7 = (void *)MEMORY[0x1E4FBC860];
  }
  *a3 = v7;
  return result;
}

uint64_t one-time initialization function for _isoRegionCodes()
{
  uint64_t result = closure #1 in variable initialization expression of static Locale.Region._isoRegionCodes();
  static Locale.Region._isoRegionCodes = result;
  return result;
}

uint64_t closure #1 in variable initialization expression of static Locale.Region._isoRegionCodes()
{
  uint64_t v11 = MEMORY[0x1E4FBC860];
  uint64_t Available = uregion_getAvailable();
  if (Available)
  {
    uint64_t v1 = Available;
    type metadata accessor for ICU.Enumerator();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = v1;
    specialized Array.append<A>(contentsOf:)(inited);
  }
  uint64_t v3 = uregion_getAvailable();
  if (v3)
  {
    uint64_t v4 = v3;
    type metadata accessor for ICU.Enumerator();
    uint64_t v5 = swift_initStackObject();
    *(void *)(v5 + 16) = v4;
    specialized Array.append<A>(contentsOf:)(v5);
  }
  uint64_t v6 = uregion_getAvailable();
  if (v6)
  {
    type metadata accessor for ICU.Enumerator();
    uint64_t v7 = swift_initStackObject();
    *(void *)(v7 + 16) = v6;
    specialized Array.append<A>(contentsOf:)(v7);
  }
  uint64_t v8 = uregion_getAvailable();
  if (v8)
  {
    type metadata accessor for ICU.Enumerator();
    uint64_t v9 = swift_initStackObject();
    *(void *)(v9 + 16) = v8;
    specialized Array.append<A>(contentsOf:)(v9);
  }
  return v11;
}

uint64_t static Locale.Collation.availableCollations.getter()
{
  uint64_t KeywordValues = ucol_getKeywordValues();
  uint64_t v1 = MEMORY[0x1E4FBC860];
  if (KeywordValues)
  {
    uint64_t v2 = KeywordValues;
    type metadata accessor for ICU.Enumerator();
    *(void *)(swift_initStackObject() + 16) = v2;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
    while (uenum_next())
    {
      uint64_t v3 = String.init(cString:)();
      uint64_t v5 = v4;
      Swift::String v6 = String.lowercased()();
      unint64_t v8 = *(void *)(v1 + 16);
      unint64_t v7 = *(void *)(v1 + 24);
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      }
      *(void *)(v1 + 16) = v8 + 1;
      uint64_t v9 = (Swift::String *)(v1 + 32 * v8);
      v9[2]._uint64_t countAndFlagsBits = v3;
      v9[2]._unint64_t object = v5;
      v9[3] = v6;
    }
    swift_release();
  }
  return v1;
}

uint64_t static Locale.Collation.availableCollations(for:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = (void *)a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v8 = a1[6];
  unint64_t v7 = (void *)a1[7];
  uint64_t v9 = a1[8];
  uint64_t v10 = a1[9];
  uint64_t v12 = a1[10];
  uint64_t v11 = (void *)a1[11];
  uint64_t v29 = *a1;
  uint64_t v28 = v1;
  if (v1)
  {
    outlined copy of Locale.LanguageCode?(v2, v1);
    outlined copy of Locale.LanguageCode?(v5, v6);
    outlined copy of Locale.LanguageCode?(v9, v10);
    v13._uint64_t countAndFlagsBits = v3;
    v13._unint64_t object = v4;
    String.append(_:)(v13);
    if (!v6) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  outlined copy of Locale.LanguageCode?(v2, 0);
  outlined copy of Locale.LanguageCode?(v5, v6);
  outlined copy of Locale.LanguageCode?(v9, v10);
  if (v6)
  {
LABEL_3:
    v14._uint64_t countAndFlagsBits = 45;
    v14._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    v15._uint64_t countAndFlagsBits = v8;
    v15._unint64_t object = v7;
    String.append(_:)(v15);
  }
LABEL_4:
  if (v10)
  {
    v16._uint64_t countAndFlagsBits = 95;
    v16._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = v12;
    v17._unint64_t object = v11;
    String.append(_:)(v17);
  }
  outlined consume of Locale.LanguageCode?(v29, v28);
  outlined consume of Locale.LanguageCode?(v5, v6);
  outlined consume of Locale.LanguageCode?(v9, v10);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t KeywordValuesForLocale = ucol_getKeywordValuesForLocale();
  swift_release();
  uint64_t v19 = MEMORY[0x1E4FBC860];
  if (KeywordValuesForLocale)
  {
    type metadata accessor for ICU.Enumerator();
    *(void *)(swift_initStackObject() + 16) = KeywordValuesForLocale;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
    while (uenum_next())
    {
      uint64_t v20 = String.init(cString:)();
      uint64_t v22 = v21;
      Swift::String v23 = String.lowercased()();
      unint64_t v25 = *(void *)(v19 + 16);
      unint64_t v24 = *(void *)(v19 + 24);
      if (v25 >= v24 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
      }
      *(void *)(v19 + 16) = v25 + 1;
      uint64_t v26 = (Swift::String *)(v19 + 32 * v25);
      v26[2]._uint64_t countAndFlagsBits = v20;
      v26[2]._unint64_t object = v22;
      v26[3] = v23;
    }
    swift_release();
  }
  return v19;
}

uint64_t Locale.Currency.isISOCurrency.getter()
{
  lazy protocol witness table accessor for type Unicode.UTF16 and conformance Unicode.UTF16();
  String._slowWithCString<A, B>(encodedAs:_:)();
  return v1;
}

uint64_t closure #1 in Locale.Currency.isISOCurrency.getter@<X0>(BOOL *a1@<X8>)
{
  uint64_t result = ucurr_getNumericCode();
  *a1 = result != 0;
  return result;
}

uint64_t one-time initialization function for unknown()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static Locale.Currency.unknown = 7895160;
  *(void *)algn_1E8ED8488 = 0xE300000000000000;
  xmmword_1E8ED8490 = (__int128)v1;
  return result;
}

{
  Swift::String v0;
  uint64_t result;

  String.init<A>(_:)();
  uint64_t v0 = String._capitalized()();
  uint64_t result = swift_bridgeObjectRelease();
  static Locale.Script.unknown = 2054847066;
  *(void *)algn_1E8EDDBB8 = 0xE400000000000000;
  xmmword_1E8EDDBC0 = (__int128)v0;
  return result;
}

{
  uint64_t result;
  Swift::String v1;

  Swift::String v1 = String.uppercased()();
  uint64_t result = v1._countAndFlagsBits;
  static Locale.Region.unknown = 23130;
  *(void *)algn_1E8EDDBD8 = 0xE200000000000000;
  xmmword_1E8EDDBE0 = (__int128)v1;
  return result;
}

uint64_t static Locale.Currency.unknown.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for unknown != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E8ED8488;
  long long v3 = xmmword_1E8ED8490;
  *(void *)a1 = static Locale.Currency.unknown;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t static Locale.NumberingSystem.availableNumberingSystems.getter()
{
  uint64_t v0 = unumsys_openAvailableNames();
  uint64_t v1 = MEMORY[0x1E4FBC860];
  if (v0)
  {
    uint64_t v2 = v0;
    type metadata accessor for ICU.Enumerator();
    *(void *)(swift_initStackObject() + 16) = v2;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
    while (uenum_next())
    {
      uint64_t v3 = String.init(cString:)();
      uint64_t v5 = v4;
      Swift::String v6 = String.lowercased()();
      unint64_t v8 = *(void *)(v1 + 16);
      unint64_t v7 = *(void *)(v1 + 24);
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      }
      *(void *)(v1 + 16) = v8 + 1;
      uint64_t v9 = (Swift::String *)(v1 + 32 * v8);
      v9[2]._uint64_t countAndFlagsBits = v3;
      v9[2]._unint64_t object = v5;
      v9[3] = v6;
    }
    swift_release();
  }
  return v1;
}

uint64_t *static Locale.NumberingSystem.defaultNumberingSystem(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, Swift::String *a3@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  swift_bridgeObjectRetain();
  Locale.Components.init(identifier:)(a1, a2, v14);
  Swift::String v6 = String.lowercased()();
  outlined consume of Locale.LanguageCode?(v20, v21);
  __src[0] = v14[0];
  __src[1] = v14[1];
  __src[2] = v14[2];
  __src[3] = v14[3];
  __src[4] = v14[4];
  __src[5] = v14[5];
  LOBYTE(__src[6]) = v15;
  *(_OWORD *)((char *)&__src[6] + 8) = v16;
  *(_OWORD *)((char *)&__src[7] + 8) = v17;
  *(_OWORD *)((char *)&__src[8] + 8) = v18;
  *(_OWORD *)((char *)&__src[9] + 8) = v19;
  *(_OWORD *)((char *)&__src[10] + 8) = xmmword_182112820;
  *(Swift::String *)((char *)&__src[11] + 8) = v6;
  WORD4(__src[12]) = v22;
  __src[13] = v23;
  __src[14] = v24;
  __src[15] = v25;
  __src[16] = v26;
  __src[17] = v27;
  __src[18] = v28;
  __src[19] = v29;
  __src[20] = v30;
  __src[21] = v31;
  memcpy(__dst, __src, sizeof(__dst));
  Locale.Components.icuIdentifier.getter();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v7 = unumsys_open();
  swift_release();
  if (MEMORY[0x18530A100](v7))
  {
    uint64_t v8 = String.init(cString:)();
    uint64_t v10 = v9;
    Swift::String v11 = String.lowercased()();
    a3->_uint64_t countAndFlagsBits = v8;
    a3->_unint64_t object = v10;
    a3[1] = v11;
  }
  else
  {
    *a3 = 0u;
    a3[1] = 0u;
  }
  unumsys_close();
  return outlined release of Locale.Components((uint64_t *)__src);
}

uint64_t Locale.NumberingSystem.init(localeIdentifier:)@<X0>(uint64_t *a1@<X8>)
{
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v2 = unumsys_open();
  swift_release();
  if (!v2)
  {
    if (one-time initialization token for latn != -1) {
      swift_once();
    }
    uint64_t v4 = static Locale.NumberingSystem.latn;
    uint64_t v6 = qword_1E8EDDC38;
    unint64_t object = (void *)*((void *)&xmmword_1E8EDDC40 + 1);
    uint64_t countAndFlagsBits = xmmword_1E8EDDC40;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_7;
  }
  uint64_t result = MEMORY[0x18530A100](v2);
  if (result)
  {
    uint64_t v4 = String.init(cString:)();
    uint64_t v6 = v5;
    Swift::String v7 = String.lowercased()();
    uint64_t countAndFlagsBits = v7._countAndFlagsBits;
    unint64_t object = v7._object;
LABEL_7:
    uint64_t result = unumsys_close();
    *a1 = v4;
    a1[1] = v6;
    a1[2] = countAndFlagsBits;
    a1[3] = (uint64_t)object;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t Locale.Language.lineLayoutDirection.getter()
{
  uint64_t v0 = (uint64_t (*)(uint64_t, int *))MEMORY[0x1E4FBA690];

  return Locale.Language.lineLayoutDirection.getter(v0);
}

uint64_t Locale.Language.parent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  long long v3 = v1[3];
  v36[2] = v1[2];
  v36[3] = v3;
  long long v4 = v1[5];
  v36[4] = v1[4];
  v36[5] = v4;
  long long v5 = v1[1];
  v36[0] = *v1;
  v36[1] = v5;
  outlined retain of Locale.Language((uint64_t *)v36, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
  specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)v36);
  uint64_t v7 = v6;
  uint64_t result = (uint64_t)outlined retain of Locale.Language((uint64_t *)v36, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
  if (!v7)
  {
    *(_OWORD *)a1 = xmmword_182106C90;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    return result;
  }
  MEMORY[0x1F4188790](result);
  LODWORD(v34) = 0;
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  uint64_t v10 = swift_release();
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if (Language > 0)
  {
    v31[Language] = 0;
    uint64_t v10 = MEMORY[0x185301F80](v31, 0);
    uint64_t v11 = v10;
  }
  uint64_t v33 = v12;
  MEMORY[0x1F4188790](v10);
  LODWORD(v34) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  uint64_t v14 = swift_release();
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  if ((int)v34 <= 0 && Script > 0)
  {
    v31[Script] = 0;
    uint64_t v14 = MEMORY[0x185301F80](v31);
    uint64_t v15 = v14;
    uint64_t v16 = v17;
  }
  MEMORY[0x1F4188790](v14);
  LODWORD(v34) = 0;
  String.utf8CString.getter();
  int Country = uloc_getCountry();
  swift_release();
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if ((int)v34 <= 0 && Country > 0)
  {
    v31[Country] = 0;
    uint64_t v19 = MEMORY[0x185301F80](v31);
    uint64_t v20 = v21;
  }
  swift_bridgeObjectRelease();
  uint64_t v22 = v33;
  if (v33)
  {
    Swift::String v23 = String.lowercased()();
    uint64_t countAndFlagsBits = v23._countAndFlagsBits;
    unint64_t object = v23._object;
    uint64_t v25 = v11;
    if (v16) {
      goto LABEL_13;
    }
LABEL_17:
    uint64_t v15 = 0;
    uint64_t v27 = 0;
    long long v28 = 0;
    if (v20) {
      goto LABEL_14;
    }
LABEL_18:
    uint64_t v19 = 0;
    uint64_t result = 0;
    long long v29 = 0;
    goto LABEL_19;
  }
  uint64_t countAndFlagsBits = 0;
  unint64_t object = 0;
  uint64_t v25 = 0;
  if (!v16) {
    goto LABEL_17;
  }
LABEL_13:
  uint64_t v34 = v15;
  uint64_t v35 = v16;
  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  Swift::String v26 = String._capitalized()();
  uint64_t v27 = v26._countAndFlagsBits;
  long long v28 = v26._object;
  swift_bridgeObjectRelease();
  uint64_t v22 = v33;
  swift_bridgeObjectRelease();
  if (!v20) {
    goto LABEL_18;
  }
LABEL_14:
  Swift::String v30 = String.uppercased()();
  long long v29 = v30._object;
  uint64_t result = v30._countAndFlagsBits;
LABEL_19:
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v22;
  *(void *)(a1 + 16) = countAndFlagsBits;
  *(void *)(a1 + 24) = object;
  *(void *)(a1 + 32) = v15;
  *(void *)(a1 + 40) = v16;
  *(void *)(a1 + 48) = v27;
  *(void *)(a1 + 56) = v28;
  *(void *)(a1 + 64) = v19;
  *(void *)(a1 + 72) = v20;
  *(void *)(a1 + 80) = result;
  *(void *)(a1 + 88) = v29;
  return result;
}

BOOL Locale.Language.hasCommonParent(with:)(_OWORD *a1)
{
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  long long v2 = a1[3];
  v136[2] = a1[2];
  v136[3] = v2;
  long long v3 = a1[5];
  v136[4] = a1[4];
  v136[5] = v3;
  long long v4 = a1[1];
  v136[0] = *a1;
  v136[1] = v4;
  long long v5 = v1[3];
  v137[2] = v1[2];
  v137[3] = v5;
  long long v6 = v1[5];
  v137[4] = v1[4];
  v137[5] = v6;
  long long v7 = v1[1];
  v137[0] = *v1;
  v137[1] = v7;
  outlined retain of Locale.Language((uint64_t *)v137, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
  uint64_t v8 = specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)v137);
  uint64_t v10 = v9;
  if (v9)
  {
    MEMORY[0x1F4188790](v8);
    LODWORD(v112) = 0;
    String.utf8CString.getter();
    int Language = uloc_getLanguage();
    swift_release();
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    if (Language > 0)
    {
      v86[Language] = 0;
      uint64_t v12 = MEMORY[0x185301F80](v86);
      uint64_t v13 = v14;
    }
    uint64_t v110 = v12;
    MEMORY[0x1F4188790](v12);
    LODWORD(v112) = 0;
    String.utf8CString.getter();
    int Script = uloc_getScript();
    swift_release();
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    if ((int)v112 <= 0 && Script > 0)
    {
      v86[Script] = 0;
      uint64_t v16 = MEMORY[0x185301F80](v86);
      uint64_t v17 = v18;
    }
    uint64_t v107 = v16;
    MEMORY[0x1F4188790](v16);
    LODWORD(v112) = 0;
    String.utf8CString.getter();
    int Country = uloc_getCountry();
    swift_release();
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    if ((int)v112 > 0)
    {
      uint64_t v22 = v13;
    }
    else
    {
      uint64_t v22 = v13;
      if (Country > 0)
      {
        v86[Country] = 0;
        uint64_t v20 = MEMORY[0x185301F80](v86);
        uint64_t v21 = v23;
      }
    }
    swift_bridgeObjectRelease();
    if (v22)
    {
      Swift::String v29 = String.lowercased()();
      uint64_t countAndFlagsBits = v29._countAndFlagsBits;
      unint64_t object = v29._object;
    }
    else
    {
      uint64_t v110 = 0;
      uint64_t countAndFlagsBits = 0;
      unint64_t object = 0;
    }
    uint64_t v24 = v17;
    uint64_t v26 = v21;
    if (v17)
    {
      uint64_t v112 = v107;
      uint64_t v113 = v17;
      swift_bridgeObjectRetain_n();
      String.init<A>(_:)();
      Swift::String v32 = String._capitalized()();
      uint64_t v108 = v32._countAndFlagsBits;
      uint64_t v25 = v32._object;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v107 = 0;
      uint64_t v108 = 0;
      uint64_t v25 = 0;
    }
    uint64_t v28 = v22;
    uint64_t v109 = countAndFlagsBits;
    uint64_t v106 = (uint64_t)object;
    if (v26)
    {
      Swift::String v33 = String.uppercased()();
      uint64_t v10 = v33._countAndFlagsBits;
      uint64_t v27 = v33._object;
      outlined retain of Locale.Language((uint64_t *)v137, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    }
    else
    {
      outlined retain of Locale.Language((uint64_t *)v137, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
      uint64_t v20 = 0;
      uint64_t v10 = 0;
      uint64_t v27 = 0;
    }
  }
  else
  {
    outlined retain of Locale.Language((uint64_t *)v137, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    uint64_t v109 = 0;
    uint64_t v110 = 0;
    uint64_t v106 = 0;
    uint64_t v107 = 0;
    uint64_t v24 = 0;
    uint64_t v108 = 0;
    uint64_t v25 = 0;
    uint64_t v20 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 1;
  }
  outlined retain of Locale.Language((uint64_t *)v136, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
  uint64_t v34 = specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)v136);
  uint64_t v103 = v28;
  if (v35)
  {
    uint64_t v97 = (uint64_t)v27;
    uint64_t v98 = v10;
    uint64_t v101 = v24;
    uint64_t v102 = (uint64_t)v25;
    uint64_t v100 = v20;
    MEMORY[0x1F4188790](v34);
    LODWORD(v112) = 0;
    String.utf8CString.getter();
    int v36 = uloc_getLanguage();
    swift_release();
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    if ((int)v112 <= 0 && v36 > 0)
    {
      v86[v36] = 0;
      uint64_t v37 = MEMORY[0x185301F80](v86);
      uint64_t v38 = v39;
    }
    uint64_t v105 = v37;
    uint64_t v99 = v26;
    MEMORY[0x1F4188790](v37);
    LODWORD(v112) = 0;
    String.utf8CString.getter();
    int v40 = uloc_getScript();
    uint64_t v41 = swift_release();
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    if ((int)v112 <= 0 && v40 > 0)
    {
      v86[v40] = 0;
      uint64_t v41 = MEMORY[0x185301F80](v86);
      uint64_t v42 = v41;
      uint64_t v43 = v44;
    }
    MEMORY[0x1F4188790](v41);
    LODWORD(v112) = 0;
    String.utf8CString.getter();
    int v45 = uloc_getCountry();
    swift_release();
    uint64_t v46 = 0;
    if ((int)v112 > 0)
    {
      uint64_t v104 = 0;
      uint64_t v47 = v38;
    }
    else
    {
      uint64_t v104 = 0;
      uint64_t v47 = v38;
      if (v45 > 0)
      {
        v86[v45] = 0;
        uint64_t v46 = MEMORY[0x185301F80](v86);
        uint64_t v104 = v48;
      }
    }
    swift_bridgeObjectRelease();
    if (v47)
    {
      Swift::String v52 = String.lowercased()();
      uint64_t v93 = v52._object;
      uint64_t v94 = v52._countAndFlagsBits;
    }
    else
    {
      uint64_t v105 = 0;
      uint64_t v93 = 0;
      uint64_t v94 = 0;
    }
    uint64_t v49 = v103;
    uint64_t v53 = v104;
    uint64_t v51 = v108;
    if (v43)
    {
      uint64_t v112 = v42;
      uint64_t v113 = v43;
      swift_bridgeObjectRetain_n();
      String.init<A>(_:)();
      Swift::String v54 = String._capitalized()();
      uint64_t v91 = v54._object;
      uint64_t v92 = v54._countAndFlagsBits;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v53)
      {
LABEL_39:
        Swift::String v55 = String.uppercased()();
        uint64_t v88 = v55._object;
        uint64_t v89 = v55._countAndFlagsBits;
        outlined retain of Locale.Language((uint64_t *)v136, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
LABEL_42:
        uint64_t v95 = v43;
        uint64_t v96 = v42;
        uint64_t v90 = v46;
        if (v49 == 1)
        {
          uint64_t v57 = v109;
          uint64_t v56 = v110;
          uint64_t v59 = v106;
          uint64_t v58 = v107;
          uint64_t v60 = v101;
          uint64_t v61 = v102;
          uint64_t v62 = v51;
          uint64_t v64 = v99;
          uint64_t v63 = v100;
          uint64_t v65 = 1;
          uint64_t v67 = v97;
          uint64_t v66 = v98;
          if (v47 == 1) {
            return 1;
          }
LABEL_48:
          uint64_t v112 = v56;
          uint64_t v113 = v65;
          uint64_t v114 = v57;
          uint64_t v115 = v59;
          uint64_t v116 = v58;
          uint64_t v117 = v60;
          uint64_t v118 = v62;
          uint64_t v119 = v61;
          uint64_t v120 = v63;
          uint64_t v121 = v64;
          uint64_t v122 = v66;
          uint64_t v123 = v67;
          uint64_t v124 = v105;
          uint64_t v125 = v47;
          uint64_t v126 = v94;
          uint64_t v127 = v93;
          uint64_t v128 = v96;
          uint64_t v129 = v95;
          uint64_t v130 = v92;
          long long v131 = v91;
          uint64_t v132 = v90;
          uint64_t v133 = v104;
          uint64_t v134 = v89;
          long long v135 = v88;
          outlined release of (Locale.Language?, Locale.Language?)((uint64_t)&v112);
          return 0;
        }
        if (v47 != 1)
        {
          uint64_t v112 = v110;
          uint64_t v113 = v49;
          uint64_t v114 = v109;
          uint64_t v115 = v106;
          uint64_t v116 = v107;
          uint64_t v108 = v51;
          uint64_t v117 = v101;
          uint64_t v118 = v51;
          uint64_t v119 = v102;
          uint64_t v120 = v100;
          uint64_t v121 = v99;
          uint64_t v122 = v98;
          uint64_t v87 = v47;
          uint64_t v123 = v97;
          v111[0] = v105;
          v111[1] = v47;
          v111[2] = v94;
          v111[3] = (uint64_t)v93;
          v111[4] = v96;
          v111[5] = v95;
          uint64_t v74 = v90;
          v111[6] = v92;
          v111[7] = (uint64_t)v91;
          v111[8] = v90;
          v111[9] = (uint64_t)v53;
          uint64_t v75 = (uint64_t)v88;
          uint64_t v76 = v89;
          v111[10] = v89;
          v111[11] = (uint64_t)v88;
          outlined consume of Locale.Language?(v110, v49, v109, v106, v107, v101, v51, v102, v100, v99, v98, v97, (void (*)(void))outlined copy of Locale.LanguageCode?);
          BOOL v68 = specialized static Locale.Language.Components.== infix(_:_:)(&v112, v111);
          uint64_t v104 = (void (*)(void))outlined consume of Locale.LanguageCode?;
          outlined consume of Locale.Language?(v105, v87, v94, (uint64_t)v93, v96, v95, v92, (uint64_t)v91, v74, (uint64_t)v53, v76, v75, (void (*)(void))outlined consume of Locale.LanguageCode?);
          outlined consume of Locale.LanguageCode?(v110, v49);
          uint64_t v77 = v107;
          uint64_t v78 = v108;
          uint64_t v80 = v101;
          uint64_t v79 = v102;
          outlined consume of Locale.LanguageCode?(v107, v101);
          uint64_t v81 = v99;
          uint64_t v82 = v100;
          uint64_t v84 = v97;
          uint64_t v83 = v98;
          outlined consume of Locale.LanguageCode?(v100, v99);
          outlined consume of Locale.Language?(v110, v103, v109, v106, v77, v80, v78, v79, v82, v81, v83, v84, v104);
          return v68;
        }
        uint64_t v50 = v110;
LABEL_47:
        uint64_t v110 = v50;
        uint64_t v108 = v51;
        outlined copy of Locale.LanguageCode?(v50, v49);
        uint64_t v58 = v107;
        uint64_t v69 = v101;
        outlined copy of Locale.LanguageCode?(v107, v101);
        uint64_t v64 = v99;
        uint64_t v70 = v100;
        uint64_t v67 = v97;
        uint64_t v71 = v98;
        outlined copy of Locale.LanguageCode?(v100, v99);
        uint64_t v72 = v50;
        uint64_t v59 = v106;
        outlined consume of Locale.LanguageCode?(v72, v49);
        uint64_t v73 = v108;
        uint64_t v61 = v102;
        outlined consume of Locale.LanguageCode?(v58, v69);
        outlined consume of Locale.LanguageCode?(v70, v64);
        uint64_t v63 = v70;
        uint64_t v66 = v71;
        uint64_t v65 = v103;
        uint64_t v62 = v73;
        uint64_t v60 = v69;
        uint64_t v57 = v109;
        uint64_t v56 = v110;
        uint64_t v47 = 1;
        goto LABEL_48;
      }
    }
    else
    {
      uint64_t v42 = 0;
      uint64_t v91 = 0;
      uint64_t v92 = 0;
      if (v104) {
        goto LABEL_39;
      }
    }
    outlined retain of Locale.Language((uint64_t *)v136, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    uint64_t v46 = 0;
    uint64_t v88 = 0;
    uint64_t v89 = 0;
    goto LABEL_42;
  }
  outlined retain of Locale.Language((uint64_t *)v136, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
  if (v28 != 1)
  {
    uint64_t v101 = v24;
    uint64_t v102 = (uint64_t)v25;
    uint64_t v97 = (uint64_t)v27;
    uint64_t v98 = v10;
    uint64_t v99 = v26;
    uint64_t v100 = v20;
    uint64_t v104 = 0;
    uint64_t v105 = 0;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    uint64_t v91 = 0;
    uint64_t v92 = 0;
    uint64_t v89 = 0;
    uint64_t v90 = 0;
    uint64_t v88 = 0;
    uint64_t v49 = v28;
    uint64_t v50 = v110;
    uint64_t v51 = v108;
    goto LABEL_47;
  }
  return 1;
}

uint64_t Locale.Language.script.getter@<X0>(uint64_t *a1@<X8>)
{
  long long v3 = v1[3];
  long long v15 = v1[2];
  long long v16 = v3;
  long long v4 = v1[5];
  long long v17 = v1[4];
  long long v18 = v4;
  long long v5 = v1[1];
  v14[0] = *v1;
  v14[1] = v5;
  long long v6 = v15;
  uint64_t v8 = *((void *)&v15 + 1);
  uint64_t v7 = v15;
  unint64_t object = (void *)*((void *)&v16 + 1);
  uint64_t countAndFlagsBits = v16;
  if (!*((void *)&v15 + 1))
  {
    outlined retain of Locale.Language((uint64_t *)v14, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    uint64_t v7 = specialized _withFixedCharBuffer(size:_:)(257, v14);
    uint64_t v8 = v11;
    outlined retain of Locale.Language((uint64_t *)v14, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    if (v8)
    {
      swift_bridgeObjectRetain_n();
      String.init<A>(_:)();
      Swift::String v12 = String._capitalized()();
      uint64_t countAndFlagsBits = v12._countAndFlagsBits;
      unint64_t object = v12._object;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t countAndFlagsBits = 0;
      unint64_t object = 0;
    }
  }
  *a1 = v7;
  a1[1] = v8;
  a1[2] = countAndFlagsBits;
  a1[3] = (uint64_t)object;
  return outlined copy of Locale.LanguageCode?(v6, *((uint64_t *)&v6 + 1));
}

uint64_t *Locale.Language.Components.init(language:)@<X0>(long long *a1@<X0>, uint64_t *a2@<X8>)
{
  long long v3 = a1[1];
  unsigned long long v42 = *a1;
  long long v43 = v3;
  long long v4 = a1[3];
  long long v44 = a1[2];
  long long v45 = v4;
  long long v5 = a1[5];
  long long v46 = a1[4];
  long long v47 = v5;
  unsigned long long v6 = v42;
  unsigned long long v7 = v43;
  uint64_t v8 = *((void *)&v44 + 1);
  uint64_t v34 = v45;
  uint64_t v35 = v44;
  uint64_t v9 = v46;
  Swift::String v33 = (void *)*((void *)&v45 + 1);
  uint64_t v10 = *((void *)&v46 + 1);
  int v40 = (void *)*((void *)&v5 + 1);
  uint64_t v41 = v5;
  outlined retain of Locale.Language((uint64_t *)&v42, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
  uint64_t v12 = v6 >> 64;
  uint64_t v11 = v6;
  uint64_t object = v7 >> 64;
  uint64_t countAndFlagsBits = v7;
  if (!*((void *)&v6 + 1))
  {
    outlined retain of Locale.Language((uint64_t *)&v42, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    uint64_t v11 = specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)&v42);
    uint64_t v12 = v15;
    outlined retain of Locale.Language((uint64_t *)&v42, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    if (v12)
    {
      Swift::String v16 = String.lowercased()();
      uint64_t object = (uint64_t)v16._object;
      uint64_t countAndFlagsBits = v16._countAndFlagsBits;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t countAndFlagsBits = 0;
      uint64_t object = 0;
    }
  }
  uint64_t v36 = object;
  uint64_t v37 = countAndFlagsBits;
  uint64_t v38 = v12;
  uint64_t v39 = v11;
  if (v8)
  {
    outlined copy of Locale.LanguageCode?(v6, *((uint64_t *)&v6 + 1));
    uint64_t v17 = v35;
    uint64_t v18 = v35;
    uint64_t v19 = v8;
    uint64_t v20 = v34;
    uint64_t v21 = v33;
  }
  else
  {
    outlined retain of Locale.Language((uint64_t *)&v42, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    outlined copy of Locale.LanguageCode?(v6, *((uint64_t *)&v6 + 1));
    uint64_t v18 = specialized _withFixedCharBuffer(size:_:)(257, (long long *)&v42);
    uint64_t v19 = v22;
    outlined retain of Locale.Language((uint64_t *)&v42, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    if (v19)
    {
      swift_bridgeObjectRetain_n();
      String.init<A>(_:)();
      Swift::String v23 = String._capitalized()();
      uint64_t v20 = v23._countAndFlagsBits;
      uint64_t v21 = v23._object;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v18 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
    }
    uint64_t v17 = v35;
  }
  outlined copy of Locale.LanguageCode?(v17, v8);
  outlined retain of Locale.Language((uint64_t *)&v42, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
  uint64_t v24 = v9;
  uint64_t v25 = v9;
  uint64_t v26 = v10;
  uint64_t v27 = v41;
  uint64_t v28 = v40;
  if (!v10)
  {
    uint64_t v32 = v24;
    outlined retain of Locale.Language((uint64_t *)&v42, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    uint64_t v25 = specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)&v42);
    uint64_t v26 = v29;
    outlined retain of Locale.Language((uint64_t *)&v42, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    if (v26)
    {
      Swift::String v30 = String.uppercased()();
      uint64_t v27 = v30._countAndFlagsBits;
      uint64_t v28 = v30._object;
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
    }
    uint64_t v24 = v32;
  }
  outlined copy of Locale.LanguageCode?(v24, v10);
  uint64_t result = outlined retain of Locale.Language((uint64_t *)&v42, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
  *a2 = v39;
  a2[1] = v38;
  a2[2] = v37;
  a2[3] = v36;
  a2[4] = v18;
  a2[5] = v19;
  a2[6] = v20;
  a2[7] = (uint64_t)v21;
  a2[8] = v25;
  a2[9] = v26;
  a2[10] = v27;
  a2[11] = (uint64_t)v28;
  return result;
}

void *specialized static Locale.NumberingSystem.validNumberingSystems(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v143 = *MEMORY[0x1E4F143B8];
  swift_bridgeObjectRetain();
  Locale.Components.init(identifier:)(a1, a2, &v116);
  uint64_t v4 = v129;
  uint64_t v5 = v130;
  uint64_t countAndFlagsBits = v131;
  uint64_t object = v132;
  if (v130)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v10 = v8[2];
    unint64_t v9 = v8[3];
    if (v10 >= v9 >> 1) {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v8);
    }
    v8[2] = v10 + 1;
    uint64_t v11 = &v8[4 * v10];
    v11[4] = v4;
    void v11[5] = v5;
    v11[6] = countAndFlagsBits;
    v11[7] = object;
  }
  else
  {
    uint64_t v8 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v117;
  uint64_t v13 = v118;
  uint64_t v88 = v116;
  uint64_t v89 = v119;
  uint64_t v48 = v8;
  uint64_t v87 = v117;
  if (!v117) {
    goto LABEL_18;
  }
  Swift::String v14 = String.lowercased()();
  if (v13 == v14._countAndFlagsBits && v89 == v14._object)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v15) {
    goto LABEL_15;
  }
  Swift::String v16 = String.lowercased()();
  if (v13 == v16._countAndFlagsBits && v89 == v16._object) {
    goto LABEL_13;
  }
  char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v17) {
    goto LABEL_15;
  }
  if (v88 == 7697783 && v12 == 0xE300000000000000)
  {
    uint64_t v18 = 7697783;
    uint64_t v19 = 0xE300000000000000;
    goto LABEL_17;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)())
  {
    uint64_t v18 = v88;
    goto LABEL_16;
  }
  Swift::String v37 = String.lowercased()();
  if (v13 == v37._countAndFlagsBits && v89 == v37._object)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_15:
    uint64_t v18 = v88;
LABEL_16:
    uint64_t v19 = v12;
LABEL_17:
    outlined consume of Locale.LanguageCode?(v18, v19);
    goto LABEL_18;
  }
  char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Locale.LanguageCode?(v88, v12);
  if (v38)
  {
LABEL_18:
    uint64_t v20 = (char *)&outlined read-only object #1 of static Locale.NumberingSystem.validNumberingSystems(for:);
    uint64_t v21 = qword_1ECA2EB98;
    if (qword_1ECA2EB98) {
      goto LABEL_19;
    }
LABEL_42:
    swift_bridgeObjectRelease();
    goto LABEL_43;
  }
  uint64_t v20 = (char *)&outlined read-only object #0 of static Locale.NumberingSystem.validNumberingSystems(for:);
  uint64_t v21 = qword_1ECA2EBC8;
  if (!qword_1ECA2EBC8) {
    goto LABEL_42;
  }
LABEL_19:
  uint64_t v85 = v120;
  uint64_t v86 = v13;
  uint64_t v83 = v121;
  uint64_t v84 = *((void *)&v120 + 1);
  uint64_t v81 = v122;
  uint64_t v82 = *((void *)&v121 + 1);
  uint64_t v79 = v123;
  uint64_t v80 = *((void *)&v122 + 1);
  uint64_t v78 = *((void *)&v123 + 1);
  char v77 = v124;
  uint64_t v75 = *((void *)&v125 + 1);
  uint64_t v76 = v125;
  uint64_t v73 = *((void *)&v126 + 1);
  uint64_t v74 = v126;
  uint64_t v71 = *((void *)&v127 + 1);
  uint64_t v72 = v127;
  uint64_t v69 = *((void *)&v128 + 1);
  uint64_t v70 = v128;
  char v67 = HIBYTE(v133);
  char v68 = v133;
  uint64_t v65 = *((void *)&v134 + 1);
  uint64_t v66 = v134;
  uint64_t v63 = *((void *)&v135 + 1);
  uint64_t v64 = v135;
  uint64_t v61 = *((void *)&v136 + 1);
  uint64_t v62 = v136;
  uint64_t v59 = *((void *)&v137 + 1);
  uint64_t v60 = v137;
  uint64_t v57 = *((void *)&v138 + 1);
  uint64_t v58 = v138;
  uint64_t v55 = *((void *)&v139 + 1);
  uint64_t v56 = v139;
  uint64_t v53 = *((void *)&v140 + 1);
  uint64_t v54 = v140;
  uint64_t v51 = *((void *)&v141 + 1);
  uint64_t v52 = v141;
  uint64_t v22 = (uint64_t *)(v20 + 40);
  uint64_t v49 = *((void *)&v142 + 1);
  uint64_t v50 = v142;
  do
  {
    uint64_t v23 = v5;
    uint64_t v24 = v4;
    uint64_t v4 = *(v22 - 1);
    uint64_t v5 = *v22;
    Swift::String v25 = String.lowercased()();
    uint64_t countAndFlagsBits = v25._countAndFlagsBits;
    uint64_t object = v25._object;
    swift_bridgeObjectRetain();
    outlined consume of Locale.LanguageCode?(v24, v23);
    HIDWORD(v90) = HIDWORD(v88);
    uint64_t v91 = v87;
    uint64_t v92 = v86;
    uint64_t v93 = v89;
    *(void *)&long long v94 = v85;
    *((void *)&v94 + 1) = v84;
    *(void *)&long long v95 = v83;
    *((void *)&v95 + 1) = v82;
    *(void *)&long long v96 = v81;
    *((void *)&v96 + 1) = v80;
    *(void *)&long long v97 = v79;
    *((void *)&v97 + 1) = v78;
    char v98 = v77;
    *(void *)&long long v99 = v76;
    *((void *)&v99 + 1) = v75;
    *(void *)&long long v100 = v74;
    *((void *)&v100 + 1) = v73;
    *(void *)&long long v101 = v72;
    *((void *)&v101 + 1) = v71;
    *(void *)&long long v102 = v70;
    *((void *)&v102 + 1) = v69;
    uint64_t v103 = v4;
    uint64_t v104 = v5;
    Swift::String v105 = v25;
    LOBYTE(v106) = v68;
    HIBYTE(v106) = v67;
    *(void *)&long long v107 = v66;
    *((void *)&v107 + 1) = v65;
    *(void *)&long long v108 = v64;
    *((void *)&v108 + 1) = v63;
    *(void *)&long long v109 = v62;
    *((void *)&v109 + 1) = v61;
    *(void *)&long long v110 = v60;
    *((void *)&v110 + 1) = v59;
    *(void *)&long long v111 = v58;
    *((void *)&v111 + 1) = v57;
    *(void *)&long long v112 = v56;
    *((void *)&v112 + 1) = v55;
    *(void *)&long long v113 = v54;
    *((void *)&v113 + 1) = v53;
    *(void *)&long long v114 = v52;
    *((void *)&v114 + 1) = v51;
    *(void *)&long long v115 = v50;
    *((void *)&v115 + 1) = v49;
    Locale.Components.icuIdentifier.getter();
    LODWORD(v90) = 0;
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v26 = unumsys_open();
    swift_release();
    if (!MEMORY[0x18530A120](v26)
      && MEMORY[0x18530A110](v26) == 10
      && MEMORY[0x18530A100](v26))
    {
      uint64_t v27 = String.init(cString:)();
      uint64_t v29 = v28;
      Swift::String v30 = String.lowercased()();
      uint64_t v47 = v27;
      if (specialized Sequence<>.contains(_:)(v27, v29, v30._countAndFlagsBits, (uint64_t)v30._object, (uint64_t)v48))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48[2] + 1, 1, v48);
        }
        unint64_t v32 = v48[2];
        unint64_t v31 = v48[3];
        unint64_t v33 = v32 + 1;
        if (v32 >= v31 >> 1)
        {
          uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, v48);
          unint64_t v33 = v32 + 1;
          uint64_t v34 = v30._object;
          uint64_t v48 = v36;
        }
        else
        {
          uint64_t v34 = v30._object;
        }
        v48[2] = v33;
        uint64_t v35 = &v48[4 * v32];
        v35[4] = v47;
        v35[5] = v29;
        v35[6] = v30._countAndFlagsBits;
        v35[7] = v34;
      }
    }
    v22 += 2;
    unumsys_close();
    --v21;
  }
  while (v21);
  swift_bridgeObjectRelease();
  uint64_t v13 = v86;
LABEL_43:
  Swift::String v39 = String.lowercased()();
  int v40 = v48;
  if (specialized Sequence<>.contains(_:)(1853120876, 0xE400000000000000, v39._countAndFlagsBits, (uint64_t)v39._object, (uint64_t)v48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v41 = v13;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48[2] + 1, 1, v48);
    }
    unint64_t v43 = v40[2];
    unint64_t v42 = v40[3];
    long long v44 = v40;
    if (v43 >= v42 >> 1) {
      long long v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v42 > 1), v43 + 1, 1, v40);
    }
    v44[2] = v43 + 1;
    long long v45 = (Swift::String *)&v44[4 * v43];
    int v40 = v44;
    v45[2]._uint64_t countAndFlagsBits = 1853120876;
    v45[2]._uint64_t object = (void *)0xE400000000000000;
    v45[3] = v39;
    uint64_t v13 = v41;
  }
  uint64_t v90 = v88;
  uint64_t v91 = v87;
  uint64_t v92 = v13;
  uint64_t v93 = v89;
  long long v94 = v120;
  long long v95 = v121;
  long long v96 = v122;
  long long v97 = v123;
  char v98 = v124;
  long long v99 = v125;
  long long v100 = v126;
  long long v101 = v127;
  long long v102 = v128;
  uint64_t v103 = v4;
  uint64_t v104 = v5;
  v105._uint64_t countAndFlagsBits = countAndFlagsBits;
  v105._uint64_t object = object;
  __int16 v106 = v133;
  long long v107 = v134;
  long long v108 = v135;
  long long v109 = v136;
  long long v110 = v137;
  long long v111 = v138;
  long long v112 = v139;
  long long v113 = v140;
  long long v114 = v141;
  long long v115 = v142;
  outlined release of Locale.Components(&v90);
  return v40;
}

unint64_t lazy protocol witness table accessor for type Unicode.UTF16 and conformance Unicode.UTF16()
{
  unint64_t result = lazy protocol witness table cache variable for type Unicode.UTF16 and conformance Unicode.UTF16;
  if (!lazy protocol witness table cache variable for type Unicode.UTF16 and conformance Unicode.UTF16)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.UTF16 and conformance Unicode.UTF16);
  }
  return result;
}

uint64_t specialized static Locale.Currency.isoCurrencies.getter()
{
  uint64_t v0 = ucurr_openISOCurrencies();
  uint64_t v1 = MEMORY[0x1E4FBC860];
  if (v0)
  {
    uint64_t v2 = v0;
    type metadata accessor for ICU.Enumerator();
    *(void *)(swift_initStackObject() + 16) = v2;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
    while (uenum_next())
    {
      uint64_t v3 = String.init(cString:)();
      uint64_t v5 = v4;
      Swift::String v6 = String.lowercased()();
      unint64_t v8 = *(void *)(v1 + 16);
      unint64_t v7 = *(void *)(v1 + 24);
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      }
      *(void *)(v1 + 16) = v8 + 1;
      unint64_t v9 = (Swift::String *)(v1 + 32 * v8);
      v9[2]._uint64_t countAndFlagsBits = v3;
      v9[2]._uint64_t object = v5;
      v9[3] = v6;
    }
    swift_release();
  }
  return v1;
}

uint64_t specialized static Locale.Currency.commonISOCurrencies.getter()
{
  uint64_t v0 = ucurr_openISOCurrencies();
  uint64_t v1 = MEMORY[0x1E4FBC860];
  if (v0)
  {
    uint64_t v2 = v0;
    type metadata accessor for ICU.Enumerator();
    *(void *)(swift_initStackObject() + 16) = v2;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
    while (uenum_next())
    {
      uint64_t v3 = String.init(cString:)();
      uint64_t v5 = v4;
      unint64_t v7 = *(void *)(v1 + 16);
      unint64_t v6 = *(void *)(v1 + 24);
      if (v7 >= v6 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      }
      *(void *)(v1 + 16) = v7 + 1;
      uint64_t v8 = v1 + 16 * v7;
      *(void *)(v8 + 32) = v3;
      *(void *)(v8 + 40) = v5;
    }
    swift_release();
  }
  return v1;
}

uint64_t outlined release of (Locale.Language?, Locale.Language?)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v12 = *(void *)(a1 + 104);
  uint64_t v13 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 120);
  uint64_t v4 = *(void *)(a1 + 128);
  uint64_t v5 = *(void *)(a1 + 136);
  uint64_t v6 = *(void *)(a1 + 144);
  uint64_t v7 = *(void *)(a1 + 152);
  long long v11 = *(_OWORD *)(a1 + 160);
  uint64_t v8 = *(void *)(a1 + 176);
  uint64_t v9 = *(void *)(a1 + 184);
  outlined consume of Locale.Language?(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), (void (*)(void))outlined consume of Locale.LanguageCode?);
  outlined consume of Locale.Language?(v13, v12, v2, v3, v4, v5, v6, v7, v11, *((uint64_t *)&v11 + 1), v8, v9, (void (*)(void))outlined consume of Locale.LanguageCode?);
  return a1;
}

uint64_t outlined consume of Locale.Language?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(void))
{
  if (a2 != 1)
  {
    a13();
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))a13)(a5, a6, a7, a8);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))a13)(a9, a10, a11, a12);
  }
  return result;
}

unint64_t specialized _parseHexIntegerDigits<A>(_:isNegative:)(unsigned __int8 *a1, uint64_t a2, int a3)
{
  if (a2)
  {
    if (a2 < 1) {
      return 0;
    }
    unint64_t v3 = 0;
    uint64_t v4 = &a1[a2];
    while (1)
    {
      int v5 = *a1;
      unsigned __int8 v6 = v5 - 48;
      if ((v5 - 48) >= 0xA)
      {
        if ((v5 - 65) < 6)
        {
          unsigned __int8 v6 = v5 - 55;
        }
        else
        {
          if ((v5 - 97) > 5) {
            return 0;
          }
          unsigned __int8 v6 = v5 - 87;
        }
      }
      uint64_t v7 = v6;
      BOOL v8 = 16 * v3 >= v6;
      uint64_t v9 = 16 * v3 - v6;
      BOOL v10 = !v8;
      if (v3 >> 60 || (a3 & v10 & 1) != 0) {
        break;
      }
      unint64_t v3 = 16 * v3 + v7;
      if (a3) {
        unint64_t v3 = v9;
      }
      if (++a1 >= v4) {
        return v3;
      }
    }
  }
  return 0;
}

{
  unsigned int v3;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 v6;
  unsigned int v7;
  int v8;
  int v9;
  BOOL v10;
  unsigned __int8 v11;

  if (a2)
  {
    if (a2 < 1)
    {
      uint64_t v7 = 0;
      long long v11 = 0;
    }
    else
    {
      unint64_t v3 = 0;
      uint64_t v4 = &a1[a2];
      while (1)
      {
        int v5 = *a1;
        unsigned __int8 v6 = v5 - 48;
        if ((v5 - 48) >= 0xA)
        {
          if ((v5 - 65) < 6)
          {
            unsigned __int8 v6 = v5 - 55;
          }
          else
          {
            if ((v5 - 97) > 5) {
              goto LABEL_16;
            }
            unsigned __int8 v6 = v5 - 87;
          }
        }
        uint64_t v7 = 0;
        BOOL v8 = v6;
        uint64_t v9 = 16 * v3 - v6;
        BOOL v10 = 16 * v3 < v6;
        long long v11 = 1;
        if (v3 >> 28 || (a3 & v10 & 1) != 0) {
          break;
        }
        unint64_t v3 = 16 * v3 + v8;
        if (a3) {
          unint64_t v3 = v9;
        }
        if (++a1 >= v4)
        {
          long long v11 = 0;
          uint64_t v7 = v3;
          return v7 | ((unint64_t)v11 << 32);
        }
      }
    }
  }
  else
  {
LABEL_16:
    uint64_t v7 = 0;
    long long v11 = 1;
  }
  return v7 | ((unint64_t)v11 << 32);
}

uint64_t specialized _parseHexIntegerDigits<A>(_:isNegative:)(unsigned __int8 *a1, uint64_t a2, char a3)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 1) {
    return 0;
  }
  uint64_t result = 0;
  int v5 = &a1[a2];
  do
  {
    int v6 = *a1;
    unsigned __int8 v7 = v6 - 48;
    if ((v6 - 48) >= 0xA)
    {
      if ((v6 - 65) < 6)
      {
        unsigned __int8 v7 = v6 - 55;
      }
      else
      {
        if ((v6 - 97) > 5) {
          return 0;
        }
        unsigned __int8 v7 = v6 - 87;
      }
    }
    uint64_t v8 = 16 * result;
    uint64_t v9 = 16 * result + v7;
    BOOL v10 = __OFADD__(16 * result, v7);
    BOOL v11 = __OFSUB__(v8, v7);
    uint64_t v12 = v8 - v7;
    char v13 = v11;
    if ((a3 & 1) == 0) {
      char v13 = v10;
    }
    unint64_t v14 = (unint64_t)(result - 0x800000000000000) >> 60;
    uint64_t result = 0;
    if (v14 < 0xF || (v13 & 1) != 0) {
      break;
    }
    uint64_t result = (a3 & 1) != 0 ? v12 : v9;
    ++a1;
  }
  while (a1 < v5);
  return result;
}

{
  int v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  unsigned __int8 v10;
  unsigned int v11;
  int v12;

  if (!a2)
  {
    BOOL v10 = 0;
    uint64_t v12 = 1;
    return v10 | (v12 << 8);
  }
  if (a2 >= 1)
  {
    unint64_t v3 = 0;
    uint64_t v4 = &a1[a2];
    while (1)
    {
      int v5 = *a1;
      int v6 = v5 - 48;
      if ((v5 - 48) < 0xA) {
        goto LABEL_8;
      }
      if ((v5 - 65) >= 6) {
        break;
      }
      int v6 = v5 - 55;
      unsigned __int8 v7 = 16 * v3;
      if (a3)
      {
LABEL_9:
        uint64_t v8 = v7 - v6;
        uint64_t v9 = (v8 & 0xFFFFFF00) != 0;
        goto LABEL_12;
      }
LABEL_11:
      uint64_t v9 = 0;
      uint64_t v8 = v6 + v7;
LABEL_12:
      BOOL v10 = 0;
      BOOL v11 = v3;
      uint64_t v12 = 1;
      if (v11 > 0xF || v9) {
        return v10 | (v12 << 8);
      }
      ++a1;
      unint64_t v3 = v8;
      if (a1 >= v4)
      {
        uint64_t v12 = 0;
        BOOL v10 = v8;
        return v10 | (v12 << 8);
      }
    }
    if ((v5 - 97) > 5)
    {
      BOOL v10 = 0;
      uint64_t v12 = 1;
      return v10 | (v12 << 8);
    }
    int v6 = v5 - 87;
LABEL_8:
    unsigned __int8 v7 = 16 * v3;
    if (a3) {
      goto LABEL_9;
    }
    goto LABEL_11;
  }
  BOOL v10 = 0;
  uint64_t v12 = 0;
  return v10 | (v12 << 8);
}

{
  int v3;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 v6;
  int v7;
  BOOL v8;
  unsigned __int16 v9;
  unsigned int v10;
  int v11;

  if (!a2)
  {
    uint64_t v9 = 0;
    BOOL v11 = 1;
    return v9 | (v11 << 16);
  }
  if (a2 >= 1)
  {
    unint64_t v3 = 0;
    uint64_t v4 = &a1[a2];
    while (1)
    {
      int v5 = *a1;
      int v6 = v5 - 48;
      if ((v5 - 48) >= 0xA)
      {
        if ((v5 - 65) < 6)
        {
          int v6 = v5 - 55;
        }
        else
        {
          if ((v5 - 97) > 5)
          {
            uint64_t v9 = 0;
            BOOL v11 = 1;
            return v9 | (v11 << 16);
          }
          int v6 = v5 - 87;
        }
      }
      if (a3)
      {
        unsigned __int8 v7 = (unsigned __int16)(16 * v3) - v6;
        uint64_t v8 = (v7 & 0xFFFF0000) != 0;
      }
      else
      {
        uint64_t v8 = 0;
        unsigned __int8 v7 = 16 * v3 + v6;
      }
      uint64_t v9 = 0;
      BOOL v10 = (unsigned __int16)v3;
      BOOL v11 = 1;
      if (v10 > 0xFFF || v8) {
        return v9 | (v11 << 16);
      }
      ++a1;
      unint64_t v3 = v7;
      if (a1 >= v4)
      {
        BOOL v11 = 0;
        uint64_t v9 = v7;
        return v9 | (v11 << 16);
      }
    }
  }
  uint64_t v9 = 0;
  BOOL v11 = 0;
  return v9 | (v11 << 16);
}

{
  char v3;
  unsigned __int8 *v4;
  int v5;
  char v6;
  int v7;
  int v8;
  unsigned __int8 v9;
  unsigned int v10;
  int v11;

  if (!a2)
  {
    uint64_t v9 = 0;
    BOOL v11 = 1;
    return v9 | (v11 << 8);
  }
  if (a2 >= 1)
  {
    unint64_t v3 = 0;
    uint64_t v4 = &a1[a2];
    while (1)
    {
      int v5 = *a1;
      int v6 = v5 - 48;
      if ((v5 - 48) >= 0xA)
      {
        if ((v5 - 65) < 6)
        {
          int v6 = v5 - 55;
        }
        else
        {
          if ((v5 - 97) > 5)
          {
            uint64_t v9 = 0;
            BOOL v11 = 1;
            return v9 | (v11 << 8);
          }
          int v6 = v5 - 87;
        }
      }
      unsigned __int8 v7 = (char)(16 * v3);
      if (a3) {
        uint64_t v8 = v7 - v6;
      }
      else {
        uint64_t v8 = v7 + v6;
      }
      uint64_t v9 = 0;
      BOOL v10 = (v3 - 8);
      BOOL v11 = 1;
      if (v10 < 0xF0 || v8 != (char)v8) {
        return v9 | (v11 << 8);
      }
      ++a1;
      unint64_t v3 = v8;
      if (a1 >= v4)
      {
        BOOL v11 = 0;
        uint64_t v9 = v8;
        return v9 | (v11 << 8);
      }
    }
  }
  uint64_t v9 = 0;
  BOOL v11 = 0;
  return v9 | (v11 << 8);
}

{
  __int16 v3;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 v6;
  int v7;
  __int16 v8;
  int v9;
  unsigned __int16 v10;
  unsigned int v11;
  int v12;

  if (!a2)
  {
    BOOL v10 = 0;
    uint64_t v12 = 1;
    return v10 | (v12 << 16);
  }
  if (a2 >= 1)
  {
    unint64_t v3 = 0;
    uint64_t v4 = &a1[a2];
    while (1)
    {
      int v5 = *a1;
      int v6 = v5 - 48;
      if ((v5 - 48) >= 0xA)
      {
        if ((v5 - 65) < 6)
        {
          int v6 = v5 - 55;
        }
        else
        {
          if ((v5 - 97) > 5)
          {
            BOOL v10 = 0;
            uint64_t v12 = 1;
            return v10 | (v12 << 16);
          }
          int v6 = v5 - 87;
        }
      }
      unsigned __int8 v7 = v6;
      uint64_t v8 = 16 * v3;
      if (a3) {
        uint64_t v9 = v8 - v7;
      }
      else {
        uint64_t v9 = v7 + v8;
      }
      BOOL v10 = 0;
      BOOL v11 = (unsigned __int16)(v3 - 2048);
      uint64_t v12 = 1;
      if (v11 < 0xF000 || v9 != (__int16)v9) {
        return v10 | (v12 << 16);
      }
      ++a1;
      unint64_t v3 = v9;
      if (a1 >= v4)
      {
        uint64_t v12 = 0;
        BOOL v10 = v9;
        return v10 | (v12 << 16);
      }
    }
  }
  BOOL v10 = 0;
  uint64_t v12 = 0;
  return v10 | (v12 << 16);
}

{
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 v7;
  uint64_t v8;
  unint64_t v9;
  long long v10;
  unint64_t v11;
  BOOL v12;
  char v13;
  uint64_t v14;

  if (!a2) {
    return 0;
  }
  if (a2 >= 1)
  {
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    int v5 = &a1[a2];
    while (1)
    {
      int v6 = *a1;
      unsigned __int8 v7 = v6 - 48;
      if ((v6 - 48) >= 0xA)
      {
        if ((v6 - 65) < 6)
        {
          unsigned __int8 v7 = v6 - 55;
        }
        else
        {
          if ((v6 - 97) > 5) {
            return 0;
          }
          unsigned __int8 v7 = v6 - 87;
        }
      }
      uint64_t v8 = 16 * v3;
      *((void *)&v10 + 1) = v4;
      *(void *)&BOOL v10 = v3;
      uint64_t v9 = v10 >> 60;
      if ((v4 & 0x8000000000000000) == 0) {
        break;
      }
      if (__PAIR128__(v4, v3) < __PAIR128__(0xF000000000000000, 1)) {
        goto LABEL_14;
      }
      LOBYTE(v11) = v8 != 0;
      if (a3)
      {
LABEL_15:
        uint64_t v4 = (__PAIR128__(v9, v8) - v7) >> 64;
        unint64_t v3 = v8 - v7;
        uint64_t v12 = __OFSUB__(__PAIR128__(v9, v8), v7);
        goto LABEL_16;
      }
LABEL_12:
      unint64_t v3 = v8 + v7;
      uint64_t v12 = __OFADD__(__CFADD__(v8, v7), v9);
      uint64_t v4 = __CFADD__(v8, v7) + v9;
LABEL_16:
      char v13 = v12;
      unint64_t v14 = 0;
      if (v11 & 1) != 0 || (v13) {
        return v14;
      }
      if (++a1 >= v5) {
        return v3;
      }
    }
    if (!(v4 >> 60))
    {
      BOOL v11 = v9 >> 63;
      if (a3) {
        goto LABEL_15;
      }
      goto LABEL_12;
    }
LABEL_14:
    LOBYTE(v11) = 1;
    if (a3) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  return 0;
}

unint64_t specialized _parseHexIntegerDigits<A>(_:isNegative:)(unsigned __int8 *a1, uint64_t a2, char a3)
{
  if (a2)
  {
    if (a2 < 1)
    {
      unsigned int v3 = 0;
LABEL_25:
      unsigned __int8 v15 = 0;
    }
    else
    {
      unsigned int v3 = 0;
      uint64_t v4 = &a1[a2];
      while (1)
      {
        int v5 = *a1;
        unsigned __int8 v6 = v5 - 48;
        if ((v5 - 48) >= 0xA)
        {
          if ((v5 - 65) < 6)
          {
            unsigned __int8 v6 = v5 - 55;
          }
          else
          {
            if ((v5 - 97) > 5) {
              goto LABEL_26;
            }
            unsigned __int8 v6 = v5 - 87;
          }
        }
        int v7 = v6;
        int v8 = 16 * v3;
        unsigned int v9 = v3 - 0x8000000;
        int v10 = v8 + v6;
        BOOL v11 = __OFADD__(v8, v7);
        BOOL v12 = __OFSUB__(v8, v7);
        unsigned int v13 = v8 - v7;
        char v14 = v12;
        if (a3) {
          BOOL v11 = v14;
        }
        unsigned __int8 v15 = 1;
        unsigned int v16 = v9 >> 28;
        unsigned int v3 = 0;
        if (v16 < 0xF || v11) {
          break;
        }
        if (a3) {
          unsigned int v3 = v13;
        }
        else {
          unsigned int v3 = v10;
        }
        if (++a1 >= v4) {
          goto LABEL_25;
        }
      }
    }
  }
  else
  {
LABEL_26:
    unsigned int v3 = 0;
    unsigned __int8 v15 = 1;
  }
  return v3 | ((unint64_t)v15 << 32);
}

uint64_t specialized _parseHexIntegerDigits<A>(_:isNegative:)(unsigned __int8 *a1, uint64_t a2, int a3)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 1)
  {
    uint64_t result = 0;
    unint64_t v6 = 0;
    int v7 = &a1[a2];
    while (1)
    {
      int v8 = *a1;
      unsigned __int8 v9 = v8 - 48;
      if ((v8 - 48) >= 0xA)
      {
        if ((v8 - 65) < 6)
        {
          unsigned __int8 v9 = v8 - 55;
        }
        else
        {
          if ((v8 - 97) > 5) {
            return 0;
          }
          unsigned __int8 v9 = v8 - 87;
        }
      }
      *((void *)&v11 + 1) = v6;
      *(void *)&long long v11 = result;
      uint64_t v10 = v11 >> 60;
      uint64_t v12 = 16 * result;
      unsigned long long v13 = v11 * 16 - v9;
      BOOL v14 = v11 * 16 < (unsigned __int128)v9;
      uint64_t result = 0;
      if (!(v6 >> 60) && (a3 & v14 & 1) == 0)
      {
        uint64_t v15 = v12 + v9;
        uint64_t v16 = __CFADD__(v12, v9) ? v10 + 1 : v10;
        uint64_t result = (a3 & 1) != 0 ? v13 : v15;
        unint64_t v6 = (a3 & 1) != 0 ? *((void *)&v13 + 1) : v16;
        if (++a1 < v7) {
          continue;
        }
      }
      return result;
    }
  }
  return 0;
}

void *JSON5Scanner.scan()()
{
  uint64_t v1 = v0;
  if (*(unsigned char *)v0 == 1)
  {
    unsigned int v3 = (unsigned __int8 *)v0[3];
    unint64_t v2 = v0[4];
    if ((unint64_t)v3 >= v2) {
      goto LABEL_39;
    }
    while (1)
    {
      unsigned int v4 = *v3;
      if (v4 < 0x40 && ((1 << v4) & 0x100003E00) != 0) {
        goto LABEL_10;
      }
      if (v4 != 47) {
        break;
      }
      if ((unint64_t)(v3 + 1) >= v2) {
        goto LABEL_36;
      }
      int v6 = v3[1];
      if (v6 == 42)
      {
        uint64_t v10 = v3 + 3;
        if ((unint64_t)(v3 + 3) >= v2)
        {
LABEL_35:
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v15 = 3;
          *(_OWORD *)(v15 + 8) = 0u;
          *(_OWORD *)(v15 + 24) = 0u;
          *(void *)(v15 + 40) = 0;
          char v16 = 12;
LABEL_44:
          *(unsigned char *)(v15 + 48) = v16;
          swift_willThrow();
          return v1;
        }
        long long v11 = v3 + 2;
        while (2)
        {
          int v13 = *v10;
          if (*v11 == 42)
          {
            if (v13 == 42) {
              goto LABEL_32;
            }
            if (v13 == 47)
            {
              unsigned int v3 = v11 + 2;
              goto LABEL_11;
            }
          }
          else if (v13 == 42)
          {
LABEL_32:
            uint64_t v12 = 1;
LABEL_29:
            v11 += v12;
            uint64_t v10 = v11 + 1;
            if ((unint64_t)(v11 + 1) >= v2) {
              goto LABEL_35;
            }
            continue;
          }
          break;
        }
        uint64_t v12 = 2;
        goto LABEL_29;
      }
      if (v6 != 47)
      {
LABEL_36:
        v0[3] = v3;
        goto LABEL_39;
      }
      if ((unint64_t)(v3 + 2) < v2)
      {
        unint64_t v7 = v2 - 2 - (void)v3;
        v3 += 3;
        while (1)
        {
          int v8 = *(v3 - 1);
          if (v8 == 13 || v8 == 10) {
            break;
          }
          ++v3;
          if (!--v7) {
            goto LABEL_39;
          }
        }
LABEL_11:
        if ((unint64_t)v3 < v2) {
          continue;
        }
      }
      goto LABEL_39;
    }
    if (v4 == 160)
    {
LABEL_10:
      ++v3;
      goto LABEL_11;
    }
    v0[3] = v3;
    if (v4 == 123) {
      JSON5Scanner.scanObject()();
    }
    else {
LABEL_39:
    }
      JSON5Scanner.scanObject(withoutBraces:)(1);
  }
  else
  {
    JSON5Scanner.scanValue()();
  }
  if (!v14)
  {
    Swift::UInt8_optional v17 = JSON5Scanner.DocumentReader.consumeWhitespace(allowingEOF:)(1);
    if (!v18)
    {
      Swift::UInt8 value = v17.value;
      if ((*(_WORD *)&v17 & 0x100) != 0)
      {
        uint64_t v25 = v1[6];
        uint64_t v26 = v1[1];
        uint64_t v27 = v1[2];
        type metadata accessor for JSONMap();
        uint64_t v1 = (void *)swift_allocObject();
        v1[2] = v25;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<(buffer: BufferView<UInt8>, allocation: UnsafeRawPointer?)>._Buffer);
        uint64_t v28 = swift_allocObject();
        *(_DWORD *)(v28 + 40) = 0;
        *(void *)(v28 + 16) = v26;
        *(void *)(v28 + 24) = v27;
        *(void *)(v28 + 32) = 0;
        v1[3] = v28;
        swift_bridgeObjectRetain();
        return v1;
      }
      uint64_t v1 = (void *)specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v1[3], v1[1], v1[2]);
      uint64_t v21 = v20;
      uint64_t v23 = v22;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v15 = 0xD000000000000015;
      *(void *)(v15 + 8) = 0x80000001823ABB00;
      *(void *)(v15 + 16) = value;
      *(void *)(v15 + 24) = v1;
      *(void *)(v15 + 32) = v21;
      *(void *)(v15 + 40) = v23;
      char v16 = 1;
      goto LABEL_44;
    }
  }
  return v1;
}

Swift::UInt8_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.DocumentReader.consumeWhitespace(allowingEOF:)(Swift::Bool allowingEOF)
{
  unsigned int v3 = *(unsigned __int8 **)(v1 + 16);
  unint64_t v2 = *(void *)(v1 + 24);
  if ((unint64_t)v3 < v2)
  {
    while (1)
    {
      unsigned int v4 = *v3;
      if (v4 <= 0x3F && ((1 << v4) & 0x100003E00) != 0) {
        goto LABEL_9;
      }
      if (v4 != 47)
      {
        if (v4 == 160)
        {
LABEL_9:
          ++v3;
          goto LABEL_10;
        }
        goto LABEL_39;
      }
      if ((unint64_t)(v3 + 1) >= v2) {
        goto LABEL_38;
      }
      int v6 = v3[1];
      if (v6 == 42) {
        break;
      }
      if (v6 != 47)
      {
LABEL_38:
        LOWORD(v4) = 47;
LABEL_39:
        *(void *)(v1 + 16) = v3;
        return (Swift::UInt8_optional)v4;
      }
      if ((unint64_t)(v3 + 2) < v2)
      {
        unint64_t v7 = v2 - 2 - (void)v3;
        v3 += 3;
        while (1)
        {
          int v8 = *(v3 - 1);
          if (v8 == 13 || v8 == 10) {
            break;
          }
          ++v3;
          if (!--v7) {
            goto LABEL_33;
          }
        }
LABEL_10:
        if ((unint64_t)v3 < v2) {
          continue;
        }
      }
      goto LABEL_33;
    }
    uint64_t v10 = v3 + 3;
    if ((unint64_t)(v3 + 3) < v2)
    {
      long long v11 = v3 + 2;
      do
      {
        int v13 = *v10;
        if (*v11 == 42)
        {
          if (v13 == 42) {
            goto LABEL_31;
          }
          if (v13 == 47)
          {
            unsigned int v3 = v11 + 2;
            goto LABEL_10;
          }
        }
        else if (v13 == 42)
        {
LABEL_31:
          uint64_t v12 = 1;
          goto LABEL_28;
        }
        uint64_t v12 = 2;
LABEL_28:
        v11 += v12;
        uint64_t v10 = v11 + 1;
      }
      while ((unint64_t)(v11 + 1) < v2);
    }
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    uint64_t v16 = 3;
    goto LABEL_37;
  }
LABEL_33:
  if (!allowingEOF)
  {
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    uint64_t v16 = 1;
LABEL_37:
    *(void *)uint64_t v15 = v16;
    *(void *)(v15 + 40) = 0;
    *(_OWORD *)(v15 + 24) = 0u;
    *(_OWORD *)(v15 + 8) = 0u;
    *(unsigned char *)(v15 + 48) = 12;
    return (Swift::UInt8_optional)swift_willThrow();
  }
  return (Swift::UInt8_optional)256;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.scanObject()()
{
  uint64_t v1 = (unsigned __int8 *)v0[3];
  if ((unsigned __int8 *)v0[4] == v1)
  {
    __break(1u);
    goto LABEL_7;
  }
  int v2 = *v1;
  v0[3] = v1 + 1;
  if (v2 != 123)
  {
LABEL_7:
    __break(1u);
    return;
  }
  if ((uint64_t)v0[5] > 511)
  {
    unint64_t v3 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v1, v0[1], v0[2]);
    uint64_t v5 = v4;
    uint64_t v7 = v6;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v8 = v3;
    *(void *)(v8 + 8) = v5;
    *(void *)(v8 + 16) = v7;
    *(void *)(v8 + 24) = 0;
    *(void *)(v8 + 32) = 0;
    *(void *)(v8 + 40) = 0;
    *(unsigned char *)(v8 + 48) = 2;
    swift_willThrow();
  }
  else
  {
    JSON5Scanner.scanObject(withoutBraces:)(0);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.scanObject(withoutBraces:)(Swift::Bool withoutBraces)
{
  int v2 = v1;
  unint64_t v4 = v1[4];
  ++v1[5];
  unint64_t v5 = v1[3];
  if (v5 >= v4)
  {
LABEL_34:
    if (withoutBraces)
    {
LABEL_35:
      JSON5Scanner.JSONPartialMapData.recordEmptyCollection(tagType:with:)(5u, (void *)v1[1], v1[2], v5);
      goto LABEL_40;
    }
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    uint64_t v18 = 1;
    goto LABEL_38;
  }
  uint64_t v6 = (unsigned __int8 *)v1[3];
  while (1)
  {
    unsigned int v7 = *v6;
    if (v7 < 0x40 && ((1 << v7) & 0x100003E00) != 0) {
      goto LABEL_10;
    }
    if (v7 != 47) {
      break;
    }
    if ((unint64_t)(v6 + 1) >= v4) {
      goto LABEL_42;
    }
    int v9 = v6[1];
    if (v9 == 42)
    {
      int v13 = v6 + 3;
      if ((unint64_t)(v6 + 3) < v4)
      {
        uint64_t v14 = v6 + 2;
        do
        {
          int v16 = *v13;
          if (*v14 == 42)
          {
            if (v16 == 42) {
              goto LABEL_32;
            }
            if (v16 == 47)
            {
              uint64_t v6 = v14 + 2;
              goto LABEL_11;
            }
          }
          else if (v16 == 42)
          {
LABEL_32:
            uint64_t v15 = 1;
            goto LABEL_29;
          }
          uint64_t v15 = 2;
LABEL_29:
          v14 += v15;
          int v13 = v14 + 1;
        }
        while ((unint64_t)(v14 + 1) < v4);
      }
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      uint64_t v18 = 3;
LABEL_38:
      *(void *)uint64_t v17 = v18;
      *(void *)(v17 + 40) = 0;
      *(_OWORD *)(v17 + 24) = 0u;
      *(_OWORD *)(v17 + 8) = 0u;
      *(unsigned char *)(v17 + 48) = 12;
LABEL_39:
      swift_willThrow();
      goto LABEL_40;
    }
    if (v9 != 47)
    {
LABEL_42:
      v1[3] = v6;
      goto LABEL_46;
    }
    if ((unint64_t)(v6 + 2) < v4)
    {
      unint64_t v10 = v4 - 2 - (void)v6;
      v6 += 3;
      while (1)
      {
        int v11 = *(v6 - 1);
        if (v11 == 13 || v11 == 10) {
          break;
        }
        ++v6;
        if (!--v10) {
          goto LABEL_34;
        }
      }
LABEL_11:
      if ((unint64_t)v6 < v4) {
        continue;
      }
    }
    goto LABEL_34;
  }
  if (v7 == 160)
  {
LABEL_10:
    ++v6;
    goto LABEL_11;
  }
  v1[3] = v6;
  if (v7 == 125)
  {
    if (withoutBraces)
    {
      unint64_t v20 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v6, v1[1], v1[2]);
      uint64_t v22 = v21;
      uint64_t v24 = v23;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v25 = 0;
      *(void *)(v25 + 8) = 0;
      *(void *)(v25 + 16) = 125;
      *(void *)(v25 + 24) = v20;
      *(void *)(v25 + 32) = v22;
      *(void *)(v25 + 40) = v24;
      *(unsigned char *)(v25 + 48) = 1;
      goto LABEL_39;
    }
    unint64_t v5 = (unint64_t)(v6 + 1);
    v1[3] = v6 + 1;
    goto LABEL_35;
  }
LABEL_46:
  Swift::Int count = 0;
  uint64_t v26 = v1 + 6;
  int64_t v27 = JSON5Scanner.JSONPartialMapData.recordStartCollection(tagType:with:)(5u, (void *)v1[1], v1[2], (uint64_t)v6);
  Swift::Bool done = 0;
  while (1)
  {
    JSON5Scanner._scanObjectLoop(withoutBraces:count:done:)(withoutBraces, &count, &done);
    if (v28) {
      break;
    }
    if (done)
    {
      Swift::Int v29 = count;
      JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)((void *)v1[1], v1[2], v1[3]);
      Swift::String v30 = (void *)v1[6];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        Swift::String v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
      }
      unint64_t v32 = v30[2];
      unint64_t v31 = v30[3];
      unint64_t v33 = v32 + 1;
      if (v32 >= v31 >> 1) {
        Swift::String v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, v30);
      }
      v30[2] = v33;
      v30[v32 + 4] = 7;
      uint64_t v34 = &v30[v27 + 4];
      *uint64_t v34 = v33;
      v34[1] = v29;
      uint64_t v19 = v2[5] - 1;
      v2[6] = v30;
      goto LABEL_41;
    }
  }
  Swift::Int v35 = count;
  JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)((void *)v1[1], v1[2], v1[3]);
  uint64_t v36 = (void *)v1[6];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
  }
  unint64_t v37 = v36[2];
  unint64_t v38 = v36[3];
  unint64_t v39 = v37 + 1;
  if (v37 >= v38 >> 1)
  {
    uint64_t v41 = v36;
    unint64_t v42 = v36[2];
    unint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v37 + 1, 1, v41);
    unint64_t v37 = v42;
    uint64_t v36 = v43;
  }
  v36[2] = v39;
  v36[v37 + 4] = 7;
  int v40 = &v36[v27 + 4];
  *int v40 = v39;
  v40[1] = v35;
  *uint64_t v26 = v36;
LABEL_40:
  uint64_t v19 = v2[5] - 1;
LABEL_41:
  v2[5] = v19;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.scanValue()()
{
  int v2 = (unsigned __int8 *)v0[3];
  unint64_t v1 = v0[4];
  if ((unint64_t)v2 >= v1)
  {
LABEL_33:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    uint64_t v14 = 1;
    goto LABEL_35;
  }
  while (1)
  {
    uint64_t v3 = *v2;
    if (v3 < 0x40 && ((1 << v3) & 0x100003E00) != 0) {
      goto LABEL_9;
    }
    if (v3 != 47) {
      break;
    }
    if ((unint64_t)(v2 + 1) >= v1) {
      goto LABEL_38;
    }
    int v5 = v2[1];
    if (v5 == 42)
    {
      int v9 = v2 + 3;
      if ((unint64_t)(v2 + 3) < v1)
      {
        unint64_t v10 = v2 + 2;
        do
        {
          int v12 = *v9;
          if (*v10 == 42)
          {
            if (v12 == 42) {
              goto LABEL_31;
            }
            if (v12 == 47)
            {
              int v2 = v10 + 2;
              goto LABEL_10;
            }
          }
          else if (v12 == 42)
          {
LABEL_31:
            uint64_t v11 = 1;
            goto LABEL_28;
          }
          uint64_t v11 = 2;
LABEL_28:
          v10 += v11;
          int v9 = v10 + 1;
        }
        while ((unint64_t)(v10 + 1) < v1);
      }
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      uint64_t v14 = 3;
LABEL_35:
      *(void *)uint64_t v13 = v14;
      *(void *)(v13 + 40) = 0;
      *(_OWORD *)(v13 + 24) = 0u;
      *(_OWORD *)(v13 + 8) = 0u;
      char v15 = 12;
LABEL_36:
      *(unsigned char *)(v13 + 48) = v15;
      swift_willThrow();
      return;
    }
    if (v5 != 47)
    {
LABEL_38:
      v0[3] = v2;
LABEL_39:
      unint64_t v16 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v2, v0[1], v0[2]);
      uint64_t v18 = v17;
      uint64_t v20 = v19;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v13 = 0;
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = v3;
      *(void *)(v13 + 24) = v16;
      *(void *)(v13 + 32) = v18;
      *(void *)(v13 + 40) = v20;
      char v15 = 1;
      goto LABEL_36;
    }
    if ((unint64_t)(v2 + 2) < v1)
    {
      unint64_t v6 = v1 - 2 - (void)v2;
      v2 += 3;
      while (1)
      {
        int v7 = *(v2 - 1);
        if (v7 == 13 || v7 == 10) {
          break;
        }
        ++v2;
        if (!--v6) {
          goto LABEL_33;
        }
      }
LABEL_10:
      if ((unint64_t)v2 < v1) {
        continue;
      }
    }
    goto LABEL_33;
  }
  if (v3 == 160)
  {
LABEL_9:
    ++v2;
    goto LABEL_10;
  }
  v0[3] = v2;
  switch((int)v3)
  {
    case '""':
      Swift::UInt8_optional v21 = (Swift::UInt8_optional)34;
      goto LABEL_48;
    case '\'':
LABEL_47:
      Swift::UInt8_optional v21 = (Swift::UInt8_optional)39;
LABEL_48:
      JSON5Scanner.scanString(withQuote:)(v21);
      return;
    case '+':
    case '-':
      goto LABEL_41;
    case '[':
      JSON5Scanner.scanArray()();
      return;
    case 'f':
    case 't':
      JSON5Scanner.scanBool()();
      return;
    case 'n':
      JSON5Scanner.scanNull()();
      return;
    case '{':
      JSON5Scanner.scanObject()();
      return;
    default:
      if ((v3 - 58) <= 0xFFFFFFF5)
      {
        switch((int)v3)
        {
          case 9:
          case 10:
          case 13:
          case 32:
            __break(1u);
            goto LABEL_47;
          case 46:
          case 73:
          case 78:
            break;
          default:
            goto LABEL_39;
        }
      }
LABEL_41:
      JSON5Scanner.DocumentReader.skipNumber()();
      JSON5Scanner.JSONPartialMapData.record(tagType:count:dataOffset:with:)(1u, v0[3] - (void)v2, (uint64_t)&v2[-v0[1]], (void *)v0[1], v0[2], v0[3]);
      break;
  }
}

Swift::UInt8 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.DocumentReader.consumeWhitespace()()
{
  int v2 = *(unsigned __int8 **)(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 24);
  if ((unint64_t)v2 >= v1)
  {
LABEL_33:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    uint64_t v14 = 1;
    goto LABEL_35;
  }
  while (1)
  {
    unsigned int v3 = *v2;
    if (v3 <= 0x3F && ((1 << v3) & 0x100003E00) != 0) {
      goto LABEL_9;
    }
    if (v3 != 47) {
      break;
    }
    if ((unint64_t)(v2 + 1) >= v1) {
      goto LABEL_36;
    }
    int v5 = v2[1];
    if (v5 == 42)
    {
      int v9 = v2 + 3;
      if ((unint64_t)(v2 + 3) < v1)
      {
        unint64_t v10 = v2 + 2;
        do
        {
          int v12 = *v9;
          if (*v10 == 42)
          {
            if (v12 == 42) {
              goto LABEL_31;
            }
            if (v12 == 47)
            {
              int v2 = v10 + 2;
              goto LABEL_10;
            }
          }
          else if (v12 == 42)
          {
LABEL_31:
            uint64_t v11 = 1;
            goto LABEL_28;
          }
          uint64_t v11 = 2;
LABEL_28:
          v10 += v11;
          int v9 = v10 + 1;
        }
        while ((unint64_t)(v10 + 1) < v1);
      }
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      uint64_t v14 = 3;
LABEL_35:
      *(void *)uint64_t v13 = v14;
      *(void *)(v13 + 40) = 0;
      *(_OWORD *)(v13 + 24) = 0u;
      *(_OWORD *)(v13 + 8) = 0u;
      *(unsigned char *)(v13 + 48) = 12;
      swift_willThrow();
      LOBYTE(v3) = 0;
      return v3;
    }
    if (v5 != 47)
    {
LABEL_36:
      *(void *)(v0 + 16) = v2;
      LOBYTE(v3) = 47;
      return v3;
    }
    if ((unint64_t)(v2 + 2) < v1)
    {
      unint64_t v6 = v1 - 2 - (void)v2;
      v2 += 3;
      while (1)
      {
        int v7 = *(v2 - 1);
        if (v7 == 13 || v7 == 10) {
          break;
        }
        ++v2;
        if (!--v6) {
          goto LABEL_33;
        }
      }
LABEL_10:
      if ((unint64_t)v2 < v1) {
        continue;
      }
    }
    goto LABEL_33;
  }
  if (v3 == 160)
  {
LABEL_9:
    ++v2;
    goto LABEL_10;
  }
  *(void *)(v0 + 16) = v2;
  return v3;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.scanString(withQuote:)(Swift::UInt8_optional withQuote)
{
  char v12 = 0;
  unint64_t v4 = JSON5Scanner.DocumentReader.skipUTF8StringTillNextUnescapedQuote(isSimple:quote:)(&v12, *(_WORD *)&withQuote & 0x1FF);
  if (v2) {
    return;
  }
  int v5 = (unsigned __int8 *)v1[3];
  if ((*(_WORD *)&withQuote & 0x100) == 0)
  {
    if ((unsigned __int8 *)v1[4] == v5)
    {
      __break(1u);
    }
    else
    {
      uint64_t v6 = (uint64_t)(v5 + 1);
      int v7 = *v5;
      v1[3] = v5 + 1;
      if (v7 == withQuote.value) {
        goto LABEL_6;
      }
    }
    __break(1u);
    return;
  }
  uint64_t v6 = v1[3];
LABEL_6:
  uint64_t v8 = v5 - v4;
  int v9 = (unsigned __int8 *)v1[1];
  uint64_t v10 = v4 - v9;
  if (v12) {
    unsigned __int8 v11 = 8;
  }
  else {
    unsigned __int8 v11 = 0;
  }
  JSON5Scanner.JSONPartialMapData.record(tagType:count:dataOffset:with:)(v11, v8, v10, v9, v1[2], v6);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.scanArray()()
{
  unint64_t v4 = (unsigned __int8 *)v1[3];
  unint64_t v5 = v1[4];
  if ((unsigned __int8 *)v5 == v4)
  {
    __break(1u);
  }
  else
  {
    uint64_t v0 = v1;
    uint64_t v6 = v4 + 1;
    int v7 = *v4;
    v1[3] = v4 + 1;
    if (v7 == 91)
    {
      uint64_t v8 = v1[5];
      if (v8 > 511)
      {
        unint64_t v19 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v4, v1[1], v1[2]);
        uint64_t v21 = v20;
        uint64_t v23 = v22;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v24 = v19;
        *(void *)(v24 + 8) = v21;
        *(void *)(v24 + 16) = v23;
        *(void *)(v24 + 24) = 0;
        *(void *)(v24 + 32) = 0;
        *(void *)(v24 + 40) = 0;
        *(unsigned char *)(v24 + 48) = 2;
        swift_willThrow();
        return;
      }
      v1[5] = v8 + 1;
      if ((unint64_t)v6 >= v5)
      {
LABEL_37:
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        uint64_t v26 = 1;
      }
      else
      {
        while (1)
        {
          unsigned int v9 = *v6;
          if (v9 < 0x40 && ((1 << v9) & 0x100003E00) != 0) {
            goto LABEL_12;
          }
          if (v9 != 47)
          {
            if (v9 == 160)
            {
LABEL_12:
              ++v6;
              goto LABEL_13;
            }
            v1[3] = v6;
            if (v9 != 93)
            {
              if (v9 <= 0x20)
              {
                uint64_t v35 = 1 << v9;
                if (((1 << v9) & 0x100002600) != 0)
                {
                  __break(1u);
LABEL_65:
                  if (v35 == 93)
                  {
LABEL_70:
                    uint64_t v45 = v0[2];
                    uint64_t v46 = v0[3] + 1;
                    v0[3] = v46;
                    long long v44 = (void *)v0[1];
                  }
                  else
                  {
                    if (v35 <= 0x20 && ((1 << v35) & 0x100002600) != 0)
                    {
                      __break(1u);
LABEL_87:
                      __break(1u);
                      JUMPOUT(0x181B90A2CLL);
                    }
                    unint64_t v38 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v0[3], v0[1], v0[2]);
                    uint64_t v40 = v39;
                    uint64_t v42 = v41;
                    lazy protocol witness table accessor for type JSONError and conformance JSONError();
                    swift_allocError();
                    *(_OWORD *)uint64_t v43 = xmmword_182112840;
                    *(void *)(v43 + 16) = v1;
                    *(void *)(v43 + 24) = v38;
                    *(void *)(v43 + 32) = v40;
                    *(void *)(v43 + 40) = v42;
                    *(unsigned char *)(v43 + 48) = 1;
                    swift_willThrow();
LABEL_69:
                    long long v44 = (void *)v0[1];
                    uint64_t v45 = v0[2];
                    uint64_t v46 = v0[3];
                  }
                  JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(v44, v45, v46);
                  uint64_t v47 = (void *)v0[6];
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47[2] + 1, 1, v47);
                  }
                  unint64_t v49 = v47[2];
                  unint64_t v48 = v47[3];
                  unint64_t v50 = v49 + 1;
                  if (v49 >= v48 >> 1) {
                    uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v48 > 1), v49 + 1, 1, v47);
                  }
                  v47[2] = v50;
                  v47[v49 + 4] = 7;
                  uint64_t v51 = &v47[v2 + 4];
                  *uint64_t v51 = v50;
                  v51[1] = v3 + 1;
                  goto LABEL_85;
                }
              }
              goto LABEL_42;
            }
            uint64_t v52 = (uint64_t)(v6 + 1);
            v1[3] = v52;
            JSON5Scanner.JSONPartialMapData.recordEmptyCollection(tagType:with:)(6u, (void *)v1[1], v1[2], v52);
LABEL_40:
            --v1[5];
            return;
          }
          if ((unint64_t)(v6 + 1) >= v5) {
            goto LABEL_41;
          }
          int v11 = v6[1];
          if (v11 == 42) {
            break;
          }
          if (v11 != 47)
          {
LABEL_41:
            v1[3] = v6;
LABEL_42:
            int64_t v2 = JSON5Scanner.JSONPartialMapData.recordStartCollection(tagType:with:)(6u, (void *)v1[1], v1[2], (uint64_t)v6);
            unint64_t v27 = 0;
            while (2)
            {
              unint64_t v3 = v27;
              Swift::UInt8 v28 = JSON5Scanner.DocumentReader.consumeWhitespace()();
              if (!v29)
              {
                LOBYTE(v1) = v28;
                switch(v28)
                {
                  case '""':
                    Swift::UInt8_optional v31 = (Swift::UInt8_optional)34;
                    goto LABEL_51;
                  case '\'':
                    Swift::UInt8_optional v31 = (Swift::UInt8_optional)39;
LABEL_51:
                    JSON5Scanner.scanString(withQuote:)(v31);
                    goto LABEL_55;
                  case '+':
                  case '-':
                    goto LABEL_49;
                  case '[':
                    JSON5Scanner.scanArray()();
                    goto LABEL_55;
                  case 'f':
                  case 't':
                    JSON5Scanner.scanBool()();
                    goto LABEL_55;
                  case 'n':
                    JSON5Scanner.scanNull()();
                    goto LABEL_55;
                  case '{':
                    JSON5Scanner.scanObject()();
LABEL_55:
                    if (!v30) {
                      goto LABEL_56;
                    }
                    goto LABEL_80;
                  default:
                    if ((v28 - 58) <= 0xF5u)
                    {
                      switch(v28)
                      {
                        case 9u:
                        case 0xAu:
                        case 0xDu:
                        case 0x20u:
                          goto LABEL_87;
                        case 0x2Eu:
                        case 0x49u:
                        case 0x4Eu:
                          break;
                        default:
                          goto LABEL_79;
                      }
                    }
LABEL_49:
                    uint64_t v32 = v0[3];
                    JSON5Scanner.DocumentReader.skipNumber()();
                    JSON5Scanner.JSONPartialMapData.record(tagType:count:dataOffset:with:)(1u, v0[3] - v32, v32 - v0[1], (void *)v0[1], v0[2], v0[3]);
LABEL_56:
                    Swift::UInt8 v33 = JSON5Scanner.DocumentReader.consumeWhitespace()();
                    if (v34) {
                      goto LABEL_69;
                    }
                    LOBYTE(v1) = v33;
                    LODWORD(v35) = v33;
                    if (v33 != 44) {
                      goto LABEL_65;
                    }
                    ++v0[3];
                    Swift::UInt8 v36 = JSON5Scanner.DocumentReader.consumeWhitespace()();
                    if (v37) {
                      goto LABEL_69;
                    }
                    unint64_t v27 = v3 + 1;
                    if (v36 == 93) {
                      goto LABEL_70;
                    }
                    continue;
                }
              }
              goto LABEL_80;
            }
          }
          if ((unint64_t)(v6 + 2) < v5)
          {
            unint64_t v12 = v5 - 2 - (void)v6;
            v6 += 3;
            while (1)
            {
              int v13 = *(v6 - 1);
              if (v13 == 13 || v13 == 10) {
                break;
              }
              ++v6;
              if (!--v12) {
                goto LABEL_37;
              }
            }
LABEL_13:
            if ((unint64_t)v6 < v5) {
              continue;
            }
          }
          goto LABEL_37;
        }
        char v15 = v6 + 3;
        if ((unint64_t)(v6 + 3) < v5)
        {
          unint64_t v16 = v6 + 2;
          do
          {
            int v18 = *v15;
            if (*v16 == 42)
            {
              if (v18 == 42) {
                goto LABEL_34;
              }
              if (v18 == 47)
              {
                uint64_t v6 = v16 + 2;
                goto LABEL_13;
              }
            }
            else if (v18 == 42)
            {
LABEL_34:
              uint64_t v17 = 1;
              goto LABEL_31;
            }
            uint64_t v17 = 2;
LABEL_31:
            v16 += v17;
            char v15 = v16 + 1;
          }
          while ((unint64_t)(v16 + 1) < v5);
        }
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        uint64_t v26 = 3;
      }
      *(void *)uint64_t v25 = v26;
      *(void *)(v25 + 40) = 0;
      *(_OWORD *)(v25 + 24) = 0u;
      *(_OWORD *)(v25 + 8) = 0u;
      *(unsigned char *)(v25 + 48) = 12;
      swift_willThrow();
      goto LABEL_40;
    }
  }
  __break(1u);
LABEL_79:
  unint64_t v53 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v0[3], v0[1], v0[2]);
  uint64_t v55 = v54;
  uint64_t v57 = v56;
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(void *)uint64_t v58 = 0;
  *(void *)(v58 + 8) = 0;
  *(void *)(v58 + 16) = v1;
  *(void *)(v58 + 24) = v53;
  *(void *)(v58 + 32) = v55;
  *(void *)(v58 + 40) = v57;
  *(unsigned char *)(v58 + 48) = 1;
  swift_willThrow();
LABEL_80:
  JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)((void *)v0[1], v0[2], v0[3]);
  uint64_t v47 = (void *)v0[6];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47[2] + 1, 1, v47);
  }
  unint64_t v60 = v47[2];
  unint64_t v59 = v47[3];
  unint64_t v61 = v60 + 1;
  if (v60 >= v59 >> 1) {
    uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v59 > 1), v60 + 1, 1, v47);
  }
  v47[2] = v61;
  v47[v60 + 4] = 7;
  uint64_t v62 = &v47[v2 + 4];
  *uint64_t v62 = v61;
  v62[1] = v3;
LABEL_85:
  --v0[5];
  v0[6] = v47;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.scanNull()()
{
  int64_t v2 = (unsigned char *)v0[3];
  unint64_t v3 = v0[4];
  if (v3 < (unint64_t)v2)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((uint64_t)(v3 - (void)v2) <= 3)
  {
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v4 = 1;
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(void *)(v4 + 40) = 0;
    char v5 = 12;
LABEL_22:
    *(unsigned char *)(v4 + 48) = v5;
    swift_willThrow();
    return;
  }
  unint64_t v1 = v0;
  if (*(_DWORD *)v2 != 1819047278)
  {
    if ((((v0[1] + v0[2] - v3) | (unint64_t)&v2[-v0[1]]) & 0x8000000000000000) == 0)
    {
      if (*v2 == 110)
      {
        if (v2[1] == 117)
        {
          if (v2[2] == 108)
          {
            if (v2[3] == 108) {
              uint64_t v6 = 0;
            }
            else {
              uint64_t v6 = 3;
            }
          }
          else
          {
            uint64_t v6 = 2;
          }
        }
        else
        {
          uint64_t v6 = 1;
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      uint64_t v12 = 0;
      int v13 = (unsigned __int8 *)(v0[3] + v6);
      if ((unint64_t)v13 < v0[4]) {
        uint64_t v12 = *v13;
      }
      unint64_t v14 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v13, v0[1], v0[2]);
      uint64_t v16 = v15;
      uint64_t v18 = v17;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v4 = 0xD000000000000016;
      *(void *)(v4 + 8) = 0x80000001823ABB80;
      *(void *)(v4 + 16) = v12;
      *(void *)(v4 + 24) = v14;
      *(void *)(v4 + 32) = v16;
      *(void *)(v4 + 40) = v18;
      char v5 = 1;
      goto LABEL_22;
    }
    goto LABEL_24;
  }
  v0[3] = v2 + 4;
  int v7 = (void *)v0[1];
  uint64_t v8 = v0[2];
  v0 += 6;
  JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(v7, v8, (uint64_t)(v2 + 4));
  unint64_t v1 = (void *)v1[6];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_25:
  }
    unint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1[2] + 1, 1, v1);
  unint64_t v10 = v1[2];
  unint64_t v9 = v1[3];
  unint64_t v11 = v10 + 1;
  if (v10 >= v9 >> 1)
  {
    unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v1);
    unint64_t v11 = v10 + 1;
    unint64_t v1 = v19;
  }
  v1[2] = v11;
  v1[v10 + 4] = 2;
  *uint64_t v0 = v1;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.scanBool()()
{
  unint64_t v1 = (unsigned __int8 *)v0[3];
  int64_t v2 = (unsigned __int8 *)v0[4];
  if (v2 != v1)
  {
    unint64_t v3 = v0;
    uint64_t v4 = v1 + 1;
    int v5 = *v1;
    v0[3] = v1 + 1;
    if (v5 == 116)
    {
      if (v2 >= v4)
      {
        if (v2 - v4 > 2)
        {
          if (*(_WORD *)v4 == 30066 && v1[3] == 101)
          {
            v0[3] = v1 + 4;
            unint64_t v10 = (void *)v0[1];
            uint64_t v11 = v0[2];
            v0 += 6;
            JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(v10, v11, (uint64_t)(v1 + 4));
            unint64_t v3 = (void *)v3[6];
            if (swift_isUniquelyReferenced_nonNull_native())
            {
LABEL_27:
              unint64_t v13 = v3[2];
              unint64_t v12 = v3[3];
              unint64_t v14 = v13 + 1;
              if (v13 >= v12 >> 1)
              {
                uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v3);
                unint64_t v14 = v13 + 1;
                unint64_t v3 = v29;
              }
              _OWORD v3[2] = v14;
              uint64_t v15 = &v3[v13];
              uint64_t v16 = 3;
LABEL_35:
              v15[4] = v16;
              *uint64_t v0 = v3;
              return;
            }
LABEL_47:
            unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
            goto LABEL_27;
          }
          if ((((v0[1] + v0[2] - (void)v2) | (unint64_t)&v4[-v0[1]]) & 0x8000000000000000) == 0)
          {
            if (*v4 == 114)
            {
              if (v1[2] == 117)
              {
                uint64_t v7 = 2 * (v1[3] != 101);
                goto LABEL_37;
              }
              goto LABEL_36;
            }
            goto LABEL_25;
          }
          goto LABEL_45;
        }
LABEL_16:
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v8 = 1;
        *(_OWORD *)(v8 + 8) = 0u;
        *(_OWORD *)(v8 + 24) = 0u;
        *(void *)(v8 + 40) = 0;
        char v9 = 12;
LABEL_40:
        *(unsigned char *)(v8 + 48) = v9;
        swift_willThrow();
        return;
      }
      __break(1u);
    }
    else if (v5 == 102)
    {
      if (v2 >= v4)
      {
        if (v2 - v4 >= 4)
        {
          if (*(_DWORD *)v4 == 1702063201)
          {
            v0[3] = v1 + 5;
            uint64_t v17 = (void *)v0[1];
            uint64_t v18 = v0[2];
            v0 += 6;
            JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(v17, v18, (uint64_t)(v1 + 5));
            unint64_t v3 = (void *)v3[6];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
            }
            unint64_t v20 = v3[2];
            unint64_t v19 = v3[3];
            unint64_t v21 = v20 + 1;
            if (v20 >= v19 >> 1)
            {
              uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v3);
              unint64_t v21 = v20 + 1;
              unint64_t v3 = v30;
            }
            _OWORD v3[2] = v21;
            uint64_t v15 = &v3[v20];
            uint64_t v16 = 4;
            goto LABEL_35;
          }
          if ((((v0[1] + v0[2] - (void)v2) | (unint64_t)&v4[-v0[1]]) & 0x8000000000000000) == 0)
          {
            if (*v4 == 97)
            {
              if (v1[2] == 108)
              {
                if (v1[3] == 115)
                {
                  if (v1[4] == 101) {
                    uint64_t v7 = 0;
                  }
                  else {
                    uint64_t v7 = 3;
                  }
                }
                else
                {
                  uint64_t v7 = 2;
                }
LABEL_37:
                _StringGuts.grow(_:)(20);
                swift_bridgeObjectRelease();
                uint64_t v22 = 0;
                uint64_t v23 = (unsigned __int8 *)(v0[3] + v7);
                if ((unint64_t)v23 < v0[4]) {
                  uint64_t v22 = *v23;
                }
                unint64_t v24 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v23, v0[1], v0[2]);
                uint64_t v26 = v25;
                uint64_t v28 = v27;
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(void *)uint64_t v8 = 0xD000000000000019;
                *(void *)(v8 + 8) = 0x80000001823ABB50;
                *(void *)(v8 + 16) = v22;
                *(void *)(v8 + 24) = v24;
                *(void *)(v8 + 32) = v26;
                *(void *)(v8 + 40) = v28;
                char v9 = 1;
                goto LABEL_40;
              }
LABEL_36:
              uint64_t v7 = 1;
              goto LABEL_37;
            }
LABEL_25:
            uint64_t v7 = 0;
            goto LABEL_37;
          }
          goto LABEL_46;
        }
        goto LABEL_16;
      }
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    __break(1u);
    goto LABEL_44;
  }
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner._scanObjectLoop(withoutBraces:count:done:)(Swift::Bool withoutBraces, Swift::Int *count, Swift::Bool *done)
{
  uint64_t v4 = v3;
  JSON5Scanner.scanKey()();
  if (v8) {
    return;
  }
  char v9 = (unsigned __int8 *)v3[3];
  unint64_t v10 = v3[4];
  if ((unint64_t)v9 >= v10)
  {
LABEL_34:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    uint64_t v22 = 1;
    goto LABEL_36;
  }
  while (1)
  {
    uint64_t v11 = *v9;
    if (v11 < 0x40 && ((1 << v11) & 0x100003E00) != 0) {
      goto LABEL_10;
    }
    if (v11 != 47) {
      break;
    }
    if ((unint64_t)(v9 + 1) >= v10) {
      goto LABEL_39;
    }
    int v13 = v9[1];
    if (v13 == 42)
    {
      uint64_t v17 = v9 + 3;
      if ((unint64_t)(v9 + 3) < v10)
      {
        uint64_t v18 = v9 + 2;
        do
        {
          int v20 = *v17;
          if (*v18 == 42)
          {
            if (v20 == 42) {
              goto LABEL_32;
            }
            if (v20 == 47)
            {
              char v9 = v18 + 2;
              goto LABEL_11;
            }
          }
          else if (v20 == 42)
          {
LABEL_32:
            uint64_t v19 = 1;
            goto LABEL_29;
          }
          uint64_t v19 = 2;
LABEL_29:
          v18 += v19;
          uint64_t v17 = v18 + 1;
        }
        while ((unint64_t)(v18 + 1) < v10);
      }
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      uint64_t v22 = 3;
LABEL_36:
      *(void *)uint64_t v21 = v22;
      *(void *)(v21 + 40) = 0;
      *(_OWORD *)(v21 + 24) = 0u;
      *(_OWORD *)(v21 + 8) = 0u;
      char v23 = 12;
LABEL_37:
      *(unsigned char *)(v21 + 48) = v23;
      swift_willThrow();
      return;
    }
    if (v13 != 47)
    {
LABEL_39:
      v3[3] = v9;
LABEL_51:
      unint64_t v30 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v9, v3[1], v3[2]);
      uint64_t v32 = v35;
      uint64_t v34 = v36;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_OWORD *)uint64_t v21 = xmmword_182112850;
      *(void *)(v21 + 16) = v11;
      goto LABEL_52;
    }
    if ((unint64_t)(v9 + 2) < v10)
    {
      unint64_t v14 = v10 - 2 - (void)v9;
      v9 += 3;
      while (1)
      {
        int v15 = *(v9 - 1);
        if (v15 == 13 || v15 == 10) {
          break;
        }
        ++v9;
        if (!--v14) {
          goto LABEL_34;
        }
      }
LABEL_11:
      if ((unint64_t)v9 < v10) {
        continue;
      }
    }
    goto LABEL_34;
  }
  if (v11 == 160)
  {
LABEL_10:
    ++v9;
    goto LABEL_11;
  }
  v3[3] = v9;
  if (v11 != 58) {
    goto LABEL_51;
  }
  v3[3] = v9 + 1;
  JSON5Scanner.scanValue()();
  if (!v24)
  {
    *count += 2;
    Swift::UInt8_optional v25 = JSON5Scanner.DocumentReader.consumeWhitespace(allowingEOF:)(withoutBraces);
    if (!v26)
    {
      Swift::UInt8 value = v25.value;
      if ((*(_WORD *)&v25 & 0x100) != 0)
      {
        if (!withoutBraces)
        {
          __break(1u);
          return;
        }
        goto LABEL_55;
      }
      if (v25.value == 125) {
        goto LABEL_49;
      }
      if (v25.value != 44)
      {
        unint64_t v37 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v4[3], v4[1], v4[2]);
        uint64_t v39 = v38;
        uint64_t v41 = v40;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_OWORD *)uint64_t v21 = xmmword_182112850;
        *(void *)(v21 + 16) = value;
        *(void *)(v21 + 24) = v37;
        *(void *)(v21 + 32) = v39;
        *(void *)(v21 + 40) = v41;
        goto LABEL_53;
      }
      ++v4[3];
      Swift::UInt8_optional v28 = JSON5Scanner.DocumentReader.consumeWhitespace(allowingEOF:)(withoutBraces);
      if (!v29)
      {
        if ((*(_WORD *)&v28 & 0x100) != 0) {
          goto LABEL_55;
        }
        if (v28.value == 125)
        {
LABEL_49:
          if (withoutBraces)
          {
            unint64_t v30 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v4[3], v4[1], v4[2]);
            uint64_t v32 = v31;
            uint64_t v34 = v33;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)uint64_t v21 = 0;
            *(void *)(v21 + 8) = 0;
            *(void *)(v21 + 16) = 125;
LABEL_52:
            *(void *)(v21 + 24) = v30;
            *(void *)(v21 + 32) = v32;
            *(void *)(v21 + 40) = v34;
LABEL_53:
            char v23 = 1;
            goto LABEL_37;
          }
          ++v4[3];
LABEL_55:
          *Swift::Bool done = 1;
        }
      }
    }
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.scanKey()()
{
  int64_t v2 = v0;
  uint64_t v3 = type metadata accessor for Unicode.GeneralCategory();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (unsigned __int8 *)v2[3];
  unint64_t v11 = v2[4];
  if ((unint64_t)v12 >= v11)
  {
LABEL_31:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v35 = 1;
    *(_OWORD *)(v35 + 8) = 0u;
    *(_OWORD *)(v35 + 24) = 0u;
    *(void *)(v35 + 40) = 0;
    char v36 = 12;
LABEL_32:
    *(unsigned char *)(v35 + 48) = v36;
    swift_willThrow();
  }
  else
  {
    uint64_t v38 = v4;
    switch(*v12)
    {
      case '""':
        Swift::UInt8_optional v20 = (Swift::UInt8_optional)34;
        goto LABEL_35;
      case '$':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case '\\':
      case '_':
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
        int v13 = specialized JSON5Scanner.DocumentReader.skipUTF8StringTillEndOfUnquotedKey(orEscapeSequence:)();
        if (v1) {
          return;
        }
        if (v13 == 92)
        {
          specialized JSON5Scanner.DocumentReader.skipUTF8StringTillEndOfUnquotedKey(orEscapeSequence:)();
          unsigned __int8 v14 = 0;
        }
        else
        {
          unsigned __int8 v14 = 8;
        }
        uint64_t v15 = v2[2];
        uint64_t v16 = v2[3];
        uint64_t v17 = v16 - (void)v12;
        uint64_t v18 = (unsigned __int8 *)v2[1];
        uint64_t v19 = v12 - v18;
        goto LABEL_8;
      case '\'':
        Swift::UInt8_optional v20 = (Swift::UInt8_optional)39;
LABEL_35:
        JSON5Scanner.scanString(withQuote:)(v20);
        return;
      default:
        uint64_t v37 = *v12;
        JSON5Scanner.DocumentReader.peekU32()(v2[1], v2[2], v12, v11);
        if (v1) {
          return;
        }
        if (v21) {
          goto LABEL_31;
        }
        Unicode.Scalar.properties.getter();
        Unicode.Scalar.Properties.generalCategory.getter();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        uint64_t v22 = v38;
        int v23 = (*(uint64_t (**)(char *, uint64_t))(v38 + 88))(v6, v3);
        if (v23 != *MEMORY[0x1E4FBC658]
          && v23 != *MEMORY[0x1E4FBC648]
          && v23 != *MEMORY[0x1E4FBC650]
          && v23 != *MEMORY[0x1E4FBC630]
          && v23 != *MEMORY[0x1E4FBC608]
          && v23 != *MEMORY[0x1E4FBC620])
        {
          (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v3);
          unint64_t v30 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v2[3], v2[1], v2[2]);
          uint64_t v32 = v31;
          uint64_t v34 = v33;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v35 = 0xD000000000000022;
          *(void *)(v35 + 8) = 0x80000001823ABB20;
          *(void *)(v35 + 16) = v37;
          *(void *)(v35 + 24) = v30;
          *(void *)(v35 + 32) = v32;
          *(void *)(v35 + 40) = v34;
          char v36 = 1;
          goto LABEL_32;
        }
        uint64_t v29 = v2[3];
        if (specialized JSON5Scanner.DocumentReader.skipUTF8StringTillEndOfUnquotedKey(orEscapeSequence:)() == 92)
        {
          specialized JSON5Scanner.DocumentReader.skipUTF8StringTillEndOfUnquotedKey(orEscapeSequence:)();
          unsigned __int8 v14 = 0;
        }
        else
        {
          unsigned __int8 v14 = 8;
        }
        uint64_t v15 = v2[2];
        uint64_t v16 = v2[3];
        uint64_t v17 = v16 - v29;
        uint64_t v18 = (unsigned __int8 *)v2[1];
        uint64_t v19 = v29 - (void)v18;
LABEL_8:
        JSON5Scanner.JSONPartialMapData.record(tagType:count:dataOffset:with:)(v14, v17, v19, v18, v15, v16);
        break;
    }
  }
}

unint64_t JSON5Scanner.DocumentReader.peekU32()(unint64_t a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4)
{
  if ((unint64_t)a3 >= a4)
  {
    LODWORD(result) = 0;
    return result;
  }
  if (*a3 != 92)
  {
    unint64_t result = BufferView<A>._decodeScalar()(a3, a4 - (void)a3);
    if ((result & 0x100000000) == 0) {
      return result;
    }
    unint64_t v23 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)a3, a1, a2);
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v28 = v23;
    *(void *)(v28 + 8) = v25;
    *(void *)(v28 + 16) = v27;
    *(void *)(v28 + 24) = 0;
    *(void *)(v28 + 32) = 0;
    *(void *)(v28 + 40) = 0;
    *(unsigned char *)(v28 + 48) = 0;
    return swift_willThrow();
  }
  unint64_t result = (unint64_t)(a3 + 1);
  if ((unint64_t)(a3 + 1) >= a4) {
    goto LABEL_28;
  }
  uint64_t v8 = *(unsigned __int8 *)result;
  if (v8 != 120)
  {
    if (v8 != 117)
    {
      unint64_t v29 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(result, a1, a2);
      uint64_t v31 = v30;
      uint64_t v33 = v32;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v21 = 0;
      *(void *)(v21 + 8) = 0;
      *(void *)(v21 + 16) = v8;
      *(void *)(v21 + 24) = v29;
      *(void *)(v21 + 32) = v31;
      *(void *)(v21 + 40) = v33;
      char v22 = 1;
      goto LABEL_46;
    }
    if ((uint64_t)(a4 - (void)a3) > 5)
    {
      unint64_t v9 = (unint64_t)(a3 + 2);
      uint64_t v10 = a1 + a2 - (void)(a3 + 2);
      if ((((unint64_t)&a3[-a1 + 2] | v10) & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else
      {
        if (v10 >= 4) {
          uint64_t v11 = 4;
        }
        else {
          uint64_t v11 = a1 + a2 - (void)(a3 + 2);
        }
        if (v10 >= 4)
        {
          unsigned __int16 v12 = 0;
          int v13 = a3 + 2;
          while (1)
          {
            int v14 = *v13;
            unsigned __int8 v15 = v14 - 48;
            if ((v14 - 48) >= 0xA)
            {
              if ((v14 - 65) < 6)
              {
                unsigned __int8 v15 = v14 - 55;
              }
              else
              {
                if ((v14 - 97) > 5) {
                  break;
                }
                unsigned __int8 v15 = v14 - 87;
              }
            }
            if (v12 > 0xFFFu) {
              break;
            }
            unsigned __int16 v12 = 16 * v12 + v15;
            if (++v13 >= &a3[v11 + 2])
            {
              if (!v12) {
                goto LABEL_48;
              }
              if (v12 >> 11 == 27)
              {
                unint64_t v16 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)a3, a1, a2);
                uint64_t v18 = v17;
                uint64_t v20 = v19;
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(void *)uint64_t v21 = v16;
                *(void *)(v21 + 8) = v18;
                *(void *)(v21 + 16) = v20;
                *(void *)(v21 + 24) = v12;
                *(void *)(v21 + 32) = 0;
                *(void *)(v21 + 40) = 0;
                char v22 = 9;
                goto LABEL_46;
              }
              LODWORD(result) = v12;
              return result;
            }
          }
LABEL_45:
          uint64_t v40 = static String._fromUTF8Repairing(_:)();
          uint64_t v42 = v41;
          unint64_t v43 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v9, a1, a2);
          uint64_t v45 = v44;
          uint64_t v47 = v46;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v21 = v40;
          *(void *)(v21 + 8) = v42;
          *(void *)(v21 + 16) = v43;
          *(void *)(v21 + 24) = v45;
          *(void *)(v21 + 32) = v47;
          *(void *)(v21 + 40) = 0;
          char v22 = 3;
          goto LABEL_46;
        }
      }
      __break(1u);
      goto LABEL_52;
    }
LABEL_28:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v21 = 1;
    *(_OWORD *)(v21 + 8) = 0u;
    *(_OWORD *)(v21 + 24) = 0u;
    *(void *)(v21 + 40) = 0;
    char v22 = 12;
LABEL_46:
    *(unsigned char *)(v21 + 48) = v22;
    return swift_willThrow();
  }
  if ((uint64_t)(a4 - (void)a3) <= 3) {
    goto LABEL_28;
  }
  unint64_t v9 = (unint64_t)(a3 + 2);
  uint64_t v34 = a1 + a2 - (void)(a3 + 2);
  if ((((unint64_t)&a3[-a1 + 2] | v34) & 0x8000000000000000) != 0)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v34 >= 2) {
    uint64_t v35 = 2;
  }
  else {
    uint64_t v35 = a1 + a2 - (void)(a3 + 2);
  }
  if (v34 >= 2)
  {
    unsigned __int8 v36 = 0;
    uint64_t v37 = a3 + 2;
    while (1)
    {
      int v38 = *v37;
      char v39 = v38 - 48;
      if ((v38 - 48) >= 0xA)
      {
        if ((v38 - 65) < 6)
        {
          char v39 = v38 - 55;
        }
        else
        {
          if ((v38 - 97) > 5) {
            goto LABEL_45;
          }
          char v39 = v38 - 87;
        }
      }
      if (v36 > 0xFu) {
        goto LABEL_45;
      }
      unsigned __int8 v36 = v39 + 16 * v36;
      if (++v37 >= &a3[v35 + 2])
      {
        if (v36)
        {
          LODWORD(result) = v36;
          return result;
        }
LABEL_48:
        unint64_t v48 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v9, a1, a2);
        uint64_t v50 = v49;
        uint64_t v52 = v51;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v21 = v48;
        *(void *)(v21 + 8) = v50;
        *(void *)(v21 + 16) = v52;
        *(void *)(v21 + 24) = 0;
        *(void *)(v21 + 32) = 0;
        *(void *)(v21 + 40) = 0;
        char v22 = 4;
        goto LABEL_46;
      }
    }
  }
LABEL_53:
  __break(1u);
  return result;
}

unsigned __int8 *JSON5Scanner.DocumentReader.skipUTF8StringTillNextUnescapedQuote(isSimple:quote:)(unsigned char *a1, __int16 quote)
{
  uint64_t v5 = (unsigned __int8 *)v2[2];
  if ((quote & 0x100) != 0)
  {
    int v14 = specialized JSON5Scanner.DocumentReader.skipUTF8StringTillEndOfUnquotedKey(orEscapeSequence:)();
    if (!v3)
    {
      if (v14 != 92) {
        goto LABEL_12;
      }
      *a1 = 0;
      specialized JSON5Scanner.DocumentReader.skipUTF8StringTillEndOfUnquotedKey(orEscapeSequence:)();
    }
    return v5;
  }
  uint64_t v6 = (unsigned __int8 *)v2[3];
  if (v6 == v5)
  {
LABEL_33:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v19 = 1;
    *(_OWORD *)(v19 + 8) = 0u;
    *(_OWORD *)(v19 + 24) = 0u;
    *(void *)(v19 + 40) = 0;
    char v20 = 12;
LABEL_34:
    *(unsigned char *)(v19 + 48) = v20;
LABEL_35:
    swift_willThrow();
    return v5;
  }
  unsigned __int8 v7 = quote;
  unsigned int v9 = *v5++;
  uint64_t v8 = v9;
  v2[2] = (unint64_t)v5;
  if (v9 != quote)
  {
    unint64_t v15 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v5, *v2, v2[1]);
    uint64_t v5 = v16;
    uint64_t v18 = v17;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v19 = 0;
    *(void *)(v19 + 8) = 0;
    *(void *)(v19 + 16) = v8;
    *(void *)(v19 + 24) = v15;
    *(void *)(v19 + 32) = v5;
    *(void *)(v19 + 40) = v18;
    char v20 = 1;
    goto LABEL_34;
  }
  unint64_t result = (unsigned __int8 *)JSON5Scanner.DocumentReader.skipUTF8StringTillQuoteOrBackslashOrInvalidCharacter(quote:)(quote);
  if (v11) {
    return v5;
  }
  if (result == v7)
  {
LABEL_12:
    *a1 = 1;
    return v5;
  }
  *a1 = 0;
  unsigned __int16 v12 = (unsigned __int8 *)v2[2];
  if (v12 >= v6) {
    goto LABEL_33;
  }
  int v13 = 16843009 * v7;
  while (1)
  {
    int v23 = *v12;
    if (v23 == v7) {
      return v5;
    }
    if (v23 != 92)
    {
      uint64_t v21 = v12 + 1;
      v2[2] = (unint64_t)(v12 + 1);
      char v22 = (unsigned __int8 *)v2[3];
      goto LABEL_14;
    }
    char v22 = (unsigned __int8 *)v2[3];
    if (v22 == v12) {
      break;
    }
    v2[2] = (unint64_t)(v12 + 1);
    if (v22 == v12 + 1) {
      goto LABEL_33;
    }
    int v24 = v12[1];
    uint64_t v21 = v12 + 2;
    v2[2] = (unint64_t)(v12 + 2);
    if (v24 == 120)
    {
      if (v22 - v21 <= 1)
      {
LABEL_37:
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v29 = 1;
        *(_OWORD *)(v29 + 8) = 0u;
        *(_OWORD *)(v29 + 24) = 0u;
        *(void *)(v29 + 40) = 0;
        char v30 = 12;
LABEL_39:
        *(unsigned char *)(v29 + 48) = v30;
        goto LABEL_35;
      }
      unint64_t v27 = (unint64_t)&v21[-*v2];
      uint64_t v28 = (char *)(v27 + 2);
      if (__OFADD__(v27, 2)) {
        goto LABEL_43;
      }
      if ((((&v28[*v2] - (char *)v21) | v27) & 0x8000000000000000) != 0 || (uint64_t)v2[1] < (uint64_t)v28) {
        goto LABEL_44;
      }
      if ((~((((v13 ^ *(unsigned __int16 *)v21) & 0x7F7F7F7F) + 2139062143) | *(unsigned __int16 *)v21) & 0x80808080) != 0)
      {
LABEL_38:
        uint64_t v5 = (unsigned __int8 *)static String._fromUTF8Repairing(_:)();
        uint64_t v32 = v31;
        unint64_t v33 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v2[2], *v2, v2[1]);
        uint64_t v35 = v34;
        uint64_t v37 = v36;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v29 = v5;
        *(void *)(v29 + 8) = v32;
        *(void *)(v29 + 16) = v33;
        *(void *)(v29 + 24) = v35;
        *(void *)(v29 + 32) = v37;
        *(void *)(v29 + 40) = 0;
        char v30 = 3;
        goto LABEL_39;
      }
      uint64_t v21 = v12 + 4;
      v2[2] = (unint64_t)(v12 + 4);
    }
    else if (v24 == 117)
    {
      if (v22 - v21 <= 3) {
        goto LABEL_37;
      }
      unint64_t v25 = (unint64_t)&v21[-*v2];
      uint64_t v26 = (char *)(v25 + 4);
      if (__OFADD__(v25, 4)) {
        goto LABEL_41;
      }
      if ((((&v26[*v2] - (char *)v21) | v25) & 0x8000000000000000) != 0 || (uint64_t)v2[1] < (uint64_t)v26) {
        goto LABEL_42;
      }
      if ((~((((*(_DWORD *)v21 ^ v13) & 0x7F7F7F7F) + 2139062143) | *(_DWORD *)v21) & 0x80808080) != 0) {
        goto LABEL_38;
      }
      uint64_t v21 = v12 + 6;
      v2[2] = (unint64_t)(v12 + 6);
    }
LABEL_14:
    unsigned __int16 v12 = v21;
    if (v21 >= v22) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

Swift::Void __swiftcall JSON5Scanner.DocumentReader.skipNumber()()
{
  uint64_t v1 = *(unsigned __int8 **)(v0 + 16);
  int64_t v2 = *(unsigned __int8 **)(v0 + 24);
  if (v2 == v1)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    return;
  }
  int v5 = *v1;
  uint64_t v3 = v1 + 1;
  int v4 = v5;
  *(void *)(v0 + 16) = v3;
  if ((v5 - 58) <= 0xFFFFFFF5)
  {
    unsigned int v6 = v4 - 43;
    BOOL v7 = v6 > 0x23;
    uint64_t v8 = (1 << v6) & 0x84000000DLL;
    if (v7 || v8 == 0) {
      goto LABEL_19;
    }
  }
  for (; v3 < v2; *(void *)(v0 + 16) = ++v3)
  {
    unsigned int v10 = *v3;
    if (v10 - 58 < 0xFFFFFFF6)
    {
      BOOL v11 = v10 > 0x2E || ((1 << v10) & 0x680000000000) == 0;
      if (v11 && (v10 & 0xFFFFFFDF) - 91 <= 0xFFFFFFE5) {
        break;
      }
    }
  }
}

uint64_t specialized BufferView.suffix(from:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (((a2 + a3 - result) | (result - a2)) < 0) {
    __break(1u);
  }
  return result;
}

Swift::UInt8 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.DocumentReader.skipUTF8StringTillQuoteOrBackslashOrInvalidCharacter(quote:)(Swift::UInt8 quote)
{
  int64_t v2 = *(unsigned __int8 **)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  if ((unint64_t)v2 >= v3)
  {
LABEL_9:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v7 = 1;
    *(_OWORD *)(v7 + 8) = 0u;
    *(_OWORD *)(v7 + 24) = 0u;
    *(void *)(v7 + 40) = 0;
    *(unsigned char *)(v7 + 48) = 12;
    swift_willThrow();
    LOBYTE(v5) = 0;
  }
  else
  {
    int v4 = quote;
    while (1)
    {
      unsigned int v5 = *v2;
      BOOL v6 = v5 < 0x20 || v5 == v4;
      if (v6 || v5 == 92) {
        break;
      }
      *(void *)(v1 + 16) = ++v2;
      if ((unint64_t)v2 >= v3) {
        goto LABEL_9;
      }
    }
  }
  return v5;
}

uint64_t static JSON5Scanner.stringValue(from:fullSource:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = (unsigned __int8 *)(a1 + a2);
  unsigned int v9 = (unsigned __int8 *)a1;
  if (a2 >= 1)
  {
    do
    {
      unsigned int v10 = *v9;
      if (v10 == 92) {
        break;
      }
      if (v10 < 0x20) {
        break;
      }
      ++v9;
    }
    while (v9 < v8);
    if ((unint64_t)v9 < a1)
    {
      __break(1u);
      return v19[0];
    }
  }
  uint64_t result = static String._tryFromUTF8(_:)();
  if (v12)
  {
    v19[0] = result;
    v19[1] = v12;
    if (v8 != v9)
    {
      if (v8 < v9)
      {
        __break(1u);
        return result;
      }
      specialized static JSON5Scanner._slowpath_stringValue(from:appendingTo:fullSource:)(v9, v8 - v9, v19, a3, a4);
      if (v4) {
        return swift_bridgeObjectRelease();
      }
      return v19[0];
    }
  }
  else
  {
    unint64_t v13 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(a1, a3, a4);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v18 = v13;
    *(void *)(v18 + 8) = v15;
    *(void *)(v18 + 16) = v17;
    *(void *)(v18 + 24) = 0;
    *(void *)(v18 + 32) = 0;
    *(void *)(v18 + 40) = 0;
    *(unsigned char *)(v18 + 48) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t specialized BufferView.prefix(_:)(uint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) == 0) {
    return a2;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in static JSON5Scanner.validateInfinity(from:fullSource:)(const char *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  if (a2 < 8 || (uint64_t result = strncmp(a1, "Infinity", 8uLL), result))
  {
    uint64_t v10 = StaticString.description.getter();
    uint64_t v12 = v11;
    unint64_t v13 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(a3, a5, a6);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v18 = v10;
    *(void *)(v18 + 8) = v12;
    *(void *)(v18 + 16) = v13;
    *(void *)(v18 + 24) = v15;
    *(void *)(v18 + 32) = v17;
    *(void *)(v18 + 40) = 0;
    *(unsigned char *)(v18 + 48) = 5;
    return swift_willThrow();
  }
  return result;
}

unint64_t specialized JSON5Scanner.DocumentReader.skipUTF8StringTillEndOfUnquotedKey(orEscapeSequence:)()
{
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for Unicode.GeneralCategory();
  uint64_t v39 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  BOOL v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = JSON5Scanner.DocumentReader.peekU32()(*(void *)v3, *(void *)(v3 + 8), *(unsigned __int8 **)(v3 + 16), *(void *)(v3 + 24));
  if (!v1)
  {
    unint64_t v2 = v11;
    uint64_t v14 = v12;
    uint64_t v48 = v7;
    uint64_t v15 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v16 = (uint64_t (**)(char *, uint64_t))(v39 + 88);
    int v17 = *MEMORY[0x1E4FBC658];
    int v46 = *MEMORY[0x1E4FBC648];
    int v47 = v17;
    int v18 = *MEMORY[0x1E4FBC650];
    int v44 = *MEMORY[0x1E4FBC630];
    int v45 = v18;
    int v19 = *MEMORY[0x1E4FBC608];
    int v42 = *MEMORY[0x1E4FBC638];
    int v43 = v19;
    int v20 = *MEMORY[0x1E4FBC618];
    int v40 = *MEMORY[0x1E4FBC628];
    int v41 = v20;
    uint64_t v37 = (void (**)(char *, uint64_t))(v39 + 8);
    LODWORD(v39) = *MEMORY[0x1E4FBC620];
    int v38 = *MEMORY[0x1E4FBC668];
    while ((v13 & 1) == 0)
    {
      Unicode.Scalar.properties.getter();
      Unicode.Scalar.Properties.generalCategory.getter();
      (*v15)(v10, v48);
      int v24 = (*v16)(v6, v4);
      if (v24 != v47
        && v24 != v46
        && v24 != v45
        && v24 != v44
        && v24 != v43
        && v24 != v42
        && v24 != v41
        && v24 != v40
        && v24 != v39
        && v24 != v38)
      {
        if (((v2 - 36) > 0x3B || ((1 << (v2 - 36)) & 0x900000000000001) == 0)
          && (v2 - 8204) >= 2)
        {
          (*v37)(v6, v4);
          return v2;
        }
        (*v37)(v6, v4);
      }
      unint64_t v21 = *(void *)(v3 + 24);
      char v22 = (unsigned __int8 *)(*(void *)(v3 + 16) + v14);
      *(void *)(v3 + 16) = v22;
      unint64_t v2 = JSON5Scanner.DocumentReader.peekU32()(*(void *)v3, *(void *)(v3 + 8), v22, v21);
      uint64_t v14 = v23;
    }
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v34 = 1;
    *(_OWORD *)(v34 + 8) = 0u;
    *(_OWORD *)(v34 + 24) = 0u;
    *(void *)(v34 + 40) = 0;
    *(unsigned char *)(v34 + 48) = 12;
    swift_willThrow();
  }
  return v2;
}

unsigned __int8 *specialized static JSON5Scanner.parseEscapeSequence(from:into:fullSource:)(unsigned __int8 *a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  if (!a2)
  {
    __break(1u);
LABEL_44:
    __break(1u);
    JUMPOUT(0x181B92C64);
  }
  uint64_t v8 = a1;
  uint64_t v9 = *a1;
  switch(*a1)
  {
    case 0xAu:
    case 0x6Eu:
      uint64_t v9 = 10;
      goto LABEL_15;
    case 0xDu:
      if (a2 < 2 || a1[1] != 10) {
        goto LABEL_8;
      }
      v18._uint64_t countAndFlagsBits = 2573;
      v18._uint64_t object = (void *)0xE200000000000000;
      String.append(_:)(v18);
      v8 += 2;
      return v8;
    case 0x22u:
      goto LABEL_15;
    case 0x27u:
      uint64_t v9 = 39;
      goto LABEL_15;
    case 0x2Fu:
      uint64_t v9 = 47;
      goto LABEL_15;
    case 0x5Cu:
      uint64_t v9 = 92;
      goto LABEL_15;
    case 0x62u:
      uint64_t v9 = 8;
      goto LABEL_15;
    case 0x66u:
      uint64_t v9 = 12;
      goto LABEL_15;
    case 0x72u:
LABEL_8:
      uint64_t v9 = 13;
      goto LABEL_15;
    case 0x74u:
      uint64_t v9 = 9;
LABEL_15:
      v19._uint64_t countAndFlagsBits = v9;
      v19._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v19);
      return ++v8;
    case 0x75u:
      if (a2 >= 1) {
        uint64_t v21 = 1;
      }
      else {
        uint64_t v21 = a2;
      }
      char v22 = specialized static JSONScanner.parseUnicodeSequence(from:into:fullSource:allowNulls:)((unint64_t)&a1[v21], a2 - v21, a3, a4, a5, 0);
      if (!v5) {
        return v22;
      }
      return v8;
    case 0x78u:
      if (a2 >= 1) {
        uint64_t v23 = 1;
      }
      else {
        uint64_t v23 = a2;
      }
      BOOL v24 = a2 - v23 < 2;
      if (a2 - v23 >= 2) {
        uint64_t v25 = 2;
      }
      else {
        uint64_t v25 = a2 - v23;
      }
      if (v24) {
        goto LABEL_44;
      }
      unsigned __int8 v26 = 0;
      unint64_t v27 = (unint64_t)&a1[v23];
      uint64_t v8 = &a1[v23 + v25];
      uint64_t v28 = &a1[v23];
      break;
    default:
      unint64_t v11 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)a1, a4, a5);
      uint64_t v13 = v12;
      uint64_t v15 = v14;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v16 = v9;
      *(void *)(v16 + 8) = v11;
      *(void *)(v16 + 16) = v13;
      *(void *)(v16 + 24) = v15;
      *(void *)(v16 + 32) = 0;
      *(void *)(v16 + 40) = 0;
      char v17 = 6;
      goto LABEL_40;
  }
  do
  {
    int v29 = *v28;
    char v30 = v29 - 48;
    if ((v29 - 48) >= 0xA)
    {
      if ((v29 - 65) < 6)
      {
        char v30 = v29 - 55;
      }
      else
      {
        if ((v29 - 97) > 5) {
          goto LABEL_39;
        }
        char v30 = v29 - 87;
      }
    }
    if (v26 > 0xFu)
    {
LABEL_39:
      uint64_t v31 = static String._fromUTF8Repairing(_:)();
      uint64_t v8 = v32;
      unint64_t v33 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v27, a4, a5);
      uint64_t v35 = v34;
      uint64_t v37 = v36;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v16 = v31;
      *(void *)(v16 + 8) = v8;
      *(void *)(v16 + 16) = v33;
      *(void *)(v16 + 24) = v35;
      *(void *)(v16 + 32) = v37;
      *(void *)(v16 + 40) = 0;
      char v17 = 3;
      goto LABEL_40;
    }
    unsigned __int8 v26 = v30 + 16 * v26;
    ++v28;
  }
  while (v28 < v8);
  if (v26)
  {
    uint64_t v43 = *a3;
    uint64_t v44 = a3[1];
    String.UnicodeScalarView.append(_:)();
    *a3 = v43;
    a3[1] = v44;
    return v8;
  }
  unint64_t v38 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v27, a4, a5);
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(void *)uint64_t v16 = v38;
  *(void *)(v16 + 8) = v40;
  *(void *)(v16 + 16) = v42;
  *(void *)(v16 + 24) = 0;
  *(void *)(v16 + 32) = 0;
  *(void *)(v16 + 40) = 0;
  char v17 = 4;
LABEL_40:
  *(unsigned char *)(v16 + 48) = v17;
  swift_willThrow();
  return v8;
}

unsigned __int8 *specialized static JSON5Scanner._slowpath_stringValue(from:appendingTo:fullSource:)(unsigned __int8 *result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9 = result;
  if (a2 < 1)
  {
    unint64_t v11 = (unint64_t)result;
LABEL_14:
    uint64_t v17 = static String._tryFromUTF8(_:)();
    if (v18)
    {
      String.append(_:)(*(Swift::String *)&v17);
      return (unsigned __int8 *)swift_bridgeObjectRelease();
    }
    else
    {
LABEL_16:
      unint64_t v19 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v11, a4, a5);
      uint64_t v21 = v20;
      uint64_t v23 = v22;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v24 = v19;
      *(void *)(v24 + 8) = v21;
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0;
      *(void *)(v24 + 40) = 0;
      *(unsigned char *)(v24 + 48) = 0;
      return (unsigned __int8 *)swift_willThrow();
    }
  }
  else
  {
    uint64_t v10 = &result[a2];
    unint64_t v11 = (unint64_t)result;
    uint64_t v12 = result;
    do
    {
      uint64_t v13 = *v12;
      if (v13 == 92)
      {
        if ((unint64_t)v12 < v11)
        {
          __break(1u);
LABEL_20:
          unint64_t v25 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v12, a4, a5);
          uint64_t v27 = v26;
          uint64_t v29 = v28;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v30 = v13;
          *(void *)(v30 + 8) = v25;
          *(void *)(v30 + 16) = v27;
          *(void *)(v30 + 24) = v29;
          *(void *)(v30 + 32) = 0;
          *(void *)(v30 + 40) = 0;
          *(unsigned char *)(v30 + 48) = 7;
          return (unsigned __int8 *)swift_willThrow();
        }
        uint64_t v14 = static String._tryFromUTF8(_:)();
        if (!v15) {
          goto LABEL_16;
        }
        String.append(_:)(*(Swift::String *)&v14);
        swift_bridgeObjectRelease();
        uint64_t result = v12 + 1;
        uint64_t v16 = v10 - (v12 + 1);
        if (((v12 + 1 - v9) | v16) < 0)
        {
          __break(1u);
          goto LABEL_22;
        }
        uint64_t result = specialized static JSON5Scanner.parseEscapeSequence(from:into:fullSource:)(result, v16, a3, a4, a5);
        if (v5) {
          return result;
        }
        unint64_t v11 = (unint64_t)result;
        uint64_t v12 = result;
      }
      else
      {
        if (v13 < 0x20) {
          goto LABEL_20;
        }
        ++v12;
      }
    }
    while (v12 < v10);
    if ((unint64_t)v12 >= v11) {
      goto LABEL_14;
    }
LABEL_22:
    __break(1u);
  }
  return result;
}

unsigned __int8 *specialized static JSON5Scanner.validateLeadingZero(in:zero:fullSource:)(unsigned __int8 *result, uint64_t a2, unsigned __int8 *a3, unint64_t a4, uint64_t a5)
{
  if (!a2) {
    return a3;
  }
  uint64_t v5 = *result;
  if (*result <= 0x57u)
  {
    if (v5 == 46 || v5 == 69) {
      return a3;
    }
LABEL_15:
    unint64_t v8 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)result, a4, a5);
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    if ((v5 - 58) >= 0xFFFFFFF6)
    {
      *(void *)uint64_t v13 = v8;
      *(void *)(v13 + 8) = v10;
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0;
      *(void *)(v13 + 40) = 0;
      char v14 = 10;
    }
    else
    {
      *(_OWORD *)uint64_t v13 = xmmword_182112860;
      *(void *)(v13 + 16) = v5;
      *(void *)(v13 + 24) = v8;
      *(void *)(v13 + 32) = v10;
      *(void *)(v13 + 40) = v12;
      char v14 = 1;
    }
    *(unsigned char *)(v13 + 48) = v14;
LABEL_19:
    swift_willThrow();
    return a3;
  }
  if (v5 != 120)
  {
    if (v5 == 101) {
      return a3;
    }
    if (v5 != 88) {
      goto LABEL_15;
    }
  }
  if (a2 >= 1)
  {
    a3 = result + 1;
    unsigned __int8 v6 = result[1];
    if ((v6 - 58) > 0xF5u) {
      return a3;
    }
    if (result[1] - 65 <= 0x25 && ((1 << (v6 - 65)) & 0x3F0000003FLL) != 0) {
      return a3;
    }
    unint64_t v15 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)(result + 1), a4, a5);
    uint64_t v17 = v16;
    uint64_t v19 = v18;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_OWORD *)uint64_t v20 = xmmword_182112860;
    *(void *)(v20 + 16) = v6;
    *(void *)(v20 + 24) = v15;
    *(void *)(v20 + 32) = v17;
    *(void *)(v20 + 40) = v19;
    *(unsigned char *)(v20 + 48) = 1;
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t specialized static JSON5Scanner.validateInfinity(from:fullSource:)(char *__s1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2 <= 7 || (uint64_t result = strncmp(__s1, "Infinity", 8uLL), result))
  {
    uint64_t v8 = StaticString.description.getter();
    uint64_t v10 = v9;
    unint64_t v11 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)__s1, a3, a4);
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v16 = v8;
    *(void *)(v16 + 8) = v10;
    *(void *)(v16 + 16) = v11;
    *(void *)(v16 + 24) = v13;
    *(void *)(v16 + 32) = v15;
    *(void *)(v16 + 40) = 0;
    *(unsigned char *)(v16 + 48) = 5;
    return swift_willThrow();
  }
  return result;
}

uint64_t specialized static JSON5Scanner.validateNaN(from:fullSource:)(char *__s1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2 <= 2 || (uint64_t result = strncmp(__s1, "NaN", 3uLL), result))
  {
    uint64_t v8 = StaticString.description.getter();
    uint64_t v10 = v9;
    unint64_t v11 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)__s1, a3, a4);
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v16 = v8;
    *(void *)(v16 + 8) = v10;
    *(void *)(v16 + 16) = v11;
    *(void *)(v16 + 24) = v13;
    *(void *)(v16 + 32) = v15;
    *(void *)(v16 + 40) = 0;
    *(unsigned char *)(v16 + 48) = 5;
    return swift_willThrow();
  }
  return result;
}

unsigned __int8 *specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(unsigned __int8 *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v4 = *result;
    if ((v4 - 58) >= 0xFFFFFFF6) {
      return result;
    }
    unint64_t v5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)result, a3, a4);
    uint64_t v7 = v6;
    uint64_t v9 = v8;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v10 = 0xD000000000000013;
    *(void *)(v10 + 8) = 0x80000001823ABAC0;
    *(void *)(v10 + 16) = v4;
  }
  else
  {
    unint64_t v5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)result, a3, a4);
    uint64_t v7 = v11;
    uint64_t v9 = v12;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v10 = 0;
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 46;
  }
  *(void *)(v10 + 24) = v5;
  *(void *)(v10 + 32) = v7;
  *(void *)(v10 + 40) = v9;
  *(unsigned char *)(v10 + 48) = 1;
  return (unsigned __int8 *)swift_willThrow();
}

unint64_t specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(char *__s1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  unint64_t v9 = *__s1;
  if (v9 != 48)
  {
    if ((v9 - 58) > 0xFFFFFFF6)
    {
LABEL_26:
      unint64_t v9 = (unint64_t)__s1;
LABEL_34:
      uint64_t v23 = &__s1[a2 - 1];
      uint64_t v24 = *v23;
      if ((v24 | 0x20) != 0x65) {
        return v9;
      }
      unint64_t v16 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v23, a3, a4);
      uint64_t v18 = v25;
      uint64_t v20 = v26;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v21 = 0xD000000000000010;
      *(void *)(v21 + 8) = 0x80000001823ABAE0;
      *(void *)(v21 + 16) = v24;
LABEL_36:
      *(void *)(v21 + 24) = v16;
      *(void *)(v21 + 32) = v18;
      *(void *)(v21 + 40) = v20;
      *(unsigned char *)(v21 + 48) = 1;
      swift_willThrow();
      return v9;
    }
    switch(*__s1)
    {
      case '+':
      case '-':
        if (a2 >= 2)
        {
          unint64_t v9 = (unint64_t)(__s1 + 1);
          uint64_t v13 = __s1[1];
          if (v13 == 48)
          {
            uint64_t v14 = specialized static JSON5Scanner.validateLeadingZero(in:zero:fullSource:)((unsigned __int8 *)__s1 + 2, a2 - 2, (unsigned __int8 *)__s1 + 1, a3, a4);
            if (v4) {
              return v9;
            }
            unint64_t v9 = (unint64_t)v14;
            if (v15) {
              return v9;
            }
          }
          else if ((v13 - 58) <= 0xFFFFFFF6)
          {
            switch(v13)
            {
              case '.':
                specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)((unsigned __int8 *)__s1 + 2, a2 - 2, a3, a4);
                if (v4) {
                  return v9;
                }
                break;
              case 'N':
                specialized static JSON5Scanner.validateNaN(from:fullSource:)(__s1 + 1, a2 - 1, a3, a4);
                if (v4) {
                  return v9;
                }
                break;
              case 'I':
                specialized static JSON5Scanner.validateInfinity(from:fullSource:)(__s1 + 1, a2 - 1, a3, a4);
                if (v4) {
                  return v9;
                }
                break;
              default:
                _StringGuts.grow(_:)(20);
                swift_bridgeObjectRelease();
                uint64_t v37 = 0x27207265746661;
                unint64_t v38 = 0xE700000000000000;
                unsigned int v28 = *__s1;
                if ((v28 & 0x80) != 0) {
                  unsigned int v29 = ((v28 >> 6) & 0xFFFFC0FF | ((v28 & 0x3F) << 8)) + 33217;
                }
                else {
                  unsigned int v29 = v28 + 1;
                }
                uint64_t v36 = (v29 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v29) >> 3)) & 7)));
                v30._uint64_t countAndFlagsBits = MEMORY[0x185302020](&v36);
                String.append(_:)(v30);
                swift_bridgeObjectRelease();
                v31._uint64_t countAndFlagsBits = 0x6D756E206E692027;
                v31._uint64_t object = (void *)0xEB00000000726562;
                String.append(_:)(v31);
                uint64_t v32 = v37;
                unint64_t v33 = v38;
                unint64_t v16 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v9, a3, a4);
                uint64_t v18 = v34;
                uint64_t v20 = v35;
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(void *)uint64_t v21 = v32;
                *(void *)(v21 + 8) = v33;
                *(void *)(v21 + 16) = v13;
                goto LABEL_36;
            }
          }
          goto LABEL_34;
        }
        if (a2 == 1)
        {
          unint64_t v16 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)__s1, a3, a4);
          uint64_t v18 = v17;
          uint64_t v20 = v19;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v21 = 0xD000000000000010;
          *(void *)(v21 + 8) = 0x80000001823ABAE0;
          *(void *)(v21 + 16) = v9;
          goto LABEL_36;
        }
        break;
      case '.':
        if (a2 >= 1) {
          uint64_t v22 = 1;
        }
        else {
          uint64_t v22 = a2;
        }
        specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)((unsigned __int8 *)&__s1[v22], a2 - v22, a3, a4);
        if (!v4) {
          goto LABEL_26;
        }
        return v9;
      case 'I':
        specialized static JSON5Scanner.validateInfinity(from:fullSource:)(__s1, a2, a3, a4);
        if (!v4) {
          goto LABEL_26;
        }
        return v9;
      case 'N':
        specialized static JSON5Scanner.validateNaN(from:fullSource:)(__s1, a2, a3, a4);
        if (!v4) {
          goto LABEL_26;
        }
        return v9;
      default:
        goto LABEL_45;
    }
LABEL_46:
    __break(1u);
    JUMPOUT(0x181B938BCLL);
  }
  if (a2 >= 1) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = a2;
  }
  uint64_t v11 = specialized static JSON5Scanner.validateLeadingZero(in:zero:fullSource:)((unsigned __int8 *)&__s1[v10], a2 - v10, (unsigned __int8 *)__s1, a3, a4);
  if (!v4)
  {
    unint64_t v9 = (unint64_t)v11;
    if ((v12 & 1) == 0) {
      goto LABEL_34;
    }
  }
  return v9;
}

unint64_t specialized static JSON5Scanner.validateNumber(from:fullSource:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (a2 < 1) {
    goto LABEL_55;
  }
  uint64_t v8 = (uint64_t)a1;
  uint64_t v10 = &a1[a2];
  int v11 = *a1;
  if (v11 == 45 || (char v12 = a1, v11 == 43)) {
    char v12 = a1 + 1;
  }
  if (v10 < v12)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  uint64_t v13 = v12 - a1;
  if (v12 - a1 < 0)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  if (v10 - v12 < 0)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (v10 - v12 >= 2) {
    size_t v14 = 2;
  }
  else {
    size_t v14 = v10 - v12;
  }
  if (_stringshims_strncasecmp_l(v12, "0x", v14, 0))
  {
    if (v12 < v10)
    {
      char v15 = 0;
      char v16 = 0;
      uint64_t v17 = (char *)(a2 + v8);
      uint64_t v18 = -v8;
      char v19 = 1;
LABEL_15:
      uint64_t v20 = 0;
      uint64_t v21 = v17 - v12;
      while ((uint64_t)&v12[v18 + v20] >= 0)
      {
        BOOL v22 = v21-- < 1;
        if (v22) {
          break;
        }
        uint64_t v8 = v12[v20];
        if ((v8 - 58) <= 0xF5u)
        {
          switch(v12[v20])
          {
            case '+':
            case '-':
              if (v20 != 0 || (v15 & 1) == 0) {
                goto LABEL_52;
              }
              char v15 = 0;
              char v19 = 0;
              v12 += v20 + 1;
              char v16 = 3;
              if (v12 < v10) {
                goto LABEL_15;
              }
              __break(1u);
              goto LABEL_54;
            case ',':
            case '/':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case ':':
            case ';':
            case '<':
            case '=':
            case '>':
            case '?':
            case '@':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
              goto LABEL_52;
            case '.':
              if ((v19 & 1) == 0) {
                goto LABEL_51;
              }
              char v15 = 0;
              char v19 = 0;
              v12 += v20 + 1;
              char v16 = 1;
              if (v12 < v10) {
                goto LABEL_15;
              }
              __break(1u);
              goto LABEL_34;
            case 'E':
              goto LABEL_27;
            default:
              if (v8 != 101) {
                goto LABEL_52;
              }
LABEL_27:
              if (v16 != 1 && (v16 || v20 < 1)) {
                goto LABEL_52;
              }
              char v19 = 0;
              v12 += v20 + 1;
              char v16 = 2;
              char v15 = 1;
              if (v12 < v10) {
                goto LABEL_15;
              }
LABEL_54:
              __break(1u);
              break;
          }
LABEL_55:
          __break(1u);
          goto LABEL_56;
        }
        if (__OFADD__(v20, 1)) {
          goto LABEL_49;
        }
        if (&v12[++v20] >= v10) {
          goto LABEL_50;
        }
      }
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      LOBYTE(v8) = 46;
LABEL_52:
      uint64_t v23 = (char *)&v12[v20];
      unint64_t v28 = 0xE900000000000072;
      uint64_t v29 = 0x65626D756E206E69;
      goto LABEL_53;
    }
LABEL_59:
    __break(1u);
    JUMPOUT(0x181B93C3CLL);
  }
LABEL_34:
  uint64_t v23 = (char *)(v12 + 2);
  if (v10 - (v12 + 2) < 1 || v23 >= v10 || ((unint64_t)&v23[-v8] & 0x8000000000000000) != 0)
  {
LABEL_46:
    __break(1u);
  }
  else
  {
    uint64_t v24 = a2 + v8 - (void)v12 - 3;
    uint64_t v25 = v13 + 3;
    while (1)
    {
      uint64_t v26 = v25;
      LOBYTE(v8) = *v23;
      if ((*v23 - 58) <= 0xF5u
        && (*v23 - 65 > 0x25
         || ((1 << (v8 - 65)) & 0x3F0000003FLL) == 0))
      {
        break;
      }
      BOOL v22 = v24-- < 1;
      if (!v22 && ++v23 < v10)
      {
        ++v25;
        if ((v26 & 0x8000000000000000) == 0) {
          continue;
        }
      }
      goto LABEL_46;
    }
  }
  unint64_t v28 = 0xED00007265626D75;
  uint64_t v29 = 0x6E20786568206E69;
LABEL_53:
  unint64_t result = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v23, a3, a4);
  *(void *)a5 = v29;
  *(void *)(a5 + 8) = v28;
  *(void *)(a5 + 16) = v8;
  *(void *)(a5 + 24) = result;
  *(void *)(a5 + 32) = v31;
  *(void *)(a5 + 40) = v32;
  *(unsigned char *)(a5 + 48) = 1;
  return result;
}

unint64_t specialized min<A>(_:_:)(unint64_t result, unint64_t a2)
{
  if (a2 < result) {
    return a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for JSONMap.Value(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7B && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 123);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 16) >> 5) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a1 + 16) >> 1) & 0xF))) ^ 0x7F;
  if (v3 >= 0x7A) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for JSONMap.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7A)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 123;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7B) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7B) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(unsigned char *)(result + 16) = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t getEnumTag for JSONMap.Value(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 <= 0x9F) {
    return v1 >> 5;
  }
  else {
    return (*(_DWORD *)a1 + 5);
  }
}

uint64_t destructiveProjectEnumData for JSONMap.Value(uint64_t result)
{
  *(unsigned char *)(result + 16) &= 0x1Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for JSONMap.Value(uint64_t result, unsigned int a2)
{
  if (a2 < 5)
  {
    *(unsigned char *)(result + 16) = *(unsigned char *)(result + 16) & 1 | (32 * a2);
  }
  else
  {
    *(void *)unint64_t result = a2 - 5;
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = -96;
  }
  return result;
}

uint64_t outlined copy of JSONError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  unsigned int v7 = (((a7 - 1) >> 1) | ((a7 - 1) << 7));
  BOOL v8 = v7 > 5;
  int v9 = (1 << v7) & 0x27;
  if (!v8 && v9 != 0) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for JSONError(uint64_t a1)
{
  return outlined consume of JSONError(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));
}

uint64_t initializeWithCopy for JSONError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  outlined copy of JSONError(*(void *)a2, v4, v5, v6, v7, v8, v9);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for JSONError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  outlined copy of JSONError(*(void *)a2, v4, v5, v6, v7, v8, v9);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  char v16 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v9;
  outlined consume of JSONError(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for JSONError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  char v11 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v3;
  outlined consume of JSONError(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for JSONError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF4 && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 244);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 0xC) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for JSONError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF3)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 244;
    if (a3 >= 0xF4) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF4) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for JSONError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 48) <= 0xBu) {
    return *(unsigned __int8 *)(a1 + 48);
  }
  else {
    return (*(_DWORD *)a1 + 12);
  }
}

uint64_t destructiveInjectEnumTag for JSONError(uint64_t result, unsigned int a2)
{
  if (a2 >= 0xC)
  {
    *(void *)__n128 result = a2 - 12;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)(result + 40) = 0;
    LOBYTE(a2) = 12;
  }
  *(unsigned char *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for JSONError()
{
  return &type metadata for JSONError;
}

uint64_t specialized RangeReplaceableCollection.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v70 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  long long v10 = (char *)&v62 - v9;
  BigString.init()();
  v76[0] = 0;
  MEMORY[0x185309530](v76, 8);
  uint64_t v11 = v76[0];
  type metadata accessor for AttributedString.Guts();
  uint64_t v12 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if (result)
  {
    uint64_t v62 = v8;
    uint64_t v69 = a2;
    long long v14 = v73[0];
    long long v15 = v73[1];
    *(_OWORD *)(v12 + 16) = v73[0];
    *(_OWORD *)(v12 + 32) = v15;
    long long v16 = v74;
    *(_OWORD *)(v12 + 48) = v74;
    *(void *)(v12 + 64) = 0;
    *(void *)(v12 + 72) = 0;
    *(void *)(v12 + 80) = 0;
    *(void *)(v12 + 88) = v11;
    v79[0] = v14;
    v79[1] = v15;
    v79[2] = v16;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v79, (uint64_t)v80);
    outlined retain of Locale((uint64_t)v80);
    uint64_t AssociatedConformanceWitness = BigString.startIndex.getter();
    uint64_t v68 = a3;
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    uint64_t v63 = v21;
    outlined release of Locale((uint64_t)v73);
    long long v22 = *(_OWORD *)(v12 + 32);
    v99[0] = *(_OWORD *)(v12 + 16);
    v99[1] = v22;
    long long v100 = *(_OWORD *)(v12 + 48);
    v101[0] = v99[0];
    v101[1] = v22;
    v101[2] = v100;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v101, (uint64_t)v102);
    outlined retain of Locale((uint64_t)v102);
    uint64_t v23 = BigString.endIndex.getter();
    uint64_t v66 = v10;
    uint64_t v67 = AssociatedTypeWitness;
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    uint64_t v29 = v28;
    outlined release of Locale((uint64_t)v99);
    uint64_t v88 = AssociatedConformanceWitness;
    uint64_t v89 = v18;
    uint64_t v90 = v20;
    uint64_t v91 = v63;
    uint64_t v92 = v23;
    uint64_t v93 = v25;
    uint64_t v94 = v27;
    uint64_t v95 = v29;
    long long v30 = *(_OWORD *)(v12 + 32);
    long long v96 = *(_OWORD *)(v12 + 16);
    long long v97 = v30;
    long long v98 = *(_OWORD *)(v12 + 48);
    swift_retain();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)&v75);
    uint64_t v31 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t AssociatedConformanceWitness = v32;
    uint64_t v34 = v33;
    uint64_t v36 = v35;
    uint64_t v37 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v39 = v38;
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    outlined release of Locale((uint64_t)v76);
    swift_release();
    *a4 = v12;
    a4[1] = v31;
    a4[2] = AssociatedConformanceWitness;
    a4[3] = v34;
    int v45 = v66;
    uint64_t v44 = v67;
    a4[4] = v36;
    a4[5] = v37;
    a4[6] = v39;
    a4[7] = v41;
    a4[8] = v43;
    a4[9] = 0;
    dispatch thunk of Sequence.makeIterator()();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    dispatch thunk of IteratorProtocol.next()();
    if (v72) {
      return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v45, v44);
    }
    uint64_t v64 = a4;
    while (1)
    {
      int v46 = v71;
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        break;
      }
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        goto LABEL_10;
      }
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        goto LABEL_11;
      }
      int v47 = (_OWORD *)*a4;
      long long v48 = *(_OWORD *)(*a4 + 32);
      long long v85 = *(_OWORD *)(*a4 + 16);
      long long v86 = v48;
      long long v87 = v47[3];
      LODWORD(v70) = v46;
      BigString.unicodeScalars.getter();
      uint64_t v49 = BigString.UnicodeScalarView.index(roundingDown:)();
      uint64_t v68 = v51;
      uint64_t v69 = v50;
      uint64_t v53 = v52;
      outlined release of Locale((uint64_t)&v77);
      long long v54 = v47[2];
      long long v82 = v47[1];
      long long v83 = v54;
      long long v84 = v47[3];
      BigString.unicodeScalars.getter();
      uint64_t v55 = BigString.UnicodeScalarView.index(roundingDown:)();
      uint64_t v57 = v56;
      uint64_t v59 = v58;
      uint64_t v61 = v60;
      outlined release of Locale((uint64_t)&v78);
      v81[0] = v49;
      a4 = v64;
      uint64_t v44 = v67;
      v81[1] = v69;
      v81[2] = v68;
      v81[3] = v53;
      v81[4] = v55;
      int v45 = v66;
      v81[5] = v57;
      v81[6] = v59;
      v81[7] = v61;
      specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)((uint64_t)v81);
      dispatch thunk of IteratorProtocol.next()();
      if (v72 == 1) {
        return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v45, v44);
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized RangeReplaceableCollection.init<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v31[0] = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  int v4 = (char *)v31 - v3;
  AttributedString.CharacterView.init()(a1);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v32 = v4;
  uint64_t v33 = AssociatedTypeWitness;
  v31[1] = AssociatedConformanceWitness;
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if (!v39) {
      return (*(uint64_t (**)(char *, uint64_t))(v31[0] + 8))(v32, v33);
    }
    uint64_t v6 = v38;
    uint64_t v7 = a1[5];
    uint64_t v8 = a1[6];
    uint64_t v9 = a1[7];
    uint64_t v10 = a1[8];
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      break;
    }
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_9;
    }
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_10;
    }
    uint64_t v12 = (_OWORD *)*a1;
    long long v13 = *(_OWORD *)(*a1 + 16);
    long long v14 = *(_OWORD *)(*a1 + 48);
    v42[1] = *(_OWORD *)(*a1 + 32);
    v42[2] = v14;
    v42[0] = v13;
    long long v15 = v12[1];
    v43[1] = v12[2];
    v43[2] = v14;
    v43[0] = v15;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v43, (uint64_t)v44);
    outlined retain of Locale((uint64_t)v44);
    uint64_t v37 = v6;
    uint64_t v16 = MEMORY[0x185301530](v7, v8, v9, v10);
    uint64_t v35 = v17;
    uint64_t v36 = v16;
    uint64_t v19 = v18;
    uint64_t v34 = v20;
    outlined release of Locale((uint64_t)v42);
    long long v21 = v12[1];
    long long v22 = v12[3];
    v41[1] = v12[2];
    v41[2] = v22;
    v41[0] = v21;
    long long v23 = v12[1];
    v45[1] = v12[2];
    v45[2] = v22;
    v45[0] = v23;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v45, (uint64_t)v46);
    outlined retain of Locale((uint64_t)v46);
    uint64_t v24 = MEMORY[0x185301530](v7, v8, v9, v10);
    uint64_t v26 = v25;
    uint64_t v28 = v27;
    uint64_t v30 = v29;
    outlined release of Locale((uint64_t)v41);
    v40[0] = v36;
    v40[1] = v19;
    v40[2] = v35;
    v40[3] = v34;
    v40[4] = v24;
    v40[5] = v26;
    v40[6] = v28;
    v40[7] = v30;
    specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v40);
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance JSONError.SourceLocation(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

unint64_t JSONError.debugDescription.getter()
{
  outlined init with take of JSONError(v0, (uint64_t)&v50);
  uint64_t v1 = v50;
  int v2 = (char)v50;
  switch(v56)
  {
    case 1:
      uint64_t v6 = (void *)v51;
      unsigned int v7 = v52;
      uint64_t v8 = v53;
      uint64_t v3 = v54;
      if (v51)
      {
        uint64_t v48 = 0;
        unint64_t v49 = 0xE000000000000000;
        _StringGuts.grow(_:)(55);
        v9._uint64_t object = (void *)0x80000001823ABEC0;
        v9._uint64_t countAndFlagsBits = 0xD000000000000016;
        String.append(_:)(v9);
        unsigned int v10 = ((v7 >> 6) & 0xFFFFC0FF | ((v7 & 0x3F) << 8)) + 33217;
        if ((v7 & 0x80) == 0) {
          unsigned int v10 = v7 + 1;
        }
        uint64_t v47 = (v10 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v10) >> 3)) & 7)));
        v11._uint64_t countAndFlagsBits = MEMORY[0x185302020](&v47);
        String.append(_:)(v11);
        swift_bridgeObjectRelease();
        v12._uint64_t countAndFlagsBits = 8231;
        v12._uint64_t object = (void *)0xE200000000000000;
        String.append(_:)(v12);
        v13._uint64_t countAndFlagsBits = v1;
        v13._uint64_t object = v6;
        String.append(_:)(v13);
        uint64_t v14 = 0x20646E756F726120;
        unint64_t v15 = 0xED000020656E696CLL;
      }
      else
      {
        uint64_t v48 = 0;
        unint64_t v49 = 0xE000000000000000;
        _StringGuts.grow(_:)(52);
        v44._uint64_t object = (void *)0x80000001823ABEC0;
        v44._uint64_t countAndFlagsBits = 0xD000000000000016;
        String.append(_:)(v44);
        unsigned int v45 = ((v7 >> 6) & 0xFFFFC0FF | ((v7 & 0x3F) << 8)) + 33217;
        if ((v7 & 0x80) == 0) {
          unsigned int v45 = (v7 + 1);
        }
        uint64_t v47 = (v45 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v45) >> 3)) & 7)));
        v46._uint64_t countAndFlagsBits = MEMORY[0x185302020](&v47);
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        uint64_t v14 = 0x646E756F72612027;
        unint64_t v15 = 0xEE0020656E696C20;
      }
      String.append(_:)(*(Swift::String *)&v14);
      uint64_t v47 = v8;
      goto LABEL_29;
    case 2:
      if (v53) {
        return 0xD000000000000027;
      }
      uint64_t v3 = v51;
      uint64_t v48 = 0;
      unint64_t v49 = 0xE000000000000000;
      _StringGuts.grow(_:)(65);
      unint64_t v4 = 0xD000000000000033;
      uint64_t v5 = "Too many nested arrays or dictionaries around line ";
LABEL_27:
      unint64_t v35 = (unint64_t)(v5 - 32) | 0x8000000000000000;
LABEL_28:
      String.append(_:)(*(Swift::String *)&v4);
      uint64_t v47 = v1;
LABEL_29:
      v41._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v41);
      swift_bridgeObjectRelease();
      v42._uint64_t countAndFlagsBits = 0x6E6D756C6F63202CLL;
      v42._uint64_t object = (void *)0xE900000000000020;
      String.append(_:)(v42);
      uint64_t v47 = v3;
      v43._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      unint64_t v38 = 46;
      unint64_t v39 = 0xE100000000000000;
LABEL_30:
      String.append(_:)(*(Swift::String *)&v38);
      return v48;
    case 3:
      uint64_t v17 = (void *)v51;
      uint64_t v18 = v52;
      uint64_t v3 = v53;
      uint64_t v48 = 0;
      unint64_t v49 = 0xE000000000000000;
      _StringGuts.grow(_:)(76);
      v19._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
      v19._uint64_t object = (void *)0x80000001823ABE00;
      String.append(_:)(v19);
      v20._uint64_t countAndFlagsBits = v1;
      v20._uint64_t object = v17;
      String.append(_:)(v20);
      unint64_t v21 = 0x646E756F72612027;
      unint64_t v22 = 0xEE0020656E696C20;
      goto LABEL_12;
    case 4:
      uint64_t v3 = v51;
      uint64_t v48 = 0;
      unint64_t v49 = 0xE000000000000000;
      _StringGuts.grow(_:)(51);
      unint64_t v4 = 0xD000000000000025;
      uint64_t v5 = "Unsupported escaped null around line ";
      goto LABEL_27;
    case 5:
      long long v23 = (void *)v51;
      uint64_t v18 = v52;
      uint64_t v3 = v53;
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      uint64_t v48 = 0x2064696C61766E49;
      unint64_t v49 = 0xE800000000000000;
      v24._uint64_t countAndFlagsBits = v1;
      v24._uint64_t object = v23;
      String.append(_:)(v24);
      unint64_t v21 = 0xD000000000000013;
      unint64_t v22 = 0x80000001823ABDB0;
LABEL_12:
      String.append(_:)(*(Swift::String *)&v21);
      uint64_t v47 = v18;
      goto LABEL_29;
    case 6:
      uint64_t v25 = v51;
      uint64_t v3 = v52;
      uint64_t v48 = 0;
      unint64_t v49 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v26._uint64_t countAndFlagsBits = 0xD000000000000019;
      v26._uint64_t object = (void *)0x80000001823ABD90;
      String.append(_:)(v26);
      unsigned int v27 = (((v1 & 0x3F) << 8) | (v1 >> 6)) + 33217;
      if (v2 >= 0) {
        unsigned int v27 = (v2 + 1);
      }
      uint64_t v47 = (v27 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v27) >> 3)) & 7)));
      uint64_t v28 = MEMORY[0x185302020](&v47);
      goto LABEL_17;
    case 7:
      uint64_t v25 = v51;
      uint64_t v3 = v52;
      uint64_t v48 = 0;
      unint64_t v49 = 0xE000000000000000;
      _StringGuts.grow(_:)(61);
      v30._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
      v30._uint64_t object = (void *)0x80000001823ABD70;
      String.append(_:)(v30);
      LOBYTE(v47) = v2;
      lazy protocol witness table accessor for type UInt8 and conformance UInt8();
      uint64_t v28 = String.init<A>(_:radix:uppercase:)();
LABEL_17:
      String.append(_:)(*(Swift::String *)&v28);
      swift_bridgeObjectRelease();
      v31._uint64_t countAndFlagsBits = 0x646E756F72612027;
      v31._uint64_t object = (void *)0xEE0020656E696C20;
      String.append(_:)(v31);
      uint64_t v47 = v25;
      goto LABEL_29;
    case 8:
      uint64_t v3 = v51;
      uint64_t v48 = 0;
      unint64_t v49 = 0xE000000000000000;
      _StringGuts.grow(_:)(67);
      unint64_t v4 = 0xD000000000000035;
      uint64_t v5 = "Missing low code point in surrogate pair around line ";
      goto LABEL_27;
    case 9:
      uint64_t v3 = v51;
      int v32 = v53;
      uint64_t v48 = 0;
      unint64_t v49 = 0xE000000000000000;
      _StringGuts.grow(_:)(62);
      v33._uint64_t countAndFlagsBits = 0xD000000000000020;
      v33._uint64_t object = (void *)0x80000001823ABD00;
      String.append(_:)(v33);
      LODWORD(v47) = v32;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v34._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0x646E756F72612027;
      unint64_t v35 = 0xEE0020656E696C20;
      goto LABEL_28;
    case 10:
      uint64_t v3 = v51;
      uint64_t v48 = 0;
      unint64_t v49 = 0xE000000000000000;
      _StringGuts.grow(_:)(51);
      unint64_t v4 = 0xD000000000000025;
      uint64_t v5 = "Number with leading zero around line ";
      goto LABEL_27;
    case 11:
      uint64_t v36 = (void *)v51;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      uint64_t v48 = 0x207265626D754ELL;
      unint64_t v49 = 0xE700000000000000;
      v37._uint64_t countAndFlagsBits = v1;
      v37._uint64_t object = v36;
      String.append(_:)(v37);
      unint64_t v38 = 0xD00000000000001FLL;
      unint64_t v39 = 0x80000001823ABCB0;
      goto LABEL_30;
    case 12:
      unint64_t result = 0xD000000000000016;
      if (!(v54 | v55 | v50 | v53 | v52 | v51)) {
        return 0xD000000000000058;
      }
      unint64_t v40 = v54 | v55 | v53 | v52 | v51;
      if (v50 != 1 || v40)
      {
        if (v50 == 2 && v40 == 0) {
          return 0xD000000000000045;
        }
        else {
          return 0xD00000000000001ALL;
        }
      }
      return result;
    default:
      uint64_t v3 = v51;
      uint64_t v48 = 0;
      unint64_t v49 = 0xE000000000000000;
      _StringGuts.grow(_:)(61);
      unint64_t v4 = 0xD00000000000002FLL;
      uint64_t v5 = "Unable to convert data to a string around line ";
      goto LABEL_27;
  }
}

double JSONError.sourceLocation.getter()
{
  outlined init with take of JSONError(v0, (uint64_t)v2);
  switch(v3)
  {
    case 0:
    case 4:
    case 8:
    case 9:
    case 10:
      double result = *(double *)v2;
      break;
    case 1:
      double result = *(double *)&v2[3];
      break;
    case 2:
      double result = *(double *)v2;
      break;
    case 3:
    case 5:
      double result = *(double *)&v2[2];
      break;
    case 6:
    case 7:
      double result = *(double *)&v2[1];
      break;
    default:
      double result = 0.0;
      break;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance JSONError(uint64_t a1, uint64_t a2)
{
  outlined init with take of JSONError(a1, (uint64_t)v4);
  outlined init with take of JSONError(a2, (uint64_t)v5);
  return specialized static JSONError.== infix(_:_:)((uint64_t)v4, (uint64_t)v5) & 1;
}

uint64_t specialized static JSONError.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with take of JSONError(a2, (uint64_t)&v53);
  outlined init with take of JSONError(a1, (uint64_t)&v59);
  uint64_t v4 = v59;
  int v5 = v59;
  switch(v65)
  {
    case 1:
      uint64_t v8 = v60;
      int v9 = v61;
      uint64_t v10 = v62;
      uint64_t v11 = v63;
      uint64_t v12 = v64;
      outlined init with take of JSONError(a2, (uint64_t)&v54);
      if (v58 != 1) {
        goto LABEL_111;
      }
      int v13 = v56.u8[0];
      uint64_t v14 = v56.i64[1];
      int8x16_t v15 = v57;
      if (!v8)
      {
        if (v55) {
          goto LABEL_111;
        }
        uint64_t v48 = v56.i64[1];
        swift_bridgeObjectRetain();
        uint64_t v14 = v48;
LABEL_97:
        if (v9 != v13) {
          goto LABEL_111;
        }
        goto LABEL_98;
      }
      if (!v55) {
        goto LABEL_111;
      }
      if (v4 == v54 && v8 == v55) {
        goto LABEL_97;
      }
      uint64_t v16 = v56.i64[1];
      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      char v18 = 0;
      if ((v17 & 1) == 0) {
        return v18 & 1;
      }
      uint64_t v14 = v16;
      if (v9 != v13) {
        return v18 & 1;
      }
LABEL_98:
      char v18 = v10 == v14 && v11 == v15.i64[0] && v12 == v15.i64[1];
      return v18 & 1;
    case 2:
      uint64_t v20 = v60;
      uint64_t v19 = v61;
      char v21 = v62;
      outlined init with take of JSONError(a2, (uint64_t)&v54);
      if (v58 != 2) {
        goto LABEL_111;
      }
      if (v21)
      {
        if (v56.i8[8]) {
          goto LABEL_110;
        }
      }
      else if ((v56.i8[8] & 1) == 0 && v4 == v54 && v20 == v55 && v19 == v56.i64[0])
      {
        goto LABEL_110;
      }
      goto LABEL_111;
    case 3:
      uint64_t v22 = v60;
      uint64_t v23 = v61;
      uint64_t v24 = v62;
      uint64_t v25 = v63;
      outlined init with take of JSONError(a2, (uint64_t)&v54);
      if (v58 != 3) {
        goto LABEL_111;
      }
      goto LABEL_21;
    case 4:
      uint64_t v6 = v60;
      uint64_t v7 = v61;
      outlined init with take of JSONError(a2, (uint64_t)&v54);
      if (v58 != 4) {
        goto LABEL_111;
      }
      goto LABEL_59;
    case 5:
      uint64_t v22 = v60;
      uint64_t v23 = v61;
      uint64_t v24 = v62;
      uint64_t v25 = v63;
      outlined init with take of JSONError(a2, (uint64_t)&v54);
      if (v58 != 5) {
        goto LABEL_111;
      }
LABEL_21:
      int8x16_t v26 = v56;
      uint64_t v27 = v57.i64[0];
      if (v4 == v54 && v22 == v55 || (v28 = _stringCompareWithSmolCheck(_:_:expecting:)(), char v18 = 0, (v28 & 1) != 0)) {
        char v18 = v23 == v26.i64[0] && v24 == v26.i64[1] && v25 == v27;
      }
      return v18 & 1;
    case 6:
      uint64_t v31 = v60;
      uint64_t v32 = v61;
      uint64_t v33 = v62;
      outlined init with take of JSONError(a2, (uint64_t)&v54);
      if (v58 != 6) {
        goto LABEL_111;
      }
      goto LABEL_36;
    case 7:
      uint64_t v31 = v60;
      uint64_t v32 = v61;
      uint64_t v33 = v62;
      outlined init with take of JSONError(a2, (uint64_t)&v54);
      if (v58 != 7) {
        goto LABEL_111;
      }
LABEL_36:
      if (v54 != v5) {
        goto LABEL_111;
      }
      char v18 = v31 == v55 && v32 == v56.i64[0] && v33 == v56.i64[1];
      return v18 & 1;
    case 8:
      uint64_t v6 = v60;
      uint64_t v7 = v61;
      outlined init with take of JSONError(a2, (uint64_t)&v54);
      if (v58 != 8) {
        goto LABEL_111;
      }
      goto LABEL_59;
    case 9:
      uint64_t v36 = v60;
      uint64_t v37 = v61;
      int v38 = v62;
      outlined init with take of JSONError(a2, (uint64_t)&v54);
      if (v58 != 9) {
        goto LABEL_111;
      }
      BOOL v39 = v4 == v54 && v36 == v55;
      if (!v39 || v37 != v56.i64[0]) {
        goto LABEL_111;
      }
      char v18 = v38 == v56.i32[2];
      return v18 & 1;
    case 10:
      uint64_t v6 = v60;
      uint64_t v7 = v61;
      outlined init with take of JSONError(a2, (uint64_t)&v54);
      if (v58 == 10) {
        goto LABEL_59;
      }
      goto LABEL_111;
    case 11:
      uint64_t v43 = v60;
      outlined init with take of JSONError(a2, (uint64_t)&v54);
      if (v58 != 11) {
        goto LABEL_111;
      }
      if (v4 == v54 && v43 == v55) {
        goto LABEL_110;
      }
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      return v18 & 1;
    case 12:
      if (v63 | v64 | v59 | v62 | v61 | v60)
      {
        uint64_t v45 = v63 | v64 | v62 | v61 | v60;
        if (v59 == 1 && v45 == 0)
        {
          outlined init with take of JSONError(a2, (uint64_t)&v54);
          if (v58 != 12 || v54 != 1) {
            goto LABEL_111;
          }
        }
        else if (v59 != 2 || v45)
        {
          outlined init with take of JSONError(a2, (uint64_t)&v54);
          if (v58 != 12 || v54 != 3) {
            goto LABEL_111;
          }
        }
        else
        {
          outlined init with take of JSONError(a2, (uint64_t)&v54);
          if (v58 != 12 || v54 != 2) {
            goto LABEL_111;
          }
        }
        int8x16_t v51 = vorrq_s8(v56, v57);
        if (*(void *)&vorr_s8(*(int8x8_t *)v51.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL)) | v55)
        {
LABEL_111:
          char v18 = 0;
          return v18 & 1;
        }
      }
      else
      {
        outlined init with take of JSONError(a2, (uint64_t)&v54);
        if (v58 != 12) {
          goto LABEL_111;
        }
        int8x16_t v47 = vorrq_s8(v56, v57);
        if (*(void *)&vorr_s8(*(int8x8_t *)v47.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL)) | v55 | v54) {
          goto LABEL_111;
        }
      }
LABEL_110:
      char v18 = 1;
      return v18 & 1;
    default:
      uint64_t v6 = v60;
      uint64_t v7 = v61;
      outlined init with take of JSONError(a2, (uint64_t)&v54);
      if (v58) {
        goto LABEL_111;
      }
LABEL_59:
      char v18 = v4 == v54 && v6 == v55 && v7 == v56.i64[0];
      return v18 & 1;
  }
}

unint64_t specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(unint64_t result, unint64_t a2, uint64_t a3)
{
  if (result < a2 || (unint64_t v3 = result, v4 = a2 + a3, a2 + a3 < result))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  else
  {
    if (v4 >= result + 1) {
      unint64_t v4 = result + 1;
    }
    if (v4 <= a2)
    {
      return 1;
    }
    else
    {
      uint64_t v5 = -(uint64_t)a2;
      uint64_t v6 = a3 + a2;
      double result = 1;
LABEL_7:
      while (2)
      {
        uint64_t v7 = 0;
        uint64_t v8 = 0;
        uint64_t v9 = v6 - a2;
        while (1)
        {
          if ((uint64_t)(v5 + a2 + v8) < 0 || v9 + v7 < 1)
          {
            __break(1u);
LABEL_28:
            __break(1u);
            goto LABEL_29;
          }
          int v10 = *(unsigned __int8 *)(a2 + v8);
          if (v10 == 10)
          {
            BOOL v11 = __OFADD__(result++, 1);
            if (v11) {
              goto LABEL_30;
            }
            a2 += v8 + 1;
            if (a2 < v4) {
              goto LABEL_7;
            }
            return result;
          }
          if (v10 == 13) {
            break;
          }
          if (__OFADD__(v8, 1)) {
            goto LABEL_28;
          }
          ++v8;
          --v7;
          if (a2 + v8 >= v4) {
            return result;
          }
        }
        uint64_t v12 = a2 + v8;
        if (a2 + v8 + 1 <= v3)
        {
          if (((v5 + a2 + v8 + 1) & 0x8000000000000000) != 0 || ~v8 + v9 < 1) {
            goto LABEL_32;
          }
          if (*(unsigned char *)(v12 + 1) == 10) {
            uint64_t v12 = a2 + v8 + 1;
          }
        }
        BOOL v11 = __OFADD__(result++, 1);
        if (v11) {
          goto LABEL_31;
        }
        a2 = v12 + 1;
        if (v12 + 1 < v4) {
          continue;
        }
        break;
      }
    }
  }
  return result;
}

unint64_t specialized RangeReplaceableCollection.init<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = a1;
  LODWORD(a1) = 0;
  int v3 = 0;
  unint64_t v4 = (unsigned __int16 *)(v2 + 32);
  uint64_t v5 = v1;
  do
  {
    int v6 = *v4++;
    a1 = ((-65535 << (v3 & 0x10)) - 1) & a1 | (v6 << (v3 & 0x10));
    v3 += 16;
    --v5;
  }
  while (v5);
  return a1 & 0xFFFFFF0FFFFFFFFFLL | ((unint64_t)(v1 & 0xF) << 36);
}

unsigned __int8 *specialized static JSONScanner.parseUnicodeSequence(from:into:fullSource:allowNulls:)(unint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5, char a6)
{
  if (a2 < 4)
  {
    __break(1u);
LABEL_42:
    unint64_t v40 = v8;
    goto LABEL_38;
  }
  uint64_t v6 = a5;
  unint64_t v7 = a4;
  unint64_t v8 = a1;
  unsigned __int16 v10 = 0;
  BOOL v11 = (unsigned __int8 *)(a1 + 4);
  uint64_t v12 = (unsigned __int8 *)a1;
  do
  {
    int v13 = *v12;
    unsigned __int8 v14 = v13 - 48;
    if ((v13 - 48) >= 0xA)
    {
      if ((v13 - 65) < 6)
      {
        unsigned __int8 v14 = v13 - 55;
      }
      else
      {
        if ((v13 - 97) > 5) {
          goto LABEL_32;
        }
        unsigned __int8 v14 = v13 - 87;
      }
    }
    if (v10 > 0xFFFu) {
      goto LABEL_32;
    }
    unsigned __int16 v10 = 16 * v10 + v14;
    ++v12;
  }
  while (v12 < v11);
  if ((a6 & 1) == 0 && !v10)
  {
    unint64_t v15 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(a1, a4, a5);
    BOOL v11 = v16;
    uint64_t v18 = v17;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v19 = v15;
    *(void *)(v19 + 8) = v11;
    *(void *)(v19 + 16) = v18;
    *(void *)(v19 + 24) = 0;
    *(void *)(v19 + 32) = 0;
    *(void *)(v19 + 40) = 0;
    char v20 = 4;
LABEL_33:
    *(unsigned char *)(v19 + 48) = v20;
    swift_willThrow();
    return v11;
  }
  if (v10 >> 10 == 54)
  {
    if (a2 - 4 < 0)
    {
      __break(1u);
      goto LABEL_44;
    }
    if (a2 - 4 >= 2 && *v11 == 92 && *(unsigned char *)(a1 + 5) == 117)
    {
      unint64_t v21 = a2 - 6;
      if (a2 - 6 >= 4) {
        uint64_t v22 = 4;
      }
      else {
        uint64_t v22 = a2 - 6;
      }
      if (v21 >= 4)
      {
        unsigned __int16 v23 = 0;
        unint64_t v8 = a1 + 6;
        BOOL v11 = (unsigned __int8 *)(a1 + 6 + v22);
        uint64_t v24 = (unsigned __int8 *)(a1 + 6);
        while (1)
        {
          int v25 = *v24;
          unsigned __int8 v26 = v25 - 48;
          if ((v25 - 48) >= 0xA)
          {
            if ((v25 - 65) < 6)
            {
              unsigned __int8 v26 = v25 - 55;
            }
            else
            {
              if ((v25 - 97) > 5) {
                break;
              }
              unsigned __int8 v26 = v25 - 87;
            }
          }
          if (v23 > 0xFFFu) {
            break;
          }
          unsigned __int16 v23 = 16 * v23 + v26;
          if (++v24 >= v11)
          {
            unsigned __int16 v47 = v23;
            if (v23 >> 10 != 55) {
              goto LABEL_42;
            }
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
            uint64_t inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_182106040;
            *(_WORD *)(inited + 32) = v10;
            *(_WORD *)(inited + 34) = v47;
            specialized RangeReplaceableCollection.init<A>(_:)(inited);
            swift_setDeallocating();
            uint64_t v45 = *a3;
            uint64_t v46 = a3[1];
            goto LABEL_40;
          }
        }
LABEL_32:
        BOOL v11 = (unsigned __int8 *)static String._fromUTF8Repairing(_:)();
        uint64_t v29 = v28;
        unint64_t v30 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v8, v7, v6);
        uint64_t v32 = v31;
        uint64_t v34 = v33;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v19 = v11;
        *(void *)(v19 + 8) = v29;
        *(void *)(v19 + 16) = v30;
        *(void *)(v19 + 24) = v32;
        *(void *)(v19 + 32) = v34;
        *(void *)(v19 + 40) = 0;
        char v20 = 3;
        goto LABEL_33;
      }
LABEL_44:
      __break(1u);
      JUMPOUT(0x181B95D5CLL);
    }
    unint64_t v40 = a1 + 4;
LABEL_38:
    unint64_t v41 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v40, v7, v6);
    BOOL v11 = v42;
    uint64_t v44 = v43;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v19 = v41;
    *(void *)(v19 + 8) = v11;
    *(void *)(v19 + 16) = v44;
    *(void *)(v19 + 24) = 0;
    *(void *)(v19 + 32) = 0;
    *(void *)(v19 + 40) = 0;
    char v20 = 8;
    goto LABEL_33;
  }
  if (v10 >> 11 == 27)
  {
    unint64_t v36 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(a1, a4, a5);
    BOOL v11 = v37;
    uint64_t v39 = v38;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v19 = v36;
    *(void *)(v19 + 8) = v11;
    *(void *)(v19 + 16) = v39;
    *(void *)(v19 + 24) = v10;
    *(void *)(v19 + 32) = 0;
    *(void *)(v19 + 40) = 0;
    char v20 = 9;
    goto LABEL_33;
  }
  uint64_t v45 = *a3;
  uint64_t v46 = a3[1];
LABEL_40:
  String.UnicodeScalarView.append(_:)();
  *a3 = v45;
  a3[1] = v46;
  return v11;
}

double specialized static JSONScanner.validateNumber(from:fullSource:)@<D0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5 = (uint64_t)a1;
  unint64_t v7 = &a1[a2];
  if (a2 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = a2;
    while (1)
    {
      if (v8 < 0) {
        goto LABEL_33;
      }
      BOOL v10 = v9-- < 1;
      if (v10) {
        goto LABEL_33;
      }
      if (*(unsigned __int8 *)(v5 + v8) - 58 < 0xFFFFFFF6) {
        break;
      }
      ++v8;
      a1 = (unsigned char *)(v5 + v8);
      if (v5 + v8 >= (unint64_t)v7) {
        goto LABEL_9;
      }
    }
    a1 = (unsigned char *)(v5 + v8);
  }
LABEL_9:
  if (a1 >= v7)
  {
LABEL_36:
    __break(1u);
    JUMPOUT(0x181B96084);
  }
  char v11 = 0;
  uint64_t v12 = (uint64_t)&a1[-v5];
  int v13 = (unsigned char *)(a2 + v5);
  uint64_t v14 = -v5;
  char v15 = 1;
  char v16 = 1;
  while (2)
  {
    uint64_t v17 = v13 - a1;
    unint64_t v18 = (unint64_t)&a1[v14];
    while (1)
    {
      if ((v18 & 0x8000000000000000) != 0 || (BOOL v10 = v17 < 1, --v17, v10))
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v19 = *a1;
      if ((v19 - 58) <= 0xFFFFFFF5) {
        break;
      }
      if (__OFADD__(v12, 1)) {
        goto LABEL_31;
      }
      ++a1;
      ++v12;
      ++v18;
      if (a1 >= v7) {
        goto LABEL_32;
      }
    }
    switch(*a1)
    {
      case '+':
      case '-':
        if (v12 != 0 || (v11 & 1) == 0) {
          goto LABEL_29;
        }
        uint64_t v12 = 0;
        char v11 = 0;
        char v15 = 0;
        char v16 = 0;
        if (++a1 >= v7) {
          goto LABEL_34;
        }
        continue;
      case ',':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '?':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
        goto LABEL_29;
      case '.':
        if (v12 < 1 || (v16 & 1) == 0) {
          goto LABEL_29;
        }
        uint64_t v12 = 0;
        char v11 = 0;
        char v16 = 0;
        ++a1;
        char v15 = 1;
        if (a1 < v7) {
          continue;
        }
        __break(1u);
        goto LABEL_29;
      case 'E':
        goto LABEL_23;
      default:
        if (v19 != 101) {
          goto LABEL_29;
        }
LABEL_23:
        if (v12 >= 1 && (v15 & 1) != 0)
        {
          uint64_t v12 = 0;
          char v15 = 0;
          char v16 = 0;
          ++a1;
          char v11 = 1;
          if (a1 >= v7) {
            goto LABEL_35;
          }
          continue;
        }
LABEL_29:
        unint64_t v20 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)a1, a3, a4);
        double result = 2.38954692e180;
        *(_OWORD *)a5 = xmmword_182112860;
        *(void *)(a5 + 16) = v19;
        *(void *)(a5 + 24) = v20;
        *(void *)(a5 + 32) = v22;
        *(void *)(a5 + 40) = v23;
        *(unsigned char *)(a5 + 48) = 1;
        return result;
    }
  }
}

ValueMetadata *type metadata accessor for JSONMap.Region()
{
  return &type metadata for JSONMap.Region;
}

uint64_t getEnumTagSinglePayload for JSONError.SourceLocation(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for JSONError.SourceLocation(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)double result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for JSONError.SourceLocation()
{
  return &type metadata for JSONError.SourceLocation;
}

ValueMetadata *type metadata accessor for JSONMap.ArrayIterator()
{
  return &type metadata for JSONMap.ArrayIterator;
}

uint64_t specialized AsyncLineSequence.AsyncIterator.next()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 v19;
  int v20;
  uint64_t v21;
  char *v22;
  char v23;
  char *v24;
  int64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  int64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  int v44;
  void *v45;
  unsigned __int8 *v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  size_t v55;
  void *v56;
  size_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 v60;
  int v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t);
  char v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  int64_t v75;
  uint64_t v76;
  char *v77;
  size_t v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  void *v90;
  size_t v91;
  void *v92;
  uint64_t (*v93)(__int16);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  uint64_t v1 = v0[2];
  if (*(unsigned char *)(v1 + 33))
  {
    uint64_t v2 = *(unsigned __int8 **)(v1 + 8);
    if (v2 == *(unsigned __int8 **)(v1 + 16))
    {
      uint64_t v92 = (void *)swift_task_alloc();
      v0[3] = v92;
      *uint64_t v92 = v0;
      uint64_t v93 = specialized AsyncLineSequence.AsyncIterator.next();
      goto LABEL_103;
    }
    char v3 = *v2;
    *(void *)(v1 + 8) = v2 + 1;
    uint64_t v1 = v0[2];
  }
  else
  {
    char v3 = *(unsigned __int8 *)(v1 + 32);
  }
  *(_WORD *)(v1 + 32) = 256;
  if (v3 != 13)
  {
    if ((v3 - 10) < 3)
    {
      BOOL v10 = v0[2];
      if (*(void *)(*(void *)(v10 + 24) + 16))
      {
        swift_bridgeObjectRetain();
        char v11 = static String._fromUTF8Repairing(_:)();
        int v13 = v12;
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        char v15 = *(void *)(v10 + 24);
        goto LABEL_12;
      }
      unint64_t v35 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v24 = *(char **)(v10 + 24);
      if (v35)
      {
        unint64_t v36 = v0[2];
        int v25 = *((void *)v24 + 2);
        uint64_t v37 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v36 + 24) = v24;
        if ((v37 & 1) == 0)
        {
          uint64_t v38 = v0[2];
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 1, v24);
          *(void *)(v38 + 24) = v24;
        }
LABEL_35:
        if (v25)
        {
          uint64_t v39 = *((void *)v24 + 2);
          unint64_t v40 = v39 - v25;
          if (v39 - v25 < 0) {
            return _fatalErrorMessage(_:_:file:line:flags:)();
          }
          memmove(v24 + 32, &v24[v25 + 32], v39 - v25);
          *((void *)v24 + 2) = v40;
        }
        *(void *)(v0[2] + 24) = v24;
LABEL_83:
        return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
      }
LABEL_54:
      if (*((void *)v24 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        int8x16_t v56 = (void *)swift_allocObject();
        uint64_t v78 = _swift_stdlib_malloc_size(v56);
        v56[2] = 0;
        v56[3] = 2 * v78 - 64;
      }
      else
      {
        int8x16_t v56 = (void *)MEMORY[0x1E4FBC860];
      }
      *(void *)(v0[2] + 24) = v56;
LABEL_82:
      swift_bridgeObjectRelease();
      goto LABEL_83;
    }
    if (v3 == 226)
    {
      Swift::String v42 = v0[2];
      uint64_t v43 = *(unsigned __int8 **)(v42 + 8);
      if (v43 == *(unsigned __int8 **)(v42 + 16))
      {
        uint64_t v92 = (void *)swift_task_alloc();
        v0[10] = v92;
        *uint64_t v92 = v0;
        uint64_t v93 = specialized AsyncLineSequence.AsyncIterator.next();
        goto LABEL_103;
      }
      uint64_t v44 = *v43;
      uint64_t v19 = *v43;
      *(void *)(v42 + 8) = v43 + 1;
      uint64_t v45 = (void *)v0[2];
      if (v44 == 128)
      {
        uint64_t v46 = (unsigned __int8 *)v45[1];
        if (v46 == (unsigned __int8 *)v45[2])
        {
          uint64_t v92 = (void *)swift_task_alloc();
          v0[11] = v92;
          *uint64_t v92 = v0;
          uint64_t v93 = specialized AsyncLineSequence.AsyncIterator.next();
          goto LABEL_103;
        }
        unsigned __int16 v47 = *v46;
        uint64_t v19 = *v46;
        v45[1] = v46 + 1;
        unint64_t v21 = v0[2];
        uint64_t v22 = *(char **)(v21 + 24);
        if ((v47 & 0xFE) == 0xA8)
        {
          if (!*((void *)v22 + 2))
          {
            uint64_t v88 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v89 = *(void *)(v21 + 24);
            if (v88)
            {
              specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v89 + 16));
              goto LABEL_83;
            }
            if (*(void *)(v89 + 24) >= 2uLL)
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
              uint64_t v90 = (void *)swift_allocObject();
              uint64_t v91 = _swift_stdlib_malloc_size(v90);
              v90[2] = 0;
              v90[3] = 2 * v91 - 64;
            }
            else
            {
              uint64_t v90 = (void *)MEMORY[0x1E4FBC860];
            }
            *(void *)(v0[2] + 24) = v90;
            goto LABEL_82;
          }
          goto LABEL_46;
        }
        uint64_t v79 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v21 + 24) = v22;
        if ((v79 & 1) == 0)
        {
          long long v97 = v0[2];
          uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, v22);
          *(void *)(v97 + 24) = v22;
        }
        uint64_t v81 = *((void *)v22 + 2);
        uint64_t v80 = *((void *)v22 + 3);
        long long v82 = v81 + 1;
        if (v81 >= v80 >> 1) {
          uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v80 > 1), v81 + 1, 1, v22);
        }
        long long v83 = v0[2];
        *((void *)v22 + 2) = v82;
        v22[v81 + 32] = -30;
        *(void *)(v83 + 24) = v22;
        long long v84 = *((void *)v22 + 3);
        long long v85 = v81 + 2;
        if ((uint64_t)(v81 + 2) > (uint64_t)(v84 >> 1)) {
          uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v84 > 1), v81 + 2, 1, v22);
        }
        long long v86 = v0[2];
        *((void *)v22 + 2) = v85;
        v22[v82 + 32] = 0x80;
        *(void *)(v86 + 24) = v22;
        long long v87 = *((void *)v22 + 3);
        if ((uint64_t)(v81 + 3) > (uint64_t)(v87 >> 1)) {
          uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v87 > 1), v81 + 3, 1, v22);
        }
        uint64_t v76 = v0[2];
        *((void *)v22 + 2) = v81 + 3;
        uint64_t v77 = &v22[v85];
LABEL_79:
        v77[32] = v19;
        *(void *)(v76 + 24) = v22;
        goto LABEL_83;
      }
      uint64_t v22 = (char *)v45[3];
      char v72 = swift_isUniquelyReferenced_nonNull_native();
      long long v45[3] = v22;
      if ((v72 & 1) == 0)
      {
        long long v96 = v0[2];
        uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, v22);
        *(void *)(v96 + 24) = v22;
      }
      uint64_t v67 = *((void *)v22 + 2);
      uint64_t v73 = *((void *)v22 + 3);
      uint64_t v68 = v67 + 1;
      if (v67 >= v73 >> 1) {
        uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v73 > 1), v67 + 1, 1, v22);
      }
      uint64_t v69 = v0[2];
      *((void *)v22 + 2) = v68;
      uint64_t v70 = &v22[v67];
      int v71 = -30;
    }
    else
    {
      if (v3 != 194)
      {
        unint64_t v49 = v0[2];
        uint64_t v50 = *(char **)(v49 + 24);
        int8x16_t v51 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v49 + 24) = v50;
        if ((v51 & 1) == 0)
        {
          uint64_t v94 = v0[2];
          uint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v50 + 2) + 1, 1, v50);
          *(void *)(v94 + 24) = v50;
        }
        uint64_t v53 = *((void *)v50 + 2);
        uint64_t v52 = *((void *)v50 + 3);
        if (v53 >= v52 >> 1) {
          uint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v52 > 1), v53 + 1, 1, v50);
        }
        uint64_t v54 = v0[2];
        *((void *)v50 + 2) = v53 + 1;
        v50[v53 + 32] = v3;
        *(void *)(v54 + 24) = v50;
        goto LABEL_83;
      }
      uint64_t v17 = v0[2];
      unint64_t v18 = *(unsigned __int8 **)(v17 + 8);
      if (v18 == *(unsigned __int8 **)(v17 + 16))
      {
        uint64_t v92 = (void *)swift_task_alloc();
        v0[9] = v92;
        *uint64_t v92 = v0;
        uint64_t v93 = specialized AsyncLineSequence.AsyncIterator.next();
        goto LABEL_103;
      }
      unint64_t v20 = *v18;
      uint64_t v19 = *v18;
      *(void *)(v17 + 8) = v18 + 1;
      unint64_t v21 = v0[2];
      uint64_t v22 = *(char **)(v21 + 24);
      if (v20 == 133)
      {
        if (!*((void *)v22 + 2))
        {
          uint64_t v23 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v24 = *(char **)(v21 + 24);
          if (v23)
          {
            int v25 = *((void *)v24 + 2);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 1, v24);
            }
            goto LABEL_35;
          }
          goto LABEL_54;
        }
LABEL_46:
        swift_bridgeObjectRetain();
        char v11 = static String._fromUTF8Repairing(_:)();
        int v13 = v48;
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        char v15 = *(void *)(v21 + 24);
LABEL_12:
        if (isUniquelyReferenced_nonNull_native)
        {
          specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v15 + 16));
        }
        else
        {
          char v16 = (void *)(v0[2] + 24);
          *char v16 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v15 + 24) >> 1);
          swift_bridgeObjectRelease();
        }
LABEL_63:
        uint64_t v63 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
        return v63(v11, v13);
      }
      char v65 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v21 + 24) = v22;
      if ((v65 & 1) == 0)
      {
        uint64_t v95 = v0[2];
        uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, v22);
        *(void *)(v95 + 24) = v22;
      }
      uint64_t v67 = *((void *)v22 + 2);
      uint64_t v66 = *((void *)v22 + 3);
      uint64_t v68 = v67 + 1;
      if (v67 >= v66 >> 1) {
        uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v66 > 1), v67 + 1, 1, v22);
      }
      uint64_t v69 = v0[2];
      *((void *)v22 + 2) = v68;
      uint64_t v70 = &v22[v67];
      int v71 = -62;
    }
    v70[32] = v71;
    *(void *)(v69 + 24) = v22;
    long long v74 = *((void *)v22 + 3);
    uint64_t v75 = v67 + 2;
    if (v75 > (uint64_t)(v74 >> 1)) {
      uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v74 > 1), v75, 1, v22);
    }
    uint64_t v76 = v0[2];
    *((void *)v22 + 2) = v75;
    uint64_t v77 = &v22[v68];
    goto LABEL_79;
  }
  unint64_t v4 = v0[2];
  if (*(void *)(*(void *)(v4 + 24) + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = static String._fromUTF8Repairing(_:)();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    uint64_t v8 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *(void *)(v4 + 24);
    if (v8)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v9 + 16));
    }
    else
    {
      if (*(void *)(v9 + 24) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        uint64_t v34 = (void *)swift_allocObject();
        uint64_t v55 = _swift_stdlib_malloc_size(v34);
        void v34[2] = 0;
        void v34[3] = 2 * v55 - 64;
      }
      else
      {
        uint64_t v34 = (void *)MEMORY[0x1E4FBC860];
      }
      *(void *)(v0[2] + 24) = v34;
      swift_bridgeObjectRelease();
    }
    goto LABEL_58;
  }
  unsigned __int8 v26 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v27 = *(char **)(v4 + 24);
  if ((v26 & 1) == 0)
  {
    if (*((void *)v27 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      unint64_t v41 = (void *)swift_allocObject();
      int8x16_t v57 = _swift_stdlib_malloc_size(v41);
      v41[2] = 0;
      _OWORD v41[3] = 2 * v57 - 64;
    }
    else
    {
      unint64_t v41 = (void *)MEMORY[0x1E4FBC860];
    }
    *(void *)(v0[2] + 24) = v41;
    swift_bridgeObjectRelease();
    uint64_t v5 = 0;
    unint64_t v7 = 0;
    goto LABEL_58;
  }
  uint64_t v28 = v0[2];
  uint64_t v29 = *((void *)v27 + 2);
  unint64_t v30 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v28 + 24) = v27;
  if ((v30 & 1) == 0)
  {
    uint64_t v31 = v0[2];
    uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 1, v27);
    *(void *)(v31 + 24) = v27;
  }
  if (v29)
  {
    uint64_t v32 = *((void *)v27 + 2);
    uint64_t v33 = v32 - v29;
    if (v32 - v29 >= 0)
    {
      memmove(v27 + 32, &v27[v29 + 32], v32 - v29);
      *((void *)v27 + 2) = v33;
      goto LABEL_28;
    }
    return _fatalErrorMessage(_:_:file:line:flags:)();
  }
LABEL_28:
  uint64_t v5 = 0;
  unint64_t v7 = 0;
  *(void *)(v0[2] + 24) = v27;
LABEL_58:
  v0[5] = v5;
  v0[6] = v7;
  char v58 = v0[2];
  uint64_t v59 = *(unsigned __int8 **)(v58 + 8);
  if (v59 != *(unsigned __int8 **)(v58 + 16))
  {
    uint64_t v61 = *v59;
    uint64_t v60 = *v59;
    *(void *)(v58 + 8) = v59 + 1;
    if (v61 != 10)
    {
      uint64_t v62 = v0[2];
      *(unsigned char *)(v62 + 32) = v60;
      *(unsigned char *)(v62 + 33) = 0;
    }
    int v13 = v0[6];
    if (v13)
    {
      char v11 = v0[5];
      goto LABEL_63;
    }
    goto LABEL_83;
  }
  uint64_t v92 = (void *)swift_task_alloc();
  v0[7] = v92;
  *uint64_t v92 = v0;
  uint64_t v93 = specialized AsyncLineSequence.AsyncIterator.next();
LABEL_103:
  v92[1] = v93;
  return _AsyncBytesBuffer.reloadBufferAndNext()();
}

{
  uint64_t v0;
  __int16 v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  int v22;
  uint64_t v23;
  char *v24;
  char v25;
  char *v26;
  int64_t v27;
  char v28;
  char *v29;
  uint64_t v30;
  int64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  void *v47;
  unsigned __int8 *v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  size_t v57;
  void *v58;
  size_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned __int8 v62;
  int v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t);
  char v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  int64_t v77;
  uint64_t v78;
  char *v79;
  size_t v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t v91;
  void *v92;
  size_t v93;
  void *v94;
  uint64_t (*v95)(__int16);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  uint64_t v1 = *(_WORD *)(v0 + 96);
  *(_WORD *)(*(void *)(v0 + 16) + 32) = 256;
  if ((v1 & 0x100) != 0)
  {
    uint64_t v9 = *(void *)(v0 + 16);
    BOOL v10 = *(void *)(*(void *)(v9 + 24) + 16);
    if (!v10)
    {
      char v11 = 0;
      goto LABEL_63;
    }
    swift_bridgeObjectRetain();
    char v11 = static String._fromUTF8Repairing(_:)();
    BOOL v10 = v12;
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *(void *)(v9 + 24);
    char v15 = (void *)(*(void *)(v0 + 16) + 24);
    if (!isUniquelyReferenced_nonNull_native) {
      goto LABEL_13;
    }
    goto LABEL_8;
  }
  uint64_t v2 = *(unsigned __int8 *)(v0 + 96);
  if (v2 != 13)
  {
    if ((v2 - 10) < 3)
    {
      char v16 = *(void *)(v0 + 16);
      if (*(void *)(*(void *)(v16 + 24) + 16))
      {
        swift_bridgeObjectRetain();
        char v11 = static String._fromUTF8Repairing(_:)();
        BOOL v10 = v17;
        swift_bridgeObjectRelease();
        unint64_t v18 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v14 = *(void *)(v16 + 24);
        goto LABEL_12;
      }
      uint64_t v37 = swift_isUniquelyReferenced_nonNull_native();
      unsigned __int8 v26 = *(char **)(v16 + 24);
      if (v37)
      {
        uint64_t v38 = *(void *)(v0 + 16);
        uint64_t v27 = *((void *)v26 + 2);
        uint64_t v39 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v38 + 24) = v26;
        if ((v39 & 1) == 0)
        {
          unint64_t v40 = *(void *)(v0 + 16);
          unsigned __int8 v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 1, v26);
          *(void *)(v40 + 24) = v26;
        }
LABEL_35:
        if (v27)
        {
          unint64_t v41 = *((void *)v26 + 2);
          Swift::String v42 = v41 - v27;
          if (v41 - v27 < 0) {
            return _fatalErrorMessage(_:_:file:line:flags:)();
          }
          memmove(v26 + 32, &v26[v27 + 32], v41 - v27);
          *((void *)v26 + 2) = v42;
        }
        *(void *)(*(void *)(v0 + 16) + 24) = v26;
LABEL_83:
        return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
      }
LABEL_54:
      if (*((void *)v26 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        char v58 = (void *)swift_allocObject();
        uint64_t v80 = _swift_stdlib_malloc_size(v58);
        v58[2] = 0;
        v58[3] = 2 * v80 - 64;
      }
      else
      {
        char v58 = (void *)MEMORY[0x1E4FBC860];
      }
      *(void *)(*(void *)(v0 + 16) + 24) = v58;
LABEL_82:
      swift_bridgeObjectRelease();
      goto LABEL_83;
    }
    if (v2 == 226)
    {
      uint64_t v44 = *(void *)(v0 + 16);
      uint64_t v45 = *(unsigned __int8 **)(v44 + 8);
      if (v45 == *(unsigned __int8 **)(v44 + 16))
      {
        uint64_t v94 = (void *)swift_task_alloc();
        *(void *)(v0 + 80) = v94;
        char *v94 = v0;
        uint64_t v95 = specialized AsyncLineSequence.AsyncIterator.next();
        goto LABEL_102;
      }
      uint64_t v46 = *v45;
      unint64_t v21 = *v45;
      *(void *)(v44 + 8) = v45 + 1;
      unsigned __int16 v47 = *(void **)(v0 + 16);
      if (v46 == 128)
      {
        uint64_t v48 = (unsigned __int8 *)v47[1];
        if (v48 == (unsigned __int8 *)v47[2])
        {
          uint64_t v94 = (void *)swift_task_alloc();
          *(void *)(v0 + 88) = v94;
          char *v94 = v0;
          uint64_t v95 = specialized AsyncLineSequence.AsyncIterator.next();
          goto LABEL_102;
        }
        unint64_t v49 = *v48;
        unint64_t v21 = *v48;
        v47[1] = v48 + 1;
        uint64_t v23 = *(void *)(v0 + 16);
        uint64_t v24 = *(char **)(v23 + 24);
        if ((v49 & 0xFE) == 0xA8)
        {
          if (!*((void *)v24 + 2))
          {
            uint64_t v90 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v91 = *(void *)(v23 + 24);
            if (v90)
            {
              specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v91 + 16));
              goto LABEL_83;
            }
            if (*(void *)(v91 + 24) >= 2uLL)
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
              uint64_t v92 = (void *)swift_allocObject();
              uint64_t v93 = _swift_stdlib_malloc_size(v92);
              v92[2] = 0;
              v92[3] = 2 * v93 - 64;
            }
            else
            {
              uint64_t v92 = (void *)MEMORY[0x1E4FBC860];
            }
            *(void *)(*(void *)(v0 + 16) + 24) = v92;
            goto LABEL_82;
          }
          goto LABEL_46;
        }
        uint64_t v81 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v23 + 24) = v24;
        if ((v81 & 1) == 0)
        {
          long long v99 = *(void *)(v0 + 16);
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v24 + 2) + 1, 1, v24);
          *(void *)(v99 + 24) = v24;
        }
        long long v83 = *((void *)v24 + 2);
        long long v82 = *((void *)v24 + 3);
        long long v84 = v83 + 1;
        if (v83 >= v82 >> 1) {
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v82 > 1), v83 + 1, 1, v24);
        }
        long long v85 = *(void *)(v0 + 16);
        *((void *)v24 + 2) = v84;
        v24[v83 + 32] = -30;
        *(void *)(v85 + 24) = v24;
        long long v86 = *((void *)v24 + 3);
        long long v87 = v83 + 2;
        if ((uint64_t)(v83 + 2) > (uint64_t)(v86 >> 1)) {
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v86 > 1), v83 + 2, 1, v24);
        }
        uint64_t v88 = *(void *)(v0 + 16);
        *((void *)v24 + 2) = v87;
        v24[v84 + 32] = 0x80;
        *(void *)(v88 + 24) = v24;
        uint64_t v89 = *((void *)v24 + 3);
        if ((uint64_t)(v83 + 3) > (uint64_t)(v89 >> 1)) {
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v89 > 1), v83 + 3, 1, v24);
        }
        uint64_t v78 = *(void *)(v0 + 16);
        *((void *)v24 + 2) = v83 + 3;
        uint64_t v79 = &v24[v87];
LABEL_79:
        v79[32] = v21;
        *(void *)(v78 + 24) = v24;
        goto LABEL_83;
      }
      uint64_t v24 = (char *)v47[3];
      long long v74 = swift_isUniquelyReferenced_nonNull_native();
      v47[3] = v24;
      if ((v74 & 1) == 0)
      {
        long long v98 = *(void *)(v0 + 16);
        uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v24 + 2) + 1, 1, v24);
        *(void *)(v98 + 24) = v24;
      }
      uint64_t v69 = *((void *)v24 + 2);
      uint64_t v75 = *((void *)v24 + 3);
      uint64_t v70 = v69 + 1;
      if (v69 >= v75 >> 1) {
        uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v75 > 1), v69 + 1, 1, v24);
      }
      int v71 = *(void *)(v0 + 16);
      *((void *)v24 + 2) = v70;
      char v72 = &v24[v69];
      uint64_t v73 = -30;
    }
    else
    {
      if (v2 != 194)
      {
        int8x16_t v51 = *(void *)(v0 + 16);
        uint64_t v52 = *(char **)(v51 + 24);
        uint64_t v53 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v51 + 24) = v52;
        if ((v53 & 1) == 0)
        {
          long long v96 = *(void *)(v0 + 16);
          uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v52 + 2) + 1, 1, v52);
          *(void *)(v96 + 24) = v52;
        }
        uint64_t v55 = *((void *)v52 + 2);
        uint64_t v54 = *((void *)v52 + 3);
        if (v55 >= v54 >> 1) {
          uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v54 > 1), v55 + 1, 1, v52);
        }
        int8x16_t v56 = *(void *)(v0 + 16);
        *((void *)v52 + 2) = v55 + 1;
        v52[v55 + 32] = v2;
        *(void *)(v56 + 24) = v52;
        goto LABEL_83;
      }
      uint64_t v19 = *(void *)(v0 + 16);
      unint64_t v20 = *(unsigned __int8 **)(v19 + 8);
      if (v20 == *(unsigned __int8 **)(v19 + 16))
      {
        uint64_t v94 = (void *)swift_task_alloc();
        *(void *)(v0 + 72) = v94;
        char *v94 = v0;
        uint64_t v95 = specialized AsyncLineSequence.AsyncIterator.next();
        goto LABEL_102;
      }
      uint64_t v22 = *v20;
      unint64_t v21 = *v20;
      *(void *)(v19 + 8) = v20 + 1;
      uint64_t v23 = *(void *)(v0 + 16);
      uint64_t v24 = *(char **)(v23 + 24);
      if (v22 == 133)
      {
        if (!*((void *)v24 + 2))
        {
          int v25 = swift_isUniquelyReferenced_nonNull_native();
          unsigned __int8 v26 = *(char **)(v23 + 24);
          if (v25)
          {
            uint64_t v27 = *((void *)v26 + 2);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unsigned __int8 v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 1, v26);
            }
            goto LABEL_35;
          }
          goto LABEL_54;
        }
LABEL_46:
        swift_bridgeObjectRetain();
        char v11 = static String._fromUTF8Repairing(_:)();
        BOOL v10 = v50;
        swift_bridgeObjectRelease();
        unint64_t v18 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v14 = *(void *)(v23 + 24);
LABEL_12:
        char v15 = (void *)(*(void *)(v0 + 16) + 24);
        if ((v18 & 1) == 0)
        {
LABEL_13:
          *char v15 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v14 + 24) >> 1);
          swift_bridgeObjectRelease();
          goto LABEL_63;
        }
LABEL_8:
        specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v14 + 16));
LABEL_63:
        char v65 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
        return v65(v11, v10);
      }
      uint64_t v67 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v23 + 24) = v24;
      if ((v67 & 1) == 0)
      {
        long long v97 = *(void *)(v0 + 16);
        uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v24 + 2) + 1, 1, v24);
        *(void *)(v97 + 24) = v24;
      }
      uint64_t v69 = *((void *)v24 + 2);
      uint64_t v68 = *((void *)v24 + 3);
      uint64_t v70 = v69 + 1;
      if (v69 >= v68 >> 1) {
        uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v68 > 1), v69 + 1, 1, v24);
      }
      int v71 = *(void *)(v0 + 16);
      *((void *)v24 + 2) = v70;
      char v72 = &v24[v69];
      uint64_t v73 = -62;
    }
    v72[32] = v73;
    *(void *)(v71 + 24) = v24;
    uint64_t v76 = *((void *)v24 + 3);
    uint64_t v77 = v69 + 2;
    if (v77 > (uint64_t)(v76 >> 1)) {
      uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v76 > 1), v77, 1, v24);
    }
    uint64_t v78 = *(void *)(v0 + 16);
    *((void *)v24 + 2) = v77;
    uint64_t v79 = &v24[v70];
    goto LABEL_79;
  }
  char v3 = *(void *)(v0 + 16);
  if (*(void *)(*(void *)(v3 + 24) + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v4 = static String._fromUTF8Repairing(_:)();
    uint64_t v6 = v5;
    swift_bridgeObjectRelease();
    unint64_t v7 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *(void *)(v3 + 24);
    if (v7)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v8 + 16));
    }
    else
    {
      if (*(void *)(v8 + 24) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        unint64_t v36 = (void *)swift_allocObject();
        int8x16_t v57 = _swift_stdlib_malloc_size(v36);
        v36[2] = 0;
        v36[3] = 2 * v57 - 64;
      }
      else
      {
        unint64_t v36 = (void *)MEMORY[0x1E4FBC860];
      }
      *(void *)(*(void *)(v0 + 16) + 24) = v36;
      swift_bridgeObjectRelease();
    }
    goto LABEL_58;
  }
  uint64_t v28 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v29 = *(char **)(v3 + 24);
  if ((v28 & 1) == 0)
  {
    if (*((void *)v29 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      uint64_t v43 = (void *)swift_allocObject();
      uint64_t v59 = _swift_stdlib_malloc_size(v43);
      v43[2] = 0;
      long long v43[3] = 2 * v59 - 64;
    }
    else
    {
      uint64_t v43 = (void *)MEMORY[0x1E4FBC860];
    }
    *(void *)(*(void *)(v0 + 16) + 24) = v43;
    swift_bridgeObjectRelease();
    unint64_t v4 = 0;
    uint64_t v6 = 0;
    goto LABEL_58;
  }
  unint64_t v30 = *(void *)(v0 + 16);
  uint64_t v31 = *((void *)v29 + 2);
  uint64_t v32 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v30 + 24) = v29;
  if ((v32 & 1) == 0)
  {
    uint64_t v33 = *(void *)(v0 + 16);
    uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31, 1, v29);
    *(void *)(v33 + 24) = v29;
  }
  if (v31)
  {
    uint64_t v34 = *((void *)v29 + 2);
    unint64_t v35 = v34 - v31;
    if (v34 - v31 >= 0)
    {
      memmove(v29 + 32, &v29[v31 + 32], v34 - v31);
      *((void *)v29 + 2) = v35;
      goto LABEL_29;
    }
    return _fatalErrorMessage(_:_:file:line:flags:)();
  }
LABEL_29:
  unint64_t v4 = 0;
  uint64_t v6 = 0;
  *(void *)(*(void *)(v0 + 16) + 24) = v29;
LABEL_58:
  *(void *)(v0 + 40) = v4;
  *(void *)(v0 + 48) = v6;
  uint64_t v60 = *(void *)(v0 + 16);
  uint64_t v61 = *(unsigned __int8 **)(v60 + 8);
  if (v61 != *(unsigned __int8 **)(v60 + 16))
  {
    uint64_t v63 = *v61;
    uint64_t v62 = *v61;
    *(void *)(v60 + 8) = v61 + 1;
    if (v63 != 10)
    {
      uint64_t v64 = *(void *)(v0 + 16);
      *(unsigned char *)(v64 + 32) = v62;
      *(unsigned char *)(v64 + 33) = 0;
    }
    BOOL v10 = *(void *)(v0 + 48);
    if (v10)
    {
      char v11 = *(void *)(v0 + 40);
      goto LABEL_63;
    }
    goto LABEL_83;
  }
  uint64_t v94 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v94;
  char *v94 = v0;
  uint64_t v95 = specialized AsyncLineSequence.AsyncIterator.next();
LABEL_102:
  v94[1] = v95;
  return _AsyncBytesBuffer.reloadBufferAndNext()();
}

{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;

  uint64_t v1 = *(_WORD *)(v0 + 98);
  if ((v1 & 0x100) != 0)
  {
    char v3 = *(void *)(v0 + 48);
  }
  else
  {
    if (v1 != 10)
    {
      uint64_t v2 = *(void *)(v0 + 16);
      *(unsigned char *)(v2 + 32) = v1;
      *(unsigned char *)(v2 + 33) = 0;
    }
    char v3 = *(void *)(v0 + 48);
    if (!v3) {
      return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
    }
  }
  return (*(uint64_t (**)(void, uint64_t))(v0 + 8))(*(void *)(v0 + 40), v3);
}

{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  char v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  char v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  uint64_t v1 = *(_WORD *)(v0 + 100);
  if ((v1 & 0x100) != 0)
  {
    BOOL v10 = *(void *)(v0 + 16);
    char v11 = *(char **)(v10 + 24);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v10 + 24) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v34 = *(void *)(v0 + 16);
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
      *(void *)(v34 + 24) = v11;
    }
    uint64_t v14 = *((void *)v11 + 2);
    int v13 = *((void *)v11 + 3);
    if (v14 >= v13 >> 1) {
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v11);
    }
    char v15 = *(void *)(v0 + 16);
    *((void *)v11 + 2) = v14 + 1;
    v11[v14 + 32] = -62;
    *(void *)(v15 + 24) = v11;
    swift_bridgeObjectRetain();
    unint64_t v4 = static String._fromUTF8Repairing(_:)();
    uint64_t v6 = v16;
    swift_bridgeObjectRelease();
    uint64_t v17 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *(void *)(v15 + 24);
    uint64_t v9 = (void *)(*(void *)(v0 + 16) + 24);
    if (!v17) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(char **)(v2 + 24);
  if (v1 == 133)
  {
    if (*((void *)v3 + 2))
    {
      swift_bridgeObjectRetain();
      unint64_t v4 = static String._fromUTF8Repairing(_:)();
      uint64_t v6 = v5;
      swift_bridgeObjectRelease();
      unint64_t v7 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v8 = *(void *)(v2 + 24);
      uint64_t v9 = (void *)(*(void *)(v0 + 16) + 24);
      if ((v7 & 1) == 0)
      {
LABEL_5:
        *uint64_t v9 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v8 + 24) >> 1);
        swift_bridgeObjectRelease();
LABEL_12:
        unint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
        return v18(v4, v6);
      }
LABEL_11:
      specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v8 + 16));
      goto LABEL_12;
    }
    uint64_t v28 = swift_isUniquelyReferenced_nonNull_native();
    char v3 = *(char **)(v2 + 24);
    if ((v28 & 1) == 0)
    {
      if (*((void *)v3 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        uint64_t v32 = (void *)swift_allocObject();
        uint64_t v33 = _swift_stdlib_malloc_size(v32);
        v32[2] = 0;
        v32[3] = 2 * v33 - 64;
      }
      else
      {
        uint64_t v32 = (void *)MEMORY[0x1E4FBC860];
      }
      *(void *)(*(void *)(v0 + 16) + 24) = v32;
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }
    uint64_t v29 = *((void *)v3 + 2);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 1, v3);
    }
    if (v29)
    {
      unint64_t v30 = *((void *)v3 + 2);
      uint64_t v31 = v30 - v29;
      if (v30 - v29 < 0) {
        return _fatalErrorMessage(_:_:file:line:flags:)();
      }
      memmove(v3 + 32, &v3[v29 + 32], v30 - v29);
      *((void *)v3 + 2) = v31;
    }
    uint64_t v27 = *(void *)(v0 + 16);
  }
  else
  {
    unint64_t v20 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v2 + 24) = v3;
    if ((v20 & 1) == 0)
    {
      unint64_t v35 = *(void *)(v0 + 16);
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, v3);
      *(void *)(v35 + 24) = v3;
    }
    uint64_t v22 = *((void *)v3 + 2);
    unint64_t v21 = *((void *)v3 + 3);
    uint64_t v23 = v22 + 1;
    if (v22 >= v21 >> 1) {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v3);
    }
    uint64_t v24 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v23;
    v3[v22 + 32] = -62;
    *(void *)(v24 + 24) = v3;
    int v25 = *((void *)v3 + 3);
    unsigned __int8 v26 = v22 + 2;
    if (v26 > (uint64_t)(v25 >> 1)) {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26, 1, v3);
    }
    uint64_t v27 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v26;
    v3[v23 + 32] = v1;
  }
  *(void *)(v27 + 24) = v3;
LABEL_23:
  return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
}

{
  uint64_t v0;
  __int16 v1;
  void *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  char v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  void *v44;
  size_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;

  uint64_t v1 = *(_WORD *)(v0 + 102);
  if ((v1 & 0x100) != 0)
  {
    int v13 = *(void *)(v0 + 16);
    uint64_t v14 = *(char **)(v13 + 24);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v13 + 24) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v46 = *(void *)(v0 + 16);
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v14 + 2) + 1, 1, v14);
      *(void *)(v46 + 24) = v14;
    }
    uint64_t v17 = *((void *)v14 + 2);
    char v16 = *((void *)v14 + 3);
    if (v17 >= v16 >> 1) {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v14);
    }
    unint64_t v18 = *(void *)(v0 + 16);
    *((void *)v14 + 2) = v17 + 1;
    v14[v17 + 32] = -30;
    *(void *)(v18 + 24) = v14;
    swift_bridgeObjectRetain();
    unint64_t v7 = static String._fromUTF8Repairing(_:)();
    uint64_t v9 = v19;
    swift_bridgeObjectRelease();
    unint64_t v20 = swift_isUniquelyReferenced_nonNull_native();
    char v11 = *(void *)(v18 + 24);
    uint64_t v12 = (void *)(*(void *)(v0 + 16) + 24);
    if (!v20) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
  uint64_t v2 = *(void **)(v0 + 16);
  if (v1 != 128)
  {
    uint64_t v6 = (char *)v2[3];
    uint64_t v23 = swift_isUniquelyReferenced_nonNull_native();
    v2[3] = v6;
    if ((v23 & 1) == 0)
    {
      uint64_t v48 = *(void *)(v0 + 16);
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v6 + 2) + 1, 1, v6);
      *(void *)(v48 + 24) = v6;
    }
    int v25 = *((void *)v6 + 2);
    uint64_t v24 = *((void *)v6 + 3);
    unsigned __int8 v26 = v25 + 1;
    if (v25 >= v24 >> 1) {
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1, v6);
    }
    uint64_t v27 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v26;
    v6[v25 + 32] = -30;
    *(void *)(v27 + 24) = v6;
    uint64_t v28 = *((void *)v6 + 3);
    uint64_t v29 = v25 + 2;
    if (v29 > (uint64_t)(v28 >> 1)) {
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29, 1, v6);
    }
    unint64_t v30 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v29;
    uint64_t v31 = &v6[v26];
    goto LABEL_33;
  }
  char v3 = (char *)v2[1];
  if (v3 != (char *)v2[2])
  {
    unint64_t v4 = *v3;
    LOBYTE(v1) = *v3;
    v2[1] = v3 + 1;
    uint64_t v5 = *(void *)(v0 + 16);
    uint64_t v6 = *(char **)(v5 + 24);
    if ((v4 & 0xFE) == 0xA8)
    {
      if (*((void *)v6 + 2))
      {
        swift_bridgeObjectRetain();
        unint64_t v7 = static String._fromUTF8Repairing(_:)();
        uint64_t v9 = v8;
        swift_bridgeObjectRelease();
        BOOL v10 = swift_isUniquelyReferenced_nonNull_native();
        char v11 = *(void *)(v5 + 24);
        uint64_t v12 = (void *)(*(void *)(v0 + 16) + 24);
        if ((v10 & 1) == 0)
        {
LABEL_7:
          *uint64_t v12 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v11 + 24) >> 1);
          swift_bridgeObjectRelease();
LABEL_14:
          unint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
          return v21(v7, v9);
        }
LABEL_13:
        specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v11 + 16));
        goto LABEL_14;
      }
      Swift::String v42 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v43 = *(void *)(v5 + 24);
      if (v42)
      {
        specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v43 + 16));
      }
      else
      {
        if (*(void *)(v43 + 24) >= 2uLL)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
          uint64_t v44 = (void *)swift_allocObject();
          uint64_t v45 = _swift_stdlib_malloc_size(v44);
          v44[2] = 0;
          v44[3] = 2 * v45 - 64;
        }
        else
        {
          uint64_t v44 = (void *)MEMORY[0x1E4FBC860];
        }
        *(void *)(*(void *)(v0 + 16) + 24) = v44;
        swift_bridgeObjectRelease();
      }
      goto LABEL_34;
    }
    uint64_t v32 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v5 + 24) = v6;
    if ((v32 & 1) == 0)
    {
      unint64_t v49 = *(void *)(v0 + 16);
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v6 + 2) + 1, 1, v6);
      *(void *)(v49 + 24) = v6;
    }
    uint64_t v33 = *((void *)v6 + 2);
    uint64_t v34 = *((void *)v6 + 3);
    unint64_t v35 = v33 + 1;
    if (v33 >= v34 >> 1)
    {
      uint64_t v50 = v6;
      int8x16_t v51 = *((void *)v6 + 2);
      uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v33 + 1, 1, v50);
      uint64_t v33 = v51;
      uint64_t v6 = v52;
    }
    unint64_t v36 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v35;
    v6[v33 + 32] = -30;
    *(void *)(v36 + 24) = v6;
    uint64_t v37 = *((void *)v6 + 3);
    uint64_t v38 = v33 + 2;
    if ((uint64_t)(v33 + 2) > (uint64_t)(v37 >> 1))
    {
      uint64_t v53 = v6;
      uint64_t v54 = v33;
      uint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v37 > 1), v33 + 2, 1, v53);
      uint64_t v33 = v54;
      uint64_t v6 = v55;
    }
    uint64_t v39 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v38;
    v6[v35 + 32] = 0x80;
    *(void *)(v39 + 24) = v6;
    unint64_t v40 = *((void *)v6 + 3);
    unint64_t v41 = v33 + 3;
    if ((uint64_t)(v33 + 3) > (uint64_t)(v40 >> 1)) {
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v33 + 3, 1, v6);
    }
    unint64_t v30 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v41;
    uint64_t v31 = &v6[v38];
LABEL_33:
    v31[32] = v1;
    *(void *)(v30 + 24) = v6;
LABEL_34:
    return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
  }
  unsigned __int16 v47 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v47;
  _OWORD *v47 = v0;
  v47[1] = specialized AsyncLineSequence.AsyncIterator.next();
  return _AsyncBytesBuffer.reloadBufferAndNext()();
}

{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  void *v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  uint64_t v1 = *(_WORD *)(v0 + 104);
  if ((v1 & 0x100) != 0)
  {
    BOOL v10 = *(void *)(v0 + 16);
    char v11 = *(char **)(v10 + 24);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v10 + 24) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v38 = *(void *)(v0 + 16);
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
      *(void *)(v38 + 24) = v11;
    }
    uint64_t v14 = *((void *)v11 + 2);
    int v13 = *((void *)v11 + 3);
    char v15 = v14 + 1;
    if (v14 >= v13 >> 1) {
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v11);
    }
    char v16 = *(void *)(v0 + 16);
    *((void *)v11 + 2) = v15;
    v11[v14 + 32] = -30;
    *(void *)(v16 + 24) = v11;
    uint64_t v17 = *((void *)v11 + 3);
    unint64_t v18 = v14 + 2;
    if (v18 > (uint64_t)(v17 >> 1)) {
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18, 1, v11);
    }
    uint64_t v19 = *(void *)(v0 + 16);
    *((void *)v11 + 2) = v18;
    v11[v15 + 32] = 0x80;
    *(void *)(v19 + 24) = v11;
    swift_bridgeObjectRetain();
    unint64_t v4 = static String._fromUTF8Repairing(_:)();
    uint64_t v6 = v20;
    swift_bridgeObjectRelease();
    unint64_t v21 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *(void *)(v19 + 24);
    uint64_t v9 = (void *)(*(void *)(v0 + 16) + 24);
    if (!v21) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(char **)(v2 + 24);
  if ((v1 & 0xFE) == 0xA8)
  {
    if (*((void *)v3 + 2))
    {
      swift_bridgeObjectRetain();
      unint64_t v4 = static String._fromUTF8Repairing(_:)();
      uint64_t v6 = v5;
      swift_bridgeObjectRelease();
      unint64_t v7 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v8 = *(void *)(v2 + 24);
      uint64_t v9 = (void *)(*(void *)(v0 + 16) + 24);
      if ((v7 & 1) == 0)
      {
LABEL_5:
        *uint64_t v9 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v8 + 24) >> 1);
        swift_bridgeObjectRelease();
LABEL_14:
        uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
        return v22(v4, v6);
      }
LABEL_13:
      specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v8 + 16));
      goto LABEL_14;
    }
    uint64_t v34 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v35 = *(void *)(v2 + 24);
    if (v34)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v35 + 16));
    }
    else
    {
      if (*(void *)(v35 + 24) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        unint64_t v36 = (void *)swift_allocObject();
        uint64_t v37 = _swift_stdlib_malloc_size(v36);
        v36[2] = 0;
        v36[3] = 2 * v37 - 64;
      }
      else
      {
        unint64_t v36 = (void *)MEMORY[0x1E4FBC860];
      }
      *(void *)(*(void *)(v0 + 16) + 24) = v36;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v24 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v2 + 24) = v3;
    if ((v24 & 1) == 0)
    {
      uint64_t v39 = *(void *)(v0 + 16);
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, v3);
      *(void *)(v39 + 24) = v3;
    }
    unsigned __int8 v26 = *((void *)v3 + 2);
    int v25 = *((void *)v3 + 3);
    uint64_t v27 = v26 + 1;
    if (v26 >= v25 >> 1) {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1, v3);
    }
    uint64_t v28 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v27;
    v3[v26 + 32] = -30;
    *(void *)(v28 + 24) = v3;
    uint64_t v29 = *((void *)v3 + 3);
    unint64_t v30 = v26 + 2;
    if ((uint64_t)(v26 + 2) > (uint64_t)(v29 >> 1)) {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v26 + 2, 1, v3);
    }
    uint64_t v31 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v30;
    v3[v27 + 32] = 0x80;
    *(void *)(v31 + 24) = v3;
    uint64_t v32 = *((void *)v3 + 3);
    if ((uint64_t)(v26 + 3) > (uint64_t)(v32 >> 1)) {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v26 + 3, 1, v3);
    }
    uint64_t v33 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v26 + 3;
    v3[v30 + 32] = v1;
    *(void *)(v33 + 24) = v3;
  }
  return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 v19;
  int v20;
  uint64_t v21;
  char *v22;
  char v23;
  char *v24;
  int64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  int64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  int v44;
  void *v45;
  unsigned __int8 *v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  size_t v55;
  void *v56;
  size_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 v60;
  int v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t);
  char v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  int64_t v75;
  uint64_t v76;
  char *v77;
  size_t v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  void *v90;
  size_t v91;
  void *v92;
  uint64_t (*v93)(__int16);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  uint64_t v1 = v0[2];
  if (*(unsigned char *)(v1 + 33))
  {
    uint64_t v2 = *(unsigned __int8 **)(v1 + 8);
    if (v2 == *(unsigned __int8 **)(v1 + 16))
    {
      uint64_t v92 = (void *)swift_task_alloc();
      v0[3] = v92;
      *uint64_t v92 = v0;
      uint64_t v93 = specialized AsyncLineSequence.AsyncIterator.next();
      goto LABEL_103;
    }
    char v3 = *v2;
    *(void *)(v1 + 8) = v2 + 1;
    uint64_t v1 = v0[2];
  }
  else
  {
    char v3 = *(unsigned __int8 *)(v1 + 32);
  }
  *(_WORD *)(v1 + 32) = 256;
  if (v3 != 13)
  {
    if ((v3 - 10) < 3)
    {
      BOOL v10 = v0[2];
      if (*(void *)(*(void *)(v10 + 24) + 16))
      {
        swift_bridgeObjectRetain();
        char v11 = static String._fromUTF8Repairing(_:)();
        int v13 = v12;
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        char v15 = *(void *)(v10 + 24);
        goto LABEL_12;
      }
      unint64_t v35 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v24 = *(char **)(v10 + 24);
      if (v35)
      {
        unint64_t v36 = v0[2];
        int v25 = *((void *)v24 + 2);
        uint64_t v37 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v36 + 24) = v24;
        if ((v37 & 1) == 0)
        {
          uint64_t v38 = v0[2];
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 1, v24);
          *(void *)(v38 + 24) = v24;
        }
LABEL_35:
        if (v25)
        {
          uint64_t v39 = *((void *)v24 + 2);
          unint64_t v40 = v39 - v25;
          if (v39 - v25 < 0) {
            return _fatalErrorMessage(_:_:file:line:flags:)();
          }
          memmove(v24 + 32, &v24[v25 + 32], v39 - v25);
          *((void *)v24 + 2) = v40;
        }
        *(void *)(v0[2] + 24) = v24;
LABEL_83:
        return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
      }
LABEL_54:
      if (*((void *)v24 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        int8x16_t v56 = (void *)swift_allocObject();
        uint64_t v78 = _swift_stdlib_malloc_size(v56);
        v56[2] = 0;
        v56[3] = 2 * v78 - 64;
      }
      else
      {
        int8x16_t v56 = (void *)MEMORY[0x1E4FBC860];
      }
      *(void *)(v0[2] + 24) = v56;
LABEL_82:
      swift_bridgeObjectRelease();
      goto LABEL_83;
    }
    if (v3 == 226)
    {
      Swift::String v42 = v0[2];
      uint64_t v43 = *(unsigned __int8 **)(v42 + 8);
      if (v43 == *(unsigned __int8 **)(v42 + 16))
      {
        uint64_t v92 = (void *)swift_task_alloc();
        v0[10] = v92;
        *uint64_t v92 = v0;
        uint64_t v93 = specialized AsyncLineSequence.AsyncIterator.next();
        goto LABEL_103;
      }
      uint64_t v44 = *v43;
      uint64_t v19 = *v43;
      *(void *)(v42 + 8) = v43 + 1;
      uint64_t v45 = (void *)v0[2];
      if (v44 == 128)
      {
        uint64_t v46 = (unsigned __int8 *)v45[1];
        if (v46 == (unsigned __int8 *)v45[2])
        {
          uint64_t v92 = (void *)swift_task_alloc();
          v0[11] = v92;
          *uint64_t v92 = v0;
          uint64_t v93 = specialized AsyncLineSequence.AsyncIterator.next();
          goto LABEL_103;
        }
        unsigned __int16 v47 = *v46;
        uint64_t v19 = *v46;
        v45[1] = v46 + 1;
        unint64_t v21 = v0[2];
        uint64_t v22 = *(char **)(v21 + 24);
        if ((v47 & 0xFE) == 0xA8)
        {
          if (!*((void *)v22 + 2))
          {
            uint64_t v88 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v89 = *(void *)(v21 + 24);
            if (v88)
            {
              specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v89 + 16));
              goto LABEL_83;
            }
            if (*(void *)(v89 + 24) >= 2uLL)
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
              uint64_t v90 = (void *)swift_allocObject();
              uint64_t v91 = _swift_stdlib_malloc_size(v90);
              v90[2] = 0;
              v90[3] = 2 * v91 - 64;
            }
            else
            {
              uint64_t v90 = (void *)MEMORY[0x1E4FBC860];
            }
            *(void *)(v0[2] + 24) = v90;
            goto LABEL_82;
          }
          goto LABEL_46;
        }
        uint64_t v79 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v21 + 24) = v22;
        if ((v79 & 1) == 0)
        {
          long long v97 = v0[2];
          uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, v22);
          *(void *)(v97 + 24) = v22;
        }
        uint64_t v81 = *((void *)v22 + 2);
        uint64_t v80 = *((void *)v22 + 3);
        long long v82 = v81 + 1;
        if (v81 >= v80 >> 1) {
          uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v80 > 1), v81 + 1, 1, v22);
        }
        long long v83 = v0[2];
        *((void *)v22 + 2) = v82;
        v22[v81 + 32] = -30;
        *(void *)(v83 + 24) = v22;
        long long v84 = *((void *)v22 + 3);
        long long v85 = v81 + 2;
        if ((uint64_t)(v81 + 2) > (uint64_t)(v84 >> 1)) {
          uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v84 > 1), v81 + 2, 1, v22);
        }
        long long v86 = v0[2];
        *((void *)v22 + 2) = v85;
        v22[v82 + 32] = 0x80;
        *(void *)(v86 + 24) = v22;
        long long v87 = *((void *)v22 + 3);
        if ((uint64_t)(v81 + 3) > (uint64_t)(v87 >> 1)) {
          uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v87 > 1), v81 + 3, 1, v22);
        }
        uint64_t v76 = v0[2];
        *((void *)v22 + 2) = v81 + 3;
        uint64_t v77 = &v22[v85];
LABEL_79:
        v77[32] = v19;
        *(void *)(v76 + 24) = v22;
        goto LABEL_83;
      }
      uint64_t v22 = (char *)v45[3];
      char v72 = swift_isUniquelyReferenced_nonNull_native();
      long long v45[3] = v22;
      if ((v72 & 1) == 0)
      {
        long long v96 = v0[2];
        uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, v22);
        *(void *)(v96 + 24) = v22;
      }
      uint64_t v67 = *((void *)v22 + 2);
      uint64_t v73 = *((void *)v22 + 3);
      uint64_t v68 = v67 + 1;
      if (v67 >= v73 >> 1) {
        uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v73 > 1), v67 + 1, 1, v22);
      }
      uint64_t v69 = v0[2];
      *((void *)v22 + 2) = v68;
      uint64_t v70 = &v22[v67];
      int v71 = -30;
    }
    else
    {
      if (v3 != 194)
      {
        unint64_t v49 = v0[2];
        uint64_t v50 = *(char **)(v49 + 24);
        int8x16_t v51 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v49 + 24) = v50;
        if ((v51 & 1) == 0)
        {
          uint64_t v94 = v0[2];
          uint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v50 + 2) + 1, 1, v50);
          *(void *)(v94 + 24) = v50;
        }
        uint64_t v53 = *((void *)v50 + 2);
        uint64_t v52 = *((void *)v50 + 3);
        if (v53 >= v52 >> 1) {
          uint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v52 > 1), v53 + 1, 1, v50);
        }
        uint64_t v54 = v0[2];
        *((void *)v50 + 2) = v53 + 1;
        v50[v53 + 32] = v3;
        *(void *)(v54 + 24) = v50;
        goto LABEL_83;
      }
      uint64_t v17 = v0[2];
      unint64_t v18 = *(unsigned __int8 **)(v17 + 8);
      if (v18 == *(unsigned __int8 **)(v17 + 16))
      {
        uint64_t v92 = (void *)swift_task_alloc();
        v0[9] = v92;
        *uint64_t v92 = v0;
        uint64_t v93 = specialized AsyncLineSequence.AsyncIterator.next();
        goto LABEL_103;
      }
      unint64_t v20 = *v18;
      uint64_t v19 = *v18;
      *(void *)(v17 + 8) = v18 + 1;
      unint64_t v21 = v0[2];
      uint64_t v22 = *(char **)(v21 + 24);
      if (v20 == 133)
      {
        if (!*((void *)v22 + 2))
        {
          uint64_t v23 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v24 = *(char **)(v21 + 24);
          if (v23)
          {
            int v25 = *((void *)v24 + 2);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 1, v24);
            }
            goto LABEL_35;
          }
          goto LABEL_54;
        }
LABEL_46:
        swift_bridgeObjectRetain();
        char v11 = static String._fromUTF8Repairing(_:)();
        int v13 = v48;
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        char v15 = *(void *)(v21 + 24);
LABEL_12:
        if (isUniquelyReferenced_nonNull_native)
        {
          specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v15 + 16));
        }
        else
        {
          char v16 = (void *)(v0[2] + 24);
          *char v16 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v15 + 24) >> 1);
          swift_bridgeObjectRelease();
        }
LABEL_63:
        uint64_t v63 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
        return v63(v11, v13);
      }
      char v65 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v21 + 24) = v22;
      if ((v65 & 1) == 0)
      {
        uint64_t v95 = v0[2];
        uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, v22);
        *(void *)(v95 + 24) = v22;
      }
      uint64_t v67 = *((void *)v22 + 2);
      uint64_t v66 = *((void *)v22 + 3);
      uint64_t v68 = v67 + 1;
      if (v67 >= v66 >> 1) {
        uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v66 > 1), v67 + 1, 1, v22);
      }
      uint64_t v69 = v0[2];
      *((void *)v22 + 2) = v68;
      uint64_t v70 = &v22[v67];
      int v71 = -62;
    }
    v70[32] = v71;
    *(void *)(v69 + 24) = v22;
    long long v74 = *((void *)v22 + 3);
    uint64_t v75 = v67 + 2;
    if (v75 > (uint64_t)(v74 >> 1)) {
      uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v74 > 1), v75, 1, v22);
    }
    uint64_t v76 = v0[2];
    *((void *)v22 + 2) = v75;
    uint64_t v77 = &v22[v68];
    goto LABEL_79;
  }
  unint64_t v4 = v0[2];
  if (*(void *)(*(void *)(v4 + 24) + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = static String._fromUTF8Repairing(_:)();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    uint64_t v8 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *(void *)(v4 + 24);
    if (v8)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v9 + 16));
    }
    else
    {
      if (*(void *)(v9 + 24) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        uint64_t v34 = (void *)swift_allocObject();
        uint64_t v55 = _swift_stdlib_malloc_size(v34);
        void v34[2] = 0;
        void v34[3] = 2 * v55 - 64;
      }
      else
      {
        uint64_t v34 = (void *)MEMORY[0x1E4FBC860];
      }
      *(void *)(v0[2] + 24) = v34;
      swift_bridgeObjectRelease();
    }
    goto LABEL_58;
  }
  unsigned __int8 v26 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v27 = *(char **)(v4 + 24);
  if ((v26 & 1) == 0)
  {
    if (*((void *)v27 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      unint64_t v41 = (void *)swift_allocObject();
      int8x16_t v57 = _swift_stdlib_malloc_size(v41);
      v41[2] = 0;
      _OWORD v41[3] = 2 * v57 - 64;
    }
    else
    {
      unint64_t v41 = (void *)MEMORY[0x1E4FBC860];
    }
    *(void *)(v0[2] + 24) = v41;
    swift_bridgeObjectRelease();
    uint64_t v5 = 0;
    unint64_t v7 = 0;
    goto LABEL_58;
  }
  uint64_t v28 = v0[2];
  uint64_t v29 = *((void *)v27 + 2);
  unint64_t v30 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v28 + 24) = v27;
  if ((v30 & 1) == 0)
  {
    uint64_t v31 = v0[2];
    uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 1, v27);
    *(void *)(v31 + 24) = v27;
  }
  if (v29)
  {
    uint64_t v32 = *((void *)v27 + 2);
    uint64_t v33 = v32 - v29;
    if (v32 - v29 >= 0)
    {
      memmove(v27 + 32, &v27[v29 + 32], v32 - v29);
      *((void *)v27 + 2) = v33;
      goto LABEL_28;
    }
    return _fatalErrorMessage(_:_:file:line:flags:)();
  }
LABEL_28:
  uint64_t v5 = 0;
  unint64_t v7 = 0;
  *(void *)(v0[2] + 24) = v27;
LABEL_58:
  v0[5] = v5;
  v0[6] = v7;
  char v58 = v0[2];
  uint64_t v59 = *(unsigned __int8 **)(v58 + 8);
  if (v59 != *(unsigned __int8 **)(v58 + 16))
  {
    uint64_t v61 = *v59;
    uint64_t v60 = *v59;
    *(void *)(v58 + 8) = v59 + 1;
    if (v61 != 10)
    {
      uint64_t v62 = v0[2];
      *(unsigned char *)(v62 + 32) = v60;
      *(unsigned char *)(v62 + 33) = 0;
    }
    int v13 = v0[6];
    if (v13)
    {
      char v11 = v0[5];
      goto LABEL_63;
    }
    goto LABEL_83;
  }
  uint64_t v92 = (void *)swift_task_alloc();
  v0[7] = v92;
  *uint64_t v92 = v0;
  uint64_t v93 = specialized AsyncLineSequence.AsyncIterator.next();
LABEL_103:
  v92[1] = v93;
  return _AsyncBytesBuffer.reloadBufferAndNext()();
}

{
  uint64_t v0;
  __int16 v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  int v22;
  uint64_t v23;
  char *v24;
  char v25;
  char *v26;
  int64_t v27;
  char v28;
  char *v29;
  uint64_t v30;
  int64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  void *v47;
  unsigned __int8 *v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  size_t v57;
  void *v58;
  size_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned __int8 v62;
  int v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t);
  char v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  int64_t v77;
  uint64_t v78;
  char *v79;
  size_t v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t v91;
  void *v92;
  size_t v93;
  void *v94;
  uint64_t (*v95)(__int16);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  uint64_t v1 = *(_WORD *)(v0 + 96);
  *(_WORD *)(*(void *)(v0 + 16) + 32) = 256;
  if ((v1 & 0x100) != 0)
  {
    uint64_t v9 = *(void *)(v0 + 16);
    BOOL v10 = *(void *)(*(void *)(v9 + 24) + 16);
    if (!v10)
    {
      char v11 = 0;
      goto LABEL_63;
    }
    swift_bridgeObjectRetain();
    char v11 = static String._fromUTF8Repairing(_:)();
    BOOL v10 = v12;
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *(void *)(v9 + 24);
    char v15 = (void *)(*(void *)(v0 + 16) + 24);
    if (!isUniquelyReferenced_nonNull_native) {
      goto LABEL_13;
    }
    goto LABEL_8;
  }
  uint64_t v2 = *(unsigned __int8 *)(v0 + 96);
  if (v2 != 13)
  {
    if ((v2 - 10) < 3)
    {
      char v16 = *(void *)(v0 + 16);
      if (*(void *)(*(void *)(v16 + 24) + 16))
      {
        swift_bridgeObjectRetain();
        char v11 = static String._fromUTF8Repairing(_:)();
        BOOL v10 = v17;
        swift_bridgeObjectRelease();
        unint64_t v18 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v14 = *(void *)(v16 + 24);
        goto LABEL_12;
      }
      uint64_t v37 = swift_isUniquelyReferenced_nonNull_native();
      unsigned __int8 v26 = *(char **)(v16 + 24);
      if (v37)
      {
        uint64_t v38 = *(void *)(v0 + 16);
        uint64_t v27 = *((void *)v26 + 2);
        uint64_t v39 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v38 + 24) = v26;
        if ((v39 & 1) == 0)
        {
          unint64_t v40 = *(void *)(v0 + 16);
          unsigned __int8 v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 1, v26);
          *(void *)(v40 + 24) = v26;
        }
LABEL_35:
        if (v27)
        {
          unint64_t v41 = *((void *)v26 + 2);
          Swift::String v42 = v41 - v27;
          if (v41 - v27 < 0) {
            return _fatalErrorMessage(_:_:file:line:flags:)();
          }
          memmove(v26 + 32, &v26[v27 + 32], v41 - v27);
          *((void *)v26 + 2) = v42;
        }
        *(void *)(*(void *)(v0 + 16) + 24) = v26;
LABEL_83:
        return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
      }
LABEL_54:
      if (*((void *)v26 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        char v58 = (void *)swift_allocObject();
        uint64_t v80 = _swift_stdlib_malloc_size(v58);
        v58[2] = 0;
        v58[3] = 2 * v80 - 64;
      }
      else
      {
        char v58 = (void *)MEMORY[0x1E4FBC860];
      }
      *(void *)(*(void *)(v0 + 16) + 24) = v58;
LABEL_82:
      swift_bridgeObjectRelease();
      goto LABEL_83;
    }
    if (v2 == 226)
    {
      uint64_t v44 = *(void *)(v0 + 16);
      uint64_t v45 = *(unsigned __int8 **)(v44 + 8);
      if (v45 == *(unsigned __int8 **)(v44 + 16))
      {
        uint64_t v94 = (void *)swift_task_alloc();
        *(void *)(v0 + 80) = v94;
        char *v94 = v0;
        uint64_t v95 = specialized AsyncLineSequence.AsyncIterator.next();
        goto LABEL_102;
      }
      uint64_t v46 = *v45;
      unint64_t v21 = *v45;
      *(void *)(v44 + 8) = v45 + 1;
      unsigned __int16 v47 = *(void **)(v0 + 16);
      if (v46 == 128)
      {
        uint64_t v48 = (unsigned __int8 *)v47[1];
        if (v48 == (unsigned __int8 *)v47[2])
        {
          uint64_t v94 = (void *)swift_task_alloc();
          *(void *)(v0 + 88) = v94;
          char *v94 = v0;
          uint64_t v95 = specialized AsyncLineSequence.AsyncIterator.next();
          goto LABEL_102;
        }
        unint64_t v49 = *v48;
        unint64_t v21 = *v48;
        v47[1] = v48 + 1;
        uint64_t v23 = *(void *)(v0 + 16);
        uint64_t v24 = *(char **)(v23 + 24);
        if ((v49 & 0xFE) == 0xA8)
        {
          if (!*((void *)v24 + 2))
          {
            uint64_t v90 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v91 = *(void *)(v23 + 24);
            if (v90)
            {
              specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v91 + 16));
              goto LABEL_83;
            }
            if (*(void *)(v91 + 24) >= 2uLL)
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
              uint64_t v92 = (void *)swift_allocObject();
              uint64_t v93 = _swift_stdlib_malloc_size(v92);
              v92[2] = 0;
              v92[3] = 2 * v93 - 64;
            }
            else
            {
              uint64_t v92 = (void *)MEMORY[0x1E4FBC860];
            }
            *(void *)(*(void *)(v0 + 16) + 24) = v92;
            goto LABEL_82;
          }
          goto LABEL_46;
        }
        uint64_t v81 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v23 + 24) = v24;
        if ((v81 & 1) == 0)
        {
          long long v99 = *(void *)(v0 + 16);
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v24 + 2) + 1, 1, v24);
          *(void *)(v99 + 24) = v24;
        }
        long long v83 = *((void *)v24 + 2);
        long long v82 = *((void *)v24 + 3);
        long long v84 = v83 + 1;
        if (v83 >= v82 >> 1) {
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v82 > 1), v83 + 1, 1, v24);
        }
        long long v85 = *(void *)(v0 + 16);
        *((void *)v24 + 2) = v84;
        v24[v83 + 32] = -30;
        *(void *)(v85 + 24) = v24;
        long long v86 = *((void *)v24 + 3);
        long long v87 = v83 + 2;
        if ((uint64_t)(v83 + 2) > (uint64_t)(v86 >> 1)) {
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v86 > 1), v83 + 2, 1, v24);
        }
        uint64_t v88 = *(void *)(v0 + 16);
        *((void *)v24 + 2) = v87;
        v24[v84 + 32] = 0x80;
        *(void *)(v88 + 24) = v24;
        uint64_t v89 = *((void *)v24 + 3);
        if ((uint64_t)(v83 + 3) > (uint64_t)(v89 >> 1)) {
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v89 > 1), v83 + 3, 1, v24);
        }
        uint64_t v78 = *(void *)(v0 + 16);
        *((void *)v24 + 2) = v83 + 3;
        uint64_t v79 = &v24[v87];
LABEL_79:
        v79[32] = v21;
        *(void *)(v78 + 24) = v24;
        goto LABEL_83;
      }
      uint64_t v24 = (char *)v47[3];
      long long v74 = swift_isUniquelyReferenced_nonNull_native();
      v47[3] = v24;
      if ((v74 & 1) == 0)
      {
        long long v98 = *(void *)(v0 + 16);
        uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v24 + 2) + 1, 1, v24);
        *(void *)(v98 + 24) = v24;
      }
      uint64_t v69 = *((void *)v24 + 2);
      uint64_t v75 = *((void *)v24 + 3);
      uint64_t v70 = v69 + 1;
      if (v69 >= v75 >> 1) {
        uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v75 > 1), v69 + 1, 1, v24);
      }
      int v71 = *(void *)(v0 + 16);
      *((void *)v24 + 2) = v70;
      char v72 = &v24[v69];
      uint64_t v73 = -30;
    }
    else
    {
      if (v2 != 194)
      {
        int8x16_t v51 = *(void *)(v0 + 16);
        uint64_t v52 = *(char **)(v51 + 24);
        uint64_t v53 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v51 + 24) = v52;
        if ((v53 & 1) == 0)
        {
          long long v96 = *(void *)(v0 + 16);
          uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v52 + 2) + 1, 1, v52);
          *(void *)(v96 + 24) = v52;
        }
        uint64_t v55 = *((void *)v52 + 2);
        uint64_t v54 = *((void *)v52 + 3);
        if (v55 >= v54 >> 1) {
          uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v54 > 1), v55 + 1, 1, v52);
        }
        int8x16_t v56 = *(void *)(v0 + 16);
        *((void *)v52 + 2) = v55 + 1;
        v52[v55 + 32] = v2;
        *(void *)(v56 + 24) = v52;
        goto LABEL_83;
      }
      uint64_t v19 = *(void *)(v0 + 16);
      unint64_t v20 = *(unsigned __int8 **)(v19 + 8);
      if (v20 == *(unsigned __int8 **)(v19 + 16))
      {
        uint64_t v94 = (void *)swift_task_alloc();
        *(void *)(v0 + 72) = v94;
        char *v94 = v0;
        uint64_t v95 = specialized AsyncLineSequence.AsyncIterator.next();
        goto LABEL_102;
      }
      uint64_t v22 = *v20;
      unint64_t v21 = *v20;
      *(void *)(v19 + 8) = v20 + 1;
      uint64_t v23 = *(void *)(v0 + 16);
      uint64_t v24 = *(char **)(v23 + 24);
      if (v22 == 133)
      {
        if (!*((void *)v24 + 2))
        {
          int v25 = swift_isUniquelyReferenced_nonNull_native();
          unsigned __int8 v26 = *(char **)(v23 + 24);
          if (v25)
          {
            uint64_t v27 = *((void *)v26 + 2);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unsigned __int8 v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 1, v26);
            }
            goto LABEL_35;
          }
          goto LABEL_54;
        }
LABEL_46:
        swift_bridgeObjectRetain();
        char v11 = static String._fromUTF8Repairing(_:)();
        BOOL v10 = v50;
        swift_bridgeObjectRelease();
        unint64_t v18 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v14 = *(void *)(v23 + 24);
LABEL_12:
        char v15 = (void *)(*(void *)(v0 + 16) + 24);
        if ((v18 & 1) == 0)
        {
LABEL_13:
          *char v15 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v14 + 24) >> 1);
          swift_bridgeObjectRelease();
          goto LABEL_63;
        }
LABEL_8:
        specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v14 + 16));
LABEL_63:
        char v65 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
        return v65(v11, v10);
      }
      uint64_t v67 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v23 + 24) = v24;
      if ((v67 & 1) == 0)
      {
        long long v97 = *(void *)(v0 + 16);
        uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v24 + 2) + 1, 1, v24);
        *(void *)(v97 + 24) = v24;
      }
      uint64_t v69 = *((void *)v24 + 2);
      uint64_t v68 = *((void *)v24 + 3);
      uint64_t v70 = v69 + 1;
      if (v69 >= v68 >> 1) {
        uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v68 > 1), v69 + 1, 1, v24);
      }
      int v71 = *(void *)(v0 + 16);
      *((void *)v24 + 2) = v70;
      char v72 = &v24[v69];
      uint64_t v73 = -62;
    }
    v72[32] = v73;
    *(void *)(v71 + 24) = v24;
    uint64_t v76 = *((void *)v24 + 3);
    uint64_t v77 = v69 + 2;
    if (v77 > (uint64_t)(v76 >> 1)) {
      uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v76 > 1), v77, 1, v24);
    }
    uint64_t v78 = *(void *)(v0 + 16);
    *((void *)v24 + 2) = v77;
    uint64_t v79 = &v24[v70];
    goto LABEL_79;
  }
  char v3 = *(void *)(v0 + 16);
  if (*(void *)(*(void *)(v3 + 24) + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v4 = static String._fromUTF8Repairing(_:)();
    uint64_t v6 = v5;
    swift_bridgeObjectRelease();
    unint64_t v7 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *(void *)(v3 + 24);
    if (v7)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v8 + 16));
    }
    else
    {
      if (*(void *)(v8 + 24) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        unint64_t v36 = (void *)swift_allocObject();
        int8x16_t v57 = _swift_stdlib_malloc_size(v36);
        v36[2] = 0;
        v36[3] = 2 * v57 - 64;
      }
      else
      {
        unint64_t v36 = (void *)MEMORY[0x1E4FBC860];
      }
      *(void *)(*(void *)(v0 + 16) + 24) = v36;
      swift_bridgeObjectRelease();
    }
    goto LABEL_58;
  }
  uint64_t v28 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v29 = *(char **)(v3 + 24);
  if ((v28 & 1) == 0)
  {
    if (*((void *)v29 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      uint64_t v43 = (void *)swift_allocObject();
      uint64_t v59 = _swift_stdlib_malloc_size(v43);
      v43[2] = 0;
      long long v43[3] = 2 * v59 - 64;
    }
    else
    {
      uint64_t v43 = (void *)MEMORY[0x1E4FBC860];
    }
    *(void *)(*(void *)(v0 + 16) + 24) = v43;
    swift_bridgeObjectRelease();
    unint64_t v4 = 0;
    uint64_t v6 = 0;
    goto LABEL_58;
  }
  unint64_t v30 = *(void *)(v0 + 16);
  uint64_t v31 = *((void *)v29 + 2);
  uint64_t v32 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v30 + 24) = v29;
  if ((v32 & 1) == 0)
  {
    uint64_t v33 = *(void *)(v0 + 16);
    uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31, 1, v29);
    *(void *)(v33 + 24) = v29;
  }
  if (v31)
  {
    uint64_t v34 = *((void *)v29 + 2);
    unint64_t v35 = v34 - v31;
    if (v34 - v31 >= 0)
    {
      memmove(v29 + 32, &v29[v31 + 32], v34 - v31);
      *((void *)v29 + 2) = v35;
      goto LABEL_29;
    }
    return _fatalErrorMessage(_:_:file:line:flags:)();
  }
LABEL_29:
  unint64_t v4 = 0;
  uint64_t v6 = 0;
  *(void *)(*(void *)(v0 + 16) + 24) = v29;
LABEL_58:
  *(void *)(v0 + 40) = v4;
  *(void *)(v0 + 48) = v6;
  uint64_t v60 = *(void *)(v0 + 16);
  uint64_t v61 = *(unsigned __int8 **)(v60 + 8);
  if (v61 != *(unsigned __int8 **)(v60 + 16))
  {
    uint64_t v63 = *v61;
    uint64_t v62 = *v61;
    *(void *)(v60 + 8) = v61 + 1;
    if (v63 != 10)
    {
      uint64_t v64 = *(void *)(v0 + 16);
      *(unsigned char *)(v64 + 32) = v62;
      *(unsigned char *)(v64 + 33) = 0;
    }
    BOOL v10 = *(void *)(v0 + 48);
    if (v10)
    {
      char v11 = *(void *)(v0 + 40);
      goto LABEL_63;
    }
    goto LABEL_83;
  }
  uint64_t v94 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v94;
  char *v94 = v0;
  uint64_t v95 = specialized AsyncLineSequence.AsyncIterator.next();
LABEL_102:
  v94[1] = v95;
  return _AsyncBytesBuffer.reloadBufferAndNext()();
}

{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;

  uint64_t v1 = *(_WORD *)(v0 + 98);
  if ((v1 & 0x100) != 0)
  {
    char v3 = *(void *)(v0 + 48);
  }
  else
  {
    if (v1 != 10)
    {
      uint64_t v2 = *(void *)(v0 + 16);
      *(unsigned char *)(v2 + 32) = v1;
      *(unsigned char *)(v2 + 33) = 0;
    }
    char v3 = *(void *)(v0 + 48);
    if (!v3) {
      return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
    }
  }
  return (*(uint64_t (**)(void, uint64_t))(v0 + 8))(*(void *)(v0 + 40), v3);
}

{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  char v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  char v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  uint64_t v1 = *(_WORD *)(v0 + 100);
  if ((v1 & 0x100) != 0)
  {
    BOOL v10 = *(void *)(v0 + 16);
    char v11 = *(char **)(v10 + 24);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v10 + 24) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v34 = *(void *)(v0 + 16);
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
      *(void *)(v34 + 24) = v11;
    }
    uint64_t v14 = *((void *)v11 + 2);
    int v13 = *((void *)v11 + 3);
    if (v14 >= v13 >> 1) {
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v11);
    }
    char v15 = *(void *)(v0 + 16);
    *((void *)v11 + 2) = v14 + 1;
    v11[v14 + 32] = -62;
    *(void *)(v15 + 24) = v11;
    swift_bridgeObjectRetain();
    unint64_t v4 = static String._fromUTF8Repairing(_:)();
    uint64_t v6 = v16;
    swift_bridgeObjectRelease();
    uint64_t v17 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *(void *)(v15 + 24);
    uint64_t v9 = (void *)(*(void *)(v0 + 16) + 24);
    if (!v17) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(char **)(v2 + 24);
  if (v1 == 133)
  {
    if (*((void *)v3 + 2))
    {
      swift_bridgeObjectRetain();
      unint64_t v4 = static String._fromUTF8Repairing(_:)();
      uint64_t v6 = v5;
      swift_bridgeObjectRelease();
      unint64_t v7 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v8 = *(void *)(v2 + 24);
      uint64_t v9 = (void *)(*(void *)(v0 + 16) + 24);
      if ((v7 & 1) == 0)
      {
LABEL_5:
        *uint64_t v9 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v8 + 24) >> 1);
        swift_bridgeObjectRelease();
LABEL_12:
        unint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
        return v18(v4, v6);
      }
LABEL_11:
      specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v8 + 16));
      goto LABEL_12;
    }
    uint64_t v28 = swift_isUniquelyReferenced_nonNull_native();
    char v3 = *(char **)(v2 + 24);
    if ((v28 & 1) == 0)
    {
      if (*((void *)v3 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        uint64_t v32 = (void *)swift_allocObject();
        uint64_t v33 = _swift_stdlib_malloc_size(v32);
        v32[2] = 0;
        v32[3] = 2 * v33 - 64;
      }
      else
      {
        uint64_t v32 = (void *)MEMORY[0x1E4FBC860];
      }
      *(void *)(*(void *)(v0 + 16) + 24) = v32;
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }
    uint64_t v29 = *((void *)v3 + 2);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 1, v3);
    }
    if (v29)
    {
      unint64_t v30 = *((void *)v3 + 2);
      uint64_t v31 = v30 - v29;
      if (v30 - v29 < 0) {
        return _fatalErrorMessage(_:_:file:line:flags:)();
      }
      memmove(v3 + 32, &v3[v29 + 32], v30 - v29);
      *((void *)v3 + 2) = v31;
    }
    uint64_t v27 = *(void *)(v0 + 16);
  }
  else
  {
    unint64_t v20 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v2 + 24) = v3;
    if ((v20 & 1) == 0)
    {
      unint64_t v35 = *(void *)(v0 + 16);
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, v3);
      *(void *)(v35 + 24) = v3;
    }
    uint64_t v22 = *((void *)v3 + 2);
    unint64_t v21 = *((void *)v3 + 3);
    uint64_t v23 = v22 + 1;
    if (v22 >= v21 >> 1) {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v3);
    }
    uint64_t v24 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v23;
    v3[v22 + 32] = -62;
    *(void *)(v24 + 24) = v3;
    int v25 = *((void *)v3 + 3);
    unsigned __int8 v26 = v22 + 2;
    if (v26 > (uint64_t)(v25 >> 1)) {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26, 1, v3);
    }
    uint64_t v27 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v26;
    v3[v23 + 32] = v1;
  }
  *(void *)(v27 + 24) = v3;
LABEL_23:
  return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
}

{
  uint64_t v0;
  __int16 v1;
  void *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  char v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  void *v44;
  size_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;

  uint64_t v1 = *(_WORD *)(v0 + 102);
  if ((v1 & 0x100) != 0)
  {
    int v13 = *(void *)(v0 + 16);
    uint64_t v14 = *(char **)(v13 + 24);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v13 + 24) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v46 = *(void *)(v0 + 16);
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v14 + 2) + 1, 1, v14);
      *(void *)(v46 + 24) = v14;
    }
    uint64_t v17 = *((void *)v14 + 2);
    char v16 = *((void *)v14 + 3);
    if (v17 >= v16 >> 1) {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v14);
    }
    unint64_t v18 = *(void *)(v0 + 16);
    *((void *)v14 + 2) = v17 + 1;
    v14[v17 + 32] = -30;
    *(void *)(v18 + 24) = v14;
    swift_bridgeObjectRetain();
    unint64_t v7 = static String._fromUTF8Repairing(_:)();
    uint64_t v9 = v19;
    swift_bridgeObjectRelease();
    unint64_t v20 = swift_isUniquelyReferenced_nonNull_native();
    char v11 = *(void *)(v18 + 24);
    uint64_t v12 = (void *)(*(void *)(v0 + 16) + 24);
    if (!v20) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
  uint64_t v2 = *(void **)(v0 + 16);
  if (v1 != 128)
  {
    uint64_t v6 = (char *)v2[3];
    uint64_t v23 = swift_isUniquelyReferenced_nonNull_native();
    v2[3] = v6;
    if ((v23 & 1) == 0)
    {
      uint64_t v48 = *(void *)(v0 + 16);
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v6 + 2) + 1, 1, v6);
      *(void *)(v48 + 24) = v6;
    }
    int v25 = *((void *)v6 + 2);
    uint64_t v24 = *((void *)v6 + 3);
    unsigned __int8 v26 = v25 + 1;
    if (v25 >= v24 >> 1) {
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1, v6);
    }
    uint64_t v27 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v26;
    v6[v25 + 32] = -30;
    *(void *)(v27 + 24) = v6;
    uint64_t v28 = *((void *)v6 + 3);
    uint64_t v29 = v25 + 2;
    if (v29 > (uint64_t)(v28 >> 1)) {
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29, 1, v6);
    }
    unint64_t v30 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v29;
    uint64_t v31 = &v6[v26];
    goto LABEL_33;
  }
  char v3 = (char *)v2[1];
  if (v3 != (char *)v2[2])
  {
    unint64_t v4 = *v3;
    LOBYTE(v1) = *v3;
    v2[1] = v3 + 1;
    uint64_t v5 = *(void *)(v0 + 16);
    uint64_t v6 = *(char **)(v5 + 24);
    if ((v4 & 0xFE) == 0xA8)
    {
      if (*((void *)v6 + 2))
      {
        swift_bridgeObjectRetain();
        unint64_t v7 = static String._fromUTF8Repairing(_:)();
        uint64_t v9 = v8;
        swift_bridgeObjectRelease();
        BOOL v10 = swift_isUniquelyReferenced_nonNull_native();
        char v11 = *(void *)(v5 + 24);
        uint64_t v12 = (void *)(*(void *)(v0 + 16) + 24);
        if ((v10 & 1) == 0)
        {
LABEL_7:
          *uint64_t v12 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v11 + 24) >> 1);
          swift_bridgeObjectRelease();
LABEL_14:
          unint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
          return v21(v7, v9);
        }
LABEL_13:
        specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v11 + 16));
        goto LABEL_14;
      }
      Swift::String v42 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v43 = *(void *)(v5 + 24);
      if (v42)
      {
        specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v43 + 16));
      }
      else
      {
        if (*(void *)(v43 + 24) >= 2uLL)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
          uint64_t v44 = (void *)swift_allocObject();
          uint64_t v45 = _swift_stdlib_malloc_size(v44);
          v44[2] = 0;
          v44[3] = 2 * v45 - 64;
        }
        else
        {
          uint64_t v44 = (void *)MEMORY[0x1E4FBC860];
        }
        *(void *)(*(void *)(v0 + 16) + 24) = v44;
        swift_bridgeObjectRelease();
      }
      goto LABEL_34;
    }
    uint64_t v32 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v5 + 24) = v6;
    if ((v32 & 1) == 0)
    {
      unint64_t v49 = *(void *)(v0 + 16);
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v6 + 2) + 1, 1, v6);
      *(void *)(v49 + 24) = v6;
    }
    uint64_t v33 = *((void *)v6 + 2);
    uint64_t v34 = *((void *)v6 + 3);
    unint64_t v35 = v33 + 1;
    if (v33 >= v34 >> 1)
    {
      uint64_t v50 = v6;
      int8x16_t v51 = *((void *)v6 + 2);
      uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v33 + 1, 1, v50);
      uint64_t v33 = v51;
      uint64_t v6 = v52;
    }
    unint64_t v36 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v35;
    v6[v33 + 32] = -30;
    *(void *)(v36 + 24) = v6;
    uint64_t v37 = *((void *)v6 + 3);
    uint64_t v38 = v33 + 2;
    if ((uint64_t)(v33 + 2) > (uint64_t)(v37 >> 1))
    {
      uint64_t v53 = v6;
      uint64_t v54 = v33;
      uint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v37 > 1), v33 + 2, 1, v53);
      uint64_t v33 = v54;
      uint64_t v6 = v55;
    }
    uint64_t v39 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v38;
    v6[v35 + 32] = 0x80;
    *(void *)(v39 + 24) = v6;
    unint64_t v40 = *((void *)v6 + 3);
    unint64_t v41 = v33 + 3;
    if ((uint64_t)(v33 + 3) > (uint64_t)(v40 >> 1)) {
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v33 + 3, 1, v6);
    }
    unint64_t v30 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v41;
    uint64_t v31 = &v6[v38];
LABEL_33:
    v31[32] = v1;
    *(void *)(v30 + 24) = v6;
LABEL_34:
    return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
  }
  unsigned __int16 v47 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v47;
  _OWORD *v47 = v0;
  v47[1] = specialized AsyncLineSequence.AsyncIterator.next();
  return _AsyncBytesBuffer.reloadBufferAndNext()();
}

{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  void *v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  uint64_t v1 = *(_WORD *)(v0 + 104);
  if ((v1 & 0x100) != 0)
  {
    BOOL v10 = *(void *)(v0 + 16);
    char v11 = *(char **)(v10 + 24);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v10 + 24) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v38 = *(void *)(v0 + 16);
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
      *(void *)(v38 + 24) = v11;
    }
    uint64_t v14 = *((void *)v11 + 2);
    int v13 = *((void *)v11 + 3);
    char v15 = v14 + 1;
    if (v14 >= v13 >> 1) {
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v11);
    }
    char v16 = *(void *)(v0 + 16);
    *((void *)v11 + 2) = v15;
    v11[v14 + 32] = -30;
    *(void *)(v16 + 24) = v11;
    uint64_t v17 = *((void *)v11 + 3);
    unint64_t v18 = v14 + 2;
    if (v18 > (uint64_t)(v17 >> 1)) {
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18, 1, v11);
    }
    uint64_t v19 = *(void *)(v0 + 16);
    *((void *)v11 + 2) = v18;
    v11[v15 + 32] = 0x80;
    *(void *)(v19 + 24) = v11;
    swift_bridgeObjectRetain();
    unint64_t v4 = static String._fromUTF8Repairing(_:)();
    uint64_t v6 = v20;
    swift_bridgeObjectRelease();
    unint64_t v21 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *(void *)(v19 + 24);
    uint64_t v9 = (void *)(*(void *)(v0 + 16) + 24);
    if (!v21) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(char **)(v2 + 24);
  if ((v1 & 0xFE) == 0xA8)
  {
    if (*((void *)v3 + 2))
    {
      swift_bridgeObjectRetain();
      unint64_t v4 = static String._fromUTF8Repairing(_:)();
      uint64_t v6 = v5;
      swift_bridgeObjectRelease();
      unint64_t v7 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v8 = *(void *)(v2 + 24);
      uint64_t v9 = (void *)(*(void *)(v0 + 16) + 24);
      if ((v7 & 1) == 0)
      {
LABEL_5:
        *uint64_t v9 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v8 + 24) >> 1);
        swift_bridgeObjectRelease();
LABEL_14:
        uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
        return v22(v4, v6);
      }
LABEL_13:
      specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v8 + 16));
      goto LABEL_14;
    }
    uint64_t v34 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v35 = *(void *)(v2 + 24);
    if (v34)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v35 + 16));
    }
    else
    {
      if (*(void *)(v35 + 24) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        unint64_t v36 = (void *)swift_allocObject();
        uint64_t v37 = _swift_stdlib_malloc_size(v36);
        v36[2] = 0;
        v36[3] = 2 * v37 - 64;
      }
      else
      {
        unint64_t v36 = (void *)MEMORY[0x1E4FBC860];
      }
      *(void *)(*(void *)(v0 + 16) + 24) = v36;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v24 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v2 + 24) = v3;
    if ((v24 & 1) == 0)
    {
      uint64_t v39 = *(void *)(v0 + 16);
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, v3);
      *(void *)(v39 + 24) = v3;
    }
    unsigned __int8 v26 = *((void *)v3 + 2);
    int v25 = *((void *)v3 + 3);
    uint64_t v27 = v26 + 1;
    if (v26 >= v25 >> 1) {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1, v3);
    }
    uint64_t v28 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v27;
    v3[v26 + 32] = -30;
    *(void *)(v28 + 24) = v3;
    uint64_t v29 = *((void *)v3 + 3);
    unint64_t v30 = v26 + 2;
    if ((uint64_t)(v26 + 2) > (uint64_t)(v29 >> 1)) {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v26 + 2, 1, v3);
    }
    uint64_t v31 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v30;
    v3[v27 + 32] = 0x80;
    *(void *)(v31 + 24) = v3;
    uint64_t v32 = *((void *)v3 + 3);
    if ((uint64_t)(v26 + 3) > (uint64_t)(v32 >> 1)) {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v26 + 3, 1, v3);
    }
    uint64_t v33 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v26 + 3;
    v3[v30 + 32] = v1;
    *(void *)(v33 + 24) = v3;
  }
  return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 v19;
  int v20;
  uint64_t v21;
  char *v22;
  char v23;
  char *v24;
  int64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  int64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  int v44;
  void *v45;
  unsigned __int8 *v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  size_t v55;
  void *v56;
  size_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 v60;
  int v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t);
  char v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  int64_t v75;
  uint64_t v76;
  char *v77;
  size_t v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  void *v90;
  size_t v91;
  void *v92;
  uint64_t (*v93)(__int16);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  uint64_t v1 = v0[2];
  if (*(unsigned char *)(v1 + 33))
  {
    uint64_t v2 = *(unsigned __int8 **)(v1 + 8);
    if (v2 == *(unsigned __int8 **)(v1 + 16))
    {
      uint64_t v92 = (void *)swift_task_alloc();
      v0[3] = v92;
      *uint64_t v92 = v0;
      uint64_t v93 = specialized AsyncLineSequence.AsyncIterator.next();
      goto LABEL_103;
    }
    char v3 = *v2;
    *(void *)(v1 + 8) = v2 + 1;
    uint64_t v1 = v0[2];
  }
  else
  {
    char v3 = *(unsigned __int8 *)(v1 + 32);
  }
  *(_WORD *)(v1 + 32) = 256;
  if (v3 != 13)
  {
    if ((v3 - 10) < 3)
    {
      BOOL v10 = v0[2];
      if (*(void *)(*(void *)(v10 + 24) + 16))
      {
        swift_bridgeObjectRetain();
        char v11 = static String._fromUTF8Repairing(_:)();
        int v13 = v12;
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        char v15 = *(void *)(v10 + 24);
        goto LABEL_12;
      }
      unint64_t v35 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v24 = *(char **)(v10 + 24);
      if (v35)
      {
        unint64_t v36 = v0[2];
        int v25 = *((void *)v24 + 2);
        uint64_t v37 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v36 + 24) = v24;
        if ((v37 & 1) == 0)
        {
          uint64_t v38 = v0[2];
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 1, v24);
          *(void *)(v38 + 24) = v24;
        }
LABEL_35:
        if (v25)
        {
          uint64_t v39 = *((void *)v24 + 2);
          unint64_t v40 = v39 - v25;
          if (v39 - v25 < 0) {
            return _fatalErrorMessage(_:_:file:line:flags:)();
          }
          memmove(v24 + 32, &v24[v25 + 32], v39 - v25);
          *((void *)v24 + 2) = v40;
        }
        *(void *)(v0[2] + 24) = v24;
LABEL_83:
        return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
      }
LABEL_54:
      if (*((void *)v24 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        int8x16_t v56 = (void *)swift_allocObject();
        uint64_t v78 = _swift_stdlib_malloc_size(v56);
        v56[2] = 0;
        v56[3] = 2 * v78 - 64;
      }
      else
      {
        int8x16_t v56 = (void *)MEMORY[0x1E4FBC860];
      }
      *(void *)(v0[2] + 24) = v56;
LABEL_82:
      swift_bridgeObjectRelease();
      goto LABEL_83;
    }
    if (v3 == 226)
    {
      Swift::String v42 = v0[2];
      uint64_t v43 = *(unsigned __int8 **)(v42 + 8);
      if (v43 == *(unsigned __int8 **)(v42 + 16))
      {
        uint64_t v92 = (void *)swift_task_alloc();
        v0[10] = v92;
        *uint64_t v92 = v0;
        uint64_t v93 = specialized AsyncLineSequence.AsyncIterator.next();
        goto LABEL_103;
      }
      uint64_t v44 = *v43;
      uint64_t v19 = *v43;
      *(void *)(v42 + 8) = v43 + 1;
      uint64_t v45 = (void *)v0[2];
      if (v44 == 128)
      {
        uint64_t v46 = (unsigned __int8 *)v45[1];
        if (v46 == (unsigned __int8 *)v45[2])
        {
          uint64_t v92 = (void *)swift_task_alloc();
          v0[11] = v92;
          *uint64_t v92 = v0;
          uint64_t v93 = specialized AsyncLineSequence.AsyncIterator.next();
          goto LABEL_103;
        }
        unsigned __int16 v47 = *v46;
        uint64_t v19 = *v46;
        v45[1] = v46 + 1;
        unint64_t v21 = v0[2];
        uint64_t v22 = *(char **)(v21 + 24);
        if ((v47 & 0xFE) == 0xA8)
        {
          if (!*((void *)v22 + 2))
          {
            uint64_t v88 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v89 = *(void *)(v21 + 24);
            if (v88)
            {
              specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v89 + 16));
              goto LABEL_83;
            }
            if (*(void *)(v89 + 24) >= 2uLL)
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
              uint64_t v90 = (void *)swift_allocObject();
              uint64_t v91 = _swift_stdlib_malloc_size(v90);
              v90[2] = 0;
              v90[3] = 2 * v91 - 64;
            }
            else
            {
              uint64_t v90 = (void *)MEMORY[0x1E4FBC860];
            }
            *(void *)(v0[2] + 24) = v90;
            goto LABEL_82;
          }
          goto LABEL_46;
        }
        uint64_t v79 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v21 + 24) = v22;
        if ((v79 & 1) == 0)
        {
          long long v97 = v0[2];
          uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, v22);
          *(void *)(v97 + 24) = v22;
        }
        uint64_t v81 = *((void *)v22 + 2);
        uint64_t v80 = *((void *)v22 + 3);
        long long v82 = v81 + 1;
        if (v81 >= v80 >> 1) {
          uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v80 > 1), v81 + 1, 1, v22);
        }
        long long v83 = v0[2];
        *((void *)v22 + 2) = v82;
        v22[v81 + 32] = -30;
        *(void *)(v83 + 24) = v22;
        long long v84 = *((void *)v22 + 3);
        long long v85 = v81 + 2;
        if ((uint64_t)(v81 + 2) > (uint64_t)(v84 >> 1)) {
          uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v84 > 1), v81 + 2, 1, v22);
        }
        long long v86 = v0[2];
        *((void *)v22 + 2) = v85;
        v22[v82 + 32] = 0x80;
        *(void *)(v86 + 24) = v22;
        long long v87 = *((void *)v22 + 3);
        if ((uint64_t)(v81 + 3) > (uint64_t)(v87 >> 1)) {
          uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v87 > 1), v81 + 3, 1, v22);
        }
        uint64_t v76 = v0[2];
        *((void *)v22 + 2) = v81 + 3;
        uint64_t v77 = &v22[v85];
LABEL_79:
        v77[32] = v19;
        *(void *)(v76 + 24) = v22;
        goto LABEL_83;
      }
      uint64_t v22 = (char *)v45[3];
      char v72 = swift_isUniquelyReferenced_nonNull_native();
      long long v45[3] = v22;
      if ((v72 & 1) == 0)
      {
        long long v96 = v0[2];
        uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, v22);
        *(void *)(v96 + 24) = v22;
      }
      uint64_t v67 = *((void *)v22 + 2);
      uint64_t v73 = *((void *)v22 + 3);
      uint64_t v68 = v67 + 1;
      if (v67 >= v73 >> 1) {
        uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v73 > 1), v67 + 1, 1, v22);
      }
      uint64_t v69 = v0[2];
      *((void *)v22 + 2) = v68;
      uint64_t v70 = &v22[v67];
      int v71 = -30;
    }
    else
    {
      if (v3 != 194)
      {
        unint64_t v49 = v0[2];
        uint64_t v50 = *(char **)(v49 + 24);
        int8x16_t v51 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v49 + 24) = v50;
        if ((v51 & 1) == 0)
        {
          uint64_t v94 = v0[2];
          uint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v50 + 2) + 1, 1, v50);
          *(void *)(v94 + 24) = v50;
        }
        uint64_t v53 = *((void *)v50 + 2);
        uint64_t v52 = *((void *)v50 + 3);
        if (v53 >= v52 >> 1) {
          uint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v52 > 1), v53 + 1, 1, v50);
        }
        uint64_t v54 = v0[2];
        *((void *)v50 + 2) = v53 + 1;
        v50[v53 + 32] = v3;
        *(void *)(v54 + 24) = v50;
        goto LABEL_83;
      }
      uint64_t v17 = v0[2];
      unint64_t v18 = *(unsigned __int8 **)(v17 + 8);
      if (v18 == *(unsigned __int8 **)(v17 + 16))
      {
        uint64_t v92 = (void *)swift_task_alloc();
        v0[9] = v92;
        *uint64_t v92 = v0;
        uint64_t v93 = specialized AsyncLineSequence.AsyncIterator.next();
        goto LABEL_103;
      }
      unint64_t v20 = *v18;
      uint64_t v19 = *v18;
      *(void *)(v17 + 8) = v18 + 1;
      unint64_t v21 = v0[2];
      uint64_t v22 = *(char **)(v21 + 24);
      if (v20 == 133)
      {
        if (!*((void *)v22 + 2))
        {
          uint64_t v23 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v24 = *(char **)(v21 + 24);
          if (v23)
          {
            int v25 = *((void *)v24 + 2);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 1, v24);
            }
            goto LABEL_35;
          }
          goto LABEL_54;
        }
LABEL_46:
        swift_bridgeObjectRetain();
        char v11 = static String._fromUTF8Repairing(_:)();
        int v13 = v48;
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        char v15 = *(void *)(v21 + 24);
LABEL_12:
        if (isUniquelyReferenced_nonNull_native)
        {
          specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v15 + 16));
        }
        else
        {
          char v16 = (void *)(v0[2] + 24);
          *char v16 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v15 + 24) >> 1);
          swift_bridgeObjectRelease();
        }
LABEL_63:
        uint64_t v63 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
        return v63(v11, v13);
      }
      char v65 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v21 + 24) = v22;
      if ((v65 & 1) == 0)
      {
        uint64_t v95 = v0[2];
        uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, v22);
        *(void *)(v95 + 24) = v22;
      }
      uint64_t v67 = *((void *)v22 + 2);
      uint64_t v66 = *((void *)v22 + 3);
      uint64_t v68 = v67 + 1;
      if (v67 >= v66 >> 1) {
        uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v66 > 1), v67 + 1, 1, v22);
      }
      uint64_t v69 = v0[2];
      *((void *)v22 + 2) = v68;
      uint64_t v70 = &v22[v67];
      int v71 = -62;
    }
    v70[32] = v71;
    *(void *)(v69 + 24) = v22;
    long long v74 = *((void *)v22 + 3);
    uint64_t v75 = v67 + 2;
    if (v75 > (uint64_t)(v74 >> 1)) {
      uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v74 > 1), v75, 1, v22);
    }
    uint64_t v76 = v0[2];
    *((void *)v22 + 2) = v75;
    uint64_t v77 = &v22[v68];
    goto LABEL_79;
  }
  unint64_t v4 = v0[2];
  if (*(void *)(*(void *)(v4 + 24) + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = static String._fromUTF8Repairing(_:)();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    uint64_t v8 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *(void *)(v4 + 24);
    if (v8)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v9 + 16));
    }
    else
    {
      if (*(void *)(v9 + 24) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        uint64_t v34 = (void *)swift_allocObject();
        uint64_t v55 = _swift_stdlib_malloc_size(v34);
        void v34[2] = 0;
        void v34[3] = 2 * v55 - 64;
      }
      else
      {
        uint64_t v34 = (void *)MEMORY[0x1E4FBC860];
      }
      *(void *)(v0[2] + 24) = v34;
      swift_bridgeObjectRelease();
    }
    goto LABEL_58;
  }
  unsigned __int8 v26 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v27 = *(char **)(v4 + 24);
  if ((v26 & 1) == 0)
  {
    if (*((void *)v27 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      unint64_t v41 = (void *)swift_allocObject();
      int8x16_t v57 = _swift_stdlib_malloc_size(v41);
      v41[2] = 0;
      _OWORD v41[3] = 2 * v57 - 64;
    }
    else
    {
      unint64_t v41 = (void *)MEMORY[0x1E4FBC860];
    }
    *(void *)(v0[2] + 24) = v41;
    swift_bridgeObjectRelease();
    uint64_t v5 = 0;
    unint64_t v7 = 0;
    goto LABEL_58;
  }
  uint64_t v28 = v0[2];
  uint64_t v29 = *((void *)v27 + 2);
  unint64_t v30 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v28 + 24) = v27;
  if ((v30 & 1) == 0)
  {
    uint64_t v31 = v0[2];
    uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 1, v27);
    *(void *)(v31 + 24) = v27;
  }
  if (v29)
  {
    uint64_t v32 = *((void *)v27 + 2);
    uint64_t v33 = v32 - v29;
    if (v32 - v29 >= 0)
    {
      memmove(v27 + 32, &v27[v29 + 32], v32 - v29);
      *((void *)v27 + 2) = v33;
      goto LABEL_28;
    }
    return _fatalErrorMessage(_:_:file:line:flags:)();
  }
LABEL_28:
  uint64_t v5 = 0;
  unint64_t v7 = 0;
  *(void *)(v0[2] + 24) = v27;
LABEL_58:
  v0[5] = v5;
  v0[6] = v7;
  char v58 = v0[2];
  uint64_t v59 = *(unsigned __int8 **)(v58 + 8);
  if (v59 != *(unsigned __int8 **)(v58 + 16))
  {
    uint64_t v61 = *v59;
    uint64_t v60 = *v59;
    *(void *)(v58 + 8) = v59 + 1;
    if (v61 != 10)
    {
      uint64_t v62 = v0[2];
      *(unsigned char *)(v62 + 32) = v60;
      *(unsigned char *)(v62 + 33) = 0;
    }
    int v13 = v0[6];
    if (v13)
    {
      char v11 = v0[5];
      goto LABEL_63;
    }
    goto LABEL_83;
  }
  uint64_t v92 = (void *)swift_task_alloc();
  v0[7] = v92;
  *uint64_t v92 = v0;
  uint64_t v93 = specialized AsyncLineSequence.AsyncIterator.next();
LABEL_103:
  v92[1] = v93;
  return _AsyncBytesBuffer.reloadBufferAndNext()();
}

{
  uint64_t v0;

  *(_WORD *)(*(void *)(v0 + 16) + 32) = 256;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  __int16 v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  int v22;
  uint64_t v23;
  char *v24;
  char v25;
  char *v26;
  int64_t v27;
  char v28;
  char *v29;
  uint64_t v30;
  int64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  void *v47;
  unsigned __int8 *v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  size_t v57;
  void *v58;
  size_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned __int8 v62;
  int v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t);
  char v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  int64_t v77;
  uint64_t v78;
  char *v79;
  size_t v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t v91;
  void *v92;
  size_t v93;
  void *v94;
  uint64_t (*v95)(__int16);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  uint64_t v1 = *(_WORD *)(v0 + 96);
  *(_WORD *)(*(void *)(v0 + 16) + 32) = 256;
  if ((v1 & 0x100) != 0)
  {
    uint64_t v9 = *(void *)(v0 + 16);
    BOOL v10 = *(void *)(*(void *)(v9 + 24) + 16);
    if (!v10)
    {
      char v11 = 0;
      goto LABEL_63;
    }
    swift_bridgeObjectRetain();
    char v11 = static String._fromUTF8Repairing(_:)();
    BOOL v10 = v12;
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *(void *)(v9 + 24);
    char v15 = (void *)(*(void *)(v0 + 16) + 24);
    if (!isUniquelyReferenced_nonNull_native) {
      goto LABEL_13;
    }
    goto LABEL_8;
  }
  uint64_t v2 = *(unsigned __int8 *)(v0 + 96);
  if (v2 != 13)
  {
    if ((v2 - 10) < 3)
    {
      char v16 = *(void *)(v0 + 16);
      if (*(void *)(*(void *)(v16 + 24) + 16))
      {
        swift_bridgeObjectRetain();
        char v11 = static String._fromUTF8Repairing(_:)();
        BOOL v10 = v17;
        swift_bridgeObjectRelease();
        unint64_t v18 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v14 = *(void *)(v16 + 24);
        goto LABEL_12;
      }
      uint64_t v37 = swift_isUniquelyReferenced_nonNull_native();
      unsigned __int8 v26 = *(char **)(v16 + 24);
      if (v37)
      {
        uint64_t v38 = *(void *)(v0 + 16);
        uint64_t v27 = *((void *)v26 + 2);
        uint64_t v39 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v38 + 24) = v26;
        if ((v39 & 1) == 0)
        {
          unint64_t v40 = *(void *)(v0 + 16);
          unsigned __int8 v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 1, v26);
          *(void *)(v40 + 24) = v26;
        }
LABEL_35:
        if (v27)
        {
          unint64_t v41 = *((void *)v26 + 2);
          Swift::String v42 = v41 - v27;
          if (v41 - v27 < 0) {
            return _fatalErrorMessage(_:_:file:line:flags:)();
          }
          memmove(v26 + 32, &v26[v27 + 32], v41 - v27);
          *((void *)v26 + 2) = v42;
        }
        *(void *)(*(void *)(v0 + 16) + 24) = v26;
LABEL_83:
        return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
      }
LABEL_54:
      if (*((void *)v26 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        char v58 = (void *)swift_allocObject();
        uint64_t v80 = _swift_stdlib_malloc_size(v58);
        v58[2] = 0;
        v58[3] = 2 * v80 - 64;
      }
      else
      {
        char v58 = (void *)MEMORY[0x1E4FBC860];
      }
      *(void *)(*(void *)(v0 + 16) + 24) = v58;
LABEL_82:
      swift_bridgeObjectRelease();
      goto LABEL_83;
    }
    if (v2 == 226)
    {
      uint64_t v44 = *(void *)(v0 + 16);
      uint64_t v45 = *(unsigned __int8 **)(v44 + 8);
      if (v45 == *(unsigned __int8 **)(v44 + 16))
      {
        uint64_t v94 = (void *)swift_task_alloc();
        *(void *)(v0 + 80) = v94;
        char *v94 = v0;
        uint64_t v95 = specialized AsyncLineSequence.AsyncIterator.next();
        goto LABEL_102;
      }
      uint64_t v46 = *v45;
      unint64_t v21 = *v45;
      *(void *)(v44 + 8) = v45 + 1;
      unsigned __int16 v47 = *(void **)(v0 + 16);
      if (v46 == 128)
      {
        uint64_t v48 = (unsigned __int8 *)v47[1];
        if (v48 == (unsigned __int8 *)v47[2])
        {
          uint64_t v94 = (void *)swift_task_alloc();
          *(void *)(v0 + 88) = v94;
          char *v94 = v0;
          uint64_t v95 = specialized AsyncLineSequence.AsyncIterator.next();
          goto LABEL_102;
        }
        unint64_t v49 = *v48;
        unint64_t v21 = *v48;
        v47[1] = v48 + 1;
        uint64_t v23 = *(void *)(v0 + 16);
        uint64_t v24 = *(char **)(v23 + 24);
        if ((v49 & 0xFE) == 0xA8)
        {
          if (!*((void *)v24 + 2))
          {
            uint64_t v90 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v91 = *(void *)(v23 + 24);
            if (v90)
            {
              specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v91 + 16));
              goto LABEL_83;
            }
            if (*(void *)(v91 + 24) >= 2uLL)
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
              uint64_t v92 = (void *)swift_allocObject();
              uint64_t v93 = _swift_stdlib_malloc_size(v92);
              v92[2] = 0;
              v92[3] = 2 * v93 - 64;
            }
            else
            {
              uint64_t v92 = (void *)MEMORY[0x1E4FBC860];
            }
            *(void *)(*(void *)(v0 + 16) + 24) = v92;
            goto LABEL_82;
          }
          goto LABEL_46;
        }
        uint64_t v81 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v23 + 24) = v24;
        if ((v81 & 1) == 0)
        {
          long long v99 = *(void *)(v0 + 16);
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v24 + 2) + 1, 1, v24);
          *(void *)(v99 + 24) = v24;
        }
        long long v83 = *((void *)v24 + 2);
        long long v82 = *((void *)v24 + 3);
        long long v84 = v83 + 1;
        if (v83 >= v82 >> 1) {
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v82 > 1), v83 + 1, 1, v24);
        }
        long long v85 = *(void *)(v0 + 16);
        *((void *)v24 + 2) = v84;
        v24[v83 + 32] = -30;
        *(void *)(v85 + 24) = v24;
        long long v86 = *((void *)v24 + 3);
        long long v87 = v83 + 2;
        if ((uint64_t)(v83 + 2) > (uint64_t)(v86 >> 1)) {
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v86 > 1), v83 + 2, 1, v24);
        }
        uint64_t v88 = *(void *)(v0 + 16);
        *((void *)v24 + 2) = v87;
        v24[v84 + 32] = 0x80;
        *(void *)(v88 + 24) = v24;
        uint64_t v89 = *((void *)v24 + 3);
        if ((uint64_t)(v83 + 3) > (uint64_t)(v89 >> 1)) {
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v89 > 1), v83 + 3, 1, v24);
        }
        uint64_t v78 = *(void *)(v0 + 16);
        *((void *)v24 + 2) = v83 + 3;
        uint64_t v79 = &v24[v87];
LABEL_79:
        v79[32] = v21;
        *(void *)(v78 + 24) = v24;
        goto LABEL_83;
      }
      uint64_t v24 = (char *)v47[3];
      long long v74 = swift_isUniquelyReferenced_nonNull_native();
      v47[3] = v24;
      if ((v74 & 1) == 0)
      {
        long long v98 = *(void *)(v0 + 16);
        uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v24 + 2) + 1, 1, v24);
        *(void *)(v98 + 24) = v24;
      }
      uint64_t v69 = *((void *)v24 + 2);
      uint64_t v75 = *((void *)v24 + 3);
      uint64_t v70 = v69 + 1;
      if (v69 >= v75 >> 1) {
        uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v75 > 1), v69 + 1, 1, v24);
      }
      int v71 = *(void *)(v0 + 16);
      *((void *)v24 + 2) = v70;
      char v72 = &v24[v69];
      uint64_t v73 = -30;
    }
    else
    {
      if (v2 != 194)
      {
        int8x16_t v51 = *(void *)(v0 + 16);
        uint64_t v52 = *(char **)(v51 + 24);
        uint64_t v53 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v51 + 24) = v52;
        if ((v53 & 1) == 0)
        {
          long long v96 = *(void *)(v0 + 16);
          uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v52 + 2) + 1, 1, v52);
          *(void *)(v96 + 24) = v52;
        }
        uint64_t v55 = *((void *)v52 + 2);
        uint64_t v54 = *((void *)v52 + 3);
        if (v55 >= v54 >> 1) {
          uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v54 > 1), v55 + 1, 1, v52);
        }
        int8x16_t v56 = *(void *)(v0 + 16);
        *((void *)v52 + 2) = v55 + 1;
        v52[v55 + 32] = v2;
        *(void *)(v56 + 24) = v52;
        goto LABEL_83;
      }
      uint64_t v19 = *(void *)(v0 + 16);
      unint64_t v20 = *(unsigned __int8 **)(v19 + 8);
      if (v20 == *(unsigned __int8 **)(v19 + 16))
      {
        uint64_t v94 = (void *)swift_task_alloc();
        *(void *)(v0 + 72) = v94;
        char *v94 = v0;
        uint64_t v95 = specialized AsyncLineSequence.AsyncIterator.next();
        goto LABEL_102;
      }
      uint64_t v22 = *v20;
      unint64_t v21 = *v20;
      *(void *)(v19 + 8) = v20 + 1;
      uint64_t v23 = *(void *)(v0 + 16);
      uint64_t v24 = *(char **)(v23 + 24);
      if (v22 == 133)
      {
        if (!*((void *)v24 + 2))
        {
          int v25 = swift_isUniquelyReferenced_nonNull_native();
          unsigned __int8 v26 = *(char **)(v23 + 24);
          if (v25)
          {
            uint64_t v27 = *((void *)v26 + 2);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unsigned __int8 v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 1, v26);
            }
            goto LABEL_35;
          }
          goto LABEL_54;
        }
LABEL_46:
        swift_bridgeObjectRetain();
        char v11 = static String._fromUTF8Repairing(_:)();
        BOOL v10 = v50;
        swift_bridgeObjectRelease();
        unint64_t v18 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v14 = *(void *)(v23 + 24);
LABEL_12:
        char v15 = (void *)(*(void *)(v0 + 16) + 24);
        if ((v18 & 1) == 0)
        {
LABEL_13:
          *char v15 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v14 + 24) >> 1);
          swift_bridgeObjectRelease();
          goto LABEL_63;
        }
LABEL_8:
        specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v14 + 16));
LABEL_63:
        char v65 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
        return v65(v11, v10);
      }
      uint64_t v67 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v23 + 24) = v24;
      if ((v67 & 1) == 0)
      {
        long long v97 = *(void *)(v0 + 16);
        uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v24 + 2) + 1, 1, v24);
        *(void *)(v97 + 24) = v24;
      }
      uint64_t v69 = *((void *)v24 + 2);
      uint64_t v68 = *((void *)v24 + 3);
      uint64_t v70 = v69 + 1;
      if (v69 >= v68 >> 1) {
        uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v68 > 1), v69 + 1, 1, v24);
      }
      int v71 = *(void *)(v0 + 16);
      *((void *)v24 + 2) = v70;
      char v72 = &v24[v69];
      uint64_t v73 = -62;
    }
    v72[32] = v73;
    *(void *)(v71 + 24) = v24;
    uint64_t v76 = *((void *)v24 + 3);
    uint64_t v77 = v69 + 2;
    if (v77 > (uint64_t)(v76 >> 1)) {
      uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v76 > 1), v77, 1, v24);
    }
    uint64_t v78 = *(void *)(v0 + 16);
    *((void *)v24 + 2) = v77;
    uint64_t v79 = &v24[v70];
    goto LABEL_79;
  }
  char v3 = *(void *)(v0 + 16);
  if (*(void *)(*(void *)(v3 + 24) + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v4 = static String._fromUTF8Repairing(_:)();
    uint64_t v6 = v5;
    swift_bridgeObjectRelease();
    unint64_t v7 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *(void *)(v3 + 24);
    if (v7)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v8 + 16));
    }
    else
    {
      if (*(void *)(v8 + 24) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        unint64_t v36 = (void *)swift_allocObject();
        int8x16_t v57 = _swift_stdlib_malloc_size(v36);
        v36[2] = 0;
        v36[3] = 2 * v57 - 64;
      }
      else
      {
        unint64_t v36 = (void *)MEMORY[0x1E4FBC860];
      }
      *(void *)(*(void *)(v0 + 16) + 24) = v36;
      swift_bridgeObjectRelease();
    }
    goto LABEL_58;
  }
  uint64_t v28 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v29 = *(char **)(v3 + 24);
  if ((v28 & 1) == 0)
  {
    if (*((void *)v29 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      uint64_t v43 = (void *)swift_allocObject();
      uint64_t v59 = _swift_stdlib_malloc_size(v43);
      v43[2] = 0;
      long long v43[3] = 2 * v59 - 64;
    }
    else
    {
      uint64_t v43 = (void *)MEMORY[0x1E4FBC860];
    }
    *(void *)(*(void *)(v0 + 16) + 24) = v43;
    swift_bridgeObjectRelease();
    unint64_t v4 = 0;
    uint64_t v6 = 0;
    goto LABEL_58;
  }
  unint64_t v30 = *(void *)(v0 + 16);
  uint64_t v31 = *((void *)v29 + 2);
  uint64_t v32 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v30 + 24) = v29;
  if ((v32 & 1) == 0)
  {
    uint64_t v33 = *(void *)(v0 + 16);
    uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31, 1, v29);
    *(void *)(v33 + 24) = v29;
  }
  if (v31)
  {
    uint64_t v34 = *((void *)v29 + 2);
    unint64_t v35 = v34 - v31;
    if (v34 - v31 >= 0)
    {
      memmove(v29 + 32, &v29[v31 + 32], v34 - v31);
      *((void *)v29 + 2) = v35;
      goto LABEL_29;
    }
    return _fatalErrorMessage(_:_:file:line:flags:)();
  }
LABEL_29:
  unint64_t v4 = 0;
  uint64_t v6 = 0;
  *(void *)(*(void *)(v0 + 16) + 24) = v29;
LABEL_58:
  *(void *)(v0 + 40) = v4;
  *(void *)(v0 + 48) = v6;
  uint64_t v60 = *(void *)(v0 + 16);
  uint64_t v61 = *(unsigned __int8 **)(v60 + 8);
  if (v61 != *(unsigned __int8 **)(v60 + 16))
  {
    uint64_t v63 = *v61;
    uint64_t v62 = *v61;
    *(void *)(v60 + 8) = v61 + 1;
    if (v63 != 10)
    {
      uint64_t v64 = *(void *)(v0 + 16);
      *(unsigned char *)(v64 + 32) = v62;
      *(unsigned char *)(v64 + 33) = 0;
    }
    BOOL v10 = *(void *)(v0 + 48);
    if (v10)
    {
      char v11 = *(void *)(v0 + 40);
      goto LABEL_63;
    }
    goto LABEL_83;
  }
  uint64_t v94 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v94;
  char *v94 = v0;
  uint64_t v95 = specialized AsyncLineSequence.AsyncIterator.next();
LABEL_102:
  v94[1] = v95;
  return _AsyncBytesBuffer.reloadBufferAndNext()();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;

  uint64_t v1 = *(_WORD *)(v0 + 98);
  if ((v1 & 0x100) != 0)
  {
    char v3 = *(void *)(v0 + 48);
  }
  else
  {
    if (v1 != 10)
    {
      uint64_t v2 = *(void *)(v0 + 16);
      *(unsigned char *)(v2 + 32) = v1;
      *(unsigned char *)(v2 + 33) = 0;
    }
    char v3 = *(void *)(v0 + 48);
    if (!v3) {
      return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
    }
  }
  return (*(uint64_t (**)(void, uint64_t))(v0 + 8))(*(void *)(v0 + 40), v3);
}

{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  char v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  char v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  uint64_t v1 = *(_WORD *)(v0 + 100);
  if ((v1 & 0x100) != 0)
  {
    BOOL v10 = *(void *)(v0 + 16);
    char v11 = *(char **)(v10 + 24);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v10 + 24) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v34 = *(void *)(v0 + 16);
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
      *(void *)(v34 + 24) = v11;
    }
    uint64_t v14 = *((void *)v11 + 2);
    int v13 = *((void *)v11 + 3);
    if (v14 >= v13 >> 1) {
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v11);
    }
    char v15 = *(void *)(v0 + 16);
    *((void *)v11 + 2) = v14 + 1;
    v11[v14 + 32] = -62;
    *(void *)(v15 + 24) = v11;
    swift_bridgeObjectRetain();
    unint64_t v4 = static String._fromUTF8Repairing(_:)();
    uint64_t v6 = v16;
    swift_bridgeObjectRelease();
    uint64_t v17 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *(void *)(v15 + 24);
    uint64_t v9 = (void *)(*(void *)(v0 + 16) + 24);
    if (!v17) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(char **)(v2 + 24);
  if (v1 == 133)
  {
    if (*((void *)v3 + 2))
    {
      swift_bridgeObjectRetain();
      unint64_t v4 = static String._fromUTF8Repairing(_:)();
      uint64_t v6 = v5;
      swift_bridgeObjectRelease();
      unint64_t v7 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v8 = *(void *)(v2 + 24);
      uint64_t v9 = (void *)(*(void *)(v0 + 16) + 24);
      if ((v7 & 1) == 0)
      {
LABEL_5:
        *uint64_t v9 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v8 + 24) >> 1);
        swift_bridgeObjectRelease();
LABEL_12:
        unint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
        return v18(v4, v6);
      }
LABEL_11:
      specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v8 + 16));
      goto LABEL_12;
    }
    uint64_t v28 = swift_isUniquelyReferenced_nonNull_native();
    char v3 = *(char **)(v2 + 24);
    if ((v28 & 1) == 0)
    {
      if (*((void *)v3 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        uint64_t v32 = (void *)swift_allocObject();
        uint64_t v33 = _swift_stdlib_malloc_size(v32);
        v32[2] = 0;
        v32[3] = 2 * v33 - 64;
      }
      else
      {
        uint64_t v32 = (void *)MEMORY[0x1E4FBC860];
      }
      *(void *)(*(void *)(v0 + 16) + 24) = v32;
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }
    uint64_t v29 = *((void *)v3 + 2);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 1, v3);
    }
    if (v29)
    {
      unint64_t v30 = *((void *)v3 + 2);
      uint64_t v31 = v30 - v29;
      if (v30 - v29 < 0) {
        return _fatalErrorMessage(_:_:file:line:flags:)();
      }
      memmove(v3 + 32, &v3[v29 + 32], v30 - v29);
      *((void *)v3 + 2) = v31;
    }
    uint64_t v27 = *(void *)(v0 + 16);
  }
  else
  {
    unint64_t v20 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v2 + 24) = v3;
    if ((v20 & 1) == 0)
    {
      unint64_t v35 = *(void *)(v0 + 16);
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, v3);
      *(void *)(v35 + 24) = v3;
    }
    uint64_t v22 = *((void *)v3 + 2);
    unint64_t v21 = *((void *)v3 + 3);
    uint64_t v23 = v22 + 1;
    if (v22 >= v21 >> 1) {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v3);
    }
    uint64_t v24 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v23;
    v3[v22 + 32] = -62;
    *(void *)(v24 + 24) = v3;
    int v25 = *((void *)v3 + 3);
    unsigned __int8 v26 = v22 + 2;
    if (v26 > (uint64_t)(v25 >> 1)) {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26, 1, v3);
    }
    uint64_t v27 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v26;
    v3[v23 + 32] = v1;
  }
  *(void *)(v27 + 24) = v3;
LABEL_23:
  return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
}

{
  uint64_t v0;
  __int16 v1;
  void *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  char v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  void *v44;
  size_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;

  uint64_t v1 = *(_WORD *)(v0 + 102);
  if ((v1 & 0x100) != 0)
  {
    int v13 = *(void *)(v0 + 16);
    uint64_t v14 = *(char **)(v13 + 24);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v13 + 24) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v46 = *(void *)(v0 + 16);
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v14 + 2) + 1, 1, v14);
      *(void *)(v46 + 24) = v14;
    }
    uint64_t v17 = *((void *)v14 + 2);
    char v16 = *((void *)v14 + 3);
    if (v17 >= v16 >> 1) {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v14);
    }
    unint64_t v18 = *(void *)(v0 + 16);
    *((void *)v14 + 2) = v17 + 1;
    v14[v17 + 32] = -30;
    *(void *)(v18 + 24) = v14;
    swift_bridgeObjectRetain();
    unint64_t v7 = static String._fromUTF8Repairing(_:)();
    uint64_t v9 = v19;
    swift_bridgeObjectRelease();
    unint64_t v20 = swift_isUniquelyReferenced_nonNull_native();
    char v11 = *(void *)(v18 + 24);
    uint64_t v12 = (void *)(*(void *)(v0 + 16) + 24);
    if (!v20) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
  uint64_t v2 = *(void **)(v0 + 16);
  if (v1 != 128)
  {
    uint64_t v6 = (char *)v2[3];
    uint64_t v23 = swift_isUniquelyReferenced_nonNull_native();
    v2[3] = v6;
    if ((v23 & 1) == 0)
    {
      uint64_t v48 = *(void *)(v0 + 16);
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v6 + 2) + 1, 1, v6);
      *(void *)(v48 + 24) = v6;
    }
    int v25 = *((void *)v6 + 2);
    uint64_t v24 = *((void *)v6 + 3);
    unsigned __int8 v26 = v25 + 1;
    if (v25 >= v24 >> 1) {
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1, v6);
    }
    uint64_t v27 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v26;
    v6[v25 + 32] = -30;
    *(void *)(v27 + 24) = v6;
    uint64_t v28 = *((void *)v6 + 3);
    uint64_t v29 = v25 + 2;
    if (v29 > (uint64_t)(v28 >> 1)) {
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29, 1, v6);
    }
    unint64_t v30 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v29;
    uint64_t v31 = &v6[v26];
    goto LABEL_33;
  }
  char v3 = (char *)v2[1];
  if (v3 != (char *)v2[2])
  {
    unint64_t v4 = *v3;
    LOBYTE(v1) = *v3;
    v2[1] = v3 + 1;
    uint64_t v5 = *(void *)(v0 + 16);
    uint64_t v6 = *(char **)(v5 + 24);
    if ((v4 & 0xFE) == 0xA8)
    {
      if (*((void *)v6 + 2))
      {
        swift_bridgeObjectRetain();
        unint64_t v7 = static String._fromUTF8Repairing(_:)();
        uint64_t v9 = v8;
        swift_bridgeObjectRelease();
        BOOL v10 = swift_isUniquelyReferenced_nonNull_native();
        char v11 = *(void *)(v5 + 24);
        uint64_t v12 = (void *)(*(void *)(v0 + 16) + 24);
        if ((v10 & 1) == 0)
        {
LABEL_7:
          *uint64_t v12 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v11 + 24) >> 1);
          swift_bridgeObjectRelease();
LABEL_14:
          unint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
          return v21(v7, v9);
        }
LABEL_13:
        specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v11 + 16));
        goto LABEL_14;
      }
      Swift::String v42 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v43 = *(void *)(v5 + 24);
      if (v42)
      {
        specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v43 + 16));
      }
      else
      {
        if (*(void *)(v43 + 24) >= 2uLL)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
          uint64_t v44 = (void *)swift_allocObject();
          uint64_t v45 = _swift_stdlib_malloc_size(v44);
          v44[2] = 0;
          v44[3] = 2 * v45 - 64;
        }
        else
        {
          uint64_t v44 = (void *)MEMORY[0x1E4FBC860];
        }
        *(void *)(*(void *)(v0 + 16) + 24) = v44;
        swift_bridgeObjectRelease();
      }
      goto LABEL_34;
    }
    uint64_t v32 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v5 + 24) = v6;
    if ((v32 & 1) == 0)
    {
      unint64_t v49 = *(void *)(v0 + 16);
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v6 + 2) + 1, 1, v6);
      *(void *)(v49 + 24) = v6;
    }
    uint64_t v33 = *((void *)v6 + 2);
    uint64_t v34 = *((void *)v6 + 3);
    unint64_t v35 = v33 + 1;
    if (v33 >= v34 >> 1)
    {
      uint64_t v50 = v6;
      int8x16_t v51 = *((void *)v6 + 2);
      uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v33 + 1, 1, v50);
      uint64_t v33 = v51;
      uint64_t v6 = v52;
    }
    unint64_t v36 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v35;
    v6[v33 + 32] = -30;
    *(void *)(v36 + 24) = v6;
    uint64_t v37 = *((void *)v6 + 3);
    uint64_t v38 = v33 + 2;
    if ((uint64_t)(v33 + 2) > (uint64_t)(v37 >> 1))
    {
      uint64_t v53 = v6;
      uint64_t v54 = v33;
      uint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v37 > 1), v33 + 2, 1, v53);
      uint64_t v33 = v54;
      uint64_t v6 = v55;
    }
    uint64_t v39 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v38;
    v6[v35 + 32] = 0x80;
    *(void *)(v39 + 24) = v6;
    unint64_t v40 = *((void *)v6 + 3);
    unint64_t v41 = v33 + 3;
    if ((uint64_t)(v33 + 3) > (uint64_t)(v40 >> 1)) {
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v33 + 3, 1, v6);
    }
    unint64_t v30 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v41;
    uint64_t v31 = &v6[v38];
LABEL_33:
    v31[32] = v1;
    *(void *)(v30 + 24) = v6;
LABEL_34:
    return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
  }
  unsigned __int16 v47 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v47;
  _OWORD *v47 = v0;
  v47[1] = specialized AsyncLineSequence.AsyncIterator.next();
  return _AsyncBytesBuffer.reloadBufferAndNext()();
}

{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  void *v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  uint64_t v1 = *(_WORD *)(v0 + 104);
  if ((v1 & 0x100) != 0)
  {
    BOOL v10 = *(void *)(v0 + 16);
    char v11 = *(char **)(v10 + 24);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v10 + 24) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v38 = *(void *)(v0 + 16);
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
      *(void *)(v38 + 24) = v11;
    }
    uint64_t v14 = *((void *)v11 + 2);
    int v13 = *((void *)v11 + 3);
    char v15 = v14 + 1;
    if (v14 >= v13 >> 1) {
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v11);
    }
    char v16 = *(void *)(v0 + 16);
    *((void *)v11 + 2) = v15;
    v11[v14 + 32] = -30;
    *(void *)(v16 + 24) = v11;
    uint64_t v17 = *((void *)v11 + 3);
    unint64_t v18 = v14 + 2;
    if (v18 > (uint64_t)(v17 >> 1)) {
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18, 1, v11);
    }
    uint64_t v19 = *(void *)(v0 + 16);
    *((void *)v11 + 2) = v18;
    v11[v15 + 32] = 0x80;
    *(void *)(v19 + 24) = v11;
    swift_bridgeObjectRetain();
    unint64_t v4 = static String._fromUTF8Repairing(_:)();
    uint64_t v6 = v20;
    swift_bridgeObjectRelease();
    unint64_t v21 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *(void *)(v19 + 24);
    uint64_t v9 = (void *)(*(void *)(v0 + 16) + 24);
    if (!v21) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(char **)(v2 + 24);
  if ((v1 & 0xFE) == 0xA8)
  {
    if (*((void *)v3 + 2))
    {
      swift_bridgeObjectRetain();
      unint64_t v4 = static String._fromUTF8Repairing(_:)();
      uint64_t v6 = v5;
      swift_bridgeObjectRelease();
      unint64_t v7 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v8 = *(void *)(v2 + 24);
      uint64_t v9 = (void *)(*(void *)(v0 + 16) + 24);
      if ((v7 & 1) == 0)
      {
LABEL_5:
        *uint64_t v9 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v8 + 24) >> 1);
        swift_bridgeObjectRelease();
LABEL_14:
        uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
        return v22(v4, v6);
      }
LABEL_13:
      specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v8 + 16));
      goto LABEL_14;
    }
    uint64_t v34 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v35 = *(void *)(v2 + 24);
    if (v34)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v35 + 16));
    }
    else
    {
      if (*(void *)(v35 + 24) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        unint64_t v36 = (void *)swift_allocObject();
        uint64_t v37 = _swift_stdlib_malloc_size(v36);
        v36[2] = 0;
        v36[3] = 2 * v37 - 64;
      }
      else
      {
        unint64_t v36 = (void *)MEMORY[0x1E4FBC860];
      }
      *(void *)(*(void *)(v0 + 16) + 24) = v36;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v24 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v2 + 24) = v3;
    if ((v24 & 1) == 0)
    {
      uint64_t v39 = *(void *)(v0 + 16);
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, v3);
      *(void *)(v39 + 24) = v3;
    }
    unsigned __int8 v26 = *((void *)v3 + 2);
    int v25 = *((void *)v3 + 3);
    uint64_t v27 = v26 + 1;
    if (v26 >= v25 >> 1) {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1, v3);
    }
    uint64_t v28 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v27;
    v3[v26 + 32] = -30;
    *(void *)(v28 + 24) = v3;
    uint64_t v29 = *((void *)v3 + 3);
    unint64_t v30 = v26 + 2;
    if ((uint64_t)(v26 + 2) > (uint64_t)(v29 >> 1)) {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v26 + 2, 1, v3);
    }
    uint64_t v31 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v30;
    v3[v27 + 32] = 0x80;
    *(void *)(v31 + 24) = v3;
    uint64_t v32 = *((void *)v3 + 3);
    if ((uint64_t)(v26 + 3) > (uint64_t)(v32 >> 1)) {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v26 + 3, 1, v3);
    }
    uint64_t v33 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v26 + 3;
    v3[v30 + 32] = v1;
    *(void *)(v33 + 24) = v3;
  }
  return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
}

uint64_t specialized AsyncLineSequence.AsyncIterator.next()(__int16 a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 32) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = specialized AsyncLineSequence.AsyncIterator.next();
  }
  else
  {
    *(_WORD *)(v4 + 96) = a1;
    uint64_t v5 = specialized AsyncLineSequence.AsyncIterator.next();
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v4 = *v2;
  *(void *)(*v2 + 64) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = specialized AsyncLineSequence.AsyncIterator.next();
  }
  else
  {
    *(_WORD *)(v4 + 98) = a1;
    uint64_t v5 = specialized AsyncLineSequence.AsyncIterator.next();
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(_WORD *)(v4 + 100) = a1;
    return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
  }
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(_WORD *)(v4 + 102) = a1;
    return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
  }
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(_WORD *)(v4 + 104) = a1;
    return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
  }
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v4 = *v2;
  *(void *)(*v2 + 32) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = specialized AsyncLineSequence.AsyncIterator.next();
  }
  else
  {
    *(_WORD *)(v4 + 96) = a1;
    uint64_t v5 = specialized AsyncLineSequence.AsyncIterator.next();
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v4 = *v2;
  *(void *)(*v2 + 64) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = specialized AsyncLineSequence.AsyncIterator.next();
  }
  else
  {
    *(_WORD *)(v4 + 98) = a1;
    uint64_t v5 = specialized AsyncLineSequence.AsyncIterator.next();
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(_WORD *)(v4 + 100) = a1;
    return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
  }
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(_WORD *)(v4 + 102) = a1;
    return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
  }
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(_WORD *)(v4 + 104) = a1;
    return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
  }
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v4 = *v2;
  *(void *)(*v2 + 32) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = specialized AsyncLineSequence.AsyncIterator.next();
  }
  else
  {
    *(_WORD *)(v4 + 96) = a1;
    uint64_t v5 = specialized AsyncLineSequence.AsyncIterator.next();
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v4 = *v2;
  *(void *)(*v2 + 64) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = specialized AsyncLineSequence.AsyncIterator.next();
  }
  else
  {
    *(_WORD *)(v4 + 98) = a1;
    uint64_t v5 = specialized AsyncLineSequence.AsyncIterator.next();
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(_WORD *)(v4 + 100) = a1;
    return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
  }
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(_WORD *)(v4 + 102) = a1;
    return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
  }
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(_WORD *)(v4 + 104) = a1;
    return MEMORY[0x1F4188298](specialized AsyncLineSequence.AsyncIterator.next(), 0, 0);
  }
}

uint64_t AsyncLineSequence.AsyncIterator.next()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  char v3 = *(ValueMetadata **)(a1 + 16);
  *(void *)(v2 + 32) = v3;
  if (v3 == &type metadata for URL.AsyncBytes)
  {
    uint64_t v7 = (uint64_t (__cdecl *)())&async function pointer to specialized AsyncLineSequence.AsyncIterator.next()[*(int *)async function pointer to specialized AsyncLineSequence.AsyncIterator.next()];
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v2 + 168) = v4;
    void *v4 = v2;
    uint64_t v5 = AsyncLineSequence.AsyncIterator.next();
  }
  else if (v3 == &type metadata for NSFileHandle.AsyncBytes)
  {
    uint64_t v7 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized AsyncLineSequence.AsyncIterator.next()
                               + async function pointer to specialized AsyncLineSequence.AsyncIterator.next());
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v2 + 160) = v4;
    void *v4 = v2;
    uint64_t v5 = AsyncLineSequence.AsyncIterator.next();
  }
  else
  {
    if (v3 != &type metadata for NSURLSession.AsyncBytes)
    {
      *(_DWORD *)(v2 + 176) = *(_DWORD *)(a1 + 40);
      return MEMORY[0x1F4188298](AsyncLineSequence.AsyncIterator.next(), 0, 0);
    }
    uint64_t v7 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized AsyncLineSequence.AsyncIterator.next()
                               + async function pointer to specialized AsyncLineSequence.AsyncIterator.next());
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v2 + 152) = v4;
    void *v4 = v2;
    uint64_t v5 = AsyncLineSequence.AsyncIterator.next();
  }
  v4[1] = v5;
  return v7();
}

uint64_t AsyncLineSequence.AsyncIterator.next()()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0 + 24) + *(int *)(v0 + 176));
  if (v1[1])
  {
    uint64_t v2 = v0 + 180;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 40) = v5;
    *uint64_t v5 = v0;
    uint64_t v6 = AsyncLineSequence.AsyncIterator.next();
LABEL_49:
    v5[1] = v6;
    return MEMORY[0x1F4187C78](v2, AssociatedTypeWitness, AssociatedConformanceWitness);
  }
  int v7 = *v1;
  *(_WORD *)uint64_t v1 = 256;
  if (v7 == 13)
  {
    uint64_t v8 = (char **)(*(void *)(v0 + 24) + *(int *)(*(void *)(v0 + 16) + 36));
    if (*((void *)*v8 + 2))
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = static String._fromUTF8Repairing(_:)();
      uint64_t v11 = v10;
      swift_bridgeObjectRelease();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      int v13 = *v8;
      if (isUniquelyReferenced_nonNull_native)
      {
        specialized Array.replaceSubrange<A>(_:with:)(0, *((void *)v13 + 2));
      }
      else
      {
        if (*((void *)v13 + 3) >= 2uLL)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
          unsigned __int8 v26 = (void *)swift_allocObject();
          size_t v42 = _swift_stdlib_malloc_size(v26);
          v26[2] = 0;
          v26[3] = 2 * v42 - 64;
        }
        else
        {
          unsigned __int8 v26 = (void *)MEMORY[0x1E4FBC860];
        }
        *uint64_t v8 = (char *)v26;
        swift_bridgeObjectRelease();
      }
      goto LABEL_48;
    }
    char v20 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v21 = *v8;
    if ((v20 & 1) == 0)
    {
      if (*((void *)v21 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        uint64_t v33 = (void *)swift_allocObject();
        size_t v44 = _swift_stdlib_malloc_size(v33);
        v33[2] = 0;
        v33[3] = 2 * v44 - 64;
      }
      else
      {
        uint64_t v33 = (void *)MEMORY[0x1E4FBC860];
      }
      *uint64_t v8 = (char *)v33;
      swift_bridgeObjectRelease();
      uint64_t v9 = 0;
      uint64_t v11 = 0;
      goto LABEL_48;
    }
    int64_t v22 = *((void *)v21 + 2);
    char v23 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v8 = v21;
    if ((v23 & 1) == 0)
    {
      unint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 1, v21);
      *uint64_t v8 = v21;
    }
    if (!v22)
    {
LABEL_20:
      uint64_t v9 = 0;
      uint64_t v11 = 0;
      *uint64_t v8 = v21;
LABEL_48:
      uint64_t v2 = v0 + 188;
      *(void *)(v0 + 56) = v9;
      *(void *)(v0 + 64) = v11;
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v5 = (void *)swift_task_alloc();
      *(void *)(v0 + 72) = v5;
      *uint64_t v5 = v0;
      uint64_t v6 = AsyncLineSequence.AsyncIterator.next();
      goto LABEL_49;
    }
    uint64_t v24 = *((void *)v21 + 2);
    uint64_t v25 = v24 - v22;
    if (v24 - v22 >= 0)
    {
      memmove(v21 + 32, &v21[v22 + 32], v24 - v22);
      *((void *)v21 + 2) = v25;
      goto LABEL_20;
    }
    return _fatalErrorMessage(_:_:file:line:flags:)();
  }
  if ((v7 - 10) > 2)
  {
    if (v7 == 226)
    {
      uint64_t v2 = v0 + 182;
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      *(void *)(v0 + 104) = AssociatedTypeWitness;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      *(void *)(v0 + 112) = AssociatedConformanceWitness;
      uint64_t v5 = (void *)swift_task_alloc();
      *(void *)(v0 + 120) = v5;
      *uint64_t v5 = v0;
      uint64_t v6 = AsyncLineSequence.AsyncIterator.next();
      goto LABEL_49;
    }
    if (v7 == 194)
    {
      uint64_t v2 = v0 + 186;
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v5 = (void *)swift_task_alloc();
      *(void *)(v0 + 88) = v5;
      *uint64_t v5 = v0;
      uint64_t v6 = AsyncLineSequence.AsyncIterator.next();
      goto LABEL_49;
    }
    uint64_t v34 = *(void *)(v0 + 24);
    uint64_t v35 = *(int *)(*(void *)(v0 + 16) + 36);
    unint64_t v36 = *(char **)(v34 + v35);
    char v37 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v34 + v35) = v36;
    if ((v37 & 1) == 0)
    {
      unint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v36 + 2) + 1, 1, v36);
      *(void *)(v34 + v35) = v36;
    }
    unint64_t v39 = *((void *)v36 + 2);
    unint64_t v38 = *((void *)v36 + 3);
    if (v39 >= v38 >> 1) {
      unint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v39 + 1, 1, v36);
    }
    *((void *)v36 + 2) = v39 + 1;
    v36[v39 + 32] = v7;
    *(void *)(v34 + v35) = v36;
  }
  else
  {
    uint64_t v14 = (char **)(*(void *)(v0 + 24) + *(int *)(*(void *)(v0 + 16) + 36));
    if (*((void *)*v14 + 2))
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = static String._fromUTF8Repairing(_:)();
      uint64_t v17 = v16;
      swift_bridgeObjectRelease();
      char v18 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v19 = *v14;
      if (v18)
      {
        specialized Array.replaceSubrange<A>(_:with:)(0, *((void *)v19 + 2));
      }
      else
      {
        *uint64_t v14 = (char *)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *((void *)v19 + 3) >> 1);
        swift_bridgeObjectRelease();
      }
      unint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
      return v40(v15, v17);
    }
    char v27 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = *v14;
    if (v27)
    {
      int64_t v29 = *((void *)v28 + 2);
      char v30 = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v14 = v28;
      if ((v30 & 1) == 0)
      {
        uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 1, v28);
        *uint64_t v14 = v28;
      }
      if (v29)
      {
        uint64_t v31 = *((void *)v28 + 2);
        uint64_t v32 = v31 - v29;
        if (v31 - v29 < 0) {
          return _fatalErrorMessage(_:_:file:line:flags:)();
        }
        memmove(v28 + 32, &v28[v29 + 32], v31 - v29);
        *((void *)v28 + 2) = v32;
      }
      *uint64_t v14 = v28;
    }
    else
    {
      if (*((void *)v28 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        uint64_t v43 = (void *)swift_allocObject();
        size_t v45 = _swift_stdlib_malloc_size(v43);
        v43[2] = 0;
        long long v43[3] = 2 * v45 - 64;
      }
      else
      {
        uint64_t v43 = (void *)MEMORY[0x1E4FBC860];
      }
      *uint64_t v14 = (char *)v43;
      swift_bridgeObjectRelease();
    }
  }
  return MEMORY[0x1F4188298](AsyncLineSequence.AsyncIterator.next(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AsyncLineSequence.AsyncIterator.next();
  }
  else {
    uint64_t v2 = AsyncLineSequence.AsyncIterator.next();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  int v1;
  char v2;
  char **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_native;
  char *v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  void *v22;
  uint64_t (*v23)();
  char v24;
  char *v25;
  int64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char v31;
  char *v32;
  int64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  size_t v44;
  void *v45;
  size_t v46;
  size_t v47;
  uint64_t v48;

  uint64_t v1 = *(unsigned __int8 *)(v0 + 180);
  uint64_t v2 = *(unsigned char *)(v0 + 181);
  *(_WORD *)(*(void *)(v0 + 24) + *(int *)(v0 + 176)) = 256;
  if (v2)
  {
    char v3 = (char **)(*(void *)(v0 + 24) + *(int *)(*(void *)(v0 + 16) + 36));
    uint64_t v4 = *((void *)*v3 + 2);
    if (!v4)
    {
      uint64_t v6 = 0;
      goto LABEL_14;
    }
    swift_bridgeObjectRetain();
    uint64_t v4 = static String._fromUTF8Repairing(_:)();
    uint64_t v6 = v5;
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_12;
  }
  if (v1 == 13)
  {
    uint64_t v9 = (char **)(*(void *)(v0 + 24) + *(int *)(*(void *)(v0 + 16) + 36));
    if (*((void *)*v9 + 2))
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = static String._fromUTF8Repairing(_:)();
      uint64_t v12 = v11;
      swift_bridgeObjectRelease();
      int v13 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v14 = *v9;
      if (v13)
      {
        specialized Array.replaceSubrange<A>(_:with:)(0, *((void *)v14 + 2));
      }
      else
      {
        if (*((void *)v14 + 3) >= 2uLL)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
          char v30 = (void *)swift_allocObject();
          size_t v44 = _swift_stdlib_malloc_size(v30);
          v30[2] = 0;
          v30[3] = 2 * v44 - 64;
        }
        else
        {
          char v30 = (void *)MEMORY[0x1E4FBC860];
        }
        *uint64_t v9 = (char *)v30;
        swift_bridgeObjectRelease();
      }
      goto LABEL_50;
    }
    uint64_t v24 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = *v9;
    if ((v24 & 1) == 0)
    {
      if (*((void *)v25 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        char v37 = (void *)swift_allocObject();
        uint64_t v46 = _swift_stdlib_malloc_size(v37);
        v37[2] = 0;
        v37[3] = 2 * v46 - 64;
      }
      else
      {
        char v37 = (void *)MEMORY[0x1E4FBC860];
      }
      *uint64_t v9 = (char *)v37;
      swift_bridgeObjectRelease();
      uint64_t v10 = 0;
      uint64_t v12 = 0;
      goto LABEL_50;
    }
    unsigned __int8 v26 = *((void *)v25 + 2);
    char v27 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v9 = v25;
    if ((v27 & 1) == 0)
    {
      uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 1, v25);
      *uint64_t v9 = v25;
    }
    if (!v26)
    {
LABEL_26:
      uint64_t v10 = 0;
      uint64_t v12 = 0;
      *uint64_t v9 = v25;
LABEL_50:
      uint64_t v19 = v0 + 188;
      *(void *)(v0 + 56) = v10;
      *(void *)(v0 + 64) = v12;
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      int64_t v22 = (void *)swift_task_alloc();
      *(void *)(v0 + 72) = v22;
      *int64_t v22 = v0;
      char v23 = AsyncLineSequence.AsyncIterator.next();
      goto LABEL_51;
    }
    uint64_t v28 = *((void *)v25 + 2);
    int64_t v29 = v28 - v26;
    if (v28 - v26 >= 0)
    {
      memmove(v25 + 32, &v25[v26 + 32], v28 - v26);
      *((void *)v25 + 2) = v29;
      goto LABEL_26;
    }
    return _fatalErrorMessage(_:_:file:line:flags:)();
  }
  if ((v1 - 10) > 2)
  {
    if (v1 == 226)
    {
      uint64_t v19 = v0 + 182;
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      *(void *)(v0 + 104) = AssociatedTypeWitness;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      *(void *)(v0 + 112) = AssociatedConformanceWitness;
      int64_t v22 = (void *)swift_task_alloc();
      *(void *)(v0 + 120) = v22;
      *int64_t v22 = v0;
      char v23 = AsyncLineSequence.AsyncIterator.next();
    }
    else
    {
      if (v1 != 194)
      {
        unint64_t v38 = *(void *)(v0 + 24);
        unint64_t v39 = *(int *)(*(void *)(v0 + 16) + 36);
        unint64_t v40 = *(char **)(v38 + v39);
        unint64_t v41 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v38 + v39) = v40;
        if ((v41 & 1) == 0)
        {
          unint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v40 + 2) + 1, 1, v40);
          *(void *)(v38 + v39) = v40;
        }
        uint64_t v43 = *((void *)v40 + 2);
        size_t v42 = *((void *)v40 + 3);
        if (v43 >= v42 >> 1) {
          unint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v42 > 1), v43 + 1, 1, v40);
        }
        *((void *)v40 + 2) = v43 + 1;
        v40[v43 + 32] = v1;
        *(void *)(v38 + v39) = v40;
        goto LABEL_56;
      }
      uint64_t v19 = v0 + 186;
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      int64_t v22 = (void *)swift_task_alloc();
      *(void *)(v0 + 88) = v22;
      *int64_t v22 = v0;
      char v23 = AsyncLineSequence.AsyncIterator.next();
    }
LABEL_51:
    v22[1] = v23;
    return MEMORY[0x1F4187C78](v19, AssociatedTypeWitness, AssociatedConformanceWitness);
  }
  char v3 = (char **)(*(void *)(v0 + 24) + *(int *)(*(void *)(v0 + 16) + 36));
  if (*((void *)*v3 + 2))
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = static String._fromUTF8Repairing(_:)();
    uint64_t v6 = v15;
    swift_bridgeObjectRelease();
    uint64_t v16 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    if (v16)
    {
LABEL_4:
      specialized Array.replaceSubrange<A>(_:with:)(0, *((void *)v8 + 2));
LABEL_14:
      uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
      return v17(v4, v6);
    }
LABEL_12:
    *char v3 = (char *)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *((void *)v8 + 3) >> 1);
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v31 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v32 = *v3;
  if (v31)
  {
    uint64_t v33 = *((void *)v32 + 2);
    uint64_t v34 = swift_isUniquelyReferenced_nonNull_native();
    *char v3 = v32;
    if ((v34 & 1) == 0)
    {
      uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33, 1, v32);
      *char v3 = v32;
    }
    if (v33)
    {
      uint64_t v35 = *((void *)v32 + 2);
      unint64_t v36 = v35 - v33;
      if (v35 - v33 < 0) {
        return _fatalErrorMessage(_:_:file:line:flags:)();
      }
      memmove(v32 + 32, &v32[v33 + 32], v35 - v33);
      *((void *)v32 + 2) = v36;
    }
    *char v3 = v32;
  }
  else
  {
    if (*((void *)v32 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      size_t v45 = (void *)swift_allocObject();
      unsigned __int16 v47 = _swift_stdlib_malloc_size(v45);
      v45[2] = 0;
      long long v45[3] = 2 * v47 - 64;
    }
    else
    {
      size_t v45 = (void *)MEMORY[0x1E4FBC860];
    }
    *char v3 = (char *)v45;
    swift_bridgeObjectRelease();
  }
LABEL_56:
  return MEMORY[0x1F4188298](AsyncLineSequence.AsyncIterator.next(), 0, 0);
}

{
  uint64_t v0;

  *(_WORD *)(*(void *)(v0 + 24) + *(int *)(v0 + 176)) = 256;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = AsyncLineSequence.AsyncIterator.next();
  }
  else
  {
    uint64_t v2 = AsyncLineSequence.AsyncIterator.next();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (*(unsigned char *)(v0 + 189))
  {
    uint64_t v1 = *(void *)(v0 + 64);
    return (*(uint64_t (**)(void, uint64_t))(v0 + 8))(*(void *)(v0 + 56), v1);
  }
  uint64_t v2 = *(unsigned __int8 *)(v0 + 188);
  if (v2 != 10) {
    *(_WORD *)(*(void *)(v0 + 24) + *(int *)(v0 + 176)) = v2;
  }
  uint64_t v1 = *(void *)(v0 + 64);
  if (v1) {
    return (*(uint64_t (**)(void, uint64_t))(v0 + 8))(*(void *)(v0 + 56), v1);
  }
  return MEMORY[0x1F4188298](AsyncLineSequence.AsyncIterator.next(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AsyncLineSequence.AsyncIterator.next();
  }
  else {
    uint64_t v2 = AsyncLineSequence.AsyncIterator.next();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char **v3;
  char *v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  int v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  size_t v30;
  uint64_t v31;

  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  if (*(unsigned char *)(v0 + 187))
  {
    char v3 = (char **)(v1 + *(int *)(v2 + 36));
    uint64_t v4 = *v3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *char v3 = v4;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v4 + 2) + 1, 1, v4);
      *char v3 = v4;
    }
    int v7 = *((void *)v4 + 2);
    uint64_t v6 = *((void *)v4 + 3);
    if (v7 >= v6 >> 1) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, v4);
    }
    *((void *)v4 + 2) = v7 + 1;
    v4[v7 + 32] = -62;
    *char v3 = v4;
    swift_bridgeObjectRetain();
    uint64_t v8 = static String._fromUTF8Repairing(_:)();
    uint64_t v10 = v9;
    swift_bridgeObjectRelease();
    uint64_t v11 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v3;
    if (v11) {
      goto LABEL_7;
    }
    goto LABEL_11;
  }
  int v13 = *(unsigned __int8 *)(v0 + 186);
  char v3 = (char **)(v1 + *(int *)(v2 + 36));
  uint64_t v14 = *v3;
  if (v13 == 133)
  {
    if (*((void *)v14 + 2))
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = static String._fromUTF8Repairing(_:)();
      uint64_t v10 = v15;
      swift_bridgeObjectRelease();
      uint64_t v16 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v12 = *v3;
      if (v16)
      {
LABEL_7:
        specialized Array.replaceSubrange<A>(_:with:)(0, *((void *)v12 + 2));
LABEL_12:
        uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
        return v17(v8, v10);
      }
LABEL_11:
      *char v3 = (char *)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *((void *)v12 + 3) >> 1);
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    uint64_t v25 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    if ((v25 & 1) == 0)
    {
      if (*((void *)v14 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        int64_t v29 = (void *)swift_allocObject();
        char v30 = _swift_stdlib_malloc_size(v29);
        v29[2] = 0;
        v29[3] = 2 * v30 - 64;
      }
      else
      {
        int64_t v29 = (void *)MEMORY[0x1E4FBC860];
      }
      *char v3 = (char *)v29;
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }
    unsigned __int8 v26 = *((void *)v14 + 2);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 1, v14);
    }
    if (v26)
    {
      char v27 = *((void *)v14 + 2);
      uint64_t v28 = v27 - v26;
      if (v27 - v26 < 0) {
        return _fatalErrorMessage(_:_:file:line:flags:)();
      }
      memmove(v14 + 32, &v14[v26 + 32], v27 - v26);
      *((void *)v14 + 2) = v28;
    }
  }
  else
  {
    uint64_t v19 = swift_isUniquelyReferenced_nonNull_native();
    *char v3 = v14;
    if ((v19 & 1) == 0)
    {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v14 + 2) + 1, 1, v14);
      *char v3 = v14;
    }
    unint64_t v21 = *((void *)v14 + 2);
    char v20 = *((void *)v14 + 3);
    int64_t v22 = v21 + 1;
    if (v21 >= v20 >> 1) {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1, v14);
    }
    *((void *)v14 + 2) = v22;
    v14[v21 + 32] = -62;
    *char v3 = v14;
    char v23 = *((void *)v14 + 3);
    uint64_t v24 = v21 + 2;
    if (v24 > (uint64_t)(v23 >> 1)) {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v24, 1, v14);
    }
    *((void *)v14 + 2) = v24;
    v14[v22 + 32] = v13;
  }
  *char v3 = v14;
LABEL_23:
  return MEMORY[0x1F4188298](AsyncLineSequence.AsyncIterator.next(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AsyncLineSequence.AsyncIterator.next();
  }
  else {
    uint64_t v2 = AsyncLineSequence.AsyncIterator.next();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  int v1;
  char **v2;
  char *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v26;

  uint64_t v1 = *(unsigned __int8 *)(v0 + 182);
  if (*(unsigned char *)(v0 + 183))
  {
    uint64_t v2 = (char **)(*(void *)(v0 + 24) + *(int *)(*(void *)(v0 + 16) + 36));
    char v3 = *v2;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v2 = v3;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, v3);
      *uint64_t v2 = v3;
    }
    uint64_t v6 = *((void *)v3 + 2);
    uint64_t v5 = *((void *)v3 + 3);
    if (v6 >= v5 >> 1) {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 1, 1, v3);
    }
    *((void *)v3 + 2) = v6 + 1;
    v3[v6 + 32] = -30;
    *uint64_t v2 = v3;
    swift_bridgeObjectRetain();
    int v7 = static String._fromUTF8Repairing(_:)();
    uint64_t v9 = v8;
    swift_bridgeObjectRelease();
    uint64_t v10 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v2;
    if (v10)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *((void *)v11 + 2));
    }
    else
    {
      *uint64_t v2 = (char *)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *((void *)v11 + 3) >> 1);
      swift_bridgeObjectRelease();
    }
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v15(v7, v9);
  }
  else if (v1 == 128)
  {
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v12;
    *uint64_t v12 = v0;
    v12[1] = AsyncLineSequence.AsyncIterator.next();
    int v13 = *(void *)(v0 + 104);
    uint64_t v14 = *(void *)(v0 + 112);
    return MEMORY[0x1F4187C78](v0 + 184, v13, v14);
  }
  else
  {
    uint64_t v16 = *(void *)(v0 + 24);
    uint64_t v17 = *(int *)(*(void *)(v0 + 16) + 36);
    char v18 = *(char **)(v16 + v17);
    uint64_t v19 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v16 + v17) = v18;
    if ((v19 & 1) == 0)
    {
      char v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v18 + 2) + 1, 1, v18);
      *(void *)(v16 + v17) = v18;
    }
    unint64_t v21 = *((void *)v18 + 2);
    char v20 = *((void *)v18 + 3);
    int64_t v22 = v21 + 1;
    if (v21 >= v20 >> 1) {
      char v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1, v18);
    }
    *((void *)v18 + 2) = v22;
    v18[v21 + 32] = -30;
    *(void *)(v16 + v17) = v18;
    char v23 = *((void *)v18 + 3);
    uint64_t v24 = v21 + 2;
    if (v24 > (uint64_t)(v23 >> 1)) {
      char v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v24, 1, v18);
    }
    *((void *)v18 + 2) = v24;
    v18[v22 + 32] = v1;
    *(void *)(v16 + v17) = v18;
    return MEMORY[0x1F4188298](AsyncLineSequence.AsyncIterator.next(), 0, 0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AsyncLineSequence.AsyncIterator.next();
  }
  else {
    uint64_t v2 = AsyncLineSequence.AsyncIterator.next();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char **v3;
  char *v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  char v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  char *v30;
  void *v31;
  size_t v32;
  uint64_t v33;

  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  if (*(unsigned char *)(v0 + 185))
  {
    char v3 = (char **)(v1 + *(int *)(v2 + 36));
    uint64_t v4 = *v3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *char v3 = v4;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v4 + 2) + 1, 1, v4);
      *char v3 = v4;
    }
    int v7 = *((void *)v4 + 2);
    uint64_t v6 = *((void *)v4 + 3);
    uint64_t v8 = v7 + 1;
    if (v7 >= v6 >> 1) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, v4);
    }
    *((void *)v4 + 2) = v8;
    v4[v7 + 32] = -30;
    *char v3 = v4;
    uint64_t v9 = *((void *)v4 + 3);
    uint64_t v10 = v7 + 2;
    if (v10 > (uint64_t)(v9 >> 1)) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10, 1, v4);
    }
    *((void *)v4 + 2) = v10;
    v4[v8 + 32] = 0x80;
    *char v3 = v4;
    swift_bridgeObjectRetain();
    uint64_t v11 = static String._fromUTF8Repairing(_:)();
    int v13 = v12;
    swift_bridgeObjectRelease();
    uint64_t v14 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v3;
    if (v14) {
      goto LABEL_9;
    }
    goto LABEL_13;
  }
  uint64_t v16 = *(unsigned char *)(v0 + 184);
  char v3 = (char **)(v1 + *(int *)(v2 + 36));
  uint64_t v17 = *v3;
  if ((v16 & 0xFE) == 0xA8)
  {
    if (*((void *)v17 + 2))
    {
      swift_bridgeObjectRetain();
      uint64_t v11 = static String._fromUTF8Repairing(_:)();
      int v13 = v18;
      swift_bridgeObjectRelease();
      uint64_t v19 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v15 = *v3;
      if (v19)
      {
LABEL_9:
        specialized Array.replaceSubrange<A>(_:with:)(0, *((void *)v15 + 2));
LABEL_14:
        char v20 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
        return v20(v11, v13);
      }
LABEL_13:
      *char v3 = (char *)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *((void *)v15 + 3) >> 1);
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    int64_t v29 = swift_isUniquelyReferenced_nonNull_native();
    char v30 = *v3;
    if (v29)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *((void *)v30 + 2));
    }
    else
    {
      if (*((void *)v30 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        uint64_t v31 = (void *)swift_allocObject();
        uint64_t v32 = _swift_stdlib_malloc_size(v31);
        void v31[2] = 0;
        uint64_t v31[3] = 2 * v32 - 64;
      }
      else
      {
        uint64_t v31 = (void *)MEMORY[0x1E4FBC860];
      }
      *char v3 = (char *)v31;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    int64_t v22 = swift_isUniquelyReferenced_nonNull_native();
    *char v3 = v17;
    if ((v22 & 1) == 0)
    {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v17 + 2) + 1, 1, v17);
      *char v3 = v17;
    }
    uint64_t v24 = *((void *)v17 + 2);
    char v23 = *((void *)v17 + 3);
    uint64_t v25 = v24 + 1;
    if (v24 >= v23 >> 1) {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v24 + 1, 1, v17);
    }
    *((void *)v17 + 2) = v25;
    v17[v24 + 32] = -30;
    *char v3 = v17;
    unsigned __int8 v26 = *((void *)v17 + 3);
    char v27 = v24 + 2;
    if ((uint64_t)(v24 + 2) > (uint64_t)(v26 >> 1)) {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v24 + 2, 1, v17);
    }
    *((void *)v17 + 2) = v27;
    v17[v25 + 32] = 0x80;
    *char v3 = v17;
    uint64_t v28 = *((void *)v17 + 3);
    if ((uint64_t)(v24 + 3) > (uint64_t)(v28 >> 1)) {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v24 + 3, 1, v17);
    }
    *((void *)v17 + 2) = v24 + 3;
    v17[v27 + 32] = v16;
    *char v3 = v17;
  }
  return MEMORY[0x1F4188298](AsyncLineSequence.AsyncIterator.next(), 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncLineSequence.AsyncIterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *v3;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
  if (!v2)
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2;
  }
  return v8(v6, v7);
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  uint64_t v10 = *v3;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
  if (!v2)
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2;
  }
  return v8(v6, v7);
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  uint64_t v10 = *v3;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
  if (!v2)
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2;
  }
  return v8(v6, v7);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncLineSequence<A>.AsyncIterator(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v4;
  void *v4 = v2;
  v4[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncLineSequence<A>.AsyncIterator;
  return AsyncLineSequence.AsyncIterator.next()(a2);
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v6 = *v3;
  uint64_t v7 = *v3;
  swift_task_dealloc();
  if (!v2)
  {
    uint64_t v8 = *(void **)(v6 + 16);
    *uint64_t v8 = a1;
    v8[1] = a2;
  }
  uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
  return v9();
}

uint64_t _s10Foundation17AsyncLineSequenceV0B8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6[2] = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[3] = AssociatedTypeWitness;
  void v6[4] = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = swift_task_alloc();
  v6[5] = v13;
  uint64_t v14 = (void *)swift_task_alloc();
  v6[6] = v14;
  *uint64_t v14 = v6;
  v14[1] = _s10Foundation17AsyncLineSequenceV0B8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return MEMORY[0x1F4187C88](a1, a2, a3, a5, a6, v13);
}

uint64_t _s10Foundation17AsyncLineSequenceV0B8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_()
{
  uint64_t v2 = (void *)*v1;
  char v3 = (void *)*v1;
  swift_task_dealloc();
  if (v0) {
    (*(void (**)(void, void, void))(v2[4] + 32))(v2[2], v2[5], v2[3]);
  }
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v3[1];
  return v4();
}

uint64_t AsyncLineSequence.makeAsyncIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  uint64_t result = type metadata accessor for AsyncLineSequence.AsyncIterator();
  *(void *)(a2 + *(int *)(result + 36)) = MEMORY[0x1E4FBC860];
  *(_WORD *)(a2 + *(int *)(result + 40)) = 256;
  return result;
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncLineSequence<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  AsyncLineSequence.makeAsyncIterator()(a1, a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);

  return v4(v2, a1);
}

uint64_t AsyncSequence<>.lines.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t type metadata accessor for AsyncLineSequence.AsyncIterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t associated type witness table accessor for AsyncIteratorProtocol.Failure : Error in AsyncLineSequence<A>.AsyncIterator()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncLineSequence<A>()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for AsyncLineSequence(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for AsyncLineSequence(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x181BA09FCLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for AsyncLineSequence()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for AsyncLineSequence.AsyncIterator()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncLineSequence.AsyncIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 10 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    unint64_t v10 = ((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v10 = *(void *)v11;
    *(_WORD *)(v10 + 8) = *(_WORD *)(v11 + 8);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for AsyncLineSequence.AsyncIterator(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AsyncLineSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  *(_WORD *)(v7 + 8) = *(_WORD *)(v8 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AsyncLineSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(v7 + 8) = *(_WORD *)(v8 + 8);
  return a1;
}

uint64_t initializeWithTake for AsyncLineSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  *(_WORD *)(v7 + 8) = *(_WORD *)(v8 + 8);
  return a1;
}

uint64_t assignWithTake for AsyncLineSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  swift_bridgeObjectRelease();
  *(_WORD *)(v7 + 8) = *(_WORD *)(v8 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncLineSequence.AsyncIterator(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 10;
    if (v9 <= 3) {
      unsigned int v10 = ((a2 - v7 + 0xFFFF) >> (8 * v9)) + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = *((unsigned __int8 *)a1 + v9);
        if (!*((unsigned char *)a1 + v9)) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)((char *)a1 + v9);
        if (*(unsigned __int16 *)((char *)a1 + v9)) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x181BA1120);
      case 4:
        int v13 = *(_DWORD *)((char *)a1 + v9);
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v9);
        if (v9 <= 3)
        {
          int v16 = *a1;
        }
        else
        {
          int v15 = 0;
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFF)
  {
    unint64_t v18 = *(void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v18 >= 0xFFFFFFFF) {
      LODWORD(v18) = -1;
    }
    return (v18 + 1);
  }
  else
  {
    uint64_t v17 = *(uint64_t (**)(unsigned __int16 *))(v5 + 48);
    return v17(a1);
  }
}

void storeEnumTagSinglePayload for AsyncLineSequence.AsyncIterator(unsigned int *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  size_t v10 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 10;
  char v11 = 8 * v10;
  if (v9 >= a3)
  {
    int v14 = 0;
    if (v9 >= a2)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          *((unsigned char *)a1 + v10) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 2:
          *(_WORD *)((char *)a1 + v10) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 3:
          goto LABEL_44;
        case 4:
          *(unsigned int *)((char *)a1 + v10) = 0;
          goto LABEL_30;
        default:
LABEL_30:
          if (a2)
          {
LABEL_31:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v20 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v20 = (a2 - 1);
              }
              *uint64_t v19 = v20;
            }
            else
            {
              unint64_t v18 = *(void (**)(unsigned int *, uint64_t))(v6 + 56);
              v18(a1, a2);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (v10 <= 3) {
      unsigned int v12 = ((a3 - v9 + 0xFFFF) >> v11) + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    if (v9 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v15 = ~v9 + a2;
  unsigned int v16 = v15 >> v11;
  bzero(a1, v10);
  if (v10 <= 3) {
    int v17 = v16 + 1;
  }
  else {
    int v17 = 1;
  }
  if (v10 > 3) {
    *a1 = v15;
  }
  else {
    *(_WORD *)a1 = v15;
  }
  switch(v14)
  {
    case 1:
      *((unsigned char *)a1 + v10) = v17;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v10) = v17;
      break;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x181BA1360);
    case 4:
      *(unsigned int *)((char *)a1 + v10) = v17;
      break;
    default:
      return;
  }
}

id NSURLSession.dataTaskPublisher(for:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F18D50]), sel_initWithURL_cachePolicy_timeoutInterval_, *a1, 0, 60.0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  *a2 = v4;
  a2[1] = (uint64_t)v6;

  return v6;
}

void *NSURLSession.DataTaskPublisher.init(request:session:)@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = *result;
  a3[1] = a2;
  return result;
}

id NSURLSession.dataTaskPublisher(for:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  a2[1] = v2;
  swift_retain();

  return v4;
}

uint64_t NSURLSession.DataTaskPublisher.request.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_retain();
}

id NSURLSession.DataTaskPublisher.session.getter()
{
  return *(id *)(v0 + 8);
}

uint64_t NSURLSession.DataTaskPublisher.receive<A>(subscriber:)(uint64_t a1)
{
  id v3 = (void *)v1[1];
  *(void *)&long long v8 = *v1;
  *((void *)&v8 + 1) = v3;
  uint64_t v4 = type metadata accessor for NSURLSession.DataTaskPublisher.Inner();
  swift_allocObject();
  swift_retain();
  id v5 = v3;
  id v6 = specialized NSURLSession.DataTaskPublisher.Inner.init(_:_:)(&v8, a1);
  uint64_t v9 = v4;
  uint64_t WitnessTable = swift_getWitnessTable();
  *(void *)&long long v8 = v6;
  dispatch thunk of Subscriber.receive(subscription:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v8);
}

uint64_t type metadata accessor for NSURLSession.DataTaskPublisher.Inner()
{
  return __swift_instantiateGenericMetadata();
}

void NSURLSession.DataTaskPublisher.Inner.customMirror.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  v23[1] = *v1;
  _OWORD v23[2] = a1;
  v23[0] = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v23[0] - 8);
  MEMORY[0x1F4188790](v23[0]);
  id v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  long long v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (os_unfair_lock_s *)v2[2];
  os_unfair_lock_lock(v9);
  v23[3] = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_18210C6A0;
  *(void *)(v10 + 32) = 1802723700;
  *(void *)(v10 + 40) = 0xE400000000000000;
  uint64_t v11 = *v2;
  unsigned int v12 = *(void **)((char *)v2 + *(void *)(*v2 + 128));
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSURLSessionDataTask?);
  *(void *)(v10 + 48) = v12;
  *(void *)(v10 + 72) = v13;
  *(void *)(v10 + 80) = 0x657274736E776F64;
  *(void *)(v10 + 88) = 0xEA00000000006D61;
  int v14 = (char *)v2 + *(void *)(v11 + 112);
  uint64_t v15 = type metadata accessor for Optional();
  *(void *)(v10 + 120) = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v10 + 96));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(boxed_opaque_existential_1, v14, v15);
  *(void *)(v10 + 128) = 0x746E65726170;
  *(void *)(v10 + 136) = 0xE600000000000000;
  int v17 = (void *)v2[3];
  unint64_t v18 = (void *)v2[4];
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSURLSession.DataTaskPublisher?);
  *(void *)(v10 + 144) = v17;
  *(void *)(v10 + 152) = v18;
  *(void *)(v10 + 168) = v19;
  *(void *)(v10 + 176) = 0x646E616D6564;
  *(void *)(v10 + 184) = 0xE600000000000000;
  uint64_t v20 = *(void *)((char *)v2 + *(void *)(*v2 + 120));
  *(void *)(v10 + 216) = MEMORY[0x1E4F1AAD8];
  *(void *)(v10 + 192) = v20;
  uint64_t v21 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v8, 1, 1, v21);
  (*(void (**)(char *, void, void))(v3 + 104))(v5, *MEMORY[0x1E4FBC430], v23[0]);
  id v22 = v12;
  swift_retain();
  outlined copy of NSURLSession.DataTaskPublisher?(v17, v18);
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(v9);
}

void NSURLSession.DataTaskPublisher.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0xD000000000000011;
  a1[1] = 0x8000000182112AE0;
}

uint64_t NSURLSession.DataTaskPublisher.Inner.__deallocating_deinit()
{
  MEMORY[0x185309510](*(void *)(v0 + 16), -1, -1);
  outlined consume of NSURLSession.DataTaskPublisher?(*(void *)(v0 + 24), *(void **)(v0 + 32));
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 112);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

void NSURLSession.DataTaskPublisher.Inner.request(_:)(uint64_t a1)
{
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) == 0)
  {
    if (a1 < 0)
    {
LABEL_24:
      __break(1u);
    }
    else if (a1)
    {
      goto LABEL_4;
    }
    __break(1u);
LABEL_26:
    __break(1u);
    return;
  }
LABEL_4:
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4)
  {
    id v5 = *(void **)(v1 + 32);
    uint64_t v6 = *(void *)(*(void *)v1 + 128);
    if (*(void *)(v1 + v6))
    {
      outlined copy of NSURLSession.DataTaskPublisher?(*(id *)(v1 + 24), *(void **)(v1 + 32));
      swift_retain();
    }
    else
    {
      uint64_t v7 = *(void **)(v4 + 16);
      outlined copy of NSURLSession.DataTaskPublisher?(*(id *)(v1 + 24), *(void **)(v1 + 32));
      swift_retain();
      objc_msgSend(v7, sel_copy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMutableURLRequest();
      swift_dynamicCast();
      long long v8 = (void *)aBlock[6];
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = partial apply for implicit closure #4 in implicit closure #3 in NSURLSession.DataTaskPublisher.Inner.request(_:);
      *(void *)(v9 + 24) = v1;
      aBlock[4] = partial apply for closure #1 in NSURLSession.DataTaskPublisher.Inner.request(_:);
      aBlock[5] = v9;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ();
      aBlock[3] = &block_descriptor_3;
      uint64_t v10 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      id v11 = objc_msgSend(v5, sel_dataTaskWithRequest_completionHandler_, v8, v10);
      _Block_release(v10);

      unsigned int v12 = *(void **)(v1 + v6);
      *(void *)(v1 + v6) = v11;
    }
    uint64_t v13 = *(void *)(*(void *)v1 + 120);
    uint64_t v14 = *(void *)(v1 + v13);
    static Subscribers.Demand.unlimited.getter();
    if (static Subscribers.Demand.== infix(_:_:)()) {
      goto LABEL_14;
    }
    static Subscribers.Demand.unlimited.getter();
    char v16 = static Subscribers.Demand.== infix(_:_:)();
    uint64_t v15 = static Subscribers.Demand.unlimited.getter();
    if (v16)
    {
      while (1)
      {
        *(void *)(v1 + v13) = v15;
LABEL_14:
        int v17 = *(void **)(v1 + v6);
        if (v17) {
          goto LABEL_15;
        }
LABEL_21:
        __break(1u);
LABEL_22:
        if (v15 < 0)
        {
          __break(1u);
          goto LABEL_24;
        }
      }
    }
    if (static Subscribers.Demand.== infix(_:_:)())
    {
LABEL_20:
      uint64_t v15 = static Subscribers.Demand.unlimited.getter();
      *(void *)(v1 + v13) = v15;
      int v17 = *(void **)(v1 + v6);
      if (!v17) {
        goto LABEL_21;
      }
LABEL_15:
      id v18 = v17;
      os_unfair_lock_unlock(v3);
      objc_msgSend(v18, sel_resume);
      swift_release();

      outlined consume of NSURLSession.DataTaskPublisher?(v4, v5);
      return;
    }
    if (((v14 | a1) & 0x8000000000000000) == 0)
    {
      uint64_t v15 = v14 + a1;
      if (!__OFADD__(v14, a1)) {
        goto LABEL_22;
      }
      goto LABEL_20;
    }
    goto LABEL_26;
  }

  os_unfair_lock_unlock(v3);
}

void implicit closure #4 in implicit closure #3 in NSURLSession.DataTaskPublisher.Inner.request(_:)(uint64_t a1, unint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v50 = a4;
  id v51 = a3;
  uint64_t v47 = a1;
  unint64_t v48 = a2;
  uint64_t v49 = *a5;
  uint64_t v6 = *(void *)(v49 + 80);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v43 - v9;
  uint64_t v11 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v52 = (char *)&v43 - v13;
  uint64_t v14 = (os_unfair_lock_s *)a5[2];
  os_unfair_lock_lock(v14);
  uint64_t v15 = *(void *)(*a5 + 120);
  uint64_t v16 = *(void *)((char *)a5 + v15);
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) == 0)
  {
    if (v16 < 0)
    {
      __break(1u);
      goto LABEL_28;
    }
    if (!v16) {
      goto LABEL_7;
    }
  }
  uint64_t v17 = a5[3];
  if (!v17)
  {
LABEL_7:
    os_unfair_lock_unlock(v14);
    return;
  }
  size_t v44 = (void *)a5[4];
  uint64_t v45 = v15;
  id v18 = (char *)a5 + *(void *)(*a5 + 112);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v18, v7);
  uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  uint64_t v46 = v6;
  if (v19(v10, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    goto LABEL_7;
  }
  uint64_t v20 = v10;
  uint64_t v21 = v46;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v52, v20, v46);
  a5[3] = 0;
  a5[4] = 0;
  outlined consume of NSURLSession.DataTaskPublisher?(v17, v44);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v18, v7);
  uint64_t v22 = v11;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v18, 1, 1, v21);
  *(void *)((char *)a5 + v45) = 0;
  uint64_t v23 = *(void *)(*a5 + 128);
  uint64_t v24 = *(void **)((char *)a5 + v23);
  *(void *)((char *)a5 + v23) = 0;

  os_unfair_lock_unlock(v14);
  uint64_t v25 = v21;
  if (v51)
  {
    unsigned __int8 v26 = v50;
    if (!v50)
    {
      uint64_t v28 = v47;
      unint64_t v27 = v48;
      if (v48 >> 60 == 15) {
        uint64_t v29 = 0;
      }
      else {
        uint64_t v29 = v47;
      }
      if (v48 >> 60 == 15) {
        unint64_t v30 = 0xC000000000000000;
      }
      else {
        unint64_t v30 = v48;
      }
      uint64_t v53 = v29;
      unint64_t v54 = v30;
      id v55 = v51;
      id v31 = v51;
      outlined copy of Data?(v28, v27);
      uint64_t v32 = v52;
      dispatch thunk of Subscriber.receive(_:)();
      outlined consume of Data._Representation(v29, v30);

      uint64_t v53 = 0;
      dispatch thunk of Subscriber.receive(completion:)();

      goto LABEL_25;
    }
  }
  else
  {
    unsigned __int8 v26 = v50;
    if (!v50) {
      goto LABEL_20;
    }
  }
  uint64_t v53 = (uint64_t)v26;
  id v33 = v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (!swift_dynamicCast())
  {
LABEL_20:
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURLErrorDomain");
    id v35 = objc_allocWithZone((Class)NSError);
    uint64_t v36 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v34 = objc_msgSend(v35, sel_initWithDomain_code_userInfo_, v36, -1, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v37 = objc_msgSend(v34, sel_domain);
    id v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    uint64_t v40 = v39;

    if (v38 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURLErrorDomain") && v40 == v41)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_24;
    }
    char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v42) {
      goto LABEL_24;
    }
LABEL_28:
    __break(1u);
    return;
  }
  id v34 = v56;
LABEL_24:
  uint64_t v53 = (uint64_t)v34;
  uint64_t v32 = v52;
  dispatch thunk of Subscriber.receive(completion:)();

LABEL_25:
  (*(void (**)(char *, uint64_t))(v22 + 8))(v32, v25);
}

void NSURLSession.DataTaskPublisher.Inner.cancel()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v2);
  uint64_t v3 = v0[3];
  if (v3)
  {
    uint64_t v4 = (void *)v0[4];
    v0[3] = 0;
    v0[4] = 0;
    outlined consume of NSURLSession.DataTaskPublisher?(v3, v4);
    id v5 = (char *)v0 + *(void *)(*v0 + 112);
    uint64_t v6 = *(void *)(v1 + 80);
    uint64_t v7 = type metadata accessor for Optional();
    (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
    *(void *)((char *)v0 + *(void *)(*v0 + 120)) = 0;
    uint64_t v8 = *(void *)(*v0 + 128);
    id v9 = *(id *)((char *)v0 + v8);
    *(void *)((char *)v0 + v8) = 0;
    os_unfair_lock_unlock(v2);
    if (v9)
    {
      objc_msgSend(v9, sel_cancel);
    }
  }
  else
  {
    os_unfair_lock_unlock(v2);
  }
}

void protocol witness for Subscription.request(_:) in conformance NSURLSession.DataTaskPublisher.Inner<A>(uint64_t a1)
{
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSURLSession.DataTaskPublisher.Inner<A>()
{
  return 0xD000000000000011;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance NSURLSession.DataTaskPublisher.Inner<A>(uint64_t a1@<X8>)
{
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance NSURLSession.DataTaskPublisher.Inner<A>(void *a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance NSURLSession.DataTaskPublisher.Inner<A>()
{
}

void *specialized NSURLSession.DataTaskPublisher.Inner.init(_:_:)(_OWORD *a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  v2[3] = 0;
  void v2[4] = 0;
  uint64_t v6 = *(void *)(v5 + 80);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  v8((char *)v2 + *(void *)(v5 + 112), 1, 1, v6);
  *(void *)((char *)v2 + *(void *)(*v2 + 128)) = 0;
  id v9 = (_DWORD *)swift_slowAlloc();
  *id v9 = 0;
  v2[2] = v9;
  uint64_t v10 = v2[3];
  uint64_t v11 = (void *)v2[4];
  *(_OWORD *)(v2 + 3) = *a1;
  outlined consume of NSURLSession.DataTaskPublisher?(v10, v11);
  uint64_t v12 = (char *)v2 + *(void *)(*v2 + 112);
  uint64_t v13 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v12, a2, v6);
  v8(v12, 0, 1, v6);
  *(void *)((char *)v2 + *(void *)(*v2 + 120)) = 0;
  return v2;
}

unint64_t lazy protocol witness table accessor for type URLError and conformance URLError()
{
  unint64_t result = lazy protocol witness table cache variable for type URLError and conformance URLError;
  if (!lazy protocol witness table cache variable for type URLError and conformance URLError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLError and conformance URLError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URLError and conformance URLError;
  if (!lazy protocol witness table cache variable for type URLError and conformance URLError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLError and conformance URLError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URLError and conformance URLError;
  if (!lazy protocol witness table cache variable for type URLError and conformance URLError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLError and conformance URLError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URLError and conformance URLError;
  if (!lazy protocol witness table cache variable for type URLError and conformance URLError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLError and conformance URLError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URLError and conformance URLError;
  if (!lazy protocol witness table cache variable for type URLError and conformance URLError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLError and conformance URLError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URLError and conformance URLError;
  if (!lazy protocol witness table cache variable for type URLError and conformance URLError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLError and conformance URLError);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for NSURLSession.DataTaskPublisher(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  id v4 = v3;
  return a1;
}

void destroy for NSURLSession.DataTaskPublisher(uint64_t a1)
{
  swift_release();
  uint64_t v2 = *(void **)(a1 + 8);
}

void *assignWithCopy for NSURLSession.DataTaskPublisher(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  id v4 = (void *)a2[1];
  uint64_t v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for NSURLSession.DataTaskPublisher(uint64_t a1, _OWORD *a2)
{
  swift_release();
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for NSURLSession.DataTaskPublisher()
{
  return &type metadata for NSURLSession.DataTaskPublisher;
}

uint64_t type metadata completion function for NSURLSession.DataTaskPublisher.Inner()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t base witness table accessor for Cancellable in NSURLSession.DataTaskPublisher.Inner<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomCombineIdentifierConvertible in NSURLSession.DataTaskPublisher.Inner<A>()
{
  return swift_getWitnessTable();
}

void partial apply for implicit closure #4 in implicit closure #3 in NSURLSession.DataTaskPublisher.Inner.request(_:)(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  implicit closure #4 in implicit closure #3 in NSURLSession.DataTaskPublisher.Inner.request(_:)(a1, a2, a3, a4, v4);
}

id outlined copy of NSURLSession.DataTaskPublisher?(id result, void *a2)
{
  if (result)
  {
    swift_retain();
    return a2;
  }
  return result;
}

void outlined consume of NSURLSession.DataTaskPublisher?(uint64_t a1, void *a2)
{
  if (a1)
  {
    swift_release();
  }
}

unint64_t type metadata accessor for NSMutableURLRequest()
{
  unint64_t result = lazy cache variable for type metadata for NSMutableURLRequest;
  if (!lazy cache variable for type metadata for NSMutableURLRequest)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  }
  return result;
}

uint64_t sub_181BA2948()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in NSURLSession.DataTaskPublisher.Inner.request(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t ICUPatternGenerator.__deallocating_deinit()
{
  udatpg_close();

  return swift_deallocClassInstance();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICUPatternGenerator.PatternGeneratorInfo()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ICUPatternGenerator.PatternGeneratorInfo()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 16);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICUPatternGenerator.PatternGeneratorInfo()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ICUPatternGenerator.PatternGeneratorInfo(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)) {
    return v2 == v3;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if (v5) {
    return v2 == v3;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ICUPatternGenerator.PatternGeneratorInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ICUPatternGenerator.PatternGeneratorInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for ICUPatternGenerator.PatternGeneratorInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ICUPatternGenerator.PatternGeneratorInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ICUPatternGenerator.PatternGeneratorInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)BOOL result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

double DateInterval.start.setter(double *a1)
{
  double result = *a1;
  *Swift::UInt v1 = *(void *)a1;
  return result;
}

uint64_t (*DateInterval.start.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

double *DateInterval.end.setter(double *result)
{
  if (*result < *v1 || (double v2 = *result - *v1, v2 < 0.0)) {
    __break(1u);
  }
  else {
    v1[1] = v2;
  }
  return result;
}

void DateInterval.duration.setter(double a1)
{
  if (a1 < 0.0) {
    __break(1u);
  }
  else {
    *(double *)(v1 + 8) = a1;
  }
}

uint64_t (*DateInterval.end.modify(uint64_t a1))(uint64_t result, char a2)
{
  *(void *)(a1 + 8) = v1;
  *(double *)a1 = *v1 + v1[1];
  return DateInterval.end.modify;
}

uint64_t DateInterval.end.modify(uint64_t result, char a2)
{
  double v2 = *(double **)(result + 8);
  BOOL v3 = *(double *)result < *v2;
  double v4 = *(double *)result - *v2;
  if (v4 < 0.0) {
    BOOL v3 = 1;
  }
  if (a2)
  {
    if (!v3)
    {
LABEL_7:
      v2[1] = v4;
      return result;
    }
    __break(1u);
  }
  if (!v3) {
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

double *(*DateInterval.duration.modify(void *a1))(double *result, char a2)
{
  a1[1] = v1;
  *a1 = *(void *)(v1 + 8);
  return DateInterval.duration.modify;
}

double *DateInterval.duration.modify(double *result, char a2)
{
  double v2 = *result;
  BOOL v3 = *result < 0.0;
  if (a2)
  {
    if (*result >= 0.0)
    {
LABEL_5:
      *(double *)(*((void *)result + 1) + 8) = v2;
      return result;
    }
    __break(1u);
  }
  if (!v3) {
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

Foundation::DateInterval __swiftcall DateInterval.init()()
{
  uint64_t v1 = v0;
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  double v2 = (double)__tp.tv_nsec * 0.000000001;
  double v3 = (double)__tp.tv_sec + -978307200.0 + v2;
  *(double *)uint64_t v1 = v3;
  *(void *)(v1 + 8) = 0;
  result.duration = v2;
  result.start = *(Foundation::Date *)&v3;
  return result;
}

Foundation::DateInterval __swiftcall DateInterval.init(start:duration:)(Foundation::Date start, Swift::Double duration)
{
  if (start._time < 0.0)
  {
    __break(1u);
  }
  else
  {
    duration = *v2;
    *double v3 = *v2;
    v3[1] = start._time;
  }
  result.duration = duration;
  result.start = start;
  return result;
}

NSComparisonResult __swiftcall DateInterval.compare(_:)(Foundation::DateInterval a1)
{
  double v3 = v1[1];
  double v4 = v2[1];
  NSComparisonResult v5 = (unint64_t)(*v1 < *v2);
  if (*v2 < *v1) {
    NSComparisonResult v5 = NSOrderedAscending;
  }
  NSComparisonResult v6 = NSOrderedAscending;
  if (v4 >= v3) {
    NSComparisonResult v6 = (unint64_t)(v3 < v4);
  }
  if (v5) {
    return v5;
  }
  else {
    return v6;
  }
}

Swift::Bool __swiftcall DateInterval.intersects(_:)(Foundation::DateInterval a1)
{
  double v3 = *v1;
  double v4 = *v2;
  double v5 = *v2 + v2[1];
  if (*v2 <= *v1 && v3 <= v5) {
    return 1;
  }
  double v7 = v3 + v1[1];
  BOOL v8 = v3 <= v4;
  BOOL v9 = v4 <= v7;
  if (v4 > v7) {
    BOOL v8 = 0;
  }
  if (v7 > v5) {
    BOOL v9 = 0;
  }
  Swift::Bool result = 1;
  if (!v9 && !v8) {
    return v5 <= v7 && v3 <= v5;
  }
  return result;
}

Foundation::DateInterval_optional __swiftcall DateInterval.intersection(with:)(Foundation::DateInterval with)
{
  double v4 = *v1;
  double v5 = v1[1];
  double v6 = *v3;
  double v7 = v3[1];
  double v8 = *v3 + v7;
  if (*v3 <= *v1 && v4 <= v8) {
    goto LABEL_18;
  }
  BOOL v10 = v4 <= v8;
  double v11 = v4 + v5;
  BOOL v12 = v6 <= v4 + v5 && v4 <= v6;
  BOOL v13 = v11 <= v8 && v6 <= v4 + v5;
  if (v8 > v11) {
    BOOL v10 = 0;
  }
  if (v12 || v13 || v10)
  {
LABEL_18:
    if (v6 == v4 && v7 == v5)
    {
      *(double *)uint64_t v2 = v6;
      *(double *)(v2 + 8) = v7;
      *(unsigned char *)(v2 + 16) = 0;
    }
    else
    {
      double v15 = v4 + v5;
      if (v6 > v4) {
        double v4 = *v3;
      }
      if (v8 > v15) {
        double v6 = v15;
      }
      else {
        double v6 = *v3 + v7;
      }
      if (v6 < v4)
      {
        __break(1u);
      }
      else
      {
        double v6 = v6 - v4;
        *(double *)uint64_t v2 = v4;
        *(double *)(v2 + 8) = v6;
        *(unsigned char *)(v2 + 16) = 0;
      }
    }
  }
  else
  {
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    *(unsigned char *)(v2 + 16) = 1;
  }
  result.value.duration = v6;
  result.value.start._time = v4;
  result.is_nil = (char)v1;
  return result;
}

void DateInterval.hash(into:)()
{
  Swift::UInt64 v1 = v0[1];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *v0;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
}

BOOL static DateInterval.< infix(_:_:)(double *a1, double *a2)
{
  BOOL v2 = *a1 < *a2;
  if (*a2 >= *a1 && *a2 <= *a1) {
    return a1[1] < a2[1];
  }
  return v2;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DateInterval.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized DateInterval.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DateInterval.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DateInterval.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

Swift::Int DateInterval.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v2;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance DateInterval(void *a1, void *a2)
{
  return DateInterval.compare(_:)((Foundation::DateInterval)__PAIR128__(*a1, *a2)) == NSOrderedAscending;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance DateInterval(double *a1, double *a2)
{
  return specialized static Comparable.<= infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance DateInterval(double *a1, double *a2)
{
  return specialized static Comparable.>= infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance DateInterval(double *a1, double *a2)
{
  return specialized static Comparable.> infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

id DateInterval.description.getter()
{
  double v1 = *v0;
  double v2 = v0[1];
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, *v0);
  id v4 = objc_msgSend(v3, sel_description);

  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  id v14 = v5;
  v6._uint64_t countAndFlagsBits = 544175136;
  v6._uint64_t object = (void *)0xE400000000000000;
  String.append(_:)(v6);
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v1 + v2);
  id v8 = objc_msgSend(v7, sel_description);

  id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  double v11 = v10;

  v12._uint64_t countAndFlagsBits = (uint64_t)v9;
  v12._uint64_t object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t DateInterval.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  id v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  id v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = *v0;
  double v9 = v0[1];
  id v34 = &type metadata for Date;
  v33[0] = v8;
  long long v30 = xmmword_182112D40;
  outlined init with take of Any(v33, &v31);
  BOOL v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v12 = v10[2];
  unint64_t v11 = v10[3];
  if (v12 >= v11 >> 1) {
    BOOL v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v10);
  }
  _OWORD v10[2] = v12 + 1;
  BOOL v13 = &v10[6 * v12];
  long long v14 = v30;
  long long v15 = v32;
  v13[3] = v31;
  uint64_t v13[4] = v15;
  _OWORD v13[2] = v14;
  id v34 = &type metadata for Date;
  v33[0] = v8 + v9;
  long long v30 = xmmword_182112D50;
  outlined init with take of Any(v33, &v31);
  unint64_t v17 = v10[2];
  unint64_t v16 = v10[3];
  if (v17 >= v16 >> 1) {
    BOOL v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v10);
  }
  _OWORD v10[2] = v17 + 1;
  id v18 = &v10[6 * v17];
  long long v19 = v30;
  long long v20 = v32;
  v18[3] = v31;
  v18[4] = v20;
  v18[2] = v19;
  id v34 = (ValueMetadata *)MEMORY[0x1E4FBB3D0];
  v33[0] = v9;
  long long v30 = xmmword_182112D60;
  outlined init with take of Any(v33, &v31);
  unint64_t v22 = v10[2];
  unint64_t v21 = v10[3];
  if (v22 >= v21 >> 1) {
    BOOL v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v10);
  }
  _OWORD v10[2] = v22 + 1;
  uint64_t v23 = &v10[6 * v22];
  long long v24 = v30;
  long long v25 = v32;
  v23[3] = v31;
  void v23[4] = v25;
  _OWORD v23[2] = v24;
  *(double *)&long long v30 = v8;
  *((double *)&v30 + 1) = v9;
  *(void *)&v33[0] = v10;
  uint64_t v26 = *MEMORY[0x1E4FBC410];
  uint64_t v27 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v28 = *(void *)(v27 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 104))(v7, v26, v27);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v7, 0, 1, v27);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBC430], v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

unint64_t static DateInterval._getObjectiveCType()()
{
  return type metadata accessor for NSDateInterval();
}

id static DateInterval._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id result = objc_msgSend(a1, sel_startDate);
  if (result)
  {
    uint64_t v5 = result;
    objc_msgSend(result, sel_timeIntervalSinceReferenceDate);
    uint64_t v7 = v6;

    id result = objc_msgSend(a1, sel_duration);
    if (v8 >= 0.0)
    {
      *(void *)a2 = v7;
      *(double *)(a2 + 8) = v8;
      *(unsigned char *)(a2 + 16) = 0;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static DateInterval._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t result = (uint64_t)objc_msgSend(a1, sel_startDate);
  if (result)
  {
    uint64_t v5 = (void *)result;
    objc_msgSend((id)result, sel_timeIntervalSinceReferenceDate);
    uint64_t v7 = v6;

    uint64_t result = (uint64_t)objc_msgSend(a1, sel_duration);
    if (v8 >= 0.0)
    {
      *(void *)a2 = v7;
      *(double *)(a2 + 8) = v8;
      *(unsigned char *)(a2 + 16) = 0;
      return 1;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance DateInterval()
{
  double v1 = *v0;
  double v2 = v0[1];
  id v3 = objc_allocWithZone((Class)NSDateInterval);
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v1);
  id v5 = objc_msgSend(v3, sel_initWithStartDate_duration_, v4, v2);

  return v5;
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance DateInterval(void *a1, uint64_t a2)
{
  id result = objc_msgSend(a1, sel_startDate);
  if (result)
  {
    id v5 = result;
    objc_msgSend(result, sel_timeIntervalSinceReferenceDate);
    uint64_t v7 = v6;

    id result = objc_msgSend(a1, sel_duration);
    if (v8 >= 0.0)
    {
      *(void *)a2 = v7;
      *(double *)(a2 + 8) = v8;
      *(unsigned char *)(a2 + 16) = 0;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance DateInterval(void *a1, uint64_t a2)
{
  uint64_t result = (uint64_t)objc_msgSend(a1, sel_startDate);
  if (result)
  {
    id v5 = (void *)result;
    objc_msgSend((id)result, sel_timeIntervalSinceReferenceDate);
    uint64_t v7 = v6;

    uint64_t result = (uint64_t)objc_msgSend(a1, sel_duration);
    if (v8 >= 0.0)
    {
      *(void *)a2 = v7;
      *(double *)(a2 + 8) = v8;
      *(unsigned char *)(a2 + 16) = 0;
      return 1;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance DateInterval@<X0>(id result@<X0>, uint64_t a2@<X8>)
{
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  double v2 = result;
  uint64_t result = objc_msgSend(result, sel_startDate);
  if (result)
  {
    id v4 = result;
    objc_msgSend(result, sel_timeIntervalSinceReferenceDate);
    uint64_t v6 = v5;

    uint64_t result = objc_msgSend(v2, sel_duration);
    if (v7 >= 0.0)
    {
      *(void *)a2 = v6;
      *(double *)(a2 + 8) = v7;
      return result;
    }
    __break(1u);
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
  return result;
}

id NSDateInterval._toCustomAnyHashable()()
{
  id result = objc_msgSend(v0, sel_startDate);
  if (result)
  {
    double v2 = result;
    objc_msgSend(result, sel_timeIntervalSinceReferenceDate);

    id result = objc_msgSend(v0, sel_duration);
    if (v3 >= 0.0)
    {
      lazy protocol witness table accessor for type DateInterval and conformance DateInterval();
      return (id)AnyHashable.init<A>(_:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSDateInterval()
{
  id v1 = *v0;
  id v2 = objc_msgSend(*v0, sel_startDate);
  if (v2)
  {
    double v3 = v2;
    objc_msgSend(v2, sel_timeIntervalSinceReferenceDate);

    objc_msgSend(v1, sel_duration);
    if (v4 >= 0.0)
    {
      lazy protocol witness table accessor for type DateInterval and conformance DateInterval();
      AnyHashable.init<A>(_:)();

      return;
    }
    __break(1u);
  }
  __break(1u);
}

unint64_t type metadata accessor for NSDateInterval()
{
  unint64_t result = lazy cache variable for type metadata for NSDateInterval;
  if (!lazy cache variable for type metadata for NSDateInterval)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSDateInterval);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for DateInterval(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type DateInterval and conformance DateInterval();
  a1[2] = lazy protocol witness table accessor for type DateInterval and conformance DateInterval();
  a1[3] = lazy protocol witness table accessor for type DateInterval and conformance DateInterval();
  unint64_t result = lazy protocol witness table accessor for type DateInterval and conformance DateInterval();
  a1[4] = result;
  return result;
}

double sub_181BA3D04@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result = *a1 + a1[1];
  *a2 = result;
  return result;
}

double *sub_181BA3D14(double *result, double *a2)
{
  if (*result < *a2 || (double v2 = *result - *a2, v2 < 0.0)) {
    __break(1u);
  }
  else {
    a2[1] = v2;
  }
  return result;
}

double sub_181BA3D3C@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(a1 + 8);
  *a2 = result;
  return result;
}

double *sub_181BA3D48(double *result, uint64_t a2)
{
  if (*result < 0.0)
  {
    __break(1u);
    JUMPOUT(0x181BA3D60);
  }
  *(double *)(a2 + 8) = *result;
  return result;
}

uint64_t specialized DateInterval.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7472617473 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICURelativeDateFormatter.Signature()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 16);
  int v2 = *(unsigned __int8 *)(v0 + 20);
  Swift::UInt32 v4 = *(_DWORD *)(v0 + 24);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 28);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ICURelativeDateFormatter.Signature()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 16);
  int v2 = *(unsigned __int8 *)(v0 + 20);
  Swift::UInt32 v4 = *(_DWORD *)(v0 + 24);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 28);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICURelativeDateFormatter.Signature()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 16);
  int v2 = *(unsigned __int8 *)(v0 + 20);
  Swift::UInt32 v4 = *(_DWORD *)(v0 + 24);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 28);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ICURelativeDateFormatter.Signature(uint64_t a1, uint64_t a2)
{
  return specialized static ICURelativeDateFormatter.Signature.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32), *(void *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 20) << 32), *(void *)(a2 + 24));
}

void one-time initialization function for sortedAllowedComponents()
{
  static ICURelativeDateFormatter.sortedAllowedComponents = (uint64_t)&outlined read-only object #0 of one-time initialization function for sortedAllowedComponents;
}

unint64_t one-time initialization function for componentsToURelativeDateUnit()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, URelativeDateTimeUnit>);
  uint64_t v0 = (void *)static _DictionaryStorage.allocate(capacity:)();
  char v1 = byte_1ECA40218;
  int v2 = dword_1ECA4021C;
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(byte_1ECA40218);
  if (v4)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v5 = v0 + 8;
  *(void *)((char *)v0 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
  *(unsigned char *)(v0[6] + result) = v1;
  *(_DWORD *)(v0[7] + 4 * result) = v2;
  uint64_t v6 = v0[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v0[2] = v8;
  char v9 = byte_1ECA40220;
  int v10 = dword_1ECA40224;
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(byte_1ECA40220);
  if (v11)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  *(void *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(unsigned char *)(v0[6] + result) = v9;
  *(_DWORD *)(v0[7] + 4 * result) = v10;
  uint64_t v12 = v0[2];
  BOOL v7 = __OFADD__(v12, 1);
  uint64_t v13 = v12 + 1;
  if (v7)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v0[2] = v13;
  char v14 = byte_1ECA40228;
  int v15 = dword_1ECA4022C;
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(byte_1ECA40228);
  if (v16)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  *(void *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(unsigned char *)(v0[6] + result) = v14;
  *(_DWORD *)(v0[7] + 4 * result) = v15;
  uint64_t v17 = v0[2];
  BOOL v7 = __OFADD__(v17, 1);
  uint64_t v18 = v17 + 1;
  if (v7)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v0[2] = v18;
  char v19 = byte_1ECA40230;
  int v20 = dword_1ECA40234;
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(byte_1ECA40230);
  if (v21)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  *(void *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(unsigned char *)(v0[6] + result) = v19;
  *(_DWORD *)(v0[7] + 4 * result) = v20;
  uint64_t v22 = v0[2];
  BOOL v7 = __OFADD__(v22, 1);
  uint64_t v23 = v22 + 1;
  if (v7)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v0[2] = v23;
  char v24 = byte_1ECA40238;
  int v25 = dword_1ECA4023C;
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(byte_1ECA40238);
  if (v26)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  *(void *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(unsigned char *)(v0[6] + result) = v24;
  *(_DWORD *)(v0[7] + 4 * result) = v25;
  uint64_t v27 = v0[2];
  BOOL v7 = __OFADD__(v27, 1);
  uint64_t v28 = v27 + 1;
  if (v7)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v0[2] = v28;
  char v29 = byte_1ECA40240;
  int v30 = dword_1ECA40244;
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(byte_1ECA40240);
  if (v31)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  *(void *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(unsigned char *)(v0[6] + result) = v29;
  *(_DWORD *)(v0[7] + 4 * result) = v30;
  uint64_t v32 = v0[2];
  BOOL v7 = __OFADD__(v32, 1);
  uint64_t v33 = v32 + 1;
  if (v7)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v0[2] = v33;
  char v34 = byte_1ECA40248;
  int v35 = dword_1ECA4024C;
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(byte_1ECA40248);
  if (v36)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  *(void *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(unsigned char *)(v0[6] + result) = v34;
  *(_DWORD *)(v0[7] + 4 * result) = v35;
  uint64_t v37 = v0[2];
  BOOL v7 = __OFADD__(v37, 1);
  uint64_t v38 = v37 + 1;
  if (!v7)
  {
    v0[2] = v38;
    static ICURelativeDateFormatter.componentsToURelativeDateUnit = (uint64_t)v0;
    return result;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t ICURelativeDateFormatter.init(signature:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x100000000) == 0)
  {
    String.utf8CString.getter();
    unum_open();
    swift_release();
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v4 = ureldatefmt_open();
  swift_release();
  if (v4)
  {
    *(void *)(v3 + 16) = v4;
  }
  else
  {
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v3;
}

uint64_t ICURelativeDateFormatter.__deallocating_deinit()
{
  ureldatefmt_close();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ICURelativeDateFormatter()
{
  return self;
}

uint64_t ICURelativeDateFormatter.format(value:component:presentation:)(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4 = v3;
  _OWORD v16[2] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  int v7 = *a3;
  if (one-time initialization token for componentsToURelativeDateUnit != -1) {
    swift_once();
  }
  uint64_t v8 = static ICURelativeDateFormatter.componentsToURelativeDateUnit;
  if (!*(void *)(static ICURelativeDateFormatter.componentsToURelativeDateUnit + 16)) {
    return 0;
  }
  uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v6);
  if ((v10 & 1) == 0) {
    return 0;
  }
  uint64_t v11 = *(unsigned int *)(*(void *)(v8 + 56) + 4 * v9);
  uint64_t v12 = swift_retain_n();
  MEMORY[0x1F4188790](v12);
  swift_retain();
  if (v7) {
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v15, 32, v4, a1, v11, v16);
  }
  else {
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v15, 32, v4, a1, v11, v16);
  }
  uint64_t v13 = v16[0];
  swift_release_n();
  return v13;
}

BOOL specialized static ICURelativeDateFormatter.Signature.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 == a5 && a2 == a6 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v12 & 1) != 0))
  {
    BOOL result = 0;
    if ((a3 & 0x100000000) != 0)
    {
      if ((a7 & 0x100000000) == 0) {
        return result;
      }
    }
    else if ((a7 & 0x100000000) != 0 || a3 != a7)
    {
      return result;
    }
    if (a4 == a8) {
      return HIDWORD(a4) == HIDWORD(a8);
    }
  }
  return result;
}

uint64_t initializeWithCopy for ICURelativeDateFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ICURelativeDateFormatter.Signature(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v4 = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return a1;
}

uint64_t assignWithTake for ICURelativeDateFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for ICURelativeDateFormatter.Signature()
{
  return &type metadata for ICURelativeDateFormatter.Signature;
}

unint64_t lazy protocol witness table accessor for type ICURelativeDateFormatter.Signature and conformance ICURelativeDateFormatter.Signature()
{
  unint64_t result = lazy protocol witness table cache variable for type ICURelativeDateFormatter.Signature and conformance ICURelativeDateFormatter.Signature;
  if (!lazy protocol witness table cache variable for type ICURelativeDateFormatter.Signature and conformance ICURelativeDateFormatter.Signature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICURelativeDateFormatter.Signature and conformance ICURelativeDateFormatter.Signature);
  }
  return result;
}

uint64_t one-time initialization function for _lock()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Set<ObjectIdentifier>, os_unfair_lock_s>);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = MEMORY[0x1E4FBC870];
  _lock = result;
  return result;
}

uint64_t specialized static NSKeyedUnarchiver.__swift_checkClassAndWarnForKeyedArchiving(_:operation:)(uint64_t a1, int a2)
{
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  uint64_t isObjCTypeNameSerializable = _swift_isObjCTypeNameSerializable();
  if (isObjCTypeNameSerializable) {
    return 0;
  }
  if (one-time initialization token for _lock != -1) {
    uint64_t isObjCTypeNameSerializable = swift_once();
  }
  MEMORY[0x1F4188790](isObjCTypeNameSerializable);
  uint64_t v8 = v7 + 6;
  os_unfair_lock_lock(v7 + 6);
  partial apply for closure #1 in _isClassFirstSeen(_:)(&v33);
  os_unfair_lock_unlock(v8);
  if (v33 != 1) {
    return 1;
  }
  uint64_t v33 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  uint64_t v9 = String.init<A>(reflecting:)();
  uint64_t v11 = v10;
  char v12 = NSStringFromClass(ObjCClassFromMetadata);
  id v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  int v15 = v14;

  BOOL v16 = a2 == 1;
  if (a2 == 1) {
    uint64_t v17 = 0x7669686372616E75;
  }
  else {
    uint64_t v17 = 0x65766968637261;
  }
  if (v16) {
    uint64_t v18 = (void *)0xE900000000000065;
  }
  else {
    uint64_t v18 = (void *)0xE700000000000000;
  }
  uint64_t v33 = 0;
  unint64_t v34 = 0xE000000000000000;
  _StringGuts.grow(_:)(371);
  v19._uint64_t countAndFlagsBits = 0x6974706D65747441;
  v19._uint64_t object = (void *)0xEE00206F7420676ELL;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = v17;
  v20._uint64_t object = v18;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 0x6320746669775320;
  v21._uint64_t object = (void *)0xEE0027207373616CLL;
  String.append(_:)(v21);
  v22._uint64_t countAndFlagsBits = v9;
  v22._uint64_t object = v11;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._uint64_t object = (void *)0x80000001823AC090;
  v23._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v23);
  v24._uint64_t countAndFlagsBits = (uint64_t)v13;
  v24._uint64_t object = v15;
  String.append(_:)(v24);
  v25._uint64_t countAndFlagsBits = 0xD0000000000000AELL;
  v25._uint64_t object = (void *)0x80000001823AC0B0;
  String.append(_:)(v25);
  v26._uint64_t countAndFlagsBits = (uint64_t)v13;
  v26._uint64_t object = v15;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 0xD000000000000083;
  v27._uint64_t object = (void *)0x80000001823AC160;
  String.append(_:)(v27);
  uint64_t v29 = v33;
  unint64_t v28 = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1821037E0;
  *(void *)(inited + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(inited + 32) = v29;
  *(void *)(inited + 40) = v28;
  swift_bridgeObjectRetain();
  specialized withVaList<A>(_:_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  uint64_t v6 = 1;
  swift_arrayDestroy();
  uint64_t v31 = String.utf8CString.getter();
  MEMORY[0x185307180](0, v31 + 32, 0);
  swift_bridgeObjectRelease();
  swift_release();
  return v6;
}

uint64_t partial apply for closure #1 in _isClassFirstSeen(_:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized Set._Variant.insert(_:)(&v4, *(void *)(v1 + 16));
  *a1 = result & 1;
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADsAE_pypSgIsgnrzr_xSayAFGsAE_pSTRzAFRsd__sAE_pRsd_0_r_0_lIetMgnozo_Tp5(void (*a1)(void *__return_ptr, char *, uint64_t *), uint64_t a2, uint64_t a3, void (*a4)(char *, char *, uint64_t))
{
  void (*v53)(void *__return_ptr, char *, uint64_t *);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void v59[4];
  uint64_t v60;

  uint64_t v6 = v5;
  uint64_t v53 = a1;
  unint64_t v54 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v10 - 8);
  uint64_t v47 = v10;
  MEMORY[0x1F4188790](v10);
  char v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v52 = (char *)&v45 - v14;
  id v55 = AssociatedTypeWitness;
  uint64_t v50 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v15);
  id v51 = (char *)&v45 - v16;
  uint64_t v17 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v18);
  Swift::String v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = a4;
  int8x16_t v56 = swift_getAssociatedTypeWitness();
  uint64_t v48 = *(void *)(v56 - 8);
  MEMORY[0x1F4188790](v56);
  Swift::String v22 = (char *)&v45 - v21;
  uint64_t v23 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v60 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23 & ~(v23 >> 63), 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v4, a3);
  int8x16_t v57 = v22;
  uint64_t result = dispatch thunk of Sequence.makeIterator()();
  if (v23 < 0)
  {
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  if (v23)
  {
    Swift::String v25 = (uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48);
    Swift::String v26 = (uint64_t (**)(char *, uint64_t))(v50 + 8);
    uint64_t v27 = v56;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    while (1)
    {
      uint64_t v29 = AssociatedConformanceWitness;
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v30 = v55;
      uint64_t result = (*v25)(v12, 1, v55);
      if (result == 1) {
        goto LABEL_26;
      }
      v53(v59, v12, &v58);
      if (v6)
      {
        (*(void (**)(char *, uint64_t))(v48 + 8))(v57, v27);
        swift_release();
        return (*v26)(v12, v30);
      }
      uint64_t v6 = 0;
      (*v26)(v12, v30);
      uint64_t v31 = v60;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v31 + 16) + 1, 1);
        uint64_t v31 = v60;
      }
      unint64_t v33 = *(void *)(v31 + 16);
      unint64_t v32 = *(void *)(v31 + 24);
      if (v33 >= v32 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
        uint64_t v31 = v60;
      }
      *(void *)(v31 + 16) = v33 + 1;
      outlined init with take of LocalePreferences?((uint64_t)v59, v31 + 32 * v33 + 32, (uint64_t *)&demangling cache variable for type metadata for Any?);
      --v23;
      uint64_t v27 = v56;
      uint64_t AssociatedConformanceWitness = v29;
      if (!v23) {
        goto LABEL_13;
      }
    }
  }
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
LABEL_13:
  unint64_t v34 = v52;
  uint64_t v35 = v50;
  uint64_t v50 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  char v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  int v37 = v36(v34, 1, v55);
  uint64_t v38 = v51;
  if (v37 == 1)
  {
LABEL_14:
    (*(void (**)(char *, uint64_t))(v48 + 8))(v57, v56);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v34, v47);
    return v60;
  }
  else
  {
    uint64_t v49 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    uint64_t v39 = (void (**)(char *, uint64_t))(v35 + 8);
    uint64_t v40 = v55;
    while (1)
    {
      v49(v38, v34, v40);
      v53(v59, v38, &v58);
      if (v6) {
        break;
      }
      uint64_t v6 = 0;
      (*v39)(v38, v40);
      uint64_t v41 = v60;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v41 + 16) + 1, 1);
        uint64_t v41 = v60;
      }
      unint64_t v43 = *(void *)(v41 + 16);
      unint64_t v42 = *(void *)(v41 + 24);
      if (v43 >= v42 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
        uint64_t v41 = v60;
      }
      *(void *)(v41 + 16) = v43 + 1;
      outlined init with take of LocalePreferences?((uint64_t)v59, v41 + 32 * v43 + 32, (uint64_t *)&demangling cache variable for type metadata for Any?);
      unint64_t v34 = v52;
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v40 = v55;
      int v44 = v36(v34, 1, v55);
      uint64_t v38 = v51;
      if (v44 == 1) {
        goto LABEL_14;
      }
    }
    (*v39)(v38, v40);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v57, v56);
    return swift_release();
  }
}

uint64_t static ListFormatStyle.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0
    && (*(void *)&long long v18 = a3,
        *((void *)&v18 + 1) = a4,
        uint64_t v19 = a5,
        uint64_t v20 = a6,
        char v12 = (int *)type metadata accessor for ListFormatStyle(),
        *(unsigned __int8 *)(a1 + v12[13]) == *(unsigned __int8 *)(a2 + v12[13]))
    && *(unsigned __int8 *)(a1 + v12[14]) == *(unsigned __int8 *)(a2 + v12[14]))
  {
    uint64_t v15 = v12[15];
    long long v16 = *(_OWORD *)(a1 + v15);
    long long v17 = *(_OWORD *)(a2 + v15);
    long long v18 = v16;
    char v13 = specialized static Locale.== infix(_:_:)((uint64_t)&v18, (uint64_t)&v17);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

__n128 ListFormatStyle.locale(_:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  uint64_t v7 = *(int *)(a2 + 60);
  __n128 v9 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v9;
  *(__n128 *)(a3 + v7) = v9;
  return result;
}

uint64_t ListFormatStyle.width.getter@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(v2 + *(int *)(result + 52));
  return result;
}

unsigned char *ListFormatStyle.width.setter(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 52)) = *result;
  return result;
}

uint64_t (*ListFormatStyle.width.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t ListFormatStyle.listType.getter@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(v2 + *(int *)(result + 56));
  return result;
}

unsigned char *ListFormatStyle.listType.setter(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 56)) = *result;
  return result;
}

uint64_t (*ListFormatStyle.listType.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t ListFormatStyle.locale.getter@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *(_OWORD *)(v2 + *(int *)(a1 + 60));
  return swift_unknownObjectRetain();
}

__n128 ListFormatStyle.locale.setter(__n128 *a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 60);
  swift_unknownObjectRelease();
  __n128 result = *a1;
  *(__n128 *)(v2 + v4) = *a1;
  return result;
}

uint64_t (*ListFormatStyle.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t ListFormatStyle.init(memberStyle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = *(void *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a6, a1, a2);
  v20[0] = a2;
  v20[1] = a3;
  v20[2] = a4;
  v20[3] = a5;
  char v13 = (int *)type metadata accessor for ListFormatStyle();
  *(unsigned char *)(a6 + v13[13]) = 0;
  *(unsigned char *)(a6 + v13[14]) = 0;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v14 = static LocaleCache.cache + 16;
  uint64_t v15 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v15);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v14, v20);
  os_unfair_lock_unlock(v15);
  swift_release_n();
  uint64_t v16 = v20[0];
  uint64_t v17 = _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a1, a2);
  uint64_t v19 = (uint64_t *)(a6 + v13[15]);
  *uint64_t v19 = v16;
  v19[1] = v17;
  return result;
}

uint64_t specialized static ICUListFormatter.formatter<A, B>(for:)(unsigned int a1, uint64_t a2, uint64_t a3)
{
  v68[1] = *MEMORY[0x1E4F143B8];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 64);
  swift_unknownObjectRetain();
  uint64_t v7 = v6(ObjectType, a3);
  __n128 v9 = v8;
  uint64_t v10 = swift_unknownObjectRelease();
  Swift::UInt v12 = a1;
  if (one-time initialization token for cache != -1) {
    uint64_t v10 = swift_once();
  }
  uint64_t v13 = *(void *)algn_1E8EDF408;
  uint64_t v63 = static ICUListFormatter.cache;
  uint64_t v65 = v7;
  uint64_t v66 = (uint64_t)v9;
  Swift::UInt v11 = (a1 >> 8) & 1;
  Swift::UInt v67 = v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (uint64_t *)(v13 + 16);
  uint64_t v15 = v13 + 24;
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 24));
  partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)(v13 + 16, v68);
  os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 24));
  swift_release();
  uint64_t v16 = v68[0];
  if (v68[0])
  {
    swift_bridgeObjectRelease();
LABEL_57:
    swift_release();
    return v16;
  }
  uint64_t v60 = v13;
  uint64_t v61 = (os_unfair_lock_s *)(v13 + 24);
  uint64_t v16 = v63;
  type metadata accessor for ICUListFormatter();
  uint64_t v62 = swift_allocObject();
  swift_bridgeObjectRetain();
  if (v12 > 2)
  {
    __break(1u);
    __break(1u);
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v18 = ulistfmt_openForType();
    swift_release();
    if (!v18)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    uint64_t v7 = v13;
    *(void *)(v62 + 16) = v18;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)v15);
    if (v63 >= *(void *)(*(void *)(v13 + 16) + 16)) {
      swift_bridgeObjectRetain();
    }
    else {
      *uint64_t v14 = MEMORY[0x1E4FBC868];
    }
    uint64_t v19 = v65;
    __n128 v9 = (os_unfair_lock_s *)v11;
    uint64_t v16 = v62;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v63 = v65;
    uint64_t v64 = *v14;
    *uint64_t v14 = 0x8000000000000000;
    uint64_t v58 = v66;
    Swift::UInt v59 = v67;
    uint64_t v13 = v12;
    uint64_t v15 = v64;
    unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v65, v66, v67, v12);
    uint64_t v22 = *(void *)(v64 + 16);
    BOOL v23 = (v21 & 1) == 0;
    uint64_t v24 = v22 + v23;
    if (!__OFADD__(v22, v23))
    {
      LOBYTE(v14) = v21;
      if (*(void *)(v64 + 24) < v24)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
        uint64_t v25 = v64;
        uint64_t v27 = v66;
        uint64_t v26 = v67;
        unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v65, v66, v67, v12);
        if ((v14 & 1) != (v29 & 1)) {
          goto LABEL_61;
        }
        unint64_t v17 = v28;
        __n128 v9 = v61;
        if ((v14 & 1) == 0) {
          goto LABEL_55;
        }
LABEL_17:
        uint64_t v30 = *(void *)(v25 + 56);
        uint64_t v31 = 8 * v17;
        swift_release();
        *(void *)(v30 + v31) = v16;
LABEL_56:
        *(void *)(v7 + 16) = v25;
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(v9);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_57;
      }
      __n128 v9 = v61;
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v25 = v64;
        uint64_t v27 = v66;
        uint64_t v26 = v67;
        if (v21) {
          goto LABEL_17;
        }
LABEL_55:
        specialized _NativeDictionary._insert(at:key:value:)(v17, v19, v27, v26, v13, v16, (void *)v25);
        swift_bridgeObjectRetain();
        goto LABEL_56;
      }
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_20:
  unint64_t v55 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUListFormatter.Signature, ICUListFormatter>);
  uint64_t v32 = static _DictionaryStorage.copy(original:)();
  uint64_t v25 = v32;
  if (!*(void *)(v15 + 16))
  {
LABEL_54:
    swift_bridgeObjectRelease();
    uint64_t v19 = v63;
    uint64_t v27 = v58;
    uint64_t v26 = v59;
    unint64_t v17 = v55;
    if (v14) {
      goto LABEL_17;
    }
    goto LABEL_55;
  }
  uint64_t v53 = v15;
  uint64_t v54 = v13;
  unint64_t v33 = (char *)(v32 + 64);
  int8x16_t v57 = (char *)(v15 + 64);
  unint64_t v34 = (unint64_t)((1 << *(unsigned char *)(v25 + 32)) + 63) >> 6;
  if (v25 != v15 || v33 >= &v57[8 * v34]) {
    memmove(v33, v57, 8 * v34);
  }
  int64_t v35 = 0;
  *(void *)(v25 + 16) = *(void *)(v15 + 16);
  uint64_t v36 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v37 = -1;
  if (v36 < 64) {
    uint64_t v37 = ~(-1 << v36);
  }
  unint64_t v38 = v37 & *(void *)(v15 + 64);
  int64_t v56 = (unint64_t)(v36 + 63) >> 6;
  uint64_t v7 = v60;
  __n128 v9 = v61;
  uint64_t v16 = v62;
  while (1)
  {
    if (v38)
    {
      unint64_t v39 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      unint64_t v40 = v39 | (v35 << 6);
      goto LABEL_28;
    }
    int64_t v48 = v35 + 1;
    if (__OFADD__(v35, 1))
    {
      __break(1u);
      goto LABEL_59;
    }
    if (v48 >= v56) {
      goto LABEL_54;
    }
    unint64_t v49 = *(void *)&v57[8 * v48];
    int64_t v50 = v35 + 1;
    if (!v49)
    {
      int64_t v50 = v35 + 2;
      if (v35 + 2 >= v56) {
        goto LABEL_54;
      }
      unint64_t v49 = *(void *)&v57[8 * v50];
      if (!v49)
      {
        int64_t v50 = v35 + 3;
        if (v35 + 3 >= v56) {
          goto LABEL_54;
        }
        unint64_t v49 = *(void *)&v57[8 * v50];
        if (!v49)
        {
          int64_t v50 = v35 + 4;
          if (v35 + 4 >= v56) {
            goto LABEL_54;
          }
          unint64_t v49 = *(void *)&v57[8 * v50];
          if (!v49)
          {
            int64_t v50 = v35 + 5;
            if (v35 + 5 >= v56) {
              goto LABEL_54;
            }
            unint64_t v49 = *(void *)&v57[8 * v50];
            if (!v49)
            {
              int64_t v50 = v35 + 6;
              if (v35 + 6 >= v56) {
                goto LABEL_54;
              }
              unint64_t v49 = *(void *)&v57[8 * v50];
              if (!v49)
              {
                int64_t v50 = v35 + 7;
                if (v35 + 7 >= v56) {
                  goto LABEL_54;
                }
                unint64_t v49 = *(void *)&v57[8 * v50];
                if (!v49)
                {
                  int64_t v50 = v35 + 8;
                  if (v35 + 8 >= v56) {
                    goto LABEL_54;
                  }
                  unint64_t v49 = *(void *)&v57[8 * v50];
                  if (!v49) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_53:
    unint64_t v38 = (v49 - 1) & v49;
    int64_t v35 = v50;
    unint64_t v40 = __clz(__rbit64(v49)) + (v50 << 6);
LABEL_28:
    uint64_t v41 = 32 * v40;
    uint64_t v42 = *(void *)(v15 + 48) + 32 * v40;
    uint64_t v43 = *(void *)(v42 + 8);
    uint64_t v44 = 8 * v40;
    uint64_t v45 = *(void *)(*(void *)(v15 + 56) + v44);
    uint64_t v46 = *(void *)(v25 + 48) + v41;
    long long v47 = *(_OWORD *)(v42 + 16);
    *(void *)uint64_t v46 = *(void *)v42;
    *(void *)(v46 + 8) = v43;
    *(_OWORD *)(v46 + 16) = v47;
    *(void *)(*(void *)(v25 + 56) + v44) = v45;
    swift_bridgeObjectRetain();
    swift_retain();
  }
  int64_t v51 = v35 + 9;
  if (v35 + 9 >= v56) {
    goto LABEL_54;
  }
  unint64_t v49 = *(void *)&v57[8 * v51];
  if (v49)
  {
    int64_t v50 = v35 + 9;
    uint64_t v7 = v60;
    __n128 v9 = v61;
    uint64_t v15 = v53;
    uint64_t v13 = v54;
    uint64_t v16 = v62;
    goto LABEL_53;
  }
  while (1)
  {
    int64_t v50 = v51 + 1;
    if (__OFADD__(v51, 1)) {
      break;
    }
    uint64_t v7 = v60;
    __n128 v9 = v61;
    uint64_t v15 = v53;
    uint64_t v13 = v54;
    uint64_t v16 = v62;
    if (v50 >= v56) {
      goto LABEL_54;
    }
    unint64_t v49 = *(void *)&v57[8 * v50];
    ++v51;
    if (v49) {
      goto LABEL_53;
    }
  }
LABEL_60:
  __break(1u);
LABEL_61:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  os_unfair_lock_s *v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  Swift::UInt v11;
  Swift::UInt v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  char v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  long long v47;
  int64_t v48;
  unint64_t v49;
  int64_t v50;
  int64_t v51;
  uint64_t result;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int64_t v56;
  char *v57;
  uint64_t v58;
  Swift::UInt v59;
  uint64_t v60;
  os_unfair_lock_s *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  Swift::UInt v67;
  uint64_t v68[3];

  v68[1] = *MEMORY[0x1E4F143B8];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 64);
  swift_unknownObjectRetain();
  uint64_t v7 = v6(ObjectType, a3);
  __n128 v9 = v8;
  uint64_t v10 = swift_unknownObjectRelease();
  Swift::UInt v12 = a1;
  if (one-time initialization token for cache != -1) {
    uint64_t v10 = swift_once();
  }
  uint64_t v13 = *(void *)algn_1E8EDF408;
  uint64_t v63 = static ICUListFormatter.cache;
  uint64_t v65 = v7;
  uint64_t v66 = (uint64_t)v9;
  Swift::UInt v11 = (a1 >> 8) & 1;
  Swift::UInt v67 = v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (uint64_t *)(v13 + 16);
  uint64_t v15 = v13 + 24;
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 24));
  closure #1 in FormatterCache.formatter(for:creator:)specialized partial apply(v13 + 16, v68);
  os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 24));
  swift_release();
  uint64_t v16 = v68[0];
  if (v68[0])
  {
    swift_bridgeObjectRelease();
LABEL_57:
    swift_release();
    return v16;
  }
  uint64_t v60 = v13;
  uint64_t v61 = (os_unfair_lock_s *)(v13 + 24);
  uint64_t v16 = v63;
  type metadata accessor for ICUListFormatter();
  uint64_t v62 = swift_allocObject();
  swift_bridgeObjectRetain();
  if (v12 > 2)
  {
    __break(1u);
    __break(1u);
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v18 = ulistfmt_openForType();
    swift_release();
    if (!v18)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    uint64_t v7 = v13;
    *(void *)(v62 + 16) = v18;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)v15);
    if (v63 >= *(void *)(*(void *)(v13 + 16) + 16)) {
      swift_bridgeObjectRetain();
    }
    else {
      *uint64_t v14 = MEMORY[0x1E4FBC868];
    }
    uint64_t v19 = v65;
    __n128 v9 = (os_unfair_lock_s *)v11;
    uint64_t v16 = v62;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v63 = v65;
    uint64_t v64 = *v14;
    *uint64_t v14 = 0x8000000000000000;
    uint64_t v58 = v66;
    Swift::UInt v59 = v67;
    uint64_t v13 = v12;
    uint64_t v15 = v64;
    unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v65, v66, v67, v12);
    uint64_t v22 = *(void *)(v64 + 16);
    BOOL v23 = (v21 & 1) == 0;
    uint64_t v24 = v22 + v23;
    if (!__OFADD__(v22, v23))
    {
      LOBYTE(v14) = v21;
      if (*(void *)(v64 + 24) < v24)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
        uint64_t v25 = v64;
        uint64_t v27 = v66;
        uint64_t v26 = v67;
        unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v65, v66, v67, v12);
        if ((v14 & 1) != (v29 & 1)) {
          goto LABEL_61;
        }
        unint64_t v17 = v28;
        __n128 v9 = v61;
        if ((v14 & 1) == 0) {
          goto LABEL_55;
        }
LABEL_17:
        uint64_t v30 = *(void *)(v25 + 56);
        uint64_t v31 = 8 * v17;
        swift_release();
        *(void *)(v30 + v31) = v16;
LABEL_56:
        *(void *)(v7 + 16) = v25;
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(v9);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_57;
      }
      __n128 v9 = v61;
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v25 = v64;
        uint64_t v27 = v66;
        uint64_t v26 = v67;
        if (v21) {
          goto LABEL_17;
        }
LABEL_55:
        specialized _NativeDictionary._insert(at:key:value:)(v17, v19, v27, v26, v13, v16, (void *)v25);
        swift_bridgeObjectRetain();
        goto LABEL_56;
      }
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_20:
  unint64_t v55 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUListFormatter.Signature, ICUListFormatter>);
  uint64_t v32 = static _DictionaryStorage.copy(original:)();
  uint64_t v25 = v32;
  if (!*(void *)(v15 + 16))
  {
LABEL_54:
    swift_bridgeObjectRelease();
    uint64_t v19 = v63;
    uint64_t v27 = v58;
    uint64_t v26 = v59;
    unint64_t v17 = v55;
    if (v14) {
      goto LABEL_17;
    }
    goto LABEL_55;
  }
  uint64_t v53 = v15;
  uint64_t v54 = v13;
  unint64_t v33 = (char *)(v32 + 64);
  int8x16_t v57 = (char *)(v15 + 64);
  unint64_t v34 = (unint64_t)((1 << *(unsigned char *)(v25 + 32)) + 63) >> 6;
  if (v25 != v15 || v33 >= &v57[8 * v34]) {
    memmove(v33, v57, 8 * v34);
  }
  int64_t v35 = 0;
  *(void *)(v25 + 16) = *(void *)(v15 + 16);
  uint64_t v36 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v37 = -1;
  if (v36 < 64) {
    uint64_t v37 = ~(-1 << v36);
  }
  unint64_t v38 = v37 & *(void *)(v15 + 64);
  int64_t v56 = (unint64_t)(v36 + 63) >> 6;
  uint64_t v7 = v60;
  __n128 v9 = v61;
  uint64_t v16 = v62;
  while (1)
  {
    if (v38)
    {
      unint64_t v39 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      unint64_t v40 = v39 | (v35 << 6);
      goto LABEL_28;
    }
    int64_t v48 = v35 + 1;
    if (__OFADD__(v35, 1))
    {
      __break(1u);
      goto LABEL_59;
    }
    if (v48 >= v56) {
      goto LABEL_54;
    }
    unint64_t v49 = *(void *)&v57[8 * v48];
    int64_t v50 = v35 + 1;
    if (!v49)
    {
      int64_t v50 = v35 + 2;
      if (v35 + 2 >= v56) {
        goto LABEL_54;
      }
      unint64_t v49 = *(void *)&v57[8 * v50];
      if (!v49)
      {
        int64_t v50 = v35 + 3;
        if (v35 + 3 >= v56) {
          goto LABEL_54;
        }
        unint64_t v49 = *(void *)&v57[8 * v50];
        if (!v49)
        {
          int64_t v50 = v35 + 4;
          if (v35 + 4 >= v56) {
            goto LABEL_54;
          }
          unint64_t v49 = *(void *)&v57[8 * v50];
          if (!v49)
          {
            int64_t v50 = v35 + 5;
            if (v35 + 5 >= v56) {
              goto LABEL_54;
            }
            unint64_t v49 = *(void *)&v57[8 * v50];
            if (!v49)
            {
              int64_t v50 = v35 + 6;
              if (v35 + 6 >= v56) {
                goto LABEL_54;
              }
              unint64_t v49 = *(void *)&v57[8 * v50];
              if (!v49)
              {
                int64_t v50 = v35 + 7;
                if (v35 + 7 >= v56) {
                  goto LABEL_54;
                }
                unint64_t v49 = *(void *)&v57[8 * v50];
                if (!v49)
                {
                  int64_t v50 = v35 + 8;
                  if (v35 + 8 >= v56) {
                    goto LABEL_54;
                  }
                  unint64_t v49 = *(void *)&v57[8 * v50];
                  if (!v49) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_53:
    unint64_t v38 = (v49 - 1) & v49;
    int64_t v35 = v50;
    unint64_t v40 = __clz(__rbit64(v49)) + (v50 << 6);
LABEL_28:
    uint64_t v41 = 32 * v40;
    uint64_t v42 = *(void *)(v15 + 48) + 32 * v40;
    uint64_t v43 = *(void *)(v42 + 8);
    uint64_t v44 = 8 * v40;
    uint64_t v45 = *(void *)(*(void *)(v15 + 56) + v44);
    uint64_t v46 = *(void *)(v25 + 48) + v41;
    long long v47 = *(_OWORD *)(v42 + 16);
    *(void *)uint64_t v46 = *(void *)v42;
    *(void *)(v46 + 8) = v43;
    *(_OWORD *)(v46 + 16) = v47;
    *(void *)(*(void *)(v25 + 56) + v44) = v45;
    swift_bridgeObjectRetain();
    swift_retain();
  }
  int64_t v51 = v35 + 9;
  if (v35 + 9 >= v56) {
    goto LABEL_54;
  }
  unint64_t v49 = *(void *)&v57[8 * v51];
  if (v49)
  {
    int64_t v50 = v35 + 9;
    uint64_t v7 = v60;
    __n128 v9 = v61;
    uint64_t v15 = v53;
    uint64_t v13 = v54;
    uint64_t v16 = v62;
    goto LABEL_53;
  }
  while (1)
  {
    int64_t v50 = v51 + 1;
    if (__OFADD__(v51, 1)) {
      break;
    }
    uint64_t v7 = v60;
    __n128 v9 = v61;
    uint64_t v15 = v53;
    uint64_t v13 = v54;
    uint64_t v16 = v62;
    if (v50 >= v56) {
      goto LABEL_54;
    }
    unint64_t v49 = *(void *)&v57[8 * v50];
    ++v51;
    if (v49) {
      goto LABEL_53;
    }
  }
LABEL_60:
  __break(1u);
LABEL_61:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t ListFormatStyle.Width.init(rawValue:)@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 3;
  if (result < 3) {
    char v2 = result;
  }
  *a2 = v2;
  return result;
}

uint64_t ListFormatStyle.Width.rawValue.getter()
{
  return *v0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ListFormatStyle<A, B>.Width(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB570];

  return MEMORY[0x1F4185BB0](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ListFormatStyle<A, B>.Width(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB560];

  return MEMORY[0x1F4183DE0](a1, a2, WitnessTable, v5);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ListFormatStyle<A, B>.Width(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB560];

  return MEMORY[0x1F4183DF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance ListFormatStyle<A, B>.Width(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB560];

  return MEMORY[0x1F4183DE8](a1, a2, a3, WitnessTable, v7);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ListFormatStyle<A, B>.Width@<X0>(unint64_t *a1@<X0>, char *a2@<X8>)
{
  return ListFormatStyle.Width.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ListFormatStyle<A, B>.Width@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ListFormatStyle.Width.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ListFormatStyle<A, B>.Width()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ListFormatStyle<A, B>.Width()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t ListFormatStyle.ListType.init(rawValue:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!result) {
    char v2 = 0;
  }
  *a2 = v2;
  return result;
}

uint64_t ListFormatStyle.ListType.rawValue.getter()
{
  return *v0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ListFormatStyle<A, B>.ListType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB570];

  return MEMORY[0x1F4185BB0](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ListFormatStyle<A, B>.ListType(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB560];

  return MEMORY[0x1F4183DE0](a1, a2, WitnessTable, v5);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ListFormatStyle<A, B>.ListType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB560];

  return MEMORY[0x1F4183DF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance ListFormatStyle<A, B>.ListType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB560];

  return MEMORY[0x1F4183DE8](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ListFormatStyle<A, B>.ListType@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  return ListFormatStyle.ListType.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ListFormatStyle<A, B>.ListType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ListFormatStyle.ListType.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ListFormatStyle<A, B>.ListType()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ListFormatStyle<A, B>.ListType()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t ListFormatStyle.hash(into:)(uint64_t a1, int *a2)
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned char *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  unsigned char v42[144];
  unsigned char v43[8];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  char v60;
  void v61[18];
  unsigned char v62[144];
  unsigned char v63[152];
  uint64_t vars8;

  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + a2[13]));
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + a2[14]));
  uint64_t v5 = *(void *)(v2 + a2[15] + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if ((v7(ObjectType, v5) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    __n128 v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
    swift_unknownObjectRetain();
    v9(v61, ObjectType, v5);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v62, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v63) == 1)
    {
      Hasher._combine(_:)(0);
      return swift_unknownObjectRelease();
    }
    outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v43, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v43[0] == 2)
    {
      uint64_t v10 = 0;
    }
    else
    {
      uint64_t v10 = v43[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v10);
    Swift::UInt v11 = v44;
    if (v44)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v11 + 16));
      Swift::UInt v12 = *(void *)(v11 + 16);
      if (v12)
      {
        outlined retain of LocalePreferences?((uint64_t)v62, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v13 = v11 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v13 += 16;
          --v12;
        }
        while (v12);
        swift_bridgeObjectRelease();
        if (!v45)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          if (!v46) {
            goto LABEL_16;
          }
          goto LABEL_23;
        }
LABEL_22:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v46)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          uint64_t v14 = v47;
          if (!v47) {
            goto LABEL_17;
          }
          goto LABEL_24;
        }
LABEL_23:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v14 = v47;
        if (!v47)
        {
LABEL_17:
          Hasher._combine(_:)(0);
          uint64_t v15 = v48;
          if (!v48)
          {
LABEL_18:
            Hasher._combine(_:)(0);
            goto LABEL_26;
          }
LABEL_25:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v15);
          swift_bridgeObjectRelease();
LABEL_26:
          uint64_t v18 = v49;
          unint64_t v17 = v50;
          uint64_t v20 = v51;
          uint64_t v19 = v52;
          char v21 = v53;
          if (v49)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v22 = v17;
            BOOL v23 = v20;
            uint64_t v24 = v19;
            uint64_t v25 = v21;
            uint64_t v26 = v18;
            _CFObject.hash(into:)();
            if (v17) {
              goto LABEL_28;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            uint64_t v31 = v21;
            uint64_t v32 = v17;
            unint64_t v33 = v20;
            unint64_t v34 = v19;
            if (v17)
            {
LABEL_28:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v27 = v17;
              _CFObject.hash(into:)();

              if (v20) {
                goto LABEL_29;
              }
              goto LABEL_34;
            }
          }
          Hasher._combine(_:)(0);
          if (v20)
          {
LABEL_29:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            unint64_t v28 = v20;
            _CFObject.hash(into:)();

            if (v19) {
              goto LABEL_30;
            }
            goto LABEL_35;
          }
LABEL_34:
          Hasher._combine(_:)(0);
          if (v19)
          {
LABEL_30:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            char v29 = v19;
            _CFObject.hash(into:)();

            if (v21)
            {
LABEL_31:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v30 = v21;
              _CFObject.hash(into:)();

              goto LABEL_37;
            }
LABEL_36:
            Hasher._combine(_:)(0);
            uint64_t v30 = 0;
LABEL_37:

            int64_t v35 = v54;
            if (v35)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v35);
              swift_bridgeObjectRelease();
              uint64_t v36 = v55;
              if (v55) {
                goto LABEL_39;
              }
            }
            else
            {
              Hasher._combine(_:)(0);
              uint64_t v36 = v55;
              if (v55)
              {
LABEL_39:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v36);
                swift_bridgeObjectRelease();
                if (v56)
                {
LABEL_40:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_44:
                  if (v57 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    uint64_t v37 = v57 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v37);
                  }
                  if (v58 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    unint64_t v38 = v58 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v38);
                  }
                  if (v59 == 2)
                  {
                    unint64_t v39 = 0;
                  }
                  else
                  {
                    unint64_t v39 = v59 & 1;
                    Hasher._combine(_:)(1u);
                  }
                  Hasher._combine(_:)(v39);
                  if (v60 == 2)
                  {
                    unint64_t v40 = 0;
                  }
                  else
                  {
                    uint64_t v41 = v60 & 1;
                    Hasher._combine(_:)(1u);
                    unint64_t v40 = v41;
                  }
                  Hasher._combine(_:)(v40);
                  outlined retain of LocalePreferences?((uint64_t)v62, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?((uint64_t)v62, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  return swift_unknownObjectRelease();
                }
LABEL_43:
                Hasher._combine(_:)(0);
                goto LABEL_44;
              }
            }
            Hasher._combine(_:)(0);
            if (v56) {
              goto LABEL_40;
            }
            goto LABEL_43;
          }
LABEL_35:
          Hasher._combine(_:)(0);
          if (v21) {
            goto LABEL_31;
          }
          goto LABEL_36;
        }
LABEL_24:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v14);
        swift_bridgeObjectRelease();
        uint64_t v15 = v48;
        if (!v48) {
          goto LABEL_18;
        }
        goto LABEL_25;
      }
      outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v42, &demangling cache variable for type metadata for LocalePreferences?);
      uint64_t v16 = v42;
    }
    else
    {
      Hasher._combine(_:)(0);
      uint64_t v16 = v43;
    }
    outlined retain of LocalePreferences(v16);
    if (!v45) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
  Hasher._combine(_:)(1u);

  return swift_unknownObjectRelease();
}

uint64_t ListFormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74537265626D656DLL && a2 == 0xEB00000000656C79;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6874646977 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x657079547473696CLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t ListFormatStyle.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x74537265626D656DLL;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6874646977;
      break;
    case 2:
      uint64_t result = 0x657079547473696CLL;
      break;
    case 3:
      uint64_t result = 0x656C61636F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ListFormatStyle<A, B>.CodingKeys()
{
  return ListFormatStyle.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ListFormatStyle<A, B>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = ListFormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance ListFormatStyle<A, B>.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized FloatingPointParseStrategy.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ListFormatStyle<A, B>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ListFormatStyle<A, B>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t ListFormatStyle.encode(to:)(void *a1, void *a2)
{
  uint64_t v3 = a2[2];
  uint64_t v5 = a2[4];
  uint64_t v4 = a2[5];
  uint64_t v18 = a2[3];
  uint64_t v19 = a2;
  *(void *)&long long v24 = v3;
  *((void *)&v24 + 1) = v18;
  uint64_t v25 = v5;
  uint64_t v26 = v4;
  uint64_t v20 = v4;
  uint64_t v21 = v3;
  type metadata accessor for ListFormatStyle.CodingKeys();
  swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  __n128 v9 = (char *)&v18 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v11 = v21;
  uint64_t v10 = v22;
  uint64_t v12 = v6;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v24) = 0;
  uint64_t v13 = v5;
  uint64_t v14 = v23;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v14) {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v12);
  }
  uint64_t v23 = v7;
  *(void *)&long long v24 = v11;
  uint64_t v17 = v18;
  uint64_t v16 = v19;
  char v28 = *(unsigned char *)(v10 + *((int *)v19 + 13));
  char v27 = 1;
  *((void *)&v24 + 1) = v18;
  uint64_t v25 = v13;
  uint64_t v26 = v20;
  type metadata accessor for ListFormatStyle.Width();
  swift_getWitnessTable();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  char v28 = *(unsigned char *)(v10 + *((int *)v16 + 14));
  char v27 = 2;
  *(void *)&long long v24 = v11;
  *((void *)&v24 + 1) = v17;
  uint64_t v25 = v13;
  uint64_t v26 = v20;
  type metadata accessor for ListFormatStyle.ListType();
  swift_getWitnessTable();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  long long v24 = *(_OWORD *)(v10 + *((int *)v16 + 15));
  char v28 = 3;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v9, v12);
}

Swift::Int ListFormatStyle.hashValue.getter(int *a1)
{
  void (*v7)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned char *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  Swift::UInt v35;
  Swift::UInt v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  unsigned char v41[144];
  unsigned char v42[8];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  char v59;
  void v60[18];
  unsigned char v61[144];
  unsigned char v62[144];
  unsigned char v63[72];

  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + a1[13]));
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + a1[14]));
  uint64_t v3 = *(void *)(v1 + a1[15] + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  if (v5(ObjectType, v3))
  {
    Swift::UInt8 v6 = 1;
LABEL_5:
    Hasher._combine(_:)(v6);
    goto LABEL_56;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 464);
  swift_unknownObjectRetain();
  v7(v60, ObjectType, v3);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v61, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v62, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v62) == 1)
  {
    Swift::UInt8 v6 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v42, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v42[0] == 2)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = v42[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v8);
  __n128 v9 = v43;
  if (!v43)
  {
    Hasher._combine(_:)(0);
    uint64_t v14 = v42;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v9 + 16));
  uint64_t v10 = *(void *)(v9 + 16);
  if (!v10)
  {
    outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v41, &demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v14 = v41;
LABEL_20:
    outlined retain of LocalePreferences(v14);
    if (!v44) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v11 = v9 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v11 += 16;
    --v10;
  }
  while (v10);
  swift_bridgeObjectRelease();
  if (!v44)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v45) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v45)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    uint64_t v12 = v46;
    if (!v46) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v12);
    swift_bridgeObjectRelease();
    uint64_t v13 = v47;
    if (!v47) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v12 = v46;
  if (v46) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  uint64_t v13 = v47;
  if (!v47)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v13);
  swift_bridgeObjectRelease();
LABEL_25:
  uint64_t v16 = v48;
  uint64_t v15 = v49;
  uint64_t v18 = v50;
  uint64_t v17 = v51;
  uint64_t v19 = v52;
  if (v48)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v20 = v15;
    uint64_t v21 = v18;
    uint64_t v22 = v17;
    uint64_t v23 = v19;
    long long v24 = v16;
    _CFObject.hash(into:)();
    if (v15) {
      goto LABEL_27;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    char v29 = v19;
    uint64_t v30 = v15;
    uint64_t v31 = v18;
    uint64_t v32 = v17;
    if (v15)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v25 = v15;
      _CFObject.hash(into:)();

      if (v18) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v18)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v26 = v18;
    _CFObject.hash(into:)();

    if (v17) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v19) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v17) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  char v27 = v17;
  _CFObject.hash(into:)();

  if (v19)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    char v28 = v19;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  char v28 = 0;
LABEL_36:

  unint64_t v33 = v53;
  if (v33)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v33);
    swift_bridgeObjectRelease();
    unint64_t v34 = v54;
    if (v54) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v55) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  unint64_t v34 = v54;
  if (!v54) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v34);
  swift_bridgeObjectRelease();
  if (!v55) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v56 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    int64_t v35 = v56 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v35);
  }
  if (v57 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v36 = v57 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }
  if (v58 == 2)
  {
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v37 = v58 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v37);
  if (v59 == 2)
  {
    unint64_t v38 = 0;
  }
  else
  {
    unint64_t v39 = v59 & 1;
    Hasher._combine(_:)(1u);
    unint64_t v38 = v39;
  }
  Hasher._combine(_:)(v38);
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

uint64_t ListFormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v38 = a6;
  uint64_t v42 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v43 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v48 = v12;
  *((void *)&v48 + 1) = v13;
  uint64_t v49 = v14;
  uint64_t v50 = v15;
  type metadata accessor for ListFormatStyle.CodingKeys();
  swift_getWitnessTable();
  uint64_t v46 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v39 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46);
  uint64_t v17 = (char *)&v34 - v16;
  *(void *)&long long v48 = a2;
  *((void *)&v48 + 1) = a3;
  uint64_t v40 = a3;
  uint64_t v41 = a5;
  uint64_t v44 = a4;
  uint64_t v49 = a4;
  uint64_t v50 = a5;
  uint64_t v18 = type metadata accessor for ListFormatStyle();
  uint64_t v37 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v34 - v19;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v45 = v17;
  uint64_t v21 = (uint64_t)v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v21) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v22 = v40;
  uint64_t v23 = v41;
  uint64_t v36 = v18;
  uint64_t v24 = v39;
  long long v47 = a1;
  LOBYTE(v48) = 0;
  uint64_t v25 = v42;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v26 = a2;
  char v27 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
  int64_t v35 = v20;
  v27(v20, v43, a2);
  *(void *)&long long v48 = a2;
  *((void *)&v48 + 1) = v22;
  uint64_t v28 = v22;
  uint64_t v49 = v44;
  uint64_t v50 = v23;
  uint64_t v29 = v23;
  type metadata accessor for ListFormatStyle.Width();
  LOBYTE(v48) = 1;
  swift_getWitnessTable();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v30 = v35;
  uint64_t v31 = v36;
  v35[*(int *)(v36 + 52)] = v51;
  *(void *)&long long v48 = v26;
  *((void *)&v48 + 1) = v28;
  uint64_t v49 = v44;
  uint64_t v50 = v29;
  type metadata accessor for ListFormatStyle.ListType();
  LOBYTE(v48) = 2;
  swift_getWitnessTable();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v30[*(int *)(v31 + 56)] = v51;
  char v51 = 3;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v45, v46);
  *(_OWORD *)&v30[*(int *)(v31 + 60)] = v48;
  uint64_t v32 = v37;
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 16))(v38, v30, v31);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v30, v31);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ListFormatStyle<A, B>@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return ListFormatStyle.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ListFormatStyle<A, B>(void *a1, void *a2)
{
  return ListFormatStyle.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ListFormatStyle<A, B>(uint64_t a1, int *a2)
{
  Hasher.init(_seed:)();
  ListFormatStyle.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ListFormatStyle<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return static ListFormatStyle.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

Swift::String __swiftcall StringStyle.format(_:)(Swift::String a1)
{
  uint64_t object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  swift_bridgeObjectRetain();
  uint64_t v3 = countAndFlagsBits;
  uint64_t v4 = object;
  result._uint64_t object = v4;
  result._uint64_t countAndFlagsBits = v3;
  return result;
}

uint64_t static StringStyle.== infix(_:_:)()
{
  return 1;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance StringStyle.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StringStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StringStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t StringStyle.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StringStyle.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int StringStyle.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t StringStyle.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance StringStyle(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance StringStyle(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StringStyle.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance StringStyle()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StringStyle()
{
  return Hasher._finalize()();
}

uint64_t Sequence<>.formatted()(uint64_t a1, void (*a2)(char *, char *, uint64_t))
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v4 = static LocaleCache.cache + 16;
  uint64_t v5 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v5);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v4, &v14);
  os_unfair_lock_unlock(v5);
  swift_release_n();
  uint64_t v6 = v14;
  uint64_t v7 = _s10Foundation19_LocaleAutoupdatingCAcA01_B8ProtocolAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  specialized static ICUListFormatter.formatter<A, B>(for:)(0, v6, v7);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  MEMORY[0x1F4188790](v8);
  _OWORD v13[2] = a1;
  v13[3] = a2;
  uint64_t v13[4] = partial apply for specialized implicit closure #2 in implicit closure #1 in ListFormatStyle.format(_:);
  v13[5] = v9;
  uint64_t v10 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverOSSIsgnrzr_xSaySSGAGSTRzSSRsd__AGRsd_0_r_0_lIetMgnozo_Tp5((void (*)(uint64_t *__return_ptr, char *))partial apply for specialized thunk for @callee_guaranteed (@in_guaranteed A.FormatStyle.FormatInput) -> (@owned String), (uint64_t)v13, a1, a2);
  swift_release();
  uint64_t countAndFlagsBits = ICUListFormatter.format(strings:)((Swift::OpaquePointer)v10)._countAndFlagsBits;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t static FormatStyle.list<A, B>(memberStyle:type:width:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  double v11 = MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v15 = *v14;
  char v17 = *v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v13, v20, v19, v11);
  ListFormatStyle.init(memberStyle:)((uint64_t)v13, a2, a3, a4, a5, a6);
  v22[0] = a2;
  v22[1] = a3;
  v22[2] = a4;
  v22[3] = a5;
  uint64_t result = type metadata accessor for ListFormatStyle();
  *(unsigned char *)(a6 + *(int *)(result + 52)) = v17;
  *(unsigned char *)(a6 + *(int *)(result + 56)) = v15;
  return result;
}

uint64_t sub_181BA8EB8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return MEMORY[0x1F4186498](v0, v4, v5);
}

uint64_t type metadata accessor for ListFormatStyle.CodingKeys()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys);
  }
  return result;
}

uint64_t sub_181BA8FAC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in ListFormatStyle.format(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t partial apply for specialized thunk for @callee_guaranteed (@in_guaranteed A.FormatStyle.FormatInput) -> (@owned String)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(uint64_t (**)(void *))(v2 + 32);
  uint64_t v5 = a1[1];
  v8[0] = *a1;
  v8[1] = v5;
  uint64_t result = v4(v8);
  *a2 = result;
  a2[1] = v7;
  return result;
}

uint64_t base witness table accessor for Equatable in ListFormatStyle<A, B>.Width()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in ListFormatStyle<A, B>.ListType()
{
  return swift_getWitnessTable();
}

void *initializeBufferWithCopyOfBuffer for ListFormatStyle(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 9) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(void *, void *))(v5 + 16))(a1, a2);
    uint64_t v10 = (char *)v4 + v6;
    *uint64_t v10 = *((unsigned char *)a2 + v6);
    v10[1] = *((unsigned char *)a2 + v6 + 1);
    *(_OWORD *)(((unint64_t)v4 + v6 + 9) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)a2 + v6 + 9) & 0xFFFFFFFFFFFFFFF8);
    swift_unknownObjectRetain();
  }
  return v4;
}

uint64_t initializeWithCopy for ListFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  int v7 = (unsigned char *)(v6 + a1);
  uint64_t v8 = (unsigned char *)(v6 + a2);
  unsigned char *v7 = *v8;
  v7[1] = v8[1];
  *(_OWORD *)((unint64_t)(v7 + 9) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)(v8 + 9) & 0xFFFFFFFFFFFFFFF8);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ListFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  int v7 = (unsigned char *)(v6 + a1);
  uint64_t v8 = (unsigned char *)(v6 + a2);
  unsigned char *v7 = *v8;
  v7[1] = v8[1];
  uint64_t v9 = (void *)((unint64_t)(v7 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)((unint64_t)(v8 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v9[1] = v11;
  return a1;
}

uint64_t initializeWithTake for ListFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  int v7 = (unsigned char *)(v6 + a1);
  uint64_t v8 = (unsigned char *)(v6 + a2);
  unsigned char *v7 = *v8;
  v7[1] = v8[1];
  *(_OWORD *)((unint64_t)(v7 + 9) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)(v8 + 9) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ListFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  int v7 = (unsigned char *)(v6 + a1);
  uint64_t v8 = (unsigned char *)(v6 + a2);
  unsigned char *v7 = *v8;
  v7[1] = v8[1];
  uint64_t v9 = (void *)((unint64_t)(v7 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)((unint64_t)(v8 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  swift_unknownObjectRelease();
  v9[1] = v11;
  return a1;
}

uint64_t getEnumTagSinglePayload for ListFormatStyle(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 9) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x181BA953CLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 9) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for ListFormatStyle(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 9) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 9) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 9) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 9) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 9) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x181BA9730);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 9] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

unsigned char *storeEnumTagSinglePayload for ListFormatStyle.Width(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    unsigned __int8 *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181BA9824);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          unsigned __int8 *result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ListFormatStyle.ListType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    unsigned __int8 *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181BA9918);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          unsigned __int8 *result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for StringStyle.CodingKeys()
{
  return &unk_1ECA320F8;
}

unsigned char *storeEnumTagSinglePayload for ListFormatStyle.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    unsigned __int8 *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181BA9A1CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          unsigned __int8 *result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in ListFormatStyle<A, B>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in ListFormatStyle<A, B>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in ListFormatStyle<A, B>.CodingKeys()
{
  return swift_getWitnessTable();
}

void *specialized Sequence.compactMap<A>(_:)(void (*a1)(_OWORD *__return_ptr, long long *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a3 + 16);
  if (!v5) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = a3;
  unsigned int v8 = (void *)(a3 + 48);
  uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
  do
  {
    uint64_t v11 = *v8;
    long long v21 = *((_OWORD *)v8 - 1);
    uint64_t v22 = v11;
    a1(v18, &v21);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9;
    }
    if ((v20 & 1) == 0)
    {
      long long v16 = v18[1];
      long long v17 = v18[0];
      uint64_t v12 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      }
      unint64_t v14 = v9[2];
      unint64_t v13 = v9[3];
      if (v14 >= v13 >> 1) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v9);
      }
      v9[2] = v14 + 1;
      unint64_t v10 = &v9[5 * v14];
      *((_OWORD *)v10 + 2) = v17;
      *((_OWORD *)v10 + 3) = v16;
      v10[8] = v12;
    }
    v8 += 3;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  return v9;
}

void *specialized Sequence.compactMap<A>(_:)(void (*a1)(_OWORD *__return_ptr, void *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v21[0] = a3;
  v21[1] = a4;
  v21[2] = a5;
  a1(v18, v21);
  if (!v5)
  {
    if (v20)
    {
      return (void *)MEMORY[0x1E4FBC860];
    }
    else
    {
      long long v16 = v18[1];
      long long v17 = v18[0];
      uint64_t v7 = v19;
      unsigned int v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
      unint64_t v8 = v6[2];
      unint64_t v9 = v6[3];
      unint64_t v10 = v8 + 1;
      if (v8 >= v9 >> 1)
      {
        unint64_t v14 = v6[2];
        unint64_t v15 = v8 + 1;
        unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v8 + 1, 1, v6);
        unint64_t v8 = v14;
        unint64_t v10 = v15;
        unsigned int v6 = v13;
      }
      unint64_t v6[2] = v10;
      uint64_t v11 = &v6[5 * v8];
      *((_OWORD *)v11 + 2) = v17;
      *((_OWORD *)v11 + 3) = v16;
      v11[8] = v7;
    }
  }
  return v6;
}

void *specialized Sequence.compactMap<A>(_:)(void (*a1)(_OWORD *__return_ptr, void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  v18[0] = a3;
  v18[1] = a4;
  a1(v16, v18);
  if (!v4)
  {
    if (v17)
    {
      return (void *)MEMORY[0x1E4FBC860];
    }
    else
    {
      long long v14 = v16[1];
      long long v15 = v16[0];
      uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
      unint64_t v6 = v5[2];
      unint64_t v7 = v5[3];
      unint64_t v8 = v6 + 1;
      if (v6 >= v7 >> 1)
      {
        unint64_t v12 = v5[2];
        unint64_t v13 = v6 + 1;
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v6 + 1, 1, v5);
        unint64_t v6 = v12;
        unint64_t v8 = v13;
        uint64_t v5 = v11;
      }
      _OWORD v5[2] = v8;
      unint64_t v9 = &v5[4 * v6];
      *((_OWORD *)v9 + 2) = v15;
      *((_OWORD *)v9 + 3) = v14;
    }
  }
  return v5;
}

{
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  long long v14;
  long long v15;
  _OWORD v16[2];
  char v17;
  void v18[2];

  v18[0] = a3;
  v18[1] = a4;
  a1(v16, v18);
  if (!v4)
  {
    if (v17)
    {
      return (void *)MEMORY[0x1E4FBC860];
    }
    else
    {
      long long v14 = v16[1];
      long long v15 = v16[0];
      uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
      unint64_t v6 = v5[2];
      unint64_t v7 = v5[3];
      unint64_t v8 = v6 + 1;
      if (v6 >= v7 >> 1)
      {
        unint64_t v12 = v5[2];
        unint64_t v13 = v6 + 1;
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v6 + 1, 1, v5);
        unint64_t v6 = v12;
        unint64_t v8 = v13;
        uint64_t v5 = v11;
      }
      _OWORD v5[2] = v8;
      unint64_t v9 = &v5[4 * v6];
      *((_OWORD *)v9 + 2) = v15;
      *((_OWORD *)v9 + 3) = v14;
    }
  }
  return v5;
}

uint64_t DataProtocol.firstRange<A, B>(of:in:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  return DataProtocol.firstRange<A, B>(of:in:)(a1, a2, a6, a3, a7, a4, a5, a8);
}

uint64_t specialized DataProtocol.firstRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v30 = a6;
  uint64_t v11 = type metadata accessor for DispatchData();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  long long v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  char v17 = (char *)v27 - v16;
  v27[2] = lazy protocol witness table accessor for type DispatchData and conformance DispatchData((unint64_t *)&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v29 = a3;
  uint64_t v30 = a5;
  uint64_t v28 = a1;
  uint64_t v18 = dispatch thunk of Collection.count.getter();
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v19(v17, v6, v11);
  uint64_t v33 = v36;
  uint64_t v34 = v35;
  if (!v18)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
    return 0;
  }
  v27[1] = lazy protocol witness table accessor for type DispatchData and conformance DispatchData(&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData);
  uint64_t v20 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
  long long v21 = *(void (**)(char *, uint64_t))(v12 + 8);
  v21(v17, v11);
  if (v20 < v18) {
    return 0;
  }
  uint64_t v22 = v35;
  uint64_t v23 = v36;
  uint64_t v32 = v35;
  while (1)
  {
    v19(v14, v7, v11);
    uint64_t v31 = v23;
    if (v22 >= v23)
    {
      v21(v14, v11);
      return 0;
    }
    uint64_t v24 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
    v21(v14, v11);
    if (v24 < v18) {
      return 0;
    }
    uint64_t v25 = v32;
    if (specialized DataProtocol.matches<A>(_:from:)(v28, v32, v29, v30)) {
      break;
    }
    dispatch thunk of Collection.index(after:)();
    uint64_t v22 = v31;
    uint64_t v32 = v31;
    uint64_t v23 = v36;
  }
  uint64_t result = dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  if (v31 >= v25) {
    return v25;
  }
  __break(1u);
  return result;
}

{
  uint64_t result;
  int64_t v11;
  uint64_t v12;
  int64_t v14;
  int64_t v15;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [UInt8] and conformance [A], &demangling cache variable for type metadata for [UInt8]);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t result = dispatch thunk of Collection.count.getter();
  if (!result) {
    return 0;
  }
  uint64_t v11 = v14;
  if (__OFSUB__(v15, v14))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  else
  {
    uint64_t v12 = result;
    if (v15 - v14 < result || v14 >= v15) {
      return 0;
    }
    while (1)
    {
      if (__OFSUB__(v15, v11))
      {
        __break(1u);
        goto LABEL_18;
      }
      if (v15 - v11 < v12) {
        return 0;
      }
      uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v11, a3, a4, a6);
      if (result) {
        break;
      }
      if (v15 == ++v11) {
        return 0;
      }
    }
    if (__OFADD__(v11, v12)) {
      goto LABEL_19;
    }
    if (v11 + v12 >= v11) {
      return v11;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t result;
  int64_t v11;
  uint64_t v12;
  int64_t v14;
  int64_t v15;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousArray<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ContiguousArray<UInt8> and conformance ContiguousArray<A>, &demangling cache variable for type metadata for ContiguousArray<UInt8>);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t result = dispatch thunk of Collection.count.getter();
  if (!result) {
    return 0;
  }
  uint64_t v11 = v14;
  if (__OFSUB__(v15, v14))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  else
  {
    uint64_t v12 = result;
    if (v15 - v14 < result || v14 >= v15) {
      return 0;
    }
    while (1)
    {
      if (__OFSUB__(v15, v11))
      {
        __break(1u);
        goto LABEL_18;
      }
      if (v15 - v11 < v12) {
        return 0;
      }
      uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v11, a3, a4, a6);
      if (result) {
        break;
      }
      if (v15 == ++v11) {
        return 0;
      }
    }
    if (__OFADD__(v11, v12)) {
      goto LABEL_19;
    }
    if (v11 + v12 >= v11) {
      return v11;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.firstRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  lazy protocol witness table accessor for type DispatchData.Region and conformance DispatchData.Region();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t result = dispatch thunk of Collection.count.getter();
  if (result)
  {
    uint64_t v15 = a5 + a4;
    if (__OFADD__(a5, a4))
    {
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    if (v15 < v20) {
      goto LABEL_28;
    }
    uint64_t v16 = v19;
    if (v19 < a5 || v15 < v19 || v20 < a5) {
      goto LABEL_28;
    }
    if (__OFSUB__(v20, v19))
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    uint64_t v17 = result;
    uint64_t result = 0;
    if (v19 < v20 && v20 - v19 >= v17)
    {
      uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v19, a3, a4, a5, a6, a8);
      if (result)
      {
LABEL_17:
        uint64_t v18 = v16 + v17;
        if (!__OFADD__(v16, v17))
        {
          if (v18 >= a5 && v15 >= v18)
          {
            if (v18 >= v16) {
              return v16;
            }
            goto LABEL_32;
          }
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
          return result;
        }
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      while (v15 != v16)
      {
        if (v20 - 1 == v16) {
          return 0;
        }
        if (v19 + 1 < a5) {
          goto LABEL_25;
        }
        if (__OFSUB__(v20, ++v16)) {
          goto LABEL_26;
        }
        if (v20 - v16 < v17) {
          return 0;
        }
        uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v16, a3, a4, a5, a6, a8);
        if (result) {
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
  }
  return result;
}

uint64_t specialized DataProtocol.firstRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  lazy protocol witness table accessor for type Data and conformance Data();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v12 = dispatch thunk of Collection.count.getter();
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = v17;
    if (specialized RandomAccessCollection<>.distance(from:to:)(v17, v18, a3, a4) >= v12 && v17 < v18)
    {
      while (specialized RandomAccessCollection<>.distance(from:to:)(v14, v18, a3, a4) >= v13)
      {
        if (specialized DataProtocol.matches<A>(_:from:)(a1, v14, a3, a4, a5, a7))
        {
          uint64_t result = specialized RandomAccessCollection<>.index(_:offsetBy:)(v14, v13, a3, a4);
          if (result >= v14) {
            return v14;
          }
          __break(1u);
          return result;
        }
        if (v18 == ++v14) {
          return 0;
        }
      }
    }
  }
  return 0;
}

uint64_t specialized DataProtocol.firstRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8> and conformance UnsafeBufferPointer<A>, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v12 = dispatch thunk of Collection.count.getter();
  uint64_t v13 = v19;
  if (v12) {
    BOOL v14 = v20 - v19 < v12;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14 || v20 <= v19) {
    return 0;
  }
  uint64_t v17 = v12;
  uint64_t v18 = ~v19 + v20;
  while (1)
  {
    uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v13, a3, a4, a5, a7);
    if (result) {
      break;
    }
    uint64_t result = 0;
    if (++v13 < v20)
    {
      BOOL v14 = v18-- < v17;
      if (!v14) {
        continue;
      }
    }
    return result;
  }
  if (v17 + v13 >= v13) {
    return v13;
  }
  __break(1u);
  return result;
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v12 = dispatch thunk of Collection.count.getter();
  if (v12)
  {
    uint64_t v13 = v12;
    if (specialized RandomAccessCollection<>.distance(from:to:)(v19, v20, a3, a4) >= v12 && v19 < v20)
    {
      if (a3) {
        uint64_t v15 = a4 - a3;
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = v19;
      while (1)
      {
        if (specialized RandomAccessCollection<>.distance(from:to:)(v16, v20, a3, a4) < v13) {
          return 0;
        }
        uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v16, a3, a4, a5, a7);
        if (result) {
          break;
        }
        if (v19 < 0 || v16 >= v15)
        {
          __break(1u);
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
        if (v20 == ++v16) {
          return 0;
        }
      }
      uint64_t v18 = v16 + v13;
      if (__OFADD__(v16, v13)) {
        goto LABEL_24;
      }
      if (v18 < 0 || v15 < v18)
      {
LABEL_25:
        __break(1u);
      }
      else if (v18 >= v16)
      {
        return v16;
      }
      __break(1u);
      return result;
    }
  }
  return 0;
}

uint64_t specialized DataProtocol.firstRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ArraySlice<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ArraySlice<UInt8> and conformance ArraySlice<A>, (uint64_t *)&demangling cache variable for type metadata for ArraySlice<UInt8>);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t result = dispatch thunk of Collection.count.getter();
  if (!result) {
    return 0;
  }
  uint64_t v15 = v18;
  if (__OFSUB__(v19, v18))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  else
  {
    uint64_t v16 = result;
    if (v19 - v18 < result || v18 >= v19) {
      return 0;
    }
    while (1)
    {
      if (__OFSUB__(v19, v15))
      {
        __break(1u);
        goto LABEL_18;
      }
      if (v19 - v15 < v16) {
        return 0;
      }
      uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v15, a4, a5, a6, a7, a9);
      if (result) {
        break;
      }
      if (v19 == ++v15) {
        return 0;
      }
    }
    if (__OFADD__(v15, v16)) {
      goto LABEL_19;
    }
    if (v15 + v16 >= v15) {
      return v15;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.firstRange<A, B>(of:in:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EmptyCollection<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyCollection<UInt8> and conformance EmptyCollection<A>, &demangling cache variable for type metadata for EmptyCollection<UInt8>);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  if ((dispatch thunk of Collection.count.getter() & 0x8000000000000000) == 0 || v2 >= v3) {
    return 0;
  }
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.firstRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Repeated<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Repeated<UInt8> and conformance Repeated<A>, &demangling cache variable for type metadata for Repeated<UInt8>);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t result = dispatch thunk of Collection.count.getter();
  if (result)
  {
    if (v19 > a3 || (uint64_t v13 = v18, v18 > a3) || (v19 | v18) < 0)
    {
      __break(1u);
      goto LABEL_24;
    }
    uint64_t v14 = result;
    BOOL v15 = v19 - v18 < result || v19 <= v18;
    if (!v15)
    {
      uint64_t v16 = ~v18 + v19;
      while (1)
      {
        uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v13, a3, a4, a5, a7);
        if (result) {
          break;
        }
        uint64_t result = 0;
        if (++v13 < v19)
        {
          BOOL v15 = v16-- < v14;
          if (!v15) {
            continue;
          }
        }
        return result;
      }
      uint64_t v17 = v13 + v14;
      if (!__OFADD__(v13, v14))
      {
        if ((v17 & 0x8000000000000000) == 0 && v17 <= a3)
        {
          if (v17 >= v13) {
            return v13;
          }
          goto LABEL_26;
        }
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        return result;
      }
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    return 0;
  }
  return result;
}

uint64_t DataProtocol.firstRange<A, B>(of:in:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v9 = v8;
  uint64_t v101 = a7;
  uint64_t v107 = a4;
  uint64_t v108 = a6;
  long long v109 = a2;
  uint64_t v106 = a1;
  uint64_t v88 = a8;
  uint64_t v96 = a5;
  uint64_t v105 = *(void *)(a5 + 8);
  uint64_t v11 = *(void *)(*(void *)(v105 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  long long v83 = (char *)v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  long long v82 = (char *)v80 - v15;
  long long v86 = *(void **)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v95 = (char *)v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)v80 - v19;
  uint64_t v91 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v103 = (char *)v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)v80 - v24;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v89 = type metadata accessor for Range();
  uint64_t v94 = *(void *)(v89 - 8);
  MEMORY[0x1F4188790](v89);
  uint64_t v81 = (char *)v80 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  long long v102 = (char *)v80 - v28;
  MEMORY[0x1F4188790](v29);
  uint64_t v31 = (char *)v80 - v30;
  MEMORY[0x1F4188790](v32);
  uint64_t v34 = (char *)v80 - v33;
  uint64_t v93 = v11;
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v35 = v91;
  uint64_t v36 = v9;
  uint64_t v37 = dispatch thunk of Collection.count.getter();
  uint64_t v38 = v25;
  uint64_t v39 = v25;
  uint64_t v40 = v94;
  long long v100 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 16);
  uint64_t v101 = v35 + 16;
  v100(v39, v36, a3);
  uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
  long long v109 = v34;
  uint64_t v42 = v34;
  uint64_t v43 = v89;
  long long v98 = v41;
  uint64_t v99 = v40 + 16;
  v41(v31, v42, v89);
  if (!v37)
  {
    uint64_t v49 = *(void (**)(char *, uint64_t))(v40 + 8);
    v49(v31, v43);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v38, a3);
    v49(v109, v43);
    goto LABEL_5;
  }
  uint64_t v92 = v36;
  uint64_t v97 = AssociatedTypeWitness;
  uint64_t v44 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
  uint64_t v45 = v40 + 8;
  long long v85 = *(void (**)(char *, uint64_t))(v40 + 8);
  v85(v31, v43);
  long long v47 = *(void (**)(char *, uint64_t))(v35 + 8);
  uint64_t v46 = v35 + 8;
  uint64_t v90 = v47;
  v47(v38, a3);
  uint64_t v48 = v43;
  if (v44 < v37)
  {
    uint64_t v40 = v94;
    v85(v109, v43);
LABEL_5:
    uint64_t v50 = 1;
    uint64_t v51 = v88;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v51, v50, 1, v43);
  }
  uint64_t v52 = v37;
  uint64_t v91 = v45;
  uint64_t v53 = (void (*)(char *, char *, uint64_t))v86[2];
  uint64_t v54 = v109;
  v80[1] = v86 + 2;
  v80[0] = v53;
  v53(v20, v109, v97);
  long long v87 = &v54[*(int *)(v48 + 36)];
  char v55 = dispatch thunk of static Comparable.< infix(_:_:)();
  int64_t v56 = v103;
  v100(v103, v92, a3);
  int8x16_t v57 = v102;
  v98(v102, v54, v48);
  uint64_t v58 = v85;
  if (v55)
  {
    Swift::UInt v59 = (void (**)(char *, char *, uint64_t))(v86 + 5);
    while (1)
    {
      uint64_t v60 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
      v58(v57, v48);
      v90(v56, a3);
      if (v60 < v52) {
        break;
      }
      uint64_t v61 = v92;
      if (DataProtocol.matches<A>(_:from:)(v106, (uint64_t)v20, a3, v107, v96, v108))
      {
        Swift::UInt v67 = v95;
        dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
        uint64_t v68 = v97;
        char v69 = dispatch thunk of static Comparable.<= infix(_:_:)();
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v58)(v109, v48);
        if (v69)
        {
          uint64_t v43 = v48;
          uint64_t v70 = TupleTypeMetadata2;
          int v71 = v82;
          char v72 = &v82[*(int *)(TupleTypeMetadata2 + 48)];
          uint64_t v73 = (void (*)(char *, char *, uint64_t))v86[4];
          v73(v82, v20, v68);
          long long v109 = v72;
          v73(v72, v67, v68);
          long long v74 = v83;
          uint64_t v75 = &v83[*(int *)(v70 + 48)];
          uint64_t v76 = (void (*)(char *, char *, uint64_t))v80[0];
          ((void (*)(char *, char *, uint64_t))v80[0])(v83, v71, v68);
          v76(v75, v72, v68);
          uint64_t v77 = v81;
          v73(v81, v74, v68);
          uint64_t v78 = (void (*)(char *, uint64_t))v86[1];
          v78(v75, v68);
          uint64_t v79 = &v74[*(int *)(TupleTypeMetadata2 + 48)];
          v73(v74, v71, v68);
          v73(v79, v109, v68);
          v73(&v77[*(int *)(v48 + 36)], v79, v68);
          v78(v74, v68);
          uint64_t v40 = v94;
          uint64_t v51 = v88;
          (*(void (**)(uint64_t, char *, uint64_t))(v94 + 32))(v88, v77, v43);
          uint64_t v50 = 0;
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v51, v50, 1, v43);
        }
        __break(1u);
        return result;
      }
      uint64_t v62 = v46;
      uint64_t v63 = v95;
      dispatch thunk of Collection.index(after:)();
      uint64_t v64 = v63;
      uint64_t v46 = v62;
      int64_t v56 = v103;
      (*v59)(v20, v64, v97);
      char v65 = dispatch thunk of static Comparable.< infix(_:_:)();
      v100(v56, v61, a3);
      int8x16_t v57 = v102;
      v98(v102, v109, v48);
      if ((v65 & 1) == 0) {
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_11:
    v58(v57, v48);
    v90(v56, a3);
  }
  ((void (*)(char *, uint64_t))v86[1])(v20, v97);
  v58(v109, v48);
  uint64_t v50 = 1;
  uint64_t v51 = v88;
  uint64_t v43 = v48;
  uint64_t v40 = v94;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v51, v50, 1, v43);
}

uint64_t DataProtocol.lastRange<A, B>(of:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, void (*a5)(char *, uint64_t)@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  return DataProtocol.lastRange<A, B>(of:in:)(a1, a2, a6, a3, a7, a4, a5, a8);
}

uint64_t specialized DataProtocol.lastRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for DispatchData();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type DispatchData and conformance DispatchData((unint64_t *)&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v13 = dispatch thunk of Collection.count.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v5, v9);
  uint64_t v22 = v25;
  uint64_t v23 = v24;
  if (!v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return 0;
  }
  uint64_t v14 = lazy protocol witness table accessor for type DispatchData and conformance DispatchData(&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData);
  uint64_t v15 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (v15 < v13) {
    return 0;
  }
  if (__OFSUB__(0, v13))
  {
    __break(1u);
    goto LABEL_15;
  }
  v19[1] = v14;
  dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  uint64_t v17 = v21;
  uint64_t v18 = v24;
  if (v21 < v24) {
    return 0;
  }
  if ((specialized DataProtocol.matches<A>(_:from:)(a1, v21, a3, a5) & 1) == 0)
  {
    lazy protocol witness table accessor for type DispatchData and conformance DispatchData(&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData);
    do
    {
      dispatch thunk of BidirectionalCollection.index(before:)();
      uint64_t v17 = v20;
      uint64_t v21 = v20;
      if (v20 < v18) {
        return 0;
      }
    }
    while ((specialized DataProtocol.matches<A>(_:from:)(a1, v20, a3, a5) & 1) == 0);
  }
  uint64_t result = dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  if (v20 >= v17) {
    return v17;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.lastRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  lazy protocol witness table accessor for type DispatchData.Region and conformance DispatchData.Region();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t result = dispatch thunk of Collection.count.getter();
  if (!result) {
    return 0;
  }
  uint64_t v15 = a5 + a4;
  if (__OFADD__(a5, a4))
  {
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v15 < v22 || v21 < a5 || v15 < v21 || v22 < a5) {
    goto LABEL_36;
  }
  if (__OFSUB__(v22, v21))
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v16 = result;
  if (v22 - v21 < result) {
    return 0;
  }
  if (__OFSUB__(0, result)) {
    goto LABEL_38;
  }
  uint64_t v17 = v22 - result;
  if (__OFADD__(v22, -result))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v17 < a5 || v15 < v17) {
    goto LABEL_40;
  }
  if (v17 < v21) {
    return 0;
  }
  uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v22 - result, a3, a4, a5, a6, a8);
  if (result) {
    goto LABEL_19;
  }
  BOOL v20 = __OFSUB__(v17--, 1);
  if (!v20)
  {
    if (v17 < a5 || v17 >= v15) {
      goto LABEL_47;
    }
    if (v17 < v21) {
      return 0;
    }
    uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v17, a3, a4, a5, a6, a8);
    if (result)
    {
LABEL_19:
      uint64_t v19 = v17 + v16;
      if (!__OFADD__(v17, v16))
      {
        if (v19 >= a5 && v15 >= v19)
        {
          if (v19 >= v17) {
            return v17;
          }
          goto LABEL_45;
        }
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    while (1)
    {
      BOOL v20 = __OFSUB__(v17--, 1);
      if (v20) {
        break;
      }
      if (v17 < a5 || v22 - v16 - 2 >= v15) {
        goto LABEL_42;
      }
      if (v17 < v21) {
        return 0;
      }
      uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v17, a3, a4, a5, a6, a8);
      if (result) {
        goto LABEL_19;
      }
    }
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.lastRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  lazy protocol witness table accessor for type Data and conformance Data();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v12 = dispatch thunk of Collection.count.getter();
  if (!v12) {
    return 0;
  }
  uint64_t v13 = v12;
  uint64_t result = specialized RandomAccessCollection<>.distance(from:to:)(v18, v19, a3, a4);
  if (result < v13) {
    return 0;
  }
  if (!__OFSUB__(0, v13))
  {
    uint64_t v15 = specialized RandomAccessCollection<>.index(_:offsetBy:)(v19, -v13, a3);
    if (v15 >= v18)
    {
      uint64_t v16 = v15;
      while (1)
      {
        uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v16, a3, a4, a5, a7);
        if (result) {
          break;
        }
        if (__OFSUB__(v16--, 1))
        {
          __break(1u);
          goto LABEL_14;
        }
        if (v16 < v18) {
          return 0;
        }
      }
      uint64_t result = specialized RandomAccessCollection<>.index(_:offsetBy:)(v16, v13, a3);
      if (result < v16) {
        goto LABEL_15;
      }
      return v16;
    }
    return 0;
  }
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.lastRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8> and conformance UnsafeBufferPointer<A>, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t result = dispatch thunk of Collection.count.getter();
  if (result) {
    BOOL v13 = v17 - v16 < result;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13) {
    return 0;
  }
  uint64_t v15 = result;
  if (__OFSUB__(0, result))
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v14 = v17 - result;
  if (v17 - result < v16) {
    return 0;
  }
  while (1)
  {
    uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v14, a3, a4, a5, a7);
    if (result) {
      break;
    }
    if (--v14 < v16) {
      return 0;
    }
  }
  if (v14 + v15 >= v14) {
    return v14;
  }
LABEL_16:
  __break(1u);
  return result;
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v12 = dispatch thunk of Collection.count.getter();
  if (!v12) {
    return 0;
  }
  BOOL v13 = v12;
  uint64_t result = specialized RandomAccessCollection<>.distance(from:to:)(v20, v21, a3, a4);
  if (result < v13) {
    return 0;
  }
  if (__OFSUB__(0, v13)) {
    goto LABEL_24;
  }
  uint64_t v15 = v21 - v13;
  if (__OFADD__(v21, -v13))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v16 = a4 - a3;
  if (!a3) {
    uint64_t v16 = 0;
  }
  if (v15 < 0 || v16 < v15) {
    goto LABEL_26;
  }
  if (v15 < v20) {
    return 0;
  }
  uint64_t v19 = v16;
  uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v15, a3, a4, a5, a7);
  if ((result & 1) == 0)
  {
    while (1)
    {
      uint64_t v17 = v15 - 1;
      if (v15 < 1 || v21 + ~v13 >= v19) {
        break;
      }
      if (v15 <= v20) {
        return 0;
      }
      uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, --v15, a3, a4, a5, a7);
      if (result) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v17 = v21 - v13;
LABEL_18:
  uint64_t v18 = v17 + v13;
  if (__OFADD__(v17, v13)) {
    goto LABEL_27;
  }
  if ((v18 & 0x8000000000000000) != 0 || v19 < (uint64_t)v18) {
    goto LABEL_28;
  }
  if (v18 >= v17) {
    return v17;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.lastRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [UInt8] and conformance [A], &demangling cache variable for type metadata for [UInt8]);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t result = dispatch thunk of Collection.count.getter();
  if (result)
  {
    if (__OFSUB__(v15, v14))
    {
      __break(1u);
    }
    else
    {
      uint64_t v11 = result;
      if (v15 - v14 < result) {
        return 0;
      }
      if (!__OFSUB__(0, result))
      {
        int64_t v12 = v15 - result;
        if (!__OFADD__(v15, -result))
        {
          while (v12 >= v14)
          {
            uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v12, a3, a4, a6);
            if (result) {
              goto LABEL_13;
            }
            if (__OFSUB__(v12--, 1))
            {
              __break(1u);
LABEL_13:
              if (__OFADD__(v12, v11)) {
                goto LABEL_19;
              }
              if (v12 + v11 < v12) {
                goto LABEL_20;
              }
              return v12;
            }
          }
          return 0;
        }
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_18;
  }
  return 0;
}

{
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  int64_t v14;
  uint64_t v15;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousArray<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ContiguousArray<UInt8> and conformance ContiguousArray<A>, &demangling cache variable for type metadata for ContiguousArray<UInt8>);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t result = dispatch thunk of Collection.count.getter();
  if (result)
  {
    if (__OFSUB__(v15, v14))
    {
      __break(1u);
    }
    else
    {
      uint64_t v11 = result;
      if (v15 - v14 < result) {
        return 0;
      }
      if (!__OFSUB__(0, result))
      {
        int64_t v12 = v15 - result;
        if (!__OFADD__(v15, -result))
        {
          while (v12 >= v14)
          {
            uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v12, a3, a4, a6);
            if (result) {
              goto LABEL_13;
            }
            if (__OFSUB__(v12--, 1))
            {
              __break(1u);
LABEL_13:
              if (__OFADD__(v12, v11)) {
                goto LABEL_19;
              }
              if (v12 + v11 < v12) {
                goto LABEL_20;
              }
              return v12;
            }
          }
          return 0;
        }
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_18;
  }
  return 0;
}

uint64_t specialized DataProtocol.lastRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ArraySlice<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ArraySlice<UInt8> and conformance ArraySlice<A>, (uint64_t *)&demangling cache variable for type metadata for ArraySlice<UInt8>);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t result = dispatch thunk of Collection.count.getter();
  if (!result) {
    return 0;
  }
  if (__OFSUB__(v24, v23))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v14 = result;
  if (v24 - v23 < result) {
    return 0;
  }
  uint64_t v15 = -result;
  if (__OFSUB__(0, result)) {
    goto LABEL_19;
  }
  uint64_t v16 = v24 - result;
  if (__OFADD__(v24, v15)) {
    goto LABEL_20;
  }
  if (v16 < v23) {
    return 0;
  }
  uint64_t v17 = a1;
  uint64_t v18 = v24 + v15;
  uint64_t v19 = a4;
  for (uint64_t i = a5; ; uint64_t i = a5)
  {
    uint64_t result = specialized DataProtocol.matches<A>(_:from:)(v17, v18, v19, i, a6, a7, a9);
    if (result) {
      break;
    }
    if (__OFSUB__(v16--, 1))
    {
      __break(1u);
      goto LABEL_18;
    }
    if (v16 < v23) {
      return 0;
    }
    uint64_t v17 = a1;
    uint64_t v18 = v16;
    uint64_t v19 = a4;
  }
  if (__OFADD__(v16, v14)) {
    goto LABEL_21;
  }
  if (v16 + v14 >= v16) {
    return v16;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.lastRange<A, B>(of:in:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EmptyCollection<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyCollection<UInt8> and conformance EmptyCollection<A>, &demangling cache variable for type metadata for EmptyCollection<UInt8>);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  if ((dispatch thunk of Collection.count.getter() & 0x8000000000000000) == 0 || v3 < v2) {
    return 0;
  }
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.lastRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Repeated<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Repeated<UInt8> and conformance Repeated<A>, &demangling cache variable for type metadata for Repeated<UInt8>);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t result = dispatch thunk of Collection.count.getter();
  if (!result) {
    return 0;
  }
  if (v18 > a3 || v17 > a3 || (v18 | v17) < 0) {
    goto LABEL_25;
  }
  uint64_t v13 = result;
  if (v18 - v17 < result) {
    return 0;
  }
  if (__OFSUB__(0, result)) {
    goto LABEL_26;
  }
  uint64_t v14 = v18 - result;
  if (__OFADD__(v18, -result))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v14 < 0 || v14 > a3) {
    goto LABEL_28;
  }
  if (v14 < v17) {
    return 0;
  }
  uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v18 - result, a3, a4, a5, a7);
  if ((result & 1) == 0)
  {
    while (1)
    {
      unint64_t v15 = v14 - 1;
      if (v14 < 1 || v18 + ~v13 >= a3) {
        break;
      }
      if (v14 <= v17) {
        return 0;
      }
      uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, --v14, a3, a4, a5, a7);
      if (result) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v15 = v18 - v13;
LABEL_19:
  uint64_t v16 = v15 + v13;
  if (__OFADD__(v15, v13)) {
    goto LABEL_29;
  }
  if (v16 < 0 || v16 > a3) {
    goto LABEL_30;
  }
  if (v16 >= v15) {
    return v15;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t DataProtocol.lastRange<A, B>(of:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, void (*a7)(char *, uint64_t)@<X7>, uint64_t a8@<X8>)
{
  uint64_t v74 = a5;
  char v69 = a7;
  uint64_t v70 = a2;
  uint64_t v79 = a4;
  uint64_t v80 = (char *)a6;
  uint64_t v78 = a1;
  uint64_t v68 = a8;
  uint64_t v71 = *(void *)(a5 + 8);
  uint64_t v72 = *(void *)(v71 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v64 = (char *)v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v63 = (char *)v61 - v12;
  uint64_t v67 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v75 = (char *)v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)v61 - v16;
  uint64_t v77 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v18);
  BOOL v20 = (char *)v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v21 = type metadata accessor for Range();
  MEMORY[0x1F4188790](v21);
  uint64_t v62 = (char *)v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)v61 - v24;
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)v61 - v27;
  uint64_t v29 = v73;
  uint64_t v31 = v30;
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v32 = dispatch thunk of Collection.count.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v20, v29, a3);
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v25, v28, v21);
  if (!v32)
  {
    uint64_t v39 = *(void (**)(char *, uint64_t))(v31 + 8);
    uint64_t v38 = v31;
    v39(v25, v21);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v20, a3);
    uint64_t v37 = v68;
    v39(v28, v21);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v37, 1, 1, v21);
  }
  uint64_t v70 = v32;
  uint64_t v33 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
  uint64_t v66 = v31;
  uint64_t v35 = *(void (**)(char *, uint64_t))(v31 + 8);
  uint64_t v34 = v31 + 8;
  char v69 = v35;
  v35(v25, v21);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v20, a3);
  if (v33 < v70)
  {
    uint64_t v37 = v68;
    uint64_t v38 = v66;
    v69(v28, v21);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v37, 1, 1, v21);
  }
  v61[1] = v34;
  if (__OFSUB__(0, v70))
  {
    __break(1u);
  }
  else
  {
    uint64_t v77 = v21;
    dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
    if ((dispatch thunk of static Comparable.>= infix(_:_:)() & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v67 + 8))(v17, AssociatedTypeWitness);
LABEL_16:
      uint64_t v60 = v77;
      v69(v28, v77);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v68, 1, 1, v60);
    }
    if ((DataProtocol.matches<A>(_:from:)(v78, (uint64_t)v17, a3, v79, v74, (uint64_t)v80) & 1) == 0)
    {
      uint64_t v40 = (void (**)(char *, uint64_t))(v67 + 8);
      uint64_t v41 = (void (**)(char *, char *, uint64_t))(v67 + 32);
      v61[0] = (v67 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v42 = v75;
      while (1)
      {
        dispatch thunk of BidirectionalCollection.index(before:)();
        uint64_t v43 = *v40;
        (*v40)(v17, AssociatedTypeWitness);
        (*v41)(v17, v42, AssociatedTypeWitness);
        if ((dispatch thunk of static Comparable.>= infix(_:_:)() & 1) == 0) {
          break;
        }
        if (DataProtocol.matches<A>(_:from:)(v78, (uint64_t)v17, a3, v79, v74, (uint64_t)v80)) {
          goto LABEL_12;
        }
      }
      v43(v17, AssociatedTypeWitness);
      goto LABEL_16;
    }
LABEL_12:
    uint64_t v44 = v75;
    dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
    char v45 = dispatch thunk of static Comparable.<= infix(_:_:)();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v69)(v28, v77);
    if (v45)
    {
      uint64_t v46 = TupleTypeMetadata2;
      long long v47 = v63;
      uint64_t v48 = (uint64_t)&v63[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v49 = v67;
      uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
      v50(v63, v17, AssociatedTypeWitness);
      uint64_t v80 = (char *)v48;
      v50((char *)v48, v44, AssociatedTypeWitness);
      uint64_t v51 = v64;
      uint64_t v52 = &v64[*(int *)(v46 + 48)];
      uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
      v53(v64, v47, AssociatedTypeWitness);
      v53(v52, (char *)v48, AssociatedTypeWitness);
      uint64_t v54 = v62;
      v50(v62, v51, AssociatedTypeWitness);
      char v55 = *(void (**)(char *, uint64_t))(v49 + 8);
      v55(v52, AssociatedTypeWitness);
      int64_t v56 = &v51[*(int *)(TupleTypeMetadata2 + 48)];
      v50(v51, v47, AssociatedTypeWitness);
      v50(v56, v80, AssociatedTypeWitness);
      uint64_t v57 = v77;
      v50(&v54[*(int *)(v77 + 36)], v56, AssociatedTypeWitness);
      v55(v51, AssociatedTypeWitness);
      uint64_t v58 = v66;
      uint64_t v59 = v68;
      (*(void (**)(uint64_t, char *, uint64_t))(v66 + 32))(v68, v54, v57);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v58 + 56))(v59, 0, 1, v57);
    }
  }
  __break(1u);
  return result;
}

uint64_t DataProtocol.copyBytes<A>(to:count:)(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return DataProtocol.copyBytes<A>(to:count:)(a1, a2, a3, a5, a4, a6);
}

{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t result;
  uint64_t v30;
  char *v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t WitnessTable;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  uint64_t TupleTypeMetadata2;

  uint64_t v53 = a2;
  uint64_t v54 = a5;
  uint64_t v52 = a1;
  uint64_t v57 = *(void *)(a6 + 8);
  uint64_t v58 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v48 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v46 = (char *)&v46 - v12;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v46 - v18;
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v46 - v21;
  swift_getAssociatedConformanceWitness();
  uint64_t v23 = type metadata accessor for Range();
  uint64_t v50 = *(void *)(v23 - 8);
  uint64_t v51 = v23;
  MEMORY[0x1F4188790](v23);
  long long v47 = (char *)&v46 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  uint64_t v49 = (char *)&v46 - v26;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.startIndex.getter();
  char v55 = a4;
  int64_t v56 = v6;
  dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  uint64_t v27 = v13;
  uint64_t v28 = *(void (**)(char *, uint64_t))(v13 + 8);
  v28(v16, AssociatedTypeWitness);
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v57 = a6;
    uint64_t v58 = v28;
    uint64_t v30 = TupleTypeMetadata2;
    uint64_t v31 = v46;
    uint64_t v32 = &v46[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v33(v46, v22, AssociatedTypeWitness);
    v33(v32, v19, AssociatedTypeWitness);
    uint64_t v34 = v48;
    uint64_t v35 = &v48[*(int *)(v30 + 48)];
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
    v36(v48, v31, AssociatedTypeWitness);
    v36(v35, v32, AssociatedTypeWitness);
    uint64_t v37 = v47;
    v33(v47, v34, AssociatedTypeWitness);
    v58(v35, AssociatedTypeWitness);
    uint64_t v38 = &v34[*(int *)(TupleTypeMetadata2 + 48)];
    v33(v34, v31, AssociatedTypeWitness);
    v33(v38, v32, AssociatedTypeWitness);
    uint64_t v39 = v51;
    v33(&v37[*(int *)(v51 + 36)], v38, AssociatedTypeWitness);
    v58(v34, AssociatedTypeWitness);
    uint64_t v41 = v49;
    uint64_t v40 = v50;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v49, v37, v39);
    uint64_t v42 = v57;
    uint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 112);
    uint64_t WitnessTable = swift_getWitnessTable();
    char v45 = v43(v52, v53, v41, v54, v39, WitnessTable, v55, v42);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v39);
    return v45;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:count:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = a6 + a3;
  if (__OFADD__(a6, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (__OFADD__(a6, a5))
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v10 < a6 || a6 + a5 < v10) {
    goto LABEL_12;
  }
  if (!result)
  {
    uint64_t v12 = 0;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v12, a6, v10, a4, a5, a6);
  }
  uint64_t v11 = *(void *)(*(void *)(a7 - 8) + 72);
  if ((unsigned __int128)(a2 * (__int128)v11) >> 64 == (a2 * v11) >> 63)
  {
    uint64_t v12 = result + a2 * v11;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v12, a6, v10, a4, a5, a6);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for DispatchData();
  lazy protocol witness table accessor for type DispatchData and conformance DispatchData((unint64_t *)&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.startIndex.getter();
  lazy protocol witness table accessor for type DispatchData and conformance DispatchData(&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData);
  uint64_t result = dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  if (v10 < v11)
  {
    __break(1u);
  }
  else
  {
    if (!a1)
    {
      uint64_t v9 = 0;
      return specialized DataProtocol.copyBytes<A>(to:from:)(a1, v9, v11, v10);
    }
    uint64_t v8 = *(void *)(*(void *)(a4 - 8) + 72);
    if ((unsigned __int128)(a2 * (__int128)v8) >> 64 == (a2 * v8) >> 63)
    {
      uint64_t v9 = a1 + a2 * v8;
      return specialized DataProtocol.copyBytes<A>(to:from:)(a1, v9, v11, v10);
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:count:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a5 - a4;
  if (!a4) {
    uint64_t v6 = 0;
  }
  if (a3 < 0 || v6 < a3)
  {
    __break(1u);
  }
  else
  {
    if (!result)
    {
      uint64_t v8 = 0;
      return specialized DataProtocol.copyBytes<A>(to:from:)(result, v8, 0, a3, a4, a5);
    }
    uint64_t v7 = *(void *)(*(void *)(a6 - 8) + 72);
    if ((unsigned __int128)(a2 * (__int128)v7) >> 64 == (a2 * v7) >> 63)
    {
      uint64_t v8 = result + a2 * v7;
      return specialized DataProtocol.copyBytes<A>(to:from:)(result, v8, 0, a3, a4, a5);
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v6;
  uint64_t v7;

  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    if (!result)
    {
      uint64_t v7 = 0;
      return specialized DataProtocol.copyBytes<A>(to:from:)(result, v7, 0, a3, a4, a5);
    }
    uint64_t v6 = *(void *)(*(void *)(a6 - 8) + 72);
    if ((unsigned __int128)(a2 * (__int128)v6) >> 64 == (a2 * v6) >> 63)
    {
      uint64_t v7 = result + a2 * v6;
      return specialized DataProtocol.copyBytes<A>(to:from:)(result, v7, 0, a3, a4, a5);
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v11 = 0;
  switch(a5 >> 62)
  {
    case 1uLL:
      uint64_t v11 = (int)a4;
      break;
    case 2uLL:
      uint64_t v11 = *(void *)(a4 + 16);
      break;
    default:
      break;
  }
  uint64_t v12 = specialized RandomAccessCollection<>.index(_:offsetBy:)(v11, a3, a4);
  if (v12 < v11)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (a1)
  {
    uint64_t v13 = *(void *)(*(void *)(a6 - 8) + 72);
    if ((unsigned __int128)(a2 * (__int128)v13) >> 64 == (a2 * v13) >> 63)
    {
      uint64_t v14 = a1 + a2 * v13;
      goto LABEL_9;
    }
LABEL_13:
    __break(1u);
    JUMPOUT(0x181BAD5C4);
  }
  uint64_t v14 = 0;
LABEL_9:

  return specialized DataProtocol.copyBytes<A>(to:from:)(a1, v14, v11, v12, a4, a5);
}

uint64_t specialized DataProtocol.copyBytes<A>(to:count:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v12 = a6 + a3;
  if (__OFADD__(a6, a3))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v12 < a6)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (!result)
  {
    uint64_t v14 = 0;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v14, a6, v12, a4, a5, a6, a7);
  }
  uint64_t v13 = *(void *)(*(void *)(a8 - 8) + 72);
  if ((unsigned __int128)(a2 * (__int128)v13) >> 64 == (a2 * v13) >> 63)
  {
    uint64_t v14 = result + a2 * v13;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v14, a6, v12, a4, a5, a6, a7);
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:count:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t), void (*a7)(uint64_t, uint64_t))
{
  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    if (!result)
    {
      uint64_t v8 = 0;
      return specialized DataProtocol.copyBytes<A>(to:from:)(result, v8, 0, a3, a4, a6, a7);
    }
    uint64_t v7 = *(void *)(*(void *)(a5 - 8) + 72);
    if ((unsigned __int128)(a2 * (__int128)v7) >> 64 == (a2 * v7) >> 63)
    {
      uint64_t v8 = result + a2 * v7;
      return specialized DataProtocol.copyBytes<A>(to:from:)(result, v8, 0, a3, a4, a6, a7);
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:count:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  if (a3 < 0 || a4 < a3)
  {
    __break(1u);
  }
  else
  {
    if (!result)
    {
      uint64_t v7 = 0;
      return specialized DataProtocol.copyBytes<A>(to:from:)(result, v7, 0, a3, a4, a5);
    }
    uint64_t v6 = *(void *)(*(void *)(a6 - 8) + 72);
    if ((unsigned __int128)(a2 * (__int128)v6) >> 64 == (a2 * v6) >> 63)
    {
      uint64_t v7 = result + a2 * v6;
      return specialized DataProtocol.copyBytes<A>(to:from:)(result, v7, 0, a3, a4, a5);
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<DispatchData>);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (uint64_t *)&v42[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a1)
  {
    v46[1] = a3;
    v46[2] = a4;
    type metadata accessor for DispatchData();
    lazy protocol witness table accessor for type DispatchData and conformance DispatchData((unint64_t *)&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData);
    dispatch thunk of Collection.subscript.getter();
    lazy protocol witness table accessor for type DispatchData and conformance DispatchData(&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData);
    uint64_t v11 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
    uint64_t v12 = *v10;
    uint64_t v45 = v10[1];
    v46[0] = v12;
    uint64_t v13 = dispatch thunk of Collection.startIndex.getter();
    uint64_t v43 = MEMORY[0x1E4FBC860];
    MEMORY[0x1F4188790](v13);
    uint64_t v14 = DispatchData.enumerateBytes(_:)();
    uint64_t v15 = v43;
    MEMORY[0x1F4188790](v14);
    uint64_t v38 = &v44;
    uint64_t v39 = (uint64_t)v10;
    uint64_t v40 = v46;
    uint64_t v41 = &v45;
    uint64_t v16 = specialized Sequence.compactMap<A>(_:)((void (*)(_OWORD *__return_ptr, long long *))partial apply for specialized closure #1 in Slice<>.regions.getter, (uint64_t)&v42[-48], v15);
    swift_bridgeObjectRelease();
    uint64_t v17 = v16[2];
    if (v17)
    {
      uint64_t v18 = 0;
      uint64_t v19 = a2 - a1;
      if (v11 >= a2 - a1) {
        uint64_t v11 = a2 - a1;
      }
      uint64_t v20 = a2;
      uint64_t v21 = v16 + 8;
      while (v11 >= 1)
      {
        uint64_t v22 = *(v21 - 1);
        uint64_t v23 = *v21;
        BOOL v24 = __OFADD__(*v21, v22);
        uint64_t v25 = *v21 + v22;
        if (v24)
        {
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
        uint64_t v26 = *(v21 - 4);
        if (v25 < v26 || v26 < v23 || v25 < v23) {
          goto LABEL_41;
        }
        if (__OFSUB__(v26, v23)) {
          goto LABEL_42;
        }
        uint64_t v29 = *(v21 - 3);
        uint64_t v30 = *(v21 - 2);
        if (v30)
        {
          if (v29 < v23 || v25 < v29) {
            goto LABEL_45;
          }
          if (__OFSUB__(v29, v26)) {
            goto LABEL_46;
          }
          uint64_t v31 = (const void *)(v30 + v26 - v23);
          uint64_t v32 = v30 - v23 + v29;
          if (v19 < v18) {
            goto LABEL_43;
          }
        }
        else
        {
          if (v29 < v23 || v25 < v29) {
            goto LABEL_48;
          }
          uint64_t v32 = 0;
          uint64_t v31 = 0;
          if (v19 < v18) {
            goto LABEL_43;
          }
        }
        uint64_t v33 = (void *)(a1 + v18);
        int64_t v34 = v32 - (void)v31;
        if (v11 < v34) {
          int64_t v34 = v11;
        }
        if (v31) {
          int64_t v35 = v34;
        }
        else {
          int64_t v35 = 0;
        }
        if (v20 - (uint64_t)v33 < v35) {
          goto LABEL_50;
        }
        if (v31)
        {
          int64_t v36 = v34;
          memmove(v33, v31, v34);
          BOOL v24 = __OFADD__(v18, v36);
          v18 += v36;
          if (v24) {
            goto LABEL_47;
          }
          BOOL v24 = __OFSUB__(v11, v36);
          v11 -= v36;
          if (v24) {
            goto LABEL_44;
          }
        }
        v21 += 5;
        if (!--v17) {
          break;
        }
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for Slice<DispatchData>);
    return v18;
  }
  else
  {
LABEL_49:
    __break(1u);
LABEL_50:
    LODWORD(v40) = 0;
    uint64_t v39 = 487;
    LOBYTE(v38) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<DispatchData>);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (void *)((char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    v38[0] = a2;
    type metadata accessor for DispatchData();
    lazy protocol witness table accessor for type DispatchData and conformance DispatchData((unint64_t *)&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData);
    dispatch thunk of RangeExpression.relative<A>(to:)();
    dispatch thunk of Collection.subscript.getter();
    lazy protocol witness table accessor for type DispatchData and conformance DispatchData(&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData);
    uint64_t v7 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
    uint64_t v8 = *v6;
    uint64_t v41 = v6[1];
    uint64_t v42 = v8;
    uint64_t v9 = dispatch thunk of Collection.startIndex.getter();
    uint64_t v39 = MEMORY[0x1E4FBC860];
    MEMORY[0x1F4188790](v9);
    uint64_t v10 = DispatchData.enumerateBytes(_:)();
    uint64_t v11 = v39;
    MEMORY[0x1F4188790](v10);
    int64_t v34 = &v40;
    uint64_t v35 = (uint64_t)v6;
    int64_t v36 = &v42;
    uint64_t v37 = &v41;
    uint64_t v12 = specialized Sequence.compactMap<A>(_:)((void (*)(_OWORD *__return_ptr, long long *))partial apply for specialized closure #1 in Slice<>.regions.getter, (uint64_t)&v38[-6], v11);
    swift_bridgeObjectRelease();
    uint64_t v13 = v12[2];
    if (v13)
    {
      uint64_t v14 = 0;
      uint64_t v15 = v38[0] - a1;
      if (v7 >= v38[0] - a1) {
        uint64_t v7 = v38[0] - a1;
      }
      uint64_t v16 = v38[0];
      uint64_t v17 = v12 + 8;
      while (v7 >= 1)
      {
        uint64_t v18 = *(v17 - 1);
        uint64_t v19 = *v17;
        BOOL v20 = __OFADD__(*v17, v18);
        uint64_t v21 = *v17 + v18;
        if (v20)
        {
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
        uint64_t v22 = *(v17 - 4);
        if (v21 < v22 || v22 < v19 || v21 < v19) {
          goto LABEL_41;
        }
        if (__OFSUB__(v22, v19)) {
          goto LABEL_42;
        }
        uint64_t v25 = *(v17 - 3);
        uint64_t v26 = *(v17 - 2);
        if (v26)
        {
          if (v25 < v19 || v21 < v25) {
            goto LABEL_45;
          }
          if (__OFSUB__(v25, v22)) {
            goto LABEL_46;
          }
          uint64_t v27 = (const void *)(v26 + v22 - v19);
          uint64_t v28 = v26 - v19 + v25;
          if (v15 < v14) {
            goto LABEL_43;
          }
        }
        else
        {
          if (v25 < v19 || v21 < v25) {
            goto LABEL_48;
          }
          uint64_t v28 = 0;
          uint64_t v27 = 0;
          if (v15 < v14) {
            goto LABEL_43;
          }
        }
        uint64_t v29 = (void *)(a1 + v14);
        int64_t v30 = v28 - (void)v27;
        if (v7 < v30) {
          int64_t v30 = v7;
        }
        if (v27) {
          int64_t v31 = v30;
        }
        else {
          int64_t v31 = 0;
        }
        if (v16 - (uint64_t)v29 < v31) {
          goto LABEL_50;
        }
        if (v27)
        {
          int64_t v32 = v30;
          memmove(v29, v27, v30);
          BOOL v20 = __OFADD__(v14, v32);
          v14 += v32;
          if (v20) {
            goto LABEL_47;
          }
          BOOL v20 = __OFSUB__(v7, v32);
          v7 -= v32;
          if (v20) {
            goto LABEL_44;
          }
        }
        v17 += 5;
        if (!--v13) {
          break;
        }
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)v6, &demangling cache variable for type metadata for Slice<DispatchData>);
    return v14;
  }
  else
  {
LABEL_49:
    __break(1u);
LABEL_50:
    LODWORD(v36) = 0;
    uint64_t v35 = 487;
    LOBYTE(v34) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a1)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  uint64_t v7 = a7 + a6;
  if (__OFADD__(a7, a6))
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  if (v7 < a7)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (a3 < a7)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  if (v7 < a4)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  if (v7 < a3)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  if (a4 < a7)
  {
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    LODWORD(v39) = 0;
    uint64_t v38 = 487;
    LOBYTE(v37) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v8 = a4 - a3;
  if (__OFSUB__(a4, a3)) {
    goto LABEL_63;
  }
  v44[0] = a3;
  v44[1] = a4;
  v44[2] = a5;
  v44[3] = a6;
  v44[4] = a7;
  uint64_t v42 = a4;
  uint64_t v43 = a3;
  uint64_t v41 = a7;
  MEMORY[0x1F4188790](a1);
  uint64_t v37 = &v41;
  uint64_t v38 = (uint64_t)v44;
  uint64_t v39 = &v43;
  char v40 = &v42;
  uint64_t v14 = specialized Sequence.compactMap<A>(_:)((void (*)(_OWORD *__return_ptr, void *))partial apply for specialized closure #1 in Slice<>.regions.getter, (uint64_t)&v36, v11, v12, v13);
  uint64_t v15 = v14[2];
  if (v15)
  {
    uint64_t v16 = 0;
    uint64_t v17 = a2 - a1;
    if (v8 >= a2 - a1) {
      uint64_t v8 = a2 - a1;
    }
    uint64_t v18 = a2;
    uint64_t v19 = v14 + 8;
    while (v8 >= 1)
    {
      uint64_t v20 = *(v19 - 1);
      uint64_t v21 = *v19;
      BOOL v22 = __OFADD__(*v19, v20);
      uint64_t v23 = *v19 + v20;
      if (v22)
      {
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      uint64_t v24 = *(v19 - 4);
      if (v23 < v24 || v24 < v21 || v23 < v21) {
        goto LABEL_48;
      }
      if (__OFSUB__(v24, v21)) {
        goto LABEL_49;
      }
      uint64_t v27 = *(v19 - 3);
      uint64_t v28 = *(v19 - 2);
      if (v28)
      {
        if (v27 < v21 || v23 < v27) {
          goto LABEL_52;
        }
        if (__OFSUB__(v27, v24)) {
          goto LABEL_53;
        }
        uint64_t v29 = (const void *)(v28 + v24 - v21);
        uint64_t v30 = v28 - v21 + v27;
        if (v17 < v16) {
          goto LABEL_50;
        }
      }
      else
      {
        if (v27 < v21 || v23 < v27) {
          goto LABEL_55;
        }
        uint64_t v30 = 0;
        uint64_t v29 = 0;
        if (v17 < v16) {
          goto LABEL_50;
        }
      }
      int64_t v31 = (void *)(a1 + v16);
      int64_t v32 = v30 - (void)v29;
      if (v8 < v32) {
        int64_t v32 = v8;
      }
      if (v29) {
        int64_t v33 = v32;
      }
      else {
        int64_t v33 = 0;
      }
      if (v18 - (uint64_t)v31 < v33) {
        goto LABEL_64;
      }
      if (v29)
      {
        int64_t v34 = v32;
        memmove(v31, v29, v32);
        BOOL v22 = __OFADD__(v16, v34);
        v16 += v34;
        if (v22) {
          goto LABEL_54;
        }
        BOOL v22 = __OFSUB__(v8, v34);
        v8 -= v34;
        if (v22) {
          goto LABEL_51;
        }
      }
      v19 += 5;
      if (!--v15) {
        break;
      }
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v47 = a4;
  uint64_t v48 = a5;
  uint64_t v49 = a6;
  if (!a1)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  lazy protocol witness table accessor for type DispatchData.Region and conformance DispatchData.Region();
  uint64_t v11 = dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v12 = a6 + a5;
  if (__OFADD__(a6, a5))
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  if (v12 < a6)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (v45 < a6)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  if (v12 < v46)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  if (v12 < v45)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  if (v46 < a6)
  {
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    LODWORD(v39) = 0;
    uint64_t v38 = 487;
    LOBYTE(v37) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v13 = v46 - v45;
  if (__OFSUB__(v46, v45)) {
    goto LABEL_63;
  }
  v44[0] = v45;
  v44[1] = v46;
  v44[2] = a4;
  v44[3] = a5;
  v44[4] = a6;
  uint64_t v42 = v46;
  uint64_t v43 = v45;
  uint64_t v41 = a6;
  MEMORY[0x1F4188790](v11);
  uint64_t v37 = &v41;
  uint64_t v38 = (uint64_t)v44;
  uint64_t v39 = &v43;
  char v40 = &v42;
  uint64_t v14 = specialized Sequence.compactMap<A>(_:)((void (*)(_OWORD *__return_ptr, void *))partial apply for specialized closure #1 in Slice<>.regions.getter, (uint64_t)&v36, a4, a5, a6);
  uint64_t v15 = v14[2];
  if (v15)
  {
    uint64_t v16 = 0;
    uint64_t v17 = a2 - a1;
    if (v13 >= a2 - a1) {
      uint64_t v13 = a2 - a1;
    }
    uint64_t v18 = a2;
    uint64_t v19 = v14 + 8;
    while (v13 >= 1)
    {
      uint64_t v20 = *(v19 - 1);
      uint64_t v21 = *v19;
      BOOL v22 = __OFADD__(*v19, v20);
      uint64_t v23 = *v19 + v20;
      if (v22)
      {
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      uint64_t v24 = *(v19 - 4);
      if (v23 < v24 || v24 < v21 || v23 < v21) {
        goto LABEL_48;
      }
      if (__OFSUB__(v24, v21)) {
        goto LABEL_49;
      }
      uint64_t v27 = *(v19 - 3);
      uint64_t v28 = *(v19 - 2);
      if (v28)
      {
        if (v27 < v21 || v23 < v27) {
          goto LABEL_52;
        }
        if (__OFSUB__(v27, v24)) {
          goto LABEL_53;
        }
        uint64_t v29 = (const void *)(v28 + v24 - v21);
        uint64_t v30 = v28 - v21 + v27;
        if (v17 < v16) {
          goto LABEL_50;
        }
      }
      else
      {
        if (v27 < v21 || v23 < v27) {
          goto LABEL_55;
        }
        uint64_t v30 = 0;
        uint64_t v29 = 0;
        if (v17 < v16) {
          goto LABEL_50;
        }
      }
      int64_t v31 = (void *)(a1 + v16);
      int64_t v32 = v30 - (void)v29;
      if (v13 < v32) {
        int64_t v32 = v13;
      }
      if (v29) {
        int64_t v33 = v32;
      }
      else {
        int64_t v33 = 0;
      }
      if (v18 - (uint64_t)v31 < v33) {
        goto LABEL_64;
      }
      if (v29)
      {
        int64_t v34 = v32;
        memmove(v31, v29, v32);
        BOOL v22 = __OFADD__(v16, v34);
        v16 += v34;
        if (v22) {
          goto LABEL_54;
        }
        BOOL v22 = __OFSUB__(v13, v34);
        v13 -= v34;
        if (v22) {
          goto LABEL_51;
        }
      }
      v19 += 5;
      if (!--v15) {
        break;
      }
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  v32[1] = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v12 = Data._Representation.subscript.getter(a3, a4, a5, a6);
  unint64_t v14 = v13;
  v32[0] = 0;
  uint64_t v15 = specialized RandomAccessCollection<>.distance(from:to:)(a3, a4, a5, a6);
  uint64_t v16 = a2 - a1;
  if (v15 < a2 - a1) {
    uint64_t v16 = v15;
  }
  uint64_t v31 = v16;
  if (v16 >= 1)
  {
    switch(v14 >> 62)
    {
      case 1uLL:
        uint64_t v19 = (v12 >> 32) - (int)v12;
        if (v12 >> 32 < (int)v12) {
          goto LABEL_25;
        }
        uint64_t v20 = *(void *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (!v20) {
          goto LABEL_21;
        }
        uint64_t v21 = *(void *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        if (__OFSUB__((int)v12, v21)) {
          goto LABEL_27;
        }
        uint64_t v18 = (void *)(v20 + (int)v12 - v21);
        if (*(void *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) < v19) {
          uint64_t v19 = *(void *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
        }
        goto LABEL_18;
      case 2uLL:
        uint64_t v22 = *(void *)(v12 + 16);
        uint64_t v23 = *(void *)(v12 + 24);
        uint64_t v24 = *(void *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (v24)
        {
          uint64_t v25 = *(void *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
          BOOL v26 = __OFSUB__(v22, v25);
          uint64_t v27 = v22 - v25;
          if (v26) {
            goto LABEL_28;
          }
          BOOL v26 = __OFSUB__(v23, v22);
          uint64_t v28 = v23 - v22;
          if (!v26)
          {
            uint64_t v18 = (void *)(v24 + v27);
            uint64_t v19 = *(void *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
            if (v19 >= v28) {
              uint64_t v19 = v28;
            }
LABEL_18:
            uint64_t v17 = (char *)v18 + v19;
            goto LABEL_22;
          }
        }
        else if (!__OFSUB__(v23, v22))
        {
LABEL_21:
          uint64_t v18 = 0;
          uint64_t v17 = 0;
LABEL_22:
          closure #1 in DataProtocol.copyBytes<A>(to:from:)((uint64_t)v18, (uint64_t)v17, a1, a2, v32, &v31);
          goto LABEL_23;
        }
        break;
      case 3uLL:
        memset(v30, 0, 14);
        uint64_t v18 = v30;
        uint64_t v17 = (char *)v30;
        goto LABEL_22;
      default:
        v30[0] = v12;
        LOWORD(v30[1]) = v14;
        BYTE2(v30[1]) = BYTE2(v14);
        BYTE3(v30[1]) = BYTE3(v14);
        BYTE4(v30[1]) = BYTE4(v14);
        BYTE5(v30[1]) = BYTE5(v14);
        uint64_t v17 = (char *)v30 + BYTE6(v14);
        uint64_t v18 = v30;
        goto LABEL_22;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
LABEL_23:
  outlined consume of Data._Representation(v12, v14);
  return v32[0];
}

{
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  void v30[3];
  uint64_t v31;
  uint64_t v32[2];

  v32[1] = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v12 = Data._Representation.subscript.getter(a3, a4, a5, a6);
  unint64_t v14 = v13;
  v32[0] = 0;
  uint64_t v15 = specialized RandomAccessCollection<>.distance(from:to:)(a3, a4, a5, a6);
  uint64_t v16 = a2 - a1;
  if (v15 < a2 - a1) {
    uint64_t v16 = v15;
  }
  uint64_t v31 = v16;
  if (v16 >= 1)
  {
    switch(v14 >> 62)
    {
      case 1uLL:
        uint64_t v19 = (v12 >> 32) - (int)v12;
        if (v12 >> 32 < (int)v12) {
          goto LABEL_25;
        }
        uint64_t v20 = *(void *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (!v20) {
          goto LABEL_21;
        }
        uint64_t v21 = *(void *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        if (__OFSUB__((int)v12, v21)) {
          goto LABEL_27;
        }
        uint64_t v18 = (void *)(v20 + (int)v12 - v21);
        if (*(void *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) < v19) {
          uint64_t v19 = *(void *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
        }
        goto LABEL_18;
      case 2uLL:
        uint64_t v22 = *(void *)(v12 + 16);
        uint64_t v23 = *(void *)(v12 + 24);
        uint64_t v24 = *(void *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (v24)
        {
          uint64_t v25 = *(void *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
          BOOL v26 = __OFSUB__(v22, v25);
          uint64_t v27 = v22 - v25;
          if (v26) {
            goto LABEL_28;
          }
          BOOL v26 = __OFSUB__(v23, v22);
          uint64_t v28 = v23 - v22;
          if (!v26)
          {
            uint64_t v18 = (void *)(v24 + v27);
            uint64_t v19 = *(void *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
            if (v19 >= v28) {
              uint64_t v19 = v28;
            }
LABEL_18:
            uint64_t v17 = (char *)v18 + v19;
            goto LABEL_22;
          }
        }
        else if (!__OFSUB__(v23, v22))
        {
LABEL_21:
          uint64_t v18 = 0;
          uint64_t v17 = 0;
LABEL_22:
          closure #1 in DataProtocol.copyBytes<A>(to:from:)((uint64_t)v18, (uint64_t)v17, a1, a2, v32, &v31);
          goto LABEL_23;
        }
        break;
      case 3uLL:
        memset(v30, 0, 14);
        uint64_t v18 = v30;
        uint64_t v17 = (char *)v30;
        goto LABEL_22;
      default:
        v30[0] = v12;
        LOWORD(v30[1]) = v14;
        BYTE2(v30[1]) = BYTE2(v14);
        BYTE3(v30[1]) = BYTE3(v14);
        BYTE4(v30[1]) = BYTE4(v14);
        BYTE5(v30[1]) = BYTE5(v14);
        uint64_t v17 = (char *)v30 + BYTE6(v14);
        uint64_t v18 = v30;
        goto LABEL_22;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
LABEL_23:
  outlined consume of Data._Representation(v12, v14);
  return v32[0];
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = a4 - a3;
    if (a4 - a3 >= a2 - result) {
      uint64_t v8 = a2 - result;
    }
    uint64_t v22 = v8;
    uint64_t v23 = 0;
    v21[0] = a3;
    v21[1] = a4;
    v21[2] = a5;
    void v21[3] = a6;
    uint64_t v19 = a4;
    uint64_t v20 = a3;
    uint64_t v18 = 0;
    MEMORY[0x1F4188790](result);
    v17[2] = &v18;
    long long v17[3] = v21;
    v17[4] = &v20;
    void v17[5] = &v19;
    uint64_t result = (uint64_t)specialized Sequence.compactMap<A>(_:)((void (*)(_OWORD *__return_ptr, void *))closure #1 in Slice<>.regions.getterspecialized partial apply, (uint64_t)v17, v9, v10);
    uint64_t v11 = result;
    unint64_t v12 = *(void *)(result + 16);
    if (!v12)
    {
LABEL_15:
      swift_bridgeObjectRelease();
      return v23;
    }
    unint64_t v13 = 0;
    unint64_t v14 = (void *)(result + 48);
    while (v13 < v12)
    {
      if (v22 > 0)
      {
        ++v13;
        uint64_t v15 = *v14 ? *v14 + *(v14 - 1) : 0;
        uint64_t v16 = *v14 ? *v14 + *(v14 - 2) : 0;
        uint64_t result = closure #1 in DataProtocol.copyBytes<A>(to:from:)(v16, v15, v7, a2, &v23, &v22);
        unint64_t v12 = *(void *)(v11 + 16);
        v14 += 4;
        if (v13 != v12) {
          continue;
        }
      }
      goto LABEL_15;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void v25[7];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void v29[4];
  uint64_t v30;
  uint64_t v31;

  if (result)
  {
    uint64_t v11 = result;
    uint64_t v31 = 0;
    unint64_t v12 = specialized RandomAccessCollection<>.distance(from:to:)(a3, a4, a5, a6);
    unint64_t v13 = a2 - v11;
    if (v12 < a2 - v11) {
      unint64_t v13 = v12;
    }
    v29[3] = a6;
    uint64_t v30 = v13;
    v29[0] = a3;
    v29[1] = a4;
    v29[2] = a5;
    uint64_t v27 = a4;
    uint64_t v28 = a3;
    BOOL v26 = 0;
    MEMORY[0x1F4188790](v12);
    v25[2] = &v26;
    v25[3] = v29;
    v25[4] = &v28;
    v25[5] = &v27;
    uint64_t result = (uint64_t)specialized Sequence.compactMap<A>(_:)((void (*)(_OWORD *__return_ptr, void *))closure #1 in Slice<>.regions.getterspecialized partial apply, (uint64_t)v25, a5, a6);
    unint64_t v14 = result;
    uint64_t v15 = *(void *)(result + 16);
    if (!v15)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      return v31;
    }
    uint64_t v16 = 0;
    uint64_t v17 = (void *)(result + 56);
    while (v16 < v15)
    {
      if (v30 <= 0) {
        goto LABEL_22;
      }
      uint64_t v20 = *(v17 - 3);
      uint64_t v21 = *(v17 - 1);
      uint64_t v22 = *v17 - v21;
      if (v21) {
        uint64_t v23 = *v17 - v21;
      }
      else {
        uint64_t v23 = 0;
      }
      if (v20 < 0 || v23 < v20) {
        goto LABEL_24;
      }
      uint64_t v24 = *(v17 - 2);
      if (v21)
      {
        if (v22 < v24 || v24 < 0 || v22 < v20) {
          goto LABEL_25;
        }
        uint64_t v18 = v21 + v20;
        uint64_t v19 = v21 + v24;
      }
      else
      {
        if (v24 | v20) {
          goto LABEL_26;
        }
        uint64_t v19 = 0;
        uint64_t v18 = 0;
      }
      ++v16;
      uint64_t result = closure #1 in DataProtocol.copyBytes<A>(to:from:)(v18, v19, v11, a2, &v31, &v30);
      uint64_t v15 = *(void *)(v14 + 16);
      v17 += 4;
      if (v16 == v15) {
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  if (result)
  {
    uint64_t v8 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8> and conformance UnsafeBufferPointer<A>, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>);
    uint64_t v9 = dispatch thunk of RangeExpression.relative<A>(to:)();
    uint64_t v10 = v25 - v24;
    if (v25 - v24 >= a2 - v8) {
      uint64_t v10 = a2 - v8;
    }
    uint64_t v22 = v10;
    uint64_t v23 = 0;
    v21[0] = v24;
    v21[1] = v25;
    v21[2] = a4;
    void v21[3] = a5;
    uint64_t v19 = v25;
    uint64_t v20 = v24;
    uint64_t v18 = 0;
    MEMORY[0x1F4188790](v9);
    v17[2] = &v18;
    long long v17[3] = v21;
    v17[4] = &v20;
    void v17[5] = &v19;
    uint64_t result = (uint64_t)specialized Sequence.compactMap<A>(_:)((void (*)(_OWORD *__return_ptr, void *))partial apply for specialized closure #1 in Slice<>.regions.getter, (uint64_t)v17, a4, a5);
    uint64_t v11 = result;
    unint64_t v12 = *(void *)(result + 16);
    if (!v12)
    {
LABEL_15:
      swift_bridgeObjectRelease();
      return v23;
    }
    unint64_t v13 = 0;
    unint64_t v14 = (void *)(result + 48);
    while (v13 < v12)
    {
      if (v22 >= 1)
      {
        ++v13;
        uint64_t v15 = *v14 ? *v14 + *(v14 - 1) : 0;
        uint64_t v16 = *v14 ? *v14 + *(v14 - 2) : 0;
        uint64_t result = closure #1 in DataProtocol.copyBytes<A>(to:from:)(v16, v15, v8, a2, &v23, &v22);
        unint64_t v12 = *(void *)(v11 + 16);
        v14 += 4;
        if (v13 != v12) {
          continue;
        }
      }
      goto LABEL_15;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void v22[7];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void v26[4];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v31 = a4;
  int64_t v32 = a5;
  if (result)
  {
    uint64_t v8 = result;
    lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
    dispatch thunk of RangeExpression.relative<A>(to:)();
    uint64_t v28 = 0;
    uint64_t v9 = specialized RandomAccessCollection<>.distance(from:to:)(v29, v30, a4, a5);
    uint64_t v10 = a2 - v8;
    if (v9 < a2 - v8) {
      uint64_t v10 = v9;
    }
    v26[3] = a5;
    uint64_t v27 = v10;
    v26[0] = v29;
    v26[1] = v30;
    v26[2] = a4;
    uint64_t v24 = v30;
    uint64_t v25 = v29;
    uint64_t v23 = 0;
    MEMORY[0x1F4188790](v9);
    v22[2] = &v23;
    v22[3] = v26;
    void v22[4] = &v25;
    v22[5] = &v24;
    uint64_t result = (uint64_t)specialized Sequence.compactMap<A>(_:)((void (*)(_OWORD *__return_ptr, void *))partial apply for specialized closure #1 in Slice<>.regions.getter, (uint64_t)v22, a4, a5);
    uint64_t v11 = result;
    unint64_t v12 = *(void *)(result + 16);
    if (!v12)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      return v28;
    }
    unint64_t v13 = 0;
    unint64_t v14 = (void *)(result + 56);
    while (v13 < v12)
    {
      if (v27 < 1) {
        goto LABEL_22;
      }
      uint64_t v17 = *(v14 - 3);
      uint64_t v18 = *(v14 - 1);
      uint64_t v19 = *v14 - v18;
      if (v18) {
        uint64_t v20 = *v14 - v18;
      }
      else {
        uint64_t v20 = 0;
      }
      if (v17 < 0 || v20 < v17) {
        goto LABEL_24;
      }
      uint64_t v21 = *(v14 - 2);
      if (v18)
      {
        if (v19 < v21 || v21 < 0 || v19 < v17) {
          goto LABEL_25;
        }
        uint64_t v15 = v18 + v17;
        uint64_t v16 = v18 + v21;
      }
      else
      {
        if (v21 | v17) {
          goto LABEL_26;
        }
        uint64_t v16 = 0;
        uint64_t v15 = 0;
      }
      ++v13;
      uint64_t result = closure #1 in DataProtocol.copyBytes<A>(to:from:)(v15, v16, v8, a2, &v28, &v27);
      unint64_t v12 = *(void *)(v11 + 16);
      v14 += 4;
      if (v13 == v12) {
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a4;
  if (!result)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v6 = result;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [UInt8] and conformance [A], &demangling cache variable for type metadata for [UInt8]);
  uint64_t result = dispatch thunk of RangeExpression.relative<A>(to:)();
  if ((v11 & 0x8000000000000000) != 0)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v7 = *(void *)(a4 + 16);
  if (v7 < v11 || (uint64_t)v7 < v12) {
    goto LABEL_14;
  }
  if (v12 < 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  uint64_t v8 = a2 - v6;
  if ((uint64_t)(v12 - v11) < a2 - v6) {
    uint64_t v8 = v12 - v11;
  }
  uint64_t v9 = v8;
  uint64_t v10 = 0;
  if (v8 < 1) {
    return 0;
  }
  swift_bridgeObjectRetain_n();
  closure #1 in DataProtocol.copyBytes<A>(to:from:)(a4 + v11 + 32, a4 + 32 + v12, v6, a2, &v10, &v9);
  swift_bridgeObjectRelease_n();
  return v10;
}

{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v13 = a4;
  if (!result)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v6 = result;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousArray<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ContiguousArray<UInt8> and conformance ContiguousArray<A>, &demangling cache variable for type metadata for ContiguousArray<UInt8>);
  uint64_t result = dispatch thunk of RangeExpression.relative<A>(to:)();
  if ((v11 & 0x8000000000000000) != 0)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v7 = *(void *)(a4 + 16);
  if (v7 < v11 || (uint64_t)v7 < v12) {
    goto LABEL_14;
  }
  if (v12 < 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  uint64_t v8 = a2 - v6;
  if ((uint64_t)(v12 - v11) < a2 - v6) {
    uint64_t v8 = v12 - v11;
  }
  uint64_t v9 = v8;
  uint64_t v10 = 0;
  if (v8 < 1) {
    return 0;
  }
  swift_retain_n();
  closure #1 in DataProtocol.copyBytes<A>(to:from:)(a4 + v11 + 32, a4 + 32 + v12, v6, a2, &v10, &v9);
  swift_release_n();
  return v10;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  if (!result)
  {
    __break(1u);
    goto LABEL_15;
  }
  if ((uint64_t)(a8 >> 1) < a3)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (a3 < a7)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if ((uint64_t)(a8 >> 1) < a4)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (a4 < a7)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (a4 < 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v14 = 0;
  if (__OFSUB__(a4, a3))
  {
LABEL_20:
    __break(1u);
    return result;
  }
  uint64_t v9 = result;
  uint64_t v10 = a2 - result;
  if (a4 - a3 < a2 - result) {
    uint64_t v10 = a4 - a3;
  }
  uint64_t v13 = v10;
  if (v10 < 1) {
    return 0;
  }
  uint64_t v11 = a6 + a3;
  uint64_t v12 = a6 + a4;
  swift_unknownObjectRetain_n();
  closure #1 in DataProtocol.copyBytes<A>(to:from:)(v11, v12, v9, a2, &v14, &v13);
  swift_unknownObjectRelease_n();
  return v14;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  unint64_t v20 = a7;
  if (!result)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v10 = result;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ArraySlice<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ArraySlice<UInt8> and conformance ArraySlice<A>, (uint64_t *)&demangling cache variable for type metadata for ArraySlice<UInt8>);
  uint64_t result = dispatch thunk of RangeExpression.relative<A>(to:)();
  if (v15 < a6)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if ((uint64_t)(a7 >> 1) < v15 || (uint64_t)(a7 >> 1) < v16) {
    goto LABEL_16;
  }
  if (v16 < a6)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v16 < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v14 = 0;
  if (__OFSUB__(v16, v15))
  {
LABEL_19:
    __break(1u);
    return result;
  }
  uint64_t v11 = a2 - v10;
  if (v16 - v15 < a2 - v10) {
    uint64_t v11 = v16 - v15;
  }
  uint64_t v13 = v11;
  if (v11 < 1) {
    return 0;
  }
  swift_unknownObjectRetain_n();
  closure #1 in DataProtocol.copyBytes<A>(to:from:)(a5 + v15, a5 + v16, v10, a2, &v14, &v13);
  swift_unknownObjectRelease_n();
  return v14;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t), void (*a7)(uint64_t, uint64_t))
{
  if (!result)
  {
    __break(1u);
    goto LABEL_15;
  }
  if ((a3 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  unint64_t v8 = *(void *)(a5 + 16);
  if (v8 < a3 || (uint64_t)v8 < a4) {
    goto LABEL_16;
  }
  if (a4 < 0)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  uint64_t v11 = result;
  uint64_t v12 = a2 - result;
  if ((uint64_t)(a4 - a3) < a2 - result) {
    uint64_t v12 = a4 - a3;
  }
  uint64_t v16 = v12;
  uint64_t v17 = 0;
  if (v12 < 1) {
    return 0;
  }
  uint64_t v14 = a5 + a3 + 32;
  uint64_t v15 = a5 + 32 + a4;
  a6(a5, 2);
  closure #1 in DataProtocol.copyBytes<A>(to:from:)(v14, v15, v11, a2, &v17, &v16);
  a7(a5, 2);
  return v17;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t result)
{
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EmptyCollection<UInt8>);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyCollection<UInt8> and conformance EmptyCollection<A>, &demangling cache variable for type metadata for EmptyCollection<UInt8>);
    dispatch thunk of RangeExpression.relative<A>(to:)();
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (!a1)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  if (a5 < 0)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if ((a3 & 0x8000000000000000) != 0)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (a5 < a4)
  {
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x181BAFF00);
  }
  uint64_t v45 = 0;
  if (a4 < 0 || a5 < a3) {
    goto LABEL_57;
  }
  uint64_t v6 = a2;
  uint64_t v8 = a4 - a3;
  uint64_t v37 = a2 - a1;
  if ((uint64_t)(a4 - a3) >= a2 - a1) {
    uint64_t v8 = a2 - a1;
  }
  uint64_t v44 = v8;
  uint64_t v9 = specialized Slice<>.regions.getter(a3, a4, a5, a6);
  uint64_t v10 = v9;
  unint64_t v11 = v9[2];
  if (v11)
  {
    unint64_t v12 = 0;
    uint64_t v36 = v6;
    uint64_t v13 = v9 + 5;
    while (2)
    {
      if (v12 < v11)
      {
        uint64_t v18 = v44;
        if (v44 <= 0) {
          goto LABEL_44;
        }
        uint64_t v20 = *(v13 - 1);
        unint64_t v19 = *v13;
        ++v12;
        switch(*v13 >> 62)
        {
          case 1uLL:
            uint64_t v30 = (v20 >> 32) - (int)v20;
            if (v20 >> 32 < (int)v20) {
              goto LABEL_46;
            }
            uint64_t v31 = *(void *)((v19 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
            if (v31)
            {
              uint64_t v32 = *(void *)((v19 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
              if (__OFSUB__((int)v20, v32)) {
                goto LABEL_52;
              }
              uint64_t v33 = v31 + (int)v20 - v32;
              if (*(void *)((v19 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) < v30) {
                uint64_t v30 = *(void *)((v19 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
              }
              uint64_t v34 = v33 + v30;
            }
            else
            {
              uint64_t v33 = 0;
              uint64_t v34 = 0;
            }
            outlined copy of Data._Representation(*(v13 - 1), *v13);
            outlined copy of Data._Representation(v20, v19);
            closure #1 in DataProtocol.copyBytes<A>(to:from:)(v33, v34, a1, v6, &v45, &v44);
            outlined consume of Data._Representation(v20, v19);
            goto LABEL_15;
          case 2uLL:
            uint64_t v23 = *(void *)(v20 + 16);
            uint64_t v24 = *(void *)(v20 + 24);
            uint64_t v25 = *(void *)((v19 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
            if (v25)
            {
              uint64_t v26 = *(void *)((v19 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
              BOOL v27 = __OFSUB__(v23, v26);
              uint64_t v28 = v23 - v26;
              if (v27) {
                goto LABEL_51;
              }
              BOOL v27 = __OFSUB__(v24, v23);
              uint64_t v29 = v24 - v23;
              if (v27) {
                goto LABEL_49;
              }
              uint64_t v14 = v25 + v28;
              uint64_t v15 = *(void *)((v19 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
              if (v15 >= v29) {
                uint64_t v15 = v29;
              }
              uint64_t v16 = v14 + v15;
            }
            else
            {
              if (__OFSUB__(v24, v23)) {
                goto LABEL_49;
              }
              uint64_t v14 = 0;
              uint64_t v16 = 0;
            }
            outlined copy of Data._Representation(*(v13 - 1), *v13);
            swift_retain();
            swift_retain();
            uint64_t v17 = v16;
            uint64_t v6 = v36;
            closure #1 in DataProtocol.copyBytes<A>(to:from:)(v14, v17, a1, v36, &v45, &v44);
            swift_release();
            swift_release();
LABEL_15:
            outlined consume of Data._Representation(v20, v19);
LABEL_16:
            unint64_t v11 = v10[2];
            v13 += 2;
            if (v12 != v11) {
              continue;
            }
            goto LABEL_44;
          case 3uLL:
            if (v37 < v45) {
              goto LABEL_47;
            }
            goto LABEL_16;
          default:
            uint64_t __src = *(v13 - 1);
            __int16 v39 = v19;
            char v40 = BYTE2(v19);
            char v41 = BYTE3(v19);
            char v42 = BYTE4(v19);
            char v43 = BYTE5(v19);
            uint64_t v21 = v45;
            if (v37 < v45) {
              goto LABEL_48;
            }
            if (v44 >= BYTE6(v19)) {
              int64_t v22 = BYTE6(v19);
            }
            else {
              int64_t v22 = v44;
            }
            if (v37 - v45 < v22) {
              goto LABEL_58;
            }
            memcpy((void *)(a1 + v45), &__src, v22);
            if (__OFADD__(v21, v22)) {
              goto LABEL_50;
            }
            uint64_t v45 = v21 + v22;
            uint64_t v44 = v18 - v22;
            goto LABEL_16;
        }
      }
      break;
    }
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
LABEL_44:
  swift_bridgeObjectRelease();
  return v45;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v49 = a4;
  char v50 = a5;
  if (!a1)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Repeated<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Repeated<UInt8> and conformance Repeated<A>, &demangling cache variable for type metadata for Repeated<UInt8>);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  if (a4 < 0)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if ((v47 & 0x8000000000000000) != 0)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (v48 > a4)
  {
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x181BB0324);
  }
  uint64_t v46 = 0;
  if (v47 > a4 || v48 < 0) {
    goto LABEL_57;
  }
  uint64_t v8 = v48 - v47;
  uint64_t v9 = a2;
  uint64_t v38 = a2 - a1;
  if ((uint64_t)(v48 - v47) >= a2 - a1) {
    uint64_t v8 = a2 - a1;
  }
  uint64_t v45 = v8;
  uint64_t v10 = specialized Slice<>.regions.getter(v47, v48, a4, a5);
  unint64_t v11 = v10;
  unint64_t v12 = v10[2];
  if (v12)
  {
    unint64_t v13 = 0;
    uint64_t v14 = v10 + 5;
    while (2)
    {
      if (v13 < v12)
      {
        uint64_t v19 = v45;
        if (v45 < 1) {
          goto LABEL_44;
        }
        uint64_t v21 = *(v14 - 1);
        unint64_t v20 = *v14;
        ++v13;
        switch(*v14 >> 62)
        {
          case 1uLL:
            uint64_t v31 = (v21 >> 32) - (int)v21;
            if (v21 >> 32 < (int)v21) {
              goto LABEL_46;
            }
            uint64_t v32 = *(void *)((v20 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
            if (v32)
            {
              uint64_t v33 = *(void *)((v20 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
              if (__OFSUB__((int)v21, v33)) {
                goto LABEL_52;
              }
              uint64_t v34 = v32 + (int)v21 - v33;
              if (*(void *)((v20 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) < v31) {
                uint64_t v31 = *(void *)((v20 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
              }
              uint64_t v35 = v34 + v31;
            }
            else
            {
              uint64_t v34 = 0;
              uint64_t v35 = 0;
            }
            outlined copy of Data._Representation(*(v14 - 1), *v14);
            outlined copy of Data._Representation(v21, v20);
            closure #1 in DataProtocol.copyBytes<A>(to:from:)(v34, v35, a1, v9, &v46, &v45);
            outlined consume of Data._Representation(v21, v20);
            goto LABEL_15;
          case 2uLL:
            uint64_t v24 = *(void *)(v21 + 16);
            uint64_t v25 = *(void *)(v21 + 24);
            uint64_t v26 = *(void *)((v20 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
            if (v26)
            {
              uint64_t v27 = *(void *)((v20 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
              BOOL v28 = __OFSUB__(v24, v27);
              uint64_t v29 = v24 - v27;
              if (v28) {
                goto LABEL_51;
              }
              BOOL v28 = __OFSUB__(v25, v24);
              uint64_t v30 = v25 - v24;
              if (v28) {
                goto LABEL_49;
              }
              uint64_t v15 = v26 + v29;
              uint64_t v16 = *(void *)((v20 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
              if (v16 >= v30) {
                uint64_t v16 = v30;
              }
              uint64_t v17 = v15 + v16;
            }
            else
            {
              if (__OFSUB__(v25, v24)) {
                goto LABEL_49;
              }
              uint64_t v15 = 0;
              uint64_t v17 = 0;
            }
            outlined copy of Data._Representation(*(v14 - 1), *v14);
            swift_retain();
            swift_retain();
            uint64_t v18 = v17;
            uint64_t v9 = a2;
            closure #1 in DataProtocol.copyBytes<A>(to:from:)(v15, v18, a1, a2, &v46, &v45);
            swift_release();
            swift_release();
LABEL_15:
            outlined consume of Data._Representation(v21, v20);
LABEL_16:
            unint64_t v12 = v11[2];
            v14 += 2;
            if (v13 != v12) {
              continue;
            }
            goto LABEL_44;
          case 3uLL:
            if (v38 < v46) {
              goto LABEL_47;
            }
            goto LABEL_16;
          default:
            uint64_t __src = *(v14 - 1);
            __int16 v40 = v20;
            char v41 = BYTE2(v20);
            char v42 = BYTE3(v20);
            char v43 = BYTE4(v20);
            char v44 = BYTE5(v20);
            uint64_t v22 = v46;
            if (v38 < v46) {
              goto LABEL_48;
            }
            if (v45 >= BYTE6(v20)) {
              int64_t v23 = BYTE6(v20);
            }
            else {
              int64_t v23 = v45;
            }
            if (v38 - v46 < v23) {
              goto LABEL_58;
            }
            memcpy((void *)(a1 + v46), &__src, v23);
            if (__OFADD__(v22, v23)) {
              goto LABEL_50;
            }
            uint64_t v46 = v22 + v23;
            uint64_t v45 = v19 - v23;
            goto LABEL_16;
        }
      }
      break;
    }
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
LABEL_44:
  swift_bridgeObjectRelease();
  return v46;
}

uint64_t DataProtocol.copyBytes<A, B>(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return DataProtocol.copyBytes<A, B>(to:from:)(a1, a2, a3, a7, a4, a5, a8, a6);
}

uint64_t specialized DataProtocol.copyBytes<A, B>(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!result)
  {
    uint64_t v5 = 0;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v5);
  }
  uint64_t v4 = *(void *)(*(void *)(a4 - 8) + 72);
  if ((unsigned __int128)(a2 * (__int128)v4) >> 64 == (a2 * v4) >> 63)
  {
    uint64_t v5 = result + a2 * v4;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v5);
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A, B>(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!result)
  {
    uint64_t v8 = 0;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v8, a3, a4, a5, a6);
  }
  uint64_t v7 = *(void *)(*(void *)(a7 - 8) + 72);
  if ((unsigned __int128)(a2 * (__int128)v7) >> 64 == (a2 * v7) >> 63)
  {
    uint64_t v8 = result + a2 * v7;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v8, a3, a4, a5, a6);
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A, B>(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (!result)
  {
    uint64_t v10 = 0;
    return a9(result, v10, a3, a4, a5, a7, a8);
  }
  uint64_t v9 = *(void *)(*(void *)(a6 - 8) + 72);
  if ((unsigned __int128)(a2 * (__int128)v9) >> 64 == (a2 * v9) >> 63)
  {
    uint64_t v10 = result + a2 * v9;
    return a9(result, v10, a3, a4, a5, a7, a8);
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A, B>(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  if (!result)
  {
    uint64_t v9 = 0;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v9, a3, a4, a5, a6, a7);
  }
  uint64_t v8 = *(void *)(*(void *)(a8 - 8) + 72);
  if ((unsigned __int128)(a2 * (__int128)v8) >> 64 == (a2 * v8) >> 63)
  {
    uint64_t v9 = result + a2 * v8;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v9, a3, a4, a5, a6, a7);
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A, B>(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (!result)
  {
    uint64_t v9 = 0;
    return a8(result, v9, a3, a4, a6, a7);
  }
  uint64_t v8 = *(void *)(*(void *)(a5 - 8) + 72);
  if ((unsigned __int128)(a2 * (__int128)v8) >> 64 == (a2 * v8) >> 63)
  {
    uint64_t v9 = result + a2 * v8;
    return a8(result, v9, a3, a4, a6, a7);
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A, B>(to:from:)(uint64_t result)
{
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EmptyCollection<UInt8>);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyCollection<UInt8> and conformance EmptyCollection<A>, &demangling cache variable for type metadata for EmptyCollection<UInt8>);
    dispatch thunk of RangeExpression.relative<A>(to:)();
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A, B>(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  if (!result)
  {
    uint64_t v7 = 0;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v7, a3, a4, a5);
  }
  uint64_t v6 = *(void *)(*(void *)(a6 - 8) + 72);
  if ((unsigned __int128)(a2 * (__int128)v6) >> 64 == (a2 * v6) >> 63)
  {
    uint64_t v7 = result + a2 * v6;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v7, a3, a4, a5);
  }
  __break(1u);
  return result;
}

uint64_t DataProtocol.copyBytes<A, B>(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!result)
  {
    uint64_t v9 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 104))(result, v9, a3, a6, a8, a4);
  }
  uint64_t v8 = *(void *)(*(void *)(a5 - 8) + 72);
  if ((unsigned __int128)(a2 * (__int128)v8) >> 64 == (a2 * v8) >> 63)
  {
    uint64_t v9 = result + a2 * v8;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 104))(result, v9, a3, a6, a8, a4);
  }
  __break(1u);
  return result;
}

uint64_t MutableDataProtocol.resetBytes<A>(in:)()
{
  return MutableDataProtocol.resetBytes<A>(in:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t result;
  uint64_t v5;
  char v6;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v0 = type metadata accessor for Range();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v5 - v2;
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t result = dispatch thunk of RandomAccessCollection.distance(from:to:)();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Repeated<UInt8>);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Repeated<UInt8> and conformance Repeated<A>, &demangling cache variable for type metadata for Repeated<UInt8>);
    dispatch thunk of RangeReplaceableCollection.replaceSubrange<A>(_:with:)();
    return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  return result;
}

uint64_t specialized MutableDataProtocol.resetBytes<A>(in:)()
{
  lazy protocol witness table accessor for type Data and conformance Data();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t result = specialized RandomAccessCollection<>.distance(from:to:)(v2, v3, *(void *)v0, *(void *)(v0 + 8));
  if ((result & 0x8000000000000000) == 0) {
    return specialized Data.replaceSubrange<A>(_:with:)(v2, v3, result, 0);
  }
  __break(1u);
  return result;
}

uint64_t specialized MutableDataProtocol.resetBytes<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5, uint64_t a6, uint64_t (*a7)(void))
{
  __swift_instantiateConcreteTypeFromMangledName(a4);
  lazy protocol witness table accessor for type [String] and conformance [A](a5, a4);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t result = v11;
  if (__OFSUB__(v12, v11))
  {
    __break(1u);
  }
  else if (((v12 - v11) & 0x8000000000000000) == 0)
  {
    return a7();
  }
  __break(1u);
  return result;
}

uint64_t DataProtocol.firstRange<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v51 = a3;
  uint64_t v52 = a5;
  uint64_t v49 = a6;
  uint64_t v50 = a1;
  uint64_t v53 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v48 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  unint64_t v47 = (char *)&v41 - v11;
  uint64_t v12 = *(void **)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v41 - v17;
  swift_getAssociatedConformanceWitness();
  uint64_t v19 = type metadata accessor for Range();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v45 = (char *)&v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v46 = (char *)&v41 - v23;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v54 = a2;
  uint64_t v55 = v6;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v43 = v19;
    uint64_t v44 = v20;
    uint64_t v25 = TupleTypeMetadata2;
    uint64_t v26 = v47;
    uint64_t v27 = &v47[*(int *)(TupleTypeMetadata2 + 48)];
    BOOL v28 = (void (*)(char *, char *, uint64_t))v12[4];
    v28(v47, v18, AssociatedTypeWitness);
    char v42 = v27;
    v28(v27, v15, AssociatedTypeWitness);
    uint64_t v29 = v48;
    uint64_t v30 = &v48[*(int *)(v25 + 48)];
    uint64_t v31 = (void (*)(char *, char *, uint64_t))v12[2];
    v31(v48, v26, AssociatedTypeWitness);
    v31(v30, v27, AssociatedTypeWitness);
    uint64_t v32 = v45;
    v28(v45, v29, AssociatedTypeWitness);
    uint64_t v33 = (void (*)(char *, uint64_t))v12[1];
    v33(v30, AssociatedTypeWitness);
    uint64_t v34 = &v29[*(int *)(TupleTypeMetadata2 + 48)];
    v28(v29, v26, AssociatedTypeWitness);
    v28(v34, v42, AssociatedTypeWitness);
    uint64_t v35 = v43;
    v28(&v32[*(int *)(v43 + 36)], v34, AssociatedTypeWitness);
    v33(v29, AssociatedTypeWitness);
    uint64_t v36 = v44;
    uint64_t v37 = v46;
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v46, v32, v35);
    uint64_t v38 = v53;
    __int16 v39 = *(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 72);
    uint64_t WitnessTable = swift_getWitnessTable();
    v39(v50, v37, v51, v35, v52, WitnessTable, v54, v38);
    return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v37, v35);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DataProtocol.lastRange<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v51 = a3;
  uint64_t v52 = a5;
  uint64_t v49 = a6;
  uint64_t v50 = a1;
  uint64_t v53 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v48 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  unint64_t v47 = (char *)&v41 - v11;
  uint64_t v12 = *(void **)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v41 - v17;
  swift_getAssociatedConformanceWitness();
  uint64_t v19 = type metadata accessor for Range();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v45 = (char *)&v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v46 = (char *)&v41 - v23;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v54 = a2;
  uint64_t v55 = v6;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v43 = v19;
    uint64_t v44 = v20;
    uint64_t v25 = TupleTypeMetadata2;
    uint64_t v26 = v47;
    uint64_t v27 = &v47[*(int *)(TupleTypeMetadata2 + 48)];
    BOOL v28 = (void (*)(char *, char *, uint64_t))v12[4];
    v28(v47, v18, AssociatedTypeWitness);
    char v42 = v27;
    v28(v27, v15, AssociatedTypeWitness);
    uint64_t v29 = v48;
    uint64_t v30 = &v48[*(int *)(v25 + 48)];
    uint64_t v31 = (void (*)(char *, char *, uint64_t))v12[2];
    v31(v48, v26, AssociatedTypeWitness);
    v31(v30, v27, AssociatedTypeWitness);
    uint64_t v32 = v45;
    v28(v45, v29, AssociatedTypeWitness);
    uint64_t v33 = (void (*)(char *, uint64_t))v12[1];
    v33(v30, AssociatedTypeWitness);
    uint64_t v34 = &v29[*(int *)(TupleTypeMetadata2 + 48)];
    v28(v29, v26, AssociatedTypeWitness);
    v28(v34, v42, AssociatedTypeWitness);
    uint64_t v35 = v43;
    v28(&v32[*(int *)(v43 + 36)], v34, AssociatedTypeWitness);
    v33(v29, AssociatedTypeWitness);
    uint64_t v36 = v44;
    uint64_t v37 = v46;
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v46, v32, v35);
    uint64_t v38 = v53;
    __int16 v39 = *(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 80);
    uint64_t WitnessTable = swift_getWitnessTable();
    v39(v50, v37, v51, v35, v52, WitnessTable, v54, v38);
    return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v37, v35);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DataProtocol.copyBytes(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v46 = a1;
  uint64_t v47 = a2;
  uint64_t v48 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v44 = (char *)&v40 - v10;
  uint64_t v11 = *(void **)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v40 - v16;
  swift_getAssociatedConformanceWitness();
  uint64_t v18 = type metadata accessor for Range();
  uint64_t v45 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  char v42 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v43 = (char *)&v40 - v21;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v49 = a3;
  uint64_t v50 = v4;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v41 = v18;
    uint64_t v23 = v8;
    uint64_t v24 = TupleTypeMetadata2;
    uint64_t v25 = v44;
    uint64_t v26 = &v44[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v27 = (void (*)(char *, char *, uint64_t))v11[4];
    v27(v44, v17, AssociatedTypeWitness);
    __int16 v40 = v26;
    v27(v26, v14, AssociatedTypeWitness);
    BOOL v28 = &v23[*(int *)(v24 + 48)];
    uint64_t v29 = (void (*)(char *, char *, uint64_t))v11[2];
    v29(v23, v25, AssociatedTypeWitness);
    v29(v28, v26, AssociatedTypeWitness);
    uint64_t v30 = v42;
    v27(v42, v23, AssociatedTypeWitness);
    uint64_t v31 = (void (*)(char *, uint64_t))v11[1];
    v31(v28, AssociatedTypeWitness);
    uint64_t v32 = &v23[*(int *)(TupleTypeMetadata2 + 48)];
    v27(v23, v25, AssociatedTypeWitness);
    v27(v32, v40, AssociatedTypeWitness);
    uint64_t v33 = v41;
    v27(&v30[*(int *)(v41 + 36)], v32, AssociatedTypeWitness);
    v31(v23, AssociatedTypeWitness);
    uint64_t v34 = v45;
    uint64_t v35 = v43;
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v43, v30, v33);
    uint64_t v36 = v48;
    uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 104);
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v39 = v37(v46, v47, v35, v33, WitnessTable, v49, v36);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v33);
    return v39;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DataProtocol.copyBytes<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v50 = a2;
  uint64_t v51 = a4;
  uint64_t v49 = a1;
  uint64_t v52 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v47 = (char *)&v42 - v11;
  uint64_t v12 = *(void **)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v42 - v17;
  swift_getAssociatedConformanceWitness();
  uint64_t v19 = type metadata accessor for Range();
  uint64_t v48 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v45 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v46 = (char *)&v42 - v22;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v53 = a3;
  uint64_t v54 = v5;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v44 = v19;
    uint64_t v24 = v9;
    uint64_t v25 = TupleTypeMetadata2;
    uint64_t v26 = v47;
    uint64_t v27 = &v47[*(int *)(TupleTypeMetadata2 + 48)];
    BOOL v28 = (void (*)(void))v12[4];
    ((void (*)(char *, char *, uint64_t))v28)(v47, v18, AssociatedTypeWitness);
    uint64_t v43 = v27;
    ((void (*)(char *, char *, uint64_t))v28)(v27, v15, AssociatedTypeWitness);
    uint64_t v29 = &v24[*(int *)(v25 + 48)];
    uint64_t v30 = (void (*)(char *, char *, uint64_t))v12[2];
    v30(v24, v26, AssociatedTypeWitness);
    v30(v29, v27, AssociatedTypeWitness);
    uint64_t v31 = v45;
    v28();
    uint64_t v32 = (void (*)(char *, uint64_t))v12[1];
    v32(v29, AssociatedTypeWitness);
    uint64_t v33 = &v24[*(int *)(TupleTypeMetadata2 + 48)];
    ((void (*)(char *, char *, uint64_t))v28)(v24, v26, AssociatedTypeWitness);
    ((void (*)(char *, char *, uint64_t))v28)(v33, v43, AssociatedTypeWitness);
    uint64_t v34 = v44;
    uint64_t v35 = v31;
    ((void (*)(char *, char *, uint64_t))v28)(&v31[*(int *)(v44 + 36)], v33, AssociatedTypeWitness);
    v32(v24, AssociatedTypeWitness);
    uint64_t v36 = v48;
    uint64_t v37 = v46;
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v46, v35, v34);
    uint64_t v38 = v52;
    uint64_t v39 = *(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 112);
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v41 = v39(v49, v50, v37, v51, v34, WitnessTable, v53, v38);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v34);
    return v41;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized DataProtocol.matches<A>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a4 + 8) + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v34 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v33 = (char *)v30 - v11;
  MEMORY[0x1F4188790](v12);
  uint64_t v45 = a2;
  uint64_t v40 = a1;
  uint64_t v41 = (char *)v30 - v13;
  uint64_t v38 = v7;
  uint64_t v39 = a3;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v14 = type metadata accessor for DispatchData();
  uint64_t v42 = lazy protocol witness table accessor for type DispatchData and conformance DispatchData((unint64_t *)&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData);
  uint64_t v31 = (void (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v32 = v8 + 16;
  uint64_t v35 = (void (**)(char *, uint64_t))(v8 + 8);
  v30[0] = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v30[1] = v14;
  uint64_t v15 = (void (**)(char *, char *, uint64_t))(v8 + 16);
  uint64_t v16 = v34;
  uint64_t v17 = AssociatedTypeWitness;
  while (1)
  {
    uint64_t v18 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    int v20 = *v19;
    v18(v44, 0);
    uint64_t v21 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    int v23 = *v22;
    v21(v44, 0);
    if (v20 != v23) {
      break;
    }
    uint64_t v43 = v45;
    dispatch thunk of Collection.index(after:)();
    uint64_t v45 = v44[0];
    uint64_t v37 = *v15;
    uint64_t v24 = v41;
    v37(v16, v41, v17);
    uint64_t v25 = v33;
    dispatch thunk of Collection.index(after:)();
    uint64_t v26 = *v35;
    (*v35)(v16, v17);
    v26(v24, v17);
    (*v31)(v24, v25, v17);
    v37(v25, v24, v17);
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
    v26(v16, v17);
    v26(v25, v17);
    if ((v27 & 1) == 0)
    {
      uint64_t v28 = v45;
      dispatch thunk of Collection.endIndex.getter();
      if (v28 != v44[0]) {
        continue;
      }
    }
    goto LABEL_7;
  }
  char v27 = 0;
  uint64_t v26 = *v35;
LABEL_7:
  v26(v41, AssociatedTypeWitness);
  return v27 & 1;
}

uint64_t specialized DataProtocol.matches<A>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v46 = a3;
  uint64_t v12 = *(void *)(*(void *)(*(void *)(a7 + 8) + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v43 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v42 = (char *)&v35 - v16;
  MEMORY[0x1F4188790](v17);
  uint64_t v52 = a6;
  uint64_t v53 = (char *)&v35 - v18;
  uint64_t v50 = v12;
  uint64_t v51 = a1;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  uint64_t v20 = a5 + a4;
  if (!__OFADD__(a5, a4))
  {
    uint64_t v21 = (void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v40 = (void (**)(char *, char *, uint64_t))(v13 + 32);
    uint64_t v41 = (void (**)(char *, char *, uint64_t))(v13 + 16);
    if (a2 <= v20) {
      uint64_t v22 = a5 + a4;
    }
    else {
      uint64_t v22 = a2;
    }
    uint64_t v44 = v22;
    uint64_t v36 = a5 + a4 - 1;
    uint64_t v45 = (void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v35 = (unint64_t)v21 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v23 = a2;
    uint64_t v38 = a5;
    uint64_t v39 = a2;
    uint64_t v37 = v20;
    uint64_t v25 = v42;
    uint64_t v24 = v43;
    uint64_t v26 = v21;
    while (a2 >= a5 && v20 >= v23)
    {
      if (__OFSUB__(v23, a5)) {
        goto LABEL_17;
      }
      int v27 = *(unsigned __int8 *)(v46 + v23 - a5);
      uint64_t v28 = (uint64_t (*)(char *, void))dispatch thunk of Collection.subscript.read();
      int v30 = *v29;
      uint64_t result = v28(v54, 0);
      if (v27 != v30)
      {
        char v34 = 0;
        uint64_t v33 = *v45;
LABEL_15:
        v33(v53, AssociatedTypeWitness);
        return v34 & 1;
      }
      if (v44 == v23) {
        goto LABEL_18;
      }
      uint64_t v48 = v23;
      uint64_t v49 = *v41;
      uint64_t v31 = v53;
      uint64_t v32 = AssociatedTypeWitness;
      v49(v24, v53, AssociatedTypeWitness);
      dispatch thunk of Collection.index(after:)();
      uint64_t v33 = *v26;
      (*v26)(v24, v32);
      v33(v31, v32);
      (*v40)(v31, v25, v32);
      v49(v25, v31, v32);
      dispatch thunk of Collection.endIndex.getter();
      swift_getAssociatedConformanceWitness();
      char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
      v33(v24, v32);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v33)(v25, v32);
      if ((v34 & 1) == 0)
      {
        uint64_t v23 = v48 + 1;
        a5 = v38;
        a2 = v39;
        uint64_t v20 = v37;
        if (v36 != v48) {
          continue;
        }
      }
      goto LABEL_15;
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.matches<A>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a6 + 8) + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v49 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v48 = (char *)&v38 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v38 - v17;
  uint64_t v51 = v11;
  uint64_t v52 = a1;
  dispatch thunk of Collection.startIndex.getter();
  unint64_t v19 = a4 >> 62;
  if (a4 >> 62 == 3) {
    goto LABEL_36;
  }
  uint64_t v41 = a4 & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v40 = (int)a3;
  uint64_t v44 = a3 >> 32;
  uint64_t v46 = (void (**)(char *, char *, uint64_t))(v12 + 16);
  unint64_t v39 = a4;
  uint64_t v54 = BYTE6(a4);
  uint64_t v50 = (void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v45 = (void (**)(char *, char *, uint64_t))(v12 + 32);
  unint64_t v38 = (unint64_t)a3 >> 8;
  uint64_t v20 = a2;
  unint64_t v42 = v19;
  uint64_t v43 = a3;
  uint64_t v47 = v18;
  uint64_t v57 = a5;
  while (1)
  {
    if (v19)
    {
      if (v19 == 1)
      {
        if (v20 < v40 || v20 >= v44)
        {
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
        }
        uint64_t v21 = *(void *)(v41 + 16);
        if (!v21) {
          goto LABEL_34;
        }
        uint64_t v22 = *(void *)(v41 + 40);
        BOOL v23 = __OFSUB__(v20, v22);
        uint64_t v24 = v20 - v22;
        if (v23) {
          goto LABEL_31;
        }
      }
      else
      {
        if (v20 < *(void *)(a3 + 16)) {
          goto LABEL_30;
        }
        if (v20 >= *(void *)(a3 + 24)) {
          goto LABEL_32;
        }
        uint64_t v21 = *(void *)(v41 + 16);
        if (!v21) {
          goto LABEL_35;
        }
        uint64_t v26 = *(void *)(v41 + 40);
        BOOL v23 = __OFSUB__(v20, v26);
        uint64_t v24 = v20 - v26;
        if (v23) {
          goto LABEL_33;
        }
      }
      int v25 = *(unsigned __int8 *)(v21 + v24);
    }
    else
    {
      if (v20 >= v54) {
        goto LABEL_29;
      }
      v58[0] = v40;
      v58[1] = v38;
      v58[2] = BYTE2(a3);
      v58[3] = BYTE3(a3);
      v58[4] = BYTE4(a3);
      v58[5] = BYTE5(a3);
      v58[6] = BYTE6(a3);
      v58[7] = HIBYTE(a3);
      int v59 = v39;
      __int16 v60 = WORD2(v39);
      int v25 = v58[v20];
    }
    int v27 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
    int v29 = *v28;
    v27(v58, 0);
    if (v25 != v29)
    {
      char v35 = 0;
      (*v50)(v18, AssociatedTypeWitness);
      return v35 & 1;
    }
    int v30 = *v46;
    uint64_t v55 = v20;
    int64_t v56 = v30;
    uint64_t v31 = v49;
    uint64_t v32 = AssociatedTypeWitness;
    v30(v49, v18, AssociatedTypeWitness);
    uint64_t v33 = v48;
    dispatch thunk of Collection.index(after:)();
    char v34 = *v50;
    (*v50)(v31, v32);
    v34(v18, v32);
    (*v45)(v18, v33, v32);
    v56(v33, v18, v32);
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
    v34(v31, v32);
    v34(v33, v32);
    if (v35) {
      break;
    }
    uint64_t v36 = v54;
    LODWORD(v19) = v42;
    a3 = v43;
    if (v42)
    {
      uint64_t v36 = v44;
      if (v42 != 1) {
        uint64_t v36 = *(void *)(v43 + 24);
      }
    }
    uint64_t v20 = v55 + 1;
    uint64_t v18 = v47;
    if (v55 + 1 == v36) {
      goto LABEL_26;
    }
  }
  uint64_t v18 = v47;
LABEL_26:
  v34(v18, AssociatedTypeWitness);
  return v35 & 1;
}

uint64_t specialized DataProtocol.matches<A>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a6 + 8) + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v38 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v37 = (char *)v34 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)v34 - v17;
  uint64_t v46 = a1;
  uint64_t v40 = v11;
  dispatch thunk of Collection.startIndex.getter();
  char v35 = (void (**)(char *, char *, uint64_t))(v12 + 32);
  uint64_t v36 = (void (**)(char *, char *, uint64_t))(v12 + 16);
  uint64_t v19 = ~a2 + a4;
  uint64_t v20 = (unsigned __int8 *)(a3 + a2);
  unint64_t v39 = (void (**)(char *, uint64_t))(v12 + 8);
  v34[1] = (v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v45 = a5;
  uint64_t v21 = AssociatedTypeWitness;
  uint64_t v22 = (void (**)(char *, uint64_t))(v12 + 8);
  do
  {
    uint64_t v23 = v19;
    int v25 = *v20;
    uint64_t v24 = v20 + 1;
    uint64_t v26 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
    int v28 = *v27;
    v26(v47, 0);
    if (v25 != v28)
    {
      char v32 = 0;
      (*v39)(v18, AssociatedTypeWitness);
      return v32 & 1;
    }
    uint64_t v42 = v23;
    uint64_t v43 = v24;
    uint64_t v44 = *v36;
    int v29 = v38;
    v44(v38, v18, v21);
    int v30 = v37;
    dispatch thunk of Collection.index(after:)();
    uint64_t v31 = *v22;
    (*v22)(v29, v21);
    v31(v18, v21);
    (*v35)(v18, v30, v21);
    v44(v30, v18, v21);
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
    v31(v29, v21);
    v31(v30, v21);
    if (v32) {
      break;
    }
    uint64_t v20 = v43;
    uint64_t v19 = v42 - 1;
  }
  while (v42);
  v31(v18, AssociatedTypeWitness);
  return v32 & 1;
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (**v24)(char *, uint64_t);
  uint64_t v25;
  int v26;
  uint64_t (*v27)(char *, void);
  unsigned __int8 *v28;
  int v29;
  uint64_t result;
  void (*v31)(char *, uint64_t);
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (**v36)(char *, char *, uint64_t);
  void (**v37)(char *, char *, uint64_t);
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void (**v42)(char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char v50[40];

  uint64_t v11 = *(void *)(*(void *)(*(void *)(a6 + 8) + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v39 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  unint64_t v38 = (char *)&v33 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v48 = a5;
  uint64_t v49 = (char *)&v33 - v17;
  uint64_t v46 = v11;
  uint64_t v47 = a1;
  dispatch thunk of Collection.startIndex.getter();
  if (a3) {
    uint64_t v18 = a4 - a3;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v40 = v18;
  uint64_t v41 = a2;
  uint64_t v36 = (void (**)(char *, char *, uint64_t))(v12 + 32);
  uint64_t v37 = (void (**)(char *, char *, uint64_t))(v12 + 16);
  uint64_t v42 = (void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v33 = (v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  char v34 = a4 - a3 - 1;
  uint64_t v19 = a2;
  char v35 = a3;
  uint64_t v21 = v38;
  uint64_t v20 = v39;
  uint64_t v22 = v49;
  uint64_t v23 = AssociatedTypeWitness;
  uint64_t v24 = (void (**)(char *, uint64_t))(v12 + 8);
  while (1)
  {
    int v25 = v19;
    uint64_t v26 = *(unsigned __int8 *)(a3 + v19);
    int v27 = (uint64_t (*)(char *, void))dispatch thunk of Collection.subscript.read();
    int v29 = *v28;
    uint64_t result = v27(v50, 0);
    if (v26 != v29)
    {
      char v32 = 0;
      uint64_t v31 = *v42;
LABEL_13:
      v31(v49, AssociatedTypeWitness);
      return v32 & 1;
    }
    if (v41 < 0 || v25 >= v40) {
      break;
    }
    uint64_t v44 = v25;
    uint64_t v45 = *v37;
    v45(v20, v22, v23);
    dispatch thunk of Collection.index(after:)();
    uint64_t v31 = *v24;
    (*v24)(v20, v23);
    v31(v22, v23);
    (*v36)(v22, v21, v23);
    v45(v21, v22, v23);
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
    v31(v20, v23);
    v31(v21, v23);
    if ((v32 & 1) == 0)
    {
      uint64_t v19 = v44 + 1;
      a3 = v35;
      if (!v35 || v34 != v44) {
        continue;
      }
    }
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.matches<A>(_:from:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a5 + 8) + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v41 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v40 = (char *)&v37 - v13;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v37 - v15;
  uint64_t v50 = a1;
  uint64_t v17 = a4;
  uint64_t v43 = v9;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  unint64_t v19 = *(void *)(a3 + 16);
  unint64_t v38 = (void (**)(char *, char *, uint64_t))(v10 + 32);
  unint64_t v39 = (void (**)(char *, char *, uint64_t))(v10 + 16);
  unint64_t v20 = ~a2 + v19;
  BOOL v21 = v19 >= a2;
  unint64_t v22 = v19 - a2;
  if (v21) {
    unint64_t v23 = v22;
  }
  else {
    unint64_t v23 = 0;
  }
  uint64_t v24 = (unsigned __int8 *)(a2 + a3 + 32);
  uint64_t v42 = (void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v37 = (v10 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v49 = v17;
  uint64_t v25 = AssociatedTypeWitness;
  uint64_t v26 = (void (**)(char *, uint64_t))(v10 + 8);
  while (v23)
  {
    unint64_t v27 = v20;
    int v28 = *v24;
    int v29 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
    int v31 = *v30;
    v29(v51, 0);
    if (v28 != v31)
    {
      char v36 = 0;
      (*v42)(v16, AssociatedTypeWitness);
      return v36 & 1;
    }
    unint64_t v45 = v27;
    uint64_t v46 = v24;
    char v32 = *v39;
    unint64_t v47 = v23;
    uint64_t v48 = v32;
    uint64_t v33 = v41;
    v32(v41, v16, v25);
    char v34 = v40;
    dispatch thunk of Collection.index(after:)();
    char v35 = *v26;
    (*v26)(v33, v25);
    v35(v16, v25);
    (*v38)(v16, v34, v25);
    v48(v34, v16, v25);
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
    v35(v33, v25);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v35)(v34, v25);
    if ((v36 & 1) == 0)
    {
      unint64_t v20 = v45 - 1;
      unint64_t v23 = v47 - 1;
      uint64_t v24 = v46 + 1;
      if (v45) {
        continue;
      }
    }
    v35(v16, AssociatedTypeWitness);
    return v36 & 1;
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.matches<A>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6)
{
  int v36 = a4;
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a6 + 8) + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v32 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v33 = (char *)&v28 - v14;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v28 - v16;
  uint64_t v35 = v9;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  int v30 = (void (**)(char *, char *, uint64_t))(v11 + 32);
  int v31 = (void (**)(char *, char *, uint64_t))(v11 + 16);
  uint64_t v37 = a3;
  uint64_t v38 = a2;
  char v34 = (void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v28 = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v29 = a3 - 1;
  uint64_t v41 = a5;
  unint64_t v20 = v33;
  unint64_t v19 = v34;
  while ((v38 & 0x8000000000000000) == 0 && a2 < v37)
  {
    BOOL v21 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
    int v23 = *v22;
    v21(v42, 0);
    if (v23 != v36)
    {
      char v27 = 0;
      (*v34)(v17, AssociatedTypeWitness);
      return v27 & 1;
    }
    uint64_t v24 = *v31;
    uint64_t v39 = a2;
    uint64_t v40 = v24;
    uint64_t v25 = v32;
    v24(v32, v17, AssociatedTypeWitness);
    dispatch thunk of Collection.index(after:)();
    uint64_t v26 = *v19;
    (*v19)(v25, AssociatedTypeWitness);
    v26(v17, AssociatedTypeWitness);
    (*v30)(v17, v20, AssociatedTypeWitness);
    v40(v20, v17, AssociatedTypeWitness);
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
    v26(v25, AssociatedTypeWitness);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v26)(v20, AssociatedTypeWitness);
    if ((v27 & 1) == 0)
    {
      a2 = v39 + 1;
      if (v29 != v39) {
        continue;
      }
    }
    v26(v17, AssociatedTypeWitness);
    return v27 & 1;
  }
  __break(1u);
  return result;
}

uint64_t DataProtocol.matches<A>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a6 + 8) + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v68 = *(char **)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v63 = (char *)v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v62 = (char *)v56 - v14;
  MEMORY[0x1F4188790](v15);
  uint64_t v16 = *(void *)(*(void *)(*(void *)(a5 + 8) + 8) + 8);
  uint64_t v75 = a3;
  uint64_t v17 = v16;
  unint64_t v19 = (char *)v56 - v18;
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v71 = (char *)v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v70 = (char *)v56 - v24;
  double v26 = MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)v56 - v27;
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
  v21 += 16;
  char v69 = v29;
  ((void (*)(char *, uint64_t, uint64_t, double))v29)((char *)v56 - v27, a2, v20, v26);
  uint64_t v73 = a4;
  uint64_t v74 = v19;
  uint64_t v65 = a1;
  uint64_t v30 = v11;
  int v31 = v28;
  dispatch thunk of Collection.startIndex.getter();
  char v32 = (void (**)(char *, uint64_t))(v21 - 8);
  uint64_t v72 = v21;
  uint64_t v61 = (void (**)(char *, char *, uint64_t))(v21 + 16);
  __int16 v60 = (char **)(v68 + 16);
  uint64_t v76 = (void (**)(char *, uint64_t))(v68 + 8);
  int v59 = (void (**)(char *, char *, uint64_t))(v68 + 32);
  v56[1] = v17;
  uint64_t v58 = (void (**)(char *, uint64_t))(v21 - 8);
  uint64_t v57 = v28;
  v56[0] = v30;
  while (1)
  {
    uint64_t v33 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
    int v35 = *v34;
    v33(v77, 0);
    int v36 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
    int v38 = *v37;
    v36(v77, 0);
    uint64_t v64 = (unint64_t)v76 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    if (v35 != v38)
    {
      LODWORD(v68) = 0;
      (*v76)(v74, AssociatedTypeWitness);
      goto LABEL_9;
    }
    uint64_t v39 = v71;
    v69(v71, v31, v20);
    uint64_t v40 = v70;
    dispatch thunk of Collection.index(after:)();
    uint64_t v41 = *v32;
    (*v32)(v39, v20);
    uint64_t v67 = v41;
    v41(v31, v20);
    (*v61)(v31, v40, v20);
    uint64_t v68 = *v60;
    uint64_t v42 = v20;
    uint64_t v43 = v63;
    uint64_t v44 = v74;
    uint64_t v45 = AssociatedTypeWitness;
    ((void (*)(char *, char *, uint64_t))v68)(v63, v74, AssociatedTypeWitness);
    uint64_t v46 = v62;
    dispatch thunk of Collection.index(after:)();
    unint64_t v47 = *v76;
    (*v76)(v43, v45);
    v47(v44, v45);
    (*v59)(v44, v46, v45);
    ((void (*)(char *, char *, uint64_t))v68)(v46, v44, v45);
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    LODWORD(v44) = dispatch thunk of static Equatable.== infix(_:_:)();
    v47(v43, v45);
    v47(v46, v45);
    LODWORD(v68) = v44;
    if (v44) {
      break;
    }
    uint64_t v48 = v70;
    uint64_t v49 = v57;
    v69(v70, v57, v42);
    uint64_t v50 = v71;
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v52 = v50;
    uint64_t v53 = v58;
    uint64_t v54 = v67;
    v67(v52, v42);
    v54(v48, v42);
    uint64_t v20 = v42;
    int v31 = v49;
    char v32 = v53;
    if (v51) {
      goto LABEL_8;
    }
  }
  uint64_t v20 = v42;
  int v31 = v57;
  char v32 = v58;
LABEL_8:
  v47(v74, AssociatedTypeWitness);
LABEL_9:
  (*v32)(v31, v20);
  return v68 & 1;
}

void DataProtocol<>.copyBytes<A, B>(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v23[1] = a3;
  uint64_t v24 = a5;
  uint64_t v25 = a8;
  uint64_t v26 = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v14 = type metadata accessor for Range();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)v23 - v17;
  if (a1)
  {
    v23[0] = v16;
    uint64_t v19 = dispatch thunk of RangeExpression.relative<A>(to:)();
    double v20 = MEMORY[0x1F4188790](v19);
    uint64_t v21 = v24;
    v23[-10] = a4;
    v23[-9] = v21;
    v23[-8] = a6;
    v23[-7] = a7;
    v23[-6] = v25;
    v23[-5] = a9;
    v23[-4] = v9;
    v23[-3] = v18;
    uint64_t v22 = v26;
    v23[-2] = a1;
    v23[-1] = v22;
    (*(void (**)(void *(*)(uint64_t, uint64_t), double))(a7 + 8))(partial apply for closure #1 in DataProtocol<>.copyBytes<A, B>(to:from:), v20);
    (*(void (**)(char *, void))(v15 + 8))(v18, v23[0]);
  }
  else
  {
    __break(1u);
  }
}

void *closure #1 in DataProtocol<>.copyBytes<A, B>(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  double v20 = a5;
  uint64_t v19[3] = a9;
  void v19[2] = a12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = (char *)v19 - v15;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v17 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Range();
  uint64_t result = (void *)dispatch thunk of RandomAccessCollection.distance(from:to:)();
  if (v20)
  {
    if (a1) {
      return memcpy(v20, (const void *)(a1 + v17), (size_t)result);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *partial apply for closure #1 in DataProtocol<>.copyBytes<A, B>(to:from:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in DataProtocol<>.copyBytes<A, B>(to:from:)(a1, a2, *(void *)(v2 + 64), *(void *)(v2 + 72), *(void **)(v2 + 80), *(void *)(v2 + 88), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56));
}

void *specialized Slice<>.regions.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v24 = 0;
  if (!a3)
  {
    uint64_t v7 = 0;
    uint64_t v21 = (void *)MEMORY[0x1E4FBC860];
    unint64_t v9 = 0xC000000000000000;
    goto LABEL_19;
  }
  if (a3 < 1) {
LABEL_21:
  }
    __break(1u);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<UInt8>);
  uint64_t v28 = &protocol witness table for <A> CollectionOfOne<A>;
  LOBYTE(v25) = a4;
  char __src = *(unsigned char *)__swift_project_boxed_opaque_existential_1(&v25, v27);
  uint64_t v7 = specialized Data.InlineData.init(_:)(&__src, &v24);
  unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFLL;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
  uint64_t v10 = 0;
  uint64_t v21 = (void *)MEMORY[0x1E4FBC860];
  do
  {
    if (v10 <= a3) {
      uint64_t v11 = a3;
    }
    else {
      uint64_t v11 = v10;
    }
    uint64_t v12 = -v11;
    ++v10;
    while (1)
    {
      if (v12 + v10 == 1)
      {
        __break(1u);
        goto LABEL_21;
      }
      specialized closure #1 in Slice<>.regions.getter(v7, v9, &v24, a3, a1, &v25, a2);
      unint64_t v13 = v26;
      if (v26 >> 60 != 15) {
        break;
      }
      if (++v10 - a3 == 1) {
        goto LABEL_19;
      }
    }
    uint64_t v20 = v25;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
    }
    unint64_t v15 = v21[2];
    unint64_t v14 = v21[3];
    unint64_t v16 = v15 + 1;
    if (v15 >= v14 >> 1)
    {
      uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v21);
      unint64_t v16 = v15 + 1;
      uint64_t v21 = v18;
    }
    v21[2] = v16;
    uint64_t v17 = &v21[2 * v15];
    v17[4] = v20;
    void v17[5] = v13;
  }
  while (a3 != v10);
LABEL_19:
  outlined consume of Data._Representation(v7, v9);
  return v21;
}

uint64_t Slice<>.regions.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v29 = AssociatedTypeWitness;
  uint64_t v30 = v8;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v28 = (char *)v27 - v9;
  v27[1] = *(void *)(*(void *)(*(void *)(a2 + 8) + 8) + 8);
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  int v31 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  unint64_t v15 = (char *)v27 - v14;
  double v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)v27 - v18;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16);
  v20((char *)v27 - v18, v3, v10, v17);
  ((void (*)(char *, uint64_t, uint64_t))v20)(v15, v3 + *(int *)(a1 + 36), v10);
  uint64_t v21 = v31;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v22 = v28;
  (*(void (**)(uint64_t, uint64_t))(a2 + 64))(v6, a2);
  uint64_t v32 = v6;
  uint64_t v33 = a2;
  char v34 = v21;
  uint64_t v35 = v3;
  int v36 = v19;
  uint64_t v37 = v15;
  uint64_t v23 = v29;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v24 = Sequence.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v22, v23);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v11 + 8);
  v25(v15, v10);
  v25(v19, v10);
  v25(v31, v10);
  return v24;
}

uint64_t specialized closure #1 in Slice<>.regions.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v13 = *a4;
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<DispatchData>);
  uint64_t v15 = a3 + a2;
  if (__OFADD__(a3, a2))
  {
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v22 = a3 + a2;
  if (v15 < a3)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (__OFSUB__(v15, a3))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  type metadata accessor for DispatchData();
  lazy protocol witness table accessor for type DispatchData and conformance DispatchData(&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData);
  uint64_t result = dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  *a4 = v23;
  if (v13 <= a5 && v23 >= a6)
  {
    uint64_t result = dispatch thunk of RandomAccessCollection.distance(from:to:)();
    uint64_t v16 = a3 + result;
    if (!__OFADD__(a3, result))
    {
      if (v16 >= a3 && v22 >= v16)
      {
        uint64_t result = dispatch thunk of RandomAccessCollection.distance(from:to:)();
        uint64_t v18 = a3 + result;
        if (!__OFADD__(a3, result))
        {
          if (v18 >= a3 && v22 >= v18)
          {
            if (v18 >= v16)
            {
              *(void *)(a7 + 16) = a1;
              *(void *)(a7 + 24) = a2;
              *(void *)(a7 + 32) = a3;
              *(void *)a7 = v16;
              *(void *)(a7 + 8) = v18;
              *(unsigned char *)(a7 + 40) = 0;
              return result;
            }
            goto LABEL_40;
          }
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= a5 && v23 <= a6)
  {
    *(void *)(a7 + 16) = a1;
    *(void *)(a7 + 24) = a2;
    *(void *)(a7 + 32) = a3;
    *(void *)a7 = a3;
    *(void *)(a7 + 8) = v22;
    *(unsigned char *)(a7 + 40) = 0;
    return result;
  }
  if (v13 <= a5 && v23 >= a5)
  {
    uint64_t result = dispatch thunk of RandomAccessCollection.distance(from:to:)();
    uint64_t v19 = a3 + result;
    if (!__OFADD__(a3, result))
    {
      if (v19 >= a3 && v22 >= v19)
      {
        *(void *)(a7 + 16) = a1;
        *(void *)(a7 + 24) = a2;
        *(void *)(a7 + 32) = a3;
        *(void *)a7 = v19;
        *(void *)(a7 + 8) = v22;
        *(unsigned char *)(a7 + 40) = 0;
        return result;
      }
      goto LABEL_42;
    }
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v13 >= a5 && v13 <= a6)
  {
    uint64_t result = dispatch thunk of RandomAccessCollection.distance(from:to:)();
    uint64_t v20 = a3 + result;
    if (!__OFADD__(a3, result))
    {
      if (v20 >= a3 && v22 >= v20)
      {
        *(void *)(a7 + 16) = a1;
        *(void *)(a7 + 24) = a2;
        *(void *)(a7 + 32) = a3;
        *(void *)a7 = a3;
        *(void *)(a7 + 8) = v20;
        *(unsigned char *)(a7 + 40) = 0;
        return result;
      }
      goto LABEL_44;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    return result;
  }
  *(void *)(a7 + 32) = 0;
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(unsigned char *)(a7 + 40) = 1;
  return result;
}

uint64_t specialized closure #1 in Slice<>.regions.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8 = a3 + a2;
  if (__OFADD__(a3, a2))
  {
    __break(1u);
    goto LABEL_50;
  }
  if (__OFSUB__(v8, a3))
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  uint64_t v9 = *a4;
  uint64_t v10 = *a4 + a2;
  if (__OFADD__(*a4, a2))
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  uint64_t v12 = *(void *)(a5 + 24);
  uint64_t v11 = *(void *)(a5 + 32);
  BOOL v13 = __OFADD__(v11, v12);
  uint64_t v14 = v11 + v12;
  if (v13)
  {
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  if (v8 < a3 || v10 < v11 || v14 < v10) {
    goto LABEL_53;
  }
  *a4 = v10;
  if (v9 <= a6 && v10 >= a7)
  {
    uint64_t v15 = a6 - v9;
    if (!__OFSUB__(a6, v9))
    {
      BOOL v13 = __OFADD__(a3, v15);
      uint64_t v16 = a3 + v15;
      if (!v13)
      {
        uint64_t v17 = a7 - v9;
        if (!__OFSUB__(a7, v9))
        {
          BOOL v13 = __OFADD__(a3, v17);
          uint64_t v18 = a3 + v17;
          if (!v13)
          {
            if (v8 >= v18
              && v18 >= a3
              && v11 <= a7
              && v8 >= v16
              && v16 >= a3
              && v14 >= a6
              && v11 <= a6
              && v9 >= v11
              && v14 >= v9)
            {
              if (v18 >= v16)
              {
                *(void *)(a8 + 16) = result;
                *(void *)(a8 + 24) = a2;
                *(void *)(a8 + 32) = a3;
                *(void *)a8 = v16;
                *(void *)(a8 + 8) = v18;
                *(unsigned char *)(a8 + 40) = 0;
                return result;
              }
              goto LABEL_59;
            }
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
            goto LABEL_60;
          }
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (v9 >= a6 && v10 <= a7)
  {
    *(void *)(a8 + 16) = result;
    *(void *)(a8 + 24) = a2;
    *(void *)(a8 + 32) = a3;
    *(void *)a8 = a3;
    *(void *)(a8 + 8) = v8;
    *(unsigned char *)(a8 + 40) = 0;
    return result;
  }
  if (v9 <= a6 && v10 >= a6)
  {
    uint64_t v19 = a6 - v9;
    if (!__OFSUB__(a6, v9))
    {
      BOOL v13 = __OFADD__(a3, v19);
      uint64_t v20 = a3 + v19;
      if (!v13)
      {
        if (v8 >= v20 && v20 >= a3 && v11 <= a6 && v9 >= v11)
        {
          *(void *)(a8 + 16) = result;
          *(void *)(a8 + 24) = a2;
          *(void *)(a8 + 32) = a3;
          *(void *)a8 = v20;
          *(void *)(a8 + 8) = v8;
          *(unsigned char *)(a8 + 40) = 0;
          return result;
        }
        goto LABEL_62;
      }
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  if (v9 < a6 || v9 > a7)
  {
    *(void *)(a8 + 32) = 0;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
    *(unsigned char *)(a8 + 40) = 1;
    return result;
  }
  uint64_t v21 = a7 - v9;
  if (__OFSUB__(a7, v9)) {
    goto LABEL_63;
  }
  BOOL v13 = __OFADD__(a3, v21);
  uint64_t v22 = a3 + v21;
  if (!v13)
  {
    if (v8 >= v22 && v22 >= a3 && v14 >= a7 && v11 <= a7 && v9 >= v11 && v14 >= v9)
    {
      *(void *)(a8 + 16) = result;
      *(void *)(a8 + 24) = a2;
      *(void *)(a8 + 32) = a3;
      *(void *)a8 = a3;
      *(void *)(a8 + 8) = v22;
      *(unsigned char *)(a8 + 40) = 0;
      return result;
    }
    goto LABEL_65;
  }
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Slice<>.regions.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X7>, uint64_t *a6@<X8>, uint64_t a7)
{
  uint64_t v9 = *a3;
  unint64_t v10 = a2 >> 62;
  uint64_t v13 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v13) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_65;
      }
      uint64_t v13 = (int)v13;
LABEL_6:
      BOOL v16 = __OFADD__(v9, v13);
      uint64_t v17 = v9 + v13;
      if (v16)
      {
        __break(1u);
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
      if (v17 < 0 || v17 > a4) {
        goto LABEL_61;
      }
      *a3 = v17;
      if (a5 >= v9 && v17 >= a7)
      {
        uint64_t v21 = v10;
        uint64_t v22 = 0;
        switch((int)v10)
        {
          case 1:
            uint64_t v22 = (int)a1;
            break;
          case 2:
            uint64_t v22 = *(void *)(a1 + 16);
            break;
          default:
            break;
        }
        if (a4 >= a5 && v9 <= a4 && ((v9 | a5) & 0x8000000000000000) == 0)
        {
          uint64_t v24 = specialized RandomAccessCollection<>.index(_:offsetBy:)(v22, a5 - v9, a1);
          uint64_t v25 = 0;
          switch(v21)
          {
            case 1:
              uint64_t v25 = (int)a1;
              break;
            case 2:
              uint64_t v25 = *(void *)(a1 + 16);
              break;
            default:
              break;
          }
          if ((a7 & 0x8000000000000000) == 0)
          {
            uint64_t v30 = specialized RandomAccessCollection<>.index(_:offsetBy:)(v25, a7 - v9, a1);
            if (v30 >= v24)
            {
              uint64_t v20 = v30;
              uint64_t v19 = v24;
LABEL_58:
              uint64_t result = Data._Representation.subscript.getter(v19, v20, a1, a2);
              goto LABEL_59;
            }
            goto LABEL_64;
          }
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
          goto LABEL_67;
        }
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }
      if (a5 <= v9 && v17 <= a7)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        switch((int)v10)
        {
          case 1:
            uint64_t v19 = (int)a1;
            uint64_t v20 = a1 >> 32;
            goto LABEL_40;
          case 2:
            uint64_t v19 = *(void *)(a1 + 16);
            uint64_t v20 = *(void *)(a1 + 24);
LABEL_40:
            if (v20 >= v19) {
              goto LABEL_58;
            }
            __break(1u);
            break;
          case 3:
            goto LABEL_58;
          default:
            uint64_t v19 = 0;
            uint64_t v20 = BYTE6(a2);
            goto LABEL_58;
        }
LABEL_42:
        uint64_t v23 = *(void *)(a1 + 16);
LABEL_43:
        if ((v9 | a5) < 0)
        {
LABEL_67:
          __break(1u);
          goto LABEL_68;
        }
        uint64_t v19 = specialized RandomAccessCollection<>.index(_:offsetBy:)(v23, v20, a1);
        uint64_t v20 = 0;
        switch(v7)
        {
          case 0:
            uint64_t v20 = BYTE6(a2);
            break;
          case 1:
            uint64_t v20 = a1 >> 32;
            break;
          case 2:
            uint64_t v20 = *(void *)(a1 + 24);
            break;
          case 3:
            break;
          default:
            JUMPOUT(0);
        }
        if (v20 >= v19) {
          goto LABEL_58;
        }
        __break(1u);
LABEL_50:
        uint64_t v29 = *(void *)(a1 + 16);
LABEL_51:
        if (a4 >= a7 && v9 <= a4 && ((v9 | a7) & 0x8000000000000000) == 0)
        {
          uint64_t v20 = specialized RandomAccessCollection<>.index(_:offsetBy:)(v29, v28, a1);
          uint64_t v19 = 0;
          switch(v7)
          {
            case 1:
              uint64_t v19 = (int)a1;
              break;
            case 2:
              uint64_t v19 = *(void *)(a1 + 16);
              break;
            default:
              break;
          }
          if (v20 >= v19) {
            goto LABEL_58;
          }
LABEL_69:
          __break(1u);
          JUMPOUT(0x181BB4CDCLL);
        }
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
      uint64_t v20 = a5 - v9;
      if (a5 >= v9 && v17 >= a5)
      {
        uint64_t v7 = v10;
        uint64_t v23 = 0;
        switch((int)v10)
        {
          case 1:
            uint64_t v23 = (int)a1;
            break;
          case 2:
            goto LABEL_42;
          default:
            goto LABEL_43;
        }
        goto LABEL_43;
      }
      uint64_t result = 0;
      unint64_t v27 = 0xF000000000000000;
      if (a5 <= v9)
      {
        uint64_t v28 = a7 - v9;
        if (a7 >= v9)
        {
          uint64_t v7 = v10;
          uint64_t v29 = 0;
          switch((int)v10)
          {
            case 1:
              uint64_t v29 = (int)a1;
              break;
            case 2:
              goto LABEL_50;
            default:
              goto LABEL_51;
          }
          goto LABEL_51;
        }
      }
LABEL_59:
      *a6 = result;
      a6[1] = v27;
      return result;
    case 2uLL:
      uint64_t v15 = *(void *)(a1 + 16);
      uint64_t v14 = *(void *)(a1 + 24);
      BOOL v16 = __OFSUB__(v14, v15);
      uint64_t v13 = v14 - v15;
      if (!v16) {
        goto LABEL_6;
      }
      goto LABEL_66;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v13 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t closure #1 in Slice<>.regions.getter@<X0>(uint64_t a1@<X0>, void (*a2)(void, void)@<X1>, char *a3@<X2>, char *a4@<X3>, void (*a5)(char *, uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v195 = a1;
  uint64_t v196 = a5;
  uint64_t v199 = a4;
  uint64_t v194 = a3;
  uint64_t v187 = a8;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = a6;
  uint64_t v178 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v197 = *(void *)(*(void *)(v178 + 8) + 8);
  uint64_t v193 = AssociatedTypeWitness;
  uint64_t v13 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v171 = (char *)&v166 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v185 = (char *)&v166 - v16;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v174 = type metadata accessor for Range();
  uint64_t v173 = *(void *)(v174 - 8);
  MEMORY[0x1F4188790](v174);
  uint64_t v180 = (char *)&v166 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v172 = (char *)&v166 - v19;
  uint64_t v176 = v13;
  uint64_t v181 = *(void **)(v13 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v166 = (char *)&v166 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v186 = (char *)&v166 - v23;
  MEMORY[0x1F4188790](v24);
  uint64_t v190 = (char *)&v166 - v25;
  long long v191 = *(char **)(a7 + 8);
  uint64_t v198 = *(void *)(*((void *)v191 + 1) + 8);
  uint64_t v26 = v12;
  uint64_t v27 = swift_getAssociatedTypeWitness();
  uint64_t v182 = *(void *)(v27 - 8);
  uint64_t v28 = v182;
  MEMORY[0x1F4188790](v27);
  uint64_t v167 = (char *)&v166 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  uint64_t v168 = (char *)&v166 - v31;
  MEMORY[0x1F4188790](v32);
  uint64_t v169 = (char *)&v166 - v33;
  MEMORY[0x1F4188790](v34);
  uint64_t v179 = (char *)&v166 - v35;
  MEMORY[0x1F4188790](v36);
  uint64_t v184 = (char *)&v166 - v37;
  MEMORY[0x1F4188790](v38);
  uint64_t v40 = (char *)&v166 - v39;
  MEMORY[0x1F4188790](v41);
  uint64_t v43 = (char *)&v166 - v42;
  double v45 = MEMORY[0x1F4188790](v44);
  unint64_t v47 = (char *)&v166 - v46;
  uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t, double))(v28 + 16);
  uint64_t v188 = a2;
  v48((char *)&v166 - v46, (uint64_t)a2, v27, v45);
  uint64_t v183 = (void (*)(char *, uint64_t, uint64_t))v48;
  uint64_t v49 = &v194[*(int *)(type metadata accessor for Slice() + 40)];
  uint64_t v50 = a2;
  uint64_t v51 = v27;
  ((void (*)(char *, void (*)(void, void), uint64_t))v48)(v40, v50, v27);
  uint64_t v192 = swift_checkMetadataState();
  dispatch thunk of Collection.count.getter();
  uint64_t v177 = v49;
  dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  uint64_t v52 = v182;
  uint64_t v53 = v182 + 8;
  uint64_t v54 = v47;
  uint64_t v194 = *(char **)(v182 + 8);
  ((void (*)(char *, uint64_t))v194)(v40, v51);
  uint64_t v55 = v52;
  int64_t v56 = v43;
  uint64_t v57 = v188;
  (*(void (**)(void))(v55 + 40))();
  uint64_t v58 = v26;
  int v59 = v184;
  uint64_t v60 = v51;
  uint64_t v182 = v58;
  uint64_t v61 = swift_getAssociatedConformanceWitness();
  uint64_t v200 = v54;
  uint64_t v198 = v61;
  LOBYTE(v54) = dispatch thunk of static Comparable.>= infix(_:_:)();
  uint64_t v62 = v183;
  v183(v59, (uint64_t)v196, v51);
  uint64_t v193 = v53;
  uint64_t v170 = v56;
  if (v54)
  {
    v62(v56, (uint64_t)v57, v51);
    char v63 = dispatch thunk of static Comparable.<= infix(_:_:)();
    uint64_t v64 = v56;
    uint64_t v65 = (void (*)(char *, uint64_t))v194;
    ((void (*)(char *, uint64_t))v194)(v64, v51);
    v65(v59, v51);
    uint64_t v66 = v65;
    uint64_t v67 = v57;
    uint64_t v68 = v62;
    if (v63)
    {
      char v69 = v186;
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of RandomAccessCollection.distance(from:to:)();
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      uint64_t v70 = (void (*)(char *, uint64_t))(v181 + 1);
      uint64_t v199 = (char *)v181[1];
      uint64_t v71 = v176;
      ((void (*)(char *, uint64_t))v199)(v69, v176);
      uint64_t v72 = v166;
      uint64_t v73 = v190;
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of RandomAccessCollection.distance(from:to:)();
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      uint64_t v196 = v70;
      ((void (*)(char *, uint64_t))v199)(v72, v71);
      uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if (result)
      {
        uint64_t v75 = TupleTypeMetadata2;
        uint64_t v76 = v185;
        uint64_t v77 = &v185[*(int *)(TupleTypeMetadata2 + 48)];
        uint64_t v78 = v181;
        uint64_t v79 = (void (*)(char *, char *, uint64_t))v181[2];
        v79(v185, v73, v71);
        long long v191 = v77;
        v79(v77, v186, v71);
        uint64_t v80 = *(int *)(v75 + 48);
        uint64_t v198 = v60;
        uint64_t v81 = v171;
        long long v82 = &v171[v80];
        v79(v171, v76, v71);
        v79(v82, v77, v71);
        long long v83 = (void (*)(char *, char *, uint64_t))v78[4];
        long long v84 = v180;
        v83(v180, v81, v71);
        long long v85 = v82;
        long long v86 = v199;
        ((void (*)(char *, uint64_t))v199)(v85, v71);
        long long v87 = &v81[*(int *)(TupleTypeMetadata2 + 48)];
        v83(v81, v76, v71);
        v83(v87, v191, v71);
        uint64_t v88 = v174;
        v83(&v84[*(int *)(v174 + 36)], v87, v71);
        ((void (*)(char *, uint64_t))v86)(v81, v71);
        uint64_t v89 = v173;
        uint64_t v90 = v172;
        (*(void (**)(char *, char *, uint64_t))(v173 + 32))(v172, v84, v88);
        dispatch thunk of Collection.subscript.getter();
        (*(void (**)(char *, uint64_t))(v89 + 8))(v90, v88);
        ((void (*)(char *, uint64_t))v86)(v186, v71);
        ((void (*)(char *, uint64_t))v86)(v190, v71);
        ((void (*)(char *, uint64_t))v194)(v200, v198);
        uint64_t v91 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v91 - 8) + 56))(v187, 0, 1, v91);
      }
      __break(1u);
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v92 = v59;
    uint64_t v66 = (void (*)(char *, uint64_t))v194;
    ((void (*)(char *, uint64_t))v194)(v92, v51);
    uint64_t v67 = v57;
    uint64_t v68 = v62;
  }
  char v93 = dispatch thunk of static Comparable.>= infix(_:_:)();
  uint64_t v94 = v179;
  v68(v179, (uint64_t)v196, v51);
  if (v93)
  {
    uint64_t v95 = v170;
    v68(v170, (uint64_t)v67, v51);
    char v96 = dispatch thunk of static Comparable.<= infix(_:_:)();
    v66(v95, v51);
    v66(v94, v51);
    if (v96)
    {
      uint64_t v198 = v51;
      dispatch thunk of Collection.startIndex.getter();
      uint64_t v97 = v186;
      dispatch thunk of Collection.endIndex.getter();
      uint64_t v98 = v176;
      uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) == 0)
      {
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      uint64_t v99 = TupleTypeMetadata2;
      long long v100 = &v185[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v101 = v181;
      long long v102 = (void (*)(void))v181[4];
      v102();
      uint64_t v103 = v100;
      uint64_t v199 = v100;
      ((void (*)(char *, char *, uint64_t))v102)(v100, v97, v98);
      uint64_t v104 = *(int *)(v99 + 48);
      uint64_t v105 = v171;
      uint64_t v106 = &v171[v104];
      uint64_t v107 = (void (*)(char *, char *, uint64_t))v101[2];
      v107(v171, v185, v98);
      v107(v106, v103, v98);
      uint64_t v108 = v180;
      ((void (*)(char *, char *, uint64_t))v102)(v180, v105, v98);
      long long v109 = (void (*)(char *, uint64_t))v101[1];
      v109(v106, v98);
      long long v110 = &v105[*(int *)(TupleTypeMetadata2 + 48)];
      ((void (*)(char *, char *, uint64_t))v102)(v105, v185, v98);
      ((void (*)(char *, char *, uint64_t))v102)(v110, v199, v98);
      uint64_t v111 = v174;
      ((void (*)(char *, char *, uint64_t))v102)(&v108[*(int *)(v174 + 36)], v110, v98);
      v109(v105, v98);
      uint64_t v112 = v173;
      long long v113 = v172;
      (*(void (**)(char *, char *, uint64_t))(v173 + 32))(v172, v108, v111);
      uint64_t v114 = v187;
      dispatch thunk of Collection.subscript.getter();
      (*(void (**)(char *, uint64_t))(v112 + 8))(v113, v111);
      ((void (*)(char *, uint64_t))v194)(v200, v198);
LABEL_20:
      uint64_t v164 = swift_getAssociatedTypeWitness();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v164 - 8) + 56))(v114, 0, 1, v164);
    }
  }
  else
  {
    v66(v94, v51);
  }
  long long v115 = v199;
  char v116 = dispatch thunk of static Comparable.>= infix(_:_:)();
  uint64_t v117 = v169;
  v68(v169, (uint64_t)v115, v51);
  if (v116)
  {
    uint64_t v118 = v170;
    v68(v170, (uint64_t)v188, v51);
    char v119 = dispatch thunk of static Comparable.<= infix(_:_:)();
    v66(v118, v51);
    v66(v117, v51);
    if (v119)
    {
      uint64_t v198 = v51;
      long long v120 = v186;
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of RandomAccessCollection.distance(from:to:)();
      long long v121 = v190;
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      long long v122 = v181;
      long long v123 = (char *)v181[1];
      uint64_t v124 = v176;
      uint64_t v196 = (void (*)(char *, uint64_t))(v181 + 1);
      uint64_t v199 = v123;
      ((void (*)(char *, uint64_t))v123)(v120, v176);
      dispatch thunk of Collection.endIndex.getter();
      uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) == 0)
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      uint64_t v125 = TupleTypeMetadata2;
      long long v126 = v185;
      long long v127 = &v185[*(int *)(TupleTypeMetadata2 + 48)];
      long long v128 = (void (*)(char *, char *, uint64_t))v122[2];
      v128(v185, v121, v124);
      uint64_t v129 = (void (*)(char *, char *, uint64_t))v122[4];
      long long v191 = v127;
      v129(v127, v120, v124);
      uint64_t v130 = *(int *)(v125 + 48);
      uint64_t v131 = v171;
      uint64_t v132 = &v171[v130];
      v128(v171, v126, v124);
      v128(v132, v127, v124);
      v129(v180, v131, v124);
      __int16 v133 = v199;
      ((void (*)(char *, uint64_t))v199)(v132, v124);
      long long v134 = v133;
      long long v135 = &v131[*(int *)(TupleTypeMetadata2 + 48)];
      v129(v131, v126, v124);
      v129(v135, v191, v124);
      uint64_t v136 = v174;
      long long v137 = v180;
      v129(&v180[*(int *)(v174 + 36)], v135, v124);
      ((void (*)(char *, uint64_t))v134)(v131, v124);
      uint64_t v138 = v173;
      long long v139 = v172;
      (*(void (**)(char *, char *, uint64_t))(v173 + 32))(v172, v137, v136);
      uint64_t v114 = v187;
      dispatch thunk of Collection.subscript.getter();
      (*(void (**)(char *, uint64_t))(v138 + 8))(v139, v136);
      ((void (*)(char *, uint64_t))v199)(v190, v124);
      ((void (*)(char *, uint64_t))v194)(v200, v198);
      goto LABEL_20;
    }
  }
  else
  {
    v66(v117, v51);
  }
  long long v140 = v200;
  char v141 = dispatch thunk of static Comparable.>= infix(_:_:)();
  long long v142 = v168;
  v68(v168, (uint64_t)v140, v51);
  uint64_t v143 = v167;
  v68(v167, (uint64_t)v196, v51);
  if (v141)
  {
    char v144 = dispatch thunk of static Comparable.<= infix(_:_:)();
    uint64_t v145 = (void (*)(char *, uint64_t))v194;
    ((void (*)(char *, uint64_t))v194)(v143, v51);
    v145(v142, v51);
    if (v144)
    {
      uint64_t v198 = v51;
      long long v146 = v186;
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of RandomAccessCollection.distance(from:to:)();
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      long long v147 = v181;
      uint64_t v148 = (void (*)(char *, uint64_t))v181[1];
      uint64_t v149 = v176;
      uint64_t v199 = (char *)(v181 + 1);
      uint64_t v196 = v148;
      v148(v146, v176);
      dispatch thunk of Collection.startIndex.getter();
      uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) == 0)
      {
LABEL_27:
        __break(1u);
        return result;
      }
      uint64_t v150 = TupleTypeMetadata2;
      uint64_t v151 = v185;
      uint64_t v152 = &v185[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v153 = (void (*)(char *, char *, uint64_t))v147[4];
      v153(v185, v146, v149);
      uint64_t v154 = (void (*)(char *, char *, uint64_t))v147[2];
      long long v191 = v152;
      v154(v152, v190, v149);
      uint64_t v155 = v171;
      uint64_t v156 = &v171[*(int *)(v150 + 48)];
      v154(v171, v151, v149);
      v154(v156, v152, v149);
      uint64_t v157 = v180;
      v153(v180, v155, v149);
      uint64_t v158 = v196;
      v196(v156, v149);
      uint64_t v159 = v158;
      uint64_t v160 = &v155[*(int *)(TupleTypeMetadata2 + 48)];
      v153(v155, v151, v149);
      v153(v160, v191, v149);
      uint64_t v161 = v174;
      v153(&v157[*(int *)(v174 + 36)], v160, v149);
      v159(v155, v149);
      uint64_t v162 = v173;
      uint64_t v163 = v172;
      (*(void (**)(char *, char *, uint64_t))(v173 + 32))(v172, v157, v161);
      uint64_t v114 = v187;
      dispatch thunk of Collection.subscript.getter();
      (*(void (**)(char *, uint64_t))(v162 + 8))(v163, v161);
      v159(v190, v149);
      ((void (*)(char *, uint64_t))v194)(v200, v198);
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v145 = (void (*)(char *, uint64_t))v194;
    ((void (*)(char *, uint64_t))v194)(v143, v51);
    v145(v142, v51);
  }
  v145(v200, v51);
  uint64_t v165 = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v165 - 8) + 56))(v187, 1, 1, v165);
}

uint64_t partial apply for closure #1 in Slice<>.regions.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Slice<>.regions.getter(a1, *(void (**)(void, void))(v2 + 32), *(char **)(v2 + 40), *(char **)(v2 + 48), *(void (**)(char *, uint64_t))(v2 + 56), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in <> Slice<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : DataProtocol in <> Slice<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for DataProtocol.Regions.Sequence.Element : DataProtocol in <> Slice<A>()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for DataProtocol.Regions.Sequence.Element.Collection.SubSequence : ContiguousBytes in <> Slice<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t protocol witness for DataProtocol.regions.getter in conformance <> Slice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = Slice<>.regions.getter(a1, *(void *)(a2 - 8));
  *a3 = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> Slice<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t default associated conformance accessor for DataProtocol.Collection.SubSequence: DataProtocol()
{
  return swift_getWitnessTable();
}

uint64_t dispatch thunk of DataProtocol.firstRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 72))();
}

uint64_t dispatch thunk of DataProtocol.lastRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 80))();
}

uint64_t dispatch thunk of DataProtocol.copyBytes(to:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 88))();
}

uint64_t dispatch thunk of DataProtocol.copyBytes<A>(to:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 96))();
}

uint64_t dispatch thunk of DataProtocol.copyBytes<A>(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 104))();
}

uint64_t dispatch thunk of DataProtocol.copyBytes<A, B>(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 112))();
}

uint64_t dispatch thunk of MutableDataProtocol.resetBytes<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance UnsafeRawBufferPointer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance UnsafeRawBufferPointer(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance UnsafeRawBufferPointer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance UnsafeRawBufferPointer(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance UnsafeRawBufferPointer(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3[1];
  uint64_t v5 = v4 - *v3;
  if (!*v3) {
    uint64_t v5 = 0;
  }
  if ((a3 & 0x8000000000000000) == 0 && v5 >= a3) {
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, a2, 0, a3, *v3, v4);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:count:) in conformance UnsafeRawBufferPointer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized DataProtocol.copyBytes<A>(to:count:)(a1, a2, a3, *v4, v4[1], a4);
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:from:) in conformance UnsafeRawBufferPointer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, *v3, v3[1]);
}

uint64_t protocol witness for DataProtocol.copyBytes<A, B>(to:from:) in conformance UnsafeRawBufferPointer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized DataProtocol.copyBytes<A, B>(to:from:)(a1, a2, a3, *v6, v6[1], a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.copyBytes<A>(to:from:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> UnsafeBufferPointer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance UnsafeRawBufferPointer(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance <A> UnsafeBufferPointer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance UnsafeRawBufferPointer(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> UnsafeBufferPointer<A>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000) == 0) {
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, a2, 0, a3, *v3, v3[1]);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:count:) in conformance <A> UnsafeBufferPointer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized DataProtocol.copyBytes<A>(to:count:)(a1, a2, a3, *v4, v4[1], a4);
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:from:) in conformance <A> UnsafeBufferPointer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, *v3, v3[1]);
}

uint64_t protocol witness for DataProtocol.copyBytes<A, B>(to:from:) in conformance <A> UnsafeBufferPointer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized DataProtocol.copyBytes<A, B>(to:from:)(a1, a2, a3, *v6, v6[1], a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.copyBytes<A>(to:from:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData.Region@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData.Region(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance DispatchData.Region@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData.Region(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData.Region@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t (*a8)(uint64_t, uint64_t, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = a8(a1, a2, *v8, v8[1], v8[2], a3, a4, a5, a6);
  *(void *)a7 = result;
  *(void *)(a7 + 8) = v11;
  *(unsigned char *)(a7 + 16) = v12 & 1;
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance DispatchData.Region(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3[2];
  uint64_t v6 = v5 + a3;
  if (__OFADD__(v5, a3))
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v7 = v3[1];
  uint64_t v8 = v5 + v7;
  if (__OFADD__(v5, v7))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v6 >= v5)
  {
    BOOL v10 = __OFSUB__(v8, v6);
    BOOL v9 = v8 - v6 < 0;
  }
  else
  {
    BOOL v10 = 0;
    BOOL v9 = 1;
  }
  if (v9 == v10) {
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, a2, v5, v6, *v3, v7, v3[2]);
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:count:) in conformance DispatchData.Region(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized DataProtocol.copyBytes<A>(to:count:)(a1, a2, a3, *v4, v4[1], v4[2], a4);
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:from:) in conformance DispatchData.Region(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, *v3, v3[1], v3[2]);
}

uint64_t protocol witness for DataProtocol.copyBytes<A, B>(to:from:) in conformance DispatchData.Region(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized DataProtocol.copyBytes<A, B>(to:from:)(a1, a2, a3, *v4, v4[1], v4[2], a4);
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData(a1, (uint64_t (*)(void))specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance DispatchData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData(a1, (uint64_t (*)(void))specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData@<X0>(uint64_t a1@<X8>, uint64_t (*a2)(void))
{
  uint64_t result = a2();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5 & 1;
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance DispatchData(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type DispatchData and conformance DispatchData((unint64_t *)&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.startIndex.getter();
  lazy protocol witness table accessor for type DispatchData and conformance DispatchData(&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData);
  uint64_t result = dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  if (v5 >= v6) {
    return specialized DataProtocol.copyBytes<A>(to:from:)(a1, a2, v6, v5);
  }
  __break(1u);
  return result;
}

uint64_t specialized Data.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  v14[5] = a3;
  char v15 = a4;
  uint64_t v12 = a3;
  char v13 = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Repeated<UInt8>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(v10, (uint64_t)v14);
    uint64_t v5 = v14[4];
    uint64_t v6 = __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    double v7 = MEMORY[0x1F4188790](v6);
    (*(void (**)(void (*)(char *, uint64_t), double))(v5 + 8))(partial apply for closure #1 in Data.replaceSubrange<A>(_:with:), v7);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  else
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    uint64_t v9 = outlined destroy of Any?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for ContiguousBytes?);
    MEMORY[0x1F4188790](v9);
    return _withStackOrHeapBuffer(capacity:_:)(a3, (void (*)(uint64_t, uint64_t))partial apply for specialized closure #3 in Data.replaceSubrange<A>(_:with:));
  }
}

void specialized closure #3 in Data.replaceSubrange<A>(_:with:)(char *__src, uint64_t a2, uint64_t a3, char a4, int a5, uint64_t a6, uint64_t a7, int64_t __len)
{
  if (__src && a2)
  {
    if (a2 < 0)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    if (a3)
    {
      unint64_t v10 = a3 & ~(a3 >> 63);
      unint64_t v11 = a2 - 1;
      unint64_t v12 = a3 - 1;
      if (v10 < a3 - 1) {
        unint64_t v12 = a3 & ~(a3 >> 63);
      }
      if (v11 >= v12) {
        unint64_t v11 = v12;
      }
      if (v11 > 0xF)
      {
        unint64_t v16 = v11 + 1;
        uint64_t v17 = v16 & 0xF;
        if ((v16 & 0xF) == 0) {
          uint64_t v17 = 16;
        }
        uint64_t v13 = v16 - v17;
        uint64_t v14 = v13 + 1;
        char v15 = &__src[v13];
        int8x16_t v18 = vdupq_n_s8(a4);
        uint64_t v19 = v13;
        uint64_t v20 = __src;
        do
        {
          *(int8x16_t *)uint64_t v20 = v18;
          v20 += 16;
          v19 -= 16;
        }
        while (v19);
      }
      else
      {
        uint64_t v13 = 0;
        uint64_t v14 = 1;
        char v15 = __src;
      }
      uint64_t v21 = a3 + 1;
      do
      {
        BOOL v9 = __OFSUB__(v13, v10);
        BOOL v8 = (uint64_t)(v13 - v10) < 0;
        if (v13 == v10) {
          goto LABEL_23;
        }
        uint64_t v13 = v14;
        *char v15 = a4;
        if (a2 == v14) {
          goto LABEL_12;
        }
        ++v15;
        ++v14;
        BOOL v9 = __OFSUB__(v21, v13 + 1);
        BOOL v8 = a3 - v13 < 0;
      }
      while (v21 != v13 + 1);
    }
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (a2) {
    goto LABEL_22;
  }
LABEL_12:
  BOOL v9 = __OFSUB__(a2, a3);
  BOOL v8 = a2 - a3 < 0;
  if (a2 == a3)
  {
    Data._Representation.replaceSubrange(_:with:count:)(a6, a7, __src, __len);
    return;
  }
LABEL_25:
  if (v8 != v9) {
    __break(1u);
  }
  __break(1u);
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance Data@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance UnsafeRawBufferPointer(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance Data@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance UnsafeRawBufferPointer(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance UnsafeRawBufferPointer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t (*a8)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = a8(a1, a2, *v8, v8[1], a3, a4, a5, a6);
  *(void *)a7 = result;
  *(void *)(a7 + 8) = v11;
  *(unsigned char *)(a7 + 16) = v12 & 1;
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance Data(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  uint64_t v8 = 0;
  switch(v5 >> 62)
  {
    case 1uLL:
      uint64_t v8 = (int)v4;
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(v4 + 16);
      break;
    default:
      break;
  }
  uint64_t v9 = specialized RandomAccessCollection<>.index(_:offsetBy:)(v8, a3, v4);
  if (v9 < v8)
  {
    __break(1u);
    JUMPOUT(0x181BB6E54);
  }

  return specialized DataProtocol.copyBytes<A>(to:from:)(a1, a2, v8, v9, v4, v5);
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:count:) in conformance Data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized DataProtocol.copyBytes<A>(to:count:)(a1, a2, a3, *(void *)v4, *(void *)(v4 + 8), a4);
}

uint64_t protocol witness for DataProtocol.copyBytes<A, B>(to:from:) in conformance Data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized DataProtocol.copyBytes<A, B>(to:from:)(a1, a2, a3, *v6, v6[1], a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.copyBytes<A>(to:from:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> [A]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> [A](a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance <A> [A]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> [A](a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> [A](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> [A](a1, a2, a3, a4, a5, MEMORY[0x1E4FBC8B0], MEMORY[0x1E4FBC8A0]);
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:count:) in conformance <A> [A](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized DataProtocol.copyBytes<A>(to:count:)(a1, a2, a3, *v4, a4, MEMORY[0x1E4FBC8B0], MEMORY[0x1E4FBC8A0]);
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:from:) in conformance <A> [A](uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, *v3);
}

uint64_t protocol witness for DataProtocol.copyBytes<A, B>(to:from:) in conformance <A> [A](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized DataProtocol.copyBytes<A, B>(to:from:)(a1, a2, a3, *v6, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.copyBytes<A>(to:from:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> ArraySlice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> ArraySlice<A>(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance <A> ArraySlice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> ArraySlice<A>(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> ArraySlice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t (*a8)(uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = a8(a1, a2, *v8, v8[1], v8[2], v8[3], a3, a4, a5, a6);
  *(void *)a7 = result;
  *(void *)(a7 + 8) = v11;
  *(unsigned char *)(a7 + 16) = v12 & 1;
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> ArraySlice<A>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = v5 + a3;
  if (__OFADD__(v5, a3))
  {
    __break(1u);
  }
  else if (v6 >= v5)
  {
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, a2, v5, v6, *(void *)v3, *(void *)(v3 + 8), *(void *)(v3 + 16), *(void *)(v3 + 24));
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:count:) in conformance <A> ArraySlice<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized DataProtocol.copyBytes<A>(to:count:)(a1, a2, a3, *(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(void *)(v4 + 24), a4);
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:from:) in conformance <A> ArraySlice<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, *(void *)v3, *(void *)(v3 + 8), *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t protocol witness for DataProtocol.copyBytes<A, B>(to:from:) in conformance <A> ArraySlice<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized DataProtocol.copyBytes<A, B>(to:from:)(a1, a2, a3, *(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(void *)(v4 + 24), a4);
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> ContiguousArray<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> [A](a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance <A> ContiguousArray<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> [A](a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> [A]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t (*a8)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = a8(a1, a2, *v8, a3, a4, a5, a6);
  *(void *)a7 = result;
  *(void *)(a7 + 8) = v11;
  *(unsigned char *)(a7 + 16) = v12 & 1;
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> ContiguousArray<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> [A](a1, a2, a3, a4, a5, MEMORY[0x1E4FBC8E8], MEMORY[0x1E4FBC8D8]);
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> [A](uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t), void (*a7)(uint64_t, uint64_t))
{
  if ((a3 & 0x8000000000000000) == 0) {
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, a2, 0, a3, *v7, a6, a7);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:count:) in conformance <A> ContiguousArray<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized DataProtocol.copyBytes<A>(to:count:)(a1, a2, a3, *v4, a4, MEMORY[0x1E4FBC8E8], MEMORY[0x1E4FBC8D8]);
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:from:) in conformance <A> ContiguousArray<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, *v3);
}

uint64_t protocol witness for DataProtocol.copyBytes<A, B>(to:from:) in conformance <A> ContiguousArray<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized DataProtocol.copyBytes<A, B>(to:from:)(a1, a2, a3, *v6, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.copyBytes<A>(to:from:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> EmptyCollection<A>@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> EmptyCollection<A>(a1, specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance <A> EmptyCollection<A>@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> EmptyCollection<A>(a1, specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> EmptyCollection<A>@<X0>(uint64_t a1@<X8>, uint64_t (*a2)(void))
{
  uint64_t result = a2();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5 & 1;
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> EmptyCollection<A>(uint64_t result)
{
  if (result) {
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:count:) in conformance <A> EmptyCollection<A>(uint64_t result)
{
  return protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> EmptyCollection<A>(result);
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> Repeated<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> Repeated<A>(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance <A> Repeated<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> Repeated<A>(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> Repeated<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t (*a8)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = a8(a1, a2, *(void *)v8, *(unsigned __int8 *)(v8 + 8), a3, a4, a5, a6);
  *(void *)a7 = result;
  *(void *)(a7 + 8) = v11;
  *(unsigned char *)(a7 + 16) = v12 & 1;
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> Repeated<A>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000) == 0 && *(void *)v3 >= a3) {
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, a2, 0, a3, *(void *)v3, *(unsigned char *)(v3 + 8));
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:count:) in conformance <A> Repeated<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized DataProtocol.copyBytes<A>(to:count:)(a1, a2, a3, *(void *)v4, *(unsigned char *)(v4 + 8), a4);
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:from:) in conformance <A> Repeated<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, *(void *)v3, *(unsigned char *)(v3 + 8));
}

uint64_t protocol witness for DataProtocol.copyBytes<A, B>(to:from:) in conformance <A> Repeated<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized DataProtocol.copyBytes<A, B>(to:from:)(a1, a2, a3, *(void *)v4, *(unsigned char *)(v4 + 8), a4);
}

uint64_t protocol witness for MutableDataProtocol.resetBytes<A>(in:) in conformance <A> [A](uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized MutableDataProtocol.resetBytes<A>(in:)(a1, a2, a3, &demangling cache variable for type metadata for [UInt8], &lazy protocol witness table cache variable for type [UInt8] and conformance [A], MEMORY[0x1E4FBB368], (uint64_t (*)(void))specialized Array.replaceSubrange<A>(_:with:));
}

uint64_t protocol witness for MutableDataProtocol.resetBytes<A>(in:) in conformance <A> ContiguousArray<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized MutableDataProtocol.resetBytes<A>(in:)(a1, a2, a3, &demangling cache variable for type metadata for ContiguousArray<UInt8>, &lazy protocol witness table cache variable for type ContiguousArray<UInt8> and conformance ContiguousArray<A>, MEMORY[0x1E4FBBB50], (uint64_t (*)(void))specialized ContiguousArray.replaceSubrange<A>(_:with:));
}

uint64_t specialized closure #1 in Slice<>.regions.getter@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t result = specialized closure #1 in Slice<>.regions.getter(*a1, a1[1], a2, *a3, *a4, (uint64_t)v8);
  if (!v5) {
    return outlined init with take of LocalePreferences?((uint64_t)v8, a5, &demangling cache variable for type metadata for Slice<UnsafeBufferPointer<UInt8>>?);
  }
  return result;
}

uint64_t specialized closure #1 in Slice<>.regions.getter@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t result = specialized closure #1 in Slice<>.regions.getter(*a1, a1[1], a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *a4, *a5, (uint64_t)v9);
  if (!v6) {
    return outlined init with take of LocalePreferences?((uint64_t)v9, a6, (uint64_t *)&demangling cache variable for type metadata for Slice<UnsafeRawBufferPointer>?);
  }
  return result;
}

uint64_t specialized DataProtocol.matches<A>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v41 = a4;
  uint64_t v38 = a3;
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a7 + 8) + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v34 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v35 = (char *)&v30 - v15;
  MEMORY[0x1F4188790](v16);
  int8x16_t v18 = (char *)&v30 - v17;
  uint64_t v46 = a1;
  uint64_t v37 = v11;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  uint64_t v32 = (void (**)(char *, char *, uint64_t))(v12 + 32);
  uint64_t v33 = (void (**)(char *, char *, uint64_t))(v12 + 16);
  int64_t v39 = a5 >> 1;
  uint64_t v40 = a2;
  uint64_t v36 = (void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v30 = (v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v31 = (a5 >> 1) - 1;
  uint64_t v45 = a6;
  uint64_t v20 = v34;
  uint64_t v21 = v35;
  uint64_t v22 = AssociatedTypeWitness;
  while (v40 >= v41 && a2 < v39)
  {
    int v23 = *(unsigned __int8 *)(v38 + a2);
    uint64_t v24 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
    int v26 = *v25;
    v24(v47, 0);
    if (v23 != v26)
    {
      char v29 = 0;
      (*v36)(v18, AssociatedTypeWitness);
      return v29 & 1;
    }
    uint64_t v27 = *v33;
    uint64_t v43 = a2;
    uint64_t v44 = v27;
    v27(v20, v18, v22);
    dispatch thunk of Collection.index(after:)();
    uint64_t v28 = *v36;
    (*v36)(v20, v22);
    v28(v18, v22);
    (*v32)(v18, v21, v22);
    v44(v21, v18, v22);
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
    v28(v20, v22);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v28)(v21, v22);
    if ((v29 & 1) == 0)
    {
      a2 = v43 + 1;
      if (v31 != v43) {
        continue;
      }
    }
    v28(v18, AssociatedTypeWitness);
    return v29 & 1;
  }
  __break(1u);
  return result;
}

void partial apply for specialized closure #3 in Data.replaceSubrange<A>(_:with:)(char *a1, uint64_t a2)
{
  specialized closure #3 in Data.replaceSubrange<A>(_:with:)(a1, a2, **(void **)(v2 + 16), *(unsigned char *)(*(void *)(v2 + 16) + 8), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48));
}

void partial apply for closure #1 in Data.replaceSubrange<A>(_:with:)(char *a1, uint64_t a2)
{
  closure #1 in Data.replaceSubrange<A>(_:with:)(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t partial apply for specialized closure #1 in Slice<>.regions.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for specialized closure #1 in Slice<>.regions.getter(a1, a2);
}

{
  uint64_t **v2;

  return specialized closure #1 in Slice<>.regions.getter(*a1, a1[1], a1[2], v2[2], *v2[4], *v2[5], a2);
}

{
  return partial apply for specialized closure #1 in Slice<>.regions.getter(a1, a2);
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  long long v10;
  _OWORD v12[2];
  uint64_t v13;

  uint64_t v3 = (void *)v2[2];
  uint64_t v4 = v2[3];
  uint64_t v5 = (uint64_t *)v2[4];
  uint64_t v6 = (uint64_t *)v2[5];
  uint64_t v8 = *a1;
  double v7 = a1[1];
  uint64_t v9 = a1[2];
  unint64_t v10 = *(_OWORD *)(v4 + 16);
  v12[0] = *(_OWORD *)v4;
  v12[1] = v10;
  uint64_t v13 = *(void *)(v4 + 32);
  return specialized closure #1 in Slice<>.regions.getter(v8, v7, v9, v3, (uint64_t)v12, *v5, *v6, a2);
}

{
  uint64_t **v2;

  return specialized closure #1 in Slice<>.regions.getter(a1, v2[2], v2[4], v2[5], a2);
}

{
  uint64_t v2;

  return specialized closure #1 in Slice<>.regions.getter(a1, *(uint64_t **)(v2 + 16), *(void *)(v2 + 24), *(uint64_t **)(v2 + 32), *(uint64_t **)(v2 + 40), a2);
}

uint64_t lazy protocol witness table accessor for type DispatchData and conformance DispatchData(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for DispatchData();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DispatchData.Region and conformance DispatchData.Region()
{
  unint64_t result = lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region;
  if (!lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region;
  if (!lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region;
  if (!lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region;
  if (!lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region;
  if (!lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region);
  }
  return result;
}

uint64_t specialized closure #1 in Slice<>.regions.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6 = *a3;
  uint64_t v7 = *a3 + a2;
  *a3 = v7;
  uint64_t v8 = a4 - v6;
  if (a4 >= v6 && v7 >= a5)
  {
    uint64_t v13 = a5 - v6;
    if (v13 >= v8)
    {
      char v14 = 0;
      goto LABEL_29;
    }
    __break(1u);
    goto LABEL_31;
  }
  if (a4 <= v6 && v7 <= a5)
  {
    if ((a2 & 0x8000000000000000) == 0)
    {
      char v14 = 0;
      uint64_t v8 = 0;
      uint64_t v13 = a2;
      goto LABEL_29;
    }
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v8 = a4 - v6;
  if (a4 >= v6 && v7 >= a4)
  {
    if (v8 <= a2)
    {
      char v14 = 0;
      uint64_t v13 = a2;
      goto LABEL_29;
    }
    goto LABEL_32;
  }
  if (a4 > v6 || a5 < v6)
  {
    a2 = 0;
    unint64_t result = 0;
    uint64_t v13 = 0;
    uint64_t v8 = 0;
    char v14 = 1;
LABEL_29:
    *(void *)a6 = v8;
    *(void *)(a6 + 8) = v13;
    *(void *)(a6 + 16) = result;
    *(void *)(a6 + 24) = a2;
    *(unsigned char *)(a6 + 32) = v14;
    return result;
  }
  uint64_t v13 = a5 - v6;
  if (v13 >= 0)
  {
    char v14 = 0;
    uint64_t v8 = 0;
    goto LABEL_29;
  }
LABEL_33:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer;
  if (!lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer;
  if (!lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer;
  if (!lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer);
  }
  return result;
}

uint64_t specialized closure #1 in Slice<>.regions.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9 = *a3;
  if (result) {
    uint64_t v10 = a2 - result;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = v9 + v10;
  if (__OFADD__(v9, v10))
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v14 = a5 - a4;
  if (!a4) {
    uint64_t v14 = 0;
  }
  if (v11 < 0 || v14 < v11) {
    goto LABEL_34;
  }
  uint64_t v17 = result;
  *a3 = v11;
  if (v9 <= a6 && v11 >= a7)
  {
    unint64_t result = specialized RandomAccessCollection<>.distance(from:to:)(v9, a6, a4, a5);
    if ((result & 0x8000000000000000) == 0)
    {
      unint64_t v18 = result;
      if (v10 >= result)
      {
        unint64_t result = specialized RandomAccessCollection<>.distance(from:to:)(v9, a7, a4, a5);
        if ((result & 0x8000000000000000) == 0 && v10 >= result)
        {
          if (result >= v18)
          {
            char v19 = 0;
LABEL_17:
            uint64_t v20 = a2;
            uint64_t v21 = v17;
LABEL_32:
            *(void *)a8 = v18;
            *(void *)(a8 + 8) = result;
            *(void *)(a8 + 16) = v21;
            *(void *)(a8 + 24) = v20;
            *(unsigned char *)(a8 + 32) = v19;
            return result;
          }
          goto LABEL_37;
        }
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
    }
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v9 >= a6 && v11 <= a7)
  {
    if ((v10 & 0x8000000000000000) == 0)
    {
      char v19 = 0;
      unint64_t v18 = 0;
      uint64_t v20 = a2;
      uint64_t v21 = result;
      unint64_t result = v10;
      goto LABEL_32;
    }
    goto LABEL_38;
  }
  if (v9 <= a6 && v11 >= a6)
  {
    unint64_t result = specialized RandomAccessCollection<>.distance(from:to:)(v9, a6, a4, a5);
    if ((result & 0x8000000000000000) == 0)
    {
      unint64_t v18 = result;
      if (v10 >= result)
      {
        char v19 = 0;
        uint64_t v20 = a2;
        uint64_t v21 = v17;
        unint64_t result = v10;
        goto LABEL_32;
      }
    }
    goto LABEL_39;
  }
  uint64_t v20 = 0;
  char v19 = 1;
  uint64_t v21 = 0;
  unint64_t result = 0;
  unint64_t v18 = 0;
  if (v9 < a6 || v9 > a7) {
    goto LABEL_32;
  }
  unint64_t result = specialized RandomAccessCollection<>.distance(from:to:)(v9, a7, a4, a5);
  if ((result & 0x8000000000000000) == 0 && v10 >= result)
  {
    char v19 = 0;
    unint64_t v18 = 0;
    goto LABEL_17;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t closure #1 in Slice<>.regions.getterspecialized partial apply@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for specialized closure #1 in Slice<>.regions.getter(a1, a2);
}

{
  return partial apply for specialized closure #1 in Slice<>.regions.getter(a1, a2);
}

ValueMetadata *type metadata accessor for SendableOSLog()
{
  return &type metadata for SendableOSLog;
}

void __swiftcall NSDecimal.init(integerLiteral:)(NSDecimal *__return_ptr retstr, Swift::Int integerLiteral)
{
  Swift::Int v2 = integerLiteral;
  if (integerLiteral < 0) {
    integerLiteral = -integerLiteral;
  }
  unint64_t v7 = specialized NSDecimal.init(_:)(integerLiteral);
  int v8 = v3;
  __int16 v9 = v4;
  __int16 v10 = v5;
  int v11 = v6;
  if (v2 < 0) {
    _So9NSDecimala__isNegative_setter(1, &v7);
  }
}

uint64_t static NSDecimal.nan.getter()
{
  *(void *)&v1[1] = 0;
  *(void *)&v1[3] = 0;
  _So9NSDecimala__exponent_setter(0, v1);
  _So9NSDecimala__length_setter(0, v1);
  _So9NSDecimala__isNegative_setter(1, v1);
  _So9NSDecimala__isCompact_setter_0(0, v1);
  _So9NSDecimala__reserved_setter(v1);
  return *(void *)v1;
}

BOOL NSDecimal.isZero.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3 = a3;
  __int16 v4 = a2;
  int v5 = a1;
  unint64_t v13 = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  unint64_t v14 = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unsigned int v11 = HIWORD(a3);
  unsigned int v15 = a3;
  if (_So9NSDecimala__length_getter(&v13)) {
    return 0;
  }
  LODWORD(v13) = v5;
  WORD2(v13) = v6;
  HIWORD(v13) = v7;
  LOWORD(v14) = v4;
  WORD1(v14) = v8;
  WORD2(v14) = v9;
  HIWORD(v14) = v10;
  LOWORD(v15) = v3;
  HIWORD(v15) = v11;
  return _So9NSDecimala__isNegative_getter(&v13) == 0;
}

unint64_t NSDecimal.magnitude.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3 = a3;
  __int16 v4 = a2;
  unsigned int v5 = a1;
  unint64_t v16 = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  unint64_t v17 = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unsigned int v11 = HIWORD(a3);
  unsigned int v18 = a3;
  if (_So9NSDecimala__length_getter(&v16))
  {
    LODWORD(v16) = v5;
    WORD2(v16) = v6;
    HIWORD(v16) = v7;
    LOWORD(v17) = v4;
    WORD1(v17) = v8;
    WORD2(v17) = v9;
    HIWORD(v17) = v10;
    LOWORD(v18) = v3;
    HIWORD(v18) = v11;
    unsigned int v15 = _So9NSDecimala__exponent_getter((char *)&v16);
    LODWORD(v16) = v5;
    WORD2(v16) = v6;
    HIWORD(v16) = v7;
    LOWORD(v17) = v4;
    WORD1(v17) = v8;
    WORD2(v17) = v9;
    HIWORD(v17) = v10;
    LOWORD(v18) = v3;
    HIWORD(v18) = v11;
    uint64_t v12 = _So9NSDecimala__length_getter(&v16);
    LODWORD(v16) = v5;
    WORD2(v16) = v6;
    HIWORD(v16) = v7;
    LOWORD(v17) = v4;
    WORD1(v17) = v8;
    WORD2(v17) = v9;
    HIWORD(v17) = v10;
    LOWORD(v18) = v3;
    HIWORD(v18) = v11;
    uint64_t isCompact_getter = _So9NSDecimala__isCompact_getter(&v16);
    WORD2(v16) = v6;
    HIWORD(v16) = v7;
    LOWORD(v17) = v4;
    WORD1(v17) = v8;
    WORD2(v17) = v9;
    HIWORD(v17) = v10;
    LOWORD(v18) = v3;
    HIWORD(v18) = v11;
    _So9NSDecimala__exponent_setter(v15, &v16);
    _So9NSDecimala__length_setter(v12, &v16);
    _So9NSDecimala__isNegative_setter(0, &v16);
    _So9NSDecimala__isCompact_setter_0(isCompact_getter, &v16);
    _So9NSDecimala__reserved_setter(&v16);
    unsigned int v5 = v16;
    LOWORD(v6) = WORD2(v16);
    unint64_t v7 = HIWORD(v16);
  }
  return v5 | ((unint64_t)(unsigned __int16)v6 << 32) | (v7 << 48);
}

BOOL static NSDecimal.< infix(_:_:)(unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  return specialized static NSDecimal._compare(lhs:rhs:)(a1, a2, a3, a4, a5, a6) == -1;
}

unint64_t NSDecimal.significand.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3 = a3;
  __int16 v4 = a2;
  int v5 = a1;
  unint64_t v15 = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  unint64_t v16 = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unsigned int v11 = HIWORD(a3);
  unsigned int v17 = a3;
  uint64_t v12 = _So9NSDecimala__length_getter(&v15);
  LODWORD(v15) = v5;
  WORD2(v15) = v6;
  HIWORD(v15) = v7;
  LOWORD(v16) = v4;
  WORD1(v16) = v8;
  WORD2(v16) = v9;
  HIWORD(v16) = v10;
  LOWORD(v17) = v3;
  HIWORD(v17) = v11;
  uint64_t isCompact_getter = _So9NSDecimala__isCompact_getter(&v15);
  WORD2(v15) = v6;
  HIWORD(v15) = v7;
  LOWORD(v16) = v4;
  WORD1(v16) = v8;
  WORD2(v16) = v9;
  HIWORD(v16) = v10;
  LOWORD(v17) = v3;
  HIWORD(v17) = v11;
  _So9NSDecimala__exponent_setter(0, &v15);
  _So9NSDecimala__length_setter(v12, &v15);
  _So9NSDecimala__isNegative_setter(0, &v15);
  _So9NSDecimala__isCompact_setter_0(isCompact_getter, &v15);
  _So9NSDecimala__reserved_setter(&v15);
  return v15;
}

void __swiftcall NSDecimal.init(_:)(NSDecimal *__return_ptr retstr, Swift::Int a2)
{
  Swift::Int v2 = a2;
  if (a2 < 0) {
    a2 = -a2;
  }
  unint64_t v7 = specialized NSDecimal.init(_:)(a2);
  int v8 = v3;
  __int16 v9 = v4;
  __int16 v10 = v5;
  int v11 = v6;
  if (v2 < 0) {
    _So9NSDecimala__isNegative_setter(1, &v7);
  }
}

uint64_t NSDecimal.description.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  LOWORD(v3) = a3;
  LOWORD(v4) = a2;
  LODWORD(v5) = a1;
  unsigned int v49 = a1;
  unint64_t v6 = HIDWORD(a1);
  LOWORD(v50) = WORD2(a1);
  unint64_t v7 = HIWORD(a1);
  WORD1(v50) = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  *(void *)((char *)&v50 + 4) = a2;
  unint64_t v9 = HIDWORD(a2);
  uint64_t v10 = HIWORD(a2);
  unsigned int v11 = HIWORD(a3);
  HIDWORD(v50) = a3;
  if (!_So9NSDecimala__length_getter(&v49))
  {
    unsigned int v49 = v5;
    LOWORD(v50) = v6;
    WORD1(v50) = v7;
    WORD2(v50) = v4;
    WORD3(v50) = v8;
    WORD4(v50) = v9;
    WORD5(v50) = v10;
    WORD6(v50) = v3;
    HIWORD(v50) = v11;
    if (_So9NSDecimala__isNegative_getter(&v49)) {
      return 5136718;
    }
  }
  unsigned int v49 = v5;
  LOWORD(v50) = v6;
  WORD1(v50) = v7;
  WORD2(v50) = v4;
  WORD3(v50) = v8;
  WORD4(v50) = v9;
  WORD5(v50) = v10;
  WORD6(v50) = v3;
  HIWORD(v50) = v11;
  if (!_So9NSDecimala__length_getter(&v49)) {
    return 48;
  }
  uint64_t v47 = 0;
  unint64_t v48 = 0xE000000000000000;
  unsigned int v49 = v5;
  LOWORD(v50) = v6;
  WORD1(v50) = v7;
  WORD2(v50) = v4;
  WORD3(v50) = v8;
  WORD4(v50) = v9;
  WORD5(v50) = v10;
  WORD6(v50) = v3;
  HIWORD(v50) = v11;
  *(_DWORD *)uint64_t v46 = v5;
  *(_WORD *)&v46[4] = v6;
  *(_WORD *)&v46[6] = v7;
  *(_WORD *)&v46[8] = v4;
  *(_WORD *)&v46[10] = v8;
  *(_WORD *)&v46[12] = v9;
  *(_WORD *)&v46[14] = v10;
  *(_WORD *)&v46[16] = v3;
  *(_WORD *)&v46[18] = v11;
  if ((int)_So9NSDecimala__exponent_getter(v46) >= 1)
  {
    do
    {
      v12._uint64_t countAndFlagsBits = 48;
      v12._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      *(_DWORD *)uint64_t v46 = v5;
      *(_WORD *)&v46[4] = v6;
      *(_WORD *)&v46[6] = v7;
      *(_WORD *)&v46[8] = v4;
      *(_WORD *)&v46[10] = v8;
      *(_WORD *)&v46[12] = v9;
      *(_WORD *)&v46[14] = v10;
      *(_WORD *)&v46[16] = v3;
      *(_WORD *)&v46[18] = v11;
      int v13 = _So9NSDecimala__exponent_getter(v46);
      _So9NSDecimala__exponent_setter((v13 - 1), &v49);
      LODWORD(v5) = v49;
      LOWORD(v6) = v50;
      LOWORD(v7) = WORD1(v50);
      LOWORD(v4) = WORD2(v50);
      LOWORD(v8) = WORD3(v50);
      LOWORD(v9) = WORD4(v50);
      LOWORD(v10) = WORD5(v50);
      LOWORD(v3) = WORD6(v50);
      LOWORD(v11) = HIWORD(v50);
      *(void *)uint64_t v46 = __PAIR64__(v50, v49);
      *(void *)&v46[8] = *(void *)((char *)&v50 + 4);
      *(_DWORD *)&v46[16] = HIDWORD(v50);
    }
    while ((int)_So9NSDecimala__exponent_getter(v46) > 0);
  }
  *(_DWORD *)uint64_t v46 = v5;
  *(_WORD *)&v46[4] = v6;
  *(_WORD *)&v46[6] = v7;
  *(_WORD *)&v46[8] = v4;
  *(_WORD *)&v46[10] = v8;
  *(_WORD *)&v46[12] = v9;
  *(_WORD *)&v46[14] = v10;
  *(_WORD *)&v46[16] = v3;
  *(_WORD *)&v46[18] = v11;
  if (!_So9NSDecimala__exponent_getter(v46))
  {
    _So9NSDecimala__exponent_setter(1, &v49);
    LODWORD(v5) = v49;
    LOWORD(v6) = v50;
    LOWORD(v7) = WORD1(v50);
    LOWORD(v4) = WORD2(v50);
    LOWORD(v8) = WORD3(v50);
    LOWORD(v9) = WORD4(v50);
    LOWORD(v10) = WORD5(v50);
    LOWORD(v3) = WORD6(v50);
    LOWORD(v11) = HIWORD(v50);
  }
  *(_DWORD *)uint64_t v46 = v5;
  __int16 v42 = v6;
  *(_WORD *)&v46[4] = v6;
  LOWORD(v14) = v7;
  *(_WORD *)&v46[6] = v7;
  *(_WORD *)&v46[8] = v4;
  *(_WORD *)&v46[10] = v8;
  *(_WORD *)&v46[12] = v9;
  *(_WORD *)&v46[14] = v10;
  *(_WORD *)&v46[16] = v3;
  *(_WORD *)&v46[18] = v11;
  if (!_So9NSDecimala__length_getter(v46))
  {
LABEL_29:
    __int16 v15 = v14;
    __int16 v16 = v42;
LABEL_30:
    *(_DWORD *)uint64_t v46 = v5;
    *(_WORD *)&v46[4] = v16;
    *(_WORD *)&v46[6] = v15;
    *(_WORD *)&v46[8] = v4;
    *(_WORD *)&v46[10] = v8;
    *(_WORD *)&v46[12] = v9;
    *(_WORD *)&v46[14] = v10;
    *(_WORD *)&v46[16] = v3;
    *(_WORD *)&v46[18] = v11;
    __int16 v31 = v15;
    __int16 v32 = v16;
    if ((int)_So9NSDecimala__exponent_getter(v46) <= 0)
    {
      while (1)
      {
        *(_DWORD *)uint64_t v46 = v5;
        *(_WORD *)&v46[4] = v32;
        *(_WORD *)&v46[6] = v31;
        *(_WORD *)&v46[8] = v4;
        *(_WORD *)&v46[10] = v8;
        *(_WORD *)&v46[12] = v9;
        *(_WORD *)&v46[14] = v10;
        *(_WORD *)&v46[16] = v3;
        *(_WORD *)&v46[18] = v11;
        if (!_So9NSDecimala__exponent_getter(v46)) {
          break;
        }
        v33._uint64_t countAndFlagsBits = 48;
        v33._uint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v33);
        *(_DWORD *)uint64_t v46 = v5;
        *(_WORD *)&v46[4] = v32;
        *(_WORD *)&v46[6] = v31;
        *(_WORD *)&v46[8] = v4;
        *(_WORD *)&v46[10] = v8;
        *(_WORD *)&v46[12] = v9;
        *(_WORD *)&v46[14] = v10;
        *(_WORD *)&v46[16] = v3;
        *(_WORD *)&v46[18] = v11;
        int v34 = _So9NSDecimala__exponent_getter(v46);
        _So9NSDecimala__exponent_setter((v34 + 1), &v49);
        LODWORD(v5) = v49;
        __int16 v32 = v50;
        __int16 v31 = WORD1(v50);
        LOWORD(v4) = WORD2(v50);
        LOWORD(v8) = WORD3(v50);
        LOWORD(v9) = WORD4(v50);
        LOWORD(v10) = WORD5(v50);
        LOWORD(v3) = WORD6(v50);
        LOWORD(v11) = HIWORD(v50);
      }
      v35._uint64_t countAndFlagsBits = 46;
      v35._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v35);
      v36._uint64_t countAndFlagsBits = 48;
      v36._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v36);
    }
    *(_DWORD *)uint64_t v46 = v5;
    *(_WORD *)&v46[4] = v32;
    *(_WORD *)&v46[6] = v31;
    *(_WORD *)&v46[8] = v4;
    *(_WORD *)&v46[10] = v8;
    *(_WORD *)&v46[12] = v9;
    *(_WORD *)&v46[14] = v10;
    *(_WORD *)&v46[16] = v3;
    *(_WORD *)&v46[18] = v11;
    if (_So9NSDecimala__isNegative_getter(v46))
    {
      v37._uint64_t countAndFlagsBits = 45;
      v37._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v37);
    }
    *(void *)uint64_t v46 = v47;
    *(void *)&v46[8] = v48;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
    return String.init<A>(_:)();
  }
  __int16 v15 = v7;
  __int16 v16 = v6;
  while (1)
  {
    __int16 v43 = v15;
    *(_DWORD *)uint64_t v46 = v5;
    *(_WORD *)&v46[4] = v16;
    *(_WORD *)&v46[6] = v15;
    *(_WORD *)&v46[8] = v4;
    *(_WORD *)&v46[10] = v8;
    *(_WORD *)&v46[12] = v9;
    *(_WORD *)&v46[14] = v10;
    *(_WORD *)&v46[16] = v3;
    *(_WORD *)&v46[18] = v11;
    if (!_So9NSDecimala__exponent_getter(v46))
    {
      v17._uint64_t countAndFlagsBits = 46;
      v17._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v17);
    }
    *(_DWORD *)uint64_t v46 = v5;
    *(_WORD *)&v46[4] = v16;
    *(_WORD *)&v46[6] = v43;
    *(_WORD *)&v46[8] = v4;
    *(_WORD *)&v46[10] = v8;
    *(_WORD *)&v46[12] = v9;
    *(_WORD *)&v46[14] = v10;
    *(_WORD *)&v46[16] = v3;
    *(_WORD *)&v46[18] = v11;
    int v18 = _So9NSDecimala__exponent_getter(v46);
    _So9NSDecimala__exponent_setter((v18 + 1), &v49);
    unsigned int v19 = v49;
    LOWORD(v8) = WORD1(v50);
    LOWORD(v11) = WORD5(v50);
    __int16 v42 = WORD2(v50);
    __int16 v44 = v50;
    __int16 v40 = WORD4(v50);
    __int16 v41 = WORD3(v50);
    LOWORD(v9) = HIWORD(v50);
    __int16 v39 = WORD6(v50);
    NSDecimal.asVariableLengthInteger()(v49 | ((unint64_t)(unsigned __int16)v50 << 32) | ((unint64_t)WORD1(v50) << 48), WORD2(v50) | ((unint64_t)WORD3(v50) << 16) | ((unint64_t)WORD4(v50) << 32) | ((unint64_t)WORD5(v50) << 48), WORD6(v50) | (HIWORD(v50) << 16));
    uint64_t v14 = v20;
    uint64_t v3 = *(void *)(v20 + 16);
    if (!v3)
    {
      unsigned int v4 = 0;
      uint64_t v5 = MEMORY[0x1E4FBC860];
      uint64_t v24 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      if (!v24) {
        goto LABEL_22;
      }
LABEL_19:
      if (!*(_WORD *)(v5 + 2 * v24 + 30))
      {
        do
        {
          *(void *)(v5 + 16) = v24 - 1;
          if (v24 == 1) {
            break;
          }
        }
        while (!*(unsigned __int16 *)(v5 + 28 + 2 * v24--));
      }
      goto LABEL_22;
    }
    unsigned int v38 = v19;
    uint64_t v5 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    uint64_t v10 = v5 + 30;
    *(void *)(v5 + 16) = v3;
    bzero((void *)(v5 + 32), 2 * v3);
    unsigned int v21 = *(unsigned __int16 *)(2 * v3 + v14 + 30);
    unsigned int v22 = v21 / 0xA;
    while (1)
    {
      *(_WORD *)(v10 + 2 * v3) = v22;
      unsigned int v4 = v21 % 0xA;
      if (v3 == 1) {
        break;
      }
      unsigned int v21 = *(unsigned __int16 *)(v14 + 28 + 2 * v3) | (v4 << 16);
      unsigned int v22 = v21 / 0xA;
      unint64_t v23 = v3 - 2;
      --v3;
      if (v23 >= *(void *)(v5 + 16))
      {
        __break(1u);
        goto LABEL_29;
      }
    }
    unsigned int v19 = v38;
    uint64_t v24 = *(void *)(v5 + 16);
    if (v24) {
      goto LABEL_19;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    *(_DWORD *)uint64_t v46 = v19;
    *(_WORD *)&v46[4] = v44;
    *(_WORD *)&v46[6] = v8;
    *(_WORD *)&v46[8] = v42;
    *(_WORD *)&v46[10] = v41;
    *(_WORD *)&v46[12] = v40;
    *(_WORD *)&v46[14] = v11;
    *(_WORD *)&v46[16] = v39;
    *(_WORD *)&v46[18] = v9;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v5);
    if (v26) {
      break;
    }
    unint64_t v27 = *(void *)(v5 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v27)) {
      goto LABEL_39;
    }
    _So9NSDecimala__length_setter(v27, v46);
    unsigned int v49 = *(_DWORD *)v46;
    long long v50 = *(_OWORD *)&v46[4];
    *(void *)uint64_t v46 = v4 | 0x30;
    v28._uint64_t countAndFlagsBits = MEMORY[0x185302020](v46, 1);
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    LODWORD(v5) = v49;
    __int16 v16 = v50;
    __int16 v45 = WORD1(v50);
    LOWORD(v4) = WORD2(v50);
    LOWORD(v8) = WORD3(v50);
    LOWORD(v9) = WORD4(v50);
    LOWORD(v10) = WORD5(v50);
    LOWORD(v3) = WORD6(v50);
    LOWORD(v11) = HIWORD(v50);
    *(void *)uint64_t v46 = __PAIR64__(v50, v49);
    *(void *)&v46[8] = *(void *)((char *)&v50 + 4);
    *(_DWORD *)&v46[16] = HIDWORD(v50);
    int v29 = _So9NSDecimala__length_getter(v46);
    __int16 v15 = v45;
    if (!v29) {
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_39:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t NSDecimal.init(string:locale:)(unint64_t a1, unint64_t a2, void *a3)
{
  if (!*a3
    || (uint64_t v5 = a3[1],
        uint64_t ObjectType = swift_getObjectType(),
        unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224),
        swift_unknownObjectRetain(),
        unint64_t v8 = v7(ObjectType, v5),
        unint64_t v10 = v9,
        swift_unknownObjectRelease(),
        !v10))
  {
    swift_bridgeObjectRelease();
    unint64_t v10 = 0xE100000000000000;
    unint64_t v8 = 46;
  }
  swift_bridgeObjectRetain();
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(a1, a2, v8, v10, 0, (uint64_t)v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v12, (uint64_t)&v13);
  if (v14 == 1) {
    return 0;
  }
  else {
    return v13;
  }
}

void specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v9 = a1;
  memset(v113, 0, 20);
  unint64_t v10 = (unsigned __int8 *)specialized skipWhiteSpaces #1 <A>(from:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(a1, a1, a2);
  unsigned int v11 = v10;
  uint64_t v104 = a2;
  Swift::String v12 = (unsigned __int8 *)(v9 + a2);
  char v101 = a5;
  if ((unsigned __int8 *)(v9 + a2) != v10)
  {
    if ((uint64_t)&v10[-v9] < 0 || v9 + a2 - (uint64_t)v10 < 1) {
      goto LABEL_107;
    }
    int v13 = *v10;
    if (v13 == 45 || v13 == 43)
    {
      _So9NSDecimala__isNegative_setter(v13 == 45, v113);
      ++v11;
    }
  }
  char v14 = (unsigned __int8 *)(v9 + a2);
  if (v12 == v11) {
    goto LABEL_92;
  }
  LOBYTE(v15) = 0;
  uint64_t v16 = -v9;
  uint64_t v102 = v9;
  uint64_t v17 = a2 + v9;
  uint64_t v106 = (unsigned __int8 *)(v9 + a2);
  uint64_t v97 = a2 + v9;
  uint64_t v98 = -v9;
LABEL_9:
  unint64_t v18 = (unint64_t)&v11[v16];
  uint64_t v19 = v17 - (void)v11;
  do
  {
    if ((v18 & 0x8000000000000000) != 0 || (BOOL v20 = v19 < 1, v21 = v19 - 1, v20))
    {
      __break(1u);
      goto LABEL_105;
    }
    char v22 = v15;
    int v23 = *v11;
    if ((v23 - 58) < 0xF6u) {
      goto LABEL_33;
    }
    long long v110 = v11;
    int v24 = v113[0];
    __int16 v25 = WORD3(v113[0]);
    __int16 v26 = WORD4(v113[0]);
    __int16 v27 = WORD5(v113[0]);
    __int16 v28 = WORD6(v113[0]);
    __int16 v29 = HIWORD(v113[0]);
    __int16 v6 = v113[1];
    __int16 v30 = WORD1(v113[1]);
    if ((v15 & 1) == 0)
    {
      __int16 v108 = WORD2(v113[0]);
      NSDecimal._multiply(byShort:)((NSDecimal *)(WORD4(v113[0]) | ((unint64_t)WORD5(v113[0]) << 16) | ((unint64_t)WORD6(v113[0]) << 32)), 0xAu);
      if (!v41)
      {
        NSDecimal._add(_:)((NSDecimal *)(v23 - 48), (v23 - 48));
        if (!v41)
        {
          LOBYTE(v15) = 0;
          *(void *)&v113[0] = v42;
          *((void *)&v113[0] + 1) = v43;
          LODWORD(v113[1]) = v44;
          goto LABEL_29;
        }
      }

      *(_DWORD *)uint64_t v112 = v24;
      *(_WORD *)&v112[4] = v108;
      *(_WORD *)&v112[6] = v25;
      *(_WORD *)&v112[8] = v26;
      *(_WORD *)&v112[10] = v27;
      *(_WORD *)&v112[12] = v28;
      *(_WORD *)&v112[14] = v29;
      *(_WORD *)&v112[16] = v6;
      *(_WORD *)&v112[18] = v30;
      if (_So9NSDecimala__exponent_getter(v112) == 127)
      {
        *(_OWORD *)&v112[4] = 0uLL;
        _So9NSDecimala__exponent_setter(0, v112);
        _So9NSDecimala__length_setter(0, v112);
        _So9NSDecimala__isNegative_setter(1, v112);
        _So9NSDecimala__isCompact_setter_0(0, v112);
        _So9NSDecimala__reserved_setter(v112);
        int v45 = *(_DWORD *)v112;
        __int16 v46 = *(_WORD *)&v112[4];
        __int16 v47 = *(_WORD *)&v112[6];
        __int16 v48 = *(_WORD *)&v112[8];
        __int16 v49 = *(_WORD *)&v112[10];
        __int16 v50 = *(_WORD *)&v112[12];
        __int16 v51 = *(_WORD *)&v112[14];
        __int16 v6 = *(_WORD *)&v112[16];
        __int16 v52 = *(_WORD *)&v112[18];
        v113[0] = *(_OWORD *)v112;
        LODWORD(v113[1]) = *(_DWORD *)&v112[16];
      }
      else
      {
        *(_DWORD *)uint64_t v112 = v24;
        *(_WORD *)&v112[4] = v108;
        *(_WORD *)&v112[6] = v25;
        *(_WORD *)&v112[8] = v26;
        *(_WORD *)&v112[10] = v27;
        *(_WORD *)&v112[12] = v28;
        *(_WORD *)&v112[14] = v29;
        *(_WORD *)&v112[16] = v6;
        *(_WORD *)&v112[18] = v30;
        int v53 = _So9NSDecimala__exponent_getter(v112);
        _So9NSDecimala__exponent_setter((v53 + 1), v113);
        int v45 = v113[0];
        __int16 v46 = WORD2(v113[0]);
        __int16 v47 = WORD3(v113[0]);
        __int16 v48 = WORD4(v113[0]);
        __int16 v49 = WORD5(v113[0]);
        __int16 v50 = WORD6(v113[0]);
        __int16 v51 = HIWORD(v113[0]);
        __int16 v6 = v113[1];
        __int16 v52 = WORD1(v113[1]);
      }
      *(_DWORD *)uint64_t v112 = v45;
      *(_WORD *)&v112[4] = v46;
      *(_WORD *)&v112[6] = v47;
      *(_WORD *)&v112[8] = v48;
      *(_WORD *)&v112[10] = v49;
      *(_WORD *)&v112[12] = v50;
      *(_WORD *)&v112[14] = v51;
      *(_WORD *)&v112[16] = v6;
      *(_WORD *)&v112[18] = v52;
      if (_So9NSDecimala__length_getter(v112))
      {
        LOBYTE(v15) = 1;
        goto LABEL_29;
      }
      *(_DWORD *)uint64_t v112 = v45;
      *(_WORD *)&v112[4] = v46;
      *(_WORD *)&v112[6] = v47;
      *(_WORD *)&v112[8] = v48;
      *(_WORD *)&v112[10] = v49;
      *(_WORD *)&v112[12] = v50;
      *(_WORD *)&v112[14] = v51;
      *(_WORD *)&v112[16] = v6;
      *(_WORD *)&v112[18] = v52;
      int isNegative_getter = _So9NSDecimala__isNegative_getter(v112);
      LOBYTE(v15) = 1;
      if (!isNegative_getter)
      {
LABEL_29:
        unsigned int v11 = v110 + 1;
        Swift::String v12 = v106;
        uint64_t v17 = v97;
        uint64_t v16 = v98;
        if (v110 + 1 != v106) {
          goto LABEL_9;
        }
        char v14 = v106;
        uint64_t v9 = v102;
        if (v101) {
          goto LABEL_93;
        }
        goto LABEL_81;
      }
LABEL_105:
      uint64_t v82 = 0;
      uint64_t v81 = 0;
      uint64_t v80 = 0;
      uint64_t v83 = 1;
      goto LABEL_101;
    }
    uint64_t v107 = v21;
    char v105 = v15;
    *(void *)uint64_t v112 = *(void *)&v113[0];
    *(_DWORD *)&v112[8] = DWORD2(v113[0]);
    *(_WORD *)&v112[12] = WORD6(v113[0]);
    *(_DWORD *)&v112[14] = *(_DWORD *)((char *)v113 + 14);
    *(_WORD *)&v112[18] = WORD1(v113[1]);
    __int16 v31 = WORD2(v113[0]);
    if (_So9NSDecimala__exponent_getter(v112) == 127)
    {
      *(_OWORD *)&v112[4] = 0uLL;
      _So9NSDecimala__exponent_setter(0, v112);
      _So9NSDecimala__length_setter(0, v112);
      _So9NSDecimala__isNegative_setter(1, v112);
      _So9NSDecimala__isCompact_setter_0(0, v112);
      _So9NSDecimala__reserved_setter(v112);
      int v32 = *(_DWORD *)v112;
      __int16 v33 = *(_WORD *)&v112[4];
      __int16 v34 = *(_WORD *)&v112[6];
      __int16 v35 = *(_WORD *)&v112[8];
      __int16 v36 = *(_WORD *)&v112[10];
      __int16 v37 = *(_WORD *)&v112[12];
      __int16 v6 = *(_WORD *)&v112[14];
      __int16 v38 = *(_WORD *)&v112[16];
      __int16 v39 = *(_WORD *)&v112[18];
      v113[0] = *(_OWORD *)v112;
      LODWORD(v113[1]) = *(_DWORD *)&v112[16];
    }
    else
    {
      *(_DWORD *)uint64_t v112 = v24;
      *(_WORD *)&v112[4] = v31;
      *(_WORD *)&v112[6] = v25;
      *(_WORD *)&v112[8] = v26;
      *(_WORD *)&v112[10] = v27;
      *(_WORD *)&v112[12] = v28;
      *(_WORD *)&v112[14] = v29;
      *(_WORD *)&v112[16] = v6;
      *(_WORD *)&v112[18] = v30;
      int v40 = _So9NSDecimala__exponent_getter(v112);
      _So9NSDecimala__exponent_setter((v40 + 1), v113);
      int v32 = v113[0];
      __int16 v33 = WORD2(v113[0]);
      __int16 v34 = WORD3(v113[0]);
      __int16 v35 = WORD4(v113[0]);
      __int16 v36 = WORD5(v113[0]);
      __int16 v37 = WORD6(v113[0]);
      __int16 v6 = HIWORD(v113[0]);
      __int16 v38 = v113[1];
      __int16 v39 = WORD1(v113[1]);
    }
    *(_DWORD *)uint64_t v112 = v32;
    *(_WORD *)&v112[4] = v33;
    *(_WORD *)&v112[6] = v34;
    *(_WORD *)&v112[8] = v35;
    *(_WORD *)&v112[10] = v36;
    *(_WORD *)&v112[12] = v37;
    *(_WORD *)&v112[14] = v6;
    *(_WORD *)&v112[16] = v38;
    *(_WORD *)&v112[18] = v39;
    if (!_So9NSDecimala__length_getter(v112))
    {
      *(_DWORD *)uint64_t v112 = v32;
      *(_WORD *)&v112[4] = v33;
      *(_WORD *)&v112[6] = v34;
      *(_WORD *)&v112[8] = v35;
      *(_WORD *)&v112[10] = v36;
      *(_WORD *)&v112[12] = v37;
      *(_WORD *)&v112[14] = v6;
      *(_WORD *)&v112[16] = v38;
      *(_WORD *)&v112[18] = v39;
      if (_So9NSDecimala__isNegative_getter(v112)) {
        goto LABEL_89;
      }
    }
    uint64_t v19 = v107;
    unsigned int v11 = v110 + 1;
    ++v18;
    LOBYTE(v15) = 1;
    Swift::String v12 = v106;
  }
  while (v110 + 1 != v106);
  unsigned int v11 = v106;
  char v22 = v105;
LABEL_33:
  uint64_t v9 = v102;
  if (v11 >= v12
    || (LOBYTE(v6) = v22,
        (specialized stringViewContainsDecimalSeparator #1 <A>(at:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)v11, a3, a4, v102, v104) & 1) == 0))
  {
LABEL_58:
    if (v11 < v12)
    {
      if (((unint64_t)&v11[-v9] & 0x8000000000000000) != 0 || v12 - v11 < 1) {
        goto LABEL_110;
      }
      if ((*v11 | 0x20) == 0x65)
      {
        uint64_t v72 = v11 + 1;
        uint64_t v15 = v12 - (v11 + 1);
        if (v12 == v11 + 1)
        {
          uint64_t v80 = &v72[-v9];
          uint64_t v81 = LODWORD(v113[1]);
          uint64_t v82 = *((void *)&v113[0] + 1);
          uint64_t v83 = *(void *)&v113[0];
          goto LABEL_101;
        }
        if ((uint64_t)&v72[-v9] < 0 || v15 < 1)
        {
          __break(1u);
        }
        else
        {
          int v73 = v11[1];
          if (v73 == 43 || v73 == 45) {
            char v14 = v11 + 2;
          }
          else {
            char v14 = v11 + 1;
          }
          if (v12 != v14)
          {
            uint64_t v75 = 0;
            uint64_t v76 = v9 + v104 - (void)v14;
            unint64_t v77 = (unint64_t)&v14[-v9];
            while ((v77 & 0x8000000000000000) == 0)
            {
              BOOL v20 = v76-- < 1;
              if (v20) {
                break;
              }
              if ((*v14 - 58) < 0xF6u) {
                goto LABEL_84;
              }
              uint64_t v78 = (unsigned __int128)(v75 * (__int128)10) >> 64;
              uint64_t v79 = 10 * v75;
              if (v78 != v79 >> 63) {
                goto LABEL_109;
              }
              uint64_t v75 = v79 + (*v14 - 48);
              if (v75 > 254) {
                goto LABEL_89;
              }
              ++v14;
              ++v77;
              if (v14 == v12)
              {
                char v14 = (unsigned __int8 *)(v9 + v104);
                goto LABEL_84;
              }
            }
            goto LABEL_108;
          }
          uint64_t v75 = 0;
          char v14 = v12;
LABEL_84:
          if (v73 == 45) {
            uint64_t v84 = -v75;
          }
          else {
            uint64_t v84 = v75;
          }
          *(_DWORD *)uint64_t v112 = v113[0];
          *(_OWORD *)&v112[4] = *(_OWORD *)((char *)v113 + 4);
          int v85 = _So9NSDecimala__exponent_getter(v112);
          BOOL v86 = __OFADD__(v84, v85);
          uint64_t v87 = v84 + v85;
          if (!v86)
          {
            if (v87 != (char)v87)
            {
LABEL_89:
              uint64_t v82 = 0;
              uint64_t v81 = 0;
              uint64_t v80 = 0;
              uint64_t v83 = 1;
              LOBYTE(v15) = 1;
              goto LABEL_101;
            }
            _So9NSDecimala__exponent_setter(v87, v113);
            if (v101) {
              goto LABEL_93;
            }
            goto LABEL_81;
          }
        }
        __break(1u);
        return;
      }
    }
    char v14 = v11;
    if (v101) {
      goto LABEL_93;
    }
LABEL_81:
    Swift::String v12 = v14;
    goto LABEL_95;
  }
  if ((a4 & 0x1000000000000000) != 0) {
    goto LABEL_111;
  }
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v55 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v55 = a3 & 0xFFFFFFFFFFFFLL;
  }
  while (1)
  {
    char v14 = v12;
    if (v12 == &v11[v55]) {
      break;
    }
    uint64_t v56 = (uint64_t)&v11[v55 - v9 + 1];
    uint64_t v57 = ~v55 + v104 + v9 - (void)v11;
    v11 += v55;
    while ((uint64_t)&v11[-v9] >= 0 && v12 - v11 >= 1)
    {
      int v58 = *v11;
      int v59 = (NSDecimal *)(v58 - 58);
      if (v59 < 0xF6) {
        goto LABEL_58;
      }
      if (v6)
      {
        if (++v11 == v12)
        {
LABEL_57:
          unsigned int v11 = v12;
          goto LABEL_58;
        }
        while ((v56 & 0x8000000000000000) == 0)
        {
          BOOL v20 = v57-- < 1;
          if (v20) {
            break;
          }
          if (*v11 - 58 < 0xFFFFFFF6) {
            goto LABEL_58;
          }
          ++v11;
          ++v56;
          if (v11 == v12) {
            goto LABEL_57;
          }
        }
        break;
      }
      NSDecimal._multiply(byShort:)(v59, 0xAu);
      if (v60 || (NSDecimal._add(_:)((NSDecimal *)(v58 - 48), (v58 - 48)), v60))
      {

        LOBYTE(v6) = 1;
      }
      else
      {
        int v64 = v61;
        __int16 v6 = v62;
        uint64_t v111 = v11;
        *(void *)&v113[0] = v61;
        unint64_t v65 = HIDWORD(v61);
        unint64_t v66 = HIWORD(v61);
        unsigned int v67 = HIWORD(v63);
        *((void *)&v113[0] + 1) = v62;
        unint64_t v68 = v62 >> 16;
        unint64_t v69 = HIDWORD(v62);
        unint64_t v70 = HIWORD(v62);
        LODWORD(v113[1]) = v63;
        *(void *)uint64_t v112 = v61;
        *(void *)&v112[8] = v62;
        __int16 v109 = v63;
        *(_DWORD *)&v112[16] = v63;
        if (_So9NSDecimala__exponent_getter(v112) == -128) {
          goto LABEL_89;
        }
        *(_DWORD *)uint64_t v112 = v64;
        *(_WORD *)&v112[4] = v65;
        *(_WORD *)&v112[6] = v66;
        *(_WORD *)&v112[8] = v6;
        *(_WORD *)&v112[10] = v68;
        *(_WORD *)&v112[12] = v69;
        *(_WORD *)&v112[14] = v70;
        *(_WORD *)&v112[16] = v109;
        *(_WORD *)&v112[18] = v67;
        int v71 = _So9NSDecimala__exponent_getter(v112);
        _So9NSDecimala__exponent_setter((v71 - 1), v113);
        LOBYTE(v6) = 0;
        Swift::String v12 = v106;
        unsigned int v11 = v111;
      }
      ++v11;
      ++v56;
      --v57;
      uint64_t v9 = v102;
      if (v11 == v12)
      {
        char v14 = v12;
        goto LABEL_92;
      }
    }
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
LABEL_111:
    uint64_t v55 = String.UTF8View._foreignCount()();
  }
LABEL_92:
  if ((v101 & 1) == 0) {
    goto LABEL_81;
  }
LABEL_93:
  if (v12 != (unsigned __int8 *)specialized skipWhiteSpaces #1 <A>(from:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)v14, v9, v104))
  {
    uint64_t v83 = 0;
    uint64_t v82 = 0;
    uint64_t v81 = 0;
    uint64_t v80 = 0;
    LOBYTE(v15) = 1;
    goto LABEL_101;
  }
LABEL_95:
  uint64_t v80 = &v12[-v9];
  if (v12 == (unsigned __int8 *)v9)
  {
    uint64_t v83 = 0;
    uint64_t v82 = 0;
    uint64_t v81 = 0;
    LOBYTE(v15) = 1;
  }
  else
  {
    NSDecimal.compact()();
    uint64_t v88 = LODWORD(v113[0]);
    uint64_t v89 = WORD2(v113[0]);
    uint64_t v90 = WORD3(v113[0]);
    uint64_t v91 = WORD4(v113[0]);
    uint64_t v92 = WORD5(v113[0]);
    uint64_t v93 = WORD6(v113[0]);
    uint64_t v94 = HIWORD(v113[0]);
    uint64_t v95 = LOWORD(v113[1]);
    uint64_t v96 = WORD1(v113[1]);
    *(_OWORD *)uint64_t v112 = v113[0];
    *(_DWORD *)&v112[16] = v113[1];
    if (_So9NSDecimala__length_getter(v112)) {
      goto LABEL_97;
    }
    *(_DWORD *)uint64_t v112 = v88;
    *(_WORD *)&v112[4] = v89;
    *(_WORD *)&v112[6] = v90;
    *(_WORD *)&v112[8] = v91;
    *(_WORD *)&v112[10] = v92;
    *(_WORD *)&v112[12] = v93;
    *(_WORD *)&v112[14] = v94;
    *(_WORD *)&v112[16] = v95;
    *(_WORD *)&v112[18] = v96;
    if (!_So9NSDecimala__isNegative_getter(v112))
    {
LABEL_97:
      LOBYTE(v15) = 0;
      uint64_t v83 = v88 | (v89 << 32) | (v90 << 48);
      uint64_t v82 = v91 | (v92 << 16) | (v93 << 32) | (v94 << 48);
      uint64_t v81 = v95 | (v96 << 16);
    }
    else
    {
      uint64_t v83 = 0;
      uint64_t v82 = 0;
      uint64_t v81 = 0;
      LOBYTE(v15) = 0;
    }
  }
LABEL_101:
  *(void *)a6 = v83;
  *(void *)(a6 + 8) = v82;
  *(void *)(a6 + 16) = v81;
  *(void *)(a6 + 24) = v80;
  *(unsigned char *)(a6 + 32) = v15;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal()
{
  return NSDecimal.description.getter(*(void *)v0, *(void *)(v0 + 8), *(_DWORD *)(v0 + 16));
}

double one-time initialization function for leastFiniteMagnitude(uint64_t a1)
{
  *(void *)&double result = one-time initialization function for leastFiniteMagnitude(a1, 1, &static NSDecimal.leastFiniteMagnitude, (__n128 *)((char *)&static NSDecimal.leastFiniteMagnitude + 4)).n128_u64[0];
  return result;
}

uint64_t static NSDecimal.leastFiniteMagnitude.getter()
{
  if (one-time initialization token for leastFiniteMagnitude != -1) {
    swift_once();
  }
  return static NSDecimal.leastFiniteMagnitude;
}

double one-time initialization function for greatestFiniteMagnitude(uint64_t a1)
{
  *(void *)&double result = one-time initialization function for leastFiniteMagnitude(a1, 0, &static NSDecimal.greatestFiniteMagnitude, (__n128 *)((char *)&static NSDecimal.greatestFiniteMagnitude + 4)).n128_u64[0];
  return result;
}

__n128 one-time initialization function for leastFiniteMagnitude(uint64_t a1, uint64_t a2, _DWORD *a3, __n128 *a4)
{
  v9.n128_u64[0] = -1;
  v9.n128_u64[1] = -1;
  _So9NSDecimala__exponent_setter(127, &v8);
  _So9NSDecimala__length_setter(8, &v8);
  _So9NSDecimala__isNegative_setter(a2, &v8);
  _So9NSDecimala__isCompact_setter_0(1, &v8);
  _So9NSDecimala__reserved_setter(&v8);
  __n128 result = v9;
  *a3 = v8;
  *a4 = result;
  return result;
}

uint64_t static NSDecimal.greatestFiniteMagnitude.getter()
{
  if (one-time initialization token for greatestFiniteMagnitude != -1) {
    swift_once();
  }
  return static NSDecimal.greatestFiniteMagnitude;
}

double one-time initialization function for leastNormalMagnitude(uint64_t a1)
{
  *(void *)&double result = one-time initialization function for leastNormalMagnitude(a1, &static NSDecimal.leastNormalMagnitude, (__n128 *)((char *)&static NSDecimal.leastNormalMagnitude + 4)).n128_u64[0];
  return result;
}

uint64_t static NSDecimal.leastNormalMagnitude.getter()
{
  if (one-time initialization token for leastNormalMagnitude != -1) {
    swift_once();
  }
  return static NSDecimal.leastNormalMagnitude;
}

double one-time initialization function for leastNonzeroMagnitude(uint64_t a1)
{
  *(void *)&double result = one-time initialization function for leastNormalMagnitude(a1, &static NSDecimal.leastNonzeroMagnitude, (__n128 *)((char *)&static NSDecimal.leastNonzeroMagnitude + 4)).n128_u64[0];
  return result;
}

__n128 one-time initialization function for leastNormalMagnitude(uint64_t a1, _DWORD *a2, __n128 *a3)
{
  v7.n128_u16[0] = 1;
  *(unint64_t *)((char *)v7.n128_u64 + 2) = 0;
  v7.n128_u64[1] = 0;
  _So9NSDecimala__exponent_setter(4294967169, &v6);
  _So9NSDecimala__length_setter(1, &v6);
  _So9NSDecimala__isNegative_setter(0, &v6);
  _So9NSDecimala__isCompact_setter_0(1, &v6);
  _So9NSDecimala__reserved_setter(&v6);
  __n128 result = v7;
  *a2 = v6;
  *a3 = result;
  return result;
}

uint64_t static NSDecimal.leastNonzeroMagnitude.getter()
{
  if (one-time initialization token for leastNonzeroMagnitude != -1) {
    swift_once();
  }
  return static NSDecimal.leastNonzeroMagnitude;
}

double one-time initialization function for pi()
{
  long long v2 = xmmword_182113800;
  _So9NSDecimala__exponent_setter(4294967258, &v1);
  _So9NSDecimala__length_setter(8, &v1);
  _So9NSDecimala__isNegative_setter(0, &v1);
  _So9NSDecimala__isCompact_setter_0(1, &v1);
  _So9NSDecimala__reserved_setter(&v1);
  double result = *(double *)&v2;
  LODWORD(static NSDecimal.pi) = v1;
  *(_OWORD *)((char *)&static NSDecimal.pi + 4) = v2;
  return result;
}

uint64_t static NSDecimal.pi.getter()
{
  if (one-time initialization token for pi != -1) {
    swift_once();
  }
  return static NSDecimal.pi;
}

void static NSDecimal.infinity.getter()
{
}

void static NSDecimal.signalingNaN.getter()
{
}

uint64_t static NSDecimal.quietNaN.getter()
{
  *(void *)&v1[1] = 0;
  *(void *)&v1[3] = 0;
  _So9NSDecimala__exponent_setter(0, v1);
  _So9NSDecimala__length_setter(0, v1);
  _So9NSDecimala__isNegative_setter(1, v1);
  _So9NSDecimala__isCompact_setter_0(0, v1);
  _So9NSDecimala__reserved_setter(v1);
  return *(void *)v1;
}

uint64_t static NSDecimal.radix.getter()
{
  return 10;
}

void __swiftcall NSDecimal.init(_:)(NSDecimal *__return_ptr retstr, Swift::UInt8 a2)
{
}

void __swiftcall NSDecimal.init(_:)(NSDecimal *__return_ptr retstr, Swift::Int8 a2)
{
  if (a2 >= 0) {
    unint64_t v3 = a2;
  }
  else {
    unint64_t v3 = -a2;
  }
  unint64_t v8 = specialized NSDecimal.init(_:)(v3);
  int v9 = v4;
  __int16 v10 = v5;
  __int16 v11 = v6;
  int v12 = v7;
  if (a2 < 0) {
    _So9NSDecimala__isNegative_setter(1, &v8);
  }
}

void __swiftcall NSDecimal.init(_:)(NSDecimal *__return_ptr retstr, Swift::Int64 a2)
{
  Swift::Int64 v2 = a2;
  if (a2 < 0) {
    a2 = -a2;
  }
  unint64_t v7 = specialized NSDecimal.init(_:)(a2);
  int v8 = v3;
  __int16 v9 = v4;
  __int16 v10 = v5;
  int v11 = v6;
  if (v2 < 0) {
    _So9NSDecimala__isNegative_setter(1, &v7);
  }
}

void __swiftcall NSDecimal.init(_:)(NSDecimal *__return_ptr retstr, Swift::UInt16 a2)
{
}

void __swiftcall NSDecimal.init(_:)(NSDecimal *__return_ptr retstr, Swift::Int16 a2)
{
  if (a2 >= 0) {
    unint64_t v3 = a2;
  }
  else {
    unint64_t v3 = -a2;
  }
  unint64_t v8 = specialized NSDecimal.init(_:)(v3);
  int v9 = v4;
  __int16 v10 = v5;
  __int16 v11 = v6;
  int v12 = v7;
  if (a2 < 0) {
    _So9NSDecimala__isNegative_setter(1, &v8);
  }
}

void __swiftcall NSDecimal.init(_:)(NSDecimal *__return_ptr retstr, Swift::UInt32 a2)
{
}

void __swiftcall NSDecimal.init(_:)(NSDecimal *__return_ptr retstr, Swift::Int32 a2)
{
  Swift::Int32 v2 = a2;
  if (a2 >= 0) {
    *(void *)&a2 = a2;
  }
  else {
    *(void *)&a2 = -a2;
  }
  unint64_t v7 = specialized NSDecimal.init(_:)(*(unint64_t *)&a2);
  int v8 = v3;
  __int16 v9 = v4;
  __int16 v10 = v5;
  int v11 = v6;
  if (v2 < 0) {
    _So9NSDecimala__isNegative_setter(1, &v7);
  }
}

uint64_t NSDecimal.init(sign:exponent:significand:)(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, unsigned int a5)
{
  unsigned int v9 = result & 1;
  if (one-time initialization token for compatibility1 != -1) {
    double result = swift_once();
  }
  if (static NSDecimal.compatibility1 != 1)
  {
    uint64_t v15 = 0x7FFFLL;
    if (a2 < 0x7FFF) {
      uint64_t v15 = a2;
    }
    if (v15 <= -32768) {
      uint64_t v16 = -32768;
    }
    else {
      uint64_t v16 = v15;
    }
    unint64_t v17 = specialized NSDecimal._multiplyByPowerOfTen(power:roundingMode:)(v16, a3, a4, a5);
    unsigned int v26 = v17;
    __int16 v20 = v18;
    __int16 v21 = v19;
    v33[0] = v17;
    a4 = HIDWORD(v17);
    unint64_t v27 = HIWORD(v17);
    unsigned int v22 = HIWORD(v19);
    v33[1] = v18;
    unint64_t v23 = v18 >> 16;
    unint64_t v24 = HIDWORD(v18);
    unint64_t v25 = HIWORD(v18);
    LOWORD(v33[2]) = v19;
    WORD1(v33[2]) = HIWORD(v19);
    if (v9)
    {
      unint64_t v30 = v17;
      unint64_t v31 = v18;
      unsigned int v32 = v19;
      if (_So9NSDecimala__length_getter(&v30))
      {
        LODWORD(v30) = v26;
        WORD2(v30) = a4;
        HIWORD(v30) = v27;
        LOWORD(v31) = v20;
        WORD1(v31) = v23;
        WORD2(v31) = v24;
        HIWORD(v31) = v25;
        LOWORD(v32) = v21;
        HIWORD(v32) = v22;
        int isNegative_getter = _So9NSDecimala__isNegative_getter(&v30);
        _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, v33);
        unsigned int v26 = v33[0];
        LOWORD(a4) = WORD2(v33[0]);
        unint64_t v27 = HIWORD(v33[0]);
      }
    }
    return v26 | ((unint64_t)(unsigned __int16)a4 << 32) | (v27 << 48);
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v33[0] = a3;
  unint64_t v10 = HIDWORD(a3);
  unint64_t v11 = HIWORD(a3);
  v33[1] = a4;
  LODWORD(v33[2]) = a5;
  double result = _So9NSDecimala__exponent_getter((char *)v33);
  BOOL v12 = __OFADD__(a2, result);
  uint64_t v13 = (a2 + result);
  if (!v12)
  {
    v33[0] = a3;
    v33[1] = a4;
    LODWORD(v33[2]) = a5;
    unsigned int v29 = _So9NSDecimala__length_getter(v33);
    v33[0] = a3;
    v33[1] = a4;
    LODWORD(v33[2]) = a5;
    uint64_t isCompact_getter = _So9NSDecimala__isCompact_getter(v33);
    WORD2(v33[0]) = v10;
    HIWORD(v33[0]) = v11;
    v33[1] = a4;
    LODWORD(v33[2]) = a5;
    _So9NSDecimala__exponent_setter(v13, v33);
    _So9NSDecimala__length_setter(v29, v33);
    _So9NSDecimala__isNegative_setter(v9, v33);
    _So9NSDecimala__isCompact_setter_0(isCompact_getter, v33);
    _So9NSDecimala__reserved_setter(v33);
    unsigned int v26 = v33[0];
    LOWORD(a4) = WORD2(v33[0]);
    unint64_t v27 = HIWORD(v33[0]);
    return v26 | ((unint64_t)(unsigned __int16)a4 << 32) | (v27 << 48);
  }
LABEL_20:
  __break(1u);
  return result;
}

Swift::Void __swiftcall NSDecimal.negate()()
{
  int v1 = *v0;
  __int16 v2 = *((_WORD *)v0 + 2);
  __int16 v3 = *((_WORD *)v0 + 3);
  __int16 v4 = *((_WORD *)v0 + 4);
  __int16 v5 = *((_WORD *)v0 + 5);
  __int16 v6 = *((_WORD *)v0 + 6);
  __int16 v7 = *((_WORD *)v0 + 7);
  __int16 v8 = *((_WORD *)v0 + 8);
  __int16 v9 = *((_WORD *)v0 + 9);
  int v11 = *v0;
  __int16 v12 = v2;
  __int16 v13 = v3;
  __int16 v14 = v4;
  __int16 v15 = v5;
  __int16 v16 = v6;
  __int16 v17 = v7;
  __int16 v18 = v8;
  __int16 v19 = v9;
  if (_So9NSDecimala__length_getter(&v11))
  {
    int v11 = v1;
    __int16 v12 = v2;
    __int16 v13 = v3;
    __int16 v14 = v4;
    __int16 v15 = v5;
    __int16 v16 = v6;
    __int16 v17 = v7;
    __int16 v18 = v8;
    __int16 v19 = v9;
    uint64_t v10 = _So9NSDecimala__isNegative_getter(&v11) ^ 1;
    _So9NSDecimala__isNegative_setter(v10, v0);
  }
}

void __swiftcall NSDecimal.init(signOf:magnitudeOf:)(NSDecimal *__return_ptr retstr, NSDecimal *signOf, NSDecimal *magnitudeOf)
{
  __int16 v7 = v6;
  __int16 v8 = v5;
  int v9 = v4;
  __int16 v19 = v3;
  __int16 v10 = (__int16)magnitudeOf;
  int v23 = (int)signOf;
  unint64_t v24 = (unint64_t)signOf >> 32;
  unint64_t v25 = (unint64_t)signOf >> 48;
  unint64_t v27 = (unint64_t)magnitudeOf >> 16;
  unint64_t v29 = v4;
  unint64_t v11 = HIDWORD(v4);
  unint64_t v12 = HIWORD(v4);
  unint64_t v13 = v5 >> 16;
  unint64_t v30 = v5;
  unint64_t v14 = HIDWORD(v5);
  unint64_t v15 = HIWORD(v5);
  unint64_t v21 = (unint64_t)magnitudeOf >> 48;
  unint64_t v22 = (unint64_t)magnitudeOf >> 32;
  unsigned int v16 = HIWORD(v6);
  unsigned int v31 = v6;
  unsigned int v20 = HIWORD(v3);
  unsigned int v28 = _So9NSDecimala__exponent_getter((char *)&v29);
  LODWORD(v29) = v9;
  WORD2(v29) = v11;
  HIWORD(v29) = v12;
  LOWORD(v30) = v8;
  WORD1(v30) = v13;
  WORD2(v30) = v14;
  HIWORD(v30) = v15;
  LOWORD(v31) = v7;
  HIWORD(v31) = v16;
  unsigned int v26 = _So9NSDecimala__length_getter(&v29);
  LODWORD(v29) = v23;
  WORD2(v29) = v24;
  HIWORD(v29) = v25;
  LOWORD(v30) = v10;
  WORD1(v30) = v27;
  WORD2(v30) = v22;
  HIWORD(v30) = v21;
  LOWORD(v31) = v19;
  HIWORD(v31) = v20;
  uint64_t isNegative_getter = _So9NSDecimala__isNegative_getter(&v29);
  LODWORD(v29) = v9;
  WORD2(v29) = v11;
  HIWORD(v29) = v12;
  LOWORD(v30) = v8;
  WORD1(v30) = v13;
  WORD2(v30) = v14;
  HIWORD(v30) = v15;
  LOWORD(v31) = v7;
  HIWORD(v31) = v16;
  uint64_t isCompact_getter = _So9NSDecimala__isCompact_getter(&v29);
  WORD2(v29) = v11;
  HIWORD(v29) = v12;
  LOWORD(v30) = v8;
  WORD1(v30) = v13;
  WORD2(v30) = v14;
  HIWORD(v30) = v15;
  LOWORD(v31) = v7;
  HIWORD(v31) = v16;
  _So9NSDecimala__exponent_setter(v28, &v29);
  _So9NSDecimala__length_setter(v26, &v29);
  _So9NSDecimala__isNegative_setter(isNegative_getter, &v29);
  _So9NSDecimala__isCompact_setter_0(isCompact_getter, &v29);
  _So9NSDecimala__reserved_setter(&v29);
}

uint64_t NSDecimal.exponent.getter(uint64_t a1, uint64_t a2, int a3)
{
  v4[0] = a1;
  v4[1] = a2;
  int v5 = a3;
  return (int)_So9NSDecimala__exponent_getter((char *)v4);
}

uint64_t NSDecimal.sign.getter(uint64_t a1, uint64_t a2, int a3)
{
  v4[0] = a1;
  v4[1] = a2;
  int v5 = a3;
  return _So9NSDecimala__isNegative_getter(v4);
}

unint64_t NSDecimal.ulp.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3 = a3;
  __int16 v4 = a2;
  *(void *)unint64_t v29 = a1;
  unint64_t v5 = HIDWORD(a1);
  int v6 = a1;
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  *(void *)&v29[8] = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unsigned int v11 = HIWORD(a3);
  *(_DWORD *)&v29[16] = a3;
  if (!_So9NSDecimala__length_getter(v29))
  {
    *(_DWORD *)unint64_t v29 = v6;
    *(_WORD *)&v29[4] = v5;
    *(_WORD *)&void v29[6] = v7;
    *(_WORD *)&v29[8] = v4;
    *(_WORD *)&v29[10] = v8;
    *(_WORD *)&v29[12] = v9;
    *(_WORD *)&v29[14] = v10;
    *(_WORD *)&v29[16] = v3;
    *(_WORD *)&v29[18] = v11;
    if (_So9NSDecimala__isNegative_getter(v29))
    {
      *(_OWORD *)&v29[4] = 0uLL;
      _So9NSDecimala__exponent_setter(0, v29);
      _So9NSDecimala__length_setter(0, v29);
      _So9NSDecimala__isNegative_setter(1, v29);
      uint64_t v16 = 0;
LABEL_20:
      _So9NSDecimala__isCompact_setter_0(v16, v29);
      _So9NSDecimala__reserved_setter(v29);
      return *(unsigned int *)v29 | ((unint64_t)*(unsigned __int16 *)&v29[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v29[6] << 48);
    }
  }
  *(_DWORD *)unint64_t v29 = v6;
  *(_WORD *)&v29[4] = v5;
  *(_WORD *)&void v29[6] = v7;
  *(_WORD *)&v29[8] = v4;
  *(_WORD *)&v29[10] = v8;
  *(_WORD *)&v29[12] = v9;
  *(_WORD *)&v29[14] = v10;
  *(_WORD *)&v29[16] = v3;
  *(_WORD *)&v29[18] = v11;
  if (!_So9NSDecimala__length_getter(v29))
  {
    *(_DWORD *)unint64_t v29 = v6;
    *(_WORD *)&v29[4] = v5;
    *(_WORD *)&void v29[6] = v7;
    *(_WORD *)&v29[8] = v4;
    *(_WORD *)&v29[10] = v8;
    *(_WORD *)&v29[12] = v9;
    *(_WORD *)&v29[14] = v10;
    *(_WORD *)&v29[16] = v3;
    *(_WORD *)&v29[18] = v11;
    if (!_So9NSDecimala__isNegative_getter(v29))
    {
      uint64_t v18 = 4294967168;
LABEL_19:
      *(_WORD *)&v29[4] = 1;
      *(void *)&void v29[6] = 0;
      *(void *)&v29[12] = 0;
      _So9NSDecimala__exponent_setter(v18, v29);
      _So9NSDecimala__length_setter(1, v29);
      _So9NSDecimala__isNegative_setter(0, v29);
      uint64_t v16 = 1;
      goto LABEL_20;
    }
  }
  if (one-time initialization token for _powersOfTenDividingUInt128Max != -1) {
    swift_once();
  }
  __int16 v22 = v8;
  uint64_t v20 = *((void *)_powersOfTenDividingUInt128Max._rawValue + 2);
  if (v20)
  {
    __int16 v21 = v3;
    uint64_t v12 = swift_bridgeObjectRetain();
    unint64_t v13 = 0;
    int v19 = v6;
    uint64_t v14 = v12 + 50;
    while (1)
    {
      unint64_t v28 = v13;
      unint64_t v26 = *(void *)(v14 - 10);
      unint64_t v27 = *(void *)(v14 - 18);
      unsigned int v25 = *(_DWORD *)(v14 - 2);
      *(_DWORD *)unint64_t v29 = v6;
      *(_WORD *)&v29[4] = v5;
      *(_WORD *)&void v29[6] = v7;
      *(_WORD *)&v29[8] = v4;
      *(_WORD *)&v29[10] = v8;
      *(_WORD *)&v29[12] = v9;
      *(_WORD *)&v29[14] = v10;
      *(_WORD *)&v29[16] = v21;
      *(_WORD *)&v29[18] = v11;
      unsigned int v24 = _So9NSDecimala__length_getter(v29);
      *(_DWORD *)unint64_t v29 = v6;
      *(_WORD *)&v29[4] = v5;
      *(_WORD *)&void v29[6] = v7;
      *(_WORD *)&v29[8] = v4;
      *(_WORD *)&v29[10] = v8;
      *(_WORD *)&v29[12] = v9;
      *(_WORD *)&v29[14] = v10;
      *(_WORD *)&v29[16] = v21;
      *(_WORD *)&v29[18] = v11;
      unsigned int isCompact_getter = _So9NSDecimala__isCompact_getter(v29);
      *(_WORD *)&v29[4] = v5;
      *(_WORD *)&void v29[6] = v7;
      *(_WORD *)&v29[8] = v4;
      *(_WORD *)&v29[10] = v8;
      *(_WORD *)&v29[12] = v9;
      *(_WORD *)&v29[14] = v10;
      *(_WORD *)&v29[16] = v21;
      *(_WORD *)&v29[18] = v11;
      _So9NSDecimala__exponent_setter(0, v29);
      _So9NSDecimala__length_setter(v24, v29);
      _So9NSDecimala__isNegative_setter(0, v29);
      _So9NSDecimala__isCompact_setter_0(isCompact_getter, v29);
      _So9NSDecimala__reserved_setter(v29);
      if (specialized static NSDecimal._compare(lhs:rhs:)(v27, v26, v25, *(unint64_t *)v29, *(unint64_t *)&v29[8], *(unsigned int *)&v29[16]) == -1)break; {
      v14 += 20;
      }
      unint64_t v13 = v28 + 1;
      int v6 = v19;
      if (v20 == v28 + 1)
      {
        swift_bridgeObjectRelease();
        unint64_t v15 = *((void *)_powersOfTenDividingUInt128Max._rawValue + 2);
        __int16 v3 = v21;
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRelease();
    __int16 v3 = v21;
    int v6 = v19;
    unint64_t v15 = v28;
  }
  else
  {
    unint64_t v15 = 0;
  }
LABEL_15:
  *(_DWORD *)unint64_t v29 = v6;
  *(_WORD *)&v29[4] = v5;
  *(_WORD *)&void v29[6] = v7;
  *(_WORD *)&v29[8] = v4;
  *(_WORD *)&v29[10] = v22;
  *(_WORD *)&v29[12] = v9;
  *(_WORD *)&v29[14] = v10;
  *(_WORD *)&v29[16] = v3;
  *(_WORD *)&v29[18] = v11;
  unint64_t result = _So9NSDecimala__exponent_getter(v29);
  if (!(v15 >> 31))
  {
    if ((int)result - (int)v15 <= -128) {
      uint64_t v18 = 4294967168;
    }
    else {
      uint64_t v18 = (result - v15);
    }
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

BOOL NSDecimal.isFinite.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3 = a3;
  __int16 v4 = a2;
  int v5 = a1;
  unint64_t v13 = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  unint64_t v14 = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unsigned int v11 = HIWORD(a3);
  unsigned int v15 = a3;
  if (_So9NSDecimala__length_getter(&v13)) {
    return 1;
  }
  LODWORD(v13) = v5;
  WORD2(v13) = v6;
  HIWORD(v13) = v7;
  LOWORD(v14) = v4;
  WORD1(v14) = v8;
  WORD2(v14) = v9;
  HIWORD(v14) = v10;
  LOWORD(v15) = v3;
  HIWORD(v15) = v11;
  return _So9NSDecimala__isNegative_getter(&v13) == 0;
}

uint64_t NSDecimal.floatingPointClass.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3 = a3;
  __int16 v4 = a2;
  int v5 = a1;
  unint64_t v13 = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  unint64_t v14 = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unsigned int v11 = HIWORD(a3);
  unsigned int v15 = a3;
  if (!_So9NSDecimala__length_getter(&v13))
  {
    LODWORD(v13) = v5;
    WORD2(v13) = v6;
    HIWORD(v13) = v7;
    LOWORD(v14) = v4;
    WORD1(v14) = v8;
    WORD2(v14) = v9;
    HIWORD(v14) = v10;
    LOWORD(v15) = v3;
    HIWORD(v15) = v11;
    if (_So9NSDecimala__isNegative_getter(&v13)) {
      return 1;
    }
  }
  LODWORD(v13) = v5;
  WORD2(v13) = v6;
  HIWORD(v13) = v7;
  LOWORD(v14) = v4;
  WORD1(v14) = v8;
  WORD2(v14) = v9;
  HIWORD(v14) = v10;
  LOWORD(v15) = v3;
  HIWORD(v15) = v11;
  if (!_So9NSDecimala__length_getter(&v13)) {
    return 6;
  }
  LODWORD(v13) = v5;
  WORD2(v13) = v6;
  HIWORD(v13) = v7;
  LOWORD(v14) = v4;
  WORD1(v14) = v8;
  WORD2(v14) = v9;
  HIWORD(v14) = v10;
  LOWORD(v15) = v3;
  HIWORD(v15) = v11;
  if (_So9NSDecimala__isNegative_getter(&v13)) {
    return 3;
  }
  else {
    return 8;
  }
}

uint64_t NSDecimal.isCanonical.getter()
{
  return 1;
}

BOOL NSDecimal.isSignMinus.getter(uint64_t a1, uint64_t a2, int a3)
{
  v4[0] = a1;
  v4[1] = a2;
  int v5 = a3;
  return _So9NSDecimala__isNegative_getter(v4) != 0;
}

uint64_t NSDecimal.isNormal.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3 = a3;
  __int16 v4 = a2;
  int v5 = a1;
  unint64_t v13 = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  unint64_t v14 = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unsigned int v11 = HIWORD(a3);
  unsigned int v15 = a3;
  if (_So9NSDecimala__length_getter(&v13)) {
    goto LABEL_3;
  }
  LODWORD(v13) = v5;
  WORD2(v13) = v6;
  HIWORD(v13) = v7;
  LOWORD(v14) = v4;
  WORD1(v14) = v8;
  WORD2(v14) = v9;
  HIWORD(v14) = v10;
  LOWORD(v15) = v3;
  HIWORD(v15) = v11;
  uint64_t result = _So9NSDecimala__isNegative_getter(&v13);
  if (result)
  {
LABEL_3:
    LODWORD(v13) = v5;
    WORD2(v13) = v6;
    HIWORD(v13) = v7;
    LOWORD(v14) = v4;
    WORD1(v14) = v8;
    WORD2(v14) = v9;
    HIWORD(v14) = v10;
    LOWORD(v15) = v3;
    HIWORD(v15) = v11;
    if (_So9NSDecimala__length_getter(&v13))
    {
      return 1;
    }
    else
    {
      LODWORD(v13) = v5;
      WORD2(v13) = v6;
      HIWORD(v13) = v7;
      LOWORD(v14) = v4;
      WORD1(v14) = v8;
      WORD2(v14) = v9;
      HIWORD(v14) = v10;
      LOWORD(v15) = v3;
      HIWORD(v15) = v11;
      return _So9NSDecimala__isNegative_getter(&v13) == 0;
    }
  }
  return result;
}

uint64_t NSDecimal.isInfinite.getter()
{
  return 0;
}

Swift::Void __swiftcall NSDecimal.formTruncatingRemainder(dividingBy:)(NSDecimal *dividingBy)
{
}

unint64_t NSDecimal.nextUp.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  unsigned int v27 = a1;
  unint64_t v5 = HIWORD(a1);
  LOWORD(v28) = WORD2(a1);
  WORD1(v28) = HIWORD(a1);
  int v6 = WORD2(a1);
  int v7 = (unsigned __int16)a2;
  *(void *)((char *)&v28 + 4) = a2;
  unint64_t v8 = HIWORD(a2);
  int v9 = (unsigned __int16)a3;
  int v10 = WORD1(a2);
  unsigned int v11 = HIWORD(a3);
  HIDWORD(v28) = a3;
  int v12 = WORD2(a2);
  if (!_So9NSDecimala__isNegative_getter(&v27))
  {
    unsigned int v27 = a1;
    LOWORD(v28) = v6;
    WORD1(v28) = v5;
    WORD2(v28) = v7;
    WORD3(v28) = v10;
    WORD4(v28) = v12;
    WORD5(v28) = v8;
    WORD6(v28) = v9;
    HIWORD(v28) = v11;
    int v19 = _So9NSDecimala__exponent_getter((char *)&v27);
    int v14 = v9;
    int v15 = v7;
    __int16 v16 = v6;
    if (v19 <= 126
      && v6 == 0xFFFF
      && v5 == 0xFFFF
      && v15 == 0xFFFF
      && v10 == 0xFFFF
      && v12 == 0xFFFF
      && v8 == 0xFFFF
      && v14 == 0xFFFF
      && v11 == 0xFFFF)
    {
      unsigned int v27 = a1;
      *(void *)&long long v28 = -1;
      *((void *)&v28 + 1) = -1;
      int v20 = _So9NSDecimala__exponent_getter((char *)&v27);
      LOWORD(v28) = -26214;
      *(void *)((char *)&v28 + 2) = 0x9999999999999999;
      *(_DWORD *)((char *)&v28 + 10) = -1717986919;
      HIWORD(v28) = 6553;
      _So9NSDecimala__exponent_setter((v20 + 1), &v27);
      _So9NSDecimala__length_setter(8, &v27);
      uint64_t v18 = 0;
      goto LABEL_22;
    }
LABEL_23:
    __int16 v21 = v14;
    unint64_t v22 = NSDecimal.ulp.getter(a1, a2, a3);
    unsigned int v27 = a1;
    LOWORD(v28) = v16;
    WORD1(v28) = v5;
    WORD2(v28) = v15;
    WORD3(v28) = v10;
    WORD4(v28) = v12;
    WORD5(v28) = v8;
    WORD6(v28) = v21;
    HIWORD(v28) = v11;
    specialized static NSDecimal.+= infix(_:_:)((int *)&v27, v22, v23, v24);
    return v27 | ((unint64_t)(unsigned __int16)v28 << 32) | ((unint64_t)WORD1(v28) << 48);
  }
  unsigned int v27 = a1;
  LOWORD(v28) = v6;
  WORD1(v28) = v5;
  WORD2(v28) = v7;
  WORD3(v28) = v10;
  WORD4(v28) = v12;
  WORD5(v28) = v8;
  WORD6(v28) = v9;
  HIWORD(v28) = v11;
  int v13 = _So9NSDecimala__exponent_getter((char *)&v27);
  int v14 = v9;
  int v15 = v7;
  __int16 v16 = v6;
  if (v13 < -127
    || v6 != 39322
    || v5 != 39321
    || v15 != 39321
    || v10 != 39321
    || v12 != 39321
    || v8 != 39321
    || v14 != 39321
    || v11 != 6553)
  {
    goto LABEL_23;
  }
  unsigned int v27 = a1;
  LOWORD(v28) = -26214;
  *(void *)((char *)&v28 + 2) = 0x9999999999999999;
  *(_DWORD *)((char *)&v28 + 10) = -1717986919;
  HIWORD(v28) = 6553;
  int v17 = _So9NSDecimala__exponent_getter((char *)&v27);
  *(void *)&long long v28 = -1;
  *((void *)&v28 + 1) = -1;
  _So9NSDecimala__exponent_setter((v17 - 1), &v27);
  _So9NSDecimala__length_setter(8, &v27);
  uint64_t v18 = 1;
LABEL_22:
  _So9NSDecimala__isNegative_setter(v18, &v27);
  _So9NSDecimala__isCompact_setter_0(1, &v27);
  _So9NSDecimala__reserved_setter(&v27);
  return v27 | ((unint64_t)(unsigned __int16)v28 << 32) | ((unint64_t)WORD1(v28) << 48);
}

uint64_t static NSDecimal.+ infix(_:_:)(uint64_t a1, uint64_t a2, int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  v7[0] = a1;
  v7[1] = a2;
  int v8 = a3;
  specialized static NSDecimal.+= infix(_:_:)((int *)v7, a4, a5, a6);
  return v7[0];
}

unint64_t NSDecimal.nextDown.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3 = a3;
  __int16 v4 = a2;
  unsigned int v5 = a1;
  unint64_t v34 = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  unint64_t v35 = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unsigned int v11 = HIWORD(a3);
  unsigned int v36 = a3;
  unsigned int v37 = a1;
  __int16 v38 = WORD2(a1);
  *(_DWORD *)__int16 v39 = __PAIR32__(a2, HIWORD(a1));
  *(_WORD *)&v39[4] = WORD1(a2);
  *(_WORD *)&v39[6] = WORD2(a2);
  *(_WORD *)&v39[8] = HIWORD(a2);
  unsigned int v40 = a3;
  if (_So9NSDecimala__length_getter(&v37))
  {
    unsigned int v37 = v5;
    __int16 v38 = v6;
    *(_WORD *)__int16 v39 = v7;
    *(_WORD *)&v39[2] = v4;
    *(_WORD *)&v39[4] = v8;
    *(_WORD *)&v39[6] = v9;
    *(_WORD *)&v39[8] = v10;
    LOWORD(v40) = v3;
    HIWORD(v40) = v11;
    int isNegative_getter = _So9NSDecimala__isNegative_getter(&v37);
    _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, &v34);
    unsigned int v5 = v34;
    LOWORD(v6) = WORD2(v34);
    unint64_t v7 = HIWORD(v34);
  }
  unint64_t v13 = NSDecimal.nextUp.getter(v5 | ((unint64_t)(unsigned __int16)v6 << 32) | (v7 << 48), v35, v36);
  unsigned int v14 = v13;
  __int16 v16 = v15;
  __int16 v18 = v17;
  unsigned int v37 = v13;
  unint64_t v19 = HIDWORD(v13);
  __int16 v38 = WORD2(v13);
  unint64_t v20 = HIWORD(v13);
  *(_WORD *)__int16 v39 = HIWORD(v13);
  unint64_t v21 = v15 >> 16;
  *(void *)&v39[2] = v15;
  unint64_t v22 = HIDWORD(v15);
  unint64_t v23 = HIWORD(v15);
  unsigned int v24 = HIWORD(v17);
  unsigned int v40 = v17;
  int v27 = v13;
  __int16 v28 = WORD2(v13);
  unsigned int v29 = __PAIR32__(v15, HIWORD(v13));
  __int16 v30 = WORD1(v15);
  __int16 v31 = WORD2(v15);
  __int16 v32 = HIWORD(v15);
  unsigned int v33 = v17;
  if (_So9NSDecimala__length_getter(&v27))
  {
    int v27 = v14;
    __int16 v28 = v19;
    LOWORD(v29) = v20;
    HIWORD(v29) = v16;
    __int16 v30 = v21;
    __int16 v31 = v22;
    __int16 v32 = v23;
    LOWORD(v33) = v18;
    HIWORD(v33) = v24;
    int v25 = _So9NSDecimala__isNegative_getter(&v27);
    _So9NSDecimala__isNegative_setter(v25 ^ 1u, &v37);
    unsigned int v14 = v37;
    LOWORD(v19) = v38;
    unint64_t v20 = *(unsigned __int16 *)v39;
  }
  return v14 | ((unint64_t)(unsigned __int16)v19 << 32) | (v20 << 48);
}

Swift::Bool __swiftcall NSDecimal.isEqual(to:)(NSDecimal *to)
{
  return specialized static NSDecimal.== infix(_:_:)(v3, v4, v5, (unint64_t)to, v1, v2);
}

Swift::Bool __swiftcall NSDecimal.isLess(than:)(NSDecimal *than)
{
  return specialized static NSDecimal._compare(lhs:rhs:)(v3, v4, v5, (unint64_t)than, v1, v2) == -1;
}

Swift::Bool __swiftcall NSDecimal.isLessThanOrEqualTo(_:)(NSDecimal *a1)
{
  return (unint64_t)(specialized static NSDecimal._compare(lhs:rhs:)(v3, v4, v5, (unint64_t)a1, v1, v2) + 1) < 2;
}

Swift::Bool __swiftcall NSDecimal.isTotallyOrdered(belowOrEqualTo:)(NSDecimal *belowOrEqualTo)
{
  unsigned int v6 = v5;
  unint64_t v7 = v4;
  unint64_t v8 = v3;
  unsigned int v18 = v2;
  unint64_t v19 = v3;
  unint64_t v17 = v1;
  unint64_t v10 = HIDWORD(v3);
  unint64_t v11 = HIWORD(v3);
  unint64_t v20 = v4;
  unint64_t v12 = v4 >> 16;
  unint64_t v13 = HIDWORD(v4);
  unint64_t v14 = HIWORD(v4);
  unsigned int v15 = HIWORD(v5);
  unsigned int v21 = v5;
  if (!_So9NSDecimala__length_getter(&v19))
  {
    LODWORD(v19) = v8;
    WORD2(v19) = v10;
    HIWORD(v19) = v11;
    LOWORD(v20) = v7;
    WORD1(v20) = v12;
    WORD2(v20) = v13;
    HIWORD(v20) = v14;
    LOWORD(v21) = v6;
    HIWORD(v21) = v15;
    if (_So9NSDecimala__isNegative_getter(&v19)) {
      return 0;
    }
  }
  if (specialized static NSDecimal._compare(lhs:rhs:)(v8, v7, v6, (unint64_t)belowOrEqualTo, v17, v18) == -1) {
    return 1;
  }
  return specialized static NSDecimal._compare(lhs:rhs:)((unint64_t)belowOrEqualTo, v17, v18, v8, v7, v6) != -1;
}

void protocol witness for ExpressibleByFloatLiteral.init(floatLiteral:) in conformance NSDecimal(double *a1@<X0>, uint64_t a2@<X8>)
{
  specialized NSDecimal.init(_:)(*a1);
  *(_DWORD *)a2 = v3;
  *(_WORD *)(a2 + 4) = v4;
  *(_WORD *)(a2 + 6) = v5;
  *(_WORD *)(a2 + 8) = v6;
  *(_WORD *)(a2 + 10) = v7;
  *(_WORD *)(a2 + 12) = v8;
  *(_WORD *)(a2 + 14) = v9;
  *(_WORD *)(a2 + 16) = v10;
  *(_WORD *)(a2 + 18) = v11;
}

unint64_t protocol witness for ExpressibleByIntegerLiteral.init(integerLiteral:) in conformance NSDecimal@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1 >= 0) {
    unint64_t v4 = *a1;
  }
  else {
    unint64_t v4 = -v3;
  }
  unint64_t result = specialized NSDecimal.init(_:)(v4);
  unint64_t v14 = result;
  unint64_t v8 = HIDWORD(result);
  unint64_t v9 = HIWORD(result);
  unint64_t v10 = v6 >> 16;
  unint64_t v15 = v6;
  unint64_t v11 = HIDWORD(v6);
  unint64_t v12 = HIWORD(v6);
  unsigned int v13 = HIWORD(v7);
  unsigned int v16 = v7;
  if (v3 < 0)
  {
    _So9NSDecimala__isNegative_setter(1, &v14);
    unint64_t result = v14;
    LOWORD(v8) = WORD2(v14);
    LOWORD(v9) = HIWORD(v14);
    LOWORD(v6) = v15;
    LOWORD(v10) = WORD1(v15);
    LOWORD(v11) = WORD2(v15);
    LOWORD(v12) = HIWORD(v15);
    LOWORD(v7) = v16;
    LOWORD(v13) = HIWORD(v16);
  }
  *(_DWORD *)a2 = result;
  *(_WORD *)(a2 + 4) = v8;
  *(_WORD *)(a2 + 6) = v9;
  *(_WORD *)(a2 + 8) = v6;
  *(_WORD *)(a2 + 10) = v10;
  *(_WORD *)(a2 + 12) = v11;
  *(_WORD *)(a2 + 14) = v12;
  *(_WORD *)(a2 + 16) = v7;
  *(_WORD *)(a2 + 18) = v13;
  return result;
}

void NSDecimal.hash(into:)(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  NSDecimal.doubleValue.getter(a2, a3, a4);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v4;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
}

Swift::Int NSDecimal.hashValue.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  Hasher.init(_seed:)();
  NSDecimal.doubleValue.getter(a1, a2, a3);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v6;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSDecimal()
{
  unsigned int v1 = *(_DWORD *)(v0 + 16);
  uint64_t v4 = v0;
  unint64_t v2 = *(void *)v0;
  unint64_t v3 = *(void *)(v4 + 8);
  Hasher.init(_seed:)();
  NSDecimal.doubleValue.getter(v2, v3, v1);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v5;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NSDecimal()
{
  NSDecimal.doubleValue.getter(*(void *)v0, *(void *)(v0 + 8), *(_DWORD *)(v0 + 16));
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal()
{
  unsigned int v1 = *(_DWORD *)(v0 + 16);
  uint64_t v4 = v0;
  unint64_t v2 = *(void *)v0;
  unint64_t v3 = *(void *)(v4 + 8);
  Hasher.init(_seed:)();
  NSDecimal.doubleValue.getter(v2, v3, v1);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v5;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSDecimal(uint64_t a1, uint64_t a2)
{
  return specialized static NSDecimal.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(_DWORD *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(_DWORD *)(a2 + 16));
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance NSDecimal(uint64_t a1, uint64_t a2)
{
  return specialized static NSDecimal._compare(lhs:rhs:)(*(void *)a1, *(void *)(a1 + 8), *(_DWORD *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(_DWORD *)(a2 + 16)) == -1;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance NSDecimal(uint64_t a1, uint64_t a2)
{
  return specialized static NSDecimal._compare(lhs:rhs:)(*(void *)a2, *(void *)(a2 + 8), *(_DWORD *)(a2 + 16), *(void *)a1, *(void *)(a1 + 8), *(_DWORD *)(a1 + 16)) != -1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance NSDecimal(uint64_t a1, uint64_t a2)
{
  return specialized static NSDecimal._compare(lhs:rhs:)(*(void *)a1, *(void *)(a1 + 8), *(_DWORD *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(_DWORD *)(a2 + 16)) != -1;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance NSDecimal(uint64_t a1, uint64_t a2)
{
  return specialized static NSDecimal._compare(lhs:rhs:)(*(void *)a2, *(void *)(a2 + 8), *(_DWORD *)(a2 + 16), *(void *)a1, *(void *)(a1 + 8), *(_DWORD *)(a1 + 16)) == -1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NSDecimal.CodingKeys()
{
  uint64_t result = 0x746E656E6F707865;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6874676E656CLL;
      break;
    case 2:
      uint64_t result = 0x69746167654E7369;
      break;
    case 3:
      uint64_t result = 0x6361706D6F437369;
      break;
    case 4:
      uint64_t result = 0x61737369746E616DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NSDecimal.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized NSDecimal.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

unint64_t protocol witness for CodingKey.init(intValue:) in conformance NSDecimal.CodingKeys@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized FormatStyleCapitalizationContext.Option.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

char *NSDecimal.init(from:)(void *a1)
{
  unint64_t result = specialized NSDecimal.init(from:)(a1);
  if (v1) {
    return (char *)v3;
  }
  return result;
}

uint64_t NSDecimal.encode(to:)(void *a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v26 = HIWORD(a2);
  unint64_t v27 = HIDWORD(a2);
  unint64_t v25 = HIDWORD(a3);
  unint64_t v28 = HIWORD(a3);
  unint64_t v29 = a3 >> 16;
  unsigned int v8 = HIWORD(a4);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.CodingKeys>);
  uint64_t v24 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys();
  uint64_t v12 = v9;
  unsigned int v13 = v8;
  unint64_t v14 = v11;
  __int16 v16 = v26;
  __int16 v15 = v27;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  unint64_t v21 = a2;
  unint64_t v22 = a3;
  int v30 = a2;
  __int16 v31 = v15;
  __int16 v32 = v16;
  __int16 v33 = a3;
  __int16 v34 = v29;
  __int16 v17 = v25;
  __int16 v35 = v25;
  __int16 v18 = v28;
  __int16 v36 = v28;
  __int16 v37 = a4;
  __int16 v38 = v13;
  _So9NSDecimala__exponent_getter((char *)&v30);
  LOBYTE(v30) = 0;
  uint64_t v19 = v23;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v19) {
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v14, v12);
  }
  int v30 = v21;
  __int16 v31 = v15;
  __int16 v32 = v16;
  __int16 v33 = v22;
  __int16 v34 = v29;
  __int16 v35 = v17;
  __int16 v36 = v18;
  __int16 v37 = a4;
  __int16 v38 = v13;
  _So9NSDecimala__length_getter(&v30);
  LOBYTE(v30) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  int v30 = v21;
  __int16 v31 = v15;
  __int16 v32 = v16;
  __int16 v33 = v22;
  __int16 v34 = v29;
  __int16 v35 = v17;
  __int16 v36 = v18;
  __int16 v37 = a4;
  __int16 v38 = v13;
  _So9NSDecimala__isNegative_getter(&v30);
  LOBYTE(v30) = 2;
  KeyedEncodingContainer.encode(_:forKey:)();
  int v30 = v21;
  __int16 v31 = v15;
  __int16 v32 = v16;
  __int16 v33 = v22;
  __int16 v34 = v29;
  __int16 v35 = v17;
  __int16 v36 = v28;
  __int16 v37 = a4;
  __int16 v38 = v13;
  _So9NSDecimala__isCompact_getter(&v30);
  LOBYTE(v30) = 3;
  KeyedEncodingContainer.encode(_:forKey:)();
  LODWORD(v23) = a4;
  char v40 = 4;
  KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v39);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  LODWORD(v27) = v13;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v39);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v39);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v39);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v39);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v39);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v39);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v39);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v12);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v30);
}

char *protocol witness for Decodable.init(from:) in conformance NSDecimal@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = specialized NSDecimal.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(_DWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSDecimal(void *a1)
{
  return NSDecimal.encode(to:)(a1, *(void *)v1, *(void *)(v1 + 8), *(_DWORD *)(v1 + 16));
}

uint64_t NSDecimal.init<A>(exactly:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v154 = *(void *)(swift_getAssociatedConformanceWitness() + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v144 = (char *)v131 - v7;
  uint64_t v145 = swift_checkMetadataState();
  uint64_t v147 = *(void *)(v145 - 8);
  MEMORY[0x1F4188790](v145);
  long long v137 = (char *)v131 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v136 = (char *)v131 - v10;
  MEMORY[0x1F4188790](v11);
  char v141 = (char *)v131 - v12;
  MEMORY[0x1F4188790](v13);
  uint64_t v151 = (char *)v131 - v14;
  MEMORY[0x1F4188790](v15);
  uint64_t v156 = (char *)v131 - v16;
  uint64_t v146 = v6;
  uint64_t v17 = *(void *)(v6 + 16);
  uint64_t v18 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v18);
  unint64_t v20 = (char *)v131 - v19;
  uint64_t v149 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v21);
  long long v134 = (char *)v131 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  long long v135 = (char *)v131 - v24;
  MEMORY[0x1F4188790](v25);
  long long v140 = (char *)v131 - v26;
  MEMORY[0x1F4188790](v27);
  uint64_t v148 = (char *)v131 - v28;
  MEMORY[0x1F4188790](v29);
  uint64_t v157 = (char *)v131 - v30;
  MEMORY[0x1F4188790](v31);
  uint64_t v158 = (char *)v131 - v32;
  MEMORY[0x1F4188790](v33);
  __int16 v35 = (char *)v131 - v34;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  uint64_t v37 = a3;
  uint64_t v38 = *(void *)(*(void *)(a3 + 16) + 8);
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v149 + 8);
    v39((uint64_t)a1, a2);
    v39((uint64_t)v35, a2);
    return 0;
  }
  v131[2] = AssociatedConformanceWitness;
  v131[3] = v20;
  v131[4] = v18;
  v131[5] = v17;
  v131[6] = v38;
  uint64_t v41 = v37;
  char v42 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v43 = v149;
  uint64_t v45 = v149 + 16;
  int v44 = *(void (**)(char *, uint64_t, uint64_t))(v149 + 16);
  v44(v158, (uint64_t)a1, a2);
  uint64_t v143 = v35;
  long long v139 = (void (*)(char *, char *, uint64_t))v44;
  v44(v157, (uint64_t)v35, a2);
  __int16 v46 = a1;
  uint64_t v152 = v41;
  uint64_t v138 = v45;
  if ((v42 & 1) == 0)
  {
    __int16 v51 = v151;
    int v53 = *(void (**)(char *, uint64_t))(v43 + 8);
    v53(v157, a2);
    long long v142 = v53;
    v53(v158, a2);
LABEL_8:
    uint64_t v52 = v147;
    unsigned int v132 = 0;
    goto LABEL_9;
  }
  __int16 v48 = v157;
  __int16 v47 = v158;
  char v49 = dispatch thunk of static Comparable.< infix(_:_:)();
  __int16 v50 = *(void (**)(char *, uint64_t))(v43 + 8);
  v50(v48, a2);
  long long v142 = v50;
  v50(v47, a2);
  if ((v49 & 1) == 0)
  {
    __int16 v51 = v151;
    goto LABEL_8;
  }
  __int16 v51 = v151;
  unsigned int v132 = 1;
  uint64_t v52 = v147;
LABEL_9:
  __int16 v133 = v46;
  dispatch thunk of Numeric.magnitude.getter();
  uint64_t v54 = v145;
  uint64_t v55 = swift_getAssociatedConformanceWitness();
  LODWORD(v158) = 0;
  uint64_t v56 = (char **)(v52 + 8);
  uint64_t v57 = &unk_182113970;
  uint64_t v155 = a2;
  uint64_t v150 = v55;
  uint64_t v151 = (char *)v56;
  while (1)
  {
    int v58 = v57;
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    uint64_t v59 = swift_getAssociatedConformanceWitness();
    char v60 = dispatch thunk of BinaryInteger.isMultiple(of:)();
    unint64_t v61 = v51;
    uint64_t v157 = *v56;
    ((void (*)(char *, uint64_t))v157)(v51, v54);
    if ((v60 & 1) == 0 || v158 > 0x7E) {
      break;
    }
    LODWORD(v158) = v158 + 1;
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    dispatch thunk of static BinaryInteger./= infix(_:_:)();
    uint64_t v56 = (char **)v151;
    ((void (*)(char *, uint64_t))v157)(v51, v54);
    uint64_t v57 = v58;
  }
  uint64_t v62 = dispatch thunk of BinaryInteger.bitWidth.getter();
  unsigned int v63 = v148;
  uint64_t v64 = v155;
  v139(v148, v143, v155);
  if (v62 < 129)
  {
    v142(v63, v64);
    uint64_t v79 = v143;
    int v73 = v61;
    uint64_t v76 = (void (*)(char *, uint64_t))v157;
  }
  else
  {
    *(void *)uint64_t v159 = 128;
    lazy protocol witness table accessor for type Int and conformance Int();
    unint64_t v65 = v141;
    dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
    int v66 = dispatch thunk of static BinaryInteger.isSigned.getter();
    if (((v66 ^ dispatch thunk of static BinaryInteger.isSigned.getter()) & 1) == 0)
    {
      uint64_t v80 = dispatch thunk of BinaryInteger.bitWidth.getter();
      uint64_t v81 = v148;
      if (v80 < dispatch thunk of BinaryInteger.bitWidth.getter())
      {
        int v73 = v61;
        (*(void (**)(char *, char *, uint64_t))(v147 + 16))(v61, v65, v54);
        uint64_t v82 = v140;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v74 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v83 = v65;
        uint64_t v84 = v142;
        v142(v82, v64);
        uint64_t v76 = (void (*)(char *, uint64_t))v157;
        ((void (*)(char *, uint64_t))v157)(v83, v54);
        unint64_t v77 = v81;
        uint64_t v78 = v64;
        goto LABEL_26;
      }
      v139(v140, v81, v64);
      int v73 = v61;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      swift_getAssociatedConformanceWitness();
      char v74 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v91 = v61;
      uint64_t v76 = (void (*)(char *, uint64_t))v157;
      ((void (*)(char *, uint64_t))v157)(v91, v54);
      v76(v65, v54);
      unint64_t v77 = v81;
      uint64_t v78 = v64;
LABEL_25:
      uint64_t v84 = v142;
LABEL_26:
      v84(v77, v78);
      uint64_t v79 = v143;
      if (v74) {
        goto LABEL_27;
      }
LABEL_45:
      uint64_t v130 = v155;
      v84(v133, v155);
      v76(v156, v54);
      v84(v79, v130);
      return 0;
    }
    char v67 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v131[1] = v59;
    uint64_t v68 = dispatch thunk of BinaryInteger.bitWidth.getter();
    unint64_t v69 = v148;
    uint64_t v70 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v67)
    {
      if (v70 < v68)
      {
        int v71 = v65;
        uint64_t v72 = v155;
        v139(v140, v69, v155);
        int v73 = v61;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        swift_getAssociatedConformanceWitness();
        char v74 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v75 = v61;
        uint64_t v76 = (void (*)(char *, uint64_t))v157;
        ((void (*)(char *, uint64_t))v157)(v75, v54);
        v76(v71, v54);
        unint64_t v77 = v69;
        uint64_t v78 = v72;
        goto LABEL_25;
      }
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      int v73 = v61;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      char v105 = v69;
      uint64_t v106 = v65;
      uint64_t v107 = v155;
      swift_getAssociatedConformanceWitness();
      char v108 = dispatch thunk of static Comparable.>= infix(_:_:)();
      __int16 v109 = (void (*)(char *, uint64_t))v157;
      ((void (*)(char *, uint64_t))v157)(v61, v54);
      long long v110 = v136;
      (*(void (**)(char *, char *, uint64_t))(v147 + 16))(v136, v106, v54);
      uint64_t v111 = v135;
      v139(v135, v105, v107);
      if (v108)
      {
        uint64_t v112 = v140;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        LODWORD(v154) = dispatch thunk of static Equatable.== infix(_:_:)();
        long long v113 = v142;
        v142(v112, v107);
        v113(v111, v107);
        v109(v106, v54);
        uint64_t v114 = v107;
        uint64_t v84 = v113;
        v113(v148, v114);
        uint64_t v79 = v143;
        uint64_t v76 = v109;
        if (v154) {
          goto LABEL_27;
        }
        goto LABEL_45;
      }
      uint64_t v125 = v106;
      long long v120 = v142;
      v142(v111, v107);
      uint64_t v79 = v143;
      long long v126 = v110;
LABEL_44:
      uint64_t v127 = v145;
      long long v128 = (void (*)(char *, uint64_t))v157;
      ((void (*)(char *, uint64_t))v157)(v126, v145);
      uint64_t v129 = v125;
      uint64_t v54 = v127;
      v128(v129, v127);
      uint64_t v76 = v128;
      v120(v148, v107);
      uint64_t v84 = v120;
      goto LABEL_45;
    }
    uint64_t v85 = v149 + 8;
    if (v68 >= v70)
    {
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      long long v115 = v140;
      char v116 = v69;
      uint64_t v117 = v65;
      uint64_t v107 = v155;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      char v118 = dispatch thunk of static Comparable.>= infix(_:_:)();
      char v119 = v115;
      long long v120 = v142;
      uint64_t v154 = v85;
      v142(v119, v107);
      long long v121 = v137;
      (*(void (**)(char *, char *, uint64_t))(v147 + 16))(v137, v117, v54);
      long long v122 = v134;
      v139(v134, v116, v107);
      if (v118)
      {
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        swift_getAssociatedConformanceWitness();
        char v123 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v124 = (void (*)(char *, uint64_t))v157;
        ((void (*)(char *, uint64_t))v157)(v61, v54);
        v124(v121, v54);
        v124(v141, v54);
        int v73 = v61;
        uint64_t v76 = v124;
        v120(v148, v107);
        uint64_t v79 = v143;
        uint64_t v84 = v120;
        if (v123) {
          goto LABEL_27;
        }
        goto LABEL_45;
      }
      uint64_t v125 = v141;
      v120(v122, v107);
      long long v126 = v121;
      uint64_t v79 = v143;
      goto LABEL_44;
    }
    int v73 = v61;
    (*(void (**)(char *, char *, uint64_t))(v147 + 16))(v61, v65, v54);
    BOOL v86 = v140;
    uint64_t v87 = v155;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v88 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v89 = v86;
    uint64_t v90 = v65;
    uint64_t v84 = v142;
    v142(v89, v87);
    uint64_t v76 = (void (*)(char *, uint64_t))v157;
    ((void (*)(char *, uint64_t))v157)(v90, v54);
    v84(v69, v87);
    uint64_t v79 = v143;
    if ((v88 & 1) == 0) {
      goto LABEL_45;
    }
  }
LABEL_27:
  uint64_t v92 = v156;
  unint64_t v93 = dispatch thunk of BinaryInteger._lowWord.getter();
  unint64_t v94 = (79 - __clz(v93)) >> 4;
  if (dispatch thunk of BinaryInteger.bitWidth.getter() < 65)
  {
    __int16 v100 = 0;
    LOWORD(v99) = 0;
    LOWORD(v98) = 0;
    __int16 v101 = 0;
    uint64_t v96 = v54;
  }
  else
  {
    *(void *)uint64_t v159 = 64;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
    unint64_t v95 = dispatch thunk of BinaryInteger._lowWord.getter();
    uint64_t v96 = v54;
    v76(v73, v54);
    unint64_t v97 = ((79 - __clz(v95)) >> 4) + 4;
    unint64_t v98 = v95 >> 16;
    unint64_t v99 = HIDWORD(v95);
    if (v95)
    {
      unint64_t v94 = v97;
      __int16 v100 = HIWORD(v95);
    }
    else
    {
      __int16 v100 = 0;
    }
    if (v95)
    {
      __int16 v101 = v95;
    }
    else
    {
      LOWORD(v99) = 0;
      LOWORD(v98) = 0;
      __int16 v101 = 0;
    }
  }
  uint64_t v102 = v132;
  *(void *)&v159[4] = v93;
  __int16 v160 = v101;
  __int16 v161 = v98;
  __int16 v162 = v99;
  __int16 v163 = v100;
  _So9NSDecimala__exponent_setter(v158, v159);
  _So9NSDecimala__length_setter(v94, v159);
  _So9NSDecimala__isNegative_setter(v102, v159);
  _So9NSDecimala__isCompact_setter_0(1, v159);
  _So9NSDecimala__reserved_setter(v159);
  uint64_t v103 = v155;
  uint64_t v104 = v142;
  v142(v133, v155);
  v76(v92, v96);
  v104(v79, v103);
  return *(void *)v159;
}

uint64_t static NSDecimal.zero.getter()
{
  return 0;
}

uint64_t static NSDecimal./= infix(_:_:)(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  uint64_t result = specialized NSDecimal._divide(by:roundingMode:)(a2, a3, a4, *(void *)a1, *(void *)(a1 + 8), *(_DWORD *)(a1 + 16));
  *(void *)a1 = result;
  *(_WORD *)(a1 + 8) = v6;
  *(_WORD *)(a1 + 10) = v7;
  *(_WORD *)(a1 + 12) = v8;
  *(_WORD *)(a1 + 14) = v9;
  *(_WORD *)(a1 + 16) = v10;
  *(_WORD *)(a1 + 18) = v11;
  return result;
}

unint64_t static NSDecimal./ infix(_:_:)(unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  unint64_t v6 = specialized NSDecimal._divide(by:roundingMode:)(a4, a5, a6, a1, a2, a3);
  return v6 | ((unint64_t)WORD2(v6) << 32) | (HIWORD(v6) << 48);
}

uint64_t protocol witness for static SignedNumeric.- prefix(_:) in conformance NSDecimal@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *a1;
  __int16 v4 = *((_WORD *)a1 + 2);
  __int16 v5 = *((_WORD *)a1 + 3);
  __int16 v6 = *((_WORD *)a1 + 4);
  __int16 v7 = *((_WORD *)a1 + 5);
  __int16 v8 = *((_WORD *)a1 + 6);
  __int16 v9 = *((_WORD *)a1 + 7);
  __int16 v10 = *((_WORD *)a1 + 8);
  __int16 v11 = *((_WORD *)a1 + 9);
  *(_DWORD *)a2 = *a1;
  *(_WORD *)(a2 + 4) = v4;
  *(_WORD *)(a2 + 6) = v5;
  *(_WORD *)(a2 + 8) = v6;
  *(_WORD *)(a2 + 10) = v7;
  *(_WORD *)(a2 + 12) = v8;
  *(_WORD *)(a2 + 14) = v9;
  *(_WORD *)(a2 + 16) = v10;
  *(_WORD *)(a2 + 18) = v11;
  int v14 = v3;
  __int16 v15 = v4;
  __int16 v16 = v5;
  __int16 v17 = v6;
  __int16 v18 = v7;
  __int16 v19 = v8;
  __int16 v20 = v9;
  __int16 v21 = v10;
  __int16 v22 = v11;
  uint64_t result = _So9NSDecimala__length_getter(&v14);
  if (result)
  {
    int v14 = v3;
    __int16 v15 = v4;
    __int16 v16 = v5;
    __int16 v17 = v6;
    __int16 v18 = v7;
    __int16 v19 = v8;
    __int16 v20 = v9;
    __int16 v21 = v10;
    __int16 v22 = v11;
    uint64_t v13 = _So9NSDecimala__isNegative_getter(&v14) ^ 1;
    return _So9NSDecimala__isNegative_setter(v13, (_DWORD *)a2);
  }
  return result;
}

uint64_t protocol witness for SignedNumeric.negate() in conformance NSDecimal()
{
  int v1 = *v0;
  __int16 v2 = *((_WORD *)v0 + 2);
  __int16 v3 = *((_WORD *)v0 + 3);
  __int16 v4 = *((_WORD *)v0 + 4);
  __int16 v5 = *((_WORD *)v0 + 5);
  __int16 v6 = *((_WORD *)v0 + 6);
  __int16 v7 = *((_WORD *)v0 + 7);
  __int16 v8 = *((_WORD *)v0 + 8);
  __int16 v9 = *((_WORD *)v0 + 9);
  int v12 = *v0;
  __int16 v13 = v2;
  __int16 v14 = v3;
  __int16 v15 = v4;
  __int16 v16 = v5;
  __int16 v17 = v6;
  __int16 v18 = v7;
  __int16 v19 = v8;
  __int16 v20 = v9;
  uint64_t result = _So9NSDecimala__length_getter(&v12);
  if (result)
  {
    int v12 = v1;
    __int16 v13 = v2;
    __int16 v14 = v3;
    __int16 v15 = v4;
    __int16 v16 = v5;
    __int16 v17 = v6;
    __int16 v18 = v7;
    __int16 v19 = v8;
    __int16 v20 = v9;
    uint64_t v11 = _So9NSDecimala__isNegative_getter(&v12) ^ 1;
    return _So9NSDecimala__isNegative_setter(v11, v0);
  }
  return result;
}

uint64_t protocol witness for Numeric.init<A>(exactly:) in conformance NSDecimal@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = NSDecimal.init<A>(exactly:)(a1, a2, a3);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v6;
  *(_DWORD *)(a4 + 16) = v7;
  *(unsigned char *)(a4 + 20) = v8 & 1;
  return result;
}

unint64_t protocol witness for Numeric.magnitude.getter in conformance NSDecimal@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = NSDecimal.magnitude.getter(*(void *)v1, *(void *)(v1 + 8), *(_DWORD *)(v1 + 16));
  *(void *)a1 = result;
  *(_WORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 10) = v5;
  *(_WORD *)(a1 + 12) = v6;
  *(_WORD *)(a1 + 14) = v7;
  *(_WORD *)(a1 + 16) = v8;
  *(_WORD *)(a1 + 18) = v9;
  return result;
}

uint64_t protocol witness for static Numeric.* infix(_:_:) in conformance NSDecimal@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for static Numeric.* infix(_:_:) in conformance NSDecimal(a1, a2, (uint64_t (*)(void, void, void, void, void, void))specialized static NSDecimal.* infix(_:_:), a3);
}

uint64_t protocol witness for static Numeric.*= infix(_:_:) in conformance NSDecimal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Numeric.*= infix(_:_:) in conformance NSDecimal(a1, a2, a3, a4, (uint64_t (*)(uint64_t, void, void, void))specialized static NSDecimal.*= infix(_:_:));
}

void protocol witness for static AdditiveArithmetic.zero.getter in conformance NSDecimal(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
}

__n128 protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance NSDecimal@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = *(_DWORD *)(a2 + 16);
  unint64_t v5 = *(void *)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  int v9 = *(_DWORD *)a1;
  __n128 v10 = *(__n128 *)(a1 + 4);
  specialized static NSDecimal.+= infix(_:_:)(&v9, v5, v6, v4);
  __n128 result = v10;
  *(_DWORD *)a3 = v9;
  *(__n128 *)(a3 + 4) = result;
  return result;
}

uint64_t protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance NSDecimal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Numeric.*= infix(_:_:) in conformance NSDecimal(a1, a2, a3, a4, (uint64_t (*)(uint64_t, void, void, void))specialized static NSDecimal.+= infix(_:_:));
}

uint64_t protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance NSDecimal@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for static Numeric.* infix(_:_:) in conformance NSDecimal(a1, a2, (uint64_t (*)(void, void, void, void, void, void))specialized static NSDecimal.- infix(_:_:), a3);
}

uint64_t protocol witness for static Numeric.* infix(_:_:) in conformance NSDecimal@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void, void, void, void, void, void)@<X4>, uint64_t a4@<X8>)
{
  uint64_t result = a3(*(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned int *)(a2 + 16));
  *(void *)a4 = result;
  *(_WORD *)(a4 + 8) = v6;
  *(_WORD *)(a4 + 10) = v7;
  *(_WORD *)(a4 + 12) = v8;
  *(_WORD *)(a4 + 14) = v9;
  *(_WORD *)(a4 + 16) = v10;
  *(_WORD *)(a4 + 18) = v11;
  return result;
}

uint64_t protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance NSDecimal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Numeric.*= infix(_:_:) in conformance NSDecimal(a1, a2, a3, a4, (uint64_t (*)(uint64_t, void, void, void))specialized static NSDecimal.-= infix(_:_:));
}

uint64_t protocol witness for static Numeric.*= infix(_:_:) in conformance NSDecimal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, void, void, void))
{
  return a5(a1, *(void *)a2, *(void *)(a2 + 8), *(unsigned int *)(a2 + 16));
}

void __swiftcall NSDecimal.distance(to:)(NSDecimal *__return_ptr retstr, NSDecimal *to)
{
  __int16 v7 = v6;
  __int16 v8 = v5;
  int v9 = v4;
  unsigned int v105 = v3;
  uint64_t v139 = *MEMORY[0x1E4F143B8];
  int v136 = v4;
  unint64_t v10 = HIDWORD(v4);
  LOWORD(v137) = WORD2(v4);
  unint64_t v11 = HIWORD(v4);
  WORD1(v137) = HIWORD(v4);
  HIDWORD(v137) = v5;
  unint64_t v12 = v5 >> 16;
  unint64_t v109 = (unint64_t)to >> 32;
  unint64_t v111 = (unint64_t)to >> 48;
  unint64_t v13 = HIDWORD(v5);
  LOWORD(v138) = WORD2(v5);
  int v121 = (int)to;
  unint64_t v14 = HIWORD(v5);
  WORD1(v138) = HIWORD(v5);
  HIDWORD(v138) = v6;
  unsigned int v15 = HIWORD(v6);
  unint64_t v113 = v2 >> 16;
  unint64_t v115 = HIDWORD(v2);
  uint64_t v133 = v4;
  unint64_t v117 = HIWORD(v2);
  unint64_t v134 = v5;
  unsigned int v135 = v6;
  __int16 v119 = v2;
  if (_So9NSDecimala__length_getter(&v133))
  {
    LODWORD(v133) = v9;
    WORD2(v133) = v10;
    HIWORD(v133) = v11;
    LOWORD(v134) = v8;
    WORD1(v134) = v12;
    WORD2(v134) = v13;
    HIWORD(v134) = v14;
    LOWORD(v135) = v7;
    HIWORD(v135) = v15;
    int isNegative_getter = _So9NSDecimala__isNegative_getter(&v133);
    _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, &v136);
    int v9 = v136;
    LOWORD(v10) = v137;
    LOWORD(v11) = WORD1(v137);
    __int16 v8 = WORD2(v137);
    LOWORD(v12) = HIWORD(v137);
    LOWORD(v13) = v138;
    LOWORD(v14) = WORD1(v138);
    __int16 v7 = WORD2(v138);
    __int16 v107 = HIWORD(v138);
  }
  else
  {
    __int16 v107 = v15;
  }
  LODWORD(v133) = v121;
  WORD2(v133) = v109;
  HIWORD(v133) = v111;
  LOWORD(v134) = v119;
  WORD1(v134) = v113;
  WORD2(v134) = v115;
  HIWORD(v134) = v117;
  unsigned int v135 = v105;
  if (!_So9NSDecimala__length_getter(&v133))
  {
    LODWORD(v133) = v121;
    WORD2(v133) = v109;
    HIWORD(v133) = v111;
    LOWORD(v134) = v119;
    WORD1(v134) = v113;
    WORD2(v134) = v115;
    HIWORD(v134) = v117;
    unsigned int v135 = v105;
    if (_So9NSDecimala__isNegative_getter(&v133)) {
      goto LABEL_20;
    }
  }
  LODWORD(v133) = v9;
  WORD2(v133) = v10;
  HIWORD(v133) = v11;
  LOWORD(v134) = v8;
  WORD1(v134) = v12;
  WORD2(v134) = v13;
  HIWORD(v134) = v14;
  LOWORD(v135) = v7;
  HIWORD(v135) = v107;
  if (!_So9NSDecimala__length_getter(&v133))
  {
    LODWORD(v133) = v9;
    WORD2(v133) = v10;
    HIWORD(v133) = v11;
    LOWORD(v134) = v8;
    WORD1(v134) = v12;
    WORD2(v134) = v13;
    HIWORD(v134) = v14;
    LOWORD(v135) = v7;
    HIWORD(v135) = v107;
    if (_So9NSDecimala__isNegative_getter(&v133)) {
      goto LABEL_20;
    }
  }
  LODWORD(v133) = v121;
  WORD2(v133) = v109;
  HIWORD(v133) = v111;
  LOWORD(v134) = v119;
  WORD1(v134) = v113;
  WORD2(v134) = v115;
  HIWORD(v134) = v117;
  unsigned int v135 = v105;
  if (!_So9NSDecimala__length_getter(&v133)) {
    return;
  }
  LODWORD(v133) = v9;
  WORD2(v133) = v10;
  HIWORD(v133) = v11;
  LOWORD(v134) = v8;
  WORD1(v134) = v12;
  WORD2(v134) = v13;
  HIWORD(v134) = v14;
  LOWORD(v135) = v7;
  HIWORD(v135) = v107;
  if (!_So9NSDecimala__length_getter(&v133)) {
    return;
  }
  LODWORD(v133) = v121;
  WORD2(v133) = v109;
  HIWORD(v133) = v111;
  LOWORD(v134) = v119;
  WORD1(v134) = v113;
  WORD2(v134) = v115;
  HIWORD(v134) = v117;
  unsigned int v135 = v105;
  LODWORD(v130) = v9;
  WORD2(v130) = v10;
  HIWORD(v130) = v11;
  LOWORD(v131) = v8;
  WORD1(v131) = v12;
  WORD2(v131) = v13;
  HIWORD(v131) = v14;
  LOWORD(v132) = v7;
  HIWORD(v132) = v107;
  specialized static NSDecimal._normalize(a:b:roundingMode:)((int *)&v133, (uint64_t)&v130);
  uint64_t v17 = WORD2(v133);
  uint64_t v18 = HIWORD(v133);
  uint64_t v108 = v133;
  uint64_t v127 = v133;
  uint64_t v118 = WORD1(v134);
  uint64_t v120 = (unsigned __int16)v134;
  unint64_t v128 = v134;
  uint64_t v114 = HIWORD(v134);
  uint64_t v116 = WORD2(v134);
  int v112 = (unsigned __int16)v135;
  unsigned int v129 = v135;
  int v110 = HIWORD(v135);
  int v19 = _So9NSDecimala__length_getter(&v127);
  uint64_t v20 = HIWORD(v130);
  uint64_t v21 = (unsigned __int16)v131;
  uint64_t v22 = WORD1(v131);
  uint64_t v23 = WORD2(v131);
  uint64_t v24 = HIWORD(v131);
  int v25 = (unsigned __int16)v132;
  int v26 = HIWORD(v132);
  if (!v19) {
    return;
  }
  uint64_t v122 = v130;
  uint64_t v127 = v130;
  unint64_t v128 = v131;
  unsigned int v129 = v132;
  uint64_t v106 = WORD2(v130);
  if (!_So9NSDecimala__length_getter(&v127)) {
    return;
  }
  LODWORD(v127) = v108;
  WORD2(v127) = v17;
  HIWORD(v127) = v18;
  LOWORD(v128) = v120;
  WORD1(v128) = v118;
  WORD2(v128) = v116;
  HIWORD(v128) = v114;
  LOWORD(v129) = v112;
  HIWORD(v129) = v110;
  LODWORD(v124) = v108;
  WORD2(v124) = v17;
  HIWORD(v124) = v18;
  unint64_t v125 = __PAIR64__(__PAIR32__(v114, v116), __PAIR32__(v118, v120));
  LOWORD(v126) = v112;
  HIWORD(v126) = v110;
  uint64_t v104 = v18;
  uint64_t v27 = v17;
  int v28 = _So9NSDecimala__isNegative_getter(&v124);
  LODWORD(v124) = v122;
  WORD2(v124) = v106;
  HIWORD(v124) = v20;
  LOWORD(v125) = v21;
  WORD1(v125) = v22;
  WORD2(v125) = v23;
  HIWORD(v125) = v24;
  LOWORD(v126) = v25;
  HIWORD(v126) = v26;
  if (v28 == _So9NSDecimala__isNegative_getter(&v124))
  {
    LODWORD(v124) = v108;
    WORD2(v124) = v27;
    HIWORD(v124) = v104;
    LOWORD(v125) = v120;
    WORD1(v125) = v118;
    WORD2(v125) = v116;
    HIWORD(v125) = v114;
    LOWORD(v126) = v112;
    HIWORD(v126) = v110;
    uint64_t v29 = _So9NSDecimala__isNegative_getter(&v124);
    _So9NSDecimala__isNegative_setter(v29, &v127);
    NSDecimal.asVariableLengthInteger()(v108 | (v27 << 32) | (v104 << 48), v120 | (v118 << 16) | (v116 << 32) | (v114 << 48), v112 | (v110 << 16));
    uint64_t v31 = v30;
    NSDecimal.asVariableLengthInteger()(v122 | (v106 << 32) | (v20 << 48), v21 | (v22 << 16) | (v23 << 32) | (v24 << 48), v25 | (v26 << 16));
    uint64_t v34 = specialized static NSDecimal._integerAdd(lhs:rhs:maxResultLength:)(v31, v32, 9, v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v35 = *(void *)(v34 + 16);
    if (v35 <= 8)
    {
      v37._rawValue = (void *)v34;
LABEL_29:
      _So9NSDecimala__length_setter(v35, &v127);
      NSDecimal.copyVariableLengthInteger(_:)(v37);
      char v49 = v54;
      swift_bridgeObjectRelease();
      if (v54) {
        goto LABEL_21;
      }
      goto LABEL_146;
    }
    specialized static NSDecimal._fitMantissa(_:roundingMode:)(v34, 0);
    v37._rawValue = v36;
    uint64_t v39 = v38;
    swift_bridgeObjectRelease();
    int v40 = v127;
    __int16 v41 = WORD2(v127);
    __int16 v42 = HIWORD(v127);
    __int16 v43 = v128;
    __int16 v44 = WORD1(v128);
    __int16 v45 = WORD2(v128);
    __int16 v46 = HIWORD(v128);
    __int16 v47 = v129;
    uint64_t v124 = v127;
    unint64_t v125 = v128;
    unsigned int v126 = v129;
    __int16 v123 = HIWORD(v129);
    int v48 = _So9NSDecimala__exponent_getter((char *)&v124);
    if (v39 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v39 <= 0x7FFFFFFF)
      {
        if (!__OFADD__(v48, v39))
        {
          if (v48 + (int)v39 > 127)
          {
            swift_bridgeObjectRelease();
LABEL_20:
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            char v49 = (void *)swift_allocError();
            *__int16 v50 = 0;
            swift_willThrow();
            goto LABEL_21;
          }
          LODWORD(v124) = v40;
          WORD2(v124) = v41;
          HIWORD(v124) = v42;
          LOWORD(v125) = v43;
          WORD1(v125) = v44;
          WORD2(v125) = v45;
          HIWORD(v125) = v46;
          LOWORD(v126) = v47;
          HIWORD(v126) = v123;
          int v77 = _So9NSDecimala__exponent_getter((char *)&v124);
          BOOL v78 = __OFADD__(v77, v39);
          uint64_t v79 = (v77 + v39);
          if (!v78)
          {
            _So9NSDecimala__exponent_setter(v79, &v127);
            unint64_t v35 = *((void *)v37._rawValue + 2);
            if (HIDWORD(v35)) {
              goto LABEL_160;
            }
            goto LABEL_29;
          }
          __break(1u);
          goto LABEL_158;
        }
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
      }
LABEL_153:
      __break(1u);
      goto LABEL_154;
    }
LABEL_152:
    __break(1u);
    goto LABEL_153;
  }
  __int16 v97 = v27;
  unint64_t v98 = v108 | (v27 << 32) | (v104 << 48);
  unint64_t v103 = v120 | (v118 << 16) | (v116 << 32) | (v114 << 48);
  unsigned int v102 = v112 | (v110 << 16);
  NSDecimal.asVariableLengthInteger()(v98, v103, v102);
  uint64_t v52 = v51;
  unint64_t v100 = v21 | (v22 << 16) | (v23 << 32) | (v24 << 48);
  unint64_t v101 = v122 | (v106 << 32) | (v20 << 48);
  unsigned int v99 = v25 | (v26 << 16);
  NSDecimal.asVariableLengthInteger()(v101, v100, v99);
  uint64_t v39 = specialized static NSDecimal._integerCompare(lhs:rhs:)(v52, v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v39 == -1)
  {
    NSDecimal.asVariableLengthInteger()(v101, v100, v99);
    uint64_t v56 = v55;
    NSDecimal.asVariableLengthInteger()(v98, v103, v102);
    uint64_t v39 = v57;
    uint64_t v58 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v58 + 32) = 0;
    char v60 = (_WORD *)(v58 + 32);
    *(void *)(v58 + 16) = 8;
    v61._rawValue = (void *)v58;
    *(void *)(v58 + 40) = 0;
    unint64_t v62 = *(void *)(v56 + 16);
    unint64_t v63 = *(void *)(v39 + 16);
    if (v63 >= v62) {
      uint64_t v64 = *(void *)(v56 + 16);
    }
    else {
      uint64_t v64 = *(void *)(v39 + 16);
    }
    if (v64)
    {
      unsigned int v65 = (*(unsigned __int16 *)(v56 + 32) | 0x10000) - *(unsigned __int16 *)(v39 + 32);
      int v66 = HIWORD(v65);
      *char v60 = *(_WORD *)(v56 + 32) - *(_WORD *)(v39 + 32);
      uint64_t v67 = v64 - 1;
      if (v67)
      {
        unsigned int v65 = v66 + *(unsigned __int16 *)(v56 + 34) - *(unsigned __int16 *)(v39 + 34) + 0xFFFF;
        int v66 = HIWORD(v65);
        *(_WORD *)(v58 + 34) = v65;
        if (v67 == 1)
        {
          unint64_t v68 = 2;
        }
        else
        {
          unsigned int v59 = *(unsigned __int16 *)(v39 + 36);
          unsigned int v65 = v66 + *(unsigned __int16 *)(v56 + 36) - v59 + 0xFFFF;
          int v66 = HIWORD(v65);
          *(_WORD *)(v58 + 36) = v65;
          if (v67 == 2)
          {
            unint64_t v68 = 3;
          }
          else
          {
            unsigned int v65 = v66 + *(unsigned __int16 *)(v56 + 38) - *(unsigned __int16 *)(v39 + 38) + 0xFFFF;
            int v66 = HIWORD(v65);
            *(_WORD *)(v58 + 38) = v65;
            if (v67 == 3)
            {
              unint64_t v68 = 4;
            }
            else
            {
              unsigned int v59 = *(unsigned __int16 *)(v39 + 40);
              unsigned int v65 = v66 + *(unsigned __int16 *)(v56 + 40) - v59 + 0xFFFF;
              int v66 = HIWORD(v65);
              *(_WORD *)(v58 + 40) = v65;
              if (v67 == 4)
              {
                unint64_t v68 = 5;
              }
              else
              {
                unsigned int v65 = v66 + *(unsigned __int16 *)(v56 + 42) - *(unsigned __int16 *)(v39 + 42) + 0xFFFF;
                int v66 = HIWORD(v65);
                *(_WORD *)(v58 + 42) = v65;
                if (v67 == 5)
                {
                  unint64_t v68 = 6;
                }
                else
                {
                  unsigned int v59 = *(unsigned __int16 *)(v39 + 44);
                  unsigned int v65 = v66 + *(unsigned __int16 *)(v56 + 44) - v59 + 0xFFFF;
                  int v66 = HIWORD(v65);
                  *(_WORD *)(v58 + 44) = v65;
                  if (v67 == 6)
                  {
                    unint64_t v68 = 7;
                  }
                  else
                  {
                    int v82 = v66 + *(unsigned __int16 *)(v56 + 46) - *(unsigned __int16 *)(v39 + 46);
                    unsigned int v65 = v82 + 0xFFFF;
                    *(_WORD *)(v58 + 46) = v82 - 1;
                    if (v67 != 7)
                    {
LABEL_158:
                      __break(1u);
                      goto LABEL_159;
                    }
                    unsigned int v59 = v56;
                    int v66 = HIWORD(v65);
                    unint64_t v68 = 8;
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        unint64_t v68 = 1;
      }
      if (v68 >= v62) {
        goto LABEL_95;
      }
      if (!HIWORD(v65))
      {
        while (v68 < *(void *)(v58 + 16))
        {
          int v83 = *(unsigned __int16 *)(v56 + 32 + 2 * v68);
          unsigned int v59 = v83 + 0xFFFF;
          v60[v68] = v83 - 1;
          if (v62 - 1 == v68) {
            goto LABEL_102;
          }
          ++v68;
          if (v83) {
            goto LABEL_88;
          }
        }
        goto LABEL_150;
      }
    }
    else
    {
      if (!v62)
      {
        if (v63)
        {
          unint64_t v68 = 0;
          int v66 = 1;
          goto LABEL_96;
        }
        uint64_t v80 = 8;
LABEL_105:
        if (!v60[v80 - 1])
        {
          do
          {
            *(void *)(v58 + 16) = v80 - 1;
            if (v80 == 1) {
              break;
            }
          }
          while (!*(unsigned __int16 *)(v58 + 28 + 2 * v80--));
        }
LABEL_108:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v86 = *((void *)v61._rawValue + 2);
        if (HIDWORD(v86)) {
          goto LABEL_160;
        }
        _So9NSDecimala__length_setter(v86, &v127);
        LODWORD(v124) = v122;
        WORD2(v124) = v106;
        HIWORD(v124) = v20;
        LOWORD(v125) = v21;
        WORD1(v125) = v22;
        WORD2(v125) = v23;
        HIWORD(v125) = v24;
        LOWORD(v126) = v25;
        HIWORD(v126) = v26;
LABEL_142:
        uint64_t v94 = _So9NSDecimala__isNegative_getter(&v124);
        _So9NSDecimala__isNegative_setter(v94, &v127);
        NSDecimal.copyVariableLengthInteger(_:)(v61);
        if (v95)
        {
          char v49 = v95;
          goto LABEL_144;
        }
        swift_bridgeObjectRelease();
LABEL_146:
        _So9NSDecimala__isCompact_setter_0(0, &v127);
        NSDecimal.compact()();
        return;
      }
      unint64_t v68 = 0;
    }
LABEL_88:
    uint64_t v73 = v56 + 32;
    if (v68 <= v62) {
      unint64_t v75 = v62;
    }
    else {
      unint64_t v75 = v68;
    }
    while (v75 != v68)
    {
      if (v68 >= *(void *)(v58 + 16)) {
        goto LABEL_112;
      }
      v60[v68] = *(_WORD *)(v73 + 2 * v68);
      if ((uint64_t)++v68 >= (uint64_t)v62)
      {
        int v66 = 1;
LABEL_95:
        if ((uint64_t)v68 < (uint64_t)v63)
        {
          while (1)
          {
LABEL_96:
            if (v68 >= v63) {
              goto LABEL_155;
            }
            unint64_t v62 = *(void *)(v58 + 16);
            if (v68 < v62) {
              break;
            }
LABEL_101:
            __break(1u);
LABEL_102:
            int v66 = HIWORD(v59);
            unint64_t v68 = v62;
            if ((uint64_t)v62 >= (uint64_t)v63) {
              goto LABEL_103;
            }
          }
          unsigned int v84 = v66 + (*(unsigned __int16 *)(v39 + 32 + 2 * v68) ^ 0xFFFF);
          --v63;
          unint64_t v62 = v39 + 34;
          while (1)
          {
            int v66 = HIWORD(v84);
            v60[v68] = v84;
            if (v63 == v68) {
              break;
            }
            unsigned int v84 = v66 + (*(unsigned __int16 *)(v62 + 2 * v68++) ^ 0xFFFF);
            if (v68 >= *(void *)(v58 + 16)) {
              goto LABEL_101;
            }
          }
        }
LABEL_103:
        if (v66)
        {
          uint64_t v80 = *(void *)(v58 + 16);
          if (v80) {
            goto LABEL_105;
          }
          goto LABEL_108;
        }
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
        char v49 = (void *)swift_allocError();
        *uint64_t v87 = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
LABEL_144:
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }
  if (!v39) {
    return;
  }
  if (v39 != 1)
  {
LABEL_161:
    type metadata accessor for NSComparisonResult(0);
    uint64_t v124 = v39;
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
    return;
  }
  LOWORD(v24) = v104;
  NSDecimal.asVariableLengthInteger()(v98, v103, v102);
  uint64_t v39 = v69;
  NSDecimal.asVariableLengthInteger()(v101, v100, v99);
  uint64_t v21 = v70;
  uint64_t v71 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v71 + 32) = 0;
  char v60 = (_WORD *)(v71 + 32);
  *(void *)(v71 + 16) = 8;
  v61._rawValue = (void *)v71;
  *(void *)(v71 + 40) = 0;
  unint64_t v62 = *(void *)(v39 + 16);
  unint64_t v63 = *(void *)(v21 + 16);
  if (v63 >= v62) {
    uint64_t v72 = *(void *)(v39 + 16);
  }
  else {
    uint64_t v72 = *(void *)(v21 + 16);
  }
  if (v72)
  {
    uint64_t v73 = v39 + 32;
    unsigned int v74 = (*(unsigned __int16 *)(v39 + 32) | 0x10000) - *(unsigned __int16 *)(v21 + 32);
    LODWORD(v75) = HIWORD(v74);
    *char v60 = *(_WORD *)(v39 + 32) - *(_WORD *)(v21 + 32);
    unint64_t v68 = v72 - 1;
    if (!v68)
    {
      unint64_t v76 = 1;
      goto LABEL_115;
    }
    unsigned int v74 = v75 + *(unsigned __int16 *)(v39 + 34) - *(unsigned __int16 *)(v21 + 34) + 0xFFFF;
    LODWORD(v75) = HIWORD(v74);
    *(_WORD *)(v71 + 34) = v74;
    if (v68 == 1)
    {
      unint64_t v76 = 2;
      goto LABEL_115;
    }
    unsigned int v59 = *(unsigned __int16 *)(v21 + 36);
    unsigned int v74 = v75 + *(unsigned __int16 *)(v39 + 36) - v59 + 0xFFFF;
    LODWORD(v75) = HIWORD(v74);
    *(_WORD *)(v71 + 36) = v74;
    if (v68 == 2)
    {
      unint64_t v76 = 3;
      goto LABEL_115;
    }
    unsigned int v74 = v75 + *(unsigned __int16 *)(v39 + 38) - *(unsigned __int16 *)(v21 + 38) + 0xFFFF;
    LODWORD(v75) = HIWORD(v74);
    *(_WORD *)(v71 + 38) = v74;
    if (v68 == 3)
    {
      unint64_t v76 = 4;
      goto LABEL_115;
    }
    unsigned int v59 = *(unsigned __int16 *)(v21 + 40);
    unsigned int v74 = v75 + *(unsigned __int16 *)(v39 + 40) - v59 + 0xFFFF;
    LODWORD(v75) = HIWORD(v74);
    *(_WORD *)(v71 + 40) = v74;
    if (v68 == 4)
    {
      unint64_t v76 = 5;
      goto LABEL_115;
    }
    unsigned int v74 = v75 + *(unsigned __int16 *)(v39 + 42) - *(unsigned __int16 *)(v21 + 42) + 0xFFFF;
    LODWORD(v75) = HIWORD(v74);
    *(_WORD *)(v71 + 42) = v74;
    if (v68 == 5)
    {
      unint64_t v76 = 6;
      goto LABEL_115;
    }
    unsigned int v59 = *(unsigned __int16 *)(v21 + 44);
    unsigned int v74 = v75 + *(unsigned __int16 *)(v39 + 44) - v59 + 0xFFFF;
    LODWORD(v75) = HIWORD(v74);
    *(_WORD *)(v71 + 44) = v74;
    if (v68 == 6)
    {
      unint64_t v76 = 7;
      goto LABEL_115;
    }
LABEL_113:
    int v88 = v75 + *(unsigned __int16 *)(v39 + 46) - *(unsigned __int16 *)(v21 + 46);
    unsigned int v74 = v88 + 0xFFFF;
    *((_WORD *)v61._rawValue + 23) = v88 - 1;
    if (v68 != 7)
    {
LABEL_159:
      __break(1u);
      swift_unexpectedError();
      __break(1u);
LABEL_160:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_161;
    }
    LODWORD(v75) = HIWORD(v74);
    unint64_t v76 = 8;
LABEL_115:
    if (v76 >= v62) {
      goto LABEL_127;
    }
    if (!HIWORD(v74))
    {
      while (v76 < *((void *)v61._rawValue + 2))
      {
        int v89 = *(unsigned __int16 *)(v73 + 2 * v76);
        unsigned int v59 = v89 + 0xFFFF;
        v60[v76] = v89 - 1;
        if (v62 - 1 == v76) {
          goto LABEL_134;
        }
        ++v76;
        if (v89) {
          goto LABEL_120;
        }
      }
      goto LABEL_151;
    }
    goto LABEL_120;
  }
  if (!v62)
  {
    if (v63)
    {
      unint64_t v76 = 0;
      LODWORD(v75) = 1;
      goto LABEL_128;
    }
    uint64_t v81 = 8;
LABEL_137:
    if (!v60[v81 - 1])
    {
      do
      {
        *((void *)v61._rawValue + 2) = v81 - 1;
        if (v81 == 1) {
          break;
        }
      }
      while (!*((unsigned __int16 *)v61._rawValue + v81-- + 14));
    }
LABEL_140:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v93 = *((void *)v61._rawValue + 2);
    if (HIDWORD(v93)) {
      goto LABEL_160;
    }
    _So9NSDecimala__length_setter(v93, &v127);
    LODWORD(v124) = v108;
    WORD2(v124) = v97;
    HIWORD(v124) = v24;
    LOWORD(v125) = v120;
    WORD1(v125) = v118;
    WORD2(v125) = v116;
    HIWORD(v125) = v114;
    LOWORD(v126) = v112;
    HIWORD(v126) = v110;
    goto LABEL_142;
  }
  unint64_t v76 = 0;
LABEL_120:
  if (v76 <= v62) {
    unint64_t v90 = v62;
  }
  else {
    unint64_t v90 = v76;
  }
  do
  {
    if (v90 == v76)
    {
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
      goto LABEL_152;
    }
    if (v76 >= *((void *)v61._rawValue + 2)) {
      goto LABEL_149;
    }
    v60[v76] = *(_WORD *)(v39 + 32 + 2 * v76);
    ++v76;
  }
  while ((uint64_t)v76 < (uint64_t)v62);
  LODWORD(v75) = 1;
LABEL_127:
  if ((uint64_t)v76 < (uint64_t)v63)
  {
    while (1)
    {
LABEL_128:
      if (v76 >= v63) {
        goto LABEL_156;
      }
      unint64_t v62 = *((void *)v61._rawValue + 2);
      if (v76 < v62) {
        break;
      }
LABEL_133:
      __break(1u);
LABEL_134:
      LODWORD(v75) = HIWORD(v59);
      unint64_t v76 = v62;
      if ((uint64_t)v62 >= (uint64_t)v63) {
        goto LABEL_135;
      }
    }
    unsigned int v91 = v75 + (*(unsigned __int16 *)(v21 + 32 + 2 * v76) ^ 0xFFFF);
    --v63;
    unint64_t v62 = v21 + 34;
    while (1)
    {
      LODWORD(v75) = HIWORD(v91);
      v60[v76] = v91;
      if (v63 == v76) {
        break;
      }
      unsigned int v91 = v75 + (*(unsigned __int16 *)(v62 + 2 * v76++) ^ 0xFFFF);
      if (v76 >= *((void *)v61._rawValue + 2)) {
        goto LABEL_133;
      }
    }
  }
LABEL_135:
  if (v75)
  {
    uint64_t v81 = *((void *)v61._rawValue + 2);
    if (v81) {
      goto LABEL_137;
    }
    goto LABEL_140;
  }
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  char v49 = (void *)swift_allocError();
  *uint64_t v96 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_21:
  uint64_t v137 = 0;
  uint64_t v138 = 0;
  _So9NSDecimala__exponent_setter(0, &v136);
  _So9NSDecimala__length_setter(0, &v136);
  _So9NSDecimala__isNegative_setter(1, &v136);
  _So9NSDecimala__isCompact_setter_0(0, &v136);
  _So9NSDecimala__reserved_setter(&v136);
}

void __swiftcall NSDecimal.advanced(by:)(NSDecimal *__return_ptr retstr, NSDecimal *by)
{
  uint64_t v7 = v4;
  uint64_t v8 = v5;
  int v9 = v6;
  specialized static NSDecimal.+= infix(_:_:)((int *)&v7, (unint64_t)by, v2, v3);
}

void protocol witness for Strideable.distance(to:) in conformance NSDecimal(NSDecimal **a1@<X0>, NSDecimal *a2@<X8>)
{
  NSDecimal.distance(to:)(a2, *a1);
  *(_DWORD *)a2 = v3;
  a2->_mantissa[0] = v4;
  a2->_mantissa[1] = v5;
  a2->_mantissa[2] = v6;
  a2->_mantissa[3] = v7;
  a2->_mantissa[4] = v8;
  a2->_mantissa[5] = v9;
  a2->_mantissa[6] = v10;
  a2->_mantissa[7] = v11;
}

__n128 protocol witness for Strideable.advanced(by:) in conformance NSDecimal@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  unint64_t v5 = *(void *)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  int v8 = *(_DWORD *)v2;
  __n128 v9 = *(__n128 *)(v2 + 4);
  specialized static NSDecimal.+= infix(_:_:)(&v8, v5, v6, v4);
  __n128 result = v9;
  *(_DWORD *)a2 = v8;
  *(__n128 *)(a2 + 4) = result;
  return result;
}

uint64_t protocol witness for static Strideable._step(after:from:by:) in conformance NSDecimal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v7 = *(_DWORD *)(a6 + 16);
  unint64_t v8 = *(void *)a6;
  unint64_t v9 = *(void *)(a6 + 8);
  int v12 = *(_DWORD *)a4;
  long long v13 = *(_OWORD *)(a4 + 4);
  specialized static NSDecimal.+= infix(_:_:)(&v12, v8, v9, v7);
  long long v10 = v13;
  *(_DWORD *)a1 = v12;
  *(_OWORD *)(a1 + 4) = v10;
  return 0;
}

__n128 one-time initialization function for _powersOfTenDividingUInt128Max()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSDecimal>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_182113810;
  *(void *)((char *)&v40 + 6) = 0x9999999999999999;
  *(void *)&long long v40 = 0x9999999999999999;
  HIWORD(v40) = 6553;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(8, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v1 = v40;
  *(_DWORD *)(v0 + 32) = v39;
  *(_OWORD *)(v0 + 36) = v1;
  long long v40 = xmmword_182113820;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(8, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v2 = v40;
  *(_DWORD *)(v0 + 52) = v39;
  *(_OWORD *)(v0 + 56) = v2;
  long long v40 = xmmword_182113830;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(8, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v3 = v40;
  *(_DWORD *)(v0 + 72) = v39;
  *(_OWORD *)(v0 + 76) = v3;
  long long v40 = xmmword_182113840;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(8, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v4 = v40;
  *(_DWORD *)(v0 + 92) = v39;
  *(_OWORD *)(v0 + 96) = v4;
  long long v40 = xmmword_182113850;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(7, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v5 = v40;
  *(_DWORD *)(v0 + 112) = v39;
  *(_OWORD *)(v0 + 116) = v5;
  long long v40 = xmmword_182113860;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(7, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v6 = v40;
  *(_DWORD *)(v0 + 132) = v39;
  *(_OWORD *)(v0 + 136) = v6;
  long long v40 = xmmword_182113870;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(7, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v7 = v40;
  *(_DWORD *)(v0 + 152) = v39;
  *(_OWORD *)(v0 + 156) = v7;
  long long v40 = xmmword_182113880;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(7, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v8 = v40;
  *(_DWORD *)(v0 + 172) = v39;
  *(_OWORD *)(v0 + 176) = v8;
  long long v40 = xmmword_182113890;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(7, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v9 = v40;
  *(_DWORD *)(v0 + 192) = v39;
  *(_OWORD *)(v0 + 196) = v9;
  long long v40 = xmmword_1821138A0;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(6, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v10 = v40;
  *(_DWORD *)(v0 + 212) = v39;
  *(_OWORD *)(v0 + 216) = v10;
  long long v40 = xmmword_1821138B0;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(6, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v11 = v40;
  *(_DWORD *)(v0 + 232) = v39;
  *(_OWORD *)(v0 + 236) = v11;
  long long v40 = xmmword_1821138C0;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(6, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v12 = v40;
  *(_DWORD *)(v0 + 252) = v39;
  *(_OWORD *)(v0 + 256) = v12;
  long long v40 = xmmword_1821138D0;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(6, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(0, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v13 = v40;
  *(_DWORD *)(v0 + 272) = v39;
  *(_OWORD *)(v0 + 276) = v13;
  long long v40 = xmmword_1821138E0;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(6, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v14 = v40;
  *(_DWORD *)(v0 + 292) = v39;
  *(_OWORD *)(v0 + 296) = v14;
  long long v40 = xmmword_1821138F0;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(5, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v15 = v40;
  *(_DWORD *)(v0 + 312) = v39;
  *(_OWORD *)(v0 + 316) = v15;
  long long v40 = xmmword_182113900;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(5, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v16 = v40;
  *(_DWORD *)(v0 + 332) = v39;
  *(_OWORD *)(v0 + 336) = v16;
  long long v40 = xmmword_182113910;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(5, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v17 = v40;
  *(_DWORD *)(v0 + 352) = v39;
  *(_OWORD *)(v0 + 356) = v17;
  long long v40 = xmmword_182113920;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(5, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v18 = v40;
  *(_DWORD *)(v0 + 372) = v39;
  *(_OWORD *)(v0 + 376) = v18;
  long long v40 = xmmword_182113930;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(5, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v19 = v40;
  *(_DWORD *)(v0 + 392) = v39;
  *(_OWORD *)(v0 + 396) = v19;
  long long v40 = 0x2F394219248446BAuLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(4, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v20 = v40;
  *(_DWORD *)(v0 + 412) = v39;
  *(_OWORD *)(v0 + 416) = v20;
  long long v40 = 0x4B8ED0283A6D3DFuLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(4, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v21 = v40;
  *(_DWORD *)(v0 + 432) = v39;
  *(_OWORD *)(v0 + 436) = v21;
  long long v40 = 0x78E480405D7B96uLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(4, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v22 = v40;
  *(_DWORD *)(v0 + 452) = v39;
  *(_OWORD *)(v0 + 456) = v22;
  long long v40 = 0xC16D9A0095928uLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(4, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v23 = v40;
  *(_DWORD *)(v0 + 472) = v39;
  *(_OWORD *)(v0 + 476) = v23;
  long long v40 = 0x1357C299A88EAuLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(4, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v24 = v40;
  *(_DWORD *)(v0 + 492) = v39;
  *(_OWORD *)(v0 + 496) = v24;
  long long v40 = 0x1EF2D0F5DA7DuLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(3, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v25 = v40;
  *(_DWORD *)(v0 + 512) = v39;
  *(_OWORD *)(v0 + 516) = v25;
  long long v40 = 0x318481895D9uLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(3, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v26 = v40;
  *(_DWORD *)(v0 + 532) = v39;
  *(_OWORD *)(v0 + 536) = v26;
  long long v40 = 0x4F3A68DBC8uLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(3, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(0, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v27 = v40;
  *(_DWORD *)(v0 + 552) = v39;
  *(_OWORD *)(v0 + 556) = v27;
  long long v40 = 0x7EC3DAF94uLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(3, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v28 = v40;
  *(_DWORD *)(v0 + 572) = v39;
  *(_OWORD *)(v0 + 576) = v28;
  long long v40 = 0xCAD2F7F5uLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(2, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v29 = v40;
  *(_DWORD *)(v0 + 592) = v39;
  *(_OWORD *)(v0 + 596) = v29;
  long long v40 = 0x14484BFEuLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(2, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v30 = v40;
  *(_DWORD *)(v0 + 612) = v39;
  *(_OWORD *)(v0 + 616) = v30;
  long long v40 = 0x2073ACCuLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(2, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v31 = v40;
  *(_DWORD *)(v0 + 632) = v39;
  *(_OWORD *)(v0 + 636) = v31;
  long long v40 = 0x33EC47uLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(2, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v32 = v40;
  *(_DWORD *)(v0 + 652) = v39;
  *(_OWORD *)(v0 + 656) = v32;
  long long v40 = 0x5313AuLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(2, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v33 = v40;
  *(_DWORD *)(v0 + 672) = v39;
  *(_OWORD *)(v0 + 676) = v33;
  LOWORD(v40) = -31508;
  *(void *)((char *)&v40 + 2) = 0;
  *((void *)&v40 + 1) = 0;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(1, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v34 = v40;
  *(_DWORD *)(v0 + 692) = v39;
  *(_OWORD *)(v0 + 696) = v34;
  LOWORD(v40) = 3402;
  *(void *)((char *)&v40 + 2) = 0;
  *((void *)&v40 + 1) = 0;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(1, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v35 = v40;
  *(_DWORD *)(v0 + 712) = v39;
  *(_OWORD *)(v0 + 716) = v35;
  LOWORD(v40) = 340;
  *(void *)((char *)&v40 + 2) = 0;
  *((void *)&v40 + 1) = 0;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(1, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(0, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v36 = v40;
  *(_DWORD *)(v0 + 732) = v39;
  *(_OWORD *)(v0 + 736) = v36;
  LOWORD(v40) = 34;
  *(void *)((char *)&v40 + 2) = 0;
  *((void *)&v40 + 1) = 0;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(1, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  long long v37 = v40;
  *(_DWORD *)(v0 + 752) = v39;
  *(_OWORD *)(v0 + 756) = v37;
  LOWORD(v40) = 3;
  *(void *)((char *)&v40 + 2) = 0;
  *((void *)&v40 + 1) = 0;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(1, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __n128 result = (__n128)v40;
  *(_DWORD *)(v0 + 772) = v39;
  *(__n128 *)(v0 + 776) = result;
  _powersOfTenDividingUInt128Max._rawValue = (void *)v0;
  return result;
}

uint64_t specialized skipWhiteSpaces #1 <A>(from:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  long long v3 = (char *)result;
  long long v4 = (unsigned __int8 *)(a2 + a3);
  if (a2 + a3 == result) {
    return (uint64_t)v3;
  }
  uint64_t v5 = result - a2;
  uint64_t v6 = a3 + a2 - result;
  while ((v5 & 0x8000000000000000) == 0)
  {
    if (v6-- < 1) {
      break;
    }
    unsigned int v8 = *v3;
    if (*v3 >= 0) {
      unsigned int v9 = v8 + 1;
    }
    else {
      unsigned int v9 = ((v8 >> 6) & 0xFFFFC0FF | ((v8 & 0x3F) << 8)) + 33217;
    }
    uint64_t v11 = (v9 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v9) >> 3)) & 7)));
    MEMORY[0x185302020](&v11);
    char v10 = Character.isWhitespace.getter();
    __n128 result = swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {
      return (uint64_t)v3;
    }
    ++v3;
    ++v5;
    if (v3 == (char *)v4) {
      return (uint64_t)v4;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized stringViewContainsDecimalSeparator #1 <A>(at:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x1000000000000000) != 0) {
    goto LABEL_38;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v10 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v10 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v10)
  {
    do
    {
      unint64_t v11 = 0;
      uint64_t v12 = (a2 >> 59) & 1;
      if ((a3 & 0x1000000000000000) == 0) {
        LOBYTE(v12) = 1;
      }
      uint64_t v13 = 4;
      if ((a3 & 0x2000000000000000) != 0) {
        unint64_t v14 = v9;
      }
      else {
        unint64_t v14 = a2 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v24 = v10 - 1;
      uint64_t v25 = 4 << v12;
      a5 = a5 + a4 - a1;
      uint64_t v9 = a1 - a4;
      while (v10 != v11)
      {
        if ((a3 & 0x1000000000000000) != 0)
        {
          unint64_t v15 = MEMORY[0x185302230](15, v11, a2, a3);
        }
        else
        {
          unint64_t v15 = v13;
          if (v14 < v11) {
            goto LABEL_37;
          }
        }
        if ((uint64_t)(v9 + v11) < 0) {
          goto LABEL_35;
        }
        if (a5-- < 1) {
          goto LABEL_35;
        }
        a4 = v10;
        int v17 = *(unsigned __int8 *)(a1 + v11);
        if ((v15 & 0xC) == v25) {
          unint64_t v15 = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a2, a3);
        }
        unint64_t v18 = v15 >> 16;
        if (v15 >> 16 >= v14) {
          goto LABEL_36;
        }
        if ((a3 & 0x1000000000000000) != 0)
        {
          unsigned __int8 v20 = String.UTF8View._foreignSubscript(position:)();
        }
        else if ((a3 & 0x2000000000000000) != 0)
        {
          v27[0] = a2;
          v27[1] = a3 & 0xFFFFFFFFFFFFFFLL;
          unsigned __int8 v20 = *((unsigned char *)v27 + v18);
        }
        else
        {
          uint64_t v19 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a2 & 0x1000000000000000) == 0) {
            uint64_t v19 = _StringObject.sharedUTF8.getter();
          }
          unsigned __int8 v20 = *(unsigned char *)(v19 + v18);
        }
        BOOL v21 = v17 == v20;
        uint64_t result = v21;
        if (v21)
        {
          v13 += 0x10000;
          BOOL v21 = v24 == v11++;
          uint64_t v10 = a4;
          if (!v21) {
            continue;
          }
        }
        return result;
      }
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      Swift::Int v23 = String.UTF8View._foreignCount()();
      if (v23 < 0) {
        __break(1u);
      }
      uint64_t v10 = v23;
    }
    while (v23);
  }
  return 1;
}

uint64_t specialized static NSDecimal.== infix(_:_:)(unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  __int16 v201 = a6;
  __int16 v6 = a5;
  __int16 v197 = a5;
  unsigned int v200 = a1;
  int v7 = a4;
  LODWORD(v193) = a4;
  __int16 v8 = a2;
  unint64_t v189 = HIDWORD(a1);
  unint64_t v186 = HIWORD(a1);
  uint64_t v192 = (void *)(a2 >> 16);
  uint64_t v213 = *MEMORY[0x1E4F143B8];
  unint64_t v210 = a1;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  __int16 v188 = a3;
  unsigned int v11 = HIWORD(a3);
  unint64_t v187 = HIDWORD(a4);
  unint64_t v211 = a2;
  unint64_t v12 = HIWORD(a4);
  unint64_t v203 = a5 >> 16;
  unint64_t v13 = HIDWORD(a5);
  unint64_t v194 = HIDWORD(a5);
  unint64_t v14 = HIWORD(a5);
  unsigned int v212 = a3;
  unsigned int v15 = HIWORD(a6);
  unsigned int v190 = HIWORD(a6);
  int v185 = _So9NSDecimala__exponent_getter((char *)&v210);
  LODWORD(v210) = v7;
  WORD2(v210) = v187;
  HIWORD(v210) = v12;
  LOWORD(v211) = v6;
  WORD1(v211) = v203;
  WORD2(v211) = v13;
  HIWORD(v211) = v14;
  LOWORD(v212) = v201;
  HIWORD(v212) = v15;
  int v16 = _So9NSDecimala__exponent_getter((char *)&v210);
  unsigned __int16 v17 = v189;
  if (v185 == v16)
  {
    LODWORD(v210) = v200;
    WORD2(v210) = v189;
    HIWORD(v210) = v186;
    LOWORD(v211) = v8;
    WORD1(v211) = (_WORD)v192;
    WORD2(v211) = v9;
    HIWORD(v211) = v10;
    LOWORD(v212) = v188;
    HIWORD(v212) = v11;
    __int16 v18 = v8;
    int v19 = _So9NSDecimala__length_getter(&v210);
    LODWORD(v210) = v193;
    WORD2(v210) = v187;
    HIWORD(v210) = v12;
    LOWORD(v211) = v197;
    WORD1(v211) = v203;
    WORD2(v211) = v194;
    HIWORD(v211) = v14;
    LOWORD(v212) = v201;
    HIWORD(v212) = v190;
    BOOL v20 = v19 == _So9NSDecimala__length_getter(&v210);
    __int16 v8 = v18;
    unsigned __int16 v17 = v189;
    if (v20)
    {
      LODWORD(v210) = v200;
      WORD2(v210) = v189;
      HIWORD(v210) = v186;
      LOWORD(v211) = v18;
      WORD1(v211) = (_WORD)v192;
      WORD2(v211) = v9;
      HIWORD(v211) = v10;
      LOWORD(v212) = v188;
      HIWORD(v212) = v11;
      int isNegative_getter = _So9NSDecimala__isNegative_getter(&v210);
      LODWORD(v210) = v193;
      WORD2(v210) = v187;
      HIWORD(v210) = v12;
      LOWORD(v211) = v197;
      WORD1(v211) = v203;
      WORD2(v211) = v194;
      HIWORD(v211) = v14;
      LOWORD(v212) = v201;
      HIWORD(v212) = v190;
      BOOL v20 = isNegative_getter == _So9NSDecimala__isNegative_getter(&v210);
      __int16 v8 = v18;
      unsigned __int16 v17 = v189;
      if (v20)
      {
        LODWORD(v210) = v200;
        WORD2(v210) = v189;
        HIWORD(v210) = v186;
        LOWORD(v211) = v18;
        WORD1(v211) = (_WORD)v192;
        WORD2(v211) = v9;
        HIWORD(v211) = v10;
        LOWORD(v212) = v188;
        HIWORD(v212) = v11;
        int isCompact_getter = _So9NSDecimala__isCompact_getter(&v210);
        LODWORD(v210) = v193;
        WORD2(v210) = v187;
        HIWORD(v210) = v12;
        LOWORD(v211) = v197;
        WORD1(v211) = v203;
        WORD2(v211) = v194;
        HIWORD(v211) = v14;
        LOWORD(v212) = v201;
        HIWORD(v212) = v190;
        BOOL v20 = isCompact_getter == _So9NSDecimala__isCompact_getter(&v210);
        __int16 v8 = v18;
        unsigned __int16 v17 = v189;
        if (v20)
        {
          LODWORD(v210) = v200;
          WORD2(v210) = v189;
          HIWORD(v210) = v186;
          LOWORD(v211) = v18;
          WORD1(v211) = (_WORD)v192;
          WORD2(v211) = v9;
          HIWORD(v211) = v10;
          LOWORD(v212) = v188;
          HIWORD(v212) = v11;
          int v23 = _So9NSDecimala__reserved_getter(&v210);
          LODWORD(v210) = v193;
          WORD2(v210) = v187;
          HIWORD(v210) = v12;
          LOWORD(v211) = v197;
          WORD1(v211) = v203;
          WORD2(v211) = v194;
          HIWORD(v211) = v14;
          LOWORD(v212) = v201;
          HIWORD(v212) = v190;
          BOOL v20 = v23 == _So9NSDecimala__reserved_getter(&v210);
          __int16 v8 = v18;
          unsigned __int16 v17 = v189;
          if (v20
            && (unsigned __int16)v189 == (unsigned __int16)v187
            && v186 == v12
            && v18 == v197
            && (unsigned __int16)v192 == (unsigned __int16)v203
            && (unsigned __int16)v9 == (unsigned __int16)v194
            && v10 == v14
            && v188 == v201
            && v11 == v190)
          {
            return 1;
          }
        }
      }
    }
  }
  LODWORD(v210) = v200;
  WORD2(v210) = v17;
  HIWORD(v210) = v186;
  LOWORD(v211) = v8;
  WORD1(v211) = (_WORD)v192;
  WORD2(v211) = v9;
  HIWORD(v211) = v10;
  LOWORD(v212) = v188;
  HIWORD(v212) = v11;
  unsigned __int16 v25 = v17;
  if (!_So9NSDecimala__length_getter(&v210))
  {
    LODWORD(v210) = v200;
    WORD2(v210) = v25;
    HIWORD(v210) = v186;
    LOWORD(v211) = v8;
    WORD1(v211) = (_WORD)v192;
    WORD2(v211) = v9;
    HIWORD(v211) = v10;
    LOWORD(v212) = v188;
    HIWORD(v212) = v11;
    if (_So9NSDecimala__isNegative_getter(&v210))
    {
      LODWORD(v210) = v193;
      WORD2(v210) = v187;
      HIWORD(v210) = v12;
      LOWORD(v211) = v197;
      WORD1(v211) = v203;
      WORD2(v211) = v194;
      HIWORD(v211) = v14;
      LOWORD(v212) = v201;
      HIWORD(v212) = v190;
      if (_So9NSDecimala__length_getter(&v210)) {
        goto LABEL_33;
      }
      LODWORD(v210) = v193;
      WORD2(v210) = v187;
      HIWORD(v210) = v12;
      LOWORD(v211) = v197;
      WORD1(v211) = v203;
      WORD2(v211) = v194;
      HIWORD(v211) = v14;
      LOWORD(v212) = v201;
      HIWORD(v212) = v190;
      if (!_So9NSDecimala__isNegative_getter(&v210)) {
        goto LABEL_33;
      }
      uint64_t v36 = 0;
      return v36 == 0;
    }
  }
  __int16 v26 = v8;
  LODWORD(v210) = v193;
  WORD2(v210) = v187;
  HIWORD(v210) = v12;
  LOWORD(v211) = v197;
  WORD1(v211) = v203;
  WORD2(v211) = v194;
  HIWORD(v211) = v14;
  LOWORD(v212) = v201;
  HIWORD(v212) = v190;
  if (!_So9NSDecimala__length_getter(&v210))
  {
    LODWORD(v210) = v193;
    WORD2(v210) = v187;
    HIWORD(v210) = v12;
    LOWORD(v211) = v197;
    WORD1(v211) = v203;
    WORD2(v211) = v194;
    HIWORD(v211) = v14;
    LOWORD(v212) = v201;
    HIWORD(v212) = v190;
    if (_So9NSDecimala__isNegative_getter(&v210)) {
      goto LABEL_33;
    }
  }
  LODWORD(v210) = v200;
  WORD2(v210) = v25;
  HIWORD(v210) = v186;
  LOWORD(v211) = v8;
  WORD1(v211) = (_WORD)v192;
  WORD2(v211) = v9;
  HIWORD(v211) = v10;
  LOWORD(v212) = v188;
  HIWORD(v212) = v11;
  unsigned int v27 = _So9NSDecimala__isNegative_getter(&v210);
  LODWORD(v210) = v193;
  WORD2(v210) = v187;
  HIWORD(v210) = v12;
  LOWORD(v211) = v197;
  WORD1(v211) = v203;
  WORD2(v211) = v194;
  HIWORD(v211) = v14;
  LOWORD(v212) = v201;
  HIWORD(v212) = v190;
  if (_So9NSDecimala__isNegative_getter(&v210) < v27) {
    goto LABEL_33;
  }
  LODWORD(v210) = v200;
  WORD2(v210) = v25;
  HIWORD(v210) = v186;
  LOWORD(v211) = v26;
  WORD1(v211) = (_WORD)v192;
  WORD2(v211) = v9;
  HIWORD(v211) = v10;
  LOWORD(v212) = v188;
  HIWORD(v212) = v11;
  unsigned int v28 = _So9NSDecimala__isNegative_getter(&v210);
  LODWORD(v210) = v193;
  WORD2(v210) = v187;
  HIWORD(v210) = v12;
  LOWORD(v211) = v197;
  WORD1(v211) = v203;
  WORD2(v211) = v194;
  HIWORD(v211) = v14;
  LOWORD(v212) = v201;
  HIWORD(v212) = v190;
  if (v28 < _So9NSDecimala__isNegative_getter(&v210)) {
    goto LABEL_33;
  }
  LODWORD(v210) = v200;
  WORD2(v210) = v25;
  HIWORD(v210) = v186;
  LOWORD(v211) = v26;
  WORD1(v211) = (_WORD)v192;
  WORD2(v211) = v9;
  HIWORD(v211) = v10;
  LOWORD(v212) = v188;
  HIWORD(v212) = v11;
  if (!_So9NSDecimala__length_getter(&v210))
  {
    LODWORD(v210) = v193;
    WORD2(v210) = v187;
    HIWORD(v210) = v12;
    LOWORD(v211) = v197;
    WORD1(v211) = v203;
    WORD2(v211) = v194;
    HIWORD(v211) = v14;
    LOWORD(v212) = v201;
    HIWORD(v212) = v190;
    if (_So9NSDecimala__length_getter(&v210)) {
      uint64_t v36 = -1;
    }
    else {
      uint64_t v36 = 0;
    }
    return v36 == 0;
  }
  LODWORD(v210) = v193;
  WORD2(v210) = v187;
  LOWORD(v29) = v12;
  HIWORD(v210) = v12;
  LOWORD(v211) = v197;
  WORD1(v211) = v203;
  WORD2(v211) = v194;
  HIWORD(v211) = v14;
  LOWORD(v212) = v201;
  HIWORD(v212) = v190;
  if (!_So9NSDecimala__length_getter(&v210))
  {
    LODWORD(v210) = v200;
    WORD2(v210) = v25;
    HIWORD(v210) = v186;
    LOWORD(v211) = v26;
    WORD1(v211) = (_WORD)v192;
    WORD2(v211) = v9;
    HIWORD(v211) = v10;
    LOWORD(v212) = v188;
    HIWORD(v212) = v11;
    uint64_t v36 = _So9NSDecimala__length_getter(&v210) != 0;
    return v36 == 0;
  }
  LODWORD(v210) = v200;
  WORD2(v210) = v25;
  HIWORD(v210) = v186;
  LOWORD(v211) = v26;
  WORD1(v211) = (_WORD)v192;
  WORD2(v211) = v9;
  HIWORD(v211) = v10;
  LOWORD(v212) = v188;
  HIWORD(v212) = v11;
  LODWORD(v207) = v193;
  WORD2(v207) = v187;
  HIWORD(v207) = v12;
  LOWORD(v208) = v197;
  WORD1(v208) = v203;
  WORD2(v208) = v194;
  HIWORD(v208) = v14;
  LOWORD(v209) = v201;
  HIWORD(v209) = v190;
  int v205 = v200;
  LOWORD(v206) = v25;
  WORD1(v206) = v186;
  WORD2(v206) = v26;
  WORD3(v206) = (_WORD)v192;
  WORD4(v206) = v9;
  WORD5(v206) = v10;
  WORD6(v206) = v188;
  HIWORD(v206) = v11;
  int v30 = _So9NSDecimala__exponent_getter((char *)&v205);
  int v205 = v193;
  LOWORD(v206) = v187;
  WORD1(v206) = v12;
  WORD2(v206) = v197;
  WORD3(v206) = v203;
  WORD4(v206) = v194;
  WORD5(v206) = v14;
  WORD6(v206) = v201;
  HIWORD(v206) = v190;
  int v31 = _So9NSDecimala__exponent_getter((char *)&v205);
  int v32 = v30 - v31;
  if (v30 == v31) {
    goto LABEL_193;
  }
  v33._rawValue = (void *)v32;
  if (v32 < 0)
  {
    long long v34 = (char *)&v207 + 4;
    v33._rawValue = (void *)-(uint64_t)v33._rawValue;
    uint64_t v204 = &v207;
    long long v35 = &v210;
    unsigned __int16 v25 = v187;
    unsigned int v200 = v193;
  }
  else
  {
    long long v34 = (char *)&v210 + 4;
    uint64_t v204 = &v210;
    long long v35 = &v207;
  }
  unint64_t v37 = v200 | ((unint64_t)v25 << 32) | ((unint64_t)*((unsigned __int16 *)v34 + 1) << 48);
  unint64_t v38 = *(void *)(v34 + 4);
  unsigned int v39 = *((_DWORD *)v34 + 3);
  NSDecimal.asVariableLengthInteger()(v37, v38, v39);
  uint64_t v41 = (uint64_t)v40;
  if (!v33._rawValue)
  {
    v33._rawValue = v40;
LABEL_96:
    uint64_t v67 = v204;
    goto LABEL_97;
  }
  LODWORD(v193) = v39;
  uint64_t v202 = v35;
  uint64_t v42 = specialized abs<A>(_:)((uint64_t)v33._rawValue);
  uint64_t v43 = one-time initialization token for powerOfTen;
  swift_bridgeObjectRetain();
  if (v43 != -1) {
    goto LABEL_324;
  }
  while (1)
  {
    __int16 v44 = &demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
    rawValue = powerOfTen._rawValue;
    uint64_t v46 = *((void *)powerOfTen._rawValue + 2);
    unint64_t v198 = v37;
    unint64_t v195 = v38;
    if (v46 > v42) {
      break;
    }
    if (!v46) {
      goto LABEL_333;
    }
    uint64_t v49 = v46 - 1;
    unint64_t v38 = v41;
    long long v29 = 0;
    while (1)
    {
      BOOL v50 = __OFSUB__(v42, v49);
      v42 -= v49;
      if (v50) {
        goto LABEL_322;
      }
      uint64_t v51 = v44[196];
      if ((unint64_t)v46 > *(void *)(v51 + 16)) {
        break;
      }
      uint64_t v52 = *(void *)(v38 + 16);
      if (v52 && (v41 = *(void *)(v51 + 8 * v49 + 32), (unint64_t v37 = *(void *)(v41 + 16)) != 0))
      {
        if (__OFADD__(v52, v37)) {
          goto LABEL_334;
        }
        uint64_t v191 = v49;
        uint64_t v192 = v33._rawValue;
        if ((uint64_t)(v52 + v37) >= 8) {
          uint64_t v48 = 8;
        }
        else {
          uint64_t v48 = v52 + v37;
        }
        if (v48 < 0) {
          goto LABEL_374;
        }
        swift_bridgeObjectRetain();
        v33._rawValue = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
        *((void *)v33._rawValue + 2) = v48;
        long long v35 = (unint64_t *)((char *)v33._rawValue + 32);
        bzero((char *)v33._rawValue + 32, 2 * v48);
        uint64_t v53 = 0;
        uint64_t v54 = v41 + 32;
        do
        {
          unsigned int v55 = 0;
          uint64_t v56 = 0;
          uint64_t v57 = v53++;
          do
          {
            uint64_t v60 = v56 + v57;
            if (__OFADD__(v56, v57))
            {
              __break(1u);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_191;
            }
            if (v60 >= v48)
            {
              if (v55) {
                goto LABEL_94;
              }
              unsigned int v55 = *(unsigned __int16 *)(v54 + 2 * v57);
              if (*(_WORD *)(v54 + 2 * v57))
              {
                unsigned int v55 = *(unsigned __int16 *)(v38 + 2 * v56 + 32);
                if (*(_WORD *)(v38 + 2 * v56 + 32)) {
                  goto LABEL_94;
                }
              }
            }
            else
            {
              if (v60 < 0)
              {
                __break(1u);
LABEL_310:
                __break(1u);
LABEL_311:
                __break(1u);
LABEL_312:
                __break(1u);
LABEL_313:
                __break(1u);
LABEL_314:
                uint64_t v36 = 0;
                goto LABEL_197;
              }
              if ((unint64_t)v60 >= *((void *)v33._rawValue + 2)) {
                goto LABEL_310;
              }
              uint64_t v58 = 2 * v60;
              unsigned int v59 = v55
                  + *(unsigned __int16 *)((char *)v35 + v58)
                  + *(unsigned __int16 *)(v38 + 2 * v56 + 32) * *(unsigned __int16 *)(v54 + 2 * v57);
              unsigned int v55 = HIWORD(v59);
              *(_WORD *)((char *)v35 + v58) = v59;
            }
            ++v56;
          }
          while (v52 != v56);
          if (v55)
          {
            BOOL v50 = __OFADD__(v52, v57);
            uint64_t v61 = v52 + v57;
            if (v50) {
              goto LABEL_337;
            }
            if (v61 >= v48) {
              goto LABEL_94;
            }
            if (v61 < 0) {
              goto LABEL_340;
            }
            if ((unint64_t)v61 >= *((void *)v33._rawValue + 2))
            {
LABEL_341:
              __break(1u);
              goto LABEL_342;
            }
            *((_WORD *)v35 + v61) = v55;
          }
        }
        while (v53 != v37);
        uint64_t v62 = *((void *)v33._rawValue + 2);
        if (v62 && !*((_WORD *)v35 + v62 - 1))
        {
          uint64_t v63 = v62 + 14;
          do
          {
            *((void *)v33._rawValue + 2) = v63 - 15;
            if (v63 == 15) {
              break;
            }
          }
          while (!*((unsigned __int16 *)v33._rawValue + v63--));
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v38 = (unint64_t)v33._rawValue;
        __int16 v44 = &demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
        uint64_t v49 = v191;
        v33._rawValue = v192;
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v38 = MEMORY[0x1E4FBC860];
      }
      if (v46 > v42)
      {
        rawValue = (void *)v44[196];
        long long v35 = v202;
        if (v42 < 0) {
          goto LABEL_93;
        }
        goto LABEL_44;
      }
    }
LABEL_323:
    __break(1u);
LABEL_324:
    swift_once();
  }
  unint64_t v38 = v41;
  long long v35 = v202;
  if (v42 < 0)
  {
LABEL_93:
    __break(1u);
LABEL_94:
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    unsigned int v65 = (void *)swift_allocError();
    *int v66 = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
    LOWORD(v29) = 0;
    long long v35 = v202;
    goto LABEL_130;
  }
LABEL_44:
  if ((unint64_t)v42 >= rawValue[2])
  {
LABEL_332:
    __break(1u);
LABEL_333:
    __break(1u);
LABEL_334:
    __break(1u);
    goto LABEL_335;
  }
  uint64_t v47 = *(void *)(v38 + 16);
  if (!v47 || (uint64_t v42 = rawValue[v42 + 4], (v48 = *(void *)(v42 + 16)) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v33._rawValue = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_96;
  }
  uint64_t v41 = v47 + v48;
  if (__OFADD__(v47, v48))
  {
LABEL_343:
    __break(1u);
LABEL_344:
    __break(1u);
LABEL_345:
    __break(1u);
LABEL_346:
    __break(1u);
LABEL_347:
    __break(1u);
LABEL_348:
    __break(1u);
LABEL_349:
    __break(1u);
LABEL_350:
    __break(1u);
    goto LABEL_351;
  }
  uint64_t v192 = v33._rawValue;
  if (v41 > 7)
  {
    uint64_t v41 = 8;
LABEL_101:
    swift_bridgeObjectRetain();
    v33._rawValue = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    *((void *)v33._rawValue + 2) = v41;
    bzero((char *)v33._rawValue + 32, 2 * v41);
    goto LABEL_102;
  }
  if (v41 < 0) {
    goto LABEL_374;
  }
  if (v41) {
    goto LABEL_101;
  }
  swift_bridgeObjectRetain();
  v33._rawValue = (void *)MEMORY[0x1E4FBC860];
LABEL_102:
  uint64_t v70 = 0;
  uint64_t v71 = v42 + 32;
  uint64_t v72 = (char *)v33._rawValue + 32;
  while (1)
  {
    if (v70 == v48) {
      goto LABEL_336;
    }
    unsigned int v73 = 0;
    uint64_t v74 = 0;
    uint64_t v75 = v70 + 1;
    do
    {
      if (v47 == v74) {
        goto LABEL_311;
      }
      uint64_t v78 = v74 + v70;
      if (__OFADD__(v74, v70)) {
        goto LABEL_312;
      }
      if (v78 >= v41)
      {
        if (v73) {
          goto LABEL_129;
        }
        unsigned int v73 = *(unsigned __int16 *)(v71 + 2 * v70);
        if (*(_WORD *)(v71 + 2 * v70))
        {
          unsigned int v73 = *(unsigned __int16 *)(v38 + 2 * v74 + 32);
          if (*(_WORD *)(v38 + 2 * v74 + 32)) {
            goto LABEL_129;
          }
        }
      }
      else
      {
        if (v78 < 0)
        {
          __break(1u);
LABEL_316:
          __break(1u);
LABEL_317:
          __break(1u);
LABEL_318:
          __break(1u);
LABEL_319:
          __break(1u);
LABEL_320:
          __break(1u);
LABEL_321:
          __break(1u);
LABEL_322:
          __break(1u);
          goto LABEL_323;
        }
        if ((unint64_t)v78 >= *((void *)v33._rawValue + 2)) {
          goto LABEL_316;
        }
        uint64_t v76 = 2 * v78;
        unsigned int v77 = v73
            + *(unsigned __int16 *)&v72[v76]
            + *(unsigned __int16 *)(v38 + 2 * v74 + 32) * *(unsigned __int16 *)(v71 + 2 * v70);
        unsigned int v73 = HIWORD(v77);
        *(_WORD *)&v72[v76] = v77;
      }
      ++v74;
    }
    while (v47 != v74);
    if (!v73) {
      goto LABEL_123;
    }
    BOOL v50 = __OFADD__(v47, v70);
    uint64_t v79 = v47 + v70;
    if (v50) {
      goto LABEL_348;
    }
    if (v79 >= v41) {
      break;
    }
    if (v79 < 0) {
      goto LABEL_349;
    }
    if ((unint64_t)v79 >= *((void *)v33._rawValue + 2)) {
      goto LABEL_350;
    }
    *(_WORD *)&v72[2 * v79] = v73;
LABEL_123:
    uint64_t v70 = v75;
    if (v75 == v48)
    {
      uint64_t v80 = *((void *)v33._rawValue + 2);
      if (v80 && !*(_WORD *)&v72[2 * v80 - 2])
      {
        do
        {
          *((void *)v33._rawValue + 2) = v80 - 1;
          if (v80 == 1) {
            break;
          }
        }
        while (!*((unsigned __int16 *)v33._rawValue + v80-- + 14));
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v67 = v204;
      long long v35 = v202;
LABEL_97:
      NSDecimal.copyVariableLengthInteger(_:)(v33);
      if (!v29)
      {
        unint64_t v68 = *((void *)v33._rawValue + 2);
        swift_bridgeObjectRelease();
        if (!HIDWORD(v68))
        {
          _So9NSDecimala__length_setter(v68, v67);
          int v205 = *(_DWORD *)v35;
          long long v206 = *(_OWORD *)((char *)v35 + 4);
          uint64_t v69 = _So9NSDecimala__exponent_getter((char *)&v205);
          _So9NSDecimala__exponent_setter(v69, v67);
          _So9NSDecimala__isCompact_setter_0(0, v67);
          goto LABEL_193;
        }
        goto LABEL_375;
      }
      goto LABEL_191;
    }
  }
LABEL_129:
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  unsigned int v65 = (void *)swift_allocError();
  *int v82 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  LOWORD(v29) = 0;
LABEL_130:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  NSDecimal.asVariableLengthInteger()(v198, v195, v193);
  uint64_t v84 = *(void *)(v83 + 16);
  swift_bridgeObjectRelease();
  double v85 = floor((double)(8 - v84) * 4.81647993);
  if ((~*(void *)&v85 & 0x7FF0000000000000) == 0) {
    goto LABEL_328;
  }
  v33._rawValue = &demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
  unint64_t v86 = v204;
  if (v85 <= -9.22337204e18)
  {
LABEL_329:
    __break(1u);
    goto LABEL_330;
  }
  if (v85 >= 9.22337204e18)
  {
LABEL_330:
    __break(1u);
    goto LABEL_331;
  }
  uint64_t v87 = (uint64_t)v85;
  NSDecimal.asVariableLengthInteger()(*v35, v35[1], *((_DWORD *)v35 + 4));
  uint64_t v89 = v87 - (void)v192;
  if (__OFSUB__(v87, v192))
  {
LABEL_331:
    __break(1u);
    goto LABEL_332;
  }
  unint64_t v90 = (unint64_t *)v88;
  if (!v89)
  {
    uint64_t v42 = v88;
    goto LABEL_190;
  }
  uint64_t v91 = specialized abs<A>(_:)(v87 - (void)v192);
  uint64_t v92 = (uint64_t)powerOfTen._rawValue;
  uint64_t v48 = *((void *)powerOfTen._rawValue + 2);
  if (v48 > v91)
  {
    swift_bridgeObjectRetain();
    long long v35 = v90;
    if ((v91 & 0x8000000000000000) == 0) {
      goto LABEL_137;
    }
LABEL_257:
    __break(1u);
LABEL_258:
    uint64_t v139 = *((void *)v33._rawValue + 196);
    uint64_t v138 = v204;
LABEL_259:
    if ((v92 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v92 < *(void *)(v139 + 16))
      {
        uint64_t v163 = *(void *)(v139 + 8 * v92 + 32);
        if ((v38 & 0x8000000000000000) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v143 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v87, v163, 8);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v164 = *(void *)(v87 + 16);
          if (v164)
          {
            uint64_t v165 = *(void *)(v163 + 16);
            if (v165)
            {
              uint64_t v166 = v138;
              uint64_t v167 = v164 + v165;
              if (__OFADD__(v164, v165)) {
                goto LABEL_370;
              }
              if (v167 > 7)
              {
                uint64_t v167 = 8;
              }
              else
              {
                if (v167 < 0) {
                  goto LABEL_374;
                }
                if (!v167)
                {
                  swift_bridgeObjectRetain();
                  uint64_t v143 = MEMORY[0x1E4FBC860];
LABEL_281:
                  uint64_t v171 = 0;
                  uint64_t v172 = v163 + 32;
                  uint64_t v173 = v143 + 32;
                  while (v171 != v165)
                  {
                    unsigned int v174 = 0;
                    uint64_t v175 = 0;
                    uint64_t v176 = v171 + 1;
                    do
                    {
                      if (v164 == v175) {
                        goto LABEL_338;
                      }
                      uint64_t v179 = v175 + v171;
                      if (__OFADD__(v175, v171)) {
                        goto LABEL_339;
                      }
                      if (v179 >= v167)
                      {
                        if (v174) {
                          goto LABEL_308;
                        }
                        unsigned int v174 = *(unsigned __int16 *)(v172 + 2 * v171);
                        if (*(_WORD *)(v172 + 2 * v171))
                        {
                          unsigned int v174 = *(unsigned __int16 *)(v87 + 2 * v175 + 32);
                          if (*(_WORD *)(v87 + 2 * v175 + 32)) {
                            goto LABEL_308;
                          }
                        }
                      }
                      else
                      {
                        if (v179 < 0) {
                          goto LABEL_346;
                        }
                        if ((unint64_t)v179 >= *(void *)(v143 + 16)) {
                          goto LABEL_347;
                        }
                        uint64_t v177 = 2 * v179;
                        unsigned int v178 = v174
                             + *(unsigned __int16 *)(v173 + v177)
                             + *(unsigned __int16 *)(v87 + 2 * v175 + 32) * *(unsigned __int16 *)(v172 + 2 * v171);
                        unsigned int v174 = HIWORD(v178);
                        *(_WORD *)(v173 + v177) = v178;
                      }
                      ++v175;
                    }
                    while (v164 != v175);
                    if (v174)
                    {
                      BOOL v50 = __OFADD__(v164, v171);
                      uint64_t v180 = v164 + v171;
                      if (v50) {
                        goto LABEL_371;
                      }
                      if (v180 >= v167)
                      {
LABEL_308:
                        lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
                        uint64_t v183 = swift_allocError();
                        unsigned char *v184 = 0;
                        swift_willThrow();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        uint64_t v118 = (void *)v183;
                        goto LABEL_192;
                      }
                      if (v180 < 0) {
                        goto LABEL_372;
                      }
                      if ((unint64_t)v180 >= *(void *)(v143 + 16)) {
                        goto LABEL_373;
                      }
                      *(_WORD *)(v173 + 2 * v180) = v174;
                    }
                    uint64_t v171 = v176;
                    if (v176 == v165)
                    {
                      uint64_t v181 = *(void *)(v143 + 16);
                      if (v181 && !*(_WORD *)(v173 + 2 * v181 - 2))
                      {
                        do
                        {
                          *(void *)(v143 + 16) = v181 - 1;
                          if (v181 == 1) {
                            break;
                          }
                        }
                        while (!*(unsigned __int16 *)(v143 + 28 + 2 * v181--));
                      }
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      unint64_t v86 = v166;
                      uint64_t v87 = v38;
                      goto LABEL_273;
                    }
                  }
LABEL_369:
                  __break(1u);
LABEL_370:
                  __break(1u);
LABEL_371:
                  __break(1u);
LABEL_372:
                  __break(1u);
LABEL_373:
                  __break(1u);
LABEL_374:
                  _assertionFailure(_:_:file:line:flags:)();
                  __break(1u);
LABEL_375:
                  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
                  __break(1u);
                  return result;
                }
              }
              swift_bridgeObjectRetain();
              uint64_t v143 = static Array._allocateBufferUninitialized(minimumCapacity:)();
              *(void *)(v143 + 16) = v167;
              bzero((void *)(v143 + 32), 2 * v167);
              goto LABEL_281;
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v143 = MEMORY[0x1E4FBC860];
        }
        uint64_t v87 = v38;
        unint64_t v86 = v138;
LABEL_273:
        NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v143);
        if (!v29)
        {
          unint64_t v168 = *(void *)(v143 + 16);
          swift_bridgeObjectRelease();
          if (HIDWORD(v168)) {
            goto LABEL_375;
          }
          _So9NSDecimala__length_setter(v168, v86);
          if (v87 >= (uint64_t)0xFFFFFFFF80000000)
          {
            if (v87 <= 0x7FFFFFFF)
            {
              int v205 = *(_DWORD *)v86;
              long long v206 = *(_OWORD *)((char *)v86 + 4);
              int v169 = _So9NSDecimala__exponent_getter((char *)&v205);
              BOOL v50 = __OFSUB__(v169, v87);
              uint64_t v170 = (v169 - v87);
              if (!v50)
              {
                _So9NSDecimala__exponent_setter(v170, v86);
                _So9NSDecimala__isCompact_setter_0(0, v86);
                goto LABEL_193;
              }
              goto LABEL_368;
            }
LABEL_367:
            __break(1u);
LABEL_368:
            __break(1u);
            goto LABEL_369;
          }
LABEL_366:
          __break(1u);
          goto LABEL_367;
        }
LABEL_191:
        swift_bridgeObjectRelease();
        uint64_t v118 = v29;
        goto LABEL_192;
      }
LABEL_361:
      __break(1u);
LABEL_362:
      __break(1u);
LABEL_363:
      __break(1u);
LABEL_364:
      __break(1u);
LABEL_365:
      __break(1u);
      goto LABEL_366;
    }
LABEL_360:
    __break(1u);
    goto LABEL_361;
  }
  if (!v48) {
    goto LABEL_344;
  }
  uint64_t v96 = v48 - 1;
  swift_bridgeObjectRetain();
  long long v35 = v90;
  uint64_t v199 = v87 - (void)v192;
  do
  {
    uint64_t v97 = *((void *)v33._rawValue + 196);
    if ((unint64_t)v48 > *(void *)(v97 + 16)) {
      goto LABEL_327;
    }
    unint64_t v38 = *(void *)(v97 + 8 * v96 + 32);
    if (v89 < 0)
    {
      uint64_t v111 = v48;
      uint64_t v112 = v87;
      unint64_t v113 = v33._rawValue;
      uint64_t v114 = v96;
      swift_bridgeObjectRetain();
      uint64_t v115 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)((uint64_t)v35, v38, 8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      long long v35 = (unint64_t *)v115;
      uint64_t v96 = v114;
      v33._rawValue = v113;
      uint64_t v87 = v112;
      uint64_t v48 = v111;
    }
    else
    {
      unint64_t v37 = v35[2];
      if (v37 && (uint64_t v98 = *(void *)(v38 + 16)) != 0)
      {
        uint64_t v196 = v87;
        if (__OFADD__(v37, v98)) {
          goto LABEL_345;
        }
        uint64_t v193 = v96;
        if ((uint64_t)(v37 + v98) >= 8) {
          uint64_t v41 = 8;
        }
        else {
          uint64_t v41 = v37 + v98;
        }
        if (v41 < 0) {
          goto LABEL_374;
        }
        swift_bridgeObjectRetain();
        v33._rawValue = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
        *((void *)v33._rawValue + 2) = v41;
        uint64_t v42 = (uint64_t)v33._rawValue + 32;
        bzero((char *)v33._rawValue + 32, 2 * v41);
        uint64_t v99 = 0;
        unint64_t v100 = v38 + 32;
        do
        {
          unsigned int v101 = 0;
          uint64_t v102 = 0;
          uint64_t v103 = v99++;
          do
          {
            uint64_t v104 = v102 + v103;
            if (__OFADD__(v102, v103)) {
              goto LABEL_313;
            }
            if (v104 >= v41)
            {
              if (v101) {
                goto LABEL_186;
              }
              unsigned int v101 = *(unsigned __int16 *)(v100 + 2 * v103);
              if (*(_WORD *)(v100 + 2 * v103))
              {
                unsigned int v101 = *((unsigned __int16 *)v35 + v102 + 16);
                if (*((_WORD *)v35 + v102 + 16)) {
                  goto LABEL_186;
                }
              }
            }
            else
            {
              if (v104 < 0) {
                goto LABEL_317;
              }
              if ((unint64_t)v104 >= *((void *)v33._rawValue + 2)) {
                goto LABEL_318;
              }
              uint64_t v105 = 2 * v104;
              unsigned int v106 = v101
                   + *(unsigned __int16 *)(v42 + v105)
                   + *((unsigned __int16 *)v35 + v102 + 16) * *(unsigned __int16 *)(v100 + 2 * v103);
              unsigned int v101 = HIWORD(v106);
              *(_WORD *)(v42 + v105) = v106;
            }
            ++v102;
          }
          while (v37 != v102);
          if (v101)
          {
            BOOL v50 = __OFADD__(v37, v103);
            uint64_t v107 = v37 + v103;
            if (v50) {
              goto LABEL_355;
            }
            if (v107 >= v41)
            {
LABEL_186:
              lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
              uint64_t v116 = swift_allocError();
              *unint64_t v117 = 0;
              swift_willThrow();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v118 = (void *)v116;
              goto LABEL_192;
            }
            if (v107 < 0) {
              goto LABEL_356;
            }
            if ((unint64_t)v107 >= *((void *)v33._rawValue + 2)) {
              goto LABEL_357;
            }
            *(_WORD *)(v42 + 2 * v107) = v101;
          }
        }
        while (v99 != v98);
        uint64_t v108 = *((void *)v33._rawValue + 2);
        if (v108 && !*(_WORD *)(v42 + 2 * v108 - 2))
        {
          uint64_t v109 = v108 + 14;
          do
          {
            *((void *)v33._rawValue + 2) = v109 - 15;
            if (v109 == 15) {
              break;
            }
          }
          while (!*((unsigned __int16 *)v33._rawValue + v109--));
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        long long v35 = (unint64_t *)v33._rawValue;
        v33._rawValue = &demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
        uint64_t v87 = v196;
        uint64_t v89 = v199;
        uint64_t v96 = v193;
      }
      else
      {
        swift_bridgeObjectRelease();
        long long v35 = (unint64_t *)MEMORY[0x1E4FBC860];
        uint64_t v89 = v199;
      }
    }
    v91 -= v96;
  }
  while (v48 <= v91);
  uint64_t v92 = *((void *)v33._rawValue + 196);
  if (v91 < 0) {
    goto LABEL_257;
  }
LABEL_137:
  if ((unint64_t)v91 >= *(void *)(v92 + 16))
  {
LABEL_342:
    __break(1u);
    goto LABEL_343;
  }
  uint64_t v93 = *(void *)(v92 + 8 * v91 + 32);
  if (v89 < 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v42 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)((uint64_t)v35, v93, 8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_189;
  }
  unint64_t v94 = v35[2];
  if (!v94 || (uint64_t v95 = *(void *)(v93 + 16)) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v42 = MEMORY[0x1E4FBC860];
LABEL_189:
    long long v35 = v202;
    unint64_t v86 = v204;
    goto LABEL_190;
  }
  unint64_t v38 = v89;
  unint64_t v37 = v87;
  uint64_t v41 = v94 + v95;
  if (__OFADD__(v94, v95))
  {
LABEL_359:
    __break(1u);
    goto LABEL_360;
  }
  if (v41 > 7)
  {
    uint64_t v41 = 8;
  }
  else
  {
    if (v41 < 0) {
      goto LABEL_374;
    }
    if (!v41)
    {
      swift_bridgeObjectRetain();
      uint64_t v42 = MEMORY[0x1E4FBC860];
      goto LABEL_222;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v42 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v42 + 16) = v41;
  bzero((void *)(v42 + 32), 2 * v41);
LABEL_222:
  uint64_t v144 = 0;
  uint64_t v145 = v93 + 32;
  uint64_t v146 = v42 + 32;
  while (2)
  {
    if (v144 == v95)
    {
      __break(1u);
      goto LABEL_359;
    }
    unsigned int v147 = 0;
    uint64_t v148 = 0;
    uint64_t v149 = v144 + 1;
    do
    {
      if (v94 == v148) {
        goto LABEL_320;
      }
      uint64_t v150 = v148 + v144;
      if (__OFADD__(v148, v144)) {
        goto LABEL_321;
      }
      if (v150 >= v41)
      {
        if (v147) {
          goto LABEL_248;
        }
        unsigned int v147 = *(unsigned __int16 *)(v145 + 2 * v144);
        if (*(_WORD *)(v145 + 2 * v144))
        {
          unsigned int v147 = *((unsigned __int16 *)v35 + v148 + 16);
          if (*((_WORD *)v35 + v148 + 16)) {
            goto LABEL_248;
          }
        }
      }
      else
      {
        if (v150 < 0)
        {
          __break(1u);
LABEL_326:
          __break(1u);
LABEL_327:
          __break(1u);
LABEL_328:
          __break(1u);
          goto LABEL_329;
        }
        if ((unint64_t)v150 >= *(void *)(v42 + 16)) {
          goto LABEL_326;
        }
        uint64_t v151 = 2 * v150;
        unsigned int v152 = v147
             + *(unsigned __int16 *)(v146 + v151)
             + *((unsigned __int16 *)v35 + v148 + 16) * *(unsigned __int16 *)(v145 + 2 * v144);
        unsigned int v147 = HIWORD(v152);
        *(_WORD *)(v146 + v151) = v152;
      }
      ++v148;
    }
    while (v94 != v148);
    if (!v147) {
      goto LABEL_242;
    }
    BOOL v50 = __OFADD__(v94, v144);
    uint64_t v153 = v94 + v144;
    if (v50) {
      goto LABEL_362;
    }
    if (v153 < v41)
    {
      if (v153 < 0) {
        goto LABEL_363;
      }
      if ((unint64_t)v153 >= *(void *)(v42 + 16)) {
        goto LABEL_364;
      }
      *(_WORD *)(v146 + 2 * v153) = v147;
LABEL_242:
      uint64_t v144 = v149;
      if (v149 != v95) {
        continue;
      }
      uint64_t v154 = *(void *)(v42 + 16);
      if (v154 && !*(_WORD *)(v146 + 2 * v154 - 2))
      {
        do
        {
          *(void *)(v42 + 16) = v154 - 1;
          if (v154 == 1) {
            break;
          }
        }
        while (!*(unsigned __int16 *)(v42 + 28 + 2 * v154--));
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      long long v35 = v202;
      unint64_t v86 = v204;
      uint64_t v87 = v37;
      uint64_t v89 = v38;
LABEL_190:
      NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v42);
      if (v29) {
        goto LABEL_191;
      }
      unint64_t v130 = *(void *)(v42 + 16);
      swift_bridgeObjectRelease();
      if (!(v130 >> 31))
      {
        _So9NSDecimala__length_setter(v130, v35);
        if (v89 >= (uint64_t)0xFFFFFFFF80000000)
        {
          if (v89 <= 0x7FFFFFFF)
          {
            int v205 = *(_DWORD *)v35;
            long long v206 = *(_OWORD *)((char *)v35 + 4);
            int v131 = _So9NSDecimala__exponent_getter((char *)&v205);
            BOOL v50 = __OFSUB__(v131, v89);
            uint64_t v132 = (v131 - v89);
            if (!v50)
            {
              _So9NSDecimala__exponent_setter(v132, v35);
              _So9NSDecimala__isCompact_setter_0(0, v35);
              int v205 = *(_DWORD *)v35;
              long long v206 = *(_OWORD *)((char *)v35 + 4);
              int v133 = _So9NSDecimala__length_getter(&v205);
              uint64_t v134 = *((unsigned __int16 *)v86 + 2);
              uint64_t v135 = *((unsigned __int16 *)v86 + 3);
              if (!v133)
              {
                unsigned int v141 = *((_DWORD *)v86 + 4);
                int v205 = *(_DWORD *)v86;
                LOWORD(v206) = v134;
                WORD1(v206) = v135;
                *(void *)((char *)&v206 + 4) = v86[1];
                HIDWORD(v206) = v141;
                uint64_t v142 = _So9NSDecimala__exponent_getter((char *)&v205);
                _So9NSDecimala__exponent_setter(v142, v35);
                goto LABEL_193;
              }
              NSDecimal.asVariableLengthInteger()(*(unsigned int *)v86 | (unint64_t)(v134 << 32) | (v135 << 48), v86[1], *((_DWORD *)v86 + 4));
              uint64_t v137 = v136;
              if (!v87)
              {
                uint64_t v143 = v136;
                goto LABEL_273;
              }
              uint64_t v138 = v86;
              uint64_t v92 = specialized abs<A>(_:)(v87);
              uint64_t v139 = *((void *)v33._rawValue + 196);
              uint64_t v140 = *(void *)(v139 + 16);
              if (v140 > v92)
              {
                unint64_t v38 = v87;
                swift_bridgeObjectRetain();
                uint64_t v87 = v137;
                goto LABEL_259;
              }
              uint64_t v204 = v138;
              if (!v140) {
                goto LABEL_365;
              }
              unint64_t v38 = v87;
              uint64_t v158 = v140 - 1;
              swift_bridgeObjectRetain();
              uint64_t v159 = v137;
              while (1)
              {
                uint64_t v161 = *((void *)v33._rawValue + 196);
                if ((unint64_t)v140 > *(void *)(v161 + 16)) {
                  break;
                }
                uint64_t v162 = *(void *)(v161 + 8 * v158 + 32);
                swift_bridgeObjectRetain();
                if ((v38 & 0x8000000000000000) != 0) {
                  uint64_t v160 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v159, v162, 8);
                }
                else {
                  uint64_t v160 = specialized static NSDecimal._integerMultiply(lhs:rhs:maxResultLength:)(v159, v162, 8);
                }
                uint64_t v87 = v160;
                v92 -= v158;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v159 = v87;
                if (v140 > v92) {
                  goto LABEL_258;
                }
              }
LABEL_335:
              __break(1u);
LABEL_336:
              __break(1u);
LABEL_337:
              __break(1u);
LABEL_338:
              __break(1u);
LABEL_339:
              __break(1u);
LABEL_340:
              __break(1u);
              goto LABEL_341;
            }
LABEL_354:
            __break(1u);
LABEL_355:
            __break(1u);
LABEL_356:
            __break(1u);
LABEL_357:
            __break(1u);
          }
LABEL_353:
          __break(1u);
          goto LABEL_354;
        }
LABEL_352:
        __break(1u);
        goto LABEL_353;
      }
LABEL_351:
      __break(1u);
      goto LABEL_352;
    }
    break;
  }
LABEL_248:
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  uint64_t v156 = swift_allocError();
  *uint64_t v157 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v118 = (void *)v156;
LABEL_192:

LABEL_193:
  LODWORD(v48) = v210;
  __int16 v119 = (unint64_t *)WORD2(v210);
  LOWORD(v29) = HIWORD(v210);
  unint64_t v37 = WORD1(v211);
  LOWORD(v35) = WORD2(v211);
  uint64_t v41 = HIWORD(v211);
  unint64_t v38 = (unsigned __int16)v212;
  uint64_t v202 = (unint64_t *)(unsigned __int16)v211;
  v33._rawValue = (void *)HIWORD(v212);
  NSDecimal.asVariableLengthInteger()(v210 | ((unint64_t)WORD2(v210) << 32) | ((unint64_t)HIWORD(v210) << 48), (unsigned __int16)v211 | ((unint64_t)WORD1(v211) << 16) | ((unint64_t)WORD2(v211) << 32) | ((unint64_t)HIWORD(v211) << 48), (unsigned __int16)v212 | (HIWORD(v212) << 16));
  uint64_t v42 = v120;
  NSDecimal.asVariableLengthInteger()(v207, v208, v209);
  unint64_t v122 = *(void *)(v42 + 16);
  unint64_t v123 = *(void *)(v121 + 16);
  uint64_t v204 = v119;
  if (v123 >= v122)
  {
    if (v122 >= v123)
    {
      if (!v122) {
        goto LABEL_314;
      }
      uint64_t v124 = 2 * v122 - 2;
      unsigned int v125 = *(unsigned __int16 *)(v42 + v124 + 32);
      unsigned int v126 = *(unsigned __int16 *)(v121 + v124 + 32);
      if (v126 < v125) {
        goto LABEL_194;
      }
      if (v125 >= v126)
      {
        uint64_t v127 = v122 - 2;
        uint64_t v36 = 1;
        while (v122 != 1)
        {
          if (v127 >= (uint64_t)v123) {
            goto LABEL_319;
          }
          unsigned int v128 = *(unsigned __int16 *)(v42 + 28 + 2 * v122);
          unsigned int v129 = *(unsigned __int16 *)(v121 + 28 + 2 * v122);
          if (v129 < v128) {
            goto LABEL_197;
          }
          --v122;
          if (v128 < v129) {
            goto LABEL_196;
          }
        }
        goto LABEL_314;
      }
    }
LABEL_196:
    uint64_t v36 = -1;
    goto LABEL_197;
  }
LABEL_194:
  uint64_t v36 = 1;
LABEL_197:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v205 = v48;
  LOWORD(v206) = (_WORD)v204;
  WORD1(v206) = (_WORD)v29;
  WORD2(v206) = (_WORD)v202;
  WORD3(v206) = v37;
  WORD4(v206) = (_WORD)v35;
  WORD5(v206) = v41;
  WORD6(v206) = v38;
  HIWORD(v206) = v33._rawValue;
  if (_So9NSDecimala__isNegative_getter(&v205) && v36 != -1 && v36) {
LABEL_33:
  }
    uint64_t v36 = -1;
  return v36 == 0;
}

unint64_t specialized NSDecimal.init(_:)(unint64_t result)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  int v6 = 0;
  if (result)
  {
    unint64_t v1 = result;
    if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * result, 1) <= 0x1999999999999999uLL)
    {
      int v3 = 0;
      while (1)
      {
        uint64_t v2 = (v3 + 1);
        if (__OFADD__(v3, 1)) {
          break;
        }
        v1 /= 0xAuLL;
        ++v3;
        if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * v1, 1) >= 0x199999999999999AuLL) {
          goto LABEL_7;
        }
      }
      __break(1u);
    }
    else
    {
      uint64_t v2 = 0;
LABEL_7:
      _So9NSDecimala__isCompact_setter_0(1, &v4);
      _So9NSDecimala__exponent_setter(v2, &v4);
      _So9NSDecimala__length_setter((79 - __clz(v1)) >> 4, &v4);
      LOWORD(v5) = WORD2(v1);
      WORD1(v5) = HIWORD(v1);
      return v4 | (v1 << 32);
    }
  }
  return result;
}

void specialized static NSDecimal.+= infix(_:_:)(int *a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  uint64_t v284 = *MEMORY[0x1E4F143B8];
  __int16 v7 = *((_WORD *)a1 + 2);
  __int16 v8 = *((_WORD *)a1 + 4);
  __int16 v9 = *((_WORD *)a1 + 5);
  unsigned __int16 v10 = *((_WORD *)a1 + 6);
  unsigned __int16 v11 = *((_WORD *)a1 + 7);
  unsigned __int16 v12 = *((_WORD *)a1 + 8);
  __int16 v254 = *((_WORD *)a1 + 3);
  unsigned __int16 v13 = *((_WORD *)a1 + 9);
  unsigned int v257 = *a1;
  unsigned int v282 = *a1;
  __int16 v260 = v7;
  LOWORD(v283) = v7;
  WORD1(v283) = v254;
  WORD2(v283) = v8;
  __int16 v274 = v9;
  WORD3(v283) = v9;
  unsigned __int16 v267 = v11;
  unsigned __int16 v270 = v10;
  WORD4(v283) = v10;
  WORD5(v283) = v11;
  unsigned __int16 v266 = v12;
  WORD6(v283) = v12;
  unsigned __int16 v262 = v13;
  HIWORD(v283) = v13;
  if (!_So9NSDecimala__length_getter(&v282))
  {
    unsigned int v282 = v257;
    LOWORD(v283) = v260;
    WORD1(v283) = v254;
    WORD2(v283) = v8;
    WORD3(v283) = v274;
    WORD4(v283) = v270;
    WORD5(v283) = v267;
    WORD6(v283) = v266;
    HIWORD(v283) = v262;
    if (_So9NSDecimala__isNegative_getter(&v282)) {
      goto LABEL_30;
    }
  }
  unsigned int v282 = a2;
  unint64_t v14 = HIDWORD(a2);
  LOWORD(v283) = WORD2(a2);
  WORD1(v283) = HIWORD(a2);
  *(void *)((char *)&v283 + 4) = a3;
  HIDWORD(v283) = a4;
  if (!_So9NSDecimala__length_getter(&v282))
  {
    unsigned int v282 = a2;
    LOWORD(v283) = WORD2(a2);
    WORD1(v283) = HIWORD(a2);
    *(void *)((char *)&v283 + 4) = a3;
    HIDWORD(v283) = a4;
    if (_So9NSDecimala__isNegative_getter(&v282)) {
      goto LABEL_30;
    }
  }
  unsigned int v282 = v257;
  LOWORD(v283) = v260;
  WORD1(v283) = v254;
  WORD2(v283) = v8;
  WORD3(v283) = v274;
  WORD4(v283) = v270;
  WORD5(v283) = v267;
  WORD6(v283) = v266;
  HIWORD(v283) = v262;
  if (!_So9NSDecimala__length_getter(&v282))
  {
    unint64_t v26 = HIWORD(a2);
    unint64_t v27 = a3 >> 16;
    unint64_t v28 = HIDWORD(a3);
    unint64_t v29 = HIWORD(a3);
    __int16 v30 = a4;
    unsigned int v31 = HIWORD(a4);
    goto LABEL_306;
  }
  unsigned int v282 = a2;
  LOWORD(v283) = WORD2(a2);
  WORD1(v283) = HIWORD(a2);
  *(void *)((char *)&v283 + 4) = a3;
  HIDWORD(v283) = a4;
  if (!_So9NSDecimala__length_getter(&v282))
  {
    LODWORD(a2) = v257;
    LOWORD(v14) = v260;
    LOWORD(v31) = v262;
    LOWORD(a3) = v8;
    LOWORD(v26) = v254;
    LOWORD(v27) = v274;
    LOWORD(v29) = v267;
    LOWORD(v28) = v270;
    __int16 v30 = v266;
    goto LABEL_306;
  }
  long long v252 = 0;
  unsigned int v282 = v257;
  LOWORD(v283) = v260;
  WORD1(v283) = v254;
  WORD2(v283) = v8;
  WORD3(v283) = v274;
  WORD4(v283) = v270;
  WORD5(v283) = v267;
  WORD6(v283) = v266;
  HIWORD(v283) = v262;
  *(void *)&long long v280 = a2;
  *((void *)&v280 + 1) = a3;
  unsigned int v281 = a4;
  *(_DWORD *)uint64_t v279 = v257;
  *(_WORD *)&v279[4] = v260;
  *(_WORD *)&v279[6] = v254;
  *(_WORD *)&v279[8] = v8;
  *(_WORD *)&v279[10] = v274;
  *(void *)&v279[12] = __PAIR64__(__PAIR32__(v262, v266), __PAIR32__(v267, v270));
  uint64_t v15 = _So9NSDecimala__exponent_getter(v279);
  *(void *)uint64_t v279 = a2;
  *(void *)&v279[8] = a3;
  *(_DWORD *)&v279[16] = a4;
  int v16 = _So9NSDecimala__exponent_getter(v279);
  int v17 = v15 - v16;
  if (v15 == v16)
  {
    __int16 v18 = 0;
    goto LABEL_7;
  }
  uint64_t v40 = v17;
  if (v17 < 0)
  {
    uint64_t v72 = (char *)&v280 + 4;
    uint64_t v40 = -v40;
    uint64_t v20 = (uint64_t)&v280;
    unsigned int v73 = (long long *)&v282;
    unint64_t v74 = HIDWORD(a2);
    unsigned int v75 = a2;
    uint64_t v41 = 0;
  }
  else
  {
    uint64_t v72 = (char *)&v283;
    uint64_t v20 = (uint64_t)&v282;
    unsigned int v73 = &v280;
    uint64_t v41 = 0;
    LOWORD(v74) = v260;
    unsigned int v75 = v257;
  }
  unint64_t v76 = v75 | ((unint64_t)(unsigned __int16)v74 << 32) | ((unint64_t)*((unsigned __int16 *)v72 + 1) << 48);
  unint64_t v34 = *(void *)(v72 + 4);
  LODWORD(v77) = *((_DWORD *)v72 + 3);
  NSDecimal.asVariableLengthInteger()(v76, v34, v77);
  uint64_t v79 = (uint64_t)v78;
  if (!v40)
  {
    v87._rawValue = v78;
    goto LABEL_106;
  }
  unint64_t v265 = v76;
  unint64_t v275 = (unint64_t)v73;
  uint64_t v80 = one-time initialization token for powerOfTen;
  swift_bridgeObjectRetain();
  if (v80 != -1) {
    goto LABEL_312;
  }
LABEL_40:
  rawValue = powerOfTen._rawValue;
  uint64_t v82 = *((void *)powerOfTen._rawValue + 2);
  uint64_t v273 = (unsigned int *)v20;
  unint64_t v264 = v34;
  unsigned int v261 = v77;
  if (v82 > v40)
  {
    unint64_t v34 = v79;
    uint64_t v77 = v40;
    goto LABEL_42;
  }
  if (!v82) {
    goto LABEL_320;
  }
  uint64_t v15 = v82 - 1;
  unint64_t v34 = v79;
  uint64_t v77 = v40;
  do
  {
    BOOL v88 = __OFSUB__(v77, v15);
    v77 -= v15;
    if (v88) {
      goto LABEL_310;
    }
    if ((unint64_t)v82 > *((void *)powerOfTen._rawValue + 2))
    {
LABEL_311:
      __break(1u);
LABEL_312:
      swift_once();
      goto LABEL_40;
    }
    uint64_t v84 = *(void *)(v34 + 16);
    if (v84 && (v269 = *((void *)powerOfTen._rawValue + v15 + 4), (uint64_t v41 = *(void **)(v269 + 16)) != 0))
    {
      uint64_t v259 = v79;
      if (__OFADD__(v84, v41))
      {
        __break(1u);
LABEL_323:
        __break(1u);
LABEL_324:
        __break(1u);
LABEL_325:
        __break(1u);
LABEL_326:
        __break(1u);
LABEL_327:
        __break(1u);
        goto LABEL_328;
      }
      uint64_t v256 = v40;
      if ((uint64_t)v41 + v84 >= 8) {
        uint64_t v79 = 8;
      }
      else {
        uint64_t v79 = (uint64_t)v41 + v84;
      }
      if (v79 < 0) {
        goto LABEL_353;
      }
      LOWORD(v83) = *((void *)powerOfTen._rawValue + v15 + 4);
      swift_bridgeObjectRetain();
      uint64_t v40 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v40 + 16) = v79;
      uint64_t v20 = v40 + 32;
      bzero((void *)(v40 + 32), 2 * v79);
      unint64_t v89 = 0;
      uint64_t v90 = v269 + 32;
      do
      {
        unint64_t v91 = 0;
        uint64_t v92 = 0;
        unint64_t v93 = v89++;
        do
        {
          uint64_t v94 = v92 + v93;
          if (__OFADD__(v92, v93))
          {
            __break(1u);
LABEL_262:
            unsigned int v85 = 0xFFFF;
            unsigned int v118 = v92 + *(unsigned __int16 *)(v34 + 42) - *(unsigned __int16 *)(v40 + 42) + 0xFFFF;
            LODWORD(v92) = HIWORD(v118);
            *(_WORD *)(v84 + 42) = v118;
            if (v91 == 5)
            {
              unint64_t v119 = 6;
              goto LABEL_276;
            }
            goto LABEL_268;
          }
          if (v94 >= v79)
          {
            if (v91) {
              goto LABEL_95;
            }
            unint64_t v91 = *(unsigned __int16 *)(v90 + 2 * v93);
            if (*(_WORD *)(v90 + 2 * v93))
            {
              unint64_t v91 = *(unsigned __int16 *)(v34 + 2 * v92 + 32);
              if (*(_WORD *)(v34 + 2 * v92 + 32)) {
                goto LABEL_95;
              }
            }
          }
          else
          {
            if (v94 < 0)
            {
              __break(1u);
LABEL_265:
              __break(1u);
LABEL_266:
              __break(1u);
LABEL_267:
              __break(1u);
LABEL_268:
              unsigned int v86 = *(unsigned __int16 *)(v40 + 44);
              unsigned int v118 = v92 + *(unsigned __int16 *)(v34 + 44) - v86 + v85;
              LODWORD(v92) = HIWORD(v118);
              *(_WORD *)(v84 + 44) = v118;
              if (v91 != 6) {
                goto LABEL_274;
              }
              unint64_t v119 = 7;
LABEL_276:
              if (v119 >= v93)
              {
LABEL_288:
                if ((uint64_t)v119 < (uint64_t)v89)
                {
                  while (1)
                  {
LABEL_289:
                    if (v119 >= v89) {
                      goto LABEL_341;
                    }
                    unint64_t v93 = *(void *)(v84 + 16);
                    if (v119 < v93) {
                      break;
                    }
LABEL_294:
                    __break(1u);
LABEL_295:
                    LODWORD(v92) = HIWORD(v86);
                    unint64_t v119 = v93;
                    if ((uint64_t)v93 >= (uint64_t)v89) {
                      goto LABEL_296;
                    }
                  }
                  unsigned int v234 = v92 + (*(unsigned __int16 *)(v40 + 32 + 2 * v119) ^ 0xFFFF);
                  --v89;
                  unint64_t v93 = v40 + 34;
                  while (1)
                  {
                    LODWORD(v92) = HIWORD(v234);
                    *(_WORD *)(v90 + 2 * v119) = v234;
                    if (v89 == v119) {
                      break;
                    }
                    unsigned int v234 = v92 + (*(unsigned __int16 *)(v93 + 2 * v119++) ^ 0xFFFF);
                    if (v119 >= *(void *)(v84 + 16)) {
                      goto LABEL_294;
                    }
                  }
                }
LABEL_296:
                if (!v92)
                {
                  swift_bridgeObjectRelease();
                  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
                  __int16 v18 = (void *)swift_allocError();
                  *long long v238 = 0;
                  swift_willThrow();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  goto LABEL_31;
                }
                uint64_t v230 = *(void *)(v84 + 16);
                if (v230) {
                  goto LABEL_298;
                }
                goto LABEL_301;
              }
              if (!HIWORD(v118))
              {
                while (v119 < *(void *)(v84 + 16))
                {
                  int v232 = *(unsigned __int16 *)(v94 + 2 * v119);
                  unsigned int v86 = v232 + 0xFFFF;
                  *(_WORD *)(v90 + 2 * v119) = v232 - 1;
                  if (v93 - 1 == v119) {
                    goto LABEL_295;
                  }
                  ++v119;
                  if (v232) {
                    goto LABEL_281;
                  }
                }
                __break(1u);
                goto LABEL_314;
              }
LABEL_281:
              if (v119 <= v93) {
                unint64_t v233 = v93;
              }
              else {
                unint64_t v233 = v119;
              }
              while (v233 != v119)
              {
                if (v119 >= *(void *)(v84 + 16)) {
                  goto LABEL_309;
                }
                *(_WORD *)(v90 + 2 * v119) = *(_WORD *)(v34 + 32 + 2 * v119);
                if ((uint64_t)++v119 >= (uint64_t)v93)
                {
                  LODWORD(v92) = 1;
                  goto LABEL_288;
                }
              }
              __break(1u);
LABEL_309:
              __break(1u);
LABEL_310:
              __break(1u);
              goto LABEL_311;
            }
            if ((unint64_t)v94 >= *(void *)(v40 + 16)) {
              goto LABEL_265;
            }
            uint64_t v95 = 2 * v94;
            unsigned int v85 = *(unsigned __int16 *)(v34 + 2 * v92 + 32);
            unsigned int v96 = v91 + *(unsigned __int16 *)(v20 + v95) + v85 * *(unsigned __int16 *)(v90 + 2 * v93);
            unint64_t v91 = HIWORD(v96);
            *(_WORD *)(v20 + v95) = v96;
          }
          ++v92;
        }
        while (v84 != v92);
        if (v91)
        {
          BOOL v88 = __OFADD__(v84, v93);
          uint64_t v97 = v84 + v93;
          if (v88) {
            goto LABEL_325;
          }
          if (v97 >= v79)
          {
LABEL_95:
            uint64_t v15 = v40;
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            uint64_t v102 = (void *)swift_allocError();
            *uint64_t v103 = 0;
            uint64_t v41 = v102;
            swift_willThrow();
            swift_bridgeObjectRelease();
            unsigned int v73 = (long long *)v275;
            uint64_t v40 = v256;
            goto LABEL_147;
          }
          if (v97 < 0) {
            goto LABEL_326;
          }
          if ((unint64_t)v97 >= *(void *)(v40 + 16)) {
            goto LABEL_327;
          }
          *(_WORD *)(v20 + 2 * v97) = v91;
        }
      }
      while ((void *)v89 != v41);
      uint64_t v98 = *(void *)(v40 + 16);
      if (v98)
      {
        uint64_t v79 = v259;
        if (*(_WORD *)(v20 + 2 * v98 - 2))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v34 = v40;
          uint64_t v20 = (uint64_t)v273;
        }
        else
        {
          uint64_t v99 = v98 + 14;
          uint64_t v20 = (uint64_t)v273;
          do
          {
            *(void *)(v40 + 16) = v99 - 15;
            if (v99 == 15) {
              break;
            }
          }
          while (!*(unsigned __int16 *)(v40 + 2 * v99--));
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v34 = v40;
        }
        uint64_t v40 = v256;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v34 = v40;
        uint64_t v20 = (uint64_t)v273;
        uint64_t v40 = v256;
        uint64_t v79 = v259;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v34 = MEMORY[0x1E4FBC860];
    }
  }
  while (v82 <= v77);
  rawValue = powerOfTen._rawValue;
  uint64_t v41 = v252;
LABEL_42:
  long long v252 = v41;
  unsigned int v73 = (long long *)v275;
  if (v77 < 0) {
    goto LABEL_318;
  }
  if ((unint64_t)v77 >= rawValue[2])
  {
LABEL_319:
    __break(1u);
LABEL_320:
    __break(1u);
    goto LABEL_321;
  }
  uint64_t v83 = *(void *)(v34 + 16);
  if (!v83 || (v77 = rawValue[v77 + 4], (uint64_t v41 = *(void **)(v77 + 16)) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v87._rawValue = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_106;
  }
  uint64_t v84 = (uint64_t)v41 + v83;
  if (__OFADD__(v83, v41)) {
    goto LABEL_332;
  }
  if (v84 > 7)
  {
    uint64_t v84 = 8;
LABEL_119:
    swift_bridgeObjectRetain();
    uint64_t v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v15 + 16) = v84;
    bzero((void *)(v15 + 32), 2 * v84);
    goto LABEL_120;
  }
  if (v84 < 0)
  {
LABEL_353:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_354;
  }
  if (v84) {
    goto LABEL_119;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = MEMORY[0x1E4FBC860];
LABEL_120:
  unint64_t v91 = 0;
  unint64_t v89 = v77 + 32;
  uint64_t v90 = v15 + 32;
  while (2)
  {
    if ((void *)v91 == v41) {
      goto LABEL_324;
    }
    LODWORD(v92) = 0;
    uint64_t v94 = 0;
    unint64_t v93 = v91 + 1;
LABEL_124:
    if (v83 == v94) {
      goto LABEL_266;
    }
    uint64_t v134 = v94 + v91;
    if (__OFADD__(v94, v91)) {
      goto LABEL_267;
    }
    if (v134 >= v84)
    {
      if (v92) {
        goto LABEL_146;
      }
      LODWORD(v92) = *(unsigned __int16 *)(v89 + 2 * v91);
      if (*(_WORD *)(v89 + 2 * v91))
      {
        LODWORD(v92) = *(unsigned __int16 *)(v34 + 2 * v94 + 32);
        if (*(_WORD *)(v34 + 2 * v94 + 32)) {
          goto LABEL_146;
        }
      }
LABEL_123:
      if (v83 == ++v94)
      {
        if (v92)
        {
          BOOL v88 = __OFADD__(v83, v91);
          uint64_t v136 = v83 + v91;
          if (v88) {
            goto LABEL_334;
          }
          if (v136 >= v84)
          {
LABEL_146:
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            uint64_t v102 = (void *)swift_allocError();
            *uint64_t v139 = 0;
            uint64_t v41 = v102;
            swift_willThrow();
            swift_bridgeObjectRelease();
LABEL_147:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            NSDecimal.asVariableLengthInteger()(v265, v264, v261);
            uint64_t v141 = *(void *)(v140 + 16);
            swift_bridgeObjectRelease();
            double v142 = floor((double)(8 - v141) * 4.81647993);
            if ((~*(void *)&v142 & 0x7FF0000000000000) != 0)
            {
              uint64_t v143 = v273;
              if (v142 > -9.22337204e18)
              {
                if (v142 < 9.22337204e18)
                {
                  uint64_t v20 = (uint64_t)v142;
                  NSDecimal.asVariableLengthInteger()(*(void *)v73, *((void *)v73 + 1), *((_DWORD *)v73 + 4));
                  uint64_t v83 = v20 - v40;
                  if (!__OFSUB__(v20, v40))
                  {
                    if (!v83) {
                      goto LABEL_172;
                    }
                    uint64_t v77 = v20 - v40;
                    if (v83 < 0)
                    {
                      uint64_t v77 = v40 - v20;
                      if (__OFSUB__(0, v83)) {
                        goto LABEL_333;
                      }
                    }
                    unint64_t v265 = v20;
                    unint64_t v34 = (unint64_t)powerOfTen._rawValue;
                    uint64_t v145 = *((void *)powerOfTen._rawValue + 2);
                    uint64_t v146 = swift_bridgeObjectRetain();
                    if (v145 <= v77)
                    {
                      uint64_t v41 = 0;
                      uint64_t v40 = v145 - 1;
                      uint64_t v90 = 1;
                      uint64_t v84 = 1 - v145;
                      uint64_t v15 = v146;
                      do
                      {
                        uint64_t v79 = v77 - v40;
                        if (__OFSUB__(v77, v40)) {
                          goto LABEL_273;
                        }
                        uint64_t v148 = powerOfTen._rawValue;
                        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v145 - 1, 1, powerOfTen._rawValue);
                        unint64_t v34 = v148[v40 + 4];
                        swift_bridgeObjectRetain();
                        if (v83 < 0) {
                          uint64_t v147 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v15, v34, 8);
                        }
                        else {
                          uint64_t v147 = specialized static NSDecimal._integerMultiply(lhs:rhs:maxResultLength:)(v15, v34, 8);
                        }
                        uint64_t v20 = v147;
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        v77 += v84;
                        uint64_t v15 = v20;
                      }
                      while (v145 <= v79);
                      unint64_t v34 = (unint64_t)powerOfTen._rawValue;
                      uint64_t v77 = v79;
                    }
                    else
                    {
                      uint64_t v20 = v146;
                    }
                    unsigned int v73 = (long long *)v275;
                    if ((v77 & 0x8000000000000000) == 0)
                    {
                      if ((unint64_t)v77 < *(void *)(v34 + 16))
                      {
                        uint64_t v151 = *(void *)(v34 + 8 * v77 + 32);
                        swift_bridgeObjectRetain();
                        if (v83 < 0) {
                          uint64_t v152 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v20, v151, 8);
                        }
                        else {
                          uint64_t v152 = specialized static NSDecimal._integerMultiply(lhs:rhs:maxResultLength:)(v20, v151, 8);
                        }
                        uint64_t v15 = v152;
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        v144._rawValue = (void *)v15;
                        uint64_t v143 = v273;
                        uint64_t v20 = v265;
LABEL_172:
                        uint64_t v153 = v144._rawValue;
                        NSDecimal.copyVariableLengthInteger(_:)(v144);
                        __int16 v18 = v41;
                        if (v41)
                        {
LABEL_173:
                          swift_bridgeObjectRelease();
                          goto LABEL_31;
                        }
                        unint64_t v34 = v153[2];
                        swift_bridgeObjectRelease();
                        if (v34 >> 31) {
                          goto LABEL_337;
                        }
                        _So9NSDecimala__length_setter(v34, v73);
                        if (v83 < (uint64_t)0xFFFFFFFF80000000)
                        {
LABEL_338:
                          __break(1u);
                        }
                        else if (v83 <= 0x7FFFFFFF)
                        {
                          *(_DWORD *)uint64_t v279 = *(_DWORD *)v73;
                          *(_OWORD *)&v279[4] = *(long long *)((char *)v73 + 4);
                          int v154 = _So9NSDecimala__exponent_getter(v279);
                          BOOL v88 = __OFSUB__(v154, v83);
                          uint64_t v155 = (v154 - v83);
                          if (!v88)
                          {
                            _So9NSDecimala__exponent_setter(v155, v73);
                            _So9NSDecimala__isCompact_setter_0(0, v73);
                            *(_DWORD *)uint64_t v279 = *(_DWORD *)v73;
                            *(_OWORD *)&v279[4] = *(long long *)((char *)v73 + 4);
                            int v156 = _So9NSDecimala__length_getter(v279);
                            uint64_t v157 = *((unsigned __int16 *)v143 + 2);
                            uint64_t v158 = *((unsigned __int16 *)v143 + 3);
                            if (v156)
                            {
                              NSDecimal.asVariableLengthInteger()(*v143 | (unint64_t)(v157 << 32) | (v158 << 48), *((void *)v143 + 1), v143[4]);
                              if (!v20) {
                                goto LABEL_249;
                              }
                              uint64_t v160 = v20;
                              uint64_t v161 = specialized abs<A>(_:)(v20);
                              uint64_t v162 = specialized Array._getCount()((uint64_t)powerOfTen._rawValue);
                              uint64_t v163 = v162 - 1;
                              if (!__OFSUB__(v162, 1))
                              {
                                unint64_t v34 = v162;
                                uint64_t v164 = swift_bridgeObjectRetain();
                                if (v163 >= v161)
                                {
                                  uint64_t v40 = v164;
                                }
                                else
                                {
                                  unint64_t v165 = 1 - v34;
                                  uint64_t v15 = v164;
                                  do
                                  {
                                    uint64_t v166 = v161 - v163;
                                    if (__OFSUB__(v161, v163)) {
                                      goto LABEL_323;
                                    }
                                    uint64_t v167 = powerOfTen._rawValue;
                                    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v163, 1, powerOfTen._rawValue);
                                    unint64_t v34 = v167[v163 + 4];
                                    swift_bridgeObjectRetain();
                                    uint64_t v41 = 0;
                                    if (v160 < 0) {
                                      uint64_t v168 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v15, v34, 8);
                                    }
                                    else {
                                      uint64_t v168 = specialized static NSDecimal._integerMultiply(lhs:rhs:maxResultLength:)(v15, v34, 8);
                                    }
                                    uint64_t v40 = v168;
                                    swift_bridgeObjectRelease();
                                    swift_bridgeObjectRelease();
                                    v161 += v165;
                                    uint64_t v15 = v40;
                                  }
                                  while (v163 < v166);
                                  uint64_t v161 = v166;
                                }
                                __int16 v188 = powerOfTen._rawValue;
                                specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v161, 1, powerOfTen._rawValue);
                                uint64_t v189 = v188[v161 + 4];
                                swift_bridgeObjectRetain();
                                uint64_t v20 = v160;
                                if (v160 < 0) {
                                  uint64_t v190 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v40, v189, 8);
                                }
                                else {
                                  uint64_t v190 = specialized static NSDecimal._integerMultiply(lhs:rhs:maxResultLength:)(v40, v189, 8);
                                }
                                uint64_t v143 = v273;
                                uint64_t v224 = (void *)v190;
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                v159._rawValue = v224;
LABEL_249:
                                uint64_t v225 = v159._rawValue;
                                NSDecimal.copyVariableLengthInteger(_:)(v159);
                                __int16 v18 = v226;
                                if (v226) {
                                  goto LABEL_173;
                                }
                                unint64_t v227 = specialized Array._getCount()(v225);
                                swift_bridgeObjectRelease();
                                if ((v227 & 0x8000000000000000) != 0 || HIDWORD(v227)) {
                                  goto LABEL_354;
                                }
                                _So9NSDecimala__length_setter(v227, v143);
                                if (v20 < (uint64_t)0xFFFFFFFF80000000)
                                {
                                  __break(1u);
                                }
                                else if (v20 <= 0x7FFFFFFF)
                                {
                                  *(_DWORD *)uint64_t v279 = *v143;
                                  *(_OWORD *)&v279[4] = *(_OWORD *)(v143 + 1);
                                  int v228 = _So9NSDecimala__exponent_getter(v279);
                                  BOOL v88 = __OFSUB__(v228, v20);
                                  uint64_t v229 = (v228 - v20);
                                  if (!v88)
                                  {
                                    _So9NSDecimala__exponent_setter(v229, v143);
                                    unint64_t v123 = v143;
                                    goto LABEL_110;
                                  }
LABEL_350:
                                  __break(1u);
                                  goto LABEL_351;
                                }
                                __break(1u);
                                goto LABEL_350;
                              }
LABEL_346:
                              __break(1u);
LABEL_347:
                              __break(1u);
                            }
                            unsigned int v169 = v143[4];
                            *(_DWORD *)uint64_t v279 = *v143;
                            *(_WORD *)&v279[4] = v157;
                            *(_WORD *)&v279[6] = v158;
                            *(void *)&v279[8] = *((void *)v143 + 1);
                            *(_DWORD *)&v279[16] = v169;
                            uint64_t v170 = _So9NSDecimala__exponent_getter(v279);
                            _So9NSDecimala__exponent_setter(v170, v73);
LABEL_7:
                            uint64_t v19 = v282;
                            uint64_t v20 = (unsigned __int16)v283;
                            uint64_t v21 = WORD1(v283);
                            uint64_t v22 = WORD2(v283);
                            uint64_t v23 = WORD3(v283);
                            unint64_t v14 = WORD4(v283);
                            a3 = WORD5(v283);
                            int v24 = WORD6(v283);
                            *(_DWORD *)uint64_t v279 = v282;
                            *(_OWORD *)&v279[4] = v283;
                            unsigned int v261 = HIWORD(v283);
                            int v25 = _So9NSDecimala__length_getter(v279);
                            unint64_t v26 = WORD3(v280);
                            LOWORD(v27) = WORD5(v280);
                            LOWORD(v28) = WORD6(v280);
                            LOWORD(v29) = HIWORD(v280);
                            __int16 v30 = v281;
                            LOWORD(v31) = HIWORD(v281);
                            if (!v25)
                            {
                              LODWORD(a2) = v280;
                              LOWORD(v14) = WORD2(v280);
                              LOWORD(a3) = WORD4(v280);
                              goto LABEL_306;
                            }
                            *(_OWORD *)uint64_t v279 = v280;
                            *(_DWORD *)&v279[16] = v281;
                            unint64_t v275 = WORD5(v280);
                            uint64_t v268 = HIWORD(v280);
                            uint64_t v271 = WORD6(v280);
                            LODWORD(v265) = (unsigned __int16)v281;
                            int v263 = HIWORD(v281);
                            uint64_t v255 = WORD2(v280);
                            uint64_t v258 = v280;
                            uint64_t v251 = WORD4(v280);
                            if (!_So9NSDecimala__length_getter(v279))
                            {
                              __int16 v30 = v24;
                              LODWORD(a2) = v19;
                              __int16 v101 = v14;
                              LOWORD(v14) = v20;
                              LOWORD(v26) = v21;
                              LOWORD(v29) = a3;
                              LOWORD(a3) = v22;
                              LOWORD(v27) = v23;
                              LOWORD(v28) = v101;
                              LOWORD(v31) = v261;
                              goto LABEL_306;
                            }
                            long long v252 = v18;
                            *(_DWORD *)uint64_t v279 = v19;
                            *(_WORD *)&v279[4] = v20;
                            *(_WORD *)&v279[6] = v21;
                            *(_WORD *)&v279[8] = v22;
                            *(_WORD *)&v279[10] = v23;
                            *(_WORD *)&v279[12] = v14;
                            *(_WORD *)&v279[14] = a3;
                            *(_WORD *)&v279[16] = v24;
                            *(_WORD *)&v279[18] = v261;
                            LODWORD(v277) = v19;
                            WORD2(v277) = v20;
                            WORD3(v277) = v21;
                            WORD4(v277) = v22;
                            WORD5(v277) = v23;
                            WORD6(v277) = v14;
                            HIWORD(v277) = a3;
                            LOWORD(v278) = v24;
                            HIWORD(v278) = v261;
                            int v32 = v24;
                            int isNegative_getter = _So9NSDecimala__isNegative_getter(&v277);
                            LODWORD(v277) = v258;
                            WORD2(v277) = v255;
                            WORD3(v277) = v26;
                            WORD4(v277) = v251;
                            WORD5(v277) = v275;
                            WORD6(v277) = v271;
                            HIWORD(v277) = v268;
                            LOWORD(v278) = v265;
                            HIWORD(v278) = v263;
                            if (isNegative_getter == _So9NSDecimala__isNegative_getter(&v277))
                            {
                              LODWORD(v277) = v19;
                              WORD2(v277) = v20;
                              WORD3(v277) = v21;
                              WORD4(v277) = v22;
                              WORD5(v277) = v23;
                              WORD6(v277) = v14;
                              HIWORD(v277) = a3;
                              LOWORD(v278) = v32;
                              unint64_t v34 = v261;
                              HIWORD(v278) = v261;
                              uint64_t v35 = _So9NSDecimala__isNegative_getter(&v277);
                              _So9NSDecimala__isNegative_setter(v35, v279);
                              NSDecimal.asVariableLengthInteger()(v19 | (v20 << 32) | (v21 << 48), v22 | (v23 << 16) | (v14 << 32) | (a3 << 48), v32 | (v261 << 16));
                              uint64_t v37 = v36;
                              NSDecimal.asVariableLengthInteger()(v258 | (v255 << 32) | (v26 << 48), v251 | (v275 << 16) | (v271 << 32) | (v268 << 48), v265 | (v263 << 16));
                              uint64_t v15 = v38;
                              unint64_t v39 = *(void *)(v37 + 16);
                              uint64_t v40 = *(void *)(v38 + 16);
                              if (v40 >= v39) {
                                uint64_t v41 = *(void **)(v37 + 16);
                              }
                              else {
                                uint64_t v41 = *(void **)(v38 + 16);
                              }
                              uint64_t v42 = static Array._allocateBufferUninitialized(minimumCapacity:)();
                              *(void *)(v42 + 16) = 9;
                              *(void *)(v42 + 32) = 0;
                              *(void *)(v42 + 40) = 0;
                              *(_WORD *)(v42 + 48) = 0;
                              *(void *)&long long v277 = v42;
                              unint64_t v275 = (unint64_t)v41;
                              if (!v41)
                              {
                                unint64_t v34 = v42;
                                if (v39)
                                {
                                  uint64_t v132 = v40;
                                  int v133 = v252;
                                  unint64_t v275 = 0;
                                  goto LABEL_227;
                                }
                                unint64_t v275 = 0;
                                uint64_t v41 = v252;
                                if (v40)
                                {
LABEL_231:
                                  *(void *)&long long v277 = v34;
                                  unint64_t v202 = v275 + 16;
                                  do
                                  {
                                    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v202 - 16, 1, v15);
                                    __int16 v203 = *(_WORD *)(v15 + 2 * v202);
                                    specialized Array._makeMutableAndUnique()();
                                    uint64_t v204 = v277;
                                    unint64_t v205 = specialized Array._checkSubscript_mutating(_:)(v202 - 16, v277);
                                    *(_WORD *)(v204 + 2 * v202) = v203;
                                    destructiveProjectEnumData for PredicateCodableError(v205, v206);
                                    unint64_t v207 = v202 + 1;
                                    uint64_t v208 = v202 - 15;
                                    ++v202;
                                  }
                                  while (v208 < v40);
                                  unint64_t v275 = v207 - 16;
                                }
                                goto LABEL_234;
                              }
                              if (*(void *)(v37 + 16))
                              {
                                uint64_t v41 = v252;
                                if (*(void *)(v15 + 16))
                                {
                                  uint64_t v43 = v37 + 32;
                                  unsigned int v44 = *(unsigned __int16 *)(v15 + 32) + *(unsigned __int16 *)(v37 + 32);
                                  uint64_t MutableAnd = specialized Array._makeMutableAndUnique()();
                                  destructiveProjectEnumData for PredicateCodableError(MutableAnd, v46);
                                  uint64_t v47 = specialized Array._makeMutableAndUnique()();
                                  destructiveProjectEnumData for PredicateCodableError(v47, v48);
                                  unsigned int v49 = HIWORD(v44);
                                  specialized Array._makeMutableAndUnique()();
                                  uint64_t v50 = v277;
                                  unint64_t v51 = specialized Array._checkSubscript_mutating(_:)(0, v277);
                                  *(_WORD *)(v50 + 32) = v44;
                                  destructiveProjectEnumData for PredicateCodableError(v51, v52);
                                  if (v275 >= 2)
                                  {
                                    uint64_t v53 = 17;
                                    do
                                    {
                                      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v53 - 16, 1, v37);
                                      int v54 = *(unsigned __int16 *)(v37 + 2 * v53);
                                      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v53 - 16, 1, v15);
                                      unsigned int v44 = v49 + v54 + *(unsigned __int16 *)(v15 + 2 * v53);
                                      unsigned int v49 = HIWORD(v44);
                                      specialized Array._makeMutableAndUnique()();
                                      uint64_t v55 = v277;
                                      unint64_t v56 = specialized Array._checkSubscript_mutating(_:)(v53 - 16, v277);
                                      *(_WORD *)(v55 + 2 * v53) = v44;
                                      destructiveProjectEnumData for PredicateCodableError(v56, v57);
                                      ++v53;
                                    }
                                    while (1 - v275 + v53 != 17);
                                    uint64_t v41 = v252;
                                    uint64_t v43 = v37 + 32;
                                  }
                                  if (v39 > v40)
                                  {
                                    if (v44 < 0x10000) {
                                      goto LABEL_225;
                                    }
                                    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v275, 1, v37);
                                    int v58 = *(unsigned __int16 *)(v43 + 2 * v275);
                                    uint64_t v59 = specialized Array._makeMutableAndUnique()();
                                    destructiveProjectEnumData for PredicateCodableError(v59, v60);
                                    uint64_t v61 = specialized Array._makeMutableAndUnique()();
                                    destructiveProjectEnumData for PredicateCodableError(v61, v62);
                                    unsigned int v63 = v58 + 1;
                                    specialized Array._makeMutableAndUnique()();
                                    uint64_t v64 = v277;
                                    unint64_t v65 = specialized Array._checkSubscript_mutating(_:)(v275, v277);
                                    *(_WORD *)(v64 + 2 * v275 + 32) = v58 + 1;
                                    destructiveProjectEnumData for PredicateCodableError(v65, v66);
                                    if (v275 + 1 < v39)
                                    {
                                      uint64_t v272 = v40;
                                      unint64_t v67 = v275 + 17;
                                      while (1)
                                      {
                                        unint64_t v275 = v67 - 16;
                                        if (v58 != 0xFFFF) {
                                          break;
                                        }
                                        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v275, 1, v37);
                                        int v58 = *(unsigned __int16 *)(v37 + 2 * v67);
                                        unsigned int v63 = v58 + 1;
                                        specialized Array._makeMutableAndUnique()();
                                        uint64_t v68 = v277;
                                        unint64_t v69 = specialized Array._checkSubscript_mutating(_:)(v275, v277);
                                        *(_WORD *)(v68 + 2 * v67) = v58 + 1;
                                        destructiveProjectEnumData for PredicateCodableError(v69, v70);
                                        ++v67;
                                        if (1 - v39 + v67 == 17)
                                        {
                                          uint64_t v40 = v272;
                                          goto LABEL_202;
                                        }
                                      }
                                      uint64_t v40 = v272;
LABEL_225:
                                      uint64_t v132 = v40;
                                      unint64_t v34 = v277;
                                      int v133 = v41;
                                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                                        unint64_t v34 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v34);
                                      }
LABEL_227:
                                      *(void *)&long long v277 = v34;
                                      unint64_t v195 = v275 + 16;
                                      do
                                      {
                                        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v195 - 16, 1, v37);
                                        __int16 v196 = *(_WORD *)(v37 + 2 * v195);
                                        specialized Array._makeMutableAndUnique()();
                                        uint64_t v197 = v277;
                                        unint64_t v198 = specialized Array._checkSubscript_mutating(_:)(v195 - 16, v277);
                                        *(_WORD *)(v197 + 2 * v195) = v196;
                                        destructiveProjectEnumData for PredicateCodableError(v198, v199);
                                        unint64_t v200 = v195 + 1;
                                        int64_t v201 = v195 - 15;
                                        ++v195;
                                      }
                                      while (v201 < (uint64_t)v39);
                                      unint64_t v275 = v200 - 16;
                                      uint64_t v41 = v133;
                                      uint64_t v40 = v132;
                                      if ((uint64_t)(v200 - 16) < v132)
                                      {
LABEL_230:
                                        unint64_t v34 = v277;
                                        if (swift_isUniquelyReferenced_nonNull_native()) {
                                          goto LABEL_231;
                                        }
LABEL_342:
                                        unint64_t v34 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v34);
                                        goto LABEL_231;
                                      }
LABEL_234:
                                      specialized RangeReplaceableCollection<>.removeLast(_:)(*(void *)(v277 + 16) - v275);
                                      swift_bridgeObjectRelease();
                                      swift_bridgeObjectRelease();
                                      if (*(void *)(v277 + 16) <= 8uLL)
                                      {
                                        uint64_t v84 = v277;
                                        goto LABEL_242;
                                      }
                                      specialized static NSDecimal._fitMantissa(_:roundingMode:)(v277, 0);
                                      uint64_t v84 = v209;
                                      uint64_t v211 = v210;
                                      __int16 v18 = v41;
                                      swift_bridgeObjectRelease();
                                      if (v41) {
                                        goto LABEL_31;
                                      }
                                      int v212 = *(_DWORD *)v279;
                                      __int16 v213 = *(_WORD *)&v279[4];
                                      __int16 v214 = *(_WORD *)&v279[6];
                                      __int16 v215 = *(_WORD *)&v279[8];
                                      __int16 v216 = *(_WORD *)&v279[10];
                                      __int16 v217 = *(_WORD *)&v279[12];
                                      __int16 v218 = *(_WORD *)&v279[14];
                                      __int16 v219 = *(_WORD *)&v279[16];
                                      long long v277 = *(_OWORD *)v279;
                                      int v278 = *(_DWORD *)&v279[16];
                                      __int16 v276 = *(_WORD *)&v279[18];
                                      int v220 = _So9NSDecimala__exponent_getter((char *)&v277);
                                      if (v211 < (uint64_t)0xFFFFFFFF80000000)
                                      {
                                        __break(1u);
                                      }
                                      else if (v211 <= 0x7FFFFFFF)
                                      {
                                        if (!__OFADD__(v220, v211))
                                        {
                                          if (v220 + (int)v211 > 127)
                                          {
                                            swift_bridgeObjectRelease();
LABEL_30:
                                            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
                                            __int16 v18 = (void *)swift_allocError();
                                            unsigned char *v71 = 0;
                                            swift_willThrow();
                                            goto LABEL_31;
                                          }
                                          LODWORD(v277) = v212;
                                          WORD2(v277) = v213;
                                          WORD3(v277) = v214;
                                          WORD4(v277) = v215;
                                          WORD5(v277) = v216;
                                          WORD6(v277) = v217;
                                          HIWORD(v277) = v218;
                                          LOWORD(v278) = v219;
                                          HIWORD(v278) = v276;
                                          int v222 = _So9NSDecimala__exponent_getter((char *)&v277);
                                          BOOL v88 = __OFADD__(v222, v211);
                                          uint64_t v223 = (v222 + v211);
                                          if (v88) {
                                            goto LABEL_347;
                                          }
                                          _So9NSDecimala__exponent_setter(v223, v279);
LABEL_242:
                                          unint64_t v221 = specialized Array._getCount()(v84);
                                          if ((v221 & 0x8000000000000000) != 0 || HIDWORD(v221)) {
                                            goto LABEL_354;
                                          }
                                          _So9NSDecimala__length_setter(v221, v279);
LABEL_303:
                                          NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v84);
                                          __int16 v18 = v131;
LABEL_304:
                                          swift_bridgeObjectRelease();
                                          if (!v131)
                                          {
                                            _So9NSDecimala__isCompact_setter_0(0, v279);
                                            NSDecimal.compact()();
                                            LODWORD(a2) = *(_DWORD *)v279;
                                            LOWORD(v14) = *(_WORD *)&v279[4];
                                            LOWORD(v26) = *(_WORD *)&v279[6];
                                            LOWORD(a3) = *(_WORD *)&v279[8];
                                            LOWORD(v27) = *(_WORD *)&v279[10];
                                            LOWORD(v28) = *(_WORD *)&v279[12];
                                            LOWORD(v29) = *(_WORD *)&v279[14];
                                            __int16 v30 = *(_WORD *)&v279[16];
                                            LOWORD(v31) = *(_WORD *)&v279[18];
                                            goto LABEL_306;
                                          }
LABEL_31:
                                          long long v283 = 0uLL;
                                          _So9NSDecimala__exponent_setter(0, &v282);
                                          _So9NSDecimala__length_setter(0, &v282);
                                          _So9NSDecimala__isNegative_setter(1, &v282);
                                          _So9NSDecimala__isCompact_setter_0(0, &v282);
                                          _So9NSDecimala__reserved_setter(&v282);

                                          LODWORD(a2) = v282;
                                          LOWORD(v14) = v283;
                                          LOWORD(v26) = WORD1(v283);
                                          LOWORD(a3) = WORD2(v283);
                                          LOWORD(v27) = WORD3(v283);
                                          LOWORD(v28) = WORD4(v283);
                                          LOWORD(v29) = WORD5(v283);
                                          __int16 v30 = WORD6(v283);
                                          LOWORD(v31) = HIWORD(v283);
LABEL_306:
                                          *a1 = a2;
                                          *((_WORD *)a1 + 2) = v14;
                                          *((_WORD *)a1 + 3) = v26;
                                          *((_WORD *)a1 + 4) = a3;
                                          *((_WORD *)a1 + 5) = v27;
                                          *((_WORD *)a1 + 6) = v28;
                                          *((_WORD *)a1 + 7) = v29;
                                          *((_WORD *)a1 + 8) = v30;
                                          *((_WORD *)a1 + 9) = v31;
                                          return;
                                        }
LABEL_345:
                                        __break(1u);
                                        goto LABEL_346;
                                      }
                                      __break(1u);
                                      goto LABEL_345;
                                    }
                                    unint64_t v39 = v275 + 1;
LABEL_202:
                                    unsigned int v49 = HIWORD(v63);
                                    unint64_t v275 = v39;
                                  }
                                  if ((uint64_t)v275 < v40)
                                  {
                                    if (!v49) {
                                      goto LABEL_230;
                                    }
                                    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v275, 1, v15);
                                    int v171 = *(unsigned __int16 *)(v15 + 32 + 2 * v275);
                                    uint64_t v172 = specialized Array._makeMutableAndUnique()();
                                    destructiveProjectEnumData for PredicateCodableError(v172, v173);
                                    uint64_t v174 = specialized Array._makeMutableAndUnique()();
                                    destructiveProjectEnumData for PredicateCodableError(v174, v175);
                                    unsigned int v176 = v171 + 1;
                                    specialized Array._makeMutableAndUnique()();
                                    uint64_t v177 = v277;
                                    unint64_t v178 = specialized Array._checkSubscript_mutating(_:)(v275, v277);
                                    *(_WORD *)(v177 + 2 * v275 + 32) = v171 + 1;
                                    destructiveProjectEnumData for PredicateCodableError(v178, v179);
                                    unint64_t v180 = v275 + 1;
                                    if ((uint64_t)(v275 + 1) < v40)
                                    {
                                      unint64_t v181 = v275 + 17;
                                      do
                                      {
                                        unint64_t v275 = v181 - 16;
                                        if (v171 != 0xFFFF) {
                                          goto LABEL_230;
                                        }
                                        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v275, 1, v15);
                                        int v171 = *(unsigned __int16 *)(v15 + 2 * v181);
                                        unsigned int v176 = v171 + 1;
                                        specialized Array._makeMutableAndUnique()();
                                        uint64_t v182 = v277;
                                        unint64_t v183 = specialized Array._checkSubscript_mutating(_:)(v275, v277);
                                        *(_WORD *)(v182 + 2 * v181) = v171 + 1;
                                        destructiveProjectEnumData for PredicateCodableError(v183, v184);
                                        ++v181;
                                      }
                                      while (1 - v40 + v181 != 17);
                                      unint64_t v180 = v40;
                                    }
                                    unsigned int v49 = HIWORD(v176);
                                    unint64_t v275 = v180;
                                  }
                                  if (v49)
                                  {
                                    if (v275 >= 0xA) {
                                      goto LABEL_355;
                                    }
                                    specialized Array._makeMutableAndUnique()();
                                    uint64_t v185 = v277;
                                    unint64_t v186 = specialized Array._checkSubscript_mutating(_:)(v275, v277);
                                    *(_WORD *)(v185 + 2 * v275 + 32) = 1;
                                    destructiveProjectEnumData for PredicateCodableError(v186, v187);
                                    ++v275;
                                  }
                                  goto LABEL_234;
                                }
LABEL_331:
                                __break(1u);
LABEL_332:
                                __break(1u);
LABEL_333:
                                __break(1u);
LABEL_334:
                                __break(1u);
LABEL_335:
                                __break(1u);
LABEL_336:
                                __break(1u);
LABEL_337:
                                __break(1u);
                                goto LABEL_338;
                              }
LABEL_330:
                              __break(1u);
                              goto LABEL_331;
                            }
                            __int16 v244 = v14;
                            uint64_t v104 = v21;
                            unint64_t v105 = v19 | (v20 << 32) | (v21 << 48);
                            __int16 v242 = v23;
                            uint64_t v243 = a3;
                            int v106 = v22;
                            unint64_t v249 = v22 | (v23 << 16) | (v14 << 32) | (a3 << 48);
                            unint64_t v250 = v105;
                            unsigned int v248 = v32 | (v261 << 16);
                            NSDecimal.asVariableLengthInteger()(v105, v249, v248);
                            uint64_t v108 = v107;
                            __int16 v109 = v26;
                            unint64_t v246 = v251 | (v275 << 16) | (v271 << 32) | (v268 << 48);
                            unint64_t v247 = v258 | (v255 << 32) | (v26 << 48);
                            unsigned int v245 = v265 | (v263 << 16);
                            NSDecimal.asVariableLengthInteger()(v247, v246, v245);
                            uint64_t v111 = v110;
                            unint64_t v112 = *(void *)(v108 + 16);
                            unint64_t v113 = *(void *)(v110 + 16);
                            if (v113 < v112)
                            {
                              __int16 v241 = v32;
                              int v240 = v19;
                              uint64_t v79 = v104;
                              LODWORD(v77) = v106;
                              uint64_t v41 = v252;
                              goto LABEL_98;
                            }
                            if (v112 < v113)
                            {
                              __int16 v124 = v109;
                              goto LABEL_113;
                            }
                            __int16 v241 = v32;
                            if (v112)
                            {
                              int v240 = v19;
                              specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v112 - 1, 1, v108);
                              unsigned int v149 = *(unsigned __int16 *)(v108 + 2 * (v112 - 1) + 32);
                              specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v112 - 1, 1, v111);
                              unsigned int v150 = *(unsigned __int16 *)(v111 + 2 * (v112 - 1) + 32);
                              if (v150 >= v149)
                              {
                                __int16 v124 = v109;
                                if (v149 < v150)
                                {
LABEL_113:
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  NSDecimal.asVariableLengthInteger()(v247, v246, v245);
                                  uint64_t v126 = v125;
                                  NSDecimal.asVariableLengthInteger()(v250, v249, v248);
                                  uint64_t v128 = specialized static NSDecimal._integerSubtract(term:subtrahend:maxResultLength:)(v126, v127, 8);
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  unint64_t v129 = specialized Array._getCount()(v128);
                                  if ((v129 & 0x8000000000000000) != 0 || HIDWORD(v129)) {
                                    goto LABEL_354;
                                  }
                                  _So9NSDecimala__length_setter(v129, v279);
                                  LODWORD(v277) = v258;
                                  WORD2(v277) = v255;
                                  WORD3(v277) = v124;
                                  WORD4(v277) = v251;
                                  WORD5(v277) = v275;
                                  WORD6(v277) = v271;
                                  HIWORD(v277) = v268;
                                  LOWORD(v278) = v265;
                                  HIWORD(v278) = v263;
                                  uint64_t v130 = _So9NSDecimala__isNegative_getter(&v277);
                                  _So9NSDecimala__isNegative_setter(v130, v279);
                                  NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v128);
                                  __int16 v18 = v131;
                                  goto LABEL_304;
                                }
                                uint64_t v41 = v252;
                                uint64_t v79 = v104;
                                while (1)
                                {
                                  if (v112 == 1) {
                                    goto LABEL_321;
                                  }
                                  unint64_t v191 = v112 - 2;
                                  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v112 - 2, 1, v108);
                                  uint64_t v192 = 2 * v112;
                                  unsigned int v193 = *(unsigned __int16 *)(v108 + v192 + 28);
                                  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v191, 1, v111);
                                  unsigned int v194 = *(unsigned __int16 *)(v111 + v192 + 28);
                                  if (v194 < v193) {
                                    break;
                                  }
                                  unint64_t v112 = v191 + 1;
                                  if (v193 < v194) {
                                    goto LABEL_113;
                                  }
                                }
                                LODWORD(v77) = v106;
                              }
                              else
                              {
                                LODWORD(v77) = v106;
                                uint64_t v41 = v252;
                                uint64_t v79 = v104;
                              }
LABEL_98:
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              NSDecimal.asVariableLengthInteger()(v250, v249, v248);
                              unint64_t v34 = v114;
                              NSDecimal.asVariableLengthInteger()(v247, v246, v245);
                              uint64_t v40 = v115;
                              uint64_t v116 = static Array._allocateBufferUninitialized(minimumCapacity:)();
                              uint64_t v84 = v116;
                              *(void *)(v116 + 32) = 0;
                              uint64_t v90 = v116 + 32;
                              *(void *)(v116 + 16) = 8;
                              *(void *)(v116 + 40) = 0;
                              unint64_t v93 = *(void *)(v34 + 16);
                              unint64_t v89 = *(void *)(v40 + 16);
                              if (v89 >= v93) {
                                uint64_t v117 = *(void *)(v34 + 16);
                              }
                              else {
                                uint64_t v117 = *(void *)(v40 + 16);
                              }
                              if (v117)
                              {
                                uint64_t v94 = v34 + 32;
                                unsigned int v118 = (*(unsigned __int16 *)(v34 + 32) | 0x10000) - *(unsigned __int16 *)(v40 + 32);
                                LODWORD(v92) = HIWORD(v118);
                                *(_WORD *)uint64_t v90 = *(_WORD *)(v34 + 32) - *(_WORD *)(v40 + 32);
                                unint64_t v91 = v117 - 1;
                                uint64_t v15 = v243;
                                LOWORD(v83) = v244;
                                if (!v91)
                                {
                                  unint64_t v119 = 1;
                                  goto LABEL_276;
                                }
                                unsigned int v118 = v92 + *(unsigned __int16 *)(v34 + 34) - *(unsigned __int16 *)(v40 + 34) + 0xFFFF;
                                LODWORD(v92) = HIWORD(v118);
                                *(_WORD *)(v116 + 34) = v118;
                                if (v91 == 1)
                                {
                                  unint64_t v119 = 2;
                                  goto LABEL_276;
                                }
                                unsigned int v86 = *(unsigned __int16 *)(v40 + 36);
                                unsigned int v118 = v92 + *(unsigned __int16 *)(v34 + 36) - v86 + 0xFFFF;
                                LODWORD(v92) = HIWORD(v118);
                                *(_WORD *)(v116 + 36) = v118;
                                if (v91 == 2)
                                {
                                  unint64_t v119 = 3;
                                  goto LABEL_276;
                                }
                                unsigned int v118 = v92 + *(unsigned __int16 *)(v34 + 38) - *(unsigned __int16 *)(v40 + 38) + 0xFFFF;
                                LODWORD(v92) = HIWORD(v118);
                                *(_WORD *)(v116 + 38) = v118;
                                if (v91 == 3)
                                {
                                  unint64_t v119 = 4;
                                  goto LABEL_276;
                                }
                                unsigned int v86 = *(unsigned __int16 *)(v40 + 40);
                                unsigned int v118 = v92 + *(unsigned __int16 *)(v34 + 40) - v86 + 0xFFFF;
                                LODWORD(v92) = HIWORD(v118);
                                *(_WORD *)(v116 + 40) = v118;
                                if (v91 == 4)
                                {
                                  unint64_t v119 = 5;
                                  goto LABEL_276;
                                }
                                goto LABEL_262;
                              }
                              uint64_t v15 = v243;
                              LOWORD(v83) = v244;
                              if (v93)
                              {
                                unint64_t v119 = 0;
                                goto LABEL_281;
                              }
                              if (v89)
                              {
                                unint64_t v119 = 0;
                                LODWORD(v92) = 1;
                                goto LABEL_289;
                              }
                              uint64_t v230 = 8;
LABEL_298:
                              if (!*(_WORD *)(v90 + 2 * v230 - 2))
                              {
                                do
                                {
                                  *(void *)(v84 + 16) = v230 - 1;
                                  if (v230 == 1) {
                                    break;
                                  }
                                }
                                while (!*(unsigned __int16 *)(v84 + 28 + 2 * v230--));
                              }
LABEL_301:
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              unint64_t v236 = *(void *)(v84 + 16);
                              if (HIDWORD(v236)) {
                                goto LABEL_354;
                              }
                              _So9NSDecimala__length_setter(v236, v279);
                              LODWORD(v277) = v240;
                              WORD2(v277) = v20;
                              WORD3(v277) = v79;
                              WORD4(v277) = v77;
                              WORD5(v277) = v242;
                              WORD6(v277) = v83;
                              HIWORD(v277) = v15;
                              LOWORD(v278) = v241;
                              HIWORD(v278) = v261;
                              uint64_t v237 = _So9NSDecimala__isNegative_getter(&v277);
                              _So9NSDecimala__isNegative_setter(v237, v279);
                              goto LABEL_303;
                            }
LABEL_321:
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            LODWORD(a2) = 0;
                            LOWORD(v14) = 0;
                            LOWORD(v26) = 0;
                            LOWORD(a3) = 0;
                            LOWORD(v27) = 0;
                            LOWORD(v28) = 0;
                            LOWORD(v29) = 0;
                            __int16 v30 = 0;
                            LOWORD(v31) = 0;
                            goto LABEL_306;
                          }
LABEL_340:
                          __break(1u);
LABEL_341:
                          __break(1u);
                          goto LABEL_342;
                        }
                        __break(1u);
                        goto LABEL_340;
                      }
LABEL_329:
                      __break(1u);
                      goto LABEL_330;
                    }
LABEL_328:
                    __break(1u);
                    goto LABEL_329;
                  }
LABEL_317:
                  __break(1u);
LABEL_318:
                  __break(1u);
                  goto LABEL_319;
                }
LABEL_316:
                __break(1u);
                goto LABEL_317;
              }
LABEL_315:
              __break(1u);
              goto LABEL_316;
            }
LABEL_314:
            __break(1u);
            goto LABEL_315;
          }
          if (v136 < 0) {
            goto LABEL_335;
          }
          if ((unint64_t)v136 >= *(void *)(v15 + 16)) {
            goto LABEL_336;
          }
          *(_WORD *)(v90 + 2 * v136) = v92;
        }
        unint64_t v91 = v93;
        if ((void *)v93 == v41)
        {
          uint64_t v137 = *(void *)(v15 + 16);
          if (v137 && !*(_WORD *)(v90 + 2 * v137 - 2))
          {
            do
            {
              *(void *)(v15 + 16) = v137 - 1;
              if (v137 == 1) {
                break;
              }
            }
            while (!*(unsigned __int16 *)(v15 + 28 + 2 * v137--));
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v87._rawValue = (void *)v15;
LABEL_106:
          NSDecimal.copyVariableLengthInteger(_:)(v87);
          __int16 v18 = v120;
          if (v120) {
            goto LABEL_173;
          }
          unint64_t v121 = *((void *)v87._rawValue + 2);
          swift_bridgeObjectRelease();
          if (HIDWORD(v121)) {
            goto LABEL_354;
          }
          _So9NSDecimala__length_setter(v121, (_DWORD *)v20);
          *(_DWORD *)uint64_t v279 = *(_DWORD *)v73;
          *(_OWORD *)&v279[4] = *(long long *)((char *)v73 + 4);
          uint64_t v122 = _So9NSDecimala__exponent_getter(v279);
          _So9NSDecimala__exponent_setter(v122, (unsigned char *)v20);
          unint64_t v123 = (_DWORD *)v20;
LABEL_110:
          _So9NSDecimala__isCompact_setter_0(0, v123);
          goto LABEL_7;
        }
        continue;
      }
      goto LABEL_124;
    }
    break;
  }
  if ((v134 & 0x8000000000000000) == 0)
  {
    if ((unint64_t)v134 >= *(void *)(v15 + 16)) {
      goto LABEL_272;
    }
    uint64_t v135 = 2 * v134;
    unsigned int v86 = *(unsigned __int16 *)(v34 + 2 * v94 + 32);
    unsigned int v85 = v92 + *(unsigned __int16 *)(v90 + v135) + v86 * *(unsigned __int16 *)(v89 + 2 * v91);
    LODWORD(v92) = HIWORD(v85);
    *(_WORD *)(v90 + v135) = v85;
    goto LABEL_123;
  }
  __break(1u);
LABEL_272:
  __break(1u);
LABEL_273:
  __break(1u);
LABEL_274:
  int v231 = v92 + *(unsigned __int16 *)(v34 + 46) - *(unsigned __int16 *)(v40 + 46);
  unsigned int v118 = v231 + 0xFFFF;
  *(_WORD *)(v84 + 46) = v231 - 1;
  if (v91 == 7)
  {
    LODWORD(v92) = HIWORD(v118);
    unint64_t v119 = 8;
    goto LABEL_276;
  }
LABEL_351:
  __break(1u);
LABEL_354:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_355:
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  swift_allocError();
  *long long v239 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
}

unint64_t specialized static NSDecimal.- infix(_:_:)(unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  __int16 v6 = a6;
  __int16 v7 = a5;
  unsigned int v8 = a4;
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  unsigned int v138 = a4;
  unint64_t v9 = HIDWORD(a4);
  LOWORD(v139) = WORD2(a4);
  unint64_t v10 = HIWORD(a4);
  WORD1(v139) = HIWORD(a4);
  HIDWORD(v139) = a5;
  unint64_t v11 = a5 >> 16;
  unint64_t v111 = HIDWORD(a1);
  unint64_t v113 = HIWORD(a1);
  unint64_t v12 = HIDWORD(a5);
  LOWORD(v140) = WORD2(a5);
  unsigned int v123 = a1;
  unint64_t v13 = HIWORD(a5);
  WORD1(v140) = HIWORD(a5);
  HIDWORD(v140) = a6;
  unsigned int v14 = HIWORD(a6);
  unint64_t v115 = a2 >> 16;
  unint64_t v117 = HIDWORD(a2);
  uint64_t v135 = a4;
  unint64_t v119 = HIWORD(a2);
  unint64_t v136 = a5;
  unsigned int v137 = a6;
  __int16 v121 = a2;
  if (_So9NSDecimala__length_getter(&v135))
  {
    LODWORD(v135) = v8;
    WORD2(v135) = v9;
    HIWORD(v135) = v10;
    LOWORD(v136) = v7;
    WORD1(v136) = v11;
    WORD2(v136) = v12;
    HIWORD(v136) = v13;
    LOWORD(v137) = v6;
    HIWORD(v137) = v14;
    int isNegative_getter = _So9NSDecimala__isNegative_getter(&v135);
    _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, &v138);
    unsigned int v8 = v138;
    LOWORD(v9) = v139;
    unint64_t v10 = WORD1(v139);
    __int16 v7 = WORD2(v139);
    LOWORD(v11) = HIWORD(v139);
    LOWORD(v12) = v140;
    LOWORD(v13) = WORD1(v140);
    __int16 v6 = WORD2(v140);
    __int16 v109 = HIWORD(v140);
  }
  else
  {
    __int16 v109 = v14;
  }
  LODWORD(v135) = v123;
  WORD2(v135) = v111;
  HIWORD(v135) = v113;
  LOWORD(v136) = v121;
  WORD1(v136) = v115;
  WORD2(v136) = v117;
  HIWORD(v136) = v119;
  unsigned int v137 = a3;
  if (!_So9NSDecimala__length_getter(&v135))
  {
    LODWORD(v135) = v123;
    WORD2(v135) = v111;
    HIWORD(v135) = v113;
    LOWORD(v136) = v121;
    WORD1(v136) = v115;
    WORD2(v136) = v117;
    HIWORD(v136) = v119;
    unsigned int v137 = a3;
    if (_So9NSDecimala__isNegative_getter(&v135)) {
      goto LABEL_20;
    }
  }
  LODWORD(v135) = v8;
  WORD2(v135) = v9;
  HIWORD(v135) = v10;
  LOWORD(v136) = v7;
  WORD1(v136) = v11;
  WORD2(v136) = v12;
  HIWORD(v136) = v13;
  LOWORD(v137) = v6;
  HIWORD(v137) = v109;
  if (!_So9NSDecimala__length_getter(&v135))
  {
    LODWORD(v135) = v8;
    WORD2(v135) = v9;
    HIWORD(v135) = v10;
    LOWORD(v136) = v7;
    WORD1(v136) = v11;
    WORD2(v136) = v12;
    HIWORD(v136) = v13;
    LOWORD(v137) = v6;
    HIWORD(v137) = v109;
    if (_So9NSDecimala__isNegative_getter(&v135)) {
      goto LABEL_20;
    }
  }
  LODWORD(v135) = v123;
  WORD2(v135) = v111;
  HIWORD(v135) = v113;
  LOWORD(v136) = v121;
  WORD1(v136) = v115;
  WORD2(v136) = v117;
  HIWORD(v136) = v119;
  unsigned int v137 = a3;
  if (!_So9NSDecimala__length_getter(&v135))
  {
    unsigned int v19 = v8;
    unsigned __int16 v20 = v9;
    unint64_t v21 = v10;
    return v19 | ((unint64_t)v20 << 32) | (v21 << 48);
  }
  LODWORD(v135) = v8;
  WORD2(v135) = v9;
  HIWORD(v135) = v10;
  LOWORD(v136) = v7;
  WORD1(v136) = v11;
  WORD2(v136) = v12;
  HIWORD(v136) = v13;
  LOWORD(v137) = v6;
  HIWORD(v137) = v109;
  if (!_So9NSDecimala__length_getter(&v135))
  {
    unsigned __int16 v20 = v111;
    unint64_t v21 = v113;
    unsigned int v19 = v123;
    return v19 | ((unint64_t)v20 << 32) | (v21 << 48);
  }
  LODWORD(v135) = v123;
  WORD2(v135) = v111;
  HIWORD(v135) = v113;
  LOWORD(v136) = v121;
  WORD1(v136) = v115;
  WORD2(v136) = v117;
  HIWORD(v136) = v119;
  unsigned int v137 = a3;
  LODWORD(v132) = v8;
  WORD2(v132) = v9;
  HIWORD(v132) = v10;
  LOWORD(v133) = v7;
  WORD1(v133) = v11;
  WORD2(v133) = v12;
  HIWORD(v133) = v13;
  LOWORD(v134) = v6;
  HIWORD(v134) = v109;
  specialized static NSDecimal._normalize(a:b:roundingMode:)((int *)&v135, (uint64_t)&v132);
  uint64_t v16 = WORD2(v135);
  unint64_t v17 = HIWORD(v135);
  uint64_t v110 = v135;
  uint64_t v129 = v135;
  uint64_t v120 = WORD1(v136);
  uint64_t v122 = (unsigned __int16)v136;
  unint64_t v130 = v136;
  uint64_t v116 = HIWORD(v136);
  uint64_t v118 = WORD2(v136);
  int v114 = (unsigned __int16)v137;
  unsigned int v131 = v137;
  int v112 = HIWORD(v137);
  int v18 = _So9NSDecimala__length_getter(&v129);
  unsigned int v19 = v132;
  unsigned __int16 v20 = WORD2(v132);
  unint64_t v21 = HIWORD(v132);
  uint64_t v22 = (unsigned __int16)v133;
  uint64_t v23 = WORD1(v133);
  uint64_t v24 = WORD2(v133);
  uint64_t v25 = HIWORD(v133);
  int v26 = (unsigned __int16)v134;
  int v27 = HIWORD(v134);
  if (v18)
  {
    uint64_t v124 = v132;
    uint64_t v129 = v132;
    unint64_t v130 = v133;
    unsigned int v131 = v134;
    uint64_t v108 = WORD2(v132);
    if (!_So9NSDecimala__length_getter(&v129))
    {
      unsigned int v19 = v110;
      unsigned __int16 v20 = v16;
      unint64_t v21 = v17;
      return v19 | ((unint64_t)v20 << 32) | (v21 << 48);
    }
    LODWORD(v129) = v110;
    WORD2(v129) = v16;
    HIWORD(v129) = v17;
    LOWORD(v130) = v122;
    WORD1(v130) = v120;
    WORD2(v130) = v118;
    HIWORD(v130) = v116;
    LOWORD(v131) = v114;
    HIWORD(v131) = v112;
    LODWORD(v126) = v110;
    WORD2(v126) = v16;
    HIWORD(v126) = v17;
    unint64_t v127 = __PAIR64__(__PAIR32__(v116, v118), __PAIR32__(v120, v122));
    LOWORD(v128) = v114;
    HIWORD(v128) = v112;
    unint64_t v106 = v17;
    uint64_t v28 = v16;
    int v29 = _So9NSDecimala__isNegative_getter(&v126);
    LODWORD(v126) = v124;
    WORD2(v126) = v108;
    HIWORD(v126) = v21;
    LOWORD(v127) = v22;
    WORD1(v127) = v23;
    WORD2(v127) = v24;
    HIWORD(v127) = v25;
    LOWORD(v128) = v26;
    HIWORD(v128) = v27;
    if (v29 == _So9NSDecimala__isNegative_getter(&v126))
    {
      LODWORD(v126) = v110;
      WORD2(v126) = v28;
      HIWORD(v126) = v106;
      LOWORD(v127) = v122;
      WORD1(v127) = v120;
      WORD2(v127) = v118;
      HIWORD(v127) = v116;
      LOWORD(v128) = v114;
      HIWORD(v128) = v112;
      uint64_t v30 = _So9NSDecimala__isNegative_getter(&v126);
      _So9NSDecimala__isNegative_setter(v30, &v129);
      NSDecimal.asVariableLengthInteger()(v110 | (v28 << 32) | (v106 << 48), v122 | (v120 << 16) | (v118 << 32) | (v116 << 48), v114 | (v112 << 16));
      uint64_t v32 = v31;
      NSDecimal.asVariableLengthInteger()(v124 | (v108 << 32) | (v21 << 48), v22 | (v23 << 16) | (v24 << 32) | (v25 << 48), v26 | (v27 << 16));
      uint64_t v35 = specialized static NSDecimal._integerAdd(lhs:rhs:maxResultLength:)(v32, v33, 9, v34);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v36 = *(void *)(v35 + 16);
      if (v36 <= 8)
      {
        v38._rawValue = (void *)v35;
LABEL_30:
        _So9NSDecimala__length_setter(v36, &v129);
        NSDecimal.copyVariableLengthInteger(_:)(v38);
        uint64_t v50 = v56;
        swift_bridgeObjectRelease();
        if (v56) {
          goto LABEL_21;
        }
        goto LABEL_147;
      }
      specialized static NSDecimal._fitMantissa(_:roundingMode:)(v35, 0);
      v38._rawValue = v37;
      uint64_t v40 = v39;
      swift_bridgeObjectRelease();
      int v41 = v129;
      __int16 v42 = WORD2(v129);
      __int16 v43 = HIWORD(v129);
      __int16 v44 = v130;
      __int16 v45 = WORD1(v130);
      __int16 v46 = WORD2(v130);
      __int16 v47 = HIWORD(v130);
      __int16 v48 = v131;
      uint64_t v126 = v129;
      unint64_t v127 = v130;
      unsigned int v128 = v131;
      __int16 v125 = HIWORD(v131);
      int v49 = _So9NSDecimala__exponent_getter((char *)&v126);
      if (v40 >= (uint64_t)0xFFFFFFFF80000000)
      {
        if (v40 <= 0x7FFFFFFF)
        {
          if (!__OFADD__(v49, v40))
          {
            if (v49 + (int)v40 > 127)
            {
              swift_bridgeObjectRelease();
LABEL_20:
              lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
              uint64_t v50 = (void *)swift_allocError();
              *unint64_t v51 = 0;
              swift_willThrow();
              goto LABEL_21;
            }
            LODWORD(v126) = v41;
            WORD2(v126) = v42;
            HIWORD(v126) = v43;
            LOWORD(v127) = v44;
            WORD1(v127) = v45;
            WORD2(v127) = v46;
            HIWORD(v127) = v47;
            LOWORD(v128) = v48;
            HIWORD(v128) = v125;
            int v79 = _So9NSDecimala__exponent_getter((char *)&v126);
            BOOL v80 = __OFADD__(v79, v40);
            uint64_t v81 = (v79 + v40);
            if (!v80)
            {
              _So9NSDecimala__exponent_setter(v81, &v129);
              unint64_t v36 = *((void *)v38._rawValue + 2);
              if (HIDWORD(v36)) {
                goto LABEL_161;
              }
              goto LABEL_30;
            }
            __break(1u);
            goto LABEL_159;
          }
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
        }
LABEL_154:
        __break(1u);
        goto LABEL_155;
      }
LABEL_153:
      __break(1u);
      goto LABEL_154;
    }
    __int16 v99 = v28;
    unint64_t v100 = v110 | (v28 << 32) | (v106 << 48);
    unint64_t v105 = v122 | (v120 << 16) | (v118 << 32) | (v116 << 48);
    unsigned int v104 = v114 | (v112 << 16);
    NSDecimal.asVariableLengthInteger()(v100, v105, v104);
    uint64_t v54 = v53;
    unint64_t v102 = v22 | (v23 << 16) | (v24 << 32) | (v25 << 48);
    unint64_t v103 = v124 | (v108 << 32) | (v21 << 48);
    unsigned int v101 = v26 | (v27 << 16);
    NSDecimal.asVariableLengthInteger()(v103, v102, v101);
    uint64_t v40 = specialized static NSDecimal._integerCompare(lhs:rhs:)(v54, v55);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v40 != -1)
    {
      if (!v40)
      {
        unsigned int v19 = 0;
        unsigned __int16 v20 = 0;
        unint64_t v21 = 0;
        return v19 | ((unint64_t)v20 << 32) | (v21 << 48);
      }
      if (v40 != 1)
      {
LABEL_162:
        type metadata accessor for NSComparisonResult(0);
        uint64_t v126 = v40;
        _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
        __break(1u);
        JUMPOUT(0x181BC4E64);
      }
      LOWORD(v25) = v106;
      NSDecimal.asVariableLengthInteger()(v100, v105, v104);
      uint64_t v40 = v71;
      NSDecimal.asVariableLengthInteger()(v103, v102, v101);
      uint64_t v22 = v72;
      uint64_t v73 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v73 + 32) = 0;
      uint64_t v62 = (_WORD *)(v73 + 32);
      *(void *)(v73 + 16) = 8;
      v63._rawValue = (void *)v73;
      *(void *)(v73 + 40) = 0;
      unint64_t v64 = *(void *)(v40 + 16);
      unint64_t v65 = *(void *)(v22 + 16);
      if (v65 >= v64) {
        uint64_t v74 = *(void *)(v40 + 16);
      }
      else {
        uint64_t v74 = *(void *)(v22 + 16);
      }
      if (v74)
      {
        uint64_t v75 = v40 + 32;
        unsigned int v76 = (*(unsigned __int16 *)(v40 + 32) | 0x10000) - *(unsigned __int16 *)(v22 + 32);
        LODWORD(v77) = HIWORD(v76);
        *uint64_t v62 = *(_WORD *)(v40 + 32) - *(_WORD *)(v22 + 32);
        unint64_t v70 = v74 - 1;
        if (!v70)
        {
          unint64_t v78 = 1;
          goto LABEL_116;
        }
        unsigned int v76 = v77 + *(unsigned __int16 *)(v40 + 34) - *(unsigned __int16 *)(v22 + 34) + 0xFFFF;
        LODWORD(v77) = HIWORD(v76);
        *(_WORD *)(v73 + 34) = v76;
        if (v70 == 1)
        {
          unint64_t v78 = 2;
          goto LABEL_116;
        }
        unsigned int v61 = *(unsigned __int16 *)(v22 + 36);
        unsigned int v76 = v77 + *(unsigned __int16 *)(v40 + 36) - v61 + 0xFFFF;
        LODWORD(v77) = HIWORD(v76);
        *(_WORD *)(v73 + 36) = v76;
        if (v70 == 2)
        {
          unint64_t v78 = 3;
          goto LABEL_116;
        }
        unsigned int v76 = v77 + *(unsigned __int16 *)(v40 + 38) - *(unsigned __int16 *)(v22 + 38) + 0xFFFF;
        LODWORD(v77) = HIWORD(v76);
        *(_WORD *)(v73 + 38) = v76;
        if (v70 == 3)
        {
          unint64_t v78 = 4;
          goto LABEL_116;
        }
        unsigned int v61 = *(unsigned __int16 *)(v22 + 40);
        unsigned int v76 = v77 + *(unsigned __int16 *)(v40 + 40) - v61 + 0xFFFF;
        LODWORD(v77) = HIWORD(v76);
        *(_WORD *)(v73 + 40) = v76;
        if (v70 == 4)
        {
          unint64_t v78 = 5;
          goto LABEL_116;
        }
        unsigned int v76 = v77 + *(unsigned __int16 *)(v40 + 42) - *(unsigned __int16 *)(v22 + 42) + 0xFFFF;
        LODWORD(v77) = HIWORD(v76);
        *(_WORD *)(v73 + 42) = v76;
        if (v70 == 5)
        {
          unint64_t v78 = 6;
          goto LABEL_116;
        }
        unsigned int v61 = *(unsigned __int16 *)(v22 + 44);
        unsigned int v76 = v77 + *(unsigned __int16 *)(v40 + 44) - v61 + 0xFFFF;
        LODWORD(v77) = HIWORD(v76);
        *(_WORD *)(v73 + 44) = v76;
        if (v70 == 6)
        {
          unint64_t v78 = 7;
          goto LABEL_116;
        }
LABEL_114:
        int v90 = v77 + *(unsigned __int16 *)(v40 + 46) - *(unsigned __int16 *)(v22 + 46);
        unsigned int v76 = v90 + 0xFFFF;
        *((_WORD *)v63._rawValue + 23) = v90 - 1;
        if (v70 != 7)
        {
LABEL_160:
          __break(1u);
          swift_unexpectedError();
          __break(1u);
LABEL_161:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          goto LABEL_162;
        }
        LODWORD(v77) = HIWORD(v76);
        unint64_t v78 = 8;
LABEL_116:
        if (v78 >= v64) {
          goto LABEL_128;
        }
        if (!HIWORD(v76))
        {
          while (v78 < *((void *)v63._rawValue + 2))
          {
            int v91 = *(unsigned __int16 *)(v75 + 2 * v78);
            unsigned int v61 = v91 + 0xFFFF;
            v62[v78] = v91 - 1;
            if (v64 - 1 == v78) {
              goto LABEL_135;
            }
            ++v78;
            if (v91) {
              goto LABEL_121;
            }
          }
          goto LABEL_152;
        }
        goto LABEL_121;
      }
      if (v64)
      {
        unint64_t v78 = 0;
LABEL_121:
        if (v78 <= v64) {
          unint64_t v92 = v64;
        }
        else {
          unint64_t v92 = v78;
        }
        while (v92 != v78)
        {
          if (v78 >= *((void *)v63._rawValue + 2)) {
            goto LABEL_150;
          }
          v62[v78] = *(_WORD *)(v40 + 32 + 2 * v78);
          if ((uint64_t)++v78 >= (uint64_t)v64)
          {
            LODWORD(v77) = 1;
LABEL_128:
            if ((uint64_t)v78 < (uint64_t)v65)
            {
              while (1)
              {
LABEL_129:
                if (v78 >= v65) {
                  goto LABEL_157;
                }
                unint64_t v64 = *((void *)v63._rawValue + 2);
                if (v78 < v64) {
                  break;
                }
LABEL_134:
                __break(1u);
LABEL_135:
                LODWORD(v77) = HIWORD(v61);
                unint64_t v78 = v64;
                if ((uint64_t)v64 >= (uint64_t)v65) {
                  goto LABEL_136;
                }
              }
              unsigned int v93 = v77 + (*(unsigned __int16 *)(v22 + 32 + 2 * v78) ^ 0xFFFF);
              --v65;
              unint64_t v64 = v22 + 34;
              while (1)
              {
                LODWORD(v77) = HIWORD(v93);
                v62[v78] = v93;
                if (v65 == v78) {
                  break;
                }
                unsigned int v93 = v77 + (*(unsigned __int16 *)(v64 + 2 * v78++) ^ 0xFFFF);
                if (v78 >= *((void *)v63._rawValue + 2)) {
                  goto LABEL_134;
                }
              }
            }
LABEL_136:
            if (v77)
            {
              uint64_t v83 = *((void *)v63._rawValue + 2);
              if (v83) {
                goto LABEL_138;
              }
              goto LABEL_141;
            }
            swift_bridgeObjectRelease();
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            uint64_t v50 = (void *)swift_allocError();
            *uint64_t v98 = 0;
            swift_willThrow();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_21:
            uint64_t v139 = 0;
            uint64_t v140 = 0;
            _So9NSDecimala__exponent_setter(0, &v138);
            _So9NSDecimala__length_setter(0, &v138);
            _So9NSDecimala__isNegative_setter(1, &v138);
            _So9NSDecimala__isCompact_setter_0(0, &v138);
            _So9NSDecimala__reserved_setter(&v138);

            unsigned int v19 = v138;
            unsigned __int16 v20 = v139;
            unint64_t v21 = WORD1(v139);
            return v19 | ((unint64_t)v20 << 32) | (v21 << 48);
          }
        }
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
        goto LABEL_153;
      }
      if (v65)
      {
        unint64_t v78 = 0;
        LODWORD(v77) = 1;
        goto LABEL_129;
      }
      uint64_t v83 = 8;
LABEL_138:
      if (!v62[v83 - 1])
      {
        do
        {
          *((void *)v63._rawValue + 2) = v83 - 1;
          if (v83 == 1) {
            break;
          }
        }
        while (!*((unsigned __int16 *)v63._rawValue + v83-- + 14));
      }
LABEL_141:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v95 = *((void *)v63._rawValue + 2);
      if (HIDWORD(v95)) {
        goto LABEL_161;
      }
      _So9NSDecimala__length_setter(v95, &v129);
      LODWORD(v126) = v110;
      WORD2(v126) = v99;
      HIWORD(v126) = v25;
      LOWORD(v127) = v122;
      WORD1(v127) = v120;
      WORD2(v127) = v118;
      HIWORD(v127) = v116;
      LOWORD(v128) = v114;
      HIWORD(v128) = v112;
LABEL_143:
      uint64_t v96 = _So9NSDecimala__isNegative_getter(&v126);
      _So9NSDecimala__isNegative_setter(v96, &v129);
      NSDecimal.copyVariableLengthInteger(_:)(v63);
      if (v97)
      {
        uint64_t v50 = v97;
        goto LABEL_145;
      }
      swift_bridgeObjectRelease();
LABEL_147:
      _So9NSDecimala__isCompact_setter_0(0, &v129);
      NSDecimal.compact()();
      unsigned int v19 = v129;
      unsigned __int16 v20 = WORD2(v129);
      unint64_t v21 = HIWORD(v129);
      return v19 | ((unint64_t)v20 << 32) | (v21 << 48);
    }
    NSDecimal.asVariableLengthInteger()(v103, v102, v101);
    uint64_t v58 = v57;
    NSDecimal.asVariableLengthInteger()(v100, v105, v104);
    uint64_t v40 = v59;
    uint64_t v60 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v60 + 32) = 0;
    uint64_t v62 = (_WORD *)(v60 + 32);
    *(void *)(v60 + 16) = 8;
    v63._rawValue = (void *)v60;
    *(void *)(v60 + 40) = 0;
    unint64_t v64 = *(void *)(v58 + 16);
    unint64_t v65 = *(void *)(v40 + 16);
    if (v65 >= v64) {
      uint64_t v66 = *(void *)(v58 + 16);
    }
    else {
      uint64_t v66 = *(void *)(v40 + 16);
    }
    if (v66)
    {
      unsigned int v67 = (*(unsigned __int16 *)(v58 + 32) | 0x10000) - *(unsigned __int16 *)(v40 + 32);
      int v68 = HIWORD(v67);
      *uint64_t v62 = *(_WORD *)(v58 + 32) - *(_WORD *)(v40 + 32);
      uint64_t v69 = v66 - 1;
      if (v69)
      {
        unsigned int v67 = v68 + *(unsigned __int16 *)(v58 + 34) - *(unsigned __int16 *)(v40 + 34) + 0xFFFF;
        int v68 = HIWORD(v67);
        *(_WORD *)(v60 + 34) = v67;
        if (v69 == 1)
        {
          unint64_t v70 = 2;
        }
        else
        {
          unsigned int v61 = *(unsigned __int16 *)(v40 + 36);
          unsigned int v67 = v68 + *(unsigned __int16 *)(v58 + 36) - v61 + 0xFFFF;
          int v68 = HIWORD(v67);
          *(_WORD *)(v60 + 36) = v67;
          if (v69 == 2)
          {
            unint64_t v70 = 3;
          }
          else
          {
            unsigned int v67 = v68 + *(unsigned __int16 *)(v58 + 38) - *(unsigned __int16 *)(v40 + 38) + 0xFFFF;
            int v68 = HIWORD(v67);
            *(_WORD *)(v60 + 38) = v67;
            if (v69 == 3)
            {
              unint64_t v70 = 4;
            }
            else
            {
              unsigned int v61 = *(unsigned __int16 *)(v40 + 40);
              unsigned int v67 = v68 + *(unsigned __int16 *)(v58 + 40) - v61 + 0xFFFF;
              int v68 = HIWORD(v67);
              *(_WORD *)(v60 + 40) = v67;
              if (v69 == 4)
              {
                unint64_t v70 = 5;
              }
              else
              {
                unsigned int v67 = v68 + *(unsigned __int16 *)(v58 + 42) - *(unsigned __int16 *)(v40 + 42) + 0xFFFF;
                int v68 = HIWORD(v67);
                *(_WORD *)(v60 + 42) = v67;
                if (v69 == 5)
                {
                  unint64_t v70 = 6;
                }
                else
                {
                  unsigned int v61 = *(unsigned __int16 *)(v40 + 44);
                  unsigned int v67 = v68 + *(unsigned __int16 *)(v58 + 44) - v61 + 0xFFFF;
                  int v68 = HIWORD(v67);
                  *(_WORD *)(v60 + 44) = v67;
                  if (v69 == 6)
                  {
                    unint64_t v70 = 7;
                  }
                  else
                  {
                    int v84 = v68 + *(unsigned __int16 *)(v58 + 46) - *(unsigned __int16 *)(v40 + 46);
                    unsigned int v67 = v84 + 0xFFFF;
                    *(_WORD *)(v60 + 46) = v84 - 1;
                    if (v69 != 7)
                    {
LABEL_159:
                      __break(1u);
                      goto LABEL_160;
                    }
                    unsigned int v61 = v58;
                    int v68 = HIWORD(v67);
                    unint64_t v70 = 8;
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        unint64_t v70 = 1;
      }
      if (v70 >= v64) {
        goto LABEL_96;
      }
      if (!HIWORD(v67))
      {
        while (v70 < *(void *)(v60 + 16))
        {
          int v85 = *(unsigned __int16 *)(v58 + 32 + 2 * v70);
          unsigned int v61 = v85 + 0xFFFF;
          v62[v70] = v85 - 1;
          if (v64 - 1 == v70) {
            goto LABEL_103;
          }
          ++v70;
          if (v85) {
            goto LABEL_89;
          }
        }
        goto LABEL_151;
      }
    }
    else
    {
      if (!v64)
      {
        if (v65)
        {
          unint64_t v70 = 0;
          int v68 = 1;
          goto LABEL_97;
        }
        uint64_t v82 = 8;
LABEL_106:
        if (!v62[v82 - 1])
        {
          do
          {
            *(void *)(v60 + 16) = v82 - 1;
            if (v82 == 1) {
              break;
            }
          }
          while (!*(unsigned __int16 *)(v60 + 28 + 2 * v82--));
        }
LABEL_109:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v88 = *((void *)v63._rawValue + 2);
        if (HIDWORD(v88)) {
          goto LABEL_161;
        }
        _So9NSDecimala__length_setter(v88, &v129);
        LODWORD(v126) = v124;
        WORD2(v126) = v108;
        HIWORD(v126) = v21;
        LOWORD(v127) = v22;
        WORD1(v127) = v23;
        WORD2(v127) = v24;
        HIWORD(v127) = v25;
        LOWORD(v128) = v26;
        HIWORD(v128) = v27;
        goto LABEL_143;
      }
      unint64_t v70 = 0;
    }
LABEL_89:
    uint64_t v75 = v58 + 32;
    if (v70 <= v64) {
      unint64_t v77 = v64;
    }
    else {
      unint64_t v77 = v70;
    }
    while (v77 != v70)
    {
      if (v70 >= *(void *)(v60 + 16)) {
        goto LABEL_113;
      }
      v62[v70] = *(_WORD *)(v75 + 2 * v70);
      if ((uint64_t)++v70 >= (uint64_t)v64)
      {
        int v68 = 1;
LABEL_96:
        if ((uint64_t)v70 < (uint64_t)v65)
        {
          while (1)
          {
LABEL_97:
            if (v70 >= v65) {
              goto LABEL_156;
            }
            unint64_t v64 = *(void *)(v60 + 16);
            if (v70 < v64) {
              break;
            }
LABEL_102:
            __break(1u);
LABEL_103:
            int v68 = HIWORD(v61);
            unint64_t v70 = v64;
            if ((uint64_t)v64 >= (uint64_t)v65) {
              goto LABEL_104;
            }
          }
          unsigned int v86 = v68 + (*(unsigned __int16 *)(v40 + 32 + 2 * v70) ^ 0xFFFF);
          --v65;
          unint64_t v64 = v40 + 34;
          while (1)
          {
            int v68 = HIWORD(v86);
            v62[v70] = v86;
            if (v65 == v70) {
              break;
            }
            unsigned int v86 = v68 + (*(unsigned __int16 *)(v64 + 2 * v70++) ^ 0xFFFF);
            if (v70 >= *(void *)(v60 + 16)) {
              goto LABEL_102;
            }
          }
        }
LABEL_104:
        if (v68)
        {
          uint64_t v82 = *(void *)(v60 + 16);
          if (v82) {
            goto LABEL_106;
          }
          goto LABEL_109;
        }
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
        uint64_t v50 = (void *)swift_allocError();
        unsigned char *v89 = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
LABEL_145:
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_113:
    __break(1u);
    goto LABEL_114;
  }
  return v19 | ((unint64_t)v20 << 32) | (v21 << 48);
}

uint64_t specialized static NSDecimal.* infix(_:_:)(unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  v69[0] = a1;
  unint64_t v61 = HIDWORD(a1);
  unint64_t v57 = HIWORD(a1);
  v69[1] = a2;
  unint64_t v9 = a2 >> 16;
  unint64_t v58 = HIDWORD(a2);
  unint64_t v60 = HIWORD(a2);
  LODWORD(v69[2]) = a3;
  unsigned int v59 = HIWORD(a3);
  if (!_So9NSDecimala__length_getter(v69))
  {
    LODWORD(v69[0]) = a1;
    WORD2(v69[0]) = v61;
    HIWORD(v69[0]) = v57;
    LOWORD(v69[1]) = a2;
    WORD1(v69[1]) = v9;
    WORD2(v69[1]) = v58;
    HIWORD(v69[1]) = v60;
    LOWORD(v69[2]) = a3;
    WORD1(v69[2]) = v59;
    if (_So9NSDecimala__isNegative_getter(v69)) {
      goto LABEL_16;
    }
  }
  v69[0] = a4;
  v69[1] = a5;
  LODWORD(v69[2]) = a6;
  if (!_So9NSDecimala__length_getter(v69))
  {
    v69[0] = a4;
    v69[1] = a5;
    LODWORD(v69[2]) = a6;
    if (_So9NSDecimala__isNegative_getter(v69))
    {
LABEL_16:
      lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
      uint64_t v22 = (void *)swift_allocError();
      *uint64_t v23 = 0;
      swift_willThrow();
LABEL_17:
      *(void *)((char *)&v69[1] + 4) = 0;
      *(void *)((char *)v69 + 4) = 0;
      _So9NSDecimala__exponent_setter(0, v69);
      _So9NSDecimala__length_setter(0, v69);
      _So9NSDecimala__isNegative_setter(1, v69);
      _So9NSDecimala__isCompact_setter_0(0, v69);
      _So9NSDecimala__reserved_setter(v69);

LABEL_18:
      unsigned int v19 = v69[0];
      uint64_t v20 = WORD2(v69[0]);
      uint64_t v21 = HIWORD(v69[0]);
      return v19 | (unint64_t)(v20 << 32) | (v21 << 48);
    }
  }
  unint64_t v53 = HIWORD(a4);
  int v56 = a4;
  unint64_t v54 = HIDWORD(a4);
  __int16 v55 = HIWORD(a6);
  LODWORD(v69[0]) = a1;
  WORD2(v69[0]) = v61;
  HIWORD(v69[0]) = v57;
  LOWORD(v69[1]) = a2;
  WORD1(v69[1]) = v9;
  WORD2(v69[1]) = v58;
  HIWORD(v69[1]) = v60;
  LOWORD(v69[2]) = a3;
  WORD1(v69[2]) = v59;
  if (!_So9NSDecimala__length_getter(v69)
    || (v69[0] = a4, v69[1] = a5, __int16 v10 = a6, LODWORD(v69[2]) = a6, !_So9NSDecimala__length_getter(v69)))
  {
    unsigned int v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    return v19 | (unint64_t)(v20 << 32) | (v21 << 48);
  }
  __int16 v52 = v9;
  NSDecimal.asVariableLengthInteger()(a1, a2, a3);
  uint64_t v12 = v11;
  NSDecimal.asVariableLengthInteger()(a4, a5, a6);
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v12 + 16);
  if (v15)
  {
    uint64_t v16 = *(void *)(v13 + 16);
    if (v16)
    {
      uint64_t v17 = v15 + v16;
      if (__OFADD__(v15, v16)) {
        goto LABEL_67;
      }
      if (v17 > 15)
      {
        uint64_t v17 = 16;
        goto LABEL_29;
      }
      if ((v17 & 0x8000000000000000) == 0)
      {
        if (!v17)
        {
          uint64_t v18 = MEMORY[0x1E4FBC860];
          goto LABEL_30;
        }
LABEL_29:
        uint64_t v18 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v18 + 16) = v17;
        bzero((void *)(v18 + 32), 2 * v17);
LABEL_30:
        uint64_t v36 = 0;
        uint64_t v37 = v14 + 32;
        uint64_t v38 = v18 + 32;
LABEL_31:
        if (v36 == v16) {
          goto LABEL_66;
        }
        unsigned int v39 = 0;
        uint64_t v40 = 0;
        uint64_t v41 = v36 + 1;
        while (v15 != v40)
        {
          uint64_t v42 = v40 + v36;
          if (__OFADD__(v40, v36)) {
            goto LABEL_62;
          }
          if (v42 >= v17)
          {
            if (v39) {
              goto LABEL_57;
            }
            unsigned int v39 = *(unsigned __int16 *)(v37 + 2 * v36);
            if (*(_WORD *)(v37 + 2 * v36))
            {
              unsigned int v39 = *(unsigned __int16 *)(v12 + 2 * v40 + 32);
              if (*(_WORD *)(v12 + 2 * v40 + 32)) {
                goto LABEL_57;
              }
            }
          }
          else
          {
            if (v42 < 0)
            {
              __break(1u);
LABEL_65:
              __break(1u);
LABEL_66:
              __break(1u);
LABEL_67:
              __break(1u);
LABEL_68:
              __break(1u);
LABEL_69:
              __break(1u);
LABEL_70:
              __break(1u);
LABEL_71:
              __break(1u);
              goto LABEL_72;
            }
            if ((unint64_t)v42 >= *(void *)(v18 + 16)) {
              goto LABEL_65;
            }
            uint64_t v43 = 2 * v42;
            unsigned int v44 = v39
                + *(unsigned __int16 *)(v38 + v43)
                + *(unsigned __int16 *)(v12 + 2 * v40 + 32) * *(unsigned __int16 *)(v37 + 2 * v36);
            unsigned int v39 = HIWORD(v44);
            *(_WORD *)(v38 + v43) = v44;
          }
          if (v15 == ++v40)
          {
            if (v39)
            {
              BOOL v34 = __OFADD__(v15, v36);
              uint64_t v45 = v15 + v36;
              if (v34) {
                goto LABEL_68;
              }
              if (v45 >= v17)
              {
LABEL_57:
                lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
                uint64_t v22 = (void *)swift_allocError();
                *int v49 = 0;
                swift_willThrow();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_17;
              }
              if (v45 < 0) {
                goto LABEL_69;
              }
              if ((unint64_t)v45 >= *(void *)(v18 + 16)) {
                goto LABEL_70;
              }
              *(_WORD *)(v38 + 2 * v45) = v39;
            }
            uint64_t v36 = v41;
            if (v41 != v16) {
              goto LABEL_31;
            }
            uint64_t v46 = *(void *)(v18 + 16);
            uint64_t v51 = v18;
            if (v46 && !*(_WORD *)(v38 + 2 * v46 - 2))
            {
              uint64_t v47 = v46 + 14;
              do
              {
                *(void *)(v18 + 16) = v47 - 15;
                if (v47 == 15) {
                  break;
                }
              }
              while (!*(unsigned __int16 *)(v18 + 2 * v47--));
            }
LABEL_63:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_21;
          }
        }
        __break(1u);
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }
      goto LABEL_74;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v51 = MEMORY[0x1E4FBC860];
LABEL_21:
  memset(v69, 0, 20);
  LODWORD(v65) = a1;
  WORD2(v65) = v61;
  HIWORD(v65) = v57;
  LOWORD(v66) = a2;
  WORD1(v66) = v52;
  WORD2(v66) = v58;
  HIWORD(v66) = v60;
  __int16 v67 = a3;
  __int16 v68 = v59;
  int isNegative_getter = _So9NSDecimala__isNegative_getter(&v65);
  unint64_t v65 = a4;
  unint64_t v66 = a5;
  __int16 v67 = v10;
  __int16 v68 = v55;
  BOOL v26 = isNegative_getter != _So9NSDecimala__isNegative_getter(&v65);
  _So9NSDecimala__isNegative_setter(v26, v69);
  LODWORD(v65) = a1;
  WORD2(v65) = v61;
  HIWORD(v65) = v57;
  LOWORD(v66) = a2;
  WORD1(v66) = v52;
  WORD2(v66) = v58;
  HIWORD(v66) = v60;
  __int16 v67 = a3;
  __int16 v68 = v59;
  int v27 = _So9NSDecimala__exponent_getter((char *)&v65);
  LODWORD(v65) = v56;
  WORD2(v65) = v54;
  HIWORD(v65) = v53;
  unint64_t v66 = a5;
  __int16 v67 = v10;
  __int16 v68 = v55;
  uint64_t v28 = _So9NSDecimala__exponent_getter((char *)&v65) + v27;
  v29._rawValue = (void *)v51;
  if (*(void *)(v51 + 16) >= 9uLL)
  {
    specialized static NSDecimal._fitMantissa(_:roundingMode:)(v51, 0);
    uint64_t v31 = v30;
    uint64_t v33 = v32;
    swift_bridgeObjectRelease();
    if (v33 < (uint64_t)0xFFFFFFFF80000000) {
      goto LABEL_71;
    }
    if (v33 > 0x7FFFFFFF)
    {
LABEL_72:
      __break(1u);
    }
    else
    {
      BOOL v34 = __OFADD__(v28, v33);
      uint64_t v28 = (v28 + v33);
      if (!v34)
      {
        v29._rawValue = v31;
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_74:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_75;
  }
LABEL_26:
  NSDecimal.copyVariableLengthInteger(_:)(v29);
  if (v35)
  {
    uint64_t v22 = v35;
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  unint64_t v50 = *((void *)v29._rawValue + 2);
  swift_bridgeObjectRelease();
  if (!HIDWORD(v50))
  {
    _So9NSDecimala__length_setter(v50, v69);
    _So9NSDecimala__isCompact_setter_0(0, v69);
    if ((int)v28 < 128)
    {
      _So9NSDecimala__exponent_setter(v28, v69);
      NSDecimal.compact()();
      goto LABEL_18;
    }
    goto LABEL_16;
  }
LABEL_75:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized NSDecimal.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSDecimal.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  __int16 v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v29[0] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v29[0] = 1;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)();
    v29[0] = 2;
    int v9 = KeyedDecodingContainer.decode(_:forKey:)();
    v29[0] = 3;
    int v33 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v22) = 4;
    KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
    int v32 = v9;
    uint64_t v21 = v31;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    int v20 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v21 = v31;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    int v19 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v21 = v31;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    int v18 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v21 = v31;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    LODWORD(v21) = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v17 = v31;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    LODWORD(v17) = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v16 = v31;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    LODWORD(v16) = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v15 = v31;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    LODWORD(v15) = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    v14[1] = v31;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    __int16 v11 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v12 = v32 & 1;
    WORD2(v22) = v20;
    uint64_t v13 = v33 & 1;
    HIWORD(v22) = v19;
    __int16 v23 = v18;
    __int16 v24 = v21;
    __int16 v25 = v17;
    __int16 v26 = v16;
    __int16 v27 = v15;
    __int16 v28 = v11;
    _So9NSDecimala__exponent_setter(v7, &v22);
    _So9NSDecimala__length_setter(v8, &v22);
    _So9NSDecimala__isNegative_setter(v12, &v22);
    _So9NSDecimala__isCompact_setter_0(v13, &v22);
    _So9NSDecimala__reserved_setter(&v22);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    __int16 v6 = v22;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v6;
}

unint64_t lazy protocol witness table accessor for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys);
  }
  return result;
}

uint64_t specialized NSDecimal.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746E656E6F707865 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6874676E656CLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x69746167654E7369 && a2 == 0xEA00000000006576 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6361706D6F437369 && a2 == 0xE900000000000074 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x61737369746E616DLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

void specialized static NSDecimal.-= infix(_:_:)(int *a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  __int16 v4 = a4;
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  int v5 = *a1;
  __int16 v116 = *((_WORD *)a1 + 2);
  unint64_t v6 = HIDWORD(a2);
  unint64_t v7 = HIWORD(a2);
  __int16 v119 = *((_WORD *)a1 + 3);
  LODWORD(v8) = a2;
  unint64_t v9 = a3 >> 16;
  unint64_t v10 = HIDWORD(a3);
  unint64_t v11 = HIWORD(a3);
  __int16 v110 = *((_WORD *)a1 + 5);
  __int16 v12 = a3;
  unsigned int v13 = HIWORD(a4);
  __int16 v114 = *((_WORD *)a1 + 6);
  __int16 v112 = *((_WORD *)a1 + 7);
  __int16 v104 = *((_WORD *)a1 + 4);
  __int16 v106 = *((_WORD *)a1 + 8);
  __int16 v108 = *((_WORD *)a1 + 9);
  int v133 = a2;
  LOWORD(v134) = WORD2(a2);
  WORD1(v134) = HIWORD(a2);
  HIDWORD(v134) = a3;
  LOWORD(v135) = WORD2(a3);
  WORD1(v135) = HIWORD(a3);
  HIDWORD(v135) = a4;
  unint64_t v130 = a2;
  unint64_t v131 = a3;
  unsigned int v132 = a4;
  if (_So9NSDecimala__length_getter(&v130))
  {
    LODWORD(v130) = v8;
    WORD2(v130) = v6;
    HIWORD(v130) = v7;
    LOWORD(v131) = v12;
    WORD1(v131) = v9;
    WORD2(v131) = v10;
    HIWORD(v131) = v11;
    LOWORD(v132) = v4;
    HIWORD(v132) = v13;
    int isNegative_getter = _So9NSDecimala__isNegative_getter(&v130);
    _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, &v133);
    LODWORD(v8) = v133;
    LOWORD(v6) = v134;
    LOWORD(v7) = WORD1(v134);
    __int16 v12 = WORD2(v134);
    LOWORD(v9) = HIWORD(v134);
    LOWORD(v10) = v135;
    LOWORD(v11) = WORD1(v135);
    __int16 v4 = WORD2(v135);
    LOWORD(v13) = HIWORD(v135);
  }
  LODWORD(v130) = v5;
  WORD2(v130) = v116;
  HIWORD(v130) = v119;
  LOWORD(v131) = v104;
  WORD1(v131) = v110;
  WORD2(v131) = v114;
  HIWORD(v131) = v112;
  LOWORD(v132) = v106;
  HIWORD(v132) = v108;
  if (!_So9NSDecimala__length_getter(&v130))
  {
    LODWORD(v130) = v5;
    WORD2(v130) = v116;
    HIWORD(v130) = v119;
    LOWORD(v131) = v104;
    WORD1(v131) = v110;
    WORD2(v131) = v114;
    HIWORD(v131) = v112;
    LOWORD(v132) = v106;
    HIWORD(v132) = v108;
    if (_So9NSDecimala__isNegative_getter(&v130)) {
      goto LABEL_15;
    }
  }
  LODWORD(v130) = v8;
  WORD2(v130) = v6;
  HIWORD(v130) = v7;
  LOWORD(v131) = v12;
  WORD1(v131) = v9;
  WORD2(v131) = v10;
  HIWORD(v131) = v11;
  LOWORD(v132) = v4;
  HIWORD(v132) = v13;
  if (!_So9NSDecimala__length_getter(&v130))
  {
    LODWORD(v130) = v8;
    WORD2(v130) = v6;
    HIWORD(v130) = v7;
    LOWORD(v131) = v12;
    WORD1(v131) = v9;
    WORD2(v131) = v10;
    HIWORD(v131) = v11;
    LOWORD(v132) = v4;
    HIWORD(v132) = v13;
    if (_So9NSDecimala__isNegative_getter(&v130)) {
      goto LABEL_15;
    }
  }
  LODWORD(v130) = v5;
  WORD2(v130) = v116;
  HIWORD(v130) = v119;
  LOWORD(v131) = v104;
  WORD1(v131) = v110;
  WORD2(v131) = v114;
  HIWORD(v131) = v112;
  LOWORD(v132) = v106;
  HIWORD(v132) = v108;
  if (!_So9NSDecimala__length_getter(&v130))
  {
    int v32 = a1;
    int v17 = v8;
    LOWORD(v8) = v12;
    LOWORD(v5) = v4;
    LOWORD(v18) = v13;
    goto LABEL_20;
  }
  LODWORD(v130) = v8;
  WORD2(v130) = v6;
  HIWORD(v130) = v7;
  LOWORD(v131) = v12;
  WORD1(v131) = v9;
  WORD2(v131) = v10;
  HIWORD(v131) = v11;
  LOWORD(v132) = v4;
  HIWORD(v132) = v13;
  if (!_So9NSDecimala__length_getter(&v130))
  {
    int v17 = v5;
    LOWORD(v8) = v104;
    LOWORD(v5) = v106;
    LOWORD(v18) = v108;
    LOWORD(v6) = v116;
    LOWORD(v7) = v119;
    int v32 = a1;
    LOWORD(v9) = v110;
    LOWORD(v11) = v112;
    LOWORD(v10) = v114;
    goto LABEL_20;
  }
  LODWORD(v130) = v5;
  WORD2(v130) = v116;
  HIWORD(v130) = v119;
  LOWORD(v131) = v104;
  WORD1(v131) = v110;
  WORD2(v131) = v114;
  HIWORD(v131) = v112;
  LOWORD(v132) = v106;
  HIWORD(v132) = v108;
  LODWORD(v127) = v8;
  WORD2(v127) = v6;
  HIWORD(v127) = v7;
  LOWORD(v128) = v12;
  WORD1(v128) = v9;
  WORD2(v128) = v10;
  HIWORD(v128) = v11;
  LOWORD(v129) = v4;
  HIWORD(v129) = v13;
  specialized static NSDecimal._normalize(a:b:roundingMode:)((int *)&v130, (uint64_t)&v127);
  uint64_t v15 = WORD2(v130);
  uint64_t v117 = HIWORD(v130);
  uint64_t v120 = v130;
  unint64_t v124 = v130;
  uint64_t v115 = (unsigned __int16)v131;
  unint64_t v125 = v131;
  uint64_t v109 = WORD2(v131);
  uint64_t v111 = WORD1(v131);
  uint64_t v107 = HIWORD(v131);
  int v105 = (unsigned __int16)v132;
  unsigned int v126 = v132;
  int v113 = HIWORD(v132);
  int v16 = _So9NSDecimala__length_getter(&v124);
  int v17 = v127;
  unint64_t v6 = WORD2(v127);
  unint64_t v7 = HIWORD(v127);
  uint64_t v8 = (unsigned __int16)v128;
  unint64_t v9 = WORD1(v128);
  unint64_t v10 = WORD2(v128);
  unint64_t v11 = HIWORD(v128);
  int v5 = (unsigned __int16)v129;
  int v18 = HIWORD(v129);
  if (!v16) {
    goto LABEL_17;
  }
  __int16 v101 = v15;
  uint64_t v102 = v127;
  unint64_t v124 = v127;
  unint64_t v125 = v128;
  unsigned int v126 = v129;
  if (!_So9NSDecimala__length_getter(&v124))
  {
    LOWORD(v7) = v117;
    int v17 = v120;
    LOWORD(v6) = v15;
    LOWORD(v8) = v115;
    LOWORD(v10) = v109;
    LOWORD(v9) = v111;
    LOWORD(v11) = v107;
    LOWORD(v5) = v105;
    LOWORD(v18) = v113;
    goto LABEL_17;
  }
  LODWORD(v124) = v120;
  WORD2(v124) = v15;
  HIWORD(v124) = v117;
  LOWORD(v125) = v115;
  WORD1(v125) = v111;
  WORD2(v125) = v109;
  HIWORD(v125) = v107;
  LOWORD(v126) = v105;
  HIWORD(v126) = v113;
  unint64_t v121 = __PAIR64__(__PAIR32__(v117, v15), v120);
  LOWORD(v122) = v115;
  *(_DWORD *)((char *)&v122 + 2) = __PAIR32__(v109, v111);
  HIWORD(v122) = v107;
  LOWORD(v123) = v105;
  HIWORD(v123) = v113;
  int v100 = _So9NSDecimala__isNegative_getter(&v121);
  LODWORD(v121) = v102;
  WORD2(v121) = v6;
  HIWORD(v121) = v7;
  LOWORD(v122) = v8;
  WORD1(v122) = v9;
  WORD2(v122) = v10;
  HIWORD(v122) = v11;
  LOWORD(v123) = v5;
  HIWORD(v123) = v18;
  if (v100 == _So9NSDecimala__isNegative_getter(&v121))
  {
    LODWORD(v121) = v120;
    WORD2(v121) = v15;
    HIWORD(v121) = v117;
    LOWORD(v122) = v115;
    WORD1(v122) = v111;
    WORD2(v122) = v109;
    HIWORD(v122) = v107;
    LOWORD(v123) = v105;
    HIWORD(v123) = v113;
    uint64_t v19 = _So9NSDecimala__isNegative_getter(&v121);
    _So9NSDecimala__isNegative_setter(v19, &v124);
    NSDecimal.asVariableLengthInteger()(v120 | (v15 << 32) | (v117 << 48), v115 | (v111 << 16) | (v109 << 32) | (v107 << 48), v105 | (v113 << 16));
    uint64_t v21 = v20;
    NSDecimal.asVariableLengthInteger()(v102 | (v6 << 32) | (v7 << 48), v8 | (v9 << 16) | (v10 << 32) | (v11 << 48), v5 | (v18 << 16));
    uint64_t v24 = specialized static NSDecimal._integerAdd(lhs:rhs:maxResultLength:)(v21, v22, 9, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v25 = *(void *)(v24 + 16);
    if (v25 <= 8)
    {
      v27._rawValue = (void *)v24;
LABEL_26:
      _So9NSDecimala__length_setter(v25, &v124);
      NSDecimal.copyVariableLengthInteger(_:)(v27);
      uint64_t v30 = v37;
      swift_bridgeObjectRelease();
      if (v37) {
        goto LABEL_16;
      }
      goto LABEL_148;
    }
    specialized static NSDecimal._fitMantissa(_:roundingMode:)(v24, 0);
    v27._rawValue = v26;
    uint64_t v29 = v28;
    swift_bridgeObjectRelease();
    int v62 = v124;
    __int16 v63 = WORD2(v124);
    __int16 v64 = HIWORD(v124);
    __int16 v65 = v125;
    __int16 v66 = WORD1(v125);
    unint64_t v36 = WORD2(v125);
    __int16 v67 = HIWORD(v125);
    __int16 v68 = v126;
    unint64_t v121 = v124;
    unint64_t v122 = v125;
    unsigned int v123 = v126;
    __int16 v118 = HIWORD(v126);
    int v69 = _So9NSDecimala__exponent_getter((char *)&v121);
    if (v29 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v29 <= 0x7FFFFFFF)
      {
        if (!__OFADD__(v69, v29))
        {
          if (v69 + (int)v29 > 127)
          {
            swift_bridgeObjectRelease();
LABEL_15:
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            uint64_t v30 = (void *)swift_allocError();
            *uint64_t v31 = 0;
            swift_willThrow();
            goto LABEL_16;
          }
          LODWORD(v121) = v62;
          WORD2(v121) = v63;
          HIWORD(v121) = v64;
          LOWORD(v122) = v65;
          WORD1(v122) = v66;
          WORD2(v122) = v36;
          HIWORD(v122) = v67;
          LOWORD(v123) = v68;
          HIWORD(v123) = v118;
          int v70 = _So9NSDecimala__exponent_getter((char *)&v121);
          BOOL v71 = __OFADD__(v70, v29);
          uint64_t v72 = (v70 + v29);
          if (!v71)
          {
            _So9NSDecimala__exponent_setter(v72, &v124);
            unint64_t v25 = *((void *)v27._rawValue + 2);
            if (HIDWORD(v25)) {
              goto LABEL_162;
            }
            goto LABEL_26;
          }
          __break(1u);
          goto LABEL_160;
        }
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
      }
LABEL_155:
      __break(1u);
      goto LABEL_156;
    }
LABEL_154:
    __break(1u);
    goto LABEL_155;
  }
  unint64_t v98 = v120 | (v15 << 32) | (v117 << 48);
  unint64_t v93 = v115 | (v111 << 16) | (v109 << 32) | (v107 << 48);
  unsigned int v97 = v105 | (v113 << 16);
  NSDecimal.asVariableLengthInteger()(v98, v93, v97);
  uint64_t v34 = v33;
  unint64_t v95 = v8 | (v9 << 16) | (v10 << 32) | (v11 << 48);
  unint64_t v96 = v102 | (v6 << 32) | (v7 << 48);
  unsigned int v94 = v5 | (v18 << 16);
  NSDecimal.asVariableLengthInteger()(v96, v95, v94);
  uint64_t v99 = specialized static NSDecimal._integerCompare(lhs:rhs:)(v34, v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v36 = v99;
  if (v99 == -1)
  {
    LOWORD(v117) = v18;
    LODWORD(v120) = 0;
    NSDecimal.asVariableLengthInteger()(v96, v95, v94);
    uint64_t v39 = v38;
    NSDecimal.asVariableLengthInteger()(v98, v93, v97);
    uint64_t v41 = v40;
    uint64_t v42 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    uint64_t v44 = v39;
    unint64_t v36 = v42;
    *(void *)(v42 + 32) = 0;
    uint64_t v45 = (_WORD *)(v42 + 32);
    *(void *)(v42 + 16) = 8;
    *(void *)(v42 + 40) = 0;
    unint64_t v46 = *(void *)(v44 + 16);
    unint64_t v47 = *(void *)(v41 + 16);
    if (v47 >= v46) {
      uint64_t v48 = *(void *)(v44 + 16);
    }
    else {
      uint64_t v48 = *(void *)(v41 + 16);
    }
    if (v48)
    {
      unsigned int v49 = (*(unsigned __int16 *)(v44 + 32) | 0x10000) - *(unsigned __int16 *)(v41 + 32);
      int v50 = HIWORD(v49);
      *uint64_t v45 = *(_WORD *)(v44 + 32) - *(_WORD *)(v41 + 32);
      uint64_t v51 = v48 - 1;
      if (v51)
      {
        unsigned int v49 = v50 + *(unsigned __int16 *)(v44 + 34) - *(unsigned __int16 *)(v41 + 34) + 0xFFFF;
        int v50 = HIWORD(v49);
        *(_WORD *)(v42 + 34) = v49;
        if (v51 == 1)
        {
          unint64_t v52 = 2;
        }
        else
        {
          unsigned int v43 = *(unsigned __int16 *)(v41 + 36);
          unsigned int v49 = v50 + *(unsigned __int16 *)(v44 + 36) - v43 + 0xFFFF;
          int v50 = HIWORD(v49);
          *(_WORD *)(v42 + 36) = v49;
          if (v51 == 2)
          {
            unint64_t v52 = 3;
          }
          else
          {
            unsigned int v49 = v50 + *(unsigned __int16 *)(v44 + 38) - *(unsigned __int16 *)(v41 + 38) + 0xFFFF;
            int v50 = HIWORD(v49);
            *(_WORD *)(v42 + 38) = v49;
            if (v51 == 3)
            {
              unint64_t v52 = 4;
            }
            else
            {
              unsigned int v43 = *(unsigned __int16 *)(v41 + 40);
              unsigned int v49 = v50 + *(unsigned __int16 *)(v44 + 40) - v43 + 0xFFFF;
              int v50 = HIWORD(v49);
              *(_WORD *)(v42 + 40) = v49;
              if (v51 == 4)
              {
                unint64_t v52 = 5;
              }
              else
              {
                unsigned int v49 = v50 + *(unsigned __int16 *)(v44 + 42) - *(unsigned __int16 *)(v41 + 42) + 0xFFFF;
                int v50 = HIWORD(v49);
                *(_WORD *)(v42 + 42) = v49;
                if (v51 == 5)
                {
                  unint64_t v52 = 6;
                }
                else
                {
                  unsigned int v49 = v50 + *(unsigned __int16 *)(v44 + 44) - *(unsigned __int16 *)(v41 + 44) + 0xFFFF;
                  int v50 = HIWORD(v49);
                  unsigned int v43 = v42;
                  *(_WORD *)(v42 + 44) = v49;
                  if (v51 == 6)
                  {
                    unint64_t v52 = 7;
                  }
                  else
                  {
                    int v75 = v50 + *(unsigned __int16 *)(v44 + 46) - *(unsigned __int16 *)(v41 + 46);
                    unsigned int v49 = v75 + 0xFFFF;
                    *(_WORD *)(v42 + 46) = v75 - 1;
                    if (v51 != 7)
                    {
LABEL_160:
                      __break(1u);
                      goto LABEL_161;
                    }
                    int v50 = HIWORD(v49);
                    unint64_t v52 = 8;
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        unint64_t v52 = 1;
      }
      if (v52 >= v46) {
        goto LABEL_97;
      }
      if (!HIWORD(v49))
      {
        while (v52 < *(void *)(v42 + 16))
        {
          int v76 = *(unsigned __int16 *)(v44 + 32 + 2 * v52);
          unsigned int v43 = v76 + 0xFFFF;
          v45[v52] = v76 - 1;
          if (v46 - 1 == v52) {
            goto LABEL_104;
          }
          ++v52;
          if (v76) {
            goto LABEL_90;
          }
        }
        goto LABEL_152;
      }
    }
    else
    {
      if (!v46)
      {
        if (v47)
        {
          unint64_t v52 = 0;
          int v50 = 1;
          goto LABEL_98;
        }
        uint64_t v73 = 8;
        goto LABEL_107;
      }
      unint64_t v52 = 0;
    }
LABEL_90:
    uint64_t v57 = v44 + 32;
    if (v52 <= v46) {
      unint64_t v59 = v46;
    }
    else {
      unint64_t v59 = v52;
    }
    while (v59 != v52)
    {
      if (v52 >= *(void *)(v42 + 16)) {
        goto LABEL_114;
      }
      v45[v52] = *(_WORD *)(v57 + 2 * v52);
      if ((uint64_t)++v52 >= (uint64_t)v46)
      {
        int v50 = 1;
LABEL_97:
        if ((uint64_t)v52 < (uint64_t)v47)
        {
          while (1)
          {
LABEL_98:
            if (v52 >= v47) {
              goto LABEL_157;
            }
            unint64_t v46 = *(void *)(v42 + 16);
            if (v52 < v46) {
              break;
            }
LABEL_103:
            __break(1u);
LABEL_104:
            int v50 = HIWORD(v43);
            unint64_t v52 = v46;
            if ((uint64_t)v46 >= (uint64_t)v47) {
              goto LABEL_105;
            }
          }
          unsigned int v77 = v50 + (*(unsigned __int16 *)(v41 + 32 + 2 * v52) ^ 0xFFFF);
          --v47;
          unint64_t v46 = v41 + 34;
          while (1)
          {
            int v50 = HIWORD(v77);
            v45[v52] = v77;
            if (v47 == v52) {
              break;
            }
            unsigned int v77 = v50 + (*(unsigned __int16 *)(v46 + 2 * v52++) ^ 0xFFFF);
            if (v52 >= *(void *)(v42 + 16)) {
              goto LABEL_103;
            }
          }
        }
LABEL_105:
        if (!v50)
        {
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
          uint64_t v30 = (void *)swift_allocError();
          *uint64_t v82 = 0;
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
        uint64_t v73 = *(void *)(v42 + 16);
        if (v73)
        {
LABEL_107:
          if (!v45[v73 - 1])
          {
            do
            {
              *(void *)(v42 + 16) = v73 - 1;
              if (v73 == 1) {
                break;
              }
            }
            while (!*(unsigned __int16 *)(v42 + 28 + 2 * v73--));
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v79 = *(void *)(v36 + 16);
        if (!HIDWORD(v79))
        {
          _So9NSDecimala__length_setter(v79, &v124);
          LODWORD(v121) = v102;
          WORD2(v121) = v6;
          HIWORD(v121) = v7;
          LOWORD(v122) = v8;
          WORD1(v122) = v9;
          WORD2(v122) = v10;
          HIWORD(v122) = v11;
          LOWORD(v123) = v5;
          HIWORD(v123) = v18;
          uint64_t v80 = _So9NSDecimala__isNegative_getter(&v121);
          _So9NSDecimala__isNegative_setter(v80, &v124);
          v81._rawValue = (void *)v36;
          goto LABEL_145;
        }
LABEL_162:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_163:
        type metadata accessor for NSComparisonResult(0);
        unint64_t v121 = v36;
        _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
        __break(1u);
        return;
      }
    }
    __break(1u);
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
  if (!v99)
  {
    int v17 = 0;
    LOWORD(v6) = 0;
    LOWORD(v7) = 0;
    LOWORD(v8) = 0;
    LOWORD(v9) = 0;
    LOWORD(v10) = 0;
    LOWORD(v11) = 0;
    LOWORD(v5) = 0;
    LOWORD(v18) = 0;
    goto LABEL_17;
  }
  if (v99 != 1) {
    goto LABEL_163;
  }
  NSDecimal.asVariableLengthInteger()(v98, v93, v97);
  uint64_t v41 = v53;
  NSDecimal.asVariableLengthInteger()(v96, v95, v94);
  unint64_t v6 = v54;
  uint64_t v55 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  unint64_t v36 = v55;
  *(void *)(v55 + 32) = 0;
  uint64_t v45 = (_WORD *)(v55 + 32);
  *(void *)(v55 + 16) = 8;
  *(void *)(v55 + 40) = 0;
  unint64_t v46 = *(void *)(v41 + 16);
  unint64_t v47 = *(void *)(v6 + 16);
  if (v47 >= v46) {
    uint64_t v56 = *(void *)(v41 + 16);
  }
  else {
    uint64_t v56 = *(void *)(v6 + 16);
  }
  if (v56)
  {
    uint64_t v57 = v41 + 32;
    unsigned int v58 = (*(unsigned __int16 *)(v41 + 32) | 0x10000) - *(unsigned __int16 *)(v6 + 32);
    LODWORD(v59) = HIWORD(v58);
    *uint64_t v45 = *(_WORD *)(v41 + 32) - *(_WORD *)(v6 + 32);
    unint64_t v52 = v56 - 1;
    int v60 = v120;
    if (!v52)
    {
      unint64_t v61 = 1;
      goto LABEL_118;
    }
    unsigned int v58 = v59 + *(unsigned __int16 *)(v41 + 34) - *(unsigned __int16 *)(v6 + 34) + 0xFFFF;
    LODWORD(v59) = HIWORD(v58);
    *(_WORD *)(v55 + 34) = v58;
    if (v52 == 1)
    {
      unint64_t v61 = 2;
      goto LABEL_118;
    }
    unsigned int v43 = *(unsigned __int16 *)(v6 + 36);
    unsigned int v58 = v59 + *(unsigned __int16 *)(v41 + 36) - v43 + 0xFFFF;
    LODWORD(v59) = HIWORD(v58);
    *(_WORD *)(v55 + 36) = v58;
    if (v52 == 2)
    {
      unint64_t v61 = 3;
      goto LABEL_118;
    }
    unsigned int v58 = v59 + *(unsigned __int16 *)(v41 + 38) - *(unsigned __int16 *)(v6 + 38) + 0xFFFF;
    LODWORD(v59) = HIWORD(v58);
    *(_WORD *)(v55 + 38) = v58;
    if (v52 == 3)
    {
      unint64_t v61 = 4;
      goto LABEL_118;
    }
    unsigned int v43 = *(unsigned __int16 *)(v6 + 40);
    unsigned int v58 = v59 + *(unsigned __int16 *)(v41 + 40) - v43 + 0xFFFF;
    LODWORD(v59) = HIWORD(v58);
    *(_WORD *)(v55 + 40) = v58;
    if (v52 == 4)
    {
      unint64_t v61 = 5;
      goto LABEL_118;
    }
    unsigned int v58 = v59 + *(unsigned __int16 *)(v41 + 42) - *(unsigned __int16 *)(v6 + 42) + 0xFFFF;
    LODWORD(v59) = HIWORD(v58);
    *(_WORD *)(v55 + 42) = v58;
    if (v52 == 5)
    {
      unint64_t v61 = 6;
      goto LABEL_118;
    }
    unsigned int v43 = *(unsigned __int16 *)(v6 + 44);
    unsigned int v58 = v59 + *(unsigned __int16 *)(v41 + 44) - v43 + 0xFFFF;
    LODWORD(v59) = HIWORD(v58);
    *(_WORD *)(v55 + 44) = v58;
    if (v52 == 6)
    {
      unint64_t v61 = 7;
LABEL_117:
      int v60 = v120;
LABEL_118:
      if (v61 >= v46) {
        goto LABEL_130;
      }
      if (!HIWORD(v58))
      {
        while (v61 < *(void *)(v36 + 16))
        {
          int v84 = *(unsigned __int16 *)(v57 + 2 * v61);
          unsigned int v43 = v84 + 0xFFFF;
          v45[v61] = v84 - 1;
          if (v46 - 1 == v61) {
            goto LABEL_137;
          }
          ++v61;
          if (v84) {
            goto LABEL_123;
          }
        }
        goto LABEL_153;
      }
      goto LABEL_123;
    }
LABEL_115:
    int v83 = v59 + *(unsigned __int16 *)(v41 + 46) - *(unsigned __int16 *)(v6 + 46);
    unsigned int v58 = v83 + 0xFFFF;
    *(_WORD *)(v36 + 46) = v83 - 1;
    if (v52 != 7)
    {
LABEL_161:
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      goto LABEL_162;
    }
    LODWORD(v59) = HIWORD(v58);
    unint64_t v61 = 8;
    goto LABEL_117;
  }
  int v60 = v120;
  if (!v46)
  {
    if (v47)
    {
      unint64_t v61 = 0;
      LODWORD(v59) = 1;
      goto LABEL_131;
    }
    uint64_t v74 = 8;
LABEL_140:
    if (!v45[v74 - 1])
    {
      do
      {
        *(void *)(v36 + 16) = v74 - 1;
        if (v74 == 1) {
          break;
        }
      }
      while (!*(unsigned __int16 *)(v36 + 28 + 2 * v74--));
    }
LABEL_143:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v88 = *(void *)(v36 + 16);
    if (HIDWORD(v88)) {
      goto LABEL_162;
    }
    _So9NSDecimala__length_setter(v88, &v124);
    LODWORD(v121) = v60;
    WORD2(v121) = v101;
    HIWORD(v121) = v117;
    LOWORD(v122) = v115;
    WORD1(v122) = v111;
    WORD2(v122) = v109;
    HIWORD(v122) = v107;
    LOWORD(v123) = v105;
    HIWORD(v123) = v113;
    uint64_t v89 = _So9NSDecimala__isNegative_getter(&v121);
    _So9NSDecimala__isNegative_setter(v89, &v124);
    v81._rawValue = (void *)v36;
LABEL_145:
    NSDecimal.copyVariableLengthInteger(_:)(v81);
    if (v90)
    {
      uint64_t v30 = v90;
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    swift_bridgeObjectRelease();
LABEL_148:
    _So9NSDecimala__isCompact_setter_0(0, &v124);
    NSDecimal.compact()();
    int v17 = v124;
    LOWORD(v6) = WORD2(v124);
    LOWORD(v7) = HIWORD(v124);
    LOWORD(v8) = v125;
    LOWORD(v9) = WORD1(v125);
    LOWORD(v10) = WORD2(v125);
    LOWORD(v11) = HIWORD(v125);
    LOWORD(v5) = v126;
    LOWORD(v18) = HIWORD(v126);
    goto LABEL_17;
  }
  unint64_t v61 = 0;
LABEL_123:
  if (v61 <= v46) {
    unint64_t v85 = v46;
  }
  else {
    unint64_t v85 = v61;
  }
  do
  {
    if (v85 == v61)
    {
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
      goto LABEL_154;
    }
    if (v61 >= *(void *)(v36 + 16)) {
      goto LABEL_151;
    }
    v45[v61] = *(_WORD *)(v41 + 32 + 2 * v61);
    ++v61;
  }
  while ((uint64_t)v61 < (uint64_t)v46);
  LODWORD(v59) = 1;
LABEL_130:
  if ((uint64_t)v61 < (uint64_t)v47)
  {
    while (1)
    {
LABEL_131:
      if (v61 >= v47) {
        goto LABEL_158;
      }
      unint64_t v46 = *(void *)(v36 + 16);
      if (v61 < v46) {
        break;
      }
LABEL_136:
      __break(1u);
LABEL_137:
      LODWORD(v59) = HIWORD(v43);
      unint64_t v61 = v46;
      if ((uint64_t)v46 >= (uint64_t)v47) {
        goto LABEL_138;
      }
    }
    unsigned int v86 = v59 + (*(unsigned __int16 *)(v6 + 32 + 2 * v61) ^ 0xFFFF);
    --v47;
    unint64_t v46 = v6 + 34;
    while (1)
    {
      LODWORD(v59) = HIWORD(v86);
      v45[v61] = v86;
      if (v47 == v61) {
        break;
      }
      unsigned int v86 = v59 + (*(unsigned __int16 *)(v46 + 2 * v61++) ^ 0xFFFF);
      if (v61 >= *(void *)(v36 + 16)) {
        goto LABEL_136;
      }
    }
  }
LABEL_138:
  if (v59)
  {
    uint64_t v74 = *(void *)(v36 + 16);
    if (v74) {
      goto LABEL_140;
    }
    goto LABEL_143;
  }
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  uint64_t v91 = swift_allocError();
  *unint64_t v92 = 0;
  swift_willThrow();
  uint64_t v30 = (void *)v91;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_16:
  uint64_t v134 = 0;
  uint64_t v135 = 0;
  _So9NSDecimala__exponent_setter(0, &v133);
  _So9NSDecimala__length_setter(0, &v133);
  _So9NSDecimala__isNegative_setter(1, &v133);
  _So9NSDecimala__isCompact_setter_0(0, &v133);
  _So9NSDecimala__reserved_setter(&v133);

  int v17 = v133;
  LOWORD(v6) = v134;
  LOWORD(v7) = WORD1(v134);
  LOWORD(v8) = WORD2(v134);
  LOWORD(v9) = HIWORD(v134);
  LOWORD(v10) = v135;
  LOWORD(v11) = WORD1(v135);
  LOWORD(v5) = WORD2(v135);
  LOWORD(v18) = HIWORD(v135);
LABEL_17:
  int v32 = a1;
LABEL_20:
  *int v32 = v17;
  *((_WORD *)v32 + 2) = v6;
  *((_WORD *)v32 + 3) = v7;
  *((_WORD *)v32 + 4) = v8;
  *((_WORD *)v32 + 5) = v9;
  *((_WORD *)v32 + 6) = v10;
  *((_WORD *)v32 + 7) = v11;
  *((_WORD *)v32 + 8) = v5;
  *((_WORD *)v32 + 9) = v18;
}

void specialized static NSDecimal.*= infix(_:_:)(unsigned int *a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  uint64_t v7 = *((unsigned __int16 *)a1 + 3);
  uint64_t v8 = *((unsigned __int16 *)a1 + 4);
  uint64_t v9 = *((unsigned __int16 *)a1 + 5);
  uint64_t v10 = *((unsigned __int16 *)a1 + 6);
  uint64_t v11 = *((unsigned __int16 *)a1 + 7);
  int v12 = *((unsigned __int16 *)a1 + 8);
  int v13 = *((unsigned __int16 *)a1 + 9);
  uint64_t v68 = *((unsigned __int16 *)a1 + 2);
  uint64_t v69 = *a1;
  LODWORD(v83[0]) = *a1;
  WORD2(v83[0]) = v68;
  HIWORD(v83[0]) = v7;
  uint64_t v72 = v9;
  uint64_t v73 = v8;
  LOWORD(v83[1]) = v8;
  WORD1(v83[1]) = v9;
  uint64_t v70 = v11;
  uint64_t v71 = v10;
  WORD2(v83[1]) = v10;
  HIWORD(v83[1]) = v11;
  int v66 = v13;
  int v67 = v12;
  LOWORD(v83[2]) = v12;
  WORD1(v83[2]) = v13;
  if (!_So9NSDecimala__length_getter(v83))
  {
    LODWORD(v83[0]) = v69;
    WORD2(v83[0]) = v68;
    HIWORD(v83[0]) = v7;
    LOWORD(v83[1]) = v73;
    WORD1(v83[1]) = v72;
    WORD2(v83[1]) = v71;
    HIWORD(v83[1]) = v70;
    LOWORD(v83[2]) = v67;
    WORD1(v83[2]) = v66;
    if (_So9NSDecimala__isNegative_getter(v83)) {
      goto LABEL_15;
    }
  }
  v83[0] = a2;
  v83[1] = a3;
  LODWORD(v83[2]) = a4;
  if (!_So9NSDecimala__length_getter(v83))
  {
    v83[0] = a2;
    v83[1] = a3;
    LODWORD(v83[2]) = a4;
    if (_So9NSDecimala__isNegative_getter(v83))
    {
LABEL_15:
      lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
      uint64_t v28 = (void *)swift_allocError();
      *uint64_t v29 = 0;
      swift_willThrow();
LABEL_57:
      *(_OWORD *)((char *)v83 + 4) = 0uLL;
      _So9NSDecimala__exponent_setter(0, v83);
      _So9NSDecimala__length_setter(0, v83);
      _So9NSDecimala__isNegative_setter(1, v83);
      _So9NSDecimala__isCompact_setter_0(0, v83);
      _So9NSDecimala__reserved_setter(v83);

LABEL_58:
      unsigned int v30 = v83[0];
      long long v15 = *(_OWORD *)((char *)v83 + 4);
      goto LABEL_59;
    }
  }
  unint64_t v60 = HIWORD(a3);
  unint64_t v61 = HIDWORD(a3);
  unint64_t v62 = a3 >> 16;
  unint64_t v63 = HIWORD(a2);
  __int16 v64 = HIWORD(a4);
  LODWORD(v83[0]) = v69;
  WORD2(v83[0]) = v68;
  HIWORD(v83[0]) = v7;
  LOWORD(v83[1]) = v73;
  WORD1(v83[1]) = v72;
  WORD2(v83[1]) = v71;
  HIWORD(v83[1]) = v70;
  LOWORD(v83[2]) = v67;
  WORD1(v83[2]) = v66;
  int v14 = _So9NSDecimala__length_getter(v83);
  long long v15 = 0uLL;
  if (!v14)
  {
    unsigned int v30 = 0;
LABEL_59:
    uint64_t v41 = a1;
    goto LABEL_60;
  }
  unint64_t v16 = a2;
  v83[0] = a2;
  unint64_t v17 = HIDWORD(a2);
  __int16 v18 = a3;
  v83[1] = a3;
  __int16 v19 = a4;
  LODWORD(v83[2]) = a4;
  if (!_So9NSDecimala__length_getter(v83))
  {
    unsigned int v30 = 0;
    uint64_t v41 = a1;
    long long v15 = 0uLL;
LABEL_60:
    *uint64_t v41 = v30;
    *(_OWORD *)(v41 + 1) = v15;
    return;
  }
  __int16 v59 = v7;
  NSDecimal.asVariableLengthInteger()(v69 | (v68 << 32) | (v7 << 48), v73 | (v72 << 16) | (v71 << 32) | (v70 << 48), v67 | (v66 << 16));
  uint64_t v21 = v20;
  NSDecimal.asVariableLengthInteger()(v16, a3, a4);
  uint64_t v23 = v22;
  uint64_t v24 = *(void *)(v21 + 16);
  if (!v24 || (uint64_t v25 = *(void *)(v22 + 16)) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v58 = MEMORY[0x1E4FBC860];
    goto LABEL_18;
  }
  uint64_t v26 = v24 + v25;
  if (__OFADD__(v24, v25)) {
    goto LABEL_69;
  }
  if (v26 > 15)
  {
    uint64_t v26 = 16;
LABEL_27:
    uint64_t v27 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v27 + 16) = v26;
    bzero((void *)(v27 + 32), 2 * v26);
    goto LABEL_28;
  }
  if (v26 < 0)
  {
LABEL_76:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_77;
  }
  if (v26) {
    goto LABEL_27;
  }
  uint64_t v27 = MEMORY[0x1E4FBC860];
LABEL_28:
  uint64_t v43 = 0;
  uint64_t v44 = v23 + 32;
  uint64_t v45 = v27 + 32;
  while (2)
  {
    if (v43 == v25)
    {
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }
    unsigned int v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = v43 + 1;
    do
    {
      if (v24 == v47)
      {
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      uint64_t v49 = v47 + v43;
      if (__OFADD__(v47, v43)) {
        goto LABEL_65;
      }
      if (v49 >= v26)
      {
        if (v46) {
          goto LABEL_55;
        }
        unsigned int v46 = *(unsigned __int16 *)(v44 + 2 * v43);
        if (*(_WORD *)(v44 + 2 * v43))
        {
          unsigned int v46 = *(unsigned __int16 *)(v21 + 2 * v47 + 32);
          if (*(_WORD *)(v21 + 2 * v47 + 32)) {
            goto LABEL_55;
          }
        }
      }
      else
      {
        if (v49 < 0) {
          goto LABEL_66;
        }
        if ((unint64_t)v49 >= *(void *)(v27 + 16)) {
          goto LABEL_67;
        }
        uint64_t v50 = 2 * v49;
        unsigned int v51 = v46
            + *(unsigned __int16 *)(v45 + v50)
            + *(unsigned __int16 *)(v21 + 2 * v47 + 32) * *(unsigned __int16 *)(v44 + 2 * v43);
        unsigned int v46 = HIWORD(v51);
        *(_WORD *)(v45 + v50) = v51;
      }
      ++v47;
    }
    while (v24 != v47);
    if (!v46) {
      goto LABEL_48;
    }
    BOOL v40 = __OFADD__(v24, v43);
    uint64_t v52 = v24 + v43;
    if (v40) {
      goto LABEL_70;
    }
    if (v52 >= v26)
    {
LABEL_55:
      lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
      uint64_t v28 = (void *)swift_allocError();
      *uint64_t v56 = 0;
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_56;
    }
    if (v52 < 0) {
      goto LABEL_71;
    }
    if ((unint64_t)v52 >= *(void *)(v27 + 16))
    {
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
      goto LABEL_74;
    }
    *(_WORD *)(v45 + 2 * v52) = v46;
LABEL_48:
    uint64_t v43 = v48;
    if (v48 != v25) {
      continue;
    }
    break;
  }
  uint64_t v53 = *(void *)(v27 + 16);
  uint64_t v58 = v27;
  if (v53 && !*(_WORD *)(v45 + 2 * v53 - 2))
  {
    uint64_t v54 = v53 + 14;
    do
    {
      *(void *)(v27 + 16) = v54 - 15;
      if (v54 == 15) {
        break;
      }
    }
    while (!*(unsigned __int16 *)(v27 + 2 * v54--));
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_18:
  memset(v83, 0, 20);
  int v74 = v69;
  __int16 v75 = v68;
  __int16 v76 = v59;
  __int16 v77 = v73;
  __int16 v78 = v72;
  __int16 v79 = v71;
  __int16 v80 = v70;
  __int16 v81 = v67;
  __int16 v82 = v66;
  int isNegative_getter = _So9NSDecimala__isNegative_getter(&v74);
  int v74 = v16;
  __int16 v75 = v17;
  __int16 v76 = v63;
  __int16 v77 = v18;
  __int16 v78 = v62;
  __int16 v79 = v61;
  __int16 v80 = v60;
  __int16 v81 = v19;
  __int16 v82 = v64;
  BOOL v32 = isNegative_getter != _So9NSDecimala__isNegative_getter(&v74);
  _So9NSDecimala__isNegative_setter(v32, v83);
  int v74 = v69;
  __int16 v75 = v68;
  __int16 v76 = v59;
  __int16 v77 = v73;
  __int16 v78 = v72;
  __int16 v79 = v71;
  __int16 v80 = v70;
  __int16 v81 = v67;
  __int16 v82 = v66;
  int v33 = _So9NSDecimala__exponent_getter((char *)&v74);
  int v74 = v16;
  __int16 v75 = v17;
  __int16 v76 = v63;
  __int16 v77 = v18;
  __int16 v78 = v62;
  __int16 v79 = v61;
  __int16 v80 = v60;
  __int16 v81 = v19;
  __int16 v82 = v64;
  uint64_t v34 = _So9NSDecimala__exponent_getter((char *)&v74) + v33;
  v35._rawValue = (void *)v58;
  if (*(void *)(v58 + 16) < 9uLL) {
    goto LABEL_24;
  }
  specialized static NSDecimal._fitMantissa(_:roundingMode:)(v58, 0);
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  swift_bridgeObjectRelease();
  if (v39 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_73;
  }
  if (v39 > 0x7FFFFFFF)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  BOOL v40 = __OFADD__(v34, v39);
  uint64_t v34 = (v34 + v39);
  if (v40)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  v35._rawValue = v37;
LABEL_24:
  NSDecimal.copyVariableLengthInteger(_:)(v35);
  if (v42)
  {
    uint64_t v28 = v42;
LABEL_56:
    swift_bridgeObjectRelease();
    goto LABEL_57;
  }
  unint64_t v57 = *((void *)v35._rawValue + 2);
  swift_bridgeObjectRelease();
  if (!HIDWORD(v57))
  {
    _So9NSDecimala__length_setter(v57, v83);
    _So9NSDecimala__isCompact_setter_0(0, v83);
    if ((int)v34 < 128)
    {
      _So9NSDecimala__exponent_setter(v34, v83);
      NSDecimal.compact()();
      goto LABEL_58;
    }
    goto LABEL_15;
  }
LABEL_77:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t associated type witness table accessor for ExpressibleByIntegerLiteral.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral in NSDecimal()
{
  return MEMORY[0x1E4FBB5C0];
}

uint64_t base witness table accessor for Equatable in NSDecimal()
{
  return lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal(&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal);
}

uint64_t base witness table accessor for Numeric in NSDecimal()
{
  return lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal(&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal);
}

uint64_t base witness table accessor for AdditiveArithmetic in NSDecimal()
{
  return lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal(&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal);
}

uint64_t base witness table accessor for ExpressibleByIntegerLiteral in NSDecimal()
{
  return lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal(&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal);
}

uint64_t associated type witness table accessor for Numeric.Magnitude : Comparable in NSDecimal()
{
  return lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal(&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal);
}

uint64_t associated type witness table accessor for Strideable.Stride : SignedNumeric in NSDecimal()
{
  return lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal(&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal);
}

uint64_t lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NSDecimal(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NSDecimal.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    char *result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181BC79B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for NSDecimal.CodingKeys()
{
  return &unk_1ECA2FC88;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance NSArray@<X0>(void *a1@<X8>)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v3 = objc_msgSend(v2, sel_initWithArray_, _ContiguousArrayBuffer._asCocoaArray()());
  uint64_t result = swift_unknownObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance [A]@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, *(void *)(a2 + 16));
  *a3 = result;
  return result;
}

uint64_t NSArray._toCustomAnyHashable()()
{
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyHashable>);
  if (!swift_dynamicCastClass())
  {
    swift_unknownObjectRelease();
    objc_msgSend(v0, sel_copy);
    unint64_t v1 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    specialized _arrayForceCast<A, B>(_:)(v1);
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable]);
  lazy protocol witness table accessor for type [AnyHashable] and conformance <A> [A]();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSArray()
{
  id v1 = *v0;
  NSArray._toCustomAnyHashable()();
}

id protocol witness for Sequence.underestimatedCount.getter in conformance NSArray()
{
  return objc_msgSend(*v0, sel_count);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance NSArray()
{
  id v1 = (void *)*v0;
  uint64_t v2 = specialized _copySequenceToContiguousArray<A>(_:)(*v0);

  return v2;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance NSArray()
{
  return specialized Sequence._copyContents(initializing:)();
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance NSArray@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySJqd__Isgyrzo_10Foundation16AttributedStringV13CharacterViewVABsAG_pALRszr__lIetMggrzo_Tp5(a1, a2);
}

id NSArray.init(array:)(void *a1)
{
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  unint64_t v2 = swift_dynamicCastClass();
  if (!v2)
  {
    swift_unknownObjectRelease();
    objc_msgSend(a1, sel_copy);
    unint64_t v2 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  specialized _arrayForceCast<A, B>(_:)(v2);
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v3, sel_initWithArray_, _ContiguousArrayBuffer._asCocoaArray()());
  swift_unknownObjectRelease();
  return v4;
}

uint64_t NSArray.customMirror.getter()
{
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  if (!swift_dynamicCastClass())
  {
    swift_unknownObjectRelease();
    objc_msgSend(v0, sel_copy);
    _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Swift.AnyObject]);
  return Mirror.init(reflecting:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance NSArray()
{
  return NSArray.customMirror.getter();
}

uint64_t specialized _ContiguousArrayBuffer.storesOnlyElementsOfType<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
  uint64_t result = swift_dynamicCastMetatype();
  if (result) {
    return 1;
  }
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    return 1;
  }
  unint64_t v9 = 0;
  while (v9 < v8)
  {
    v10[1] = *(void *)(a1 + 32 + 8 * v9);
    swift_unknownObjectRetain();
    uint64_t result = swift_dynamicCast();
    if (!result) {
      return result;
    }
    ++v9;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
    unint64_t v8 = *(void *)(a1 + 16);
    if (v9 == v8) {
      return 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._nonNative.getter(uint64_t result)
{
  if (result >= 0) {
    return result & 0xFFFFFFFFFFFFFF8;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [AnyHashable] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [AnyHashable] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [AnyHashable] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [AnyHashable]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AnyHashable] and conformance <A> [A]);
  }
  return result;
}

double one-time initialization function for prefixHeuristics()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PrefixInflectionHeuristic>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_18210C670;
  Swift::String v1 = String.lowercased()();
  *(void *)(v0 + 32) = 28261;
  *(void *)(v0 + 40) = 0xE200000000000000;
  *(Swift::String *)(v0 + 48) = v1;
  *(void *)(v0 + 64) = closure #1 in variable initialization expression of prefixHeuristics;
  *(void *)(v0 + 72) = 0;
  *(void *)(v0 + 80) = closure #2 in variable initialization expression of prefixHeuristics;
  *(void *)(v0 + 88) = 0;
  *(void *)(v0 + 96) = 0;
  *(void *)(v0 + 104) = 0;
  Swift::String v2 = String.lowercased()();
  *(void *)(v0 + 112) = 28261;
  *(void *)(v0 + 120) = 0xE200000000000000;
  *(Swift::String *)(v0 + 128) = v2;
  *(void *)(v0 + 144) = closure #3 in variable initialization expression of prefixHeuristics;
  *(void *)(v0 + 152) = 0;
  *(void *)(v0 + 160) = closure #4 in variable initialization expression of prefixHeuristics;
  *(void *)(v0 + 168) = 0;
  *(void *)(v0 + 176) = 0;
  *(void *)(v0 + 184) = 0;
  Swift::String v3 = String.lowercased()();
  *(void *)(v0 + 192) = 29286;
  *(void *)(v0 + 200) = 0xE200000000000000;
  *(Swift::String *)(v0 + 208) = v3;
  *(void *)(v0 + 224) = closure #5 in variable initialization expression of prefixHeuristics;
  *(void *)(v0 + 232) = 0;
  *(void *)(v0 + 240) = destructiveProjectEnumData for PredicateCodableError;
  *(void *)(v0 + 248) = 0;
  *(void *)(v0 + 256) = 0xD000000000000010;
  *(void *)(v0 + 264) = 0x80000001823AC2D0;
  Swift::String v4 = String.lowercased()();
  *(void *)(v0 + 272) = 29286;
  *(void *)(v0 + 280) = 0xE200000000000000;
  *(Swift::String *)(v0 + 288) = v4;
  *(void *)(v0 + 304) = closure #7 in variable initialization expression of prefixHeuristics;
  *(void *)(v0 + 312) = 0;
  *(void *)(v0 + 320) = destructiveProjectEnumData for PredicateCodableError;
  *(void *)(v0 + 328) = 0;
  *(_OWORD *)(v0 + 336) = xmmword_18217FF50;
  Swift::String v5 = String.lowercased()();
  *(void *)(v0 + 352) = 29286;
  *(void *)(v0 + 360) = 0xE200000000000000;
  *(Swift::String *)(v0 + 368) = v5;
  *(void *)(v0 + 384) = closure #9 in variable initialization expression of prefixHeuristics;
  *(void *)(v0 + 392) = 0;
  *(void *)(v0 + 400) = destructiveProjectEnumData for PredicateCodableError;
  *(void *)(v0 + 408) = 0;
  *(void *)(v0 + 416) = 0xD000000000000011;
  *(void *)(v0 + 424) = 0x80000001823AC2F0;
  Swift::String v6 = String.lowercased()();
  *(void *)(v0 + 432) = 29286;
  *(void *)(v0 + 440) = 0xE200000000000000;
  *(Swift::String *)(v0 + 448) = v6;
  *(void *)(v0 + 464) = closure #11 in variable initialization expression of prefixHeuristics;
  *(void *)(v0 + 472) = 0;
  *(void *)(v0 + 480) = destructiveProjectEnumData for PredicateCodableError;
  *(void *)(v0 + 488) = 0;
  *(_OWORD *)(v0 + 496) = xmmword_18217FF60;
  Swift::String v7 = String.lowercased()();
  *(void *)(v0 + 512) = 29286;
  *(void *)(v0 + 520) = 0xE200000000000000;
  *(Swift::String *)(v0 + 528) = v7;
  *(void *)(v0 + 544) = closure #13 in variable initialization expression of prefixHeuristics;
  *(void *)(v0 + 552) = 0;
  *(void *)(v0 + 560) = destructiveProjectEnumData for PredicateCodableError;
  *(void *)(v0 + 568) = 0;
  double result = 9.54924866e-307;
  *(_OWORD *)(v0 + 576) = xmmword_18217FF70;
  prefixHeuristics._rawValue = (void *)v0;
  return result;
}

uint64_t closure #1 in variable initialization expression of prefixHeuristics(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 8289 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 || a1 == 2125409 && a2 == 0xE300000000000000) {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

id closure #2 in variable initialization expression of prefixHeuristics(void *a1)
{
  return objc_msgSend(a1, sel_setDefiniteness_, 1);
}

uint64_t closure #3 in variable initialization expression of prefixHeuristics(uint64_t a1, uint64_t a2)
{
  if (a1 == 543516788 && a2 == 0xE400000000000000) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

id closure #4 in variable initialization expression of prefixHeuristics(void *a1)
{
  return objc_msgSend(a1, sel_setDefiniteness_, 2);
}

uint64_t closure #5 in variable initialization expression of prefixHeuristics(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 2123107 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 || a1 == 544499043 && a2 == 0xE400000000000000) {
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 || a1 == 0x206574746563 && a2 == 0xE600000000000000) {
    return 1;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v6 = a1 == 544433507 && a2 == 0xE400000000000000;
  BOOL v7 = v6;
  if ((v5 & 1) != 0 || v7) {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t closure #7 in variable initialization expression of prefixHeuristics(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 2123108 && a2 == 0xE300000000000000;
  if (v2
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 10084 && a2 == 0xE200000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 2575360612 && a2 == 0xA400000000000000)
  {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t closure #9 in variable initialization expression of prefixHeuristics(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x276C206564 && a2 == 0xE500000000000000;
  if (v2
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x9980E26C206564 && a2 == 0xA700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x20616C206564 && a2 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 2127204 && a2 == 0xE300000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 544433508 && a2 == 0xE400000000000000)
  {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t closure #11 in variable initialization expression of prefixHeuristics(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 10092 && a2 == 0xE200000000000000;
  if (v2
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 2575360620 && a2 == 0xA400000000000000)
  {
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 || a1 == 2123116 && a2 == 0xE300000000000000) {
    return 1;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v6 = a1 == 2122092 && a2 == 0xE300000000000000;
  BOOL v7 = v6;
  if ((v5 & 1) != 0
    || v7
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 544433516 && a2 == 0xE400000000000000)
  {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t closure #13 in variable initialization expression of prefixHeuristics(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 2585969 && a2 == 0xE300000000000000;
  if (v2
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x9980E27571 && a2 == 0xA500000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 543520113 && a2 == 0xE400000000000000)
  {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t one-time initialization function for suffixHeuristics()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SuffixInflectionHeuristic>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_18210C670;
  Swift::String v1 = String.lowercased()();
  *(void *)(v0 + 32) = 28261;
  *(void *)(v0 + 40) = 0xE200000000000000;
  *(Swift::String *)(v0 + 48) = v1;
  *(void *)(v0 + 64) = closure #1 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 72) = 0;
  *(void *)(v0 + 80) = closure #2 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 88) = 0;
  *(void *)(v0 + 96) = 0;
  *(void *)(v0 + 104) = 0;
  Swift::String v2 = String.lowercased()();
  *(void *)(v0 + 112) = 28523;
  *(void *)(v0 + 120) = 0xE200000000000000;
  *(Swift::String *)(v0 + 128) = v2;
  *(void *)(v0 + 144) = closure #3 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 152) = 0;
  *(void *)(v0 + 160) = closure #4 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 168) = 0;
  *(void *)(v0 + 176) = 0;
  *(void *)(v0 + 184) = 0;
  Swift::String v3 = String.lowercased()();
  *(void *)(v0 + 192) = 28523;
  *(void *)(v0 + 200) = 0xE200000000000000;
  *(Swift::String *)(v0 + 208) = v3;
  *(void *)(v0 + 224) = closure #5 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 232) = 0;
  *(void *)(v0 + 240) = closure #6 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 248) = 0;
  *(void *)(v0 + 256) = 0;
  *(void *)(v0 + 264) = 0;
  Swift::String v4 = String.lowercased()();
  *(void *)(v0 + 272) = 28523;
  *(void *)(v0 + 280) = 0xE200000000000000;
  *(Swift::String *)(v0 + 288) = v4;
  *(void *)(v0 + 304) = closure #7 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 312) = 0;
  *(void *)(v0 + 320) = closure #8 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 328) = 0;
  *(void *)(v0 + 336) = 0;
  *(void *)(v0 + 344) = 0;
  Swift::String v5 = String.lowercased()();
  *(void *)(v0 + 352) = 28523;
  *(void *)(v0 + 360) = 0xE200000000000000;
  *(Swift::String *)(v0 + 368) = v5;
  *(void *)(v0 + 384) = closure #9 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 392) = 0;
  *(void *)(v0 + 400) = closure #10 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 408) = 0;
  *(void *)(v0 + 416) = 0;
  *(void *)(v0 + 424) = 0;
  Swift::String v6 = String.lowercased()();
  *(void *)(v0 + 432) = 28523;
  *(void *)(v0 + 440) = 0xE200000000000000;
  *(Swift::String *)(v0 + 448) = v6;
  *(void *)(v0 + 464) = closure #11 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 472) = 0;
  *(void *)(v0 + 480) = closure #12 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 488) = 0;
  *(void *)(v0 + 496) = 0;
  *(void *)(v0 + 504) = 0;
  Swift::String v8 = String.lowercased()();
  uint64_t result = v8._countAndFlagsBits;
  *(void *)(v0 + 512) = 28523;
  *(void *)(v0 + 520) = 0xE200000000000000;
  *(Swift::String *)(v0 + 528) = v8;
  *(void *)(v0 + 544) = closure #13 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 552) = 0;
  *(void *)(v0 + 560) = closure #14 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 568) = 0;
  *(void *)(v0 + 584) = 0;
  *(void *)(v0 + 576) = 0;
  suffixHeuristics._rawValue = (void *)v0;
  return result;
}

uint64_t closure #1 in variable initialization expression of suffixHeuristics(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1939439842 && a2 == 0xA400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 || a1 == 29479 && a2 == 0xE200000000000000) {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

id closure #2 in variable initialization expression of suffixHeuristics(void *a1)
{
  return objc_msgSend(a1, sel_setGrammaticalCase_, 4);
}

uint64_t closure #3 in variable initialization expression of suffixHeuristics(uint64_t a1, uint64_t a2)
{
  if (a1 == 9734891 && a2 == 0xA300000000000000) {
    return 1;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v6 = a1 == 8429036 && a2 == 0xA300000000000000;
  BOOL v7 = v6;
  if ((v5 & 1) != 0 || v7) {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

id closure #4 in variable initialization expression of suffixHeuristics(void *a1)
{
  return objc_msgSend(a1, sel_setGrammaticalCase_, 1);
}

uint64_t closure #5 in variable initialization expression of suffixHeuristics(uint64_t a1, uint64_t a2)
{
  if (a1 == 8433898 && a2 == 0xA300000000000000) {
    return 1;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v6 = a1 == 11836908 && a2 == 0xA300000000000000;
  BOOL v7 = v6;
  if ((v5 & 1) != 0 || v7) {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

id closure #6 in variable initialization expression of suffixHeuristics(void *a1)
{
  objc_msgSend(a1, sel_setGrammaticalCase_, 1);

  return objc_msgSend(a1, sel_set_clusivity_, 1);
}

uint64_t closure #7 in variable initialization expression of suffixHeuristics(uint64_t a1, uint64_t a2)
{
  if (a1 == 12363243 && a2 == 0xA300000000000000) {
    return 1;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v6 = a1 == 8691180 && a2 == 0xA300000000000000;
  BOOL v7 = v6;
  if ((v5 & 1) != 0 || v7) {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

id closure #8 in variable initialization expression of suffixHeuristics(void *a1)
{
  return objc_msgSend(a1, sel_setGrammaticalCase_, 2);
}

uint64_t closure #9 in variable initialization expression of suffixHeuristics(uint64_t a1, uint64_t a2)
{
  if (a1 == 12366826 && a2 == 0xA300000000000000) {
    return 1;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v6 = a1 == 8428012 && a2 == 0xA300000000000000;
  BOOL v7 = v6;
  if ((v5 & 1) != 0 || v7) {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

id closure #10 in variable initialization expression of suffixHeuristics(void *a1)
{
  return objc_msgSend(a1, sel_setGrammaticalCase_, 16);
}

uint64_t closure #11 in variable initialization expression of suffixHeuristics(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 10265067 && a2 == 0xA300000000000000;
  if (v2
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x9CA1EBBC9CECLL && a2 == 0xA600000000000000)
  {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

id closure #12 in variable initialization expression of suffixHeuristics(void *a1)
{
  return objc_msgSend(a1, sel_setGrammaticalCase_, 15);
}

uint64_t closure #13 in variable initialization expression of suffixHeuristics(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12361195 && a2 == 0xA300000000000000;
  if (v2
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xBC9DEBB49DECLL && a2 == 0xA600000000000000)
  {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

id closure #14 in variable initialization expression of suffixHeuristics(void *a1)
{
  return objc_msgSend(a1, sel_set_adjectival_, 1);
}

void (*specialized static NSMorphology._heuristicMorphology(language:prefix:suffix:featureNamePointer:matchedPrefixPointer:matchedSuffixPointer:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void **a7, unsigned char *a8, char *a9))(void)
{
  uint64_t v68 = a7;
  uint64_t v69 = a8;
  uint64_t v77 = a5;
  uint64_t v78 = a6;
  uint64_t v75 = a3;
  __int16 v76 = a4;
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  swift_bridgeObjectRetain();
  LODWORD(v84) = 0;
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  uint64_t v10 = (void (*)(void))swift_release();
  if (Language <= 0)
  {
    __int16 v80 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    v83[Language] = 0;
    uint64_t v10 = (void (*)(void))MEMORY[0x185301F80](v83);
    __int16 v80 = v10;
    uint64_t v12 = v11;
  }
  MEMORY[0x1F4188790](v10);
  LODWORD(v84) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  swift_release();
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  if ((int)v84 <= 0 && Script > 0)
  {
    v67[Script] = 0;
    uint64_t v14 = MEMORY[0x185301F80](v67);
    uint64_t v15 = v16;
  }
  int v74 = (void (*)(void))v14;
  MEMORY[0x1F4188790](v14);
  LODWORD(v84) = 0;
  String.utf8CString.getter();
  int Country = uloc_getCountry();
  swift_release();
  uint64_t v18 = 0;
  __int16 v19 = 0;
  if ((int)v84 <= 0 && Country > 0)
  {
    v67[Country] = 0;
    uint64_t v18 = MEMORY[0x185301F80](v67, 0);
  }
  __int16 v79 = v19;
  swift_bridgeObjectRelease();
  if (v12)
  {
    Swift::String v20 = String.lowercased()();
    uint64_t countAndFlagsBits = v20._countAndFlagsBits;
    uint64_t object = v20._object;
    uint64_t v23 = v74;
    if (v15)
    {
LABEL_12:
      int v84 = v23;
      uint64_t v85 = v15;
      swift_bridgeObjectRetain_n();
      String.init<A>(_:)();
      Swift::String v24 = String._capitalized()();
      uint64_t v25 = v24._countAndFlagsBits;
      uint64_t v26 = (char *)v24._object;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
  }
  else
  {
    __int16 v80 = 0;
    uint64_t countAndFlagsBits = 0;
    uint64_t object = 0;
    uint64_t v23 = v74;
    if (v15) {
      goto LABEL_12;
    }
  }
  int v74 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
LABEL_15:
  uint64_t v72 = v26;
  uint64_t v73 = v25;
  uint64_t v27 = v79;
  if (v79)
  {
    Swift::String v30 = String.uppercased()();
    uint64_t v29 = v30._object;
    uint64_t v28 = v30._countAndFlagsBits;
    uint64_t v27 = v79;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
  }
  int v84 = v80;
  uint64_t v85 = v12;
  uint64_t v86 = countAndFlagsBits;
  Swift::OpaquePointer v87 = object;
  uint64_t v71 = (void (*)(void))countAndFlagsBits;
  uint64_t v31 = (uint64_t)v74;
  uint64_t v88 = (uint64_t)v74;
  uint64_t v89 = v15;
  uint64_t v90 = v73;
  uint64_t v91 = v72;
  uint64_t v92 = v18;
  unint64_t v93 = v27;
  uint64_t v94 = v28;
  unint64_t v95 = v29;
  if (v12)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v70 = v12;
    __int16 v81 = object;
    uint64_t v82 = (uint64_t)v71;
    uint64_t v32 = v12;
LABEL_22:
    outlined consume of Locale.LanguageCode?((uint64_t)v80, v32);
    outlined consume of Locale.LanguageCode?((uint64_t)v74, v15);
    outlined consume of Locale.LanguageCode?(v18, (uint64_t)v79);
    id v36 = objc_msgSend(objc_allocWithZone((Class)NSMorphology), sel_init);
    uint64_t v37 = one-time initialization token for prefixHeuristics;
    uint64_t v38 = (void (*)(void))v36;
    if (v37 != -1) {
      swift_once();
    }
    uint64_t v39 = (void (*)(void))*((void *)prefixHeuristics._rawValue + 2);
    BOOL v40 = v81;
    int v74 = v38;
    if (!v39)
    {
      int v48 = 0;
      unsigned int v46 = 0;
      goto LABEL_41;
    }
    uint64_t v73 = swift_bridgeObjectRetain();
    uint64_t v41 = (void **)(v73 + 56);
    while (1)
    {
      uint64_t v42 = (uint64_t)*(v41 - 1);
      uint64_t v43 = *v41;
      uint64_t v44 = (uint64_t (*)(uint64_t, void *))v41[1];
      uint64_t v45 = (void (*)(void))v41[5];
      __int16 v79 = (void (*)(void))v41[3];
      __int16 v80 = v45;
      unsigned int v46 = v41[6];
      BOOL v47 = v42 == v82 && v43 == v40;
      if (v47 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        if (v44(v75, v76))
        {
          swift_bridgeObjectRelease();
          uint64_t v38 = v74;
          v79(v74);
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          BOOL v40 = v81;
          if (v46) {
            uint64_t v39 = v80;
          }
          else {
            uint64_t v39 = 0;
          }
          int v48 = 1;
LABEL_41:
          uint64_t v49 = a9;
          if (one-time initialization token for suffixHeuristics != -1) {
            swift_once();
          }
          __int16 v76 = v46;
          uint64_t v50 = *((void *)suffixHeuristics._rawValue + 2);
          if (v50)
          {
            uint64_t v71 = v39;
            uint64_t v72 = a9;
            LODWORD(v73) = v48;
            uint64_t v75 = swift_bridgeObjectRetain();
            unsigned int v51 = (void **)(v75 + 56);
            while (1)
            {
              uint64_t v52 = (uint64_t)*(v51 - 1);
              uint64_t v54 = *v51;
              uint64_t v53 = (uint64_t (*)(uint64_t, uint64_t))v51[1];
              uint64_t v55 = (void (*)(void))v51[3];
              __int16 v79 = (void (*)(void))v51[5];
              __int16 v80 = v55;
              uint64_t v56 = v51[6];
              BOOL v57 = v52 == v82 && v54 == v40;
              if (v57 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_retain();
                swift_retain();
                if (v53(v77, v78))
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v38 = v74;
                  v80(v74);
                  swift_release();
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  char v58 = 1;
                  if (v56)
                  {
                    swift_bridgeObjectRelease();
                    *uint64_t v69 = v73;
                    *uint64_t v72 = 1;
LABEL_61:
                    swift_bridgeObjectRetain();
                    id v61 = objc_allocWithZone((Class)NSString);
                    uint64_t v62 = String._bridgeToObjectiveCImpl()();
                    swift_bridgeObjectRelease();
                    id v63 = objc_msgSend(v61, sel_initWithString_, v62);
                    swift_unknownObjectRelease();
                    __int16 v64 = *v68;
                    *uint64_t v68 = v63;

LABEL_62:
                    unsigned int v65 = -[NSMorphology isIdentity](v38);

                    swift_bridgeObjectRelease();
                    if (v65)
                    {

                      return 0;
                    }
                    return v38;
                  }
                  __int16 v59 = v69;
                  unint64_t v60 = v76;
                  uint64_t v49 = v72;
                  LOBYTE(v48) = v73;
LABEL_57:
                  *__int16 v59 = v48;
                  *uint64_t v49 = v58;
                  if (v60) {
                    goto LABEL_61;
                  }
                  goto LABEL_62;
                }
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                BOOL v40 = v81;
              }
              v51 += 10;
              if (!--v50)
              {
                swift_bridgeObjectRelease();
                uint64_t v38 = v74;
                LOBYTE(v48) = v73;
                uint64_t v49 = v72;
                break;
              }
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          char v58 = 0;
          __int16 v59 = v69;
          unint64_t v60 = v76;
          goto LABEL_57;
        }
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        BOOL v40 = v81;
      }
      v41 += 10;
      uint64_t v39 = (void (*)(void))((char *)v39 - 1);
      if (!v39)
      {
        swift_bridgeObjectRelease();
        int v48 = 0;
        unsigned int v46 = 0;
        uint64_t v38 = v74;
        goto LABEL_41;
      }
    }
  }
  uint64_t v33 = (uint64_t)v27;
  outlined copy of Locale.LanguageCode?((uint64_t)v80, 0);
  outlined copy of Locale.LanguageCode?(v31, v15);
  outlined copy of Locale.LanguageCode?(v18, v33);
  uint64_t v82 = specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)&v84);
  uint64_t v70 = v34;
  outlined consume of Locale.LanguageCode?((uint64_t)v80, 0);
  outlined consume of Locale.LanguageCode?(v31, v15);
  outlined consume of Locale.LanguageCode?(v18, v33);
  if (v70)
  {
    Swift::String v35 = String.lowercased()();
    __int16 v81 = v35._object;
    uint64_t v82 = v35._countAndFlagsBits;
    uint64_t v32 = 0;
    goto LABEL_22;
  }
  outlined consume of Locale.LanguageCode?((uint64_t)v80, 0);
  outlined consume of Locale.LanguageCode?(v31, v15);
  outlined consume of Locale.LanguageCode?(v18, (uint64_t)v79);
  return 0;
}

ValueMetadata *type metadata accessor for PrefixInflectionHeuristic()
{
  return &type metadata for PrefixInflectionHeuristic;
}

uint64_t destroy for PrefixInflectionHeuristic()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PrefixInflectionHeuristic(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PrefixInflectionHeuristic(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[7];
  a1[6] = a2[6];
  a1[7] = v5;
  swift_retain();
  swift_release();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PrefixInflectionHeuristic(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  uint64_t v5 = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = v5;
  swift_release();
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PrefixInflectionHeuristic(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PrefixInflectionHeuristic(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SuffixInflectionHeuristic()
{
  return &type metadata for SuffixInflectionHeuristic;
}

uint64_t specialized closure #2 in static Set._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, void *a3)
{
  outlined init with copy of Any(a1, (uint64_t)v8);
  uint64_t result = swift_dynamicCast();
  uint64_t v5 = (void *)*a3;
  if (*(void *)(*a3 + 16) >= a3[1])
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of AnyHashable((uint64_t)v7, (uint64_t)v6);
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v6, v5);
    return outlined destroy of AnyHashable((uint64_t)v7);
  }
  return result;
}

uint64_t sub_181BCA370()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_181BCA380()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181BCA390()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_181BCA3A0()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

unint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance Set<A>(void *a1, unint64_t *a2, uint64_t a3)
{
  return static Set._forceBridgeFromObjectiveC(_:result:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

unint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Set<A>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = static Set._unconditionallyBridgeFromObjectiveC(_:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
  *a3 = result;
  return result;
}

uint64_t NSSet._toCustomAnyHashable()()
{
  Swift::String v1 = v0;
  swift_unknownObjectRetain();
  uint64_t v2 = static Set._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v2)
  {
    uint64_t v3 = v2;
LABEL_9:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v13[0] = v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<AnyHashable>);
    lazy protocol witness table accessor for type Set<AnyHashable> and conformance Set<A>();
    return AnyHashable.init<A>(_:)();
  }
  id v4 = objc_msgSend(v0, sel_count);
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyHashable>);
    uint64_t v5 = static _SetStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v5 = MEMORY[0x1E4FBC870];
  }
  uint64_t v14 = v5;
  id v15 = v4;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = &v14;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for specialized closure #2 in static Set._forceBridgeFromObjectiveC(_:result:);
  *(void *)(v7 + 24) = v6;
  uint64_t v13[4] = thunk for @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  v13[5] = v7;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1107296256;
  _OWORD v13[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v13[3] = &block_descriptor_23;
  Swift::String v8 = _Block_copy(v13);
  swift_retain();
  swift_release();
  objc_msgSend(v1, sel_enumerateObjectsUsingBlock_, v8);
  _Block_release(v8);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = v14;
    id v11 = v15;
    id v12 = *(id *)(v14 + 16);
    uint64_t result = swift_release();
    if (v12 == v11)
    {
      swift_bridgeObjectRetain();
      goto LABEL_9;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_181BCA604()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for specialized closure #2 in static Set._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2)
{
  return specialized closure #2 in static Set._forceBridgeFromObjectiveC(_:result:)(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_181BCA61C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

unint64_t lazy protocol witness table accessor for type Set<AnyHashable> and conformance Set<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Set<AnyHashable> and conformance Set<A>;
  if (!lazy protocol witness table cache variable for type Set<AnyHashable> and conformance Set<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<AnyHashable>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Set<AnyHashable> and conformance Set<A>);
  }
  return result;
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSSet()
{
  id v1 = *v0;
  NSSet._toCustomAnyHashable()();
}

id NSSet.init(set:)(void *a1)
{
  id result = objc_msgSend(a1, sel_count);
  if (((unint64_t)result - 0x1000000000000000) >> 61 == 7)
  {
    id v3 = result;
    id v4 = (const void **)swift_slowAlloc();
    CFSetGetValues((CFSetRef)a1, v4);
    id v5 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithObjects_count_, v4, v3);
    MEMORY[0x185309510](v4, -1, -1);
    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t NSSet.customMirror.getter()
{
  type metadata accessor for NSObject();
  lazy protocol witness table accessor for type NSObject and conformance NSObject();
  swift_unknownObjectRetain();
  if (!static Set._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)()) {
    objc_msgSend(v0, sel_copyWithZone_, 0);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<NSObject>);
  return Mirror.init(reflecting:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance NSSet()
{
  return NSSet.customMirror.getter();
}

uint64_t protocol witness for CVarArg._cVarArgEncoding.getter in conformance Set<A>()
{
  swift_getWitnessTable();

  return CVarArg<>._cVarArgEncoding.getter();
}

uint64_t _NativeSet._unsafeUpdate(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = v2;
  uint64_t v7 = *v2;
  uint64_t v9 = *(void *)(v8 + 24);
  uint64_t v30 = v10;
  uint64_t v28 = v9;
  uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v13 = result & ~v12;
  uint64_t v29 = v7;
  uint64_t v27 = v7 + 56;
  uint64_t v14 = *(void *)(v7 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13;
  uint64_t v25 = v4;
  if (v14)
  {
    uint64_t v15 = ~v12;
    uint64_t v18 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v17 = v4 + 16;
    uint64_t v16 = v18;
    uint64_t v19 = *(void *)(v17 + 56);
    while (1)
    {
      v16(v6, *(void *)(v29 + 48) + v19 * v13, v3);
      char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v17 - 8))(v6, v3);
      if (v20) {
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v25 + 40))(*(void *)(*v26 + 48) + v19 * v13, v30, v3);
      }
      unint64_t v13 = (v13 + 1) & v15;
      if (((*(void *)(v27 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t v21 = *v26;
    if (*(void *)(*v26 + 16) >= *(void *)(*v26 + 24))
    {
      __break(1u);
    }
    else
    {
      *(void *)(v21 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v13;
      uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v25 + 32))(*(void *)(v21 + 48) + *(void *)(v25 + 72) * v13, v30, v3);
      uint64_t v22 = *(void *)(v21 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (!v23)
      {
        *(void *)(v21 + 16) = v24;
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <A> [A](uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return _sSa15withUnsafeBytesyqd__qd__SWKXEKlFSWxs5Error_pRi_zRi0_zlyqd__Isgyrzo_Says5UInt8VGqd__sAB_pADRszr__lIetMggrzo_Tpq5(a1, a2, *v2);
}

uint64_t _sSa15withUnsafeBytesyqd__qd__SWKXEKlFSWxs5Error_pRi_zRi0_zlyqd__Isgyrzo_Says5UInt8VGqd__sAB_pADRszr__lIetMggrzo_Tpq5(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3 + 32, a3 + 32 + *(void *)(a3 + 16));
}

uint64_t (*protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <A> ArraySlice<A>(uint64_t (*a1)(uint64_t, unint64_t), uint64_t a2))(uint64_t, unint64_t)
{
  return _ss10ArraySliceV15withUnsafeBytesyqd__qd__SWKXEKlFSWxs5Error_pRi_zRi0_zlyqd__Isgyrzo_ABys5UInt8VGqd__sAD_pAFRszr__lIetMggrzo_Tpq5(a1, a2, *(void *)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t (*_ss10ArraySliceV15withUnsafeBytesyqd__qd__SWKXEKlFSWxs5Error_pRi_zRi0_zlyqd__Isgyrzo_ABys5UInt8VGqd__sAD_pAFRszr__lIetMggrzo_Tpq5(uint64_t (*result)(uint64_t, unint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6))(uint64_t, unint64_t)
{
  if (!__OFSUB__(a6 >> 1, a5)) {
    return (uint64_t (*)(uint64_t, unint64_t))result(a4 + a5, a4 + (a6 >> 1));
  }
  __break(1u);
  return result;
}

uint64_t UnsafeRawBufferPointer.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance UnsafeRawBufferPointer(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return UnsafeRawBufferPointer.withUnsafeBytes<A>(_:)(a1, a2, *v2, v2[1]);
}

uint64_t UnsafeMutableRawBufferPointer.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3) {
    uint64_t v4 = a4;
  }
  else {
    uint64_t v4 = 0;
  }
  return a1(a3, v4);
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance UnsafeMutableRawBufferPointer(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.withUnsafeBytes<A>(_:)(a1, a2, *v2, v2[1]);
}

uint64_t UnsafeBufferPointer<A>.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeBufferPointer<A>.withUnsafeBytes<A>(_:)(a1, a2, a3, a4);
}

{
  uint64_t v4;

  if (a3) {
    uint64_t v4 = a3 + a4;
  }
  else {
    uint64_t v4 = 0;
  }
  return a1(a3, v4);
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <A> UnsafeBufferPointer<A>(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return UnsafeBufferPointer<A>.withUnsafeBytes<A>(_:)(a1, a2, *v2, v2[1]);
}

uint64_t UnsafeMutableBufferPointer<A>.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeBufferPointer<A>.withUnsafeBytes<A>(_:)(a1, a2, a3, a4);
}

uint64_t EmptyCollection<A>.withUnsafeBytes<A>(_:)(uint64_t (*a1)(void, void))
{
  return a1(0, 0);
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <A> EmptyCollection<A>(uint64_t (*a1)(void, void))
{
  return EmptyCollection<A>.withUnsafeBytes<A>(_:)(a1);
}

uint64_t CollectionOfOne<A>.withUnsafeBytes<A>(_:)(uint64_t (*a1)(char *, uint64_t *), uint64_t a2, char a3)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  char v4 = a3;
  return a1(&v4, &v5);
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <A> CollectionOfOne<A>(uint64_t (*a1)(char *, uint64_t *), uint64_t a2)
{
  return CollectionOfOne<A>.withUnsafeBytes<A>(_:)(a1, a2, *v2);
}

uint64_t Slice<>.withUnsafeBytes<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v27 = a6;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v22 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](a1);
  id v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v17 = (char *)&v22 - v16;
  uint64_t v18 = v7 + *(int *)(a3 + 40);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v19 = dispatch thunk of Collection.distance(from:to:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, AssociatedTypeWitness);
  uint64_t v20 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v11, v18, v9);
  uint64_t v29 = v9;
  uint64_t v30 = v23;
  uint64_t v31 = v24;
  uint64_t v32 = v13;
  uint64_t v33 = v19;
  uint64_t v34 = v7;
  uint64_t v35 = v25;
  uint64_t v36 = v26;
  (*(void (**)(uint64_t (*)(uint64_t), unsigned char *))(v24 + 8))(partial apply for closure #1 in Slice<>.withUnsafeBytes<A>(_:), v28);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v11, v9);
}

uint64_t partial apply for closure #1 in Slice<>.withUnsafeBytes<A>(_:)(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 64);
  if (a1) {
    uint64_t v3 = a1 + *(void *)(v1 + 48);
  }
  else {
    uint64_t v3 = 0;
  }
  type metadata accessor for Slice();
  uint64_t v4 = dispatch thunk of Collection.distance(from:to:)();
  if (v3) {
    uint64_t v5 = v3 + v4;
  }
  else {
    uint64_t v5 = 0;
  }
  return v2(v3, v5);
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <> Slice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Slice<>.withUnsafeBytes<A>(_:)(a1, a2, a4, a3, *(void *)(a5 - 8), a6);
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <A> ContiguousArray<A>(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <A> [A](a1, a2);
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <A> UnsafeMutableBufferPointer<A>(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <A> UnsafeBufferPointer<A>(a1, a2);
}

uint64_t PredicateBindings.subscript.setter(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v41 - v9;
  uint64_t v47 = a3;
  uint64_t v11 = *(void *)(a3 - 8);
  v13.n128_f64[0] = MEMORY[0x1F4188790](v12);
  uint64_t v44 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = v3;
  uint64_t v15 = *a2;
  uint64_t v16 = *v3;
  uint64_t v17 = (*v3)[2];
  uint64_t v46 = v11;
  if (v17)
  {
    uint64_t v42 = v8;
    uint64_t v43 = v7;
    uint64_t v18 = a1;
    uint64_t v19 = (uint64_t)(v16 + 4);
    swift_bridgeObjectRetain();
    unint64_t v20 = 0;
    while (1)
    {
      outlined init with copy of (id: PredicateExpressions.VariableID, value: Any)(v19, (uint64_t)&v50);
      uint64_t v21 = v50;
      outlined destroy of Any?((uint64_t)&v50, &demangling cache variable for type metadata for (id: PredicateExpressions.VariableID, value: Any));
      if (v21 == v15) {
        break;
      }
      ++v20;
      v19 += 40;
      if (v17 == v20)
      {
        swift_bridgeObjectRelease();
        unint64_t v20 = 0;
        int v22 = 1;
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    int v22 = 0;
LABEL_8:
    a1 = v18;
    uint64_t v8 = v42;
    uint64_t v7 = v43;
    uint64_t v11 = v46;
  }
  else
  {
    unint64_t v20 = 0;
    int v22 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))(v10, a1, v7, v13);
  uint64_t v23 = v47;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v47) == 1)
  {
    uint64_t v24 = *(void (**)(char *, uint64_t))(v8 + 8);
    v24(v10, v7);
    if (v22)
    {
      return ((uint64_t (*)(uint64_t, uint64_t))v24)(a1, v7);
    }
    else
    {
      specialized Array.remove(at:)(v20, (uint64_t)&v50);
      v24((char *)a1, v7);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50 + 8);
    }
  }
  else
  {
    uint64_t v43 = a1;
    uint64_t v26 = v44;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v44, v10, v23);
    uint64_t v27 = (void (**)(uint64_t *, char *, uint64_t))(v11 + 16);
    if (v22)
    {
      uint64_t v49 = v23;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v48);
      (*v27)(boxed_opaque_existential_1, v26, v23);
      *(void *)&long long v50 = v15;
      outlined init with take of Any(&v48, (long long *)((char *)&v50 + 8));
      uint64_t v29 = v45;
      uint64_t v30 = *v45;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
      }
      uint64_t v31 = v46;
      uint64_t v32 = v43;
      unint64_t v34 = v30[2];
      unint64_t v33 = v30[3];
      if (v34 >= v33 >> 1) {
        uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v34 + 1, 1, v30);
      }
      void v30[2] = v34 + 1;
      uint64_t v35 = &v30[5 * v34];
      long long v36 = v50;
      long long v37 = v51;
      v35[8] = v52;
      *((_OWORD *)v35 + 2) = v36;
      *((_OWORD *)v35 + 3) = v37;
      *uint64_t v29 = v30;
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v32, v7);
      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v26, v47);
    }
    else
    {
      *((void *)&v51 + 1) = v23;
      uint64_t v38 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v50);
      (*v27)(v38, v26, v23);
      uint64_t v39 = (uint64_t *)v45;
      BOOL v40 = *v45;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      uint64_t *v39 = (uint64_t)v40;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v40);
        BOOL v40 = (void *)result;
        uint64_t *v39 = result;
      }
      if (v20 >= v40[2])
      {
        __break(1u);
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40[5 * v20 + 5]);
        outlined init with take of Any(&v50, &v40[5 * v20 + 5]);
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v43, v7);
        return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v26, v23);
      }
    }
  }
  return result;
}

uint64_t key path setter for PredicateBindings.subscript<A>(_:) : <A>PredicateBindingsA(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = *(uint64_t *)((char *)a3 + a4 - 8);
  uint64_t v7 = type metadata accessor for Optional();
  double v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v14 - v9;
  uint64_t v11 = *a3;
  (*(void (**)(char *, uint64_t, double))(v12 + 16))((char *)&v14 - v9, a1, v8);
  uint64_t v15 = v11;
  return PredicateBindings.subscript.setter((uint64_t)v10, &v15, v6);
}

void (*PredicateBindings.subscript.modify(void *a1, uint64_t *a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  void *v7 = a3;
  v7[1] = v3;
  uint64_t v8 = type metadata accessor for Optional();
  void v7[2] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[3] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[4] = malloc(v10);
  uint64_t v11 = malloc(v10);
  uint64_t v12 = *a2;
  v7[5] = v11;
  v7[6] = v12;
  uint64_t v13 = *v3;
  v15[0] = v12;
  v15[1] = v13;
  PredicateBindings.subscript.getter(v15, a3, (uint64_t)v11);
  return PredicateBindings.subscript.modify;
}

void PredicateBindings.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[5];
  uint64_t v4 = (*a1)[6];
  uint64_t v5 = (void *)(*a1)[4];
  if (a2)
  {
    uint64_t v6 = v2[2];
    uint64_t v7 = v2[3];
    uint64_t v8 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v7 + 16))((*a1)[4], v3, v6);
    uint64_t v10 = v4;
    PredicateBindings.subscript.setter((uint64_t)v5, &v10, v8);
    (*(void (**)(void *, uint64_t))(v7 + 8))(v3, v6);
  }
  else
  {
    uint64_t v9 = *v2;
    uint64_t v10 = (*a1)[6];
    PredicateBindings.subscript.setter((uint64_t)v3, &v10, v9);
  }
  free(v3);
  free(v5);

  free(v2);
}

uint64_t PredicateBindings.binding<A>(_:to:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = type metadata accessor for Optional();
  v10.n128_f64[0] = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v12 = (char *)&v16 - v11;
  uint64_t v13 = *a1;
  *a4 = *v4;
  uint64_t v14 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16))((char *)&v16 - v11, a2, a3, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, a3);
  uint64_t v17 = v13;
  swift_bridgeObjectRetain();
  return PredicateBindings.subscript.setter((uint64_t)v12, &v17, a3);
}

uint64_t sub_181BCB96C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 8);
  uint64_t v5 = *a1;
  v7[0] = *a2;
  v7[1] = v5;
  return PredicateBindings.subscript.getter(v7, v4, a4);
}

uint64_t sub_181BCB9B8()
{
  return 8;
}

void *sub_181BCB9C4(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t closure #1 in setupThermalStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.thermalState.getter(int a1)
{
  state64[1] = *MEMORY[0x1E4F143B8];
  state64[0] = 0;
  uint64_t result = notify_get_state(a1, state64);
  if (!result)
  {
    uint64_t v2 = specialized static _NSSwiftProcessInfo._mapOSThermalToThermalState(_:)(state64[0]);
    if (one-time initialization token for _globalState != -1) {
      uint64_t v2 = swift_once();
    }
    uint64_t v3 = (os_unfair_lock_s *)static _NSSwiftProcessInfo._globalState;
    MEMORY[0x1F4188790](v2);
    swift_retain();
    os_unfair_lock_lock(v3 + 11);
    partial apply for closure #1 in closure #1 in setupThermalStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.thermalState.getter((uint64_t)&v3[4]);
    os_unfair_lock_unlock(v3 + 11);
    return swift_release();
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Int32) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t destroy for _NSSwiftProcessInfo.State(uint64_t result)
{
  if (*(void *)(result + 32)) {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for _NSSwiftProcessInfo.State(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v4;
    *(void *)(a1 + 40) = v5;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for _NSSwiftProcessInfo.State(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = (_OWORD *)(a1 + 32);
  uint64_t v6 = (_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v5)
    {
      uint64_t v8 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v5;
      *(void *)(a1 + 40) = v8;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    _OWORD *v4 = *v6;
    goto LABEL_8;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v7;
  swift_retain();
  swift_release();
LABEL_8:
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for _NSSwiftProcessInfo.State(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = (_OWORD *)(a1 + 32);
  uint64_t v6 = (_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v5)
    {
      uint64_t v8 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v5;
      *(void *)(a1 + 40) = v8;
      goto LABEL_8;
    }
LABEL_7:
    _OWORD *v4 = *v6;
    goto LABEL_8;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v7;
  swift_release();
LABEL_8:
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for _NSSwiftProcessInfo.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _NSSwiftProcessInfo.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 57) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

uint64_t specialized closure #1 in setupPowerStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.isLowPowerModeEnabled.getter(int a1)
{
  state64[1] = *MEMORY[0x1E4F143B8];
  state64[0] = 0;
  uint64_t result = notify_get_state(a1, state64);
  if (!result)
  {
    if (one-time initialization token for _globalState != -1) {
      uint64_t result = swift_once();
    }
    uint64_t v2 = (os_unfair_lock_s *)static _NSSwiftProcessInfo._globalState;
    MEMORY[0x1F4188790](result);
    swift_retain();
    os_unfair_lock_lock(v2 + 11);
    partial apply for closure #1 in closure #1 in setupPowerStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.isLowPowerModeEnabled.getter((uint64_t)&v2[4]);
    os_unfair_lock_unlock(v2 + 11);
    return swift_release();
  }
  return result;
}

void specialized _NSSwiftProcessInfo.performActivity(options:reason:block:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v6 = a4;
  if (!a3)
  {
    uint64_t v8 = 0;
    if (!a4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v8 = (void *)String._bridgeToObjectiveCImpl()();
  if (v6)
  {
LABEL_3:
    void v9[4] = v6;
    v9[5] = a5;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    v9[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v9[3] = &block_descriptor_18;
    uint64_t v6 = _Block_copy(v9);
    swift_retain();
    swift_release();
  }
LABEL_4:
  objc_msgSend(self, sel__performActivityWithOptions_reason_usingBlock_, a1, v8, v6);
  _Block_release(v6);
}

uint64_t partial apply for closure #1 in _NSSwiftProcessInfo._setShouldRelaunchDue(toAutomaticTerminationStateChangedHandler:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3) {
    uint64_t v4 = *(void *)(v1 + 24);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v5);
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  return result;
}

uint64_t sub_181BCC3F4()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable () -> ()()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t partial apply for closure #1 in closure #1 in setupPowerStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.isLowPowerModeEnabled.getter(uint64_t result)
{
  char v2 = *(unsigned char *)(v1 + 20);
  *(_DWORD *)(result + 20) = *(_DWORD *)(v1 + 16);
  *(unsigned char *)(result + 24) = 0;
  *(unsigned char *)(result + 17) = v2;
  return result;
}

uint64_t sub_181BCC454()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in setupThermalStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.thermalState.getter(int a1)
{
  return closure #1 in setupThermalStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.thermalState.getter(a1);
}

uint64_t partial apply for closure #1 in closure #1 in setupThermalStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.thermalState.getter(uint64_t result)
{
  int v2 = *(_DWORD *)(v1 + 24);
  *(void *)uint64_t result = *(void *)(v1 + 16);
  *(unsigned char *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v2;
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) () -> ()()
{
  return thunk for @escaping @callee_unowned @convention(block) () -> ()(*(void *)(v0 + 16));
}

uint64_t getEnumTagSinglePayload for _NSSwiftProcessInfo.GlobalState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 254);
  }
  if (*(unsigned __int8 *)(a1 + 17) <= 2u) {
    int v3 = 2;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 17);
  }
  int v4 = v3 - 3;
  if (*(unsigned __int8 *)(a1 + 17) < 2u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _NSSwiftProcessInfo.GlobalState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 17) = a2 + 2;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for _NSSwiftProcessInfo.PowerState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    char *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181BCC5F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _NSSwiftProcessInfo.PowerState()
{
  return &type metadata for _NSSwiftProcessInfo.PowerState;
}

unint64_t lazy protocol witness table accessor for type _NSSwiftProcessInfo.PowerState and conformance _NSSwiftProcessInfo.PowerState()
{
  unint64_t result = lazy protocol witness table cache variable for type _NSSwiftProcessInfo.PowerState and conformance _NSSwiftProcessInfo.PowerState;
  if (!lazy protocol witness table cache variable for type _NSSwiftProcessInfo.PowerState and conformance _NSSwiftProcessInfo.PowerState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NSSwiftProcessInfo.PowerState and conformance _NSSwiftProcessInfo.PowerState);
  }
  return result;
}

Swift::Int_optional __swiftcall _CalendarAutoupdating.ordinality(of:in:for:)(Foundation::Calendar::Component of, Foundation::Calendar::Component in, Foundation::Date a3)
{
  Swift::Int v4 = specialized _CalendarAutoupdating.ordinality(of:in:for:)((char *)of, (char *)in, v3);
  Swift::Bool v6 = v5 & 1;
  result.Swift::UInt8 value = v4;
  result.is_nil = v6;
  return result;
}

uint64_t _CalendarAutoupdating.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void protocol witness for _CalendarProtocol.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:) in conformance _CalendarAutoupdating()
{
}

uint64_t protocol witness for _CalendarProtocol.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:) in conformance _CalendarAutoupdating(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  return specialized _CalendarAutoupdating.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)(a1, a2, a3, a4 & 1, a5, a6 & 1);
}

void protocol witness for _CalendarProtocol.hash(into:) in conformance _CalendarAutoupdating()
{
}

uint64_t protocol witness for _CalendarProtocol.minimumRange(of:) in conformance _CalendarAutoupdating(char *a1)
{
  return specialized _CalendarAutoupdating.minimumRange(of:)(a1);
}

uint64_t protocol witness for _CalendarProtocol.maximumRange(of:) in conformance _CalendarAutoupdating(char *a1)
{
  return specialized _CalendarAutoupdating.maximumRange(of:)(a1);
}

uint64_t protocol witness for _CalendarProtocol.range(of:in:for:) in conformance _CalendarAutoupdating(char *a1, char *a2, uint64_t *a3)
{
  return specialized _CalendarAutoupdating.range(of:in:for:)(a1, a2, a3);
}

unint64_t protocol witness for _CalendarProtocol.ordinality(of:in:for:) in conformance _CalendarAutoupdating(Foundation::Calendar::Component a1, Foundation::Calendar::Component a2, double a3)
{
  return (unint64_t)_CalendarAutoupdating.ordinality(of:in:for:)(a1, a2, *(Foundation::Date *)&a3);
}

uint64_t protocol witness for _CalendarProtocol.isDateInWeekend(_:) in conformance _CalendarAutoupdating(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  int v2 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v2);
  closure #1 in CalendarCache.current.getter(v6);
  os_unfair_lock_unlock(v2);
  swift_release_n();
  uint64_t v3 = v6[1];
  uint64_t ObjectType = swift_getObjectType();
  v6[0] = v1;
  LOBYTE(v3) = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v3 + 168))(v6, ObjectType, v3);
  swift_unknownObjectRelease();
  return v3 & 1;
}

uint64_t specialized _CalendarAutoupdating.maximumRange(of:)(char *a1)
{
  char v1 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  int v2 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v2);
  closure #1 in CalendarCache.current.getter(v7);
  os_unfair_lock_unlock(v2);
  swift_release_n();
  uint64_t v3 = v7[1];
  uint64_t ObjectType = swift_getObjectType();
  LOBYTE(v7[0]) = v1;
  uint64_t v5 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v3 + 136))(v7, ObjectType, v3);
  swift_unknownObjectRelease();
  return v5;
}

uint64_t specialized _CalendarAutoupdating.minimumRange(of:)(char *a1)
{
  char v1 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  int v2 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v2);
  closure #1 in CalendarCache.current.getter(v7);
  os_unfair_lock_unlock(v2);
  swift_release_n();
  uint64_t v3 = v7[1];
  uint64_t ObjectType = swift_getObjectType();
  LOBYTE(v7[0]) = v1;
  uint64_t v5 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v3 + 128))(v7, ObjectType, v3);
  swift_unknownObjectRelease();
  return v5;
}

uint64_t specialized _CalendarAutoupdating.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v12 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v12);
  closure #1 in CalendarCache.current.getter(&v21);
  uint64_t v13 = a4 & 1;
  os_unfair_lock_unlock(v12);
  swift_release_n();
  uint64_t v14 = v22;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v21 = v8;
  uint64_t v22 = v9;
  v20[0] = v10;
  v20[1] = v11;
  uint64_t v16 = (*(uint64_t (**)(uint64_t *, void *, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(v14 + 112))(&v21, v20, a3, v13, a5, a6 & 1, ObjectType, v14);
  swift_unknownObjectRelease();
  return v16;
}

uint64_t specialized _CalendarAutoupdating.range(of:in:for:)(char *a1, char *a2, uint64_t *a3)
{
  char v3 = *a1;
  char v4 = *a2;
  uint64_t v5 = *a3;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  Swift::Bool v6 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in CalendarCache.current.getter(v13);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  uint64_t v7 = v13[1];
  uint64_t ObjectType = swift_getObjectType();
  v12[0] = v3;
  char v11 = v4;
  v13[0] = v5;
  uint64_t v9 = (*(uint64_t (**)(unsigned char *, char *, uint64_t *, uint64_t, uint64_t))(v7 + 144))(v12, &v11, v13, ObjectType, v7);
  swift_unknownObjectRelease();
  return v9;
}

uint64_t specialized _CalendarAutoupdating.debugDescription.getter()
{
  uint64_t v6 = 0;
  unint64_t v7 = 0xE000000000000000;
  v0._uint64_t countAndFlagsBits = 0x616470756F747561;
  v0._uint64_t object = (void *)0xED000020676E6974;
  String.append(_:)(v0);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  char v1 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in CalendarCache.current.getter(v5);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  uint64_t v2 = v5[1];
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 24))(v5, ObjectType, v2);
  swift_unknownObjectRelease();
  _print_unlocked<A, B>(_:_:)();
  return v6;
}

uint64_t specialized _CalendarAutoupdating.ordinality(of:in:for:)(char *a1, char *a2, uint64_t *a3)
{
  char v3 = *a1;
  char v4 = *a2;
  uint64_t v5 = *a3;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v6 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in CalendarCache.current.getter(v13);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  uint64_t v7 = v13[1];
  uint64_t ObjectType = swift_getObjectType();
  v12[0] = v3;
  char v11 = v4;
  v13[0] = v5;
  uint64_t v9 = (*(uint64_t (**)(unsigned char *, char *, uint64_t *, uint64_t, uint64_t))(v7 + 152))(v12, &v11, v13, ObjectType, v7);
  swift_unknownObjectRelease();
  return v9;
}

id NSData.lastRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return NSData.lastRange<A, B>(of:in:)(a1, a2, a3, a4, a5, a6, 1);
}

id NSData.firstRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return NSData.lastRange<A, B>(of:in:)(a1, a2, a3, a4, a5, a6, 0);
}

id NSData.lastRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v20 + 16))(v19, v17);
  uint64_t v21 = Data.init<A>(_:)((uint64_t)v19, a3, *(void *)(*(void *)(*(void *)(*(void *)(a5 + 8) + 8) + 8) + 8));
  uint64_t v23 = v21;
  unint64_t v24 = v22;
  id v35 = v7;
  uint64_t v36 = a2;
  switch(v22 >> 62)
  {
    case 1uLL:
      uint64_t v21 = (int)v21;
      if (v23 >> 32 < (int)v23) {
        goto LABEL_16;
      }
      uint64_t v25 = __DataStorage.bridgedReference(_:)(v21, v23 >> 32);
LABEL_7:
      uint64_t v28 = v25;
LABEL_8:
      outlined consume of Data._Representation(v23, v24);
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v36, a4);
      long long v37 = xmmword_182180400;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
      dispatch thunk of RangeExpression.relative<A>(to:)();
      uint64_t v29 = v38;
      uint64_t v30 = v39 - v38;
      if (__OFSUB__(v39, v38))
      {
        __break(1u);
        goto LABEL_15;
      }
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, a4);
      id v31 = objc_msgSend(v35, sel_rangeOfData_options_range_, v28, a7, v29, v30);
      uint64_t v33 = v32;

      if (v31 == (id)0x7FFFFFFFFFFFFFFFLL) {
        return 0;
      }
      if (__OFADD__(v31, v33))
      {
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
      }
      return v31;
    case 2uLL:
      uint64_t v27 = *(void *)(v21 + 16);
      uint64_t v26 = *(void *)(v21 + 24);
      swift_retain();
      swift_retain();
      uint64_t v28 = __DataStorage.bridgedReference(_:)(v27, v26);
      swift_release();
      swift_release();
      goto LABEL_8;
    case 3uLL:
      uint64_t v25 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
      goto LABEL_7;
    default:
      uint64_t v38 = v21;
      LOWORD(v39) = v22;
      BYTE2(v39) = BYTE2(v22);
      BYTE3(v39) = BYTE3(v22);
      BYTE4(v39) = BYTE4(v22);
      BYTE5(v39) = BYTE5(v22);
      uint64_t v25 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, &v38, BYTE6(v22));
      goto LABEL_7;
  }
}

uint64_t NSData.regions.getter()
{
  uint64_t v8 = MEMORY[0x1E4FBC860];
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = &v8;
  *(void *)(v1 + 24) = v0;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = partial apply for closure #1 in NSData.regions.getter;
  *(void *)(v2 + 24) = v1;
  aBlock[4] = partial apply for thunk for @callee_guaranteed (@unowned UnsafeRawPointer, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[5] = v2;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeRawPointer, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_6;
  char v3 = _Block_copy(aBlock);
  id v4 = v0;
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_enumerateByteRangesUsingBlock_, v3);
  _Block_release(v3);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v4)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = v8;
    swift_release();
    return v6;
  }
  return result;
}

uint64_t closure #1 in NSData.regions.getter(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void *a6)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a6;
  if (a3)
  {
    type metadata accessor for __DataStorage();
    swift_allocObject();
    id v11 = a6;
    swift_retain();
    uint64_t v12 = (void *)__DataStorage.init(bytes:length:copy:deallocator:offset:)(a1, a3, 0, (void (*)(unint64_t, uint64_t))destructiveProjectEnumData for PredicateCodableError, v10, 0);
    uint64_t v13 = specialized Data._Representation.init(_:count:)(v12, a3);
    unint64_t v15 = v14;
    swift_release();
  }
  else
  {
    id v16 = a6;
    swift_release();
    uint64_t v13 = 0;
    unint64_t v15 = 0xC000000000000000;
  }
  double v17 = (void *)*a5;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a5 = (uint64_t)v17;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    double v17 = (void *)result;
    *a5 = result;
  }
  unint64_t v20 = v17[2];
  unint64_t v19 = v17[3];
  if (v20 >= v19 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v17);
    double v17 = (void *)result;
  }
  v17[2] = v20 + 1;
  uint64_t v21 = &v17[2 * v20];
  void v21[4] = v13;
  v21[5] = v15;
  *a5 = (uint64_t)v17;
  return result;
}

uint64_t thunk for @callee_guaranteed (@unowned UnsafeRawPointer, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t closure #1 in NSData.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4, void *a5, uint64_t a6, unsigned char *a7)
{
  uint64_t v7 = *a5 - a2;
  if (__OFSUB__(*a5, a2))
  {
    __break(1u);
    goto LABEL_8;
  }
  *a5 = v7;
  if (a6 < a2) {
    return result;
  }
  if (__OFSUB__(a6, a2))
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (a6 - a2 < a3)
  {
    *a7 = *(unsigned char *)(result + v7);
    *a4 = 1;
  }
  return result;
}

uint64_t protocol witness for DataProtocol.regions.getter in conformance NSData@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NSData.regions.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance NSData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance NSData(a1, (uint64_t (*)(void))NSData.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance NSData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance NSData(a1, (uint64_t (*)(void))NSData.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance NSData@<X0>(uint64_t a1@<X8>, uint64_t (*a2)(void))
{
  uint64_t result = a2();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5 & 1;
  return result;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance NSData@<X0>(void *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t result = objc_msgSend(*v2, sel_length);
    if ((v4 & 0x8000000000000000) == 0 && v4 < (uint64_t)result)
    {
      *a2 = v4;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance NSData(uint64_t *result)
{
  uint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    char v3 = result;
    uint64_t result = (uint64_t *)objc_msgSend(*v1, sel_length);
    if ((v2 & 0x8000000000000000) == 0 && v2 < (uint64_t)result)
    {
      *char v3 = v2;
      return result;
    }
  }
  __break(1u);
  return result;
}

id protocol witness for Collection.endIndex.getter in conformance NSData@<X0>(void *a1@<X8>)
{
  id result = objc_msgSend(*v1, sel_length);
  *a1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance NSData(unsigned char *a1, uint64_t *a2))(void, void)
{
  *a1 = NSData.subscript.getter(*a2);
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t protocol witness for Collection.subscript.getter in conformance NSData@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  id v7 = *v2;
  uint64_t result = (uint64_t)objc_msgSend(*v2, sel_length);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v5 < 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (result < v4)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  *a2 = v5;
  a2[1] = v4;
  a2[2] = v7;

  return (uint64_t)v7;
}

unint64_t protocol witness for Collection.indices.getter in conformance NSData@<X0>(void *a1@<X8>)
{
  unint64_t result = (unint64_t)objc_msgSend(*v1, sel_length);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = result;
  }
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance NSData()
{
  return MEMORY[0x1F4184390]();
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance NSData@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else
  {
    unint64_t result = objc_msgSend(*v3, sel_length);
    if ((v5 & 0x8000000000000000) == 0 && (uint64_t)result >= v5)
    {
      *a3 = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

id protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance NSData@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  id result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

id protocol witness for RandomAccessCollection.distance(from:to:) in conformance NSData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  id v5 = *v2;
  id result = objc_msgSend(*v2, sel_length);
  if (v3 < 0 || (uint64_t)result < v3)
  {
    __break(1u);
  }
  else
  {
    id result = objc_msgSend(v5, sel_length);
    if ((v4 & 0x8000000000000000) == 0 && (uint64_t)result >= v4) {
      return (id)(v4 - v3);
    }
  }
  __break(1u);
  return result;
}

id protocol witness for Collection.index(after:) in conformance NSData@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  id result = objc_msgSend(*v2, sel_length);
  if (v4 < 0 || v4 >= (uint64_t)result) {
    __break(1u);
  }
  else {
    *a2 = v4 + 1;
  }
  return result;
}

id protocol witness for Collection.formIndex(after:) in conformance NSData(uint64_t *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *a1;
  id result = objc_msgSend(v3, sel_length);
  if (v4 < 0 || v4 >= (uint64_t)result) {
    __break(1u);
  }
  else {
    *a1 = v4 + 1;
  }
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance NSData(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance NSData(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance NSData()
{
  uint64_t v1 = *v0;
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);

  return v2;
}

void *protocol witness for Sequence._copyContents(initializing:) in conformance NSData(void *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t sub_181BCDC8C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in NSData.regions.getter(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in NSData.regions.getter(a1, a2, a3, a4, *(uint64_t **)(v4 + 16), *(void **)(v4 + 24));
}

uint64_t sub_181BCDCCC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181BCDCDC()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_181BCDCEC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in NSData()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [Data] and conformance [A], &demangling cache variable for type metadata for [Data]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : DataProtocol in NSData()
{
  return lazy protocol witness table accessor for type Slice<NSData> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<NSData> and conformance <> Slice<A>, &lazy protocol witness table cache variable for type NSData and conformance NSData);
}

_UNKNOWN **associated type witness table accessor for DataProtocol.Regions.Sequence.Element : ContiguousBytes in NSData()
{
  return &protocol witness table for Data;
}

uint64_t instantiation function for generic protocol witness table for NSData(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type NSData and conformance NSData(&lazy protocol witness table cache variable for type NSData and conformance NSData);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for BidirectionalCollection in NSData()
{
  return lazy protocol witness table accessor for type NSData and conformance NSData(&lazy protocol witness table cache variable for type NSData and conformance NSData);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in NSData()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in NSData()
{
  return lazy protocol witness table accessor for type Slice<NSData> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<NSData> and conformance <> Slice<A>, &lazy protocol witness table cache variable for type NSData and conformance NSData);
}

uint64_t lazy protocol witness table accessor for type Slice<NSData> and conformance <> Slice<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<NSData>);
    lazy protocol witness table accessor for type NSData and conformance NSData(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Collection in NSData()
{
  return lazy protocol witness table accessor for type NSData and conformance NSData(&lazy protocol witness table cache variable for type NSData and conformance NSData);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in NSData()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in NSData()
{
  return lazy protocol witness table accessor for type Slice<NSData> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<NSData> and conformance <> Slice<A>, &lazy protocol witness table cache variable for type NSData and conformance NSData);
}

uint64_t base witness table accessor for Sequence in NSData()
{
  return lazy protocol witness table accessor for type NSData and conformance NSData(&lazy protocol witness table cache variable for type NSData and conformance NSData);
}

uint64_t lazy protocol witness table accessor for type NSData and conformance NSData(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NSData();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in NSData()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in NSData()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Slice<NSData> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<NSData>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in NSData()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<NSData> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<NSData>);
}

uint64_t sub_181BCE1B4()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t KeyPath._unsafeAssumeSendable.getter()
{
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  return v1;
}

BOOL static PredicateExpressions.VariableID.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

void PredicateError._Error.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  switch(a4)
  {
    case 1:
      Hasher._combine(_:)(2uLL);
      if (!a3) {
        goto LABEL_11;
      }
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      uint64_t v6 = a2;
      uint64_t v7 = a3;
      unsigned __int8 v8 = 1;
      goto LABEL_8;
    case 2:
      Hasher._combine(_:)(3uLL);
      if (!a3) {
        goto LABEL_11;
      }
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      uint64_t v6 = a2;
      uint64_t v7 = a3;
      unsigned __int8 v8 = 2;
      goto LABEL_8;
    case 3:
      Hasher._combine(_:)(0);
      return;
    default:
      Hasher._combine(_:)(1uLL);
      if (a3)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        uint64_t v6 = a2;
        uint64_t v7 = a3;
        unsigned __int8 v8 = 0;
LABEL_8:
        outlined consume of PredicateError._Error(v6, v7, v8);
      }
      else
      {
LABEL_11:
        Hasher._combine(_:)(0);
      }
      return;
  }
}

Swift::Int PredicateError._Error.hashValue.getter(uint64_t a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 1:
      Hasher._combine(_:)(2uLL);
      if (!a2) {
        goto LABEL_8;
      }
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      outlined consume of PredicateError._Error(a1, a2, 1u);
      break;
    case 2:
      Hasher._combine(_:)(3uLL);
      if (!a2) {
        goto LABEL_8;
      }
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      outlined consume of PredicateError._Error(a1, a2, 2u);
      break;
    case 3:
      Hasher._combine(_:)(0);
      break;
    default:
      Hasher._combine(_:)(1uLL);
      if (a2)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        outlined consume of PredicateError._Error(a1, a2, 0);
      }
      else
      {
LABEL_8:
        Hasher._combine(_:)(0);
      }
      break;
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PredicateError._Error()
{
  return PredicateError._Error.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

void protocol witness for Hashable.hash(into:) in conformance PredicateError._Error(uint64_t a1)
{
  PredicateError._Error.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PredicateError._Error()
{
  uint64_t v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  switch(v3)
  {
    case 1:
      Hasher._combine(_:)(2uLL);
      if (!v1) {
        goto LABEL_8;
      }
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      outlined consume of PredicateError._Error(v2, v1, 1u);
      break;
    case 2:
      Hasher._combine(_:)(3uLL);
      if (!v1) {
        goto LABEL_8;
      }
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      outlined consume of PredicateError._Error(v2, v1, 2u);
      break;
    case 3:
      Hasher._combine(_:)(0);
      break;
    default:
      Hasher._combine(_:)(1uLL);
      if (v1)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        outlined consume of PredicateError._Error(v2, v1, 0);
      }
      else
      {
LABEL_8:
        Hasher._combine(_:)(0);
      }
      break;
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PredicateError._Error(uint64_t a1, uint64_t a2)
{
  return specialized static PredicateError._Error.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

unint64_t PredicateError.debugDescription.getter()
{
  unint64_t result = 0xD000000000000021;
  unint64_t v3 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  switch(*(unsigned char *)(v0 + 16))
  {
    case 1:
      if (v2) {
        goto LABEL_7;
      }
      unint64_t result = 0xD00000000000002ALL;
      break;
    case 2:
      if (v2) {
        goto LABEL_7;
      }
      unint64_t result = 0xD000000000000029;
      break;
    case 3:
      return result;
    default:
      if (v2)
      {
LABEL_7:
        swift_bridgeObjectRetain();
        unint64_t result = v3;
      }
      else
      {
        unint64_t result = 0xD000000000000025;
      }
      break;
  }
  return result;
}

uint64_t static PredicateError.== infix(_:_:)(long long *a1, long long *a2)
{
  int v2 = *((unsigned __int8 *)a2 + 16);
  switch(*((unsigned char *)a1 + 16))
  {
    case 1:
      BOOL v3 = v2 == 1;
      goto LABEL_6;
    case 2:
      BOOL v3 = v2 == 2;
      goto LABEL_6;
    case 3:
      long long v8 = *a2;
      char v9 = v2;
      long long v6 = *a1;
      char v7 = 3;
      char v4 = static PredicateError.== infix(_:_:)(&v8, &v6);
      return v4 & 1;
    default:
      BOOL v3 = v2 == 0;
LABEL_6:
      char v4 = v3;
      return v4 & 1;
  }
}

void static PredicateError.undefinedVariable.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 3;
}

void static PredicateError.forceUnwrapFailure.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
}

void static PredicateError.forceCastFailure.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
}

void static PredicateError.invalidInput.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 2;
}

void PredicateError.hash(into:)()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  switch(*(unsigned char *)(v0 + 16))
  {
    case 1:
      Hasher._combine(_:)(2uLL);
      if (v2)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        uint64_t v3 = v1;
        uint64_t v4 = v2;
      }
      else
      {
        Hasher._combine(_:)(0);
        uint64_t v3 = v1;
        uint64_t v4 = 0;
      }
      unsigned __int8 v5 = 1;
      goto LABEL_15;
    case 2:
      Hasher._combine(_:)(3uLL);
      if (v2)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        uint64_t v3 = v1;
        uint64_t v4 = v2;
      }
      else
      {
        Hasher._combine(_:)(0);
        uint64_t v3 = v1;
        uint64_t v4 = 0;
      }
      unsigned __int8 v5 = 2;
      goto LABEL_15;
    case 3:
      Hasher._combine(_:)(0);
      return;
    default:
      Hasher._combine(_:)(1uLL);
      if (v2)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        uint64_t v3 = v1;
        uint64_t v4 = v2;
      }
      else
      {
        Hasher._combine(_:)(0);
        uint64_t v3 = v1;
        uint64_t v4 = 0;
      }
      unsigned __int8 v5 = 0;
LABEL_15:
      outlined consume of PredicateError._Error(v3, v4, v5);
      return;
  }
}

Swift::Int PredicateError.hashValue.getter()
{
  uint64_t v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  switch(v3)
  {
    case 1:
      Hasher._combine(_:)(2uLL);
      if (!v1) {
        goto LABEL_8;
      }
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      outlined consume of PredicateError._Error(v2, v1, 1u);
      break;
    case 2:
      Hasher._combine(_:)(3uLL);
      if (!v1) {
        goto LABEL_8;
      }
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      outlined consume of PredicateError._Error(v2, v1, 2u);
      break;
    case 3:
      Hasher._combine(_:)(0);
      break;
    default:
      Hasher._combine(_:)(1uLL);
      if (v1)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        outlined consume of PredicateError._Error(v2, v1, 0);
      }
      else
      {
LABEL_8:
        Hasher._combine(_:)(0);
      }
      break;
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PredicateError()
{
  uint64_t v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  switch(*(unsigned char *)(v0 + 16))
  {
    case 1:
      Hasher._combine(_:)(2uLL);
      if (!v1) {
        goto LABEL_11;
      }
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      uint64_t v3 = v2;
      uint64_t v4 = v1;
      unsigned __int8 v5 = 1;
      goto LABEL_8;
    case 2:
      Hasher._combine(_:)(3uLL);
      if (!v1) {
        goto LABEL_11;
      }
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      uint64_t v3 = v2;
      uint64_t v4 = v1;
      unsigned __int8 v5 = 2;
      goto LABEL_8;
    case 3:
      Hasher._combine(_:)(0);
      return;
    default:
      Hasher._combine(_:)(1uLL);
      if (v1)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        uint64_t v3 = v2;
        uint64_t v4 = v1;
        unsigned __int8 v5 = 0;
LABEL_8:
        outlined consume of PredicateError._Error(v3, v4, v5);
      }
      else
      {
LABEL_11:
        Hasher._combine(_:)(0);
      }
      return;
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PredicateError()
{
  uint64_t v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  switch(v3)
  {
    case 1:
      Hasher._combine(_:)(2uLL);
      if (!v1) {
        goto LABEL_8;
      }
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      outlined consume of PredicateError._Error(v2, v1, 1u);
      break;
    case 2:
      Hasher._combine(_:)(3uLL);
      if (!v1) {
        goto LABEL_8;
      }
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      outlined consume of PredicateError._Error(v2, v1, 2u);
      break;
    case 3:
      Hasher._combine(_:)(0);
      break;
    default:
      Hasher._combine(_:)(1uLL);
      if (v1)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        outlined consume of PredicateError._Error(v2, v1, 0);
      }
      else
      {
LABEL_8:
        Hasher._combine(_:)(0);
      }
      break;
  }
  return Hasher._finalize()();
}

uint64_t outlined consume of PredicateError._Error(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t PredicateExpressions.VariableID.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

void PredicateExpressions.VariableID.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int PredicateExpressions.VariableID.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PredicateExpressions.VariableID()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PredicateExpressions.VariableID()
{
  Hasher._combine(_:)(*v0);
}

uint64_t PredicateExpressions.Variable.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 7955819 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PredicateExpressions.Variable<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = PredicateExpressions.Variable.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance PredicateExpressions.Variable<A>.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = default argument 1 of _typeName(_:qualified:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.Variable<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.Variable<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t PredicateExpressions.KeyPath.init(root:keyPath:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  swift_retain();
  AnyKeyPath._validateForPredicateUsage(restrictArguments:)(0);
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1, a3);
  uint64_t result = type metadata accessor for PredicateExpressions.KeyPath();
  *(void *)(a4 + *(int *)(result + 44)) = a2;
  return result;
}

uint64_t PredicateExpressions.Value.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t AnyKeyPath._unsafeAssumeSendableAnyKeyPath.getter()
{
  type metadata accessor for AnyKeyPath();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyKeyPath & Sendable);
  swift_dynamicCast();
  return v1;
}

BOOL static PredicateExpressions.KeyPath<>.CodingKeys.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void PredicateExpressions.KeyPath<>.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
}

uint64_t PredicateExpressions.KeyPath<>.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1953460082 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

Swift::Int PredicateExpressions.KeyPath<>.CodingKeys.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t PredicateExpressions.KeyPath<>.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x696669746E656469;
  }
  else {
    return 1953460082;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PredicateExpressions.KeyPath<A, B><>.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static PredicateExpressions.KeyPath<>.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PredicateExpressions.KeyPath<A, B><>.CodingKeys()
{
  return PredicateExpressions.KeyPath<>.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance PredicateExpressions.KeyPath<A, B><>.CodingKeys(uint64_t a1)
{
  PredicateExpressions.KeyPath<>.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PredicateExpressions.KeyPath<A, B><>.CodingKeys()
{
  Hasher.init(_seed:)();
  PredicateExpressions.KeyPath<>.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PredicateExpressions.KeyPath<A, B><>.CodingKeys()
{
  return PredicateExpressions.KeyPath<>.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PredicateExpressions.KeyPath<A, B><>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = PredicateExpressions.KeyPath<>.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance PredicateExpressions.KeyPath<A, B><>.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = protocol witness for Sequence._customContainsEquatableElement(_:) in conformance _DarwinSearchPathsSequence();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.KeyPath<A, B><>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.KeyPath<A, B><>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t PredicateExpressions.KeyPath<>.encode(to:)(void *a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v32 = a4;
  uint64_t v6 = *(void *)(a2 + 32);
  long long v30 = *(_OWORD *)(a2 + 16);
  long long v33 = v30;
  uint64_t v34 = v6;
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  type metadata accessor for PredicateExpressions.KeyPath<>.CodingKeys();
  swift_getWitnessTable();
  uint64_t v7 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v30 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v11 = v7;
  uint64_t v12 = v31;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v33) = 0;
  uint64_t v13 = v37;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v13) {
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  uint64_t v37 = a2;
  if (one-time initialization token for predicateArchivingState != -1) {
    swift_once();
  }
  unint64_t v15 = pthread_getspecific(static _ThreadLocal.Key<A>.predicateArchivingState);
  uint64_t v16 = v8;
  if (!v15) {
    goto LABEL_8;
  }
  double v17 = v10;
  uint64_t v18 = *(void *)(*(void *)v15 + 24);
  char v19 = *(unsigned char *)(*(void *)v15 + 32);
  *(void *)&long long v33 = *(void *)(*(void *)v15 + 16);
  *((void *)&v33 + 1) = v18;
  LOBYTE(v34) = v19;
  uint64_t v20 = *(void *)(v12 + *(int *)(v37 + 44));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized PredicateCodableConfiguration._identifier(for:)(v20, (uint64_t *)&v33);
  uint64_t v22 = v21;
  uint64_t v10 = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v22)
  {
    LOBYTE(v33) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v17, v11);
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_8:
    uint64_t v23 = type metadata accessor for EncodingError();
    swift_allocError();
    uint64_t v24 = v11;
    uint64_t v26 = v25;
    uint64_t v32 = (char *)v25
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context))
                 + 48);
    uint64_t v27 = *(void **)(v12 + *(int *)(v37 + 44));
    v26[3] = *v27;
    *uint64_t v26 = v27;
    swift_retain();
    KeyedEncodingContainer.codingPath.getter();
    *(void *)&long long v33 = 0;
    *((void *)&v33 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    *(void *)&long long v33 = 0x2720656854;
    *((void *)&v33 + 1) = 0xE500000000000000;
    v28._uint64_t countAndFlagsBits = AnyKeyPath.debugDescription.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._uint64_t object = (void *)0x80000001823AC570;
    v29._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
    String.append(_:)(v29);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v23 - 8) + 104))(v26, *MEMORY[0x1E4FBBAA0], v23);
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v10, v24);
  }
}

uint64_t PredicateExpressions.KeyPath<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v64 = a5;
  uint64_t v67 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  v68._uint64_t countAndFlagsBits = (uint64_t)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68._uint64_t object = v10;
  uint64_t v72 = v11;
  unint64_t v73 = v12;
  uint64_t v74 = v13;
  uint64_t v75 = v10;
  uint64_t v76 = v14;
  type metadata accessor for PredicateExpressions.KeyPath<>.CodingKeys();
  swift_getWitnessTable();
  uint64_t v15 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v69 = v15;
  uint64_t v70 = v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v60 - v17;
  uint64_t v65 = a3;
  uint64_t v66 = a4;
  uint64_t v19 = type metadata accessor for PredicateExpressions.KeyPath();
  uint64_t v63 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v60 - v20;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v22 = v71;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v22) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v62 = v19;
  uint64_t v71 = v21;
  uint64_t v24 = v67;
  uint64_t countAndFlagsBits = v68._countAndFlagsBits;
  LOBYTE(v72) = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 32))(v71, countAndFlagsBits, a2);
  LOBYTE(v72) = 1;
  v68._uint64_t countAndFlagsBits = KeyedDecodingContainer.decode(_:forKey:)();
  v68._uint64_t object = v26;
  id v61 = v18;
  if (one-time initialization token for predicateArchivingState != -1) {
    swift_once();
  }
  uint64_t v27 = pthread_getspecific(static _ThreadLocal.Key<A>.predicateArchivingState);
  if (!v27) {
    goto LABEL_10;
  }
  unint64_t v28 = *(void *)(*(void *)v27 + 24);
  char v29 = *(unsigned char *)(*(void *)v27 + 32);
  uint64_t v72 = *(void *)(*(void *)v27 + 16);
  unint64_t v73 = v28;
  LOBYTE(v74) = v29;
  uint64_t AssociatedTypeWitness = (uint64_t *)swift_getAssociatedTypeWitness();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v31 = PredicateCodableConfiguration._keyPath(for:rootType:)(v68._countAndFlagsBits, (uint64_t)v68._object, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v31)
  {
    type metadata accessor for KeyPath();
    uint64_t v32 = swift_dynamicCastClass();
    if (v32)
    {
      uint64_t v33 = v32;
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v77 = v33;
      swift_retain();
      swift_dynamicCast();
      uint64_t v34 = v72;
      swift_release_n();
      (*(void (**)(char *, uint64_t))(v70 + 8))(v61, v69);
      uint64_t v35 = v62;
      uint64_t v36 = v71;
      *(void *)&v71[*(int *)(v62 + 44)] = v34;
      uint64_t v37 = v63;
      (*(void (**)(uint64_t, char *, uint64_t))(v63 + 16))(v64, v36, v35);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v36, v35);
    }
    LOBYTE(v77) = 1;
    uint64_t v72 = 0;
    unint64_t v73 = 0xE000000000000000;
    _StringGuts.grow(_:)(114);
    v44._uint64_t countAndFlagsBits = 0x687461702079654BLL;
    v44._uint64_t object = (void *)0xEA00000000002720;
    String.append(_:)(v44);
    swift_retain();
    uint64_t v45 = AnyKeyPath.debugDescription.getter();
    uint64_t v47 = v46;
    swift_release();
    v48._uint64_t countAndFlagsBits = v45;
    v48._uint64_t object = v47;
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    v49._uint64_t countAndFlagsBits = 0x615079654B282027;
    v49._uint64_t object = (void *)0xEB000000003C6874;
    String.append(_:)(v49);
    uint64_t v66 = v31;
    dispatch thunk of static AnyKeyPath._rootAndValueType.getter();
    v50._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    v51._uint64_t countAndFlagsBits = 8236;
    v51._uint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v51);
    dispatch thunk of static AnyKeyPath._rootAndValueType.getter();
    v52._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v52);
    swift_bridgeObjectRelease();
    v53._uint64_t object = (void *)0x80000001823AC5F0;
    v53._uint64_t countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v53);
    String.append(_:)(v68);
    swift_bridgeObjectRelease();
    v54._uint64_t countAndFlagsBits = 0xD000000000000039;
    v54._uint64_t object = (void *)0x80000001823AC610;
    String.append(_:)(v54);
    v55._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    v56._uint64_t countAndFlagsBits = 8236;
    v56._uint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v56);
    v57._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v57);
    swift_bridgeObjectRelease();
    v58._uint64_t countAndFlagsBits = 62;
    v58._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v58);
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v59 = v69;
    swift_getWitnessTable();
    uint64_t v41 = v61;
    uint64_t v42 = v59;
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_release();
  }
  else
  {
LABEL_10:
    LOBYTE(v77) = 1;
    uint64_t v72 = 0;
    unint64_t v73 = 0xE000000000000000;
    _StringGuts.grow(_:)(66);
    v38._uint64_t object = (void *)0x80000001823AC5A0;
    v38._uint64_t countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v38);
    String.append(_:)(v68);
    swift_bridgeObjectRelease();
    v39._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
    v39._uint64_t object = (void *)0x80000001823AC5C0;
    String.append(_:)(v39);
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v40 = v69;
    swift_getWitnessTable();
    uint64_t v41 = v61;
    uint64_t v42 = v40;
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  (*(void (**)(char *, uint64_t))(v70 + 8))(v41, v42);
  uint64_t v43 = v71;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v43, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.KeyPath<A, B>@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.KeyPath<>.init(from:)(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.KeyPath<A, B>(void *a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.KeyPath<>.encode(to:)(a1, a2, *(void *)(a3 - 8), *(char **)(a3 - 16));
}

uint64_t PredicateExpressions.KeyPath.description.getter()
{
  _StringGuts.grow(_:)(30);
  v0._uint64_t countAndFlagsBits = 0x286874615079654BLL;
  v0._uint64_t object = (void *)0xEE00203A746F6F72;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x74615079656B202CLL;
  v1._uint64_t object = (void *)0xEB00000000203A68;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = AnyKeyPath.debugDescription.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 41;
  v3._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0;
}

BOOL static PredicateExpressions.KeyPath.CommonKeyPathKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void PredicateExpressions.KeyPath.CommonKeyPathKind.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int PredicateExpressions.KeyPath.CommonKeyPathKind.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PredicateExpressions.KeyPath<A, B>.CommonKeyPathKind()
{
  return Hasher._finalize()();
}

uint64_t key path getter for String.count : String@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = String.count.getter();
  *a1 = result;
  return result;
}

uint64_t key path getter for Collection.count : Substring@<X0>(uint64_t *a1@<X8>)
{
  swift_bridgeObjectRetain();
  uint64_t v2 = Substring.distance(from:to:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t key path getter for Array.count : <A, B><A1>[A1.Element]@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t result = MEMORY[0x185302610](v3, AssociatedTypeWitness);
  *a2 = result;
  return result;
}

void *key path getter for String.isEmpty : String@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  unint64_t v2 = result[1];
  uint64_t v3 = *result & 0xFFFFFFFFFFFFLL;
  if ((v2 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(v2) & 0xF;
  }
  *a2 = v3 == 0;
  return result;
}

void *key path getter for Collection.isEmpty : Substring@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (result[1] ^ *result) < 0x4000uLL;
  return result;
}

uint64_t key path getter for Collection.isEmpty : <A, B><A1>[A1.Element]@<X0>(unsigned char *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t result = Collection.isEmpty.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path getter for Collection.first : <A, B><A1>[A1.Element](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  return a5(v6, WitnessTable);
}

uint64_t static PredicateExpressions.KeyPath.kind<A, B>(_:hashableElementType:)@<X0>(char *a1@<X8>)
{
  swift_getKeyPath();
  type metadata accessor for AnyKeyPath();
  char v1 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t result = swift_release();
  if (v1)
  {
    char v3 = 0;
  }
  else
  {
    MEMORY[0x1F4188790](result);
    swift_getKeyPath();
    char v4 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t result = swift_release();
    if (v4) {
      char v3 = 1;
    }
    else {
      char v3 = 4;
    }
  }
  *a1 = v3;
  return result;
}

uint64_t type metadata accessor for PredicateExpressions.KeyPath<>.CodingKeys()
{
  return swift_getGenericMetadata();
}

uint64_t base witness table accessor for Equatable in PredicateExpressions.KeyPath<A, B>.CommonKeyPathKind()
{
  return swift_getWitnessTable();
}

uint64_t outlined copy of PredicateError._Error(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

ValueMetadata *type metadata accessor for PredicateError()
{
  return &type metadata for PredicateError;
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.KeyPath(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v4 = *a2;
    char v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v4;
}

uint64_t assignWithCopy for PredicateExpressions.KeyPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 40) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.KeyPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.KeyPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.KeyPath(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x181BD0CF0);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for PredicateExpressions.KeyPath(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x181BD0EE0);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0) {
            uint64_t v19 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Value(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for PredicateExpressions.Value(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x181BD127CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

unsigned char *storeEnumTagSinglePayload for PredicateExpressions.KeyPath.CommonKeyPathKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    char *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181BD1370);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t destroy for PredicateError._Error(uint64_t a1)
{
  return outlined consume of PredicateError._Error(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for PredicateError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of PredicateError._Error(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for PredicateError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of PredicateError._Error(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of PredicateError._Error(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PredicateError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of PredicateError._Error(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for PredicateError._Error()
{
  return &type metadata for PredicateError._Error;
}

unsigned char *storeEnumTagSinglePayload for PredicateExpressions.KeyPath<>.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    char *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181BD1570);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in PredicateExpressions.Variable<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in PredicateExpressions.KeyPath<A, B><>.CodingKeys()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type PredicateError._Error and conformance PredicateError._Error()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateError._Error and conformance PredicateError._Error;
  if (!lazy protocol witness table cache variable for type PredicateError._Error and conformance PredicateError._Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateError._Error and conformance PredicateError._Error);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PredicateExpressions.KeyPath<A, B><>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in PredicateExpressions.KeyPath<A, B><>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t specialized static PredicateError._Error.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a3)
  {
    case 1:
      if (a6 != 1) {
        return 0;
      }
      if (a2) {
        return a5 && (a1 == a4 && a2 == a5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
      }
      if (!a5) {
        return 1;
      }
      unsigned __int8 v6 = 1;
      goto LABEL_22;
    case 2:
      if (a6 != 2) {
        return 0;
      }
      if (a2) {
        return a5 && (a1 == a4 && a2 == a5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
      }
      if (!a5) {
        return 1;
      }
      unsigned __int8 v6 = 2;
      goto LABEL_22;
    case 3:
      return a6 == 3 && !(a5 | a4);
    default:
      if (a6) {
        return 0;
      }
      if (!a2)
      {
        if (a5)
        {
          unsigned __int8 v6 = 0;
LABEL_22:
          outlined consume of PredicateError._Error(a1, 0, v6);
          return 0;
        }
        return 1;
      }
      return a5 && (a1 == a4 && a2 == a5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
  }
}

uint64_t sub_181BD177C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = String.count.getter();
  *a1 = result;
  return result;
}

uint64_t sub_181BD180C()
{
  return 40;
}

__n128 sub_181BD1818(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void *sub_181BD182C@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  unint64_t v2 = result[1];
  uint64_t v3 = *result & 0xFFFFFFFFFFFFLL;
  if ((v2 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(v2) & 0xF;
  }
  *a2 = v3 == 0;
  return result;
}

void *sub_181BD1850@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (result[1] ^ *result) < 0x4000uLL;
  return result;
}

uint64_t sub_181BD1868()
{
  return get_witness_table_10Foundation19PredicateExpressionRzSlRd__r0__lSay7ElementQyd__GSlHPyHCTm();
}

uint64_t sub_181BD1884()
{
  return 40;
}

__n128 sub_181BD1890(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_181BD18A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for Collection.first : <A, B><A1>[A1.Element](a1, a2, a3, MEMORY[0x1E4FBB368], MEMORY[0x1E4FBB688]);
}

uint64_t sub_181BD18E4()
{
  return 40;
}

__n128 sub_181BD18F0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_181BD1904()
{
  return get_witness_table_10Foundation19PredicateExpressionRzSlRd__r0__lSay7ElementQyd__GSlHPyHCTm();
}

uint64_t get_witness_table_10Foundation19PredicateExpressionRzSlRd__r0__lSay7ElementQyd__GSlHPyHCTm()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();

  return swift_getWitnessTable();
}

uint64_t sub_181BD1984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for Collection.first : <A, B><A1>[A1.Element](a1, a2, a3, MEMORY[0x1E4FBB338], MEMORY[0x1E4FBAFB0]);
}

uint64_t sub_181BD19C4()
{
  return 40;
}

__n128 sub_181BD19D0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_181BD19E4(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t sub_181BD19EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Set.count.getter();
  *a1 = result;
  return result;
}

uint64_t sub_181BD1A24()
{
  return 56;
}

__n128 sub_181BD1A30(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_181BD1A4C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = Set.isEmpty.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_181BD1A88()
{
  return 56;
}

__n128 sub_181BD1A94(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t PredicateExpressions.ConditionalCast.evaluate(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v10 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = *a1;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, double))(v7 + 16))(&v14, v8, v7, v10);
  if (!v3)
  {
    uint64_t v12 = a2[3];
    int v13 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a3, v13 ^ 1u, 1, v12);
  }
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.ConditionalCast<A, B>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.ConditionalCast.evaluate(_:)(a1, a2, a3);
}

uint64_t PredicateExpressions.ForceCast.evaluate(_:)@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v35 = a3;
  uint64_t v39 = a2[3];
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v34 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v33 - v7;
  uint64_t v9 = a2[4];
  uint64_t v10 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  int v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x1F4188790](v14);
  unint64_t v16 = *a1;
  uint64_t v18 = (char *)&v33 - v17;
  unint64_t v37 = v16;
  uint64_t result = (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t, double))(v9 + 16))(&v37, v10, v9, v15);
  if (!v3)
  {
    uint64_t v20 = v11;
    uint64_t v21 = AssociatedTypeWitness;
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v18, AssociatedTypeWitness);
    uint64_t v22 = v39;
    char v23 = swift_dynamicCast();
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56);
    if (v23)
    {
      uint64_t v25 = *(void *)(v22 - 8);
      v24(v8, 0, 1, v22);
      (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v35, v8, v22);
    }
    else
    {
      v24(v8, 1, 1, v22);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v6);
      unint64_t v37 = 0;
      unint64_t v38 = 0xE000000000000000;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      unint64_t v37 = 0xD00000000000001ELL;
      unint64_t v38 = 0x80000001823AC650;
      swift_getDynamicType();
      v26._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._uint64_t countAndFlagsBits = 0x27206F742027;
      v27._uint64_t object = (void *)0xE600000000000000;
      String.append(_:)(v27);
      v28._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      v29._uint64_t countAndFlagsBits = 39;
      v29._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v29);
      unint64_t v30 = v37;
      unint64_t v31 = v38;
      lazy protocol witness table accessor for type PredicateError and conformance PredicateError();
      swift_allocError();
      *(void *)uint64_t v32 = v30;
      *(void *)(v32 + 8) = v31;
      *(unsigned char *)(v32 + 16) = 1;
      swift_willThrow();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v18, v21);
  }
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.ForceCast<A, B>@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.ForceCast.evaluate(_:)(a1, a2, a3);
}

uint64_t PredicateExpressions.ConditionalCast.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t PredicateExpressions.TypeCheck.evaluate(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v17 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = *(void *)(v7 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  char v11 = AssociatedTypeWitness;
  double v12 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v18 = *a1;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, double))(v8 + 16))(&v18, v9, v8, v12);
  if (!v2)
  {
    uint64_t v13 = v17;
    int v14 = swift_dynamicCast();
    char v11 = v14;
    if (v14) {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v6, v4);
    }
  }
  return v11 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.TypeCheck<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = PredicateExpressions.TypeCheck.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

uint64_t PredicateExpressions.ConditionalCast.description.getter(int a1)
{
  return PredicateExpressions.ConditionalCast.description.getter(a1, 43, 0xD000000000000017, (void *)0x80000001823AC670);
}

uint64_t PredicateExpressions.ForceCast.description.getter(int a1)
{
  return PredicateExpressions.ConditionalCast.description.getter(a1, 37, 0xD000000000000011, (void *)0x80000001823AC690);
}

uint64_t PredicateExpressions.TypeCheck.description.getter(int a1)
{
  return PredicateExpressions.ConditionalCast.description.getter(a1, 37, 0xD000000000000011, (void *)0x80000001823AC6B0);
}

uint64_t PredicateExpressions.ConditionalCast.description.getter(int a1, Swift::Int a2, uint64_t a3, void *a4)
{
  _StringGuts.grow(_:)(a2);
  v6._uint64_t countAndFlagsBits = a3;
  v6._uint64_t object = a4;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  v7._uint64_t countAndFlagsBits = 0x657269736564202CLL;
  v7._uint64_t object = (void *)0xEF203A6570795464;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 41;
  v9._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return 0;
}

uint64_t PredicateExpressions.ConditionalCast<>.encode(to:)(void *a1)
{
  return PredicateExpressions.ConditionalCast<>.encode(to:)(a1);
}

{
  unsigned char v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t PredicateExpressions.ConditionalCast<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return PredicateExpressions.ConditionalCast<>.init(from:)(a1, a2, a3, a4);
}

{
  uint64_t v4;
  double v7;
  uint64_t v8;
  uint64_t (*v9)(void, double);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void v21[4];
  char *v22;

  uint64_t v19 = a4;
  uint64_t v20 = a3;
  uint64_t v18 = *(void *)(a2 - 8);
  Swift::String v7 = MEMORY[0x1F4188790](a1);
  uint64_t v22 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v9(0, v7);
  char v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v16 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v4)
  {
    uint64_t v16 = v10;
    uint64_t v17 = v11;
    __swift_project_boxed_opaque_existential_1(v21, v21[3]);
    int v14 = v22;
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v13, v14, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v19, v13, v16);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.ConditionalCast<A, B>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.ConditionalCast<>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.ConditionalCast<A, B>(void *a1)
{
  return PredicateExpressions.ConditionalCast<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.ForceCast<>.encode(to:)(void *a1)
{
  return PredicateExpressions.ConditionalCast<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.ForceCast<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return PredicateExpressions.ConditionalCast<>.init(from:)(a1, a2, a3, a4);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.ForceCast<A, B>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.ForceCast<>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4);
}

uint64_t PredicateExpressions.TypeCheck<>.encode(to:)(void *a1)
{
  return PredicateExpressions.ConditionalCast<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.TypeCheck<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return PredicateExpressions.ConditionalCast<>.init(from:)(a1, a2, a3, a4);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ConditionalCast<A, B>(void *a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.ConditionalCast<A, B>(a1);
}

{
  uint64_t result;

  a1[1] = swift_getWitnessTable();
  a1[2] = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  a1[3] = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ForceCast<A, B>(void *a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.ConditionalCast<A, B>(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.TypeCheck<A, B>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.TypeCheck<>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.ConditionalCast(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for PredicateExpressions.ConditionalCast(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x181BD2C88);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.ForceCast<A, B>(void *a1)
{
  return protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.ConditionalCast<A, B>(a1);
}

uint64_t PersonNameComponents.init()@<X0>(uint64_t *a1@<X8>)
{
  id v2 = objc_msgSend(objc_allocWithZone((Class)NSPersonNameComponents), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  *a1 = result;
  return result;
}

void PersonNameComponents.init(namePrefix:givenName:middleName:familyName:nameSuffix:nickname:phoneticRepresentation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14)
{
  uint64_t v25 = *a14;
  id v21 = objc_msgSend(objc_allocWithZone((Class)NSPersonNameComponents), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v21;
  *a9 = v22;
  specialized PersonNameComponents.namePrefix.setter(a1, a2, (SEL *)&selRef_setNamePrefix_);
  swift_bridgeObjectRelease();
  specialized PersonNameComponents.namePrefix.setter(a3, a4, (SEL *)&selRef_setGivenName_);
  swift_bridgeObjectRelease();
  specialized PersonNameComponents.namePrefix.setter(a5, a6, (SEL *)&selRef_setMiddleName_);
  swift_bridgeObjectRelease();
  specialized PersonNameComponents.namePrefix.setter(a7, a8, (SEL *)&selRef_setFamilyName_);
  swift_bridgeObjectRelease();
  specialized PersonNameComponents.namePrefix.setter(a10, a11, (SEL *)&selRef_setNameSuffix_);
  swift_bridgeObjectRelease();
  specialized PersonNameComponents.namePrefix.setter(a12, a13, (SEL *)&selRef_setNickname_);
  swift_bridgeObjectRelease();
  uint64_t v26 = v25;
  PersonNameComponents.phoneticRepresentation.setter(&v26);
}

uint64_t PersonNameComponents.namePrefix.setter(uint64_t a1, uint64_t a2)
{
  specialized PersonNameComponents.namePrefix.setter(a1, a2, (SEL *)&selRef_setNamePrefix_);

  return swift_bridgeObjectRelease();
}

uint64_t PersonNameComponents.givenName.setter(uint64_t a1, uint64_t a2)
{
  specialized PersonNameComponents.namePrefix.setter(a1, a2, (SEL *)&selRef_setGivenName_);

  return swift_bridgeObjectRelease();
}

uint64_t PersonNameComponents.middleName.setter(uint64_t a1, uint64_t a2)
{
  specialized PersonNameComponents.namePrefix.setter(a1, a2, (SEL *)&selRef_setMiddleName_);

  return swift_bridgeObjectRelease();
}

uint64_t PersonNameComponents.familyName.setter(uint64_t a1, uint64_t a2)
{
  specialized PersonNameComponents.namePrefix.setter(a1, a2, (SEL *)&selRef_setFamilyName_);

  return swift_bridgeObjectRelease();
}

uint64_t PersonNameComponents.nameSuffix.setter(uint64_t a1, uint64_t a2)
{
  specialized PersonNameComponents.namePrefix.setter(a1, a2, (SEL *)&selRef_setNameSuffix_);

  return swift_bridgeObjectRelease();
}

uint64_t PersonNameComponents.nickname.setter(uint64_t a1, uint64_t a2)
{
  specialized PersonNameComponents.namePrefix.setter(a1, a2, (SEL *)&selRef_setNickname_);

  return swift_bridgeObjectRelease();
}

void PersonNameComponents.phoneticRepresentation.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void **)(*(void *)v1 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    uint64_t v4 = swift_allocObject();
    id v5 = v3;
    objc_msgSend(v5, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    *(void *)(v4 + 16) = v11;
    swift_release();
    *(void *)uint64_t v1 = v4;
  }
  uint64_t v6 = *(void **)(*(void *)v1 + 16);
  if (v2)
  {
    unsigned int v7 = *(void **)(v2 + 16);
    id v8 = v6;
    objc_msgSend(v7, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    BOOL v9 = v11;
  }
  else
  {
    id v10 = v6;
    BOOL v9 = 0;
  }
  objc_msgSend(v6, sel_setPhoneticRepresentation_, v9);
  swift_release();
}

id PersonNameComponents.namePrefix.getter()
{
  return PersonNameComponents.namePrefix.getter((SEL *)&selRef_namePrefix);
}

uint64_t (*PersonNameComponents.namePrefix.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  id v3 = *(id *)(*(void *)v1 + 16);
  id v4 = objc_msgSend(v3, sel_namePrefix);
  if (v4)
  {
    id v5 = v4;
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v8 = v7;
  }
  else
  {

    id v6 = 0;
    uint64_t v8 = 0;
  }
  *a1 = v6;
  a1[1] = v8;
  return PersonNameComponents.namePrefix.modify;
}

uint64_t PersonNameComponents.namePrefix.modify(uint64_t *a1, char a2)
{
  return PersonNameComponents.namePrefix.modify(a1, a2, (SEL *)&selRef_setNamePrefix_);
}

id PersonNameComponents.givenName.getter()
{
  return PersonNameComponents.namePrefix.getter((SEL *)&selRef_givenName);
}

uint64_t key path setter for PersonNameComponents.namePrefix : PersonNameComponents(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  swift_bridgeObjectRetain();
  specialized PersonNameComponents.namePrefix.setter(v6, v7, a5);

  return swift_bridgeObjectRelease();
}

uint64_t (*PersonNameComponents.givenName.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  id v3 = *(id *)(*(void *)v1 + 16);
  id v4 = objc_msgSend(v3, sel_givenName);
  if (v4)
  {
    id v5 = v4;
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v8 = v7;
  }
  else
  {

    id v6 = 0;
    uint64_t v8 = 0;
  }
  *a1 = v6;
  a1[1] = v8;
  return PersonNameComponents.givenName.modify;
}

uint64_t PersonNameComponents.givenName.modify(uint64_t *a1, char a2)
{
  return PersonNameComponents.namePrefix.modify(a1, a2, (SEL *)&selRef_setGivenName_);
}

uint64_t PersonNameComponents.namePrefix.modify(uint64_t *a1, char a2, SEL *a3)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if (a2)
  {
    swift_bridgeObjectRetain();
    specialized PersonNameComponents.namePrefix.setter(v5, v4, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized PersonNameComponents.namePrefix.setter(*a1, v4, a3);
  }

  return swift_bridgeObjectRelease();
}

id PersonNameComponents.middleName.getter()
{
  return PersonNameComponents.namePrefix.getter((SEL *)&selRef_middleName);
}

uint64_t (*PersonNameComponents.middleName.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  id v3 = *(id *)(*(void *)v1 + 16);
  id v4 = objc_msgSend(v3, sel_middleName);
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v8 = v7;
  }
  else
  {

    id v6 = 0;
    uint64_t v8 = 0;
  }
  *a1 = v6;
  a1[1] = v8;
  return PersonNameComponents.middleName.modify;
}

uint64_t PersonNameComponents.middleName.modify(uint64_t *a1, char a2)
{
  return PersonNameComponents.namePrefix.modify(a1, a2, (SEL *)&selRef_setMiddleName_);
}

id PersonNameComponents.familyName.getter()
{
  return PersonNameComponents.namePrefix.getter((SEL *)&selRef_familyName);
}

uint64_t (*PersonNameComponents.familyName.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  id v3 = *(id *)(*(void *)v1 + 16);
  id v4 = objc_msgSend(v3, sel_familyName);
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v8 = v7;
  }
  else
  {

    id v6 = 0;
    uint64_t v8 = 0;
  }
  *a1 = v6;
  a1[1] = v8;
  return PersonNameComponents.familyName.modify;
}

uint64_t PersonNameComponents.familyName.modify(uint64_t *a1, char a2)
{
  return PersonNameComponents.namePrefix.modify(a1, a2, (SEL *)&selRef_setFamilyName_);
}

id PersonNameComponents.nameSuffix.getter()
{
  return PersonNameComponents.namePrefix.getter((SEL *)&selRef_nameSuffix);
}

uint64_t (*PersonNameComponents.nameSuffix.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  id v3 = *(id *)(*(void *)v1 + 16);
  id v4 = objc_msgSend(v3, sel_nameSuffix);
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v8 = v7;
  }
  else
  {

    id v6 = 0;
    uint64_t v8 = 0;
  }
  *a1 = v6;
  a1[1] = v8;
  return PersonNameComponents.nameSuffix.modify;
}

uint64_t PersonNameComponents.nameSuffix.modify(uint64_t *a1, char a2)
{
  return PersonNameComponents.namePrefix.modify(a1, a2, (SEL *)&selRef_setNameSuffix_);
}

id PersonNameComponents.nickname.getter()
{
  return PersonNameComponents.namePrefix.getter((SEL *)&selRef_nickname);
}

id PersonNameComponents.namePrefix.getter(SEL *a1)
{
  id v3 = *(id *)(*(void *)v1 + 16);
  id v4 = [v3 *a1];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  }
  else
  {

    return 0;
  }
  return v6;
}

void key path getter for PersonNameComponents.namePrefix : PersonNameComponents(uint64_t a1@<X0>, SEL *a2@<X3>, void *a3@<X8>)
{
  id v5 = *(id *)(*(void *)a1 + 16);
  swift_retain();
  id v6 = [v5 *a2];
  if (v6)
  {
    uint64_t v7 = v6;
    id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    uint64_t v10 = v9;
    swift_release();
  }
  else
  {
    swift_release();

    id v8 = 0;
    uint64_t v10 = 0;
  }
  *a3 = v8;
  a3[1] = v10;
}

uint64_t (*PersonNameComponents.nickname.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  id v3 = *(id *)(*(void *)v1 + 16);
  id v4 = objc_msgSend(v3, sel_nickname);
  if (v4)
  {
    id v5 = v4;
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v8 = v7;
  }
  else
  {

    id v6 = 0;
    uint64_t v8 = 0;
  }
  *a1 = v6;
  a1[1] = v8;
  return PersonNameComponents.nickname.modify;
}

uint64_t PersonNameComponents.nickname.modify(uint64_t *a1, char a2)
{
  return PersonNameComponents.namePrefix.modify(a1, a2, (SEL *)&selRef_setNickname_);
}

void PersonNameComponents.phoneticRepresentation.getter(uint64_t *a1@<X8>)
{
  id v3 = *(id *)(*(void *)v1 + 16);
  id v4 = objc_msgSend(v3, sel_phoneticRepresentation);
  if (v4)
  {
    id v5 = v4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    uint64_t v6 = swift_allocObject();
    objc_msgSend(v5, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    *(void *)(v6 + 16) = v7;
  }
  else
  {

    uint64_t v6 = 0;
  }
  *a1 = v6;
}

uint64_t static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  if (result)
  {
    uint64_t v2 = (void *)result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    uint64_t v4 = swift_allocObject();
    objc_msgSend(v2, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    uint64_t result = swift_dynamicCast();
    *(void *)(v4 + 16) = v5;
    *a2 = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

NSPersonNameComponents __swiftcall PersonNameComponents._bridgeToObjectiveC()()
{
  objc_msgSend(*(id *)(*(void *)v0 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSPersonNameComponents();
  swift_dynamicCast();
  uint64_t v2 = v4;
  result._private = v1;
  result.super.isa = v2;
  return result;
}

void (*PersonNameComponents.phoneticRepresentation.modify(void *a1))(uint64_t a1, char a2)
{
  id v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  id v4 = *(id *)(*(void *)v1 + 16);
  id v5 = objc_msgSend(v4, sel_phoneticRepresentation);
  if (v5)
  {
    uint64_t v6 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    uint64_t v7 = swift_allocObject();
    objc_msgSend(v6, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    *(void *)(v7 + 16) = v3[5];
  }
  else
  {

    uint64_t v7 = 0;
  }
  v3[4] = v7;
  return PersonNameComponents.phoneticRepresentation.modify;
}

void PersonNameComponents.phoneticRepresentation.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 32);
  if (a2)
  {
    swift_retain();
    PersonNameComponents.phoneticRepresentation.setter(&v3);
    swift_release();
  }
  else
  {
    PersonNameComponents.phoneticRepresentation.setter(&v3);
  }

  free(v2);
}

void PersonNameComponents.hash(into:)()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 16);
  swift_retain();
  id v2 = v1;
  NSObject.hash(into:)();
  swift_release();
}

id static PersonNameComponents.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(void *)a1 + 16), sel_isEqual_, *(void *)(*(void *)a2 + 16));
}

Swift::Int PersonNameComponents.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = *(void **)(v1 + 16);
  swift_retain();
  id v3 = v2;
  NSObject.hash(into:)();
  swift_release();

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PersonNameComponents()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = *(void **)(v1 + 16);
  swift_retain();
  id v3 = v2;
  NSObject.hash(into:)();
  swift_release();

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PersonNameComponents()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 16);
  swift_retain();
  id v2 = v1;
  NSObject.hash(into:)();
  swift_release();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PersonNameComponents()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = *(void **)(v1 + 16);
  swift_retain();
  id v3 = v2;
  NSObject.hash(into:)();
  swift_release();

  return Hasher._finalize()();
}

id protocol witness for static Equatable.== infix(_:_:) in conformance PersonNameComponents(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(void *)a1 + 16), sel_isEqual_, *(void *)(*(void *)a2 + 16));
}

uint64_t PersonNameComponents.description.getter()
{
  uint64_t v108 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v106 = *(void *)(v108 - 8);
  MEMORY[0x1F4188790](v108);
  uint64_t v109 = (char *)&v104 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v2 - 8);
  id v4 = (char *)&v104 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = type metadata accessor for Mirror();
  uint64_t v105 = *(void *)(v107 - 8);
  MEMORY[0x1F4188790](v107);
  uint64_t v6 = (char *)&v104 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v0;
  uint64_t v8 = *(void **)(*v0 + 16);
  swift_retain_n();
  id v9 = v8;
  id v10 = objc_msgSend(v9, sel_namePrefix);
  uint64_t v11 = MEMORY[0x1E4FBB1A0];
  if (v10)
  {
    unsigned int v12 = v10;
    id v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v15 = v14;
    swift_release();

    *((void *)&v114[0] + 1) = v11;
    *(void *)&long long v113 = v13;
    *((void *)&v113 + 1) = v15;
    long long v115 = xmmword_182181420;
    outlined init with take of Any(&v113, &v116);
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v18 = v16[2];
    unint64_t v17 = v16[3];
    if (v18 >= v17 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v16);
    }
    _OWORD v16[2] = v18 + 1;
    uint64_t v19 = &v16[6 * v18];
    long long v20 = v115;
    long long v21 = v117;
    uint64_t v19[3] = v116;
    void v19[4] = v21;
    void v19[2] = v20;
  }
  else
  {
    swift_release();

    uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v22 = *(void **)(v7 + 16);
  swift_retain();
  id v23 = v22;
  id v24 = objc_msgSend(v23, sel_givenName);
  if (v24)
  {
    uint64_t v25 = v24;
    id v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    uint64_t v28 = v27;
    swift_release();

    *((void *)&v114[0] + 1) = v11;
    *(void *)&long long v113 = v26;
    *((void *)&v113 + 1) = v28;
    long long v115 = xmmword_182181430;
    outlined init with take of Any(&v113, &v116);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    }
    unint64_t v30 = v16[2];
    unint64_t v29 = v16[3];
    if (v30 >= v29 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, v16);
    }
    _OWORD v16[2] = v30 + 1;
    unint64_t v31 = &v16[6 * v30];
    long long v32 = v115;
    long long v33 = v117;
    uint64_t v31[3] = v116;
    v31[4] = v33;
    void v31[2] = v32;
  }
  else
  {
    swift_release();
  }
  uint64_t v34 = *(void **)(v7 + 16);
  swift_retain();
  id v35 = v34;
  id v36 = objc_msgSend(v35, sel_middleName);
  if (v36)
  {
    unint64_t v37 = v36;
    id v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    uint64_t v40 = v39;
    swift_release();

    *((void *)&v114[0] + 1) = v11;
    *(void *)&long long v113 = v38;
    *((void *)&v113 + 1) = v40;
    long long v115 = xmmword_182181440;
    outlined init with take of Any(&v113, &v116);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    }
    unint64_t v42 = v16[2];
    unint64_t v41 = v16[3];
    if (v42 >= v41 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v41 > 1), v42 + 1, 1, v16);
    }
    _OWORD v16[2] = v42 + 1;
    uint64_t v43 = &v16[6 * v42];
    long long v44 = v115;
    long long v45 = v117;
    long long v43[3] = v116;
    v43[4] = v45;
    v43[2] = v44;
  }
  else
  {
    swift_release();
  }
  uint64_t v46 = *(void **)(v7 + 16);
  swift_retain();
  id v47 = v46;
  id v48 = objc_msgSend(v47, sel_familyName);
  if (v48)
  {
    Swift::String v49 = v48;
    id v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    uint64_t v52 = v51;
    swift_release();

    *((void *)&v114[0] + 1) = v11;
    *(void *)&long long v113 = v50;
    *((void *)&v113 + 1) = v52;
    long long v115 = xmmword_182181450;
    outlined init with take of Any(&v113, &v116);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    }
    unint64_t v54 = v16[2];
    unint64_t v53 = v16[3];
    if (v54 >= v53 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v53 > 1), v54 + 1, 1, v16);
    }
    _OWORD v16[2] = v54 + 1;
    Swift::String v55 = &v16[6 * v54];
    long long v56 = v115;
    long long v57 = v117;
    v55[3] = v116;
    v55[4] = v57;
    v55[2] = v56;
  }
  else
  {
    swift_release();
  }
  Swift::String v58 = *(void **)(v7 + 16);
  swift_retain();
  id v59 = v58;
  id v60 = objc_msgSend(v59, sel_nameSuffix);
  if (v60)
  {
    id v61 = v60;
    id v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
    uint64_t v64 = v63;
    swift_release();

    *((void *)&v114[0] + 1) = v11;
    *(void *)&long long v113 = v62;
    *((void *)&v113 + 1) = v64;
    long long v115 = xmmword_182181460;
    outlined init with take of Any(&v113, &v116);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    }
    unint64_t v66 = v16[2];
    unint64_t v65 = v16[3];
    if (v66 >= v65 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v65 > 1), v66 + 1, 1, v16);
    }
    _OWORD v16[2] = v66 + 1;
    uint64_t v67 = &v16[6 * v66];
    long long v68 = v115;
    long long v69 = v117;
    v67[3] = v116;
    void v67[4] = v69;
    void v67[2] = v68;
  }
  else
  {
    swift_release();
  }
  uint64_t v70 = *(void **)(v7 + 16);
  swift_retain();
  id v71 = v70;
  id v72 = objc_msgSend(v71, sel_nickname);
  if (v72)
  {
    unint64_t v73 = v72;
    id v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
    uint64_t v76 = v75;
    swift_release();

    *((void *)&v114[0] + 1) = v11;
    *(void *)&long long v113 = v74;
    *((void *)&v113 + 1) = v76;
    long long v115 = xmmword_182181470;
    outlined init with take of Any(&v113, &v116);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    }
    unint64_t v78 = v16[2];
    unint64_t v77 = v16[3];
    if (v78 >= v77 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v77 > 1), v78 + 1, 1, v16);
    }
    _OWORD v16[2] = v78 + 1;
    __int16 v79 = &v16[6 * v78];
    long long v80 = v115;
    long long v81 = v117;
    long long v79[3] = v116;
    v79[4] = v81;
    v79[2] = v80;
  }
  else
  {
    swift_release();
  }
  uint64_t v82 = *(void **)(v7 + 16);
  swift_retain();
  id v83 = v82;
  id v84 = objc_msgSend(v83, sel_phoneticRepresentation);
  if (v84)
  {
    uint64_t v85 = v84;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    uint64_t v86 = swift_allocObject();
    objc_msgSend(v85, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    *(void *)(v86 + 16) = v113;
    swift_release();

    *((void *)&v114[0] + 1) = &type metadata for PersonNameComponents;
    *(void *)&long long v113 = v86;
    *(void *)&long long v115 = 0xD000000000000016;
    *((void *)&v115 + 1) = 0x80000001823AC6D0;
    outlined init with take of Any(&v113, &v116);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    }
    unint64_t v88 = v16[2];
    unint64_t v87 = v16[3];
    if (v88 >= v87 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v87 > 1), v88 + 1, 1, v16);
    }
    _OWORD v16[2] = v88 + 1;
    uint64_t v89 = &v16[6 * v88];
    long long v90 = v115;
    long long v91 = v117;
    v89[3] = v116;
    v89[4] = v91;
    v89[2] = v90;
    swift_release();
  }
  else
  {
    swift_release();
  }
  *(void *)&long long v115 = v7;
  *(void *)&long long v113 = v16;
  uint64_t v92 = *MEMORY[0x1E4FBC410];
  uint64_t v93 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v94 = *(void *)(v93 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v94 + 104))(v4, v92, v93);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v94 + 56))(v4, 0, 1, v93);
  (*(void (**)(char *, void, uint64_t))(v106 + 104))(v109, *MEMORY[0x1E4FBC430], v108);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
  uint64_t v95 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v105 + 8))(v6, v107);
  uint64_t v118 = 0;
  unint64_t v119 = 0xE000000000000000;
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (*((void *)&v117 + 1))
  {
    uint64_t v109 = (char *)v95;
    do
    {
      long long v113 = v115;
      v114[0] = v116;
      v114[1] = v117;
      v112._uint64_t countAndFlagsBits = 0;
      v112._uint64_t object = (void *)0xE000000000000000;
      long long v96 = v115;
      long long v110 = v115;
      outlined init with copy of Any((uint64_t)v114, (uint64_t)v111);
      if (*((void *)&v96 + 1)) {
        uint64_t v97 = v96;
      }
      else {
        uint64_t v97 = 0;
      }
      if (*((void *)&v96 + 1)) {
        unint64_t v98 = (void *)*((void *)&v96 + 1);
      }
      else {
        unint64_t v98 = (void *)0xE000000000000000;
      }
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v111);
      v99._uint64_t countAndFlagsBits = v97;
      v99._uint64_t object = v98;
      String.append(_:)(v99);
      swift_bridgeObjectRelease();
      v100._uint64_t countAndFlagsBits = 8250;
      v100._uint64_t object = (void *)0xE200000000000000;
      String.append(_:)(v100);
      _print_unlocked<A, B>(_:_:)();
      v101._uint64_t countAndFlagsBits = 32;
      v101._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v101);
      String.append(_:)(v112);
      swift_bridgeObjectRelease();
      outlined destroy of (label: String?, value: Any)((uint64_t)&v113);
      dispatch thunk of _AnyIteratorBoxBase.next()();
    }
    while (*((void *)&v117 + 1));
    uint64_t v102 = v118;
  }
  else
  {
    uint64_t v102 = 0;
  }
  swift_release();
  swift_release();
  return v102;
}

uint64_t PersonNameComponents.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  v96[1] = a1;
  v96[0] = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v96[0] - 8);
  MEMORY[0x1F4188790](v96[0]);
  id v4 = (char *)v96 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  id v9 = *(id *)(*v1 + 16);
  swift_retain();
  id v10 = objc_msgSend(v9, sel_namePrefix);
  uint64_t v11 = (ValueMetadata *)MEMORY[0x1E4FBB1A0];
  if (v10)
  {
    unsigned int v12 = v10;
    id v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v15 = v14;
    swift_release();

    Swift::String v101 = v11;
    *(void *)&long long v100 = v13;
    *((void *)&v100 + 1) = v15;
    long long v97 = xmmword_182181420;
    outlined init with take of Any(&v100, &v98);
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v18 = v16[2];
    unint64_t v17 = v16[3];
    if (v18 >= v17 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v16);
    }
    _OWORD v16[2] = v18 + 1;
    uint64_t v19 = &v16[6 * v18];
    long long v20 = v97;
    long long v21 = v99;
    uint64_t v19[3] = v98;
    void v19[4] = v21;
    void v19[2] = v20;
  }
  else
  {
    swift_release();

    uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v22 = *(void **)(v8 + 16);
  swift_retain();
  id v23 = v22;
  id v24 = objc_msgSend(v23, sel_givenName);
  if (v24)
  {
    uint64_t v25 = v24;
    id v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    uint64_t v28 = v27;
    swift_release();

    Swift::String v101 = v11;
    *(void *)&long long v100 = v26;
    *((void *)&v100 + 1) = v28;
    long long v97 = xmmword_182181430;
    outlined init with take of Any(&v100, &v98);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    }
    unint64_t v30 = v16[2];
    unint64_t v29 = v16[3];
    if (v30 >= v29 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, v16);
    }
    _OWORD v16[2] = v30 + 1;
    unint64_t v31 = &v16[6 * v30];
    long long v32 = v97;
    long long v33 = v99;
    uint64_t v31[3] = v98;
    v31[4] = v33;
    void v31[2] = v32;
  }
  else
  {
    swift_release();
  }
  uint64_t v34 = *(void **)(v8 + 16);
  swift_retain();
  id v35 = v34;
  id v36 = objc_msgSend(v35, sel_middleName);
  if (v36)
  {
    unint64_t v37 = v36;
    id v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    uint64_t v40 = v39;
    swift_release();

    Swift::String v101 = v11;
    *(void *)&long long v100 = v38;
    *((void *)&v100 + 1) = v40;
    long long v97 = xmmword_182181440;
    outlined init with take of Any(&v100, &v98);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    }
    unint64_t v42 = v16[2];
    unint64_t v41 = v16[3];
    if (v42 >= v41 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v41 > 1), v42 + 1, 1, v16);
    }
    _OWORD v16[2] = v42 + 1;
    uint64_t v43 = &v16[6 * v42];
    long long v44 = v97;
    long long v45 = v99;
    long long v43[3] = v98;
    v43[4] = v45;
    v43[2] = v44;
  }
  else
  {
    swift_release();
  }
  uint64_t v46 = *(void **)(v8 + 16);
  swift_retain();
  id v47 = v46;
  id v48 = objc_msgSend(v47, sel_familyName);
  if (v48)
  {
    Swift::String v49 = v48;
    id v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    uint64_t v52 = v51;
    swift_release();

    Swift::String v101 = v11;
    *(void *)&long long v100 = v50;
    *((void *)&v100 + 1) = v52;
    long long v97 = xmmword_182181450;
    outlined init with take of Any(&v100, &v98);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    }
    unint64_t v54 = v16[2];
    unint64_t v53 = v16[3];
    if (v54 >= v53 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v53 > 1), v54 + 1, 1, v16);
    }
    _OWORD v16[2] = v54 + 1;
    Swift::String v55 = &v16[6 * v54];
    long long v56 = v97;
    long long v57 = v99;
    v55[3] = v98;
    v55[4] = v57;
    v55[2] = v56;
  }
  else
  {
    swift_release();
  }
  Swift::String v58 = *(void **)(v8 + 16);
  swift_retain();
  id v59 = v58;
  id v60 = objc_msgSend(v59, sel_nameSuffix);
  if (v60)
  {
    id v61 = v60;
    id v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
    uint64_t v64 = v63;
    swift_release();

    Swift::String v101 = v11;
    *(void *)&long long v100 = v62;
    *((void *)&v100 + 1) = v64;
    long long v97 = xmmword_182181460;
    outlined init with take of Any(&v100, &v98);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    }
    unint64_t v66 = v16[2];
    unint64_t v65 = v16[3];
    if (v66 >= v65 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v65 > 1), v66 + 1, 1, v16);
    }
    _OWORD v16[2] = v66 + 1;
    uint64_t v67 = &v16[6 * v66];
    long long v68 = v97;
    long long v69 = v99;
    v67[3] = v98;
    void v67[4] = v69;
    void v67[2] = v68;
  }
  else
  {
    swift_release();
  }
  uint64_t v70 = *(void **)(v8 + 16);
  swift_retain();
  id v71 = v70;
  id v72 = objc_msgSend(v71, sel_nickname);
  if (v72)
  {
    unint64_t v73 = v72;
    id v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
    uint64_t v76 = v75;
    swift_release();

    Swift::String v101 = v11;
    *(void *)&long long v100 = v74;
    *((void *)&v100 + 1) = v76;
    long long v97 = xmmword_182181470;
    outlined init with take of Any(&v100, &v98);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    }
    unint64_t v78 = v16[2];
    unint64_t v77 = v16[3];
    if (v78 >= v77 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v77 > 1), v78 + 1, 1, v16);
    }
    _OWORD v16[2] = v78 + 1;
    __int16 v79 = &v16[6 * v78];
    long long v80 = v97;
    long long v81 = v99;
    long long v79[3] = v98;
    v79[4] = v81;
    v79[2] = v80;
  }
  else
  {
    swift_release();
  }
  uint64_t v82 = *(void **)(v8 + 16);
  swift_retain();
  id v83 = v82;
  id v84 = objc_msgSend(v83, sel_phoneticRepresentation);
  if (v84)
  {
    uint64_t v85 = v84;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    uint64_t v86 = swift_allocObject();
    objc_msgSend(v85, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    *(void *)(v86 + 16) = v100;
    swift_release();

    Swift::String v101 = &type metadata for PersonNameComponents;
    *(void *)&long long v100 = v86;
    *(void *)&long long v97 = 0xD000000000000016;
    *((void *)&v97 + 1) = 0x80000001823AC6D0;
    outlined init with take of Any(&v100, &v98);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    }
    unint64_t v88 = v16[2];
    unint64_t v87 = v16[3];
    if (v88 >= v87 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v87 > 1), v88 + 1, 1, v16);
    }
    _OWORD v16[2] = v88 + 1;
    uint64_t v89 = &v16[6 * v88];
    long long v90 = v97;
    long long v91 = v99;
    v89[3] = v98;
    v89[4] = v91;
    v89[2] = v90;
    swift_release();
  }
  else
  {
    swift_release();
  }
  *(void *)&long long v97 = v8;
  *(void *)&long long v100 = v16;
  uint64_t v92 = *MEMORY[0x1E4FBC410];
  uint64_t v93 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v94 = *(void *)(v93 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v94 + 104))(v7, v92, v93);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v94 + 56))(v7, 0, 1, v93);
  (*(void (**)(char *, void, void))(v2 + 104))(v4, *MEMORY[0x1E4FBC430], v96[0]);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t PersonNameComponents.debugDescription.getter()
{
  uint64_t v109 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v107 = *(void *)(v109 - 8);
  MEMORY[0x1F4188790](v109);
  uint64_t v2 = (char *)&v105 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = type metadata accessor for Mirror();
  uint64_t v106 = *(void *)(v108 - 8);
  MEMORY[0x1F4188790](v108);
  uint64_t v7 = (char *)&v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v0;
  id v9 = *(void **)(*v0 + 16);
  swift_retain_n();
  id v10 = v9;
  id v11 = objc_msgSend(v10, sel_namePrefix);
  uint64_t v12 = MEMORY[0x1E4FBB1A0];
  if (v11)
  {
    id v13 = v11;
    id v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v16 = v15;
    swift_release();

    *((void *)&v115[0] + 1) = v12;
    *(void *)&long long v114 = v14;
    *((void *)&v114 + 1) = v16;
    long long v116 = xmmword_182181420;
    outlined init with take of Any(&v114, &v117);
    unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v19 = v17[2];
    unint64_t v18 = v17[3];
    if (v19 >= v18 >> 1) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v17);
    }
    v17[2] = v19 + 1;
    long long v20 = &v17[6 * v19];
    long long v21 = v116;
    long long v22 = v118;
    void v20[3] = v117;
    uint64_t v20[4] = v22;
    v20[2] = v21;
  }
  else
  {
    swift_release();

    unint64_t v17 = (void *)MEMORY[0x1E4FBC860];
  }
  id v23 = *(void **)(v8 + 16);
  swift_retain();
  id v24 = v23;
  id v25 = objc_msgSend(v24, sel_givenName);
  if (v25)
  {
    id v26 = v25;
    id v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    uint64_t v29 = v28;
    swift_release();

    *((void *)&v115[0] + 1) = MEMORY[0x1E4FBB1A0];
    *(void *)&long long v114 = v27;
    *((void *)&v114 + 1) = v29;
    long long v116 = xmmword_182181430;
    outlined init with take of Any(&v114, &v117);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    }
    unint64_t v31 = v17[2];
    unint64_t v30 = v17[3];
    if (v31 >= v30 >> 1) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v17);
    }
    v17[2] = v31 + 1;
    long long v32 = &v17[6 * v31];
    long long v33 = v116;
    long long v34 = v118;
    v32[3] = v117;
    v32[4] = v34;
    uint64_t v32[2] = v33;
  }
  else
  {
    swift_release();
  }
  id v35 = *(void **)(v8 + 16);
  swift_retain();
  id v36 = v35;
  id v37 = objc_msgSend(v36, sel_middleName);
  if (v37)
  {
    id v38 = v37;
    id v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    uint64_t v41 = v40;
    swift_release();

    *((void *)&v115[0] + 1) = MEMORY[0x1E4FBB1A0];
    *(void *)&long long v114 = v39;
    *((void *)&v114 + 1) = v41;
    long long v116 = xmmword_182181440;
    outlined init with take of Any(&v114, &v117);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    }
    unint64_t v43 = v17[2];
    unint64_t v42 = v17[3];
    if (v43 >= v42 >> 1) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v42 > 1), v43 + 1, 1, v17);
    }
    v17[2] = v43 + 1;
    long long v44 = &v17[6 * v43];
    long long v45 = v116;
    long long v46 = v118;
    v44[3] = v117;
    void v44[4] = v46;
    v44[2] = v45;
  }
  else
  {
    swift_release();
  }
  id v47 = *(void **)(v8 + 16);
  swift_retain();
  id v48 = v47;
  id v49 = objc_msgSend(v48, sel_familyName);
  if (v49)
  {
    id v50 = v49;
    id v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
    uint64_t v53 = v52;
    swift_release();

    *((void *)&v115[0] + 1) = MEMORY[0x1E4FBB1A0];
    *(void *)&long long v114 = v51;
    *((void *)&v114 + 1) = v53;
    long long v116 = xmmword_182181450;
    outlined init with take of Any(&v114, &v117);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    }
    unint64_t v55 = v17[2];
    unint64_t v54 = v17[3];
    if (v55 >= v54 >> 1) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v54 > 1), v55 + 1, 1, v17);
    }
    v17[2] = v55 + 1;
    long long v56 = &v17[6 * v55];
    long long v57 = v116;
    long long v58 = v118;
    v56[3] = v117;
    v56[4] = v58;
    void v56[2] = v57;
  }
  else
  {
    swift_release();
  }
  id v59 = *(void **)(v8 + 16);
  swift_retain();
  id v60 = v59;
  id v61 = objc_msgSend(v60, sel_nameSuffix);
  if (v61)
  {
    id v62 = v61;
    id v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    uint64_t v65 = v64;
    swift_release();

    *((void *)&v115[0] + 1) = MEMORY[0x1E4FBB1A0];
    *(void *)&long long v114 = v63;
    *((void *)&v114 + 1) = v65;
    long long v116 = xmmword_182181460;
    outlined init with take of Any(&v114, &v117);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    }
    unint64_t v67 = v17[2];
    unint64_t v66 = v17[3];
    if (v67 >= v66 >> 1) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v66 > 1), v67 + 1, 1, v17);
    }
    v17[2] = v67 + 1;
    long long v68 = &v17[6 * v67];
    long long v69 = v116;
    long long v70 = v118;
    uint64_t v68[3] = v117;
    v68[4] = v70;
    v68[2] = v69;
  }
  else
  {
    swift_release();
  }
  id v71 = *(void **)(v8 + 16);
  swift_retain();
  id v72 = v71;
  id v73 = objc_msgSend(v72, sel_nickname);
  if (v73)
  {
    id v74 = v73;
    id v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
    uint64_t v77 = v76;
    swift_release();

    *((void *)&v115[0] + 1) = MEMORY[0x1E4FBB1A0];
    *(void *)&long long v114 = v75;
    *((void *)&v114 + 1) = v77;
    long long v116 = xmmword_182181470;
    outlined init with take of Any(&v114, &v117);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    }
    unint64_t v79 = v17[2];
    unint64_t v78 = v17[3];
    if (v79 >= v78 >> 1) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v78 > 1), v79 + 1, 1, v17);
    }
    v17[2] = v79 + 1;
    long long v80 = &v17[6 * v79];
    long long v81 = v116;
    long long v82 = v118;
    v80[3] = v117;
    v80[4] = v82;
    void v80[2] = v81;
  }
  else
  {
    swift_release();
  }
  id v83 = *(void **)(v8 + 16);
  swift_retain();
  id v84 = v83;
  id v85 = objc_msgSend(v84, sel_phoneticRepresentation);
  uint64_t v110 = v8;
  if (v85)
  {
    uint64_t v86 = v85;
    uint64_t v105 = v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    uint64_t v87 = swift_allocObject();
    objc_msgSend(v86, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    *(void *)(v87 + 16) = v114;
    swift_release();

    *((void *)&v115[0] + 1) = &type metadata for PersonNameComponents;
    *(void *)&long long v114 = v87;
    *(void *)&long long v116 = 0xD000000000000016;
    *((void *)&v116 + 1) = 0x80000001823AC6D0;
    outlined init with take of Any(&v114, &v117);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    }
    unint64_t v89 = v17[2];
    unint64_t v88 = v17[3];
    uint64_t v8 = v110;
    if (v89 >= v88 >> 1) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v88 > 1), v89 + 1, 1, v17);
    }
    uint64_t v7 = v105;
    v17[2] = v89 + 1;
    long long v90 = &v17[6 * v89];
    long long v91 = v116;
    long long v92 = v118;
    v90[3] = v117;
    v90[4] = v92;
    v90[2] = v91;
    swift_release();
  }
  else
  {
    swift_release();
  }
  *(void *)&long long v116 = v8;
  *(void *)&long long v114 = v17;
  uint64_t v93 = *MEMORY[0x1E4FBC410];
  uint64_t v94 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v95 = *(void *)(v94 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v95 + 104))(v5, v93, v94);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v5, 0, 1, v94);
  (*(void (**)(char *, void, uint64_t))(v107 + 104))(v2, *MEMORY[0x1E4FBC430], v109);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
  uint64_t v96 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v106 + 8))(v7, v108);
  uint64_t v119 = 0;
  unint64_t v120 = 0xE000000000000000;
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (*((void *)&v118 + 1))
  {
    uint64_t v109 = v96;
    do
    {
      long long v114 = v116;
      v115[0] = v117;
      v115[1] = v118;
      v113._uint64_t countAndFlagsBits = 0;
      v113._uint64_t object = (void *)0xE000000000000000;
      long long v98 = (void *)*((void *)&v116 + 1);
      uint64_t v97 = v116;
      long long v111 = v116;
      outlined init with copy of Any((uint64_t)v115, (uint64_t)v112);
      if (v98)
      {
        long long v99 = v98;
      }
      else
      {
        uint64_t v97 = 0;
        long long v99 = (void *)0xE000000000000000;
      }
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v112);
      v100._uint64_t countAndFlagsBits = v97;
      v100._uint64_t object = v99;
      String.append(_:)(v100);
      swift_bridgeObjectRelease();
      v101._uint64_t countAndFlagsBits = 8250;
      v101._uint64_t object = (void *)0xE200000000000000;
      String.append(_:)(v101);
      _print_unlocked<A, B>(_:_:)();
      v102._uint64_t countAndFlagsBits = 32;
      v102._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v102);
      String.append(_:)(v113);
      swift_bridgeObjectRelease();
      outlined destroy of (label: String?, value: Any)((uint64_t)&v114);
      dispatch thunk of _AnyIteratorBoxBase.next()();
    }
    while (*((void *)&v118 + 1));
    uint64_t v103 = v119;
  }
  else
  {
    uint64_t v103 = 0;
  }
  swift_release();
  swift_release();
  swift_release();
  return v103;
}

unint64_t static PersonNameComponents._getObjectiveCType()()
{
  return type metadata accessor for NSPersonNameComponents();
}

uint64_t static PersonNameComponents._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
  uint64_t v4 = swift_allocObject();
  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSPersonNameComponents();
  uint64_t result = swift_dynamicCast();
  *(void *)(v4 + 16) = v6;
  *a2 = v4;
  return result;
}

uint64_t static PersonNameComponents._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
  uint64_t v4 = swift_allocObject();
  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSPersonNameComponents();
  swift_dynamicCast();
  *(void *)(v4 + 16) = v6;
  *a2 = v4;
  return 1;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance PersonNameComponents()
{
  objc_msgSend(*(id *)(*(void *)v0 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSPersonNameComponents();
  swift_dynamicCast();
  return v2;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance PersonNameComponents(void *a1, uint64_t *a2)
{
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
  uint64_t v4 = swift_allocObject();
  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSPersonNameComponents();
  uint64_t result = swift_dynamicCast();
  *(void *)(v4 + 16) = v6;
  *a2 = v4;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance PersonNameComponents(void *a1, uint64_t *a2)
{
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
  uint64_t v4 = swift_allocObject();
  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSPersonNameComponents();
  swift_dynamicCast();
  *(void *)(v4 + 16) = v6;
  *a2 = v4;
  return 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance PersonNameComponents@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  if (result)
  {
    uint64_t v2 = (void *)result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    uint64_t v4 = swift_allocObject();
    objc_msgSend(v2, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    uint64_t result = swift_dynamicCast();
    *(void *)(v4 + 16) = v5;
    *a2 = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t NSPersonNameComponents._toCustomAnyHashable()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
  uint64_t v1 = swift_allocObject();
  objc_msgSend(v0, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSPersonNameComponents();
  swift_dynamicCast();
  *(void *)(v1 + 16) = v3;
  lazy protocol witness table accessor for type PersonNameComponents and conformance PersonNameComponents();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSPersonNameComponents()
{
  id v1 = *v0;
  NSPersonNameComponents._toCustomAnyHashable()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PersonNameComponents.CodingKeys()
{
  uint64_t result = 0x66657250656D616ELL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6D614E6E65766967;
      break;
    case 2:
      uint64_t v2 = 0x656C6464696DLL;
      goto LABEL_5;
    case 3:
      uint64_t v2 = 0x796C696D6166;
LABEL_5:
      uint64_t result = v2 & 0xFFFFFFFFFFFFLL | 0x614E000000000000;
      break;
    case 4:
      uint64_t result = 0x66667553656D616ELL;
      break;
    case 5:
      uint64_t result = 0x656D616E6B63696ELL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PersonNameComponents.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PersonNameComponents.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

unint64_t protocol witness for CodingKey.init(intValue:) in conformance PersonNameComponents.CodingKeys@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized FloatingPointRoundingRule.CodingValue.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PersonNameComponents.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PersonNameComponents.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t PersonNameComponents.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<PersonNameComponents.CodingKeys>);
  uint64_t v5 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_msgSend(objc_allocWithZone((Class)NSPersonNameComponents), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  uint64_t v35 = v9;
  uint64_t v10 = a1[3];
  uint64_t v28 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  lazy protocol witness table accessor for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    swift_release();
  }
  else
  {
    uint64_t v11 = v5;
    char v34 = 0;
    uint64_t v12 = v27;
    uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    specialized PersonNameComponents.namePrefix.setter(v13, v15, (SEL *)&selRef_setNamePrefix_);
    swift_bridgeObjectRelease();
    char v33 = 1;
    uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    specialized PersonNameComponents.namePrefix.setter(v16, v17, (SEL *)&selRef_setGivenName_);
    swift_bridgeObjectRelease();
    char v32 = 2;
    uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    specialized PersonNameComponents.namePrefix.setter(v18, v19, (SEL *)&selRef_setMiddleName_);
    swift_bridgeObjectRelease();
    char v31 = 3;
    uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    specialized PersonNameComponents.namePrefix.setter(v20, v21, (SEL *)&selRef_setFamilyName_);
    swift_bridgeObjectRelease();
    char v30 = 4;
    uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    specialized PersonNameComponents.namePrefix.setter(v22, v23, (SEL *)&selRef_setNameSuffix_);
    swift_bridgeObjectRelease();
    char v29 = 5;
    uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    specialized PersonNameComponents.namePrefix.setter(v24, v25, (SEL *)&selRef_setNickname_);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v12);
    *a2 = v35;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
}

uint64_t PersonNameComponents.encode(to:)(void *a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedEncodingContainer<PersonNameComponents.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  id v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  id v10 = *(id *)(v9 + 16);
  swift_retain();
  id v11 = objc_msgSend(v10, sel_namePrefix);
  if (v11)
  {
    uint64_t v12 = v11;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    swift_release();

    char v35 = 0;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (v2) {
      goto LABEL_23;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v13 = *(void **)(v9 + 16);
  swift_retain();
  id v14 = v13;
  id v15 = objc_msgSend(v14, sel_givenName);
  if (v15)
  {
    uint64_t v16 = v15;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    swift_release();

    char v36 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (v3) {
      goto LABEL_23;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v17 = *(void **)(v9 + 16);
  swift_retain();
  id v18 = v17;
  id v19 = objc_msgSend(v18, sel_middleName);
  if (v19)
  {
    uint64_t v20 = v19;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    swift_release();

    char v37 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (v3) {
      goto LABEL_23;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v21 = *(void **)(v9 + 16);
  swift_retain();
  id v22 = v21;
  id v23 = objc_msgSend(v22, sel_familyName);
  if (v23)
  {
    uint64_t v24 = v23;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    swift_release();

    char v38 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (v3) {
      goto LABEL_23;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v25 = *(void **)(v9 + 16);
  swift_retain();
  id v26 = v25;
  id v27 = objc_msgSend(v26, sel_nameSuffix);
  if (v27)
  {
    uint64_t v28 = v27;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    swift_release();

    char v39 = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (!v3)
    {
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
LABEL_23:
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return swift_bridgeObjectRelease();
  }
  swift_release();

LABEL_21:
  char v29 = *(void **)(v9 + 16);
  swift_retain();
  id v30 = v29;
  id v31 = objc_msgSend(v30, sel_nickname);
  if (v31)
  {
    char v32 = v31;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    swift_release();

    char v40 = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    goto LABEL_23;
  }
  swift_release();

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PersonNameComponents@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return PersonNameComponents.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PersonNameComponents(void *a1)
{
  return PersonNameComponents.encode(to:)(a1);
}

void specialized PersonNameComponents.namePrefix.setter(uint64_t a1, uint64_t a2, SEL *a3)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v6 = *(void **)(*(void *)v3 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    uint64_t v7 = swift_allocObject();
    id v8 = v6;
    objc_msgSend(v8, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    *(void *)(v7 + 16) = v12;
    swift_release();
    *(void *)uint64_t v3 = v7;
  }
  uint64_t v9 = *(void **)(*(void *)v3 + 16);
  if (a2) {
    id v10 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    id v10 = 0;
  }
  id v11 = v9;
  objc_msgSend(v11, *a3, v10);
}

unint64_t type metadata accessor for NSPersonNameComponents()
{
  unint64_t result = lazy cache variable for type metadata for NSPersonNameComponents;
  if (!lazy cache variable for type metadata for NSPersonNameComponents)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSPersonNameComponents);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents and conformance PersonNameComponents()
{
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents;
  if (!lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents;
  if (!lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents;
  if (!lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents;
  if (!lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents;
  if (!lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents;
  if (!lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for PersonNameComponents(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type PersonNameComponents and conformance PersonNameComponents();
  a1[2] = lazy protocol witness table accessor for type PersonNameComponents and conformance PersonNameComponents();
  a1[3] = lazy protocol witness table accessor for type PersonNameComponents and conformance PersonNameComponents();
  unint64_t result = lazy protocol witness table accessor for type PersonNameComponents and conformance PersonNameComponents();
  a1[4] = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for PersonNameComponents(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PersonNameComponents and conformance PersonNameComponents();
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_181BD718C(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_181BD71AC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PersonNameComponents.namePrefix : PersonNameComponents(a1, a2, a3, a4, (SEL *)&selRef_setNamePrefix_);
}

void sub_181BD71CC(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_181BD71EC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PersonNameComponents.namePrefix : PersonNameComponents(a1, a2, a3, a4, (SEL *)&selRef_setGivenName_);
}

void sub_181BD720C(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_181BD722C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PersonNameComponents.namePrefix : PersonNameComponents(a1, a2, a3, a4, (SEL *)&selRef_setMiddleName_);
}

void sub_181BD724C(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_181BD726C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PersonNameComponents.namePrefix : PersonNameComponents(a1, a2, a3, a4, (SEL *)&selRef_setFamilyName_);
}

void sub_181BD728C(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_181BD72AC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PersonNameComponents.namePrefix : PersonNameComponents(a1, a2, a3, a4, (SEL *)&selRef_setNameSuffix_);
}

void sub_181BD72CC(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_181BD72EC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PersonNameComponents.namePrefix : PersonNameComponents(a1, a2, a3, a4, (SEL *)&selRef_setNickname_);
}

void sub_181BD730C(void *a1@<X8>)
{
  PersonNameComponents.phoneticRepresentation.getter(&v2);
  *a1 = v2;
}

void sub_181BD7350(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_retain();
  PersonNameComponents.phoneticRepresentation.setter(&v1);
}

unsigned char *storeEnumTagSinglePayload for PersonNameComponents.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    char *result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181BD7458);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 5;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PersonNameComponents.CodingKeys()
{
  return &unk_1ECA3C840;
}

uint64_t specialized PersonNameComponents.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x66657250656D616ELL && a2 == 0xEA00000000007869;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D614E6E65766967 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x614E656C6464696DLL && a2 == 0xEA0000000000656DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x614E796C696D6166 && a2 == 0xEA0000000000656DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x66667553656D616ELL && a2 == 0xEA00000000007869 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656D616E6B63696ELL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

ValueMetadata *type metadata accessor for CalendarCache()
{
  return &type metadata for CalendarCache;
}

uint64_t destroy for CalendarCache.State()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CalendarCache.State(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_unknownObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CalendarCache.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for CalendarCache.State(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for CalendarCache.State(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CalendarCache.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

Swift::String __swiftcall Duration.formatted()()
{
  unint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for Duration.TimeFormatStyle(0);
  MEMORY[0x1F4188790](v4 - 8);
  char v6 = (uint64_t *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = (char *)v6
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
              + 48);
  void *v6 = 0;
  uint64_t v8 = *MEMORY[0x1E4FBBE98];
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104))(v7, v8, v9);
  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  swift_storeEnumTagMultiPayload();
  id v10 = (char *)v6 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  *(void *)id v10 = 0;
  v10[8] = 1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v11 = static LocaleCache.cache + 16;
  uint64_t v12 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v12);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v11, &v24);
  os_unfair_lock_unlock(v12);
  swift_release_n();
  uint64_t v13 = v24;
  unint64_t v14 = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating();
  uint64_t v15 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  *((unsigned char *)v6 + *(int *)(v15 + 20)) = 0;
  uint64_t v16 = (void *)((char *)v6 + *(int *)(v15 + 24));
  *uint64_t v16 = v13;
  v16[1] = v14;
  uint64_t v17 = Duration.TimeFormatStyle.format(_:)(v3, v2);
  id v19 = v18;
  outlined destroy of Duration.TimeFormatStyle((uint64_t)v6);
  uint64_t v20 = v17;
  uint64_t v21 = v19;
  result._uint64_t object = v21;
  result._uint64_t countAndFlagsBits = v20;
  return result;
}

uint64_t static Duration.bound(for:in:countingDown:roundingRule:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v174 = a6;
  int v172 = a5;
  uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v175 = *(void *)(v10 - 8);
  uint64_t v176 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v162 = (char *)&v159 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v161 = (char *)&v159 - v13;
  MEMORY[0x1F4188790](v14);
  unint64_t v165 = (char *)&v159 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (FloatingPointRoundingRule, Bool));
  MEMORY[0x1F4188790](v16);
  uint64_t v173 = (char *)&v159 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v166 = (char *)&v159 - v19;
  static Duration.zero.getter();
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  if (static Duration.< infix(_:_:)())
  {
    uint64_t v22 = static Duration.zero.getter();
    uint64_t v20 = MEMORY[0x185304360](v22);
    uint64_t v21 = v23;
  }
  uint64_t v167 = a4;
  uint64_t v168 = a3;
  uint64_t v169 = v16;
  static Duration.zero.getter();
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  if (static Duration.< infix(_:_:)())
  {
    uint64_t v26 = static Duration.zero.getter();
    uint64_t v24 = MEMORY[0x185304360](v26);
    uint64_t v25 = v27;
  }
  uint64_t v177 = a2;
  uint64_t v28 = Duration.components.getter();
  static Duration.zero.getter();
  if (static Duration.< infix(_:_:)())
  {
    uint64_t v29 = static Duration.zero.getter();
    MEMORY[0x185304360](v29);
  }
  uint64_t v30 = Duration.components.getter();
  unint64_t v32 = v31;
  if (!v30)
  {
    unint64_t v178 = v31;
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    uint64_t v33 = static Duration./ infix<A>(_:_:)();
    unint64_t v35 = v38;
    unint64_t v178 = v32;
    uint64_t v36 = static Duration.* infix<A>(_:_:)();
    goto LABEL_23;
  }
  if (!v31)
  {
    uint64_t v39 = v30;
    if (v28 == 0x8000000000000000 && v30 == -1) {
      goto LABEL_133;
    }
    uint64_t v40 = v28 / v30;
    uint64_t v33 = Duration.init(secondsComponent:attosecondsComponent:)();
    uint64_t v42 = v177;
    if ((unsigned __int128)(v39 * (__int128)v40) >> 64 == (v39 * v40) >> 63)
    {
      unint64_t v35 = v41;
      uint64_t v43 = Duration.init(secondsComponent:attosecondsComponent:)();
      uint64_t v45 = v44;
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_127;
  }
  if ((static Duration.< infix(_:_:)() & 1) == 0)
  {
    static Duration./ infix(_:_:)();
    if ((~*(void *)&v46 & 0x7FF0000000000000) != 0)
    {
      if (v46 > -1.0)
      {
        if (v46 < 1.84467441e19)
        {
          unint64_t v47 = (unint64_t)v46;
          unint64_t v178 = (unint64_t)v46;
          unint64_t v48 = lazy protocol witness table accessor for type UInt64 and conformance UInt64();
          uint64_t v49 = static Duration.* infix<A>(_:_:)();
          MEMORY[0x185304360](v24, v25, v49, v50);
          static Duration./ infix(_:_:)();
          if ((~*(void *)&v51 & 0x7FF0000000000000) != 0)
          {
            if (v51 > -9.22337204e18)
            {
              if (v51 < 9.22337204e18)
              {
                uint64_t v52 = (uint64_t)v51;
                uint64_t v171 = (uint64_t)v51;
                Duration.init(secondsComponent:attosecondsComponent:)();
                unint64_t v178 = v47;
                uint64_t v164 = static Duration.* infix<A>(_:_:)();
                uint64_t v54 = v53;
                Duration.init(secondsComponent:attosecondsComponent:)();
                unint64_t v170 = v48;
                unint64_t v178 = v52;
                lazy protocol witness table accessor for type Int64 and conformance Int64();
                uint64_t v55 = static Duration.* infix<A>(_:_:)();
                uint64_t v57 = MEMORY[0x185304350](v164, v54, v55, v56);
                unint64_t v59 = v58;
                unint64_t v178 = v47;
                uint64_t v60 = static Duration.* infix<A>(_:_:)();
                uint64_t v62 = v61;
                unint64_t v178 = v171;
                uint64_t v33 = v57;
                uint64_t v63 = static Duration.* infix<A>(_:_:)();
                uint64_t v65 = v64;
                uint64_t v66 = v62;
                unint64_t v35 = v59;
                uint64_t v36 = MEMORY[0x185304350](v60, v66, v63, v65);
                goto LABEL_23;
              }
              goto LABEL_132;
            }
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            ((void (*)(char *, uint64_t, uint64_t))v165)(v161, v174, v176);
            unint64_t v178 = 0;
            unint64_t v179 = 0xE000000000000000;
            _StringGuts.grow(_:)(36);
            v157._uint64_t object = (void *)0x80000001823AC750;
            v157._uint64_t countAndFlagsBits = 0xD000000000000022;
            String.append(_:)(v157);
            _print_unlocked<A, B>(_:_:)();
            goto LABEL_136;
          }
LABEL_130:
          __break(1u);
          goto LABEL_131;
        }
LABEL_129:
        __break(1u);
        goto LABEL_130;
      }
LABEL_128:
      __break(1u);
      goto LABEL_129;
    }
LABEL_127:
    __break(1u);
    goto LABEL_128;
  }
  uint64_t v33 = static Duration.zero.getter();
  unint64_t v35 = v34;
  uint64_t v36 = static Duration.zero.getter();
LABEL_23:
  uint64_t v43 = v36;
  uint64_t v45 = v37;
  uint64_t v42 = v177;
LABEL_24:
  static Duration.zero.getter();
  int v67 = static Duration.< infix(_:_:)() & 1;
  static Duration.zero.getter();
  if (v67 == (static Duration.< infix(_:_:)() & 1))
  {
    unint64_t v170 = v35;
  }
  else
  {
    uint64_t v68 = static Duration.zero.getter();
    uint64_t v43 = MEMORY[0x185304360](v68);
    uint64_t v45 = v69;
    uint64_t v70 = static Duration.zero.getter();
    uint64_t v33 = MEMORY[0x185304360](v70);
    unint64_t v170 = v71;
  }
  static Duration.zero.getter();
  uint64_t v72 = v43;
  uint64_t v73 = v45;
  if (static Duration.< infix(_:_:)())
  {
    uint64_t v74 = static Duration.zero.getter();
    uint64_t v72 = MEMORY[0x185304360](v74);
    uint64_t v73 = v75;
  }
  uint64_t v171 = v33;
  static Duration.zero.getter();
  char v76 = static Duration.< infix(_:_:)();
  uint64_t v77 = a1;
  uint64_t v78 = v42;
  if (v76)
  {
    uint64_t v79 = static Duration.zero.getter();
    uint64_t v77 = MEMORY[0x185304360](v79);
    uint64_t v78 = v80;
  }
  MEMORY[0x185304360](v72, v73, v77, v78);
  static Duration.zero.getter();
  if (static Duration.< infix(_:_:)())
  {
    uint64_t v81 = static Duration.zero.getter();
    MEMORY[0x185304360](v81);
  }
  static Duration.zero.getter();
  if (static Duration.== infix(_:_:)())
  {
    unint64_t v178 = 2;
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    unint64_t v83 = v170;
    uint64_t v82 = v171;
    static Duration./ infix<A>(_:_:)();
    unint64_t v178 = 2;
    uint64_t v84 = static Duration.* infix<A>(_:_:)();
    MEMORY[0x185304360](v82, v83, v84, v85);
    static Duration.zero.getter();
    uint64_t v86 = v177;
    LODWORD(v163) = static Duration.== infix(_:_:)();
    int v87 = *MEMORY[0x1E4FBBEA0];
    uint64_t v171 = a1;
    uint64_t v164 = v86;
  }
  else
  {
    static Duration.zero.getter();
    if (static Duration.< infix(_:_:)())
    {
      uint64_t v88 = static Duration.zero.getter();
      uint64_t v20 = MEMORY[0x185304360](v88);
      uint64_t v21 = v89;
    }
    uint64_t v90 = MEMORY[0x185304350](v43, v45, v20, v21);
    uint64_t v92 = v91;
    static Duration.zero.getter();
    uint64_t v93 = v90;
    uint64_t v94 = v92;
    if (static Duration.< infix(_:_:)())
    {
      uint64_t v95 = static Duration.zero.getter();
      uint64_t v93 = MEMORY[0x185304360](v95);
      uint64_t v94 = v96;
    }
    static Duration.zero.getter();
    char v97 = static Duration.< infix(_:_:)();
    uint64_t v98 = a1;
    uint64_t v99 = v42;
    if (v97)
    {
      uint64_t v100 = static Duration.zero.getter();
      uint64_t v98 = MEMORY[0x185304360](v100);
      uint64_t v99 = v101;
    }
    uint64_t v160 = v90;
    uint64_t v164 = v92;
    MEMORY[0x185304360](v93, v94, v98, v99);
    static Duration.zero.getter();
    if (static Duration.< infix(_:_:)())
    {
      uint64_t v102 = static Duration.zero.getter();
      MEMORY[0x185304360](v102);
    }
    uint64_t v103 = v175;
    uint64_t v104 = v165;
    uint64_t v105 = v176;
    (*(void (**)(char *, uint64_t, uint64_t))(v175 + 16))(v165, v174, v176);
    int v106 = (*(uint64_t (**)(char *, uint64_t))(v103 + 88))(v104, v105);
    int v107 = *MEMORY[0x1E4FBBEA0];
    uint64_t v163 = v43;
    if (v106 == v107)
    {
      char v108 = static Duration.< infix(_:_:)();
      if (v108) {
        uint64_t v109 = v43;
      }
      else {
        uint64_t v109 = v160;
      }
      if (v108) {
        uint64_t v110 = v45;
      }
      else {
        uint64_t v110 = v164;
      }
      int v87 = v107;
    }
    else if (v106 == *MEMORY[0x1E4FBBE98])
    {
      uint64_t v109 = v43;
      uint64_t v110 = v45;
      int v87 = v107;
      if ((static Duration.< infix(_:_:)() & 1) == 0)
      {
        char v137 = static Duration.== infix(_:_:)();
        uint64_t v109 = v160;
        uint64_t v110 = v164;
        if (v137)
        {
          unint64_t v178 = 2;
          lazy protocol witness table accessor for type Int64 and conformance Int64();
          unint64_t v139 = v170;
          uint64_t v138 = v171;
          static Duration./ infix<A>(_:_:)();
          unint64_t v178 = 2;
          uint64_t v140 = static Duration.* infix<A>(_:_:)();
          MEMORY[0x185304360](v138, v139, v140, v141);
          static Duration.zero.getter();
          char v142 = static Duration.== infix(_:_:)();
          if (v142) {
            uint64_t v109 = v163;
          }
          else {
            uint64_t v109 = v160;
          }
          if (v142) {
            uint64_t v110 = v45;
          }
          else {
            uint64_t v110 = v164;
          }
        }
      }
    }
    else
    {
      int v87 = v107;
      if (v106 == *MEMORY[0x1E4FBBEA8])
      {
        uint64_t v147 = v160;
        uint64_t v148 = v164;
        char v149 = static Duration.< infix(_:_:)();
        if (v149) {
          uint64_t v109 = v43;
        }
        else {
          uint64_t v109 = v147;
        }
        if (v149) {
          uint64_t v110 = v45;
        }
        else {
          uint64_t v110 = v148;
        }
      }
      else if (v106 == *MEMORY[0x1E4FBBEB0])
      {
        uint64_t v154 = v160;
        uint64_t v155 = v164;
        char v156 = static Duration.< infix(_:_:)();
        if (v156) {
          uint64_t v109 = v154;
        }
        else {
          uint64_t v109 = v43;
        }
        if (v156) {
          uint64_t v110 = v155;
        }
        else {
          uint64_t v110 = v45;
        }
      }
      else
      {
        uint64_t v109 = v43;
        uint64_t v110 = v45;
        if (v106 != *MEMORY[0x1E4FBBE88])
        {
          uint64_t v109 = v160;
          uint64_t v110 = v164;
          if (v106 != *MEMORY[0x1E4FBBE90])
          {
LABEL_136:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x181BD8D14);
          }
        }
      }
    }
    unint64_t v178 = 2;
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    unint64_t v112 = v170;
    uint64_t v111 = v171;
    static Duration./ infix<A>(_:_:)();
    unint64_t v178 = 2;
    uint64_t v113 = static Duration.* infix<A>(_:_:)();
    MEMORY[0x185304360](v111, v112, v113, v114);
    static Duration.zero.getter();
    int v115 = static Duration.== infix(_:_:)();
    uint64_t v171 = v109;
    uint64_t v164 = v110;
    LODWORD(v163) = v115 ^ static Duration.== infix(_:_:)() ^ 1;
  }
  static Duration.zero.getter();
  unsigned __int8 v116 = static Duration.< infix(_:_:)();
  uint64_t v117 = v169;
  uint64_t v118 = *(int *)(v169 + 48);
  uint64_t v119 = v175;
  unint64_t v120 = v166;
  uint64_t v121 = v176;
  unint64_t v165 = *(char **)(v175 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v165)(v166, v174, v176);
  v120[v118] = (v116 & 1) == 0;
  unint64_t v122 = *(uint64_t (**)(char *, uint64_t))(v119 + 88);
  int v123 = v122(v120, v121);
  int v124 = *MEMORY[0x1E4FBBE98];
  LODWORD(v170) = v87;
  LODWORD(v166) = v124;
  if (v123 == v87 || v123 == v124)
  {
    if (v172) {
      uint64_t v129 = -2;
    }
    else {
      uint64_t v129 = 2;
    }
    unint64_t v178 = v129;
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v127 = static Duration./ infix<A>(_:_:)();
    goto LABEL_61;
  }
  uint64_t v126 = v167;
  uint64_t v125 = v168;
  if (v123 == *MEMORY[0x1E4FBBEA8])
  {
    uint64_t v127 = static Duration.zero.getter();
    if ((v172 & 1) == 0)
    {
LABEL_61:
      uint64_t v125 = v127;
      uint64_t v126 = v128;
LABEL_62:
      uint64_t v130 = v164;
      goto LABEL_63;
    }
LABEL_56:
    uint64_t v127 = MEMORY[0x185304360](v127);
    goto LABEL_61;
  }
  if (v123 != *MEMORY[0x1E4FBBEB0])
  {
    if (v123 == *MEMORY[0x1E4FBBE88])
    {
      static Duration.zero.getter();
      uint64_t v130 = v164;
      char v150 = static Duration.== infix(_:_:)();
      uint64_t v151 = -1;
      if (v172) {
        uint64_t v152 = -1;
      }
      else {
        uint64_t v152 = 1;
      }
      if ((v116 & 1) == 0) {
        uint64_t v151 = 1;
      }
      if ((v150 & 1) == 0) {
        uint64_t v152 = 0;
      }
      if ((v116 ^ v172)) {
        unint64_t v153 = v152;
      }
      else {
        unint64_t v153 = v151;
      }
      unint64_t v178 = v153;
      lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v145 = static Duration.* infix<A>(_:_:)();
      goto LABEL_104;
    }
    if (v123 == *MEMORY[0x1E4FBBE90])
    {
      static Duration.zero.getter();
      if ((static Duration.== infix(_:_:)() & 1) != 0
        || (static Duration.zero.getter(), ((static Duration.< infix(_:_:)() ^ v172) & 1) == 0))
      {
        uint64_t v127 = static Duration.zero.getter();
        goto LABEL_61;
      }
      static Duration.zero.getter();
      if (static Duration.< infix(_:_:)()) {
        goto LABEL_62;
      }
      uint64_t v127 = static Duration.zero.getter();
      goto LABEL_56;
    }
    goto LABEL_134;
  }
  uint64_t v130 = v164;
  if ((v172 & 1) == 0) {
    goto LABEL_63;
  }
  uint64_t v145 = static Duration.zero.getter();
LABEL_104:
  uint64_t v125 = v145;
  uint64_t v126 = v146;
LABEL_63:
  uint64_t v131 = MEMORY[0x185304350](v171, v130, v125, v126);
  static Duration.zero.getter();
  char v132 = static Duration.< infix(_:_:)();
  uint64_t v133 = *(int *)(v117 + 48);
  uint64_t v134 = v173;
  uint64_t v135 = v176;
  ((void (*)(char *, uint64_t, uint64_t))v165)(v173, v174, v176);
  v134[v133] = (v132 & 1) == 0;
  int v136 = v122(v134, v135);
  if (v136 == v170)
  {
    static Duration.zero.getter();
    char v143 = static Duration.< infix(_:_:)();
    goto LABEL_77;
  }
  char v143 = v163;
  if (v136 == v166) {
    goto LABEL_77;
  }
  if (v136 == *MEMORY[0x1E4FBBEA8])
  {
LABEL_67:
    char v143 = v172 ^ 1;
    goto LABEL_77;
  }
  if (v136 == *MEMORY[0x1E4FBBEB0])
  {
    char v143 = v172;
    goto LABEL_77;
  }
  if (v136 == *MEMORY[0x1E4FBBE88])
  {
    static Duration.zero.getter();
    char v143 = static Duration.< infix(_:_:)() ^ v172;
    goto LABEL_77;
  }
  if (v136 != *MEMORY[0x1E4FBBE90])
  {
    ((void (*)(char *, uint64_t, uint64_t))v165)(v162, v174, v176);
    unint64_t v178 = 0;
    unint64_t v179 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    v158._uint64_t object = (void *)0x80000001823AC750;
    v158._uint64_t countAndFlagsBits = 0xD000000000000022;
    String.append(_:)(v158);
    _print_unlocked<A, B>(_:_:)();
    goto LABEL_136;
  }
  char v143 = v172;
  if ((v132 & 1) == 0) {
    goto LABEL_67;
  }
LABEL_77:
  (*(void (**)(char *, uint64_t))(v175 + 8))(v173, v176);
  if ((v143 & 1) == 0) {
    static Duration.== infix(_:_:)();
  }
  return v131;
}

uint64_t outlined destroy of Duration.TimeFormatStyle(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Duration.TimeFormatStyle(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id specialized Measurement<>.converted(to:)@<X0>(id a1@<X1>, void *a2@<X0>, uint64_t a3@<X8>, double a4@<D0>)
{
  if ((objc_msgSend(a1, sel_isEqual_) & 1) == 0)
  {
    id v7 = objc_msgSend(a1, sel_converter);
    objc_msgSend(v7, sel_baseUnitValueFromValue_, a4);
    a4 = v8;

    swift_getObjectType();
    id v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_baseUnit);
    LODWORD(v7) = objc_msgSend(a2, sel_isEqual_, v9);

    if (!v7)
    {
      id v10 = objc_msgSend(a2, sel_converter);
      objc_msgSend(v10, sel_valueFromBaseUnitValue_, a4);
      a4 = v11;
    }
  }
  *(void *)a3 = a2;
  *(double *)(a3 + 8) = a4;

  return a2;
}

uint64_t Measurement<>.AttributedStyle.format(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  unsigned int v282 = a3;
  uint64_t v283 = a2;
  uint64_t v298 = 0;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  double v8 = (char *)v276 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Measurement<>.FormatStyle();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v276 - v11;
  uint64_t v14 = a1[1];
  v313[0] = *a1;
  uint64_t v13 = (void *)v313[0];
  v313[1] = v14;
  type metadata accessor for Measurement();
  id v15 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  int v16 = swift_dynamicCast();
  uint64_t v290 = v8;
  uint64_t v291 = v6;
  uint64_t v289 = v4;
  id v296 = v15;
  if (!v16)
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16))(v12, v4, v9);
    id v82 = NSDimension.skeleton.getter();
    if (v83)
    {
      LOBYTE(v313[0]) = *v12;
      uint64_t v84 = *(int *)(v9 + 32);
      LOBYTE(v300) = v12[*(int *)(v9 + 36)];
      uint64_t v85 = static Measurement<>.FormatStyle.skeleton(_:width:usage:numberFormatStyle:)((uint64_t)v82, v83, (unsigned __int8 *)v313, (unsigned __int8 *)&v300, (uint64_t)&v12[v84]);
      unint64_t v87 = v86;
      swift_bridgeObjectRelease();
      uint64_t v88 = v12;
      unint64_t v89 = v87;
      (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v88, v9);
      *(_OWORD *)int v313 = *(_OWORD *)(v4 + 8);
      swift_unknownObjectRetain();
      uint64_t v90 = specialized static ICUMeasurementNumberFormatter.create(for:locale:)(v85, v87, v313);
      swift_unknownObjectRelease();
      if (v90)
      {
        uint64_t v91 = ICUNumberFormatterBase.attributedFormatPositions(_:)(v14, 0, 0x100000000);
        id v94 = v296;
        if (!v92)
        {
          Double.description.getter();
          BigString.init(_:)();
          AttributedString.init(_:attributes:)(v313, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)&v300);
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v31 = v300;
LABEL_122:
          uint64_t v274 = v283;
          goto LABEL_123;
        }
        uint64_t v95 = v91;
        unint64_t v96 = v92;
        char v97 = v93;
        unint64_t v279 = (unint64_t)v90;
        swift_bridgeObjectRetain();
        BigString.init(_:)();
        AttributedString.init(_:attributes:)(v311, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], v313);
        uint64_t v31 = v313[0];
        if (v97[2])
        {
          uint64_t v295 = v97[2];
          unint64_t v278 = v89;
          swift_bridgeObjectRetain();
          unint64_t v292 = lazy protocol witness table accessor for type String and conformance String();
          long long v277 = v97;
          uint64_t v98 = v97 + 6;
          unint64_t v280 = 0x80000001823AC840;
          unint64_t v281 = 0x80000001823AC880;
          unint64_t v287 = v96;
          unint64_t v288 = v95;
          do
          {
            uint64_t v99 = *((unsigned int *)v98 - 4);
            uint64_t v294 = v98;
            *(void *)&long long v300 = v95;
            *((void *)&v300 + 1) = v96;
            swift_bridgeObjectRetain();
            unint64_t v100 = String.Index.init<A>(utf16Offset:in:)();
            *(void *)&long long v300 = v95;
            *((void *)&v300 + 1) = v96;
            swift_bridgeObjectRetain();
            unint64_t v101 = String.Index.init<A>(utf16Offset:in:)();
            if (v101 >> 14 < v100 >> 14) {
              goto LABEL_127;
            }
            unint64_t v102 = v101;
            swift_retain();
            specialized Range<>.init<A>(_range:in:)(v100, v102, (_OWORD *)v31, (uint64_t *)&v300);
            uint64_t v103 = v302;
            if (v302 == 2) {
              goto LABEL_135;
            }
            v297 = (_OWORD *)*((void *)&v300 + 1);
            uint64_t v104 = v300;
            unint64_t v293 = v301;
            unint64_t v105 = v303;
            uint64_t v106 = v304;
            uint64_t v107 = v305;
            uint64_t v108 = (uint64_t)v306;
            long long v310 = MEMORY[0x1E4FBC868];
            char v109 = 0;
            char v110 = 2;
            switch((int)v99)
            {
              case 0:
                goto LABEL_36;
              case 1:
                char v109 = 1;
LABEL_36:
                specialized AttributeContainer.subscript.setter(v109, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, 0xD00000000000001BLL, v280);
                break;
              case 2:
                goto LABEL_41;
              case 6:
                char v110 = 0;
                goto LABEL_41;
              case 7:
                char v110 = 3;
                goto LABEL_41;
              case 8:
                char v110 = 4;
                goto LABEL_41;
              case 10:
                char v110 = 1;
LABEL_41:
                specialized AttributeContainer.subscript.setter(v110);
                break;
              default:
                break;
            }
            AttributeScopes.FoundationAttributes.MeasurementAttribute.Component.init(unumberFormatField:)(v99, &v300);
            if (v300 != 2) {
              specialized AttributeContainer.subscript.setter(v300, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, 0xD00000000000001FLL, v281);
            }
            long long v309 = v310;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              long long v111 = *(_OWORD *)(v31 + 32);
              long long v333 = *(_OWORD *)(v31 + 16);
              long long v334 = v111;
              long long v335 = *(_OWORD *)(v31 + 48);
              uint64_t v112 = *(void *)(v31 + 64);
              uint64_t v284 = *(void *)(v31 + 72);
              uint64_t v285 = v104;
              uint64_t v286 = v108;
              uint64_t v113 = *(void *)(v31 + 80);
              uint64_t v114 = *(void *)(v31 + 88);
              type metadata accessor for AttributedString.Guts();
              swift_allocObject();
              outlined retain of Locale((uint64_t)&v333);
              swift_unknownObjectRetain();
              uint64_t v115 = v113;
              uint64_t v108 = v286;
              uint64_t v116 = v114;
              uint64_t v104 = v285;
              uint64_t v31 = AttributedString.Guts.init(string:runs:)(&v333, v112, v284, v115, v116);
              swift_release();
            }
            long long v117 = *(_OWORD *)(v31 + 32);
            long long v330 = *(_OWORD *)(v31 + 16);
            long long v331 = v117;
            long long v332 = *(_OWORD *)(v31 + 48);
            swift_retain();
            outlined retain of Locale((uint64_t)&v330);
            BigString.startIndex.getter();
            outlined release of Locale((uint64_t)&v330);
            long long v118 = *(_OWORD *)(v31 + 16);
            long long v119 = *(_OWORD *)(v31 + 48);
            long long v328 = *(_OWORD *)(v31 + 32);
            long long v329 = v119;
            long long v327 = v118;
            long long v120 = *(_OWORD *)(v31 + 16);
            long long v337 = *(_OWORD *)(v31 + 32);
            long long v338 = v119;
            long long v336 = v120;
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v336, (uint64_t)v339);
            outlined retain of Locale((uint64_t)v339);
            BigString.endIndex.getter();
            outlined release of Locale((uint64_t)&v327);
            swift_release();
            *(void *)&long long v317 = v104;
            *((void *)&v317 + 1) = v297;
            unint64_t v318 = v293;
            uint64_t v319 = v103;
            unint64_t v320 = v105;
            id v321 = (_OWORD *)v106;
            uint64_t v322 = v107;
            id v323 = (_OWORD *)v108;
            long long v121 = *(_OWORD *)(v31 + 16);
            long long v122 = *(_OWORD *)(v31 + 48);
            long long v325 = *(_OWORD *)(v31 + 32);
            long long v326 = v122;
            long long v324 = v121;
            swift_retain_n();
            BigString.unicodeScalars.getter();
            BigString.UnicodeScalarView.subscript.getter();
            outlined release of Locale((uint64_t)v312);
            uint64_t v123 = v31;
            uint64_t v124 = BigSubstring.UnicodeScalarView.startIndex.getter();
            unint64_t v126 = v125;
            uint64_t v128 = v127;
            unint64_t v130 = v129;
            uint64_t v131 = BigSubstring.UnicodeScalarView.endIndex.getter();
            uint64_t v133 = v132;
            uint64_t v135 = v134;
            uint64_t v137 = v136;
            outlined release of Locale((uint64_t)v313);
            swift_release();
            v297 = (_OWORD *)v123;
            *(void *)&long long v300 = v123;
            *((void *)&v300 + 1) = v124;
            unint64_t v301 = v126;
            uint64_t v302 = v128;
            unint64_t v303 = v130;
            uint64_t v304 = v131;
            uint64_t v305 = v133;
            uint64_t v306 = v135;
            uint64_t v307 = v137;
            if (one-time initialization token for currentIdentity != -1) {
              swift_once();
            }
            uint64_t v138 = (uint64_t *)(static AttributedString.currentIdentity + 16);
            unint64_t v139 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
            swift_retain();
            os_unfair_lock_lock(v139);
            uint64_t v140 = v298;
            closure #1 in static AttributedString._nextModifyIdentity.getter(v138, &v299);
            uint64_t v298 = v140;
            os_unfair_lock_unlock(v139);
            swift_release();
            uint64_t v141 = v299;
            uint64_t v308 = v299;
            BigString.init()();
            uint64_t v299 = 0;
            MEMORY[0x185309530](&v299, 8);
            uint64_t v142 = v299;
            type metadata accessor for AttributedString.Guts();
            uint64_t v143 = swift_allocObject();
            char v144 = BigString.isEmpty.getter();
            double v8 = v290;
            uint64_t v6 = v291;
            uint64_t v95 = v288;
            uint64_t v4 = v289;
            if ((v144 & 1) == 0) {
              goto LABEL_129;
            }
            long long v145 = v315;
            *(_OWORD *)(v143 + 16) = v314;
            *(_OWORD *)(v143 + 32) = v145;
            *(_OWORD *)(v143 + 48) = v316;
            *(void *)(v143 + 64) = 0;
            *(void *)(v143 + 72) = 0;
            *(void *)(v143 + 80) = 0;
            *(void *)(v143 + 88) = v142;
            swift_release();
            LOBYTE(v299) = 0;
            AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v309, (char *)&v299);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v308 != v141) {
              goto LABEL_138;
            }
            uint64_t v98 = v294 + 3;
            uint64_t v31 = v300;
            swift_release();
            id v94 = v296;
            --v295;
            unint64_t v96 = v287;
          }
          while (v295);
          swift_bridgeObjectRelease();
        }
LABEL_121:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_122;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v9);
    }
    if ((Measurement<>.FormatStyle.shouldConvertToBestUnit.getter(v9) & 1) == 0
      || (v313[0] = (uint64_t)v296,
          v313[1] = v14,
          uint64_t v146 = Measurement<>.FormatStyle.skeletonForUsage(_:)((uint64_t)v313, v9),
          !v147))
    {
LABEL_87:
      if (Measurement<>.FormatStyle.shouldConvertToBestUnit.getter(v9))
      {
        v313[0] = (uint64_t)v296;
        v313[1] = v14;
        uint64_t v207 = Measurement<>.FormatStyle.skeletonForBaseUnit(_:)((uint64_t)v313, v9);
        if (v208)
        {
          uint64_t v210 = v207;
          unint64_t v211 = v208;
          uint64_t v212 = v209;
          *(_OWORD *)int v313 = *(_OWORD *)(v4 + 8);
          swift_unknownObjectRetain();
          __int16 v213 = specialized static ICUMeasurementNumberFormatter.create(for:locale:)(v210, v211, v313);
          swift_unknownObjectRelease();
          if (v213)
          {
            uint64_t v214 = ICUNumberFormatterBase.attributedFormatPositions(_:)(v212, 0, 0x100000000);
            if (v215)
            {
              uint64_t v217 = v214;
              uint64_t v218 = v215;
              __int16 v219 = v216;
              unint64_t v279 = (unint64_t)v213;
              swift_bridgeObjectRetain();
              BigString.init(_:)();
              AttributedString.init(_:attributes:)(v311, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], v313);
              uint64_t v31 = v313[0];
              if (v219[2])
              {
                uint64_t v295 = v219[2];
                unint64_t v278 = v211;
                swift_bridgeObjectRetain();
                unint64_t v220 = lazy protocol witness table accessor for type String and conformance String();
                uint64_t v286 = v218;
                unint64_t v287 = v220;
                long long v277 = v219;
                unint64_t v221 = v219 + 6;
                unint64_t v280 = 0x80000001823AC840;
                unint64_t v281 = 0x80000001823AC880;
                uint64_t v285 = v217;
                do
                {
                  int v222 = (_OWORD *)v31;
                  uint64_t v223 = *((unsigned int *)v221 - 4);
                  *(void *)&long long v300 = v217;
                  *((void *)&v300 + 1) = v218;
                  swift_bridgeObjectRetain();
                  unint64_t v224 = String.Index.init<A>(utf16Offset:in:)();
                  *(void *)&long long v300 = v217;
                  *((void *)&v300 + 1) = v218;
                  swift_bridgeObjectRetain();
                  unint64_t v225 = String.Index.init<A>(utf16Offset:in:)();
                  if (v225 >> 14 < v224 >> 14) {
                    goto LABEL_130;
                  }
                  unint64_t v226 = v225;
                  swift_retain();
                  unint64_t v227 = v226;
                  int v228 = v222;
                  specialized Range<>.init<A>(_range:in:)(v224, v227, v222, (uint64_t *)&v300);
                  uint64_t v229 = v302;
                  if (v302 == 2) {
                    goto LABEL_136;
                  }
                  unint64_t v292 = *((void *)&v300 + 1);
                  unint64_t v293 = v300;
                  unint64_t v288 = v301;
                  unint64_t v230 = v303;
                  uint64_t v231 = v304;
                  uint64_t v232 = v305;
                  v297 = v306;
                  long long v310 = MEMORY[0x1E4FBC868];
                  char v233 = 0;
                  char v234 = 2;
                  switch((int)v223)
                  {
                    case 0:
                      goto LABEL_97;
                    case 1:
                      char v233 = 1;
LABEL_97:
                      specialized AttributeContainer.subscript.setter(v233, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, 0xD00000000000001BLL, v280);
                      break;
                    case 2:
                      goto LABEL_102;
                    case 6:
                      char v234 = 0;
                      goto LABEL_102;
                    case 7:
                      char v234 = 3;
                      goto LABEL_102;
                    case 8:
                      char v234 = 4;
                      goto LABEL_102;
                    case 10:
                      char v234 = 1;
LABEL_102:
                      specialized AttributeContainer.subscript.setter(v234);
                      break;
                    default:
                      break;
                  }
                  AttributeScopes.FoundationAttributes.MeasurementAttribute.Component.init(unumberFormatField:)(v223, &v300);
                  if (v300 != 2) {
                    specialized AttributeContainer.subscript.setter(v300, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, 0xD00000000000001FLL, v281);
                  }
                  uint64_t v294 = v221;
                  long long v309 = v310;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  {
                    long long v235 = v228[2];
                    long long v333 = v228[1];
                    long long v334 = v235;
                    long long v335 = v228[3];
                    uint64_t v284 = v232;
                    uint64_t v236 = v231;
                    unint64_t v237 = v230;
                    uint64_t v238 = *((void *)v228 + 8);
                    uint64_t v239 = *((void *)v228 + 9);
                    uint64_t v240 = *((void *)v228 + 10);
                    uint64_t v241 = *((void *)v228 + 11);
                    type metadata accessor for AttributedString.Guts();
                    swift_allocObject();
                    outlined retain of Locale((uint64_t)&v333);
                    swift_unknownObjectRetain();
                    uint64_t v242 = v239;
                    unint64_t v230 = v237;
                    uint64_t v231 = v236;
                    uint64_t v232 = v284;
                    uint64_t v243 = AttributedString.Guts.init(string:runs:)(&v333, v238, v242, v240, v241);
                    swift_release();
                    int v228 = (_OWORD *)v243;
                  }
                  long long v244 = v228[2];
                  long long v330 = v228[1];
                  long long v331 = v244;
                  long long v332 = v228[3];
                  swift_retain();
                  outlined retain of Locale((uint64_t)&v330);
                  BigString.startIndex.getter();
                  outlined release of Locale((uint64_t)&v330);
                  long long v245 = v228[1];
                  long long v246 = v228[3];
                  long long v328 = v228[2];
                  long long v329 = v246;
                  long long v327 = v245;
                  long long v247 = v228[1];
                  long long v337 = v228[2];
                  long long v338 = v246;
                  long long v336 = v247;
                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v336, (uint64_t)v339);
                  outlined retain of Locale((uint64_t)v339);
                  BigString.endIndex.getter();
                  outlined release of Locale((uint64_t)&v327);
                  swift_release();
                  *(void *)&long long v317 = v293;
                  *((void *)&v317 + 1) = v292;
                  unint64_t v318 = v288;
                  uint64_t v319 = v229;
                  unint64_t v320 = v230;
                  id v321 = (_OWORD *)v231;
                  uint64_t v322 = v232;
                  id v323 = v297;
                  long long v248 = v228[1];
                  long long v249 = v228[3];
                  long long v325 = v228[2];
                  long long v326 = v249;
                  long long v324 = v248;
                  swift_retain_n();
                  BigString.unicodeScalars.getter();
                  BigString.UnicodeScalarView.subscript.getter();
                  outlined release of Locale((uint64_t)v312);
                  unint64_t v250 = v228;
                  uint64_t v251 = BigSubstring.UnicodeScalarView.startIndex.getter();
                  unint64_t v253 = v252;
                  uint64_t v255 = v254;
                  unint64_t v257 = v256;
                  uint64_t v258 = BigSubstring.UnicodeScalarView.endIndex.getter();
                  uint64_t v260 = v259;
                  unsigned __int16 v262 = v261;
                  uint64_t v264 = v263;
                  outlined release of Locale((uint64_t)v313);
                  swift_release();
                  v297 = v250;
                  *(void *)&long long v300 = v250;
                  *((void *)&v300 + 1) = v251;
                  unint64_t v301 = v253;
                  uint64_t v302 = v255;
                  unint64_t v303 = v257;
                  uint64_t v304 = v258;
                  uint64_t v305 = v260;
                  uint64_t v306 = v262;
                  uint64_t v307 = v264;
                  if (one-time initialization token for currentIdentity != -1) {
                    swift_once();
                  }
                  unint64_t v265 = (uint64_t *)(static AttributedString.currentIdentity + 16);
                  unsigned __int16 v266 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
                  swift_retain();
                  os_unfair_lock_lock(v266);
                  uint64_t v267 = v298;
                  closure #1 in static AttributedString._nextModifyIdentity.getter(v265, &v299);
                  uint64_t v298 = v267;
                  os_unfair_lock_unlock(v266);
                  swift_release();
                  uint64_t v268 = v299;
                  uint64_t v308 = v299;
                  BigString.init()();
                  uint64_t v299 = 0;
                  MEMORY[0x185309530](&v299, 8);
                  uint64_t v269 = v299;
                  type metadata accessor for AttributedString.Guts();
                  uint64_t v270 = swift_allocObject();
                  char v271 = BigString.isEmpty.getter();
                  uint64_t v217 = v285;
                  uint64_t v218 = v286;
                  uint64_t v272 = v294;
                  if ((v271 & 1) == 0) {
                    goto LABEL_131;
                  }
                  long long v273 = v315;
                  *(_OWORD *)(v270 + 16) = v314;
                  *(_OWORD *)(v270 + 32) = v273;
                  *(_OWORD *)(v270 + 48) = v316;
                  *(void *)(v270 + 64) = 0;
                  *(void *)(v270 + 72) = 0;
                  *(void *)(v270 + 80) = 0;
                  *(void *)(v270 + 88) = v269;
                  swift_release();
                  LOBYTE(v299) = 0;
                  AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v309, (char *)&v299);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if (v308 != v268) {
                    goto LABEL_138;
                  }
                  unint64_t v221 = v272 + 3;
                  uint64_t v31 = v300;
                  swift_release();
                  --v295;
                }
                while (v295);
                swift_bridgeObjectRelease();
                double v8 = v290;
                uint64_t v6 = v291;
                uint64_t v4 = v289;
              }
              swift_bridgeObjectRelease();
              goto LABEL_118;
            }
            goto LABEL_115;
          }
          swift_bridgeObjectRelease();
        }
      }
      uint64_t v31 = 0;
      goto LABEL_119;
    }
    uint64_t v149 = v146;
    unint64_t v150 = v147;
    uint64_t v151 = v148;
    *(_OWORD *)int v313 = *(_OWORD *)(v4 + 8);
    swift_unknownObjectRetain();
    uint64_t v152 = specialized static ICUMeasurementNumberFormatter.create(for:locale:)(v149, v150, v313);
    swift_unknownObjectRelease();
    if (!v152)
    {
      swift_bridgeObjectRelease();
      goto LABEL_87;
    }
    uint64_t v153 = ICUNumberFormatterBase.attributedFormatPositions(_:)(v151, 0, 0x100000000);
    if (!v154)
    {
LABEL_115:
      Double.description.getter();
      BigString.init(_:)();
      AttributedString.init(_:attributes:)(v313, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)&v300);
      swift_bridgeObjectRelease();
      goto LABEL_116;
    }
    uint64_t v156 = v153;
    uint64_t v157 = v154;
    Swift::String v158 = v155;
    unint64_t v278 = (unint64_t)v152;
    unint64_t v279 = v150;
    swift_bridgeObjectRetain();
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v311, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], v313);
    uint64_t v31 = v313[0];
    if (v158[2])
    {
      uint64_t v295 = v158[2];
      unint64_t v288 = v156;
      swift_bridgeObjectRetain();
      unint64_t v159 = lazy protocol witness table accessor for type String and conformance String();
      uint64_t v286 = v157;
      unint64_t v287 = v159;
      long long v277 = v158;
      uint64_t v160 = v158 + 6;
      unint64_t v280 = 0x80000001823AC840;
      unint64_t v281 = 0x80000001823AC880;
      do
      {
        uint64_t v161 = *((unsigned int *)v160 - 4);
        unint64_t v162 = v288;
        *(void *)&long long v300 = v288;
        *((void *)&v300 + 1) = v157;
        swift_bridgeObjectRetain();
        unint64_t v163 = String.Index.init<A>(utf16Offset:in:)();
        *(void *)&long long v300 = v162;
        *((void *)&v300 + 1) = v157;
        swift_bridgeObjectRetain();
        unint64_t v164 = String.Index.init<A>(utf16Offset:in:)();
        if (v164 >> 14 < v163 >> 14) {
          goto LABEL_132;
        }
        unint64_t v165 = v164;
        swift_retain();
        specialized Range<>.init<A>(_range:in:)(v163, v165, (_OWORD *)v31, (uint64_t *)&v300);
        uint64_t v166 = v302;
        if (v302 == 2) {
          goto LABEL_137;
        }
        uint64_t v167 = v300;
        unint64_t v292 = v301;
        unint64_t v293 = *((void *)&v300 + 1);
        unint64_t v168 = v303;
        v297 = (_OWORD *)v304;
        uint64_t v169 = v305;
        unint64_t v170 = v306;
        long long v310 = MEMORY[0x1E4FBC868];
        char v171 = 0;
        char v172 = 2;
        switch((int)v161)
        {
          case 0:
            goto LABEL_66;
          case 1:
            char v171 = 1;
LABEL_66:
            specialized AttributeContainer.subscript.setter(v171, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, 0xD00000000000001BLL, v280);
            break;
          case 2:
            goto LABEL_71;
          case 6:
            char v172 = 0;
            goto LABEL_71;
          case 7:
            char v172 = 3;
            goto LABEL_71;
          case 8:
            char v172 = 4;
            goto LABEL_71;
          case 10:
            char v172 = 1;
LABEL_71:
            specialized AttributeContainer.subscript.setter(v172);
            break;
          default:
            break;
        }
        AttributeScopes.FoundationAttributes.MeasurementAttribute.Component.init(unumberFormatField:)(v161, &v300);
        if (v300 != 2) {
          specialized AttributeContainer.subscript.setter(v300, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, 0xD00000000000001FLL, v281);
        }
        uint64_t v294 = v160;
        long long v309 = v310;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          long long v173 = *(_OWORD *)(v31 + 32);
          long long v333 = *(_OWORD *)(v31 + 16);
          long long v334 = v173;
          long long v335 = *(_OWORD *)(v31 + 48);
          uint64_t v175 = *(void *)(v31 + 64);
          uint64_t v174 = *(void *)(v31 + 72);
          uint64_t v176 = *(void *)(v31 + 88);
          uint64_t v284 = *(void *)(v31 + 80);
          uint64_t v285 = v174;
          type metadata accessor for AttributedString.Guts();
          swift_allocObject();
          outlined retain of Locale((uint64_t)&v333);
          swift_unknownObjectRetain();
          uint64_t v31 = AttributedString.Guts.init(string:runs:)(&v333, v175, v285, v284, v176);
          swift_release();
        }
        long long v177 = *(_OWORD *)(v31 + 32);
        long long v330 = *(_OWORD *)(v31 + 16);
        long long v331 = v177;
        long long v332 = *(_OWORD *)(v31 + 48);
        swift_retain();
        outlined retain of Locale((uint64_t)&v330);
        BigString.startIndex.getter();
        outlined release of Locale((uint64_t)&v330);
        long long v178 = *(_OWORD *)(v31 + 16);
        long long v179 = *(_OWORD *)(v31 + 48);
        long long v328 = *(_OWORD *)(v31 + 32);
        long long v329 = v179;
        long long v327 = v178;
        long long v180 = *(_OWORD *)(v31 + 16);
        long long v337 = *(_OWORD *)(v31 + 32);
        long long v338 = v179;
        long long v336 = v180;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v336, (uint64_t)v339);
        outlined retain of Locale((uint64_t)v339);
        BigString.endIndex.getter();
        outlined release of Locale((uint64_t)&v327);
        swift_release();
        *(void *)&long long v317 = v167;
        *((void *)&v317 + 1) = v293;
        unint64_t v318 = v292;
        uint64_t v319 = v166;
        unint64_t v320 = v168;
        id v321 = v297;
        uint64_t v322 = v169;
        id v323 = v170;
        long long v181 = *(_OWORD *)(v31 + 16);
        long long v182 = *(_OWORD *)(v31 + 48);
        long long v325 = *(_OWORD *)(v31 + 32);
        long long v326 = v182;
        long long v324 = v181;
        swift_retain_n();
        BigString.unicodeScalars.getter();
        BigString.UnicodeScalarView.subscript.getter();
        outlined release of Locale((uint64_t)v312);
        uint64_t v183 = v31;
        uint64_t v184 = BigSubstring.UnicodeScalarView.startIndex.getter();
        unint64_t v186 = v185;
        uint64_t v188 = v187;
        unint64_t v190 = v189;
        uint64_t v191 = BigSubstring.UnicodeScalarView.endIndex.getter();
        uint64_t v193 = v192;
        unint64_t v195 = v194;
        uint64_t v197 = v196;
        outlined release of Locale((uint64_t)v313);
        swift_release();
        v297 = (_OWORD *)v183;
        *(void *)&long long v300 = v183;
        *((void *)&v300 + 1) = v184;
        unint64_t v301 = v186;
        uint64_t v302 = v188;
        unint64_t v303 = v190;
        uint64_t v304 = v191;
        uint64_t v305 = v193;
        uint64_t v306 = v195;
        uint64_t v307 = v197;
        if (one-time initialization token for currentIdentity != -1) {
          swift_once();
        }
        unint64_t v198 = (uint64_t *)(static AttributedString.currentIdentity + 16);
        uint64_t v199 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
        swift_retain();
        os_unfair_lock_lock(v199);
        uint64_t v200 = v298;
        closure #1 in static AttributedString._nextModifyIdentity.getter(v198, &v299);
        uint64_t v298 = v200;
        os_unfair_lock_unlock(v199);
        swift_release();
        uint64_t v201 = v299;
        uint64_t v308 = v299;
        BigString.init()();
        uint64_t v299 = 0;
        MEMORY[0x185309530](&v299, 8);
        uint64_t v202 = v299;
        type metadata accessor for AttributedString.Guts();
        uint64_t v203 = swift_allocObject();
        char v204 = BigString.isEmpty.getter();
        uint64_t v157 = v286;
        unint64_t v205 = v294;
        if ((v204 & 1) == 0) {
          goto LABEL_133;
        }
        long long v206 = v315;
        *(_OWORD *)(v203 + 16) = v314;
        *(_OWORD *)(v203 + 32) = v206;
        *(_OWORD *)(v203 + 48) = v316;
        *(void *)(v203 + 64) = 0;
        *(void *)(v203 + 72) = 0;
        *(void *)(v203 + 80) = 0;
        *(void *)(v203 + 88) = v202;
        swift_release();
        LOBYTE(v299) = 0;
        AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v309, (char *)&v299);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v308 != v201) {
          goto LABEL_138;
        }
        uint64_t v160 = v205 + 3;
        uint64_t v31 = v300;
        swift_release();
        id v94 = v296;
        --v295;
      }
      while (v295);
      swift_bridgeObjectRelease();
      double v8 = v290;
      uint64_t v6 = v291;
      uint64_t v4 = v289;
    }
    else
    {
      id v94 = v296;
    }
    goto LABEL_121;
  }
  uint64_t v17 = (void *)v300;
  *(_OWORD *)int v313 = v300;
  uint64_t v18 = Measurement<>.FormatStyle.skeletonForUsage(_:)((uint64_t)v313, v9);
  if (!v19)
  {
LABEL_54:

    goto LABEL_87;
  }
  uint64_t v21 = v18;
  unint64_t v22 = v19;
  uint64_t v23 = v20;
  *(_OWORD *)int v313 = *(_OWORD *)(v4 + 8);
  swift_unknownObjectRetain();
  uint64_t v24 = specialized static ICUMeasurementNumberFormatter.create(for:locale:)(v21, v22, v313);
  swift_unknownObjectRelease();
  if (!v24)
  {
    swift_bridgeObjectRelease();
    goto LABEL_54;
  }
  unint64_t v279 = v22;
  uint64_t v25 = ICUNumberFormatterBase.attributedFormatPositions(_:)(v23, 0, 0x100000000);
  if (!v26)
  {
    Double.description.getter();
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v313, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)&v300);
    swift_bridgeObjectRelease();

LABEL_116:
    swift_release();
    uint64_t v31 = v300;
    goto LABEL_119;
  }
  uint64_t v28 = v25;
  unint64_t v29 = v26;
  uint64_t v30 = v27;
  unint64_t v278 = (unint64_t)v24;
  swift_bridgeObjectRetain();
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v311, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], v313);
  uint64_t v31 = v313[0];
  if (!*(void *)(v30 + 16)) {
    goto LABEL_82;
  }
  uint64_t v295 = *(void *)(v30 + 16);
  long long v277 = v17;
  swift_bridgeObjectRetain();
  unint64_t v32 = lazy protocol witness table accessor for type String and conformance String();
  unint64_t v287 = v29;
  unint64_t v288 = v32;
  v276[1] = v30;
  uint64_t v33 = (unsigned int *)(v30 + 48);
  unint64_t v280 = 0x80000001823AC840;
  unint64_t v281 = 0x80000001823AC880;
  uint64_t v286 = v28;
  do
  {
    uint64_t v34 = v31;
    uint64_t v35 = *(v33 - 4);
    *(void *)&long long v300 = v28;
    *((void *)&v300 + 1) = v29;
    swift_bridgeObjectRetain();
    unint64_t v36 = String.Index.init<A>(utf16Offset:in:)();
    *(void *)&long long v300 = v28;
    *((void *)&v300 + 1) = v29;
    swift_bridgeObjectRetain();
    unint64_t v37 = String.Index.init<A>(utf16Offset:in:)();
    if (v37 >> 14 < v36 >> 14)
    {
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x181BDAB28);
    }
    unint64_t v38 = v37;
    uint64_t v294 = v33;
    swift_retain();
    unint64_t v39 = v38;
    uint64_t v40 = (_OWORD *)v34;
    specialized Range<>.init<A>(_range:in:)(v36, v39, (_OWORD *)v34, (uint64_t *)&v300);
    uint64_t v41 = v302;
    if (v302 == 2) {
      goto LABEL_134;
    }
    long long v42 = v300;
    uint64_t v43 = v304;
    unint64_t v292 = v301;
    unint64_t v293 = v303;
    uint64_t v44 = v306;
    v297 = (_OWORD *)v305;
    long long v310 = MEMORY[0x1E4FBC868];
    char v45 = 0;
    char v46 = 2;
    switch((int)v35)
    {
      case 0:
        goto LABEL_11;
      case 1:
        char v45 = 1;
LABEL_11:
        specialized AttributeContainer.subscript.setter(v45, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, 0xD00000000000001BLL, v280);
        break;
      case 2:
        goto LABEL_16;
      case 6:
        char v46 = 0;
        goto LABEL_16;
      case 7:
        char v46 = 3;
        goto LABEL_16;
      case 8:
        char v46 = 4;
        goto LABEL_16;
      case 10:
        char v46 = 1;
LABEL_16:
        specialized AttributeContainer.subscript.setter(v46);
        break;
      default:
        break;
    }
    AttributeScopes.FoundationAttributes.MeasurementAttribute.Component.init(unumberFormatField:)(v35, &v300);
    if (v300 != 2) {
      specialized AttributeContainer.subscript.setter(v300, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, 0xD00000000000001FLL, v281);
    }
    long long v309 = v310;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      long long v47 = *(_OWORD *)(v34 + 32);
      long long v333 = *(_OWORD *)(v34 + 16);
      long long v334 = v47;
      long long v335 = *(_OWORD *)(v34 + 48);
      uint64_t v48 = *(void *)(v34 + 64);
      uint64_t v50 = *(void *)(v34 + 80);
      uint64_t v49 = *(void *)(v34 + 88);
      uint64_t v284 = *(void *)(v34 + 72);
      uint64_t v285 = v49;
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v333);
      swift_unknownObjectRetain();
      uint64_t v51 = AttributedString.Guts.init(string:runs:)(&v333, v48, v284, v50, v285);
      swift_release();
      uint64_t v40 = (_OWORD *)v51;
    }
    long long v52 = v40[2];
    long long v330 = v40[1];
    long long v331 = v52;
    long long v332 = v40[3];
    swift_retain();
    outlined retain of Locale((uint64_t)&v330);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)&v330);
    long long v53 = v40[1];
    long long v54 = v40[3];
    long long v328 = v40[2];
    long long v329 = v54;
    long long v327 = v53;
    long long v55 = v40[1];
    long long v337 = v40[2];
    long long v338 = v54;
    long long v336 = v55;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v336, (uint64_t)v339);
    outlined retain of Locale((uint64_t)v339);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)&v327);
    swift_release();
    long long v317 = v42;
    unint64_t v318 = v292;
    uint64_t v319 = v41;
    unint64_t v320 = v293;
    id v321 = (_OWORD *)v43;
    uint64_t v322 = (uint64_t)v297;
    id v323 = v44;
    long long v56 = v40[1];
    long long v57 = v40[3];
    long long v325 = v40[2];
    long long v326 = v57;
    long long v324 = v56;
    swift_retain_n();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v312);
    uint64_t v58 = BigSubstring.UnicodeScalarView.startIndex.getter();
    unint64_t v59 = v40;
    unint64_t v61 = v60;
    uint64_t v63 = v62;
    unint64_t v65 = v64;
    uint64_t v66 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v68 = v67;
    uint64_t v70 = v69;
    uint64_t v72 = v71;
    outlined release of Locale((uint64_t)v313);
    swift_release();
    v297 = v59;
    *(void *)&long long v300 = v59;
    *((void *)&v300 + 1) = v58;
    unint64_t v301 = v61;
    uint64_t v302 = v63;
    unint64_t v303 = v65;
    uint64_t v304 = v66;
    uint64_t v305 = v68;
    uint64_t v306 = v70;
    uint64_t v307 = v72;
    if (one-time initialization token for currentIdentity != -1) {
      swift_once();
    }
    uint64_t v73 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    uint64_t v74 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v74);
    uint64_t v75 = v298;
    closure #1 in static AttributedString._nextModifyIdentity.getter(v73, &v299);
    uint64_t v298 = v75;
    os_unfair_lock_unlock(v74);
    swift_release();
    uint64_t v76 = v299;
    uint64_t v308 = v299;
    BigString.init()();
    uint64_t v299 = 0;
    MEMORY[0x185309530](&v299, 8);
    uint64_t v77 = v299;
    type metadata accessor for AttributedString.Guts();
    uint64_t v78 = swift_allocObject();
    char v79 = BigString.isEmpty.getter();
    uint64_t v28 = v286;
    unint64_t v29 = v287;
    uint64_t v80 = v294;
    if ((v79 & 1) == 0) {
      goto LABEL_128;
    }
    long long v81 = v315;
    *(_OWORD *)(v78 + 16) = v314;
    *(_OWORD *)(v78 + 32) = v81;
    *(_OWORD *)(v78 + 48) = v316;
    *(void *)(v78 + 64) = 0;
    *(void *)(v78 + 72) = 0;
    *(void *)(v78 + 80) = 0;
    *(void *)(v78 + 88) = v77;
    swift_release();
    LOBYTE(v299) = 0;
    AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v309, (char *)&v299);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v308 != v76) {
      goto LABEL_138;
    }
    uint64_t v33 = (unsigned int *)(v80 + 3);
    uint64_t v31 = v300;
    swift_release();
    --v295;
  }
  while (v295);
  swift_bridgeObjectRelease();
  double v8 = v290;
  uint64_t v6 = v291;
  uint64_t v4 = v289;
  uint64_t v17 = v277;
LABEL_82:
  swift_bridgeObjectRelease();

LABEL_118:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_119:
  uint64_t v274 = v283;
  id v94 = v296;
LABEL_123:
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v4, v274);
  if (v31)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v274);
    *unsigned int v282 = v31;
  }
  else
  {
    *(void *)&long long v300 = v94;
    *((void *)&v300 + 1) = v14;
    Measurement<>.AttributedStyle.formatAsDescription(_:)((uint64_t)&v300, v282);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v274);
  }
  return result;
}

uint64_t Measurement<>.AttributedStyle.formatAsDescription(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v146 = a2;
  uint64_t v212 = *MEMORY[0x1E4F143B8];
  id v147 = *(id *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *v2;
  LOBYTE(v172[0]) = *v2;
  uint64_t v5 = type metadata accessor for Measurement<>.FormatStyle();
  uint64_t v6 = *(int *)(v5 + 32);
  char v7 = v2[*(int *)(v5 + 36)];
  LOBYTE(v161) = v7;
  uint64_t v8 = (uint64_t)&v2[v6];
  uint64_t v9 = static Measurement<>.FormatStyle.skeleton(_:width:usage:numberFormatStyle:)(0, 0, (unsigned __int8 *)v172, (unsigned __int8 *)&v161, (uint64_t)&v2[v6]);
  uint64_t v10 = *((void *)v2 + 1);
  uint64_t v11 = *((void *)v2 + 2);
  unint64_t v13 = v12;
  *(void *)&v172[0] = v10;
  *((void *)&v172[0] + 1) = v11;
  swift_unknownObjectRetain();
  uint64_t v14 = specialized static ICUMeasurementNumberFormatter.create(for:locale:)(v9, v13, (uint64_t *)v172);
  swift_unknownObjectRelease();
  if (!v14)
  {
    swift_bridgeObjectRelease();
    LOBYTE(v172[0]) = v4;
    LOBYTE(v161) = v7;
    uint64_t v68 = static Measurement<>.FormatStyle.skeleton(_:width:usage:numberFormatStyle:)(0, 0, (unsigned __int8 *)v172, (unsigned __int8 *)&v161, v8);
    unint64_t v70 = v69;
    *(void *)&v172[0] = v10;
    *((void *)&v172[0] + 1) = v11;
    swift_unknownObjectRetain();
    uint64_t v71 = specialized static ICUMeasurementNumberFormatter.create(for:locale:)(v68, v70, (uint64_t *)v172);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    if (v71)
    {
      type metadata accessor for ICUNumberFormatterBase.FormatResult();
      swift_allocObject();
      ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
      uint64_t v139 = swift_retain_n();
      MEMORY[0x1F4188790](v139);
      swift_retain();
      specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v141, (uint64_t *)v172);
      uint64_t v140 = *((void *)&v172[0] + 1);
      swift_release_n();
      if (v140)
      {
        BigString.init(_:)();
        AttributedString.init(_:attributes:)(v172, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)&v161);
        swift_release();
        goto LABEL_29;
      }
      swift_release();
    }
    Double.description.getter();
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v172, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)&v161);
LABEL_29:
    unint64_t v22 = v161;
    goto LABEL_32;
  }
  unint64_t v145 = v13;
  id v15 = v14;
  uint64_t v16 = ICUNumberFormatterBase.attributedFormatPositions(_:)(v3, 0, 0x100000000);
  if (!v17)
  {
    Double.description.getter();
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v172, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)&v161);
    swift_bridgeObjectRelease();
    swift_release();
    unint64_t v22 = v161;
    goto LABEL_32;
  }
  unint64_t v19 = (_OWORD *)v16;
  uint64_t v20 = v17;
  uint64_t v21 = v18;
  swift_bridgeObjectRetain();
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v170, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)v172);
  unint64_t v22 = *(_OWORD **)&v172[0];
  uint64_t v23 = *(void *)(v21 + 16);
  if (!v23) {
    goto LABEL_31;
  }
  unint64_t v159 = 0;
  char v144 = v15;
  swift_bridgeObjectRetain();
  uint64_t v153 = v20;
  unint64_t v154 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v143 = v21;
  uint64_t v24 = (_OWORD *)(v21 + 48);
  unint64_t v148 = 0x80000001823AC840;
  unint64_t v149 = 0x80000001823AC880;
  uint64_t v152 = v19;
  do
  {
    uint64_t v25 = *((unsigned int *)v24 - 4);
    Swift::String v158 = v24;
    uint64_t v161 = v19;
    uint64_t v162 = v20;
    swift_bridgeObjectRetain();
    unint64_t v26 = String.Index.init<A>(utf16Offset:in:)();
    uint64_t v161 = v19;
    uint64_t v162 = v20;
    swift_bridgeObjectRetain();
    unint64_t v27 = String.Index.init<A>(utf16Offset:in:)();
    if (v27 >> 14 < v26 >> 14)
    {
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
    }
    unint64_t v28 = v27;
    uint64_t v157 = v23;
    swift_retain();
    specialized Range<>.init<A>(_range:in:)(v26, v28, v22, (uint64_t *)&v161);
    unint64_t v29 = v164;
    if (v164 == (ValueMetadata *)2) {
      goto LABEL_45;
    }
    uint64_t v30 = v161;
    uint64_t v155 = (_OWORD *)v163;
    uint64_t v156 = v162;
    unint64_t v31 = v165;
    uint64_t v32 = *((void *)&v166 + 1);
    uint64_t v160 = (_OWORD *)v166;
    uint64_t v33 = v167;
    long long v180 = MEMORY[0x1E4FBC868];
    char v34 = 0;
    char v35 = 2;
    switch((int)v25)
    {
      case 0:
        goto LABEL_9;
      case 1:
        char v34 = 1;
LABEL_9:
        specialized AttributeContainer.subscript.setter(v34, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, 0xD00000000000001BLL, v148);
        break;
      case 2:
        goto LABEL_14;
      case 6:
        char v35 = 0;
        goto LABEL_14;
      case 7:
        char v35 = 3;
        goto LABEL_14;
      case 8:
        char v35 = 4;
        goto LABEL_14;
      case 10:
        char v35 = 1;
LABEL_14:
        specialized AttributeContainer.subscript.setter(v35);
        break;
      default:
        break;
    }
    AttributeScopes.FoundationAttributes.MeasurementAttribute.Component.init(unumberFormatField:)(v25, &v161);
    if (v161 != 2) {
      specialized AttributeContainer.subscript.setter((char)v161, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, 0xD00000000000001FLL, v149);
    }
    v210[0] = v180;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      long long v36 = v22[2];
      v205[0] = v22[1];
      v205[1] = v36;
      v205[2] = v22[3];
      uint64_t v38 = *((void *)v22 + 8);
      uint64_t v37 = *((void *)v22 + 9);
      uint64_t v39 = *((void *)v22 + 11);
      uint64_t v150 = *((void *)v22 + 10);
      uint64_t v151 = v37;
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v205);
      swift_unknownObjectRetain();
      unint64_t v22 = (_OWORD *)AttributedString.Guts.init(string:runs:)(v205, v38, v151, v150, v39);
      swift_release();
    }
    long long v40 = v22[2];
    v204[0] = v22[1];
    v204[1] = v40;
    v204[2] = v22[3];
    swift_retain();
    outlined retain of Locale((uint64_t)v204);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v204);
    long long v41 = v22[1];
    long long v42 = v22[3];
    v203[1] = v22[2];
    v203[2] = v42;
    v203[0] = v41;
    long long v43 = v22[1];
    v206[1] = v22[2];
    v206[2] = v42;
    v206[0] = v43;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v206, (uint64_t)v207);
    outlined retain of Locale((uint64_t)v207);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)v203);
    swift_release();
    uint64_t v192 = v30;
    uint64_t v193 = v156;
    uint64_t v194 = (uint64_t)v155;
    unint64_t v195 = v29;
    unint64_t v196 = v31;
    uint64_t v197 = v160;
    uint64_t v198 = v32;
    uint64_t v199 = v33;
    long long v44 = v22[1];
    long long v45 = v22[3];
    long long v201 = v22[2];
    long long v202 = v45;
    long long v200 = v44;
    swift_retain_n();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)&v171);
    char v46 = v22;
    uint64_t v47 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v49 = v48;
    uint64_t v51 = v50;
    unint64_t v53 = v52;
    uint64_t v54 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v56 = v55;
    uint64_t v58 = v57;
    uint64_t v60 = v59;
    outlined release of Locale((uint64_t)v172);
    swift_release();
    uint64_t v160 = v46;
    uint64_t v161 = v46;
    uint64_t v162 = v47;
    uint64_t v163 = v49;
    unint64_t v164 = v51;
    unint64_t v165 = v53;
    *(void *)&long long v166 = v54;
    *((void *)&v166 + 1) = v56;
    uint64_t v167 = v58;
    uint64_t v168 = v60;
    if (one-time initialization token for currentIdentity != -1) {
      swift_once();
    }
    unint64_t v61 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    uint64_t v62 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v62);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v61, (uint64_t *)v208);
    os_unfair_lock_unlock(v62);
    swift_release();
    uint64_t v63 = *(void *)&v208[0];
    uint64_t v169 = *(void *)&v208[0];
    BigString.init()();
    *(void *)&v208[0] = 0;
    MEMORY[0x185309530](v208, 8);
    uint64_t v64 = *(void *)&v208[0];
    type metadata accessor for AttributedString.Guts();
    uint64_t v65 = swift_allocObject();
    unint64_t v19 = v152;
    uint64_t v20 = v153;
    uint64_t v66 = v157;
    if ((BigString.isEmpty.getter() & 1) == 0) {
      goto LABEL_42;
    }
    long long v67 = v172[8];
    *(_OWORD *)(v65 + 16) = v172[7];
    *(_OWORD *)(v65 + 32) = v67;
    *(_OWORD *)(v65 + 48) = v172[9];
    *(void *)(v65 + 64) = 0;
    *(void *)(v65 + 72) = 0;
    *(void *)(v65 + 80) = 0;
    *(void *)(v65 + 88) = v64;
    swift_release();
    LOBYTE(v208[0]) = 0;
    AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)v210, (char *)v208);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v169 != v63)
    {
      int v142 = 0;
      v141[6] = 347;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      swift_release_n();
      swift_willThrow();
      __break(1u);
      JUMPOUT(0x181BDBA50);
    }
    uint64_t v24 = (_OWORD *)((char *)v158 + 24);
    unint64_t v22 = v161;
    swift_release();
    uint64_t v23 = v66 - 1;
  }
  while (v23);
  swift_bridgeObjectRelease();
LABEL_31:
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_32:
  swift_retain();
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v173, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)&v161);
  unint64_t v159 = v161;
  long long v72 = v22[2];
  v191[0] = v22[1];
  v191[1] = v72;
  v191[2] = v22[3];
  swift_retain();
  outlined retain of Locale((uint64_t)v191);
  uint64_t v73 = BigString.endIndex.getter();
  uint64_t v75 = v74;
  uint64_t v77 = v76;
  char v79 = v78;
  outlined release of Locale((uint64_t)v191);
  long long v80 = v22[1];
  long long v81 = v22[3];
  v190[1] = v22[2];
  v190[2] = v81;
  v190[0] = v80;
  swift_retain();
  outlined retain of Locale((uint64_t)v190);
  uint64_t v82 = BigString.endIndex.getter();
  uint64_t v84 = v83;
  unint64_t v86 = v85;
  uint64_t v88 = v87;
  outlined release of Locale((uint64_t)v190);
  swift_release();
  uint64_t v160 = v86;
  uint64_t v89 = v88;
  if (static BigString.Index.< infix(_:_:)()) {
    goto LABEL_43;
  }
  uint64_t v156 = v84;
  uint64_t v157 = v82;
  Swift::String v158 = v79;
  uint64_t v90 = (uint64_t)v22;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    long long v91 = v22[2];
    v189[0] = v22[1];
    v189[1] = v91;
    v189[2] = v22[3];
    uint64_t v92 = v77;
    uint64_t v93 = v75;
    uint64_t v94 = v73;
    uint64_t v95 = *((void *)v22 + 8);
    uint64_t v96 = *((void *)v22 + 9);
    uint64_t v97 = *((void *)v22 + 10);
    uint64_t v155 = (_OWORD *)*((void *)v22 + 11);
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v189);
    swift_unknownObjectRetain();
    uint64_t v98 = v96;
    uint64_t v73 = v94;
    uint64_t v75 = v93;
    uint64_t v77 = v92;
    uint64_t v89 = v88;
    uint64_t v90 = AttributedString.Guts.init(string:runs:)(v189, v95, v98, v97, (uint64_t)v155);
    swift_release();
  }
  long long v99 = *(_OWORD *)(v90 + 32);
  v188[0] = *(_OWORD *)(v90 + 16);
  v188[1] = v99;
  v188[2] = *(_OWORD *)(v90 + 48);
  swift_retain();
  outlined retain of Locale((uint64_t)v188);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v188);
  long long v100 = *(_OWORD *)(v90 + 16);
  long long v101 = *(_OWORD *)(v90 + 48);
  v187[1] = *(_OWORD *)(v90 + 32);
  v187[2] = v101;
  v187[0] = v100;
  long long v102 = *(_OWORD *)(v90 + 16);
  long long v103 = *(_OWORD *)(v90 + 32);
  v208[2] = v101;
  v208[1] = v103;
  v208[0] = v102;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v208, (uint64_t)v209);
  outlined retain of Locale((uint64_t)v209);
  BigString.endIndex.getter();
  outlined release of Locale((uint64_t)v187);
  swift_release();
  *(void *)&long long v180 = v73;
  *((void *)&v180 + 1) = v75;
  uint64_t v181 = v77;
  long long v182 = v158;
  uint64_t v183 = v157;
  uint64_t v184 = v156;
  unint64_t v185 = v160;
  uint64_t v186 = v89;
  specialized AttributedString.Guts.replaceSubrange<A>(_:with:)((uint64_t)&v180, v159);
  uint64_t v160 = v22;
  swift_release();
  swift_release();
  id v104 = objc_msgSend(v147, sel_symbol);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v104);

  v210[0] = MEMORY[0x1E4FBC868];
  unint64_t v164 = &type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component;
  unint64_t v165 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component();
  LOBYTE(v161) = 1;
  long long v166 = xmmword_182106C90;
  LOBYTE(v167) = 1;
  uint64_t v168 = 0;
  specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v161, 0xD00000000000001FLL, 0x80000001823AC880);
  uint64_t v106 = *((void *)&v210[0] + 1);
  uint64_t v105 = *(void *)&v210[0];
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v174, v105, v106, (uint64_t *)&v161);
  Swift::String v158 = v161;
  long long v107 = *(_OWORD *)(v90 + 32);
  v179[0] = *(_OWORD *)(v90 + 16);
  v179[1] = v107;
  v179[2] = *(_OWORD *)(v90 + 48);
  swift_retain();
  outlined retain of Locale((uint64_t)v179);
  uint64_t v108 = BigString.endIndex.getter();
  uint64_t v110 = v109;
  unint64_t v159 = v111;
  uint64_t v113 = v112;
  outlined release of Locale((uint64_t)v179);
  long long v114 = *(_OWORD *)(v90 + 16);
  long long v115 = *(_OWORD *)(v90 + 48);
  v178[1] = *(_OWORD *)(v90 + 32);
  v178[2] = v115;
  v178[0] = v114;
  swift_retain();
  outlined retain of Locale((uint64_t)v178);
  uint64_t v116 = BigString.endIndex.getter();
  uint64_t v118 = v117;
  uint64_t v120 = v119;
  uint64_t v122 = v121;
  outlined release of Locale((uint64_t)v178);
  swift_release();
  uint64_t v156 = v122;
  uint64_t v157 = v120;
  uint64_t v155 = (_OWORD *)v108;
  uint64_t v123 = v110;
  uint64_t v124 = v159;
  unint64_t v125 = v113;
  if (static BigString.Index.< infix(_:_:)()) {
    goto LABEL_44;
  }
  uint64_t v153 = v118;
  unint64_t v154 = v116;
  unint64_t v126 = (_OWORD *)v90;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    long long v127 = *(_OWORD *)(v90 + 32);
    v177[0] = *(_OWORD *)(v90 + 16);
    v177[1] = v127;
    v177[2] = *(_OWORD *)(v90 + 48);
    uint64_t v128 = *(void *)(v90 + 64);
    uint64_t v129 = *(void *)(v90 + 72);
    uint64_t v130 = *(void *)(v90 + 80);
    uint64_t v131 = *(void *)(v90 + 88);
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v177);
    swift_unknownObjectRetain();
    uint64_t v132 = v129;
    uint64_t v124 = v159;
    uint64_t v123 = v110;
    unint64_t v126 = (_OWORD *)AttributedString.Guts.init(string:runs:)(v177, v128, v132, v130, v131);
    swift_release();
  }
  long long v133 = v126[2];
  v176[0] = v126[1];
  v176[1] = v133;
  v176[2] = v126[3];
  swift_retain();
  outlined retain of Locale((uint64_t)v176);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v176);
  long long v134 = v126[1];
  long long v135 = v126[3];
  v175[1] = v126[2];
  v175[2] = v135;
  v175[0] = v134;
  long long v136 = v126[1];
  long long v137 = v126[2];
  v210[2] = v135;
  v210[1] = v137;
  v210[0] = v136;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v210, (uint64_t)v211);
  outlined retain of Locale((uint64_t)v211);
  BigString.endIndex.getter();
  outlined release of Locale((uint64_t)v175);
  swift_release();
  uint64_t v161 = v155;
  uint64_t v162 = v123;
  uint64_t v163 = (uint64_t)v124;
  unint64_t v164 = v125;
  unint64_t v165 = v154;
  *(void *)&long long v166 = v153;
  *((void *)&v166 + 1) = v157;
  uint64_t v167 = v156;
  specialized AttributedString.Guts.replaceSubrange<A>(_:with:)((uint64_t)&v161, v158);
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *uint64_t v146 = v126;
  return result;
}

__n128 Measurement<>.AttributedStyle.locale(_:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  __n128 v7 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v7;
  *(__n128 *)(a3 + 8) = v7;
  return result;
}

void Measurement<>.AttributedStyle.hash(into:)(uint64_t a1, uint64_t a2)
{
  void (*v14)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  Swift::UInt8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  Swift::UInt v48;
  Swift::UInt v49;
  Swift::UInt8 v50;
  Swift::UInt8 v51;
  Swift::UInt8 v52;
  int *v53;
  uint64_t v54;
  int v55;
  void *v56;
  id v57;
  char *v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned char v65[144];
  char v66[8];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  char v82;
  char v83;
  void v84[18];
  unsigned char v85[144];
  unsigned char v86[152];

  uint64_t v3 = v2;
  uint64_t v62 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v63 = *(void *)(v5 - 8);
  uint64_t v64 = v5;
  MEMORY[0x1F4188790](v5);
  unint64_t v61 = (uint64_t)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher._combine(_:)(*v2);
  uint64_t v10 = *((void *)v2 + 2);
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 48);
  swift_unknownObjectRetain();
  if (v12(ObjectType, v10))
  {
    Swift::UInt8 v13 = 1;
LABEL_5:
    Hasher._combine(_:)(v13);
    swift_unknownObjectRelease();
    uint64_t v16 = v63;
    id v15 = v64;
    goto LABEL_59;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v10 + 64))(ObjectType, v10);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 464);
  swift_unknownObjectRetain();
  v14(v84, ObjectType, v10);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v84, (uint64_t)v85, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v85, (uint64_t)v86, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v86) == 1)
  {
    Swift::UInt8 v13 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v85, (uint64_t)v66, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v66[0] == 2)
  {
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = v66[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v17);
  uint64_t v18 = v67;
  if (!v67)
  {
    Hasher._combine(_:)(0);
    uint64_t v23 = v66;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v18 + 16));
  unint64_t v19 = *(void *)(v18 + 16);
  if (!v19)
  {
    outlined init with take of LocalePreferences?((uint64_t)v85, (uint64_t)v65, &demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v23 = v65;
LABEL_20:
    outlined retain of LocalePreferences(v23);
    if (!v68) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v20 = v18 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v20 += 16;
    --v19;
  }
  while (v19);
  swift_bridgeObjectRelease();
  if (!v68)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v69) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v69)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    uint64_t v21 = v70;
    if (!v70) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v21);
    swift_bridgeObjectRelease();
    unint64_t v22 = v71;
    if (!v71) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v21 = v70;
  if (v70) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  unint64_t v22 = v71;
  if (!v71)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v22);
  swift_bridgeObjectRelease();
LABEL_25:
  uint64_t v24 = v73;
  uint64_t v25 = v74;
  uint64_t v60 = v75;
  unint64_t v26 = v76;
  uint64_t v57 = v72;
  uint64_t v58 = v9;
  uint64_t v56 = v76;
  if (v72)
  {
    unint64_t v27 = v72;
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v28 = v24;
    unint64_t v29 = v25;
    uint64_t v30 = v60;
    unint64_t v31 = v26;
    uint64_t v32 = v27;
    _CFObject.hash(into:)();
    if (v24)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      uint64_t v33 = v24;
      char v34 = v25;
      char v35 = v24;
      _CFObject.hash(into:)();

      uint64_t v25 = v34;
      goto LABEL_30;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    long long v36 = v26;
    uint64_t v37 = v24;
    uint64_t v38 = v25;
    uint64_t v39 = v60;
    if (v24) {
      goto LABEL_27;
    }
  }
  uint64_t v33 = v24;
  Hasher._combine(_:)(0);
LABEL_30:
  long long v40 = v56;
  uint64_t v59 = v25;
  if (v25)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    long long v41 = v25;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  long long v42 = v33;
  uint64_t v9 = v58;
  if (v60)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    long long v43 = v60;
    _CFObject.hash(into:)();

    if (v40)
    {
LABEL_35:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      long long v44 = v40;
      _CFObject.hash(into:)();

      goto LABEL_38;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v40) {
      goto LABEL_35;
    }
  }
  Hasher._combine(_:)(0);
  long long v44 = 0;
LABEL_38:
  long long v45 = v59;

  char v46 = v77;
  if (v46)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v46);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  id v15 = v64;
  uint64_t v47 = v78;
  if (!v78)
  {
    Hasher._combine(_:)(0);
    if (v79) {
      goto LABEL_43;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v47);
  swift_bridgeObjectRelease();
  if (!v79) {
    goto LABEL_45;
  }
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  uint64_t v16 = v63;
  if (v80 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v48 = v80 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v48);
  }
  if (v81 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v49 = v81 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v49);
  }
  if (v82 == 2)
  {
    uint64_t v50 = 0;
  }
  else
  {
    uint64_t v50 = v82 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v50);
  if (v83 == 2)
  {
    uint64_t v51 = 0;
  }
  else
  {
    unint64_t v52 = v83 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v51 = v52;
  }
  Hasher._combine(_:)(v51);
  outlined retain of LocalePreferences?((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_59:
  unint64_t v53 = (int *)type metadata accessor for Measurement<>.FormatStyle();
  outlined init with copy of (Hashable & Sendable)?((uint64_t)&v3[v53[8]], (uint64_t)v9, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v9, 1, v15) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v54 = v61;
    outlined init with take of LocalePreferences?((uint64_t)v9, v61, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    Hasher._combine(_:)(1u);
    specialized FloatingPointFormatStyle.hash(into:)(a1);
    outlined destroy of Any?(v54, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  }
  uint64_t v55 = v3[v53[9]];
  if (v55 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Usage.rawValue.getter(v55);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  Hasher._combine(_:)(v3[v53[10]]);
}

BOOL static Measurement<>.AttributedStyle.== infix(_:_:)(unsigned __int8 *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (FloatingPointFormatStyle<Double>?, FloatingPointFormatStyle<Double>?));
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (long long *)((char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v42 - v13;
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v42 - v17;
  if (*a1 != *v16) {
    return 0;
  }
  long long v19 = *(_OWORD *)(a1 + 8);
  long long v46 = *(_OWORD *)(v16 + 8);
  long long v47 = v19;
  long long v45 = v16;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v47, (uint64_t)&v46) & 1) == 0) {
    return 0;
  }
  long long v43 = (long long *)v5;
  uint64_t v20 = v45;
  uint64_t v21 = type metadata accessor for Measurement<>.FormatStyle();
  uint64_t v22 = *(int *)(v21 + 32);
  long long v44 = a1;
  uint64_t v23 = (uint64_t)&a1[v22];
  uint64_t v24 = (int *)v21;
  outlined init with copy of (Hashable & Sendable)?(v23, (uint64_t)v18, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  outlined init with copy of (Hashable & Sendable)?((uint64_t)&v20[v24[8]], (uint64_t)v14, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  uint64_t v25 = (uint64_t)&v8[*(int *)(v6 + 48)];
  outlined init with copy of (Hashable & Sendable)?((uint64_t)v18, (uint64_t)v8, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  outlined init with copy of (Hashable & Sendable)?((uint64_t)v14, v25, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  unint64_t v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v26((uint64_t)v8, 1, v2) == 1)
  {
    if (v26(v25, 1, v2) == 1)
    {
      outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
      outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
      outlined destroy of Any?((uint64_t)v18, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
      unint64_t v28 = v44;
      unint64_t v27 = v45;
      goto LABEL_6;
    }
    uint64_t v32 = &demangling cache variable for type metadata for (FloatingPointFormatStyle<Double>?, FloatingPointFormatStyle<Double>?);
LABEL_21:
    outlined destroy of Any?((uint64_t)v8, v32);
    outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    outlined destroy of Any?((uint64_t)v18, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    return 0;
  }
  outlined init with copy of (Hashable & Sendable)?((uint64_t)v8, (uint64_t)v11, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  if (v26(v25, 1, v2) == 1)
  {
    uint64_t v32 = &demangling cache variable for type metadata for (FloatingPointFormatStyle<Double>?, FloatingPointFormatStyle<Double>?);
LABEL_20:
    outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    goto LABEL_21;
  }
  uint64_t v33 = v43;
  outlined init with take of LocalePreferences?(v25, (uint64_t)v43, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  long long v34 = *v11;
  long long v46 = *v33;
  long long v47 = v34;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v47, (uint64_t)&v46) & 1) == 0)
  {
    outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    uint64_t v32 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?;
    uint64_t v11 = v33;
    goto LABEL_20;
  }
  char v35 = static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v11 + *(int *)(v2 + 36), (char *)v33 + *(int *)(v2 + 36));
  outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  outlined destroy of Any?((uint64_t)v33, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  outlined destroy of Any?((uint64_t)v18, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  unint64_t v28 = v44;
  unint64_t v27 = v45;
  if ((v35 & 1) == 0) {
    return 0;
  }
LABEL_6:
  uint64_t v29 = v24[9];
  int v30 = v28[v29];
  int v31 = v27[v29];
  if (v30 == 14)
  {
    if (v31 == 14) {
      return v28[v24[10]] == v27[v24[10]];
    }
    return 0;
  }
  if (v31 == 14) {
    return 0;
  }
  uint64_t v36 = Usage.rawValue.getter(v30);
  uint64_t v38 = v37;
  if (v36 == Usage.rawValue.getter(v31) && v38 == v39)
  {
    swift_bridgeObjectRelease_n();
    unint64_t v27 = v45;
    return v28[v24[10]] == v27[v24[10]];
  }
  char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v27 = v45;
  if ((v41 & 1) == 0) {
    return 0;
  }
  return v28[v24[10]] == v27[v24[10]];
}

uint64_t Measurement<>.AttributedStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x79745372656E6E69 && a2 == 0xEA0000000000656CLL)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Measurement<A><>.AttributedStyle.CodingKeys()
{
  return 0x79745372656E6E69;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Measurement<A><>.AttributedStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = Measurement<>.AttributedStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Measurement<A><>.AttributedStyle.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Measurement<A><>.AttributedStyle.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t Measurement<>.AttributedStyle.encode(to:)(void *a1)
{
  type metadata accessor for Measurement<>.AttributedStyle.CodingKeys();
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - v4;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for Measurement<>.FormatStyle();
  swift_getWitnessTable();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int Measurement<>.AttributedStyle.hashValue.getter(uint64_t a1)
{
  void (*v12)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v13;
  Swift::UInt8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  void *v38;
  id v39;
  void *v40;
  id v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  Swift::UInt v46;
  Swift::UInt v47;
  Swift::UInt8 v48;
  Swift::UInt8 v49;
  Swift::UInt8 v50;
  int *v51;
  uint64_t v52;
  int v53;
  void *v55;
  void *v56;
  char *v57;
  uint64_t v58;
  id v59;
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned char v65[144];
  char v66[8];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  char v82;
  char v83;
  void v84[18];
  unsigned char v85[144];
  unsigned char v86[144];
  unsigned char v87[80];

  uint64_t v2 = v1;
  uint64_t v63 = a1;
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v3 = *(void *)(v64 - 8);
  MEMORY[0x1F4188790](v64);
  uint64_t v62 = (uint64_t)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v1);
  uint64_t v8 = *((void *)v1 + 2);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 48);
  swift_unknownObjectRetain();
  if (v10(ObjectType, v8))
  {
    Swift::UInt8 v11 = 1;
LABEL_5:
    Hasher._combine(_:)(v11);
    swift_unknownObjectRelease();
    uint64_t v13 = v64;
    goto LABEL_60;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v8 + 64))(ObjectType, v8);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 464);
  swift_unknownObjectRetain();
  v12(v84, ObjectType, v8);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v84, (uint64_t)v85, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v85, (uint64_t)v86, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v86) == 1)
  {
    Swift::UInt8 v11 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v85, (uint64_t)v66, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v66[0] == 2)
  {
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = v66[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v14);
  uint64_t v15 = v67;
  if (!v67)
  {
    Hasher._combine(_:)(0);
    long long v19 = v66;
    goto LABEL_19;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v15 + 16));
  uint64_t v16 = *(void *)(v15 + 16);
  if (!v16)
  {
    outlined init with take of LocalePreferences?((uint64_t)v85, (uint64_t)v65, &demangling cache variable for type metadata for LocalePreferences?);
    long long v19 = v65;
LABEL_19:
    outlined retain of LocalePreferences(v19);
    if (!v68) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }
  outlined retain of LocalePreferences?((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v17 = v15 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v17 += 16;
    --v16;
  }
  while (v16);
  swift_bridgeObjectRelease();
  if (!v68)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v69) {
      goto LABEL_15;
    }
LABEL_21:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v18 = v70;
    if (!v70) {
      goto LABEL_16;
    }
    goto LABEL_22;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v69) {
    goto LABEL_21;
  }
LABEL_15:
  Hasher._combine(_:)(0);
  uint64_t v18 = v70;
  if (!v70)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_23;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v87, v18);
  swift_bridgeObjectRelease();
LABEL_23:
  uint64_t v20 = v71;
  uint64_t v57 = v7;
  if (v71)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v87, v20);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v21 = v73;
  uint64_t v22 = v74;
  uint64_t v23 = v75;
  uint64_t v24 = v76;
  uint64_t v58 = v3;
  uint64_t v59 = v72;
  uint64_t v55 = v74;
  uint64_t v56 = v76;
  if (v72)
  {
    uint64_t v25 = v74;
    unint64_t v26 = v72;
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v27 = v21;
    unint64_t v28 = v25;
    uint64_t v29 = v23;
    int v30 = v24;
    int v31 = v26;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v32 = v24;
    uint64_t v33 = v21;
    long long v34 = v22;
    char v35 = v23;
  }
  uint64_t v60 = v21;
  unint64_t v61 = v23;
  if (v21)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v36 = v21;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v37 = v55;
  uint64_t v38 = v56;
  uint64_t v7 = v57;
  uint64_t v3 = v58;
  if (v55)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v39 = v37;
    _CFObject.hash(into:)();

    long long v40 = v61;
    if (v61) {
      goto LABEL_34;
    }
LABEL_37:
    Hasher._combine(_:)(0);
    if (v38) {
      goto LABEL_35;
    }
    goto LABEL_38;
  }
  Hasher._combine(_:)(0);
  long long v40 = v61;
  if (!v61) {
    goto LABEL_37;
  }
LABEL_34:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  char v41 = v40;
  _CFObject.hash(into:)();

  if (v38)
  {
LABEL_35:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v42 = v38;
    _CFObject.hash(into:)();

    goto LABEL_39;
  }
LABEL_38:
  Hasher._combine(_:)(0);
  uint64_t v42 = 0;
LABEL_39:
  long long v43 = v61;

  long long v44 = v77;
  if (v44)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v87, v44);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v13 = v64;
  long long v45 = v78;
  if (!v78)
  {
    Hasher._combine(_:)(0);
    if (v79) {
      goto LABEL_44;
    }
LABEL_46:
    Hasher._combine(_:)(0);
    goto LABEL_47;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v87, v45);
  swift_bridgeObjectRelease();
  if (!v79) {
    goto LABEL_46;
  }
LABEL_44:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_47:
  if (v80 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    long long v46 = v80 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v46);
  }
  if (v81 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    long long v47 = v81 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v47);
  }
  if (v82 == 2)
  {
    uint64_t v48 = 0;
  }
  else
  {
    uint64_t v48 = v82 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v48);
  if (v83 == 2)
  {
    uint64_t v49 = 0;
  }
  else
  {
    uint64_t v50 = v83 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v49 = v50;
  }
  Hasher._combine(_:)(v49);
  outlined retain of LocalePreferences?((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_60:
  uint64_t v51 = (int *)type metadata accessor for Measurement<>.FormatStyle();
  outlined init with copy of (Hashable & Sendable)?((uint64_t)&v2[v51[8]], (uint64_t)v7, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v7, 1, v13) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    unint64_t v52 = v62;
    outlined init with take of LocalePreferences?((uint64_t)v7, v62, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    Hasher._combine(_:)(1u);
    specialized FloatingPointFormatStyle.hash(into:)((uint64_t)v87);
    outlined destroy of Any?(v52, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  }
  unint64_t v53 = v2[v51[9]];
  if (v53 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Usage.rawValue.getter(v53);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  Hasher._combine(_:)(v2[v51[10]]);
  return Hasher._finalize()();
}

uint64_t Measurement<>.AttributedStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v3 = type metadata accessor for Measurement<>.FormatStyle();
  uint64_t v23 = *(void *)(v3 - 8);
  uint64_t v24 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v25 = (char *)&v18 - v4;
  type metadata accessor for Measurement<>.AttributedStyle.CodingKeys();
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v21 = *(void *)(v5 - 8);
  uint64_t v22 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v18 - v6;
  uint64_t v8 = type metadata accessor for Measurement<>.AttributedStyle();
  uint64_t v19 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v18 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v11 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v11)
  {
    uint64_t v18 = v10;
    uint64_t v26 = v8;
    uint64_t v12 = v21;
    uint64_t v14 = v23;
    uint64_t v13 = v24;
    swift_getWitnessTable();
    uint64_t v15 = v22;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v15);
    uint64_t v16 = v18;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v25, v13);
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v20, v16, v26);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Measurement<A><>.AttributedStyle@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Measurement<>.AttributedStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Measurement<A><>.AttributedStyle(void *a1)
{
  return Measurement<>.AttributedStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A><>.AttributedStyle(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  Measurement<>.AttributedStyle.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Measurement<A><>.AttributedStyle(unsigned __int8 *a1)
{
  return static Measurement<>.AttributedStyle.== infix(_:_:)(a1);
}

void Measurement<>.AttributedStyle<>.ByteCount.style.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *Measurement<>.AttributedStyle<>.ByteCount.style.setter(unsigned char *result)
{
  *unint64_t v1 = *result;
  return result;
}

uint64_t (*Measurement<>.AttributedStyle<>.ByteCount.style.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *v1;
  return Measurement<>.AttributedStyle<>.ByteCount.style.modify;
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.style.modify(uint64_t result)
{
  **(unsigned char **)uint64_t result = *(unsigned char *)(result + 8);
  return result;
}

void Measurement<>.AttributedStyle<>.ByteCount.allowedUnits.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
}

void *Measurement<>.AttributedStyle<>.ByteCount.allowedUnits.setter(void *result)
{
  *(void *)(v1 + 8) = *result;
  return result;
}

void *(*Measurement<>.AttributedStyle<>.ByteCount.allowedUnits.modify(void *a1))(void *result)
{
  *a1 = *(void *)(v1 + 8);
  a1[1] = v1;
  return Measurement<>.AttributedStyle<>.ByteCount.allowedUnits.modify;
}

void *Measurement<>.AttributedStyle<>.ByteCount.allowedUnits.modify(void *result)
{
  *(void *)(result[1] + 8) = *result;
  return result;
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.spellsOutZero.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.spellsOutZero.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

unsigned char *(*Measurement<>.AttributedStyle<>.ByteCount.spellsOutZero.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 16);
  return Measurement<>.AttributedStyle<>.ByteCount.spellsOutZero.modify;
}

unsigned char *Measurement<>.AttributedStyle<>.ByteCount.spellsOutZero.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 16) = result[8];
  return result;
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.includesActualByteCount.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.includesActualByteCount.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 17) = result;
  return result;
}

unsigned char *(*Measurement<>.AttributedStyle<>.ByteCount.includesActualByteCount.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 17);
  return Measurement<>.AttributedStyle<>.ByteCount.includesActualByteCount.modify;
}

unsigned char *Measurement<>.AttributedStyle<>.ByteCount.includesActualByteCount.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 17) = result[8];
  return result;
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 24);
  return swift_unknownObjectRetain();
}

__n128 Measurement<>.AttributedStyle<>.ByteCount.locale.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  *(__n128 *)(v1 + 24) = *a1;
  return result;
}

uint64_t (*Measurement<>.AttributedStyle<>.ByteCount.locale.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 24);
  swift_unknownObjectRetain();
  return Measurement<>.AttributedStyle<>.ByteCount.locale.modify;
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.locale.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v4 = *a1;
  if (a2)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(void *)(v2 + 24) = v4;
    *(void *)(v2 + 32) = v3;
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t result = swift_unknownObjectRelease();
    *(void *)(v2 + 24) = v4;
    *(void *)(v2 + 32) = v3;
  }
  return result;
}

__n128 Measurement<>.AttributedStyle<>.ByteCount.init(style:allowedUnits:spellsOutZero:includesActualByteCount:locale:)@<Q0>(unsigned char *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, char a4@<W3>, __n128 *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6 = *a2;
  *(unsigned char *)a6 = *a1;
  *(void *)(a6 + 8) = v6;
  *(unsigned char *)(a6 + 16) = a3;
  *(unsigned char *)(a6 + 17) = a4;
  __n128 result = *a5;
  *(__n128 *)(a6 + 24) = *a5;
  return result;
}

void Measurement<>.AttributedStyle<>.ByteCount.format(_:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void **)a1;
  double v5 = *(double *)(a1 + 8);
  char v6 = *v2;
  uint64_t v7 = (_WORD *)*((void *)v2 + 1);
  char v8 = v2[16];
  char v9 = v2[17];
  id v10 = objc_msgSend(self, sel_bytes);
  specialized Measurement<>.converted(to:)(v4, v10, (uint64_t)&v13, v5);

  id v12 = v13;
  uint64_t v11 = v14;
  LOBYTE(v13) = v6;
  uint64_t v14 = v7;
  char v15 = v8;
  char v16 = v9;
  long long v17 = *(_OWORD *)(v2 + 24);
  swift_unknownObjectRetain();
  ByteCountFormatStyle.Attributed._format(_:doubleValue:)(v11, 0, 0x100000000, a2, *(double *)&v11);
  swift_unknownObjectRelease();
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 8);
  char v4 = *(unsigned char *)(v2 + 16);
  char v5 = *(unsigned char *)(v2 + 17);
  *(unsigned char *)a2 = *(unsigned char *)v2;
  *(void *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 17) = v5;
  *(_OWORD *)(a2 + 24) = *a1;
  return swift_unknownObjectRetain();
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.hash(into:)(uint64_t a1)
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned char *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  unsigned char v44[144];
  unsigned char v45[8];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  char v62;
  void v63[18];
  unsigned char v64[144];
  unsigned char v65[152];

  Swift::UInt v3 = *((void *)v1 + 1);
  Swift::UInt8 v4 = v1[16];
  Swift::UInt8 v5 = v1[17];
  uint64_t v6 = *((void *)v1 + 4);
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  uint64_t ObjectType = swift_getObjectType();
  char v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain_n();
  if (v8(ObjectType, v6))
  {
    Swift::UInt8 v9 = 1;
LABEL_5:
    Hasher._combine(_:)(v9);
    return swift_unknownObjectRelease_n();
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(ObjectType, v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  id v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 464);
  swift_unknownObjectRetain();
  v10(v63, ObjectType, v6);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v64, (uint64_t)v65, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v65) == 1)
  {
    Swift::UInt8 v9 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v64, (uint64_t)v45, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v45[0] == 2)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = v45[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v11);
  id v12 = v46;
  if (!v46)
  {
    Hasher._combine(_:)(0);
    long long v17 = v45;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v12 + 16));
  uint64_t v13 = *(void *)(v12 + 16);
  if (!v13)
  {
    outlined init with take of LocalePreferences?((uint64_t)v64, (uint64_t)v44, &demangling cache variable for type metadata for LocalePreferences?);
    long long v17 = v44;
LABEL_20:
    outlined retain of LocalePreferences(v17);
    if (!v47) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v64, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v14 = v12 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v14 += 16;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  if (!v47)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v48) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v48)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    char v15 = v49;
    if (!v49) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v15);
    swift_bridgeObjectRelease();
    char v16 = v50;
    if (!v50) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  char v15 = v49;
  if (v49) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  char v16 = v50;
  if (!v50)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v16);
  swift_bridgeObjectRelease();
LABEL_25:
  uint64_t v19 = v51;
  uint64_t v18 = v52;
  uint64_t v21 = v53;
  uint64_t v20 = v54;
  uint64_t v22 = v55;
  if (v51)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v23 = v18;
    uint64_t v24 = v21;
    uint64_t v25 = v20;
    uint64_t v26 = v22;
    unint64_t v27 = v19;
    _CFObject.hash(into:)();
    if (v18) {
      goto LABEL_27;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v32 = v22;
    uint64_t v33 = v18;
    long long v34 = v21;
    char v35 = v20;
    if (v18)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      unint64_t v28 = v18;
      _CFObject.hash(into:)();

      if (v21) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v21)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v29 = v21;
    _CFObject.hash(into:)();

    if (v20) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v22) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v20) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  int v30 = v20;
  _CFObject.hash(into:)();

  if (v22)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    int v31 = v22;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  int v31 = 0;
LABEL_36:

  uint64_t v36 = v56;
  if (v36)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v36);
    swift_bridgeObjectRelease();
    uint64_t v37 = v57;
    if (v57) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v58) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  uint64_t v37 = v57;
  if (!v57) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v37);
  swift_bridgeObjectRelease();
  if (!v58) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v59 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v38 = v59 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  if (v60 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v39 = v60 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }
  if (v61 == 2)
  {
    long long v40 = 0;
  }
  else
  {
    long long v40 = v61 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v40);
  if (v62 == 2)
  {
    char v41 = 0;
  }
  else
  {
    uint64_t v42 = v62 & 1;
    Hasher._combine(_:)(1u);
    char v41 = v42;
  }
  Hasher._combine(_:)(v41);
  outlined retain of LocalePreferences?((uint64_t)v64, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v64, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return swift_unknownObjectRelease_n();
}

uint64_t static Measurement<>.AttributedStyle<>.ByteCount.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 16);
  char v4 = *(unsigned char *)(a1 + 17);
  unsigned __int8 v5 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 16);
  char v8 = *(unsigned char *)(a2 + 17);
  v15[0] = *(unsigned char *)a1;
  uint64_t v16 = v2;
  char v17 = v3;
  char v18 = v4;
  long long v19 = *(_OWORD *)(a1 + 24);
  v10[0] = v5;
  uint64_t v11 = v6;
  char v12 = v7;
  char v13 = v8;
  long long v14 = *(_OWORD *)(a2 + 24);
  return specialized static Measurement<>.FormatStyle<>.ByteCount.== infix(_:_:)(v15, v10) & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys()
{
  return 0x6E756F4365747962;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6E756F4365747962 && a2 == 0xEE00656C79745374)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys, (uint64_t (*)(void))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys);

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys, (uint64_t (*)(void))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys);

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v15 = *v1;
  uint64_t v14 = *((void *)v1 + 1);
  int v7 = v1[16];
  int v12 = v1[17];
  int v13 = v7;
  uint64_t v8 = a1[3];
  uint64_t v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  type metadata accessor for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys(0, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys, (uint64_t (*)(void))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys);
  lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys, (uint64_t (*)(void))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys);
  long long v10 = *(_OWORD *)(v1 + 24);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v16 = v15;
  uint64_t v17 = v14;
  char v18 = v13;
  char v19 = v12;
  long long v20 = v10;
  lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Measurement<>.AttributedStyle<>.ByteCount.hashValue.getter()
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned char *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  unsigned char v43[144];
  unsigned char v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  void v62[18];
  unsigned char v63[144];
  unsigned char v64[144];
  unsigned char v65[72];

  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Swift::UInt8 v3 = v0[16];
  Swift::UInt8 v4 = v0[17];
  uint64_t v5 = *((void *)v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  uint64_t ObjectType = swift_getObjectType();
  int v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if (v7(ObjectType, v5))
  {
    Swift::UInt8 v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    goto LABEL_56;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::UInt8 v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v62, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v64) == 1)
  {
    Swift::UInt8 v8 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v44, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v44[0] == 2)
  {
    long long v10 = 0;
  }
  else
  {
    long long v10 = v44[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v10);
  uint64_t v11 = v45;
  if (!v45)
  {
    Hasher._combine(_:)(0);
    char v16 = v44;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v11 + 16));
  int v12 = *(void *)(v11 + 16);
  if (!v12)
  {
    outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v43, &demangling cache variable for type metadata for LocalePreferences?);
    char v16 = v43;
LABEL_20:
    outlined retain of LocalePreferences(v16);
    if (!v46) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  int v13 = v11 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 += 16;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  if (!v46)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v47) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v47)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    uint64_t v14 = v48;
    if (!v48) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v14);
    swift_bridgeObjectRelease();
    int v15 = v49;
    if (!v49) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v14 = v48;
  if (v48) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  int v15 = v49;
  if (!v49)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v15);
  swift_bridgeObjectRelease();
LABEL_25:
  char v18 = v50;
  uint64_t v17 = v51;
  long long v20 = v52;
  char v19 = v53;
  uint64_t v21 = v54;
  if (v50)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v22 = v17;
    uint64_t v23 = v20;
    uint64_t v24 = v19;
    uint64_t v25 = v21;
    uint64_t v26 = v18;
    _CFObject.hash(into:)();
    if (v17) {
      goto LABEL_27;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    int v31 = v21;
    uint64_t v32 = v17;
    uint64_t v33 = v20;
    long long v34 = v19;
    if (v17)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      unint64_t v27 = v17;
      _CFObject.hash(into:)();

      if (v20) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v20)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v28 = v20;
    _CFObject.hash(into:)();

    if (v19) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v21) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v19) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  uint64_t v29 = v19;
  _CFObject.hash(into:)();

  if (v21)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    int v30 = v21;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  int v30 = 0;
LABEL_36:

  char v35 = v55;
  if (v35)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v35);
    swift_bridgeObjectRelease();
    uint64_t v36 = v56;
    if (v56) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v57) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  uint64_t v36 = v56;
  if (!v56) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v36);
  swift_bridgeObjectRelease();
  if (!v57) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v37 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v59 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v38 = v59 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  if (v60 == 2)
  {
    uint64_t v39 = 0;
  }
  else
  {
    uint64_t v39 = v60 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v39);
  if (v61 == 2)
  {
    long long v40 = 0;
  }
  else
  {
    char v41 = v61 & 1;
    Hasher._combine(_:)(1u);
    long long v40 = v41;
  }
  Hasher._combine(_:)(v40);
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}