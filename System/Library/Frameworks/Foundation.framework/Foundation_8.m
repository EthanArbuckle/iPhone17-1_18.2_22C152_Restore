uint64_t Measurement<>.AttributedStyle<>.ByteCount.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  long long v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  long long v20;
  uint64_t v21;

  v14 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys>);
  v15 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys(0, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys, (uint64_t (*)(void))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys);
  lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys, (uint64_t (*)(void))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys);
  v6 = v21;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v6)
  {
    v7 = v14;
    lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v3);
    v8 = v17;
    v9 = v18;
    v10 = v19;
    v11 = v20;
    *(unsigned char *)v7 = v16;
    *(void *)(v7 + 8) = v8;
    *(unsigned char *)(v7 + 16) = v9;
    *(unsigned char *)(v7 + 17) = v10;
    *(_OWORD *)(v7 + 24) = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void protocol witness for FormatStyle.format(_:) in conformance Measurement<A><>.AttributedStyle<>.ByteCount(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  v4 = *(void **)a1;
  double v5 = *(double *)(a1 + 8);
  char v6 = *v2;
  v7 = (_WORD *)*((void *)v2 + 1);
  char v8 = v2[16];
  char v9 = v2[17];
  id v10 = objc_msgSend(self, sel_bytes);
  specialized Measurement<>.converted(to:)(v4, v10, (uint64_t)&v13, v5);

  id v12 = v13;
  v11 = v14;
  LOBYTE(v13) = v6;
  v14 = v7;
  char v15 = v8;
  char v16 = v9;
  long long v17 = *(_OWORD *)(v2 + 24);
  swift_unknownObjectRetain();
  ByteCountFormatStyle.Attributed._format(_:doubleValue:)(v11, 0, 0x100000000, a2, *(double *)&v11);
  swift_unknownObjectRelease();
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance Measurement<A><>.AttributedStyle<>.ByteCount@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 8);
  char v4 = *(unsigned char *)(v2 + 16);
  char v5 = *(unsigned char *)(v2 + 17);
  *(unsigned char *)a2 = *(unsigned char *)v2;
  *(void *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 17) = v5;
  *(_OWORD *)(a2 + 24) = *a1;
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Measurement<A><>.AttributedStyle<>.ByteCount@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Measurement<>.AttributedStyle<>.ByteCount.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Measurement<A><>.AttributedStyle<>.ByteCount(void *a1)
{
  return Measurement<>.AttributedStyle<>.ByteCount.encode(to:)(a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Measurement<A><>.AttributedStyle<>.ByteCount(uint64_t a1)
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  char v59;
  void v60[18];
  unsigned char v61[144];
  unsigned char v62[152];
  uint64_t vars8;

  Swift::UInt v3 = *((void *)v1 + 1);
  Swift::UInt8 v4 = v1[16];
  Swift::UInt8 v5 = v1[17];
  uint64_t v6 = *((void *)v1 + 4);
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  uint64_t ObjectType = swift_getObjectType();
  char v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain();
  if ((v8(ObjectType, v6) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v6 + 64))(ObjectType, v6);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    id v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 464);
    swift_unknownObjectRetain();
    v10(v60, ObjectType, v6);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v61, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v62, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v62) == 1)
    {
      Hasher._combine(_:)(0);
      return swift_unknownObjectRelease();
    }
    outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)&v42, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v42 == 2)
    {
      v11 = 0;
    }
    else
    {
      v11 = v42 & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v11);
    id v12 = v43;
    if (v43)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v12 + 16));
      v13 = *(void *)(v12 + 16);
      if (v13)
      {
        outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        v14 = v12 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v14 += 16;
          --v13;
        }
        while (v13);
        swift_bridgeObjectRelease();
        if (!v44)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          if (!v45) {
            goto LABEL_16;
          }
          goto LABEL_22;
        }
LABEL_21:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v45)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          char v15 = v46;
          if (!v46) {
            goto LABEL_17;
          }
          goto LABEL_23;
        }
LABEL_22:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        char v15 = v46;
        if (!v46)
        {
LABEL_17:
          Hasher._combine(_:)(0);
          char v16 = v47;
          if (!v47)
          {
LABEL_18:
            Hasher._combine(_:)(0);
            goto LABEL_25;
          }
LABEL_24:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v16);
          swift_bridgeObjectRelease();
LABEL_25:
          v18 = v48;
          long long v17 = v49;
          v20 = v50;
          v19 = v51;
          v21 = v52;
          if (v48)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            v22 = v17;
            v23 = v20;
            v24 = v19;
            v25 = v21;
            v26 = v18;
            _CFObject.hash(into:)();
            if (v17) {
              goto LABEL_27;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            v31 = v21;
            v32 = v17;
            v33 = v20;
            v34 = v19;
            if (v17)
            {
LABEL_27:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              v27 = v17;
              _CFObject.hash(into:)();

              if (v20) {
                goto LABEL_28;
              }
              goto LABEL_33;
            }
          }
          Hasher._combine(_:)(0);
          if (v20)
          {
LABEL_28:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            v28 = v20;
            _CFObject.hash(into:)();

            if (v19) {
              goto LABEL_29;
            }
            goto LABEL_34;
          }
LABEL_33:
          Hasher._combine(_:)(0);
          if (v19)
          {
LABEL_29:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            v29 = v19;
            _CFObject.hash(into:)();

            if (v21)
            {
LABEL_30:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              v30 = v21;
              _CFObject.hash(into:)();

              goto LABEL_36;
            }
LABEL_35:
            Hasher._combine(_:)(0);
            v30 = 0;
LABEL_36:

            v35 = v53;
            if (v35)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v35);
              swift_bridgeObjectRelease();
              v36 = v54;
              if (v54) {
                goto LABEL_38;
              }
            }
            else
            {
              Hasher._combine(_:)(0);
              v36 = v54;
              if (v54)
              {
LABEL_38:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v36);
                swift_bridgeObjectRelease();
                if (v55)
                {
LABEL_39:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_43:
                  if (v56 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    v37 = v56 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v37);
                  }
                  if (v57 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    v38 = v57 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v38);
                  }
                  if (v58 == 2)
                  {
                    v39 = 0;
                  }
                  else
                  {
                    v39 = v58 & 1;
                    Hasher._combine(_:)(1u);
                  }
                  Hasher._combine(_:)(v39);
                  if (v59 == 2)
                  {
                    v40 = 0;
                  }
                  else
                  {
                    v41 = v59 & 1;
                    Hasher._combine(_:)(1u);
                    v40 = v41;
                  }
                  Hasher._combine(_:)(v40);
                  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  return swift_unknownObjectRelease();
                }
LABEL_42:
                Hasher._combine(_:)(0);
                goto LABEL_43;
              }
            }
            Hasher._combine(_:)(0);
            if (v55) {
              goto LABEL_39;
            }
            goto LABEL_42;
          }
LABEL_34:
          Hasher._combine(_:)(0);
          if (v21) {
            goto LABEL_30;
          }
          goto LABEL_35;
        }
LABEL_23:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v15);
        swift_bridgeObjectRelease();
        char v16 = v47;
        if (!v47) {
          goto LABEL_18;
        }
        goto LABEL_24;
      }
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    outlined retain of LocalePreferences(&v42);
    if (!v44) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }
  Hasher._combine(_:)(1u);

  return swift_unknownObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A><>.AttributedStyle<>.ByteCount()
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  char v59;
  void v60[18];
  unsigned char v61[144];
  unsigned char v62[144];
  unsigned char v63[72];

  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Swift::UInt8 v3 = v0[16];
  Swift::UInt8 v4 = v0[17];
  uint64_t v5 = *((void *)v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  uint64_t ObjectType = swift_getObjectType();
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if (v7(ObjectType, v5))
  {
    Swift::UInt8 v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    goto LABEL_55;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  char v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v60, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v61, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v62, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v62) == 1)
  {
    Swift::UInt8 v8 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)&v42, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v42 == 2)
  {
    id v10 = 0;
  }
  else
  {
    id v10 = v42 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v10);
  v11 = v43;
  if (!v43)
  {
    Hasher._combine(_:)(0);
LABEL_19:
    outlined retain of LocalePreferences(&v42);
    if (!v44) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v11 + 16));
  id v12 = *(void *)(v11 + 16);
  if (!v12) {
    goto LABEL_19;
  }
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v13 = v11 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 += 16;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  if (!v44)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v45) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v45)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    v14 = v46;
    if (!v46) {
      goto LABEL_16;
    }
LABEL_22:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v14);
    swift_bridgeObjectRelease();
    char v15 = v47;
    if (!v47) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v14 = v46;
  if (v46) {
    goto LABEL_22;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  char v15 = v47;
  if (!v47)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v15);
  swift_bridgeObjectRelease();
LABEL_24:
  long long v17 = v48;
  char v16 = v49;
  v19 = v50;
  v18 = v51;
  v20 = v52;
  if (v48)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v21 = v16;
    v22 = v19;
    v23 = v18;
    v24 = v20;
    v25 = v17;
    _CFObject.hash(into:)();
    if (v16) {
      goto LABEL_26;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    v30 = v20;
    v31 = v16;
    v32 = v19;
    v33 = v18;
    if (v16)
    {
LABEL_26:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v26 = v16;
      _CFObject.hash(into:)();

      if (v19) {
        goto LABEL_27;
      }
      goto LABEL_32;
    }
  }
  Hasher._combine(_:)(0);
  if (v19)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v27 = v19;
    _CFObject.hash(into:)();

    if (v18) {
      goto LABEL_28;
    }
LABEL_33:
    Hasher._combine(_:)(0);
    if (v20) {
      goto LABEL_29;
    }
    goto LABEL_34;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  if (!v18) {
    goto LABEL_33;
  }
LABEL_28:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v28 = v18;
  _CFObject.hash(into:)();

  if (v20)
  {
LABEL_29:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v29 = v20;
    _CFObject.hash(into:)();

    goto LABEL_35;
  }
LABEL_34:
  Hasher._combine(_:)(0);
  v29 = 0;
LABEL_35:

  v34 = v53;
  if (v34)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v34);
    swift_bridgeObjectRelease();
    v35 = v54;
    if (v54) {
      goto LABEL_37;
    }
LABEL_40:
    Hasher._combine(_:)(0);
    if (v55) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    goto LABEL_42;
  }
  Hasher._combine(_:)(0);
  v35 = v54;
  if (!v54) {
    goto LABEL_40;
  }
LABEL_37:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v35);
  swift_bridgeObjectRelease();
  if (!v55) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_42:
  if (v56 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v36 = v56 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }
  if (v57 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v37 = v57 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v58 == 2)
  {
    v38 = 0;
  }
  else
  {
    v38 = v58 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v38);
  if (v59 == 2)
  {
    v39 = 0;
  }
  else
  {
    v40 = v59 & 1;
    Hasher._combine(_:)(1u);
    v39 = v40;
  }
  Hasher._combine(_:)(v39);
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_55:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Measurement<A><>.AttributedStyle<>.ByteCount(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 16);
  char v4 = *(unsigned char *)(a1 + 17);
  unsigned __int8 v5 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 16);
  char v8 = *(unsigned char *)(a2 + 17);
  v15[0] = *(unsigned char *)a1;
  uint64_t v16 = v2;
  char v17 = v3;
  char v18 = v4;
  long long v19 = *(_OWORD *)(a1 + 24);
  v10[0] = v5;
  uint64_t v11 = v6;
  char v12 = v7;
  char v13 = v8;
  long long v14 = *(_OWORD *)(a2 + 24);
  return specialized static Measurement<>.FormatStyle<>.ByteCount.== infix(_:_:)(v15, v10) & 1;
}

uint64_t Measurement<>.AttributedStyle.subscript.getter()
{
  return swift_getAtKeyPath();
}

uint64_t key path setter for Measurement<>.AttributedStyle.subscript<A>(dynamicMember:) : <A><A1>Measurement<A><>.AttributedStyleAA1(uint64_t a1)
{
  type metadata accessor for Measurement<>.AttributedStyle();
  swift_retain();
  specialized Measurement<>.AttributedStyle.subscript.setter(a1);

  return swift_release();
}

uint64_t Measurement<>.AttributedStyle.subscript.setter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  specialized Measurement<>.AttributedStyle.subscript.setter(a1);
  swift_release();
  char v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*MEMORY[0x1E4FBBC10] + v3 + 8) - 8) + 8);

  return v4(a1);
}

void (*Measurement<>.AttributedStyle.subscript.modify(void *a1, void *a2))(uint64_t a1, char a2)
{
  unsigned __int8 v5 = malloc(0x38uLL);
  *a1 = v5;
  *unsigned __int8 v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(*MEMORY[0x1E4FBBC10] + *a2 + 8);
  v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  v5[6] = malloc(v8);
  swift_getAtKeyPath();
  return Measurement<>.AttributedStyle.subscript.modify;
}

void Measurement<>.AttributedStyle.subscript.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  char v4 = *(void (**)(void, void *, void))(*(void *)(*(void *)a1 + 24) + 16);
  v4(*(void *)(*(void *)a1 + 40), (void *)v3[6], v3[2]);
  unsigned __int8 v5 = (void *)v3[5];
  uint64_t v11 = (void *)v3[6];
  uint64_t v7 = v3[3];
  uint64_t v6 = (void *)v3[4];
  uint64_t v8 = v3[2];
  if (a2)
  {
    v4(v3[4], v5, v3[2]);
    swift_retain();
    swift_setAtWritableKeyPath();
    swift_release();
    char v9 = *(void (**)(void *, uint64_t))(v7 + 8);
    v9(v5, v8);
    id v10 = v11;
    v9(v11, v8);
  }
  else
  {
    swift_retain();
    swift_setAtWritableKeyPath();
    swift_release();
    id v10 = v11;
    (*(void (**)(void *, uint64_t))(v7 + 8))(v11, v8);
  }
  free(v10);
  free(v5);
  free(v6);

  free(v3);
}

id NSMeasurementFormatter.string<A>(from:)(uint64_t a1)
{
  id v2 = objc_msgSend(objc_allocWithZone((Class)NSMeasurement), sel_initWithDoubleValue_unit_, *(void *)a1, *(double *)(a1 + 8));
  id v3 = objc_msgSend(v1, sel_stringForObjectValue_, v2);

  if (!v3) {
    return 0;
  }
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  return v4;
}

void specialized FloatingPointFormatStyle.hash(into:)(uint64_t a1)
{
  void (*v14)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v15;
  Swift::UInt8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  Swift::UInt v49;
  Swift::UInt v50;
  Swift::UInt8 v51;
  Swift::UInt8 v52;
  Swift::UInt8 v53;
  uint64_t v54;
  Swift::UInt64 v55;
  Swift::UInt64 v56;
  int v57;
  Swift::UInt v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  Swift::UInt v63;
  int *v64;
  char *v65;
  uint64_t v66;
  int v67;
  Swift::UInt v68;
  Swift::UInt64 v69;
  Swift::UInt v70;
  void *v71;
  void *v72;
  uint64_t v73;
  char *v74;
  id v75;
  void *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned char v80[144];
  char v81[8];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  char v96;
  char v97;
  char v98;
  void v99[18];
  unsigned char v100[144];
  unsigned char v101[152];

  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  v78 = v4;
  v79 = v5;
  MEMORY[0x1F4188790](v4);
  v77 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v7 - 8);
  char v9 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  char v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 48);
  swift_unknownObjectRetain();
  if ((v12(ObjectType, v10) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v10 + 64))(ObjectType, v10);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    long long v14 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 464);
    swift_unknownObjectRetain();
    v14(v99, ObjectType, v10);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v99, (uint64_t)v100, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v100, (uint64_t)v101, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v101) == 1)
    {
      Swift::UInt8 v13 = 0;
      goto LABEL_5;
    }
    outlined init with take of LocalePreferences?((uint64_t)v100, (uint64_t)v81, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v81[0] == 2)
    {
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v16 = v81[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v16);
    char v17 = v82;
    if (v82)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v17 + 16));
      char v18 = *(void *)(v17 + 16);
      if (v18)
      {
        outlined retain of LocalePreferences?((uint64_t)v100, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        long long v19 = v17 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v19 += 16;
          --v18;
        }
        while (v18);
        swift_bridgeObjectRelease();
        if (!v83)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          if (!v84) {
            goto LABEL_15;
          }
          goto LABEL_22;
        }
LABEL_21:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v84)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          v20 = v85;
          if (!v85) {
            goto LABEL_16;
          }
          goto LABEL_23;
        }
LABEL_22:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v20 = v85;
        if (!v85)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          v21 = v86;
          if (!v86)
          {
LABEL_17:
            Hasher._combine(_:)(0);
            goto LABEL_25;
          }
LABEL_24:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v21);
          swift_bridgeObjectRelease();
LABEL_25:
          v23 = v88;
          v24 = v89;
          v25 = v90;
          v26 = v91;
          v74 = v9;
          v75 = v87;
          v72 = v91;
          v73 = v1;
          v71 = v89;
          if (v87)
          {
            v27 = v88;
            v28 = v89;
            v29 = v87;
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            v30 = v27;
            v31 = v28;
            v23 = v27;
            v32 = v25;
            v33 = v26;
            v34 = v29;
            _CFObject.hash(into:)();
            v76 = v25;
            if (v27)
            {
LABEL_27:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              v35 = v23;
              _CFObject.hash(into:)();

              goto LABEL_30;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            v36 = v26;
            v37 = v23;
            v38 = v24;
            v39 = v25;
            v76 = v25;
            if (v23) {
              goto LABEL_27;
            }
          }
          Hasher._combine(_:)(0);
LABEL_30:
          v40 = v71;
          uint64_t v2 = v73;
          char v9 = v74;
          if (v71)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            v41 = v40;
            _CFObject.hash(into:)();

            v42 = v76;
            if (v76) {
              goto LABEL_32;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            v42 = v76;
            if (v76)
            {
LABEL_32:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              v43 = v42;
              _CFObject.hash(into:)();

              v44 = v72;
              if (v72)
              {
LABEL_33:
                Hasher._combine(_:)(1u);
                type metadata accessor for CFDictionaryRef(0);
                lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
                v45 = v44;
                _CFObject.hash(into:)();

                goto LABEL_37;
              }
LABEL_36:
              Hasher._combine(_:)(0);
              v45 = 0;
LABEL_37:
              v46 = v76;

              v47 = v92;
              if (v47)
              {
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v47);
                swift_bridgeObjectRelease();
                v48 = v93;
                if (v93) {
                  goto LABEL_39;
                }
              }
              else
              {
                Hasher._combine(_:)(0);
                v48 = v93;
                if (v93)
                {
LABEL_39:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  specialized Dictionary<>.hash(into:)(a1, v48);
                  swift_bridgeObjectRelease();
                  if (v94)
                  {
LABEL_40:
                    Hasher._combine(_:)(1u);
                    swift_bridgeObjectRetain();
                    String.hash(into:)();
                    swift_bridgeObjectRelease();
LABEL_44:
                    char v15 = v78;
                    if (v95 == 2)
                    {
                      Hasher._combine(_:)(0);
                    }
                    else
                    {
                      v49 = v95 & 1;
                      Hasher._combine(_:)(1u);
                      Hasher._combine(_:)(v49);
                    }
                    if (v96 == 2)
                    {
                      Hasher._combine(_:)(0);
                    }
                    else
                    {
                      v50 = v96 & 1;
                      Hasher._combine(_:)(1u);
                      Hasher._combine(_:)(v50);
                    }
                    if (v97 == 2)
                    {
                      v51 = 0;
                    }
                    else
                    {
                      v51 = v97 & 1;
                      Hasher._combine(_:)(1u);
                    }
                    Hasher._combine(_:)(v51);
                    if (v98 == 2)
                    {
                      v52 = 0;
                    }
                    else
                    {
                      v53 = v98 & 1;
                      Hasher._combine(_:)(1u);
                      v52 = v53;
                    }
                    Hasher._combine(_:)(v52);
                    outlined retain of LocalePreferences?((uint64_t)v100, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                    outlined retain of LocalePreferences?((uint64_t)v100, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                    swift_unknownObjectRelease();
                    goto LABEL_57;
                  }
LABEL_43:
                  Hasher._combine(_:)(0);
                  goto LABEL_44;
                }
              }
              Hasher._combine(_:)(0);
              if (v94) {
                goto LABEL_40;
              }
              goto LABEL_43;
            }
          }
          Hasher._combine(_:)(0);
          v44 = v72;
          if (v72) {
            goto LABEL_33;
          }
          goto LABEL_36;
        }
LABEL_23:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v20);
        swift_bridgeObjectRelease();
        v21 = v86;
        if (!v86) {
          goto LABEL_17;
        }
        goto LABEL_24;
      }
      outlined init with take of LocalePreferences?((uint64_t)v100, (uint64_t)v80, &demangling cache variable for type metadata for LocalePreferences?);
      v22 = v80;
    }
    else
    {
      Hasher._combine(_:)(0);
      v22 = v81;
    }
    outlined retain of LocalePreferences(v22);
    if (!v83) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  Swift::UInt8 v13 = 1;
LABEL_5:
  Hasher._combine(_:)(v13);
  swift_unknownObjectRelease();
  char v15 = v78;
LABEL_57:
  v54 = v2
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>)
               + 36);
  if (*(unsigned char *)(v54 + 8))
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v55 = *(void *)v54;
    Hasher._combine(_:)(1u);
    if ((v55 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      v56 = v55;
    }
    else {
      v56 = 0;
    }
    Hasher._combine(_:)(v56);
  }
  outlined init with take of LocalePreferences?(v54 + 16, (uint64_t)v101, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  v57 = *(unsigned __int8 *)(v54 + 73);
  if (v57 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v58 = v57 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v58);
  }
  v59 = *(unsigned __int16 *)(v54 + 74);
  v60 = v59 | (*(unsigned __int8 *)(v54 + 76) << 16);
  if (v59 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v60 & 1);
    Hasher._combine(_:)((v60 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v60) & 1);
  }
  v61 = v79;
  v62 = *(unsigned __int8 *)(v54 + 77);
  if (v62 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v63 = v62 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v63);
  }
  v64 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  outlined init with copy of (Hashable & Sendable)?(v54 + v64[9], (uint64_t)v9, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v9, 1, v15) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v65 = v77;
    (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v77, v9, v15);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v65, v15);
  }
  v66 = v54 + v64[10];
  v67 = *(unsigned __int8 *)(v66 + 8);
  if (v67 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v68 = *(void *)v66;
    Hasher._combine(_:)(1u);
    if (v67)
    {
      Hasher._combine(_:)(1uLL);
      if ((v68 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        v69 = v68;
      }
      else {
        v69 = 0;
      }
      Hasher._combine(_:)(v69);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v68);
    }
  }
  v70 = *(unsigned __int8 *)(v54 + v64[11]);
  if (v70 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v70);
  }
}

unint64_t lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef()
{
  unint64_t result = lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef;
  if (!lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef)
  {
    type metadata accessor for CFDictionaryRef(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef);
  }
  return result;
}

uint64_t type metadata accessor for Measurement<>.AttributedStyle.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for Measurement<>.AttributedStyle()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed()
{
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed);
  }
  return result;
}

uint64_t specialized Measurement<>.AttributedStyle.subscript.setter(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - v2, v1);
  return swift_setAtWritableKeyPath();
}

uint64_t instantiation function for generic protocol witness table for Measurement<A><>.AttributedStyle(void *a1)
{
  a1[1] = swift_getWitnessTable();
  a1[2] = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in Measurement<A><>.AttributedStyle()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for Measurement<A><>.AttributedStyle<>.ByteCount(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount and conformance Measurement<A><>.AttributedStyle<>.ByteCount, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount, (uint64_t (*)(void))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount);
  a1[2] = lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount and conformance Measurement<A><>.AttributedStyle<>.ByteCount, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount, (uint64_t (*)(void))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount);
  uint64_t result = lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount and conformance Measurement<A><>.AttributedStyle<>.ByteCount, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount, (uint64_t (*)(void))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount);
  a1[3] = result;
  return result;
}

void type metadata accessor for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for Equatable in Measurement<A><>.AttributedStyle<>.ByteCount()
{
  return lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount and conformance Measurement<A><>.AttributedStyle<>.ByteCount, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount, (uint64_t (*)(void))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount);
}

unsigned char *sub_181BE15C8@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

unsigned char *sub_181BE15D4(unsigned char *result, unsigned char *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_181BE15E0()
{
  return 0;
}

uint64_t sub_181BE15F0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(result + 8);
  return result;
}

void *sub_181BE15FC(void *result, uint64_t a2)
{
  *(void *)(a2 + 8) = *result;
  return result;
}

uint64_t sub_181BE1608()
{
  return 0;
}

uint64_t sub_181BE1618@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 16);
  return result;
}

unsigned char *sub_181BE1624(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 16) = *result;
  return result;
}

uint64_t sub_181BE1630()
{
  return 0;
}

uint64_t sub_181BE1640@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 17);
  return result;
}

unsigned char *sub_181BE164C(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 17) = *result;
  return result;
}

uint64_t sub_181BE1658()
{
  return 0;
}

uint64_t sub_181BE1668@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *(_OWORD *)(a1 + 24);
  return swift_unknownObjectRetain();
}

__n128 sub_181BE1678(__n128 *a1, uint64_t a2)
{
  __n128 v4 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v4;
  *(__n128 *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_181BE16C4()
{
  return 0;
}

uint64_t sub_181BE16D4()
{
  return Measurement<>.AttributedStyle.subscript.getter();
}

uint64_t sub_181BE1700()
{
  return 16;
}

__n128 sub_181BE170C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for Measurement<>.AttributedStyle()
{
  uint64_t result = type metadata accessor for Measurement<>.FormatStyle();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Measurement<>.AttributedStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for Measurement<>.FormatStyle();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *(void *)a1 = *a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    uint64_t v7 = *(int *)(v4 + 32);
    uint64_t v8 = (_OWORD *)(a1 + v7);
    char v9 = (_OWORD *)((char *)a2 + v7);
    swift_unknownObjectRetain();
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      uint64_t v31 = v11;
      *uint64_t v8 = *v9;
      uint64_t v14 = *(int *)(v10 + 36);
      char v15 = (char *)v8 + v14;
      uint64_t v16 = (char *)v9 + v14;
      unsigned __int8 v15[8] = v16[8];
      *(void *)char v15 = *(void *)v16;
      *(_OWORD *)(v15 + 57) = *(_OWORD *)(v16 + 57);
      long long v17 = *((_OWORD *)v16 + 3);
      long long v18 = *((_OWORD *)v16 + 1);
      *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
      *((_OWORD *)v15 + 3) = v17;
      *((_OWORD *)v15 + 1) = v18;
      v15[73] = v16[73];
      v15[76] = v16[76];
      *((_WORD *)v15 + 37) = *((_WORD *)v16 + 37);
      v15[77] = v16[77];
      v30 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v19 = v30[9];
      __dst = &v15[v19];
      v20 = &v16[v19];
      uint64_t v21 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v22 = *(void *)(v21 - 8);
      v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
      swift_unknownObjectRetain();
      if (v29(v20, 1, v21))
      {
        uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dst, v20, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 16))(__dst, v20, v21);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
      }
      uint64_t v24 = v30[10];
      v25 = &v15[v24];
      v26 = &v16[v24];
      *(void *)v25 = *(void *)v26;
      v25[8] = v26[8];
      v15[v30[11]] = v16[v30[11]];
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v31 + 56))(v8, 0, 1, v10);
    }
    *(unsigned char *)(a1 + *(int *)(v6 + 36)) = *((unsigned char *)a2 + *(int *)(v6 + 36));
    *(unsigned char *)(a1 + *(int *)(v6 + 40)) = *((unsigned char *)a2 + *(int *)(v6 + 40));
  }
  return a1;
}

uint64_t destroy for Measurement<>.AttributedStyle(uint64_t a1)
{
  swift_unknownObjectRelease();
  uint64_t v2 = a1 + *(int *)(type metadata accessor for Measurement<>.FormatStyle() + 32);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3);
  if (!result)
  {
    swift_unknownObjectRelease();
    uint64_t v5 = *(int *)(v3 + 36);
    uint64_t v6 = v2 + v5 + *(int *)(type metadata accessor for NumberFormatStyleConfiguration.Collection(0) + 36);
    uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v9 = *(void *)(v7 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v6, 1, v7);
    if (!result)
    {
      uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
      return v8(v6, v7);
    }
  }
  return result;
}

uint64_t initializeWithCopy for Measurement<>.AttributedStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = (int *)type metadata accessor for Measurement<>.FormatStyle();
  uint64_t v5 = v4[8];
  uint64_t v6 = (_OWORD *)(a1 + v5);
  uint64_t v7 = (_OWORD *)(a2 + v5);
  swift_unknownObjectRetain();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    v27 = v4;
    uint64_t v30 = v9;
    *uint64_t v6 = *v7;
    uint64_t v11 = *(int *)(v8 + 36);
    uint64_t v12 = (char *)v6 + v11;
    uint64_t v13 = (char *)v7 + v11;
    v12[8] = v13[8];
    *(void *)uint64_t v12 = *(void *)v13;
    *(_OWORD *)(v12 + 57) = *(_OWORD *)(v13 + 57);
    long long v14 = *((_OWORD *)v13 + 3);
    long long v15 = *((_OWORD *)v13 + 1);
    *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
    *((_OWORD *)v12 + 3) = v14;
    *((_OWORD *)v12 + 1) = v15;
    v12[73] = v13[73];
    v12[76] = v13[76];
    *((_WORD *)v12 + 37) = *((_WORD *)v13 + 37);
    v12[77] = v13[77];
    uint64_t v16 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v17 = *(int *)(v16 + 36);
    __dst = &v12[v17];
    uint64_t v29 = v16;
    long long v18 = &v13[v17];
    uint64_t v19 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
    swift_unknownObjectRetain();
    if (v21(v18, 1, v19))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dst, v18, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(__dst, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
    }
    uint64_t v23 = *(int *)(v29 + 40);
    uint64_t v24 = &v12[v23];
    v25 = &v13[v23];
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    v12[*(int *)(v29 + 44)] = v13[*(int *)(v29 + 44)];
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v30 + 56))(v6, 0, 1, v8);
    uint64_t v4 = v27;
  }
  *(unsigned char *)(a1 + v4[9]) = *(unsigned char *)(a2 + v4[9]);
  *(unsigned char *)(a1 + v4[10]) = *(unsigned char *)(a2 + v4[10]);
  return a1;
}

uint64_t assignWithCopy for Measurement<>.AttributedStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = (int *)type metadata accessor for Measurement<>.FormatStyle();
  uint64_t v6 = v5[8];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      goto LABEL_7;
    }
    uint64_t v27 = v8[1];
    void *v7 = *v8;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    v7[1] = v27;
    uint64_t v28 = *(int *)(v9 + 36);
    uint64_t v29 = (char *)v7 + v28;
    uint64_t v30 = (char *)v8 + v28;
    LOBYTE(v28) = *((unsigned char *)v8 + v28 + 8);
    *(void *)uint64_t v29 = *(void *)v30;
    v29[8] = v28;
    long long v31 = *((_OWORD *)v30 + 1);
    long long v32 = *((_OWORD *)v30 + 2);
    long long v33 = *((_OWORD *)v30 + 3);
    *(_OWORD *)(v29 + 57) = *(_OWORD *)(v30 + 57);
    *((_OWORD *)v29 + 2) = v32;
    *((_OWORD *)v29 + 3) = v33;
    *((_OWORD *)v29 + 1) = v31;
    v29[73] = v30[73];
    LOWORD(v28) = *((_WORD *)v30 + 37);
    v29[76] = v30[76];
    *((_WORD *)v29 + 37) = v28;
    v29[77] = v30[77];
    v58 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v34 = v58[9];
    v35 = &v29[v34];
    v36 = &v30[v34];
    uint64_t v37 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t __src = *(void *)(v37 - 8);
    v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(__src + 48);
    v56 = v35;
    LODWORD(v35) = v38(v35, 1, v37);
    int v39 = v38(v36, 1, v37);
    if (v35)
    {
      if (!v39)
      {
        (*(void (**)(char *, char *, uint64_t))(__src + 16))(v56, v36, v37);
        (*(void (**)(char *, void, uint64_t, uint64_t))(__src + 56))(v56, 0, 1, v37);
        goto LABEL_18;
      }
      size_t v40 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?)
                                  - 8)
                      + 64);
      v41 = v56;
    }
    else
    {
      if (!v39)
      {
        (*(void (**)(char *, char *, uint64_t))(__src + 24))(v56, v36, v37);
        goto LABEL_18;
      }
      (*(void (**)(char *, uint64_t))(__src + 8))(v56, v37);
      size_t v40 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?)
                                  - 8)
                      + 64);
      v41 = v56;
    }
    memcpy(v41, v36, v40);
LABEL_18:
    uint64_t v46 = v58[10];
    v47 = &v29[v46];
    v48 = &v30[v46];
    uint64_t v49 = *(void *)v48;
    v47[8] = v48[8];
    *(void *)v47 = v49;
    v29[v58[11]] = v30[v58[11]];
    goto LABEL_19;
  }
  if (v13)
  {
LABEL_7:
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    memcpy(v7, v8, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_19;
  }
  v57 = v5;
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
  uint64_t v14 = *(int *)(v9 + 36);
  long long v15 = (char *)v7 + v14;
  uint64_t v16 = (char *)v8 + v14;
  uint64_t v17 = *(void *)v16;
  unsigned __int8 v15[8] = v16[8];
  *(void *)long long v15 = v17;
  long long v18 = *((_OWORD *)v16 + 1);
  long long v19 = *((_OWORD *)v16 + 2);
  long long v20 = *((_OWORD *)v16 + 3);
  *(_OWORD *)(v15 + 57) = *(_OWORD *)(v16 + 57);
  *((_OWORD *)v15 + 2) = v19;
  *((_OWORD *)v15 + 3) = v20;
  *((_OWORD *)v15 + 1) = v18;
  v15[73] = v16[73];
  LOWORD(v17) = *((_WORD *)v16 + 37);
  v15[76] = v16[76];
  *((_WORD *)v15 + 37) = v17;
  v15[77] = v16[77];
  uint64_t v21 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v22 = *(int *)(v21 + 36);
  __dst = &v15[v22];
  uint64_t v55 = v21;
  uint64_t v23 = &v16[v22];
  uint64_t v24 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v51 = *(void *)(v24 - 8);
  v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
  swift_unknownObjectRetain();
  if (v52(v23, 1, v24))
  {
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(__dst, v23, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v51 + 16))(__dst, v23, v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(__dst, 0, 1, v24);
  }
  uint64_t v5 = v57;
  uint64_t v42 = *(int *)(v55 + 40);
  v43 = &v15[v42];
  v44 = &v16[v42];
  uint64_t v45 = *(void *)v44;
  v43[8] = v44[8];
  *(void *)v43 = v45;
  v15[*(int *)(v55 + 44)] = v16[*(int *)(v55 + 44)];
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_19:
  *(unsigned char *)(a1 + v5[9]) = *(unsigned char *)(a2 + v5[9]);
  *(unsigned char *)(a1 + v5[10]) = *(unsigned char *)(a2 + v5[10]);
  return a1;
}

uint64_t initializeWithTake for Measurement<>.AttributedStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = (int *)type metadata accessor for Measurement<>.FormatStyle();
  uint64_t v5 = v4[8];
  uint64_t v6 = (_OWORD *)(a1 + v5);
  uint64_t v7 = (_OWORD *)(a2 + v5);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    *uint64_t v6 = *v7;
    uint64_t v11 = *(int *)(v8 + 36);
    uint64_t v26 = v6;
    int v12 = (char *)v6 + v11;
    int v13 = (char *)v7 + v11;
    v12[8] = v13[8];
    *(void *)int v12 = *(void *)v13;
    *(_OWORD *)(v12 + 57) = *(_OWORD *)(v13 + 57);
    long long v14 = *((_OWORD *)v13 + 3);
    long long v15 = *((_OWORD *)v13 + 1);
    *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
    *((_OWORD *)v12 + 3) = v14;
    *((_OWORD *)v12 + 1) = v15;
    v12[73] = v13[73];
    LOWORD(v11) = *((_WORD *)v13 + 37);
    v12[76] = v13[76];
    *((_WORD *)v12 + 37) = v11;
    v12[77] = v13[77];
    uint64_t v25 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v16 = v25[9];
    __dst = &v12[v16];
    uint64_t v17 = &v13[v16];
    uint64_t v18 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dst, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(__dst, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
    }
    uint64_t v21 = v25[10];
    uint64_t v22 = &v12[v21];
    uint64_t v23 = &v13[v21];
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    v12[v25[11]] = v13[v25[11]];
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v9 + 56))(v26, 0, 1, v8);
  }
  *(unsigned char *)(a1 + v4[9]) = *(unsigned char *)(a2 + v4[9]);
  *(unsigned char *)(a1 + v4[10]) = *(unsigned char *)(a2 + v4[10]);
  return a1;
}

uint64_t assignWithTake for Measurement<>.AttributedStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = (int *)type metadata accessor for Measurement<>.FormatStyle();
  uint64_t v6 = v5[8];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      goto LABEL_7;
    }
    v52 = v5;
    uint64_t v26 = v8[1];
    void *v7 = *v8;
    swift_unknownObjectRelease();
    v7[1] = v26;
    uint64_t v27 = *(int *)(v9 + 36);
    uint64_t v28 = (char *)v7 + v27;
    uint64_t v29 = (char *)v8 + v27;
    *(void *)uint64_t v28 = *(void *)((char *)v8 + v27);
    v28[8] = *((unsigned char *)v8 + v27 + 8);
    long long v30 = *(_OWORD *)((char *)v8 + v27 + 32);
    *((_OWORD *)v28 + 1) = *(_OWORD *)((char *)v8 + v27 + 16);
    *((_OWORD *)v28 + 2) = v30;
    *((_OWORD *)v28 + 3) = *(_OWORD *)((char *)v8 + v27 + 48);
    *(_OWORD *)(v28 + 57) = *(_OWORD *)((char *)v8 + v27 + 57);
    v28[73] = *((unsigned char *)v8 + v27 + 73);
    v28[76] = *((unsigned char *)v8 + v27 + 76);
    *((_WORD *)v28 + 37) = *(_WORD *)((char *)v8 + v27 + 74);
    v28[77] = *((unsigned char *)v8 + v27 + 77);
    __dsta = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v31 = __dsta[9];
    long long v32 = &v28[v31];
    long long v33 = &v29[v31];
    uint64_t v34 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v35 = *(void *)(v34 - 8);
    v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
    v47 = v32;
    LODWORD(v32) = v36(v32, 1, v34);
    int v37 = v36(v33, 1, v34);
    if (v32)
    {
      if (!v37)
      {
        (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v47, v33, v34);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v47, 0, 1, v34);
        goto LABEL_18;
      }
      size_t v38 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?)
                                  - 8)
                      + 64);
      int v39 = v47;
    }
    else
    {
      if (!v37)
      {
        (*(void (**)(char *, char *, uint64_t))(v35 + 40))(v47, v33, v34);
        goto LABEL_18;
      }
      (*(void (**)(char *, uint64_t))(v35 + 8))(v47, v34);
      size_t v38 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?)
                                  - 8)
                      + 64);
      int v39 = v47;
    }
    memcpy(v39, v33, v38);
LABEL_18:
    uint64_t v43 = __dsta[10];
    v44 = &v28[v43];
    uint64_t v45 = &v29[v43];
    *(void *)v44 = *(void *)v45;
    v44[8] = v45[8];
    v28[__dsta[11]] = v29[__dsta[11]];
    uint64_t v5 = v52;
    goto LABEL_19;
  }
  if (v13)
  {
LABEL_7:
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    memcpy(v7, v8, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_19;
  }
  uint64_t v51 = v5;
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
  uint64_t v14 = *(int *)(v9 + 36);
  long long v15 = (char *)v7 + v14;
  uint64_t v16 = (char *)v8 + v14;
  unsigned __int8 v15[8] = v16[8];
  *(void *)long long v15 = *(void *)v16;
  *(_OWORD *)(v15 + 57) = *(_OWORD *)(v16 + 57);
  long long v17 = *((_OWORD *)v16 + 3);
  long long v18 = *((_OWORD *)v16 + 1);
  *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
  *((_OWORD *)v15 + 3) = v17;
  *((_OWORD *)v15 + 1) = v18;
  v15[73] = v16[73];
  LOWORD(v14) = *((_WORD *)v16 + 37);
  v15[76] = v16[76];
  *((_WORD *)v15 + 37) = v14;
  v15[77] = v16[77];
  uint64_t v19 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v20 = *(int *)(v19 + 36);
  uint64_t __src = (int *)v19;
  __dst = &v15[v20];
  uint64_t v21 = &v16[v20];
  uint64_t v22 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(__dst, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(__dst, v21, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(__dst, 0, 1, v22);
  }
  uint64_t v5 = v51;
  uint64_t v40 = __src[10];
  v41 = &v15[v40];
  uint64_t v42 = &v16[v40];
  *(void *)v41 = *(void *)v42;
  v41[8] = v42[8];
  v15[__src[11]] = v16[__src[11]];
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_19:
  *(unsigned char *)(a1 + v5[9]) = *(unsigned char *)(a2 + v5[9]);
  *(unsigned char *)(a1 + v5[10]) = *(unsigned char *)(a2 + v5[10]);
  return a1;
}

uint64_t getEnumTagSinglePayload for Measurement<>.AttributedStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_181BE2C10);
}

uint64_t sub_181BE2C10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Measurement<>.FormatStyle();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Measurement<>.AttributedStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_181BE2C94);
}

uint64_t sub_181BE2C94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Measurement<>.FormatStyle();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t destroy for Measurement<>.AttributedStyle<>.ByteCount()
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for Measurement<>.AttributedStyle<>.ByteCount(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Measurement<>.AttributedStyle<>.ByteCount(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 32) = v3;
  return a1;
}

uint64_t assignWithTake for Measurement<>.AttributedStyle<>.ByteCount(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for Measurement<>.AttributedStyle<>.ByteCount(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Measurement<>.AttributedStyle<>.ByteCount(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata instantiation function for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 0);
}

unsigned char *storeEnumTagSinglePayload for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181BE2F54);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t base witness table accessor for Equatable in Measurement<A><>.AttributedStyle.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys()
{
  return lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys, (uint64_t (*)(void))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys()
{
  return lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys, (uint64_t (*)(void))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys);
}

uint64_t base witness table accessor for CustomStringConvertible in Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys()
{
  return lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys, (uint64_t (*)(void))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Measurement<A><>.AttributedStyle.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in Measurement<A><>.AttributedStyle.CodingKeys()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
  }
  return result;
}

BOOL static PredicateExpressions.ComparisonOperator.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void PredicateExpressions.ComparisonOperator.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance PredicateExpressions.ComparisonOperator.CodingKeys()
{
  unint64_t result = 0x6E6168547373656CLL;
  switch(*v0)
  {
    case 2:
      unint64_t result = 0x5472657461657267;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PredicateExpressions.ComparisonOperator.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PredicateExpressions.ComparisonOperator.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.ComparisonOperator.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.ComparisonOperator.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t PredicateExpressions.ComparisonOperator.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys>);
  uint64_t v30 = *(void *)(v3 - 8);
  uint64_t v31 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v29 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys>);
  uint64_t v27 = *(void *)(v5 - 8);
  uint64_t v28 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v26 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys>);
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v25 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v23 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressions.ComparisonOperator.LessThanCodingKeys>);
  uint64_t v21 = *(void *)(v9 - 8);
  uint64_t v22 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressions.ComparisonOperator.CodingKeys>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  long long v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v16)
  {
    case 1:
      char v33 = 1;
      lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys();
      long long v17 = v23;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v19 = v24;
      uint64_t v18 = v25;
      goto LABEL_6;
    case 2:
      char v34 = 2;
      lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys();
      long long v17 = v26;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v19 = v27;
      uint64_t v18 = v28;
      goto LABEL_6;
    case 3:
      char v35 = 3;
      lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys();
      long long v17 = v29;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v19 = v30;
      uint64_t v18 = v31;
LABEL_6:
      (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v18);
      break;
    default:
      char v32 = 0;
      lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v11, v22);
      break;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys);
  }
  return result;
}

Swift::Int PredicateExpressions.ComparisonOperator.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t PredicateExpressions.ComparisonOperator.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  v47 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys>);
  uint64_t v49 = *(void *)(v3 - 8);
  uint64_t v50 = v3;
  MEMORY[0x1F4188790](v3);
  v48 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v44 = v5;
  uint64_t v45 = v6;
  MEMORY[0x1F4188790](v5);
  uint64_t v46 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys>);
  uint64_t v42 = *(void *)(v8 - 8);
  uint64_t v43 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressions.ComparisonOperator.LessThanCodingKeys>);
  uint64_t v41 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressions.ComparisonOperator.CodingKeys>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  long long v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = a1[3];
  uint64_t v51 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys();
  uint64_t v19 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v19) {
    goto LABEL_7;
  }
  uint64_t v39 = v11;
  uint64_t v40 = v10;
  uint64_t v52 = 0;
  uint64_t v21 = v48;
  uint64_t v20 = v49;
  uint64_t v22 = v50;
  uint64_t v23 = v17;
  uint64_t v24 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v24 + 16) != 1)
  {
    uint64_t v27 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v29 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v29 = &type metadata for PredicateExpressions.ComparisonOperator;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v27 - 8) + 104))(v29, *MEMORY[0x1E4FBBA70], v27);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
LABEL_7:
    uint64_t v30 = (uint64_t)v51;
    return __swift_destroy_boxed_opaque_existential_1(v30);
  }
  char v25 = *(unsigned char *)(v24 + 32);
  switch(v25)
  {
    case 1:
      char v54 = 1;
      lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys();
      char v32 = v40;
      uint64_t v33 = v52;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v33) {
        goto LABEL_12;
      }
      uint64_t v35 = v42;
      uint64_t v34 = v43;
      goto LABEL_16;
    case 2:
      char v55 = 2;
      lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys();
      char v32 = v46;
      uint64_t v36 = v52;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v36) {
        goto LABEL_12;
      }
      uint64_t v34 = v44;
      uint64_t v35 = v45;
LABEL_16:
      (*(void (**)(char *, uint64_t))(v35 + 8))(v32, v34);
      goto LABEL_17;
    case 3:
      char v56 = 3;
      lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys();
      uint64_t v37 = v52;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v37)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v15 + 8))(v23, v14);
        uint64_t v30 = (uint64_t)v51;
        return __swift_destroy_boxed_opaque_existential_1(v30);
      }
      (*(void (**)(char *, uint64_t))(v20 + 8))(v21, v22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v23, v14);
      uint64_t v30 = (uint64_t)v51;
      size_t v38 = v47;
      goto LABEL_19;
    default:
      char v53 = 0;
      lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys();
      uint64_t v26 = v52;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v26)
      {
LABEL_12:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v15 + 8))(v23, v14);
        goto LABEL_7;
      }
      (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v39);
LABEL_17:
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v23, v14);
      uint64_t v30 = (uint64_t)v51;
      size_t v38 = v47;
LABEL_19:
      *size_t v38 = v25;
      break;
  }
  return __swift_destroy_boxed_opaque_existential_1(v30);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PredicateExpressions.ComparisonOperator@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return PredicateExpressions.ComparisonOperator.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PredicateExpressions.ComparisonOperator(void *a1)
{
  return PredicateExpressions.ComparisonOperator.encode(to:)(a1);
}

uint64_t PredicateExpressions.Comparison.init(lhs:rhs:op:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  char v11 = *a3;
  uint64_t v12 = type metadata accessor for PredicateExpressions.Comparison();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(&a6[*(int *)(v12 + 60)], a1, a4);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(&a6[*(int *)(v12 + 64)], a2, a5);
  *a6 = v11;
  return result;
}

uint64_t PredicateExpressions.Comparison.evaluate(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = *a1;
  int v16 = *(_DWORD *)(a2 + 60);
  uint64_t v24 = v2;
  char v17 = (_BYTE)v2 + v16;
  uint64_t v25 = v15;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, double))(v6 + 16))(&v25, v7, v6, v12);
  if (!v3)
  {
    uint64_t v19 = v23;
    uint64_t v18 = v24;
    uint64_t v25 = v15;
    (*(void (**)(uint64_t *, void))(*(void *)(a2 + 40) + 16))(&v25, *(void *)(a2 + 24));
    switch(*v18)
    {
      case 1:
        char v21 = dispatch thunk of static Comparable.<= infix(_:_:)();
        break;
      case 2:
        char v21 = dispatch thunk of static Comparable.> infix(_:_:)();
        break;
      case 3:
        char v21 = dispatch thunk of static Comparable.>= infix(_:_:)();
        break;
      default:
        char v21 = dispatch thunk of static Comparable.< infix(_:_:)();
        break;
    }
    char v17 = v21;
    uint64_t v22 = *(void (**)(char *, uint64_t))(v19 + 8);
    v22(v10, AssociatedTypeWitness);
    v22(v14, AssociatedTypeWitness);
  }
  return v17 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Comparison<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = PredicateExpressions.Comparison.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

uint64_t PredicateExpressions.Comparison.description.getter()
{
  BYTE8(v6) = 0;
  _StringGuts.grow(_:)(42);
  v1._object = (void *)0x80000001823AC8A0;
  v1._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 0x74617265706F202CLL;
  v2._object = (void *)0xEC000000203A726FLL;
  String.append(_:)(v2);
  *(void *)&long long v6 = *v0;
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0x203A736872202CLL;
  v3._object = (void *)0xE700000000000000;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return *(void *)((char *)&v6 + 1);
}

uint64_t PredicateExpressions.Comparison<>.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator);
  }
  return result;
}

uint64_t PredicateExpressions.Comparison<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v36 = a4;
  uint64_t v31 = a6;
  uint64_t v32 = a5;
  uint64_t v33 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v35 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38[0] = v14;
  v38[1] = v15;
  v38[2] = v16;
  uint64_t v39 = v17;
  uint64_t v40 = v18;
  uint64_t v19 = type metadata accessor for PredicateExpressions.Comparison();
  uint64_t v30 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  char v21 = (char *)&v29 - v20;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v22 = v37;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v22) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v37 = a1;
  uint64_t v29 = v21;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v38, v39);
  uint64_t v23 = v35;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v36 = v19;
  (*(void (**)(unsigned char *, char *, uint64_t))(v34 + 32))(&v29[*(int *)(v19 + 60)], v23, a2);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v38, v39);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(unsigned char *, char *, uint64_t))(v33 + 32))(&v29[*(int *)(v36 + 64)], v10, a3);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v38, v39);
  lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v24 = (uint64_t)v37;
  uint64_t v25 = v29;
  *uint64_t v29 = v41;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  uint64_t v26 = v30;
  uint64_t v27 = v36;
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v30 + 16))(v31, v25, v36);
  __swift_destroy_boxed_opaque_existential_1(v24);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v26 + 8))(v25, v27);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Comparison<A, B>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.Comparison<>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a3 - 8), *(void *)(a3 - 24), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.Comparison<A, B>(void *a1)
{
  return PredicateExpressions.Comparison<>.encode(to:)(a1);
}

unsigned char *assignWithCopy for PredicateExpressions.Comparison(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 24;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (unint64_t)&a1[v7 + 1] & ~v7;
  uint64_t v9 = (unint64_t)&a2[v7 + 1] & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 24))(v8, v9);
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 24))((*(void *)(v6 + 40) + *(unsigned __int8 *)(v10 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(void *)(v6 + 40) + *(unsigned __int8 *)(v10 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

unsigned char *initializeWithTake for PredicateExpressions.Comparison(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (unint64_t)&a1[v7 + 1] & ~v7;
  uint64_t v9 = (unint64_t)&a2[v7 + 1] & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v8, v9);
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 32))((*(void *)(v6 + 32) + *(unsigned __int8 *)(v10 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(void *)(v6 + 32) + *(unsigned __int8 *)(v10 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

unsigned char *assignWithTake for PredicateExpressions.Comparison(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 40;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (unint64_t)&a1[v7 + 1] & ~v7;
  uint64_t v9 = (unint64_t)&a2[v7 + 1] & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v8, v9);
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 40))((*(void *)(v6 + 24) + *(unsigned __int8 *)(v10 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(void *)(v6 + 24) + *(unsigned __int8 *)(v10 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Comparison(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(v4 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  if (v5 <= v8) {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v4 + 84);
  }
  if (v12 <= 0xFC) {
    unsigned int v13 = 252;
  }
  else {
    unsigned int v13 = v12;
  }
  if (!a2) {
    return 0;
  }
  int v14 = a2 - v13;
  if (a2 <= v13) {
    goto LABEL_28;
  }
  uint64_t v15 = ((v10 + v11 + ((v9 + 1) & ~v9)) & ~v11) + *(void *)(*(void *)(v6 - 8) + 64);
  char v16 = 8 * v15;
  if (v15 <= 3)
  {
    unsigned int v19 = ((v14 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v19))
    {
      int v17 = *(_DWORD *)&a1[v15];
      if (!v17) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v19 > 0xFF)
    {
      int v17 = *(unsigned __int16 *)&a1[v15];
      if (!*(_WORD *)&a1[v15]) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v19 < 2)
    {
LABEL_28:
      if (v12 > 0xFC)
      {
        uint64_t v24 = (unint64_t)&a1[v9 + 1] & ~v9;
        if (v5 == v13) {
          return (*(uint64_t (**)(uint64_t))(v4 + 48))(v24);
        }
        else {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))((v24 + v10 + v11) & ~v11, v8, v6);
        }
      }
      else
      {
        unsigned int v23 = *a1;
        if (v23 >= 4) {
          return v23 - 3;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v17 = a1[v15];
  if (!a1[v15]) {
    goto LABEL_28;
  }
LABEL_18:
  int v20 = (v17 - 1) << v16;
  if (v15 > 3) {
    int v20 = 0;
  }
  if (v15)
  {
    if (v15 <= 3) {
      int v21 = v15;
    }
    else {
      int v21 = 4;
    }
    switch(v21)
    {
      case 2:
        int v22 = *(unsigned __int16 *)a1;
        break;
      case 3:
        int v22 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        break;
      case 4:
        int v22 = *(_DWORD *)a1;
        break;
      default:
        int v22 = *a1;
        break;
    }
  }
  else
  {
    int v22 = 0;
  }
  return v13 + (v22 | v20) + 1;
}

void storeEnumTagSinglePayload for PredicateExpressions.Comparison(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (v7 <= *(_DWORD *)(v9 + 84)) {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  if (v13 <= 0xFC) {
    unsigned int v14 = 252;
  }
  else {
    unsigned int v14 = v13;
  }
  size_t v15 = ((v11 + v12 + ((v10 + 1) & ~v10)) & ~v12) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v16 = a3 >= v14;
  unsigned int v17 = a3 - v14;
  if (v17 != 0 && v16)
  {
    if (v15 <= 3)
    {
      unsigned int v21 = ((v17 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
      if (HIWORD(v21))
      {
        int v18 = 4;
      }
      else if (v21 >= 0x100)
      {
        int v18 = 2;
      }
      else
      {
        int v18 = v21 > 1;
      }
    }
    else
    {
      int v18 = 1;
    }
  }
  else
  {
    int v18 = 0;
  }
  if (v14 < a2)
  {
    unsigned int v19 = ~v14 + a2;
    if (v15 < 4)
    {
      int v20 = (v19 >> (8 * v15)) + 1;
      if (v15)
      {
        int v22 = v19 & ~(-1 << (8 * v15));
        bzero(a1, v15);
        if (v15 == 3)
        {
          *(_WORD *)a1 = v22;
          a1[2] = BYTE2(v22);
        }
        else if (v15 == 2)
        {
          *(_WORD *)a1 = v22;
        }
        else
        {
          *a1 = v22;
        }
      }
    }
    else
    {
      bzero(a1, v15);
      *(_DWORD *)a1 = v19;
      int v20 = 1;
    }
    switch(v18)
    {
      case 1:
        a1[v15] = v20;
        return;
      case 2:
        *(_WORD *)&a1[v15] = v20;
        return;
      case 3:
        goto LABEL_46;
      case 4:
        *(_DWORD *)&a1[v15] = v20;
        return;
      default:
        return;
    }
  }
  switch(v18)
  {
    case 1:
      a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x181BE5574);
    case 4:
      *(_DWORD *)&a1[v15] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v13 > 0xFC)
        {
          unint64_t v23 = (unint64_t)&a1[v10 + 1] & ~v10;
          if (v7 == v14)
          {
            uint64_t v24 = *(void (**)(unint64_t))(v6 + 56);
            v24(v23);
          }
          else
          {
            unint64_t v25 = (v23 + v11 + v12) & ~v12;
            uint64_t v26 = *(void (**)(unint64_t))(v9 + 56);
            v26(v25);
          }
        }
        else
        {
          *a1 = a2 + 3;
        }
      }
      return;
  }
}

unsigned char *storeEnumTagSinglePayload for PredicateExpressions.ComparisonOperator(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181BE5668);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PredicateExpressions.ComparisonOperator.CodingKeys()
{
  return &unk_1ECA3DB28;
}

void *type metadata accessor for PredicateExpressions.ComparisonOperator.LessThanCodingKeys()
{
  return &unk_1ECA3DBB8;
}

void *type metadata accessor for PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys()
{
  return &unk_1ECA3DBF8;
}

void *type metadata accessor for PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys()
{
  return &unk_1ECA3DBD8;
}

void *type metadata accessor for PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys()
{
  return &unk_1ECA3DC18;
}

uint64_t specialized PredicateExpressions.ComparisonOperator.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6168547373656CLL && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6168547373656CLL && a2 == 0xEF6C61757145724FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x5472657461657267 && a2 == 0xEB000000006E6168 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001823AC8C0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

void __swiftcall Morphology.Pronoun.init(_:)(Foundation::Morphology::Pronoun *__return_ptr retstr, NSMorphologyPronoun a2)
{
  Class isa = a2.super.isa;
  id v4 = [(objc_class *)a2.super.isa pronoun];
  id v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  char v6 = v5;

  swift_bridgeObjectRetain();
  Morphology.init(_:)((NSMorphology_optional *)[(objc_class *)isa morphology]);
  v7.i32[0] = v18;
  int16x8_t v13 = (int16x8_t)vmovl_u8(v7);
  swift_bridgeObjectRetain();
  uint64_t v8 = (NSMorphology_optional *)[(objc_class *)isa dependentMorphology];
  uint64_t v9 = v8;
  if (v8)
  {
    uint64_t v10 = v8;
    Morphology.init(_:)(v9);

    uint64_t v11 = v17;
    uint64_t v9 = (NSMorphology_optional *)(v15 | ((unint64_t)v16 << 16));
    unint64_t v12 = v18 | ((unint64_t)v19 << 32);
  }
  else
  {

    uint64_t v11 = 0;
    unint64_t v12 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  retstr->pronoun._countAndFlagsBits = (uint64_t)v14;
  retstr->pronoun._object = v6;
  *(_WORD *)&retstr->morphology.grammaticalGender.value = v15;
  retstr->morphology.number.value = v16;
  retstr->morphology.customPronouns._rawValue = v17;
  *(_DWORD *)&retstr->morphology.grammaticalCase.value = vmovn_s16(v13).u32[0];
  retstr->morphology.definiteness.value = v19;
  *(void *)&retstr->dependentMorphology.value.grammaticalGender.value = v9;
  retstr->dependentMorphology.value.customPronouns._rawValue = v11;
  retstr->dependentMorphology.value.definiteness.value = BYTE4(v12);
  *(_DWORD *)&retstr->dependentMorphology.value.grammaticalCase.value = v12;
}

NSMorphologyPronoun __swiftcall NSMorphologyPronoun.init(_:)(Foundation::Morphology::Pronoun *a1)
{
  __int16 v2 = *(_WORD *)&a1->morphology.grammaticalGender.value;
  Foundation::Morphology::GrammaticalNumber value = a1->morphology.number.value;
  rawValue = a1->morphology.customPronouns._rawValue;
  Foundation::Morphology::Definiteness v5 = a1->morphology.definiteness.value;
  uint64_t v7 = *(void *)&a1->dependentMorphology.value.grammaticalGender.value;
  char v6 = a1->dependentMorphology.value.customPronouns._rawValue;
  uint64_t v8 = a1->dependentMorphology.value.definiteness.value;
  uint64_t v9 = *(unsigned int *)&a1->dependentMorphology.value.grammaticalCase.value;
  uint64_t v24 = String._bridgeToObjectiveCImpl()();
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSMorphology);
  __int16 v25 = v2;
  Foundation::Morphology::GrammaticalNumber v26 = value;
  uint64_t v27 = rawValue;
  *(_DWORD *)uint64_t v28 = *(_DWORD *)&a1->morphology.grammaticalCase.value;
  v28[4] = v5;
  swift_bridgeObjectRetain();
  *(void *)&v29.grammaticalGender.Foundation::Morphology::GrammaticalNumber value = &v25;
  NSMorphology.init(_:)(v10, v29);
  unint64_t v12 = v11;
  if (v6)
  {
    v13.i64[0] = 0xFFFFFFFFFFLL;
    v13.i64[1] = 0xFFFFFFFFFFLL;
    uint64x2_t v14 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v9 | (unint64_t)(v8 << 32)), v13);
    int16x8_t v15 = (int16x8_t)vshlq_u64(v14, (uint64x2_t)xmmword_182108550);
    __int16 v25 = v7;
    Foundation::Morphology::GrammaticalNumber v26 = BYTE2(v7);
    uint64_t v27 = v6;
    v28[0] = v9;
    *(int32x2_t *)v14.i8 = vmovn_s64((int64x2_t)vshlq_u64(v14, (uint64x2_t)xmmword_182108540));
    *(int32x2_t *)v15.i8 = vmovn_s64((int64x2_t)v15);
    v15.i16[1] = v15.i16[2];
    v15.i16[2] = v14.i16[0];
    v15.i16[3] = v14.i16[2];
    *(_DWORD *)&v28[1] = vmovn_s16(v15).u32[0];
    swift_bridgeObjectRetain_n();
    *(void *)&v30.grammaticalGender.Foundation::Morphology::GrammaticalNumber value = &v25;
    NSMorphology.init(_:)(v16, v30);
    unsigned __int32 v18 = v17;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unsigned __int32 v18 = 0;
  }
  Foundation::Morphology::Definiteness v19 = (objc_class *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithPronoun_morphology_dependentMorphology_, v24, v12, v18);

  swift_unknownObjectRelease();
  unint64_t v23 = v19;
  result._dependentMorphology = v22;
  result._morphology = v21;
  result._pronoun = v20;
  result.super.Class isa = v23;
  return result;
}

Foundation::Morphology __swiftcall Morphology.init()()
{
  *(_WORD *)uint64_t v0 = 3587;
  *(unsigned char *)(v0 + 2) = 6;
  *(void *)(v0 + 8) = MEMORY[0x1E4FBC868];
  *(_DWORD *)(v0 + 16) = 33751822;
  *(unsigned char *)(v0 + 20) = 2;
  return result;
}

void Morphology.grammaticalGender.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *Morphology.grammaticalGender.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*Morphology.grammaticalGender.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

Foundation::Morphology::PartOfSpeech_optional __swiftcall Morphology.PartOfSpeech.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = rawValue - 1;
  if ((unint64_t)(rawValue - 1) >= 0xE) {
    char v2 = 14;
  }
  char *v1 = v2;
  return (Foundation::Morphology::PartOfSpeech_optional)rawValue;
}

Foundation::Morphology::PartOfSpeech_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Morphology.PartOfSpeech(Swift::Int *a1)
{
  return Morphology.PartOfSpeech.init(rawValue:)(*a1);
}

void Morphology.partOfSpeech.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

unsigned char *Morphology.partOfSpeech.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 1) = *result;
  return result;
}

uint64_t (*Morphology.partOfSpeech.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

Foundation::Morphology::GrammaticalNumber_optional __swiftcall Morphology.GrammaticalNumber.init(rawValue:)(Swift::Int rawValue)
{
  unint64_t v2 = 0x5040302010006uLL >> (8 * rawValue);
  if ((unint64_t)rawValue >= 7) {
    LOBYTE(v2) = 6;
  }
  unsigned char *v1 = v2;
  return (Foundation::Morphology::GrammaticalNumber_optional)rawValue;
}

Foundation::Morphology::GrammaticalNumber_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Morphology.GrammaticalNumber(Swift::Int *a1)
{
  return Morphology.GrammaticalNumber.init(rawValue:)(*a1);
}

void Morphology.number.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 2);
}

unsigned char *Morphology.number.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 2) = *result;
  return result;
}

uint64_t (*Morphology.number.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Morphology.grammaticalCase.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

unsigned char *Morphology.grammaticalCase.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 16) = *result;
  return result;
}

uint64_t (*Morphology.grammaticalCase.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Morphology.grammaticalPerson.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 17);
}

unsigned char *Morphology.grammaticalPerson.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 17) = *result;
  return result;
}

uint64_t (*Morphology.grammaticalPerson.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

Foundation::Morphology::PronounType_optional __swiftcall Morphology.PronounType.init(rawValue:)(Swift::Int rawValue)
{
  unsigned int v2 = 0x2010003u >> (8 * rawValue);
  if ((unint64_t)rawValue >= 4) {
    LOBYTE(v2) = 3;
  }
  unsigned char *v1 = v2;
  return (Foundation::Morphology::PronounType_optional)rawValue;
}

uint64_t Morphology.PronounType.rawValue.getter()
{
  return *v0 + 1;
}

Foundation::Morphology::PronounType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Morphology.PronounType(Swift::Int *a1)
{
  return Morphology.PronounType.init(rawValue:)(*a1);
}

void Morphology.pronounType.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 18);
}

unsigned char *Morphology.pronounType.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 18) = *result;
  return result;
}

uint64_t (*Morphology.pronounType.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Morphology.determination.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 19);
}

unsigned char *Morphology.determination.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 19) = *result;
  return result;
}

uint64_t (*Morphology.determination.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

Foundation::Morphology::Definiteness_optional __swiftcall Morphology.Definiteness.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue == 2) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (rawValue == 1) {
    char v2 = 0;
  }
  char *v1 = v2;
  return (Foundation::Morphology::Definiteness_optional)rawValue;
}

uint64_t Morphology.Definiteness.rawValue.getter()
{
  if (*v0) {
    return 2;
  }
  else {
    return 1;
  }
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance Morphology.Definiteness@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 2) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result == 1) {
    char v3 = 0;
  }
  else {
    char v3 = v2;
  }
  *a2 = v3;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Morphology.Definiteness(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1;
  if (*v1) {
    uint64_t v2 = 2;
  }
  *a1 = v2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Morphology.Determination()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1) {
    Swift::UInt v2 = 2;
  }
  else {
    Swift::UInt v2 = 1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Morphology.Definiteness()
{
  if (*v0) {
    Swift::UInt v1 = 2;
  }
  else {
    Swift::UInt v1 = 1;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Morphology.Determination()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1) {
    Swift::UInt v2 = 2;
  }
  else {
    Swift::UInt v2 = 1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void Morphology.definiteness.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 20);
}

unsigned char *Morphology.definiteness.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 20) = *result;
  return result;
}

uint64_t (*Morphology.definiteness.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

unsigned __int16 *InflectionRule.init(morphology:)@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)result + 1);
  int v3 = *((_DWORD *)result + 4);
  char v4 = *((unsigned char *)result + 20);
  *(void *)a2 = *result | ((unint64_t)*((unsigned __int8 *)result + 2) << 16);
  *(void *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 20) = v4;
  *(_DWORD *)(a2 + 16) = v3;
  return result;
}

void Morphology.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v6 = v2[2];
  uint64_t v7 = *((void *)v2 + 1);
  uint64_t v8 = v2[16];
  uint64_t v9 = v2[17];
  uint64_t v10 = v2[18];
  int v11 = v2[19];
  int v12 = v2[20];
  if (v4 == 3)
  {
    Hasher._combine(_:)(0);
    if (v5 != 14) {
      goto LABEL_3;
    }
LABEL_6:
    Hasher._combine(_:)(0);
    if (v6 != 6) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v4 + 1);
  if (v5 == 14) {
    goto LABEL_6;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v5 + 1);
  if (v6 != 6)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6 + 1);
    goto LABEL_8;
  }
LABEL_7:
  Hasher._combine(_:)(0);
LABEL_8:
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v7);
  swift_bridgeObjectRelease();
  if (v8 == 14)
  {
    Hasher._combine(_:)(0);
    if (v9 != 3) {
      goto LABEL_10;
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v8 + 1);
    if (v9 != 3)
    {
LABEL_10:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v9 + 1);
      if (v10 != 3) {
        goto LABEL_11;
      }
      goto LABEL_16;
    }
  }
  Hasher._combine(_:)(0);
  if (v10 != 3)
  {
LABEL_11:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10 + 1);
    if (v11 != 2) {
      goto LABEL_12;
    }
LABEL_17:
    Hasher._combine(_:)(0);
    if (v12 != 2) {
      goto LABEL_13;
    }
    goto LABEL_18;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  if (v11 == 2) {
    goto LABEL_17;
  }
LABEL_12:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)((v11 & 1) + 1);
  if (v12 != 2)
  {
LABEL_13:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((v12 & 1) + 1);
    return;
  }
LABEL_18:
  Hasher._combine(_:)(0);
}

Swift::Int Morphology.hashValue.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = *((void *)v0 + 1);
  uint64_t v5 = v0[16];
  uint64_t v6 = v0[17];
  uint64_t v7 = v0[18];
  int v8 = v0[19];
  int v9 = v0[20];
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 + 1);
  }
  if (v2 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 + 1);
  }
  if (v3 == 6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3 + 1);
  }
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v11, v4);
  swift_bridgeObjectRelease();
  if (v5 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 + 1);
  }
  if (v6 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6 + 1);
  }
  if (v7 == 3)
  {
    Hasher._combine(_:)(0);
    if (v8 != 2) {
      goto LABEL_18;
    }
LABEL_21:
    Hasher._combine(_:)(0);
    if (v9 != 2) {
      goto LABEL_19;
    }
LABEL_22:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v7 + 1);
  if (v8 == 2) {
    goto LABEL_21;
  }
LABEL_18:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)((v8 & 1) + 1);
  if (v9 == 2) {
    goto LABEL_22;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)((v9 & 1) + 1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Morphology()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = *((void *)v0 + 1);
  uint64_t v5 = v0[16];
  uint64_t v6 = v0[17];
  uint64_t v7 = v0[18];
  int v8 = v0[19];
  int v9 = v0[20];
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 + 1);
  }
  if (v2 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 + 1);
  }
  if (v3 == 6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3 + 1);
  }
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v11, v4);
  swift_bridgeObjectRelease();
  if (v5 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 + 1);
  }
  if (v6 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6 + 1);
  }
  if (v7 == 3)
  {
    Hasher._combine(_:)(0);
    if (v8 != 2) {
      goto LABEL_18;
    }
LABEL_21:
    Hasher._combine(_:)(0);
    if (v9 != 2) {
      goto LABEL_19;
    }
LABEL_22:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v7 + 1);
  if (v8 == 2) {
    goto LABEL_21;
  }
LABEL_18:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)((v8 & 1) + 1);
  if (v9 == 2) {
    goto LABEL_22;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)((v9 & 1) + 1);
  return Hasher._finalize()();
}

void InflectionRule.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v2[1];
  if (v4)
  {
    uint64_t v5 = *((unsigned __int8 *)v2 + 20);
    uint64_t v6 = *((unsigned int *)v2 + 4);
    uint64_t v7 = *v2;
    Hasher._combine(_:)(1uLL);
    if (v7 == 3)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v7 + 1);
    }
    unint64_t v9 = v6 | (v5 << 32);
    if ((v7 & 0xFF00) == 0xE00)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE1(v7) + 1);
    }
    if ((v7 & 0xFF0000) == 0x60000)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE2(v7) + 1);
    }
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v4);
    swift_bridgeObjectRelease();
    if (v6 == 14)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v9 + 1);
    }
    if (BYTE1(v9) == 3)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE1(v9) + 1);
    }
    if (BYTE2(v9) == 3)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE2(v9) + 1);
    }
    if ((v9 & 0xFF000000) == 0x2000000)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(((v9 >> 24) & 1) + 1);
    }
    if (HIDWORD(v9) == 2)
    {
      Hasher._combine(_:)(0);
      return;
    }
    Hasher._combine(_:)(1u);
    Swift::UInt v8 = (HIDWORD(v9) & 1) + 1;
  }
  else
  {
    Swift::UInt v8 = 0;
  }
  Hasher._combine(_:)(v8);
}

Swift::Int InflectionRule.hashValue.getter()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = *((unsigned __int8 *)v0 + 20);
  uint64_t v4 = *((unsigned int *)v0 + 4);
  Hasher.init(_seed:)();
  if (!v1)
  {
    Swift::UInt v6 = 0;
LABEL_27:
    Hasher._combine(_:)(v6);
    return Hasher._finalize()();
  }
  unint64_t v5 = v4 | (v3 << 32);
  Hasher._combine(_:)(1uLL);
  if (v2 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 + 1);
  }
  if ((v2 & 0xFF00) == 0xE00)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE1(v2) + 1);
  }
  if ((v2 & 0xFF0000) == 0x60000)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE2(v2) + 1);
  }
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v8, v1);
  swift_bridgeObjectRelease();
  if (v5 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 + 1);
  }
  if (BYTE1(v5) == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE1(v5) + 1);
  }
  if (BYTE2(v5) == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE2(v5) + 1);
  }
  if ((v5 & 0xFF000000) == 0x2000000)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(((v5 >> 24) & 1) + 1);
  }
  if (BYTE4(v5) != 2)
  {
    Hasher._combine(_:)(1u);
    Swift::UInt v6 = (HIDWORD(v5) & 1) + 1;
    goto LABEL_27;
  }
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

unint64_t Morphology.CodingKeys.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6974616D6D617267;
      break;
    case 2:
      unint64_t result = 0x7053664F74726170;
      break;
    case 3:
      unint64_t result = 0x7265626D756ELL;
      break;
    case 4:
      unint64_t result = 0x72506D6F74737563;
      break;
    case 6:
      unint64_t result = 0x546E756F6E6F7270;
      break;
    case 7:
      unint64_t result = 0x6E696D7265746564;
      break;
    case 8:
      unint64_t result = 0x6574696E69666564;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t Morphology.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6974616D6D617267;
      break;
    case 2:
      unint64_t result = 0x7053664F74726170;
      break;
    case 3:
      unint64_t result = 0x7265626D756ELL;
      break;
    case 4:
      unint64_t result = 0x72506D6F74737563;
      break;
    case 6:
      unint64_t result = 0x546E756F6E6F7270;
      break;
    case 7:
      unint64_t result = 0x6E696D7265746564;
      break;
    case 8:
      unint64_t result = 0x6574696E69666564;
      break;
    default:
      return result;
  }
  return result;
}

void protocol witness for Hashable.hash(into:) in conformance InflectionRule(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v2[1];
  if (v4)
  {
    uint64_t v5 = *((unsigned __int8 *)v2 + 20);
    uint64_t v6 = *((unsigned int *)v2 + 4);
    uint64_t v7 = *v2;
    Hasher._combine(_:)(1uLL);
    if (v7 == 3)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v7 + 1);
    }
    unint64_t v9 = v6 | (v5 << 32);
    if ((v7 & 0xFF00) == 0xE00)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE1(v7) + 1);
    }
    if ((v7 & 0xFF0000) == 0x60000)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE2(v7) + 1);
    }
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v4);
    swift_bridgeObjectRelease();
    if (v6 == 14)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v9 + 1);
    }
    if (BYTE1(v9) == 3)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE1(v9) + 1);
    }
    if (BYTE2(v9) == 3)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE2(v9) + 1);
    }
    if ((v9 & 0xFF000000) == 0x2000000)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(((v9 >> 24) & 1) + 1);
    }
    if (HIDWORD(v9) == 2)
    {
      Hasher._combine(_:)(0);
      return;
    }
    Hasher._combine(_:)(1u);
    Swift::UInt v8 = (HIDWORD(v9) & 1) + 1;
  }
  else
  {
    Swift::UInt v8 = 0;
  }
  Hasher._combine(_:)(v8);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InflectionRule()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = *((unsigned __int8 *)v0 + 20);
  uint64_t v4 = *((unsigned int *)v0 + 4);
  Hasher.init(_seed:)();
  if (!v1)
  {
    Swift::UInt v6 = 0;
LABEL_27:
    Hasher._combine(_:)(v6);
    return Hasher._finalize()();
  }
  unint64_t v5 = v4 | (v3 << 32);
  Hasher._combine(_:)(1uLL);
  if (v2 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 + 1);
  }
  if ((v2 & 0xFF00) == 0xE00)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE1(v2) + 1);
  }
  if ((v2 & 0xFF0000) == 0x60000)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE2(v2) + 1);
  }
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v8, v1);
  swift_bridgeObjectRelease();
  if (v5 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 + 1);
  }
  if (BYTE1(v5) == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE1(v5) + 1);
  }
  if (BYTE2(v5) == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE2(v5) + 1);
  }
  if ((v5 & 0xFF000000) == 0x2000000)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(((v5 >> 24) & 1) + 1);
  }
  if (BYTE4(v5) != 2)
  {
    Hasher._combine(_:)(1u);
    Swift::UInt v6 = (HIDWORD(v5) & 1) + 1;
    goto LABEL_27;
  }
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Morphology.CodingKeys(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Morphology.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Morphology.CodingKeys()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Morphology.CodingKeys()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Morphology.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Morphology.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Morphology.CodingKeys@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = Morphology.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance Morphology.CodingKeys()
{
  return Morphology.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance Morphology.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Morphology.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Morphology.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Morphology.CodingKeys and conformance Morphology.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Morphology.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Morphology.CodingKeys and conformance Morphology.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Morphology.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Morphology.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  Swift::UInt v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Morphology.CodingKeys and conformance Morphology.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v23 = 0;
    lazy protocol witness table accessor for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    char v9 = v21;
    char v23 = 1;
    lazy protocol witness table accessor for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v10 = v21;
    char v23 = 2;
    lazy protocol witness table accessor for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v22 = v10;
    int v11 = v21;
    char v23 = 3;
    lazy protocol witness table accessor for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v20 = v11;
    int v12 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Morphology._CustomPronoun]);
    char v23 = 4;
    lazy protocol witness table accessor for type [String : Morphology._CustomPronoun] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : Morphology._CustomPronoun] and conformance <> [A : B], (void (*)(void))lazy protocol witness table accessor for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v19 = v12;
    if (v21) {
      uint64_t v14 = v21;
    }
    else {
      uint64_t v14 = MEMORY[0x1E4FBC868];
    }
    char v23 = 5;
    lazy protocol witness table accessor for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v18 = v21;
    char v23 = 6;
    lazy protocol witness table accessor for type Morphology.PronounType and conformance Morphology.PronounType();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v17 = v21;
    char v23 = 7;
    lazy protocol witness table accessor for type Morphology.Determination and conformance Morphology.Determination();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    HIDWORD(v16) = v21;
    char v23 = 8;
    lazy protocol witness table accessor for type Morphology.Definiteness and conformance Morphology.Definiteness();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    char v15 = v21;
    *(unsigned char *)a2 = v9;
    *(unsigned char *)(a2 + 1) = v20;
    *(unsigned char *)(a2 + 2) = v19;
    *(void *)(a2 + 8) = v14;
    *(unsigned char *)(a2 + 16) = v22;
    *(unsigned char *)(a2 + 17) = v18;
    *(unsigned char *)(a2 + 18) = v17;
    *(unsigned char *)(a2 + 19) = BYTE4(v16);
    *(unsigned char *)(a2 + 20) = v15;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t Morphology.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Morphology.CodingKeys>);
  uint64_t v28 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  int v6 = *v1;
  int v7 = v1[1];
  int v8 = v1[2];
  uint64_t v23 = *((void *)v1 + 1);
  int v9 = v1[16];
  int v10 = v1[18];
  int v24 = v1[17];
  int v25 = v10;
  HIDWORD(v22) = v1[19];
  int v26 = v1[20];
  int v27 = v8;
  uint64_t v11 = a1[3];
  int v12 = a1;
  int8x16_t v13 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v12, v11);
  lazy protocol witness table accessor for type Morphology.CodingKeys and conformance Morphology.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v6 == 3)
  {
    uint64_t v14 = v4;
  }
  else
  {
    LOBYTE(v30) = v6;
    char v29 = 0;
    lazy protocol witness table accessor for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v14 = v4;
    if (v2) {
      return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v13, v14);
    }
  }
  if (v9 == 14
    || (LOBYTE(v30) = v9,
        char v29 = 1,
        lazy protocol witness table accessor for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase(),
        KeyedEncodingContainer.encode<A>(_:forKey:)(),
        !v2))
  {
    int v15 = v27;
    if (v7 == 14
      || (LOBYTE(v30) = v7,
          char v29 = 2,
          lazy protocol witness table accessor for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech(),
          KeyedEncodingContainer.encode<A>(_:forKey:)(),
          !v2))
    {
      int v17 = v25;
      int v16 = v26;
      int v18 = v24;
      uint64_t v19 = v23;
      if (v15 == 6
        || (LOBYTE(v30) = v15,
            char v29 = 3,
            lazy protocol witness table accessor for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber(),
            KeyedEncodingContainer.encode<A>(_:forKey:)(),
            !v2))
      {
        if (!*(void *)(v19 + 16)
          || (uint64_t v30 = v19,
              char v29 = 4,
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Morphology._CustomPronoun]),
              lazy protocol witness table accessor for type [String : Morphology._CustomPronoun] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : Morphology._CustomPronoun] and conformance <> [A : B], (void (*)(void))lazy protocol witness table accessor for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun), KeyedEncodingContainer.encode<A>(_:forKey:)(), !v2))
        {
          int v20 = HIDWORD(v22);
          if (v18 != 3)
          {
            LOBYTE(v30) = v18;
            char v29 = 5;
            lazy protocol witness table accessor for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson();
            KeyedEncodingContainer.encode<A>(_:forKey:)();
            if (v2) {
              return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v13, v14);
            }
            int v20 = HIDWORD(v22);
          }
          if (v17 != 3)
          {
            LOBYTE(v30) = v17;
            char v29 = 6;
            lazy protocol witness table accessor for type Morphology.PronounType and conformance Morphology.PronounType();
            KeyedEncodingContainer.encode<A>(_:forKey:)();
            if (v2) {
              return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v13, v14);
            }
            int v20 = HIDWORD(v22);
          }
          if (v20 == 2
            || (LOBYTE(v30) = v20 & 1,
                char v29 = 7,
                lazy protocol witness table accessor for type Morphology.Determination and conformance Morphology.Determination(),
                KeyedEncodingContainer.encode<A>(_:forKey:)(),
                !v2))
          {
            if (v16 != 2)
            {
              LOBYTE(v30) = v16 & 1;
              char v29 = 8;
              lazy protocol witness table accessor for type Morphology.Definiteness and conformance Morphology.Definiteness();
              KeyedEncodingContainer.encode<A>(_:forKey:)();
            }
          }
        }
      }
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v13, v14);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Morphology.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology(void *a1)
{
  return Morphology.encode(to:)(a1);
}

uint64_t Morphology.GrammaticalGender.init(from:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_project_boxed_opaque_existential_1(v21, v21[3]);
  uint64_t v6 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  uint64_t v7 = v5;
  BOOL v8 = v6 == 0x656E696E696D6566 && v5 == 0xE800000000000000;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 0;
LABEL_17:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    *a2 = v9;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  if (v6 == 0x6E696C756373616DLL && v7 == 0xE900000000000065
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 1;
    goto LABEL_17;
  }
  if (v6 == 0x72657475656ELL && v7 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    char v9 = 2;
    goto LABEL_17;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v10) {
    goto LABEL_16;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v12 = objc_allocWithZone((Class)NSError);
  uint64_t v13 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v12, sel_initWithDomain_code_userInfo_, v13, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v15 = objc_msgSend(v14, sel_domain);
  id v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v18 == v19)
  {
    swift_bridgeObjectRelease_n();
LABEL_23:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v20) {
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t Morphology.GrammaticalGender.encode(to:)(void *a1)
{
  return Morphology.GrammaticalGender.encode(to:)(a1);
}

{
  unsigned char v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.GrammaticalGender@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  return Morphology.GrammaticalGender.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology.GrammaticalGender(void *a1)
{
  return Morphology.GrammaticalGender.encode(to:)(a1);
}

uint64_t Morphology.GrammaticalNumber.init(from:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_project_boxed_opaque_existential_1(v21, v21[3]);
  uint64_t v6 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  uint64_t v7 = v5;
  BOOL v8 = v6 == 6647407 && v5 == 0xE300000000000000;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 0;
LABEL_29:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    *a2 = v9;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  if (v6 == 1869768058 && v7 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 1;
    goto LABEL_29;
  }
  if (v6 == 0x726568746FLL && v7 == 0xE500000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 2;
    goto LABEL_29;
  }
  if (v6 == 7305076 && v7 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 3;
    goto LABEL_29;
  }
  if (v6 == 7824742 && v7 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 4;
    goto LABEL_29;
  }
  if (v6 == 2037277037 && v7 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_28:
    char v9 = 5;
    goto LABEL_29;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v10) {
    goto LABEL_28;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v12 = objc_allocWithZone((Class)NSError);
  uint64_t v13 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v12, sel_initWithDomain_code_userInfo_, v13, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v15 = objc_msgSend(v14, sel_domain);
  id v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v18 == v19)
  {
    swift_bridgeObjectRelease_n();
LABEL_35:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v20) {
    goto LABEL_35;
  }
  __break(1u);
  return result;
}

uint64_t Morphology.GrammaticalNumber.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.GrammaticalNumber@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  return Morphology.GrammaticalNumber.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology.GrammaticalNumber(void *a1)
{
  return Morphology.GrammaticalNumber.encode(to:)(a1);
}

uint64_t Morphology.PartOfSpeech.init(from:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_project_boxed_opaque_existential_1(v21, v21[3]);
  uint64_t v6 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  uint64_t v7 = v5;
  BOOL v8 = v6 == 0x6E696D7265746564 && v5 == 0xEA00000000007265;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 0;
LABEL_8:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    *a2 = v9;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  if (v6 == 0x6E756F6E6F7270 && v7 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 1;
    goto LABEL_8;
  }
  if (v6 == 0x72657474656CLL && v7 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 2;
    goto LABEL_8;
  }
  if (v6 == 0x627265766461 && v7 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 3;
    goto LABEL_8;
  }
  if (v6 == 0x656C636974726170 && v7 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 4;
    goto LABEL_8;
  }
  if (v6 == 0x76697463656A6461 && v7 == 0xE900000000000065
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 5;
    goto LABEL_8;
  }
  if (v6 == 0x697469736F706461 && v7 == 0xEA00000000006E6FLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 6;
    goto LABEL_8;
  }
  if (v6 == 1651664246 && v7 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 7;
    goto LABEL_8;
  }
  if (v6 == 1853189998 && v7 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 8;
    goto LABEL_8;
  }
  if (v6 == 0x74636E756A6E6F63 && v7 == 0xEB000000006E6F69
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 9;
    goto LABEL_8;
  }
  if (v6 == 0x6C6172656D756ELL && v7 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 10;
    goto LABEL_8;
  }
  if (v6 == 0x63656A7265746E69 && v7 == 0xEC0000006E6F6974
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 11;
    goto LABEL_8;
  }
  if (v6 == 0x7469736F70657270 && v7 == 0xEB000000006E6F69
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 12;
    goto LABEL_8;
  }
  if (v6 == 0x6169766572626261 && v7 == 0xEC0000006E6F6974)
  {
    swift_bridgeObjectRelease();
LABEL_62:
    char v9 = 13;
    goto LABEL_8;
  }
  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v11) {
    goto LABEL_62;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v12 = objc_allocWithZone((Class)NSError);
  uint64_t v13 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v12, sel_initWithDomain_code_userInfo_, v13, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v15 = objc_msgSend(v14, sel_domain);
  id v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v18 == v19)
  {
    swift_bridgeObjectRelease_n();
LABEL_67:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v20) {
    goto LABEL_67;
  }
  __break(1u);
  return result;
}

uint64_t Morphology.PartOfSpeech.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.PartOfSpeech@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  return Morphology.PartOfSpeech.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology.PartOfSpeech(void *a1)
{
  return Morphology.PartOfSpeech.encode(to:)(a1);
}

uint64_t Morphology.GrammaticalCase.init(from:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_project_boxed_opaque_existential_1(v21, v21[3]);
  uint64_t v6 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  uint64_t v7 = v5;
  BOOL v8 = v6 == 0x6974616E696D6F6ELL && v5 == 0xEA00000000006576;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 0;
LABEL_8:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    *a2 = v9;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  if (v6 == 0x6974617375636361 && v7 == 0xEA00000000006576
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 1;
    goto LABEL_8;
  }
  if (v6 == 0x657669746164 && v7 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 2;
    goto LABEL_8;
  }
  if (v6 == 0x65766974696E6567 && v7 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 3;
    goto LABEL_8;
  }
  if (v6 == 0x7469736F70657270 && v7 == 0xED00006C616E6F69
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 4;
    goto LABEL_8;
  }
  if (v6 == 0x65766974616C6261 && v7 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 5;
    goto LABEL_8;
  }
  if (v6 == 0x6576697373656461 && v7 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 6;
    goto LABEL_8;
  }
  if (v6 == 0x65766974616C6C61 && v7 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 7;
    goto LABEL_8;
  }
  if (v6 == 0x65766974616C65 && v7 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 8;
    goto LABEL_8;
  }
  if (v6 == 0x65766974616C6C69 && v7 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 9;
    goto LABEL_8;
  }
  if (v6 == 0x657669737365 && v7 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 10;
    goto LABEL_8;
  }
  if (v6 == 0x6576697373656E69 && v7 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 11;
    goto LABEL_8;
  }
  if (v6 == 0x6576697461636F6CLL && v7 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 12;
    goto LABEL_8;
  }
  if (v6 == 0x74616C736E617274 && v7 == 0xEB00000000657669)
  {
    swift_bridgeObjectRelease();
LABEL_62:
    char v9 = 13;
    goto LABEL_8;
  }
  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v11) {
    goto LABEL_62;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v12 = objc_allocWithZone((Class)NSError);
  uint64_t v13 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v12, sel_initWithDomain_code_userInfo_, v13, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v15 = objc_msgSend(v14, sel_domain);
  id v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v18 == v19)
  {
    swift_bridgeObjectRelease_n();
LABEL_67:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v20) {
    goto LABEL_67;
  }
  __break(1u);
  return result;
}

uint64_t Morphology.GrammaticalCase.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.GrammaticalCase@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  return Morphology.GrammaticalCase.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology.GrammaticalCase(void *a1)
{
  return Morphology.GrammaticalCase.encode(to:)(a1);
}

uint64_t Morphology.Determination.init(from:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_project_boxed_opaque_existential_1(v22, v22[3]);
  uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  uint64_t v7 = v5;
  uint64_t v8 = v6;
  BOOL v9 = v5 == 0x646E657065646E69 && v6 == 0xEB00000000746E65;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v10 = 0;
LABEL_15:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    *a2 = v10;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  if (v7 == 0x6E65646E65706564 && v8 == 0xE900000000000074)
  {
    swift_bridgeObjectRelease();
LABEL_14:
    char v10 = 1;
    goto LABEL_15;
  }
  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v11) {
    goto LABEL_14;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v13 = objc_allocWithZone((Class)NSError);
  uint64_t v14 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(v13, sel_initWithDomain_code_userInfo_, v14, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v16 = objc_msgSend(v15, sel_domain);
  id v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  uint64_t v19 = v18;

  if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v19 == v20)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_21;
  }
  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v21)
  {
LABEL_21:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __break(1u);
  return result;
}

uint64_t Morphology.Determination.encode(to:)(void *a1)
{
  return Morphology.Determination.encode(to:)(a1);
}

{
  unsigned char v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.Determination@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  return Morphology.Determination.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology.Determination(void *a1)
{
  return protocol witness for Encodable.encode(to:) in conformance Morphology.Determination(a1);
}

{
  unsigned char v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t Morphology.Definiteness.init(from:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_project_boxed_opaque_existential_1(v22, v22[3]);
  uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  uint64_t v7 = v5;
  uint64_t v8 = v6;
  BOOL v9 = v5 == 0x696E696665646E69 && v6 == 0xEA00000000006574;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v10 = 0;
LABEL_15:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    *a2 = v10;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  if (v7 == 0x6574696E69666564 && v8 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_14:
    char v10 = 1;
    goto LABEL_15;
  }
  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v11) {
    goto LABEL_14;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v13 = objc_allocWithZone((Class)NSError);
  uint64_t v14 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(v13, sel_initWithDomain_code_userInfo_, v14, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v16 = objc_msgSend(v15, sel_domain);
  id v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  uint64_t v19 = v18;

  if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v19 == v20)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_21;
  }
  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v21)
  {
LABEL_21:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __break(1u);
  return result;
}

uint64_t Morphology.Definiteness.encode(to:)(void *a1)
{
  return Morphology.Determination.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.Definiteness@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  return Morphology.Definiteness.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology.Definiteness(void *a1)
{
  return protocol witness for Encodable.encode(to:) in conformance Morphology.Determination(a1);
}

uint64_t Morphology.GrammaticalPerson.init(from:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_project_boxed_opaque_existential_1(v21, v21[3]);
  uint64_t v6 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  uint64_t v7 = v5;
  BOOL v8 = v6 == 0x7473726966 && v5 == 0xE500000000000000;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 0;
LABEL_17:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    *a2 = v9;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  if (v6 == 0x646E6F636573 && v7 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 1;
    goto LABEL_17;
  }
  if (v6 == 0x6472696874 && v7 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    char v9 = 2;
    goto LABEL_17;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v10) {
    goto LABEL_16;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v12 = objc_allocWithZone((Class)NSError);
  uint64_t v13 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v12, sel_initWithDomain_code_userInfo_, v13, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v15 = objc_msgSend(v14, sel_domain);
  id v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v18 == v19)
  {
    swift_bridgeObjectRelease_n();
LABEL_23:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v20) {
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t Morphology.GrammaticalPerson.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.GrammaticalPerson@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  return Morphology.GrammaticalPerson.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology.GrammaticalPerson(void *a1)
{
  return Morphology.GrammaticalPerson.encode(to:)(a1);
}

uint64_t Morphology.PronounType.init(from:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_project_boxed_opaque_existential_1(v21, v21[3]);
  uint64_t v6 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  uint64_t v7 = v5;
  BOOL v8 = v6 == 0x6C616E6F73726570 && v5 == 0xE800000000000000;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 0;
LABEL_17:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    *a2 = v9;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  if (v6 == 0x766978656C666572 && v7 == 0xE900000000000065
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 1;
    goto LABEL_17;
  }
  if (v6 == 0x6973736573736F70 && v7 == 0xEA00000000006576)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    char v9 = 2;
    goto LABEL_17;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v10) {
    goto LABEL_16;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v12 = objc_allocWithZone((Class)NSError);
  uint64_t v13 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v12, sel_initWithDomain_code_userInfo_, v13, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v15 = objc_msgSend(v14, sel_domain);
  id v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v18 == v19)
  {
    swift_bridgeObjectRelease_n();
LABEL_23:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v20) {
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t Morphology.PronounType.encode(to:)(void *a1)
{
  return Morphology.GrammaticalGender.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.PronounType@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  return Morphology.PronounType.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology.PronounType(void *a1)
{
  return Morphology.PronounType.encode(to:)(a1);
}

uint64_t InflectionRule.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v14, v15);
    if (dispatch thunk of SingleValueDecodingContainer.decode(_:)())
    {
      unint64_t v5 = 0;
      uint64_t v6 = 0;
      unint64_t v7 = 0;
    }
    else
    {
      __swift_project_boxed_opaque_existential_1(v14, v15);
      lazy protocol witness table accessor for type Morphology and conformance Morphology();
      dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
      uint64_t v6 = v11;
      unint64_t v5 = v9 | ((unint64_t)v10 << 16);
      unint64_t v7 = v12 | ((unint64_t)v13 << 32);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    *(void *)a2 = v5;
    *(void *)(a2 + 8) = v6;
    *(unsigned char *)(a2 + 20) = BYTE4(v7);
    *(_DWORD *)(a2 + 16) = v7;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t InflectionRule.encode(to:)(void *a1)
{
  uint64_t v2 = *(void *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  if (v2)
  {
    lazy protocol witness table accessor for type Morphology and conformance Morphology();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  }
  else
  {
    dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t protocol witness for Decodable.init(from:) in conformance InflectionRule@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return InflectionRule.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InflectionRule(void *a1)
{
  return InflectionRule.encode(to:)(a1);
}

id static InflectionRule.canInflect(language:)(uint64_t a1, uint64_t a2)
{
  return static InflectionRule.canInflect(language:)(a1, a2, (uint64_t)off_1E51F3DD0, (SEL *)&selRef_canInflectLanguage_);
}

id static InflectionRule.canInflectPreferredLocalization.getter()
{
  return objc_msgSend(self, sel_canInflectPreferredLocalization);
}

uint64_t Morphology.CustomPronoun.subjectForm.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path setter for Morphology.CustomPronoun.subjectForm : Morphology.CustomPronoun(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  a2[1] = v3;
  return result;
}

uint64_t Morphology.CustomPronoun.subjectForm.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t Morphology.CustomPronoun.objectForm.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path getter for Morphology.CustomPronoun.objectForm : Morphology.CustomPronoun@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for Morphology.CustomPronoun.objectForm : Morphology.CustomPronoun(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v3;
  return result;
}

uint64_t Morphology.CustomPronoun.objectForm.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t Morphology.CustomPronoun.possessiveForm.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path getter for Morphology.CustomPronoun.possessiveForm : Morphology.CustomPronoun@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for Morphology.CustomPronoun.possessiveForm : Morphology.CustomPronoun(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 32) = v4;
  *(void *)(a2 + 40) = v3;
  return result;
}

uint64_t Morphology.CustomPronoun.possessiveForm.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t Morphology.CustomPronoun.possessiveAdjectiveForm.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path getter for Morphology.CustomPronoun.possessiveAdjectiveForm : Morphology.CustomPronoun@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for Morphology.CustomPronoun.possessiveAdjectiveForm : Morphology.CustomPronoun(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v3;
  return result;
}

uint64_t Morphology.CustomPronoun.possessiveAdjectiveForm.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t Morphology.CustomPronoun.reflexiveForm.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path getter for Morphology.CustomPronoun.reflexiveForm : Morphology.CustomPronoun@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for Morphology.CustomPronoun.reflexiveForm : Morphology.CustomPronoun(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 64) = v4;
  *(void *)(a2 + 72) = v3;
  return result;
}

uint64_t Morphology.CustomPronoun.reflexiveForm.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return result;
}

void __swiftcall Morphology.customPronoun(forLanguage:)(Foundation::Morphology::CustomPronoun_optional *__return_ptr retstr, Swift::String forLanguage)
{
  uint64_t v4 = *(void *)(v2 + 8);
  Swift::String v5 = String.lowercased()();
  if (*(void *)(v4 + 16)
    && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5._countAndFlagsBits, (uint64_t)v5._object), (v7 & 1) != 0))
  {
    BOOL v8 = (uint64_t *)(*(void *)(v4 + 56) + 80 * v6);
    uint64_t v10 = *v8;
    unsigned __int16 v9 = (void *)v8[1];
    uint64_t v12 = v8[2];
    uint64_t v11 = (void *)v8[3];
    uint64_t v14 = v8[4];
    unsigned __int8 v13 = (void *)v8[5];
    uint64_t v15 = (void *)v8[7];
    id v16 = (void *)v8[9];
    uint64_t v17 = v8[8];
    uint64_t v18 = v8[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    retstr->value._pronoun.subjectForm.value._countAndFlagsBits = v10;
    retstr->value._pronoun.subjectForm.value._object = v9;
    retstr->value._pronoun.objectForm.value._countAndFlagsBits = v12;
    retstr->value._pronoun.objectForm.value._object = v11;
    retstr->value._pronoun.possessiveForm.value._countAndFlagsBits = v14;
    retstr->value._pronoun.possessiveForm.value._object = v13;
    retstr->value._pronoun.possessiveAdjectiveForm.value._countAndFlagsBits = v18;
    retstr->value._pronoun.possessiveAdjectiveForm.value._object = v15;
    retstr->value._pronoun.reflexiveForm.value._countAndFlagsBits = v17;
    retstr->value._pronoun.reflexiveForm.value._object = v16;
  }
  else
  {
    swift_bridgeObjectRelease();
    retstr->value._pronoun.subjectForm = (Swift::String_optional)xmmword_182106C90;
    retstr->value._pronoun.objectForm = 0u;
    retstr->value._pronoun.possessiveForm = 0u;
    retstr->value._pronoun.possessiveAdjectiveForm = 0u;
    retstr->value._pronoun.reflexiveForm = 0u;
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Morphology.setCustomPronoun(_:forLanguage:)(Foundation::Morphology::CustomPronoun_optional *_, Swift::String forLanguage)
{
  v41[10] = *MEMORY[0x1E4F143B8];
  uint64_t countAndFlagsBits = _->value._pronoun.subjectForm.value._countAndFlagsBits;
  object = _->value._pronoun.subjectForm.value._object;
  uint64_t v5 = _->value._pronoun.objectForm.value._countAndFlagsBits;
  uint64_t v4 = _->value._pronoun.objectForm.value._object;
  uint64_t v6 = _->value._pronoun.possessiveForm.value._countAndFlagsBits;
  char v7 = _->value._pronoun.possessiveForm.value._object;
  uint64_t v8 = _->value._pronoun.possessiveAdjectiveForm.value._countAndFlagsBits;
  uint64_t v38 = _->value._pronoun.reflexiveForm.value._countAndFlagsBits;
  uint64_t v39 = _->value._pronoun.possessiveAdjectiveForm.value._object;
  uint64_t v37 = _->value._pronoun.reflexiveForm.value._object;
  if (object == (void *)1)
  {
    Swift::String v9 = String.lowercased()();
    uint64_t v35 = v9._object;
    unint64_t v36 = v9._countAndFlagsBits;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    id v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
LABEL_5:
    v41[0] = v10;
    v41[1] = object;
    v41[2] = v11;
    v41[3] = v12;
    v41[4] = v13;
    v41[5] = v14;
    v41[6] = v15;
    v41[7] = v16;
    v41[8] = v17;
    v41[9] = v18;
    outlined copy of Morphology.CustomPronoun?(countAndFlagsBits, (uint64_t)object);
    specialized Dictionary.subscript.setter((uint64_t)v41, v36, (uint64_t)v35);
    return;
  }
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = countAndFlagsBits;
  v19[3] = object;
  v19[4] = v5;
  v19[5] = v4;
  v19[6] = v6;
  v19[7] = v7;
  v19[8] = v8;
  v19[9] = v39;
  v19[10] = v38;
  v19[11] = v37;
  aBlock[4] = partial apply for closure #1 in Morphology.setCustomPronoun(_:forLanguage:);
  aBlock[5] = v19;
  aBlock[0] = (id)MEMORY[0x1E4F143A8];
  aBlock[1] = (id)1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@out Any?);
  aBlock[3] = &block_descriptor_7;
  char v20 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v21 = String._bridgeToObjectiveCImpl()();
  aBlock[0] = 0;
  uint64_t v22 = v8;
  BOOL v23 = __NSMorphologyCustomPronounValidate((uint64_t)v20, v21, (uint64_t)aBlock);
  swift_unknownObjectRelease();
  _Block_release(v20);
  id v24 = aBlock[0];
  if (v23)
  {

    Swift::String v25 = String.lowercased()();
    uint64_t v35 = v25._object;
    unint64_t v36 = v25._countAndFlagsBits;
    uint64_t v10 = countAndFlagsBits;
    uint64_t v11 = v5;
    uint64_t v12 = v4;
    uint64_t v13 = v6;
    uint64_t v14 = v7;
    uint64_t v15 = v22;
    id v16 = v39;
    uint64_t v17 = v38;
    uint64_t v18 = v37;
    goto LABEL_5;
  }
  if (!v24)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v26 = objc_allocWithZone((Class)NSError);
    uint64_t v27 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v28 = objc_msgSend(v26, sel_initWithDomain_code_userInfo_, v27, 1024, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v29 = objc_msgSend(v28, sel_domain);
    id v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    uint64_t v32 = v31;

    if (v30 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v32 == v33)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v34 & 1) == 0) {
        __break(1u);
      }
    }
  }
  swift_willThrow();
}

double closure #1 in Morphology.setCustomPronoun(_:forLanguage:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (specialized static Morphology.CustomPronoun.keyPath(forObjectiveCKey:)(a1, a2))
  {
    outlined retain of Morphology._CustomPronoun(a3);
    swift_getAtKeyPath();
    outlined release of Morphology._CustomPronoun(a3);
    if (v8)
    {
      *(void *)(a4 + 24) = MEMORY[0x1E4FBB1A0];
      swift_release();
      *(void *)a4 = v7;
      *(void *)(a4 + 8) = v8;
      return result;
    }
    swift_release();
  }
  double result = 0.0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  return result;
}

id thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@out Any?)(uint64_t a1, void *a2)
{
  void (*v2)(void *__return_ptr, id, uint64_t);
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void v14[3];
  uint64_t v15;
  uint64_t vars8;

  uint64_t v2 = *(void (**)(void *__return_ptr, id, uint64_t))(a1 + 32);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v5 = v4;
  swift_retain();
  v2(v14, v3, v5);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v6 = v15;
  if (v15)
  {
    uint64_t v7 = __swift_project_boxed_opaque_existential_1(v14, v15);
    uint64_t v8 = *(void *)(v6 - 8);
    Swift::String v9 = MEMORY[0x1F4188790](v7);
    uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v8 + 16))(v11, v9);
    uint64_t v12 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  else
  {
    uint64_t v12 = 0;
  }

  return v12;
}

void __swiftcall Morphology.CustomPronoun.init()(Foundation::Morphology::CustomPronoun *__return_ptr retstr)
{
  retstr->_pronoun.possessiveAdjectiveForm = 0u;
  retstr->_pronoun.reflexiveForm = 0u;
  retstr->_pronoun.objectForm = 0u;
  retstr->_pronoun.possessiveForm = 0u;
  retstr->_pronoun.subjectForm = 0u;
}

id static Morphology.CustomPronoun.isSupported(forLanguage:)(uint64_t a1, uint64_t a2)
{
  return static InflectionRule.canInflect(language:)(a1, a2, (uint64_t)off_1E51F3F50, (SEL *)&selRef_isSupportedForLanguage_);
}

id static InflectionRule.canInflect(language:)(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v5 = self;
  id v6 = objc_msgSend(v5, *a4, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  return v6;
}

uint64_t static Morphology.CustomPronoun.requiredKeys(forLanguage:)()
{
  uint64_t v0 = self;
  id v1 = objc_msgSend(v0, sel_requiredKeysForLanguage_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if (v1)
  {
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v2 = swift_dynamicCastClass();
    if (v2)
    {
      uint64_t v3 = v2;
    }
    else
    {
      swift_unknownObjectRelease();
      objc_msgSend(v1, sel_copy);
      unint64_t v4 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      uint64_t v3 = specialized _arrayForceCast<A, B>(_:)(v4);

      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v3 = MEMORY[0x1E4FBC860];
  }
  uint64_t v5 = specialized Sequence.compactMap<A>(_:)(v3);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t (*Morphology.CustomPronoun.subjectForm.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Morphology.CustomPronoun.subjectForm.modify;
}

uint64_t Morphology.CustomPronoun.subjectForm.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = (void *)a1[2];
  uint64_t v4 = *a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *uint64_t v3 = v4;
    v3[1] = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v4;
    v3[1] = v2;
  }
  return result;
}

uint64_t (*Morphology.CustomPronoun.objectForm.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = *(void *)(v1 + 24);
  *a1 = *(void *)(v1 + 16);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Morphology.CustomPronoun.objectForm.modify;
}

uint64_t Morphology.CustomPronoun.objectForm.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = *a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 16) = v4;
    *(void *)(v3 + 24) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 16) = v4;
    *(void *)(v3 + 24) = v2;
  }
  return result;
}

uint64_t (*Morphology.CustomPronoun.possessiveForm.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = *(void *)(v1 + 40);
  *a1 = *(void *)(v1 + 32);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Morphology.CustomPronoun.possessiveForm.modify;
}

uint64_t Morphology.CustomPronoun.possessiveForm.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = *a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = v2;
  }
  return result;
}

uint64_t (*Morphology.CustomPronoun.possessiveAdjectiveForm.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = *(void *)(v1 + 56);
  *a1 = *(void *)(v1 + 48);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Morphology.CustomPronoun.possessiveAdjectiveForm.modify;
}

uint64_t Morphology.CustomPronoun.possessiveAdjectiveForm.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = *a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 48) = v4;
    *(void *)(v3 + 56) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 48) = v4;
    *(void *)(v3 + 56) = v2;
  }
  return result;
}

uint64_t (*Morphology.CustomPronoun.reflexiveForm.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = *(void *)(v1 + 72);
  *a1 = *(void *)(v1 + 64);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Morphology.CustomPronoun.reflexiveForm.modify;
}

uint64_t Morphology.CustomPronoun.reflexiveForm.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = *a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 64) = v4;
    *(void *)(v3 + 72) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 64) = v4;
    *(void *)(v3 + 72) = v2;
  }
  return result;
}

uint64_t Morphology.CustomPronoun.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Morphology._CustomPronoun.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = a1;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v35);
  __swift_project_boxed_opaque_existential_1(v35, v35[3]);
  lazy protocol witness table accessor for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v9 = v34;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1(v9);
  }
  else
  {
    char v36 = 0;
    uint64_t v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v12 = v11;
    char v36 = 1;
    swift_bridgeObjectRetain();
    uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v15 = v14;
    uint64_t v32 = v13;
    uint64_t v33 = v10;
    char v36 = 2;
    swift_bridgeObjectRetain();
    uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v18 = v17;
    uint64_t v30 = v16;
    uint64_t v31 = a2;
    char v36 = 3;
    swift_bridgeObjectRetain();
    uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v21 = v20;
    uint64_t v29 = v19;
    char v36 = 4;
    swift_bridgeObjectRetain();
    uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v24 = v23;
    Swift::String v25 = *(void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v28 = v22;
    v25(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = __swift_destroy_boxed_opaque_existential_1(v34);
    uint64_t v27 = v31;
    *uint64_t v31 = v33;
    v27[1] = v12;
    v27[2] = v32;
    v27[3] = v15;
    v27[4] = v30;
    v27[5] = v18;
    v27[6] = v29;
    v27[7] = v21;
    v27[8] = v28;
    v27[9] = v24;
  }
  return result;
}

uint64_t Morphology.CustomPronoun.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Morphology._CustomPronoun.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v1[2];
  v13[7] = v1[3];
  v13[8] = v7;
  uint64_t v8 = v1[4];
  v13[5] = v1[5];
  v13[6] = v8;
  uint64_t v9 = v1[6];
  v13[3] = v1[7];
  v13[4] = v9;
  uint64_t v10 = v1[8];
  v13[1] = v1[9];
  v13[2] = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v18 = 0;
  uint64_t v11 = v13[9];
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v11)
  {
    char v17 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v16 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v15 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v14 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t Morphology._CustomPronoun.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Morphology._CustomPronoun.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

void Morphology._CustomPronoun.hash(into:)()
{
  if (v0[1])
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v0[3]) {
      goto LABEL_3;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v0[3])
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v0[5]) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  Hasher._combine(_:)(0);
  if (v0[5])
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v0[7]) {
      goto LABEL_5;
    }
LABEL_12:
    Hasher._combine(_:)(0);
    if (v0[9]) {
      goto LABEL_6;
    }
LABEL_13:
    Hasher._combine(_:)(0);
    return;
  }
LABEL_11:
  Hasher._combine(_:)(0);
  if (!v0[7]) {
    goto LABEL_12;
  }
LABEL_5:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v0[9]) {
    goto LABEL_13;
  }
LABEL_6:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();

  swift_bridgeObjectRelease();
}

uint64_t static Morphology.CustomPronoun.== infix(_:_:)(_OWORD *a1, long long *a2)
{
  long long v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  long long v3 = a1[4];
  long long v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  long long v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  long long v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return specialized static Morphology._CustomPronoun.== infix(_:_:)(v8, v9) & 1;
}

Swift::Int Morphology.CustomPronoun.hashValue.getter()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[9];
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v2)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v3) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  Hasher._combine(_:)(0);
  if (v3)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_5;
    }
LABEL_10:
    Hasher._combine(_:)(0);
    if (v5) {
      goto LABEL_6;
    }
LABEL_11:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
LABEL_9:
  Hasher._combine(_:)(0);
  if (!v4) {
    goto LABEL_10;
  }
LABEL_5:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v5) {
    goto LABEL_11;
  }
LABEL_6:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.CustomPronoun@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return Morphology.CustomPronoun.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology.CustomPronoun(void *a1)
{
  return Morphology.CustomPronoun.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Morphology.CustomPronoun()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[9];
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v2)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v3) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  Hasher._combine(_:)(0);
  if (v3)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_5;
    }
LABEL_10:
    Hasher._combine(_:)(0);
    if (v5) {
      goto LABEL_6;
    }
LABEL_11:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
LABEL_9:
  Hasher._combine(_:)(0);
  if (!v4) {
    goto LABEL_10;
  }
LABEL_5:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v5) {
    goto LABEL_11;
  }
LABEL_6:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Morphology.CustomPronoun(_OWORD *a1, long long *a2)
{
  long long v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  long long v3 = a1[4];
  long long v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  long long v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  long long v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return specialized static Morphology._CustomPronoun.== infix(_:_:)(v8, v9) & 1;
}

Swift::Int Morphology._CustomPronoun.hashValue.getter()
{
  Hasher.init(_seed:)();
  if (v0[1])
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v0[3]) {
      goto LABEL_3;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v0[3])
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v0[5]) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  Hasher._combine(_:)(0);
  if (v0[5])
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v0[7]) {
      goto LABEL_5;
    }
LABEL_10:
    Hasher._combine(_:)(0);
    if (v0[9]) {
      goto LABEL_6;
    }
LABEL_11:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
LABEL_9:
  Hasher._combine(_:)(0);
  if (!v0[7]) {
    goto LABEL_10;
  }
LABEL_5:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v0[9]) {
    goto LABEL_11;
  }
LABEL_6:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance Morphology._CustomPronoun.CodingKeys()
{
  unint64_t result = 0x467463656A627573;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6F467463656A626FLL;
      break;
    case 2:
      unint64_t result = 0x6973736573736F70;
      break;
    case 3:
      unint64_t result = 0xD000000000000017;
      break;
    case 4:
      unint64_t result = 0x766978656C666572;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Morphology._CustomPronoun.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Morphology._CustomPronoun.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance Morphology._CustomPronoun.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Morphology._CustomPronoun.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Morphology._CustomPronoun.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

__n128 protocol witness for Decodable.init(from:) in conformance Morphology._CustomPronoun@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized Morphology._CustomPronoun.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology._CustomPronoun(void *a1)
{
  return Morphology._CustomPronoun.encode(to:)(a1);
}

uint64_t Morphology.Pronoun.pronoun.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Morphology.Pronoun.pronoun.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Morphology.Pronoun.pronoun.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Morphology.Pronoun.morphology.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 18);
  uint64_t v3 = *(void *)(v1 + 24);
  char v4 = *(unsigned char *)(v1 + 36);
  *(_WORD *)a1 = *(_WORD *)(v1 + 16);
  *(unsigned char *)(a1 + 2) = v2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + 32);
  *(unsigned char *)(a1 + 20) = v4;
  return swift_bridgeObjectRetain();
}

uint64_t Morphology.Pronoun.morphology.setter(__int16 *a1)
{
  __int16 v3 = *a1;
  char v4 = *((unsigned char *)a1 + 2);
  uint64_t v5 = *((void *)a1 + 1);
  char v6 = *((unsigned char *)a1 + 20);
  uint64_t result = swift_bridgeObjectRelease();
  *(_WORD *)(v1 + 16) = v3;
  *(unsigned char *)(v1 + 18) = v4;
  *(void *)(v1 + 24) = v5;
  *(_DWORD *)(v1 + 32) = *((_DWORD *)a1 + 4);
  *(unsigned char *)(v1 + 36) = v6;
  return result;
}

uint64_t (*Morphology.Pronoun.morphology.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Morphology.Pronoun.dependentMorphology.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 48);
  int v3 = *(_DWORD *)(v1 + 56);
  char v4 = *(unsigned char *)(v1 + 60);
  *(void *)a1 = *(void *)(v1 + 40);
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 20) = v4;
  *(_DWORD *)(a1 + 16) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t Morphology.Pronoun.dependentMorphology.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *((_DWORD *)a1 + 4);
  char v5 = *((unsigned char *)a1 + 20);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v3;
  *(unsigned char *)(v1 + 60) = v5;
  *(_DWORD *)(v1 + 56) = v4;
  return result;
}

uint64_t (*Morphology.Pronoun.dependentMorphology.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void __swiftcall Morphology.Pronoun.init(pronoun:morphology:dependentMorphology:)(Foundation::Morphology::Pronoun *__return_ptr retstr, Swift::String pronoun, Foundation::Morphology morphology, Foundation::Morphology_optional dependentMorphology)
{
  __int16 v4 = **(_WORD **)&morphology.grammaticalGender.value;
  Foundation::Morphology::GrammaticalNumber v5 = *(unsigned char *)(*(void *)&morphology.grammaticalGender.value + 2);
  char v6 = *(void **)(*(void *)&morphology.grammaticalGender.value + 8);
  Foundation::Morphology::Definiteness v7 = *(unsigned char *)(*(void *)&morphology.grammaticalGender.value + 20);
  int v8 = *((_DWORD *)morphology.customPronouns._rawValue + 4);
  Foundation::Morphology::Definiteness v9 = *((unsigned char *)morphology.customPronouns._rawValue + 20);
  retstr->pronoun = pronoun;
  *(_WORD *)&retstr->morphology.grammaticalGender.Foundation::Morphology::GrammaticalNumber value = v4;
  retstr->morphology.number.Foundation::Morphology::GrammaticalNumber value = v5;
  retstr->morphology.customPronouns._rawValue = v6;
  *(_DWORD *)&retstr->morphology.grammaticalCase.Foundation::Morphology::GrammaticalNumber value = *(_DWORD *)(*(void *)&morphology.grammaticalGender.value
                                                                   + 16);
  retstr->morphology.definiteness.Foundation::Morphology::GrammaticalNumber value = v7;
  *(_OWORD *)&retstr->dependentMorphology.value.grammaticalGender.Foundation::Morphology::GrammaticalNumber value = *(_OWORD *)morphology.customPronouns._rawValue;
  retstr->dependentMorphology.value.definiteness.Foundation::Morphology::GrammaticalNumber value = v9;
  *(_DWORD *)&retstr->dependentMorphology.value.grammaticalCase.Foundation::Morphology::GrammaticalNumber value = v8;
}

uint64_t Morphology.Pronoun.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(unsigned __int8 *)(v2 + 16);
  uint64_t v5 = *(unsigned __int8 *)(v2 + 17);
  uint64_t v6 = *(unsigned __int8 *)(v2 + 18);
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = *(unsigned __int8 *)(v2 + 32);
  uint64_t v9 = *(unsigned __int8 *)(v2 + 33);
  uint64_t v10 = *(unsigned __int8 *)(v2 + 34);
  int v13 = *(unsigned __int8 *)(v2 + 35);
  int v16 = *(unsigned __int8 *)(v2 + 36);
  uint64_t v17 = *(void *)(v2 + 40);
  uint64_t v12 = *(void *)(v2 + 48);
  uint64_t v14 = *(unsigned int *)(v2 + 56);
  uint64_t v15 = *(unsigned __int8 *)(v2 + 60);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v4 == 3)
  {
    Hasher._combine(_:)(0);
    if (v5 != 14) {
      goto LABEL_3;
    }
LABEL_6:
    Hasher._combine(_:)(0);
    if (v6 != 6) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v4 + 1);
  if (v5 == 14) {
    goto LABEL_6;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v5 + 1);
  if (v6 != 6)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6 + 1);
    goto LABEL_8;
  }
LABEL_7:
  Hasher._combine(_:)(0);
LABEL_8:
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v7);
  if (v8 == 14)
  {
    Hasher._combine(_:)(0);
    if (v9 != 3) {
      goto LABEL_10;
    }
LABEL_13:
    Hasher._combine(_:)(0);
    if (v10 != 3) {
      goto LABEL_11;
    }
    goto LABEL_14;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v8 + 1);
  if (v9 == 3) {
    goto LABEL_13;
  }
LABEL_10:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v9 + 1);
  if (v10 != 3)
  {
LABEL_11:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10 + 1);
    goto LABEL_15;
  }
LABEL_14:
  Hasher._combine(_:)(0);
LABEL_15:
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((v13 & 1) + 1);
  }
  if (v16 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((v16 & 1) + 1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Optional<A>.hash(into:)(a1, v17, v12, (v14 | (v15 << 32)) & 0xFFFFFFFFFFLL);

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Morphology.Pronoun.CodingKeys()
{
  unint64_t v1 = 0x6F6C6F6870726F6DLL;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000013;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6E756F6E6F7270;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Morphology.Pronoun.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Morphology.Pronoun.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Morphology.Pronoun.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Morphology.Pronoun.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Morphology.Pronoun.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Morphology.Pronoun.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v8 = *(unsigned __int8 *)(v1 + 16);
  int v23 = *(unsigned __int8 *)(v1 + 17);
  int v24 = v8;
  int v22 = *(unsigned __int8 *)(v1 + 18);
  uint64_t v21 = *(void *)(v1 + 24);
  v2.i32[0] = *(_DWORD *)(v1 + 32);
  int v25 = *(unsigned __int8 *)(v1 + 36);
  uint64_t v9 = *(void *)(v1 + 40);
  uint64_t v10 = *(void *)(v1 + 48);
  uint64_t v19 = *(unsigned __int8 *)(v1 + 60);
  uint64_t v20 = v9;
  uint64_t v11 = *(unsigned int *)(v1 + 56);
  uint64_t v17 = v10;
  uint64_t v18 = v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v28) = 0;
  uint64_t v12 = v26;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v12)
  {
    uint64_t v13 = v18;
    uint64_t v14 = v19;
    LOBYTE(v28) = v24;
    BYTE1(v28) = v23;
    BYTE2(v28) = v22;
    uint64_t v15 = v20;
    uint64_t v29 = v21;
    unsigned __int32 v30 = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
    char v31 = v25;
    char v27 = 1;
    lazy protocol witness table accessor for type Morphology and conformance Morphology();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v28 = v15;
    uint64_t v29 = v17;
    char v31 = (v13 | (unint64_t)(v14 << 32)) >> 32;
    unsigned __int32 v30 = v13;
    char v27 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int Morphology.Pronoun.hashValue.getter()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 16);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 17);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 18);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(unsigned __int8 *)(v0 + 32);
  uint64_t v6 = *(unsigned __int8 *)(v0 + 33);
  uint64_t v7 = *(unsigned __int8 *)(v0 + 34);
  int v10 = *(unsigned __int8 *)(v0 + 35);
  int v13 = *(unsigned __int8 *)(v0 + 36);
  uint64_t v14 = *(void *)(v0 + 40);
  uint64_t v9 = *(void *)(v0 + 48);
  uint64_t v12 = *(unsigned __int8 *)(v0 + 60);
  uint64_t v11 = *(unsigned int *)(v0 + 56);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 + 1);
  }
  if (v2 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 + 1);
  }
  if (v3 == 6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3 + 1);
  }
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v15, v4);
  if (v5 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 + 1);
  }
  if (v6 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6 + 1);
  }
  if (v7 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v7 + 1);
  }
  if (v10 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((v10 & 1) + 1);
  }
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((v13 & 1) + 1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Optional<A>.hash(into:)((uint64_t)v15, v14, v9, (v11 | (v12 << 32)) & 0xFFFFFFFFFFLL);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t Morphology.Pronoun.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Morphology.Pronoun.CodingKeys>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    LOBYTE(v27) = 0;
    uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v13 = v12;
    uint64_t v24 = v10;
    char v26 = 1;
    unint64_t v14 = lazy protocol witness table accessor for type Morphology and conformance Morphology();
    swift_bridgeObjectRetain();
    v25.i64[0] = v14;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v20 = BYTE1(v27);
    int v21 = v27;
    int v19 = BYTE2(v27);
    v3.i32[0] = v29;
    int v22 = v30;
    char v26 = 2;
    uint64_t v23 = v28;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int16x8_t v25 = (int16x8_t)vmovl_u8(v3);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v16 = v27;
    uint64_t v15 = v28;
    __int32 v17 = v29;
    unsigned __int8 v18 = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)a2 = v24;
    *(void *)(a2 + 8) = v13;
    *(unsigned char *)(a2 + 16) = v21;
    *(unsigned char *)(a2 + 17) = v20;
    *(unsigned char *)(a2 + 18) = v19;
    *(void *)(a2 + 24) = v23;
    *(_DWORD *)(a2 + 32) = vmovn_s16(v25).u32[0];
    *(unsigned char *)(a2 + 36) = v22;
    *(void *)(a2 + 40) = v16;
    *(void *)(a2 + 48) = v15;
    *(unsigned char *)(a2 + 60) = v18;
    *(_DWORD *)(a2 + 56) = v17;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Morphology.Pronoun()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 16);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 17);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 18);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(unsigned __int8 *)(v0 + 32);
  uint64_t v6 = *(unsigned __int8 *)(v0 + 33);
  uint64_t v7 = *(unsigned __int8 *)(v0 + 34);
  int v10 = *(unsigned __int8 *)(v0 + 35);
  int v13 = *(unsigned __int8 *)(v0 + 36);
  uint64_t v14 = *(void *)(v0 + 40);
  uint64_t v9 = *(void *)(v0 + 48);
  uint64_t v12 = *(unsigned __int8 *)(v0 + 60);
  uint64_t v11 = *(unsigned int *)(v0 + 56);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 + 1);
  }
  if (v2 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 + 1);
  }
  if (v3 == 6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3 + 1);
  }
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v15, v4);
  if (v5 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 + 1);
  }
  if (v6 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6 + 1);
  }
  if (v7 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v7 + 1);
  }
  if (v10 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((v10 & 1) + 1);
  }
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((v13 & 1) + 1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Optional<A>.hash(into:)((uint64_t)v15, v14, v9, (v11 | (v12 << 32)) & 0xFFFFFFFFFFLL);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.Pronoun@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Morphology.Pronoun.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology.Pronoun(void *a1)
{
  return Morphology.Pronoun.encode(to:)(a1);
}

BOOL Morphology.isUnspecified.getter()
{
  return *(unsigned char *)v0 == 3
      && *(unsigned char *)(v0 + 2) == 6
      && *(unsigned char *)(v0 + 1) == 14
      && *(void *)(*(void *)(v0 + 8) + 16) == 0;
}

void one-time initialization function for user()
{
  id v0 = objc_msgSend(self, sel_userMorphology);
  static Morphology._unconditionallyBridgeFromObjectiveC(_:)(v0, (uint64_t)&v1);

  static Morphology.user = v1;
  byte_1E8ED8BAA = v2;
  qword_1E8ED8BB0 = v3;
  dword_1E8ED8BB8 = v4;
  byte_1E8ED8BBC = v5;
}

void static Morphology._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = 6;
  if (a1)
  {
    id v4 = a1;
    unint64_t v5 = (unint64_t)objc_msgSend(v4, sel_grammaticalGender);
    if (v5 >= 4) {
      char v6 = 3;
    }
    else {
      char v6 = 0x2010003u >> (8 * v5);
    }
    id v7 = objc_msgSend(v4, sel_number);
    if ((unint64_t)v7 >= 7) {
      char v3 = 6;
    }
    else {
      char v3 = 0x5040302010006uLL >> (8 * v7);
    }
    Morphology.PartOfSpeech.init(rawValue:)((Swift::Int)objc_msgSend(v4, sel_partOfSpeech));
    char v8 = v18;
    Morphology.PartOfSpeech.init(rawValue:)((Swift::Int)objc_msgSend(v4, sel_grammaticalCase));
    char v9 = v17;
    id v10 = objc_msgSend(v4, sel_determination);
    if (v10 == (id)2) {
      char v11 = 1;
    }
    else {
      char v11 = 2;
    }
    if (v10 == (id)1) {
      char v12 = 0;
    }
    else {
      char v12 = v11;
    }
    unint64_t v13 = (unint64_t)objc_msgSend(v4, sel_pronounType);
    if (v13 >= 4) {
      char v14 = 3;
    }
    else {
      char v14 = 0x2010003u >> (8 * v13);
    }
    id v15 = objc_msgSend(v4, sel_definiteness);

    if (v15 == (id)2) {
      char v16 = 1;
    }
    else {
      char v16 = 2;
    }
    if (v15 == (id)1) {
      char v16 = 0;
    }
  }
  else
  {
    char v9 = 14;
    char v16 = 2;
    char v12 = 2;
    char v14 = 3;
    char v8 = 14;
    char v6 = 3;
  }
  *(unsigned char *)a2 = v6;
  *(unsigned char *)(a2 + 1) = v8;
  *(unsigned char *)(a2 + 2) = v3;
  *(void *)(a2 + 8) = MEMORY[0x1E4FBC868];
  *(unsigned char *)(a2 + 16) = v9;
  *(unsigned char *)(a2 + 17) = 3;
  *(unsigned char *)(a2 + 18) = v14;
  *(unsigned char *)(a2 + 19) = v12;
  *(unsigned char *)(a2 + 20) = v16;
}

uint64_t static Morphology.user.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for user != -1) {
    swift_once();
  }
  char v2 = byte_1E8ED8BAA;
  uint64_t v3 = qword_1E8ED8BB0;
  char v4 = byte_1E8ED8BBC;
  *(_WORD *)a1 = static Morphology.user;
  *(unsigned char *)(a1 + 2) = v2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = dword_1E8ED8BB8;
  *(unsigned char *)(a1 + 20) = v4;

  return swift_bridgeObjectRetain();
}

void __swiftcall NSMorphologyCustomPronoun.init(_:)(NSMorphologyCustomPronoun *__return_ptr retstr, Foundation::Morphology::_CustomPronoun *a2)
{
  id v3 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  outlined init with take of String?((uint64_t)a2, (uint64_t)v14);
  outlined init with take of String?((uint64_t)v14, (uint64_t)v15);
  if (v15[1]) {
    char v4 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    char v4 = 0;
  }
  id v5 = v3;
  objc_msgSend(v5, sel_setSubjectForm_, v4);

  outlined init with take of String?((uint64_t)&a2->objectForm, (uint64_t)v13);
  outlined init with take of String?((uint64_t)v13, (uint64_t)v16);
  if (v16[1]) {
    char v6 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    char v6 = 0;
  }
  objc_msgSend(v5, sel_setObjectForm_, v6);

  outlined init with take of String?((uint64_t)&a2->possessiveForm, (uint64_t)v12);
  outlined init with take of String?((uint64_t)v12, (uint64_t)v17);
  if (v17[1]) {
    id v7 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    id v7 = 0;
  }
  objc_msgSend(v5, sel_setPossessiveForm_, v7);

  outlined init with take of String?((uint64_t)&a2->possessiveAdjectiveForm, (uint64_t)v11);
  outlined init with take of String?((uint64_t)v11, (uint64_t)v18);
  if (v18[1]) {
    char v8 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    char v8 = 0;
  }
  objc_msgSend(v5, sel_setPossessiveAdjectiveForm_, v8);

  outlined init with take of String?((uint64_t)&a2->reflexiveForm, (uint64_t)v10);
  outlined init with take of String?((uint64_t)v10, (uint64_t)v19);
  if (v19[1]) {
    char v9 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    char v9 = 0;
  }
  outlined release of Morphology._CustomPronoun((uint64_t)a2);
  objc_msgSend(v5, sel_setReflexiveForm_, v9);
}

Foundation::Morphology __swiftcall Morphology.init(_:)(NSMorphology_optional *a1)
{
  uint64_t v2 = v1;
  char v3 = 6;
  if (a1)
  {
    unint64_t v5 = (unint64_t)[(NSMorphology_optional *)a1 grammaticalGender];
    if (v5 >= 4) {
      char v6 = 3;
    }
    else {
      char v6 = 0x2010003u >> (8 * v5);
    }
    id v7 = [(NSMorphology_optional *)a1 number];
    if ((unint64_t)v7 >= 7) {
      char v3 = 6;
    }
    else {
      char v3 = 0x5040302010006uLL >> (8 * v7);
    }
    Morphology.PartOfSpeech.init(rawValue:)((Swift::Int)[(NSMorphology_optional *)a1 partOfSpeech]);
    char v8 = v20;
    Morphology.PartOfSpeech.init(rawValue:)((Swift::Int)[(NSMorphology_optional *)a1 grammaticalCase]);
    char v9 = v19;
    id v10 = [(NSMorphology_optional *)a1 determination];
    if (v10 == (id)2) {
      char v11 = 1;
    }
    else {
      char v11 = 2;
    }
    if (v10 == (id)1) {
      char v12 = 0;
    }
    else {
      char v12 = v11;
    }
    unint64_t v13 = (unint64_t)[(NSMorphology_optional *)a1 pronounType];
    if (v13 >= 4) {
      char v14 = 3;
    }
    else {
      char v14 = 0x2010003u >> (8 * v13);
    }
    id v15 = [(NSMorphology_optional *)a1 definiteness];

    if (v15 == (id)2) {
      char v18 = 1;
    }
    else {
      char v18 = 2;
    }
    if (v15 == (id)1) {
      char v18 = 0;
    }
  }
  else
  {
    char v9 = 14;
    char v18 = 2;
    char v12 = 2;
    char v14 = 3;
    char v8 = 14;
    char v6 = 3;
  }
  *(unsigned char *)uint64_t v2 = v6;
  *(unsigned char *)(v2 + 1) = v8;
  *(unsigned char *)(v2 + 2) = v3;
  *(void *)(v2 + 8) = MEMORY[0x1E4FBC868];
  *(unsigned char *)(v2 + 16) = v9;
  *(unsigned char *)(v2 + 17) = 3;
  *(unsigned char *)(v2 + 18) = v14;
  *(unsigned char *)(v2 + 19) = v12;
  *(unsigned char *)(v2 + 20) = v18;
  result.grammaticalCase = (Foundation::Morphology::GrammaticalCase_optional)v17;
  result.grammaticalPerson = (Foundation::Morphology::GrammaticalPerson_optional)SBYTE1(v17);
  result.pronounType = (Foundation::Morphology::PronounType_optional)SBYTE2(v17);
  result.determination = (Foundation::Morphology::Determination_optional)SBYTE3(v17);
  result.definiteness = (Foundation::Morphology::Definiteness_optional)SBYTE4(v17);
  result.customPronouns._rawValue = v16;
  result.grammaticalGender = (Foundation::Morphology::GrammaticalGender_optional)a1;
  result.partOfSpeech = (Foundation::Morphology::PartOfSpeech_optional)SBYTE1(a1);
  result.number = (Foundation::Morphology::GrammaticalNumber_optional)SBYTE2(a1);
  *(_DWORD *)result.gap3 = *(_DWORD *)((char *)&a1 + 3);
  result.gap3[4] = HIBYTE(a1);
  return result;
}

void __swiftcall NSMorphology.init(_:)(NSMorphology *__return_ptr retstr, Foundation::Morphology a2)
{
  uint64_t v2 = **(unsigned __int8 **)&a2.grammaticalGender.value;
  uint64_t v3 = *(unsigned __int8 *)(*(void *)&a2.grammaticalGender.value + 1);
  uint64_t v4 = *(unsigned __int8 *)(*(void *)&a2.grammaticalGender.value + 2);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)&a2.grammaticalGender.value + 16);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)&a2.grammaticalGender.value + 18);
  int v7 = *(unsigned __int8 *)(*(void *)&a2.grammaticalGender.value + 19);
  int v8 = *(unsigned __int8 *)(*(void *)&a2.grammaticalGender.value + 20);
  id v9 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  id v10 = v9;
  if (v2 != 3)
  {
    objc_msgSend(v9, sel_setGrammaticalGender_, v2 + 1);
    if (v4 == 6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  id v11 = v9;
  if (v4 != 6) {
LABEL_5:
  }
    objc_msgSend(v10, sel_setNumber_, v4 + 1);
LABEL_6:
  if (v3 == 14)
  {
    if (v5 == 14) {
      goto LABEL_8;
    }
  }
  else
  {
    objc_msgSend(v10, sel_setPartOfSpeech_, v3 + 1);
    if (v5 == 14)
    {
LABEL_8:
      if (v7 == 2) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }
  objc_msgSend(v10, sel_setGrammaticalCase_, v5 + 1);
  if (v7 == 2)
  {
LABEL_9:
    if (v6 == 3) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_19:
  objc_msgSend(v10, sel_setDetermination_, (v7 & 1) + 1);
  if (v6 != 3) {
LABEL_10:
  }
    objc_msgSend(v10, sel_setPronounType_, v6 + 1);
LABEL_11:
  swift_bridgeObjectRelease();
  if (v8 != 2)
  {
    if (v8) {
      uint64_t v12 = 2;
    }
    else {
      uint64_t v12 = 1;
    }
    objc_msgSend(v10, sel_setDefiniteness_, v12);
  }
}

void __swiftcall Morphology._bridgeToObjectiveC()(NSMorphology *__return_ptr retstr)
{
  __int16 v2 = *v1;
  char v3 = *((unsigned char *)v1 + 2);
  uint64_t v4 = *((void *)v1 + 1);
  char v5 = *((unsigned char *)v1 + 20);
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSMorphology);
  __int16 v7 = v2;
  char v8 = v3;
  uint64_t v9 = v4;
  int v10 = *((_DWORD *)v1 + 4);
  char v11 = v5;
  swift_bridgeObjectRetain();
  *(void *)&v12.grammaticalGender.Foundation::Morphology::GrammaticalNumber value = &v7;
  NSMorphology.init(_:)(v6, v12);
}

void __swiftcall Morphology.CustomPronoun._bridgeToObjectiveC()(NSMorphologyCustomPronoun *__return_ptr retstr)
{
  Swift::String_optional v2 = v1[3];
  v5.possessiveForm = v1[2];
  v5.possessiveAdjectiveForm = v2;
  v5.reflexiveForm = v1[4];
  Swift::String_optional v3 = v1[1];
  v5.subjectForm = *v1;
  v5.objectForm = v3;
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSMorphologyCustomPronoun);
  outlined retain of Morphology._CustomPronoun((uint64_t)&v5);
  NSMorphologyCustomPronoun.init(_:)(v4, &v5);
}

void static Morphology.CustomPronoun._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v28 = a2[8];
  uint64_t v29 = a2[9];
  outlined consume of Morphology.CustomPronoun?(*a2, a2[1]);
  id v4 = a1;
  id v5 = objc_msgSend(v4, sel_subjectForm, v28, v29);
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    uint64_t v31 = v8;
    uint64_t v32 = (uint64_t)v7;
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v32 = 0;
  }
  id v9 = objc_msgSend(v4, sel_objectForm);
  if (v9)
  {
    int v10 = v9;
    id v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v12 = v11;
  }
  else
  {
    id v30 = 0;
    uint64_t v12 = 0;
  }
  id v13 = objc_msgSend(v4, sel_possessiveForm);
  if (v13)
  {
    char v14 = v13;
    id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    uint64_t v17 = v16;
  }
  else
  {
    id v15 = 0;
    uint64_t v17 = 0;
  }
  id v18 = objc_msgSend(v4, sel_possessiveAdjectiveForm);
  if (v18)
  {
    char v19 = v18;
    id v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    uint64_t v22 = v21;
  }
  else
  {
    id v20 = 0;
    uint64_t v22 = 0;
  }
  id v23 = objc_msgSend(v4, sel_reflexiveForm);
  if (v23)
  {
    uint64_t v24 = v23;
    id v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    uint64_t v27 = v26;
  }
  else
  {

    id v25 = 0;
    uint64_t v27 = 0;
  }
  *a2 = v32;
  a2[1] = v31;
  a2[2] = (uint64_t)v30;
  a2[3] = v12;
  a2[4] = (uint64_t)v15;
  a2[5] = v17;
  a2[6] = (uint64_t)v20;
  a2[7] = v22;
  a2[8] = (uint64_t)v25;
  a2[9] = v27;
}

uint64_t static Morphology.CustomPronoun._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v29 = a2[8];
  uint64_t v30 = a2[9];
  outlined consume of Morphology.CustomPronoun?(*a2, a2[1]);
  id v4 = a1;
  id v5 = objc_msgSend(v4, sel_subjectForm, v29, v30);
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    uint64_t v32 = v8;
    uint64_t v33 = (uint64_t)v7;
  }
  else
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
  }
  id v9 = objc_msgSend(v4, sel_objectForm);
  if (v9)
  {
    int v10 = v9;
    id v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v12 = v11;
  }
  else
  {
    id v31 = 0;
    uint64_t v12 = 0;
  }
  id v13 = objc_msgSend(v4, sel_possessiveForm);
  if (v13)
  {
    char v14 = v13;
    id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    uint64_t v17 = v16;
  }
  else
  {
    id v15 = 0;
    uint64_t v17 = 0;
  }
  id v18 = objc_msgSend(v4, sel_possessiveAdjectiveForm);
  if (v18)
  {
    char v19 = v18;
    id v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    uint64_t v22 = v21;
  }
  else
  {
    id v20 = 0;
    uint64_t v22 = 0;
  }
  id v23 = objc_msgSend(v4, sel_reflexiveForm);
  if (v23)
  {
    uint64_t v24 = v23;
    id v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    uint64_t v27 = v26;
  }
  else
  {

    id v25 = 0;
    uint64_t v27 = 0;
  }
  *a2 = v33;
  a2[1] = v32;
  a2[2] = (uint64_t)v31;
  a2[3] = v12;
  a2[4] = (uint64_t)v15;
  a2[5] = v17;
  a2[6] = (uint64_t)v20;
  a2[7] = v22;
  a2[8] = (uint64_t)v25;
  a2[9] = v27;
  return 1;
}

double static Morphology.CustomPronoun._unconditionallyBridgeFromObjectiveC(_:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id v4 = a1;
  specialized Morphology._CustomPronoun.init(_:)(a1, v8);
  long long v5 = v8[1];
  *a2 = v8[0];
  a2[1] = v5;
  long long v6 = v8[3];
  a2[2] = v8[2];
  a2[3] = v6;
  double result = *(double *)&v9;
  a2[4] = v9;
  return result;
}

void protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Morphology.CustomPronoun()
{
  Swift::String_optional v1 = v0[3];
  v4.possessiveForm = v0[2];
  v4.possessiveAdjectiveForm = v1;
  v4.reflexiveForm = v0[4];
  Swift::String_optional v2 = v0[1];
  v4.subjectForm = *v0;
  v4.objectForm = v2;
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSMorphologyCustomPronoun);
  outlined retain of Morphology._CustomPronoun((uint64_t)&v4);
  NSMorphologyCustomPronoun.init(_:)(v3, &v4);
}

double protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Morphology.CustomPronoun@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id v4 = a1;
  specialized Morphology._CustomPronoun.init(_:)(a1, v8);
  long long v5 = v8[1];
  *a2 = v8[0];
  a2[1] = v5;
  long long v6 = v8[3];
  a2[2] = v8[2];
  a2[3] = v6;
  double result = *(double *)&v9;
  a2[4] = v9;
  return result;
}

double protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance Morphology.CustomPronoun(void *a1, uint64_t a2)
{
  outlined consume of Morphology.CustomPronoun?(*(void *)a2, *(void *)(a2 + 8));
  id v4 = a1;
  specialized Morphology._CustomPronoun.init(_:)(a1, v8);
  long long v5 = v8[1];
  *(_OWORD *)a2 = v8[0];
  *(_OWORD *)(a2 + 16) = v5;
  long long v6 = v8[3];
  *(_OWORD *)(a2 + 32) = v8[2];
  *(_OWORD *)(a2 + 48) = v6;
  double result = *(double *)&v9;
  *(_OWORD *)(a2 + 64) = v9;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Morphology.CustomPronoun(void *a1, uint64_t a2)
{
  outlined consume of Morphology.CustomPronoun?(*(void *)a2, *(void *)(a2 + 8));
  id v4 = a1;
  specialized Morphology._CustomPronoun.init(_:)(a1, v8);
  long long v5 = v8[1];
  *(_OWORD *)a2 = v8[0];
  *(_OWORD *)(a2 + 16) = v5;
  long long v6 = v8[3];
  *(_OWORD *)(a2 + 32) = v8[2];
  *(_OWORD *)(a2 + 48) = v6;
  *(_OWORD *)(a2 + 64) = v8[4];
  return 1;
}

__n128 protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Morphology._CustomPronoun@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = a1;
  specialized Morphology._CustomPronoun.init(_:)(a1, v7);
  long long v5 = v7[3];
  *(_OWORD *)(a2 + 32) = v7[2];
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v7[4];
  __n128 result = (__n128)v7[1];
  *(_OWORD *)a2 = v7[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

NSMorphologyPronoun __swiftcall Morphology.Pronoun._bridgeToObjectiveC()()
{
  uint64_t v2 = *(void *)v0;
  Swift::String_optional v1 = *(void **)(v0 + 8);
  __int16 v3 = *(_WORD *)(v0 + 16);
  Foundation::Morphology::GrammaticalNumber v4 = *(unsigned char *)(v0 + 18);
  long long v5 = *(void **)(v0 + 24);
  Foundation::Morphology::Definiteness v6 = *(unsigned char *)(v0 + 36);
  uint64_t v8 = *(void *)(v0 + 40);
  id v7 = *(void **)(v0 + 48);
  int v10 = *(_DWORD *)(v0 + 56);
  Foundation::Morphology::Definiteness v9 = *(unsigned char *)(v0 + 60);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
  v11.pronoun._uint64_t countAndFlagsBits = v2;
  v11.pronoun._object = v1;
  *(_WORD *)&v11.morphology.grammaticalGender.Foundation::Morphology::GrammaticalNumber value = v3;
  v11.morphology.number.Foundation::Morphology::GrammaticalNumber value = v4;
  v11.morphology.customPronouns._rawValue = v5;
  *(_DWORD *)&v11.morphology.grammaticalCase.Foundation::Morphology::GrammaticalNumber value = *(_DWORD *)(v0 + 32);
  v11.morphology.definiteness.Foundation::Morphology::GrammaticalNumber value = v6;
  *(void *)&v11.dependentMorphology.value.grammaticalGender.Foundation::Morphology::GrammaticalNumber value = v8;
  v11.dependentMorphology.value.customPronouns._rawValue = v7;
  v11.dependentMorphology.value.definiteness.Foundation::Morphology::GrammaticalNumber value = v9;
  *(_DWORD *)&v11.dependentMorphology.value.grammaticalCase.Foundation::Morphology::GrammaticalNumber value = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return NSMorphologyPronoun.init(_:)(&v11);
}

double static Morphology.Pronoun._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  outlined consume of Morphology.Pronoun?(*(void *)a2, *(void *)(a2 + 8));
  v12.super.Class isa = (Class)a1;
  Morphology.Pronoun.init(_:)(&v11, v12);
  object = v11.pronoun._object;
  rawValue = v11.morphology.customPronouns._rawValue;
  int v6 = *(_DWORD *)&v11.dependentMorphology.value.grammaticalCase.value;
  Foundation::Morphology::Definiteness value = v11.dependentMorphology.value.definiteness.value;
  unint64_t v8 = *(unsigned __int16 *)&v11.morphology.grammaticalGender.value | ((unint64_t)v11.morphology.number.value << 16);
  unint64_t v9 = *(unsigned int *)&v11.morphology.grammaticalCase.value | ((unint64_t)v11.morphology.definiteness.value << 32);
  *(void *)a2 = v11.pronoun._countAndFlagsBits;
  *(void *)(a2 + 8) = object;
  *(void *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = rawValue;
  *(void *)(a2 + 32) = v9;
  double result = *(double *)&v11.dependentMorphology.value.grammaticalGender.value;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)&v11.dependentMorphology.value.grammaticalGender.value;
  *(unsigned char *)(a2 + 60) = value;
  *(_DWORD *)(a2 + 56) = v6;
  return result;
}

uint64_t static Morphology.Pronoun._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  outlined consume of Morphology.Pronoun?(*(void *)a2, *(void *)(a2 + 8));
  v12.super.Class isa = (Class)a1;
  Morphology.Pronoun.init(_:)(&v11, v12);
  object = v11.pronoun._object;
  rawValue = v11.morphology.customPronouns._rawValue;
  int v6 = *(_DWORD *)&v11.dependentMorphology.value.grammaticalCase.value;
  Foundation::Morphology::Definiteness value = v11.dependentMorphology.value.definiteness.value;
  unint64_t v8 = *(unsigned __int16 *)&v11.morphology.grammaticalGender.value | ((unint64_t)v11.morphology.number.value << 16);
  unint64_t v9 = *(unsigned int *)&v11.morphology.grammaticalCase.value | ((unint64_t)v11.morphology.definiteness.value << 32);
  *(void *)a2 = v11.pronoun._countAndFlagsBits;
  *(void *)(a2 + 8) = object;
  *(void *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = rawValue;
  *(void *)(a2 + 32) = v9;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)&v11.dependentMorphology.value.grammaticalGender.value;
  *(unsigned char *)(a2 + 60) = value;
  *(_DWORD *)(a2 + 56) = v6;
  return 1;
}

void static Morphology.Pronoun._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, Foundation::Morphology::Pronoun *a2@<X8>)
{
  if (a1)
  {
    v3.super.Class isa = (Class)a1;
    Morphology.Pronoun.init(_:)(a2, v3);
  }
  else
  {
    __break(1u);
  }
}

unint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Morphology.Pronoun()
{
  uint64_t v2 = *(void *)v0;
  Swift::String_optional v1 = *(void **)(v0 + 8);
  __int16 v3 = *(_WORD *)(v0 + 16);
  Foundation::Morphology::GrammaticalNumber v4 = *(unsigned char *)(v0 + 18);
  long long v5 = *(void **)(v0 + 24);
  Foundation::Morphology::Definiteness v6 = *(unsigned char *)(v0 + 36);
  uint64_t v8 = *(void *)(v0 + 40);
  id v7 = *(void **)(v0 + 48);
  int v11 = *(_DWORD *)(v0 + 56);
  Foundation::Morphology::Definiteness v9 = *(unsigned char *)(v0 + 60);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
  v12.pronoun._uint64_t countAndFlagsBits = v2;
  v12.pronoun._object = v1;
  *(_WORD *)&v12.morphology.grammaticalGender.Foundation::Morphology::Definiteness value = v3;
  v12.morphology.number.Foundation::Morphology::Definiteness value = v4;
  v12.morphology.customPronouns._rawValue = v5;
  *(_DWORD *)&v12.morphology.grammaticalCase.Foundation::Morphology::Definiteness value = *(_DWORD *)(v0 + 32);
  v12.morphology.definiteness.Foundation::Morphology::Definiteness value = v6;
  *(void *)&v12.dependentMorphology.value.grammaticalGender.Foundation::Morphology::Definiteness value = v8;
  v12.dependentMorphology.value.customPronouns._rawValue = v7;
  v12.dependentMorphology.value.definiteness.Foundation::Morphology::Definiteness value = v9;
  *(_DWORD *)&v12.dependentMorphology.value.grammaticalCase.Foundation::Morphology::Definiteness value = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return (unint64_t)NSMorphologyPronoun.init(_:)(&v12);
}

double protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance Morphology.Pronoun(void *a1, uint64_t a2)
{
  outlined consume of Morphology.Pronoun?(*(void *)a2, *(void *)(a2 + 8));
  v12.super.Class isa = (Class)a1;
  Morphology.Pronoun.init(_:)(&v11, v12);
  object = v11.pronoun._object;
  rawValue = v11.morphology.customPronouns._rawValue;
  int v6 = *(_DWORD *)&v11.dependentMorphology.value.grammaticalCase.value;
  Foundation::Morphology::Definiteness value = v11.dependentMorphology.value.definiteness.value;
  unint64_t v8 = *(unsigned __int16 *)&v11.morphology.grammaticalGender.value | ((unint64_t)v11.morphology.number.value << 16);
  unint64_t v9 = *(unsigned int *)&v11.morphology.grammaticalCase.value | ((unint64_t)v11.morphology.definiteness.value << 32);
  *(void *)a2 = v11.pronoun._countAndFlagsBits;
  *(void *)(a2 + 8) = object;
  *(void *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = rawValue;
  *(void *)(a2 + 32) = v9;
  double result = *(double *)&v11.dependentMorphology.value.grammaticalGender.value;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)&v11.dependentMorphology.value.grammaticalGender.value;
  *(unsigned char *)(a2 + 60) = value;
  *(_DWORD *)(a2 + 56) = v6;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Morphology.Pronoun(void *a1, uint64_t a2)
{
  outlined consume of Morphology.Pronoun?(*(void *)a2, *(void *)(a2 + 8));
  v12.super.Class isa = (Class)a1;
  Morphology.Pronoun.init(_:)(&v11, v12);
  object = v11.pronoun._object;
  rawValue = v11.morphology.customPronouns._rawValue;
  int v6 = *(_DWORD *)&v11.dependentMorphology.value.grammaticalCase.value;
  Foundation::Morphology::Definiteness value = v11.dependentMorphology.value.definiteness.value;
  unint64_t v8 = *(unsigned __int16 *)&v11.morphology.grammaticalGender.value | ((unint64_t)v11.morphology.number.value << 16);
  unint64_t v9 = *(unsigned int *)&v11.morphology.grammaticalCase.value | ((unint64_t)v11.morphology.definiteness.value << 32);
  *(void *)a2 = v11.pronoun._countAndFlagsBits;
  *(void *)(a2 + 8) = object;
  *(void *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = rawValue;
  *(void *)(a2 + 32) = v9;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)&v11.dependentMorphology.value.grammaticalGender.value;
  *(unsigned char *)(a2 + 60) = value;
  *(_DWORD *)(a2 + 56) = v6;
  return 1;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Morphology.Pronoun(void *a1@<X0>, Foundation::Morphology::Pronoun *a2@<X8>)
{
  if (a1)
  {
    v3.super.Class isa = (Class)a1;
    Morphology.Pronoun.init(_:)(a2, v3);
  }
  else
  {
    __break(1u);
  }
}

NSInflectionRule __swiftcall InflectionRule._bridgeToObjectiveC()()
{
  uint64_t v1 = v0[1];
  if (v1)
  {
    uint64_t v2 = *((unsigned int *)v0 + 4);
    unint64_t v3 = v2 | ((unint64_t)*((unsigned __int8 *)v0 + 20) << 32);
    unint64_t v4 = *v0;
    unint64_t v5 = (unint64_t)*v0 >> 8;
    unint64_t v6 = (unint64_t)*v0 >> 16;
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSMorphology);
    v16[0] = v4;
    v16[1] = v5;
    void v16[2] = v6;
    uint64_t v17 = v1;
    char v18 = v2;
    v7.i64[0] = 0xFFFFFFFFFFLL;
    v7.i64[1] = 0xFFFFFFFFFFLL;
    uint64x2_t v8 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v3), v7);
    int16x8_t v9 = (int16x8_t)vshlq_u64(v8, (uint64x2_t)xmmword_182108550);
    *(int32x2_t *)v8.i8 = vmovn_s64((int64x2_t)vshlq_u64(v8, (uint64x2_t)xmmword_182108540));
    *(int32x2_t *)v9.i8 = vmovn_s64((int64x2_t)v9);
    v9.i16[1] = v9.i16[2];
    v9.i16[2] = v8.i16[0];
    v9.i16[3] = v8.i16[2];
    unsigned __int32 v19 = vmovn_s16(v9).u32[0];
    swift_bridgeObjectRetain();
    *(void *)&v21.grammaticalGender.Foundation::Morphology::Definiteness value = v16;
    NSMorphology.init(_:)(v10, v21);
    NSMorphologyPronoun v12 = v11;
    id v13 = objc_msgSend(objc_allocWithZone((Class)NSInflectionRuleExplicit), sel_initWithMorphology_, v11);

    return (NSInflectionRule)v13;
  }
  else
  {
    id v15 = objc_msgSend(self, sel_automaticRule);
    return (NSInflectionRule)v15;
  }
}

void static InflectionRule._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = self;
  id v5 = a1;
  id v6 = objc_msgSend(v4, sel_automaticRule);
  int8x16_t v7 = v6;
  if (!a1)
  {

    goto LABEL_8;
  }
  if (v6)
  {
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSInflectionRule);
    id v8 = v5;
    char v9 = static NSObject.== infix(_:_:)();

    if (v9)
    {

LABEL_8:
      unint64_t v15 = 0;
      uint64_t v14 = 0;
      unint64_t v16 = 0;
      goto LABEL_9;
    }
  }
  self;
  uint64_t v10 = swift_dynamicCastObjCClass();
  if (v10)
  {
    Foundation::Morphology::Pronoun v11 = (void *)v10;
    id v12 = v5;
    id v13 = objc_msgSend(v11, sel_morphology);
    static Morphology._unconditionallyBridgeFromObjectiveC(_:)(v13, (uint64_t)&v18);

    uint64_t v14 = v20;
    unint64_t v15 = v18 | ((unint64_t)v19 << 16);
    unint64_t v16 = v21 | ((unint64_t)v22 << 32);
LABEL_9:
    *(void *)a2 = v15;
    *(void *)(a2 + 8) = v14;
    *(_DWORD *)(a2 + 16) = v16;
    *(unsigned char *)(a2 + 20) = BYTE4(v16);
    return;
  }
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSInflectionRule?);
  v17._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance InflectionRule()
{
  uint64_t v1 = v0[1];
  if (v1)
  {
    uint64_t v2 = *((unsigned int *)v0 + 4);
    unint64_t v3 = v2 | ((unint64_t)*((unsigned __int8 *)v0 + 20) << 32);
    unint64_t v4 = *v0;
    unint64_t v5 = (unint64_t)*v0 >> 8;
    unint64_t v6 = (unint64_t)*v0 >> 16;
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSMorphology);
    v16[0] = v4;
    v16[1] = v5;
    void v16[2] = v6;
    uint64_t v17 = v1;
    char v18 = v2;
    v7.i64[0] = 0xFFFFFFFFFFLL;
    v7.i64[1] = 0xFFFFFFFFFFLL;
    uint64x2_t v8 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v3), v7);
    int16x8_t v9 = (int16x8_t)vshlq_u64(v8, (uint64x2_t)xmmword_182108550);
    *(int32x2_t *)v8.i8 = vmovn_s64((int64x2_t)vshlq_u64(v8, (uint64x2_t)xmmword_182108540));
    *(int32x2_t *)v9.i8 = vmovn_s64((int64x2_t)v9);
    v9.i16[1] = v9.i16[2];
    v9.i16[2] = v8.i16[0];
    v9.i16[3] = v8.i16[2];
    unsigned __int32 v19 = vmovn_s16(v9).u32[0];
    swift_bridgeObjectRetain();
    *(void *)&v21.grammaticalGender.Foundation::Morphology::Definiteness value = v16;
    NSMorphology.init(_:)(v10, v21);
    id v12 = v11;
    id v13 = objc_msgSend(objc_allocWithZone((Class)NSInflectionRuleExplicit), sel_initWithMorphology_, v11);

    return v13;
  }
  else
  {
    id v15 = objc_msgSend(self, sel_automaticRule);
    return v15;
  }
}

unint64_t static Morphology._forceBridgeFromObjectiveC(_:result:)(NSMorphology_optional *a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  unint64_t v4 = a1;
  unint64_t result = (unint64_t)Morphology.init(_:)(a1);
  *(void *)a2 = v6 | ((unint64_t)v7 << 16);
  *(void *)(a2 + 8) = v8;
  *(unsigned char *)(a2 + 20) = v10;
  *(_DWORD *)(a2 + 16) = v9;
  return result;
}

void protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Morphology()
{
  __int16 v1 = *v0;
  char v2 = *((unsigned char *)v0 + 2);
  uint64_t v3 = *((void *)v0 + 1);
  char v4 = *((unsigned char *)v0 + 20);
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSMorphology);
  __int16 v6 = v1;
  char v7 = v2;
  uint64_t v8 = v3;
  int v9 = *((_DWORD *)v0 + 4);
  char v10 = v4;
  swift_bridgeObjectRetain();
  *(void *)&v11.grammaticalGender.Foundation::Morphology::Definiteness value = &v6;
  NSMorphology.init(_:)(v5, v11);
}

unint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance Morphology(NSMorphology_optional *a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  char v4 = a1;
  unint64_t result = (unint64_t)Morphology.init(_:)(a1);
  *(void *)a2 = v6 | ((unint64_t)v7 << 16);
  *(void *)(a2 + 8) = v8;
  *(unsigned char *)(a2 + 20) = v10;
  *(_DWORD *)(a2 + 16) = v9;
  return result;
}

uint64_t specialized static Morphology._CustomPronoun.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a2[1];
  if (!v4)
  {
    if (v5) {
      return 0;
    }
    goto LABEL_10;
  }
  if (!v5) {
    return 0;
  }
  BOOL v6 = *a1 == *a2 && v4 == v5;
  if (v6 || (char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v7 & 1) != 0))
  {
LABEL_10:
    uint64_t v9 = a1[3];
    uint64_t v10 = a2[3];
    if (v9)
    {
      if (!v10) {
        return 0;
      }
      if (a1[2] != a2[2] || v9 != v10)
      {
        char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0;
        if ((v11 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v10)
    {
      return 0;
    }
    uint64_t v12 = a1[5];
    uint64_t v13 = a2[5];
    if (v12)
    {
      if (!v13) {
        return 0;
      }
      if (a1[4] != a2[4] || v12 != v13)
      {
        char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0;
        if ((v14 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v13)
    {
      return 0;
    }
    uint64_t v15 = a1[7];
    uint64_t v16 = a2[7];
    if (v15)
    {
      if (!v16) {
        return 0;
      }
      if (a1[6] != a2[6] || v15 != v16)
      {
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0;
        if ((v17 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v16)
    {
      return 0;
    }
    uint64_t v18 = a1[9];
    uint64_t v19 = a2[9];
    if (v18)
    {
      if (v19 && (a1[8] == a2[8] && v18 == v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
        return 1;
      }
    }
    else if (!v19)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t specialized static Morphology.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v3 = *a1;
  int v4 = a1[1];
  int v5 = a1[2];
  uint64_t v6 = *((void *)a1 + 1);
  int v7 = a1[16];
  int v8 = a1[17];
  int v9 = a1[18];
  int v10 = a1[19];
  int v11 = a1[20];
  int v12 = *a2;
  int v13 = a2[1];
  int v14 = a2[2];
  uint64_t v15 = *((void *)a2 + 1);
  int v16 = a2[16];
  int v17 = a2[17];
  int v18 = a2[18];
  int v19 = a2[19];
  int v20 = a2[20];
  if (v3 == 3)
  {
    if (v12 != 3) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    if (v12 == 3 || v3 != v12) {
      return result;
    }
  }
  if (v4 == 14)
  {
    if (v13 != 14) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    if (v13 == 14 || v4 != v13) {
      return result;
    }
  }
  if (v5 == 6)
  {
    if (v14 != 6) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    if (v14 == 6 || v5 != v14) {
      return result;
    }
  }
  if ((specialized static Dictionary<>.== infix(_:_:)(v6, v15) & 1) == 0) {
    return 0;
  }
  if (v7 == 14)
  {
    if (v16 != 14) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    if (v16 == 14 || v7 != v16) {
      return result;
    }
  }
  if (v8 == 3)
  {
    if (v17 != 3) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    if (v17 == 3 || v8 != v17) {
      return result;
    }
  }
  if (v9 == 3)
  {
    if (v18 != 3) {
      return 0;
    }
LABEL_32:
    if (v10 == 2)
    {
      if (v19 != 2) {
        return 0;
      }
    }
    else if (v19 == 2 || ((v19 ^ v10) & 1) != 0)
    {
      return 0;
    }
    if (v11 == 2)
    {
      if (v20 != 2) {
        return 0;
      }
    }
    else if (v20 == 2 || ((v20 ^ v11) & 1) != 0)
    {
      return 0;
    }
    return 1;
  }
  uint64_t result = 0;
  if (v18 != 3 && v9 == v18) {
    goto LABEL_32;
  }
  return result;
}

BOOL specialized static Morphology.Pronoun.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a1 + 16);
  char v5 = *(unsigned char *)(a1 + 17);
  char v6 = *(unsigned char *)(a1 + 18);
  uint64_t v7 = *(void *)(a1 + 24);
  v2.i32[0] = *(_DWORD *)(a1 + 32);
  char v8 = *(unsigned char *)(a1 + 36);
  uint64_t v27 = *(void *)(a1 + 48);
  uint64_t v24 = *(unsigned __int8 *)(a1 + 60);
  uint64_t v25 = *(void *)(a1 + 40);
  uint64_t v23 = *(unsigned int *)(a1 + 56);
  char v9 = *(unsigned char *)(a2 + 16);
  char v10 = *(unsigned char *)(a2 + 17);
  char v11 = *(unsigned char *)(a2 + 18);
  uint64_t v12 = *(void *)(a2 + 24);
  v3.i32[0] = *(_DWORD *)(a2 + 32);
  char v13 = *(unsigned char *)(a2 + 36);
  uint64_t v26 = *(void *)(a2 + 48);
  uint64_t v21 = *(unsigned __int8 *)(a2 + 60);
  uint64_t v22 = *(void *)(a2 + 40);
  uint64_t v20 = *(unsigned int *)(a2 + 56);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    || (char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v14 & 1) != 0))
  {
    LOBYTE(v32) = v4;
    BYTE1(v32) = v5;
    BYTE2(v32) = v6;
    uint64_t v33 = v7;
    unsigned __int32 v34 = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
    char v35 = v8;
    LOBYTE(v28) = v9;
    HIBYTE(v28) = v10;
    char v29 = v11;
    uint64_t v30 = v12;
    *(_DWORD *)id v31 = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
    v31[4] = v13;
    if (specialized static Morphology.== infix(_:_:)((unsigned __int8 *)&v32, (unsigned __int8 *)&v28))
    {
      if (v27)
      {
        uint64_t v32 = v25;
        uint64_t v33 = v27;
        unsigned __int32 v34 = v23;
        char v35 = (v23 | (unint64_t)(v24 << 32)) >> 32;
        if (v26)
        {
          v16.i64[0] = 0xFFFFFFFFFFLL;
          v16.i64[1] = 0xFFFFFFFFFFLL;
          uint64x2_t v17 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v20 | (unint64_t)(v21 << 32)), v16);
          int16x8_t v18 = (int16x8_t)vshlq_u64(v17, (uint64x2_t)xmmword_182108550);
          __int16 v28 = v22;
          char v29 = BYTE2(v22);
          uint64_t v30 = v26;
          v31[0] = v20;
          *(int32x2_t *)v17.i8 = vmovn_s64((int64x2_t)vshlq_u64(v17, (uint64x2_t)xmmword_182108540));
          *(int32x2_t *)v18.i8 = vmovn_s64((int64x2_t)v18);
          v18.i16[1] = v18.i16[2];
          v18.i16[2] = v17.i16[0];
          v18.i16[3] = v17.i16[2];
          *(_DWORD *)&v31[1] = vmovn_s16(v18).u32[0];
          swift_bridgeObjectRetain_n();
          char v19 = specialized static Morphology.== infix(_:_:)((unsigned __int8 *)&v32, (unsigned __int8 *)&v28);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return (v19 & 1) != 0;
        }
        swift_bridgeObjectRetain();
      }
      else if (!v26)
      {
        return 1;
      }
      swift_bridgeObjectRelease();
    }
    return 0;
  }
  return result;
}

uint64_t specialized static InflectionRule.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if (!v2)
  {
    if (!v3)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
    return 0;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = *((unsigned __int8 *)a2 + 20);
  uint64_t v6 = *((unsigned int *)a2 + 4);
  uint64_t v7 = *((unsigned __int8 *)a1 + 20);
  uint64_t v8 = *((unsigned int *)a1 + 4);
  uint64_t v9 = *a1;
  uint64_t v10 = *a2;
  if (*a1 == 3)
  {
    if (v10 != 3) {
      return 0;
    }
  }
  else if (v10 == 3 || v9 != v4)
  {
    return 0;
  }
  uint64_t v12 = *a2 & 0xFF00;
  if ((*a1 & 0xFF00) == 0xE00)
  {
    if (v12 != 3584) {
      return 0;
    }
  }
  else if (v12 == 3584 || (((unsigned __int16)v9 ^ (unsigned __int16)v4) & 0xFF00) != 0)
  {
    return 0;
  }
  uint64_t v13 = v4 & 0xFF0000;
  if ((v9 & 0xFF0000) == 0x60000)
  {
    if (v13 != 393216) {
      return 0;
    }
  }
  else if (v13 == 393216 || ((v9 ^ v4) & 0xFF0000) != 0)
  {
    return 0;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  if ((specialized static Dictionary<>.== infix(_:_:)(v2, v3) & 1) == 0) {
    goto LABEL_44;
  }
  unint64_t v14 = v8 | (v7 << 32);
  if (v8 == 14)
  {
    if (v6 != 14) {
      goto LABEL_44;
    }
  }
  else if (v6 == 14 || v8 != v6)
  {
    goto LABEL_44;
  }
  if (BYTE1(v8) == 3)
  {
    if (BYTE1(v6) != 3) {
      goto LABEL_44;
    }
  }
  else if (BYTE1(v6) == 3 || BYTE1(v8) != BYTE1(v6))
  {
    goto LABEL_44;
  }
  if (BYTE2(v8) == 3)
  {
    if (BYTE2(v6) != 3) {
      goto LABEL_44;
    }
  }
  else if (BYTE2(v6) == 3 || BYTE2(v8) != BYTE2(v6))
  {
    goto LABEL_44;
  }
  uint64_t v15 = v6 & 0xFF000000;
  if ((v8 & 0xFF000000) == 0x2000000)
  {
    if (v15 == 0x2000000) {
      goto LABEL_41;
    }
LABEL_44:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    return 0;
  }
  if (v15 == 0x2000000 || ((v8 ^ v6) & 0x1000000) != 0) {
    goto LABEL_44;
  }
LABEL_41:
  uint64_t v16 = v6 | (v5 << 32);
  if (HIDWORD(v14) == 2)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (BYTE4(v16) != 2) {
      return 0;
    }
  }
  else
  {
    unint64_t v17 = v14;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (BYTE4(v16) == 2 || ((v17 ^ v16) & 0x100000000) != 0) {
      return 0;
    }
  }
  return 1;
}

unint64_t lazy protocol witness table accessor for type Morphology.CodingKeys and conformance Morphology.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech;
  if (!lazy protocol witness table cache variable for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech;
  if (!lazy protocol witness table cache variable for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech;
  if (!lazy protocol witness table cache variable for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun;
  if (!lazy protocol witness table cache variable for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun;
  if (!lazy protocol witness table cache variable for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun;
  if (!lazy protocol witness table cache variable for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.PronounType and conformance Morphology.PronounType()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology.PronounType and conformance Morphology.PronounType;
  if (!lazy protocol witness table cache variable for type Morphology.PronounType and conformance Morphology.PronounType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.PronounType and conformance Morphology.PronounType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology.PronounType and conformance Morphology.PronounType;
  if (!lazy protocol witness table cache variable for type Morphology.PronounType and conformance Morphology.PronounType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.PronounType and conformance Morphology.PronounType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology.PronounType and conformance Morphology.PronounType;
  if (!lazy protocol witness table cache variable for type Morphology.PronounType and conformance Morphology.PronounType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.PronounType and conformance Morphology.PronounType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.Determination and conformance Morphology.Determination()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology.Determination and conformance Morphology.Determination;
  if (!lazy protocol witness table cache variable for type Morphology.Determination and conformance Morphology.Determination)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Determination and conformance Morphology.Determination);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology.Determination and conformance Morphology.Determination;
  if (!lazy protocol witness table cache variable for type Morphology.Determination and conformance Morphology.Determination)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Determination and conformance Morphology.Determination);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology.Determination and conformance Morphology.Determination;
  if (!lazy protocol witness table cache variable for type Morphology.Determination and conformance Morphology.Determination)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Determination and conformance Morphology.Determination);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.Definiteness and conformance Morphology.Definiteness()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology.Definiteness and conformance Morphology.Definiteness;
  if (!lazy protocol witness table cache variable for type Morphology.Definiteness and conformance Morphology.Definiteness)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Definiteness and conformance Morphology.Definiteness);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology.Definiteness and conformance Morphology.Definiteness;
  if (!lazy protocol witness table cache variable for type Morphology.Definiteness and conformance Morphology.Definiteness)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Definiteness and conformance Morphology.Definiteness);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology.Definiteness and conformance Morphology.Definiteness;
  if (!lazy protocol witness table cache variable for type Morphology.Definiteness and conformance Morphology.Definiteness)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Definiteness and conformance Morphology.Definiteness);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology and conformance Morphology()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology and conformance Morphology;
  if (!lazy protocol witness table cache variable for type Morphology and conformance Morphology)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology and conformance Morphology);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology and conformance Morphology;
  if (!lazy protocol witness table cache variable for type Morphology and conformance Morphology)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology and conformance Morphology);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology and conformance Morphology;
  if (!lazy protocol witness table cache variable for type Morphology and conformance Morphology)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology and conformance Morphology);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology and conformance Morphology;
  if (!lazy protocol witness table cache variable for type Morphology and conformance Morphology)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology and conformance Morphology);
  }
  return result;
}

uint64_t outlined copy of Morphology.CustomPronoun?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_181BF1110()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 96, 7);
}

double partial apply for closure #1 in Morphology.setCustomPronoun(_:forLanguage:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in Morphology.setCustomPronoun(_:forLanguage:)(a1, a2, v3 + 16, a3);
}

unint64_t lazy protocol witness table accessor for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys);
  }
  return result;
}

uint64_t specialized Morphology._CustomPronoun.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Morphology._CustomPronoun.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    char v40 = 0;
    uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v11 = v10;
    char v39 = 1;
    swift_bridgeObjectRetain();
    uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v14 = v13;
    uint64_t v33 = v12;
    uint64_t v34 = v9;
    char v38 = 2;
    swift_bridgeObjectRetain();
    uint64_t v35 = v14;
    uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v17 = v16;
    uint64_t v31 = v15;
    uint64_t v32 = a2;
    char v37 = 3;
    swift_bridgeObjectRetain();
    uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v20 = v19;
    uint64_t v30 = v18;
    char v36 = 4;
    swift_bridgeObjectRetain();
    uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v23 = v22;
    uint64_t v24 = *(void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v29 = v21;
    v24(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v25 = v35;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v27 = v32;
    *uint64_t v32 = v34;
    v27[1] = v11;
    v27[2] = v33;
    v27[3] = v25;
    v27[4] = v31;
    v27[5] = v17;
    v27[6] = v30;
    v27[7] = v20;
    v27[8] = v29;
    v27[9] = v23;
  }
  return result;
}

uint64_t specialized static Morphology.CustomPronoun.keyPath(forObjectiveCKey:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x467463656A627573 && a2 == 0xEB000000006D726FLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x6F467463656A626FLL && a2 == 0xEA00000000006D72
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x6973736573736F70 && a2 == 0xEE006D726F466576
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000017 && a2 == 0x80000001823AC950
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x766978656C666572 && a2 == 0xED00006D726F4665
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return swift_getKeyPath();
  }
  else
  {
    return 0;
  }
}

unint64_t specialized Morphology.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Morphology.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return 9;
  }
  else {
    return v3;
  }
}

uint64_t specialized Morphology._CustomPronoun.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x467463656A627573 && a2 == 0xEB000000006D726FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F467463656A626FLL && a2 == 0xEA00000000006D72 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6973736573736F70 && a2 == 0xEE006D726F466576 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001823AC950 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x766978656C666572 && a2 == 0xED00006D726F4665)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t specialized Morphology.Pronoun.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E756F6E6F7270 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F6C6F6870726F6DLL && a2 == 0xEA00000000007967 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001823AC970)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void specialized Morphology._CustomPronoun.init(_:)(void *a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    id v3 = a1;
    id v4 = objc_msgSend(v3, sel_subjectForm);
    if (v4)
    {
      uint64_t v5 = v4;
      id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
      uint64_t v31 = v7;
      id v32 = v6;
    }
    else
    {
      uint64_t v31 = 0;
      id v32 = 0;
    }
    id v18 = objc_msgSend(v3, sel_objectForm);
    if (v18)
    {
      uint64_t v19 = v18;
      id v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      uint64_t v15 = v20;
    }
    else
    {
      id v30 = 0;
      uint64_t v15 = 0;
    }
    id v21 = objc_msgSend(v3, sel_possessiveForm);
    if (v21)
    {
      uint64_t v22 = v21;
      id v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      uint64_t v13 = v23;
    }
    else
    {
      id v12 = 0;
      uint64_t v13 = 0;
    }
    id v24 = objc_msgSend(v3, sel_possessiveAdjectiveForm);
    if (v24)
    {
      uint64_t v25 = v24;
      id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      uint64_t v11 = v26;
    }
    else
    {
      id v10 = 0;
      uint64_t v11 = 0;
    }
    id v27 = objc_msgSend(v3, sel_reflexiveForm);
    if (v27)
    {
      uint64_t v28 = v27;
      id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      uint64_t v9 = v29;
    }
    else
    {

      id v8 = 0;
      uint64_t v9 = 0;
    }
    uint64_t v17 = v31;
    id v16 = v32;
    id v14 = v30;
  }
  else
  {
    id v8 = 0;
    uint64_t v9 = 0;
    id v10 = 0;
    uint64_t v11 = 0;
    id v12 = 0;
    uint64_t v13 = 0;
    id v14 = 0;
    uint64_t v15 = 0;
    id v16 = 0;
    uint64_t v17 = 0;
  }
  *a2 = v16;
  a2[1] = v17;
  a2[2] = v14;
  a2[3] = v15;
  a2[4] = v12;
  a2[5] = v13;
  a2[6] = v10;
  a2[7] = v11;
  a2[8] = v8;
  a2[9] = v9;
}

uint64_t outlined consume of Morphology.Pronoun?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void specialized static InflectionRule._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  outlined consume of AttributedString.AttributeRunBoundaries?(*(void *)a2, *(void *)(a2 + 8));
  id v4 = self;
  id v5 = a1;
  id v6 = objc_msgSend(v4, sel_automaticRule);
  if (v6)
  {
    uint64_t v7 = v6;
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSInflectionRule);
    id v8 = v5;
    char v9 = static NSObject.== infix(_:_:)();

    if (v9)
    {

      unint64_t v10 = 0;
      uint64_t v11 = 0;
      unint64_t v12 = 0;
LABEL_6:
      *(void *)a2 = v10;
      *(void *)(a2 + 8) = v11;
      *(_DWORD *)(a2 + 16) = v12;
      *(unsigned char *)(a2 + 20) = BYTE4(v12);
      return;
    }
  }
  self;
  uint64_t v13 = swift_dynamicCastObjCClass();
  if (v13)
  {
    id v14 = (void *)v13;
    id v15 = v5;
    id v16 = objc_msgSend(v14, sel_morphology);
    static Morphology._unconditionallyBridgeFromObjectiveC(_:)(v16, (uint64_t)&v18);

    uint64_t v11 = v20;
    unint64_t v10 = v18 | ((unint64_t)v19 << 16);
    unint64_t v12 = v21 | ((unint64_t)v22 << 32);
    goto LABEL_6;
  }
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSInflectionRule?);
  v17._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized static InflectionRule._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  outlined consume of AttributedString.AttributeRunBoundaries?(*(void *)a2, *(void *)(a2 + 8));
  id v4 = self;
  id v5 = a1;
  id v6 = objc_msgSend(v4, sel_automaticRule);
  if (v6)
  {
    uint64_t v7 = v6;
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSInflectionRule);
    id v8 = v5;
    char v9 = static NSObject.== infix(_:_:)();

    if (v9)
    {

      unint64_t v10 = 0;
      uint64_t v11 = 0;
      unint64_t v12 = 0;
LABEL_6:
      *(void *)a2 = v10;
      *(void *)(a2 + 8) = v11;
      *(_DWORD *)(a2 + 16) = v12;
      *(unsigned char *)(a2 + 20) = BYTE4(v12);
      return 1;
    }
  }
  self;
  uint64_t v13 = swift_dynamicCastObjCClass();
  if (v13)
  {
    id v14 = (void *)v13;
    id v15 = v5;
    id v16 = objc_msgSend(v14, sel_morphology);
    static Morphology._unconditionallyBridgeFromObjectiveC(_:)(v16, (uint64_t)&v19);

    uint64_t v11 = v21;
    unint64_t v10 = v19 | ((unint64_t)v20 << 16);
    unint64_t v12 = v22 | ((unint64_t)v23 << 32);
    goto LABEL_6;
  }
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSInflectionRule?);
  v18._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static Morphology._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  id v4 = a1;
  unint64_t v5 = (unint64_t)objc_msgSend(v4, sel_grammaticalGender) - 1;
  if (v5 >= 3) {
    unint64_t v5 = 3;
  }
  id v6 = (char *)objc_msgSend(v4, sel_number, v5);
  if ((unint64_t)(v6 - 1) >= 6) {
    uint64_t v7 = 393216;
  }
  else {
    uint64_t v7 = (void)(v6 - 1) << 16;
  }
  Morphology.PartOfSpeech.init(rawValue:)((Swift::Int)objc_msgSend(v4, sel_partOfSpeech));
  Morphology.PartOfSpeech.init(rawValue:)((Swift::Int)objc_msgSend(v4, sel_grammaticalCase));
  id v8 = objc_msgSend(v4, sel_determination);
  unint64_t v9 = (unint64_t)objc_msgSend(v4, sel_pronounType);
  if (v8 == (id)2) {
    int v10 = 0x1000000;
  }
  else {
    int v10 = 0x2000000;
  }
  id v11 = objc_msgSend(v4, sel_definiteness);

  char v12 = 2;
  if (v11 == (id)2) {
    char v12 = 1;
  }
  unsigned int v13 = ((0x2010003u >> (8 * v9)) & 3) << 16;
  if (v9 >= 4) {
    unsigned int v13 = 196608;
  }
  if (v8 == (id)1) {
    int v14 = 0;
  }
  else {
    int v14 = v10;
  }
  int v15 = v19 | v14 | v13;
  uint64_t v16 = MEMORY[0x1E4FBC868];
  if (v11 == (id)1) {
    char v12 = 0;
  }
  *(void *)a2 = v18 | ((unint64_t)v20 << 8) | v7;
  *(void *)(a2 + 8) = v16;
  *(unsigned char *)(a2 + 20) = v12;
  *(_DWORD *)(a2 + 16) = v15 | 0x300;
  return 1;
}

unint64_t lazy protocol witness table accessor for type InflectionRule and conformance InflectionRule()
{
  unint64_t result = lazy protocol witness table cache variable for type InflectionRule and conformance InflectionRule;
  if (!lazy protocol witness table cache variable for type InflectionRule and conformance InflectionRule)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionRule and conformance InflectionRule);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InflectionRule and conformance InflectionRule;
  if (!lazy protocol witness table cache variable for type InflectionRule and conformance InflectionRule)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionRule and conformance InflectionRule);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.CustomPronoun and conformance Morphology.CustomPronoun()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology.CustomPronoun and conformance Morphology.CustomPronoun;
  if (!lazy protocol witness table cache variable for type Morphology.CustomPronoun and conformance Morphology.CustomPronoun)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.CustomPronoun and conformance Morphology.CustomPronoun);
  }
  return result;
}

uint64_t sub_181BF2830@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_181BF283C(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  a2[1] = v3;
  return result;
}

uint64_t sub_181BF2880@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_181BF288C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_181BF28D0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_181BF28DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 32) = v4;
  *(void *)(a2 + 40) = v3;
  return result;
}

uint64_t sub_181BF2920@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_181BF292C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v3;
  return result;
}

uint64_t sub_181BF2970@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_181BF297C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 64) = v4;
  *(void *)(a2 + 72) = v3;
  return result;
}

__n128 __swift_memcpy21_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Morphology(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 21)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Morphology(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 21) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 21) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Morphology.GrammaticalGender()
{
  return &type metadata for Morphology.GrammaticalGender;
}

ValueMetadata *type metadata accessor for Morphology.PartOfSpeech()
{
  return &type metadata for Morphology.PartOfSpeech;
}

unsigned char *storeEnumTagSinglePayload for Morphology.GrammaticalNumber(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181BF2B64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Morphology.GrammaticalNumber()
{
  return &type metadata for Morphology.GrammaticalNumber;
}

unsigned char *storeEnumTagSinglePayload for Morphology.PartOfSpeech(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *__n128 result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181BF2C68);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 13;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Morphology.GrammaticalCase()
{
  return &type metadata for Morphology.GrammaticalCase;
}

ValueMetadata *type metadata accessor for Morphology.GrammaticalPerson()
{
  return &type metadata for Morphology.GrammaticalPerson;
}

ValueMetadata *type metadata accessor for Morphology.PronounType()
{
  return &type metadata for Morphology.PronounType;
}

ValueMetadata *type metadata accessor for Morphology.Determination()
{
  return &type metadata for Morphology.Determination;
}

unsigned char *storeEnumTagSinglePayload for Morphology.Determination(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181BF2DA0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Morphology.Definiteness()
{
  return &type metadata for Morphology.Definiteness;
}

uint64_t initializeBufferWithCopyOfBuffer for Morphology(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Morphology(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  return a1;
}

uint64_t assignWithTake for Morphology(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  return a1;
}

uint64_t getEnumTagSinglePayload for InflectionRule(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 21)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for InflectionRule(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 13) = 0;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 21) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 21) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for InflectionRule(uint64_t result, int a2)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
  }
  else if (a2)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for InflectionRule()
{
  return &type metadata for InflectionRule;
}

ValueMetadata *type metadata accessor for Morphology.CustomPronoun()
{
  return &type metadata for Morphology.CustomPronoun;
}

uint64_t destroy for Morphology.Pronoun()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Morphology.Pronoun(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Morphology.Pronoun(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  *(unsigned char *)(a1 + 35) = *(unsigned char *)(a2 + 35);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  *(unsigned char *)(a1 + 59) = *(unsigned char *)(a2 + 59);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  return a1;
}

__n128 __swift_memcpy61_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 45) = *(_OWORD *)(a2 + 45);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Morphology.Pronoun(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  return a1;
}

uint64_t getEnumTagSinglePayload for Morphology.Pronoun(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 61)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Morphology.Pronoun(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 60) = 0;
    *(_DWORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 61) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 61) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Morphology.Pronoun()
{
  return &type metadata for Morphology.Pronoun;
}

unsigned char *storeEnumTagSinglePayload for Morphology.GrammaticalGender(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181BF3418);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Morphology.Pronoun.CodingKeys()
{
  return &unk_1ECA30D30;
}

unsigned char *storeEnumTagSinglePayload for Morphology._CustomPronoun.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181BF351CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Morphology._CustomPronoun.CodingKeys()
{
  return &unk_1ECA309D0;
}

uint64_t destroy for Morphology.CustomPronoun()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Morphology.CustomPronoun(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Morphology.CustomPronoun(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for Morphology.CustomPronoun(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Morphology.CustomPronoun(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Morphology.CustomPronoun(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Morphology._CustomPronoun()
{
  return &type metadata for Morphology._CustomPronoun;
}

unsigned char *storeEnumTagSinglePayload for Morphology.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *__n128 result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181BF3910);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Morphology.CodingKeys()
{
  return &type metadata for Morphology.CodingKeys;
}

uint64_t outlined consume of Morphology.CustomPronoun?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined init with take of String?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of Morphology._CustomPronoun(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Morphology._CustomPronoun(uint64_t a1)
{
  return a1;
}

uint64_t _TimeZoneGMTICU.localizedName(for:locale:)(unint64_t a1, uint64_t *a2)
{
  int v3 = a1;
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  BOOL v6 = a1 < 6;
  uint64_t v7 = *(void *)(v2 + 24);
  unint64_t v8 = *(void *)(v2 + 32);
  swift_bridgeObjectRetain();
  unint64_t v9 = specialized _copyCollectionToContiguousArray<A>(_:)(v7, v8);
  swift_bridgeObjectRelease();
  unint64_t v10 = v9[2];
  if (v5)
  {
    uint64_t ObjectType = swift_getObjectType();
    char v12 = *(void (**)(uint64_t, uint64_t))(v4 + 64);
    swift_unknownObjectRetain();
    v12(ObjectType, v4);
    swift_unknownObjectRelease();
    if (!(v10 >> 31)) {
      goto LABEL_3;
    }
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v10 >> 31) {
    goto LABEL_12;
  }
LABEL_3:
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v13 = udat_open();
  swift_release();
  uint64_t v14 = 0;
  if (v13)
  {
    int v15 = specialized _copyCollectionToContiguousArray<A>(_:)(1987475062, 0xE400000000000000);
    if ((v6 & v3) != 0) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = v15[2];
    }
    if (v16 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v16 <= 0x7FFFFFFF)
      {
        udat_applyPattern();
        uint64_t v14 = specialized _withResizingUCharBuffer(initialSize:_:)(32);
        swift_release();
        udat_close();
        goto LABEL_10;
      }
LABEL_14:
      __break(1u);
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_10:
  swift_release();
  return v14;
}

uint64_t _TimeZoneGMTICU.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void *protocol witness for _TimeZoneProtocol.init(secondsFromGMT:) in conformance _TimeZoneGMTICU(uint64_t a1)
{
  uint64_t v2 = (void *)swift_allocObject();
  uint64_t v3 = specialized static TimeZone.nameForSecondsFromGMT(_:)(a1);
  if (v4)
  {
    v2[3] = v3;
    v2[4] = v4;
    v2[2] = a1;
  }
  else
  {
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v2;
}

void protocol witness for _TimeZoneProtocol.init(identifier:) in conformance _TimeZoneGMTICU()
{
}

uint64_t protocol witness for _TimeZoneProtocol.abbreviation(for:) in conformance _TimeZoneGMTICU()
{
  return specialized static _TimeZoneGMT.abbreviation(for:)(*(void *)(v0 + 16));
}

double protocol witness for _TimeZoneProtocol.daylightSavingTimeOffset(for:) in conformance _TimeZoneGMTICU()
{
  return 0.0;
}

uint64_t @objc static NSCalendar._resetCurrent()()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = static CalendarCache.cache + 16;
  __int16 v1 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in CalendarCache.reset()(v0);
  os_unfair_lock_unlock(v1);
  return swift_release_n();
}

uint64_t _NSSwiftCalendar.debugDescription.getter()
{
  __int16 v1 = (os_unfair_lock_s *)(*(void *)&v0[OBJC_IVAR____NSSwiftCalendar__lock] + 32);
  os_unfair_lock_lock(v1);
  closure #1 in _NSSwiftCalendar.debugDescription.getter(&v12);
  os_unfair_lock_unlock(v1);
  uint64_t v2 = v12;
  uint64_t v3 = v13;
  v11.receiver = v0;
  v11.super_class = (Class)type metadata accessor for _NSSwiftCalendar();
  id v4 = objc_msgSendSuper2(&v11, sel_debugDescription);
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  uint64_t v12 = (uint64_t)v5;
  uint64_t v13 = v7;
  v8._uint64_t countAndFlagsBits = 32;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = v2;
  v9._object = v3;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t closure #1 in _NSSwiftCalendar.debugDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Calendar.description.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

__C::_NSRange __swiftcall _NSSwiftCalendar.minimumRange(of:)(NSCalendarUnit of)
{
  _fromNSCalendarUnit(_:)(of, (char *)&v16);
  char v2 = v16;
  if (v16 != 18)
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____NSSwiftCalendar__lock);
    id v4 = v3 + 4;
    id v5 = v3 + 8;
    os_unfair_lock_lock(v3 + 8);
    closure #1 in _NSSwiftCalendar.calendar.getter(v4, &v16);
    os_unfair_lock_unlock(v5);
    uint64_t v6 = *((void *)&v16 + 1);
    uint64_t ObjectType = swift_getObjectType();
    v15[0] = v2;
    uint64_t v8 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v6 + 128))(v15, ObjectType, v6);
    uint64_t v10 = v9;
    LOBYTE(v5) = v11;
    swift_unknownObjectRelease();
    if ((v5 & 1) == 0)
    {
      Swift::Int v12 = v10 - v8;
      if (!__OFSUB__(v10, v8)) {
        goto LABEL_7;
      }
      __break(1u);
    }
  }
  uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
  Swift::Int v12 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_7:
  Swift::Int v13 = v8;
  result.length = v12;
  result.location = v13;
  return result;
}

uint64_t _NSSwiftCalendar.range(of:start:interval:for:)(uint64_t a1, void *a2, double *a3, double *a4)
{
  double v7 = *a4;
  _fromNSCalendarUnit(_:)(a1, (char *)v23);
  char v8 = LOBYTE(v23[0]);
  if (LOBYTE(v23[0]) == 18) {
    return 0;
  }
  uint64_t v9 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
  uint64_t v10 = v9 + 4;
  char v11 = v9 + 8;
  os_unfair_lock_lock(v9 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v10, &v22);
  os_unfair_lock_unlock(v11);
  uint64_t v12 = *((void *)&v22 + 1);
  v21[0] = v8;
  double v13 = 1.59271755e13;
  if (v7 <= 1.59271755e13) {
    double v13 = v7;
  }
  double v14 = fmax(v13, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v20 = v14;
  (*(void (**)(double *__return_ptr, unsigned char *, double *, uint64_t, uint64_t))(v12 + 160))(v23, v21, &v20, ObjectType, v12);
  swift_unknownObjectRelease();
  if (v24) {
    return 0;
  }
  double v17 = v23[1];
  if (a2)
  {
    id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v23[0]);
    id v19 = v18;
    *a2 = v18;
  }
  if (a3) {
    *a3 = v17;
  }
  return 1;
}

uint64_t _NSSwiftCalendar.nextWeekendStart(_:interval:options:after:)(void *a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = *a4;
  char v8 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
  uint64_t v9 = v8 + 4;
  uint64_t v10 = v8 + 8;
  os_unfair_lock_lock(v8 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v9, startingAfter);
  os_unfair_lock_unlock(v10);
  long long v17 = *(_OWORD *)&startingAfter[0]._time;
  uint64_t v16 = v7;
  Calendar.nextWeekend(startingAfter:direction:)(startingAfter[0], (Foundation::Calendar::SearchDirection)&v16);
  swift_unknownObjectRelease();
  int v11 = v21;
  if ((v21 & 1) == 0)
  {
    uint64_t v12 = v20;
    if (a1)
    {
      id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v19);
      id v14 = v13;
      *a1 = v13;
    }
    if (a2) {
      *a2 = v12;
    }
  }
  return v11 ^ 1u;
}

Swift::Int _NSSwiftCalendar.date(_:matchesComponents:)(double *a1, const void *a2)
{
  void (*v28)(_OWORD *__return_ptr, _OWORD *, double *, uint64_t, void);
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  BOOL v33;
  long long v34[18];
  double v35[36];
  _OWORD __src[18];
  _OWORD v37[18];
  long long v38;
  long long v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  __int16 v71;
  long long v72;
  _OWORD __dst[19];

  double v3 = *a1;
  memcpy(__dst, a2, 0x11AuLL);
  uint64_t v4 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____NSSwiftCalendar__lock);
  id v5 = v4 + 4;
  uint64_t v6 = v4 + 8;
  os_unfair_lock_lock(v4 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v5, &v72);
  os_unfair_lock_unlock(v6);
  long long v7 = v72;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  uint64_t v8 = static _SetStorage.allocate(capacity:)();
  uint64_t v9 = 0;
  uint64_t v10 = v8 + 56;
  do
  {
    Swift::UInt v14 = outlined read-only object #0 of _NSSwiftCalendar.date(_:matchesComponents:)[v9 + 32];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v14);
    Swift::Int result = Hasher._finalize()();
    uint64_t v16 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v17 = result & ~v16;
    unint64_t v18 = v17 >> 6;
    uint64_t v19 = *(void *)(v10 + 8 * (v17 >> 6));
    uint64_t v20 = 1 << v17;
    uint64_t v21 = *(void *)(v8 + 48);
    if (((1 << v17) & v19) != 0)
    {
      if (*(unsigned __int8 *)(v21 + v17) == v14) {
        goto LABEL_4;
      }
      uint64_t v22 = ~v16;
      while (1)
      {
        unint64_t v17 = (v17 + 1) & v22;
        unint64_t v18 = v17 >> 6;
        uint64_t v19 = *(void *)(v10 + 8 * (v17 >> 6));
        uint64_t v20 = 1 << v17;
        if ((v19 & (1 << v17)) == 0) {
          break;
        }
        if (*(unsigned __int8 *)(v21 + v17) == v14) {
          goto LABEL_4;
        }
      }
    }
    *(void *)(v10 + 8 * v18) = v20 | v19;
    *(unsigned char *)(v21 + v17) = v14;
    uint64_t v11 = *(void *)(v8 + 16);
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12)
    {
      __break(1u);
      goto LABEL_27;
    }
    *(void *)(v8 + 16) = v13;
LABEL_4:
    ++v9;
  }
  while (v9 != 15);
  outlined retain of DateComponents((uint64_t)__dst);
  specialized _NativeSet.filter(_:)(v8, __dst);
  outlined release of DateComponents((uint64_t)__dst);
  v37[0] = v7;
  uint64_t v23 = swift_bridgeObjectRetain();
  Calendar.ComponentSet.init(_:)(v23, __src);
  double v24 = 1.59271755e13;
  if (v3 <= 1.59271755e13) {
    double v24 = v3;
  }
  double v25 = fmax(v24, -2.11845067e11);
  v35[0] = v25;
  Calendar._dateComponents(_:from:)((uint64_t *)__src, v35, &v38);
  swift_release();
  char v26 = BYTE9(__dst[17]);
  if (BYTE9(__dst[17]) == 2)
  {
    Swift::Int result = outlined retain of DateComponents((uint64_t)__dst);
  }
  else
  {
    *(void *)&__src[0] = 4;
    uint64_t ObjectType = swift_getObjectType();
    v35[0] = v25;
    uint64_t v28 = *(void (**)(_OWORD *__return_ptr, _OWORD *, double *, uint64_t, void))(*((void *)&v7 + 1) + 192);
    outlined retain of DateComponents((uint64_t)__dst);
    v28(v37, __src, v35, ObjectType, *((void *)&v7 + 1));
    Swift::Int result = outlined release of DateComponents((uint64_t)v37);
    HIBYTE(v71) = BYTE9(v37[17]);
  }
  uint64_t v29 = *(void *)&__dst[10];
  id v30 = v56;
  uint64_t v31 = v57 ^ 1 | BYTE8(__dst[10]);
  if (v57 & 1) != 0 || (BYTE8(__dst[10])) {
    goto LABEL_24;
  }
  id v32 = v56 - *(void *)&__dst[10];
  if (!__OFSUB__(v56, *(void *)&__dst[10]))
  {
    if (v32 < 0) {
      id v32 = *(void *)&__dst[10] - v56;
    }
    if ((unint64_t)v32 >= 0x1F5)
    {
      outlined release of DateComponents((uint64_t)__dst);
      *(void *)&v37[2] = v40;
      BYTE8(v37[2]) = v41;
      *(void *)&v37[3] = v42;
      BYTE8(v37[3]) = v43;
      *(void *)&v37[4] = v44;
      BYTE8(v37[4]) = v45;
      *(void *)&v37[5] = v46;
      BYTE8(v37[5]) = v47;
      *(void *)&v37[6] = v48;
      BYTE8(v37[6]) = v49;
      *(void *)&v37[7] = v50;
      BYTE8(v37[7]) = v51;
      *(void *)&v37[8] = v52;
      BYTE8(v37[8]) = v53;
      *(void *)&v37[9] = v54;
      BYTE8(v37[9]) = v55;
      *(void *)&v37[10] = v30;
      *(void *)&v37[11] = v58;
      BYTE8(v37[11]) = v59;
      *(void *)&v37[12] = v60;
      BYTE8(v37[12]) = v61;
      *(void *)&v37[13] = v62;
      BYTE8(v37[13]) = v63;
      *(void *)&v37[14] = v64;
      BYTE8(v37[14]) = v65;
      *(void *)&v37[15] = v66;
      BYTE8(v37[15]) = v67;
      BYTE8(v37[16]) = v69;
      WORD4(v37[17]) = v71;
      *(void *)&v37[16] = v68;
      *(void *)&v37[17] = v70;
      v37[0] = v38;
      v37[1] = v39;
      BYTE8(v37[10]) = 0;
      outlined release of DateComponents((uint64_t)v37);
      swift_unknownObjectRelease();
      return 0;
    }
    id v30 = 0;
    uint64_t v29 = 0;
    uint64_t v31 = 0;
LABEL_24:
    *(void *)&__src[2] = *(void *)&__dst[2];
    BYTE8(__src[2]) = BYTE8(__dst[2]);
    *(void *)&__src[3] = *(void *)&__dst[3];
    BYTE8(__src[3]) = BYTE8(__dst[3]);
    *(void *)&__src[4] = *(void *)&__dst[4];
    BYTE8(__src[4]) = BYTE8(__dst[4]);
    *(void *)&__src[5] = *(void *)&__dst[5];
    BYTE8(__src[5]) = BYTE8(__dst[5]);
    *(void *)&__src[6] = *(void *)&__dst[6];
    BYTE8(__src[6]) = BYTE8(__dst[6]);
    *(void *)&__src[7] = *(void *)&__dst[7];
    BYTE8(__src[7]) = BYTE8(__dst[7]);
    *(void *)&__src[8] = *(void *)&__dst[8];
    BYTE8(__src[8]) = BYTE8(__dst[8]);
    *(void *)&__src[9] = *(void *)&__dst[9];
    BYTE8(__src[9]) = BYTE8(__dst[9]);
    *(void *)&__src[10] = v29;
    BYTE8(__src[10]) = v31;
    *(void *)&__src[11] = *(void *)&__dst[11];
    BYTE8(__src[11]) = BYTE8(__dst[11]);
    *(void *)&__src[12] = *(void *)&__dst[12];
    BYTE8(__src[12]) = BYTE8(__dst[12]);
    *(void *)&__src[13] = *(void *)&__dst[13];
    BYTE8(__src[13]) = BYTE8(__dst[13]);
    *(void *)&__src[14] = *(void *)&__dst[14];
    BYTE8(__src[14]) = BYTE8(__dst[14]);
    *(void *)&__src[15] = *(void *)&__dst[15];
    BYTE8(__src[15]) = BYTE8(__dst[15]);
    BYTE8(__src[16]) = BYTE8(__dst[16]);
    BYTE8(__src[17]) = BYTE8(__dst[17]);
    *(void *)&__src[16] = *(void *)&__dst[16];
    *(void *)&__src[17] = *(void *)&__dst[17];
    BYTE9(__src[17]) = v26;
    __src[0] = __dst[0];
    __src[1] = __dst[1];
    memcpy(v35, __src, 0x11AuLL);
    *(void *)&v37[2] = v40;
    BYTE8(v37[2]) = v41;
    *(void *)&v37[3] = v42;
    BYTE8(v37[3]) = v43;
    *(void *)&v37[4] = v44;
    BYTE8(v37[4]) = v45;
    *(void *)&v37[5] = v46;
    BYTE8(v37[5]) = v47;
    *(void *)&v37[6] = v48;
    BYTE8(v37[6]) = v49;
    *(void *)&v37[7] = v50;
    BYTE8(v37[7]) = v51;
    *(void *)&v37[8] = v52;
    BYTE8(v37[8]) = v53;
    *(void *)&v37[9] = v54;
    BYTE8(v37[9]) = v55;
    *(void *)&v37[10] = v30;
    BYTE8(v37[10]) = v57;
    *(void *)&v37[11] = v58;
    BYTE8(v37[11]) = v59;
    *(void *)&v37[12] = v60;
    BYTE8(v37[12]) = v61;
    *(void *)&v37[13] = v62;
    BYTE8(v37[13]) = v63;
    *(void *)&v37[14] = v64;
    BYTE8(v37[14]) = v65;
    *(void *)&v37[15] = v66;
    BYTE8(v37[15]) = v67;
    BYTE8(v37[16]) = v69;
    WORD4(v37[17]) = v71;
    *(void *)&v37[16] = v68;
    *(void *)&v37[17] = v70;
    v37[0] = v38;
    v37[1] = v39;
    memcpy(v34, v37, 0x11AuLL);
    uint64_t v33 = specialized static DateComponents.== infix(_:_:)((uint64_t)v35, v34);
    outlined release of DateComponents((uint64_t)__src);
    outlined release of DateComponents((uint64_t)v37);
    swift_unknownObjectRelease();
    return v33;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _NSSwiftCalendar.getEra(_:year:month:day:from:)(void *a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  uint64_t v10 = *a5;
  uint64_t v11 = *(os_unfair_lock_s **)(v5 + OBJC_IVAR____NSSwiftCalendar__lock);
  BOOL v12 = v11 + 4;
  uint64_t v13 = v11 + 8;
  os_unfair_lock_lock(v11 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v12, &v36);
  os_unfair_lock_unlock(v13);
  long long v35 = v36;
  uint64_t v14 = unk_1ECA39CF0;
  if ((unk_1ECA39CF0 & ~qword_1ECA39CE8) == 0) {
    uint64_t v14 = 0;
  }
  uint64_t v15 = v14 | qword_1ECA39CE8;
  uint64_t v17 = qword_1ECA39CF8;
  uint64_t v16 = unk_1ECA39D00;
  if ((qword_1ECA39CF8 & ~v15) == 0) {
    uint64_t v17 = 0;
  }
  uint64_t v18 = v17 | v15;
  if ((unk_1ECA39D00 & ~v18) == 0) {
    uint64_t v16 = 0;
  }
  uint64_t v25 = v16 | v18;
  uint64_t v24 = v10;
  Calendar._dateComponents(_:from:)(&v25, (double *)&v24, v26);
  swift_unknownObjectRelease();
  if (a1)
  {
    uint64_t v19 = v27;
    if (v28) {
      uint64_t v19 = 0;
    }
    *a1 = v19;
  }
  if (a2)
  {
    uint64_t v20 = v29;
    if (v30) {
      uint64_t v20 = 0;
    }
    *a2 = v20;
  }
  if (a3)
  {
    uint64_t v21 = v31;
    if (v32) {
      uint64_t v21 = 0;
    }
    *a3 = v21;
  }
  if (a4)
  {
    uint64_t v22 = v33;
    if (v34) {
      uint64_t v22 = 0;
    }
    *a4 = v22;
  }
  return outlined release of DateComponents((uint64_t)v26);
}

uint64_t _NSSwiftCalendar.getEra(_:yearForWeekOfYear:weekOfYear:weekday:from:)(void *a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  uint64_t v10 = *a5;
  uint64_t v11 = *(os_unfair_lock_s **)(v5 + OBJC_IVAR____NSSwiftCalendar__lock);
  BOOL v12 = v11 + 4;
  uint64_t v13 = v11 + 8;
  os_unfair_lock_lock(v11 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v12, &v36);
  os_unfair_lock_unlock(v13);
  long long v35 = v36;
  uint64_t v14 = unk_1ECA39CB0;
  if ((unk_1ECA39CB0 & ~qword_1ECA39CA8) == 0) {
    uint64_t v14 = 0;
  }
  uint64_t v15 = v14 | qword_1ECA39CA8;
  uint64_t v17 = qword_1ECA39CB8;
  uint64_t v16 = unk_1ECA39CC0;
  if ((qword_1ECA39CB8 & ~v15) == 0) {
    uint64_t v17 = 0;
  }
  uint64_t v18 = v17 | v15;
  if ((unk_1ECA39CC0 & ~v18) == 0) {
    uint64_t v16 = 0;
  }
  uint64_t v25 = v16 | v18;
  uint64_t v24 = v10;
  Calendar._dateComponents(_:from:)(&v25, (double *)&v24, v26);
  swift_unknownObjectRelease();
  if (a1)
  {
    uint64_t v19 = v27;
    if (v28) {
      uint64_t v19 = 0;
    }
    *a1 = v19;
  }
  if (a2)
  {
    uint64_t v20 = v33;
    if (v34) {
      uint64_t v20 = 0;
    }
    *a2 = v20;
  }
  if (a3)
  {
    if (v32) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = v31;
    }
    *a3 = v21;
  }
  if (a4)
  {
    uint64_t v22 = v29;
    if (v30) {
      uint64_t v22 = 0;
    }
    *a4 = v22;
  }
  return outlined release of DateComponents((uint64_t)v26);
}

uint64_t _NSSwiftCalendar.range(ofWeekendStart:interval:containing:)(void *a1, uint64_t *a2, double *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  double v6 = *a3;
  __tp.__darwin_time_t tv_sec = 0;
  __tp.uint64_t tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  __tp.__darwin_time_t tv_sec = 0;
  __tp.uint64_t tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  long long v7 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____NSSwiftCalendar__lock);
  uint64_t v8 = v7 + 4;
  uint64_t v9 = v7 + 8;
  os_unfair_lock_lock(v7 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v8, startingAfter);
  os_unfair_lock_unlock(v9);
  long long v16 = *(_OWORD *)&startingAfter[0]._time;
  double v15 = v6;
  Calendar.nextWeekend(startingAfter:direction:)(startingAfter[0], (Foundation::Calendar::SearchDirection)&v15);
  swift_unknownObjectRelease();
  if (v19) {
    return 0;
  }
  __darwin_time_t tv_sec = __tp.tv_sec;
  os_unfair_lock_lock(v9);
  closure #1 in _NSSwiftCalendar.calendar.getter(v8, startingAfter);
  os_unfair_lock_unlock(v9);
  long long v16 = *(_OWORD *)&startingAfter[0]._time;
  double v15 = *(double *)&tv_sec;
  Calendar.nextWeekend(startingAfter:direction:)(startingAfter[0], (Foundation::Calendar::SearchDirection)&v15);
  swift_unknownObjectRelease();
  if (v19) {
    return 0;
  }
  uint64_t result = 0;
  if (v6 >= *(double *)&__tp.tv_sec)
  {
    uint64_t tv_nsec = __tp.tv_nsec;
    if (v6 < *(double *)&__tp.tv_nsec + *(double *)&__tp.tv_sec)
    {
      if (a1)
      {
        id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, *(double *)&__tp.tv_sec);
        id v14 = v13;
        *a1 = v13;
      }
      if (a2) {
        *a2 = tv_nsec;
      }
      return 1;
    }
  }
  return result;
}

Foundation::Date_optional __swiftcall _NSSwiftCalendar.nextDate(after:matchingHour:minute:second:options:)(Foundation::Date after, Swift::Int matchingHour, Swift::Int minute, Swift::Int second, NSCalendarOptions options)
{
  __int16 v8 = v5;
  uint64_t v9 = v6;
  if ((v5 & 0x400) != 0)
  {
    char v10 = 0;
  }
  else if ((v5 & 0x200) != 0)
  {
    char v10 = 1;
  }
  else if ((v5 & 0x100) != 0)
  {
    char v10 = 2;
  }
  else if ((v5 & 2) != 0)
  {
    char v10 = 3;
  }
  else
  {
    char v10 = 0;
  }
  uint64_t v11 = *(void *)matchingHour;
  __dst[0] = 0uLL;
  long long v23 = 0uLL;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, (uint64_t *)&v23, 0, 1, 0, 1, 0, 1, (uint64_t)__src, 0, 1, minute, 0, second, 0, options, 0, 0, 1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  BOOL v12 = *(os_unfair_lock_s **)(v7 + OBJC_IVAR____NSSwiftCalendar__lock);
  id v13 = v12 + 4;
  id v14 = v12 + 8;
  os_unfair_lock_lock(v12 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v13, &v23);
  os_unfair_lock_unlock(v14);
  long long v22 = v23;
  uint64_t v21 = v11;
  memcpy(__dst, __src, 0x11AuLL);
  char v19 = v10;
  BOOL v18 = (v8 & 0x3000) == 0x2000;
  BOOL v17 = (v8 & 4) != 0;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)(&v21, __dst, &v19, (char *)&v18, (char *)&v17, v9);
  swift_unknownObjectRelease();
  char v15 = outlined release of DateComponents((uint64_t)__src);
  result.Foundation::Morphology::Definiteness value = *(Foundation::Date *)&v16;
  result.is_nil = v15;
  return result;
}

Foundation::Date_optional __swiftcall _NSSwiftCalendar.date(bySettingHour:minute:second:of:options:)(Swift::Int bySettingHour, Swift::Int minute, Swift::Int second, Foundation::Date of, NSCalendarOptions options)
{
  __int16 v7 = v5;
  uint64_t v11 = *(void *)options;
  if ((v5 & 2) != 0) {
    char v12 = 3;
  }
  else {
    char v12 = 0;
  }
  if ((v5 & 0x100) != 0) {
    char v13 = 2;
  }
  else {
    char v13 = v12;
  }
  if ((v5 & 0x200) != 0) {
    char v14 = 1;
  }
  else {
    char v14 = v13;
  }
  if ((v5 & 0x400) != 0) {
    char v15 = 0;
  }
  else {
    char v15 = v14;
  }
  Swift::Double v16 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____NSSwiftCalendar__lock);
  BOOL v17 = v16 + 4;
  BOOL v18 = v16 + 8;
  os_unfair_lock_lock(v16 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v17, ofa);
  os_unfair_lock_unlock(v18);
  long long v24 = *(_OWORD *)&ofa[0]._time;
  uint64_t v23 = v11;
  char v22 = v15;
  BOOL v21 = (v7 & 0x3000) == 0x2000;
  Calendar.date(bySettingHour:minute:second:of:matchingPolicy:repeatedTimePolicy:direction:)(bySettingHour, minute, second, ofa[0], (Foundation::Calendar::MatchingPolicy)&v23, (Foundation::Calendar::RepeatedTimePolicy)&v22, (Foundation::Calendar::SearchDirection)&v21);

  char v19 = swift_unknownObjectRelease();
  result.Foundation::Morphology::Definiteness value = *(Foundation::Date *)&v20;
  result.is_nil = v19;
  return result;
}

Foundation::Date_optional __swiftcall _NSSwiftCalendar.date(bySettingUnit:value:of:options:)(NSCalendarUnit bySettingUnit, Swift::Int value, Foundation::Date of, NSCalendarOptions options)
{
  char v7 = v4;
  uint64_t v9 = v5;
  double v10 = *(double *)options;
  if ((v4 & 2) != 0) {
    char v11 = 3;
  }
  else {
    char v11 = 0;
  }
  if ((v4 & 0x100) != 0) {
    char v12 = 2;
  }
  else {
    char v12 = v11;
  }
  if ((v4 & 0x200) != 0) {
    char v12 = 1;
  }
  if ((v4 & 0x400) != 0) {
    char v13 = 0;
  }
  else {
    char v13 = v12;
  }
  BOOL v14 = (v4 & 0x3000) == 0x2000;
  char v15 = _fromNSCalendarUnit(_:)(bySettingUnit, v35);
  uint64_t v17 = v35[0];
  if (v35[0] != 18)
  {
    char v23 = v13;
    BOOL v18 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____NSSwiftCalendar__lock);
    char v19 = v18 + 4;
    Swift::Double v20 = v18 + 8;
    os_unfair_lock_lock(v18 + 8);
    closure #1 in _NSSwiftCalendar.calendar.getter(v19, &v66);
    os_unfair_lock_unlock(v20);
    __src[0] = v66;
    *(void *)&__dst[0] = qword_182183628[v17];
    v27[0] = v10;
    Calendar._dateComponents(_:from:)((uint64_t *)__dst, v27, v35);
    outlined release of DateComponents((uint64_t)v35);
    char v15 = swift_unknownObjectRelease();
    switch(v17)
    {
      case 1:
        if (v39) {
          goto LABEL_15;
        }
        uint64_t v22 = v38;
        goto LABEL_47;
      case 2:
        if (v41) {
          goto LABEL_15;
        }
        uint64_t v22 = v40;
        goto LABEL_47;
      case 3:
        if (v43) {
          goto LABEL_15;
        }
        uint64_t v22 = v42;
        goto LABEL_47;
      case 4:
        if (v47) {
          goto LABEL_15;
        }
        uint64_t v22 = v46;
        goto LABEL_47;
      case 5:
        if (v49) {
          goto LABEL_15;
        }
        uint64_t v22 = v48;
        goto LABEL_47;
      case 6:
        if (v51) {
          goto LABEL_15;
        }
        uint64_t v22 = v50;
        goto LABEL_47;
      case 7:
        if (v55) {
          goto LABEL_15;
        }
        uint64_t v22 = v54;
        goto LABEL_47;
      case 8:
        if (v57) {
          goto LABEL_15;
        }
        uint64_t v22 = v56;
        goto LABEL_47;
      case 9:
        if (v59) {
          goto LABEL_15;
        }
        uint64_t v22 = v58;
        goto LABEL_47;
      case 10:
        if (v61) {
          goto LABEL_15;
        }
        uint64_t v22 = v60;
        goto LABEL_47;
      case 11:
        if (v63) {
          goto LABEL_15;
        }
        uint64_t v22 = v62;
        goto LABEL_47;
      case 12:
        if (v65) {
          goto LABEL_15;
        }
        uint64_t v22 = v64;
        goto LABEL_47;
      case 13:
        if (v53) {
          goto LABEL_15;
        }
        uint64_t v22 = v52;
        goto LABEL_47;
      case 14:
      case 15:
      case 16:
        goto LABEL_15;
      case 17:
        if (v45) {
          goto LABEL_15;
        }
        uint64_t v22 = v44;
        goto LABEL_47;
      default:
        if (v37)
        {
LABEL_15:
          if (!value)
          {
LABEL_48:
            *(double *)uint64_t v9 = v10;
            *(unsigned char *)(v9 + 8) = 0;
            goto LABEL_49;
          }
        }
        else
        {
          uint64_t v22 = v36;
LABEL_47:
          if (v22 == value) {
            goto LABEL_48;
          }
        }
        __dst[0] = 0uLL;
        v27[0] = 0.0;
        v27[1] = 0.0;
        DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, (uint64_t *)v27, 0, 1, 0, 1, 0, 1, (uint64_t)__src, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
          0,
          1,
          0,
          1,
          0,
          1,
          0,
          1,
          0,
          1,
          0,
          1);
        LOBYTE(__dst[0]) = v17;
        v67.Foundation::Morphology::Definiteness value = value;
        v67.is_nil = 0;
        DateComponents.setValue(_:for:)(v67, (Foundation::Calendar::Component)__dst);
        uint64_t v32 = 0;
        char v33 = 1;
        os_unfair_lock_lock(v20);
        closure #1 in _NSSwiftCalendar.calendar.getter(v19, &v31);
        os_unfair_lock_unlock(v20);
        memcpy(__dst, __src, 0x11AuLL);
        long long v29 = v31;
        double v28 = v10;
        memcpy(v27, __src, 0x11AuLL);
        char v26 = v23;
        BOOL v25 = v14;
        BOOL v24 = (v7 & 4) != 0;
        specialized Calendar._enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)(&v28, v27, &v26, &v25, &v24, &v29, &v32);
        swift_unknownObjectRelease();
        char v15 = outlined release of DateComponents((uint64_t)__dst);
        char v21 = v33;
        *(void *)uint64_t v9 = v32;
        *(unsigned char *)(v9 + 8) = v21;
        goto LABEL_49;
    }
  }
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
LABEL_49:
  result.Foundation::Morphology::Definiteness value = *(Foundation::Date *)&v16;
  result.is_nil = v15;
  return result;
}

Foundation::Date_optional __swiftcall _NSSwiftCalendar.date(era:year:month:day:hour:minute:second:nanosecond:)(Swift::Int era, Swift::Int year, Swift::Int month, Swift::Int day, Swift::Int hour, Swift::Int minute, Swift::Int second, Swift::Int nanosecond)
{
  __dst[0] = 0uLL;
  long long v17 = 0uLL;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, (uint64_t *)&v17, era, 0, year, 0, month, 0, (uint64_t)__src, day, 0, hour, 0, minute, 0, second, 0, nanosecond, 0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  uint64_t v9 = *(os_unfair_lock_s **)(v8 + OBJC_IVAR____NSSwiftCalendar__lock);
  double v10 = v9 + 4;
  char v11 = v9 + 8;
  os_unfair_lock_lock(v9 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v10, &v17);
  os_unfair_lock_unlock(v11);
  uint64_t v12 = *((void *)&v17 + 1);
  uint64_t ObjectType = swift_getObjectType();
  memcpy(__dst, __src, 0x11AuLL);
  (*(void (**)(long long *, uint64_t, uint64_t))(v12 + 176))(__dst, ObjectType, v12);
  swift_unknownObjectRelease();
  char v14 = outlined release of DateComponents((uint64_t)__src);
  result.Foundation::Morphology::Definiteness value = *(Foundation::Date *)&v15;
  result.is_nil = v14;
  return result;
}

Foundation::Date_optional __swiftcall _NSSwiftCalendar.date(era:yearForWeekOfYear:weekOfYear:weekday:hour:minute:second:nanosecond:)(Swift::Int era, Swift::Int yearForWeekOfYear, Swift::Int weekOfYear, Swift::Int weekday, Swift::Int hour, Swift::Int minute, Swift::Int second, Swift::Int nanosecond)
{
  __dst[0] = 0uLL;
  long long v17 = 0uLL;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, (uint64_t *)&v17, era, 0, 0, 1, 0, 1, (uint64_t)__src, 0, 1, hour, 0, minute, 0, second, 0, nanosecond, 0,
    weekday,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    weekOfYear,
    0,
    yearForWeekOfYear,
    0);
  uint64_t v9 = *(os_unfair_lock_s **)(v8 + OBJC_IVAR____NSSwiftCalendar__lock);
  double v10 = v9 + 4;
  char v11 = v9 + 8;
  os_unfair_lock_lock(v9 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v10, &v17);
  os_unfair_lock_unlock(v11);
  uint64_t v12 = *((void *)&v17 + 1);
  uint64_t ObjectType = swift_getObjectType();
  memcpy(__dst, __src, 0x11AuLL);
  (*(void (**)(long long *, uint64_t, uint64_t))(v12 + 176))(__dst, ObjectType, v12);
  swift_unknownObjectRelease();
  char v14 = outlined release of DateComponents((uint64_t)__src);
  result.Foundation::Morphology::Definiteness value = *(Foundation::Date *)&v15;
  result.is_nil = v14;
  return result;
}

id @objc _NSSwiftCalendar.date(era:year:month:day:hour:minute:second:nanosecond:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(double *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  id v17 = a1;
  a11(&v20, a3, a4, a5, a6, a7, a8, a9, a10);

  if (v21) {
    id v18 = 0;
  }
  else {
    id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v20);
  }

  return v18;
}

Swift::Bool __swiftcall _NSSwiftCalendar.isDate(_:equalTo:toUnitGranularity:)(Foundation::Date _, Foundation::Date equalTo, NSCalendarUnit toUnitGranularity)
{
  uint64_t v5 = *(void *)toUnitGranularity;
  _fromNSCalendarUnit(_:)(v3, (char *)_a);
  if (LOBYTE(_a[0]._time) == 18) {
    return 0;
  }
  char v7 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
  uint64_t v8 = v7 + 4;
  uint64_t v9 = v7 + 8;
  os_unfair_lock_lock(v7 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v8, _a);
  os_unfair_lock_unlock(v9);
  long long v13 = *(_OWORD *)&_a[0]._time;
  uint64_t v12 = v5;
  NSComparisonResult v11 = Calendar.compare(_:to:toGranularity:)(_a[0], v10, (Foundation::Calendar::Component)&v12);
  swift_unknownObjectRelease();
  return v11 == NSOrderedSame;
}

id _NSSwiftCalendar.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _NSSwiftCalendar();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void specialized _NSSwiftCalendar._enumerateDatesStarting(after:matching:options:using:)(double *a1, const void *a2, __int16 a3, uint64_t a4, void *aBlock)
{
  double v8 = *a1;
  if ((a3 & 2) != 0) {
    char v9 = 3;
  }
  else {
    char v9 = 0;
  }
  if ((a3 & 0x100) != 0) {
    char v10 = 2;
  }
  else {
    char v10 = v9;
  }
  if ((a3 & 0x200) != 0) {
    char v11 = 1;
  }
  else {
    char v11 = v10;
  }
  if ((a3 & 0x400) != 0) {
    unsigned __int8 v12 = 0;
  }
  else {
    unsigned __int8 v12 = v11;
  }
  uint64_t v13 = *(void *)(a4 + OBJC_IVAR____NSSwiftCalendar__lock);
  char v14 = (_OWORD *)(v13 + 16);
  Swift::Double v15 = (os_unfair_lock_s *)(v13 + 32);
  _Block_copy(aBlock);
  os_unfair_lock_lock(v15);
  closure #1 in _NSSwiftCalendar.calendar.getter(v14, &v22);
  os_unfair_lock_unlock(v15);
  *(_OWORD *)char v21 = v22;
  double v20 = v8;
  memcpy(__dst, a2, 0x11AuLL);
  unsigned __int8 v18 = v12;
  BOOL v17 = (a3 & 0x3000) == 0x2000;
  BOOL v16 = (a3 & 4) != 0;
  _Block_copy(aBlock);
  specialized Calendar._enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)(&v20, __dst, &v18, (unsigned __int8 *)&v17, (unsigned __int8 *)&v16, v21, (void (**)(void, void, void, void))aBlock);
  _Block_release(aBlock);
  swift_unknownObjectRelease();

  _Block_release(aBlock);
}

uint64_t AttributedString.UnicodeScalarView.index(after:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (_OWORD *)*v1;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  long long v5 = v3[2];
  long long v14 = v3[1];
  long long v15 = v5;
  long long v16 = v3[3];
  BigString.unicodeScalars.getter();
  uint64_t v6 = BigString.UnicodeScalarView.index(after:)();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  outlined release of Locale((uint64_t)v13);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    *a1 = v6;
    a1[1] = v8;
    a1[2] = v10;
    a1[3] = v12;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t AttributedString.UnicodeScalarView.index(before:)@<X0>(uint64_t *a1@<X8>)
{
  objc_super v2 = (_OWORD *)*v1;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  long long v4 = v2[2];
  long long v14 = v2[1];
  long long v15 = v4;
  long long v16 = v2[3];
  BigString.unicodeScalars.getter();
  uint64_t v5 = BigString.UnicodeScalarView.index(before:)();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  outlined release of Locale((uint64_t)v13);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    *a1 = v5;
    a1[1] = v7;
    a1[2] = v9;
    a1[3] = v11;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t AttributedString.UnicodeScalarView.index(_:offsetBy:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (_OWORD *)*v1;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  long long v5 = v3[2];
  long long v14 = v3[1];
  long long v15 = v5;
  long long v16 = v3[3];
  BigString.unicodeScalars.getter();
  uint64_t v6 = BigString.UnicodeScalarView.index(_:offsetBy:)();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  outlined release of Locale((uint64_t)v13);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    *a1 = v6;
    a1[1] = v8;
    a1[2] = v10;
    a1[3] = v12;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.contains(where:)(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (v5)
  {
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_5:
    outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v10, (uint64_t)v17);
    void v15[2] = v17[2];
    v15[3] = v18;
    uint64_t v16 = v19;
    v15[0] = v17[0];
    v15[1] = v17[1];
    unint64_t v11 = v18;
    uint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)v15);
    if (v11 >= 2)
    {
      swift_release();
      return 1;
    }
  }
  int64_t v12 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v12 >= v6) {
    goto LABEL_23;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v12);
  ++v8;
  if (v13) {
    goto LABEL_21;
  }
  int64_t v8 = v12 + 1;
  if (v12 + 1 >= v6) {
    goto LABEL_23;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v8);
  if (v13) {
    goto LABEL_21;
  }
  int64_t v8 = v12 + 2;
  if (v12 + 2 >= v6) {
    goto LABEL_23;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v8);
  if (v13) {
    goto LABEL_21;
  }
  int64_t v8 = v12 + 3;
  if (v12 + 3 >= v6) {
    goto LABEL_23;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v8);
  if (v13) {
    goto LABEL_21;
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v6)
  {
LABEL_23:
    swift_release();
    return 0;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v14);
  int64_t v8 = v14;
  if (v13)
  {
LABEL_21:
    unint64_t v5 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v8 << 6);
    goto LABEL_5;
  }
  while (1)
  {
    int64_t v8 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_23;
    }
    unint64_t v13 = *(void *)(v2 + 8 * v8);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t AttributedString.UnicodeScalarView.init(_:)@<X0>(_OWORD *a1@<X0>, void *a2@<X8>)
{
  long long v4 = a1[2];
  v51[0] = a1[1];
  v51[1] = v4;
  long long v52 = a1[3];
  v53[0] = v51[0];
  v53[1] = v4;
  v53[2] = v52;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v53, (uint64_t)v54);
  outlined retain of Locale((uint64_t)v54);
  uint64_t v5 = BigString.startIndex.getter();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  outlined release of Locale((uint64_t)v51);
  long long v12 = a1[2];
  v49[0] = a1[1];
  v49[1] = v12;
  long long v50 = a1[3];
  v55[0] = v49[0];
  v55[1] = v12;
  v55[2] = v50;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v55, (uint64_t)v56);
  outlined retain of Locale((uint64_t)v56);
  uint64_t v13 = BigString.endIndex.getter();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  outlined release of Locale((uint64_t)v49);
  uint64_t v38 = v5;
  uint64_t v39 = v7;
  uint64_t v40 = v9;
  uint64_t v41 = v11;
  uint64_t v42 = v13;
  uint64_t v43 = v15;
  uint64_t v44 = v17;
  uint64_t v45 = v19;
  long long v20 = a1[2];
  long long v46 = a1[1];
  long long v47 = v20;
  long long v48 = a1[3];
  swift_retain();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)&v36);
  uint64_t v21 = BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v28 = BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  outlined release of Locale((uint64_t)v37);
  uint64_t result = swift_release();
  *a2 = a1;
  a2[1] = v21;
  a2[2] = v23;
  a2[3] = v25;
  a2[4] = v27;
  a2[5] = v28;
  a2[6] = v30;
  a2[7] = v32;
  a2[8] = v34;
  a2[9] = 0;
  return result;
}

uint64_t AttributedString.UnicodeScalarView.init()@<X0>(uint64_t *a1@<X8>)
{
  BigString.init()();
  v41[0] = 0;
  MEMORY[0x185309530](v41, 8);
  uint64_t v2 = v41[0];
  type metadata accessor for AttributedString.Guts();
  uint64_t v3 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if (result)
  {
    long long v5 = v38[0];
    long long v6 = v38[1];
    *(_OWORD *)(v3 + 16) = v38[0];
    *(_OWORD *)(v3 + 32) = v6;
    long long v7 = v39;
    *(_OWORD *)(v3 + 48) = v39;
    *(void *)(v3 + 64) = 0;
    *(void *)(v3 + 72) = 0;
    *(void *)(v3 + 80) = 0;
    *(void *)(v3 + 88) = v2;
    v42[0] = v5;
    v42[1] = v6;
    v42[2] = v7;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v42, (uint64_t)v43);
    outlined retain of Locale((uint64_t)v43);
    uint64_t v8 = BigString.startIndex.getter();
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    outlined release of Locale((uint64_t)v38);
    long long v15 = *(_OWORD *)(v3 + 32);
    v55[0] = *(_OWORD *)(v3 + 16);
    v55[1] = v15;
    long long v56 = *(_OWORD *)(v3 + 48);
    v57[0] = v55[0];
    v57[1] = v15;
    v57[2] = v56;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v57, (uint64_t)v58);
    outlined retain of Locale((uint64_t)v58);
    uint64_t v16 = BigString.endIndex.getter();
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    outlined release of Locale((uint64_t)v55);
    uint64_t v44 = v8;
    uint64_t v45 = v10;
    uint64_t v46 = v12;
    uint64_t v47 = v14;
    uint64_t v48 = v16;
    uint64_t v49 = v18;
    uint64_t v50 = v20;
    uint64_t v51 = v22;
    long long v23 = *(_OWORD *)(v3 + 32);
    long long v52 = *(_OWORD *)(v3 + 16);
    long long v53 = v23;
    long long v54 = *(_OWORD *)(v3 + 48);
    swift_retain();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v40);
    uint64_t v24 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v26 = v25;
    uint64_t v28 = v27;
    uint64_t v30 = v29;
    uint64_t v31 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    outlined release of Locale((uint64_t)v41);
    uint64_t result = swift_release();
    *a1 = v3;
    a1[1] = v24;
    a1[2] = v26;
    a1[3] = v28;
    a1[4] = v30;
    a1[5] = v31;
    a1[6] = v33;
    a1[7] = v35;
    a1[8] = v37;
    a1[9] = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

double key path getter for AttributedString.unicodeScalars : AttributedString@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (_OWORD *)swift_retain();
  AttributedString.UnicodeScalarView.init(_:)(v2, &v5);
  uint64_t v3 = v10;
  *(void *)a1 = v5;
  *(_OWORD *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 40) = v8;
  double result = *(double *)&v9;
  *(_OWORD *)(a1 + 56) = v9;
  *(void *)(a1 + 72) = v3;
  return result;
}

uint64_t key path setter for AttributedString.unicodeScalars : AttributedString(uint64_t *a1)
{
  uint64_t v1 = a1[9];
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a1 + 1);
  long long v5 = *(_OWORD *)(a1 + 3);
  long long v6 = *(_OWORD *)(a1 + 5);
  long long v7 = *(_OWORD *)(a1 + 7);
  uint64_t v8 = v1;
  swift_retain();
  return AttributedString.unicodeScalars.setter(&v3);
}

uint64_t AttributedString.unicodeScalars.setter(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v71 = a1[1];
  v72 = (_OWORD *)*a1;
  uint64_t v69 = a1[3];
  uint64_t v70 = a1[2];
  uint64_t v67 = a1[5];
  uint64_t v68 = a1[4];
  uint64_t v65 = a1[7];
  uint64_t v66 = a1[6];
  uint64_t v64 = a1[8];
  uint64_t v3 = (_OWORD *)*v1;
  long long v4 = *(_OWORD *)(*v1 + 16);
  long long v5 = *(_OWORD *)(*v1 + 48);
  v116[1] = *(_OWORD *)(*v1 + 32);
  v116[2] = v5;
  v116[0] = v4;
  swift_retain();
  outlined retain of Locale((uint64_t)v116);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v116);
  long long v6 = v3[1];
  long long v7 = v3[3];
  v115[1] = v3[2];
  v115[2] = v7;
  v115[0] = v6;
  long long v8 = v3[1];
  v117[1] = v3[2];
  v117[2] = v7;
  v117[0] = v8;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v117, (uint64_t)v118);
  outlined retain of Locale((uint64_t)v118);
  BigString.endIndex.getter();
  outlined release of Locale((uint64_t)v115);
  swift_release();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    long long v9 = (void *)*v1;
    long long v10 = *(_OWORD *)(*v1 + 16);
    long long v11 = *(_OWORD *)(*v1 + 48);
    v114[1] = *(_OWORD *)(*v1 + 32);
    v114[2] = v11;
    v114[0] = v10;
    uint64_t v12 = v9[8];
    uint64_t v13 = v9[9];
    uint64_t v14 = v9[10];
    uint64_t v15 = v9[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v114);
    swift_unknownObjectRetain();
    uint64_t *v2 = AttributedString.Guts.init(string:runs:)(v114, v12, v13, v14, v15);
    swift_release();
  }
  v74 = v2;
  uint64_t v16 = (_OWORD *)*v2;
  long long v17 = v16[1];
  long long v18 = v16[3];
  v113[1] = v16[2];
  v113[2] = v18;
  v113[0] = v17;
  swift_retain();
  outlined retain of Locale((uint64_t)v113);
  uint64_t v19 = BigString.startIndex.getter();
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  outlined release of Locale((uint64_t)v113);
  long long v26 = v16[1];
  long long v27 = v16[3];
  v112[1] = v16[2];
  v112[2] = v27;
  v112[0] = v26;
  long long v28 = v16[1];
  v119[1] = v16[2];
  v119[2] = v27;
  v119[0] = v28;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v119, (uint64_t)v120);
  outlined retain of Locale((uint64_t)v120);
  uint64_t v29 = BigString.endIndex.getter();
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  outlined release of Locale((uint64_t)v112);
  uint64_t v101 = v19;
  uint64_t v102 = v21;
  uint64_t v103 = v23;
  uint64_t v104 = v25;
  uint64_t v105 = v29;
  uint64_t v106 = v31;
  uint64_t v107 = v33;
  uint64_t v108 = v35;
  long long v36 = v16[2];
  long long v109 = v16[1];
  long long v110 = v36;
  long long v111 = v16[3];
  swift_retain();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v77);
  BigSubstring.UnicodeScalarView.startIndex.getter();
  BigSubstring.UnicodeScalarView.endIndex.getter();
  outlined release of Locale((uint64_t)v78);
  swift_release();
  v75 = v16;
  if (one-time initialization token for currentIdentity != -1) {
    swift_once();
  }
  uint64_t v37 = (uint64_t *)(static AttributedString.currentIdentity + 16);
  uint64_t v38 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
  swift_retain();
  os_unfair_lock_lock(v38);
  closure #1 in static AttributedString._nextModifyIdentity.getter(v37, v84);
  os_unfair_lock_unlock(v38);
  swift_release();
  uint64_t v39 = v84[0];
  uint64_t v76 = v84[0];
  BigString.init()();
  v84[0] = 0;
  MEMORY[0x185309530](v84, 8);
  uint64_t v40 = v84[0];
  type metadata accessor for AttributedString.Guts();
  uint64_t v41 = swift_allocObject();
  if ((BigString.isEmpty.getter() & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  long long v42 = v80;
  *(_OWORD *)(v41 + 16) = v79;
  *(_OWORD *)(v41 + 32) = v42;
  *(_OWORD *)(v41 + 48) = v81;
  *(void *)(v41 + 64) = 0;
  *(void *)(v41 + 72) = 0;
  *(void *)(v41 + 80) = 0;
  *(void *)(v41 + 88) = v40;
  uint64_t *v74 = v41;
  swift_release();
  if (static BigString.Index.< infix(_:_:)())
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (static BigString.Index.< infix(_:_:)())
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  long long v44 = v16[1];
  long long v45 = v16[2];
  uint64_t v43 = v16 + 1;
  long long v98 = v44;
  long long v99 = v45;
  long long v100 = v43[2];
  BigString.unicodeScalars.getter();
  uint64_t v46 = BigString.UnicodeScalarView.index(roundingDown:)();
  uint64_t v48 = v47;
  uint64_t v73 = v39;
  uint64_t v50 = v49;
  uint64_t v52 = v51;
  outlined release of Locale((uint64_t)v82);
  long long v53 = v43[1];
  long long v95 = *v43;
  long long v96 = v53;
  long long v97 = v43[2];
  BigString.unicodeScalars.getter();
  uint64_t v54 = BigString.UnicodeScalarView.index(roundingDown:)();
  uint64_t v56 = v55;
  uint64_t v58 = v57;
  uint64_t v60 = v59;
  outlined release of Locale((uint64_t)v83);
  v85[0] = v46;
  v85[1] = v48;
  v85[2] = v50;
  v85[3] = v52;
  v85[4] = v54;
  v85[5] = v56;
  v85[6] = v58;
  v85[7] = v60;
  uint64_t v87 = v71;
  uint64_t v88 = v70;
  uint64_t v89 = v69;
  uint64_t v90 = v68;
  uint64_t v91 = v67;
  uint64_t v92 = v66;
  uint64_t v93 = v65;
  uint64_t v94 = v64;
  long long v61 = v72[1];
  long long v62 = v72[3];
  v86[1] = v72[2];
  v86[2] = v62;
  v86[0] = v61;
  swift_retain();
  outlined retain of Locale((uint64_t)v86);
  BigSubstring.UnicodeScalarView.init(_unchecked:in:)();
  specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)((uint64_t)v85);
  swift_release();
  outlined release of Locale((uint64_t)v84);
  if (v76 == v73)
  {
    uint64_t *v74 = (uint64_t)v75;
    swift_release();
    return swift_release();
  }
LABEL_13:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t AttributedString.unicodeScalars.modify(void *a1)
{
  uint64_t v3 = (char *)malloc(0x290uLL);
  *a1 = v3;
  long long v4 = v3 + 256;
  long long v5 = v3 + 304;
  long long v6 = (long long *)(v3 + 496);
  uint64_t v7 = (uint64_t)(v3 + 592);
  *((void *)v3 + 80) = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    long long v8 = (void *)*v1;
    long long v10 = *(_OWORD *)(*v1 + 32);
    long long v9 = *(_OWORD *)(*v1 + 48);
    *((_OWORD *)v3 + 25) = *(_OWORD *)(*v1 + 16);
    *((_OWORD *)v3 + 26) = v10;
    *((_OWORD *)v3 + 27) = v9;
    uint64_t v11 = v8[8];
    uint64_t v12 = v8[9];
    uint64_t v59 = v8[10];
    uint64_t v57 = v8[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)(v3 + 400));
    swift_unknownObjectRetain();
    uint64_t *v1 = AttributedString.Guts.init(string:runs:)((_OWORD *)v3 + 25, v11, v12, v59, v57);
    swift_release();
  }
  uint64_t v56 = v1;
  uint64_t v13 = (_OWORD *)*v1;
  long long v15 = *(_OWORD *)(*v1 + 32);
  long long v14 = *(_OWORD *)(*v1 + 48);
  _OWORD *v4 = *(_OWORD *)(*v1 + 16);
  *((_OWORD *)v3 + 17) = v15;
  *((_OWORD *)v3 + 18) = v14;
  swift_retain();
  outlined retain of Locale((uint64_t)v4);
  uint64_t v58 = BigString.startIndex.getter();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  outlined release of Locale((uint64_t)v4);
  long long v23 = v13[2];
  long long v22 = v13[3];
  *long long v5 = v13[1];
  *((_OWORD *)v3 + 20) = v23;
  *((_OWORD *)v3 + 21) = v22;
  long long v24 = v13[1];
  long long v25 = v13[3];
  *((_OWORD *)v3 + 32) = v13[2];
  *((_OWORD *)v3 + 33) = v25;
  *long long v6 = v24;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v6, v7);
  outlined retain of Locale(v7);
  uint64_t v26 = BigString.endIndex.getter();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  outlined release of Locale((uint64_t)v5);
  *((void *)v3 + 24) = v58;
  *((void *)v3 + 25) = v17;
  *((void *)v3 + 26) = v19;
  *((void *)v3 + 27) = v21;
  *((void *)v3 + 28) = v26;
  *((void *)v3 + 29) = v28;
  *((void *)v3 + 30) = v30;
  *((void *)v3 + 31) = v32;
  long long v34 = v13[2];
  long long v33 = v13[3];
  *((_OWORD *)v3 + 22) = v13[1];
  *((_OWORD *)v3 + 23) = v34;
  *((_OWORD *)v3 + 24) = v33;
  swift_retain();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)(v3 + 544));
  uint64_t v35 = BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v42 = BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  outlined release of Locale((uint64_t)v3);
  swift_release();
  *((void *)v3 + 14) = v13;
  *((void *)v3 + 15) = v35;
  *((void *)v3 + 16) = v37;
  *((void *)v3 + 17) = v39;
  *((void *)v3 + 18) = v41;
  *((void *)v3 + 19) = v42;
  *((void *)v3 + 20) = v44;
  *((void *)v3 + 21) = v46;
  *((void *)v3 + 22) = v48;
  if (one-time initialization token for currentIdentity != -1) {
    swift_once();
  }
  uint64_t v49 = (uint64_t *)(static AttributedString.currentIdentity + 16);
  uint64_t v50 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
  swift_retain();
  os_unfair_lock_lock(v50);
  closure #1 in static AttributedString._nextModifyIdentity.getter(v49, &v60);
  os_unfair_lock_unlock(v50);
  swift_release();
  uint64_t v51 = v60;
  *((void *)v3 + 81) = v60;
  *((void *)v3 + 23) = v51;
  BigString.init()();
  *((void *)v3 + 79) = 0;
  MEMORY[0x185309530](v3 + 632, 8);
  uint64_t v52 = *((void *)v3 + 79);
  type metadata accessor for AttributedString.Guts();
  uint64_t v53 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if (result)
  {
    long long v55 = *((_OWORD *)v3 + 29);
    *(_OWORD *)(v53 + 16) = *((_OWORD *)v3 + 28);
    *(_OWORD *)(v53 + 32) = v55;
    *(_OWORD *)(v53 + 48) = *((_OWORD *)v3 + 30);
    *(void *)(v53 + 64) = 0;
    *(void *)(v53 + 72) = 0;
    *(void *)(v53 + 80) = 0;
    *(void *)(v53 + 88) = v52;
    uint64_t *v56 = v53;
    swift_release();
    return (uint64_t)AttributedString.unicodeScalars.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void AttributedString.unicodeScalars.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*(void *)(*a1 + 184) == *(void *)(*a1 + 648))
  {
    **(void **)(v1 + 640) = *(void *)(v1 + 112);
    swift_retain();
    swift_release();
    swift_release();
    free((void *)v1);
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t AttributedString.UnicodeScalarView.replaceSubrange<A>(_:with:)(uint64_t a1, _OWORD *a2, ValueMetadata *a3)
{
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v52 = a3;
  uint64_t v7 = *(_OWORD **)v3;
  long long v8 = *(_OWORD *)(*(void *)v3 + 32);
  long long v88 = *(_OWORD *)(*(void *)v3 + 16);
  long long v89 = v8;
  long long v90 = v7[3];
  BigString.unicodeScalars.getter();
  uint64_t v9 = BigString.UnicodeScalarView.index(roundingDown:)();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  outlined release of Locale((uint64_t)v61);
  long long v16 = v7[2];
  long long v85 = v7[1];
  long long v86 = v16;
  long long v87 = v7[3];
  BigString.unicodeScalars.getter();
  uint64_t v17 = BigString.UnicodeScalarView.index(roundingDown:)();
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  outlined release of Locale((uint64_t)v62);
  v66[0] = v9;
  v66[1] = v11;
  v66[2] = v13;
  v66[3] = v15;
  v66[4] = v17;
  v66[5] = v19;
  v66[6] = v21;
  v66[7] = v23;
  if (v52 == &type metadata for AttributedString.UnicodeScalarView)
  {
    long long v24 = *(_OWORD **)a2;
    long long v25 = *(_OWORD *)((char *)a2 + 24);
    v65[0] = *(_OWORD *)((char *)a2 + 8);
    v65[1] = v25;
    long long v26 = *(_OWORD *)((char *)a2 + 56);
    v65[2] = *(_OWORD *)((char *)a2 + 40);
    v65[3] = v26;
    long long v27 = v24[1];
    long long v28 = v24[3];
    v64[1] = v24[2];
    v64[2] = v28;
    v64[0] = v27;
    swift_retain();
    outlined retain of Locale((uint64_t)v64);
    BigSubstring.UnicodeScalarView.init(_unchecked:in:)();
    specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)((uint64_t)v66);
    swift_release();
    uint64_t v29 = v53;
  }
  else
  {
    if ((ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<AttributedString.UnicodeScalarView>) != v52) {
      return AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)((uint64_t)v66, a2, (uint64_t)v52);
    }
    long long v30 = a2[3];
    long long v54 = a2[2];
    long long v55 = v30;
    long long v31 = a2[8];
    long long v32 = a2[6];
    long long v59 = a2[7];
    long long v60 = v31;
    long long v33 = a2[5];
    long long v56 = a2[4];
    long long v57 = v33;
    long long v58 = v32;
    long long v34 = a2[1];
    v53[0] = *a2;
    v53[1] = v34;
    long long v78 = v53[0];
    long long v79 = v34;
    long long v80 = v54;
    long long v81 = v55;
    uint64_t v35 = (_OWORD *)v56;
    long long v36 = *(_OWORD *)(v56 + 32);
    long long v82 = *(_OWORD *)(v56 + 16);
    long long v83 = v36;
    long long v84 = *(_OWORD *)(v56 + 48);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v53);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v53);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v53);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v53);
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v63);
    uint64_t v37 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v39 = v38;
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    uint64_t v44 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v46 = v45;
    uint64_t v48 = v47;
    uint64_t v50 = v49;
    outlined release of Locale((uint64_t)v64);
    outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v53);
    outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v53);
    uint64_t v70 = v37;
    uint64_t v71 = v39;
    uint64_t v72 = v41;
    uint64_t v73 = v43;
    uint64_t v74 = v44;
    uint64_t v75 = v46;
    uint64_t v76 = v48;
    uint64_t v77 = v50;
    long long v51 = v35[2];
    long long v67 = v35[1];
    long long v68 = v51;
    long long v69 = v35[3];
    v91[1] = v51;
    v91[2] = v69;
    v91[0] = v67;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v91, (uint64_t)v92);
    outlined retain of Locale((uint64_t)v92);
    BigSubstring.UnicodeScalarView.init(_unchecked:in:)();
    outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v53);
    specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)((uint64_t)v66);
    outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v53);
    uint64_t v29 = v65;
  }
  return outlined release of Locale((uint64_t)v29);
}

__n128 AttributedString.UnicodeScalarView.startIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 8);
  long long v3 = *(_OWORD *)(v1 + 24);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 AttributedString.UnicodeScalarView.endIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 40);
  long long v3 = *(_OWORD *)(v1 + 56);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t AttributedString.UnicodeScalarView._count.getter()
{
  uint64_t v1 = *(_OWORD **)v0;
  long long v2 = *(_OWORD *)(v0 + 24);
  long long v11 = *(_OWORD *)(v0 + 8);
  long long v12 = v2;
  long long v3 = *(_OWORD *)(v0 + 56);
  long long v13 = *(_OWORD *)(v0 + 40);
  long long v14 = v3;
  long long v4 = v1[2];
  long long v8 = v1[1];
  long long v9 = v4;
  long long v10 = v1[3];
  v15[0] = v8;
  v15[1] = v4;
  void v15[2] = v10;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v15, (uint64_t)v16);
  outlined retain of Locale((uint64_t)v16);
  BigSubstring.UnicodeScalarView.init(_unchecked:in:)();
  uint64_t v5 = BigSubstring.UnicodeScalarView.count.getter();
  outlined release of Locale((uint64_t)&v7);
  return v5;
}

uint64_t AttributedString.UnicodeScalarView._index(_:offsetBy:limitedBy:)@<X0>(uint64_t *a1@<X8>)
{
  long long v2 = (_OWORD *)*v1;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  long long v4 = v2[2];
  long long v14 = v2[1];
  long long v15 = v4;
  long long v16 = v2[3];
  BigString.unicodeScalars.getter();
  uint64_t v5 = BigString.UnicodeScalarView.index(_:offsetBy:limitedBy:)();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t result = outlined release of Locale((uint64_t)v13);
  if (v11 == 2)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    a1[3] = 2;
    return result;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_15;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  *a1 = v5;
  a1[1] = v7;
  a1[2] = v9;
  a1[3] = v11;
  return result;
}

uint64_t AttributedString.UnicodeScalarView._distance(from:to:)()
{
  long long v4 = (_OWORD *)*v0;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    long long v2 = v4[2];
    long long v6 = v4[1];
    long long v7 = v2;
    long long v8 = v4[3];
    BigString.unicodeScalars.getter();
    uint64_t v3 = BigString.UnicodeScalarView.distance(from:to:)();
    outlined release of Locale((uint64_t)v5);
    return v3;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t AttributedString.UnicodeScalarView.subscript.getter()
{
  uint64_t v1 = (_OWORD *)*v0;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result)
    {
      long long v3 = v1[2];
      v5[3] = v1[1];
      v5[4] = v3;
      v5[5] = v1[3];
      BigString.unicodeScalars.getter();
      uint64_t v4 = BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v5);
      return v4;
    }
  }
  __break(1u);
  return result;
}

uint64_t AttributedString.UnicodeScalarView.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v9 = a1[6];
  uint64_t v10 = a1[7];
  uint64_t v11 = (_OWORD *)*v2;
  uint64_t v30 = *a1;
  uint64_t v31 = v4;
  uint64_t v32 = v5;
  uint64_t v33 = v6;
  uint64_t v34 = v8;
  uint64_t v35 = v7;
  uint64_t v36 = v9;
  uint64_t v37 = v10;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if ((result & 1) == 0)
    {
      long long v13 = v11[2];
      long long v38 = v11[1];
      long long v39 = v13;
      long long v40 = v11[3];
      swift_retain_n();
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v28);
      uint64_t v14 = BigSubstring.UnicodeScalarView.startIndex.getter();
      uint64_t v16 = v15;
      uint64_t v18 = v17;
      uint64_t v20 = v19;
      uint64_t v21 = BigSubstring.UnicodeScalarView.endIndex.getter();
      uint64_t v23 = v22;
      uint64_t v25 = v24;
      uint64_t v27 = v26;
      outlined release of Locale((uint64_t)v29);
      uint64_t result = swift_release();
      a2[8] = (uint64_t)v11;
      a2[9] = v14;
      a2[10] = v16;
      a2[11] = v18;
      a2[12] = v20;
      a2[13] = v21;
      a2[14] = v23;
      a2[15] = v25;
      a2[16] = v27;
      a2[17] = 0;
      *a2 = v14;
      a2[1] = v16;
      a2[2] = v18;
      a2[3] = v20;
      a2[4] = v21;
      a2[5] = v23;
      a2[6] = v25;
      a2[7] = v27;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString.UnicodeScalarView@<X0>(uint64_t *a1@<X8>)
{
  long long v2 = (_OWORD *)*v1;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  long long v4 = v2[2];
  long long v14 = v2[1];
  long long v15 = v4;
  long long v16 = v2[3];
  BigString.unicodeScalars.getter();
  uint64_t v5 = BigString.UnicodeScalarView.index(before:)();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  outlined release of Locale((uint64_t)v13);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    *a1 = v5;
    a1[1] = v7;
    a1[2] = v9;
    a1[3] = v11;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.UnicodeScalarView(uint64_t *a1)
{
  long long v3 = (_OWORD *)*v1;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  long long v5 = v3[2];
  long long v14 = v3[1];
  long long v15 = v5;
  long long v16 = v3[3];
  BigString.unicodeScalars.getter();
  uint64_t v6 = BigString.UnicodeScalarView.index(before:)();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  outlined release of Locale((uint64_t)v13);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    *a1 = v6;
    a1[1] = v8;
    a1[2] = v10;
    a1[3] = v12;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance AttributedString.UnicodeScalarView@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  uint64_t v7 = *(void *)(v1 + 48);
  uint64_t v8 = *(void *)(v1 + 56);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  long long v9 = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 64) = v9;
  *(void *)(a1 + 80) = v2;
  *(void *)(a1 + 88) = v3;
  *(void *)(a1 + 96) = v4;
  *(void *)(a1 + 104) = v5;
  *(void *)(a1 + 112) = v6;
  *(void *)(a1 + 120) = v7;
  *(void *)(a1 + 128) = v8;
  *(void *)(a1 + 136) = v9;
  return swift_retain();
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance AttributedString.UnicodeScalarView()
{
  return static BigString.Index.== infix(_:_:)();
}

uint64_t protocol witness for Collection.count.getter in conformance AttributedString.UnicodeScalarView()
{
  uint64_t v1 = *(_OWORD **)v0;
  long long v2 = *(_OWORD *)(v0 + 24);
  long long v11 = *(_OWORD *)(v0 + 8);
  long long v12 = v2;
  long long v3 = *(_OWORD *)(v0 + 56);
  long long v13 = *(_OWORD *)(v0 + 40);
  long long v14 = v3;
  long long v4 = v1[2];
  long long v8 = v1[1];
  long long v9 = v4;
  long long v10 = v1[3];
  v15[0] = v8;
  v15[1] = v4;
  void v15[2] = v10;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v15, (uint64_t)v16);
  outlined retain of Locale((uint64_t)v16);
  BigSubstring.UnicodeScalarView.init(_unchecked:in:)();
  uint64_t v5 = BigSubstring.UnicodeScalarView.count.getter();
  outlined release of Locale((uint64_t)&v7);
  return v5;
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance AttributedString.UnicodeScalarView(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 3;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance AttributedString.UnicodeScalarView@<X0>(uint64_t *a1@<X8>)
{
  long long v3 = (_OWORD *)*v1;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  long long v5 = v3[2];
  long long v14 = v3[1];
  long long v15 = v5;
  long long v16 = v3[3];
  BigString.unicodeScalars.getter();
  uint64_t v6 = BigString.UnicodeScalarView.index(_:offsetBy:)();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  outlined release of Locale((uint64_t)v13);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    *a1 = v6;
    a1[1] = v8;
    a1[2] = v10;
    a1[3] = v12;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance AttributedString.UnicodeScalarView()
{
  long long v4 = (_OWORD *)*v0;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    long long v2 = v4[2];
    long long v6 = v4[1];
    long long v7 = v2;
    long long v8 = v4[3];
    BigString.unicodeScalars.getter();
    uint64_t v3 = BigString.UnicodeScalarView.distance(from:to:)();
    outlined release of Locale((uint64_t)v5);
    return v3;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance AttributedString.UnicodeScalarView()
{
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

{
  uint64_t result;

  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
LABEL_5:
  }
    __break(1u);
  return result;
}

{
  uint64_t result;

  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance AttributedString.UnicodeScalarView@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (_OWORD *)*v1;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  long long v5 = v3[2];
  long long v14 = v3[1];
  long long v15 = v5;
  long long v16 = v3[3];
  BigString.unicodeScalars.getter();
  uint64_t v6 = BigString.UnicodeScalarView.index(after:)();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  outlined release of Locale((uint64_t)v13);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    *a1 = v6;
    a1[1] = v8;
    a1[2] = v10;
    a1[3] = v12;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString.UnicodeScalarView()
{
  long long v1 = v0[3];
  v5[2] = v0[2];
  v5[3] = v1;
  v5[4] = v0[4];
  long long v2 = v0[1];
  v5[0] = *v0;
  v5[1] = v2;
  uint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v5);
  outlined release of AttributedString.Runs((uint64_t)v5);
  return v3;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AttributedString.UnicodeScalarView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AttributedString.UnicodeScalarView@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySJqd__Isgyrzo_10Foundation16AttributedStringV13CharacterViewVABsAG_pALRszr__lIetMggrzo_Tp5(a1, a2);
}

Swift::Void __swiftcall AttributedString.UnicodeScalarView._ensureUniqueReference()()
{
  long long v1 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    long long v2 = (void *)*v0;
    long long v3 = *(_OWORD *)(*v0 + 16);
    long long v4 = *(_OWORD *)(*v0 + 48);
    long long v14 = *(_OWORD *)(*v0 + 32);
    long long v15 = v4;
    long long v13 = v3;
    uint64_t v5 = v2[8];
    uint64_t v6 = v2[9];
    uint64_t v7 = v2[10];
    uint64_t v8 = v2[11];
    type metadata accessor for AttributedString.Guts();
    uint64_t v9 = swift_allocObject();
    outlined retain of Locale((uint64_t)&v13);
    swift_unknownObjectRetain();
    int v10 = BigString.isEmpty.getter();
    if (v5)
    {
      unint64_t v11 = swift_unknownObjectRetain_n();
      specialized Rope._endPath.getter(v11);
      swift_unknownObjectRelease_n();
      if ((((v7 == 0) ^ v10) & 1) == 0)
      {
LABEL_4:
        long long v12 = v14;
        *(_OWORD *)(v9 + 16) = v13;
        *(_OWORD *)(v9 + 32) = v12;
        *(_OWORD *)(v9 + 48) = v15;
        *(void *)(v9 + 64) = v5;
        *(void *)(v9 + 72) = v6;
        *(void *)(v9 + 80) = v7;
        *(void *)(v9 + 88) = v8;
        uint64_t *v1 = v9;
        swift_release();
        return;
      }
    }
    else
    {
      swift_unknownObjectRetain();
      specialized Rope._endPath.getter(0);
      swift_unknownObjectRelease();
      if (v10) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t AttributedString.UnicodeScalarView._mutateStringContents(in:attributes:with:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, void))
{
  uint64_t v5 = v4;
  uint64_t v8 = *v4;
  int64_t v9 = BigString.Index.utf8Offset.getter();
  uint64_t v10 = BigString.Index.utf8Offset.getter();
  uint64_t v513 = v8;
  uint64_t v510 = v9;
  if (v9 == v10)
  {
    int64_t v552 = v9;
    goto LABEL_189;
  }
  uint64_t v553 = v10;
  uint64_t v509 = a1;
  v511 = a4;
  v512 = v4;
  *(void *)&v600[0] = v9;
  unint64_t v11 = *(void *)(v8 + 64);
  uint64_t v12 = *(void *)(v8 + 72);
  uint64_t v14 = *(void *)(v8 + 80);
  uint64_t v13 = *(void *)(v8 + 88);
  swift_unknownObjectRetain_n();
  uint64_t v15 = specialized Rope.find<A>(at:in:preferEnd:)(v9, 0, v11, v12, v14, v13);
  unint64_t v17 = v16;
  uint64_t v19 = v18;
  swift_unknownObjectRelease();
  swift_unknownObjectRetain();
  specialized Rope.offset<A>(of:in:)(v15, v17, v19, v11, v12, v14, v13);
  swift_unknownObjectRelease_n();
  uint64_t v20 = *(void *)(v8 + 64);
  uint64_t v21 = *(void *)(v8 + 72);
  uint64_t v23 = *(void *)(v8 + 80);
  uint64_t v22 = *(void *)(v8 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v15, v17, v19, v20, v21, v23, v22);
  uint64_t v558 = v24;
  swift_unknownObjectRelease();
  uint64_t v25 = swift_bridgeObjectRetain();
  uint64_t v26 = specialized _NativeDictionary.filter(_:)(v25);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRetain();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v28 = 0;
  *(void *)&long long v659 = result;
  uint64_t v29 = 1 << *(unsigned char *)(v26 + 32);
  uint64_t v30 = -1;
  if (v29 < 64) {
    uint64_t v30 = ~(-1 << v29);
  }
  uint64_t v31 = v26 + 64;
  unint64_t v32 = v30 & *(void *)(v26 + 64);
  int64_t v33 = (unint64_t)(v29 + 63) >> 6;
  while (1)
  {
    if (v32)
    {
      unint64_t v34 = __clz(__rbit64(v32));
      v32 &= v32 - 1;
      unint64_t v35 = v34 | (v28 << 6);
      goto LABEL_7;
    }
    int64_t v39 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
      __break(1u);
LABEL_465:
      swift_release();
      uint64_t v451 = *(void *)(v558 + 64);
      uint64_t v452 = 1 << *(unsigned char *)(v558 + 32);
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v453 = 0;
      uint64_t v454 = -1;
      if (v452 < 64) {
        uint64_t v454 = ~(-1 << v452);
      }
      unint64_t v455 = v454 & v451;
      unint64_t v456 = (unint64_t)(v452 + 63) >> 6;
      int64_t v551 = v456;
      unint64_t v532 = v456 - 5;
      uint64_t v537 = v558 + 64;
      unint64_t v527 = v456 - 1;
      while (1)
      {
        uint64_t v8 = v513;
        int64_t v9 = v510;
        if (v455) {
          break;
        }
        while (1)
        {
          int64_t v462 = v453 + 1;
          if (__OFADD__(v453, 1)) {
            goto LABEL_609;
          }
          if (v462 < v551)
          {
            unint64_t v463 = *(void *)(v537 + 8 * v462);
            if (v463) {
              goto LABEL_476;
            }
            if ((uint64_t)(v453 + 2) >= v551)
            {
              ++v453;
            }
            else
            {
              unint64_t v463 = *(void *)(v537 + 8 * (v453 + 2));
              if (v463)
              {
                int64_t v462 = v453 + 2;
                goto LABEL_476;
              }
              if ((uint64_t)(v453 + 3) >= v551)
              {
                v453 += 2;
              }
              else
              {
                unint64_t v463 = *(void *)(v537 + 8 * (v453 + 3));
                if (v463)
                {
                  int64_t v462 = v453 + 3;
LABEL_476:
                  unint64_t v455 = (v463 - 1) & v463;
                  unint64_t v458 = __clz(__rbit64(v463)) + (v462 << 6);
                  unint64_t v453 = v462;
LABEL_472:
                  uint64_t v459 = *(void *)(v558 + 56);
                  v460 = (void *)(*(void *)(v558 + 48) + 16 * v458);
                  uint64_t v461 = v460[1];
                  *(void *)&long long v574 = *v460;
                  *((void *)&v574 + 1) = v461;
                  outlined init with copy of AttributedString._AttributeValue(v459 + 72 * v458, (uint64_t)&v575);
                  swift_bridgeObjectRetain();
                  goto LABEL_482;
                }
                int64_t v462 = v453 + 4;
                if ((uint64_t)(v453 + 4) >= v551)
                {
                  v453 += 3;
                }
                else
                {
                  unint64_t v463 = *(void *)(v537 + 8 * v462);
                  if (v463) {
                    goto LABEL_476;
                  }
                  while (v532 != v453)
                  {
                    unint64_t v463 = *(void *)(v558 + 104 + 8 * v453++);
                    if (v463)
                    {
                      int64_t v462 = v453 + 4;
                      uint64_t v8 = v513;
                      int64_t v9 = v510;
                      goto LABEL_476;
                    }
                  }
                  unint64_t v453 = v527;
                  uint64_t v8 = v513;
                  int64_t v9 = v510;
                }
              }
            }
          }
          unint64_t v455 = 0;
          long long v577 = 0u;
          memset(v578, 0, sizeof(v578));
          unsigned long long v575 = 0u;
          long long v576 = 0u;
          long long v574 = 0u;
LABEL_482:
          outlined init with take of (key: String, value: AttributedString._AttributeValue)?((uint64_t)&v574, (uint64_t)&v591);
          uint64_t v115 = *((void *)&v591 + 1);
          if (!*((void *)&v591 + 1)) {
            goto LABEL_508;
          }
          uint64_t v464 = v591;
          *(_OWORD *)v589 = v594;
          *(_OWORD *)&v589[16] = v595;
          uint64_t v590 = v596;
          long long v587 = v592;
          long long v588 = v593;
          uint64_t v465 = *((void *)&v594 + 1);
          uint64_t v466 = v595;
          if ((void)v595 == 1) {
            break;
          }
          long long v574 = *(_OWORD *)&v589[8];
          long long v584 = 0uLL;
          outlined copy of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v589[8], *(uint64_t *)&v589[16]);
          outlined copy of AttributedString.AttributeRunBoundaries?(v465, v466);
          char v467 = specialized static AttributedString.AttributeRunBoundaries.== infix(_:_:)(&v574, &v584);
          swift_bridgeObjectRelease();
          outlined consume of AttributedString.AttributeRunBoundaries?(v465, v466);
          if ((v467 & 1) == 0) {
            goto LABEL_469;
          }
          specialized Dictionary.subscript.getter(v464, v115, v28, (uint64_t)&v584);
          swift_bridgeObjectRelease();
          outlined init with copy of AttributedString._AttributeValue((uint64_t)&v587, (uint64_t)v583);
          outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v584, (uint64_t)&v574);
          outlined init with copy of AttributedString._AttributeValue?((uint64_t)v583, (uint64_t)&v578[8]);
          int64_t v9 = v510;
          if (*((void *)&v575 + 1))
          {
            outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v574, (uint64_t)v573);
            uint64_t v8 = v513;
            if (!*((void *)&v579 + 1)) {
              goto LABEL_562;
            }
            long long v570 = v580;
            long long v571 = v581;
            uint64_t v572 = v582;
            long long v568 = *(_OWORD *)&v578[8];
            long long v569 = v579;
            char v468 = specialized static AttributedString._AttributeValue.== infix(_:_:)((uint64_t)v573, (uint64_t)&v568);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v573);
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v568);
            outlined destroy of Any?((uint64_t)&v574, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)v583, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v584, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if ((v468 & 1) == 0) {
              goto LABEL_564;
            }
          }
          else
          {
            uint64_t v8 = v513;
            if (*((void *)&v579 + 1)) {
              goto LABEL_563;
            }
            outlined destroy of Any?((uint64_t)&v574, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)v583, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v584, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          }
          uint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)&v587);
          if (v455) {
            goto LABEL_471;
          }
        }
        outlined consume of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v589[8], 1);
        outlined consume of AttributedString.AttributeRunBoundaries?(0, 0);
LABEL_469:
        swift_bridgeObjectRelease();
        uint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)&v587);
      }
LABEL_471:
      unint64_t v457 = __clz(__rbit64(v455));
      v455 &= v455 - 1;
      unint64_t v458 = v457 | (v453 << 6);
      goto LABEL_472;
    }
    if (v39 >= v33) {
      break;
    }
    unint64_t v40 = *(void *)(v31 + 8 * v39);
    ++v28;
    if (!v40)
    {
      uint64_t v28 = v39 + 1;
      if (v39 + 1 >= v33) {
        break;
      }
      unint64_t v40 = *(void *)(v31 + 8 * v28);
      if (!v40)
      {
        uint64_t v28 = v39 + 2;
        if (v39 + 2 >= v33) {
          break;
        }
        unint64_t v40 = *(void *)(v31 + 8 * v28);
        if (!v40)
        {
          uint64_t v28 = v39 + 3;
          if (v39 + 3 >= v33) {
            break;
          }
          unint64_t v40 = *(void *)(v31 + 8 * v28);
          if (!v40)
          {
            uint64_t v28 = v39 + 4;
            if (v39 + 4 >= v33) {
              break;
            }
            unint64_t v40 = *(void *)(v31 + 8 * v28);
            if (!v40)
            {
              int64_t v41 = v39 + 5;
              if (v41 >= v33) {
                break;
              }
              unint64_t v40 = *(void *)(v31 + 8 * v41);
              if (!v40)
              {
                while (1)
                {
                  uint64_t v28 = v41 + 1;
                  if (__OFADD__(v41, 1)) {
                    break;
                  }
                  if (v28 >= v33) {
                    goto LABEL_27;
                  }
                  unint64_t v40 = *(void *)(v31 + 8 * v28);
                  ++v41;
                  if (v40) {
                    goto LABEL_26;
                  }
                }
LABEL_585:
                __break(1u);
LABEL_586:
                __break(1u);
LABEL_587:
                __break(1u);
LABEL_588:
                __break(1u);
LABEL_589:
                __break(1u);
                goto LABEL_590;
              }
              uint64_t v28 = v41;
            }
          }
        }
      }
    }
LABEL_26:
    unint64_t v32 = (v40 - 1) & v40;
    unint64_t v35 = __clz(__rbit64(v40)) + (v28 << 6);
LABEL_7:
    uint64_t v36 = (unint64_t *)(*(void *)(v26 + 48) + 16 * v35);
    unint64_t v37 = *v36;
    unint64_t v38 = v36[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)((unint64_t *)&v574, v37, v38);
    uint64_t result = swift_bridgeObjectRelease();
  }
LABEL_27:
  uint64_t result = swift_release();
  uint64_t v42 = v659;
  *(void *)&long long v591 = v659;
  if (v9 < 0)
  {
LABEL_575:
    __break(1u);
LABEL_576:
    __break(1u);
LABEL_577:
    __break(1u);
LABEL_578:
    __break(1u);
LABEL_579:
    __break(1u);
    goto LABEL_580;
  }
  uint64_t v43 = v26;
  if (specialized Range.isEmpty.getter(0, v9))
  {
    uint64_t v44 = (void *)swift_retain();
    AttributedString._InternalRunsSlice.startIndex.getter(v44, 0, (unint64_t *)&v601);
    long long v45 = v601;
    long long v46 = v602;
    uint64_t v47 = v603;
  }
  else
  {
    uint64_t v48 = *(void *)(v8 + 64);
    uint64_t v49 = *(void *)(v8 + 72);
    uint64_t v50 = *(void *)(v8 + 80);
    uint64_t v51 = *(void *)(v8 + 88);
    swift_unknownObjectRetain();
    swift_retain();
    AttributedString._InternalRuns.endIndex.getter(v48, v49, v50, v51, &v601);
    long long v533 = v602;
    long long v538 = v601;
    uint64_t v47 = v603;
    swift_unknownObjectRelease();
    long long v46 = v533;
    long long v45 = v538;
  }
  long long v659 = v45;
  long long v660 = v46;
  unint64_t v52 = *(void *)(v8 + 64);
  uint64_t v53 = *(void *)(v8 + 72);
  uint64_t v54 = *(void *)(v8 + 80);
  uint64_t v55 = *(void *)(v8 + 88);
  char Enum = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
  swift_unknownObjectRetain();
  char v539 = Enum;
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, Enum & 1, v52, v53, v54, v55, (uint64_t *)&v574);
  uint64_t v57 = v576;
  swift_unknownObjectRelease();
  if (v57 >= v47 || !*(void *)(v42 + 16))
  {
LABEL_85:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)&long long v591 = v553;
    if (__OFSUB__(v553, 1))
    {
LABEL_580:
      __break(1u);
      goto LABEL_581;
    }
    unint64_t v99 = *(void *)(v8 + 64);
    uint64_t v100 = *(void *)(v8 + 72);
    uint64_t v101 = *(void *)(v8 + 80);
    uint64_t v102 = *(void *)(v8 + 88);
    swift_unknownObjectRetain();
    AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v553 - 1, v539 & 1, v99, v100, v101, v102, (uint64_t *)&v574);
    long long v559 = v574;
    unsigned long long v545 = v575;
    uint64_t v103 = v576;
    swift_unknownObjectRelease();
    v677[0] = v559;
    v677[1] = v545;
    uint64_t v678 = v103;
    uint64_t v104 = *(void *)(v8 + 64);
    uint64_t v105 = *(void *)(v8 + 72);
    uint64_t v106 = *(void *)(v8 + 80);
    uint64_t v107 = *(void *)(v8 + 88);
    swift_unknownObjectRetain();
    AttributedString._InternalRuns.subscript.getter((unint64_t)v677, v104, v105, v106, v107);
    uint64_t v109 = v108;
    swift_unknownObjectRelease();
    uint64_t v110 = AttributedString._AttributeStorage.filterWithoutInvalidatingDependents(_:)((uint64_t (*)(uint64_t, uint64_t, long long *))closure #1 in AttributedString.Guts._characterInvalidatedAttributes(at:), 0, v109);
    uint64_t v546 = v111;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t result = Set.init(minimumCapacity:)();
    int64_t v112 = 0;
    *(void *)&long long v659 = result;
    uint64_t v113 = 1 << *(unsigned char *)(v110 + 32);
    uint64_t v114 = -1;
    if (v113 < 64) {
      uint64_t v114 = ~(-1 << v113);
    }
    uint64_t v115 = v110 + 64;
    unint64_t v116 = v114 & *(void *)(v110 + 64);
    int64_t v117 = (unint64_t)(v113 + 63) >> 6;
    while (1)
    {
      if (v116)
      {
        unint64_t v118 = __clz(__rbit64(v116));
        v116 &= v116 - 1;
        unint64_t v119 = v118 | (v112 << 6);
        goto LABEL_90;
      }
      int64_t v123 = v112 + 1;
      if (__OFADD__(v112, 1))
      {
        __break(1u);
LABEL_505:
        __break(1u);
LABEL_506:
        __break(1u);
LABEL_507:
        __break(1u);
LABEL_508:
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v364 = 0;
        uint64_t v365 = 0;
        int64_t v395 = 0;
LABEL_539:
        int v396 = 0;
        if (v599) {
          goto LABEL_542;
        }
        goto LABEL_540;
      }
      if (v123 >= v117) {
        goto LABEL_110;
      }
      unint64_t v124 = *(void *)(v115 + 8 * v123);
      ++v112;
      if (!v124)
      {
        int64_t v112 = v123 + 1;
        if (v123 + 1 >= v117) {
          goto LABEL_110;
        }
        unint64_t v124 = *(void *)(v115 + 8 * v112);
        if (!v124)
        {
          int64_t v112 = v123 + 2;
          if (v123 + 2 >= v117) {
            goto LABEL_110;
          }
          unint64_t v124 = *(void *)(v115 + 8 * v112);
          if (!v124)
          {
            int64_t v112 = v123 + 3;
            if (v123 + 3 >= v117) {
              goto LABEL_110;
            }
            unint64_t v124 = *(void *)(v115 + 8 * v112);
            if (!v124)
            {
              int64_t v112 = v123 + 4;
              if (v123 + 4 >= v117) {
                goto LABEL_110;
              }
              unint64_t v124 = *(void *)(v115 + 8 * v112);
              if (!v124) {
                break;
              }
            }
          }
        }
      }
LABEL_109:
      unint64_t v116 = (v124 - 1) & v124;
      unint64_t v119 = __clz(__rbit64(v124)) + (v112 << 6);
LABEL_90:
      v120 = (unint64_t *)(*(void *)(v110 + 48) + 16 * v119);
      unint64_t v121 = *v120;
      unint64_t v122 = v120[1];
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)((unint64_t *)&v574, v121, v122);
      uint64_t result = swift_bridgeObjectRelease();
    }
    int64_t v125 = v123 + 5;
    if (v125 < v117)
    {
      unint64_t v124 = *(void *)(v115 + 8 * v125);
      if (!v124)
      {
        while (1)
        {
          int64_t v112 = v125 + 1;
          if (__OFADD__(v125, 1)) {
            break;
          }
          if (v112 >= v117) {
            goto LABEL_110;
          }
          unint64_t v124 = *(void *)(v115 + 8 * v112);
          ++v125;
          if (v124) {
            goto LABEL_109;
          }
        }
LABEL_590:
        __break(1u);
LABEL_591:
        __break(1u);
LABEL_592:
        __break(1u);
LABEL_593:
        __break(1u);
LABEL_594:
        __break(1u);
LABEL_595:
        __break(1u);
LABEL_596:
        __break(1u);
LABEL_597:
        __break(1u);
LABEL_598:
        __break(1u);
LABEL_599:
        __break(1u);
LABEL_600:
        __break(1u);
LABEL_601:
        __break(1u);
LABEL_602:
        __break(1u);
LABEL_603:
        __break(1u);
LABEL_604:
        __break(1u);
LABEL_605:
        __break(1u);
LABEL_606:
        __break(1u);
LABEL_607:
        __break(1u);
LABEL_608:
        __break(1u);
LABEL_609:
        __break(1u);
        goto LABEL_610;
      }
      int64_t v112 = v125;
      goto LABEL_109;
    }
LABEL_110:
    swift_release();
    *(void *)&long long v587 = v659;
    long long v126 = *(_OWORD *)(v8 + 16);
    long long v127 = *(_OWORD *)(v8 + 32);
    long long v676 = *(_OWORD *)(v8 + 48);
    v675[1] = v127;
    v675[0] = v126;
    long long v128 = *(_OWORD *)(v8 + 16);
    long long v129 = *(_OWORD *)(v8 + 32);
    v679[2] = v676;
    v679[1] = v129;
    v679[0] = v128;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v679, (uint64_t)v680);
    outlined retain of Locale((uint64_t)v680);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v675);
    uint64_t v130 = BigString.UTF8View.count.getter();
    uint64_t result = outlined release of Locale((uint64_t)v604);
    if (v130 < v553)
    {
LABEL_581:
      __break(1u);
      goto LABEL_582;
    }
    uint64_t v560 = v130;
    unint64_t v131 = *(void *)(v8 + 64);
    uint64_t v132 = *(void *)(v8 + 72);
    uint64_t v133 = *(void *)(v8 + 80);
    uint64_t v134 = *(void *)(v8 + 88);
    swift_unknownObjectRetain();
    swift_retain();
    AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v553, v539 & 1, v131, v132, v133, v134, (uint64_t *)&v574);
    long long v540 = v574;
    unint64_t v136 = *((void *)&v575 + 1);
    unint64_t v135 = v575;
    uint64_t v137 = v576;
    swift_unknownObjectRelease();
    long long v574 = v540;
    unsigned long long v575 = __PAIR128__(v136, v135);
    uint64_t v138 = v553;
    uint64_t v139 = v560;
    *(void *)&long long v576 = v137;
    while (2)
    {
      if (v138 == v139)
      {
        AttributedString._InternalRunsSlice.startIndex.getter((void *)v8, v138, v605);
        v143 = &v606;
      }
      else
      {
        uint64_t v144 = *(void *)(v8 + 72);
        uint64_t v145 = *(void *)(v8 + 80);
        uint64_t v146 = *(void *)(v8 + 88);
        uint64_t v147 = swift_unknownObjectRetain();
        uint64_t v148 = v144;
        uint64_t v139 = v560;
        AttributedString._InternalRuns.endIndex.getter(v147, v148, v145, v146, v607);
        swift_unknownObjectRelease();
        v143 = &v608;
      }
      if (v137 >= *v143 || !*(void *)(v587 + 16))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t result = swift_bridgeObjectRelease();
        if ((uint64_t)v591 < *(uint64_t *)&v600[0])
        {
LABEL_582:
          __break(1u);
LABEL_583:
          __break(1u);
LABEL_584:
          __break(1u);
          goto LABEL_585;
        }
        int64_t v552 = v591;
        uint64_t v510 = *(void *)&v600[0];
        a4 = v511;
        uint64_t v5 = v512;
        a1 = v509;
LABEL_189:
        uint64_t v8 = v513;
        long long v177 = *(_OWORD *)(v513 + 16);
        long long v178 = *(_OWORD *)(v513 + 32);
        long long v674 = *(_OWORD *)(v513 + 48);
        v673[1] = v178;
        v673[0] = v177;
        long long v179 = *(_OWORD *)(v513 + 16);
        long long v180 = *(_OWORD *)(v513 + 32);
        v681[2] = v674;
        v681[1] = v180;
        v681[0] = v179;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v681, (uint64_t)v682);
        outlined retain of Locale((uint64_t)v682);
        BigString.utf8.getter();
        outlined release of Locale((uint64_t)v673);
        uint64_t v561 = BigString.UTF8View.count.getter();
        outlined release of Locale((uint64_t)v609);
        long long v181 = *(_OWORD *)(v5 + 3);
        long long v669 = *(_OWORD *)(v5 + 1);
        long long v670 = v181;
        long long v182 = *(_OWORD *)(v5 + 7);
        long long v671 = *(_OWORD *)(v5 + 5);
        long long v672 = v182;
        long long v183 = *(_OWORD *)(v513 + 32);
        long long v666 = *(_OWORD *)(v513 + 16);
        long long v667 = v183;
        long long v668 = *(_OWORD *)(v513 + 48);
        v683[2] = v668;
        v683[0] = v666;
        v683[1] = v183;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v683, (uint64_t)v684);
        outlined retain of Locale((uint64_t)v684);
        BigSubstring.UnicodeScalarView.init(_unchecked:in:)();
        BigString.init()();
        long long v184 = v611;
        *(_OWORD *)(v513 + 16) = v610;
        *(_OWORD *)(v513 + 32) = v184;
        *(_OWORD *)(v513 + 48) = v612;
        swift_unknownObjectRelease();
        a4(v600, a1);
        long long v663 = v600[4];
        long long v664 = v600[5];
        long long v665 = v600[6];
        long long v659 = v600[0];
        long long v660 = v600[1];
        long long v662 = v600[3];
        long long v661 = v600[2];
        outlined retain of Locale((uint64_t)&v659);
        BigSubstring.UnicodeScalarView.base.getter();
        outlined release of Locale((uint64_t)&v659);
        BigString.init(_:)();
        long long v185 = v614;
        *(_OWORD *)(v513 + 16) = v613;
        *(_OWORD *)(v513 + 32) = v185;
        *(_OWORD *)(v513 + 48) = v615;
        swift_unknownObjectRelease();
        outlined retain of Locale((uint64_t)&v659);
        uint64_t v186 = BigSubstring.UnicodeScalarView.startIndex.getter();
        uint64_t v188 = v187;
        uint64_t v190 = v189;
        uint64_t v192 = v191;
        outlined release of Locale((uint64_t)&v659);
        outlined retain of Locale((uint64_t)&v659);
        uint64_t v193 = BigSubstring.UnicodeScalarView.endIndex.getter();
        uint64_t v195 = v194;
        uint64_t v197 = v196;
        uint64_t v199 = v198;
        outlined release of Locale((uint64_t)&v659);
        specialized Range.init(uncheckedBounds:)(v186, v188, v190, v192, v193, v195, v197, v199, &v574);
        unsigned long long v200 = v575;
        *(_OWORD *)(v5 + 1) = v574;
        *(_OWORD *)(v5 + 3) = v200;
        long long v201 = v577;
        *(_OWORD *)(v5 + 5) = v576;
        *(_OWORD *)(v5 + 7) = v201;
        uint64_t v202 = BigString.Index.utf8Offset.getter();
        uint64_t v203 = BigString.Index.utf8Offset.getter();
        long long v204 = *(_OWORD *)(v513 + 16);
        long long v205 = *(_OWORD *)(v513 + 32);
        long long v658 = *(_OWORD *)(v513 + 48);
        v657[1] = v205;
        v657[0] = v204;
        long long v206 = *(_OWORD *)(v513 + 16);
        long long v207 = *(_OWORD *)(v513 + 32);
        v685[2] = v658;
        v685[1] = v207;
        v685[0] = v206;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v685, (uint64_t)v686);
        outlined retain of Locale((uint64_t)v686);
        BigString.utf8.getter();
        outlined release of Locale((uint64_t)v657);
        uint64_t v208 = BigString.UTF8View.count.getter();
        uint64_t result = outlined release of Locale((uint64_t)v616);
        uint64_t v209 = v208 - v561;
        if (__OFSUB__(v208, v561))
        {
          __break(1u);
        }
        else
        {
          uint64_t v210 = v203 - v202;
          if (!__OFSUB__(v203, v202))
          {
            uint64_t v211 = v210 + v209;
            if (!__OFADD__(v210, v209))
            {
              v212 = (long long *)(v513 + 16);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v202, v203, v211, a2, a3);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              long long v213 = *(_OWORD *)(v513 + 16);
              long long v214 = *(_OWORD *)(v513 + 32);
              long long v656 = *(_OWORD *)(v513 + 48);
              v655[1] = v214;
              v655[0] = v213;
              long long v215 = *(_OWORD *)(v513 + 16);
              long long v216 = *(_OWORD *)(v513 + 32);
              v687[2] = v656;
              v687[1] = v216;
              v687[0] = v215;
              outlined init with take of any PredicateExpression<Self.Output == B1>(v687, (uint64_t)v688);
              outlined retain of Locale((uint64_t)v688);
              BigString.utf8.getter();
              outlined release of Locale((uint64_t)v655);
              uint64_t v217 = BigString.UTF8View.count.getter();
              uint64_t result = outlined release of Locale((uint64_t)v617);
              uint64_t v218 = v217 - v561;
              if (!__OFSUB__(v217, v561))
              {
                uint64_t v219 = v552 + v218;
                if (!__OFADD__(v552, v218))
                {
                  if (v219 >= v510)
                  {
                    uint64_t v8 = v513;
                    uint64_t v220 = *(void *)(v513 + 80);
                    if (!*(void *)(v513 + 64))
                    {
                      unint64_t v268 = swift_unknownObjectRetain();
                      specialized Rope._endPath.getter(v268);
                      swift_unknownObjectRelease();
                      return swift_unknownObjectRelease();
                    }
                    unint64_t v221 = swift_unknownObjectRetain_n();
                    specialized Rope._endPath.getter(v221);
                    swift_unknownObjectRelease_n();
                    if (!v220) {
                      return swift_unknownObjectRelease();
                    }
                    long long v222 = *v212;
                    long long v223 = *(_OWORD *)(v513 + 32);
                    long long v654 = *(_OWORD *)(v513 + 48);
                    v653[1] = v223;
                    v653[0] = v222;
                    long long v224 = *v212;
                    long long v225 = *(_OWORD *)(v513 + 32);
                    v689[2] = v654;
                    v689[1] = v225;
                    v689[0] = v224;
                    outlined init with take of any PredicateExpression<Self.Output == B1>(v689, (uint64_t)v690);
                    outlined retain of Locale((uint64_t)v690);
                    BigString.utf8.getter();
                    outlined release of Locale((uint64_t)v653);
                    long long v226 = *v212;
                    long long v227 = *(_OWORD *)(v513 + 32);
                    long long v652 = *(_OWORD *)(v513 + 48);
                    v651[1] = v227;
                    v651[0] = v226;
                    long long v228 = *v212;
                    long long v229 = *(_OWORD *)(v513 + 32);
                    v691[2] = v652;
                    v691[1] = v229;
                    v691[0] = v228;
                    outlined init with take of any PredicateExpression<Self.Output == B1>(v691, (uint64_t)v692);
                    outlined retain of Locale((uint64_t)v692);
                    BigString.startIndex.getter();
                    outlined release of Locale((uint64_t)v651);
                    uint64_t v230 = BigString.UTF8View.index(_:offsetBy:)();
                    uint64_t v232 = v231;
                    uint64_t v234 = v233;
                    uint64_t v236 = v235;
                    outlined release of Locale((uint64_t)v618);
                    long long v237 = *v212;
                    long long v238 = *(_OWORD *)(v513 + 32);
                    long long v650 = *(_OWORD *)(v513 + 48);
                    v649[1] = v238;
                    v649[0] = v237;
                    long long v239 = *v212;
                    long long v240 = *(_OWORD *)(v513 + 32);
                    v693[2] = v650;
                    v693[1] = v240;
                    v693[0] = v239;
                    outlined init with take of any PredicateExpression<Self.Output == B1>(v693, (uint64_t)v694);
                    outlined retain of Locale((uint64_t)v694);
                    BigString.utf8.getter();
                    uint64_t result = outlined release of Locale((uint64_t)v649);
                    if (__OFSUB__(v219, v510)) {
                      goto LABEL_586;
                    }
                    uint64_t v508 = v219;
                    uint64_t v241 = BigString.UTF8View.index(_:offsetBy:)();
                    uint64_t v243 = v242;
                    uint64_t v245 = v244;
                    uint64_t v247 = v246;
                    outlined release of Locale((uint64_t)v619);
                    specialized Range.init(uncheckedBounds:)(v230, v232, v234, v236, v241, v243, v245, v247, &v574);
                    *(void *)&v583[0] = MEMORY[0x1E4FBC868];
                    long long v248 = *(_OWORD *)(v513 + 32);
                    long long v646 = *v212;
                    long long v647 = v248;
                    long long v648 = *(_OWORD *)(v513 + 48);
                    BigString.unicodeScalars.getter();
                    uint64_t v249 = BigString.UnicodeScalarView.index(roundingDown:)();
                    uint64_t v251 = v250;
                    uint64_t v253 = v252;
                    uint64_t v255 = v254;
                    outlined release of Locale((uint64_t)v620);
                    long long v256 = *(_OWORD *)(v513 + 32);
                    long long v643 = *v212;
                    long long v644 = v256;
                    v512 = (uint64_t *)(v513 + 16);
                    long long v645 = *(_OWORD *)(v513 + 48);
                    BigString.unicodeScalars.getter();
                    BigString.UnicodeScalarView.index(roundingUp:)();
                    outlined release of Locale((uint64_t)v621);
                    *(void *)&long long v584 = v249;
                    *((void *)&v584 + 1) = v251;
                    *(void *)&long long v585 = v253;
                    *((void *)&v585 + 1) = v255;
                    uint64_t v63 = BigString.Index.utf8Offset.getter();
                    uint64_t result = BigString.Index.utf8Offset.getter();
                    if (result < v63) {
                      goto LABEL_587;
                    }
                    int64_t v9 = *(void *)(v513 + 64);
                    uint64_t v8 = *(void *)(v513 + 80);
                    if (v9) {
                      uint64_t v257 = *(void *)(v513 + 80);
                    }
                    else {
                      uint64_t v257 = 0;
                    }
                    if (v63 < 0 || v257 < v63) {
                      goto LABEL_588;
                    }
                    uint64_t v258 = *(void *)(v513 + 72);
                    uint64_t v66 = *(void *)(v513 + 88);
                    uint64_t v558 = result;
                    if (v9 && *(_WORD *)(v9 + 16) && v63 < v8)
                    {
                      uint64_t v553 = *(void *)(v513 + 72);
                      uint64_t v69 = *(unsigned __int8 *)(v9 + 18);
                      if (*(unsigned char *)(v9 + 18))
                      {
                        swift_unknownObjectRetain_n();
                        uint64_t result = swift_retain_n();
                        uint64_t v68 = v63;
                        int64_t v259 = v9;
                        while (1)
                        {
                          uint64_t v261 = *(unsigned __int16 *)(v259 + 16);
                          if (!*(_WORD *)(v259 + 16)) {
                            goto LABEL_210;
                          }
                          uint64_t v262 = *(void *)(v259 + 40);
                          uint64_t v263 = v68 - v262;
                          if (__OFSUB__(v68, v262)) {
                            goto LABEL_559;
                          }
                          if (__OFADD__(v263, 1)) {
                            goto LABEL_560;
                          }
                          if (v263 + 1 <= 0)
                          {
                            uint64_t v261 = 0;
                            goto LABEL_211;
                          }
                          if (v261 == 1)
                          {
                            v68 -= v262;
                            goto LABEL_210;
                          }
                          uint64_t v264 = *(void *)(v259 + 64);
                          BOOL v75 = __OFSUB__(v263, v264);
                          uint64_t v265 = v263 - v264;
                          if (v75) {
                            goto LABEL_583;
                          }
                          if (__OFADD__(v265, 1)) {
                            goto LABEL_584;
                          }
                          if (v265 + 1 < 1)
                          {
                            uint64_t v261 = 1;
                            uint64_t v68 = v263;
                            goto LABEL_211;
                          }
                          if (v261 == 2)
                          {
                            uint64_t v68 = v265;
LABEL_210:
                            if (!v68) {
                              goto LABEL_211;
                            }
                            __break(1u);
LABEL_559:
                            __break(1u);
LABEL_560:
                            __break(1u);
                            goto LABEL_561;
                          }
                          v266 = (void *)(v259 + 88);
                          uint64_t v267 = 2;
                          while (1)
                          {
                            if (v261 == v267)
                            {
                              __break(1u);
LABEL_549:
                              __break(1u);
LABEL_550:
                              __break(1u);
LABEL_551:
                              __break(1u);
                              goto LABEL_552;
                            }
                            uint64_t v68 = v265 - *v266;
                            if (__OFSUB__(v265, *v266)) {
                              goto LABEL_549;
                            }
                            if (__OFADD__(v68, 1)) {
                              goto LABEL_550;
                            }
                            if (v68 + 1 < 1) {
                              break;
                            }
                            ++v267;
                            v266 += 3;
                            uint64_t v265 = v68;
                            if (v261 == v267) {
                              goto LABEL_210;
                            }
                          }
                          uint64_t v261 = v267;
                          uint64_t v68 = v265;
LABEL_211:
                          char v260 = (4 * *(unsigned char *)(v259 + 18) + 8) & 0x3C;
                          uint64_t v69 = ((-15 << v260) - 1) & v69 | (v261 << v260);
                          uint64_t v65 = *(void *)(v259 + 24 + 24 * v261);
                          swift_unknownObjectRetain();
                          uint64_t result = swift_unknownObjectRelease();
                          int64_t v259 = v65;
                          if (!*(unsigned char *)(v65 + 18)) {
                            goto LABEL_237;
                          }
                        }
                      }
                      swift_unknownObjectRetain_n();
                      uint64_t result = swift_retain_n();
                      uint64_t v68 = v63;
                      uint64_t v65 = v9;
LABEL_237:
                      uint64_t v273 = *(unsigned __int16 *)(v65 + 16);
                      if (!*(_WORD *)(v65 + 16))
                      {
LABEL_258:
                        if (v68) {
                          goto LABEL_604;
                        }
                        goto LABEL_259;
                      }
                      uint64_t v274 = *(void *)(v65 + 24);
                      uint64_t v275 = v68 - v274;
                      if (__OFSUB__(v68, v274)) {
                        goto LABEL_605;
                      }
                      if (__OFADD__(v275, 1)) {
                        goto LABEL_606;
                      }
                      if (v275 + 1 <= 0) {
                        goto LABEL_245;
                      }
                      if (v273 == 1)
                      {
                        v68 -= v274;
                        goto LABEL_258;
                      }
                      uint64_t v276 = *(void *)(v65 + 48);
                      BOOL v75 = __OFSUB__(v275, v276);
                      uint64_t v277 = v275 - v276;
                      if (v75) {
                        goto LABEL_611;
                      }
                      if (!__OFADD__(v277, 1))
                      {
                        if (v277 + 1 < 1)
                        {
                          uint64_t v273 = 1;
                          uint64_t v68 = v275;
                          goto LABEL_259;
                        }
                        if (v273 != 2)
                        {
                          v278 = (void *)(v65 + 72);
                          uint64_t v279 = 2;
                          while (1)
                          {
                            if (v273 == v279) {
                              goto LABEL_598;
                            }
                            uint64_t v68 = v277 - *v278;
                            if (__OFSUB__(v277, *v278)) {
                              goto LABEL_599;
                            }
                            if (__OFADD__(v68, 1)) {
                              goto LABEL_600;
                            }
                            if (v68 + 1 < 1) {
                              break;
                            }
                            ++v279;
                            v278 += 3;
                            uint64_t v277 = v68;
                            if (v273 == v279) {
                              goto LABEL_258;
                            }
                          }
                          uint64_t v273 = v279;
                          uint64_t v68 = v277;
                          goto LABEL_259;
                        }
                        uint64_t v68 = v277;
                        goto LABEL_258;
                      }
LABEL_612:
                      __break(1u);
LABEL_613:
                      if (!v8) {
                        __break(1u);
                      }
LABEL_615:
                      __break(1u);
LABEL_616:
                      if (!v8) {
                        __break(1u);
                      }
LABEL_618:
                      __break(1u);
                      return result;
                    }
                    swift_retain_n();
                    unint64_t v269 = swift_unknownObjectRetain_n();
                    unint64_t v270 = specialized Rope._endPath.getter(v269);
                    swift_unknownObjectRelease();
                    uint64_t v65 = 0;
                    uint64_t v68 = 0;
                    if (!v9) {
                      goto LABEL_260;
                    }
LABEL_234:
                    swift_unknownObjectRetain();
                    uint64_t v271 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v66, v270, v65, v9, v258);
                    uint64_t v272 = v513;
                    swift_release();
                    uint64_t result = swift_unknownObjectRelease_n();
                    goto LABEL_261;
                  }
                  goto LABEL_571;
                }
LABEL_570:
                __break(1u);
LABEL_571:
                __break(1u);
LABEL_572:
                __break(1u);
LABEL_573:
                __break(1u);
LABEL_574:
                __break(1u);
                goto LABEL_575;
              }
LABEL_569:
              __break(1u);
              goto LABEL_570;
            }
LABEL_568:
            __break(1u);
            goto LABEL_569;
          }
        }
        __break(1u);
        goto LABEL_568;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v574, v138, v139, (void *)v8, (uint64_t *)&v587, v110, v546, (uint64_t)&v591);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      long long v149 = v574;
      uint64_t v150 = v575;
      uint64_t v151 = v576;
      uint64_t v152 = *(void *)(v8 + 64);
      uint64_t v153 = *(void *)(v8 + 72);
      uint64_t v154 = *(void *)(v8 + 80);
      uint64_t v155 = *(void *)(v8 + 88);
      long long v659 = v574;
      *(void *)&long long v660 = v575;
      uint64_t v8 = *((void *)&v575 + 1) + 1;
      if (__OFADD__(*((void *)&v575 + 1), 1)) {
        goto LABEL_511;
      }
      swift_unknownObjectRetain();
      unint64_t v156 = specialized Rope.subscript.getter(v149, *((unint64_t *)&v149 + 1), v150, v152, v153, v154, v155);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v137 = v151 + v156;
      if (__OFADD__(v151, v156))
      {
LABEL_512:
        __break(1u);
LABEL_513:
        __break(1u);
LABEL_514:
        __break(1u);
LABEL_515:
        __break(1u);
LABEL_516:
        __break(1u);
LABEL_517:
        __break(1u);
LABEL_518:
        __break(1u);
LABEL_519:
        outlined destroy of AttributedString._AttributeValue((uint64_t)v573);
LABEL_520:
        outlined destroy of Any?((uint64_t)&v574, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
        outlined destroy of Any?((uint64_t)v583, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?((uint64_t)&v584, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_521:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v587);
LABEL_528:
        swift_release();
        int64_t v9 = v510;
        goto LABEL_529;
      }
      swift_unknownObjectRetain();
      specialized Rope.formIndex(after:)(&v659, v152, v153, v154, v155);
      swift_unknownObjectRelease_n();
      uint64_t v139 = v560;
      if (v137 < v560)
      {
        unint64_t v140 = *((void *)&v659 + 1);
        uint64_t v141 = v659;
        uint64_t v142 = v660;
        uint64_t v138 = v553;
      }
      else
      {
        int64_t v9 = *(void *)(v513 + 64);
        uint64_t v8 = *(void *)(v513 + 72);
        uint64_t v137 = *(void *)(v513 + 80);
        uint64_t v141 = *(void *)(v513 + 88);
        uint64_t v138 = v553;
        if (v553 == v560)
        {
          if (v9) {
            uint64_t v157 = *(void *)(v513 + 80);
          }
          else {
            uint64_t v157 = 0;
          }
          if (v553 < 0 || v157 < v553)
          {
LABEL_553:
            __break(1u);
LABEL_554:
            __break(1u);
LABEL_555:
            outlined destroy of AttributedString._AttributeValue((uint64_t)v573);
LABEL_556:
            outlined destroy of Any?((uint64_t)&v574, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
            outlined destroy of Any?((uint64_t)v583, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v584, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_557:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v587);
            swift_release();
            int64_t v9 = v510;
            goto LABEL_565;
          }
          if (v9 && v553 < v137 && *(_WORD *)(v9 + 16))
          {
            uint64_t v158 = *(unsigned __int8 *)(v9 + 18);
            if (*(unsigned char *)(v9 + 18))
            {
              swift_unknownObjectRetain_n();
              uint64_t v115 = v553;
              int64_t v159 = v9;
              while (1)
              {
                uint64_t v161 = *(unsigned __int16 *)(v159 + 16);
                if (!*(_WORD *)(v159 + 16)) {
                  goto LABEL_134;
                }
                uint64_t v162 = *(void *)(v159 + 40);
                uint64_t v163 = v115 - v162;
                if (__OFSUB__(v115, v162)) {
                  goto LABEL_514;
                }
                if (__OFADD__(v163, 1)) {
                  goto LABEL_515;
                }
                if (v163 + 1 <= 0)
                {
                  uint64_t v161 = 0;
                }
                else
                {
                  if (v161 == 1)
                  {
                    v115 -= v162;
                    goto LABEL_134;
                  }
                  uint64_t v164 = *(void *)(v159 + 64);
                  BOOL v75 = __OFSUB__(v163, v164);
                  uint64_t v165 = v163 - v164;
                  if (v75) {
                    goto LABEL_551;
                  }
                  if (__OFADD__(v165, 1))
                  {
LABEL_552:
                    __break(1u);
                    goto LABEL_553;
                  }
                  if (v165 + 1 < 1)
                  {
                    uint64_t v161 = 1;
                    uint64_t v115 = v163;
                  }
                  else
                  {
                    if (v161 == 2)
                    {
                      uint64_t v115 = v165;
LABEL_134:
                      if (v115) {
                        goto LABEL_513;
                      }
                      goto LABEL_135;
                    }
                    v166 = (void *)(v159 + 88);
                    uint64_t v167 = 2;
                    while (1)
                    {
                      if (v161 == v167) {
                        goto LABEL_505;
                      }
                      uint64_t v115 = v165 - *v166;
                      if (__OFSUB__(v165, *v166)) {
                        goto LABEL_506;
                      }
                      if (__OFADD__(v115, 1)) {
                        goto LABEL_507;
                      }
                      if (v115 + 1 < 1) {
                        break;
                      }
                      ++v167;
                      v166 += 3;
                      uint64_t v165 = v115;
                      if (v161 == v167) {
                        goto LABEL_134;
                      }
                    }
                    uint64_t v161 = v167;
                    uint64_t v115 = v165;
                  }
                }
LABEL_135:
                char v160 = (4 * *(unsigned char *)(v159 + 18) + 8) & 0x3C;
                uint64_t v158 = ((-15 << v160) - 1) & v158 | (v161 << v160);
                uint64_t v142 = *(void *)(v159 + 24 + 24 * v161);
                swift_unknownObjectRetain();
                uint64_t result = swift_unknownObjectRelease();
                int64_t v159 = v142;
                if (!*(unsigned char *)(v142 + 18)) {
                  goto LABEL_164;
                }
              }
            }
            uint64_t result = swift_unknownObjectRetain_n();
            uint64_t v115 = v553;
            uint64_t v142 = v9;
LABEL_164:
            uint64_t v170 = *(unsigned __int16 *)(v142 + 16);
            if (!*(_WORD *)(v142 + 16)) {
              goto LABEL_183;
            }
            uint64_t v171 = *(void *)(v142 + 24);
            uint64_t v172 = v115 - v171;
            if (__OFSUB__(v115, v171)) {
              goto LABEL_592;
            }
            if (__OFADD__(v172, 1)) {
              goto LABEL_593;
            }
            if (v172 + 1 <= 0)
            {
              uint64_t v170 = 0;
            }
            else
            {
              if (v170 == 1)
              {
                v115 -= v171;
                goto LABEL_183;
              }
              uint64_t v173 = *(void *)(v142 + 48);
              BOOL v75 = __OFSUB__(v172, v173);
              uint64_t v174 = v172 - v173;
              if (v75) {
                goto LABEL_601;
              }
              if (__OFADD__(v174, 1)) {
                goto LABEL_602;
              }
              if (v174 + 1 < 1)
              {
                uint64_t v170 = 1;
                uint64_t v115 = v172;
              }
              else
              {
                if (v170 == 2)
                {
                  uint64_t v115 = v174;
LABEL_183:
                  if (v115) {
                    goto LABEL_591;
                  }
                  goto LABEL_184;
                }
                v175 = (void *)(v142 + 72);
                uint64_t v176 = 2;
                while (1)
                {
                  if (v170 == v176) {
                    goto LABEL_577;
                  }
                  uint64_t v115 = v174 - *v175;
                  if (__OFSUB__(v174, *v175)) {
                    goto LABEL_578;
                  }
                  if (__OFADD__(v115, 1)) {
                    goto LABEL_579;
                  }
                  if (v115 + 1 < 1) {
                    break;
                  }
                  ++v176;
                  v175 += 3;
                  uint64_t v174 = v115;
                  if (v170 == v176) {
                    goto LABEL_183;
                  }
                }
                uint64_t v170 = v176;
                uint64_t v115 = v174;
              }
            }
LABEL_184:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v140 = v158 & 0xFFFFFFFFFFFFF0FFLL | (v170 << 8);
            uint64_t v139 = v560;
LABEL_159:
            swift_unknownObjectRetain();
            uint64_t v8 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v141, v140, v142, v9, v8);
            swift_unknownObjectRelease_n();
            uint64_t v137 = v553 - v115;
            if (__OFSUB__(v553, v115)) {
              goto LABEL_554;
            }
            goto LABEL_113;
          }
          unint64_t v169 = swift_unknownObjectRetain_n();
          unint64_t v140 = specialized Rope._endPath.getter(v169);
          swift_unknownObjectRelease();
          uint64_t v142 = 0;
          uint64_t v115 = 0;
          if (v9) {
            goto LABEL_159;
          }
          uint64_t v8 = 0;
          uint64_t v137 = v553;
        }
        else
        {
          unint64_t v168 = swift_unknownObjectRetain();
          unint64_t v140 = specialized Rope._endPath.getter(v168);
          if (v9)
          {
            swift_unknownObjectRelease();
            uint64_t v142 = 0;
          }
          else
          {
            uint64_t v142 = 0;
            uint64_t v8 = 0;
            uint64_t v137 = 0;
          }
        }
      }
LABEL_113:
      *(void *)&long long v574 = v141;
      *((void *)&v574 + 1) = v140;
      *(void *)&unsigned long long v575 = v142;
      *((void *)&v575 + 1) = v8;
      *(void *)&long long v576 = v137;
      uint64_t v8 = v513;
      continue;
    }
  }
  uint64_t v544 = v43;
  while (1)
  {
    long long v58 = v659;
    long long v59 = v660;
    uint64_t v60 = *(void *)(v8 + 64);
    uint64_t v61 = *(void *)(v8 + 80);
    unint64_t v62 = swift_unknownObjectRetain();
    uint64_t result = specialized Rope._endPath.getter(v62);
    if (!v60) {
      break;
    }
    uint64_t result = swift_unknownObjectRelease();
    if (v47 == v61) {
      goto LABEL_36;
    }
LABEL_58:
    uint64_t v80 = *(void *)(v8 + 64);
    uint64_t v81 = *(void *)(v8 + 72);
    uint64_t v82 = *(void *)(v8 + 80);
    uint64_t v8 = *(void *)(v8 + 88);
    long long v574 = v58;
    *(void *)&unsigned long long v575 = v59;
    uint64_t v83 = *((void *)&v59 + 1) - 1;
    if (__OFSUB__(*((void *)&v59 + 1), 1)) {
      goto LABEL_572;
    }
    swift_unknownObjectRetain();
    specialized Rope.formIndex(before:)((uint64_t)&v574, v80, v81, v82, v8);
    int64_t v9 = *((void *)&v574 + 1);
    uint64_t v65 = v574;
    uint64_t v72 = v575;
    unint64_t v84 = specialized Rope.subscript.getter(v574, *((unint64_t *)&v574 + 1), v575, v80, v81, v82, v8);
    uint64_t v8 = v85;
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v86 = v47 - v84;
    if (__OFSUB__(v47, v84)) {
      goto LABEL_573;
    }
    uint64_t v67 = v544;
LABEL_83:
    *(void *)&long long v659 = v65;
    *((void *)&v659 + 1) = v9;
    *(void *)&long long v660 = v72;
    *((void *)&v660 + 1) = v83;
    *(void *)&long long v661 = v86;
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v8 = v513;
    specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v659, 0, v510, (void *)v513, (uint64_t *)&v591, v67, v558, (uint64_t)v600);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v47 = v661;
    unint64_t v94 = *(void *)(v513 + 64);
    uint64_t v95 = *(void *)(v513 + 72);
    uint64_t v96 = *(void *)(v513 + 80);
    uint64_t v97 = *(void *)(v513 + 88);
    swift_unknownObjectRetain();
    AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, v539 & 1, v94, v95, v96, v97, (uint64_t *)&v574);
    uint64_t v98 = v576;
    swift_unknownObjectRelease();
    if (v98 >= v47 || !*(void *)(v591 + 16)) {
      goto LABEL_85;
    }
  }
  if (v47) {
    goto LABEL_58;
  }
LABEL_36:
  uint64_t v63 = *(void *)(v8 + 64);
  uint64_t v64 = *(void *)(v8 + 72);
  uint64_t v66 = *(void *)(v8 + 80);
  uint64_t v65 = *(void *)(v8 + 88);
  if (!v63)
  {
    uint64_t v67 = v544;
    if (v510) {
      goto LABEL_594;
    }
    goto LABEL_62;
  }
  uint64_t v8 = v510;
  uint64_t v67 = v544;
  uint64_t v68 = -15;
  if (v66 < v510) {
    goto LABEL_576;
  }
  if (!*(_WORD *)(v63 + 16))
  {
LABEL_62:
    swift_unknownObjectRetain_n();
    int64_t v9 = specialized Rope._endPath.getter(v63);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v72 = 0;
    uint64_t v8 = 0;
    if (!v63)
    {
      uint64_t v83 = 0;
LABEL_82:
      uint64_t v86 = v510 - v8;
      if (__OFSUB__(v510, v8)) {
        goto LABEL_574;
      }
      goto LABEL_83;
    }
LABEL_63:
    swift_unknownObjectRetain();
    uint64_t v83 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v65, v9, v72, v63, v64);
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_82;
  }
  uint64_t v69 = *(unsigned __int8 *)(v63 + 18);
  if (!*(unsigned char *)(v63 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v72 = v63;
LABEL_65:
    uint64_t v87 = *(unsigned __int16 *)(v72 + 16);
    if (!*(_WORD *)(v72 + 16)) {
      goto LABEL_616;
    }
    uint64_t v88 = *(void *)(v72 + 24);
    BOOL v75 = __OFSUB__(v8, v88);
    uint64_t v89 = v8 - v88;
    if (v75) {
      goto LABEL_595;
    }
    if (v89 <= 0)
    {
      uint64_t v92 = 0;
    }
    else
    {
      if (v87 == 1) {
        goto LABEL_618;
      }
      uint64_t v90 = *(void *)(v72 + 48);
      uint64_t v8 = v89 - v90;
      if (__OFSUB__(v89, v90)) {
        goto LABEL_596;
      }
      if (v8 >= 1)
      {
        if (v87 != 2)
        {
          uint64_t v91 = (void *)(v72 + 72);
          uint64_t v92 = 2;
          while (v87 != v92)
          {
            uint64_t v93 = v8 - *v91;
            if (__OFSUB__(v8, *v91)) {
              goto LABEL_523;
            }
            if (v93 < 1) {
              goto LABEL_80;
            }
            ++v92;
            v91 += 3;
            uint64_t v8 = v93;
            if (v87 == v92) {
              goto LABEL_618;
            }
          }
          __break(1u);
LABEL_523:
          __break(1u);
LABEL_524:
          __break(1u);
LABEL_525:
          outlined destroy of AttributedString._AttributeValue((uint64_t)v573);
LABEL_526:
          outlined destroy of Any?((uint64_t)&v574, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
          outlined destroy of Any?((uint64_t)v583, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?((uint64_t)&v584, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_527:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v587);
          goto LABEL_528;
        }
        goto LABEL_618;
      }
      uint64_t v8 = v89;
      uint64_t v92 = 1;
    }
LABEL_80:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    int64_t v9 = v69 & 0xFFFFFFFFFFFFF0FFLL | (v92 << 8);
    goto LABEL_63;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  int64_t v9 = v63;
  while (1)
  {
    uint64_t v73 = *(unsigned __int16 *)(v9 + 16);
    if (!*(_WORD *)(v9 + 16)) {
      goto LABEL_613;
    }
    uint64_t v74 = *(void *)(v9 + 40);
    BOOL v75 = __OFSUB__(v8, v74);
    uint64_t v76 = v8 - v74;
    if (v75) {
      goto LABEL_517;
    }
    if (v76 > 0) {
      break;
    }
    uint64_t v70 = 0;
LABEL_42:
    char v71 = (4 * *(unsigned char *)(v9 + 18) + 8) & 0x3C;
    uint64_t v69 = ((-15 << v71) - 1) & v69 | (v70 << v71);
    uint64_t v72 = *(void *)(v9 + 24 + 24 * v70);
    swift_unknownObjectRetain();
    uint64_t result = swift_unknownObjectRelease();
    int64_t v9 = v72;
    if (!*(unsigned char *)(v72 + 18)) {
      goto LABEL_65;
    }
  }
  if (v73 == 1) {
    goto LABEL_615;
  }
  uint64_t v77 = *(void *)(v9 + 64);
  uint64_t v8 = v76 - v77;
  if (__OFSUB__(v76, v77)) {
    goto LABEL_524;
  }
  if (v8 < 1)
  {
    uint64_t v8 = v76;
    uint64_t v70 = 1;
    goto LABEL_42;
  }
  if (v73 == 2) {
    goto LABEL_615;
  }
  long long v78 = (void *)(v9 + 88);
  uint64_t v70 = 2;
  while (v73 != v70)
  {
    uint64_t v79 = v8 - *v78;
    if (__OFSUB__(v8, *v78)) {
      goto LABEL_244;
    }
    if (v79 < 1) {
      goto LABEL_42;
    }
    ++v70;
    v78 += 3;
    uint64_t v8 = v79;
    if (v73 == v70) {
      goto LABEL_615;
    }
  }
  __break(1u);
LABEL_244:
  __break(1u);
LABEL_245:
  uint64_t v273 = 0;
LABEL_259:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  unint64_t v270 = v69 & 0xFFFFFFFFFFFFF0FFLL | (v273 << 8);
  uint64_t v258 = v553;
  if (v9) {
    goto LABEL_234;
  }
LABEL_260:
  uint64_t v272 = v513;
  uint64_t result = swift_release();
  uint64_t v271 = 0;
LABEL_261:
  v280 = (long long *)v512;
  if (__OFSUB__(v63, v68)) {
    goto LABEL_589;
  }
  *(void *)&long long v587 = v272;
  *((void *)&v587 + 1) = v63;
  *(void *)&long long v588 = v558;
  *((void *)&v588 + 1) = v66;
  *(void *)v589 = v270;
  *(void *)&v589[8] = v65;
  *(void *)&v589[16] = v271;
  *(void *)&v589[24] = v63 - v68;
  specialized IndexingIterator.next()();
  if (!v281)
  {
    uint64_t v317 = MEMORY[0x1E4FBC868];
    goto LABEL_303;
  }
  uint64_t v282 = v281;
  while (1)
  {
    long long v284 = *v280;
    long long v285 = v280[1];
    long long v632 = v280[2];
    v631[1] = v285;
    v631[0] = v284;
    long long v286 = *v280;
    v705[1] = v280[1];
    v705[2] = v632;
    v705[0] = v286;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v705, (uint64_t)v706);
    outlined retain of Locale((uint64_t)v706);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v631);
    uint64_t v288 = *((void *)&v584 + 1);
    uint64_t v287 = v584;
    uint64_t v8 = *((void *)&v585 + 1);
    unint64_t v289 = v585;
    uint64_t v515 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v517 = v290;
    uint64_t v518 = v292;
    uint64_t v519 = v291;
    outlined release of Locale((uint64_t)v622);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v293 = specialized Sequence.contains(where:)(v282);
    uint64_t v294 = v8;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v293 & 1) != 0 && (static BigString.Index.< infix(_:_:)()) {
      break;
    }
LABEL_264:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    $defer #1 () in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(&v584, v515, v517, v519, v518);
    specialized IndexingIterator.next()();
    uint64_t v282 = v283;
    if (!v283) {
      goto LABEL_302;
    }
  }
  uint64_t v520 = v282 + 64;
  while (2)
  {
    long long v295 = v280[1];
    long long v628 = *v280;
    long long v629 = v295;
    long long v630 = v280[2];
    BigString.unicodeScalars.getter();
    int v547 = BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v623);
    long long v296 = v280[1];
    long long v625 = *v280;
    long long v626 = v296;
    long long v627 = v280[2];
    BigString.unicodeScalars.getter();
    uint64_t v522 = v288;
    uint64_t v525 = v287;
    uint64_t v521 = v289;
    uint64_t v541 = BigString.UnicodeScalarView.index(after:)();
    unint64_t v531 = v298;
    uint64_t v534 = v297;
    uint64_t v528 = v299;
    outlined release of Locale((uint64_t)v624);
    uint64_t v300 = 1 << *(unsigned char *)(v282 + 32);
    if (v300 < 64) {
      uint64_t v301 = ~(-1 << v300);
    }
    else {
      uint64_t v301 = -1;
    }
    unint64_t v302 = v301 & *(void *)(v282 + 64);
    int64_t v303 = (unint64_t)(v300 + 63) >> 6;
    swift_bridgeObjectRetain();
    int64_t v304 = 0;
LABEL_274:
    if (v302)
    {
      unint64_t v305 = __clz(__rbit64(v302));
      v302 &= v302 - 1;
      unint64_t v306 = v305 | (v304 << 6);
      goto LABEL_276;
    }
    int64_t v310 = v304 + 1;
    if (!__OFADD__(v304, 1))
    {
      if (v310 < v303)
      {
        unint64_t v311 = *(void *)(v520 + 8 * v310);
        if (v311)
        {
LABEL_280:
          unint64_t v302 = (v311 - 1) & v311;
          unint64_t v306 = __clz(__rbit64(v311)) + (v310 << 6);
          int64_t v304 = v310;
LABEL_276:
          uint64_t v307 = *(void *)(v282 + 56);
          v308 = (void *)(*(void *)(v282 + 48) + 16 * v306);
          uint64_t v309 = v308[1];
          *(void *)&long long v591 = *v308;
          *((void *)&v591 + 1) = v309;
          outlined init with copy of AttributedString._AttributeValue(v307 + 72 * v306, (uint64_t)&v592);
          swift_bridgeObjectRetain();
LABEL_295:
          outlined init with take of (key: String, value: AttributedString._AttributeValue)?((uint64_t)&v591, (uint64_t)&v574);
          uint64_t v313 = *((void *)&v574 + 1);
          if (!*((void *)&v574 + 1))
          {
            swift_release();
            uint64_t v287 = v541;
            unint64_t v289 = v531;
            uint64_t v288 = v534;
            uint64_t v294 = v528;
            v280 = (long long *)v512;
            if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
              goto LABEL_264;
            }
            continue;
          }
          uint64_t v8 = v574;
          uint64_t v314 = *((void *)&v577 + 1);
          uint64_t v315 = *(void *)v578;
          outlined copy of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v577 + 1), *(uint64_t *)v578);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v575);
          if (v315 != 1)
          {
            *(void *)&long long v591 = v314;
            *((void *)&v591 + 1) = v315;
            unint64_t v316 = AttributedString.AttributeRunBoundaries._constrainedScalar.getter();
            outlined consume of AttributedString.AttributeRunBoundaries?(v314, v315);
            if ((v316 & 0x100000000) == 0 && v547 != v316) {
              specialized invalidate #1 (_:from:to:) in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(v8, v313, v525, v522, v521, v294, v541, v534, v531, v528, (uint64_t *)v583);
            }
          }
          swift_bridgeObjectRelease();
          goto LABEL_274;
        }
        int64_t v312 = v304 + 2;
        ++v304;
        if (v310 + 1 < v303)
        {
          unint64_t v311 = *(void *)(v520 + 8 * v312);
          if (v311)
          {
LABEL_283:
            int64_t v310 = v312;
            goto LABEL_280;
          }
          int64_t v304 = v310 + 1;
          if (v310 + 2 < v303)
          {
            unint64_t v311 = *(void *)(v520 + 8 * (v310 + 2));
            if (v311)
            {
              v310 += 2;
              goto LABEL_280;
            }
            int64_t v312 = v310 + 3;
            int64_t v304 = v310 + 2;
            if (v310 + 3 < v303)
            {
              unint64_t v311 = *(void *)(v520 + 8 * v312);
              if (v311) {
                goto LABEL_283;
              }
              while (1)
              {
                int64_t v310 = v312 + 1;
                if (__OFADD__(v312, 1)) {
                  goto LABEL_516;
                }
                if (v310 >= v303) {
                  break;
                }
                unint64_t v311 = *(void *)(v520 + 8 * v310);
                ++v312;
                if (v311) {
                  goto LABEL_280;
                }
              }
              int64_t v304 = v303 - 1;
            }
          }
        }
      }
      unint64_t v302 = 0;
      uint64_t v596 = 0;
      long long v594 = 0u;
      long long v595 = 0u;
      long long v592 = 0u;
      long long v593 = 0u;
      long long v591 = 0u;
      goto LABEL_295;
    }
    break;
  }
  __break(1u);
LABEL_302:
  uint64_t v317 = *(void *)&v583[0];
LABEL_303:
  swift_release();
  int64_t v9 = 0;
  uint64_t v318 = v317 + 64;
  uint64_t v319 = 1 << *(unsigned char *)(v317 + 32);
  uint64_t v320 = -1;
  if (v319 < 64) {
    uint64_t v320 = ~(-1 << v319);
  }
  uint64_t v8 = v320 & *(void *)(v317 + 64);
  int64_t v562 = (unint64_t)(v319 + 63) >> 6;
  while (2)
  {
    if (v8)
    {
      unint64_t v321 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v322 = v321 | (v9 << 6);
      goto LABEL_319;
    }
    BOOL v75 = __OFADD__(v9++, 1);
    if (v75) {
      goto LABEL_518;
    }
    if (v9 >= v562)
    {
      swift_release();
      uint64_t v8 = v513;
      goto LABEL_330;
    }
    unint64_t v323 = *(void *)(v318 + 8 * v9);
    uint64_t v8 = v513;
    if (v323) {
      goto LABEL_318;
    }
    int64_t v324 = v9 + 1;
    if (v9 + 1 >= v562) {
      break;
    }
    unint64_t v323 = *(void *)(v318 + 8 * v324);
    if (v323) {
      goto LABEL_317;
    }
    int64_t v324 = v9 + 2;
    if (v9 + 2 >= v562) {
      break;
    }
    unint64_t v323 = *(void *)(v318 + 8 * v324);
    if (v323) {
      goto LABEL_317;
    }
    int64_t v324 = v9 + 3;
    if (v9 + 3 < v562)
    {
      unint64_t v323 = *(void *)(v318 + 8 * v324);
      if (!v323)
      {
        while (1)
        {
          int64_t v9 = v324 + 1;
          if (__OFADD__(v324, 1)) {
            break;
          }
          if (v9 >= v562) {
            goto LABEL_329;
          }
          unint64_t v323 = *(void *)(v318 + 8 * v9);
          ++v324;
          if (v323) {
            goto LABEL_318;
          }
        }
LABEL_561:
        __break(1u);
LABEL_562:
        outlined destroy of AttributedString._AttributeValue((uint64_t)v573);
LABEL_563:
        outlined destroy of Any?((uint64_t)&v574, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
        outlined destroy of Any?((uint64_t)v583, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?((uint64_t)&v584, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_564:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v587);
        swift_release();
LABEL_565:
        long long v497 = *(_OWORD *)v512;
        long long v498 = *((_OWORD *)v512 + 2);
        long long v588 = *((_OWORD *)v512 + 1);
        *(_OWORD *)v589 = v498;
        long long v587 = v497;
        long long v499 = *(_OWORD *)v512;
        long long v592 = *((_OWORD *)v512 + 1);
        long long v593 = v498;
        long long v591 = v499;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v591, (uint64_t)&v584);
        outlined retain of Locale((uint64_t)&v584);
        uint64_t v500 = BigString.index(before:)();
        uint64_t v502 = v501;
        uint64_t v504 = v503;
        uint64_t v506 = v505;
        outlined release of Locale((uint64_t)&v587);
        AttributedString.Guts._paragraphExtending(from:)(v500, v502, v504, v506, &v574);
        uint64_t v364 = Range<>._utf8OffsetRange.getter();
        uint64_t v365 = v507;
        int64_t v395 = 0;
        uint64_t v115 = 0;
        int v396 = 0;
        char v599 = 0;
LABEL_540:
        if (v9 < v365)
        {
          uint64_t v598 = 0;
          uint64_t v597 = 0;
          uint64_t v495 = AttributedString.Guts._constrainedAttributes(at:with:)(v364, &v597);
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized AttributedString._InternalRunsSlice.updateEach(with:)(v8, v9, v365, v495, 0, 0);
          swift_release();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        goto LABEL_542;
      }
LABEL_317:
      int64_t v9 = v324;
LABEL_318:
      uint64_t v8 = (v323 - 1) & v323;
      unint64_t v322 = __clz(__rbit64(v323)) + (v9 << 6);
LABEL_319:
      v325 = (unint64_t *)(*(void *)(v317 + 48) + 16 * v322);
      unint64_t v327 = *v325;
      unint64_t v326 = v325[1];
      uint64_t v328 = *(void *)(*(void *)(v317 + 56) + 8 * v322);
      uint64_t v329 = specialized Array._getCount()(v328);
      if (v329)
      {
        uint64_t v330 = v329;
        if (v329 < 1)
        {
          __break(1u);
LABEL_511:
          __break(1u);
          goto LABEL_512;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v331 = (uint64_t *)(v328 + 40);
        do
        {
          AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)(v327, v326, *(v331 - 1), *v331, 0);
          v331 += 2;
          --v330;
        }
        while (v330);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      continue;
    }
    break;
  }
LABEL_329:
  swift_release();
LABEL_330:
  char v599 = 1;
  if (static BigString.Index.== infix(_:_:)())
  {
    long long v332 = *(_OWORD *)v512;
    long long v333 = *((_OWORD *)v512 + 1);
    long long v637 = *((_OWORD *)v512 + 2);
    long long v636 = v333;
    long long v635 = v332;
    long long v334 = *(_OWORD *)v512;
    long long v335 = *((_OWORD *)v512 + 1);
    long long v699 = v637;
    long long v698 = v335;
    long long v697 = v334;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v697, (uint64_t)v700);
    outlined retain of Locale((uint64_t)v700);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)&v635);
    if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
      goto LABEL_342;
    }
    long long v336 = *(_OWORD *)v512;
    long long v337 = *((_OWORD *)v512 + 1);
    long long v634 = *((_OWORD *)v512 + 2);
    v633[1] = v337;
    v633[0] = v336;
    long long v338 = *(_OWORD *)v512;
    long long v339 = *((_OWORD *)v512 + 1);
    long long v703 = v634;
    long long v702 = v339;
    long long v701 = v338;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v701, (uint64_t)v704);
    outlined retain of Locale((uint64_t)v704);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)v633);
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if ((result & 1) == 0)
    {
LABEL_342:
      uint64_t v364 = 0;
      uint64_t v365 = 0;
      int64_t v395 = 0;
      uint64_t v115 = 0;
      int v396 = 0;
      int64_t v9 = v510;
      if (v599) {
        goto LABEL_542;
      }
      goto LABEL_540;
    }
    int64_t v9 = v510;
    if (!__OFSUB__(v510, 1))
    {
      unint64_t v340 = *(void *)(v8 + 64);
      uint64_t v341 = *(void *)(v8 + 72);
      uint64_t v342 = *(void *)(v8 + 80);
      uint64_t v343 = *(void *)(v8 + 88);
      char v344 = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
      swift_unknownObjectRetain();
      v344 &= 1u;
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v510 - 1, v344, v340, v341, v342, v343, (uint64_t *)&v574);
      unsigned long long v554 = v575;
      long long v563 = v574;
      uint64_t v345 = v576;
      swift_unknownObjectRelease();
      v695[0] = v563;
      v695[1] = v554;
      uint64_t v696 = v345;
      unint64_t v346 = *(void *)(v8 + 64);
      uint64_t v347 = *(void *)(v8 + 72);
      uint64_t v348 = *(void *)(v8 + 80);
      uint64_t v349 = *(void *)(v8 + 88);
      swift_unknownObjectRetain();
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v510, v344, v346, v347, v348, v349, (uint64_t *)&v574);
      unsigned long long v555 = v575;
      long long v564 = v574;
      uint64_t v350 = v576;
      swift_unknownObjectRelease();
      long long v640 = v564;
      unsigned long long v641 = v555;
      uint64_t v642 = v350;
      uint64_t v351 = *(void *)(v8 + 64);
      uint64_t v352 = *(void *)(v8 + 72);
      uint64_t v353 = *(void *)(v8 + 80);
      uint64_t v354 = *(void *)(v8 + 88);
      swift_unknownObjectRetain();
      AttributedString._InternalRuns.subscript.getter((unint64_t)v695, v351, v352, v353, v354);
      uint64_t v28 = v355;
      swift_unknownObjectRelease();
      uint64_t v356 = *(void *)(v8 + 64);
      uint64_t v357 = *(void *)(v8 + 72);
      uint64_t v358 = *(void *)(v8 + 80);
      uint64_t v359 = *(void *)(v8 + 88);
      swift_unknownObjectRetain();
      AttributedString._InternalRuns.subscript.getter((unint64_t)&v640, v356, v357, v358, v359);
      uint64_t v361 = v360;
      swift_unknownObjectRelease();
      int v362 = specialized AttributedString._AttributeStorage.containsParagraphConstraint.getter(v28);
      uint64_t v558 = v361;
      int v363 = specialized AttributedString._AttributeStorage.containsParagraphConstraint.getter(v361);
      if ((v362 & 1) == 0 && (v363 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v364 = 0;
        uint64_t v365 = 0;
        goto LABEL_538;
      }
      if ((v362 ^ v363))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_565;
      }
      uint64_t v536 = v28 + 64;
      uint64_t v434 = 1 << *(unsigned char *)(v28 + 32);
      uint64_t v435 = -1;
      if (v434 < 64) {
        uint64_t v435 = ~(-1 << v434);
      }
      unint64_t v436 = v435 & *(void *)(v28 + 64);
      unint64_t v437 = (unint64_t)(v434 + 63) >> 6;
      unint64_t v524 = v437 - 1;
      uint64_t result = swift_bridgeObjectRetain();
      unint64_t v438 = 0;
      int64_t v550 = v437;
      unint64_t v530 = v437 - 5;
      while (2)
      {
        if (v436)
        {
          unint64_t v439 = __clz(__rbit64(v436));
          v436 &= v436 - 1;
          unint64_t v440 = v439 | (v438 << 6);
          goto LABEL_434;
        }
        int64_t v444 = v438 + 1;
        if (__OFADD__(v438, 1)) {
          goto LABEL_607;
        }
        if (v444 < v550)
        {
          unint64_t v445 = *(void *)(v536 + 8 * v444);
          if (v445)
          {
LABEL_438:
            unint64_t v436 = (v445 - 1) & v445;
            unint64_t v440 = __clz(__rbit64(v445)) + (v444 << 6);
            unint64_t v438 = v444;
LABEL_434:
            uint64_t v441 = *(void *)(v28 + 56);
            v442 = (void *)(*(void *)(v28 + 48) + 16 * v440);
            uint64_t v443 = v442[1];
            *(void *)&long long v574 = *v442;
            *((void *)&v574 + 1) = v443;
            outlined init with copy of AttributedString._AttributeValue(v441 + 72 * v440, (uint64_t)&v575);
            swift_bridgeObjectRetain();
LABEL_444:
            outlined init with take of (key: String, value: AttributedString._AttributeValue)?((uint64_t)&v574, (uint64_t)&v591);
            uint64_t v446 = *((void *)&v591 + 1);
            if (!*((void *)&v591 + 1)) {
              goto LABEL_465;
            }
            uint64_t v447 = v591;
            *(_OWORD *)v589 = v594;
            *(_OWORD *)&v589[16] = v595;
            uint64_t v590 = v596;
            long long v587 = v592;
            long long v588 = v593;
            uint64_t v8 = *((void *)&v594 + 1);
            uint64_t v448 = v595;
            if ((void)v595 == 1)
            {
              outlined consume of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v589[8], 1);
              outlined consume of AttributedString.AttributeRunBoundaries?(0, 0);
            }
            else
            {
              long long v574 = *(_OWORD *)&v589[8];
              long long v584 = 0uLL;
              outlined copy of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v589[8], *(uint64_t *)&v589[16]);
              outlined copy of AttributedString.AttributeRunBoundaries?(v8, v448);
              char v449 = specialized static AttributedString.AttributeRunBoundaries.== infix(_:_:)(&v574, &v584);
              swift_bridgeObjectRelease();
              outlined consume of AttributedString.AttributeRunBoundaries?(v8, v448);
              if (v449)
              {
                specialized Dictionary.subscript.getter(v447, v446, v558, (uint64_t)&v584);
                swift_bridgeObjectRelease();
                outlined init with copy of AttributedString._AttributeValue((uint64_t)&v587, (uint64_t)v583);
                outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v584, (uint64_t)&v574);
                outlined init with copy of AttributedString._AttributeValue?((uint64_t)v583, (uint64_t)&v578[8]);
                uint64_t v8 = v513;
                if (*((void *)&v575 + 1))
                {
                  outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v574, (uint64_t)v573);
                  if (!*((void *)&v579 + 1)) {
                    goto LABEL_555;
                  }
                  long long v570 = v580;
                  long long v571 = v581;
                  uint64_t v572 = v582;
                  long long v568 = *(_OWORD *)&v578[8];
                  long long v569 = v579;
                  char v450 = specialized static AttributedString._AttributeValue.== infix(_:_:)((uint64_t)v573, (uint64_t)&v568);
                  outlined destroy of AttributedString._AttributeValue((uint64_t)v573);
                  outlined destroy of AttributedString._AttributeValue((uint64_t)&v568);
                  outlined destroy of Any?((uint64_t)&v574, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?((uint64_t)v583, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?((uint64_t)&v584, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  if ((v450 & 1) == 0) {
                    goto LABEL_557;
                  }
                }
                else
                {
                  if (*((void *)&v579 + 1)) {
                    goto LABEL_556;
                  }
                  outlined destroy of Any?((uint64_t)&v574, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?((uint64_t)v583, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?((uint64_t)&v584, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                }
                goto LABEL_431;
              }
            }
            swift_bridgeObjectRelease();
LABEL_431:
            uint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)&v587);
            continue;
          }
          if ((uint64_t)(v438 + 2) >= v550)
          {
            ++v438;
          }
          else
          {
            unint64_t v445 = *(void *)(v536 + 8 * (v438 + 2));
            if (v445)
            {
              int64_t v444 = v438 + 2;
              goto LABEL_438;
            }
            if ((uint64_t)(v438 + 3) >= v550)
            {
              v438 += 2;
            }
            else
            {
              unint64_t v445 = *(void *)(v536 + 8 * (v438 + 3));
              if (v445)
              {
                int64_t v444 = v438 + 3;
                goto LABEL_438;
              }
              int64_t v444 = v438 + 4;
              if ((uint64_t)(v438 + 4) >= v550)
              {
                v438 += 3;
              }
              else
              {
                unint64_t v445 = *(void *)(v536 + 8 * v444);
                if (v445) {
                  goto LABEL_438;
                }
                while (v530 != v438)
                {
                  unint64_t v445 = *(void *)(v28 + 104 + 8 * v438++);
                  if (v445)
                  {
                    int64_t v444 = v438 + 4;
                    goto LABEL_438;
                  }
                }
                unint64_t v438 = v524;
              }
            }
          }
        }
        break;
      }
      unint64_t v436 = 0;
      long long v577 = 0u;
      memset(v578, 0, sizeof(v578));
      unsigned long long v575 = 0u;
      long long v576 = 0u;
      long long v574 = 0u;
      goto LABEL_444;
    }
LABEL_610:
    __break(1u);
LABEL_611:
    __break(1u);
    goto LABEL_612;
  }
  long long v366 = *(_OWORD *)v512;
  long long v367 = *((_OWORD *)v512 + 1);
  long long v699 = *((_OWORD *)v512 + 2);
  long long v698 = v367;
  long long v697 = v366;
  long long v368 = *(_OWORD *)v512;
  long long v369 = *((_OWORD *)v512 + 1);
  long long v703 = v699;
  long long v702 = v369;
  long long v701 = v368;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v701, (uint64_t)v695);
  outlined retain of Locale((uint64_t)v695);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)&v697);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0) {
    goto LABEL_425;
  }
  int64_t v9 = v510;
  if (__OFSUB__(v510, 1)) {
    goto LABEL_608;
  }
  unint64_t v370 = *(void *)(v8 + 64);
  uint64_t v371 = *(void *)(v8 + 72);
  uint64_t v372 = *(void *)(v8 + 80);
  uint64_t v373 = *(void *)(v8 + 88);
  char v374 = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
  swift_unknownObjectRetain();
  v374 &= 1u;
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v510 - 1, v374, v370, v371, v372, v373, (uint64_t *)&v574);
  unsigned long long v556 = v575;
  long long v565 = v574;
  uint64_t v375 = v576;
  swift_unknownObjectRelease();
  long long v640 = v565;
  unsigned long long v641 = v556;
  uint64_t v642 = v375;
  unint64_t v376 = *(void *)(v8 + 64);
  uint64_t v377 = *(void *)(v8 + 72);
  uint64_t v378 = *(void *)(v8 + 80);
  uint64_t v379 = *(void *)(v8 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v510, v374, v376, v377, v378, v379, (uint64_t *)&v574);
  unsigned long long v557 = v575;
  long long v566 = v574;
  uint64_t v380 = v576;
  swift_unknownObjectRelease();
  v638[0] = v566;
  v638[1] = v557;
  uint64_t v639 = v380;
  uint64_t v381 = *(void *)(v8 + 64);
  uint64_t v382 = *(void *)(v8 + 72);
  uint64_t v383 = *(void *)(v8 + 80);
  uint64_t v384 = *(void *)(v8 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.subscript.getter((unint64_t)&v640, v381, v382, v383, v384);
  uint64_t v386 = v385;
  swift_unknownObjectRelease();
  uint64_t v387 = *(void *)(v8 + 64);
  uint64_t v388 = *(void *)(v8 + 72);
  uint64_t v389 = *(void *)(v8 + 80);
  uint64_t v390 = *(void *)(v8 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.subscript.getter((unint64_t)v638, v387, v388, v389, v390);
  uint64_t v392 = v391;
  swift_unknownObjectRelease();
  int v393 = specialized AttributedString._AttributeStorage.containsParagraphConstraint.getter(v386);
  uint64_t v567 = v392;
  int v394 = specialized AttributedString._AttributeStorage.containsParagraphConstraint.getter(v392);
  if ((v393 & 1) == 0 && (v394 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v364 = 0;
    uint64_t v365 = 0;
    goto LABEL_530;
  }
  if ((v393 ^ v394))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_529:
    long long v469 = *(_OWORD *)v512;
    long long v470 = *((_OWORD *)v512 + 2);
    v573[1] = *((_OWORD *)v512 + 1);
    v573[2] = v470;
    v573[0] = v469;
    long long v471 = *(_OWORD *)v512;
    v583[1] = *((_OWORD *)v512 + 1);
    v583[2] = v470;
    v583[0] = v471;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v583, (uint64_t)v700);
    outlined retain of Locale((uint64_t)v700);
    uint64_t v472 = BigString.index(before:)();
    uint64_t v474 = v473;
    uint64_t v476 = v475;
    uint64_t v478 = v477;
    outlined release of Locale((uint64_t)v573);
    AttributedString.Guts._paragraphExtending(from:)(v472, v474, v476, v478, &v591);
    uint64_t v364 = Range<>._utf8OffsetRange.getter();
    uint64_t v365 = v479;
    char v599 = 0;
    goto LABEL_530;
  }
  uint64_t v542 = v386 + 64;
  uint64_t v397 = 1 << *(unsigned char *)(v386 + 32);
  uint64_t v398 = -1;
  if (v397 < 64) {
    uint64_t v398 = ~(-1 << v397);
  }
  unint64_t v399 = v398 & *(void *)(v386 + 64);
  unint64_t v400 = (unint64_t)(v397 + 63) >> 6;
  unint64_t v523 = v400 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v401 = 0;
  int64_t v548 = v400;
  unint64_t v529 = v400 - 5;
  if (!v399) {
    goto LABEL_355;
  }
  while (2)
  {
    unint64_t v402 = __clz(__rbit64(v399));
    v399 &= v399 - 1;
    unint64_t v403 = v402 | (v401 << 6);
LABEL_352:
    uint64_t v404 = *(void *)(v386 + 56);
    v405 = (void *)(*(void *)(v386 + 48) + 16 * v403);
    uint64_t v406 = v405[1];
    *(void *)&long long v574 = *v405;
    *((void *)&v574 + 1) = v406;
    outlined init with copy of AttributedString._AttributeValue(v404 + 72 * v403, (uint64_t)&v575);
    swift_bridgeObjectRetain();
LABEL_364:
    outlined init with take of (key: String, value: AttributedString._AttributeValue)?((uint64_t)&v574, (uint64_t)&v591);
    uint64_t v409 = *((void *)&v591 + 1);
    if (*((void *)&v591 + 1))
    {
      uint64_t v410 = v591;
      *(_OWORD *)v589 = v594;
      *(_OWORD *)&v589[16] = v595;
      uint64_t v590 = v596;
      long long v587 = v592;
      long long v588 = v593;
      uint64_t v411 = *((void *)&v594 + 1);
      uint64_t v412 = v595;
      if ((void)v595 == 1)
      {
        outlined consume of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v589[8], 1);
        outlined consume of AttributedString.AttributeRunBoundaries?(0, 0);
      }
      else
      {
        long long v574 = *(_OWORD *)&v589[8];
        long long v584 = 0uLL;
        outlined copy of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v589[8], *(uint64_t *)&v589[16]);
        outlined copy of AttributedString.AttributeRunBoundaries?(v411, v412);
        char v413 = specialized static AttributedString.AttributeRunBoundaries.== infix(_:_:)(&v574, &v584);
        swift_bridgeObjectRelease();
        outlined consume of AttributedString.AttributeRunBoundaries?(v411, v412);
        if (v413)
        {
          specialized Dictionary.subscript.getter(v410, v409, v567, (uint64_t)&v584);
          swift_bridgeObjectRelease();
          outlined init with copy of AttributedString._AttributeValue((uint64_t)&v587, (uint64_t)v583);
          outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v584, (uint64_t)&v574);
          outlined init with copy of AttributedString._AttributeValue?((uint64_t)v583, (uint64_t)&v578[8]);
          if (*((void *)&v575 + 1))
          {
            outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v574, (uint64_t)v573);
            uint64_t v8 = v513;
            if (!*((void *)&v579 + 1)) {
              goto LABEL_519;
            }
            long long v570 = v580;
            long long v571 = v581;
            uint64_t v572 = v582;
            long long v568 = *(_OWORD *)&v578[8];
            long long v569 = v579;
            char v414 = specialized static AttributedString._AttributeValue.== infix(_:_:)((uint64_t)v573, (uint64_t)&v568);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v573);
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v568);
            outlined destroy of Any?((uint64_t)&v574, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)v583, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v584, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if ((v414 & 1) == 0) {
              goto LABEL_521;
            }
          }
          else
          {
            uint64_t v8 = v513;
            if (*((void *)&v579 + 1)) {
              goto LABEL_520;
            }
            outlined destroy of Any?((uint64_t)&v574, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)v583, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v584, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          }
          uint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)&v587);
          if (v399) {
            continue;
          }
          goto LABEL_355;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)&v587);
      uint64_t v8 = v513;
      if (v399) {
        continue;
      }
LABEL_355:
      int64_t v407 = v401 + 1;
      if (__OFADD__(v401, 1)) {
        goto LABEL_597;
      }
      if (v407 < v548)
      {
        unint64_t v408 = *(void *)(v542 + 8 * v407);
        if (v408) {
          goto LABEL_358;
        }
        if ((uint64_t)(v401 + 2) >= v548)
        {
          ++v401;
        }
        else
        {
          unint64_t v408 = *(void *)(v542 + 8 * (v401 + 2));
          if (v408)
          {
            int64_t v407 = v401 + 2;
LABEL_358:
            unint64_t v399 = (v408 - 1) & v408;
            unint64_t v403 = __clz(__rbit64(v408)) + (v407 << 6);
            unint64_t v401 = v407;
            goto LABEL_352;
          }
          if ((uint64_t)(v401 + 3) >= v548)
          {
            v401 += 2;
          }
          else
          {
            unint64_t v408 = *(void *)(v542 + 8 * (v401 + 3));
            if (v408)
            {
              int64_t v407 = v401 + 3;
              goto LABEL_358;
            }
            int64_t v407 = v401 + 4;
            if ((uint64_t)(v401 + 4) >= v548)
            {
              v401 += 3;
            }
            else
            {
              unint64_t v408 = *(void *)(v542 + 8 * v407);
              if (v408) {
                goto LABEL_358;
              }
              while (v529 != v401)
              {
                unint64_t v408 = *(void *)(v386 + 104 + 8 * v401++);
                if (v408)
                {
                  int64_t v407 = v401 + 4;
                  goto LABEL_358;
                }
              }
              unint64_t v401 = v523;
            }
          }
        }
      }
      unint64_t v399 = 0;
      long long v577 = 0u;
      memset(v578, 0, sizeof(v578));
      unsigned long long v575 = 0u;
      long long v576 = 0u;
      long long v574 = 0u;
      goto LABEL_364;
    }
    break;
  }
  swift_release();
  uint64_t v415 = *(void *)(v567 + 64);
  uint64_t v416 = 1 << *(unsigned char *)(v567 + 32);
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v417 = 0;
  uint64_t v418 = -1;
  if (v416 < 64) {
    uint64_t v418 = ~(-1 << v416);
  }
  unint64_t v419 = v418 & v415;
  unint64_t v420 = (unint64_t)(v416 + 63) >> 6;
  int64_t v549 = v420;
  unint64_t v535 = v420 - 5;
  uint64_t v543 = v567 + 64;
  unint64_t v526 = v420 - 1;
  if ((v418 & v415) == 0) {
    goto LABEL_393;
  }
  while (2)
  {
    unint64_t v421 = __clz(__rbit64(v419));
    v419 &= v419 - 1;
    unint64_t v422 = v421 | (v417 << 6);
LABEL_390:
    uint64_t v423 = *(void *)(v567 + 56);
    v424 = (void *)(*(void *)(v567 + 48) + 16 * v422);
    uint64_t v425 = v424[1];
    *(void *)&long long v574 = *v424;
    *((void *)&v574 + 1) = v425;
    outlined init with copy of AttributedString._AttributeValue(v423 + 72 * v422, (uint64_t)&v575);
    swift_bridgeObjectRetain();
LABEL_402:
    outlined init with take of (key: String, value: AttributedString._AttributeValue)?((uint64_t)&v574, (uint64_t)&v591);
    uint64_t v428 = *((void *)&v591 + 1);
    if (*((void *)&v591 + 1))
    {
      uint64_t v429 = v591;
      *(_OWORD *)v589 = v594;
      *(_OWORD *)&v589[16] = v595;
      uint64_t v590 = v596;
      long long v587 = v592;
      long long v588 = v593;
      uint64_t v430 = *((void *)&v594 + 1);
      uint64_t v431 = v595;
      if ((void)v595 == 1)
      {
        outlined consume of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v589[8], 1);
        outlined consume of AttributedString.AttributeRunBoundaries?(0, 0);
      }
      else
      {
        long long v574 = *(_OWORD *)&v589[8];
        long long v584 = 0uLL;
        outlined copy of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v589[8], *(uint64_t *)&v589[16]);
        outlined copy of AttributedString.AttributeRunBoundaries?(v430, v431);
        char v432 = specialized static AttributedString.AttributeRunBoundaries.== infix(_:_:)(&v574, &v584);
        swift_bridgeObjectRelease();
        outlined consume of AttributedString.AttributeRunBoundaries?(v430, v431);
        if (v432)
        {
          specialized Dictionary.subscript.getter(v429, v428, v386, (uint64_t)&v584);
          swift_bridgeObjectRelease();
          outlined init with copy of AttributedString._AttributeValue((uint64_t)&v587, (uint64_t)v583);
          outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v584, (uint64_t)&v574);
          outlined init with copy of AttributedString._AttributeValue?((uint64_t)v583, (uint64_t)&v578[8]);
          if (*((void *)&v575 + 1))
          {
            outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v574, (uint64_t)v573);
            uint64_t v8 = v513;
            if (!*((void *)&v579 + 1)) {
              goto LABEL_525;
            }
            long long v570 = v580;
            long long v571 = v581;
            uint64_t v572 = v582;
            long long v568 = *(_OWORD *)&v578[8];
            long long v569 = v579;
            char v433 = specialized static AttributedString._AttributeValue.== infix(_:_:)((uint64_t)v573, (uint64_t)&v568);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v573);
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v568);
            outlined destroy of Any?((uint64_t)&v574, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)v583, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v584, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if ((v433 & 1) == 0) {
              goto LABEL_527;
            }
          }
          else
          {
            uint64_t v8 = v513;
            if (*((void *)&v579 + 1)) {
              goto LABEL_526;
            }
            outlined destroy of Any?((uint64_t)&v574, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)v583, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v584, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          }
          uint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)&v587);
          if (v419) {
            continue;
          }
          goto LABEL_393;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)&v587);
      uint64_t v8 = v513;
      if (v419) {
        continue;
      }
LABEL_393:
      int64_t v426 = v417 + 1;
      if (__OFADD__(v417, 1)) {
        goto LABEL_603;
      }
      if (v426 < v549)
      {
        unint64_t v427 = *(void *)(v543 + 8 * v426);
        if (v427) {
          goto LABEL_396;
        }
        if ((uint64_t)(v417 + 2) >= v549)
        {
          ++v417;
        }
        else
        {
          unint64_t v427 = *(void *)(v543 + 8 * (v417 + 2));
          if (v427)
          {
            int64_t v426 = v417 + 2;
LABEL_396:
            unint64_t v419 = (v427 - 1) & v427;
            unint64_t v422 = __clz(__rbit64(v427)) + (v426 << 6);
            unint64_t v417 = v426;
            goto LABEL_390;
          }
          if ((uint64_t)(v417 + 3) >= v549)
          {
            v417 += 2;
          }
          else
          {
            unint64_t v427 = *(void *)(v543 + 8 * (v417 + 3));
            if (v427)
            {
              int64_t v426 = v417 + 3;
              goto LABEL_396;
            }
            int64_t v426 = v417 + 4;
            if ((uint64_t)(v417 + 4) >= v549)
            {
              v417 += 3;
            }
            else
            {
              unint64_t v427 = *(void *)(v543 + 8 * v426);
              if (v427) {
                goto LABEL_396;
              }
              while (v535 != v417)
              {
                unint64_t v427 = *(void *)(v567 + 104 + 8 * v417++);
                if (v427)
                {
                  int64_t v426 = v417 + 4;
                  goto LABEL_396;
                }
              }
              unint64_t v417 = v526;
            }
          }
        }
      }
      unint64_t v419 = 0;
      long long v577 = 0u;
      memset(v578, 0, sizeof(v578));
      unsigned long long v575 = 0u;
      long long v576 = 0u;
      long long v574 = 0u;
      goto LABEL_402;
    }
    break;
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_425:
  uint64_t v364 = 0;
  uint64_t v365 = 0;
  int64_t v9 = v510;
LABEL_530:
  long long v480 = *(_OWORD *)v512;
  long long v481 = *((_OWORD *)v512 + 2);
  long long v569 = *((_OWORD *)v512 + 1);
  long long v570 = v481;
  long long v568 = v480;
  long long v482 = *(_OWORD *)v512;
  long long v585 = *((_OWORD *)v512 + 1);
  long long v586 = v481;
  long long v584 = v482;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v584, (uint64_t)v704);
  outlined retain of Locale((uint64_t)v704);
  BigString.endIndex.getter();
  outlined release of Locale((uint64_t)&v568);
  if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
  {
LABEL_538:
    int64_t v395 = 0;
    uint64_t v115 = 0;
    goto LABEL_539;
  }
  if (v599)
  {
    uint64_t v483 = v508;
    if (v508 < 1) {
      goto LABEL_538;
    }
  }
  else
  {
    uint64_t v483 = v508;
    if (v365 >= v508) {
      goto LABEL_538;
    }
  }
  if ((AttributedString.Guts._needsParagraphFixing(from:to:)(v483 - 1, v483) & 1) == 0) {
    goto LABEL_538;
  }
  long long v484 = *(_OWORD *)v512;
  long long v485 = *((_OWORD *)v512 + 1);
  long long v637 = *((_OWORD *)v512 + 2);
  long long v636 = v485;
  long long v635 = v484;
  long long v486 = *(_OWORD *)v512;
  long long v588 = *((_OWORD *)v512 + 1);
  *(_OWORD *)v589 = v637;
  long long v587 = v486;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v587, (uint64_t)v633);
  outlined retain of Locale((uint64_t)v633);
  uint64_t v487 = BigString.index(before:)();
  uint64_t v489 = v488;
  uint64_t v491 = v490;
  uint64_t v493 = v492;
  outlined release of Locale((uint64_t)&v635);
  AttributedString.Guts._paragraphExtending(from:)(v487, v489, v491, v493, &v574);
  int64_t v395 = Range<>._utf8OffsetRange.getter();
  uint64_t v115 = v494;
  int v396 = 1;
  if ((v599 & 1) == 0) {
    goto LABEL_540;
  }
LABEL_542:
  if (v508 < v115) {
    int v496 = v396;
  }
  else {
    int v496 = 0;
  }
  if (v496 == 1)
  {
    uint64_t v598 = 0;
    uint64_t v597 = 0;
    AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v597, v395, v508, v115);
  }
  return swift_unknownObjectRelease();
}

uint64_t specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  long long v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v443 = v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v7 = (void *)*v1;
    long long v8 = *(_OWORD *)(*v1 + 16);
    long long v9 = *(_OWORD *)(*v1 + 32);
    long long v575 = *(_OWORD *)(*v1 + 48);
    long long v574 = v9;
    long long v573 = v8;
    uint64_t v10 = v7[8];
    uint64_t v11 = v7[9];
    uint64_t v12 = v7[10];
    uint64_t v13 = v7[11];
    type metadata accessor for AttributedString.Guts();
    uint64_t v14 = (uint64_t *)v1;
    uint64_t v15 = swift_allocObject();
    outlined retain of Locale((uint64_t)&v573);
    swift_unknownObjectRetain();
    int v16 = BigString.isEmpty.getter();
    uint64_t v17 = swift_unknownObjectRetain();
    int v18 = specialized Collection.isEmpty.getter(v17, v11, v12);
    uint64_t result = swift_unknownObjectRelease();
    if ((v16 ^ v18))
    {
LABEL_443:
      __break(1u);
LABEL_444:
      __break(1u);
LABEL_445:
      __break(1u);
LABEL_446:
      __break(1u);
LABEL_447:
      __break(1u);
LABEL_448:
      __break(1u);
LABEL_449:
      __break(1u);
      goto LABEL_450;
    }
    long long v20 = v574;
    *(_OWORD *)(v15 + 16) = v573;
    *(_OWORD *)(v15 + 32) = v20;
    *(_OWORD *)(v15 + 48) = v575;
    *(void *)(v15 + 64) = v10;
    *(void *)(v15 + 72) = v11;
    *(void *)(v15 + 80) = v12;
    *(void *)(v15 + 88) = v13;
    uint64_t *v14 = v15;
    swift_release();
    long long v2 = (unint64_t *)v14;
    uint64_t v6 = v443;
  }
  uint64_t v21 = (_OWORD *)*v2;
  long long v22 = *(_OWORD *)(v2 + 3);
  long long v558 = *(_OWORD *)(v2 + 1);
  long long v559 = v22;
  long long v23 = *(_OWORD *)(v2 + 7);
  long long v560 = *(_OWORD *)(v2 + 5);
  long long v561 = v23;
  long long v24 = v21[1];
  long long v25 = v21[2];
  v572[2] = v21[3];
  v572[1] = v25;
  v572[0] = v24;
  outlined retain of Locale(v4);
  outlined retain of Locale((uint64_t)v572);
  BigSubstring.UnicodeScalarView.init(_unchecked:in:)();
  BigSubstring.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v487);
  char v26 = BigSubstring.UnicodeScalarView.isIdentical(to:)();
  uint64_t v432 = v4;
  outlined release of Locale(v4);
  outlined release of Locale((uint64_t)v488);
  uint64_t v27 = (_OWORD *)*v2;
  long long v28 = *(_OWORD *)(*v2 + 16);
  long long v29 = *(_OWORD *)(*v2 + 32);
  long long v571 = *(_OWORD *)(*v2 + 48);
  v570[1] = v29;
  v570[0] = v28;
  long long v30 = v27[1];
  long long v31 = v27[2];
  v576[2] = v571;
  v576[1] = v31;
  v576[0] = v30;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v576, (uint64_t)v577);
  outlined retain of Locale((uint64_t)v577);
  char v32 = BigString.isEmpty.getter();
  outlined release of Locale((uint64_t)v570);
  unint64_t v445 = v2;
  char v440 = v26;
  if ((v32 & 1) == 0)
  {
    if ((static BigString.Index.== infix(_:_:)() & 1) != 0 && BigString.Index.utf8Offset.getter() >= 1)
    {
      long long v33 = v27[1];
      long long v34 = v27[2];
      long long v569 = v27[3];
      v568[1] = v34;
      v568[0] = v33;
      long long v35 = v27[1];
      long long v36 = v27[2];
      v578[2] = v569;
      v578[1] = v36;
      v578[0] = v35;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v578, (uint64_t)v579);
      outlined retain of Locale((uint64_t)v579);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v568);
      BigString.UTF8View.index(before:)();
      outlined release of Locale((uint64_t)v489);
    }
    uint64_t v37 = *((void *)v27 + 8);
    uint64_t v4 = *((void *)v27 + 9);
    int64_t v39 = *((void *)v27 + 10);
    unint64_t v38 = *((void *)v27 + 11);
    swift_unknownObjectRetain();
    uint64_t result = BigString.Index.utf8Offset.getter();
    if (v37) {
      int64_t v40 = v39;
    }
    else {
      int64_t v40 = 0;
    }
    if (result < 0) {
      goto LABEL_444;
    }
    uint64_t v41 = result;
    if (v40 < result) {
      goto LABEL_444;
    }
    if (v37 && result < v39 && *(_WORD *)(v37 + 16))
    {
      *(void *)&long long v461 = v4;
      uint64_t v42 = *(unsigned __int8 *)(v37 + 18);
      if (*(unsigned char *)(v37 + 18))
      {
        uint64_t result = swift_unknownObjectRetain_n();
        uint64_t v4 = 24;
        int64_t v43 = v37;
        while (1)
        {
          uint64_t v46 = *(unsigned __int16 *)(v43 + 16);
          if (!*(_WORD *)(v43 + 16)) {
            goto LABEL_20;
          }
          uint64_t v47 = *(void *)(v43 + 40);
          BOOL v48 = __OFSUB__(v41, v47);
          uint64_t v49 = v41 - v47;
          if (v48) {
            goto LABEL_424;
          }
          if (__OFADD__(v49, 1)) {
            goto LABEL_425;
          }
          if (v49 + 1 < 1)
          {
            uint64_t v46 = 0;
          }
          else
          {
            if (v46 == 1)
            {
              uint64_t v41 = v49;
LABEL_20:
              if (v41) {
                goto LABEL_423;
              }
              goto LABEL_21;
            }
            uint64_t v50 = (uint64_t *)(v43 + 64);
            uint64_t v51 = 1;
            while (1)
            {
              uint64_t v52 = *v50;
              v50 += 3;
              uint64_t v41 = v49 - v52;
              if (__OFSUB__(v49, v52)) {
                goto LABEL_401;
              }
              if (__OFADD__(v41, 1)) {
                goto LABEL_402;
              }
              if (v41 + 1 < 1) {
                break;
              }
              ++v51;
              uint64_t v49 = v41;
              if (v46 == v51) {
                goto LABEL_20;
              }
            }
            uint64_t v46 = v51;
            uint64_t v41 = v49;
          }
LABEL_21:
          char v44 = (4 * *(unsigned char *)(v43 + 18) + 8) & 0x3C;
          uint64_t v42 = ((-15 << v44) - 1) & v42 | (v46 << v44);
          uint64_t v45 = *(void *)(v43 + 24 + 24 * v46);
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          int64_t v43 = v45;
          if (!*(unsigned char *)(v45 + 18)) {
            goto LABEL_358;
          }
        }
      }
      swift_unknownObjectRetain_n();
      uint64_t v45 = v37;
LABEL_358:
      uint64_t result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v41, 0, (_WORD *)(v45 + 16), (uint64_t *)(v45 + 24));
      if (result < 0) {
        goto LABEL_466;
      }
      uint64_t v408 = result;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v54 = v42 & 0xFFFFFFFFFFFFF0FFLL | (v408 << 8);
      uint64_t v55 = v461;
    }
    else
    {
      unint64_t v53 = swift_unknownObjectRetain();
      unint64_t v54 = specialized Rope._endPath.getter(v53);
      swift_unknownObjectRelease();
      uint64_t v55 = v4;
      uint64_t v45 = 0;
      uint64_t v56 = 0;
      if (!v37)
      {
LABEL_37:
        uint64_t v57 = *((void *)v27 + 8);
        uint64_t v58 = *((void *)v27 + 9);
        uint64_t v59 = *((void *)v27 + 10);
        uint64_t v60 = *((void *)v27 + 11);
        swift_unknownObjectRetain();
        specialized Rope.subscript.getter(v38, v54, v56, v57, v58, v59, v60);
        swift_unknownObjectRelease();
        uint64_t v61 = swift_bridgeObjectRetain();
        uint64_t v430 = specialized _NativeDictionary.filter(_:)(v61);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        uint64_t v6 = v443;
        long long v2 = v445;
        goto LABEL_38;
      }
    }
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v38, v54, v45, v37, v55);
    swift_unknownObjectRelease_n();
    uint64_t v56 = v45;
    goto LABEL_37;
  }
  uint64_t v430 = MEMORY[0x1E4FBC868];
LABEL_38:
  unint64_t v38 = *v2;
  unint64_t v437 = *(long long **)(v6 + 16);
  uint64_t v62 = BigString.Index.utf8Offset.getter();
  uint64_t v63 = BigString.Index.utf8Offset.getter();
  if (v62 == v63)
  {
    uint64_t v64 = v62;
    goto LABEL_224;
  }
  uint64_t v460 = v63;
  *(void *)&long long v469 = v62;
  unint64_t v65 = *(void *)(v38 + 64);
  uint64_t v66 = *(void *)(v38 + 72);
  uint64_t v67 = *(void *)(v38 + 80);
  uint64_t v68 = *(void *)(v38 + 88);
  swift_unknownObjectRetain_n();
  uint64_t v431 = v62;
  uint64_t v69 = specialized Rope.find<A>(at:in:preferEnd:)(v62, 0, v65, v66, v67, v68);
  unint64_t v71 = v70;
  uint64_t v73 = v72;
  swift_unknownObjectRelease();
  swift_unknownObjectRetain();
  specialized Rope.offset<A>(of:in:)(v69, v71, v73, v65, v66, v67, v68);
  swift_unknownObjectRelease_n();
  uint64_t v74 = *(void *)(v38 + 64);
  uint64_t v4 = *(void *)(v38 + 72);
  uint64_t v75 = *(void *)(v38 + 80);
  uint64_t v76 = *(void *)(v38 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v69, v71, v73, v74, v4, v75, v76);
  int64_t v39 = v77;
  uint64_t v455 = v78;
  swift_unknownObjectRelease();
  uint64_t v79 = swift_bridgeObjectRetain();
  uint64_t v80 = specialized _NativeDictionary.filter(_:)(v79);
  swift_bridgeObjectRelease_n();
  uint64_t v37 = *(void *)(v80 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v81 = 0;
  *(void *)&long long v480 = result;
  *(void *)&long long v461 = v80;
  uint64_t v82 = 1 << *(unsigned char *)(v80 + 32);
  uint64_t v49 = -1;
  if (v82 < 64) {
    uint64_t v49 = ~(-1 << v82);
  }
  uint64_t v83 = v80 + 64;
  unint64_t v84 = v49 & *(void *)(v80 + 64);
  int64_t v43 = (unint64_t)(v82 + 63) >> 6;
  while (1)
  {
    if (v84)
    {
      unint64_t v85 = __clz(__rbit64(v84));
      v84 &= v84 - 1;
      unint64_t v86 = v85 | (v81 << 6);
      goto LABEL_44;
    }
    uint64_t v46 = v81 + 1;
    if (__OFADD__(v81, 1)) {
      goto LABEL_400;
    }
    if (v46 >= v43) {
      break;
    }
    unint64_t v88 = *(void *)(v83 + 8 * v46);
    ++v81;
    if (!v88)
    {
      int64_t v81 = v46 + 1;
      if (v46 + 1 >= v43) {
        break;
      }
      unint64_t v88 = *(void *)(v83 + 8 * v81);
      if (!v88)
      {
        int64_t v81 = v46 + 2;
        if (v46 + 2 >= v43) {
          break;
        }
        unint64_t v88 = *(void *)(v83 + 8 * v81);
        if (!v88)
        {
          int64_t v81 = v46 + 3;
          if (v46 + 3 >= v43) {
            break;
          }
          unint64_t v88 = *(void *)(v83 + 8 * v81);
          if (!v88)
          {
            int64_t v81 = v46 + 4;
            if (v46 + 4 >= v43) {
              break;
            }
            unint64_t v88 = *(void *)(v83 + 8 * v81);
            if (!v88)
            {
              int64_t v89 = v46 + 5;
              if (v89 >= v43) {
                break;
              }
              unint64_t v88 = *(void *)(v83 + 8 * v89);
              if (!v88)
              {
                while (1)
                {
                  int64_t v81 = v89 + 1;
                  if (__OFADD__(v89, 1)) {
                    break;
                  }
                  if (v81 >= v43) {
                    goto LABEL_64;
                  }
                  unint64_t v88 = *(void *)(v83 + 8 * v81);
                  ++v89;
                  if (v88) {
                    goto LABEL_63;
                  }
                }
LABEL_455:
                __break(1u);
LABEL_456:
                __break(1u);
LABEL_457:
                __break(1u);
LABEL_458:
                __break(1u);
                goto LABEL_459;
              }
              int64_t v81 = v89;
            }
          }
        }
      }
    }
LABEL_63:
    unint64_t v84 = (v88 - 1) & v88;
    unint64_t v86 = __clz(__rbit64(v88)) + (v81 << 6);
LABEL_44:
    uint64_t v87 = (uint64_t *)(*(void *)(v461 + 48) + 16 * v86);
    uint64_t v4 = *v87;
    int64_t v39 = v87[1];
    swift_bridgeObjectRetain();
    uint64_t v37 = (uint64_t)&v480;
    specialized Set._Variant.insert(_:)((unint64_t *)&v548, v4, v39);
    uint64_t result = swift_bridgeObjectRelease();
  }
LABEL_64:
  uint64_t result = swift_release();
  uint64_t v90 = v480;
  *(void *)&long long v463 = v480;
  if (v431 < 0) {
    goto LABEL_445;
  }
  if (v431)
  {
    uint64_t v91 = *(void *)(v38 + 64);
    uint64_t v92 = *(void *)(v38 + 72);
    uint64_t v93 = *(void *)(v38 + 80);
    uint64_t v94 = *(void *)(v38 + 88);
    swift_unknownObjectRetain();
    swift_retain();
    AttributedString._InternalRuns.endIndex.getter(v91, v92, v93, v94, &v490);
    long long v448 = v491;
    long long v452 = v490;
    uint64_t v95 = v492;
    swift_unknownObjectRelease();
    long long v97 = v448;
    long long v96 = v452;
  }
  else
  {
    uint64_t v98 = (void *)swift_retain();
    AttributedString._InternalRunsSlice.startIndex.getter(v98, 0, (unint64_t *)&v490);
    long long v96 = v490;
    long long v97 = v491;
    uint64_t v95 = v492;
  }
  long long v480 = v96;
  long long v481 = v97;
  *(void *)&long long v482 = v95;
  unint64_t v99 = *(void *)(v38 + 64);
  uint64_t v100 = *(void *)(v38 + 72);
  uint64_t v101 = *(void *)(v38 + 80);
  uint64_t v102 = *(void *)(v38 + 88);
  char Enum = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
  swift_unknownObjectRetain();
  char v449 = Enum;
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, Enum & 1, v99, v100, v101, v102, (uint64_t *)&v548);
  uint64_t v104 = v550;
  swift_unknownObjectRelease();
  if (v104 < v95 && *(void *)(v90 + 16))
  {
    while (2)
    {
      long long v105 = v480;
      uint64_t v4 = *((void *)&v481 + 1);
      uint64_t v106 = v481;
      uint64_t v107 = *(void *)(v38 + 64);
      uint64_t v108 = *(void *)(v38 + 80);
      unint64_t v109 = swift_unknownObjectRetain();
      uint64_t result = specialized Rope._endPath.getter(v109);
      if (v107)
      {
        uint64_t result = swift_unknownObjectRelease();
        if (v95 == v108) {
          goto LABEL_72;
        }
LABEL_94:
        uint64_t v122 = v106;
        uint64_t v123 = *(void *)(v38 + 64);
        uint64_t v124 = *(void *)(v38 + 72);
        uint64_t v125 = v4;
        uint64_t v126 = *(void *)(v38 + 80);
        uint64_t v4 = *(void *)(v38 + 88);
        long long v548 = v105;
        *(void *)&long long v549 = v122;
        uint64_t v127 = v125 - 1;
        if (__OFSUB__(v125, 1)) {
          goto LABEL_440;
        }
        swift_unknownObjectRetain();
        specialized Rope.formIndex(before:)((uint64_t)&v548, v123, v124, v126, v4);
        unint64_t v128 = *((void *)&v548 + 1);
        uint64_t v37 = v548;
        uint64_t v115 = v549;
        unint64_t v129 = specialized Rope.subscript.getter(v548, *((unint64_t *)&v548 + 1), v549, v123, v124, v126, v4);
        uint64_t v4 = v130;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v131 = v95 - v129;
        if (__OFSUB__(v95, v129)) {
          goto LABEL_441;
        }
        uint64_t v132 = v431;
LABEL_119:
        *(void *)&long long v480 = v37;
        *((void *)&v480 + 1) = v128;
        *(void *)&long long v481 = v115;
        *((void *)&v481 + 1) = v127;
        *(void *)&long long v482 = v131;
        swift_retain();
        swift_bridgeObjectRetain();
        specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v480, 0, v132, (void *)v38, (uint64_t *)&v463, v461, v455, (uint64_t)&v469);
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v95 = v482;
        unint64_t v140 = *(void *)(v38 + 64);
        uint64_t v141 = *(void *)(v38 + 72);
        uint64_t v142 = *(void *)(v38 + 80);
        uint64_t v143 = *(void *)(v38 + 88);
        swift_unknownObjectRetain();
        AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, v449 & 1, v140, v141, v142, v143, (uint64_t *)&v548);
        uint64_t v144 = v550;
        swift_unknownObjectRelease();
        if (v144 >= v95 || !*(void *)(v463 + 16)) {
          goto LABEL_121;
        }
        continue;
      }
      break;
    }
    if (v95) {
      goto LABEL_94;
    }
LABEL_72:
    int64_t v39 = *(void *)(v38 + 64);
    int64_t v43 = *(void *)(v38 + 72);
    uint64_t v37 = *(void *)(v38 + 88);
    if (v39)
    {
      uint64_t v110 = -15;
      if (*(void *)(v38 + 80) < v431) {
        goto LABEL_446;
      }
      if (*(_WORD *)(v39 + 16))
      {
        uint64_t v111 = *(unsigned __int8 *)(v39 + 18);
        if (*(unsigned char *)(v39 + 18))
        {
          uint64_t result = swift_unknownObjectRetain_n();
          uint64_t v4 = v431;
          int64_t v112 = v39;
          while (1)
          {
            uint64_t v116 = *(unsigned __int16 *)(v112 + 16);
            if (!*(_WORD *)(v112 + 16)) {
              goto LABEL_479;
            }
            uint64_t v117 = *(void *)(v112 + 40);
            BOOL v48 = __OFSUB__(v4, v117);
            uint64_t v118 = v4 - v117;
            if (v48) {
              goto LABEL_415;
            }
            if (v118 <= 0)
            {
              uint64_t v113 = 0;
            }
            else
            {
              if (v116 == 1) {
                goto LABEL_481;
              }
              uint64_t v119 = *(void *)(v112 + 64);
              uint64_t v4 = v118 - v119;
              if (__OFSUB__(v118, v119)) {
                goto LABEL_419;
              }
              if (v4 >= 1)
              {
                if (v116 == 2) {
                  goto LABEL_481;
                }
                v120 = (void *)(v112 + 88);
                uint64_t v113 = 2;
                while (v116 != v113)
                {
                  uint64_t v121 = v4 - *v120;
                  if (__OFSUB__(v4, *v120)) {
                    goto LABEL_381;
                  }
                  if (v121 < 1) {
                    goto LABEL_78;
                  }
                  ++v113;
                  v120 += 3;
                  uint64_t v4 = v121;
                  if (v116 == v113) {
                    goto LABEL_481;
                  }
                }
                __break(1u);
LABEL_381:
                __break(1u);
LABEL_382:
                uint64_t v409 = 0;
                goto LABEL_396;
              }
              uint64_t v4 = v118;
              uint64_t v113 = 1;
            }
LABEL_78:
            char v114 = (4 * *(unsigned char *)(v112 + 18) + 8) & 0x3C;
            uint64_t v111 = ((-15 << v114) - 1) & v111 | (v113 << v114);
            uint64_t v115 = *(void *)(v112 + 24 + 24 * v113);
            swift_unknownObjectRetain();
            uint64_t result = swift_unknownObjectRelease();
            int64_t v112 = v115;
            if (!*(unsigned char *)(v115 + 18)) {
              goto LABEL_101;
            }
          }
        }
        uint64_t result = swift_unknownObjectRetain_n();
        uint64_t v4 = v431;
        uint64_t v115 = v39;
LABEL_101:
        uint64_t v133 = *(unsigned __int16 *)(v115 + 16);
        if (!*(_WORD *)(v115 + 16)) {
          goto LABEL_482;
        }
        uint64_t v134 = *(void *)(v115 + 24);
        BOOL v48 = __OFSUB__(v4, v134);
        uint64_t v135 = v4 - v134;
        if (v48) {
          goto LABEL_464;
        }
        if (v135 <= 0)
        {
          uint64_t v138 = 0;
        }
        else
        {
          if (v133 == 1) {
            goto LABEL_484;
          }
          uint64_t v136 = *(void *)(v115 + 48);
          uint64_t v4 = v135 - v136;
          if (__OFSUB__(v135, v136)) {
            goto LABEL_465;
          }
          if (v4 >= 1)
          {
            if (v133 == 2) {
              goto LABEL_484;
            }
            uint64_t v137 = (void *)(v115 + 72);
            uint64_t v138 = 2;
            while (v133 != v138)
            {
              uint64_t v139 = v4 - *v137;
              if (__OFSUB__(v4, *v137)) {
                goto LABEL_418;
              }
              if (v139 < 1) {
                goto LABEL_116;
              }
              ++v138;
              v137 += 3;
              uint64_t v4 = v139;
              if (v133 == v138) {
                goto LABEL_484;
              }
            }
            goto LABEL_417;
          }
          uint64_t v4 = v135;
          uint64_t v138 = 1;
        }
LABEL_116:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v128 = v111 & 0xFFFFFFFFFFFFF0FFLL | (v138 << 8);
LABEL_99:
        swift_unknownObjectRetain();
        uint64_t v127 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v37, v128, v115, v39, v43);
        uint64_t result = swift_unknownObjectRelease_n();
        goto LABEL_118;
      }
    }
    else if (v431)
    {
      goto LABEL_463;
    }
    swift_unknownObjectRetain_n();
    unint64_t v128 = specialized Rope._endPath.getter(v39);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v115 = 0;
    uint64_t v4 = 0;
    if (v39) {
      goto LABEL_99;
    }
    uint64_t v127 = 0;
LABEL_118:
    uint64_t v132 = v431;
    uint64_t v131 = v431 - v4;
    if (__OFSUB__(v431, v4)) {
      goto LABEL_442;
    }
    goto LABEL_119;
  }
LABEL_121:
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)&long long v463 = v460;
  if (__OFSUB__(v460, 1))
  {
LABEL_450:
    __break(1u);
    goto LABEL_451;
  }
  unint64_t v145 = *(void *)(v38 + 64);
  uint64_t v146 = *(void *)(v38 + 72);
  uint64_t v147 = *(void *)(v38 + 80);
  uint64_t v148 = *(void *)(v38 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v460 - 1, v449 & 1, v145, v146, v147, v148, (uint64_t *)&v548);
  long long v461 = v548;
  long long v456 = v549;
  uint64_t v149 = v550;
  swift_unknownObjectRelease();
  v566[0] = v461;
  v566[1] = v456;
  uint64_t v567 = v149;
  uint64_t v150 = *(void *)(v38 + 64);
  uint64_t v151 = *(void *)(v38 + 72);
  int64_t v39 = *(void *)(v38 + 80);
  uint64_t v152 = *(void *)(v38 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.subscript.getter((unint64_t)v566, v150, v151, v39, v152);
  uint64_t v154 = v153;
  swift_unknownObjectRelease();
  uint64_t v155 = AttributedString._AttributeStorage.filterWithoutInvalidatingDependents(_:)((uint64_t (*)(uint64_t, uint64_t, long long *))closure #1 in AttributedString.Guts._characterInvalidatedAttributes(at:), 0, v154);
  uint64_t v457 = v156;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v37 = *(void *)(v155 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v157 = 0;
  *(void *)&long long v480 = result;
  uint64_t v158 = 1 << *(unsigned char *)(v155 + 32);
  uint64_t v49 = -1;
  if (v158 < 64) {
    uint64_t v49 = ~(-1 << v158);
  }
  int64_t v43 = v155 + 64;
  uint64_t v4 = v49 & *(void *)(v155 + 64);
  int64_t v159 = (unint64_t)(v158 + 63) >> 6;
  while (2)
  {
    if (v4)
    {
      unint64_t v160 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v161 = v160 | (v157 << 6);
LABEL_126:
      uint64_t v162 = (unint64_t *)(*(void *)(v155 + 48) + 16 * v161);
      unint64_t v163 = *v162;
      unint64_t v164 = v162[1];
      swift_bridgeObjectRetain();
      uint64_t v37 = (uint64_t)&v480;
      specialized Set._Variant.insert(_:)((unint64_t *)&v548, v163, v164);
      uint64_t result = swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
  uint64_t v46 = v157 + 1;
  if (__OFADD__(v157, 1)) {
    goto LABEL_403;
  }
  if (v46 < v159)
  {
    unint64_t v165 = *(void *)(v43 + 8 * v46);
    ++v157;
    if (!v165)
    {
      int64_t v157 = v46 + 1;
      if (v46 + 1 >= v159) {
        goto LABEL_146;
      }
      unint64_t v165 = *(void *)(v43 + 8 * v157);
      if (!v165)
      {
        int64_t v157 = v46 + 2;
        if (v46 + 2 >= v159) {
          goto LABEL_146;
        }
        unint64_t v165 = *(void *)(v43 + 8 * v157);
        if (!v165)
        {
          int64_t v157 = v46 + 3;
          if (v46 + 3 >= v159) {
            goto LABEL_146;
          }
          unint64_t v165 = *(void *)(v43 + 8 * v157);
          if (!v165)
          {
            int64_t v157 = v46 + 4;
            if (v46 + 4 >= v159) {
              goto LABEL_146;
            }
            unint64_t v165 = *(void *)(v43 + 8 * v157);
            if (!v165)
            {
              int64_t v166 = v46 + 5;
              if (v166 >= v159) {
                goto LABEL_146;
              }
              unint64_t v165 = *(void *)(v43 + 8 * v166);
              if (!v165)
              {
                while (1)
                {
                  int64_t v157 = v166 + 1;
                  if (__OFADD__(v166, 1)) {
                    break;
                  }
                  if (v157 >= v159) {
                    goto LABEL_146;
                  }
                  unint64_t v165 = *(void *)(v43 + 8 * v157);
                  ++v166;
                  if (v165) {
                    goto LABEL_145;
                  }
                }
LABEL_459:
                __break(1u);
LABEL_460:
                __break(1u);
LABEL_461:
                __break(1u);
LABEL_462:
                __break(1u);
LABEL_463:
                __break(1u);
LABEL_464:
                __break(1u);
LABEL_465:
                __break(1u);
LABEL_466:
                __break(1u);
LABEL_467:
                __break(1u);
LABEL_468:
                __break(1u);
LABEL_469:
                __break(1u);
LABEL_470:
                __break(1u);
LABEL_471:
                __break(1u);
LABEL_472:
                __break(1u);
LABEL_473:
                __break(1u);
LABEL_474:
                __break(1u);
LABEL_475:
                __break(1u);
LABEL_476:
                __break(1u);
LABEL_477:
                __break(1u);
LABEL_478:
                __break(1u);
LABEL_479:
                if (!v4) {
                  __break(1u);
                }
LABEL_481:
                __break(1u);
LABEL_482:
                if (!v4) {
                  __break(1u);
                }
LABEL_484:
                __break(1u);
                return result;
              }
              int64_t v157 = v166;
            }
          }
        }
      }
    }
LABEL_145:
    uint64_t v4 = (v165 - 1) & v165;
    unint64_t v161 = __clz(__rbit64(v165)) + (v157 << 6);
    goto LABEL_126;
  }
LABEL_146:
  swift_release();
  uint64_t v531 = v480;
  long long v167 = *(_OWORD *)(v38 + 16);
  long long v168 = *(_OWORD *)(v38 + 32);
  long long v565 = *(_OWORD *)(v38 + 48);
  v564[1] = v168;
  v564[0] = v167;
  long long v169 = *(_OWORD *)(v38 + 16);
  long long v170 = *(_OWORD *)(v38 + 32);
  v580[2] = v565;
  v580[1] = v170;
  v580[0] = v169;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v580, (uint64_t)v581);
  outlined retain of Locale((uint64_t)v581);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v564);
  uint64_t v171 = BigString.UTF8View.count.getter();
  uint64_t result = outlined release of Locale((uint64_t)v493);
  *(void *)&long long v461 = v171;
  if (v171 < v460)
  {
LABEL_451:
    __break(1u);
    goto LABEL_452;
  }
  unint64_t v172 = *(void *)(v38 + 64);
  uint64_t v173 = *(void *)(v38 + 72);
  uint64_t v174 = *(void *)(v38 + 80);
  uint64_t v175 = *(void *)(v38 + 88);
  swift_unknownObjectRetain();
  swift_retain();
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v460, v449 & 1, v172, v173, v174, v175, (uint64_t *)&v548);
  long long v450 = v548;
  long long v176 = v549;
  uint64_t v177 = v550;
  uint64_t v178 = v460;
  swift_unknownObjectRelease();
  long long v548 = v450;
  long long v549 = v176;
  *(void *)&long long v550 = v177;
  uint64_t v453 = v155;
  while (2)
  {
    if (v178 == (void)v461)
    {
      AttributedString._InternalRunsSlice.startIndex.getter((void *)v38, v178, v494);
      long long v182 = &v495;
    }
    else
    {
      uint64_t v183 = *(void *)(v38 + 72);
      uint64_t v184 = *(void *)(v38 + 80);
      uint64_t v185 = *(void *)(v38 + 88);
      uint64_t v186 = swift_unknownObjectRetain();
      AttributedString._InternalRuns.endIndex.getter(v186, v183, v184, v185, v496);
      uint64_t v178 = v460;
      swift_unknownObjectRelease();
      long long v182 = &v497;
    }
    if (v177 < *v182 && *(void *)(v531 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v548, v178, v461, (void *)v38, &v531, v155, v457, (uint64_t)&v463);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v4 = *((void *)&v548 + 1);
      unint64_t v187 = v548;
      uint64_t v188 = v549;
      int64_t v39 = v550;
      uint64_t v189 = *(void *)(v38 + 64);
      uint64_t v190 = *(void *)(v38 + 72);
      uint64_t v191 = *(void *)(v38 + 80);
      uint64_t v192 = *(void *)(v38 + 88);
      long long v480 = v548;
      *(void *)&long long v481 = v549;
      uint64_t v193 = *((void *)&v549 + 1) + 1;
      if (__OFADD__(*((void *)&v549 + 1), 1))
      {
LABEL_409:
        __break(1u);
LABEL_410:
        __break(1u);
LABEL_411:
        __break(1u);
LABEL_412:
        __break(1u);
LABEL_413:
        __break(1u);
LABEL_414:
        __break(1u);
LABEL_415:
        __break(1u);
LABEL_416:
        __break(1u);
LABEL_417:
        __break(1u);
LABEL_418:
        __break(1u);
LABEL_419:
        __break(1u);
LABEL_420:
        __break(1u);
LABEL_421:
        __break(1u);
LABEL_422:
        __break(1u);
LABEL_423:
        __break(1u);
LABEL_424:
        __break(1u);
LABEL_425:
        __break(1u);
LABEL_426:
        __break(1u);
LABEL_427:
        __break(1u);
LABEL_428:
        __break(1u);
LABEL_429:
        __break(1u);
LABEL_430:
        __break(1u);
LABEL_431:
        __break(1u);
LABEL_432:
        __break(1u);
        goto LABEL_433;
      }
      swift_unknownObjectRetain();
      unint64_t v194 = specialized Rope.subscript.getter(v187, v4, v188, v189, v190, v191, v192);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v177 = v39 + v194;
      if (__OFADD__(v39, v194)) {
        goto LABEL_410;
      }
      swift_unknownObjectRetain();
      specialized Rope.formIndex(after:)(&v480, v189, v190, v191, v192);
      uint64_t result = swift_unknownObjectRelease_n();
      if (v177 < (uint64_t)v461)
      {
        unint64_t v179 = *((void *)&v480 + 1);
        uint64_t v180 = v480;
        uint64_t v181 = v481;
        uint64_t v178 = v460;
      }
      else
      {
        uint64_t v195 = *(void *)(v38 + 64);
        uint64_t v193 = *(void *)(v38 + 72);
        uint64_t v177 = *(void *)(v38 + 80);
        uint64_t v180 = *(void *)(v38 + 88);
        uint64_t v178 = v460;
        if (v460 == (void)v461)
        {
          if (v195) {
            uint64_t v196 = *(void *)(v38 + 80);
          }
          else {
            uint64_t v196 = 0;
          }
          if (v460 < 0 || v196 < v460) {
            goto LABEL_428;
          }
          if (v195 && v460 < v177 && *(_WORD *)(v195 + 16))
          {
            uint64_t v37 = *(unsigned __int8 *)(v195 + 18);
            if (*(unsigned char *)(v195 + 18))
            {
              uint64_t result = swift_unknownObjectRetain_n();
              uint64_t v4 = v460;
              int64_t v43 = v195;
              while (1)
              {
                uint64_t v46 = *(unsigned __int16 *)(v43 + 16);
                if (!*(_WORD *)(v43 + 16)) {
                  goto LABEL_170;
                }
                uint64_t v198 = *(void *)(v43 + 40);
                uint64_t v199 = v4 - v198;
                if (__OFSUB__(v4, v198)) {
                  goto LABEL_412;
                }
                if (__OFADD__(v199, 1)) {
                  goto LABEL_413;
                }
                if (v199 + 1 <= 0)
                {
                  uint64_t v46 = 0;
                }
                else
                {
                  if (v46 == 1)
                  {
                    v4 -= v198;
                    goto LABEL_170;
                  }
                  uint64_t v200 = *(void *)(v43 + 64);
                  BOOL v48 = __OFSUB__(v199, v200);
                  uint64_t v49 = v199 - v200;
                  if (v48) {
                    goto LABEL_426;
                  }
                  if (__OFADD__(v49, 1)) {
                    goto LABEL_427;
                  }
                  if (v49 + 1 < 1)
                  {
                    uint64_t v46 = 1;
                    uint64_t v4 = v199;
                  }
                  else
                  {
                    if (v46 == 2)
                    {
                      uint64_t v4 = v49;
LABEL_170:
                      if (v4) {
                        goto LABEL_411;
                      }
                      goto LABEL_171;
                    }
                    long long v201 = (void *)(v43 + 88);
                    uint64_t v202 = 2;
                    while (1)
                    {
                      if (v46 == v202) {
                        goto LABEL_404;
                      }
                      uint64_t v4 = v49 - *v201;
                      if (__OFSUB__(v49, *v201)) {
                        goto LABEL_405;
                      }
                      if (__OFADD__(v4, 1)) {
                        goto LABEL_406;
                      }
                      if (v4 + 1 < 1) {
                        break;
                      }
                      ++v202;
                      v201 += 3;
                      uint64_t v49 = v4;
                      if (v46 == v202) {
                        goto LABEL_170;
                      }
                    }
                    uint64_t v46 = v202;
                    uint64_t v4 = v49;
                  }
                }
LABEL_171:
                char v197 = (4 * *(unsigned char *)(v43 + 18) + 8) & 0x3C;
                uint64_t v37 = ((-15 << v197) - 1) & v37 | (v46 << v197);
                uint64_t v181 = *(void *)(v43 + 24 + 24 * v46);
                swift_unknownObjectRetain();
                uint64_t result = swift_unknownObjectRelease();
                int64_t v43 = v181;
                if (!*(unsigned char *)(v181 + 18)) {
                  goto LABEL_200;
                }
              }
            }
            uint64_t result = swift_unknownObjectRetain_n();
            uint64_t v4 = v460;
            uint64_t v181 = v195;
LABEL_200:
            uint64_t v205 = *(unsigned __int16 *)(v181 + 16);
            if (!*(_WORD *)(v181 + 16)) {
              goto LABEL_219;
            }
            uint64_t v206 = *(void *)(v181 + 24);
            uint64_t v207 = v4 - v206;
            if (__OFSUB__(v4, v206)) {
              goto LABEL_461;
            }
            if (__OFADD__(v207, 1)) {
              goto LABEL_462;
            }
            if (v207 + 1 <= 0)
            {
              uint64_t v205 = 0;
            }
            else
            {
              if (v205 == 1)
              {
                v4 -= v206;
                goto LABEL_219;
              }
              uint64_t v208 = *(void *)(v181 + 48);
              BOOL v48 = __OFSUB__(v207, v208);
              uint64_t v209 = v207 - v208;
              if (v48) {
                goto LABEL_470;
              }
              if (__OFADD__(v209, 1)) {
                goto LABEL_471;
              }
              if (v209 + 1 < 1)
              {
                uint64_t v205 = 1;
                uint64_t v4 = v207;
              }
              else
              {
                if (v205 == 2)
                {
                  uint64_t v4 = v209;
LABEL_219:
                  if (v4) {
                    goto LABEL_460;
                  }
                  goto LABEL_220;
                }
                uint64_t v210 = (void *)(v181 + 72);
                uint64_t v211 = 2;
                while (1)
                {
                  if (v205 == v211) {
                    goto LABEL_447;
                  }
                  uint64_t v4 = v209 - *v210;
                  if (__OFSUB__(v209, *v210)) {
                    goto LABEL_448;
                  }
                  if (__OFADD__(v4, 1)) {
                    goto LABEL_449;
                  }
                  if (v4 + 1 < 1) {
                    break;
                  }
                  ++v211;
                  v210 += 3;
                  uint64_t v209 = v4;
                  if (v205 == v211) {
                    goto LABEL_219;
                  }
                }
                uint64_t v205 = v211;
                uint64_t v4 = v209;
              }
            }
LABEL_220:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v179 = v37 & 0xFFFFFFFFFFFFF0FFLL | (v205 << 8);
            uint64_t v178 = v460;
LABEL_195:
            swift_unknownObjectRetain();
            uint64_t v193 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v180, v179, v181, v195, v193);
            uint64_t result = swift_unknownObjectRelease_n();
            uint64_t v177 = v178 - v4;
            if (__OFSUB__(v178, v4)) {
              goto LABEL_429;
            }
            goto LABEL_149;
          }
          unint64_t v204 = swift_unknownObjectRetain_n();
          unint64_t v179 = specialized Rope._endPath.getter(v204);
          swift_unknownObjectRelease();
          uint64_t v181 = 0;
          uint64_t v4 = 0;
          if (v195) {
            goto LABEL_195;
          }
          uint64_t v193 = 0;
          uint64_t v177 = v460;
        }
        else
        {
          unint64_t v203 = swift_unknownObjectRetain();
          unint64_t v179 = specialized Rope._endPath.getter(v203);
          if (v195)
          {
            swift_unknownObjectRelease();
            uint64_t v181 = 0;
          }
          else
          {
            uint64_t v181 = 0;
            uint64_t v193 = 0;
            uint64_t v177 = 0;
          }
        }
      }
LABEL_149:
      *(void *)&long long v548 = v180;
      *((void *)&v548 + 1) = v179;
      *(void *)&long long v549 = v181;
      *((void *)&v549 + 1) = v193;
      *(void *)&long long v550 = v177;
      uint64_t v155 = v453;
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v62 = v469;
  uint64_t v64 = v463;
  if ((uint64_t)v463 < (uint64_t)v469)
  {
LABEL_452:
    __break(1u);
LABEL_453:
    __break(1u);
LABEL_454:
    __break(1u);
    goto LABEL_455;
  }
LABEL_224:
  uint64_t v431 = v62;
  long long v212 = *(_OWORD *)(v38 + 16);
  long long v213 = *(_OWORD *)(v38 + 32);
  long long v563 = *(_OWORD *)(v38 + 48);
  v562[1] = v213;
  v562[0] = v212;
  long long v214 = *(_OWORD *)(v38 + 16);
  long long v215 = *(_OWORD *)(v38 + 32);
  v582[2] = v563;
  v582[1] = v215;
  v582[0] = v214;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v582, (uint64_t)v583);
  outlined retain of Locale((uint64_t)v583);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v562);
  uint64_t v216 = BigString.UTF8View.count.getter();
  outlined release of Locale((uint64_t)v498);
  unint64_t v217 = *v445;
  long long v218 = *(_OWORD *)(*v445 + 32);
  long long v555 = *(_OWORD *)(*v445 + 16);
  long long v556 = v218;
  long long v557 = *(_OWORD *)(v217 + 48);
  v584[2] = v557;
  v584[1] = v218;
  v584[0] = v555;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v584, (uint64_t)v585);
  outlined retain of Locale((uint64_t)v585);
  BigSubstring.UnicodeScalarView.init(_unchecked:in:)();
  uint64_t v219 = (_OWORD *)*v445;
  BigString.init()();
  long long v220 = v500;
  v219[1] = v499;
  v219[2] = v220;
  v219[3] = v501;
  swift_unknownObjectRelease();
  if ((v440 & 1) == 0)
  {
    long long v221 = *(_OWORD *)(v432 + 80);
    long long v552 = *(_OWORD *)(v432 + 64);
    long long v553 = v221;
    long long v554 = *(_OWORD *)(v432 + 96);
    long long v222 = *(_OWORD *)(v432 + 16);
    long long v548 = *(_OWORD *)v432;
    long long v549 = v222;
    long long v223 = *(_OWORD *)(v432 + 32);
    long long v551 = *(_OWORD *)(v432 + 48);
    long long v550 = v223;
    outlined retain of Locale(v432);
    lazy protocol witness table accessor for type BigSubstring.UnicodeScalarView and conformance BigSubstring.UnicodeScalarView();
    BigSubstring.UnicodeScalarView.replaceSubrange<A>(_:with:)();
  }
  long long v224 = (_OWORD *)*v445;
  long long v552 = v484;
  long long v553 = v485;
  long long v554 = v486;
  long long v548 = v480;
  long long v549 = v481;
  long long v551 = v483;
  long long v550 = v482;
  outlined retain of Locale((uint64_t)&v548);
  BigSubstring.UnicodeScalarView.base.getter();
  outlined release of Locale((uint64_t)&v548);
  BigString.init(_:)();
  long long v225 = v503;
  v224[1] = v502;
  v224[2] = v225;
  v224[3] = v504;
  swift_unknownObjectRelease();
  outlined retain of Locale((uint64_t)&v548);
  uint64_t v226 = BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v228 = v227;
  uint64_t v230 = v229;
  uint64_t v232 = v231;
  outlined release of Locale((uint64_t)&v548);
  outlined retain of Locale((uint64_t)&v548);
  uint64_t v233 = BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v235 = v234;
  uint64_t v237 = v236;
  uint64_t v4 = v238;
  outlined release of Locale((uint64_t)&v548);
  specialized Range.init(uncheckedBounds:)(v226, v228, v230, v232, v233, v235, v237, v4, &v469);
  long long v239 = v470[0];
  *(_OWORD *)(v445 + 1) = v469;
  *(_OWORD *)(v445 + 3) = v239;
  long long v240 = v471;
  *(_OWORD *)(v445 + 5) = v470[1];
  *(_OWORD *)(v445 + 7) = v240;
  uint64_t v241 = BigString.Index.utf8Offset.getter();
  uint64_t v242 = BigString.Index.utf8Offset.getter();
  unint64_t v243 = *v445;
  long long v244 = *(_OWORD *)(*v445 + 16);
  long long v245 = *(_OWORD *)(*v445 + 32);
  long long v547 = *(_OWORD *)(*v445 + 48);
  v546[1] = v245;
  v546[0] = v244;
  long long v246 = *(_OWORD *)(v243 + 16);
  long long v247 = *(_OWORD *)(v243 + 32);
  v586[2] = v547;
  v586[1] = v247;
  v586[0] = v246;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v586, (uint64_t)v587);
  outlined retain of Locale((uint64_t)v587);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v546);
  uint64_t v248 = BigString.UTF8View.count.getter();
  uint64_t result = outlined release of Locale((uint64_t)v505);
  uint64_t v249 = v248 - v216;
  if (__OFSUB__(v248, v216)) {
    goto LABEL_434;
  }
  uint64_t v250 = v242 - v241;
  if (__OFSUB__(v242, v241))
  {
LABEL_435:
    __break(1u);
    goto LABEL_436;
  }
  uint64_t v251 = v250 + v249;
  if (__OFADD__(v250, v249))
  {
LABEL_436:
    __break(1u);
    goto LABEL_437;
  }
  swift_bridgeObjectRetain();
  uint64_t v252 = MEMORY[0x1E4FBC870];
  swift_bridgeObjectRetain();
  specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v241, v242, v251, v430, v252);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v253 = *v445;
  long long v254 = *(_OWORD *)(*v445 + 16);
  long long v255 = *(_OWORD *)(*v445 + 32);
  long long v545 = *(_OWORD *)(*v445 + 48);
  v544[1] = v255;
  v544[0] = v254;
  long long v256 = *(_OWORD *)(v253 + 16);
  long long v257 = *(_OWORD *)(v253 + 32);
  v588[2] = v545;
  v588[1] = v257;
  v588[0] = v256;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v588, (uint64_t)v589);
  outlined retain of Locale((uint64_t)v589);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v544);
  uint64_t v258 = BigString.UTF8View.count.getter();
  uint64_t result = outlined release of Locale((uint64_t)v506);
  uint64_t v259 = v258 - v216;
  if (__OFSUB__(v258, v216))
  {
LABEL_437:
    __break(1u);
    goto LABEL_438;
  }
  uint64_t v260 = v64 + v259;
  if (__OFADD__(v64, v259))
  {
LABEL_438:
    __break(1u);
    goto LABEL_439;
  }
  if (v260 < v431)
  {
LABEL_439:
    __break(1u);
LABEL_440:
    __break(1u);
LABEL_441:
    __break(1u);
LABEL_442:
    __break(1u);
    goto LABEL_443;
  }
  uint64_t v261 = *(void *)(v253 + 80);
  if (!*(void *)(v253 + 64))
  {
    unint64_t v310 = swift_unknownObjectRetain();
    specialized Rope._endPath.getter(v310);
    swift_unknownObjectRelease();
    goto LABEL_270;
  }
  uint64_t v432 = v253;
  unint64_t v262 = swift_unknownObjectRetain_n();
  specialized Rope._endPath.getter(v262);
  swift_unknownObjectRelease_n();
  if (!v261) {
    goto LABEL_270;
  }
  uint64_t v4 = v253 + 16;
  long long v263 = *(_OWORD *)(v253 + 16);
  long long v264 = *(_OWORD *)(v253 + 32);
  long long v543 = *(_OWORD *)(v253 + 48);
  v542[1] = v264;
  v542[0] = v263;
  long long v265 = *(_OWORD *)(v253 + 16);
  long long v266 = *(_OWORD *)(v253 + 32);
  v590[2] = v543;
  v590[1] = v266;
  v590[0] = v265;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v590, (uint64_t)v591);
  outlined retain of Locale((uint64_t)v591);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v542);
  long long v267 = *(_OWORD *)(v253 + 16);
  long long v268 = *(_OWORD *)(v253 + 32);
  long long v541 = *(_OWORD *)(v253 + 48);
  v540[1] = v268;
  v540[0] = v267;
  long long v269 = *(_OWORD *)(v253 + 16);
  long long v270 = *(_OWORD *)(v253 + 32);
  v592[2] = v541;
  v592[1] = v270;
  v592[0] = v269;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v592, (uint64_t)v593);
  outlined retain of Locale((uint64_t)v593);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v540);
  uint64_t v271 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v273 = v272;
  uint64_t v275 = v274;
  uint64_t v277 = v276;
  outlined release of Locale((uint64_t)v507);
  long long v278 = *(_OWORD *)(v432 + 16);
  long long v279 = *(_OWORD *)(v432 + 32);
  long long v539 = *(_OWORD *)(v432 + 48);
  v538[1] = v279;
  v538[0] = v278;
  long long v280 = *(_OWORD *)(v432 + 16);
  long long v281 = *(_OWORD *)(v432 + 32);
  v594[2] = v539;
  v594[1] = v281;
  v594[0] = v280;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v594, (uint64_t)v595);
  outlined retain of Locale((uint64_t)v595);
  BigString.utf8.getter();
  uint64_t result = outlined release of Locale((uint64_t)v538);
  if (__OFSUB__(v260, v431)) {
    goto LABEL_456;
  }
  uint64_t v429 = v260;
  uint64_t v282 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v284 = v283;
  uint64_t v286 = v285;
  uint64_t v288 = v287;
  outlined release of Locale((uint64_t)v508);
  specialized Range.init(uncheckedBounds:)(v271, v273, v275, v277, v282, v284, v286, v288, &v531);
  *(void *)&long long v600 = MEMORY[0x1E4FBC868];
  long long v289 = *(_OWORD *)(v4 + 16);
  long long v535 = *(_OWORD *)v4;
  long long v536 = v289;
  long long v537 = *(_OWORD *)(v4 + 32);
  BigString.unicodeScalars.getter();
  uint64_t v290 = BigString.UnicodeScalarView.index(roundingDown:)();
  uint64_t v292 = v291;
  uint64_t v294 = v293;
  uint64_t v296 = v295;
  outlined release of Locale((uint64_t)v509);
  long long v297 = *(_OWORD *)(v4 + 16);
  long long v532 = *(_OWORD *)v4;
  long long v533 = v297;
  unint64_t v437 = (long long *)v4;
  long long v534 = *(_OWORD *)(v4 + 32);
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingUp:)();
  uint64_t v4 = v298;
  outlined release of Locale((uint64_t)v510);
  *(void *)&long long v606 = v290;
  *((void *)&v606 + 1) = v292;
  *(void *)&long long v607 = v294;
  *((void *)&v607 + 1) = v296;
  uint64_t v37 = BigString.Index.utf8Offset.getter();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (result < v37) {
    goto LABEL_457;
  }
  int64_t v39 = *(void *)(v432 + 64);
  if (v39) {
    uint64_t v299 = *(void *)(v432 + 80);
  }
  else {
    uint64_t v299 = 0;
  }
  if (v37 < 0 || v299 < v37) {
    goto LABEL_458;
  }
  uint64_t v300 = result;
  uint64_t v4 = *(void *)(v432 + 72);
  int64_t v43 = *(void *)(v432 + 88);
  if (!v39 || !*(_WORD *)(v39 + 16) || v37 >= *(void *)(v432 + 80))
  {
    swift_retain_n();
    unint64_t v311 = swift_unknownObjectRetain_n();
    unint64_t v312 = specialized Rope._endPath.getter(v311);
    swift_unknownObjectRelease();
    unint64_t v38 = 0;
    uint64_t v110 = 0;
    uint64_t v313 = v437;
    if (!v39) {
      goto LABEL_397;
    }
    goto LABEL_272;
  }
  uint64_t v460 = *(void *)(v432 + 72);
  *(void *)&long long v461 = result;
  uint64_t v4 = *(unsigned __int8 *)(v39 + 18);
  if (*(unsigned char *)(v39 + 18))
  {
    swift_unknownObjectRetain_n();
    uint64_t result = swift_retain_n();
    uint64_t v110 = v37;
    unint64_t v301 = v39;
    while (1)
    {
      uint64_t v303 = *(unsigned __int16 *)(v301 + 16);
      if (!*(_WORD *)(v301 + 16)) {
        goto LABEL_247;
      }
      uint64_t v304 = *(void *)(v301 + 40);
      uint64_t v305 = v110 - v304;
      if (__OFSUB__(v110, v304)) {
        goto LABEL_431;
      }
      if (__OFADD__(v305, 1)) {
        goto LABEL_432;
      }
      if (v305 + 1 <= 0)
      {
        uint64_t v303 = 0;
      }
      else
      {
        if (v303 == 1)
        {
          v110 -= v304;
          goto LABEL_247;
        }
        uint64_t v306 = *(void *)(v301 + 64);
        BOOL v48 = __OFSUB__(v305, v306);
        uint64_t v307 = v305 - v306;
        if (v48) {
          goto LABEL_453;
        }
        if (__OFADD__(v307, 1)) {
          goto LABEL_454;
        }
        if (v307 + 1 < 1)
        {
          uint64_t v303 = 1;
          uint64_t v110 = v305;
        }
        else
        {
          if (v303 == 2)
          {
            uint64_t v110 = v307;
LABEL_247:
            if (v110) {
              goto LABEL_430;
            }
            goto LABEL_248;
          }
          v308 = (void *)(v301 + 88);
          uint64_t v309 = 2;
          while (1)
          {
            if (v303 == v309) {
              goto LABEL_420;
            }
            uint64_t v110 = v307 - *v308;
            if (__OFSUB__(v307, *v308)) {
              goto LABEL_421;
            }
            if (__OFADD__(v110, 1)) {
              goto LABEL_422;
            }
            if (v110 + 1 < 1) {
              break;
            }
            ++v309;
            v308 += 3;
            uint64_t v307 = v110;
            if (v303 == v309) {
              goto LABEL_247;
            }
          }
          uint64_t v303 = v309;
          uint64_t v110 = v307;
        }
      }
LABEL_248:
      char v302 = (4 * *(unsigned char *)(v301 + 18) + 8) & 0x3C;
      uint64_t v4 = ((-15 << v302) - 1) & v4 | (v303 << v302);
      unint64_t v38 = *(void *)(v301 + 24 + 24 * v303);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      unint64_t v301 = v38;
      if (!*(unsigned char *)(v38 + 18)) {
        goto LABEL_361;
      }
    }
  }
  swift_unknownObjectRetain_n();
  uint64_t result = swift_retain_n();
  uint64_t v110 = v37;
  unint64_t v38 = v39;
LABEL_361:
  uint64_t v409 = *(unsigned __int16 *)(v38 + 16);
  if (*(_WORD *)(v38 + 16))
  {
    uint64_t v410 = *(void *)(v38 + 24);
    uint64_t v411 = v110 - v410;
    if (__OFSUB__(v110, v410)) {
      goto LABEL_473;
    }
    if (__OFADD__(v411, 1)) {
      goto LABEL_474;
    }
    if (v411 + 1 <= 0) {
      goto LABEL_382;
    }
    if (v409 == 1)
    {
      v110 -= v410;
    }
    else
    {
      uint64_t v427 = *(void *)(v38 + 48);
      BOOL v48 = __OFSUB__(v411, v427);
      uint64_t v46 = v411 - v427;
      if (v48) {
        goto LABEL_477;
      }
      if (__OFADD__(v46, 1)) {
        goto LABEL_478;
      }
      if (v46 + 1 < 1)
      {
        uint64_t v409 = 1;
        uint64_t v110 = v411;
        goto LABEL_396;
      }
      if (v409 != 2)
      {
        uint64_t v428 = (void *)(v38 + 72);
        uint64_t v49 = 2;
        while (v409 != v49)
        {
          uint64_t v110 = v46 - *v428;
          if (__OFSUB__(v46, *v428)) {
            goto LABEL_468;
          }
          if (__OFADD__(v110, 1)) {
            goto LABEL_469;
          }
          if (v110 + 1 < 1) {
            goto LABEL_407;
          }
          ++v49;
          v428 += 3;
          uint64_t v46 = v110;
          if (v409 == v49) {
            goto LABEL_395;
          }
        }
        goto LABEL_467;
      }
      uint64_t v110 = v46;
    }
  }
LABEL_395:
  if (v110) {
    goto LABEL_472;
  }
LABEL_396:
  while (1)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v312 = v4 & 0xFFFFFFFFFFFFF0FFLL | (v409 << 8);
    uint64_t v4 = v460;
    uint64_t v300 = v461;
    uint64_t v313 = v437;
    if (!v39) {
      break;
    }
LABEL_272:
    swift_unknownObjectRetain();
    uint64_t v314 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v43, v312, v38, v39, v4);
    swift_release();
    swift_unknownObjectRelease_n();
    uint64_t v46 = v37 - v110;
    if (!__OFSUB__(v37, v110)) {
      goto LABEL_273;
    }
LABEL_399:
    __break(1u);
LABEL_400:
    __break(1u);
LABEL_401:
    __break(1u);
LABEL_402:
    __break(1u);
LABEL_403:
    __break(1u);
LABEL_404:
    __break(1u);
LABEL_405:
    __break(1u);
LABEL_406:
    __break(1u);
LABEL_407:
    uint64_t v409 = v49;
    uint64_t v110 = v46;
  }
LABEL_397:
  swift_release();
  uint64_t v314 = 0;
  uint64_t v46 = v37 - v110;
  if (__OFSUB__(v37, v110)) {
    goto LABEL_399;
  }
LABEL_273:
  *(void *)&long long v475 = v432;
  *((void *)&v475 + 1) = v37;
  *(void *)&long long v476 = v300;
  *((void *)&v476 + 1) = v43;
  *(void *)&long long v477 = v312;
  *((void *)&v477 + 1) = v38;
  uint64_t v478 = v314;
  uint64_t v479 = v46;
  specialized IndexingIterator.next()();
  if (!v315)
  {
    uint64_t v354 = MEMORY[0x1E4FBC868];
    goto LABEL_317;
  }
  uint64_t v316 = v315;
  while (1)
  {
    long long v318 = *v313;
    long long v319 = v313[1];
    long long v521 = v313[2];
    v520[1] = v319;
    v520[0] = v318;
    long long v320 = *v313;
    v609[1] = v313[1];
    v609[2] = v521;
    v609[0] = v320;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v609, (uint64_t)v610);
    outlined retain of Locale((uint64_t)v610);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v520);
    uint64_t v4 = v606;
    uint64_t v321 = v607;
    uint64_t v458 = *((void *)&v606 + 1);
    uint64_t v441 = *((void *)&v607 + 1);
    uint64_t v322 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v324 = v323;
    uint64_t v326 = v325;
    uint64_t v328 = v327;
    outlined release of Locale((uint64_t)v511);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v329 = specialized AttributedString._AttributeStorage.containsScalarConstraint.getter(v316);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v329)
    {
      uint64_t v330 = v458;
      uint64_t v331 = v441;
      if (static BigString.Index.< infix(_:_:)()) {
        break;
      }
    }
LABEL_275:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    $defer #1 () in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(&v606, v322, v324, v326, v328);
    specialized IndexingIterator.next()();
    uint64_t v316 = v317;
    if (!v317) {
      goto LABEL_316;
    }
  }
  uint64_t v438 = v316 + 64;
  uint64_t v435 = v328;
  uint64_t v436 = v326;
  uint64_t v433 = v322;
  uint64_t v434 = v324;
  while (2)
  {
    uint64_t v442 = v331;
    long long v332 = v313[1];
    long long v517 = *v313;
    long long v518 = v332;
    long long v519 = v313[2];
    BigString.unicodeScalars.getter();
    int v454 = BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v512);
    long long v333 = v313[1];
    long long v514 = *v313;
    long long v515 = v333;
    long long v516 = v313[2];
    BigString.unicodeScalars.getter();
    uint64_t v439 = v4;
    uint64_t v334 = BigString.UnicodeScalarView.index(after:)();
    uint64_t v447 = v335;
    uint64_t v451 = v334;
    uint64_t v444 = v337;
    unint64_t v446 = v336;
    outlined release of Locale((uint64_t)v513);
    uint64_t v338 = 1 << *(unsigned char *)(v316 + 32);
    if (v338 < 64) {
      uint64_t v339 = ~(-1 << v338);
    }
    else {
      uint64_t v339 = -1;
    }
    unint64_t v340 = v339 & *(void *)(v316 + 64);
    int64_t v459 = (unint64_t)(v338 + 63) >> 6;
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v341 = 0;
LABEL_285:
    if (v340)
    {
      unint64_t v342 = __clz(__rbit64(v340));
      v340 &= v340 - 1;
      unint64_t v343 = v342 | (v341 << 6);
      goto LABEL_287;
    }
    int64_t v347 = v341 + 1;
    if (!__OFADD__(v341, 1))
    {
      if (v347 < v459)
      {
        unint64_t v348 = *(void *)(v438 + 8 * v347);
        if (v348)
        {
LABEL_291:
          unint64_t v340 = (v348 - 1) & v348;
          unint64_t v343 = __clz(__rbit64(v348)) + (v347 << 6);
          int64_t v341 = v347;
LABEL_287:
          uint64_t v344 = *(void *)(v316 + 56);
          uint64_t v345 = (void *)(*(void *)(v316 + 48) + 16 * v343);
          uint64_t v346 = v345[1];
          *(void *)&long long v463 = *v345;
          *((void *)&v463 + 1) = v346;
          outlined init with copy of AttributedString._AttributeValue(v344 + 72 * v343, (uint64_t)&v464);
          swift_bridgeObjectRetain();
LABEL_297:
          outlined init with take of (key: String, value: AttributedString._AttributeValue)?((uint64_t)&v463, (uint64_t)&v469);
          uint64_t v349 = *((void *)&v469 + 1);
          if (!*((void *)&v469 + 1))
          {
            swift_release();
            uint64_t v330 = v447;
            uint64_t v4 = v451;
            uint64_t v331 = v444;
            uint64_t v321 = v446;
            uint64_t v322 = v433;
            uint64_t v324 = v434;
            uint64_t v328 = v435;
            uint64_t v326 = v436;
            uint64_t v313 = v437;
            if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
              goto LABEL_275;
            }
            continue;
          }
          uint64_t v4 = v469;
          uint64_t v350 = *((void *)&v471 + 1);
          uint64_t v351 = v472;
          outlined copy of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v471 + 1), v472);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v470);
          if (v351 != 1)
          {
            *(void *)&long long v463 = v350;
            *((void *)&v463 + 1) = v351;
            unint64_t v352 = AttributedString.AttributeRunBoundaries._constrainedScalar.getter();
            outlined consume of AttributedString.AttributeRunBoundaries?(v350, v351);
            if ((v352 & 0x100000000) == 0 && v454 != v352) {
              specialized invalidate #1 (_:from:to:) in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(v4, v349, v439, v330, v321, v442, v451, v447, v446, v444, (uint64_t *)&v600);
            }
          }
          uint64_t result = swift_bridgeObjectRelease();
          goto LABEL_285;
        }
        v341 += 2;
        if (v347 + 1 >= v459)
        {
          int64_t v341 = v347;
        }
        else
        {
          unint64_t v348 = *(void *)(v438 + 8 * v341);
          if (v348)
          {
            ++v347;
            goto LABEL_291;
          }
          if (v347 + 2 < v459)
          {
            unint64_t v348 = *(void *)(v438 + 8 * (v347 + 2));
            if (v348)
            {
              v347 += 2;
              goto LABEL_291;
            }
            int64_t v353 = v347 + 3;
            if (v347 + 3 >= v459)
            {
              int64_t v341 = v347 + 2;
            }
            else
            {
              unint64_t v348 = *(void *)(v438 + 8 * v353);
              if (v348)
              {
                v347 += 3;
                goto LABEL_291;
              }
              while (1)
              {
                int64_t v347 = v353 + 1;
                if (__OFADD__(v353, 1)) {
                  goto LABEL_414;
                }
                if (v347 >= v459) {
                  break;
                }
                unint64_t v348 = *(void *)(v438 + 8 * v347);
                ++v353;
                if (v348) {
                  goto LABEL_291;
                }
              }
              int64_t v341 = v459 - 1;
            }
          }
        }
      }
      unint64_t v340 = 0;
      uint64_t v468 = 0;
      long long v466 = 0u;
      long long v467 = 0u;
      long long v464 = 0u;
      long long v465 = 0u;
      long long v463 = 0u;
      goto LABEL_297;
    }
    break;
  }
  __break(1u);
LABEL_316:
  uint64_t v354 = v600;
LABEL_317:
  uint64_t result = swift_release();
  uint64_t v4 = 0;
  uint64_t v355 = v354 + 64;
  uint64_t v356 = 1 << *(unsigned char *)(v354 + 32);
  uint64_t v357 = -1;
  if (v356 < 64) {
    uint64_t v357 = ~(-1 << v356);
  }
  unint64_t v358 = v357 & *(void *)(v354 + 64);
  int64_t v462 = (unint64_t)(v356 + 63) >> 6;
  while (2)
  {
    if (v358)
    {
      unint64_t v359 = __clz(__rbit64(v358));
      v358 &= v358 - 1;
      unint64_t v360 = v359 | (v4 << 6);
LABEL_333:
      int v363 = (unint64_t *)(*(void *)(v354 + 48) + 16 * v360);
      unint64_t v365 = *v363;
      unint64_t v364 = v363[1];
      uint64_t v366 = *(void *)(*(void *)(v354 + 56) + 8 * v360);
      uint64_t result = specialized Array._getCount()(v366);
      if (result)
      {
        uint64_t v367 = result;
        if (result < 1)
        {
          __break(1u);
          goto LABEL_409;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        long long v368 = (uint64_t *)(v366 + 40);
        do
        {
          AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)(v365, v364, *(v368 - 1), *v368, 0);
          v368 += 2;
          --v367;
        }
        while (v367);
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
      }
      continue;
    }
    break;
  }
  BOOL v48 = __OFADD__(v4++, 1);
  if (v48) {
    goto LABEL_416;
  }
  if (v4 < v462)
  {
    unint64_t v361 = *(void *)(v355 + 8 * v4);
    if (!v361)
    {
      uint64_t v362 = v4 + 1;
      if (v4 + 1 >= v462) {
        goto LABEL_342;
      }
      unint64_t v361 = *(void *)(v355 + 8 * v362);
      if (!v361)
      {
        uint64_t v362 = v4 + 2;
        if (v4 + 2 >= v462) {
          goto LABEL_342;
        }
        unint64_t v361 = *(void *)(v355 + 8 * v362);
        if (!v361)
        {
          uint64_t v362 = v4 + 3;
          if (v4 + 3 >= v462) {
            goto LABEL_342;
          }
          unint64_t v361 = *(void *)(v355 + 8 * v362);
          if (!v361)
          {
            while (1)
            {
              uint64_t v4 = v362 + 1;
              if (__OFADD__(v362, 1)) {
                break;
              }
              if (v4 >= v462) {
                goto LABEL_342;
              }
              unint64_t v361 = *(void *)(v355 + 8 * v4);
              ++v362;
              if (v361) {
                goto LABEL_332;
              }
            }
LABEL_433:
            __break(1u);
LABEL_434:
            __break(1u);
            goto LABEL_435;
          }
        }
      }
      uint64_t v4 = v362;
    }
LABEL_332:
    unint64_t v358 = (v361 - 1) & v361;
    unint64_t v360 = __clz(__rbit64(v361)) + (v4 << 6);
    goto LABEL_333;
  }
LABEL_342:
  swift_release();
  uint64_t v4 = v429;
  if ((specialized Range.isEmpty.getter() & 1) == 0)
  {
    long long v388 = *v437;
    long long v389 = v437[1];
    long long v530 = v437[2];
    long long v529 = v389;
    long long v528 = v388;
    long long v390 = *v437;
    long long v391 = v437[1];
    long long v598 = v530;
    long long v597 = v391;
    long long v596 = v390;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v596, (uint64_t)v599);
    outlined retain of Locale((uint64_t)v599);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)&v528);
    if ((specialized static Comparable.> infix(_:_:)() & 1) == 0) {
      goto LABEL_352;
    }
    uint64_t result = v431 - 1;
    if (__OFSUB__(v431, 1)) {
      goto LABEL_475;
    }
    if (AttributedString.Guts._needsParagraphFixing(from:to:)(result, v431))
    {
      long long v392 = *v437;
      long long v393 = v437[1];
      long long v527 = v437[2];
      v526[1] = v393;
      v526[0] = v392;
      long long v394 = *v437;
      long long v395 = v437[1];
      long long v602 = v527;
      long long v601 = v395;
      long long v600 = v394;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v600, (uint64_t)v603);
      outlined retain of Locale((uint64_t)v603);
      uint64_t v396 = BigString.index(before:)();
      uint64_t v398 = v397;
      uint64_t v400 = v399;
      uint64_t v402 = v401;
      outlined release of Locale((uint64_t)v526);
      AttributedString.Guts._paragraphExtending(from:)(v396, v398, v400, v402, &v463);
      int64_t v385 = Range<>._utf8OffsetRange.getter();
      int64_t v387 = v403;
      char v404 = 0;
    }
    else
    {
LABEL_352:
      int64_t v385 = 0;
      int64_t v387 = 0;
      char v404 = 1;
    }
    long long v405 = *v437;
    long long v406 = v437[1];
    long long v525 = v437[2];
    v524[1] = v406;
    v524[0] = v405;
    long long v407 = *v437;
    long long v607 = v437[1];
    long long v608 = v525;
    long long v606 = v407;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v606, (uint64_t)v604);
    outlined retain of Locale((uint64_t)v604);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)v524);
    if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
      goto LABEL_371;
    }
    if (v404)
    {
      if (v429 < 1) {
        goto LABEL_270;
      }
    }
    else if (v387 >= v429)
    {
LABEL_370:
      char v404 = 0;
      goto LABEL_371;
    }
    if (AttributedString.Guts._needsParagraphFixing(from:to:)(v429 - 1, v429))
    {
      long long v412 = *v437;
      long long v413 = v437[1];
      long long v523 = v437[2];
      v522[1] = v413;
      v522[0] = v412;
      long long v414 = *v437;
      long long v476 = v437[1];
      long long v477 = v523;
      long long v475 = v414;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v475, (uint64_t)v605);
      outlined retain of Locale((uint64_t)v605);
      uint64_t v415 = BigString.index(before:)();
      uint64_t v417 = v416;
      uint64_t v419 = v418;
      uint64_t v421 = v420;
      outlined release of Locale((uint64_t)v522);
      AttributedString.Guts._paragraphExtending(from:)(v415, v417, v419, v421, &v469);
      int64_t v422 = Range<>._utf8OffsetRange.getter();
      int64_t v424 = v423;
      int v425 = 1;
      goto LABEL_372;
    }
LABEL_371:
    int64_t v422 = 0;
    int64_t v424 = 0;
    int v425 = 0;
LABEL_372:
    if ((v404 & 1) == 0 && v431 < v387)
    {
      uint64_t v474 = 0;
      uint64_t v473 = 0;
      AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v473, v385, v431, v387);
    }
    if (v429 < v424) {
      int v426 = v425;
    }
    else {
      int v426 = 0;
    }
    if (v426 == 1)
    {
      uint64_t v474 = 0;
      uint64_t v473 = 0;
      AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v473, v422, v429, v424);
    }
    goto LABEL_270;
  }
  long long v369 = *v437;
  long long v370 = v437[1];
  long long v602 = v437[2];
  long long v601 = v370;
  long long v600 = v369;
  long long v371 = *v437;
  long long v607 = v437[1];
  long long v608 = v602;
  long long v606 = v371;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v606, (uint64_t)v522);
  outlined retain of Locale((uint64_t)v522);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)&v600);
  if (specialized static Comparable.> infix(_:_:)())
  {
    long long v372 = *v437;
    long long v373 = v437[1];
    long long v598 = v437[2];
    long long v597 = v373;
    long long v596 = v372;
    long long v374 = *v437;
    long long v476 = v437[1];
    long long v477 = v598;
    long long v475 = v374;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v475, (uint64_t)v524);
    outlined retain of Locale((uint64_t)v524);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)&v596);
    if (static BigString.Index.< infix(_:_:)())
    {
      uint64_t result = v431 - 1;
      if (__OFSUB__(v431, 1)) {
        goto LABEL_476;
      }
      if (AttributedString.Guts._needsParagraphFixing(from:to:)(result, v431))
      {
        long long v375 = *v437;
        long long v376 = v437[1];
        long long v530 = v437[2];
        long long v529 = v376;
        long long v528 = v375;
        long long v377 = *v437;
        long long v464 = v437[1];
        long long v465 = v530;
        long long v463 = v377;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v463, (uint64_t)v526);
        outlined retain of Locale((uint64_t)v526);
        uint64_t v378 = BigString.index(before:)();
        uint64_t v380 = v379;
        uint64_t v382 = v381;
        uint64_t v384 = v383;
        outlined release of Locale((uint64_t)&v528);
        AttributedString.Guts._paragraphExtending(from:)(v378, v380, v382, v384, &v469);
        int64_t v385 = Range<>._utf8OffsetRange.getter();
        int64_t v387 = v386;
        goto LABEL_370;
      }
    }
  }
LABEL_270:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  void *v7;
  long long v8;
  long long v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  long long v17;
  uint64_t v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  char v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t result;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  long long v88;
  long long v89;
  void *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char Enum;
  uint64_t v95;
  long long v96;
  long long v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  long long v149;
  long long v150;
  long long v151;
  long long v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  long long v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *i;
  long long v167;
  long long v168;
  long long v169;
  long long v170;
  uint64_t v171;
  _OWORD *v172;
  long long v173;
  long long v174;
  long long v175;
  _OWORD *v176;
  long long v177;
  _OWORD *v178;
  long long v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  long long v197;
  long long v198;
  long long v199;
  long long v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  long long v205;
  long long v206;
  long long v207;
  long long v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  _OWORD *v213;
  long long v214;
  long long v215;
  long long v216;
  long long v217;
  long long v218;
  long long v219;
  long long v220;
  long long v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  long long v228;
  long long v229;
  long long v230;
  long long v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  long long v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  long long v246;
  uint64_t v247;
  uint64_t v248;
  int64_t v249;
  char v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  void *v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  long long v267;
  long long v268;
  long long v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  char v278;
  uint64_t v279;
  char v280;
  uint64_t v281;
  char v282;
  long long v283;
  uint64_t v284;
  long long v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  int64_t v292;
  int64_t v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  void *v297;
  uint64_t v298;
  int64_t v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  int64_t v305;
  uint64_t v306;
  int64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  int64_t v315;
  uint64_t *v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t *v320;
  long long v321;
  long long v322;
  long long v323;
  long long v324;
  long long v325;
  long long v326;
  long long v327;
  long long v328;
  long long v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  long long v338;
  long long v339;
  long long v340;
  long long v341;
  long long v342;
  long long v343;
  long long v344;
  long long v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  long long v354;
  long long v355;
  long long v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  long long v360;
  long long v361;
  long long v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  int64_t v370;
  int64_t v371;
  int64_t v372;
  int v373;
  int v374;
  uint64_t v375;
  void *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  _OWORD *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t *v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  uint64_t v401;
  long long v402;
  uint64_t v403;
  long long v404;
  char v405;
  uint64_t v406;
  uint64_t v407;
  long long v408;
  uint64_t v409;
  long long v410;
  long long v411;
  int v412;
  uint64_t v413;
  uint64_t v414;
  int64_t v415;
  long long v416;
  long long v417;
  long long v418;
  long long v419;
  long long v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  long long v429;
  long long v430;
  long long v431;
  uint64_t v432;
  uint64_t v433;
  long long v434;
  long long v435;
  long long v436;
  long long v437;
  long long v438;
  long long v439;
  long long v440;
  char v441[48];
  long long v442;
  long long v443;
  uint64_t v444;
  char v445[48];
  unint64_t v446[4];
  uint64_t v447;
  uint64_t v448[4];
  uint64_t v449;
  char v450[48];
  long long v451;
  long long v452;
  long long v453;
  long long v454;
  long long v455;
  long long v456;
  char v457[48];
  char v458[48];
  char v459[48];
  char v460[48];
  char v461[48];
  char v462[48];
  char v463[48];
  char v464[48];
  char v465[48];
  long long v466;
  long long v467;
  long long v468;
  long long v469;
  long long v470;
  long long v471;
  _OWORD v472[2];
  long long v473;
  _OWORD v474[2];
  long long v475;
  _OWORD v476[2];
  long long v477;
  _OWORD v478[2];
  long long v479;
  long long v480;
  long long v481;
  long long v482;
  void v483[3];
  long long v484;
  long long v485;
  long long v486;
  long long v487;
  long long v488;
  long long v489;
  _OWORD v490[2];
  long long v491;
  _OWORD v492[2];
  long long v493;
  _OWORD v494[2];
  long long v495;
  _OWORD v496[2];
  long long v497;
  _OWORD v498[2];
  long long v499;
  long long v500;
  long long v501;
  long long v502;
  long long v503;
  long long v504;
  long long v505;
  long long v506;
  long long v507;
  long long v508;
  long long v509;
  long long v510;
  long long v511;
  long long v512;
  long long v513;
  _OWORD v514[2];
  long long v515;
  _OWORD v516[2];
  long long v517;
  _OWORD v518[2];
  uint64_t v519;
  _OWORD v520[2];
  long long v521;
  _OWORD v522[2];
  long long v523;
  long long v524;
  long long v525;
  long long v526;
  long long v527[3];
  unsigned char v528[40];
  long long v529[3];
  unsigned char v530[40];
  long long v531[3];
  unsigned char v532[40];
  long long v533[3];
  unsigned char v534[40];
  long long v535[3];
  unsigned char v536[40];
  long long v537[3];
  unsigned char v538[40];
  long long v539[3];
  unsigned char v540[40];
  long long v541[3];
  unsigned char v542[40];
  long long v543[3];
  unsigned char v544[40];
  long long v545[3];
  unsigned char v546[40];
  long long v547;
  long long v548;
  long long v549;
  unsigned char v550[40];
  long long v551;
  long long v552;
  long long v553;
  unsigned char v554[40];
  unsigned char v555[40];
  unsigned char v556[40];
  long long v557;
  long long v558;
  long long v559;
  long long v560[3];
  unsigned char v561[56];

  MEMORY[0x1F4188790](a1);
  uint64_t v4 = v1;
  uint64_t v6 = v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    long long v2 = (uint64_t)v6;
    uint64_t v7 = *(void **)v1;
    long long v8 = *(_OWORD *)(*(void *)v1 + 16);
    long long v9 = *(_OWORD *)(*(void *)v1 + 32);
    unint64_t v526 = *(_OWORD *)(*(void *)v1 + 48);
    long long v525 = v9;
    unint64_t v524 = v8;
    uint64_t v10 = v7[8];
    uint64_t v11 = v7[9];
    uint64_t v12 = v7[10];
    uint64_t v13 = v7[11];
    type metadata accessor for AttributedString.Guts();
    uint64_t v14 = swift_allocObject();
    outlined retain of Locale((uint64_t)&v524);
    swift_unknownObjectRetain();
    uint64_t v15 = BigString.isEmpty.getter();
    if (v10)
    {
      int v16 = swift_unknownObjectRetain_n();
      specialized Rope._endPath.getter(v16);
      swift_unknownObjectRelease_n();
      if ((((v12 == 0) ^ v15) & 1) == 0)
      {
LABEL_4:
        uint64_t v17 = v525;
        *(_OWORD *)(v14 + 16) = v524;
        *(_OWORD *)(v14 + 32) = v17;
        *(_OWORD *)(v14 + 48) = v526;
        *(void *)(v14 + 64) = v10;
        *(void *)(v14 + 72) = v11;
        *(void *)(v14 + 80) = v12;
        *(void *)(v14 + 88) = v13;
        *(void *)uint64_t v4 = v14;
        swift_release();
        uint64_t v6 = (uint64_t *)v2;
        goto LABEL_5;
      }
    }
    else
    {
      swift_unknownObjectRetain();
      specialized Rope._endPath.getter(0);
      swift_unknownObjectRelease_n();
      if (v15) {
        goto LABEL_4;
      }
    }
    __break(1u);
    goto LABEL_65;
  }
LABEL_5:
  int v18 = *(void *)v4;
  uint64_t v19 = *(_OWORD *)(*(void *)v4 + 16);
  long long v20 = *(_OWORD *)(*(void *)v4 + 32);
  long long v523 = *(_OWORD *)(*(void *)v4 + 48);
  v522[1] = v20;
  v522[0] = v19;
  uint64_t v21 = *(_OWORD *)(v18 + 16);
  long long v22 = *(_OWORD *)(v18 + 32);
  v527[2] = v523;
  v527[1] = v22;
  v527[0] = v21;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v527, (uint64_t)v528);
  outlined retain of Locale((uint64_t)v528);
  long long v23 = BigString.isEmpty.getter();
  outlined release of Locale((uint64_t)v522);
  uint64_t v397 = v6;
  uint64_t v399 = v4;
  if (v23)
  {
    uint64_t v380 = MEMORY[0x1E4FBC868];
    goto LABEL_39;
  }
  if ((static BigString.Index.== infix(_:_:)() & 1) != 0 && BigString.Index.utf8Offset.getter() >= 1)
  {
    long long v24 = *(_OWORD *)(v18 + 16);
    long long v25 = *(_OWORD *)(v18 + 32);
    long long v521 = *(_OWORD *)(v18 + 48);
    v520[1] = v25;
    v520[0] = v24;
    char v26 = *(_OWORD *)(v18 + 16);
    uint64_t v27 = *(_OWORD *)(v18 + 32);
    v529[2] = v521;
    v529[1] = v27;
    v529[0] = v26;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v529, (uint64_t)v530);
    outlined retain of Locale((uint64_t)v530);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v520);
    BigString.UTF8View.index(before:)();
    outlined release of Locale((uint64_t)v441);
  }
  long long v28 = *(void *)(v18 + 64);
  long long v29 = *(void *)(v18 + 72);
  long long v31 = *(void *)(v18 + 80);
  long long v30 = *(void *)(v18 + 88);
  swift_unknownObjectRetain();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v28) {
    long long v33 = v31;
  }
  else {
    long long v33 = 0;
  }
  if (result < 0) {
    goto LABEL_398;
  }
  long long v34 = result;
  if (v33 < result) {
    goto LABEL_398;
  }
  if (v28 && result < v31 && *(_WORD *)(v28 + 16))
  {
    long long v413 = v29;
    uint64_t v4 = *(unsigned __int8 *)(v28 + 18);
    if (*(unsigned char *)(v28 + 18))
    {
      uint64_t result = swift_unknownObjectRetain_n();
      uint64_t v11 = -15;
      long long v2 = 24;
      long long v35 = v28;
      while (1)
      {
        unint64_t v38 = *(unsigned __int16 *)(v35 + 16);
        if (!*(_WORD *)(v35 + 16)) {
          goto LABEL_21;
        }
        int64_t v39 = *(void *)(v35 + 40);
        int64_t v40 = __OFSUB__(v34, v39);
        uint64_t v41 = v34 - v39;
        if (v40) {
          goto LABEL_382;
        }
        if (__OFADD__(v41, 1))
        {
LABEL_383:
          __break(1u);
LABEL_384:
          __break(1u);
LABEL_385:
          __break(1u);
LABEL_386:
          __break(1u);
LABEL_387:
          __break(1u);
LABEL_388:
          __break(1u);
LABEL_389:
          __break(1u);
LABEL_390:
          __break(1u);
LABEL_391:
          __break(1u);
LABEL_392:
          __break(1u);
LABEL_393:
          __break(1u);
LABEL_394:
          __break(1u);
LABEL_395:
          __break(1u);
LABEL_396:
          __break(1u);
LABEL_397:
          __break(1u);
LABEL_398:
          __break(1u);
LABEL_399:
          __break(1u);
LABEL_400:
          __break(1u);
LABEL_401:
          __break(1u);
LABEL_402:
          __break(1u);
LABEL_403:
          __break(1u);
LABEL_404:
          __break(1u);
LABEL_405:
          __break(1u);
LABEL_406:
          __break(1u);
LABEL_407:
          __break(1u);
LABEL_408:
          __break(1u);
          goto LABEL_409;
        }
        if (v41 + 1 >= 1) {
          break;
        }
        unint64_t v38 = 0;
LABEL_22:
        long long v36 = (4 * *(unsigned char *)(v35 + 18) + 8) & 0x3C;
        uint64_t v4 = ((-15 << v36) - 1) & v4 | (v38 << v36);
        uint64_t v37 = *(void *)(v35 + 24 + 24 * v38);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        long long v35 = v37;
        if (!*(unsigned char *)(v37 + 18)) {
          goto LABEL_317;
        }
      }
      if (v38 != 1)
      {
        uint64_t v42 = (uint64_t *)(v35 + 64);
        int64_t v43 = 1;
        while (1)
        {
          char v44 = *v42;
          v42 += 3;
          long long v34 = v41 - v44;
          if (__OFSUB__(v41, v44)) {
            goto LABEL_363;
          }
          if (__OFADD__(v34, 1)) {
            goto LABEL_364;
          }
          if (v34 + 1 < 1) {
            break;
          }
          ++v43;
          uint64_t v41 = v34;
          if (v38 == v43) {
            goto LABEL_21;
          }
        }
        unint64_t v38 = v43;
        long long v34 = v41;
        goto LABEL_22;
      }
      long long v34 = v41;
LABEL_21:
      if (v34) {
        goto LABEL_381;
      }
      goto LABEL_22;
    }
    swift_unknownObjectRetain_n();
    uint64_t v37 = v28;
LABEL_317:
    uint64_t result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v34, 0, (_WORD *)(v37 + 16), (uint64_t *)(v37 + 24));
    if (result < 0) {
      goto LABEL_413;
    }
    uint64_t v357 = result;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v46 = v4 & 0xFFFFFFFFFFFFF0FFLL | (v357 << 8);
    uint64_t v47 = v413;
    goto LABEL_37;
  }
  uint64_t v45 = swift_unknownObjectRetain();
  uint64_t v46 = specialized Rope._endPath.getter(v45);
  swift_unknownObjectRelease();
  uint64_t v37 = 0;
  uint64_t v47 = v29;
  BOOL v48 = 0;
  if (v28)
  {
LABEL_37:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v30, v46, v37, v28, v47);
    swift_unknownObjectRelease_n();
    BOOL v48 = v37;
  }
  uint64_t v49 = *(void *)(v18 + 64);
  uint64_t v50 = *(void *)(v18 + 72);
  uint64_t v51 = *(void *)(v18 + 80);
  uint64_t v52 = *(void *)(v18 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v30, v46, v48, v49, v50, v51, v52);
  swift_unknownObjectRelease();
  unint64_t v53 = swift_bridgeObjectRetain();
  uint64_t v380 = specialized _NativeDictionary.filter(_:)(v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v6 = v397;
  uint64_t v4 = v399;
LABEL_39:
  uint64_t v3 = *(void *)v4;
  long long v2 = *v6;
  unint64_t v54 = BigString.Index.utf8Offset.getter();
  uint64_t result = BigString.Index.utf8Offset.getter();
  long long v413 = result;
  uint64_t v381 = v54;
  uint64_t v379 = 0;
  if (v54 == result)
  {
    long long v414 = v54;
LABEL_185:
    long long v167 = *(_OWORD *)(v3 + 16);
    long long v168 = *(_OWORD *)(v3 + 32);
    long long v515 = *(_OWORD *)(v3 + 48);
    v514[1] = v168;
    v514[0] = v167;
    long long v169 = *(_OWORD *)(v3 + 16);
    long long v170 = *(_OWORD *)(v3 + 32);
    v533[2] = v515;
    v533[1] = v170;
    v533[0] = v169;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v533, (uint64_t)v534);
    outlined retain of Locale((uint64_t)v534);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v514);
    uint64_t v171 = BigString.UTF8View.count.getter();
    outlined release of Locale((uint64_t)v450);
    unint64_t v172 = *(_OWORD **)v4;
    uint64_t v173 = *(_OWORD *)(v4 + 24);
    uint64_t v510 = *(_OWORD *)(v4 + 8);
    v511 = v173;
    uint64_t v174 = *(_OWORD *)(v4 + 56);
    v512 = *(_OWORD *)(v4 + 40);
    uint64_t v513 = v174;
    uint64_t v175 = v172[2];
    uint64_t v507 = v172[1];
    uint64_t v508 = v175;
    uint64_t v509 = v172[3];
    v535[0] = v507;
    v535[1] = v175;
    v535[2] = v509;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v535, (uint64_t)v536);
    outlined retain of Locale((uint64_t)v536);
    BigSubstring.UnicodeScalarView.init(_unchecked:in:)();
    long long v176 = *(_OWORD **)v4;
    BigString.init()();
    uint64_t v177 = v452;
    v176[1] = v451;
    v176[2] = v177;
    v176[3] = v453;
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EmptyCollection<Unicode.Scalar>);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyCollection<Unicode.Scalar> and conformance EmptyCollection<A>, &demangling cache variable for type metadata for EmptyCollection<Unicode.Scalar>);
    BigSubstring.UnicodeScalarView.replaceSubrange<A>(_:with:)();
    uint64_t v178 = *(_OWORD **)v4;
    long long v504 = v438;
    uint64_t v505 = v439;
    uint64_t v506 = v440;
    long long v500 = v434;
    long long v501 = v435;
    long long v503 = v437;
    long long v502 = v436;
    outlined retain of Locale((uint64_t)&v500);
    BigSubstring.UnicodeScalarView.base.getter();
    outlined release of Locale((uint64_t)&v500);
    BigString.init(_:)();
    unint64_t v179 = v455;
    v178[1] = v454;
    v178[2] = v179;
    v178[3] = v456;
    swift_unknownObjectRelease();
    outlined retain of Locale((uint64_t)&v500);
    uint64_t v180 = BigSubstring.UnicodeScalarView.startIndex.getter();
    long long v182 = v181;
    long long v2 = v183;
    uint64_t v185 = v184;
    outlined release of Locale((uint64_t)&v500);
    outlined retain of Locale((uint64_t)&v500);
    uint64_t v186 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v188 = v187;
    uint64_t v190 = v189;
    uint64_t v191 = (uint64_t *)v4;
    uint64_t v193 = v192;
    outlined release of Locale((uint64_t)&v500);
    v191[1] = v180;
    v191[2] = v182;
    v191[3] = v2;
    v191[4] = v185;
    v191[5] = v186;
    v191[6] = v188;
    v191[7] = v190;
    v191[8] = v193;
    unint64_t v194 = BigString.Index.utf8Offset.getter();
    uint64_t v195 = BigString.Index.utf8Offset.getter();
    uint64_t v196 = *v191;
    char v197 = *(_OWORD *)(*v191 + 16);
    uint64_t v198 = *(_OWORD *)(*v191 + 32);
    long long v499 = *(_OWORD *)(*v191 + 48);
    v498[1] = v198;
    v498[0] = v197;
    uint64_t v199 = *(_OWORD *)(v196 + 16);
    uint64_t v200 = *(_OWORD *)(v196 + 32);
    v537[2] = v499;
    v537[1] = v200;
    v537[0] = v199;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v537, (uint64_t)v538);
    outlined retain of Locale((uint64_t)v538);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v498);
    long long v201 = BigString.UTF8View.count.getter();
    uint64_t result = outlined release of Locale((uint64_t)v457);
    uint64_t v202 = v201 - v171;
    if (__OFSUB__(v201, v171)) {
      goto LABEL_389;
    }
    unint64_t v203 = v195 - v194;
    if (__OFSUB__(v195, v194)) {
      goto LABEL_390;
    }
    long long v2 = v203 + v202;
    if (__OFADD__(v203, v202)) {
      goto LABEL_391;
    }
    swift_bridgeObjectRetain();
    unint64_t v204 = MEMORY[0x1E4FBC870];
    swift_bridgeObjectRetain();
    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v194, v195, v2, v380, v204);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v2 = *v191;
    uint64_t v205 = *(_OWORD *)(*v191 + 16);
    uint64_t v206 = *(_OWORD *)(*v191 + 32);
    uint64_t v497 = *(_OWORD *)(*v191 + 48);
    v496[1] = v206;
    v496[0] = v205;
    uint64_t v207 = *(_OWORD *)(v2 + 16);
    uint64_t v208 = *(_OWORD *)(v2 + 32);
    v539[2] = v497;
    v539[1] = v208;
    v539[0] = v207;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v539, (uint64_t)v540);
    outlined retain of Locale((uint64_t)v540);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v496);
    uint64_t v209 = BigString.UTF8View.count.getter();
    uint64_t result = outlined release of Locale((uint64_t)v458);
    uint64_t v210 = v209 - v171;
    if (__OFSUB__(v209, v171)) {
      goto LABEL_392;
    }
    if (__OFADD__(v414, v210)) {
      goto LABEL_393;
    }
    if (v414 + v210 < v381) {
      goto LABEL_394;
    }
    uint64_t v211 = *(void *)(v2 + 80);
    if (!*(void *)(v2 + 64))
    {
      uint64_t v258 = swift_unknownObjectRetain();
      specialized Rope._endPath.getter(v258);
      swift_unknownObjectRelease();
      goto LABEL_229;
    }
    uint64_t v378 = v414 + v210;
    uint64_t v382 = v2;
    long long v212 = swift_unknownObjectRetain_n();
    specialized Rope._endPath.getter(v212);
    swift_unknownObjectRelease_n();
    if (!v211) {
      goto LABEL_229;
    }
    long long v213 = (_OWORD *)(v2 + 16);
    long long v214 = *(_OWORD *)(v2 + 16);
    long long v215 = *(_OWORD *)(v2 + 32);
    uint64_t v495 = *(_OWORD *)(v2 + 48);
    v494[1] = v215;
    v494[0] = v214;
    uint64_t v216 = *(_OWORD *)(v2 + 16);
    unint64_t v217 = *(_OWORD *)(v2 + 32);
    v541[2] = v495;
    v541[1] = v217;
    v541[0] = v216;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v541, (uint64_t)v542);
    outlined retain of Locale((uint64_t)v542);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v494);
    long long v218 = *(_OWORD *)(v2 + 16);
    uint64_t v219 = *(_OWORD *)(v2 + 32);
    uint64_t v493 = *(_OWORD *)(v2 + 48);
    v492[1] = v219;
    v492[0] = v218;
    long long v220 = *(_OWORD *)(v2 + 16);
    long long v221 = *(_OWORD *)(v2 + 32);
    v543[2] = v493;
    v543[1] = v221;
    v543[0] = v220;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v543, (uint64_t)v544);
    outlined retain of Locale((uint64_t)v544);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v492);
    long long v2 = BigString.UTF8View.index(_:offsetBy:)();
    long long v223 = v222;
    long long v225 = v224;
    uint64_t v227 = v226;
    outlined release of Locale((uint64_t)v459);
    uint64_t v228 = *(_OWORD *)(v382 + 16);
    uint64_t v229 = *(_OWORD *)(v382 + 32);
    long long v491 = *(_OWORD *)(v382 + 48);
    v490[1] = v229;
    v490[0] = v228;
    uint64_t v230 = *(_OWORD *)(v382 + 16);
    uint64_t v231 = *(_OWORD *)(v382 + 32);
    v545[2] = v491;
    v545[1] = v231;
    v545[0] = v230;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v545, (uint64_t)v546);
    outlined retain of Locale((uint64_t)v546);
    BigString.utf8.getter();
    uint64_t result = outlined release of Locale((uint64_t)v490);
    if (__OFSUB__(v378, v381)) {
      goto LABEL_406;
    }
    uint64_t v232 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v234 = v233;
    uint64_t v236 = v235;
    uint64_t v238 = v237;
    outlined release of Locale((uint64_t)v460);
    specialized Range.init(uncheckedBounds:)(v2, v223, v225, v227, v232, v234, v236, v238, v483);
    *(void *)&long long v551 = MEMORY[0x1E4FBC868];
    long long v239 = v213[1];
    uint64_t v487 = *v213;
    uint64_t v488 = v239;
    uint64_t v489 = v213[2];
    BigString.unicodeScalars.getter();
    long long v377 = v483[2];
    long long v240 = BigString.UnicodeScalarView.index(roundingDown:)();
    uint64_t v242 = v241;
    long long v244 = v243;
    long long v2 = v245;
    outlined release of Locale((uint64_t)v461);
    long long v246 = v213[1];
    long long v484 = *v213;
    long long v485 = v246;
    long long v486 = v213[2];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingUp:)();
    outlined release of Locale((uint64_t)v462);
    *(void *)&long long v557 = v240;
    *((void *)&v557 + 1) = v242;
    *(void *)&long long v558 = v244;
    *((void *)&v558 + 1) = v2;
    long long v30 = BigString.Index.utf8Offset.getter();
    uint64_t result = BigString.Index.utf8Offset.getter();
    long long v413 = result;
    if (result < v30) {
      goto LABEL_407;
    }
    long long v31 = *(void *)(v382 + 64);
    if (v31) {
      long long v247 = *(void *)(v382 + 80);
    }
    else {
      long long v247 = 0;
    }
    if (v30 < 0 || v247 < v30) {
      goto LABEL_408;
    }
    long long v34 = *(void *)(v382 + 72);
    uint64_t v11 = *(void *)(v382 + 88);
    uint64_t v383 = v213;
    if (!v31 || !*(_WORD *)(v31 + 16) || v30 >= *(void *)(v382 + 80))
    {
      swift_retain_n();
      uint64_t v259 = swift_unknownObjectRetain_n();
      uint64_t v260 = specialized Rope._endPath.getter(v259);
      swift_unknownObjectRelease();
      long long v2 = 0;
      uint64_t v248 = 0;
      if (!v31) {
        goto LABEL_368;
      }
      goto LABEL_231;
    }
    uint64_t v4 = *(unsigned __int8 *)(v31 + 18);
    if (!*(unsigned char *)(v31 + 18))
    {
      swift_unknownObjectRetain_n();
      uint64_t result = swift_retain_n();
      uint64_t v248 = v30;
      long long v2 = v31;
LABEL_323:
      uint64_t v103 = *(unsigned __int16 *)(v2 + 16);
      if (!*(_WORD *)(v2 + 16)) {
        goto LABEL_329;
      }
      unint64_t v359 = *(void *)(v2 + 24);
      uint64_t v60 = v248 - v359;
      if (__OFSUB__(v248, v359)) {
        goto LABEL_419;
      }
      if (__OFADD__(v60, 1)) {
        goto LABEL_420;
      }
      if (v60 + 1 <= 0)
      {
        uint64_t v103 = 0;
      }
      else
      {
        if (v103 != 1) {
          goto LABEL_347;
        }
        v248 -= v359;
LABEL_329:
        if (v248)
        {
          __break(1u);
LABEL_331:
          if (v11 < v378) {
            goto LABEL_332;
          }
LABEL_334:
          LOBYTE(v34) = 0;
          goto LABEL_335;
        }
      }
      goto LABEL_367;
    }
    swift_unknownObjectRetain_n();
    uint64_t result = swift_retain_n();
    uint64_t v248 = v30;
    uint64_t v249 = v31;
    while (1)
    {
      uint64_t v251 = *(unsigned __int16 *)(v249 + 16);
      if (!*(_WORD *)(v249 + 16)) {
        goto LABEL_206;
      }
      uint64_t v252 = *(void *)(v249 + 40);
      uint64_t v253 = v248 - v252;
      if (__OFSUB__(v248, v252)) {
        goto LABEL_386;
      }
      if (__OFADD__(v253, 1)) {
        goto LABEL_387;
      }
      if (v253 + 1 <= 0)
      {
        uint64_t v251 = 0;
      }
      else
      {
        if (v251 == 1)
        {
          v248 -= v252;
          goto LABEL_206;
        }
        long long v254 = *(void *)(v249 + 64);
        int64_t v40 = __OFSUB__(v253, v254);
        long long v255 = v253 - v254;
        if (v40) {
          goto LABEL_404;
        }
        if (__OFADD__(v255, 1)) {
          goto LABEL_405;
        }
        if (v255 + 1 < 1)
        {
          uint64_t v251 = 1;
          uint64_t v248 = v253;
        }
        else
        {
          if (v251 == 2)
          {
            uint64_t v248 = v255;
LABEL_206:
            if (v248) {
              goto LABEL_385;
            }
            goto LABEL_207;
          }
          long long v256 = (void *)(v249 + 88);
          long long v257 = 2;
          while (1)
          {
            if (v251 == v257) {
              goto LABEL_378;
            }
            uint64_t v248 = v255 - *v256;
            if (__OFSUB__(v255, *v256)) {
              goto LABEL_379;
            }
            if (__OFADD__(v248, 1)) {
              goto LABEL_380;
            }
            if (v248 + 1 < 1) {
              break;
            }
            ++v257;
            v256 += 3;
            long long v255 = v248;
            if (v251 == v257) {
              goto LABEL_206;
            }
          }
          uint64_t v251 = v257;
          uint64_t v248 = v255;
        }
      }
LABEL_207:
      uint64_t v250 = (4 * *(unsigned char *)(v249 + 18) + 8) & 0x3C;
      uint64_t v4 = ((-15 << v250) - 1) & v4 | (v251 << v250);
      long long v2 = *(void *)(v249 + 24 + 24 * v251);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v249 = v2;
      if (!*(unsigned char *)(v2 + 18)) {
        goto LABEL_323;
      }
    }
  }
  int64_t v422 = v54;
  uint64_t v15 = *(void *)(v3 + 64);
  long long v31 = *(void *)(v3 + 80);
  if (v15) {
    uint64_t v55 = *(void *)(v3 + 80);
  }
  else {
    uint64_t v55 = 0;
  }
  if (v54 < 0 || v55 < v54) {
    goto LABEL_399;
  }
  long long v407 = *(void *)(v3 + 72);
  uint64_t v11 = *(void *)(v3 + 88);
  if (!v15)
  {
LABEL_66:
    uint64_t v64 = swift_unknownObjectRetain();
    unint64_t v65 = v407;
    uint64_t v66 = specialized Rope._endPath.getter(v64);
    swift_unknownObjectRelease();
    uint64_t v4 = 0;
    uint64_t v67 = 0;
    if (!v15) {
      goto LABEL_68;
    }
    goto LABEL_67;
  }
  if (!*(_WORD *)(v15 + 16) || v54 >= v31)
  {
LABEL_65:
    swift_unknownObjectRetain();
    goto LABEL_66;
  }
  long long v30 = *(unsigned __int8 *)(v15 + 18);
  if (*(unsigned char *)(v15 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    long long v2 = -15;
    long long v34 = 24;
    uint64_t v56 = v381;
    uint64_t v57 = v15;
    while (1)
    {
      uint64_t v58 = *(unsigned __int16 *)(v57 + 16);
      if (*(_WORD *)(v57 + 16))
      {
        uint64_t v60 = 0;
        uint64_t v61 = (uint64_t *)(v57 + 40);
        while (1)
        {
          uint64_t v62 = *v61;
          v61 += 3;
          uint64_t v63 = v56 - v62;
          if (__OFSUB__(v56, v62))
          {
            __break(1u);
LABEL_353:
            __break(1u);
            goto LABEL_354;
          }
          if (__OFADD__(v63, 1)) {
            goto LABEL_353;
          }
          if (v63 + 1 < 1) {
            break;
          }
          ++v60;
          uint64_t v56 = v63;
          if (v58 == v60) {
            goto LABEL_61;
          }
        }
        uint64_t v58 = v60;
      }
      else
      {
        uint64_t v63 = v56;
LABEL_61:
        if (v63) {
          goto LABEL_384;
        }
        uint64_t v56 = 0;
      }
      uint64_t v59 = (4 * *(unsigned char *)(v57 + 18) + 8) & 0x3C;
      long long v30 = ((-15 << v59) - 1) & v30 | (v58 << v59);
      uint64_t v4 = *(void *)(v57 + 24 + 24 * v58);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v57 = v4;
      if (!*(unsigned char *)(v4 + 18)) {
        goto LABEL_320;
      }
    }
  }
  swift_unknownObjectRetain_n();
  uint64_t v56 = v381;
  uint64_t v4 = v15;
LABEL_320:
  uint64_t result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v56, 0, (_WORD *)(v4 + 16), (uint64_t *)(v4 + 24));
  if (result < 0) {
    goto LABEL_415;
  }
  unint64_t v358 = result;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v66 = v30 & 0xFFFFFFFFFFFFF0FFLL | (v358 << 8);
  unint64_t v65 = v407;
LABEL_67:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v66, v4, v15, v65);
  swift_unknownObjectRelease_n();
  uint64_t v67 = v4;
LABEL_68:
  uint64_t v68 = v11;
  uint64_t v69 = *(void *)(v3 + 64);
  long long v31 = *(void *)(v3 + 72);
  unint64_t v70 = *(void *)(v3 + 80);
  unint64_t v71 = *(void *)(v3 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v68, v66, v67, v69, v31, v70, v71);
  uint64_t v401 = v72;
  swift_unknownObjectRelease();
  uint64_t v73 = swift_bridgeObjectRetain();
  uint64_t v11 = v379;
  uint64_t v4 = specialized _NativeDictionary.filter(_:)(v73);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRetain();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v74 = 0;
  *(void *)&uint64_t v434 = result;
  uint64_t v75 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v41 = -1;
  if (v75 < 64) {
    uint64_t v41 = ~(-1 << v75);
  }
  long long v30 = v4 + 64;
  long long v34 = v41 & *(void *)(v4 + 64);
  long long v2 = (unint64_t)(v75 + 63) >> 6;
  uint64_t v76 = v413;
  while (1)
  {
    if (v34)
    {
      int64_t v77 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      uint64_t v78 = v77 | (v74 << 6);
      goto LABEL_72;
    }
    unint64_t v38 = v74 + 1;
    if (__OFADD__(v74, 1))
    {
      __break(1u);
LABEL_363:
      __break(1u);
LABEL_364:
      __break(1u);
LABEL_365:
      __break(1u);
LABEL_366:
      uint64_t v103 = v41;
      uint64_t v248 = v38;
      goto LABEL_367;
    }
    if (v38 >= v2) {
      goto LABEL_92;
    }
    uint64_t v80 = *(void *)(v30 + 8 * v38);
    ++v74;
    if (!v80)
    {
      uint64_t v74 = v38 + 1;
      if (v38 + 1 >= v2) {
        goto LABEL_92;
      }
      uint64_t v80 = *(void *)(v30 + 8 * v74);
      if (!v80)
      {
        uint64_t v74 = v38 + 2;
        if (v38 + 2 >= v2) {
          goto LABEL_92;
        }
        uint64_t v80 = *(void *)(v30 + 8 * v74);
        if (!v80)
        {
          uint64_t v74 = v38 + 3;
          if (v38 + 3 >= v2) {
            goto LABEL_92;
          }
          uint64_t v80 = *(void *)(v30 + 8 * v74);
          if (!v80)
          {
            uint64_t v74 = v38 + 4;
            if (v38 + 4 >= v2) {
              goto LABEL_92;
            }
            uint64_t v80 = *(void *)(v30 + 8 * v74);
            if (!v80) {
              break;
            }
          }
        }
      }
    }
LABEL_91:
    long long v34 = (v80 - 1) & v80;
    uint64_t v78 = __clz(__rbit64(v80)) + (v74 << 6);
LABEL_72:
    uint64_t v79 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v78);
    uint64_t v11 = *v79;
    long long v31 = v79[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)((unint64_t *)&v500, v11, v31);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v81 = v38 + 5;
  if (v81 < v2)
  {
    uint64_t v80 = *(void *)(v30 + 8 * v81);
    if (!v80)
    {
      while (1)
      {
        uint64_t v74 = v81 + 1;
        if (__OFADD__(v81, 1)) {
          break;
        }
        if (v74 >= v2) {
          goto LABEL_92;
        }
        uint64_t v80 = *(void *)(v30 + 8 * v74);
        ++v81;
        if (v80) {
          goto LABEL_91;
        }
      }
LABEL_409:
      __break(1u);
      goto LABEL_410;
    }
    uint64_t v74 = v81;
    goto LABEL_91;
  }
LABEL_92:
  swift_release();
  uint64_t v82 = v434;
  *(void *)&uint64_t v416 = v434;
  if (v381)
  {
    uint64_t v83 = *(void *)(v3 + 64);
    unint64_t v84 = *(void *)(v3 + 72);
    unint64_t v85 = *(void *)(v3 + 80);
    unint64_t v86 = *(void *)(v3 + 88);
    swift_unknownObjectRetain();
    swift_retain();
    AttributedString._InternalRuns.endIndex.getter(v83, v84, v85, v86, &v442);
    char v404 = v443;
    uint64_t v408 = v442;
    uint64_t v87 = v444;
    swift_unknownObjectRelease();
    int64_t v89 = v404;
    unint64_t v88 = v408;
  }
  else
  {
    uint64_t v90 = (void *)swift_retain();
    AttributedString._InternalRunsSlice.startIndex.getter(v90, 0, (unint64_t *)&v442);
    unint64_t v88 = v442;
    int64_t v89 = v443;
    uint64_t v87 = v444;
  }
  uint64_t v434 = v88;
  uint64_t v435 = v89;
  *(void *)&uint64_t v436 = v87;
  uint64_t v91 = *(void *)(v3 + 64);
  uint64_t v92 = *(void *)(v3 + 72);
  uint64_t v93 = *(void *)(v3 + 80);
  long long v2 = *(void *)(v3 + 88);
  char Enum = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
  swift_unknownObjectRetain();
  long long v405 = Enum;
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, Enum & 1, v91, v92, v93, v2, (uint64_t *)&v500);
  uint64_t v95 = v502;
  swift_unknownObjectRelease();
  if (v95 < v87 && *(void *)(v82 + 16))
  {
    uint64_t v384 = v4;
    do
    {
      long long v96 = v434;
      long long v97 = v435;
      uint64_t v98 = *(void *)(v3 + 64);
      unint64_t v99 = *(void *)(v3 + 80);
      long long v2 = *(void *)(v3 + 88);
      uint64_t v100 = swift_unknownObjectRetain();
      uint64_t result = specialized Rope._endPath.getter(v100);
      if (v98)
      {
        uint64_t result = swift_unknownObjectRelease();
        if (v87 != v99) {
          goto LABEL_122;
        }
      }
      else if (v87)
      {
LABEL_122:
        uint64_t v111 = *(void *)(v3 + 64);
        int64_t v112 = *(void *)(v3 + 72);
        long long v2 = *(void *)(v3 + 80);
        uint64_t v113 = *(void *)(v3 + 88);
        long long v500 = v96;
        *(void *)&long long v501 = v97;
        char v114 = *((void *)&v97 + 1) - 1;
        if (__OFSUB__(*((void *)&v97 + 1), 1)) {
          goto LABEL_395;
        }
        swift_unknownObjectRetain();
        specialized Rope.formIndex(before:)((uint64_t)&v500, v111, v112, v2, v113);
        uint64_t v115 = *((void *)&v500 + 1);
        long long v31 = v501;
        uint64_t v409 = v500;
        uint64_t v116 = specialized Rope.subscript.getter(v500, *((unint64_t *)&v500 + 1), v501, v111, v112, v2, v113);
        long long v2 = v117;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v118 = v87 - v116;
        if (__OFSUB__(v87, v116)) {
          goto LABEL_396;
        }
        uint64_t v102 = v381;
        uint64_t v76 = v413;
        uint64_t v4 = v384;
        goto LABEL_148;
      }
      uint64_t v101 = *(void *)(v3 + 64);
      long long v31 = *(void *)(v3 + 72);
      long long v34 = *(void *)(v3 + 80);
      uint64_t v409 = *(void *)(v3 + 88);
      uint64_t v383 = (_OWORD *)v31;
      if (v101)
      {
        uint64_t v102 = v381;
        uint64_t v4 = v384;
        if (v34 < v381) {
          goto LABEL_400;
        }
        if (*(_WORD *)(v101 + 16))
        {
          uint64_t v103 = *(unsigned __int8 *)(v101 + 18);
          if (*(unsigned char *)(v101 + 18))
          {
            uint64_t result = swift_unknownObjectRetain_n();
            long long v2 = v381;
            uint64_t v11 = v101;
            long long v30 = -15;
            while (1)
            {
              long long v105 = *(unsigned __int16 *)(v11 + 16);
              if (!*(_WORD *)(v11 + 16)) {
                goto LABEL_425;
              }
              uint64_t v106 = *(void *)(v11 + 40);
              int64_t v40 = __OFSUB__(v2, v106);
              uint64_t v107 = v2 - v106;
              if (v40) {
                goto LABEL_373;
              }
              if (v107 <= 0)
              {
                uint64_t v60 = 0;
              }
              else
              {
                if (v105 == 1) {
                  goto LABEL_427;
                }
                uint64_t v108 = *(void *)(v11 + 64);
                long long v2 = v107 - v108;
                if (__OFSUB__(v107, v108)) {
                  goto LABEL_377;
                }
                if (v2 >= 1)
                {
                  if (v105 == 2) {
                    goto LABEL_427;
                  }
                  unint64_t v109 = (void *)(v11 + 88);
                  uint64_t v60 = 2;
                  while (v105 != v60)
                  {
                    uint64_t v110 = v2 - *v109;
                    if (__OFSUB__(v2, *v109)) {
                      goto LABEL_346;
                    }
                    if (v110 < 1) {
                      goto LABEL_106;
                    }
                    ++v60;
                    v109 += 3;
                    long long v2 = v110;
                    if (v105 == v60) {
                      goto LABEL_427;
                    }
                  }
                  __break(1u);
LABEL_346:
                  __break(1u);
LABEL_347:
                  long long v375 = *(void *)(v2 + 48);
                  int64_t v40 = __OFSUB__(v60, v375);
                  unint64_t v38 = v60 - v375;
                  if (v40) {
                    goto LABEL_423;
                  }
                  if (__OFADD__(v38, 1)) {
                    goto LABEL_424;
                  }
                  if (v38 + 1 >= 1)
                  {
                    if (v103 != 2)
                    {
                      long long v376 = (void *)(v2 + 72);
                      uint64_t v41 = 2;
                      while (v103 != v41)
                      {
                        uint64_t v248 = v38 - *v376;
                        if (__OFSUB__(v38, *v376)) {
                          goto LABEL_417;
                        }
                        if (__OFADD__(v248, 1)) {
                          goto LABEL_418;
                        }
                        if (v248 + 1 < 1) {
                          goto LABEL_366;
                        }
                        ++v41;
                        v376 += 3;
                        unint64_t v38 = v248;
                        if (v103 == v41) {
                          goto LABEL_329;
                        }
                      }
                      goto LABEL_416;
                    }
                    uint64_t v248 = v38;
                    goto LABEL_329;
                  }
LABEL_354:
                  uint64_t v103 = 1;
                  uint64_t v248 = v60;
LABEL_367:
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  uint64_t v260 = v4 & 0xFFFFFFFFFFFFF0FFLL | (v103 << 8);
                  long long v213 = v383;
                  if (!v31)
                  {
LABEL_368:
                    uint64_t result = swift_release();
                    uint64_t v261 = 0;
                    unint64_t v262 = v30 - v248;
                    if (!__OFSUB__(v30, v248))
                    {
LABEL_232:
                      *(void *)&uint64_t v429 = v382;
                      *((void *)&v429 + 1) = v30;
                      *(void *)&uint64_t v430 = v413;
                      *((void *)&v430 + 1) = v11;
                      *(void *)&uint64_t v431 = v260;
                      *((void *)&v431 + 1) = v2;
                      uint64_t v432 = v261;
                      uint64_t v433 = v262;
                      specialized IndexingIterator.next()();
                      if (!v263)
                      {
                        uint64_t v306 = MEMORY[0x1E4FBC868];
                        goto LABEL_276;
                      }
                      long long v264 = v263;
                      while (1)
                      {
                        long long v267 = *v213;
                        long long v268 = v213[1];
                        uint64_t v473 = v213[2];
                        v472[1] = v268;
                        v472[0] = v267;
                        long long v269 = *v213;
                        v560[1] = v213[1];
                        v560[2] = v473;
                        v560[0] = v269;
                        outlined init with take of any PredicateExpression<Self.Output == B1>(v560, (uint64_t)v561);
                        outlined retain of Locale((uint64_t)v561);
                        BigString.utf8.getter();
                        outlined release of Locale((uint64_t)v472);
                        long long v270 = v557;
                        long long v393 = v558;
                        long long v395 = *((void *)&v557 + 1);
                        long long v391 = *((void *)&v558 + 1);
                        uint64_t v271 = BigString.UTF8View.index(_:offsetBy:)();
                        uint64_t v273 = v272;
                        uint64_t v275 = v274;
                        uint64_t v277 = v276;
                        outlined release of Locale((uint64_t)v463);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        long long v278 = specialized AttributedString._AttributeStorage.containsScalarConstraint.getter(v264);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        if (v278)
                        {
                          long long v2 = v393;
                          long long v279 = v391;
                          long long v280 = static BigString.Index.< infix(_:_:)();
                          long long v281 = v395;
                          if (v280) {
                            break;
                          }
                        }
LABEL_234:
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        $defer #1 () in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(&v557, v271, v273, v275, v277);
                        specialized IndexingIterator.next()();
                        long long v264 = v265;
                        long long v2 = v266;
                        if (!v265) {
                          goto LABEL_275;
                        }
                      }
                      long long v388 = v275;
                      long long v389 = v264 + 64;
                      int64_t v386 = v273;
                      int64_t v387 = v277;
                      int64_t v385 = v271;
                      while (2)
                      {
                        uint64_t v283 = v213[1];
                        long long v469 = *v213;
                        long long v470 = v283;
                        long long v471 = v213[2];
                        uint64_t v284 = v281;
                        BigString.unicodeScalars.getter();
                        long long v412 = BigString.UnicodeScalarView.subscript.getter();
                        outlined release of Locale((uint64_t)v464);
                        uint64_t v285 = v213[1];
                        long long v466 = *v213;
                        long long v467 = v285;
                        uint64_t v468 = v213[2];
                        BigString.unicodeScalars.getter();
                        long long v390 = v270;
                        long long v392 = v279;
                        long long v394 = v2;
                        uint64_t v396 = v284;
                        long long v406 = BigString.UnicodeScalarView.index(after:)();
                        uint64_t v400 = v287;
                        int64_t v403 = v286;
                        uint64_t v398 = v288;
                        outlined release of Locale((uint64_t)v465);
                        long long v289 = 1 << *(unsigned char *)(v264 + 32);
                        if (v289 < 64) {
                          uint64_t v290 = ~(-1 << v289);
                        }
                        else {
                          uint64_t v290 = -1;
                        }
                        uint64_t v291 = v290 & *(void *)(v264 + 64);
                        uint64_t v292 = (unint64_t)(v289 + 63) >> 6;
                        uint64_t result = swift_bridgeObjectRetain();
                        uint64_t v293 = 0;
LABEL_244:
                        if (v291)
                        {
                          uint64_t v294 = __clz(__rbit64(v291));
                          v291 &= v291 - 1;
                          uint64_t v295 = v294 | (v293 << 6);
                          goto LABEL_246;
                        }
                        uint64_t v299 = v293 + 1;
                        if (__OFADD__(v293, 1))
                        {
                          __break(1u);
LABEL_275:
                          uint64_t v306 = v551;
LABEL_276:
                          uint64_t result = swift_release();
                          uint64_t v307 = 0;
                          v308 = v306 + 64;
                          uint64_t v309 = 1 << *(unsigned char *)(v306 + 32);
                          unint64_t v310 = -1;
                          if (v309 < 64) {
                            unint64_t v310 = ~(-1 << v309);
                          }
                          unint64_t v311 = v310 & *(void *)(v306 + 64);
                          uint64_t v415 = (unint64_t)(v309 + 63) >> 6;
                          while (1)
                          {
                            if (v311)
                            {
                              unint64_t v312 = __clz(__rbit64(v311));
                              v311 &= v311 - 1;
                              uint64_t v313 = v312 | (v307 << 6);
                            }
                            else
                            {
                              int64_t v40 = __OFADD__(v307++, 1);
                              if (v40) {
                                goto LABEL_374;
                              }
                              if (v307 >= v415)
                              {
LABEL_301:
                                swift_release();
                                uint64_t v4 = (uint64_t)v383;
                                if (specialized Range.isEmpty.getter())
                                {
                                  uint64_t v321 = *v383;
                                  uint64_t v322 = v383[1];
                                  long long v553 = v383[2];
                                  long long v552 = v322;
                                  long long v551 = v321;
                                  uint64_t v323 = *v383;
                                  long long v558 = v383[1];
                                  long long v559 = v553;
                                  long long v557 = v323;
                                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v557, (uint64_t)v474);
                                  outlined retain of Locale((uint64_t)v474);
                                  BigString.startIndex.getter();
                                  outlined release of Locale((uint64_t)&v551);
                                  long long v2 = v377;
                                  if (specialized static Comparable.> infix(_:_:)())
                                  {
                                    uint64_t v324 = *v383;
                                    uint64_t v325 = v383[1];
                                    long long v549 = v383[2];
                                    long long v548 = v325;
                                    long long v547 = v324;
                                    uint64_t v326 = *v383;
                                    uint64_t v430 = v383[1];
                                    uint64_t v431 = v549;
                                    uint64_t v429 = v326;
                                    outlined init with take of any PredicateExpression<Self.Output == B1>(&v429, (uint64_t)v476);
                                    outlined retain of Locale((uint64_t)v476);
                                    BigString.endIndex.getter();
                                    outlined release of Locale((uint64_t)&v547);
                                    if (static BigString.Index.< infix(_:_:)())
                                    {
                                      uint64_t result = v381 - 1;
                                      if (__OFSUB__(v381, 1)) {
                                        goto LABEL_422;
                                      }
                                      if (AttributedString.Guts._needsParagraphFixing(from:to:)(result, v381))
                                      {
                                        uint64_t v327 = *v383;
                                        uint64_t v328 = v383[1];
                                        long long v482 = v383[2];
                                        long long v481 = v328;
                                        long long v480 = v327;
                                        char v329 = *v383;
                                        uint64_t v417 = v383[1];
                                        uint64_t v418 = v482;
                                        uint64_t v416 = v329;
                                        outlined init with take of any PredicateExpression<Self.Output == B1>(&v416, (uint64_t)v478);
                                        outlined retain of Locale((uint64_t)v478);
                                        uint64_t v330 = BigString.index(before:)();
                                        long long v332 = v331;
                                        uint64_t v334 = v333;
                                        unint64_t v336 = v335;
                                        outlined release of Locale((uint64_t)&v480);
                                        AttributedString.Guts._paragraphExtending(from:)(v330, v332, v334, v336, &v422);
                                        long long v30 = Range<>._utf8OffsetRange.getter();
                                        uint64_t v11 = v337;
                                        goto LABEL_334;
                                      }
                                    }
                                  }
                                  goto LABEL_229;
                                }
                                uint64_t v338 = *v383;
                                uint64_t v339 = v383[1];
                                long long v482 = v383[2];
                                long long v481 = v339;
                                long long v480 = v338;
                                unint64_t v340 = *v383;
                                int64_t v341 = v383[1];
                                long long v549 = v482;
                                long long v548 = v341;
                                long long v547 = v340;
                                outlined init with take of any PredicateExpression<Self.Output == B1>(&v547, (uint64_t)v550);
                                outlined retain of Locale((uint64_t)v550);
                                BigString.startIndex.getter();
                                outlined release of Locale((uint64_t)&v480);
                                long long v2 = v382;
                                if ((specialized static Comparable.> infix(_:_:)() & 1) == 0) {
                                  goto LABEL_311;
                                }
                                uint64_t result = v381 - 1;
                                if (__OFSUB__(v381, 1)) {
                                  goto LABEL_421;
                                }
                                if (AttributedString.Guts._needsParagraphFixing(from:to:)(result, v381))
                                {
                                  unint64_t v342 = *v383;
                                  unint64_t v343 = v383[1];
                                  uint64_t v479 = v383[2];
                                  v478[1] = v343;
                                  v478[0] = v342;
                                  uint64_t v344 = *v383;
                                  uint64_t v345 = v383[1];
                                  long long v553 = v479;
                                  long long v552 = v345;
                                  long long v551 = v344;
                                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v551, (uint64_t)v554);
                                  outlined retain of Locale((uint64_t)v554);
                                  uint64_t v346 = BigString.index(before:)();
                                  unint64_t v348 = v347;
                                  uint64_t v350 = v349;
                                  unint64_t v352 = v351;
                                  outlined release of Locale((uint64_t)v478);
                                  AttributedString.Guts._paragraphExtending(from:)(v346, v348, v350, v352, &v416);
                                  long long v30 = Range<>._utf8OffsetRange.getter();
                                  uint64_t v11 = v353;
                                  LOBYTE(v34) = 0;
                                }
                                else
                                {
LABEL_311:
                                  long long v30 = 0;
                                  uint64_t v11 = 0;
                                  LOBYTE(v34) = 1;
                                }
                                uint64_t v354 = *v383;
                                uint64_t v355 = v383[1];
                                long long v477 = v383[2];
                                v476[1] = v355;
                                v476[0] = v354;
                                uint64_t v356 = *v383;
                                long long v558 = v383[1];
                                long long v559 = v477;
                                long long v557 = v356;
                                outlined init with take of any PredicateExpression<Self.Output == B1>(&v557, (uint64_t)v555);
                                outlined retain of Locale((uint64_t)v555);
                                BigString.endIndex.getter();
                                outlined release of Locale((uint64_t)v476);
                                if (static BigString.Index.< infix(_:_:)())
                                {
                                  if ((v34 & 1) == 0) {
                                    goto LABEL_331;
                                  }
                                  if (v378 < 1)
                                  {
LABEL_229:
                                    swift_bridgeObjectRelease();
                                    swift_bridgeObjectRelease();
                                    return swift_unknownObjectRelease();
                                  }
LABEL_332:
                                  if (AttributedString.Guts._needsParagraphFixing(from:to:)(v378 - 1, v378))
                                  {
                                    unint64_t v360 = *(_OWORD *)v4;
                                    unint64_t v361 = *(_OWORD *)(v4 + 16);
                                    long long v475 = *(_OWORD *)(v4 + 32);
                                    v474[1] = v361;
                                    v474[0] = v360;
                                    uint64_t v362 = *(_OWORD *)v4;
                                    uint64_t v430 = *(_OWORD *)(v4 + 16);
                                    uint64_t v431 = v475;
                                    uint64_t v429 = v362;
                                    outlined init with take of any PredicateExpression<Self.Output == B1>(&v429, (uint64_t)v556);
                                    outlined retain of Locale((uint64_t)v556);
                                    int v363 = BigString.index(before:)();
                                    unint64_t v365 = v364;
                                    uint64_t v367 = v366;
                                    long long v369 = v368;
                                    outlined release of Locale((uint64_t)v474);
                                    AttributedString.Guts._paragraphExtending(from:)(v363, v365, v367, v369, &v422);
                                    long long v370 = Range<>._utf8OffsetRange.getter();
                                    long long v372 = v371;
                                    long long v373 = 1;
                                    goto LABEL_336;
                                  }
                                }
LABEL_335:
                                long long v370 = 0;
                                long long v372 = 0;
                                long long v373 = 0;
LABEL_336:
                                if ((v34 & 1) == 0 && v381 < v11)
                                {
                                  uint64_t v427 = 0;
                                  uint64_t v428 = 0;
                                  AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v427, v30, v381, v11);
                                }
                                if (v378 < v372) {
                                  long long v374 = v373;
                                }
                                else {
                                  long long v374 = 0;
                                }
                                if (v374 == 1)
                                {
                                  uint64_t v427 = 0;
                                  uint64_t v428 = 0;
                                  AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v427, v370, v378, v372);
                                }
                                goto LABEL_229;
                              }
                              uint64_t v314 = *(void *)(v308 + 8 * v307);
                              if (!v314)
                              {
                                uint64_t v315 = v307 + 1;
                                if (v307 + 1 >= v415) {
                                  goto LABEL_301;
                                }
                                uint64_t v314 = *(void *)(v308 + 8 * v315);
                                if (!v314)
                                {
                                  uint64_t v315 = v307 + 2;
                                  if (v307 + 2 >= v415) {
                                    goto LABEL_301;
                                  }
                                  uint64_t v314 = *(void *)(v308 + 8 * v315);
                                  if (!v314)
                                  {
                                    uint64_t v315 = v307 + 3;
                                    if (v307 + 3 >= v415) {
                                      goto LABEL_301;
                                    }
                                    uint64_t v314 = *(void *)(v308 + 8 * v315);
                                    if (!v314)
                                    {
                                      while (1)
                                      {
                                        uint64_t v307 = v315 + 1;
                                        if (__OFADD__(v315, 1)) {
                                          goto LABEL_388;
                                        }
                                        if (v307 >= v415) {
                                          goto LABEL_301;
                                        }
                                        uint64_t v314 = *(void *)(v308 + 8 * v307);
                                        ++v315;
                                        if (v314) {
                                          goto LABEL_291;
                                        }
                                      }
                                    }
                                  }
                                }
                                uint64_t v307 = v315;
                              }
LABEL_291:
                              unint64_t v311 = (v314 - 1) & v314;
                              uint64_t v313 = __clz(__rbit64(v314)) + (v307 << 6);
                            }
                            uint64_t v316 = (uint64_t *)(*(void *)(v306 + 48) + 16 * v313);
                            long long v2 = *v316;
                            uint64_t v317 = v316[1];
                            long long v318 = *(void *)(*(void *)(v306 + 56) + 8 * v313);
                            uint64_t result = specialized Array._getCount()(v318);
                            if (result)
                            {
                              long long v319 = result;
                              if (result < 1) {
                                goto LABEL_371;
                              }
                              swift_bridgeObjectRetain();
                              swift_bridgeObjectRetain();
                              long long v320 = (uint64_t *)(v318 + 40);
                              do
                              {
                                AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)(v2, v317, *(v320 - 1), *v320, 0);
                                v320 += 2;
                                --v319;
                              }
                              while (v319);
                              swift_bridgeObjectRelease();
                              uint64_t result = swift_bridgeObjectRelease();
                            }
                          }
                        }
                        if (v299 < v292)
                        {
                          uint64_t v300 = *(void *)(v389 + 8 * v299);
                          if (v300)
                          {
LABEL_250:
                            uint64_t v291 = (v300 - 1) & v300;
                            uint64_t v295 = __clz(__rbit64(v300)) + (v299 << 6);
                            uint64_t v293 = v299;
LABEL_246:
                            uint64_t v296 = *(void *)(v264 + 56);
                            long long v297 = (void *)(*(void *)(v264 + 48) + 16 * v295);
                            uint64_t v298 = v297[1];
                            *(void *)&uint64_t v416 = *v297;
                            *((void *)&v416 + 1) = v298;
                            outlined init with copy of AttributedString._AttributeValue(v296 + 72 * v295, (uint64_t)&v417);
                            swift_bridgeObjectRetain();
LABEL_256:
                            outlined init with take of (key: String, value: AttributedString._AttributeValue)?((uint64_t)&v416, (uint64_t)&v422);
                            long long v2 = v423;
                            if (!v423)
                            {
                              swift_release();
                              long long v270 = v406;
                              long long v2 = v400;
                              uint64_t v271 = v385;
                              uint64_t v273 = v386;
                              uint64_t v277 = v387;
                              uint64_t v275 = v388;
                              uint64_t v282 = static BigString.Index.< infix(_:_:)();
                              long long v281 = v403;
                              long long v279 = v398;
                              long long v213 = v383;
                              if ((v282 & 1) == 0) {
                                goto LABEL_234;
                              }
                              continue;
                            }
                            unint64_t v301 = v422;
                            char v302 = v425;
                            uint64_t v303 = v426;
                            outlined copy of AttributedString.AttributeRunBoundaries?(v425, v426);
                            outlined destroy of AttributedString._AttributeValue((uint64_t)&v424);
                            if (v303 != 1)
                            {
                              *(void *)&uint64_t v416 = v302;
                              *((void *)&v416 + 1) = v303;
                              uint64_t v304 = AttributedString.AttributeRunBoundaries._constrainedScalar.getter();
                              outlined consume of AttributedString.AttributeRunBoundaries?(v302, v303);
                              if ((v304 & 0x100000000) == 0 && v412 != v304) {
                                specialized invalidate #1 (_:from:to:) in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(v301, v2, v390, v396, v394, v392, v406, v403, v400, v398, (uint64_t *)&v551);
                              }
                            }
                            uint64_t result = swift_bridgeObjectRelease();
                            goto LABEL_244;
                          }
                          v293 += 2;
                          if (v299 + 1 >= v292)
                          {
                            uint64_t v293 = v299;
                          }
                          else
                          {
                            uint64_t v300 = *(void *)(v389 + 8 * v293);
                            if (v300)
                            {
                              ++v299;
                              goto LABEL_250;
                            }
                            if (v299 + 2 < v292)
                            {
                              uint64_t v300 = *(void *)(v389 + 8 * (v299 + 2));
                              if (v300)
                              {
                                v299 += 2;
                                goto LABEL_250;
                              }
                              uint64_t v305 = v299 + 3;
                              if (v299 + 3 >= v292)
                              {
                                uint64_t v293 = v299 + 2;
                              }
                              else
                              {
                                uint64_t v300 = *(void *)(v389 + 8 * v305);
                                if (v300)
                                {
                                  v299 += 3;
                                  goto LABEL_250;
                                }
                                while (1)
                                {
                                  uint64_t v299 = v305 + 1;
                                  if (__OFADD__(v305, 1)) {
                                    goto LABEL_372;
                                  }
                                  if (v299 >= v292) {
                                    break;
                                  }
                                  uint64_t v300 = *(void *)(v389 + 8 * v299);
                                  ++v305;
                                  if (v300) {
                                    goto LABEL_250;
                                  }
                                }
                                uint64_t v293 = v292 - 1;
                              }
                            }
                          }
                        }
                        break;
                      }
                      uint64_t v291 = 0;
                      uint64_t v421 = 0;
                      uint64_t v419 = 0u;
                      uint64_t v420 = 0u;
                      uint64_t v417 = 0u;
                      uint64_t v418 = 0u;
                      uint64_t v416 = 0u;
                      goto LABEL_256;
                    }
LABEL_370:
                    __break(1u);
LABEL_371:
                    __break(1u);
LABEL_372:
                    __break(1u);
LABEL_373:
                    __break(1u);
LABEL_374:
                    __break(1u);
LABEL_375:
                    __break(1u);
LABEL_376:
                    __break(1u);
LABEL_377:
                    __break(1u);
LABEL_378:
                    __break(1u);
LABEL_379:
                    __break(1u);
LABEL_380:
                    __break(1u);
LABEL_381:
                    __break(1u);
LABEL_382:
                    __break(1u);
                    goto LABEL_383;
                  }
LABEL_231:
                  swift_unknownObjectRetain();
                  uint64_t v261 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v260, v2, v31, v34);
                  swift_release();
                  uint64_t result = swift_unknownObjectRelease_n();
                  unint64_t v262 = v30 - v248;
                  if (!__OFSUB__(v30, v248)) {
                    goto LABEL_232;
                  }
                  goto LABEL_370;
                }
                long long v2 = v107;
                uint64_t v60 = 1;
              }
LABEL_106:
              uint64_t v104 = (4 * *(unsigned char *)(v11 + 18) + 8) & 0x3C;
              uint64_t v103 = ((-15 << v104) - 1) & v103 | (v60 << v104);
              long long v31 = *(void *)(v11 + 24 + 24 * v60);
              swift_unknownObjectRetain();
              uint64_t result = swift_unknownObjectRelease();
              uint64_t v11 = v31;
              if (!*(unsigned char *)(v31 + 18)) {
                goto LABEL_131;
              }
            }
          }
          uint64_t result = swift_unknownObjectRetain_n();
          long long v2 = v381;
          long long v31 = v101;
LABEL_131:
          uint64_t v119 = *(unsigned __int16 *)(v31 + 16);
          if (!*(_WORD *)(v31 + 16)) {
            goto LABEL_428;
          }
          v120 = *(void *)(v31 + 24);
          int64_t v40 = __OFSUB__(v2, v120);
          uint64_t v121 = v2 - v120;
          if (v40) {
            goto LABEL_412;
          }
          if (v121 <= 0)
          {
            uint64_t v124 = 0;
          }
          else
          {
            if (v119 == 1) {
              goto LABEL_430;
            }
            uint64_t v122 = *(void *)(v31 + 48);
            long long v2 = v121 - v122;
            if (__OFSUB__(v121, v122)) {
              goto LABEL_414;
            }
            if (v2 >= 1)
            {
              if (v119 == 2) {
                goto LABEL_430;
              }
              uint64_t v123 = (void *)(v31 + 72);
              uint64_t v124 = 2;
              while (v119 != v124)
              {
                uint64_t v125 = v2 - *v123;
                if (__OFSUB__(v2, *v123)) {
                  goto LABEL_376;
                }
                if (v125 < 1) {
                  goto LABEL_146;
                }
                ++v124;
                v123 += 3;
                long long v2 = v125;
                if (v119 == v124) {
                  goto LABEL_430;
                }
              }
              goto LABEL_375;
            }
            long long v2 = v121;
            uint64_t v124 = 1;
          }
LABEL_146:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          uint64_t v115 = v103 & 0xFFFFFFFFFFFFF0FFLL | (v124 << 8);
          uint64_t v102 = v381;
LABEL_127:
          swift_unknownObjectRetain();
          char v114 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v409, v115, v31, v101, (uint64_t)v383);
          uint64_t result = swift_unknownObjectRelease_n();
          uint64_t v118 = v102 - v2;
          if (__OFSUB__(v102, v2)) {
            goto LABEL_397;
          }
          goto LABEL_148;
        }
      }
      else
      {
        uint64_t v102 = v381;
        uint64_t v4 = v384;
        if (v381 > 0) {
          goto LABEL_411;
        }
      }
      swift_unknownObjectRetain_n();
      uint64_t v115 = specialized Rope._endPath.getter(v101);
      swift_unknownObjectRelease();
      long long v31 = 0;
      long long v2 = 0;
      if (v101) {
        goto LABEL_127;
      }
      char v114 = 0;
      uint64_t v118 = v102;
LABEL_148:
      *(void *)&uint64_t v434 = v409;
      *((void *)&v434 + 1) = v115;
      *(void *)&uint64_t v435 = v31;
      *((void *)&v435 + 1) = v114;
      *(void *)&uint64_t v436 = v118;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v434, 0, v102, (void *)v3, (uint64_t *)&v416, v4, v401, (uint64_t)&v422);
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v87 = v436;
      uint64_t v126 = *(void *)(v3 + 64);
      uint64_t v127 = *(void *)(v3 + 72);
      unint64_t v128 = *(void *)(v3 + 80);
      long long v2 = *(void *)(v3 + 88);
      swift_unknownObjectRetain();
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, v405 & 1, v126, v127, v128, v2, (uint64_t *)&v500);
      unint64_t v129 = v502;
      swift_unknownObjectRelease();
    }
    while (v129 < v87 && *(void *)(v416 + 16));
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)&uint64_t v434 = v76;
  if (__OFSUB__(v76, 1)) {
    goto LABEL_401;
  }
  uint64_t v130 = *(void *)(v3 + 64);
  uint64_t v131 = *(void *)(v3 + 72);
  uint64_t v132 = *(void *)(v3 + 80);
  uint64_t v133 = *(void *)(v3 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v76 - 1, v405 & 1, v130, v131, v132, v133, (uint64_t *)&v500);
  uint64_t v410 = v500;
  uint64_t v402 = v501;
  uint64_t v134 = v502;
  swift_unknownObjectRelease();
  v518[0] = v410;
  v518[1] = v402;
  long long v519 = v134;
  uint64_t v135 = *(void *)(v3 + 64);
  uint64_t v136 = *(void *)(v3 + 72);
  uint64_t v137 = *(void *)(v3 + 80);
  uint64_t v138 = *(void *)(v3 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.subscript.getter((unint64_t)v518, v135, v136, v137, v138);
  long long v2 = v139;
  swift_unknownObjectRelease();
  uint64_t v11 = AttributedString._AttributeStorage.filterWithoutInvalidatingDependents(_:)((uint64_t (*)(uint64_t, uint64_t, long long *))closure #1 in AttributedString.Guts._characterInvalidatedAttributes(at:), 0, v2);
  long long v31 = v140;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v141 = 0;
  *(void *)&uint64_t v416 = result;
  uint64_t v142 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v41 = -1;
  if (v142 < 64) {
    uint64_t v41 = ~(-1 << v142);
  }
  long long v30 = v11 + 64;
  uint64_t v4 = v41 & *(void *)(v11 + 64);
  long long v34 = (unint64_t)(v142 + 63) >> 6;
  while (1)
  {
    if (v4)
    {
      uint64_t v143 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      uint64_t v144 = v143 | (v141 << 6);
      goto LABEL_155;
    }
    unint64_t v38 = v141 + 1;
    if (__OFADD__(v141, 1)) {
      goto LABEL_365;
    }
    if (v38 >= v34)
    {
LABEL_175:
      swift_release();
      uint64_t v149 = *(_OWORD *)(v3 + 16);
      uint64_t v150 = *(_OWORD *)(v3 + 32);
      long long v517 = *(_OWORD *)(v3 + 48);
      v516[1] = v150;
      v516[0] = v149;
      uint64_t v151 = *(_OWORD *)(v3 + 16);
      uint64_t v152 = *(_OWORD *)(v3 + 32);
      v531[2] = v517;
      v531[1] = v152;
      v531[0] = v151;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v531, (uint64_t)v532);
      outlined retain of Locale((uint64_t)v532);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v516);
      uint64_t v153 = BigString.UTF8View.count.getter();
      uint64_t result = outlined release of Locale((uint64_t)v445);
      if (v153 < v413) {
        goto LABEL_402;
      }
      long long v2 = *(void *)(v3 + 64);
      uint64_t v154 = *(void *)(v3 + 72);
      uint64_t v155 = *(void *)(v3 + 80);
      uint64_t v156 = *(void *)(v3 + 88);
      swift_unknownObjectRetain();
      swift_retain();
      int64_t v157 = v156;
      uint64_t v158 = v413;
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v413, v405 & 1, v2, v154, v155, v157, (uint64_t *)&v500);
      uint64_t v411 = v500;
      int64_t v159 = v501;
      unint64_t v160 = v502;
      swift_unknownObjectRelease();
      long long v500 = v411;
      long long v501 = v159;
      *(void *)&long long v502 = v160;
      if (v413 != v153) {
        goto LABEL_180;
      }
LABEL_181:
      AttributedString._InternalRunsSlice.startIndex.getter((void *)v3, v158, v446);
      for (i = &v447; v160 < *i && *(void *)(v416 + 16); i = &v449)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v500, v158, v153, (void *)v3, (uint64_t *)&v416, v11, v31, (uint64_t)&v434);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        $defer #1 () in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)((void *)v3, v158, v153, (uint64_t *)&v500);
        unint64_t v160 = v502;
        if (v158 == v153) {
          goto LABEL_181;
        }
LABEL_180:
        long long v2 = *(void *)(v3 + 64);
        unint64_t v161 = *(void *)(v3 + 72);
        uint64_t v162 = *(void *)(v3 + 80);
        unint64_t v163 = *(void *)(v3 + 88);
        unint64_t v164 = swift_unknownObjectRetain();
        unint64_t v165 = v163;
        uint64_t v158 = v413;
        AttributedString._InternalRuns.endIndex.getter(v164, v161, v162, v165, v448);
        swift_unknownObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      if ((uint64_t)v434 < v422) {
        goto LABEL_403;
      }
      long long v414 = v434;
      uint64_t v381 = v422;
      uint64_t v4 = v399;
      goto LABEL_185;
    }
    uint64_t v147 = *(void *)(v30 + 8 * v38);
    ++v141;
    if (!v147)
    {
      uint64_t v141 = v38 + 1;
      if (v38 + 1 >= v34) {
        goto LABEL_175;
      }
      uint64_t v147 = *(void *)(v30 + 8 * v141);
      if (!v147)
      {
        uint64_t v141 = v38 + 2;
        if (v38 + 2 >= v34) {
          goto LABEL_175;
        }
        uint64_t v147 = *(void *)(v30 + 8 * v141);
        if (!v147)
        {
          uint64_t v141 = v38 + 3;
          if (v38 + 3 >= v34) {
            goto LABEL_175;
          }
          uint64_t v147 = *(void *)(v30 + 8 * v141);
          if (!v147)
          {
            uint64_t v141 = v38 + 4;
            if (v38 + 4 >= v34) {
              goto LABEL_175;
            }
            uint64_t v147 = *(void *)(v30 + 8 * v141);
            if (!v147) {
              break;
            }
          }
        }
      }
    }
LABEL_174:
    uint64_t v4 = (v147 - 1) & v147;
    uint64_t v144 = __clz(__rbit64(v147)) + (v141 << 6);
LABEL_155:
    unint64_t v145 = (uint64_t *)(*(void *)(v11 + 48) + 16 * v144);
    long long v2 = *v145;
    uint64_t v146 = v145[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)((unint64_t *)&v500, v2, v146);
    uint64_t result = swift_bridgeObjectRelease();
  }
  uint64_t v148 = v38 + 5;
  if (v148 >= v34) {
    goto LABEL_175;
  }
  uint64_t v147 = *(void *)(v30 + 8 * v148);
  if (v147)
  {
    uint64_t v141 = v148;
    goto LABEL_174;
  }
  while (1)
  {
    uint64_t v141 = v148 + 1;
    if (__OFADD__(v148, 1)) {
      break;
    }
    if (v141 >= v34) {
      goto LABEL_175;
    }
    uint64_t v147 = *(void *)(v30 + 8 * v141);
    ++v148;
    if (v147) {
      goto LABEL_174;
    }
  }
LABEL_410:
  __break(1u);
LABEL_411:
  __break(1u);
LABEL_412:
  __break(1u);
LABEL_413:
  __break(1u);
LABEL_414:
  __break(1u);
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
LABEL_419:
  __break(1u);
LABEL_420:
  __break(1u);
LABEL_421:
  __break(1u);
LABEL_422:
  __break(1u);
LABEL_423:
  __break(1u);
LABEL_424:
  __break(1u);
LABEL_425:
  if (!v2) {
    __break(1u);
  }
LABEL_427:
  __break(1u);
LABEL_428:
  if (!v2) {
    __break(1u);
  }
LABEL_430:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  void *v9;
  long long v10;
  long long v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  long long v19;
  uint64_t v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  char v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t result;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  long long v90;
  long long v91;
  void *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char Enum;
  uint64_t v97;
  long long v98;
  long long v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  long long v151;
  long long v152;
  long long v153;
  long long v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  long long v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *i;
  long long v169;
  long long v170;
  long long v171;
  long long v172;
  uint64_t v173;
  _OWORD *v174;
  long long v175;
  long long v176;
  long long v177;
  _OWORD *v178;
  long long v179;
  _OWORD *v180;
  long long v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  long long v199;
  long long v200;
  long long v201;
  long long v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  long long v207;
  long long v208;
  long long v209;
  long long v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  _OWORD *v215;
  long long v216;
  long long v217;
  long long v218;
  long long v219;
  long long v220;
  long long v221;
  long long v222;
  long long v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  long long v230;
  long long v231;
  long long v232;
  long long v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  long long v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  long long v248;
  uint64_t v249;
  uint64_t v250;
  int64_t v251;
  char v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  void *v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  long long v269;
  long long v270;
  long long v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  char v280;
  uint64_t v281;
  char v282;
  uint64_t v283;
  char v284;
  long long v285;
  uint64_t v286;
  long long v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  int64_t v294;
  int64_t v295;
  unint64_t v296;
  unint64_t v297;
  uint64_t v298;
  void *v299;
  uint64_t v300;
  int64_t v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  int64_t v307;
  uint64_t v308;
  int64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  int64_t v317;
  uint64_t *v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t *v322;
  long long v323;
  long long v324;
  long long v325;
  long long v326;
  long long v327;
  long long v328;
  long long v329;
  long long v330;
  long long v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  long long v340;
  long long v341;
  long long v342;
  long long v343;
  long long v344;
  long long v345;
  long long v346;
  long long v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  long long v356;
  long long v357;
  long long v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  long long v362;
  long long v363;
  long long v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  int64_t v372;
  int64_t v373;
  int64_t v374;
  int v375;
  int v376;
  uint64_t v377;
  void *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  _OWORD *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  int v402;
  unint64_t v403;
  uint64_t v404;
  long long v405;
  uint64_t v406;
  long long v407;
  char v408;
  uint64_t v409;
  uint64_t v410;
  long long v411;
  uint64_t v412;
  long long v413;
  long long v414;
  int v415;
  uint64_t v416;
  uint64_t v417;
  int64_t v418;
  long long v419;
  long long v420;
  long long v421;
  long long v422;
  long long v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  long long v432;
  long long v433;
  long long v434;
  uint64_t v435;
  uint64_t v436;
  long long v437;
  long long v438;
  long long v439;
  long long v440;
  long long v441;
  long long v442;
  long long v443;
  char v444[48];
  long long v445;
  long long v446;
  uint64_t v447;
  char v448[48];
  unint64_t v449[4];
  uint64_t v450;
  uint64_t v451[4];
  uint64_t v452;
  char v453[48];
  long long v454;
  long long v455;
  long long v456;
  long long v457;
  long long v458;
  long long v459;
  char v460[48];
  char v461[48];
  char v462[48];
  char v463[48];
  char v464[48];
  char v465[48];
  char v466[48];
  char v467[48];
  char v468[48];
  long long v469;
  long long v470;
  long long v471;
  long long v472;
  long long v473;
  long long v474;
  _OWORD v475[2];
  long long v476;
  _OWORD v477[2];
  long long v478;
  _OWORD v479[2];
  long long v480;
  _OWORD v481[2];
  long long v482;
  long long v483;
  long long v484;
  long long v485;
  void v486[3];
  long long v487;
  long long v488;
  long long v489;
  long long v490;
  long long v491;
  long long v492;
  _OWORD v493[2];
  long long v494;
  _OWORD v495[2];
  long long v496;
  _OWORD v497[2];
  long long v498;
  _OWORD v499[2];
  long long v500;
  _OWORD v501[2];
  long long v502;
  long long v503;
  long long v504;
  long long v505;
  long long v506;
  long long v507;
  long long v508;
  long long v509;
  long long v510;
  long long v511;
  long long v512;
  long long v513;
  long long v514;
  long long v515;
  long long v516;
  _OWORD v517[2];
  long long v518;
  _OWORD v519[2];
  long long v520;
  _OWORD v521[2];
  uint64_t v522;
  _OWORD v523[2];
  long long v524;
  _OWORD v525[2];
  long long v526;
  long long v527;
  long long v528;
  long long v529;
  long long v530[3];
  unsigned char v531[40];
  long long v532[3];
  unsigned char v533[40];
  long long v534[3];
  unsigned char v535[40];
  long long v536[3];
  unsigned char v537[40];
  long long v538[3];
  unsigned char v539[40];
  long long v540[3];
  unsigned char v541[40];
  long long v542[3];
  unsigned char v543[40];
  long long v544[3];
  unsigned char v545[40];
  long long v546[3];
  unsigned char v547[40];
  long long v548[3];
  unsigned char v549[40];
  long long v550;
  long long v551;
  long long v552;
  unsigned char v553[40];
  long long v554;
  long long v555;
  long long v556;
  unsigned char v557[40];
  unsigned char v558[40];
  unsigned char v559[40];
  long long v560;
  long long v561;
  long long v562;
  long long v563[3];
  unsigned char v564[56];

  MEMORY[0x1F4188790](a1);
  uint64_t v4 = v1;
  uint64_t v6 = v5;
  long long v8 = v7;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    long long v2 = (uint64_t)v8;
    long long v9 = *(void **)v1;
    uint64_t v10 = *(_OWORD *)(*(void *)v1 + 16);
    uint64_t v11 = *(_OWORD *)(*(void *)v1 + 32);
    long long v529 = *(_OWORD *)(*(void *)v1 + 48);
    long long v528 = v11;
    long long v527 = v10;
    uint64_t v12 = v9[8];
    uint64_t v13 = v9[9];
    uint64_t v14 = v9[10];
    uint64_t v15 = v9[11];
    type metadata accessor for AttributedString.Guts();
    int v16 = swift_allocObject();
    outlined retain of Locale((uint64_t)&v527);
    swift_unknownObjectRetain();
    uint64_t v17 = BigString.isEmpty.getter();
    if (v12)
    {
      int v18 = swift_unknownObjectRetain_n();
      specialized Rope._endPath.getter(v18);
      swift_unknownObjectRelease_n();
      if ((((v14 == 0) ^ v17) & 1) == 0)
      {
LABEL_4:
        uint64_t v19 = v528;
        *(_OWORD *)(v16 + 16) = v527;
        *(_OWORD *)(v16 + 32) = v19;
        *(_OWORD *)(v16 + 48) = v529;
        *(void *)(v16 + 64) = v12;
        *(void *)(v16 + 72) = v13;
        *(void *)(v16 + 80) = v14;
        *(void *)(v16 + 88) = v15;
        *(void *)uint64_t v4 = v16;
        swift_release();
        long long v8 = (uint64_t *)v2;
        goto LABEL_5;
      }
    }
    else
    {
      swift_unknownObjectRetain();
      specialized Rope._endPath.getter(0);
      swift_unknownObjectRelease_n();
      if (v17) {
        goto LABEL_4;
      }
    }
    __break(1u);
    goto LABEL_65;
  }
LABEL_5:
  uint64_t v402 = v6;
  long long v20 = *(void *)v4;
  uint64_t v21 = *(_OWORD *)(*(void *)v4 + 16);
  long long v22 = *(_OWORD *)(*(void *)v4 + 32);
  unint64_t v526 = *(_OWORD *)(*(void *)v4 + 48);
  v525[1] = v22;
  v525[0] = v21;
  long long v23 = *(_OWORD *)(v20 + 16);
  long long v24 = *(_OWORD *)(v20 + 32);
  v530[2] = v526;
  v530[1] = v24;
  v530[0] = v23;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v530, (uint64_t)v531);
  outlined retain of Locale((uint64_t)v531);
  long long v25 = BigString.isEmpty.getter();
  outlined release of Locale((uint64_t)v525);
  uint64_t v397 = v8;
  uint64_t v400 = v4;
  if (v25)
  {
    uint64_t v382 = MEMORY[0x1E4FBC868];
    goto LABEL_39;
  }
  if ((static BigString.Index.== infix(_:_:)() & 1) != 0 && BigString.Index.utf8Offset.getter() >= 1)
  {
    char v26 = *(_OWORD *)(v20 + 16);
    uint64_t v27 = *(_OWORD *)(v20 + 32);
    unint64_t v524 = *(_OWORD *)(v20 + 48);
    v523[1] = v27;
    v523[0] = v26;
    long long v28 = *(_OWORD *)(v20 + 16);
    long long v29 = *(_OWORD *)(v20 + 32);
    v532[2] = v524;
    v532[1] = v29;
    v532[0] = v28;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v532, (uint64_t)v533);
    outlined retain of Locale((uint64_t)v533);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v523);
    BigString.UTF8View.index(before:)();
    outlined release of Locale((uint64_t)v444);
  }
  long long v30 = *(void *)(v20 + 64);
  long long v31 = *(void *)(v20 + 72);
  long long v33 = *(void *)(v20 + 80);
  char v32 = *(void *)(v20 + 88);
  swift_unknownObjectRetain();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v30) {
    long long v35 = v33;
  }
  else {
    long long v35 = 0;
  }
  if (result < 0) {
    goto LABEL_398;
  }
  long long v36 = result;
  if (v35 < result) {
    goto LABEL_398;
  }
  if (v30 && result < v33 && *(_WORD *)(v30 + 16))
  {
    uint64_t v416 = v31;
    uint64_t v4 = *(unsigned __int8 *)(v30 + 18);
    if (*(unsigned char *)(v30 + 18))
    {
      uint64_t result = swift_unknownObjectRetain_n();
      uint64_t v13 = -15;
      long long v2 = 24;
      uint64_t v37 = v30;
      while (1)
      {
        int64_t v40 = *(unsigned __int16 *)(v37 + 16);
        if (!*(_WORD *)(v37 + 16)) {
          goto LABEL_21;
        }
        uint64_t v41 = *(void *)(v37 + 40);
        uint64_t v42 = __OFSUB__(v36, v41);
        int64_t v43 = v36 - v41;
        if (v42) {
          goto LABEL_382;
        }
        if (__OFADD__(v43, 1))
        {
LABEL_383:
          __break(1u);
LABEL_384:
          __break(1u);
LABEL_385:
          __break(1u);
LABEL_386:
          __break(1u);
LABEL_387:
          __break(1u);
LABEL_388:
          __break(1u);
LABEL_389:
          __break(1u);
LABEL_390:
          __break(1u);
LABEL_391:
          __break(1u);
LABEL_392:
          __break(1u);
LABEL_393:
          __break(1u);
LABEL_394:
          __break(1u);
LABEL_395:
          __break(1u);
LABEL_396:
          __break(1u);
LABEL_397:
          __break(1u);
LABEL_398:
          __break(1u);
LABEL_399:
          __break(1u);
LABEL_400:
          __break(1u);
LABEL_401:
          __break(1u);
LABEL_402:
          __break(1u);
LABEL_403:
          __break(1u);
LABEL_404:
          __break(1u);
LABEL_405:
          __break(1u);
LABEL_406:
          __break(1u);
LABEL_407:
          __break(1u);
LABEL_408:
          __break(1u);
          goto LABEL_409;
        }
        if (v43 + 1 >= 1) {
          break;
        }
        int64_t v40 = 0;
LABEL_22:
        unint64_t v38 = (4 * *(unsigned char *)(v37 + 18) + 8) & 0x3C;
        uint64_t v4 = ((-15 << v38) - 1) & v4 | (v40 << v38);
        int64_t v39 = *(void *)(v37 + 24 + 24 * v40);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v37 = v39;
        if (!*(unsigned char *)(v39 + 18)) {
          goto LABEL_317;
        }
      }
      if (v40 != 1)
      {
        char v44 = (uint64_t *)(v37 + 64);
        uint64_t v45 = 1;
        while (1)
        {
          uint64_t v46 = *v44;
          v44 += 3;
          long long v36 = v43 - v46;
          if (__OFSUB__(v43, v46)) {
            goto LABEL_363;
          }
          if (__OFADD__(v36, 1)) {
            goto LABEL_364;
          }
          if (v36 + 1 < 1) {
            break;
          }
          ++v45;
          int64_t v43 = v36;
          if (v40 == v45) {
            goto LABEL_21;
          }
        }
        int64_t v40 = v45;
        long long v36 = v43;
        goto LABEL_22;
      }
      long long v36 = v43;
LABEL_21:
      if (v36) {
        goto LABEL_381;
      }
      goto LABEL_22;
    }
    swift_unknownObjectRetain_n();
    int64_t v39 = v30;
LABEL_317:
    uint64_t result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v36, 0, (_WORD *)(v39 + 16), (uint64_t *)(v39 + 24));
    if (result < 0) {
      goto LABEL_413;
    }
    unint64_t v359 = result;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    BOOL v48 = v4 & 0xFFFFFFFFFFFFF0FFLL | (v359 << 8);
    uint64_t v49 = v416;
    goto LABEL_37;
  }
  uint64_t v47 = swift_unknownObjectRetain();
  BOOL v48 = specialized Rope._endPath.getter(v47);
  swift_unknownObjectRelease();
  int64_t v39 = 0;
  uint64_t v49 = v31;
  uint64_t v50 = 0;
  if (v30)
  {
LABEL_37:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v32, v48, v39, v30, v49);
    swift_unknownObjectRelease_n();
    uint64_t v50 = v39;
  }
  uint64_t v51 = *(void *)(v20 + 64);
  uint64_t v52 = *(void *)(v20 + 72);
  unint64_t v53 = *(void *)(v20 + 80);
  unint64_t v54 = *(void *)(v20 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v32, v48, v50, v51, v52, v53, v54);
  swift_unknownObjectRelease();
  uint64_t v55 = swift_bridgeObjectRetain();
  uint64_t v382 = specialized _NativeDictionary.filter(_:)(v55);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  long long v8 = v397;
  uint64_t v4 = v400;
LABEL_39:
  uint64_t v3 = *(void *)v4;
  long long v2 = *v8;
  uint64_t v56 = BigString.Index.utf8Offset.getter();
  uint64_t result = BigString.Index.utf8Offset.getter();
  uint64_t v416 = result;
  uint64_t v383 = v56;
  uint64_t v381 = 0;
  if (v56 == result)
  {
    uint64_t v417 = v56;
LABEL_185:
    long long v169 = *(_OWORD *)(v3 + 16);
    long long v170 = *(_OWORD *)(v3 + 32);
    long long v518 = *(_OWORD *)(v3 + 48);
    v517[1] = v170;
    v517[0] = v169;
    uint64_t v171 = *(_OWORD *)(v3 + 16);
    unint64_t v172 = *(_OWORD *)(v3 + 32);
    v536[2] = v518;
    v536[1] = v172;
    v536[0] = v171;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v536, (uint64_t)v537);
    outlined retain of Locale((uint64_t)v537);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v517);
    uint64_t v173 = BigString.UTF8View.count.getter();
    outlined release of Locale((uint64_t)v453);
    uint64_t v174 = *(_OWORD **)v4;
    uint64_t v175 = *(_OWORD *)(v4 + 24);
    uint64_t v513 = *(_OWORD *)(v4 + 8);
    long long v514 = v175;
    long long v176 = *(_OWORD *)(v4 + 56);
    long long v515 = *(_OWORD *)(v4 + 40);
    long long v516 = v176;
    uint64_t v177 = v174[2];
    uint64_t v510 = v174[1];
    v511 = v177;
    v512 = v174[3];
    v538[0] = v510;
    v538[1] = v177;
    _OWORD v538[2] = v512;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v538, (uint64_t)v539);
    outlined retain of Locale((uint64_t)v539);
    BigSubstring.UnicodeScalarView.init(_unchecked:in:)();
    uint64_t v178 = *(_OWORD **)v4;
    BigString.init()();
    unint64_t v179 = v455;
    v178[1] = v454;
    v178[2] = v179;
    v178[3] = v456;
    swift_unknownObjectRelease();
    LODWORD(v503) = v402;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<Unicode.Scalar>);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type CollectionOfOne<Unicode.Scalar> and conformance CollectionOfOne<A>, &demangling cache variable for type metadata for CollectionOfOne<Unicode.Scalar>);
    BigSubstring.UnicodeScalarView.replaceSubrange<A>(_:with:)();
    uint64_t v180 = *(_OWORD **)v4;
    uint64_t v507 = v441;
    uint64_t v508 = v442;
    uint64_t v509 = v443;
    long long v503 = v437;
    long long v504 = v438;
    uint64_t v506 = v440;
    uint64_t v505 = v439;
    outlined retain of Locale((uint64_t)&v503);
    BigSubstring.UnicodeScalarView.base.getter();
    outlined release of Locale((uint64_t)&v503);
    BigString.init(_:)();
    uint64_t v181 = v458;
    v180[1] = v457;
    v180[2] = v181;
    v180[3] = v459;
    swift_unknownObjectRelease();
    outlined retain of Locale((uint64_t)&v503);
    long long v182 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v184 = v183;
    long long v2 = v185;
    unint64_t v187 = v186;
    outlined release of Locale((uint64_t)&v503);
    outlined retain of Locale((uint64_t)&v503);
    uint64_t v188 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v190 = v189;
    uint64_t v192 = v191;
    uint64_t v193 = (uint64_t *)v4;
    uint64_t v195 = v194;
    outlined release of Locale((uint64_t)&v503);
    v193[1] = v182;
    v193[2] = v184;
    v193[3] = v2;
    v193[4] = v187;
    v193[5] = v188;
    v193[6] = v190;
    v193[7] = v192;
    v193[8] = v195;
    uint64_t v196 = BigString.Index.utf8Offset.getter();
    char v197 = BigString.Index.utf8Offset.getter();
    uint64_t v198 = *v193;
    uint64_t v199 = *(_OWORD *)(*v193 + 16);
    uint64_t v200 = *(_OWORD *)(*v193 + 32);
    long long v502 = *(_OWORD *)(*v193 + 48);
    v501[1] = v200;
    v501[0] = v199;
    long long v201 = *(_OWORD *)(v198 + 16);
    uint64_t v202 = *(_OWORD *)(v198 + 32);
    _OWORD v540[2] = v502;
    v540[1] = v202;
    v540[0] = v201;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v540, (uint64_t)v541);
    outlined retain of Locale((uint64_t)v541);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v501);
    unint64_t v203 = BigString.UTF8View.count.getter();
    uint64_t result = outlined release of Locale((uint64_t)v460);
    unint64_t v204 = v203 - v173;
    if (__OFSUB__(v203, v173)) {
      goto LABEL_389;
    }
    uint64_t v205 = v197 - v196;
    if (__OFSUB__(v197, v196)) {
      goto LABEL_390;
    }
    long long v2 = v205 + v204;
    if (__OFADD__(v205, v204)) {
      goto LABEL_391;
    }
    swift_bridgeObjectRetain();
    uint64_t v206 = MEMORY[0x1E4FBC870];
    swift_bridgeObjectRetain();
    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v196, v197, v2, v382, v206);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v2 = *v193;
    uint64_t v207 = *(_OWORD *)(*v193 + 16);
    uint64_t v208 = *(_OWORD *)(*v193 + 32);
    long long v500 = *(_OWORD *)(*v193 + 48);
    v499[1] = v208;
    v499[0] = v207;
    uint64_t v209 = *(_OWORD *)(v2 + 16);
    uint64_t v210 = *(_OWORD *)(v2 + 32);
    _OWORD v542[2] = v500;
    v542[1] = v210;
    v542[0] = v209;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v542, (uint64_t)v543);
    outlined retain of Locale((uint64_t)v543);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v499);
    uint64_t v211 = BigString.UTF8View.count.getter();
    uint64_t result = outlined release of Locale((uint64_t)v461);
    long long v212 = v211 - v173;
    if (__OFSUB__(v211, v173)) {
      goto LABEL_392;
    }
    if (__OFADD__(v417, v212)) {
      goto LABEL_393;
    }
    if (v417 + v212 < v383) {
      goto LABEL_394;
    }
    long long v213 = *(void *)(v2 + 80);
    if (!*(void *)(v2 + 64))
    {
      uint64_t v260 = swift_unknownObjectRetain();
      specialized Rope._endPath.getter(v260);
      swift_unknownObjectRelease();
      goto LABEL_229;
    }
    uint64_t v380 = v417 + v212;
    uint64_t v384 = v2;
    long long v214 = swift_unknownObjectRetain_n();
    specialized Rope._endPath.getter(v214);
    swift_unknownObjectRelease_n();
    if (!v213) {
      goto LABEL_229;
    }
    long long v215 = (_OWORD *)(v2 + 16);
    uint64_t v216 = *(_OWORD *)(v2 + 16);
    unint64_t v217 = *(_OWORD *)(v2 + 32);
    long long v498 = *(_OWORD *)(v2 + 48);
    v497[1] = v217;
    v497[0] = v216;
    long long v218 = *(_OWORD *)(v2 + 16);
    uint64_t v219 = *(_OWORD *)(v2 + 32);
    _OWORD v544[2] = v498;
    v544[1] = v219;
    v544[0] = v218;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v544, (uint64_t)v545);
    outlined retain of Locale((uint64_t)v545);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v497);
    long long v220 = *(_OWORD *)(v2 + 16);
    long long v221 = *(_OWORD *)(v2 + 32);
    int v496 = *(_OWORD *)(v2 + 48);
    v495[1] = v221;
    v495[0] = v220;
    long long v222 = *(_OWORD *)(v2 + 16);
    long long v223 = *(_OWORD *)(v2 + 32);
    _OWORD v546[2] = v496;
    v546[1] = v223;
    v546[0] = v222;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v546, (uint64_t)v547);
    outlined retain of Locale((uint64_t)v547);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v495);
    long long v2 = BigString.UTF8View.index(_:offsetBy:)();
    long long v225 = v224;
    uint64_t v227 = v226;
    uint64_t v229 = v228;
    outlined release of Locale((uint64_t)v462);
    uint64_t v230 = *(_OWORD *)(v384 + 16);
    uint64_t v231 = *(_OWORD *)(v384 + 32);
    uint64_t v494 = *(_OWORD *)(v384 + 48);
    v493[1] = v231;
    v493[0] = v230;
    uint64_t v232 = *(_OWORD *)(v384 + 16);
    uint64_t v233 = *(_OWORD *)(v384 + 32);
    v548[2] = v494;
    v548[1] = v233;
    v548[0] = v232;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v548, (uint64_t)v549);
    outlined retain of Locale((uint64_t)v549);
    BigString.utf8.getter();
    uint64_t result = outlined release of Locale((uint64_t)v493);
    if (__OFSUB__(v380, v383)) {
      goto LABEL_406;
    }
    uint64_t v234 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v236 = v235;
    uint64_t v238 = v237;
    long long v240 = v239;
    outlined release of Locale((uint64_t)v463);
    specialized Range.init(uncheckedBounds:)(v2, v225, v227, v229, v234, v236, v238, v240, v486);
    *(void *)&long long v554 = MEMORY[0x1E4FBC868];
    uint64_t v241 = v215[1];
    long long v490 = *v215;
    long long v491 = v241;
    uint64_t v492 = v215[2];
    BigString.unicodeScalars.getter();
    uint64_t v379 = v486[2];
    uint64_t v242 = BigString.UnicodeScalarView.index(roundingDown:)();
    long long v244 = v243;
    long long v246 = v245;
    long long v2 = v247;
    outlined release of Locale((uint64_t)v464);
    uint64_t v248 = v215[1];
    uint64_t v487 = *v215;
    uint64_t v488 = v248;
    uint64_t v489 = v215[2];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingUp:)();
    outlined release of Locale((uint64_t)v465);
    *(void *)&long long v560 = v242;
    *((void *)&v560 + 1) = v244;
    *(void *)&long long v561 = v246;
    *((void *)&v561 + 1) = v2;
    char v32 = BigString.Index.utf8Offset.getter();
    uint64_t result = BigString.Index.utf8Offset.getter();
    uint64_t v416 = result;
    if (result < v32) {
      goto LABEL_407;
    }
    long long v33 = *(void *)(v384 + 64);
    if (v33) {
      uint64_t v249 = *(void *)(v384 + 80);
    }
    else {
      uint64_t v249 = 0;
    }
    if (v32 < 0 || v249 < v32) {
      goto LABEL_408;
    }
    long long v36 = *(void *)(v384 + 72);
    uint64_t v13 = *(void *)(v384 + 88);
    int64_t v386 = v215;
    if (!v33 || !*(_WORD *)(v33 + 16) || v32 >= *(void *)(v384 + 80))
    {
      swift_retain_n();
      uint64_t v261 = swift_unknownObjectRetain_n();
      unint64_t v262 = specialized Rope._endPath.getter(v261);
      swift_unknownObjectRelease();
      long long v2 = 0;
      uint64_t v250 = 0;
      if (!v33) {
        goto LABEL_368;
      }
      goto LABEL_231;
    }
    uint64_t v4 = *(unsigned __int8 *)(v33 + 18);
    if (!*(unsigned char *)(v33 + 18))
    {
      swift_unknownObjectRetain_n();
      uint64_t result = swift_retain_n();
      uint64_t v250 = v32;
      long long v2 = v33;
LABEL_323:
      long long v105 = *(unsigned __int16 *)(v2 + 16);
      if (!*(_WORD *)(v2 + 16)) {
        goto LABEL_329;
      }
      unint64_t v361 = *(void *)(v2 + 24);
      uint64_t v62 = v250 - v361;
      if (__OFSUB__(v250, v361)) {
        goto LABEL_419;
      }
      if (__OFADD__(v62, 1)) {
        goto LABEL_420;
      }
      if (v62 + 1 <= 0)
      {
        long long v105 = 0;
      }
      else
      {
        if (v105 != 1) {
          goto LABEL_347;
        }
        v250 -= v361;
LABEL_329:
        if (v250)
        {
          __break(1u);
LABEL_331:
          if (v13 < v380) {
            goto LABEL_332;
          }
LABEL_334:
          LOBYTE(v36) = 0;
          goto LABEL_335;
        }
      }
      goto LABEL_367;
    }
    swift_unknownObjectRetain_n();
    uint64_t result = swift_retain_n();
    uint64_t v250 = v32;
    uint64_t v251 = v33;
    while (1)
    {
      uint64_t v253 = *(unsigned __int16 *)(v251 + 16);
      if (!*(_WORD *)(v251 + 16)) {
        goto LABEL_206;
      }
      long long v254 = *(void *)(v251 + 40);
      long long v255 = v250 - v254;
      if (__OFSUB__(v250, v254)) {
        goto LABEL_386;
      }
      if (__OFADD__(v255, 1)) {
        goto LABEL_387;
      }
      if (v255 + 1 <= 0)
      {
        uint64_t v253 = 0;
      }
      else
      {
        if (v253 == 1)
        {
          v250 -= v254;
          goto LABEL_206;
        }
        long long v256 = *(void *)(v251 + 64);
        uint64_t v42 = __OFSUB__(v255, v256);
        long long v257 = v255 - v256;
        if (v42) {
          goto LABEL_404;
        }
        if (__OFADD__(v257, 1)) {
          goto LABEL_405;
        }
        if (v257 + 1 < 1)
        {
          uint64_t v253 = 1;
          uint64_t v250 = v255;
        }
        else
        {
          if (v253 == 2)
          {
            uint64_t v250 = v257;
LABEL_206:
            if (v250) {
              goto LABEL_385;
            }
            goto LABEL_207;
          }
          uint64_t v258 = (void *)(v251 + 88);
          uint64_t v259 = 2;
          while (1)
          {
            if (v253 == v259) {
              goto LABEL_378;
            }
            uint64_t v250 = v257 - *v258;
            if (__OFSUB__(v257, *v258)) {
              goto LABEL_379;
            }
            if (__OFADD__(v250, 1)) {
              goto LABEL_380;
            }
            if (v250 + 1 < 1) {
              break;
            }
            ++v259;
            v258 += 3;
            long long v257 = v250;
            if (v253 == v259) {
              goto LABEL_206;
            }
          }
          uint64_t v253 = v259;
          uint64_t v250 = v257;
        }
      }
LABEL_207:
      uint64_t v252 = (4 * *(unsigned char *)(v251 + 18) + 8) & 0x3C;
      uint64_t v4 = ((-15 << v252) - 1) & v4 | (v253 << v252);
      long long v2 = *(void *)(v251 + 24 + 24 * v253);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v251 = v2;
      if (!*(unsigned char *)(v2 + 18)) {
        goto LABEL_323;
      }
    }
  }
  int v425 = v56;
  uint64_t v17 = *(void *)(v3 + 64);
  long long v33 = *(void *)(v3 + 80);
  if (v17) {
    uint64_t v57 = *(void *)(v3 + 80);
  }
  else {
    uint64_t v57 = 0;
  }
  if (v56 < 0 || v57 < v56) {
    goto LABEL_399;
  }
  uint64_t v410 = *(void *)(v3 + 72);
  uint64_t v13 = *(void *)(v3 + 88);
  if (!v17)
  {
LABEL_66:
    uint64_t v66 = swift_unknownObjectRetain();
    uint64_t v67 = v410;
    uint64_t v68 = specialized Rope._endPath.getter(v66);
    swift_unknownObjectRelease();
    uint64_t v4 = 0;
    uint64_t v69 = 0;
    if (!v17) {
      goto LABEL_68;
    }
    goto LABEL_67;
  }
  if (!*(_WORD *)(v17 + 16) || v56 >= v33)
  {
LABEL_65:
    swift_unknownObjectRetain();
    goto LABEL_66;
  }
  char v32 = *(unsigned __int8 *)(v17 + 18);
  if (*(unsigned char *)(v17 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    long long v2 = -15;
    long long v36 = 24;
    uint64_t v58 = v383;
    uint64_t v59 = v17;
    while (1)
    {
      uint64_t v60 = *(unsigned __int16 *)(v59 + 16);
      if (*(_WORD *)(v59 + 16))
      {
        uint64_t v62 = 0;
        uint64_t v63 = (uint64_t *)(v59 + 40);
        while (1)
        {
          uint64_t v64 = *v63;
          v63 += 3;
          unint64_t v65 = v58 - v64;
          if (__OFSUB__(v58, v64))
          {
            __break(1u);
LABEL_353:
            __break(1u);
            goto LABEL_354;
          }
          if (__OFADD__(v65, 1)) {
            goto LABEL_353;
          }
          if (v65 + 1 < 1) {
            break;
          }
          ++v62;
          uint64_t v58 = v65;
          if (v60 == v62) {
            goto LABEL_61;
          }
        }
        uint64_t v60 = v62;
      }
      else
      {
        unint64_t v65 = v58;
LABEL_61:
        if (v65) {
          goto LABEL_384;
        }
        uint64_t v58 = 0;
      }
      uint64_t v61 = (4 * *(unsigned char *)(v59 + 18) + 8) & 0x3C;
      char v32 = ((-15 << v61) - 1) & v32 | (v60 << v61);
      uint64_t v4 = *(void *)(v59 + 24 + 24 * v60);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v59 = v4;
      if (!*(unsigned char *)(v4 + 18)) {
        goto LABEL_320;
      }
    }
  }
  swift_unknownObjectRetain_n();
  uint64_t v58 = v383;
  uint64_t v4 = v17;
LABEL_320:
  uint64_t result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v58, 0, (_WORD *)(v4 + 16), (uint64_t *)(v4 + 24));
  if (result < 0) {
    goto LABEL_415;
  }
  unint64_t v360 = result;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v68 = v32 & 0xFFFFFFFFFFFFF0FFLL | (v360 << 8);
  uint64_t v67 = v410;
LABEL_67:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v13, v68, v4, v17, v67);
  swift_unknownObjectRelease_n();
  uint64_t v69 = v4;
LABEL_68:
  unint64_t v70 = v13;
  unint64_t v71 = *(void *)(v3 + 64);
  long long v33 = *(void *)(v3 + 72);
  uint64_t v72 = *(void *)(v3 + 80);
  uint64_t v73 = *(void *)(v3 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v70, v68, v69, v71, v33, v72, v73);
  char v404 = v74;
  swift_unknownObjectRelease();
  uint64_t v75 = swift_bridgeObjectRetain();
  uint64_t v13 = v381;
  uint64_t v4 = specialized _NativeDictionary.filter(_:)(v75);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRetain();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v76 = 0;
  *(void *)&unint64_t v437 = result;
  int64_t v77 = 1 << *(unsigned char *)(v4 + 32);
  int64_t v43 = -1;
  if (v77 < 64) {
    int64_t v43 = ~(-1 << v77);
  }
  char v32 = v4 + 64;
  long long v36 = v43 & *(void *)(v4 + 64);
  long long v2 = (unint64_t)(v77 + 63) >> 6;
  uint64_t v78 = v416;
  while (1)
  {
    if (v36)
    {
      uint64_t v79 = __clz(__rbit64(v36));
      v36 &= v36 - 1;
      uint64_t v80 = v79 | (v76 << 6);
      goto LABEL_72;
    }
    int64_t v40 = v76 + 1;
    if (__OFADD__(v76, 1))
    {
      __break(1u);
LABEL_363:
      __break(1u);
LABEL_364:
      __break(1u);
LABEL_365:
      __break(1u);
LABEL_366:
      long long v105 = v43;
      uint64_t v250 = v40;
      goto LABEL_367;
    }
    if (v40 >= v2) {
      goto LABEL_92;
    }
    uint64_t v82 = *(void *)(v32 + 8 * v40);
    ++v76;
    if (!v82)
    {
      uint64_t v76 = v40 + 1;
      if (v40 + 1 >= v2) {
        goto LABEL_92;
      }
      uint64_t v82 = *(void *)(v32 + 8 * v76);
      if (!v82)
      {
        uint64_t v76 = v40 + 2;
        if (v40 + 2 >= v2) {
          goto LABEL_92;
        }
        uint64_t v82 = *(void *)(v32 + 8 * v76);
        if (!v82)
        {
          uint64_t v76 = v40 + 3;
          if (v40 + 3 >= v2) {
            goto LABEL_92;
          }
          uint64_t v82 = *(void *)(v32 + 8 * v76);
          if (!v82)
          {
            uint64_t v76 = v40 + 4;
            if (v40 + 4 >= v2) {
              goto LABEL_92;
            }
            uint64_t v82 = *(void *)(v32 + 8 * v76);
            if (!v82) {
              break;
            }
          }
        }
      }
    }
LABEL_91:
    long long v36 = (v82 - 1) & v82;
    uint64_t v80 = __clz(__rbit64(v82)) + (v76 << 6);
LABEL_72:
    int64_t v81 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v80);
    uint64_t v13 = *v81;
    long long v33 = v81[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)((unint64_t *)&v503, v13, v33);
    uint64_t result = swift_bridgeObjectRelease();
  }
  uint64_t v83 = v40 + 5;
  if (v83 < v2)
  {
    uint64_t v82 = *(void *)(v32 + 8 * v83);
    if (!v82)
    {
      while (1)
      {
        uint64_t v76 = v83 + 1;
        if (__OFADD__(v83, 1)) {
          break;
        }
        if (v76 >= v2) {
          goto LABEL_92;
        }
        uint64_t v82 = *(void *)(v32 + 8 * v76);
        ++v83;
        if (v82) {
          goto LABEL_91;
        }
      }
LABEL_409:
      __break(1u);
      goto LABEL_410;
    }
    uint64_t v76 = v83;
    goto LABEL_91;
  }
LABEL_92:
  swift_release();
  unint64_t v84 = v437;
  *(void *)&uint64_t v419 = v437;
  if (v383)
  {
    unint64_t v85 = *(void *)(v3 + 64);
    unint64_t v86 = *(void *)(v3 + 72);
    uint64_t v87 = *(void *)(v3 + 80);
    unint64_t v88 = *(void *)(v3 + 88);
    swift_unknownObjectRetain();
    swift_retain();
    AttributedString._InternalRuns.endIndex.getter(v85, v86, v87, v88, &v445);
    long long v407 = v446;
    uint64_t v411 = v445;
    int64_t v89 = v447;
    swift_unknownObjectRelease();
    uint64_t v91 = v407;
    uint64_t v90 = v411;
  }
  else
  {
    uint64_t v92 = (void *)swift_retain();
    AttributedString._InternalRunsSlice.startIndex.getter(v92, 0, (unint64_t *)&v445);
    uint64_t v90 = v445;
    uint64_t v91 = v446;
    int64_t v89 = v447;
  }
  unint64_t v437 = v90;
  uint64_t v438 = v91;
  *(void *)&uint64_t v439 = v89;
  uint64_t v93 = *(void *)(v3 + 64);
  uint64_t v94 = *(void *)(v3 + 72);
  uint64_t v95 = *(void *)(v3 + 80);
  long long v2 = *(void *)(v3 + 88);
  char Enum = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
  swift_unknownObjectRetain();
  uint64_t v408 = Enum;
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, Enum & 1, v93, v94, v95, v2, (uint64_t *)&v503);
  long long v97 = v505;
  swift_unknownObjectRelease();
  if (v97 < v89 && *(void *)(v84 + 16))
  {
    int64_t v386 = (_OWORD *)v4;
    do
    {
      uint64_t v98 = v437;
      unint64_t v99 = v438;
      uint64_t v100 = *(void *)(v3 + 64);
      uint64_t v101 = *(void *)(v3 + 80);
      long long v2 = *(void *)(v3 + 88);
      uint64_t v102 = swift_unknownObjectRetain();
      uint64_t result = specialized Rope._endPath.getter(v102);
      if (v100)
      {
        uint64_t result = swift_unknownObjectRelease();
        if (v89 != v101) {
          goto LABEL_122;
        }
      }
      else if (v89)
      {
LABEL_122:
        uint64_t v113 = *(void *)(v3 + 64);
        char v114 = *(void *)(v3 + 72);
        long long v2 = *(void *)(v3 + 80);
        uint64_t v115 = *(void *)(v3 + 88);
        long long v503 = v98;
        *(void *)&long long v504 = v99;
        uint64_t v116 = *((void *)&v99 + 1) - 1;
        if (__OFSUB__(*((void *)&v99 + 1), 1)) {
          goto LABEL_395;
        }
        swift_unknownObjectRetain();
        specialized Rope.formIndex(before:)((uint64_t)&v503, v113, v114, v2, v115);
        uint64_t v117 = *((void *)&v503 + 1);
        long long v33 = v504;
        long long v412 = v503;
        uint64_t v118 = specialized Rope.subscript.getter(v503, *((unint64_t *)&v503 + 1), v504, v113, v114, v2, v115);
        long long v2 = v119;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        v120 = v89 - v118;
        if (__OFSUB__(v89, v118)) {
          goto LABEL_396;
        }
        uint64_t v104 = v383;
        uint64_t v78 = v416;
        uint64_t v4 = (uint64_t)v386;
        goto LABEL_148;
      }
      uint64_t v103 = *(void *)(v3 + 64);
      long long v33 = *(void *)(v3 + 72);
      long long v36 = *(void *)(v3 + 80);
      long long v412 = *(void *)(v3 + 88);
      int64_t v385 = v33;
      if (v103)
      {
        uint64_t v104 = v383;
        uint64_t v4 = (uint64_t)v386;
        if (v36 < v383) {
          goto LABEL_400;
        }
        if (*(_WORD *)(v103 + 16))
        {
          long long v105 = *(unsigned __int8 *)(v103 + 18);
          if (*(unsigned char *)(v103 + 18))
          {
            uint64_t result = swift_unknownObjectRetain_n();
            long long v2 = v383;
            uint64_t v13 = v103;
            char v32 = -15;
            while (1)
            {
              uint64_t v107 = *(unsigned __int16 *)(v13 + 16);
              if (!*(_WORD *)(v13 + 16)) {
                goto LABEL_425;
              }
              uint64_t v108 = *(void *)(v13 + 40);
              uint64_t v42 = __OFSUB__(v2, v108);
              unint64_t v109 = v2 - v108;
              if (v42) {
                goto LABEL_373;
              }
              if (v109 <= 0)
              {
                uint64_t v62 = 0;
              }
              else
              {
                if (v107 == 1) {
                  goto LABEL_427;
                }
                uint64_t v110 = *(void *)(v13 + 64);
                long long v2 = v109 - v110;
                if (__OFSUB__(v109, v110)) {
                  goto LABEL_377;
                }
                if (v2 >= 1)
                {
                  if (v107 == 2) {
                    goto LABEL_427;
                  }
                  uint64_t v111 = (void *)(v13 + 88);
                  uint64_t v62 = 2;
                  while (v107 != v62)
                  {
                    int64_t v112 = v2 - *v111;
                    if (__OFSUB__(v2, *v111)) {
                      goto LABEL_346;
                    }
                    if (v112 < 1) {
                      goto LABEL_106;
                    }
                    ++v62;
                    v111 += 3;
                    long long v2 = v112;
                    if (v107 == v62) {
                      goto LABEL_427;
                    }
                  }
                  __break(1u);
LABEL_346:
                  __break(1u);
LABEL_347:
                  long long v377 = *(void *)(v2 + 48);
                  uint64_t v42 = __OFSUB__(v62, v377);
                  int64_t v40 = v62 - v377;
                  if (v42) {
                    goto LABEL_423;
                  }
                  if (__OFADD__(v40, 1)) {
                    goto LABEL_424;
                  }
                  if (v40 + 1 >= 1)
                  {
                    if (v105 != 2)
                    {
                      uint64_t v378 = (void *)(v2 + 72);
                      int64_t v43 = 2;
                      while (v105 != v43)
                      {
                        uint64_t v250 = v40 - *v378;
                        if (__OFSUB__(v40, *v378)) {
                          goto LABEL_417;
                        }
                        if (__OFADD__(v250, 1)) {
                          goto LABEL_418;
                        }
                        if (v250 + 1 < 1) {
                          goto LABEL_366;
                        }
                        ++v43;
                        v378 += 3;
                        int64_t v40 = v250;
                        if (v105 == v43) {
                          goto LABEL_329;
                        }
                      }
                      goto LABEL_416;
                    }
                    uint64_t v250 = v40;
                    goto LABEL_329;
                  }
LABEL_354:
                  long long v105 = 1;
                  uint64_t v250 = v62;
LABEL_367:
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  unint64_t v262 = v4 & 0xFFFFFFFFFFFFF0FFLL | (v105 << 8);
                  long long v215 = v386;
                  if (!v33)
                  {
LABEL_368:
                    uint64_t result = swift_release();
                    long long v263 = 0;
                    long long v264 = v32 - v250;
                    if (!__OFSUB__(v32, v250))
                    {
LABEL_232:
                      *(void *)&uint64_t v432 = v384;
                      *((void *)&v432 + 1) = v32;
                      *(void *)&uint64_t v433 = v416;
                      *((void *)&v433 + 1) = v13;
                      *(void *)&uint64_t v434 = v262;
                      *((void *)&v434 + 1) = v2;
                      uint64_t v435 = v263;
                      uint64_t v436 = v264;
                      specialized IndexingIterator.next()();
                      if (!v265)
                      {
                        v308 = MEMORY[0x1E4FBC868];
                        goto LABEL_276;
                      }
                      long long v266 = v265;
                      while (1)
                      {
                        long long v269 = *v215;
                        long long v270 = v215[1];
                        long long v476 = v215[2];
                        v475[1] = v270;
                        v475[0] = v269;
                        uint64_t v271 = *v215;
                        v563[1] = v215[1];
                        v563[2] = v476;
                        v563[0] = v271;
                        outlined init with take of any PredicateExpression<Self.Output == B1>(v563, (uint64_t)v564);
                        outlined retain of Locale((uint64_t)v564);
                        BigString.utf8.getter();
                        outlined release of Locale((uint64_t)v475);
                        uint64_t v272 = v560;
                        long long v395 = v561;
                        uint64_t v398 = *((void *)&v560 + 1);
                        long long v393 = *((void *)&v561 + 1);
                        uint64_t v273 = BigString.UTF8View.index(_:offsetBy:)();
                        uint64_t v275 = v274;
                        uint64_t v277 = v276;
                        long long v279 = v278;
                        outlined release of Locale((uint64_t)v466);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        long long v280 = specialized AttributedString._AttributeStorage.containsScalarConstraint.getter(v266);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        if (v280)
                        {
                          long long v2 = v395;
                          long long v281 = v393;
                          uint64_t v282 = static BigString.Index.< infix(_:_:)();
                          uint64_t v283 = v398;
                          if (v282) {
                            break;
                          }
                        }
LABEL_234:
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        $defer #1 () in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(&v560, v273, v275, v277, v279);
                        specialized IndexingIterator.next()();
                        long long v266 = v267;
                        long long v2 = v268;
                        if (!v267) {
                          goto LABEL_275;
                        }
                      }
                      long long v390 = v277;
                      long long v391 = v266 + 64;
                      long long v388 = v275;
                      long long v389 = v279;
                      int64_t v387 = v273;
                      while (2)
                      {
                        uint64_t v285 = v215[1];
                        uint64_t v472 = *v215;
                        uint64_t v473 = v285;
                        uint64_t v474 = v215[2];
                        uint64_t v286 = v283;
                        BigString.unicodeScalars.getter();
                        uint64_t v415 = BigString.UnicodeScalarView.subscript.getter();
                        outlined release of Locale((uint64_t)v467);
                        uint64_t v287 = v215[1];
                        long long v469 = *v215;
                        long long v470 = v287;
                        long long v471 = v215[2];
                        BigString.unicodeScalars.getter();
                        long long v392 = v272;
                        long long v394 = v281;
                        uint64_t v396 = v2;
                        uint64_t v399 = v286;
                        uint64_t v409 = BigString.UnicodeScalarView.index(after:)();
                        int64_t v403 = v289;
                        long long v406 = v288;
                        uint64_t v401 = v290;
                        outlined release of Locale((uint64_t)v468);
                        uint64_t v291 = 1 << *(unsigned char *)(v266 + 32);
                        if (v291 < 64) {
                          uint64_t v292 = ~(-1 << v291);
                        }
                        else {
                          uint64_t v292 = -1;
                        }
                        uint64_t v293 = v292 & *(void *)(v266 + 64);
                        uint64_t v294 = (unint64_t)(v291 + 63) >> 6;
                        uint64_t result = swift_bridgeObjectRetain();
                        uint64_t v295 = 0;
LABEL_244:
                        if (v293)
                        {
                          uint64_t v296 = __clz(__rbit64(v293));
                          v293 &= v293 - 1;
                          long long v297 = v296 | (v295 << 6);
                          goto LABEL_246;
                        }
                        unint64_t v301 = v295 + 1;
                        if (__OFADD__(v295, 1))
                        {
                          __break(1u);
LABEL_275:
                          v308 = v554;
LABEL_276:
                          uint64_t result = swift_release();
                          uint64_t v309 = 0;
                          unint64_t v310 = v308 + 64;
                          unint64_t v311 = 1 << *(unsigned char *)(v308 + 32);
                          unint64_t v312 = -1;
                          if (v311 < 64) {
                            unint64_t v312 = ~(-1 << v311);
                          }
                          uint64_t v313 = v312 & *(void *)(v308 + 64);
                          uint64_t v418 = (unint64_t)(v311 + 63) >> 6;
                          while (1)
                          {
                            if (v313)
                            {
                              uint64_t v314 = __clz(__rbit64(v313));
                              v313 &= v313 - 1;
                              uint64_t v315 = v314 | (v309 << 6);
                            }
                            else
                            {
                              uint64_t v42 = __OFADD__(v309++, 1);
                              if (v42) {
                                goto LABEL_374;
                              }
                              if (v309 >= v418)
                              {
LABEL_301:
                                swift_release();
                                uint64_t v4 = (uint64_t)v386;
                                if (specialized Range.isEmpty.getter())
                                {
                                  uint64_t v323 = *v386;
                                  uint64_t v324 = v386[1];
                                  long long v556 = v386[2];
                                  long long v555 = v324;
                                  long long v554 = v323;
                                  uint64_t v325 = *v386;
                                  long long v561 = v386[1];
                                  int64_t v562 = v556;
                                  long long v560 = v325;
                                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v560, (uint64_t)v477);
                                  outlined retain of Locale((uint64_t)v477);
                                  BigString.startIndex.getter();
                                  outlined release of Locale((uint64_t)&v554);
                                  long long v2 = v379;
                                  if (specialized static Comparable.> infix(_:_:)())
                                  {
                                    uint64_t v326 = *v386;
                                    uint64_t v327 = v386[1];
                                    long long v552 = v386[2];
                                    long long v551 = v327;
                                    long long v550 = v326;
                                    uint64_t v328 = *v386;
                                    uint64_t v433 = v386[1];
                                    uint64_t v434 = v552;
                                    uint64_t v432 = v328;
                                    outlined init with take of any PredicateExpression<Self.Output == B1>(&v432, (uint64_t)v479);
                                    outlined retain of Locale((uint64_t)v479);
                                    BigString.endIndex.getter();
                                    outlined release of Locale((uint64_t)&v550);
                                    if (static BigString.Index.< infix(_:_:)())
                                    {
                                      uint64_t result = v383 - 1;
                                      if (__OFSUB__(v383, 1)) {
                                        goto LABEL_422;
                                      }
                                      if (AttributedString.Guts._needsParagraphFixing(from:to:)(result, v383))
                                      {
                                        char v329 = *v386;
                                        uint64_t v330 = v386[1];
                                        long long v485 = v386[2];
                                        long long v484 = v330;
                                        long long v483 = v329;
                                        uint64_t v331 = *v386;
                                        uint64_t v420 = v386[1];
                                        uint64_t v421 = v485;
                                        uint64_t v419 = v331;
                                        outlined init with take of any PredicateExpression<Self.Output == B1>(&v419, (uint64_t)v481);
                                        outlined retain of Locale((uint64_t)v481);
                                        long long v332 = BigString.index(before:)();
                                        uint64_t v334 = v333;
                                        unint64_t v336 = v335;
                                        uint64_t v338 = v337;
                                        outlined release of Locale((uint64_t)&v483);
                                        AttributedString.Guts._paragraphExtending(from:)(v332, v334, v336, v338, &v425);
                                        char v32 = Range<>._utf8OffsetRange.getter();
                                        uint64_t v13 = v339;
                                        goto LABEL_334;
                                      }
                                    }
                                  }
                                  goto LABEL_229;
                                }
                                unint64_t v340 = *v386;
                                int64_t v341 = v386[1];
                                long long v485 = v386[2];
                                long long v484 = v341;
                                long long v483 = v340;
                                unint64_t v342 = *v386;
                                unint64_t v343 = v386[1];
                                long long v552 = v485;
                                long long v551 = v343;
                                long long v550 = v342;
                                outlined init with take of any PredicateExpression<Self.Output == B1>(&v550, (uint64_t)v553);
                                outlined retain of Locale((uint64_t)v553);
                                BigString.startIndex.getter();
                                outlined release of Locale((uint64_t)&v483);
                                long long v2 = v384;
                                if ((specialized static Comparable.> infix(_:_:)() & 1) == 0) {
                                  goto LABEL_311;
                                }
                                uint64_t result = v383 - 1;
                                if (__OFSUB__(v383, 1)) {
                                  goto LABEL_421;
                                }
                                if (AttributedString.Guts._needsParagraphFixing(from:to:)(result, v383))
                                {
                                  uint64_t v344 = *v386;
                                  uint64_t v345 = v386[1];
                                  long long v482 = v386[2];
                                  v481[1] = v345;
                                  v481[0] = v344;
                                  uint64_t v346 = *v386;
                                  int64_t v347 = v386[1];
                                  long long v556 = v482;
                                  long long v555 = v347;
                                  long long v554 = v346;
                                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v554, (uint64_t)v557);
                                  outlined retain of Locale((uint64_t)v557);
                                  unint64_t v348 = BigString.index(before:)();
                                  uint64_t v350 = v349;
                                  unint64_t v352 = v351;
                                  uint64_t v354 = v353;
                                  outlined release of Locale((uint64_t)v481);
                                  AttributedString.Guts._paragraphExtending(from:)(v348, v350, v352, v354, &v419);
                                  char v32 = Range<>._utf8OffsetRange.getter();
                                  uint64_t v13 = v355;
                                  LOBYTE(v36) = 0;
                                }
                                else
                                {
LABEL_311:
                                  char v32 = 0;
                                  uint64_t v13 = 0;
                                  LOBYTE(v36) = 1;
                                }
                                uint64_t v356 = *v386;
                                uint64_t v357 = v386[1];
                                long long v480 = v386[2];
                                v479[1] = v357;
                                v479[0] = v356;
                                unint64_t v358 = *v386;
                                long long v561 = v386[1];
                                int64_t v562 = v480;
                                long long v560 = v358;
                                outlined init with take of any PredicateExpression<Self.Output == B1>(&v560, (uint64_t)v558);
                                outlined retain of Locale((uint64_t)v558);
                                BigString.endIndex.getter();
                                outlined release of Locale((uint64_t)v479);
                                if (static BigString.Index.< infix(_:_:)())
                                {
                                  if ((v36 & 1) == 0) {
                                    goto LABEL_331;
                                  }
                                  if (v380 < 1)
                                  {
LABEL_229:
                                    swift_bridgeObjectRelease();
                                    swift_bridgeObjectRelease();
                                    return swift_unknownObjectRelease();
                                  }
LABEL_332:
                                  if (AttributedString.Guts._needsParagraphFixing(from:to:)(v380 - 1, v380))
                                  {
                                    uint64_t v362 = *(_OWORD *)v4;
                                    int v363 = *(_OWORD *)(v4 + 16);
                                    uint64_t v478 = *(_OWORD *)(v4 + 32);
                                    v477[1] = v363;
                                    v477[0] = v362;
                                    unint64_t v364 = *(_OWORD *)v4;
                                    uint64_t v433 = *(_OWORD *)(v4 + 16);
                                    uint64_t v434 = v478;
                                    uint64_t v432 = v364;
                                    outlined init with take of any PredicateExpression<Self.Output == B1>(&v432, (uint64_t)v559);
                                    outlined retain of Locale((uint64_t)v559);
                                    unint64_t v365 = BigString.index(before:)();
                                    uint64_t v367 = v366;
                                    long long v369 = v368;
                                    long long v371 = v370;
                                    outlined release of Locale((uint64_t)v477);
                                    AttributedString.Guts._paragraphExtending(from:)(v365, v367, v369, v371, &v425);
                                    long long v372 = Range<>._utf8OffsetRange.getter();
                                    long long v374 = v373;
                                    long long v375 = 1;
                                    goto LABEL_336;
                                  }
                                }
LABEL_335:
                                long long v372 = 0;
                                long long v374 = 0;
                                long long v375 = 0;
LABEL_336:
                                if ((v36 & 1) == 0 && v383 < v13)
                                {
                                  uint64_t v430 = 0;
                                  uint64_t v431 = 0;
                                  AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v430, v32, v383, v13);
                                }
                                if (v380 < v374) {
                                  long long v376 = v375;
                                }
                                else {
                                  long long v376 = 0;
                                }
                                if (v376 == 1)
                                {
                                  uint64_t v430 = 0;
                                  uint64_t v431 = 0;
                                  AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v430, v372, v380, v374);
                                }
                                goto LABEL_229;
                              }
                              uint64_t v316 = *(void *)(v310 + 8 * v309);
                              if (!v316)
                              {
                                uint64_t v317 = v309 + 1;
                                if (v309 + 1 >= v418) {
                                  goto LABEL_301;
                                }
                                uint64_t v316 = *(void *)(v310 + 8 * v317);
                                if (!v316)
                                {
                                  uint64_t v317 = v309 + 2;
                                  if (v309 + 2 >= v418) {
                                    goto LABEL_301;
                                  }
                                  uint64_t v316 = *(void *)(v310 + 8 * v317);
                                  if (!v316)
                                  {
                                    uint64_t v317 = v309 + 3;
                                    if (v309 + 3 >= v418) {
                                      goto LABEL_301;
                                    }
                                    uint64_t v316 = *(void *)(v310 + 8 * v317);
                                    if (!v316)
                                    {
                                      while (1)
                                      {
                                        uint64_t v309 = v317 + 1;
                                        if (__OFADD__(v317, 1)) {
                                          goto LABEL_388;
                                        }
                                        if (v309 >= v418) {
                                          goto LABEL_301;
                                        }
                                        uint64_t v316 = *(void *)(v310 + 8 * v309);
                                        ++v317;
                                        if (v316) {
                                          goto LABEL_291;
                                        }
                                      }
                                    }
                                  }
                                }
                                uint64_t v309 = v317;
                              }
LABEL_291:
                              uint64_t v313 = (v316 - 1) & v316;
                              uint64_t v315 = __clz(__rbit64(v316)) + (v309 << 6);
                            }
                            long long v318 = (uint64_t *)(*(void *)(v308 + 48) + 16 * v315);
                            long long v2 = *v318;
                            long long v319 = v318[1];
                            long long v320 = *(void *)(*(void *)(v308 + 56) + 8 * v315);
                            uint64_t result = specialized Array._getCount()(v320);
                            if (result)
                            {
                              uint64_t v321 = result;
                              if (result < 1) {
                                goto LABEL_371;
                              }
                              swift_bridgeObjectRetain();
                              swift_bridgeObjectRetain();
                              uint64_t v322 = (uint64_t *)(v320 + 40);
                              do
                              {
                                AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)(v2, v319, *(v322 - 1), *v322, 0);
                                v322 += 2;
                                --v321;
                              }
                              while (v321);
                              swift_bridgeObjectRelease();
                              uint64_t result = swift_bridgeObjectRelease();
                            }
                          }
                        }
                        if (v301 < v294)
                        {
                          char v302 = *(void *)(v391 + 8 * v301);
                          if (v302)
                          {
LABEL_250:
                            uint64_t v293 = (v302 - 1) & v302;
                            long long v297 = __clz(__rbit64(v302)) + (v301 << 6);
                            uint64_t v295 = v301;
LABEL_246:
                            uint64_t v298 = *(void *)(v266 + 56);
                            uint64_t v299 = (void *)(*(void *)(v266 + 48) + 16 * v297);
                            uint64_t v300 = v299[1];
                            *(void *)&uint64_t v419 = *v299;
                            *((void *)&v419 + 1) = v300;
                            outlined init with copy of AttributedString._AttributeValue(v298 + 72 * v297, (uint64_t)&v420);
                            swift_bridgeObjectRetain();
LABEL_256:
                            outlined init with take of (key: String, value: AttributedString._AttributeValue)?((uint64_t)&v419, (uint64_t)&v425);
                            long long v2 = v426;
                            if (!v426)
                            {
                              swift_release();
                              uint64_t v272 = v409;
                              long long v2 = v403;
                              uint64_t v273 = v387;
                              uint64_t v275 = v388;
                              long long v279 = v389;
                              uint64_t v277 = v390;
                              uint64_t v284 = static BigString.Index.< infix(_:_:)();
                              uint64_t v283 = v406;
                              long long v281 = v401;
                              long long v215 = v386;
                              if ((v284 & 1) == 0) {
                                goto LABEL_234;
                              }
                              continue;
                            }
                            uint64_t v303 = v425;
                            uint64_t v304 = v428;
                            uint64_t v305 = v429;
                            outlined copy of AttributedString.AttributeRunBoundaries?(v428, v429);
                            outlined destroy of AttributedString._AttributeValue((uint64_t)&v427);
                            if (v305 != 1)
                            {
                              *(void *)&uint64_t v419 = v304;
                              *((void *)&v419 + 1) = v305;
                              uint64_t v306 = AttributedString.AttributeRunBoundaries._constrainedScalar.getter();
                              outlined consume of AttributedString.AttributeRunBoundaries?(v304, v305);
                              if ((v306 & 0x100000000) == 0 && v415 != v306) {
                                specialized invalidate #1 (_:from:to:) in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(v303, v2, v392, v399, v396, v394, v409, v406, v403, v401, (uint64_t *)&v554);
                              }
                            }
                            uint64_t result = swift_bridgeObjectRelease();
                            goto LABEL_244;
                          }
                          v295 += 2;
                          if (v301 + 1 >= v294)
                          {
                            uint64_t v295 = v301;
                          }
                          else
                          {
                            char v302 = *(void *)(v391 + 8 * v295);
                            if (v302)
                            {
                              ++v301;
                              goto LABEL_250;
                            }
                            if (v301 + 2 < v294)
                            {
                              char v302 = *(void *)(v391 + 8 * (v301 + 2));
                              if (v302)
                              {
                                v301 += 2;
                                goto LABEL_250;
                              }
                              uint64_t v307 = v301 + 3;
                              if (v301 + 3 >= v294)
                              {
                                uint64_t v295 = v301 + 2;
                              }
                              else
                              {
                                char v302 = *(void *)(v391 + 8 * v307);
                                if (v302)
                                {
                                  v301 += 3;
                                  goto LABEL_250;
                                }
                                while (1)
                                {
                                  unint64_t v301 = v307 + 1;
                                  if (__OFADD__(v307, 1)) {
                                    goto LABEL_372;
                                  }
                                  if (v301 >= v294) {
                                    break;
                                  }
                                  char v302 = *(void *)(v391 + 8 * v301);
                                  ++v307;
                                  if (v302) {
                                    goto LABEL_250;
                                  }
                                }
                                uint64_t v295 = v294 - 1;
                              }
                            }
                          }
                        }
                        break;
                      }
                      uint64_t v293 = 0;
                      int64_t v424 = 0;
                      int64_t v422 = 0u;
                      int64_t v423 = 0u;
                      uint64_t v420 = 0u;
                      uint64_t v421 = 0u;
                      uint64_t v419 = 0u;
                      goto LABEL_256;
                    }
LABEL_370:
                    __break(1u);
LABEL_371:
                    __break(1u);
LABEL_372:
                    __break(1u);
LABEL_373:
                    __break(1u);
LABEL_374:
                    __break(1u);
LABEL_375:
                    __break(1u);
LABEL_376:
                    __break(1u);
LABEL_377:
                    __break(1u);
LABEL_378:
                    __break(1u);
LABEL_379:
                    __break(1u);
LABEL_380:
                    __break(1u);
LABEL_381:
                    __break(1u);
LABEL_382:
                    __break(1u);
                    goto LABEL_383;
                  }
LABEL_231:
                  swift_unknownObjectRetain();
                  long long v263 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v13, v262, v2, v33, v36);
                  swift_release();
                  uint64_t result = swift_unknownObjectRelease_n();
                  long long v264 = v32 - v250;
                  if (!__OFSUB__(v32, v250)) {
                    goto LABEL_232;
                  }
                  goto LABEL_370;
                }
                long long v2 = v109;
                uint64_t v62 = 1;
              }
LABEL_106:
              uint64_t v106 = (4 * *(unsigned char *)(v13 + 18) + 8) & 0x3C;
              long long v105 = ((-15 << v106) - 1) & v105 | (v62 << v106);
              long long v33 = *(void *)(v13 + 24 + 24 * v62);
              swift_unknownObjectRetain();
              uint64_t result = swift_unknownObjectRelease();
              uint64_t v13 = v33;
              if (!*(unsigned char *)(v33 + 18)) {
                goto LABEL_131;
              }
            }
          }
          uint64_t result = swift_unknownObjectRetain_n();
          long long v2 = v383;
          long long v33 = v103;
LABEL_131:
          uint64_t v121 = *(unsigned __int16 *)(v33 + 16);
          if (!*(_WORD *)(v33 + 16)) {
            goto LABEL_428;
          }
          uint64_t v122 = *(void *)(v33 + 24);
          uint64_t v42 = __OFSUB__(v2, v122);
          uint64_t v123 = v2 - v122;
          if (v42) {
            goto LABEL_412;
          }
          if (v123 <= 0)
          {
            uint64_t v126 = 0;
          }
          else
          {
            if (v121 == 1) {
              goto LABEL_430;
            }
            uint64_t v124 = *(void *)(v33 + 48);
            long long v2 = v123 - v124;
            if (__OFSUB__(v123, v124)) {
              goto LABEL_414;
            }
            if (v2 >= 1)
            {
              if (v121 == 2) {
                goto LABEL_430;
              }
              uint64_t v125 = (void *)(v33 + 72);
              uint64_t v126 = 2;
              while (v121 != v126)
              {
                uint64_t v127 = v2 - *v125;
                if (__OFSUB__(v2, *v125)) {
                  goto LABEL_376;
                }
                if (v127 < 1) {
                  goto LABEL_146;
                }
                ++v126;
                v125 += 3;
                long long v2 = v127;
                if (v121 == v126) {
                  goto LABEL_430;
                }
              }
              goto LABEL_375;
            }
            long long v2 = v123;
            uint64_t v126 = 1;
          }
LABEL_146:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          uint64_t v117 = v105 & 0xFFFFFFFFFFFFF0FFLL | (v126 << 8);
          uint64_t v104 = v383;
LABEL_127:
          swift_unknownObjectRetain();
          uint64_t v116 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v412, v117, v33, v103, v385);
          uint64_t result = swift_unknownObjectRelease_n();
          v120 = v104 - v2;
          if (__OFSUB__(v104, v2)) {
            goto LABEL_397;
          }
          goto LABEL_148;
        }
      }
      else
      {
        uint64_t v104 = v383;
        uint64_t v4 = (uint64_t)v386;
        if (v383 > 0) {
          goto LABEL_411;
        }
      }
      swift_unknownObjectRetain_n();
      uint64_t v117 = specialized Rope._endPath.getter(v103);
      swift_unknownObjectRelease();
      long long v33 = 0;
      long long v2 = 0;
      if (v103) {
        goto LABEL_127;
      }
      uint64_t v116 = 0;
      v120 = v104;
LABEL_148:
      *(void *)&unint64_t v437 = v412;
      *((void *)&v437 + 1) = v117;
      *(void *)&uint64_t v438 = v33;
      *((void *)&v438 + 1) = v116;
      *(void *)&uint64_t v439 = v120;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v437, 0, v104, (void *)v3, (uint64_t *)&v419, v4, v404, (uint64_t)&v425);
      swift_bridgeObjectRelease();
      swift_release();
      int64_t v89 = v439;
      unint64_t v128 = *(void *)(v3 + 64);
      unint64_t v129 = *(void *)(v3 + 72);
      uint64_t v130 = *(void *)(v3 + 80);
      long long v2 = *(void *)(v3 + 88);
      swift_unknownObjectRetain();
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, v408 & 1, v128, v129, v130, v2, (uint64_t *)&v503);
      uint64_t v131 = v505;
      swift_unknownObjectRelease();
    }
    while (v131 < v89 && *(void *)(v419 + 16));
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)&unint64_t v437 = v78;
  if (__OFSUB__(v78, 1)) {
    goto LABEL_401;
  }
  uint64_t v132 = *(void *)(v3 + 64);
  uint64_t v133 = *(void *)(v3 + 72);
  uint64_t v134 = *(void *)(v3 + 80);
  uint64_t v135 = *(void *)(v3 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v78 - 1, v408 & 1, v132, v133, v134, v135, (uint64_t *)&v503);
  long long v413 = v503;
  long long v405 = v504;
  uint64_t v136 = v505;
  swift_unknownObjectRelease();
  v521[0] = v413;
  v521[1] = v405;
  uint64_t v522 = v136;
  uint64_t v137 = *(void *)(v3 + 64);
  uint64_t v138 = *(void *)(v3 + 72);
  uint64_t v139 = *(void *)(v3 + 80);
  unint64_t v140 = *(void *)(v3 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.subscript.getter((unint64_t)v521, v137, v138, v139, v140);
  long long v2 = v141;
  swift_unknownObjectRelease();
  uint64_t v13 = AttributedString._AttributeStorage.filterWithoutInvalidatingDependents(_:)((uint64_t (*)(uint64_t, uint64_t, long long *))closure #1 in AttributedString.Guts._characterInvalidatedAttributes(at:), 0, v2);
  long long v33 = v142;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v143 = 0;
  *(void *)&uint64_t v419 = result;
  uint64_t v144 = 1 << *(unsigned char *)(v13 + 32);
  int64_t v43 = -1;
  if (v144 < 64) {
    int64_t v43 = ~(-1 << v144);
  }
  char v32 = v13 + 64;
  uint64_t v4 = v43 & *(void *)(v13 + 64);
  long long v36 = (unint64_t)(v144 + 63) >> 6;
  while (1)
  {
    if (v4)
    {
      unint64_t v145 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      uint64_t v146 = v145 | (v143 << 6);
      goto LABEL_155;
    }
    int64_t v40 = v143 + 1;
    if (__OFADD__(v143, 1)) {
      goto LABEL_365;
    }
    if (v40 >= v36)
    {
LABEL_175:
      swift_release();
      uint64_t v151 = *(_OWORD *)(v3 + 16);
      uint64_t v152 = *(_OWORD *)(v3 + 32);
      uint64_t v520 = *(_OWORD *)(v3 + 48);
      v519[1] = v152;
      v519[0] = v151;
      uint64_t v153 = *(_OWORD *)(v3 + 16);
      uint64_t v154 = *(_OWORD *)(v3 + 32);
      v534[2] = v520;
      v534[1] = v154;
      v534[0] = v153;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v534, (uint64_t)v535);
      outlined retain of Locale((uint64_t)v535);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v519);
      uint64_t v155 = BigString.UTF8View.count.getter();
      uint64_t result = outlined release of Locale((uint64_t)v448);
      if (v155 < v416) {
        goto LABEL_402;
      }
      long long v2 = *(void *)(v3 + 64);
      uint64_t v156 = *(void *)(v3 + 72);
      int64_t v157 = *(void *)(v3 + 80);
      uint64_t v158 = *(void *)(v3 + 88);
      swift_unknownObjectRetain();
      swift_retain();
      int64_t v159 = v158;
      unint64_t v160 = v416;
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v416, v408 & 1, v2, v156, v157, v159, (uint64_t *)&v503);
      long long v414 = v503;
      unint64_t v161 = v504;
      uint64_t v162 = v505;
      swift_unknownObjectRelease();
      long long v503 = v414;
      long long v504 = v161;
      *(void *)&uint64_t v505 = v162;
      if (v416 != v155) {
        goto LABEL_180;
      }
LABEL_181:
      AttributedString._InternalRunsSlice.startIndex.getter((void *)v3, v160, v449);
      for (i = &v450; v162 < *i && *(void *)(v419 + 16); i = &v452)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v503, v160, v155, (void *)v3, (uint64_t *)&v419, v13, v33, (uint64_t)&v437);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        $defer #1 () in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)((void *)v3, v160, v155, (uint64_t *)&v503);
        uint64_t v162 = v505;
        if (v160 == v155) {
          goto LABEL_181;
        }
LABEL_180:
        long long v2 = *(void *)(v3 + 64);
        unint64_t v163 = *(void *)(v3 + 72);
        unint64_t v164 = *(void *)(v3 + 80);
        unint64_t v165 = *(void *)(v3 + 88);
        int64_t v166 = swift_unknownObjectRetain();
        long long v167 = v165;
        unint64_t v160 = v416;
        AttributedString._InternalRuns.endIndex.getter(v166, v163, v164, v167, v451);
        swift_unknownObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      if ((uint64_t)v437 < v425) {
        goto LABEL_403;
      }
      uint64_t v417 = v437;
      uint64_t v383 = v425;
      uint64_t v4 = v400;
      goto LABEL_185;
    }
    uint64_t v149 = *(void *)(v32 + 8 * v40);
    ++v143;
    if (!v149)
    {
      uint64_t v143 = v40 + 1;
      if (v40 + 1 >= v36) {
        goto LABEL_175;
      }
      uint64_t v149 = *(void *)(v32 + 8 * v143);
      if (!v149)
      {
        uint64_t v143 = v40 + 2;
        if (v40 + 2 >= v36) {
          goto LABEL_175;
        }
        uint64_t v149 = *(void *)(v32 + 8 * v143);
        if (!v149)
        {
          uint64_t v143 = v40 + 3;
          if (v40 + 3 >= v36) {
            goto LABEL_175;
          }
          uint64_t v149 = *(void *)(v32 + 8 * v143);
          if (!v149)
          {
            uint64_t v143 = v40 + 4;
            if (v40 + 4 >= v36) {
              goto LABEL_175;
            }
            uint64_t v149 = *(void *)(v32 + 8 * v143);
            if (!v149) {
              break;
            }
          }
        }
      }
    }
LABEL_174:
    uint64_t v4 = (v149 - 1) & v149;
    uint64_t v146 = __clz(__rbit64(v149)) + (v143 << 6);
LABEL_155:
    uint64_t v147 = (uint64_t *)(*(void *)(v13 + 48) + 16 * v146);
    long long v2 = *v147;
    uint64_t v148 = v147[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)((unint64_t *)&v503, v2, v148);
    uint64_t result = swift_bridgeObjectRelease();
  }
  uint64_t v150 = v40 + 5;
  if (v150 >= v36) {
    goto LABEL_175;
  }
  uint64_t v149 = *(void *)(v32 + 8 * v150);
  if (v149)
  {
    uint64_t v143 = v150;
    goto LABEL_174;
  }
  while (1)
  {
    uint64_t v143 = v150 + 1;
    if (__OFADD__(v150, 1)) {
      break;
    }
    if (v143 >= v36) {
      goto LABEL_175;
    }
    uint64_t v149 = *(void *)(v32 + 8 * v143);
    ++v150;
    if (v149) {
      goto LABEL_174;
    }
  }
LABEL_410:
  __break(1u);
LABEL_411:
  __break(1u);
LABEL_412:
  __break(1u);
LABEL_413:
  __break(1u);
LABEL_414:
  __break(1u);
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
LABEL_419:
  __break(1u);
LABEL_420:
  __break(1u);
LABEL_421:
  __break(1u);
LABEL_422:
  __break(1u);
LABEL_423:
  __break(1u);
LABEL_424:
  __break(1u);
LABEL_425:
  if (!v2) {
    __break(1u);
  }
LABEL_427:
  __break(1u);
LABEL_428:
  if (!v2) {
    __break(1u);
  }
LABEL_430:
  __break(1u);
  return result;
}

uint64_t AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  AttributedString.UnicodeScalarView._ensureUniqueReference()();
  if (a3 == MEMORY[0x1E4F59D98])
  {
    long long v7 = a2[5];
    v61[4] = a2[4];
    v61[5] = v7;
    v61[6] = a2[6];
    long long v8 = a2[1];
    v61[0] = *a2;
    v61[1] = v8;
    long long v9 = a2[3];
    v61[2] = a2[2];
    v61[3] = v9;
    uint64_t v10 = *(_OWORD **)v3;
    long long v11 = *(_OWORD *)(v3 + 8);
    long long v12 = *(_OWORD *)(v3 + 24);
    long long v13 = *(_OWORD *)(v3 + 56);
    v62[5] = *(_OWORD *)(v3 + 40);
    v62[6] = v13;
    v62[3] = v11;
    v62[4] = v12;
    long long v14 = v10[1];
    long long v15 = v10[3];
    v62[1] = v10[2];
    v62[2] = v15;
    v62[0] = v14;
    outlined retain of Locale((uint64_t)v61);
    outlined retain of Locale((uint64_t)v62);
    BigSubstring.UnicodeScalarView.init(_unchecked:in:)();
    BigSubstring.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)&v56);
    BigSubstring.UnicodeScalarView.isIdentical(to:)();
    outlined release of Locale((uint64_t)v61);
    outlined release of Locale((uint64_t)&v57);
  }
  int v16 = *(_OWORD **)v3;
  long long v17 = *(_OWORD *)(*(void *)v3 + 16);
  long long v18 = *(_OWORD *)(*(void *)v3 + 48);
  v60[1] = *(_OWORD *)(*(void *)v3 + 32);
  v60[2] = v18;
  v60[0] = v17;
  long long v19 = v16[1];
  v63[1] = v16[2];
  v63[2] = v18;
  v63[0] = v19;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v63, (uint64_t)v64);
  outlined retain of Locale((uint64_t)v64);
  char v20 = BigString.isEmpty.getter();
  uint64_t v21 = outlined release of Locale((uint64_t)v60);
  if (v20)
  {
    uint64_t v22 = MEMORY[0x1E4FBC868];
LABEL_41:
    MEMORY[0x1F4188790](v21);
    AttributedString.UnicodeScalarView._mutateStringContents(in:attributes:with:)(a1, v22, MEMORY[0x1E4FBC870], partial apply for closure #1 in AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:));
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v55 = a1;
  if ((static BigString.Index.== infix(_:_:)() & 1) != 0 && BigString.Index.utf8Offset.getter() >= 1)
  {
    long long v23 = v16[1];
    long long v24 = v16[3];
    v59[1] = v16[2];
    v59[2] = v24;
    v59[0] = v23;
    long long v25 = v16[1];
    v65[1] = v16[2];
    v65[2] = v24;
    v65[0] = v25;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v65, (uint64_t)v66);
    outlined retain of Locale((uint64_t)v66);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v59);
    BigString.UTF8View.index(before:)();
    outlined release of Locale((uint64_t)&v58);
  }
  uint64_t v27 = *((void *)v16 + 8);
  uint64_t v26 = *((void *)v16 + 9);
  uint64_t v29 = *((void *)v16 + 10);
  uint64_t v28 = *((void *)v16 + 11);
  swift_unknownObjectRetain();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v27) {
    uint64_t v31 = v29;
  }
  else {
    uint64_t v31 = 0;
  }
  if (result < 0) {
    goto LABEL_64;
  }
  uint64_t v32 = result;
  if (v31 < result) {
    goto LABEL_64;
  }
  if (!v27 || result >= v29 || !*(_WORD *)(v27 + 16))
  {
    unint64_t v43 = swift_unknownObjectRetain();
    unint64_t v44 = specialized Rope._endPath.getter(v43);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v34 = 0;
    if (!v27)
    {
LABEL_36:
      if (v28 != *((void *)v16 + 11)) {
        goto LABEL_65;
      }
      if (v34)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v45 = *((void *)v16 + 8);
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(v44, v45);
        swift_unknownObjectRelease();
      }
      a1 = v55;
      uint64_t v46 = swift_bridgeObjectRetain();
      uint64_t v22 = specialized _NativeDictionary.filter(_:)(v46);
      swift_bridgeObjectRelease();
      uint64_t v21 = swift_bridgeObjectRelease_n();
      goto LABEL_41;
    }
LABEL_35:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v28, v44, v34, v27, v26);
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_36;
  }
  uint64_t v54 = v28;
  uint64_t v53 = v26;
  uint64_t v33 = *(unsigned __int8 *)(v27 + 18);
  if (*(unsigned char *)(v27 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v34 = v27;
    while (1)
    {
      uint64_t v36 = *(unsigned __int16 *)(v34 + 16);
      if (*(_WORD *)(v34 + 16))
      {
        uint64_t v37 = *(void *)(v34 + 40);
        BOOL v38 = __OFSUB__(v32, v37);
        uint64_t v39 = v32 - v37;
        if (v38) {
          goto LABEL_62;
        }
        if (__OFADD__(v39, 1)) {
          goto LABEL_63;
        }
        if (v39 + 1 < 1)
        {
          uint64_t v36 = 0;
          goto LABEL_20;
        }
        if (v36 != 1)
        {
          int64_t v40 = (uint64_t *)(v34 + 64);
          uint64_t v41 = 1;
          while (1)
          {
            uint64_t v42 = *v40;
            v40 += 3;
            uint64_t v32 = v39 - v42;
            if (__OFSUB__(v39, v42)) {
              break;
            }
            if (__OFADD__(v32, 1)) {
              goto LABEL_60;
            }
            if (v32 + 1 < 1)
            {
              uint64_t v36 = v41;
              uint64_t v32 = v39;
              goto LABEL_20;
            }
            ++v41;
            uint64_t v39 = v32;
            if (v36 == v41) {
              goto LABEL_19;
            }
          }
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
          goto LABEL_69;
        }
        uint64_t v32 = v39;
      }
LABEL_19:
      if (v32) {
        goto LABEL_61;
      }
LABEL_20:
      char v35 = (4 * *(unsigned char *)(v34 + 18) + 8) & 0x3C;
      uint64_t v33 = ((-15 << v35) - 1) & v33 | (v36 << v35);
      uint64_t v34 = *(void *)(v34 + 24 + 24 * v36);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      if (!*(unsigned char *)(v34 + 18))
      {
        unint64_t v47 = v33 & 0xFFFFFFFFFFFFF0FFLL;
        goto LABEL_44;
      }
    }
  }
  uint64_t result = swift_unknownObjectRetain_n();
  unint64_t v47 = 0;
  uint64_t v34 = v27;
LABEL_44:
  uint64_t v48 = *(unsigned __int16 *)(v34 + 16);
  if (!*(_WORD *)(v34 + 16)) {
    goto LABEL_54;
  }
  uint64_t v49 = *(void *)(v34 + 24);
  BOOL v38 = __OFSUB__(v32, v49);
  v32 -= v49;
  if (v38) {
    goto LABEL_68;
  }
  if (!__OFADD__(v32, 1))
  {
    if (v32 + 1 < 1) {
      goto LABEL_56;
    }
    if (v48 != 1)
    {
      uint64_t v50 = (uint64_t *)(v34 + 48);
      uint64_t v51 = 1;
      do
      {
        uint64_t v52 = *v50;
        v50 += 3;
        BOOL v38 = __OFSUB__(v32, v52);
        v32 -= v52;
        if (v38) {
          goto LABEL_66;
        }
        if (__OFADD__(v32, 1)) {
          goto LABEL_67;
        }
        if (v32 + 1 < 1)
        {
          uint64_t v48 = v51;
          goto LABEL_58;
        }
      }
      while (v48 != ++v51);
    }
LABEL_54:
    if (!v32)
    {
LABEL_58:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v44 = v47 | (v48 << 8);
      uint64_t v26 = v53;
      uint64_t v28 = v54;
      goto LABEL_35;
    }
    __break(1u);
LABEL_56:
    uint64_t v48 = 0;
    goto LABEL_58;
  }
LABEL_69:
  __break(1u);
  return result;
}

void closure #1 in AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v9 = MEMORY[0x1F4188790](a1);
  if (*v10 == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v6, a5, v9);
    BigSubstring.UnicodeScalarView.replaceSubrange<A>(_:with:)();
  }
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance AttributedString.UnicodeScalarView(uint64_t a1, _OWORD *a2, ValueMetadata *a3)
{
  AttributedString.UnicodeScalarView.replaceSubrange<A>(_:with:)(a1, a2, a3);
  uint64_t v5 = (uint64_t (*)(_OWORD *, ValueMetadata *))*((void *)a3[-1].Description + 1);

  return v5(a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance AttributedString.UnicodeScalarView@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return specialized RangeReplaceableCollection.init(repeating:count:)(a1, a2);
}

uint64_t protocol witness for RangeReplaceableCollection.append(_:) in conformance AttributedString.UnicodeScalarView()
{
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    long long v2 = *(_OWORD **)v0;
    long long v3 = *(_OWORD *)(*(void *)v0 + 32);
    long long v25 = *(_OWORD *)(*(void *)v0 + 16);
    long long v26 = v3;
    long long v27 = v2[3];
    BigString.unicodeScalars.getter();
    uint64_t v4 = BigString.UnicodeScalarView.index(roundingDown:)();
    uint64_t v6 = v5;
    uint64_t v8 = v7;
    uint64_t v18 = v9;
    outlined release of Locale((uint64_t)v19);
    long long v10 = v2[2];
    long long v22 = v2[1];
    long long v23 = v10;
    long long v24 = v2[3];
    BigString.unicodeScalars.getter();
    uint64_t v11 = BigString.UnicodeScalarView.index(roundingDown:)();
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    outlined release of Locale((uint64_t)v20);
    v21[0] = v4;
    v21[1] = v6;
    v21[2] = v8;
    v21[3] = v18;
    uint64_t v21[4] = v11;
    v21[5] = v13;
    v21[6] = v15;
    v21[7] = v17;
    return specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)((uint64_t)v21);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance AttributedString.UnicodeScalarView()
{
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    long long v2 = *(_OWORD **)v0;
    long long v3 = *(_OWORD *)(*(void *)v0 + 32);
    long long v25 = *(_OWORD *)(*(void *)v0 + 16);
    long long v26 = v3;
    long long v27 = v2[3];
    BigString.unicodeScalars.getter();
    uint64_t v4 = BigString.UnicodeScalarView.index(roundingDown:)();
    uint64_t v6 = v5;
    uint64_t v8 = v7;
    uint64_t v18 = v9;
    outlined release of Locale((uint64_t)v19);
    long long v10 = v2[2];
    long long v22 = v2[1];
    long long v23 = v10;
    long long v24 = v2[3];
    BigString.unicodeScalars.getter();
    uint64_t v11 = BigString.UnicodeScalarView.index(roundingDown:)();
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    outlined release of Locale((uint64_t)v20);
    v21[0] = v4;
    v21[1] = v6;
    v21[2] = v8;
    v21[3] = v18;
    uint64_t v21[4] = v11;
    v21[5] = v13;
    v21[6] = v15;
    v21[7] = v17;
    return specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)((uint64_t)v21);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance AttributedString.UnicodeScalarView(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  specialized RangeReplaceableCollection.insert<A>(contentsOf:at:)(a1, *a2, a2[1], a2[2], a2[3], a3, a4);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);

  return v6(a1, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance AttributedString.UnicodeScalarView@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = specialized RangeReplaceableCollection.remove(at:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeSubrange(_:) in conformance AttributedString.UnicodeScalarView()
{
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if ((result & 1) == 0)
    {
      long long v2 = *(_OWORD **)v0;
      long long v3 = *(_OWORD *)(*(void *)v0 + 32);
      long long v25 = *(_OWORD *)(*(void *)v0 + 16);
      long long v26 = v3;
      long long v27 = v2[3];
      BigString.unicodeScalars.getter();
      uint64_t v4 = BigString.UnicodeScalarView.index(roundingDown:)();
      uint64_t v6 = v5;
      uint64_t v8 = v7;
      uint64_t v10 = v9;
      outlined release of Locale((uint64_t)v19);
      long long v11 = v2[2];
      long long v22 = v2[1];
      long long v23 = v11;
      long long v24 = v2[3];
      BigString.unicodeScalars.getter();
      uint64_t v12 = BigString.UnicodeScalarView.index(roundingDown:)();
      uint64_t v14 = v13;
      uint64_t v16 = v15;
      uint64_t v18 = v17;
      outlined release of Locale((uint64_t)v20);
      v21[0] = v4;
      v21[1] = v6;
      v21[2] = v8;
      v21[3] = v10;
      uint64_t v21[4] = v12;
      v21[5] = v14;
      v21[6] = v16;
      v21[7] = v18;
      return specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)((uint64_t)v21);
    }
  }
  __break(1u);
  return result;
}

void protocol witness for RangeReplaceableCollection._customRemoveLast() in conformance AttributedString.UnicodeScalarView(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 1;
}

uint64_t protocol witness for RangeReplaceableCollection.removeFirst() in conformance AttributedString.UnicodeScalarView@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = specialized RangeReplaceableCollection.removeFirst()();
  *a1 = result;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance AttributedString.UnicodeScalarView(uint64_t (*a1)(uint64_t *))
{
  return specialized RangeReplaceableCollection.removeAll(where:)(a1);
}

uint64_t outlined retain of Slice<AttributedString.UnicodeScalarView>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Slice<AttributedString.UnicodeScalarView>(uint64_t a1)
{
  return a1;
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString.UnicodeScalarView()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString.UnicodeScalarView> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<AttributedString.UnicodeScalarView> and conformance <> DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString.UnicodeScalarView>, (void (*)(void))lazy protocol witness table accessor for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString.UnicodeScalarView()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString.UnicodeScalarView> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<AttributedString.UnicodeScalarView> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString.UnicodeScalarView>, (void (*)(void))lazy protocol witness table accessor for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AttributedString.UnicodeScalarView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type DefaultIndices<AttributedString.UnicodeScalarView> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString.UnicodeScalarView>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AttributedString.UnicodeScalarView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Slice<AttributedString.UnicodeScalarView> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString.UnicodeScalarView>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString.UnicodeScalarView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<AttributedString.UnicodeScalarView> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<AttributedString.UnicodeScalarView>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RangeReplaceableCollection in AttributedString.UnicodeScalarView()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString.UnicodeScalarView> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<AttributedString.UnicodeScalarView> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString.UnicodeScalarView>, (void (*)(void))lazy protocol witness table accessor for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView);
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<AttributedString.UnicodeScalarView> and conformance <> DefaultIndices<A>(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t assignWithCopy for AttributedString.UnicodeScalarView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  long long v5 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for AttributedString.UnicodeScalarView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.UnicodeScalarView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.UnicodeScalarView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void partial apply for closure #1 in AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  closure #1 in AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(a1, a2, v2[4], v2[5], v2[2]);
}

unint64_t lazy protocol witness table accessor for type BigSubstring.UnicodeScalarView and conformance BigSubstring.UnicodeScalarView()
{
  unint64_t result = lazy protocol witness table cache variable for type BigSubstring.UnicodeScalarView and conformance BigSubstring.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type BigSubstring.UnicodeScalarView and conformance BigSubstring.UnicodeScalarView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BigSubstring.UnicodeScalarView and conformance BigSubstring.UnicodeScalarView);
  }
  return result;
}

uint64_t PredicateExpressions.ExpressionEvaluate.expression.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.ExpressionEvaluate.input.getter@<X0>(uint64_t TupleTypeMetadata@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = TupleTypeMetadata;
  unint64_t v5 = *(void *)(TupleTypeMetadata + 16);
  if (v5 == 1)
  {
    uint64_t v6 = *(void *)(*(void *)(TupleTypeMetadata + 32) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1F4188790](TupleTypeMetadata);
    uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v5)
    {
      unint64_t v9 = 0;
      unint64_t v10 = *(void *)(v3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v5 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v8[-v10] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v9 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      long long v11 = (long long *)(v10 + 16);
      uint64_t v12 = v8 + 16;
      unint64_t v13 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v14 = *v11;
        *(v12 - 1) = *(v11 - 1);
        *uint64_t v12 = v14;
        v11 += 2;
        v12 += 2;
        v13 -= 4;
      }
      while (v13);
      if (v5 != v9)
      {
LABEL_9:
        unint64_t v15 = v5 - v9;
        uint64_t v16 = 8 * v9;
        uint64_t v17 = &v8[8 * v9];
        uint64_t v18 = (uint64_t *)(v10 + v16);
        do
        {
          uint64_t v19 = *v18++;
          *(void *)uint64_t v17 = v19;
          v17 += 8;
          --v15;
        }
        while (v15);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v6 = TupleTypeMetadata;
  }
  double v20 = MEMORY[0x1F4188790](TupleTypeMetadata);
  long long v22 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v23 + 16))(v22, v2 + *(int *)(v3 + 68), v6, v20);
  if (v5)
  {
    long long v25 = (uint64_t *)(*(void *)(v3 + 32) & 0xFFFFFFFFFFFFFFFELL);
    long long v26 = (int *)(v6 + 32);
    unint64_t v27 = v5;
    do
    {
      if (v5 == 1) {
        int v28 = 0;
      }
      else {
        int v28 = *v26;
      }
      uint64_t v30 = *v25++;
      uint64_t v29 = v30;
      uint64_t v31 = *a2++;
      uint64_t result = (*(uint64_t (**)(uint64_t, char *))(*(void *)(v29 - 8) + 32))(v31, &v22[v28]);
      v26 += 4;
      --v27;
    }
    while (v27);
  }
  return result;
}

uint64_t PredicateExpressions.ExpressionEvaluate.init(expression:input:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unint64_t v14 = a3;
  uint64_t v53 = a9;
  unint64_t v54 = a5 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v55 = a2;
  if (a3 == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(a5 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v19 = (char *)v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v14)
    {
      unint64_t v20 = 0;
      if (v14 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v19[-v17] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v20 = v14 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v21 = (long long *)(v17 + 16);
      long long v22 = v19 + 16;
      unint64_t v23 = v14 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *v21;
        *(v22 - 1) = *(v21 - 1);
        *long long v22 = v24;
        v21 += 2;
        v22 += 2;
        v23 -= 4;
      }
      while (v23);
      if (v20 != v14)
      {
LABEL_9:
        unint64_t v25 = v14 - v20;
        uint64_t v26 = 8 * v20;
        unint64_t v27 = &v19[8 * v20];
        int v28 = (uint64_t *)(v17 + v26);
        do
        {
          uint64_t v29 = *v28++;
          *(void *)unint64_t v27 = v29;
          v27 += 8;
          --v25;
        }
        while (v25);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  uint64_t v56 = TupleTypeMetadata;
  v50[0] = *(void *)(TupleTypeMetadata - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata);
  uint64_t v31 = (char *)v50 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v57 = v14;
  uint64_t v58 = a4;
  uint64_t v59 = a5;
  uint64_t v60 = a6;
  uint64_t v61 = a7;
  uint64_t v62 = a8;
  uint64_t v32 = type metadata accessor for PredicateExpressions.ExpressionEvaluate();
  v50[1] = v50;
  uint64_t v33 = *(void *)(v32 - 8);
  v34.n128_f64[0] = MEMORY[0x1F4188790](v32);
  uint64_t v36 = (char *)v50 - v35;
  uint64_t v37 = *(void *)(a4 - 8);
  BOOL v38 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v37 + 16);
  uint64_t v51 = a1;
  uint64_t v52 = a4;
  v38((char *)v50 - v35, a1, a4, v34);
  if (v14)
  {
    uint64_t v39 = v55;
    int64_t v40 = (int *)(v56 + 32);
    uint64_t v41 = (uint64_t *)v54;
    unint64_t v42 = v14;
    do
    {
      if (v14 == 1) {
        int v43 = 0;
      }
      else {
        int v43 = *v40;
      }
      uint64_t v45 = *v41++;
      uint64_t v44 = v45;
      uint64_t v46 = *v39++;
      (*(void (**)(char *, uint64_t))(*(void *)(v44 - 8) + 16))(&v31[v43], v46);
      v40 += 4;
      --v42;
    }
    while (v42);
  }
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v51, v52);
  (*(void (**)(char *, char *, uint64_t))(v50[0] + 32))(&v36[*(int *)(v32 + 68)], v31, v56);
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v33 + 32))(v53, v36, v32);
  if (v14)
  {
    unint64_t v48 = v54 - 8;
    uint64_t v49 = v55 - 1;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v48 + 8 * v14) - 8) + 8))(v49[v14]);
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t type metadata accessor for PredicateExpressions.ExpressionEvaluate()
{
  return swift_getGenericMetadata();
}

uint64_t PredicateExpressions.ExpressionEvaluate.evaluate(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = 8 * v5;
  uint64_t v63 = a3;
  uint64_t v72 = a1;
  if (v5 == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v8 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v5)
    {
      unint64_t v9 = 0;
      unint64_t v10 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v5 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v8[-v10] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v9 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      long long v11 = (long long *)(v10 + 16);
      uint64_t v12 = v8 + 16;
      unint64_t v13 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v14 = *v11;
        *(v12 - 1) = *(v11 - 1);
        *uint64_t v12 = v14;
        v11 += 2;
        v12 += 2;
        v13 -= 4;
      }
      while (v13);
      if (v5 != v9)
      {
LABEL_9:
        unint64_t v15 = v5 - v9;
        uint64_t v16 = 8 * v9;
        uint64_t v17 = &v8[8 * v9];
        uint64_t v18 = (uint64_t *)(v10 + v16);
        do
        {
          uint64_t v19 = *v18++;
          *(void *)uint64_t v17 = v19;
          v17 += 8;
          --v15;
        }
        while (v15);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  uint64_t v65 = *(void *)(TupleTypeMetadata - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata);
  uint64_t v76 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v77 = v5;
  uint64_t v68 = v22;
  uint64_t v70 = v20;
  unint64_t v73 = v3;
  if (v5 == 1)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  }
  else
  {
    uint64_t v75 = (char *)&v58;
    MEMORY[0x1F4188790](v20);
    if (v5)
    {
      unint64_t v24 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v25 = *(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v26 = (uint64_t *)((char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
      unint64_t v27 = v77;
      do
      {
        v24 += 8;
        v25 += 8;
        *v26++ = swift_getAssociatedTypeWitness();
        --v27;
      }
      while (v27);
    }
    unint64_t v5 = v77;
    uint64_t AssociatedTypeWitness = swift_getTupleTypeMetadata();
  }
  uint64_t v67 = &v58;
  uint64_t v69 = AssociatedTypeWitness;
  uint64_t v64 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v75 = (char *)&v58 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = &v58;
  MEMORY[0x1F4188790](v29);
  if (v5)
  {
    unint64_t v30 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v31 = *(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v32 = (uint64_t *)((char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    unint64_t v33 = v77;
    do
    {
      v30 += 8;
      v31 += 8;
      *v32++ = swift_getAssociatedTypeWitness();
      --v33;
    }
    while (v33);
  }
  unint64_t v34 = v77;
  uint64_t v35 = type metadata accessor for Expression();
  uint64_t v36 = *(void *)(v35 - 8);
  double v37 = MEMORY[0x1F4188790](v35);
  uint64_t v39 = (char *)&v58 - v38;
  unint64_t v40 = v73;
  uint64_t v41 = *v72;
  uint64_t v78 = *v72;
  unint64_t v42 = v74;
  uint64_t result = (*(uint64_t (**)(uint64_t *, void, double))(*(void *)(a2 + 48) + 16))(&v78, *(void *)(a2 + 24), v37);
  if (!v42)
  {
    uint64_t v59 = v39;
    uint64_t v60 = v36;
    uint64_t v61 = v35;
    uint64_t v62 = &v58;
    double v44 = MEMORY[0x1F4188790](result);
    uint64_t v74 = (uint64_t *)((char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v45 = (*(uint64_t (**)(char *, unint64_t, uint64_t, double))(v65 + 16))(v76, v40 + *(int *)(a2 + 68), v70, v44);
    if (v34)
    {
      uint64_t v71 = v41;
      uint64_t v46 = 0;
      unint64_t v47 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v72 = (uint64_t *)(*(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
      unint64_t v73 = v47;
      uint64_t v48 = 32;
      do
      {
        if (v34 == 1) {
          uint64_t v49 = (uint64_t)v75;
        }
        else {
          uint64_t v49 = (uint64_t)&v75[*(int *)(v69 + v48)];
        }
        uint64_t v50 = *(void *)(v73 + 8 * v46);
        uint64_t v51 = v72[v46];
        uint64_t v52 = *(void *)(v50 - 8);
        double v53 = MEMORY[0x1F4188790](v45);
        uint64_t v55 = (char *)&v58 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, double))(v52 + 16))(v55, v53);
        uint64_t v78 = v71;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v51 + 16))(&v78, v50, v51);
        uint64_t v45 = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v55, v50);
        v74[v46++] = v49;
        v48 += 16;
        unint64_t v34 = v77;
      }
      while (v77 != v46);
    }
    uint64_t v56 = v61;
    unint64_t v57 = v59;
    Expression.evaluate(_:)(v74, v61, v63);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v57, v56);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v75, v69);
    return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v76, v70);
  }
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.ExpressionEvaluate.evaluate(_:)(a1, a2, a3);
}

uint64_t static PredicateExpressions.build_evaluate<A, B, C>(_:_:)@<X0>(uint64_t TupleTypeMetadata@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v51 = a7;
  uint64_t v52 = a8;
  uint64_t v49 = a5;
  uint64_t v50 = a6;
  uint64_t v12 = TupleTypeMetadata;
  uint64_t v47 = a9;
  unint64_t v13 = (uint64_t *)(a5 & 0xFFFFFFFFFFFFFFFELL);
  uint64_t v14 = 8 * a3;
  if (a3 == 1)
  {
    uint64_t v15 = *v13;
  }
  else
  {
    MEMORY[0x1F4188790](TupleTypeMetadata);
    uint64_t v16 = (char *)v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a3)
    {
      unint64_t v17 = 0;
      if (a3 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)(v16 - (char *)v13) < 0x20) {
        goto LABEL_9;
      }
      unint64_t v17 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v18 = (long long *)(v13 + 2);
      uint64_t v19 = v16 + 16;
      unint64_t v20 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v21 = *v18;
        *(v19 - 1) = *(v18 - 1);
        *uint64_t v19 = v21;
        v18 += 2;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v17 != a3)
      {
LABEL_9:
        unint64_t v22 = a3 - v17;
        uint64_t v23 = v17;
        unint64_t v24 = &v16[8 * v17];
        unint64_t v25 = &v13[v23];
        do
        {
          uint64_t v26 = *v25++;
          *(void *)unint64_t v24 = v26;
          v24 += 8;
          --v22;
        }
        while (v22);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v15 = TupleTypeMetadata;
  }
  MEMORY[0x1F4188790](TupleTypeMetadata);
  uint64_t v28 = (char *)v46 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46[1] = v46;
  double v30 = MEMORY[0x1F4188790](v29);
  uint64_t v32 = (char *)v46 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t, double))(v33 + 16);
  uint64_t v48 = a4;
  uint64_t v35 = v34(v32, v12, a4, v30);
  v46[0] = v46;
  MEMORY[0x1F4188790](v35);
  uint64_t v36 = (void *)((char *)v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a3)
  {
    double v37 = (int *)(v15 + 32);
    uint64_t v38 = (char **)((char *)v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    unint64_t v39 = a3;
    do
    {
      if (a3 == 1) {
        int v40 = 0;
      }
      else {
        int v40 = *v37;
      }
      uint64_t v42 = *v13++;
      uint64_t v41 = v42;
      int v43 = &v28[v40];
      uint64_t v44 = *a2++;
      (*(void (**)(char *, uint64_t))(*(void *)(v41 - 8) + 16))(v43, v44);
      *v38++ = v43;
      v37 += 4;
      --v39;
    }
    while (v39);
  }
  return PredicateExpressions.ExpressionEvaluate.init(expression:input:)((uint64_t)v32, v36, a3, v48, v49, v50, v51, v52, v47);
}

uint64_t PredicateExpressions.ExpressionEvaluate.description.getter(uint64_t a1)
{
  v21[0] = 0;
  v21[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  v2._object = (void *)0x80000001823ACEE0;
  v2._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._uint64_t countAndFlagsBits = 0x3A7475706E69202CLL;
  v3._object = (void *)0xE900000000000020;
  String.append(_:)(v3);
  if (*(void *)(a1 + 16) != 1)
  {
    MEMORY[0x1F4188790](v4);
    uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v5)
    {
      unint64_t v8 = 0;
      unint64_t v9 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v5 < 4) {
        goto LABEL_8;
      }
      if ((unint64_t)&v7[-v9] < 0x20) {
        goto LABEL_8;
      }
      unint64_t v8 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v10 = (long long *)(v9 + 16);
      long long v11 = v7 + 16;
      unint64_t v12 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        _OWORD *v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4;
      }
      while (v12);
      if (v5 != v8)
      {
LABEL_8:
        unint64_t v14 = v5 - v8;
        uint64_t v15 = 8 * v8;
        uint64_t v16 = &v7[8 * v8];
        unint64_t v17 = (uint64_t *)(v9 + v15);
        do
        {
          uint64_t v18 = *v17++;
          *(void *)uint64_t v16 = v18;
          v16 += 8;
          --v14;
        }
        while (v14);
      }
    }
    swift_getTupleTypeMetadata();
  }
  _print_unlocked<A, B>(_:_:)();
  v19._uint64_t countAndFlagsBits = 41;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  return v21[0];
}

uint64_t PredicateExpressions.ExpressionEvaluate<>.encode(to:)(uint64_t TupleTypeMetadata, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, unint64_t a6)
{
  unint64_t v45 = a6;
  uint64_t v48 = a4;
  uint64_t v7 = (void *)TupleTypeMetadata;
  unint64_t v8 = *(void *)(a2 + 16);
  if (v8 == 1)
  {
    uint64_t v9 = *(void *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1F4188790](TupleTypeMetadata);
    long long v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v8)
    {
      unint64_t v12 = 0;
      unint64_t v13 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v8 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v11[-v13] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v14 = (long long *)(v13 + 16);
      uint64_t v15 = v11 + 16;
      unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *uint64_t v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v8 != v12)
      {
LABEL_9:
        unint64_t v18 = v8 - v12;
        uint64_t v19 = 8 * v12;
        unint64_t v20 = &v11[8 * v12];
        long long v21 = (uint64_t *)(v13 + v19);
        do
        {
          uint64_t v22 = *v21++;
          *(void *)unint64_t v20 = v22;
          v20 += 8;
          --v18;
        }
        while (v18);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v9 = TupleTypeMetadata;
  }
  uint64_t v46 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata);
  unint64_t v24 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v49, v50);
  unint64_t v25 = v47;
  uint64_t v26 = v51;
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (v26) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  }
  unint64_t v28 = v25 + *(int *)(a2 + 68);
  uint64_t v29 = v46;
  uint64_t v30 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v46 + 16))(v24, v28, v9);
  uint64_t v42 = (uint64_t)&v42;
  uint64_t v43 = v9;
  if (v8)
  {
    unint64_t v31 = v8;
    uint64_t v32 = (uint64_t *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v33 = v45 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v34 = 32;
    uint64_t v44 = v24;
    unint64_t v45 = v31;
    while (1)
    {
      unint64_t v47 = v31;
      uint64_t v51 = 0;
      uint64_t v48 = &v42;
      uint64_t v35 = *v32;
      uint64_t v36 = *(void *)(*v32 - 8);
      double v37 = MEMORY[0x1F4188790](v30);
      unint64_t v39 = (char *)&v42 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v36 + 16))(v39, v37);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v49, v50);
      uint64_t v40 = v51;
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (v40) {
        break;
      }
      uint64_t v30 = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v39, v35);
      v34 += 16;
      v33 += 8;
      ++v32;
      unint64_t v31 = v47 - 1;
      uint64_t v41 = v46;
      unint64_t v24 = v44;
      if (v47 == 1) {
        goto LABEL_20;
      }
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v39, v35);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v44, v43);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  }
  uint64_t v41 = v29;
LABEL_20:
  (*(void (**)(char *, uint64_t))(v41 + 8))(v24, v43);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
}

uint64_t PredicateExpressions.ExpressionEvaluate<>.init(from:)@<X0>(void *a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  unint64_t v54 = a7;
  unint64_t v13 = a3;
  uint64_t v50 = a8;
  unint64_t v67 = a4 & 0xFFFFFFFFFFFFFFFELL;
  if (a2 == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(a4 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    unint64_t v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a2)
    {
      unint64_t v21 = 0;
      if (a2 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v20[-v18] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v21 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v22 = (long long *)(v18 + 16);
      uint64_t v23 = v20 + 16;
      unint64_t v24 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v25 = *v22;
        *(v23 - 1) = *(v22 - 1);
        *uint64_t v23 = v25;
        v22 += 2;
        v23 += 2;
        v24 -= 4;
      }
      while (v24);
      if (v21 != a2)
      {
LABEL_9:
        unint64_t v26 = a2 - v21;
        uint64_t v27 = 8 * v21;
        unint64_t v28 = &v20[8 * v21];
        uint64_t v29 = (uint64_t *)(v18 + v27);
        do
        {
          uint64_t v30 = *v29++;
          *(void *)unint64_t v28 = v30;
          v28 += 8;
          --v26;
        }
        while (v26);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    unint64_t v13 = a3;
  }
  uint64_t v51 = TupleTypeMetadata;
  uint64_t v59 = &v48;
  uint64_t v62 = *(void *)(TupleTypeMetadata - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata);
  uint64_t v32 = (char *)&v48 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = &v48;
  uint64_t v52 = *((void *)v13 - 1);
  MEMORY[0x1F4188790](v33);
  double v53 = (char *)&v48 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63[0] = a2;
  v63[1] = v13;
  v63[2] = a4;
  uint64_t v64 = a5;
  uint64_t v65 = a6;
  uint64_t v66 = a9;
  uint64_t v35 = type metadata accessor for PredicateExpressions.ExpressionEvaluate();
  unint64_t v57 = &v48;
  uint64_t v61 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  double v37 = (char *)&v48 - v36;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v38 = v60;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v38) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v55 = v35;
  uint64_t v56 = v37;
  uint64_t v60 = v32;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v63, v64);
  unint64_t v39 = v53;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v49 = a1;
  uint64_t v41 = v56;
  (*(void (**)(char *, char *, char *))(v52 + 32))(v56, v39, v13);
  if (a2)
  {
    uint64_t v42 = 0;
    double v53 = v13;
    unint64_t v54 = a10 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v43 = v51 + 16;
    do
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v63, v64);
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
      ++v42;
      v43 += 16;
      uint64_t v44 = v60;
      uint64_t v45 = v61;
      uint64_t v46 = v55;
      uint64_t v41 = v56;
      uint64_t v47 = v62;
    }
    while (a2 != v42);
  }
  else
  {
    uint64_t v44 = v60;
    uint64_t v45 = v61;
    uint64_t v47 = v62;
    uint64_t v46 = v55;
  }
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(&v41[*(int *)(v46 + 68)], v44, v51);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
  (*(void (**)(uint64_t, char *, uint64_t))(v45 + 16))(v50, v41, v46);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v41, v46);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  uint64_t WitnessTable = swift_getWitnessTable();
  a1[1] = WitnessTable;
  uint64_t v7 = *(void *)(v4 + 16);
  uint64_t v8 = *(void *)(v4 + 24);
  MEMORY[0x1F4188790](WitnessTable);
  unint64_t v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v10)
  {
    for (uint64_t i = 0; i != v10; ++i)
      *(void *)&v12[8 * i] = *(void *)(*(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8 * i) + 16);
    MEMORY[0x1F4188790](v9);
    long long v17 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v18 = 0;
    do
    {
      *(void *)&v17[8 * v18] = *(void *)(*(void *)(v15 + 8 * v18) + 24);
      ++v18;
    }
    while (v14 != v18);
  }
  else
  {
    MEMORY[0x1F4188790](v9);
    long long v17 = (char *)v21 - v19;
  }
  uint64_t v21[4] = v7;
  v21[5] = v8;
  v21[6] = v12;
  v21[7] = v17;
  a1[2] = swift_getWitnessTable();
  v21[0] = v7;
  v21[1] = v8;
  void v21[2] = v12;
  v21[3] = v17;
  uint64_t result = swift_getWitnessTable();
  a1[3] = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.ExpressionEvaluate<>.init(from:)(a1, *(void *)(a2 + 16), *(char **)(a2 + 24), *(void *)(a2 + 32), *(void *)(a2 + 40), *(void *)(a2 + 48), *(void *)(a3 - 8), a4, *(void *)(a2 + 56), *(void *)(a3 - 24));
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return PredicateExpressions.ExpressionEvaluate<>.encode(to:)(a1, a2, a3, *(uint64_t **)(a3 - 16), a5, *(void *)(a3 - 32));
}

uint64_t type metadata completion function for PredicateExpressions.ExpressionEvaluate(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState();
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(result - 8);
    uint64_t v4 = result - 8;
    v22[0] = v5 + 64;
    if (*(void *)(a1 + 16) == 1)
    {
      uint64_t result = swift_checkMetadataState();
      if (v6 > 0x3F) {
        return result;
      }
LABEL_14:
      v22[1] = *(void *)(result - 8) + 64;
      swift_initStructMetadata();
      return 0;
    }
    MEMORY[0x1F4188790](v4);
    uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v7)
    {
      unint64_t v10 = 0;
      unint64_t v11 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v7 < 4) {
        goto LABEL_11;
      }
      if ((unint64_t)&v9[-v11] < 0x20) {
        goto LABEL_11;
      }
      unint64_t v10 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v12 = (long long *)(v11 + 16);
      unint64_t v13 = v9 + 16;
      unint64_t v14 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        _OWORD *v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v7 != v10)
      {
LABEL_11:
        unint64_t v16 = v7 - v10;
        uint64_t v17 = 8 * v10;
        uint64_t v18 = &v9[8 * v10];
        uint64_t v19 = (uint64_t *)(v11 + v17);
        do
        {
          uint64_t v20 = *v19++;
          *(void *)uint64_t v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    uint64_t result = swift_getTupleTypeMetadata();
    if (v21 <= 0x3F) {
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.ExpressionEvaluate(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t *, uint64_t *))(*(void *)(*(void *)(a3 + 24) - 8) + 16))(a1, a2);
    uint64_t v8 = *(int *)(a3 + 68);
    uint64_t v9 = (char *)v4 + v8;
    unint64_t v10 = (char *)a2 + v8;
    if (*(void *)(a3 + 16) == 1)
    {
      uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL);
    }
    else
    {
      MEMORY[0x1F4188790](v7);
      long long v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
      if (v13)
      {
        unint64_t v16 = 0;
        unint64_t v17 = *(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
        if (v13 < 4) {
          goto LABEL_11;
        }
        if ((unint64_t)&v15[-v17] < 0x20) {
          goto LABEL_11;
        }
        unint64_t v16 = v13 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v18 = (long long *)(v17 + 16);
        uint64_t v19 = v15 + 16;
        unint64_t v20 = v13 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          long long v21 = *v18;
          *(v19 - 1) = *(v18 - 1);
          *uint64_t v19 = v21;
          v18 += 2;
          v19 += 2;
          v20 -= 4;
        }
        while (v20);
        if (v13 != v16)
        {
LABEL_11:
          unint64_t v22 = v13 - v16;
          uint64_t v23 = 8 * v16;
          unint64_t v24 = &v15[8 * v16];
          long long v25 = (uint64_t *)(v17 + v23);
          do
          {
            uint64_t v26 = *v25++;
            *(void *)unint64_t v24 = v26;
            v24 += 8;
            --v22;
          }
          while (v22);
        }
      }
      uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    }
    (*(void (**)(char *, char *))(*(void *)(TupleTypeMetadata - 8) + 16))(v9, v10);
  }
  return v4;
}

uint64_t destroy for PredicateExpressions.ExpressionEvaluate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 24) - 8) + 8))();
  uint64_t v5 = *(int *)(a2 + 68);
  if (*(void *)(a2 + 16) == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1F4188790](v4);
    uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v7)
    {
      unint64_t v10 = 0;
      unint64_t v11 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v7 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v9[-v11] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v10 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v12 = (long long *)(v11 + 16);
      unint64_t v13 = v9 + 16;
      unint64_t v14 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        _OWORD *v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v7 != v10)
      {
LABEL_9:
        unint64_t v16 = v7 - v10;
        uint64_t v17 = 8 * v10;
        uint64_t v18 = &v9[8 * v10];
        uint64_t v19 = (uint64_t *)(v11 + v17);
        do
        {
          uint64_t v20 = *v19++;
          *(void *)uint64_t v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)(TupleTypeMetadata - 8) + 8))(a1 + v5);
}

uint64_t initializeWithCopy for PredicateExpressions.ExpressionEvaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a3 + 24) - 8) + 16))();
  uint64_t v7 = *(int *)(a3 + 68);
  if (*(void *)(a3 + 16) == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1F4188790](v6);
    unint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v9)
    {
      unint64_t v12 = 0;
      unint64_t v13 = *(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v11[-v13] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v14 = (long long *)(v13 + 16);
      long long v15 = v11 + 16;
      unint64_t v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *long long v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v9 != v12)
      {
LABEL_9:
        unint64_t v18 = v9 - v12;
        uint64_t v19 = 8 * v12;
        uint64_t v20 = &v11[8 * v12];
        long long v21 = (uint64_t *)(v13 + v19);
        do
        {
          uint64_t v22 = *v21++;
          *(void *)uint64_t v20 = v22;
          v20 += 8;
          --v18;
        }
        while (v18);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 16))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t assignWithCopy for PredicateExpressions.ExpressionEvaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a3 + 24) - 8) + 24))();
  uint64_t v7 = *(int *)(a3 + 68);
  if (*(void *)(a3 + 16) == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1F4188790](v6);
    unint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v9)
    {
      unint64_t v12 = 0;
      unint64_t v13 = *(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v11[-v13] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v14 = (long long *)(v13 + 16);
      long long v15 = v11 + 16;
      unint64_t v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *long long v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v9 != v12)
      {
LABEL_9:
        unint64_t v18 = v9 - v12;
        uint64_t v19 = 8 * v12;
        uint64_t v20 = &v11[8 * v12];
        long long v21 = (uint64_t *)(v13 + v19);
        do
        {
          uint64_t v22 = *v21++;
          *(void *)uint64_t v20 = v22;
          v20 += 8;
          --v18;
        }
        while (v18);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 24))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.ExpressionEvaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a3 + 24) - 8) + 32))();
  uint64_t v7 = *(int *)(a3 + 68);
  if (*(void *)(a3 + 16) == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1F4188790](v6);
    unint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v9)
    {
      unint64_t v12 = 0;
      unint64_t v13 = *(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v11[-v13] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v14 = (long long *)(v13 + 16);
      long long v15 = v11 + 16;
      unint64_t v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *long long v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v9 != v12)
      {
LABEL_9:
        unint64_t v18 = v9 - v12;
        uint64_t v19 = 8 * v12;
        uint64_t v20 = &v11[8 * v12];
        long long v21 = (uint64_t *)(v13 + v19);
        do
        {
          uint64_t v22 = *v21++;
          *(void *)uint64_t v20 = v22;
          v20 += 8;
          --v18;
        }
        while (v18);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 32))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.ExpressionEvaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a3 + 24) - 8) + 40))();
  uint64_t v7 = *(int *)(a3 + 68);
  if (*(void *)(a3 + 16) == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1F4188790](v6);
    unint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v9)
    {
      unint64_t v12 = 0;
      unint64_t v13 = *(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v11[-v13] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v14 = (long long *)(v13 + 16);
      long long v15 = v11 + 16;
      unint64_t v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *long long v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v9 != v12)
      {
LABEL_9:
        unint64_t v18 = v9 - v12;
        uint64_t v19 = 8 * v12;
        uint64_t v20 = &v11[8 * v12];
        long long v21 = (uint64_t *)(v13 + v19);
        do
        {
          uint64_t v22 = *v21++;
          *(void *)uint64_t v20 = v22;
          v20 += 8;
          --v18;
        }
        while (v18);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 40))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.ExpressionEvaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_181C07FDC);
}

uint64_t sub_181C07FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) == a2)
  {
    uint64_t v7 = *(uint64_t (**)(void))(v6 + 48);
    return v7();
  }
  else
  {
    if (*(void *)(a3 + 16) == 1)
    {
      uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL);
    }
    else
    {
      MEMORY[0x1F4188790](a1);
      unint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
      if (v10)
      {
        unint64_t v13 = 0;
        unint64_t v14 = *(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
        if (v10 < 4) {
          goto LABEL_13;
        }
        if ((unint64_t)&v12[-v14] < 0x20) {
          goto LABEL_13;
        }
        unint64_t v13 = v10 & 0xFFFFFFFFFFFFFFFCLL;
        long long v15 = (long long *)(v14 + 16);
        unint64_t v16 = v12 + 16;
        unint64_t v17 = v10 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          long long v18 = *v15;
          *(v16 - 1) = *(v15 - 1);
          *unint64_t v16 = v18;
          v15 += 2;
          v16 += 2;
          v17 -= 4;
        }
        while (v17);
        if (v10 != v13)
        {
LABEL_13:
          unint64_t v19 = v10 - v13;
          uint64_t v20 = 8 * v13;
          long long v21 = &v12[8 * v13];
          uint64_t v22 = (uint64_t *)(v14 + v20);
          do
          {
            uint64_t v23 = *v22++;
            *(void *)long long v21 = v23;
            v21 += 8;
            --v19;
          }
          while (v19);
        }
      }
      uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 48))(a1 + *(int *)(a3 + 68), a2);
  }
}

uint64_t storeEnumTagSinglePayload for PredicateExpressions.ExpressionEvaluate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_181C081A4);
}

uint64_t sub_181C081A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) - 8);
  if (*(_DWORD *)(v7 + 84) == a3)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
    return v8(a1, a2, a2);
  }
  else
  {
    if (*(void *)(a4 + 16) == 1)
    {
      uint64_t TupleTypeMetadata = *(void *)(*(void *)(a4 + 32) & 0xFFFFFFFFFFFFFFFELL);
    }
    else
    {
      MEMORY[0x1F4188790](a1);
      unint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      if (v11)
      {
        unint64_t v14 = 0;
        unint64_t v15 = *(void *)(a4 + 32) & 0xFFFFFFFFFFFFFFFELL;
        if (v11 < 4) {
          goto LABEL_13;
        }
        if ((unint64_t)&v13[-v15] < 0x20) {
          goto LABEL_13;
        }
        unint64_t v14 = v11 & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v16 = (long long *)(v15 + 16);
        unint64_t v17 = v13 + 16;
        unint64_t v18 = v11 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          long long v19 = *v16;
          *(v17 - 1) = *(v16 - 1);
          *unint64_t v17 = v19;
          v16 += 2;
          v17 += 2;
          v18 -= 4;
        }
        while (v18);
        if (v11 != v14)
        {
LABEL_13:
          unint64_t v20 = v11 - v14;
          uint64_t v21 = 8 * v14;
          uint64_t v22 = &v13[8 * v14];
          uint64_t v23 = (uint64_t *)(v15 + v21);
          do
          {
            uint64_t v24 = *v23++;
            *(void *)uint64_t v22 = v24;
            v22 += 8;
            --v20;
          }
          while (v20);
        }
      }
      uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 56))(a1 + *(int *)(a4 + 68), a2, a2);
  }
}

void static String.StandardComparator.localizedStandard.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 833;
  *(_WORD *)(a1 + 8) = 1;
}

void static String.StandardComparator.localized.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 1;
}

void static String.StandardComparator.lexical.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 0;
}

unint64_t one-time initialization function for validAlgorithms()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String.StandardComparator, Selector)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18210C660;
  *(void *)(inited + 32) = 833;
  *(_WORD *)(inited + 40) = 1;
  *(void *)(inited + 48) = sel_localizedStandardCompare_;
  *(void *)(inited + 56) = 833;
  *(_WORD *)(inited + 64) = 257;
  *(void *)(inited + 72) = sel_localizedStandardCompare_;
  *(void *)(inited + 80) = 0;
  *(_WORD *)(inited + 88) = 1;
  *(void *)(inited + 96) = sel_localizedCompare_;
  *(void *)(inited + 104) = 0;
  *(_WORD *)(inited + 112) = 257;
  *(void *)(inited + 120) = sel_localizedCompare_;
  *(void *)(inited + 128) = 0;
  *(_WORD *)(inited + 136) = 0;
  *(void *)(inited + 144) = sel_compare_;
  *(void *)(inited + 152) = 0;
  *(_WORD *)(inited + 160) = 256;
  *(void *)(inited + 168) = sel_compare_;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String.StandardComparator, Selector>);
  uint64_t v1 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v2 = *(void *)(inited + 32);
  unsigned int v3 = *(unsigned __int8 *)(inited + 40);
  char v4 = *(unsigned char *)(inited + 41);
  uint64_t v5 = *(void *)(inited + 48);
  if (v4) {
    int v6 = 256;
  }
  else {
    int v6 = 0;
  }
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(inited + 32), v6 | v3);
  if (v8)
  {
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v9 = v1 + 64;
  *(void *)(v1 + 64 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  uint64_t v10 = *(void *)(v1 + 48) + 16 * result;
  *(void *)uint64_t v10 = v2;
  *(unsigned char *)(v10 + 8) = v3;
  *(unsigned char *)(v10 + 9) = v4;
  *(void *)(*(void *)(v1 + 56) + 8 * result) = v5;
  uint64_t v11 = *(void *)(v1 + 16);
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(void *)(v1 + 16) = v13;
  uint64_t v14 = *(void *)(inited + 56);
  unsigned int v15 = *(unsigned __int8 *)(inited + 64);
  char v16 = *(unsigned char *)(inited + 65);
  uint64_t v17 = *(void *)(inited + 72);
  if (v16) {
    int v18 = 256;
  }
  else {
    int v18 = 0;
  }
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(inited + 56), v18 | v15);
  if (v19) {
    goto LABEL_34;
  }
  *(void *)(v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  uint64_t v20 = *(void *)(v1 + 48) + 16 * result;
  *(void *)uint64_t v20 = v14;
  *(unsigned char *)(v20 + 8) = v15;
  *(unsigned char *)(v20 + 9) = v16;
  *(void *)(*(void *)(v1 + 56) + 8 * result) = v17;
  uint64_t v21 = *(void *)(v1 + 16);
  BOOL v12 = __OFADD__(v21, 1);
  uint64_t v22 = v21 + 1;
  if (v12)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  *(void *)(v1 + 16) = v22;
  uint64_t v23 = *(void *)(inited + 80);
  unsigned int v24 = *(unsigned __int8 *)(inited + 88);
  char v25 = *(unsigned char *)(inited + 89);
  uint64_t v26 = *(void *)(inited + 96);
  if (v25) {
    int v27 = 256;
  }
  else {
    int v27 = 0;
  }
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(inited + 80), v27 | v24);
  if (v28) {
    goto LABEL_36;
  }
  *(void *)(v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  uint64_t v29 = *(void *)(v1 + 48) + 16 * result;
  *(void *)uint64_t v29 = v23;
  *(unsigned char *)(v29 + 8) = v24;
  *(unsigned char *)(v29 + 9) = v25;
  *(void *)(*(void *)(v1 + 56) + 8 * result) = v26;
  uint64_t v30 = *(void *)(v1 + 16);
  BOOL v12 = __OFADD__(v30, 1);
  uint64_t v31 = v30 + 1;
  if (v12)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  *(void *)(v1 + 16) = v31;
  uint64_t v32 = *(void *)(inited + 104);
  unsigned int v33 = *(unsigned __int8 *)(inited + 112);
  char v34 = *(unsigned char *)(inited + 113);
  uint64_t v35 = *(void *)(inited + 120);
  if (v34) {
    int v36 = 256;
  }
  else {
    int v36 = 0;
  }
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(inited + 104), v36 | v33);
  if (v37) {
    goto LABEL_38;
  }
  *(void *)(v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  uint64_t v38 = *(void *)(v1 + 48) + 16 * result;
  *(void *)uint64_t v38 = v32;
  *(unsigned char *)(v38 + 8) = v33;
  *(unsigned char *)(v38 + 9) = v34;
  *(void *)(*(void *)(v1 + 56) + 8 * result) = v35;
  uint64_t v39 = *(void *)(v1 + 16);
  BOOL v12 = __OFADD__(v39, 1);
  uint64_t v40 = v39 + 1;
  if (v12)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  *(void *)(v1 + 16) = v40;
  uint64_t v41 = *(void *)(inited + 128);
  unsigned int v42 = *(unsigned __int8 *)(inited + 136);
  char v43 = *(unsigned char *)(inited + 137);
  uint64_t v44 = *(void *)(inited + 144);
  if (v43) {
    int v45 = 256;
  }
  else {
    int v45 = 0;
  }
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(inited + 128), v45 | v42);
  if (v46) {
    goto LABEL_40;
  }
  *(void *)(v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  uint64_t v47 = *(void *)(v1 + 48) + 16 * result;
  *(void *)uint64_t v47 = v41;
  *(unsigned char *)(v47 + 8) = v42;
  *(unsigned char *)(v47 + 9) = v43;
  *(void *)(*(void *)(v1 + 56) + 8 * result) = v44;
  uint64_t v48 = *(void *)(v1 + 16);
  BOOL v12 = __OFADD__(v48, 1);
  uint64_t v49 = v48 + 1;
  if (v12)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  *(void *)(v1 + 16) = v49;
  uint64_t v50 = *(void *)(inited + 152);
  unsigned int v51 = *(unsigned __int8 *)(inited + 160);
  char v52 = *(unsigned char *)(inited + 161);
  uint64_t v53 = *(void *)(inited + 168);
  if (v52) {
    int v54 = 256;
  }
  else {
    int v54 = 0;
  }
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(inited + 152), v54 | v51);
  if (v55) {
    goto LABEL_42;
  }
  *(void *)(v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  uint64_t v56 = *(void *)(v1 + 48) + 16 * result;
  *(void *)uint64_t v56 = v50;
  *(unsigned char *)(v56 + 8) = v51;
  *(unsigned char *)(v56 + 9) = v52;
  *(void *)(*(void *)(v1 + 56) + 8 * result) = v53;
  uint64_t v57 = *(void *)(v1 + 16);
  BOOL v12 = __OFADD__(v57, 1);
  uint64_t v58 = v57 + 1;
  if (!v12)
  {
    *(void *)(v1 + 16) = v58;
    unint64_t result = swift_bridgeObjectRelease();
    static String.StandardComparator.validAlgorithms = (_UNKNOWN *)v1;
    return result;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance String.StandardComparator.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.StandardComparator.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance String.StandardComparator.CodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.StandardComparator.CodingKeys()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance String.StandardComparator.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of String.StandardComparator.CodingKeys.init(rawValue:);
  unint64_t result = specialized String.Comparator.CodingKeys.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance String.StandardComparator.CodingKeys(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE700000000000000;
  unint64_t v4 = 0xEB0000000064657ALL;
  uint64_t v5 = 0x696C61636F4C7369;
  if (v2 != 1)
  {
    uint64_t v5 = 0x726564726FLL;
    unint64_t v4 = 0xE500000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x736E6F6974706FLL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.StandardComparator.CodingKeys()
{
  uint64_t v1 = 0x696C61636F4C7369;
  if (*v0 != 1) {
    uint64_t v1 = 0x726564726FLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x736E6F6974706FLL;
  }
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.StandardComparator.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of String.StandardComparator.CodingKeys.init(rawValue:);
  unint64_t result = specialized String.Comparator.CodingKeys.init(rawValue:)(a1, v3);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.StandardComparator.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.StandardComparator.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t String.StandardComparator.order.getter()
{
  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t String.StandardComparator.order.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 9) = result & 1;
  return result;
}

uint64_t (*String.StandardComparator.order.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t String.StandardComparator.init(_:order:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v3 = *(unsigned char *)(result + 8);
  *(void *)a3 = *(void *)result;
  *(unsigned char *)(a3 + 8) = v3;
  *(unsigned char *)(a3 + 9) = a2 & 1;
  return result;
}

uint64_t String.StandardComparator.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.StandardComparator.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v25) = 0;
    Swift::UInt v9 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v25) = 1;
    char v10 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v27) = 2;
    lazy protocol witness table accessor for type SortOrder and conformance SortOrder();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v11 = v25;
    if (one-time initialization token for validAlgorithms != -1)
    {
      int v22 = v25;
      swift_once();
      int v11 = v22;
    }
    if (*((void *)static String.StandardComparator.validAlgorithms + 2)
      && (!v11 ? (int v12 = 0) : (int v12 = 256),
          LODWORD(v24) = v11,
          specialized __RawDictionaryStorage.find<A>(_:)(v9, v12 & 0xFFFFFFFE | v10 & 1),
          (v13 & 1) != 0))
    {
      uint64_t v14 = v5;
      char v15 = v24;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v14);
      *(void *)a2 = v9;
      *(unsigned char *)(a2 + 8) = v10 & 1;
      *(unsigned char *)(a2 + 9) = v15;
    }
    else
    {
      uint64_t v16 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v18 = v17;
      uint64_t v24 = KeyedDecodingContainer.codingPath.getter();
      unint64_t v25 = 0;
      unint64_t v26 = 0xE000000000000000;
      _StringGuts.grow(_:)(48);
      swift_bridgeObjectRelease();
      unint64_t v25 = 0xD000000000000014;
      unint64_t v26 = 0x80000001823ACF00;
      int v27 = &type metadata for String.StandardComparator;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String.StandardComparator.Type);
      v19._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
      v20._object = (void *)0x80000001823ACF20;
      String.append(_:)(v20);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, *MEMORY[0x1E4FBBA78], v16);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SortOrder and conformance SortOrder()
{
  unint64_t result = lazy protocol witness table cache variable for type SortOrder and conformance SortOrder;
  if (!lazy protocol witness table cache variable for type SortOrder and conformance SortOrder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortOrder and conformance SortOrder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SortOrder and conformance SortOrder;
  if (!lazy protocol witness table cache variable for type SortOrder and conformance SortOrder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortOrder and conformance SortOrder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SortOrder and conformance SortOrder;
  if (!lazy protocol witness table cache variable for type SortOrder and conformance SortOrder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortOrder and conformance SortOrder);
  }
  return result;
}

NSComparisonResult __swiftcall String.StandardComparator.compare(_:_:)(Swift::String a1, Swift::String a2)
{
  unint64_t v3 = *v2;
  int v4 = *((unsigned __int8 *)v2 + 9);
  if (*((unsigned char *)v2 + 8) != 1)
  {
    swift_bridgeObjectRetain();
    unint64_t v18 = Substring.init<A>(_:)();
    unint64_t v20 = v19;
    unint64_t v22 = v21;
    unint64_t v24 = v23;
    swift_bridgeObjectRetain();
    unint64_t v25 = Substring.init<A>(_:)();
    unint64_t v29 = v25;
    unint64_t v30 = v26;
    unint64_t v31 = v28;
    if (!v3)
    {
      if (v22 == v27 && v24 == v28 && v18 >> 16 == v25 >> 16 && v20 >> 16 == v26 >> 16)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        NSComparisonResult v33 = NSOrderedDescending;
        if (_stringCompareInternal(_:_:_:_:expecting:)())
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v4) {
            return 1;
          }
          else {
            return -1;
          }
        }
        char v49 = _stringCompareInternal(_:_:_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v49)
        {
LABEL_56:
          NSComparisonResult v50 = NSOrderedDescending;
          if (v33 == NSOrderedDescending) {
            uint64_t v51 = -1;
          }
          else {
            uint64_t v51 = v33;
          }
          if (v33 != NSOrderedAscending) {
            NSComparisonResult v50 = v51;
          }
          if (v4) {
            return v50;
          }
          else {
            return v33;
          }
        }
      }
      NSComparisonResult v33 = NSOrderedSame;
      goto LABEL_56;
    }
    if ((v3 & 2) != 0)
    {
      unint64_t v37 = v25;
      unint64_t v38 = v27;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v53 = v22;
      unint64_t v32 = v20;
      unint64_t v39 = v38;
      unint64_t v29 = v37;
      NSComparisonResult v33 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v37, v30, v39, v31, (v3 >> 8) & 1, (v3 >> 7) & 1, v3 & 1, (v3 >> 6) & 1, (v3 & 0x200) != 0, v18, v20, v53, v24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v33) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v52 = v22;
      unint64_t v32 = v20;
      NSComparisonResult v33 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v25, v26, v27, v28, (v3 >> 8) & 1, (v3 >> 7) & 1, v3 & 1, (v3 >> 6) & 1, (v3 & 0x200) != 0, v18, v20, v52, v24);
      if (v33)
      {
LABEL_13:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_56;
      }
    }
    if ((v3 & 0x200) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      NSComparisonResult v33 = NSOrderedSame;
      goto LABEL_56;
    }
    unint64_t v40 = v32 >> 14;
    unint64_t v41 = v18 >> 14;
    if (v18 >> 14 >= v40 || v30 >> 14 <= v29 >> 14)
    {
LABEL_51:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v41 == v40)
      {
        if ((v29 ^ v30) >> 14) {
          NSComparisonResult v33 = NSOrderedAscending;
        }
        else {
          NSComparisonResult v33 = NSOrderedSame;
        }
      }
      else
      {
        NSComparisonResult v33 = NSOrderedDescending;
      }
      goto LABEL_56;
    }
    unint64_t v55 = v30 >> 14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unsigned int v42 = Substring.UnicodeScalarView.subscript.getter();
    unsigned int v43 = Substring.UnicodeScalarView.subscript.getter();
    if (v42 == v43)
    {
      Substring.UnicodeScalarView.formIndex(after:)();
      Substring.UnicodeScalarView.formIndex(after:)();
      unint64_t v41 = v18 >> 14;
      if (v18 >> 14 >= v40 || v55 <= v29 >> 14)
      {
LABEL_50:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_51;
      }
      unsigned int v44 = Substring.UnicodeScalarView.subscript.getter();
      unsigned int v45 = Substring.UnicodeScalarView.subscript.getter();
      if (v44 == v45)
      {
        while (1)
        {
          Substring.UnicodeScalarView.formIndex(after:)();
          Substring.UnicodeScalarView.formIndex(after:)();
          unint64_t v41 = v18 >> 14;
          if (v18 >> 14 >= v40 || v55 <= v29 >> 14) {
            goto LABEL_50;
          }
          unsigned int v54 = Substring.UnicodeScalarView.subscript.getter();
          unsigned int v46 = Substring.UnicodeScalarView.subscript.getter();
          unsigned int v47 = v54;
          if (v54 != v46)
          {
            unsigned int v48 = v46;
            goto LABEL_47;
          }
        }
      }
      unsigned int v48 = v45;
    }
    else
    {
      unsigned int v48 = v43;
      unsigned int v47 = v42;
LABEL_47:
      unsigned int v44 = v47;
    }
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (v44 >= v48) {
      NSComparisonResult v33 = (unint64_t)(v48 < v44);
    }
    else {
      NSComparisonResult v33 = NSOrderedAscending;
    }
    goto LABEL_56;
  }
  int v57 = *((unsigned __int8 *)v2 + 9);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v6 = v5;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  uint64_t v7 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v8 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  NSComparisonResult result = StringProtocol._toUTF16Offsets(_:)();
  if (!__OFSUB__(v10, result))
  {
    NSComparisonResult v11 = result;
    uint64_t v56 = v10 - result;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v13 = v3;
    uint64_t v14 = (void *)v7;
    char v15 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 488);
    swift_unknownObjectRetain();
    uint64_t v16 = (void *)v15(ObjectType, v6);
    swift_unknownObjectRelease();
    id v17 = objc_msgSend(v14, sel_compare_options_range_locale_, v8, v13, v11, v56, v16);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    if (v57)
    {
      if (v17 == (id)-1)
      {
        return 1;
      }
      else if (v17 == (id)1)
      {
        return -1;
      }
    }
    return (NSComparisonResult)v17;
  }
  __break(1u);
  return result;
}

void String.StandardComparator.hash(into:)()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 8);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 9);
  Hasher._combine(_:)(*(void *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

uint64_t String.StandardComparator.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.StandardComparator.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v12 = *(unsigned __int8 *)(v1 + 8);
  int v11 = *(unsigned __int8 *)(v1 + 9);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v8 = v11;
    char v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v14 = v8;
    char v13 = 2;
    lazy protocol witness table accessor for type SortOrder and conformance SortOrder();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

BOOL static String.StandardComparator.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return ((*(void *)a1 != *(void *)a2) | ((*(unsigned char *)(a1 + 8) ^ *(unsigned char *)(a2 + 8)) | (*(unsigned char *)(a2 + 9) ^ *(unsigned char *)(a1 + 9))) & 1) == 0;
}

Swift::Int String.StandardComparator.hashValue.getter()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 8);
  Swift::UInt v3 = *(unsigned __int8 *)(v0 + 9);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

NSComparisonResult protocol witness for SortComparator.compare(_:_:) in conformance String.StandardComparator(uint64_t *a1, Swift::String *a2)
{
  Swift::UInt8 v2 = (void *)a1[1];
  Swift::String v3 = *a2;
  v4._uint64_t countAndFlagsBits = *a1;
  v4._object = v2;
  return String.StandardComparator.compare(_:_:)(v4, v3);
}

uint64_t protocol witness for SortComparator.order.getter in conformance String.StandardComparator()
{
  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t protocol witness for SortComparator.order.setter in conformance String.StandardComparator(uint64_t result)
{
  *(unsigned char *)(v1 + 9) = result & 1;
  return result;
}

uint64_t (*protocol witness for SortComparator.order.modify in conformance String.StandardComparator())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.StandardComparator@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return String.StandardComparator.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.StandardComparator(void *a1)
{
  return String.StandardComparator.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.StandardComparator()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 8);
  Swift::UInt v3 = *(unsigned __int8 *)(v0 + 9);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance String.StandardComparator()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 8);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 9);
  Hasher._combine(_:)(*(void *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.StandardComparator()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 8);
  Swift::UInt v3 = *(unsigned __int8 *)(v0 + 9);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance String.StandardComparator(uint64_t a1, uint64_t a2)
{
  return ((*(void *)a1 != *(void *)a2) | ((*(unsigned char *)(a1 + 8) ^ *(unsigned char *)(a2 + 8)) | (*(unsigned char *)(a2 + 9) ^ *(unsigned char *)(a1 + 9))) & 1) == 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance String.Comparator.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.Comparator.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance String.Comparator.CodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.Comparator.CodingKeys()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance String.Comparator.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of String.Comparator.CodingKeys.init(rawValue:);
  unint64_t result = specialized String.Comparator.CodingKeys.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance String.Comparator.CodingKeys(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE700000000000000;
  unint64_t v4 = 0xE600000000000000;
  uint64_t v5 = 0x656C61636F6CLL;
  if (v2 != 1)
  {
    uint64_t v5 = 0x726564726FLL;
    unint64_t v4 = 0xE500000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x736E6F6974706FLL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.Comparator.CodingKeys()
{
  uint64_t v1 = 0x656C61636F6CLL;
  if (*v0 != 1) {
    uint64_t v1 = 0x726564726FLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x736E6F6974706FLL;
  }
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.Comparator.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of String.Comparator.CodingKeys.init(rawValue:);
  unint64_t result = specialized String.Comparator.CodingKeys.init(rawValue:)(a1, v3);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.Comparator.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.Comparator.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t String.Comparator.options.getter()
{
  return *(void *)v0;
}

uint64_t String.Comparator.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 8);
  return swift_unknownObjectRetain();
}

uint64_t String.Comparator.order.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t String.Comparator.order.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 24) = result & 1;
  return result;
}

uint64_t (*String.Comparator.order.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 String.Comparator.init(options:locale:order:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = a1;
  __n128 result = *a2;
  *(__n128 *)(a4 + 8) = *a2;
  *(unsigned char *)(a4 + 24) = a3 & 1;
  return result;
}

uint64_t String.Comparator.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 9);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t result = LocaleCache.current.getter();
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = result;
  *(void *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 24) = v4;
  return result;
}

uint64_t String.Comparator.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.Comparator.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  LOBYTE(v15) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  char v17 = 1;
  lazy protocol witness table accessor for type Locale? and conformance <A> A?(&lazy protocol witness table cache variable for type Locale? and conformance <A> A?, (void (*)(void))lazy protocol witness table accessor for type Locale and conformance Locale);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v10 = v15;
  uint64_t v14 = v16;
  char v17 = 2;
  lazy protocol witness table accessor for type SortOrder and conformance SortOrder();
  swift_unknownObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  char v11 = v15;
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v10;
  *(void *)(a2 + 16) = v14;
  *(unsigned char *)(a2 + 24) = v11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_unknownObjectRelease();
}

NSComparisonResult __swiftcall String.Comparator.compare(_:_:)(Swift::String a1, Swift::String a2)
{
  unint64_t v3 = *(void *)v2;
  uint64_t v4 = *(void *)(v2 + 16);
  char v50 = *(unsigned char *)(v2 + 24);
  if (!*(void *)(v2 + 8))
  {
    swift_bridgeObjectRetain();
    unint64_t v16 = Substring.init<A>(_:)();
    unint64_t v18 = v17;
    unint64_t v20 = v19;
    unint64_t v22 = v21;
    swift_bridgeObjectRetain();
    unint64_t v23 = Substring.init<A>(_:)();
    unint64_t v27 = v23;
    unint64_t v28 = v24;
    unint64_t v29 = v26;
    if (!v3)
    {
      unint64_t v30 = v16 >> 16;
      unint64_t v31 = v18 >> 16;
      if (v20 == v25 && v22 == v26 && v30 == v23 >> 16 && v31 == v24 >> 16)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        NSComparisonResult v14 = NSOrderedDescending;
        if (_stringCompareInternal(_:_:_:_:expecting:)())
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          NSComparisonResult v14 = NSOrderedAscending;
          goto LABEL_4;
        }
        char v43 = _stringCompareInternal(_:_:_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v43) {
          goto LABEL_4;
        }
      }
      NSComparisonResult v14 = NSOrderedSame;
      goto LABEL_4;
    }
    if ((v3 & 2) != 0)
    {
      unsigned __int8 v44 = (v3 & 0x200) != 0;
      uint64_t v48 = (v3 >> 6) & 1;
      int v47 = v3 & 1;
      uint64_t v45 = (v3 >> 8) & 1;
      uint64_t v35 = (v3 >> 7) & 1;
      __int16 v36 = v3;
      unint64_t v3 = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v37 = v3;
      LOWORD(v3) = v36;
      NSComparisonResult v14 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v27, v28, v37, v29, v45, v35, v47, v48, v44, v16, v18, v20, v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v14) {
        goto LABEL_15;
      }
    }
    else
    {
      NSComparisonResult v14 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v23, v24, v25, v26, (v3 >> 8) & 1, (v3 >> 7) & 1, v3 & 1, (v3 >> 6) & 1, (v3 & 0x200) != 0, v16, v18, v20, v22);
      if (v14)
      {
LABEL_15:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_4;
      }
    }
    if ((v3 & 0x200) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      NSComparisonResult v14 = NSOrderedSame;
      goto LABEL_4;
    }
    unint64_t v38 = v18 >> 14;
    unint64_t v39 = v16 >> 14;
    if (v16 >> 14 >= v18 >> 14 || v28 >> 14 <= v27 >> 14)
    {
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v39 == v38)
      {
        if ((v27 ^ v28) >> 14) {
          NSComparisonResult v14 = NSOrderedAscending;
        }
        else {
          NSComparisonResult v14 = NSOrderedSame;
        }
      }
      else
      {
        NSComparisonResult v14 = NSOrderedDescending;
      }
      goto LABEL_4;
    }
    unint64_t v46 = v28 >> 14;
    unint64_t v49 = v18 >> 14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unsigned int v40 = Substring.UnicodeScalarView.subscript.getter();
    unsigned int i = Substring.UnicodeScalarView.subscript.getter();
    if (v40 == i)
    {
      Substring.UnicodeScalarView.formIndex(after:)();
      Substring.UnicodeScalarView.formIndex(after:)();
      unint64_t v39 = v16 >> 14;
      if (v16 >> 14 >= v49 || v46 <= v27 >> 14)
      {
LABEL_46:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v38 = v18 >> 14;
        goto LABEL_47;
      }
      unsigned int v40 = Substring.UnicodeScalarView.subscript.getter();
      for (unsigned int i = Substring.UnicodeScalarView.subscript.getter(); v40 == i; unsigned int i = Substring.UnicodeScalarView.subscript.getter())
      {
        Substring.UnicodeScalarView.formIndex(after:)();
        Substring.UnicodeScalarView.formIndex(after:)();
        unint64_t v39 = v16 >> 14;
        if (v16 >> 14 >= v49 || v46 <= v27 >> 14) {
          goto LABEL_46;
        }
        unsigned int v40 = Substring.UnicodeScalarView.subscript.getter();
      }
    }
    unsigned int v42 = i;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (v40 >= v42) {
      NSComparisonResult v14 = (unint64_t)(v42 < v40);
    }
    else {
      NSComparisonResult v14 = NSOrderedAscending;
    }
    goto LABEL_4;
  }
  lazy protocol witness table accessor for type String and conformance String();
  swift_unknownObjectRetain();
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  uint64_t v5 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v6 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  NSComparisonResult result = StringProtocol._toUTF16Offsets(_:)();
  uint64_t v9 = v8 - result;
  if (__OFSUB__(v8, result))
  {
    __break(1u);
    return result;
  }
  NSComparisonResult v10 = result;
  uint64_t ObjectType = swift_getObjectType();
  int v12 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 488);
  swift_unknownObjectRetain();
  uint64_t v13 = (void *)v12(ObjectType, v4);
  swift_unknownObjectRelease();
  NSComparisonResult v14 = (NSComparisonResult)objc_msgSend(v5, sel_compare_options_range_locale_, v6, v3, v10, v9, v13);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

LABEL_4:
  if (v50)
  {
    if (v14 == NSOrderedDescending) {
      NSComparisonResult v15 = NSOrderedAscending;
    }
    else {
      NSComparisonResult v15 = v14;
    }
    if (v14 == NSOrderedAscending) {
      return 1;
    }
    else {
      return v15;
    }
  }
  return v14;
}

void String.Comparator.hash(into:)(uint64_t a1)
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned char *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  void *v42;
  unsigned char v43[144];
  unsigned char v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  void v62[18];
  unsigned char v63[144];
  unsigned char v64[152];

  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  Swift::UInt v5 = *(unsigned __int8 *)(v1 + 24);
  Hasher._combine(_:)(*(void *)v1);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
    swift_unknownObjectRetain_n();
    if (v7(ObjectType, v4))
    {
      Swift::UInt8 v8 = 1;
LABEL_7:
      Hasher._combine(_:)(v8);
LABEL_58:
      swift_unknownObjectRelease_n();
      goto LABEL_59;
    }
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
    swift_unknownObjectRetain();
    v9(v62, ObjectType, v4);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63);
    outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v64) == 1)
    {
      Swift::UInt8 v8 = 0;
      goto LABEL_7;
    }
    outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v44);
    Hasher._combine(_:)(1u);
    if (v44[0] == 2)
    {
      NSComparisonResult v10 = 0;
    }
    else
    {
      NSComparisonResult v10 = v44[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v10);
    char v11 = v45;
    if (v45)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v11 + 16));
      int v12 = *(void *)(v11 + 16);
      if (v12)
      {
        outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v13 = v11 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v13 += 16;
          --v12;
        }
        while (v12);
        swift_bridgeObjectRelease();
        if (!v46)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          if (!v47) {
            goto LABEL_17;
          }
          goto LABEL_24;
        }
LABEL_23:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v47)
        {
LABEL_17:
          Hasher._combine(_:)(0);
          NSComparisonResult v14 = v48;
          if (!v48) {
            goto LABEL_18;
          }
          goto LABEL_25;
        }
LABEL_24:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        NSComparisonResult v14 = v48;
        if (!v48)
        {
LABEL_18:
          Hasher._combine(_:)(0);
          NSComparisonResult v15 = v49;
          if (!v49)
          {
LABEL_19:
            Hasher._combine(_:)(0);
            goto LABEL_27;
          }
LABEL_26:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v15);
          swift_bridgeObjectRelease();
LABEL_27:
          unint64_t v17 = v50;
          unint64_t v18 = v51;
          unint64_t v20 = v52;
          unint64_t v19 = v53;
          unint64_t v21 = v54;
          if (v50)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            unint64_t v22 = v18;
            unint64_t v23 = v20;
            unint64_t v24 = v19;
            uint64_t v25 = v21;
            uint64_t v26 = v17;
            _CFObject.hash(into:)();
            unsigned int v42 = v17;
            if (v18) {
              goto LABEL_29;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            unint64_t v31 = v21;
            unint64_t v32 = v18;
            NSComparisonResult v33 = v20;
            char v34 = v19;
            unsigned int v42 = 0;
            if (v18)
            {
LABEL_29:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              unint64_t v27 = v18;
              _CFObject.hash(into:)();

              if (v20) {
                goto LABEL_30;
              }
              goto LABEL_35;
            }
          }
          Hasher._combine(_:)(0);
          if (v20)
          {
LABEL_30:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            unint64_t v28 = v20;
            _CFObject.hash(into:)();

            if (v19) {
              goto LABEL_31;
            }
            goto LABEL_36;
          }
LABEL_35:
          Hasher._combine(_:)(0);
          if (v19)
          {
LABEL_31:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            unint64_t v29 = v19;
            _CFObject.hash(into:)();

            if (v21)
            {
LABEL_32:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              unint64_t v30 = v21;
              _CFObject.hash(into:)();

              goto LABEL_38;
            }
LABEL_37:
            Hasher._combine(_:)(0);
            unint64_t v30 = 0;
LABEL_38:

            uint64_t v35 = v55;
            if (v35)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v35);
              swift_bridgeObjectRelease();
              __int16 v36 = v56;
              if (v56) {
                goto LABEL_40;
              }
            }
            else
            {
              Hasher._combine(_:)(0);
              __int16 v36 = v56;
              if (v56)
              {
LABEL_40:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v36);
                swift_bridgeObjectRelease();
                if (v57)
                {
LABEL_41:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_45:
                  if (v58 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    unint64_t v37 = v58 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v37);
                  }
                  if (v59 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    unint64_t v38 = v59 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v38);
                  }
                  if (v60 == 2)
                  {
                    unint64_t v39 = 0;
                  }
                  else
                  {
                    unint64_t v39 = v60 & 1;
                    Hasher._combine(_:)(1u);
                  }
                  Hasher._combine(_:)(v39);
                  if (v61 == 2)
                  {
                    unsigned int v40 = 0;
                  }
                  else
                  {
                    unint64_t v41 = v61 & 1;
                    Hasher._combine(_:)(1u);
                    unsigned int v40 = v41;
                  }
                  Hasher._combine(_:)(v40);
                  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  goto LABEL_58;
                }
LABEL_44:
                Hasher._combine(_:)(0);
                goto LABEL_45;
              }
            }
            Hasher._combine(_:)(0);
            if (v57) {
              goto LABEL_41;
            }
            goto LABEL_44;
          }
LABEL_36:
          Hasher._combine(_:)(0);
          if (v21) {
            goto LABEL_32;
          }
          goto LABEL_37;
        }
LABEL_25:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v14);
        swift_bridgeObjectRelease();
        NSComparisonResult v15 = v49;
        if (!v49) {
          goto LABEL_19;
        }
        goto LABEL_26;
      }
      outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v43);
      unint64_t v16 = v43;
    }
    else
    {
      Hasher._combine(_:)(0);
      unint64_t v16 = v44;
    }
    outlined retain of LocalePreferences(v16);
    if (!v46) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  Hasher._combine(_:)(0);
LABEL_59:
  Hasher._combine(_:)(v5);
}

uint64_t String.Comparator.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.Comparator.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v1 + 8);
  uint64_t v11 = *(void *)(v1 + 16);
  uint64_t v12 = v8;
  int v15 = *(unsigned __int8 *)(v1 + 24);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v9 = v15;
    uint64_t v13 = v12;
    uint64_t v14 = v11;
    char v16 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    lazy protocol witness table accessor for type Locale? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type Locale? and conformance <A> A?, (void (*)(void))lazy protocol witness table accessor for type Locale and conformance Locale);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = v9;
    char v16 = 2;
    lazy protocol witness table accessor for type SortOrder and conformance SortOrder();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int String.Comparator.hashValue.getter()
{
  void (*v8)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned char *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  unsigned char v42[144];
  unsigned char v43[8];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  char v60;
  void v61[18];
  unsigned char v62[144];
  unsigned char v63[144];
  unsigned char v64[80];

  Swift::UInt v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  Swift::UInt v4 = *(unsigned __int8 *)(v0 + 24);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
    swift_unknownObjectRetain_n();
    if (v6(ObjectType, v3))
    {
      Swift::UInt8 v7 = 1;
LABEL_7:
      Hasher._combine(_:)(v7);
LABEL_58:
      swift_unknownObjectRelease_n();
      goto LABEL_59;
    }
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v8 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 464);
    swift_unknownObjectRetain();
    v8(v61, ObjectType, v3);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v62);
    outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v63) == 1)
    {
      Swift::UInt8 v7 = 0;
      goto LABEL_7;
    }
    outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v43);
    Hasher._combine(_:)(1u);
    if (v43[0] == 2)
    {
      char v9 = 0;
    }
    else
    {
      char v9 = v43[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v9);
    NSComparisonResult v10 = v44;
    if (v44)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v10 + 16));
      uint64_t v11 = *(void *)(v10 + 16);
      if (v11)
      {
        outlined retain of LocalePreferences?((uint64_t)v62, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v12 = v10 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v12 += 16;
          --v11;
        }
        while (v11);
        swift_bridgeObjectRelease();
        if (!v45)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          if (!v46) {
            goto LABEL_17;
          }
          goto LABEL_24;
        }
LABEL_23:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v46)
        {
LABEL_17:
          Hasher._combine(_:)(0);
          uint64_t v13 = v47;
          if (!v47) {
            goto LABEL_18;
          }
          goto LABEL_25;
        }
LABEL_24:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v13 = v47;
        if (!v47)
        {
LABEL_18:
          Hasher._combine(_:)(0);
          uint64_t v14 = v48;
          if (!v48)
          {
LABEL_19:
            Hasher._combine(_:)(0);
            goto LABEL_27;
          }
LABEL_26:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)((uint64_t)v64, v14);
          swift_bridgeObjectRelease();
LABEL_27:
          unint64_t v17 = v49;
          char v16 = v50;
          unint64_t v19 = v51;
          unint64_t v18 = v52;
          unint64_t v20 = v53;
          if (v49)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            unint64_t v21 = v16;
            unint64_t v22 = v19;
            unint64_t v23 = v18;
            unint64_t v24 = v20;
            uint64_t v25 = v17;
            _CFObject.hash(into:)();
            if (v16) {
              goto LABEL_29;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            unint64_t v30 = v20;
            unint64_t v31 = v16;
            unint64_t v32 = v19;
            NSComparisonResult v33 = v18;
            if (v16)
            {
LABEL_29:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              uint64_t v26 = v16;
              _CFObject.hash(into:)();

              if (v19) {
                goto LABEL_30;
              }
              goto LABEL_35;
            }
          }
          Hasher._combine(_:)(0);
          if (v19)
          {
LABEL_30:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            unint64_t v27 = v19;
            _CFObject.hash(into:)();

            if (v18) {
              goto LABEL_31;
            }
            goto LABEL_36;
          }
LABEL_35:
          Hasher._combine(_:)(0);
          if (v18)
          {
LABEL_31:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            unint64_t v28 = v18;
            _CFObject.hash(into:)();

            if (v20)
            {
LABEL_32:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              unint64_t v29 = v20;
              _CFObject.hash(into:)();

              goto LABEL_38;
            }
LABEL_37:
            Hasher._combine(_:)(0);
            unint64_t v29 = 0;
LABEL_38:

            char v34 = v54;
            if (v34)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)((uint64_t)v64, v34);
              swift_bridgeObjectRelease();
              uint64_t v35 = v55;
              if (v55) {
                goto LABEL_40;
              }
            }
            else
            {
              Hasher._combine(_:)(0);
              uint64_t v35 = v55;
              if (v55)
              {
LABEL_40:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)((uint64_t)v64, v35);
                swift_bridgeObjectRelease();
                if (v56)
                {
LABEL_41:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_45:
                  if (v57 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    __int16 v36 = v57 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v36);
                  }
                  if (v58 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    unint64_t v37 = v58 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v37);
                  }
                  if (v59 == 2)
                  {
                    unint64_t v38 = 0;
                  }
                  else
                  {
                    unint64_t v38 = v59 & 1;
                    Hasher._combine(_:)(1u);
                  }
                  Hasher._combine(_:)(v38);
                  if (v60 == 2)
                  {
                    unint64_t v39 = 0;
                  }
                  else
                  {
                    unsigned int v40 = v60 & 1;
                    Hasher._combine(_:)(1u);
                    unint64_t v39 = v40;
                  }
                  Hasher._combine(_:)(v39);
                  outlined retain of LocalePreferences?((uint64_t)v62, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?((uint64_t)v62, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  goto LABEL_58;
                }
LABEL_44:
                Hasher._combine(_:)(0);
                goto LABEL_45;
              }
            }
            Hasher._combine(_:)(0);
            if (v56) {
              goto LABEL_41;
            }
            goto LABEL_44;
          }
LABEL_36:
          Hasher._combine(_:)(0);
          if (v20) {
            goto LABEL_32;
          }
          goto LABEL_37;
        }
LABEL_25:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)((uint64_t)v64, v13);
        swift_bridgeObjectRelease();
        uint64_t v14 = v48;
        if (!v48) {
          goto LABEL_19;
        }
        goto LABEL_26;
      }
      outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v42);
      int v15 = v42;
    }
    else
    {
      Hasher._combine(_:)(0);
      int v15 = v43;
    }
    outlined retain of LocalePreferences(v15);
    if (!v45) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  Hasher._combine(_:)(0);
LABEL_59:
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

NSComparisonResult protocol witness for SortComparator.compare(_:_:) in conformance String.Comparator(uint64_t *a1, Swift::String *a2)
{
  Swift::UInt v2 = (void *)a1[1];
  Swift::String v3 = *a2;
  v4._uint64_t countAndFlagsBits = *a1;
  v4._object = v2;
  return String.Comparator.compare(_:_:)(v4, v3);
}

uint64_t protocol witness for SortComparator.order.getter in conformance String.Comparator()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t protocol witness for SortComparator.order.setter in conformance String.Comparator(uint64_t result)
{
  *(unsigned char *)(v1 + 24) = result & 1;
  return result;
}

uint64_t (*protocol witness for SortComparator.order.modify in conformance String.Comparator())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.Comparator@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return String.Comparator.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.Comparator(void *a1)
{
  return String.Comparator.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.Comparator()
{
  void (*v8)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  Swift::UInt v35;
  Swift::UInt v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  char v58;
  void v59[18];
  unsigned char v60[144];
  unsigned char v61[144];
  unsigned char v62[80];

  Swift::UInt v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  Swift::UInt v4 = *(unsigned __int8 *)(v0 + 24);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
    swift_unknownObjectRetain_n();
    if (v6(ObjectType, v3))
    {
      Swift::UInt8 v7 = 1;
LABEL_7:
      Hasher._combine(_:)(v7);
LABEL_57:
      swift_unknownObjectRelease_n();
      goto LABEL_58;
    }
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v8 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 464);
    swift_unknownObjectRetain();
    v8(v59, ObjectType, v3);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v59, (uint64_t)v60);
    outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v61);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v61) == 1)
    {
      Swift::UInt8 v7 = 0;
      goto LABEL_7;
    }
    outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)&v41);
    Hasher._combine(_:)(1u);
    if (v41 == 2)
    {
      char v9 = 0;
    }
    else
    {
      char v9 = v41 & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v9);
    NSComparisonResult v10 = v42;
    if (v42)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v10 + 16));
      uint64_t v11 = *(void *)(v10 + 16);
      if (v11)
      {
        outlined retain of LocalePreferences?((uint64_t)v60, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v12 = v10 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v12 += 16;
          --v11;
        }
        while (v11);
        swift_bridgeObjectRelease();
        if (!v43)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          if (!v44) {
            goto LABEL_17;
          }
          goto LABEL_23;
        }
LABEL_22:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v44)
        {
LABEL_17:
          Hasher._combine(_:)(0);
          uint64_t v13 = v45;
          if (!v45) {
            goto LABEL_18;
          }
          goto LABEL_24;
        }
LABEL_23:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v13 = v45;
        if (!v45)
        {
LABEL_18:
          Hasher._combine(_:)(0);
          uint64_t v14 = v46;
          if (!v46)
          {
LABEL_19:
            Hasher._combine(_:)(0);
            goto LABEL_26;
          }
LABEL_25:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)((uint64_t)v62, v14);
          swift_bridgeObjectRelease();
LABEL_26:
          char v16 = v47;
          int v15 = v48;
          unint64_t v18 = v49;
          unint64_t v17 = v50;
          unint64_t v19 = v51;
          if (v47)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            unint64_t v20 = v15;
            unint64_t v21 = v18;
            unint64_t v22 = v17;
            unint64_t v23 = v19;
            unint64_t v24 = v16;
            _CFObject.hash(into:)();
            if (v15) {
              goto LABEL_28;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            unint64_t v29 = v19;
            unint64_t v30 = v15;
            unint64_t v31 = v18;
            unint64_t v32 = v17;
            if (v15)
            {
LABEL_28:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              uint64_t v25 = v15;
              _CFObject.hash(into:)();

              if (v18) {
                goto LABEL_29;
              }
              goto LABEL_34;
            }
          }
          Hasher._combine(_:)(0);
          if (v18)
          {
LABEL_29:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            uint64_t v26 = v18;
            _CFObject.hash(into:)();

            if (v17) {
              goto LABEL_30;
            }
            goto LABEL_35;
          }
LABEL_34:
          Hasher._combine(_:)(0);
          if (v17)
          {
LABEL_30:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            unint64_t v27 = v17;
            _CFObject.hash(into:)();

            if (v19)
            {
LABEL_31:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              unint64_t v28 = v19;
              _CFObject.hash(into:)();

              goto LABEL_37;
            }
LABEL_36:
            Hasher._combine(_:)(0);
            unint64_t v28 = 0;
LABEL_37:

            NSComparisonResult v33 = v52;
            if (v33)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)((uint64_t)v62, v33);
              swift_bridgeObjectRelease();
              char v34 = v53;
              if (v53) {
                goto LABEL_39;
              }
            }
            else
            {
              Hasher._combine(_:)(0);
              char v34 = v53;
              if (v53)
              {
LABEL_39:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)((uint64_t)v62, v34);
                swift_bridgeObjectRelease();
                if (v54)
                {
LABEL_40:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_44:
                  if (v55 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    uint64_t v35 = v55 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v35);
                  }
                  if (v56 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    __int16 v36 = v56 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v36);
                  }
                  if (v57 == 2)
                  {
                    unint64_t v37 = 0;
                  }
                  else
                  {
                    unint64_t v37 = v57 & 1;
                    Hasher._combine(_:)(1u);
                  }
                  Hasher._combine(_:)(v37);
                  if (v58 == 2)
                  {
                    unint64_t v38 = 0;
                  }
                  else
                  {
                    unint64_t v39 = v58 & 1;
                    Hasher._combine(_:)(1u);
                    unint64_t v38 = v39;
                  }
                  Hasher._combine(_:)(v38);
                  outlined retain of LocalePreferences?((uint64_t)v60, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?((uint64_t)v60, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  goto LABEL_57;
                }
LABEL_43:
                Hasher._combine(_:)(0);
                goto LABEL_44;
              }
            }
            Hasher._combine(_:)(0);
            if (v54) {
              goto LABEL_40;
            }
            goto LABEL_43;
          }
LABEL_35:
          Hasher._combine(_:)(0);
          if (v19) {
            goto LABEL_31;
          }
          goto LABEL_36;
        }
LABEL_24:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)((uint64_t)v62, v13);
        swift_bridgeObjectRelease();
        uint64_t v14 = v46;
        if (!v46) {
          goto LABEL_19;
        }
        goto LABEL_25;
      }
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    outlined retain of LocalePreferences(&v41);
    if (!v43) {
      goto LABEL_16;
    }
    goto LABEL_22;
  }
  Hasher._combine(_:)(0);
LABEL_58:
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t static SortComparator<>.localizedStandard.getter@<X0>(uint64_t a1@<X8>)
{
  return static SortComparator<>.localizedStandard.getter(833, a1);
}

uint64_t static SortComparator<>.localized.getter@<X0>(uint64_t a1@<X8>)
{
  return static SortComparator<>.localizedStandard.getter(0, a1);
}

uint64_t static SortComparator<>.localizedStandard.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t result = LocaleCache.current.getter();
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = result;
  *(void *)(a2 + 16) = v5;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

uint64_t specialized _StringCompareOptionsIterable.consumeNumbers(from:initialValue:)(unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v38 = a3;
  uint64_t v11 = type metadata accessor for Unicode.Scalar.Properties();
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = *a1;
  unint64_t v39 = a4;
  unint64_t v37 = a4 >> 14;
  if (a4 >> 14 > v15 >> 14)
  {
    uint64_t v34 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v35 = a6 & 0xFFFFFFFFFFFFFFLL;
    char v16 = (uint64_t (**)(char *, uint64_t))(v12 + 8);
    uint64_t v17 = (a5 >> 59) & 1;
    if ((a6 & 0x1000000000000000) == 0) {
      LOBYTE(v17) = 1;
    }
    uint64_t v18 = 4 << v17;
    v33[0] = a5 & 0xFFFFFFFFFFFFLL;
    v33[1] = HIBYTE(a6) & 0xF;
    if ((a6 & 0x2000000000000000) != 0) {
      uint64_t v19 = HIBYTE(a6) & 0xF;
    }
    else {
      uint64_t v19 = a5 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v36 = v19;
    while (1)
    {
      _StringGuts.validateScalarIndex(_:in:)(v15, v38, v39, a5, a6);
      if ((a6 & 0x1000000000000000) != 0)
      {
        _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a6 & 0x2000000000000000) != 0)
        {
          unint64_t v40 = a5;
          uint64_t v41 = v35;
        }
        else if ((a5 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        _decodeScalar(_:startingAt:)();
      }
      Unicode.Scalar.properties.getter();
      double v20 = COERCE_DOUBLE(Unicode.Scalar.Properties.numericValue.getter());
      char v22 = v21;
      uint64_t result = (*v16)(v14, v11);
      if (v22) {
        return a2;
      }
      if ((~*(void *)&v20 & 0x7FF0000000000000) == 0)
      {
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
        return result;
      }
      if (v20 <= -9.22337204e18) {
        goto LABEL_44;
      }
      if (v20 >= 9.22337204e18) {
        goto LABEL_45;
      }
      uint64_t v24 = 10 * a2;
      if ((unsigned __int128)(a2 * (__int128)10) >> 64 != (10 * a2) >> 63) {
        return a2;
      }
      uint64_t v25 = v24 + (uint64_t)v20;
      if (__OFADD__(v24, (uint64_t)v20)) {
        return a2;
      }
      unint64_t v26 = *a1;
      uint64_t v27 = *a1 & 0xC;
      if (v27 != v18 && (v26 & 1) != 0) {
        break;
      }
      if (v27 == v18)
      {
        uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(*a1, a5, a6);
        unint64_t v26 = result;
      }
      if (v36 <= v26 >> 16) {
        goto LABEL_47;
      }
      if (v26) {
        goto LABEL_31;
      }
      unint64_t v26 = v26 & 0xC | _StringGuts.scalarAlignSlow(_:)(v26, a5, a6) & 0xFFFFFFFFFFFFFFF3 | 1;
      if ((a6 & 0x1000000000000000) == 0)
      {
LABEL_32:
        unint64_t v28 = v26 >> 16;
        if ((a6 & 0x2000000000000000) != 0)
        {
          unint64_t v40 = a5;
          uint64_t v41 = v35;
          int v30 = *((unsigned __int8 *)&v40 + v28);
        }
        else
        {
          uint64_t v29 = v34;
          if ((a5 & 0x1000000000000000) == 0) {
            uint64_t v29 = _StringObject.sharedUTF8.getter();
          }
          int v30 = *(unsigned __int8 *)(v29 + v28);
        }
        int v31 = (char)v30;
        unsigned int v32 = __clz(v30 ^ 0xFF) - 24;
        if (v31 >= 0) {
          LOBYTE(v32) = 1;
        }
        unint64_t v15 = ((v28 + v32) << 16) | 5;
        goto LABEL_9;
      }
LABEL_8:
      unint64_t v15 = String.UnicodeScalarView._foreignIndex(after:)();
LABEL_9:
      *a1 = v15;
      a2 = v25;
      if (v37 <= v15 >> 14) {
        return a2;
      }
    }
    if (v36 <= v26 >> 16) {
      goto LABEL_46;
    }
LABEL_31:
    if ((a6 & 0x1000000000000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_8;
  }
  return a2;
}

unint64_t specialized _StringCompareOptionsIterable._consumeExtendCharacters(from:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v4 = 4 * v3;
  if ((unint64_t)(4 * v3) > *(void *)result >> 14)
  {
    uint64_t v5 = (void *)result;
    do
    {
      unint64_t v6 = String.subscript.getter();
      char v8 = Character.isExtendCharacter.getter(v6, v7);
      uint64_t result = swift_bridgeObjectRelease();
      if ((v8 & 1) == 0) {
        break;
      }
      uint64_t result = String.index(after:)();
      *uint64_t v5 = result;
    }
    while (v4 > result >> 14);
  }
  return result;
}

{
  unint64_t v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  uint64_t v3 = a3 >> 14;
  if (a3 >> 14 > *(void *)result >> 14)
  {
    unint64_t v4 = (void *)result;
    uint64_t v5 = Substring.subscript.getter();
    unint64_t v7 = Character.isExtendCharacter.getter(v5, v6);
    uint64_t result = swift_bridgeObjectRelease();
    if (v7)
    {
      do
      {
        uint64_t result = Substring.index(after:)();
        char v8 = result;
        if (v3 <= result >> 14) {
          break;
        }
        char v9 = Substring.subscript.getter();
        uint64_t v11 = Character.isExtendCharacter.getter(v9, v10);
        uint64_t result = swift_bridgeObjectRelease();
      }
      while ((v11 & 1) != 0);
      uint64_t *v4 = v8;
    }
  }
  return result;
}

unint64_t specialized _StringCompareOptionsIterable._consumeExtendCharacters(from:)(unint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if ((a3 & 0x2000000000000000) != 0) {
    unint64_t v4 = HIBYTE(a3) & 0xF;
  }
  else {
    unint64_t v4 = a2 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t result = *a1;
  if (4 * v4 > result >> 14)
  {
    uint64_t v8 = (a2 >> 59) & 1;
    if ((a3 & 0x1000000000000000) == 0) {
      LOBYTE(v8) = 1;
    }
    uint64_t v9 = 4 << v8;
    uint64_t v20 = a3 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v10 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
    while (1)
    {
      if ((result & 0xC) == v9 || (result & 1) == 0)
      {
        if ((result & 0xC) == v9) {
          unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
        }
        if (result >> 16 >= v4)
        {
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
        }
        if ((result & 1) == 0) {
          _StringGuts.scalarAlignSlow(_:)(result, a2, a3);
        }
      }
      else if (result >> 16 >= v4)
      {
        goto LABEL_53;
      }
      if ((a3 & 0x1000000000000000) != 0)
      {
        unint64_t result = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a3 & 0x2000000000000000) != 0)
        {
          unint64_t v21 = a2;
          uint64_t v22 = v20;
        }
        else if ((a2 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        unint64_t result = _decodeScalar(_:startingAt:)();
      }
      if (BYTE2(result) > 0xEu) {
        return result;
      }
      uint64_t v12 = (uint64_t)*(&__CFUniCharGraphemeExtendCharacterSetBitmap_0 + BYTE2(result));
      if (!v12 || ((*(unsigned __int8 *)(v12 + ((unsigned __int16)result >> 3)) >> (result & 7)) & 1) == 0) {
        return result;
      }
      unint64_t v13 = *a1;
      uint64_t v14 = *a1 & 0xC;
      if (v14 != v9 && (v13 & 1) != 0) {
        break;
      }
      if (v14 == v9)
      {
        unint64_t v13 = _StringGuts._slowEnsureMatchingEncoding(_:)(*a1, a2, a3);
        if (v4 <= v13 >> 16) {
          goto LABEL_55;
        }
      }
      else if (v4 <= v13 >> 16)
      {
        goto LABEL_55;
      }
      if (v13) {
        goto LABEL_37;
      }
      unint64_t v13 = v13 & 0xC | _StringGuts.scalarAlignSlow(_:)(v13, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
      if ((a3 & 0x1000000000000000) == 0)
      {
LABEL_38:
        unint64_t v15 = v13 >> 16;
        if ((a3 & 0x2000000000000000) != 0)
        {
          unint64_t v21 = a2;
          uint64_t v22 = v20;
          int v17 = *((unsigned __int8 *)&v21 + v15);
        }
        else
        {
          uint64_t v16 = v10;
          if ((a2 & 0x1000000000000000) == 0) {
            uint64_t v16 = _StringObject.sharedUTF8.getter();
          }
          int v17 = *(unsigned __int8 *)(v16 + v15);
        }
        int v18 = (char)v17;
        unsigned int v19 = __clz(v17 ^ 0xFF) - 24;
        if (v18 >= 0) {
          LOBYTE(v19) = 1;
        }
        unint64_t result = ((v15 + v19) << 16) | 5;
        goto LABEL_9;
      }
LABEL_8:
      unint64_t result = String.UnicodeScalarView._foreignIndex(after:)();
LABEL_9:
      *a1 = result;
      if (4 * v4 <= result >> 14) {
        return result;
      }
    }
    if (v4 <= v13 >> 16) {
      goto LABEL_54;
    }
LABEL_37:
    if ((a3 & 0x1000000000000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_8;
  }
  return result;
}

unint64_t specialized _StringCompareOptionsIterable._consumeExtendCharacters(from:)(unint64_t *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = a3 >> 14;
  unint64_t result = *a1;
  if (a3 >> 14 > result >> 14)
  {
    uint64_t v24 = a5 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v12 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v13 = (a4 >> 59) & 1;
    if ((a5 & 0x1000000000000000) == 0) {
      LOBYTE(v13) = 1;
    }
    uint64_t v14 = 4 << v13;
    if ((a5 & 0x2000000000000000) != 0) {
      unint64_t v15 = HIBYTE(a5) & 0xF;
    }
    else {
      unint64_t v15 = a4 & 0xFFFFFFFFFFFFLL;
    }
    while (1)
    {
      _StringGuts.validateScalarIndex(_:in:)(result, a2, a3, a4, a5);
      if ((a5 & 0x1000000000000000) != 0)
      {
        unint64_t result = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a5 & 0x2000000000000000) != 0)
        {
          unint64_t v25 = a4;
          uint64_t v26 = v24;
        }
        else if ((a4 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        unint64_t result = _decodeScalar(_:startingAt:)();
      }
      if (BYTE2(result) > 0xEu) {
        return result;
      }
      uint64_t v16 = (uint64_t)*(&__CFUniCharGraphemeExtendCharacterSetBitmap_0 + BYTE2(result));
      if (!v16 || ((*(unsigned __int8 *)(v16 + ((unsigned __int16)result >> 3)) >> (result & 7)) & 1) == 0) {
        return result;
      }
      unint64_t v17 = *a1;
      uint64_t v18 = *a1 & 0xC;
      if (v18 != v14 && (v17 & 1) != 0) {
        break;
      }
      if (v18 == v14)
      {
        unint64_t v17 = _StringGuts._slowEnsureMatchingEncoding(_:)(*a1, a4, a5);
        if (v15 <= v17 >> 16) {
          goto LABEL_40;
        }
      }
      else if (v15 <= v17 >> 16)
      {
        goto LABEL_40;
      }
      if (v17) {
        goto LABEL_26;
      }
      unint64_t v17 = v17 & 0xC | _StringGuts.scalarAlignSlow(_:)(v17, a4, a5) & 0xFFFFFFFFFFFFFFF3 | 1;
      if ((a5 & 0x1000000000000000) == 0)
      {
LABEL_27:
        unint64_t v19 = v17 >> 16;
        if ((a5 & 0x2000000000000000) != 0)
        {
          unint64_t v25 = a4;
          uint64_t v26 = v24;
          int v21 = *((unsigned __int8 *)&v25 + v19);
        }
        else
        {
          uint64_t v20 = v12;
          if ((a4 & 0x1000000000000000) == 0) {
            uint64_t v20 = _StringObject.sharedUTF8.getter();
          }
          int v21 = *(unsigned __int8 *)(v20 + v19);
        }
        int v22 = (char)v21;
        unsigned int v23 = __clz(v21 ^ 0xFF) - 24;
        if (v22 >= 0) {
          LOBYTE(v23) = 1;
        }
        unint64_t result = ((v19 + v23) << 16) | 5;
        goto LABEL_8;
      }
LABEL_7:
      unint64_t result = String.UnicodeScalarView._foreignIndex(after:)();
LABEL_8:
      *a1 = result;
      if (v6 <= result >> 14) {
        return result;
      }
    }
    if (v15 <= v17 >> 16)
    {
      __break(1u);
LABEL_40:
      __break(1u);
    }
LABEL_26:
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_7;
  }
  return result;
}

uint64_t specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int a5, int a6, int a7, int a8, unsigned __int8 a9, unint64_t a10, unint64_t a11, unint64_t a12, unint64_t a13)
{
  int v142 = a8;
  int v133 = a7;
  int v145 = a6;
  int v132 = a5;
  unint64_t v18 = a12;
  unint64_t v17 = a13;
  uint64_t v124 = type metadata accessor for Unicode.Scalar.Properties();
  MEMORY[0x1F4188790](v124);
  uint64_t v122 = (char *)&v115 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v123 = (char *)&v115 - v22;
  unint64_t v154 = a1;
  unint64_t v155 = a10;
  unint64_t v151 = 0;
  unint64_t v152 = 0xE000000000000000;
  unint64_t v153 = 15;
  unint64_t v148 = 0;
  unint64_t v149 = 0xE000000000000000;
  unint64_t v135 = a11;
  unint64_t v150 = 15;
  unint64_t v139 = a10;
  unint64_t v23 = a10;
  unint64_t v141 = a1;
  uint64_t v143 = 0;
  unint64_t v144 = a11 >> 14;
  unint64_t v134 = a10 >> 14;
  if (a10 >> 14 < a11 >> 14)
  {
    unint64_t v24 = v141;
    unint64_t v140 = a2 >> 14;
    if (a2 >> 14 > v141 >> 14)
    {
      uint64_t v143 = 0;
      uint64_t v120 = HIBYTE(a13) & 0xF;
      int v131 = a9;
      uint64_t v128 = a13 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v127 = (a13 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v119 = a12 & 0xFFFFFFFFFFFFLL;
      uint64_t v118 = HIBYTE(a4) & 0xF;
      uint64_t v126 = a4 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v125 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v117 = a3 & 0xFFFFFFFFFFFFLL;
      uint64_t v116 = (uint64_t (**)(char *, uint64_t))(v21 + 8);
      int v130 = v132 | v145 | v133;
      unint64_t v23 = v139;
      unint64_t v121 = a2;
      unint64_t v137 = a13;
      unint64_t v138 = a3;
      unint64_t v136 = a12;
      unint64_t v129 = a4;
      while (1)
      {
        unint64_t v25 = HIBYTE(v152) & 0xF;
        if ((v152 & 0x2000000000000000) == 0) {
          unint64_t v25 = v151 & 0xFFFFFFFFFFFFLL;
        }
        if (v25)
        {
          uint64_t v26 = specialized _StringCompareOptionsIterableBuffer.current.getter(v151, v152, v153);
          specialized _StringCompareOptionsIterableBuffer.advance()();
        }
        else
        {
          _StringGuts.validateScalarIndex(_:in:)(v23, v139, v135, v18, v17);
          if ((v17 & 0x1000000000000000) != 0)
          {
            uint64_t v27 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
          }
          else
          {
            if ((v17 & 0x2000000000000000) != 0)
            {
              unint64_t v146 = v18;
              uint64_t v147 = v128;
            }
            else if ((v18 & 0x1000000000000000) == 0)
            {
              _StringObject.sharedUTF8.getter();
            }
            uint64_t v27 = _decodeScalar(_:startingAt:)();
          }
          uint64_t v26 = v27;
        }
        unint64_t v28 = HIBYTE(v149) & 0xF;
        if ((v149 & 0x2000000000000000) == 0) {
          unint64_t v28 = v148 & 0xFFFFFFFFFFFFLL;
        }
        if (v28)
        {
          uint64_t v29 = specialized _StringCompareOptionsIterableBuffer.current.getter(v148, v149, v150);
          specialized _StringCompareOptionsIterableBuffer.advance()();
          if ((v142 & 1) == 0) {
            break;
          }
        }
        else
        {
          _StringGuts.validateScalarIndex(_:in:)(v24, v141, a2, a3, a4);
          if ((a4 & 0x1000000000000000) != 0)
          {
            uint64_t v30 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
          }
          else
          {
            if ((a4 & 0x2000000000000000) != 0)
            {
              unint64_t v146 = a3;
              uint64_t v147 = v126;
            }
            else if ((a3 & 0x1000000000000000) == 0)
            {
              _StringObject.sharedUTF8.getter();
            }
            uint64_t v30 = _decodeScalar(_:startingAt:)();
          }
          uint64_t v29 = v30;
          if ((v142 & 1) == 0) {
            break;
          }
        }
        unint64_t v31 = v151 & 0xFFFFFFFFFFFFLL;
        if ((v152 & 0x2000000000000000) != 0) {
          unint64_t v31 = HIBYTE(v152) & 0xF;
        }
        if (v31) {
          break;
        }
        unint64_t v32 = v148 & 0xFFFFFFFFFFFFLL;
        if ((v149 & 0x2000000000000000) != 0) {
          unint64_t v32 = HIBYTE(v149) & 0xF;
        }
        if (v32) {
          break;
        }
        NSComparisonResult v33 = v123;
        Unicode.Scalar.properties.getter();
        double v34 = COERCE_DOUBLE(Unicode.Scalar.Properties.numericValue.getter());
        char v36 = v35;
        uint64_t v115 = *v116;
        uint64_t result = v115(v33, v124);
        if (v36) {
          break;
        }
        if ((~*(void *)&v34 & 0x7FF0000000000000) == 0)
        {
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          __break(1u);
LABEL_198:
          __break(1u);
LABEL_199:
          __break(1u);
LABEL_200:
          __break(1u);
          return result;
        }
        if (v34 <= -9.22337204e18) {
          goto LABEL_196;
        }
        if (v34 >= 9.22337204e18) {
          goto LABEL_197;
        }
        unint64_t v38 = v122;
        Unicode.Scalar.properties.getter();
        double v39 = COERCE_DOUBLE(Unicode.Scalar.Properties.numericValue.getter());
        char v41 = v40;
        uint64_t result = v115(v38, v124);
        if (v41) {
          break;
        }
        if ((~*(void *)&v39 & 0x7FF0000000000000) == 0) {
          goto LABEL_198;
        }
        if (v39 <= -9.22337204e18) {
          goto LABEL_199;
        }
        if (v39 >= 9.22337204e18) {
          goto LABEL_200;
        }
        uint64_t v42 = specialized _StringCompareOptionsIterable.consumeNumbers(from:initialValue:)(&v155, 0, v139, v135, v18, v17);
        uint64_t v43 = specialized _StringCompareOptionsIterable.consumeNumbers(from:initialValue:)(&v154, 0, v141, a2, a3, a4);
        if (v42 != v43)
        {
          if (v42 < v43) {
            uint64_t v112 = -1;
          }
          else {
            uint64_t v112 = v43 < v42;
          }
          goto LABEL_182;
        }
        if (v131)
        {
          uint64_t v44 = String.UnicodeScalarView.distance(from:to:)(v139, v155, v18, v17);
          uint64_t v45 = String.UnicodeScalarView.distance(from:to:)(v141, v154, a3, a4);
          if (v44 != v45)
          {
            if (v44 < v45) {
              uint64_t v110 = -1;
            }
            else {
              uint64_t v110 = v45 < v44;
            }
            uint64_t v143 = v110;
          }
        }
LABEL_153:
        unint64_t v23 = v155;
        if (v144 > v155 >> 14)
        {
          unint64_t v24 = v154;
          if (v140 > v154 >> 14) {
            continue;
          }
        }
        goto LABEL_168;
      }
      if ((v145 & 1) != 0 && v134 < v155 >> 14)
      {
        unint64_t v46 = v151 & 0xFFFFFFFFFFFFLL;
        if ((v152 & 0x2000000000000000) != 0) {
          unint64_t v46 = HIBYTE(v152) & 0xF;
        }
        if (v46)
        {
          BOOL v47 = 0;
        }
        else
        {
          uint64_t v48 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v26), 5);
          BOOL v47 = BuiltInUnicodeScalarSet._isMemberOfBitmap(_:_:)(v26, v48, 0x700030005);
          if (v47) {
            uint64_t v26 = v29;
          }
          else {
            uint64_t v26 = v26;
          }
        }
        unint64_t v49 = v148 & 0xFFFFFFFFFFFFLL;
        if ((v149 & 0x2000000000000000) != 0) {
          unint64_t v49 = HIBYTE(v149) & 0xF;
        }
        if (!v49)
        {
          uint64_t v50 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v29), 5);
          if (BuiltInUnicodeScalarSet._isMemberOfBitmap(_:_:)(v29, v50, 0x700030005))
          {
            if (!v47) {
              Substring.UnicodeScalarView.formIndex(before:)();
            }
            goto LABEL_117;
          }
        }
        if (v47) {
          Substring.UnicodeScalarView.formIndex(before:)();
        }
      }
      if (v26 == v29)
      {
LABEL_117:
        unint64_t v89 = v151;
        unint64_t v88 = v152;
        unint64_t v90 = HIBYTE(v152) & 0xF;
        if ((v152 & 0x2000000000000000) == 0) {
          unint64_t v90 = v151 & 0xFFFFFFFFFFFFLL;
        }
        if (v90 && v153 >> 14 == 4 * v90)
        {
          swift_bridgeObjectRelease();
          unint64_t v89 = 0;
          unint64_t v88 = 0xE000000000000000;
          unint64_t v151 = 0;
          unint64_t v152 = 0xE000000000000000;
          unint64_t v153 = 15;
        }
        unint64_t v92 = v148;
        unint64_t v91 = v149;
        unint64_t v93 = HIBYTE(v149) & 0xF;
        if ((v149 & 0x2000000000000000) == 0) {
          unint64_t v93 = v148 & 0xFFFFFFFFFFFFLL;
        }
        if (v93)
        {
          unint64_t v18 = v136;
          unint64_t v17 = v137;
          if (v150 >> 14 == 4 * v93)
          {
            swift_bridgeObjectRelease();
            unint64_t v92 = 0;
            unint64_t v91 = 0xE000000000000000;
            unint64_t v148 = 0;
            unint64_t v149 = 0xE000000000000000;
            unint64_t v150 = 15;
          }
        }
        else
        {
          unint64_t v18 = v136;
          unint64_t v17 = v137;
        }
        uint64_t v94 = HIBYTE(v88) & 0xF;
        if ((v88 & 0x2000000000000000) == 0) {
          uint64_t v94 = v89 & 0xFFFFFFFFFFFFLL;
        }
        a3 = v138;
        if (!v94)
        {
          unint64_t v95 = _StringGuts.validateScalarIndex(_:)(v155, v18, v17);
          if ((v17 & 0x1000000000000000) != 0)
          {
            uint64_t v101 = String.UnicodeScalarView._foreignIndex(after:)();
          }
          else
          {
            unint64_t v96 = v95 >> 16;
            if ((v17 & 0x2000000000000000) != 0)
            {
              unint64_t v146 = v18;
              uint64_t v147 = v128;
              int v98 = *((unsigned __int8 *)&v146 + v96);
            }
            else
            {
              uint64_t v97 = v127;
              if ((v18 & 0x1000000000000000) == 0) {
                uint64_t v97 = _StringObject.sharedUTF8.getter();
              }
              int v98 = *(unsigned __int8 *)(v97 + v96);
            }
            int v99 = (char)v98;
            unsigned int v100 = __clz(v98 ^ 0xFF) - 24;
            if (v99 >= 0) {
              LOBYTE(v100) = 1;
            }
            uint64_t v101 = ((v96 + v100) << 16) | 5;
          }
          unint64_t v155 = v101;
        }
        uint64_t v102 = HIBYTE(v91) & 0xF;
        if ((v91 & 0x2000000000000000) == 0) {
          uint64_t v102 = v92 & 0xFFFFFFFFFFFFLL;
        }
        if (!v102)
        {
          unint64_t v103 = _StringGuts.validateScalarIndex(_:)(v154, a3, a4);
          if ((a4 & 0x1000000000000000) != 0)
          {
            unint64_t v154 = String.UnicodeScalarView._foreignIndex(after:)();
          }
          else
          {
            unint64_t v104 = v103 >> 16;
            if ((a4 & 0x2000000000000000) != 0)
            {
              unint64_t v146 = a3;
              uint64_t v147 = v126;
              int v106 = *((unsigned __int8 *)&v146 + v104);
            }
            else
            {
              uint64_t v105 = v125;
              if ((a3 & 0x1000000000000000) == 0) {
                uint64_t v105 = _StringObject.sharedUTF8.getter();
              }
              int v106 = *(unsigned __int8 *)(v105 + v104);
            }
            int v107 = (char)v106;
            unsigned int v108 = __clz(v106 ^ 0xFF) - 24;
            if (v107 >= 0) {
              LOBYTE(v108) = 1;
            }
            unint64_t v154 = ((v104 + v108) << 16) | 5;
          }
        }
        goto LABEL_153;
      }
      if ((v130 & 1) == 0)
      {
        if (v26 < v29) {
          uint64_t v112 = -1;
        }
        else {
          uint64_t v112 = v29 < v26;
        }
LABEL_182:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v112;
      }
      if ((v131 & 1) != 0 && !v143)
      {
        if (v26 >= v29) {
          uint64_t v51 = v29 < v26;
        }
        else {
          uint64_t v51 = -1;
        }
        uint64_t v143 = v51;
      }
      unint64_t v53 = v151;
      unint64_t v52 = v152;
      unint64_t v54 = v152 & 0x2000000000000000;
      unint64_t v55 = HIBYTE(v152) & 0xF;
      unint64_t v56 = v151 & 0xFFFFFFFFFFFFLL;
      if ((v152 & 0x2000000000000000) != 0) {
        unint64_t v57 = HIBYTE(v152) & 0xF;
      }
      else {
        unint64_t v57 = v151 & 0xFFFFFFFFFFFFLL;
      }
      if (v57)
      {
        unint64_t v58 = v152;
      }
      else
      {
        unint64_t v59 = Unicode.Scalar._transform(toHalfWidth:stripDiacritics:caseFolding:)(v132 & 1, v145 & 1, v133 & 1, v26);
        unint64_t v58 = v60;
        unint64_t v61 = specialized Collection.first.getter(v59, v60);
        if ((v61 & 0x100000000) != 0)
        {
          swift_bridgeObjectRelease();
          unint64_t v58 = v52;
        }
        else
        {
          int v62 = v61;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          unint64_t v151 = v59;
          unint64_t v152 = v58;
          unint64_t v153 = 15;
          specialized _StringCompareOptionsIterableBuffer.advance()();
          swift_bridgeObjectRelease();
          unint64_t v54 = v58 & 0x2000000000000000;
          unint64_t v55 = HIBYTE(v58) & 0xF;
          unint64_t v56 = v59 & 0xFFFFFFFFFFFFLL;
          LODWORD(v26) = v62;
          unint64_t v53 = v59;
        }
        a2 = v121;
      }
      if (!v54) {
        unint64_t v55 = v56;
      }
      unint64_t v64 = v148;
      unint64_t v63 = v149;
      unint64_t v65 = v149 & 0x2000000000000000;
      unint64_t v66 = HIBYTE(v149) & 0xF;
      unint64_t v67 = v148 & 0xFFFFFFFFFFFFLL;
      if (!v55)
      {
        if (v65 ? HIBYTE(v149) & 0xF : v148 & 0xFFFFFFFFFFFFLL)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v26 >= v29) {
            return v29 < v26;
          }
          else {
            return -1;
          }
        }
      }
      if (v65) {
        unint64_t v69 = HIBYTE(v149) & 0xF;
      }
      else {
        unint64_t v69 = v148 & 0xFFFFFFFFFFFFLL;
      }
      if (v69)
      {
        if (v55) {
          goto LABEL_93;
        }
      }
      else
      {
        if (v55 && v26 == v29) {
          goto LABEL_96;
        }
        unint64_t v82 = Unicode.Scalar._transform(toHalfWidth:stripDiacritics:caseFolding:)(v132 & 1, v145 & 1, v133 & 1, v29);
        unint64_t v84 = v83;
        unint64_t v85 = specialized Collection.first.getter(v82, v83);
        if ((v85 & 0x100000000) == 0)
        {
          int v86 = v85;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          unint64_t v148 = v82;
          unint64_t v149 = v84;
          unint64_t v150 = 15;
          specialized _StringCompareOptionsIterableBuffer.advance()();
          LODWORD(v29) = v86;
        }
        unint64_t v64 = v148;
        unint64_t v63 = v149;
        swift_bridgeObjectRelease();
        uint64_t v87 = HIBYTE(v63) & 0xF;
        if ((v63 & 0x2000000000000000) == 0) {
          uint64_t v87 = v64 & 0xFFFFFFFFFFFFLL;
        }
        if (!v87 || v26 != v29)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v26 >= v29) {
            return v29 < v26;
          }
          else {
            return -1;
          }
        }
        a2 = v121;
        if (v55)
        {
LABEL_93:
          unint64_t v65 = v63 & 0x2000000000000000;
          unint64_t v66 = HIBYTE(v63) & 0xF;
          unint64_t v67 = v64 & 0xFFFFFFFFFFFFLL;
LABEL_96:
          if (v65) {
            unint64_t v70 = v66;
          }
          else {
            unint64_t v70 = v67;
          }
          if (v70)
          {
            uint64_t v71 = 4 * v55;
            unint64_t v72 = v153;
            if (4 * v55 != v153 >> 14)
            {
              a4 = v129;
              while (1)
              {
                unint64_t v74 = v148;
                unint64_t v73 = v149;
                unint64_t v75 = v150;
                unint64_t v76 = v149 & 0x2000000000000000;
                unint64_t v77 = HIBYTE(v149) & 0xF;
                unint64_t v78 = v148 & 0xFFFFFFFFFFFFLL;
                unint64_t v79 = (v149 & 0x2000000000000000) != 0 ? HIBYTE(v149) & 0xF : v148 & 0xFFFFFFFFFFFFLL;
                unint64_t v80 = v150 >> 14;
                if (v150 >> 14 == 4 * v79) {
                  break;
                }
                int v81 = specialized _StringCompareOptionsIterableBuffer.current.getter(v53, v58, v72);
                if (v81 != specialized _StringCompareOptionsIterableBuffer.current.getter(v74, v73, v75))
                {
                  unint64_t v74 = v148;
                  unint64_t v73 = v149;
                  unint64_t v75 = v150;
                  unint64_t v76 = v149 & 0x2000000000000000;
                  unint64_t v77 = HIBYTE(v149) & 0xF;
                  unint64_t v78 = v148 & 0xFFFFFFFFFFFFLL;
                  unint64_t v80 = v150 >> 14;
                  break;
                }
                specialized _StringCompareOptionsIterableBuffer.advance()();
                specialized _StringCompareOptionsIterableBuffer.advance()();
                unint64_t v72 = v153;
                if (v71 == v153 >> 14) {
                  goto LABEL_117;
                }
              }
              if (v76) {
                unint64_t v109 = v77;
              }
              else {
                unint64_t v109 = v78;
              }
              if (v80 != 4 * v109)
              {
                unsigned int v113 = specialized _StringCompareOptionsIterableBuffer.current.getter(v53, v58, v72);
                unsigned int v114 = specialized _StringCompareOptionsIterableBuffer.current.getter(v74, v73, v75);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v113 < v114) {
                  return -1;
                }
                else {
                  return v114 < v113;
                }
              }
              goto LABEL_117;
            }
          }
        }
      }
      a4 = v129;
      goto LABEL_117;
    }
    uint64_t v143 = 0;
    unint64_t v23 = v139;
  }
LABEL_168:
  if (v145)
  {
    specialized _StringCompareOptionsIterable._consumeExtendCharacters(from:)(&v155, v139, v135, v18, v17);
    specialized _StringCompareOptionsIterable._consumeExtendCharacters(from:)(&v154, v141, a2, a3, a4);
    unint64_t v23 = v155;
  }
  if ((v154 ^ a2) >> 14) {
    uint64_t v111 = -1;
  }
  else {
    uint64_t v111 = 0;
  }
  if (v144 == v23 >> 14) {
    uint64_t v112 = v111;
  }
  else {
    uint64_t v112 = 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v112) {
    return v143;
  }
  return v112;
}

uint64_t specialized _StringCompareOptionsIterableBuffer.current.getter(unint64_t a1, unint64_t a2, unint64_t a3)
{
  _StringGuts.validateScalarIndex(_:)(a3, a1, a2);
  if ((a2 & 0x1000000000000000) != 0)
  {
    return _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
  }
  else
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((a1 & 0x1000000000000000) == 0) {
        _StringObject.sharedUTF8.getter();
      }
    }
    return _decodeScalar(_:startingAt:)();
  }
}

uint64_t specialized _StringCompareOptionsIterableBuffer.advance()()
{
  unint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  unint64_t v3 = _StringGuts.validateScalarIndex(_:)(v0[2], *v0, v1);
  if ((v1 & 0x1000000000000000) != 0)
  {
    uint64_t result = String.UnicodeScalarView._foreignIndex(after:)();
  }
  else
  {
    unint64_t v4 = v3 >> 16;
    if ((v1 & 0x2000000000000000) != 0)
    {
      v10[0] = v2;
      v10[1] = v1 & 0xFFFFFFFFFFFFFFLL;
      int v6 = *((unsigned __int8 *)v10 + v4);
    }
    else
    {
      if ((v2 & 0x1000000000000000) != 0) {
        uint64_t v5 = (v1 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else {
        uint64_t v5 = _StringObject.sharedUTF8.getter();
      }
      int v6 = *(unsigned __int8 *)(v5 + v4);
    }
    int v7 = (char)v6;
    unsigned int v8 = __clz(v6 ^ 0xFF) - 24;
    if (v7 >= 0) {
      LOBYTE(v8) = 1;
    }
    uint64_t result = ((v4 + v8) << 16) | 5;
  }
  v0[2] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Locale? and conformance <A> A?(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Locale?);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized static String.Comparator.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  int v2 = *(unsigned __int8 *)(a1 + 24);
  long long v3 = *(_OWORD *)(a2 + 8);
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if (!*(void *)(a1 + 8))
  {
    if (!(void)v3) {
      return v2 ^ v4 ^ 1u;
    }
    goto LABEL_9;
  }
  long long v8 = *(_OWORD *)(a1 + 8);
  if (!(void)v3)
  {
    swift_unknownObjectRetain();
LABEL_9:
    swift_unknownObjectRelease();
    return 0;
  }
  long long v7 = v3;
  swift_unknownObjectRetain_n();
  char v5 = specialized static Locale.== infix(_:_:)((uint64_t)&v8, (uint64_t)&v7);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (v5) {
    return v2 ^ v4 ^ 1u;
  }
  return 0;
}

unint64_t instantiation function for generic protocol witness table for String.StandardComparator(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type String.StandardComparator and conformance String.StandardComparator();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for String.Comparator(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type String.Comparator and conformance String.Comparator();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type String.Comparator and conformance String.Comparator()
{
  unint64_t result = lazy protocol witness table cache variable for type String.Comparator and conformance String.Comparator;
  if (!lazy protocol witness table cache variable for type String.Comparator and conformance String.Comparator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.Comparator and conformance String.Comparator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.Comparator and conformance String.Comparator;
  if (!lazy protocol witness table cache variable for type String.Comparator and conformance String.Comparator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.Comparator and conformance String.Comparator);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for String.StandardComparator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 10) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

uint64_t destroy for String.Comparator()
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for String.Comparator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for String.Comparator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for String.Comparator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for String.Comparator(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for String.Comparator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for String.Comparator()
{
  return &type metadata for String.Comparator;
}

ValueMetadata *type metadata accessor for String.Comparator.CodingKeys()
{
  return &type metadata for String.Comparator.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for String.Comparator.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181C0DE08);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for String.StandardComparator.CodingKeys()
{
  return &type metadata for String.StandardComparator.CodingKeys;
}

unint64_t specialized String.Comparator.CodingKeys.init(rawValue:)(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 >= 3) {
    return 3;
  }
  else {
    return v5;
  }
}

uint64_t ICULegacyNumberFormatter.__deallocating_deinit()
{
  unum_close();

  return swift_deallocClassInstance();
}

uint64_t initializeBufferWithCopyOfBuffer for ICULegacyNumberFormatter.Signature(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v7 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(void *)a1 = *a2;
      *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
      long long v17 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = v17;
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
      *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
      *(_DWORD *)(a1 + 74) = *(_DWORD *)((char *)a2 + 74);
      *(unsigned char *)(a1 + 78) = *((unsigned char *)a2 + 78);
      unint64_t v18 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      uint64_t v19 = v18[9];
      uint64_t v20 = (void *)(a1 + v19);
      uint64_t v21 = (char *)a2 + v19;
      uint64_t v22 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      uint64_t v28 = v18[10];
      uint64_t v29 = a1 + v28;
      uint64_t v30 = (uint64_t)a2 + v28;
      *(void *)uint64_t v29 = *(void *)v30;
      *(unsigned char *)(v29 + 8) = *(unsigned char *)(v30 + 8);
      *(unsigned char *)(a1 + v18[11]) = *((unsigned char *)a2 + v18[11]);
      *(unsigned char *)(a1 + v18[12]) = *((unsigned char *)a2 + v18[12]);
      goto LABEL_18;
    }
    if (EnumCaseMultiPayload == 1)
    {
      *(void *)a1 = *a2;
      *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
      long long v25 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = v25;
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
      *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
      *(unsigned char *)(a1 + 76) = *((unsigned char *)a2 + 76);
      *(_WORD *)(a1 + 74) = *((_WORD *)a2 + 37);
      *(unsigned char *)(a1 + 77) = *((unsigned char *)a2 + 77);
      uint64_t v10 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v26 = v10[9];
      uint64_t v12 = (void *)(a1 + v26);
      uint64_t v13 = (char *)a2 + v26;
      uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
LABEL_11:
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v12, v13, *(void *)(*(void *)(v27 - 8) + 64));
LABEL_17:
        uint64_t v31 = v10[10];
        uint64_t v32 = a1 + v31;
        uint64_t v33 = (uint64_t)a2 + v31;
        *(void *)uint64_t v32 = *(void *)v33;
        *(unsigned char *)(v32 + 8) = *(unsigned char *)(v33 + 8);
        *(unsigned char *)(a1 + v10[11]) = *((unsigned char *)a2 + v10[11]);
LABEL_18:
        swift_storeEnumTagMultiPayload();
        goto LABEL_19;
      }
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy((void *)a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
LABEL_19:
        uint64_t v34 = *(int *)(a3 + 20);
        uint64_t v35 = *(int *)(a3 + 24);
        char v36 = (void *)(a1 + v34);
        unint64_t v37 = (uint64_t *)((char *)a2 + v34);
        uint64_t v38 = v37[1];
        void *v36 = *v37;
        v36[1] = v38;
        *(unsigned char *)(a1 + v35) = *((unsigned char *)a2 + v35);
        swift_bridgeObjectRetain();
        return a1;
      }
      *(void *)a1 = *a2;
      *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
      long long v9 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = v9;
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
      *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
      *(unsigned char *)(a1 + 76) = *((unsigned char *)a2 + 76);
      *(_WORD *)(a1 + 74) = *((_WORD *)a2 + 37);
      *(unsigned char *)(a1 + 77) = *((unsigned char *)a2 + 77);
      uint64_t v10 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v11 = v10[9];
      uint64_t v12 = (void *)(a1 + v11);
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
        goto LABEL_11;
      }
    }
    (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    goto LABEL_17;
  }
  uint64_t v16 = *a2;
  *(void *)a1 = *a2;
  a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain();
  return a1;
}

char *assignWithCopy for ICULegacyNumberFormatter.Signature(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ICULegacyNumberFormatter.NumberFormatType((uint64_t)a1, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
    uint64_t v6 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        uint64_t v19 = *(void *)a2;
        a1[8] = a2[8];
        *(void *)a1 = v19;
        long long v20 = *((_OWORD *)a2 + 1);
        long long v21 = *((_OWORD *)a2 + 2);
        long long v22 = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        *((_OWORD *)a1 + 2) = v21;
        *((_OWORD *)a1 + 3) = v22;
        *((_OWORD *)a1 + 1) = v20;
        a1[73] = a2[73];
        *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
        a1[78] = a2[78];
        uint64_t v23 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v24 = v23[9];
        long long v25 = &a1[v24];
        uint64_t v26 = &a2[v24];
        uint64_t v27 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v28 = *(void *)(v27 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
        {
          uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
        }
        uint64_t v35 = v23[10];
        char v36 = &a1[v35];
        unint64_t v37 = &a2[v35];
        uint64_t v38 = *(void *)v37;
        v36[8] = v37[8];
        *(void *)char v36 = v38;
        a1[v23[11]] = a2[v23[11]];
        a1[v23[12]] = a2[v23[12]];
        goto LABEL_16;
      case 1:
        uint64_t v30 = *(void *)a2;
        a1[8] = a2[8];
        *(void *)a1 = v30;
        long long v31 = *((_OWORD *)a2 + 1);
        long long v32 = *((_OWORD *)a2 + 2);
        long long v33 = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        *((_OWORD *)a1 + 2) = v32;
        *((_OWORD *)a1 + 3) = v33;
        *((_OWORD *)a1 + 1) = v31;
        a1[73] = a2[73];
        LOWORD(v30) = *((_WORD *)a2 + 37);
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = v30;
        a1[77] = a2[77];
        uint64_t v12 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        uint64_t v34 = v12[9];
        uint64_t v14 = &a1[v34];
        uint64_t v15 = &a2[v34];
        uint64_t v16 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v17 = *(void *)(v16 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16)) {
          goto LABEL_6;
        }
        goto LABEL_14;
      case 0:
        uint64_t v8 = *(void *)a2;
        a1[8] = a2[8];
        *(void *)a1 = v8;
        long long v9 = *((_OWORD *)a2 + 1);
        long long v10 = *((_OWORD *)a2 + 2);
        long long v11 = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        *((_OWORD *)a1 + 2) = v10;
        *((_OWORD *)a1 + 3) = v11;
        *((_OWORD *)a1 + 1) = v9;
        a1[73] = a2[73];
        LOWORD(v8) = *((_WORD *)a2 + 37);
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = v8;
        a1[77] = a2[77];
        uint64_t v12 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        uint64_t v13 = v12[9];
        uint64_t v14 = &a1[v13];
        uint64_t v15 = &a2[v13];
        uint64_t v16 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v17 = *(void *)(v16 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
        {
LABEL_6:
          uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
LABEL_15:
          uint64_t v39 = v12[10];
          char v40 = &a1[v39];
          char v41 = &a2[v39];
          uint64_t v42 = *(void *)v41;
          v40[8] = v41[8];
          *(void *)char v40 = v42;
          a1[v12[11]] = a2[v12[11]];
LABEL_16:
          swift_storeEnumTagMultiPayload();
          goto LABEL_17;
        }
LABEL_14:
        (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
        goto LABEL_15;
    }
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
LABEL_17:
  uint64_t v43 = *(int *)(a3 + 20);
  uint64_t v44 = &a1[v43];
  uint64_t v45 = &a2[v43];
  *(void *)uint64_t v44 = *(void *)v45;
  *((void *)v44 + 1) = *((void *)v45 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

char *initializeWithTake for ICULegacyNumberFormatter.Signature(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      long long v15 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v15;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
      a1[78] = a2[78];
      uint64_t v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      uint64_t v17 = v16[9];
      uint64_t v18 = &a1[v17];
      uint64_t v19 = &a2[v17];
      uint64_t v20 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v21 = *(void *)(v20 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      uint64_t v26 = v16[10];
      uint64_t v27 = &a1[v26];
      uint64_t v28 = &a2[v26];
      *(void *)uint64_t v27 = *(void *)v28;
      v27[8] = v28[8];
      a1[v16[11]] = a2[v16[11]];
      a1[v16[12]] = a2[v16[12]];
      goto LABEL_16;
    case 1:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      long long v23 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v23;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      a1[76] = a2[76];
      *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
      a1[77] = a2[77];
      long long v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v24 = v9[9];
      long long v11 = &a1[v24];
      uint64_t v12 = &a2[v24];
      uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
LABEL_9:
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v11, v12, *(void *)(*(void *)(v25 - 8) + 64));
LABEL_15:
        uint64_t v29 = v9[10];
        uint64_t v30 = &a1[v29];
        long long v31 = &a2[v29];
        *(void *)uint64_t v30 = *(void *)v31;
        v30[8] = v31[8];
        a1[v9[11]] = a2[v9[11]];
LABEL_16:
        swift_storeEnumTagMultiPayload();
        goto LABEL_17;
      }
LABEL_14:
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_15;
    case 0:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      long long v8 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v8;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      a1[76] = a2[76];
      *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
      a1[77] = a2[77];
      long long v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v10 = v9[9];
      long long v11 = &a1[v10];
      uint64_t v12 = &a2[v10];
      uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
        goto LABEL_9;
      }
      goto LABEL_14;
  }
  memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
LABEL_17:
  uint64_t v32 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  a1[v32] = a2[v32];
  return a1;
}

char *assignWithTake for ICULegacyNumberFormatter.Signature(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ICULegacyNumberFormatter.NumberFormatType((uint64_t)a1, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
    uint64_t v6 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        long long v16 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v16;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        a1[73] = a2[73];
        *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
        a1[78] = a2[78];
        uint64_t v17 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v18 = v17[9];
        uint64_t v19 = &a1[v18];
        uint64_t v20 = &a2[v18];
        uint64_t v21 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v22 = *(void *)(v21 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
        {
          uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
        }
        uint64_t v26 = v17[10];
        uint64_t v27 = &a1[v26];
        uint64_t v28 = &a2[v26];
        *(void *)uint64_t v27 = *(void *)v28;
        v27[8] = v28[8];
        a1[v17[11]] = a2[v17[11]];
        a1[v17[12]] = a2[v17[12]];
        goto LABEL_16;
      case 1:
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        long long v24 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v24;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        a1[73] = a2[73];
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
        a1[77] = a2[77];
        long long v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        uint64_t v25 = v9[9];
        long long v11 = &a1[v25];
        uint64_t v12 = &a2[v25];
        uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v14 = *(void *)(v13 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
          goto LABEL_6;
        }
        goto LABEL_14;
      case 0:
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        long long v8 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v8;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        a1[73] = a2[73];
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
        a1[77] = a2[77];
        long long v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        uint64_t v10 = v9[9];
        long long v11 = &a1[v10];
        uint64_t v12 = &a2[v10];
        uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v14 = *(void *)(v13 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
        {
LABEL_6:
          uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
LABEL_15:
          uint64_t v29 = v9[10];
          uint64_t v30 = &a1[v29];
          long long v31 = &a2[v29];
          *(void *)uint64_t v30 = *(void *)v31;
          v30[8] = v31[8];
          a1[v9[11]] = a2[v9[11]];
LABEL_16:
          swift_storeEnumTagMultiPayload();
          goto LABEL_17;
        }
LABEL_14:
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
        goto LABEL_15;
    }
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
LABEL_17:
  uint64_t v32 = *(int *)(a3 + 20);
  long long v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  uint64_t v36 = *(void *)v34;
  uint64_t v35 = *((void *)v34 + 1);
  *(void *)long long v33 = v36;
  *((void *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t getEnumTagSinglePayload for ICULegacyNumberFormatter.Signature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_181C0F544);
}

uint64_t sub_181C0F544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    long long v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for ICULegacyNumberFormatter.Signature(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_181C0F61C);
}

uint64_t sub_181C0F61C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for ICULegacyNumberFormatter.NumberFormatType(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        long long v18 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v18;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        a1[73] = a2[73];
        *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
        a1[78] = a2[78];
        uint64_t v19 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v20 = v19[9];
        uint64_t v21 = &a1[v20];
        uint64_t v22 = &a2[v20];
        uint64_t v23 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v24 = *(void *)(v23 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
        {
          uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
        }
        uint64_t v31 = v19[10];
        uint64_t v32 = &a1[v31];
        long long v33 = &a2[v31];
        *(void *)uint64_t v32 = *(void *)v33;
        v32[8] = v33[8];
        a1[v19[11]] = a2[v19[11]];
        a1[v19[12]] = a2[v19[12]];
        swift_storeEnumTagMultiPayload();
        break;
      case 1:
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        long long v26 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v26;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        a1[73] = a2[73];
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
        a1[77] = a2[77];
        uint64_t v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        uint64_t v27 = v9[9];
        long long v11 = &a1[v27];
        uint64_t v12 = &a2[v27];
        uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v14 = *(void *)(v13 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
          goto LABEL_6;
        }
        goto LABEL_14;
      case 0:
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        long long v8 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v8;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        a1[73] = a2[73];
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
        a1[77] = a2[77];
        uint64_t v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        uint64_t v10 = v9[9];
        long long v11 = &a1[v10];
        uint64_t v12 = &a2[v10];
        uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v14 = *(void *)(v13 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
        {
LABEL_6:
          uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
LABEL_15:
          uint64_t v28 = v9[10];
          uint64_t v29 = &a1[v28];
          uint64_t v30 = &a2[v28];
          *(void *)uint64_t v29 = *(void *)v30;
          v29[8] = v30[8];
          a1[v9[11]] = a2[v9[11]];
          swift_storeEnumTagMultiPayload();
          return a1;
        }
LABEL_14:
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
        goto LABEL_15;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for ICULegacyNumberFormatter.NumberFormatType(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    uint64_t v3 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  }
  else
  {
    if (result > 1) {
      return result;
    }
    uint64_t v3 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  }
  uint64_t v4 = a1 + *(int *)(v3 + 36);
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
    return v6(v4, v5);
  }
  return result;
}

char *initializeWithCopy for ICULegacyNumberFormatter.NumberFormatType(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      long long v14 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v14;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
      a1[78] = a2[78];
      uint64_t v15 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      uint64_t v16 = v15[9];
      uint64_t v17 = &a1[v16];
      long long v18 = &a2[v16];
      uint64_t v19 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      uint64_t v25 = v15[10];
      long long v26 = &a1[v25];
      uint64_t v27 = &a2[v25];
      *(void *)long long v26 = *(void *)v27;
      v26[8] = v27[8];
      a1[v15[11]] = a2[v15[11]];
      a1[v15[12]] = a2[v15[12]];
      goto LABEL_16;
    case 1:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      long long v22 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v22;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      a1[76] = a2[76];
      *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
      a1[77] = a2[77];
      long long v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v23 = v8[9];
      uint64_t v10 = &a1[v23];
      long long v11 = &a2[v23];
      uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
LABEL_9:
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v10, v11, *(void *)(*(void *)(v24 - 8) + 64));
LABEL_15:
        uint64_t v28 = v8[10];
        uint64_t v29 = &a1[v28];
        uint64_t v30 = &a2[v28];
        *(void *)uint64_t v29 = *(void *)v30;
        v29[8] = v30[8];
        a1[v8[11]] = a2[v8[11]];
LABEL_16:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
LABEL_14:
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_15;
    case 0:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      long long v7 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v7;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      a1[76] = a2[76];
      *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
      a1[77] = a2[77];
      long long v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v9 = v8[9];
      uint64_t v10 = &a1[v9];
      long long v11 = &a2[v9];
      uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
        goto LABEL_9;
      }
      goto LABEL_14;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

char *assignWithCopy for ICULegacyNumberFormatter.NumberFormatType(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ICULegacyNumberFormatter.NumberFormatType((uint64_t)a1, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        uint64_t v18 = *(void *)a2;
        a1[8] = a2[8];
        *(void *)a1 = v18;
        long long v19 = *((_OWORD *)a2 + 1);
        long long v20 = *((_OWORD *)a2 + 2);
        long long v21 = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        *((_OWORD *)a1 + 2) = v20;
        *((_OWORD *)a1 + 3) = v21;
        *((_OWORD *)a1 + 1) = v19;
        a1[73] = a2[73];
        *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
        a1[78] = a2[78];
        long long v22 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v23 = v22[9];
        uint64_t v24 = &a1[v23];
        uint64_t v25 = &a2[v23];
        uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v27 = *(void *)(v26 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
        {
          uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
        }
        uint64_t v34 = v22[10];
        uint64_t v35 = &a1[v34];
        uint64_t v36 = &a2[v34];
        uint64_t v37 = *(void *)v36;
        v35[8] = v36[8];
        *(void *)uint64_t v35 = v37;
        a1[v22[11]] = a2[v22[11]];
        a1[v22[12]] = a2[v22[12]];
        goto LABEL_16;
      case 1:
        uint64_t v29 = *(void *)a2;
        a1[8] = a2[8];
        *(void *)a1 = v29;
        long long v30 = *((_OWORD *)a2 + 1);
        long long v31 = *((_OWORD *)a2 + 2);
        long long v32 = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        *((_OWORD *)a1 + 2) = v31;
        *((_OWORD *)a1 + 3) = v32;
        *((_OWORD *)a1 + 1) = v30;
        a1[73] = a2[73];
        LOWORD(v29) = *((_WORD *)a2 + 37);
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = v29;
        a1[77] = a2[77];
        long long v11 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        uint64_t v33 = v11[9];
        uint64_t v13 = &a1[v33];
        long long v14 = &a2[v33];
        uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v16 = *(void *)(v15 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15)) {
          goto LABEL_6;
        }
        goto LABEL_14;
      case 0:
        uint64_t v7 = *(void *)a2;
        a1[8] = a2[8];
        *(void *)a1 = v7;
        long long v8 = *((_OWORD *)a2 + 1);
        long long v9 = *((_OWORD *)a2 + 2);
        long long v10 = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        *((_OWORD *)a1 + 2) = v9;
        *((_OWORD *)a1 + 3) = v10;
        *((_OWORD *)a1 + 1) = v8;
        a1[73] = a2[73];
        LOWORD(v7) = *((_WORD *)a2 + 37);
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = v7;
        a1[77] = a2[77];
        long long v11 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        uint64_t v12 = v11[9];
        uint64_t v13 = &a1[v12];
        long long v14 = &a2[v12];
        uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v16 = *(void *)(v15 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
        {
LABEL_6:
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
LABEL_15:
          uint64_t v38 = v11[10];
          uint64_t v39 = &a1[v38];
          char v40 = &a2[v38];
          uint64_t v41 = *(void *)v40;
          v39[8] = v40[8];
          *(void *)uint64_t v39 = v41;
          a1[v11[11]] = a2[v11[11]];
LABEL_16:
          swift_storeEnumTagMultiPayload();
          return a1;
        }
LABEL_14:
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
        goto LABEL_15;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *initializeWithTake for ICULegacyNumberFormatter.NumberFormatType(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      long long v14 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v14;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
      a1[78] = a2[78];
      uint64_t v15 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      uint64_t v16 = v15[9];
      uint64_t v17 = &a1[v16];
      uint64_t v18 = &a2[v16];
      uint64_t v19 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      uint64_t v25 = v15[10];
      uint64_t v26 = &a1[v25];
      uint64_t v27 = &a2[v25];
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v27[8];
      a1[v15[11]] = a2[v15[11]];
      a1[v15[12]] = a2[v15[12]];
      goto LABEL_16;
    case 1:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      long long v22 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v22;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      a1[76] = a2[76];
      *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
      a1[77] = a2[77];
      long long v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v23 = v8[9];
      long long v10 = &a1[v23];
      long long v11 = &a2[v23];
      uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
LABEL_9:
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v10, v11, *(void *)(*(void *)(v24 - 8) + 64));
LABEL_15:
        uint64_t v28 = v8[10];
        uint64_t v29 = &a1[v28];
        long long v30 = &a2[v28];
        *(void *)uint64_t v29 = *(void *)v30;
        v29[8] = v30[8];
        a1[v8[11]] = a2[v8[11]];
LABEL_16:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
LABEL_14:
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_15;
    case 0:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      long long v7 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v7;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      a1[76] = a2[76];
      *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
      a1[77] = a2[77];
      long long v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v9 = v8[9];
      long long v10 = &a1[v9];
      long long v11 = &a2[v9];
      uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
        goto LABEL_9;
      }
      goto LABEL_14;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

char *assignWithTake for ICULegacyNumberFormatter.NumberFormatType(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ICULegacyNumberFormatter.NumberFormatType((uint64_t)a1, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        long long v15 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v15;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        a1[73] = a2[73];
        *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
        a1[78] = a2[78];
        uint64_t v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v17 = v16[9];
        uint64_t v18 = &a1[v17];
        uint64_t v19 = &a2[v17];
        uint64_t v20 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v21 = *(void *)(v20 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
        {
          uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
        }
        uint64_t v25 = v16[10];
        uint64_t v26 = &a1[v25];
        uint64_t v27 = &a2[v25];
        *(void *)uint64_t v26 = *(void *)v27;
        v26[8] = v27[8];
        a1[v16[11]] = a2[v16[11]];
        a1[v16[12]] = a2[v16[12]];
        goto LABEL_16;
      case 1:
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        long long v23 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v23;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        a1[73] = a2[73];
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
        a1[77] = a2[77];
        long long v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        uint64_t v24 = v8[9];
        long long v10 = &a1[v24];
        long long v11 = &a2[v24];
        uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v13 = *(void *)(v12 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
          goto LABEL_6;
        }
        goto LABEL_14;
      case 0:
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        long long v7 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v7;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        a1[73] = a2[73];
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
        a1[77] = a2[77];
        long long v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        uint64_t v9 = v8[9];
        long long v10 = &a1[v9];
        long long v11 = &a2[v9];
        uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v13 = *(void *)(v12 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
        {
LABEL_6:
          uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
LABEL_15:
          uint64_t v28 = v8[10];
          uint64_t v29 = &a1[v28];
          long long v30 = &a2[v28];
          *(void *)uint64_t v29 = *(void *)v30;
          v29[8] = v30[8];
          a1[v8[11]] = a2[v8[11]];
LABEL_16:
          swift_storeEnumTagMultiPayload();
          return a1;
        }
LABEL_14:
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
        goto LABEL_15;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void ICULegacyNumberFormatter.NumberFormatType.hash(into:)()
{
  uint64_t v78 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  MEMORY[0x1F4188790](v78);
  int v2 = (char *)&v77 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v81 = *(void *)(v3 - 8);
  uint64_t v82 = v3;
  MEMORY[0x1F4188790](v3);
  unint64_t v79 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v5 - 8);
  long long v7 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  long long v10 = (char *)&v77 - v9;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v77 - v12;
  uint64_t v80 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1F4188790](v80);
  long long v15 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v77 - v17;
  uint64_t v19 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (unsigned __int8 *)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v0, (uint64_t)v21);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_0((uint64_t)v21, (uint64_t)v15, type metadata accessor for NumberFormatStyleConfiguration.Collection);
      Hasher._combine(_:)(1uLL);
      if (v15[8] == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt64 v44 = *(void *)v15;
        Hasher._combine(_:)(1u);
        if ((v44 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          Swift::UInt64 v45 = v44;
        }
        else {
          Swift::UInt64 v45 = 0;
        }
        Hasher._combine(_:)(v45);
      }
      BOOL v47 = (int *)v80;
      uint64_t v46 = v81;
      outlined init with take of NumberFormatStyleConfiguration.Precision?((uint64_t)(v15 + 16), (uint64_t)v83);
      specialized Optional<A>.hash(into:)();
      int v48 = v15[73];
      if (v48 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v52 = v48 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v52);
      }
      int v53 = *((unsigned __int16 *)v15 + 37);
      unsigned int v54 = v53 | (v15[76] << 16);
      if (v53 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v54 & 1);
        Hasher._combine(_:)((v54 >> 8) & 1);
        Hasher._combine(_:)(HIWORD(v54) & 1);
      }
      uint64_t v57 = v82;
      int v58 = v15[77];
      if (v58 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v60 = v58 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v60);
      }
      outlined init with copy of FloatingPointRoundingRule?((uint64_t)&v15[v47[9]], (uint64_t)v10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v10, 1, v57) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        unint64_t v64 = v79;
        (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v79, v10, v57);
        Hasher._combine(_:)(1u);
        dispatch thunk of Hashable.hash(into:)();
        (*(void (**)(char *, uint64_t))(v46 + 8))(v64, v57);
      }
      unint64_t v65 = &v15[v47[10]];
      int v66 = v65[8];
      if (v66 == 255)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v68 = *(void *)v65;
        Hasher._combine(_:)(1u);
        if (v66)
        {
          Hasher._combine(_:)(1uLL);
          if ((v68 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
            Swift::UInt64 v75 = v68;
          }
          else {
            Swift::UInt64 v75 = 0;
          }
          Hasher._combine(_:)(v75);
        }
        else
        {
          Hasher._combine(_:)(0);
          Hasher._combine(_:)(v68);
        }
      }
      Swift::UInt v76 = v15[v47[11]];
      if (v76 == 3)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v76);
      }
      uint64_t v71 = type metadata accessor for NumberFormatStyleConfiguration.Collection;
      uint64_t v72 = (uint64_t)v15;
      goto LABEL_95;
    case 2u:
      _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_0((uint64_t)v21, (uint64_t)v2, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
      Hasher._combine(_:)(2uLL);
      if (v2[8] == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt64 v24 = *(void *)v2;
        Hasher._combine(_:)(1u);
        if ((v24 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          Swift::UInt64 v25 = v24;
        }
        else {
          Swift::UInt64 v25 = 0;
        }
        Hasher._combine(_:)(v25);
      }
      uint64_t v27 = v81;
      uint64_t v26 = v82;
      uint64_t v28 = (int *)v78;
      outlined init with take of NumberFormatStyleConfiguration.Precision?((uint64_t)(v2 + 16), (uint64_t)v83);
      specialized Optional<A>.hash(into:)();
      int v29 = v2[73];
      if (v29 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v30 = v29 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v30);
      }
      unint64_t v31 = *(unsigned int *)(v2 + 74);
      if (*(_DWORD *)(v2 + 74) == 2)
      {
        LOBYTE(v32) = 0;
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v31 & 1);
        Hasher._combine(_:)((v31 >> 8) & 1);
        Hasher._combine(_:)(WORD1(v31) & 1);
        unsigned int v32 = BYTE3(v31) & 1;
      }
      Hasher._combine(_:)(v32);
      int v33 = v2[78];
      if (v33 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v34 = v33 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v34);
      }
      outlined init with copy of FloatingPointRoundingRule?((uint64_t)&v2[v28[9]], (uint64_t)v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v7, 1, v26) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v35 = v79;
        (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v79, v7, v26);
        Hasher._combine(_:)(1u);
        dispatch thunk of Hashable.hash(into:)();
        (*(void (**)(char *, uint64_t))(v27 + 8))(v35, v26);
      }
      uint64_t v36 = &v2[v28[10]];
      int v37 = v36[8];
      if (v37 == 255)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v38 = *(void *)v36;
        Hasher._combine(_:)(1u);
        if (v37)
        {
          Hasher._combine(_:)(1uLL);
          if ((v38 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
            Swift::UInt64 v69 = v38;
          }
          else {
            Swift::UInt64 v69 = 0;
          }
          Hasher._combine(_:)(v69);
        }
        else
        {
          Hasher._combine(_:)(0);
          Hasher._combine(_:)(v38);
        }
      }
      Hasher._combine(_:)(v2[v28[11]]);
      Swift::UInt v70 = v2[v28[12]];
      if (v70 == 3)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v70);
      }
      uint64_t v71 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection;
      uint64_t v72 = (uint64_t)v2;
      goto LABEL_95;
    case 3u:
      uint64_t v22 = *v21;
      Swift::UInt v23 = v21[1];
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v22 + 1);
      if (v23 == 5)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v23);
      }
      return;
    default:
      _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_0((uint64_t)v21, (uint64_t)v18, type metadata accessor for NumberFormatStyleConfiguration.Collection);
      Hasher._combine(_:)(0);
      if (v18[8] == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt64 v39 = *(void *)v18;
        Hasher._combine(_:)(1u);
        if ((v39 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          Swift::UInt64 v40 = v39;
        }
        else {
          Swift::UInt64 v40 = 0;
        }
        Hasher._combine(_:)(v40);
      }
      uint64_t v42 = (int *)v80;
      uint64_t v41 = v81;
      outlined init with take of NumberFormatStyleConfiguration.Precision?((uint64_t)(v18 + 16), (uint64_t)v83);
      specialized Optional<A>.hash(into:)();
      int v43 = v18[73];
      if (v43 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v49 = v43 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v49);
      }
      int v50 = *((unsigned __int16 *)v18 + 37);
      unsigned int v51 = v50 | (v18[76] << 16);
      if (v50 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v51 & 1);
        Hasher._combine(_:)((v51 >> 8) & 1);
        Hasher._combine(_:)(HIWORD(v51) & 1);
      }
      uint64_t v55 = v82;
      int v56 = v18[77];
      if (v56 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v59 = v56 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v59);
      }
      outlined init with copy of FloatingPointRoundingRule?((uint64_t)&v18[v42[9]], (uint64_t)v13);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v13, 1, v55) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        unint64_t v61 = v79;
        (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v79, v13, v55);
        Hasher._combine(_:)(1u);
        dispatch thunk of Hashable.hash(into:)();
        (*(void (**)(char *, uint64_t))(v41 + 8))(v61, v55);
      }
      int v62 = &v18[v42[10]];
      int v63 = v62[8];
      if (v63 == 255)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v67 = *(void *)v62;
        Hasher._combine(_:)(1u);
        if (v63)
        {
          Hasher._combine(_:)(1uLL);
          if ((v67 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
            Swift::UInt64 v73 = v67;
          }
          else {
            Swift::UInt64 v73 = 0;
          }
          Hasher._combine(_:)(v73);
        }
        else
        {
          Hasher._combine(_:)(0);
          Hasher._combine(_:)(v67);
        }
      }
      Swift::UInt v74 = v18[v42[11]];
      if (v74 == 3)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v74);
      }
      uint64_t v71 = type metadata accessor for NumberFormatStyleConfiguration.Collection;
      uint64_t v72 = (uint64_t)v18;
LABEL_95:
      outlined destroy of ICULegacyNumberFormatter.NumberFormatType(v72, v71);
      return;
  }
}

uint64_t ICULegacyNumberFormatter.NumberFormatType.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys>);
  uint64_t v47 = *(void *)(v2 - 8);
  uint64_t v48 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v46 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys>);
  uint64_t v44 = *(void *)(v4 - 8);
  uint64_t v45 = v4;
  MEMORY[0x1F4188790](v4);
  int v43 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  MEMORY[0x1F4188790](v41);
  uint64_t v42 = (uint64_t)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys>);
  uint64_t v39 = *(void *)(v7 - 8);
  uint64_t v40 = v7;
  MEMORY[0x1F4188790](v7);
  Swift::UInt v38 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys>);
  uint64_t v36 = *(void *)(v9 - 8);
  uint64_t v37 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1F4188790](v49);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v36 - v15;
  uint64_t v17 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (__int16 *)((char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ICULegacyNumberFormatter.NumberFormatType.CodingKeys>);
  uint64_t v50 = *(void *)(v20 - 8);
  uint64_t v51 = v20;
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v52, (uint64_t)v19);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_0((uint64_t)v19, (uint64_t)v13, type metadata accessor for NumberFormatStyleConfiguration.Collection);
      char v54 = 1;
      lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys();
      int v33 = v38;
      uint64_t v23 = v51;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType and conformance ICULegacyNumberFormatter.NumberFormatType(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection, (void (*)(uint64_t))type metadata accessor for NumberFormatStyleConfiguration.Collection);
      uint64_t v34 = v40;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v33, v34);
      Swift::UInt64 v25 = type metadata accessor for NumberFormatStyleConfiguration.Collection;
      uint64_t v26 = (uint64_t)v13;
      goto LABEL_6;
    case 2u:
      uint64_t v27 = v42;
      _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_0((uint64_t)v19, v42, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
      char v55 = 2;
      lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys();
      uint64_t v28 = v43;
      uint64_t v23 = v51;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType and conformance ICULegacyNumberFormatter.NumberFormatType(&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection and conformance CurrencyFormatStyleConfiguration.Collection, (void (*)(uint64_t))type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
      uint64_t v29 = v45;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v28, v29);
      Swift::UInt64 v25 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection;
      uint64_t v26 = v27;
      goto LABEL_6;
    case 3u:
      __int16 v30 = *v19;
      char v57 = 3;
      lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys();
      unint64_t v31 = v46;
      uint64_t v23 = v51;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      __int16 v56 = v30;
      lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection();
      uint64_t v32 = v48;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v47 + 8))(v31, v32);
      return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v22, v23);
    default:
      _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_0((uint64_t)v19, (uint64_t)v16, type metadata accessor for NumberFormatStyleConfiguration.Collection);
      char v53 = 0;
      lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys();
      uint64_t v23 = v51;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType and conformance ICULegacyNumberFormatter.NumberFormatType(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection, (void (*)(uint64_t))type metadata accessor for NumberFormatStyleConfiguration.Collection);
      uint64_t v24 = v37;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v24);
      Swift::UInt64 v25 = type metadata accessor for NumberFormatStyleConfiguration.Collection;
      uint64_t v26 = (uint64_t)v16;
LABEL_6:
      outlined destroy of ICULegacyNumberFormatter.NumberFormatType(v26, v25);
      return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v22, v23);
  }
}

uint64_t ICULegacyNumberFormatter.NumberFormatType.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v76 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys>);
  uint64_t v74 = *(void *)(v3 - 8);
  uint64_t v75 = v3;
  MEMORY[0x1F4188790](v3);
  Swift::UInt v68 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v64 = v5;
  uint64_t v65 = v6;
  MEMORY[0x1F4188790](v5);
  Swift::UInt64 v69 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys>);
  uint64_t v63 = *(void *)(v73 - 8);
  MEMORY[0x1F4188790](v73);
  Swift::UInt v67 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys>);
  uint64_t v61 = *(void *)(v9 - 8);
  uint64_t v62 = v9;
  MEMORY[0x1F4188790](v9);
  int v66 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ICULegacyNumberFormatter.NumberFormatType.CodingKeys>);
  uint64_t v71 = *(void *)(v11 - 8);
  uint64_t v72 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1F4188790](v70);
  uint64_t v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v56 - v17;
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v56 - v20;
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v56 - v23;
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)&v56 - v26;
  uint64_t v28 = a1[3];
  uint64_t v77 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v28);
  lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys();
  uint64_t v29 = (uint64_t)v78;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v29) {
    goto LABEL_10;
  }
  int v58 = v24;
  Swift::UInt v59 = v21;
  char v57 = v15;
  Swift::UInt v60 = v18;
  uint64_t v31 = v73;
  uint64_t v30 = v74;
  uint64_t v33 = v75;
  uint64_t v32 = v76;
  uint64_t v78 = v27;
  uint64_t v34 = v72;
  uint64_t v35 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v35 + 16) != 1)
  {
    uint64_t v41 = type metadata accessor for DecodingError();
    swift_allocError();
    int v43 = v42;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t *v43 = v70;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v41 - 8) + 104))(v43, *MEMORY[0x1E4FBBA70], v41);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v71 + 8))(v13, v34);
LABEL_10:
    uint64_t v39 = (uint64_t)v77;
    return __swift_destroy_boxed_opaque_existential_1(v39);
  }
  switch(*(unsigned char *)(v35 + 32))
  {
    case 1:
      char v80 = 1;
      lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys();
      uint64_t v44 = v67;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType and conformance ICULegacyNumberFormatter.NumberFormatType(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection, (void (*)(uint64_t))type metadata accessor for NumberFormatStyleConfiguration.Collection);
      uint64_t v45 = (uint64_t)v59;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v44, v31);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v71 + 8))(v13, v34);
      uint64_t v39 = (uint64_t)v77;
      swift_storeEnumTagMultiPayload();
      uint64_t v40 = v45;
      goto LABEL_7;
    case 2:
      char v81 = 2;
      lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys();
      uint64_t v47 = v69;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType and conformance ICULegacyNumberFormatter.NumberFormatType(&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection and conformance CurrencyFormatStyleConfiguration.Collection, (void (*)(uint64_t))type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
      uint64_t v48 = (uint64_t)v60;
      uint64_t v49 = v64;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v50 = v71;
      (*(void (**)(char *, uint64_t))(v65 + 8))(v47, v49);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v13, v34);
      swift_storeEnumTagMultiPayload();
      uint64_t v46 = (uint64_t)v78;
      _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_0(v48, (uint64_t)v78, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
      uint64_t v32 = v76;
      uint64_t v39 = (uint64_t)v77;
      break;
    case 3:
      char v83 = 3;
      lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys();
      uint64_t v51 = v68;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      char v53 = v51;
      uint64_t v54 = v71;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v53, v33);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v13, v34);
      uint64_t v55 = (uint64_t)v57;
      _WORD *v57 = v82;
      swift_storeEnumTagMultiPayload();
      uint64_t v46 = (uint64_t)v78;
      _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_0(v55, (uint64_t)v78, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
      uint64_t v39 = (uint64_t)v77;
      break;
    default:
      char v79 = 0;
      lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys();
      uint64_t v36 = v66;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType and conformance ICULegacyNumberFormatter.NumberFormatType(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection, (void (*)(uint64_t))type metadata accessor for NumberFormatStyleConfiguration.Collection);
      uint64_t v37 = (uint64_t)v58;
      uint64_t v38 = v62;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v61 + 8))(v36, v38);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v71 + 8))(v13, v34);
      uint64_t v39 = (uint64_t)v77;
      swift_storeEnumTagMultiPayload();
      uint64_t v40 = v37;
LABEL_7:
      uint64_t v46 = (uint64_t)v78;
      _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_0(v40, (uint64_t)v78, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
      break;
  }
  _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_0(v46, v32, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  return __swift_destroy_boxed_opaque_existential_1(v39);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys()
{
  uint64_t result = 0x7265626D756ELL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x746E6563726570;
      break;
    case 2:
      uint64_t result = 0x79636E6572727563;
      break;
    case 3:
      uint64_t result = 0x7470697263736564;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ICULegacyNumberFormatter.NumberFormatType.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICULegacyNumberFormatter.NumberFormatType(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance ICULegacyNumberFormatter.NumberFormatType(a1, a2, (void (*)(unsigned char *))ICULegacyNumberFormatter.NumberFormatType.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICULegacyNumberFormatter.NumberFormatType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance ICULegacyNumberFormatter.NumberFormatType(a1, a2, a3, (void (*)(unsigned char *))ICULegacyNumberFormatter.NumberFormatType.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance ICULegacyNumberFormatter.NumberFormatType@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ICULegacyNumberFormatter.NumberFormatType.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ICULegacyNumberFormatter.NumberFormatType(void *a1)
{
  return ICULegacyNumberFormatter.NumberFormatType.encode(to:)(a1);
}

uint64_t base witness table accessor for Equatable in ICULegacyNumberFormatter.NumberFormatType()
{
  return lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType and conformance ICULegacyNumberFormatter.NumberFormatType(&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType and conformance ICULegacyNumberFormatter.NumberFormatType, (void (*)(uint64_t))type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICULegacyNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance ICULegacyNumberFormatter.NumberFormatType(a1, a2, (void (*)(unsigned char *))ICULegacyNumberFormatter.Signature.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICULegacyNumberFormatter.NumberFormatType(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICULegacyNumberFormatter.Signature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance ICULegacyNumberFormatter.NumberFormatType(a1, a2, a3, (void (*)(unsigned char *))ICULegacyNumberFormatter.Signature.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICULegacyNumberFormatter.NumberFormatType(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys);
  }
  return result;
}

uint64_t specialized static ICULegacyNumberFormatter.Signature.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (specialized static ICULegacyNumberFormatter.NumberFormatType.== infix(_:_:)(a1, a2))
  {
    uint64_t v4 = type metadata accessor for ICULegacyNumberFormatter.Signature(0);
    uint64_t v5 = *(int *)(v4 + 20);
    uint64_t v6 = *(void *)(a1 + v5);
    uint64_t v7 = *(void *)(a1 + v5 + 8);
    uint64_t v8 = (void *)(a2 + v5);
    BOOL v9 = v6 == *v8 && v7 == v8[1];
    if (v9 || (char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), v11 = 0, (v10 & 1) != 0)) {
      char v11 = *(unsigned char *)(a1 + *(int *)(v4 + 24)) ^ *(unsigned char *)(a2 + *(int *)(v4 + 24)) ^ 1;
    }
  }
  else
  {
    char v11 = 0;
  }
  return v11 & 1;
}

uint64_t outlined destroy of (ICULegacyNumberFormatter.NumberFormatType, ICULegacyNumberFormatter.NumberFormatType)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ICULegacyNumberFormatter.NumberFormatType, ICULegacyNumberFormatter.NumberFormatType));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ICUError and conformance ICUError()
{
  unint64_t result = lazy protocol witness table cache variable for type ICUError and conformance ICUError;
  if (!lazy protocol witness table cache variable for type ICUError and conformance ICUError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICUError and conformance ICUError);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ICULegacyNumberFormatter.NumberFormatType.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181C135D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ICULegacyNumberFormatter.NumberFormatType.CodingKeys()
{
  return &unk_1ECA3FFC8;
}

void *type metadata accessor for ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys()
{
  return &unk_1ECA3FF38;
}

void *type metadata accessor for ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys()
{
  return &unk_1ECA40058;
}

void *type metadata accessor for ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys()
{
  return &unk_1ECA400E8;
}

unsigned char *storeEnumTagSinglePayload for ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181C136D8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys()
{
  return &unk_1ECA40178;
}

uint64_t specialized ICULegacyNumberFormatter.NumberFormatType.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7265626D756ELL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E6563726570 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x79636E6572727563 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7470697263736564 && a2 == 0xEB00000000657669)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t ICU.FieldPositer.__deallocating_deinit()
{
  ufieldpositer_close();

  return swift_deallocClassInstance();
}

BOOL specialized SetAlgebra.isDisjoint(with:)(uint64_t a1)
{
  uint64_t v4 = a1;
  IndexSet.intersection(_:)(&v4, (uint64_t)&v3);
  id v1 = objc_msgSend(*(id *)(v3 + 16), sel_count);
  swift_release();
  return v1 == 0;
}

uint64_t *specialized Collection.count.getter(uint64_t *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result[8];
  if (v3) {
    uint64_t v4 = result[10];
  }
  else {
    uint64_t v4 = 0;
  }
  if (a2 < 0 || v4 < a2) {
    goto LABEL_115;
  }
  uint64_t v6 = a3;
  uint64_t v7 = result;
  uint64_t v8 = result[9];
  uint64_t v9 = result[11];
  if (v3)
  {
    if (result[10] > a2 && *(_WORD *)(v3 + 16) != 0)
    {
      uint64_t v59 = result[9];
      uint64_t v55 = result[11];
      uint64_t v33 = *(unsigned __int8 *)(v3 + 18);
      if (*(unsigned char *)(v3 + 18))
      {
        unint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
        uint64_t v14 = a2;
        unint64_t v34 = v3;
        while (1)
        {
          uint64_t v36 = *(unsigned __int16 *)(v34 + 16);
          if (!*(_WORD *)(v34 + 16)) {
            goto LABEL_42;
          }
          uint64_t v37 = *(void *)(v34 + 40);
          BOOL v16 = __OFSUB__(v14, v37);
          uint64_t v38 = v14 - v37;
          if (v16) {
            goto LABEL_110;
          }
          if (__OFADD__(v38, 1)) {
            goto LABEL_111;
          }
          if (v38 + 1 < 1)
          {
            uint64_t v36 = 0;
            goto LABEL_43;
          }
          if (v36 == 1) {
            break;
          }
          uint64_t v39 = (uint64_t *)(v34 + 64);
          uint64_t v40 = 1;
          while (1)
          {
            uint64_t v41 = *v39;
            v39 += 3;
            uint64_t v14 = v38 - v41;
            if (__OFSUB__(v38, v41))
            {
              __break(1u);
LABEL_106:
              __break(1u);
LABEL_107:
              __break(1u);
LABEL_108:
              __break(1u);
              goto LABEL_109;
            }
            if (__OFADD__(v14, 1)) {
              goto LABEL_106;
            }
            if (v14 + 1 < 1) {
              break;
            }
            ++v40;
            uint64_t v38 = v14;
            if (v36 == v40) {
              goto LABEL_42;
            }
          }
          uint64_t v36 = v40;
          uint64_t v14 = v38;
LABEL_43:
          char v35 = (4 * *(unsigned char *)(v34 + 18) + 8) & 0x3C;
          uint64_t v33 = ((-15 << v35) - 1) & v33 | (v36 << v35);
          uint64_t v13 = *(void *)(v34 + 24 + 24 * v36);
          swift_unknownObjectRetain();
          unint64_t result = (uint64_t *)swift_unknownObjectRelease();
          unint64_t v34 = v13;
          if (!*(unsigned char *)(v13 + 18)) {
            goto LABEL_62;
          }
        }
        uint64_t v14 = v38;
LABEL_42:
        if (!v14) {
          goto LABEL_43;
        }
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
        goto LABEL_118;
      }
      unint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
      uint64_t v14 = a2;
      uint64_t v13 = v3;
LABEL_62:
      uint64_t v42 = *(unsigned __int16 *)(v13 + 16);
      if (*(_WORD *)(v13 + 16))
      {
        uint64_t v43 = *(void *)(v13 + 24);
        BOOL v16 = __OFSUB__(v14, v43);
        uint64_t v44 = v14 - v43;
        uint64_t v6 = a3;
        if (v16) {
          goto LABEL_123;
        }
        if (__OFADD__(v44, 1))
        {
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
          goto LABEL_126;
        }
        if (v44 + 1 < 1)
        {
          uint64_t v42 = 0;
LABEL_88:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v12 = v33 & 0xFFFFFFFFFFFFF0FFLL | (v42 << 8);
          uint64_t v9 = v55;
          goto LABEL_13;
        }
        if (v42 != 1)
        {
          uint64_t v49 = (uint64_t *)(v13 + 48);
          uint64_t v50 = 1;
          while (1)
          {
            uint64_t v51 = *v49;
            v49 += 3;
            uint64_t v14 = v44 - v51;
            if (__OFSUB__(v44, v51)) {
              goto LABEL_116;
            }
            if (__OFADD__(v14, 1)) {
              goto LABEL_117;
            }
            if (v14 + 1 < 1) {
              break;
            }
            ++v50;
            uint64_t v44 = v14;
            if (v42 == v50) {
              goto LABEL_87;
            }
          }
          uint64_t v42 = v50;
          uint64_t v14 = v44;
          goto LABEL_88;
        }
        uint64_t v14 = v44;
      }
      else
      {
        uint64_t v6 = a3;
      }
LABEL_87:
      if (v14) {
        goto LABEL_121;
      }
      goto LABEL_88;
    }
  }
  unint64_t v11 = swift_unknownObjectRetain_n();
  unint64_t v12 = specialized Rope._endPath.getter(v11);
  unint64_t result = (uint64_t *)swift_unknownObjectRelease();
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if (!v3)
  {
    uint64_t v15 = 0;
    uint64_t v17 = a2;
    goto LABEL_14;
  }
LABEL_13:
  swift_unknownObjectRetain();
  uint64_t v15 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v12, v13, v3, v8);
  unint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
  BOOL v16 = __OFSUB__(a2, v14);
  uint64_t v17 = a2 - v14;
  if (v16)
  {
    __break(1u);
    goto LABEL_92;
  }
LABEL_14:
  uint64_t v56 = v15;
  uint64_t v57 = v12;
  unint64_t v12 = v7[8];
  uint64_t v18 = v7[9];
  uint64_t v19 = v7;
  uint64_t v20 = v7[10];
  int v58 = v19;
  uint64_t v59 = v19[11];
  if (a2 != v6)
  {
    uint64_t v29 = v17;
    uint64_t v30 = v18;
    unint64_t v31 = swift_unknownObjectRetain();
    uint64_t v17 = v30;
    uint64_t v32 = v20;
    unint64_t v3 = specialized Rope._endPath.getter(v31);
    if (v12)
    {
      swift_unknownObjectRelease();
      uint64_t v15 = 0;
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v17 = 0;
      uint64_t v32 = 0;
    }
    uint64_t v7 = v58;
LABEL_74:
    v62[0] = v59;
    v62[1] = v3;
    v62[2] = v15;
    v62[3] = v17;
    v62[4] = v32;
    v61[0] = v9;
    v61[1] = v57;
    v61[2] = v13;
    v61[3] = v56;
    v61[4] = v29;
    return specialized BidirectionalCollection._distance(from:to:)(v61, (uint64_t)v62, v7, a2, a3);
  }
  uint64_t v54 = v18;
  uint64_t v55 = v9;
  if (!v12)
  {
    if (a2 > 0) {
      goto LABEL_122;
    }
LABEL_71:
    swift_unknownObjectRetain_n();
    unint64_t v3 = specialized Rope._endPath.getter(v12);
    swift_unknownObjectRelease();
    uint64_t v15 = 0;
    uint64_t v9 = 0;
    uint64_t v7 = v58;
    uint64_t v29 = v17;
    if (!v12) {
      goto LABEL_101;
    }
    goto LABEL_72;
  }
  if (v20 < a2) {
    goto LABEL_120;
  }
  if (!*(_WORD *)(v12 + 16) || v20 <= a2) {
    goto LABEL_71;
  }
  uint64_t v21 = *(unsigned __int8 *)(v12 + 18);
  if (!*(unsigned char *)(v12 + 18))
  {
    unint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
    unint64_t v3 = 0;
    uint64_t v9 = a2;
    uint64_t v15 = v12;
    uint64_t v7 = v58;
    uint64_t v45 = *(unsigned __int16 *)(v12 + 16);
    if (*(_WORD *)(v12 + 16)) {
      goto LABEL_77;
    }
LABEL_99:
    if (!v9)
    {
      while (1)
      {
LABEL_100:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v3 |= v45 << 8;
        uint64_t v29 = v17;
        if (v12)
        {
LABEL_72:
          swift_unknownObjectRetain();
          uint64_t v17 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v59, v3, v15, v12, v54);
          swift_unknownObjectRelease_n();
          uint64_t v32 = a2 - v9;
          if (!__OFSUB__(a2, v9)) {
            goto LABEL_73;
          }
        }
        else
        {
LABEL_101:
          uint64_t v17 = 0;
          uint64_t v32 = a2 - v9;
          if (!__OFSUB__(a2, v9))
          {
LABEL_73:
            uint64_t v9 = v55;
            goto LABEL_74;
          }
        }
        __break(1u);
LABEL_104:
        uint64_t v45 = v47;
        uint64_t v9 = v46;
      }
    }
    goto LABEL_127;
  }
  unint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
  uint64_t v9 = a2;
  uint64_t v15 = v12;
  uint64_t v7 = v58;
  do
  {
    uint64_t v23 = *(unsigned __int16 *)(v15 + 16);
    if (*(_WORD *)(v15 + 16))
    {
      uint64_t v24 = *(void *)(v15 + 40);
      BOOL v16 = __OFSUB__(v9, v24);
      uint64_t v25 = v9 - v24;
      if (v16) {
        goto LABEL_113;
      }
      if (__OFADD__(v25, 1)) {
        goto LABEL_114;
      }
      if (v25 + 1 < 1)
      {
        uint64_t v23 = 0;
        goto LABEL_23;
      }
      if (v23 != 1)
      {
        uint64_t v26 = (uint64_t *)(v15 + 64);
        uint64_t v27 = 1;
        while (1)
        {
          uint64_t v28 = *v26;
          v26 += 3;
          uint64_t v9 = v25 - v28;
          if (__OFSUB__(v25, v28)) {
            goto LABEL_107;
          }
          if (__OFADD__(v9, 1)) {
            goto LABEL_108;
          }
          if (v9 + 1 < 1) {
            break;
          }
          ++v27;
          uint64_t v25 = v9;
          if (v23 == v27) {
            goto LABEL_22;
          }
        }
        uint64_t v23 = v27;
        uint64_t v9 = v25;
        goto LABEL_23;
      }
      uint64_t v9 = v25;
    }
LABEL_22:
    if (v9) {
      goto LABEL_112;
    }
LABEL_23:
    char v22 = (4 * *(unsigned char *)(v15 + 18) + 8) & 0x3C;
    uint64_t v21 = ((-15 << v22) - 1) & v21 | (v23 << v22);
    uint64_t v15 = *(void *)(v15 + 24 + 24 * v23);
    swift_unknownObjectRetain();
    unint64_t result = (uint64_t *)swift_unknownObjectRelease();
  }
  while (*(unsigned char *)(v15 + 18));
  unint64_t v3 = v21 & 0xFFFFFFFFFFFFF0FFLL;
  uint64_t v45 = *(unsigned __int16 *)(v15 + 16);
  if (!*(_WORD *)(v15 + 16)) {
    goto LABEL_99;
  }
LABEL_77:
  uint64_t v48 = *(void *)(v15 + 24);
  BOOL v16 = __OFSUB__(v9, v48);
  uint64_t v46 = v9 - v48;
  if (v16) {
    goto LABEL_125;
  }
  if (!__OFADD__(v46, 1))
  {
    if (v46 + 1 >= 1)
    {
      if (v45 == 1)
      {
        uint64_t v9 = v46;
        goto LABEL_99;
      }
      uint64_t v52 = (uint64_t *)(v15 + 48);
      uint64_t v47 = 1;
      while (1)
      {
        uint64_t v53 = *v52;
        v52 += 3;
        uint64_t v9 = v46 - v53;
        if (__OFSUB__(v46, v53)) {
          break;
        }
        if (__OFADD__(v9, 1)) {
          goto LABEL_119;
        }
        if (v9 + 1 < 1) {
          goto LABEL_104;
        }
        ++v47;
        uint64_t v46 = v9;
        if (v45 == v47) {
          goto LABEL_99;
        }
      }
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
      goto LABEL_124;
    }
LABEL_92:
    uint64_t v45 = 0;
    goto LABEL_100;
  }
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
  return result;
}

uint64_t specialized Collection.count.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1;
  }
  uint64_t v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v3 = 11;
  }
  return String.UnicodeScalarView.distance(from:to:)(0xFuLL, v3 | (v2 << 16), a1, a2);
}

BOOL static IndexSet.Index.< infix(_:_:)(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL static IndexSet.Index.<= infix(_:_:)(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL static IndexSet.Index.> infix(_:_:)(void *a1, void *a2)
{
  return *a2 < *a1;
}

BOOL static IndexSet.Index.>= infix(_:_:)(void *a1, void *a2)
{
  return *a1 >= *a2;
}

uint64_t IndexSet.RangeView.startIndex.getter()
{
  return *(void *)v0;
}

uint64_t IndexSet.RangeView.endIndex.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t *IndexSet.RangeView.init(indexSet:intersecting:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  uint64_t v6 = *result;
  if (a4) {
    goto LABEL_4;
  }
  if (!__OFSUB__(a3, a2))
  {
    id v7 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_initWithIndexesInRange_, a2, a3 - a2);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = v7;
    *(unsigned char *)(inited + 24) = 0;
    v9[0] = inited;
    v9[1] = v6;
    IndexSet.intersection(_:)(v9, (uint64_t)&v10);
    swift_release();
    swift_release();
    uint64_t v6 = v10;
LABEL_4:
    unint64_t result = (uint64_t *)objc_msgSend(*(id *)(v6 + 16), sel_rangeCount);
    *a5 = 0;
    a5[1] = result;
    a5[2] = v6;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t IndexSet.RangeView.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(v3 + 16);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)v3;
  *(void *)(a3 + 32) = v4;
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  return swift_retain();
}

Swift::Int __swiftcall IndexSet.RangeView.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall IndexSet.RangeView.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance IndexSet.RangeView(uint64_t *a1, uint64_t *a2)
{
  return specialized Collection.count.getter(*a1, *a2);
}

uint64_t protocol witness for Collection.subscript.getter in conformance IndexSet.RangeView@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  long long v3 = *v2;
  *(void *)(a2 + 32) = *((void *)v2 + 2);
  *(_OWORD *)a2 = *a1;
  *(_OWORD *)(a2 + 16) = v3;
  return swift_retain();
}

uint64_t protocol witness for Collection.indices.getter in conformance IndexSet.RangeView@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v2;
  a1[4] = v3;
  return swift_retain();
}

BOOL protocol witness for Collection.isEmpty.getter in conformance IndexSet.RangeView()
{
  return *v0 == v0[1];
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance IndexSet.RangeView@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance IndexSet.RangeView@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = v1[1].n128_u64[0];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u64[1] = result.n128_u64[0];
  return result;
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance IndexSet.RangeView()
{
  BOOL v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0, v0[1], v0[2]);
  swift_release();
  return v1;
}

void *protocol witness for Sequence._copyContents(initializing:) in conformance IndexSet.RangeView(void *a1, void *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3, v3[1], v3[2]);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance IndexSet.RangeView@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation16AttributedStringV12_InternalRunVqd__Isgyrzo_AJ01_K9RunsSliceVABsAG_pANRszr__lIetMggrzo_Tp5(a1, a2);
}

void IndexSet.Index.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x61722061206E6920;
  v3._object = (void *)0xEF20666F2065676ELL;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._uint64_t countAndFlagsBits = 3943982;
  v4._object = (void *)0xE300000000000000;
  String.append(_:)(v4);
  _print_unlocked<A, B>(_:_:)();
  v5._uint64_t countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x2065676E61725B20;
  v6._object = (void *)0xE900000000000023;
  String.append(_:)(v6);
  if (__OFADD__(v1, 1))
  {
    __break(1u);
  }
  else
  {
    v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._uint64_t countAndFlagsBits = 47;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._uint64_t countAndFlagsBits = 93;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
  }
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance IndexSet.Index(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance IndexSet.Index(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance IndexSet.Index(void *a1, void *a2)
{
  return *a2 < *a1;
}

uint64_t IndexSet.init<A>(integersIn:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  uint64_t result = dispatch thunk of RangeExpression.relative<A>(to:)();
  if (__OFSUB__(v10, v9))
  {
    __break(1u);
  }
  else
  {
    id v7 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_initWithIndexesInRange_, v9, v10 - v9, 0, 0x7FFFFFFFFFFFFFFFLL);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v7;
    *(unsigned char *)(v8 + 24) = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
    *a3 = v8;
  }
  return result;
}

void IndexSet.hash(into:)()
{
  id v1 = *(id *)(*(void *)v0 + 16);
  NSObject.hash(into:)();
}

uint64_t *IndexSet.rangeView(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v8 = *v3;
  swift_retain();
  return IndexSet.RangeView.init(indexSet:intersecting:)(&v8, a1, a2, 0, a3);
}

uint64_t *IndexSet.rangeView<A>(of:)@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  v5[1] = 0x7FFFFFFFFFFFFFFFLL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v5[0] = v3;
  swift_retain();
  return IndexSet.RangeView.init(indexSet:intersecting:)(v5, v5[2], v5[3], 0, a1);
}

uint64_t IndexSet.subscript.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 80) = *v2;
  long long v3 = a1[1];
  *(_OWORD *)a2 = *a1;
  *(_OWORD *)(a2 + 16) = v3;
  long long v4 = a1[3];
  *(_OWORD *)(a2 + 32) = a1[2];
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = a1[4];
  return swift_retain();
}

id IndexSet.first.getter()
{
  return IndexSet.first.getter((SEL *)&selRef_firstIndex);
}

Swift::Int_optional __swiftcall IndexSet.integerGreaterThan(_:)(Swift::Int a1)
{
  id v1 = IndexSet.integerGreaterThan(_:)(a1, (SEL *)&selRef_indexGreaterThanIndex_);
  result.Foundation::Morphology::Definiteness value = (Swift::Int)v1;
  result.is_nil = v2;
  return result;
}

Swift::Int_optional __swiftcall IndexSet.integerLessThan(_:)(Swift::Int a1)
{
  id v1 = IndexSet.integerGreaterThan(_:)(a1, (SEL *)&selRef_indexLessThanIndex_);
  result.Foundation::Morphology::Definiteness value = (Swift::Int)v1;
  result.is_nil = v2;
  return result;
}

Swift::Int_optional __swiftcall IndexSet.integerGreaterThanOrEqualTo(_:)(Swift::Int a1)
{
  id v1 = IndexSet.integerGreaterThan(_:)(a1, (SEL *)&selRef_indexGreaterThanOrEqualToIndex_);
  result.Foundation::Morphology::Definiteness value = (Swift::Int)v1;
  result.is_nil = v2;
  return result;
}

Swift::Int_optional __swiftcall IndexSet.integerLessThanOrEqualTo(_:)(Swift::Int a1)
{
  id v1 = IndexSet.integerGreaterThan(_:)(a1, (SEL *)&selRef_indexLessThanOrEqualToIndex_);
  result.Foundation::Morphology::Definiteness value = (Swift::Int)v1;
  result.is_nil = v2;
  return result;
}

id IndexSet.integerGreaterThan(_:)(uint64_t a1, SEL *a2)
{
  id result = objc_msgSend(*(id *)(*(void *)v2 + 16), *a2, a1);
  if (result == (id)0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  return result;
}

char *IndexSet.indexRange(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *v3;
  if (a1 == a2) {
    goto LABEL_9;
  }
  id v8 = objc_msgSend(*(id *)(v5 + 16), sel_firstIndex);
  if (v8 == (id)0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_9;
  }
  uint64_t v9 = (uint64_t)v8;
  id result = (char *)objc_msgSend(*(id *)(v5 + 16), sel_lastIndex);
  if (result == (char *)0x7FFFFFFFFFFFFFFFLL || (uint64_t)result < a1) {
    goto LABEL_9;
  }
  BOOL v11 = __OFSUB__(a2, 1);
  uint64_t v12 = a2 - 1;
  if (v11)
  {
    __break(1u);
  }
  else
  {
    if (v12 < v9
      || (id v13 = objc_msgSend(*(id *)(v5 + 16), sel_indexGreaterThanOrEqualToIndex_, a1), v13 == (id)0x7FFFFFFFFFFFFFFFLL)
      || (uint64_t v14 = (uint64_t)v13,
          id v15 = objc_msgSend(*(id *)(v5 + 16), sel_indexLessThanOrEqualToIndex_, v12),
          v15 == (id)0x7FFFFFFFFFFFFFFFLL))
    {
LABEL_9:
      *(void *)&v25[0] = v5;
      id result = IndexSet._index(ofInteger:)(0, (uint64_t *)v28);
      long long v16 = *(_OWORD *)v28;
      long long v17 = *(_OWORD *)&v28[16];
      uint64_t v18 = *(void *)&v28[32];
      *(_OWORD *)a3 = *(_OWORD *)v28;
      *(_OWORD *)(a3 + 16) = v17;
      *(void *)(a3 + 32) = v18;
      *(_OWORD *)(a3 + 40) = v16;
      *(_OWORD *)(a3 + 56) = v17;
      *(void *)(a3 + 72) = v18;
      return result;
    }
    uint64_t v19 = (uint64_t)v15;
    IndexSet._index(ofInteger:)(v14, (uint64_t *)v28);
    long long v20 = *(_OWORD *)v28;
    long long v21 = *(_OWORD *)&v28[16];
    uint64_t v22 = *(void *)&v28[32];
    IndexSet._index(ofInteger:)(v19, (uint64_t *)v28);
    uint64_t v26 = *(void *)&v28[32];
    uint64_t v27 = v5;
    v25[0] = *(_OWORD *)v28;
    v25[1] = *(_OWORD *)&v28[16];
    id result = IndexSet.index(after:)(v25, v28);
    uint64_t v23 = *(void *)v28;
    if (*(uint64_t *)v28 >= (uint64_t)v20)
    {
      *(_OWORD *)a3 = v20;
      *(_OWORD *)(a3 + 16) = v21;
      *(void *)(a3 + 32) = v22;
      *(void *)(a3 + 40) = v23;
      long long v24 = *(_OWORD *)&v28[24];
      *(_OWORD *)(a3 + 48) = *(_OWORD *)&v28[8];
      *(_OWORD *)(a3 + 64) = v24;
      return result;
    }
  }
  __break(1u);
  return result;
}

char *IndexSet._index(ofInteger:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *v2;
  id v6 = objc_msgSend(*(id *)(*v2 + 16), sel_rangeCount);
  id result = (char *)objc_msgSend(*(id *)(v5 + 16), sel__indexOfRangeContainingIndex_, a1);
  if (result == (char *)0x7FFFFFFFFFFFFFFFLL)
  {
    *a2 = a1;
    a2[1] = 0;
    a2[2] = 0;
    a2[3] = 0;
LABEL_13:
    a2[4] = (uint64_t)v6;
    return result;
  }
  id v8 = result;
  uint64_t v9 = *(void **)(v5 + 16);
  char v10 = *(unsigned char *)(v5 + 24);
  id result = (char *)objc_msgSend(v9, sel_rangeAtIndex_, v8);
  uint64_t v12 = &result[v11];
  BOOL v13 = __OFADD__(result, v11);
  if (v10)
  {
    if (v13)
    {
      __break(1u);
      goto LABEL_15;
    }
    if ((uint64_t)v12 >= (uint64_t)result)
    {
LABEL_12:
      *a2 = a1;
      a2[1] = (uint64_t)result;
      a2[2] = (uint64_t)v12;
      a2[3] = (uint64_t)v8;
      goto LABEL_13;
    }
    __break(1u);
  }
  if (v13)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((uint64_t)v12 >= (uint64_t)result) {
    goto LABEL_12;
  }
LABEL_16:
  __break(1u);
  return result;
}

char *IndexSet.indexRange<A>(in:)@<X0>(uint64_t a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  return IndexSet.indexRange(in:)(v3, v4, a1);
}

id IndexSet.count(in:)(uint64_t a1, uint64_t a2)
{
  id result = *(id *)(*(void *)v2 + 16);
  BOOL v5 = __OFSUB__(a2, a1);
  if (*(unsigned char *)(*(void *)v2 + 24))
  {
    if (!v5) {
      return objc_msgSend(result, sel_countOfIndexesInRange_);
    }
    __break(1u);
  }
  if (!v5) {
    return objc_msgSend(result, sel_countOfIndexesInRange_);
  }
  __break(1u);
  return result;
}

id IndexSet.count<A>(in:)()
{
  uint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  id result = *(id *)(v1 + 16);
  BOOL v3 = __OFSUB__(v5, v4);
  if (*(unsigned char *)(v1 + 24))
  {
    if (!v3) {
      return objc_msgSend(result, sel_countOfIndexesInRange_, v4, v5 - v4, 0, 0x7FFFFFFFFFFFFFFFLL);
    }
    __break(1u);
  }
  if (!v3) {
    return objc_msgSend(result, sel_countOfIndexesInRange_, v4, v5 - v4, 0, 0x7FFFFFFFFFFFFFFFLL);
  }
  __break(1u);
  return result;
}

id IndexSet.contains(integersIn:)(uint64_t a1, uint64_t a2)
{
  return IndexSet.contains(integersIn:)(a1, a2, (SEL *)&selRef_containsIndexesInRange_);
}

id IndexSet.contains<A>(integersIn:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IndexSet.contains<A>(integersIn:)(a1, a2, a3, (SEL *)&selRef_containsIndexesInRange_);
}

id IndexSet.intersects(integersIn:)(uint64_t a1, uint64_t a2)
{
  return IndexSet.contains(integersIn:)(a1, a2, (SEL *)&selRef_intersectsIndexesInRange_);
}

id IndexSet.contains(integersIn:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  id result = *(id *)(*(void *)v3 + 16);
  BOOL v6 = __OFSUB__(a2, a1);
  if (*(unsigned char *)(*(void *)v3 + 24))
  {
    if (!v6) {
      return objc_msgSend(result, *a3, a1, a2 - a1);
    }
    __break(1u);
  }
  if (!v6) {
    return objc_msgSend(result, *a3, a1, a2 - a1);
  }
  __break(1u);
  return result;
}

id IndexSet.intersects<A>(integersIn:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IndexSet.contains<A>(integersIn:)(a1, a2, a3, (SEL *)&selRef_intersectsIndexesInRange_);
}

id IndexSet.contains<A>(integersIn:)(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v6 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  id result = *(id *)(v6 + 16);
  BOOL v8 = __OFSUB__(v10, v9);
  if (*(unsigned char *)(v6 + 24))
  {
    if (!v8) {
      return objc_msgSend(result, *a4, v9, v10 - v9, 0, 0x7FFFFFFFFFFFFFFFLL);
    }
    __break(1u);
  }
  if (!v8) {
    return objc_msgSend(result, *a4, v9, v10 - v9, 0, 0x7FFFFFFFFFFFFFFFLL);
  }
  __break(1u);
  return result;
}

char *IndexSet.index(before:)@<X0>(void **a1@<X0>, char **a2@<X8>)
{
  uint64_t v6 = (char *)*a1;
  id result = (char *)a1[1];
  id v7 = (char *)a1[2];
  BOOL v8 = (char *)a1[3];
  uint64_t v9 = (char *)a1[4];
  if (v6 != result) {
    goto LABEL_11;
  }
  if (!v8)
  {
LABEL_14:
    id result = v6;
LABEL_18:
    *a2 = v6;
    a2[1] = result;
    a2[2] = v7;
    a2[3] = v8;
    a2[4] = v9;
    return result;
  }
  BOOL v10 = __OFSUB__(v8--, 1);
  if (v10)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v11 = *(void **)(*(void *)v2 + 16);
  char v12 = *(unsigned char *)(*(void *)v2 + 24);
  id result = (char *)objc_msgSend(v11, sel_rangeAtIndex_, v8);
  id v7 = &result[v13];
  BOOL v14 = __OFADD__(result, v13);
  if (v12)
  {
    if (v14)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    if ((uint64_t)v7 < (uint64_t)result)
    {
      __break(1u);
LABEL_11:
      BOOL v10 = __OFSUB__(v6--, 1);
      if (!v10) {
        goto LABEL_18;
      }
      __break(1u);
      goto LABEL_14;
    }
    goto LABEL_17;
  }
  if (v14)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if ((uint64_t)v7 >= (uint64_t)result)
  {
LABEL_17:
    uint64_t v6 = v7 - 1;
    if (!__OFSUB__(v7, 1)) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t IndexSet.formSymmetricDifference(_:)(void *a1)
{
  return IndexSet.formUnion(_:)(a1, (void (*)(uint64_t *__return_ptr, void *))IndexSet.symmetricDifference(_:));
}

Swift::Int_optional __swiftcall IndexSet.update(with:)(Swift::Int with)
{
  if (*(unsigned char *)(*(void *)v1 + 24) != 1)
  {
    uint64_t v4 = *(void **)(*(void *)v1 + 16);
LABEL_6:
    id v5 = v4;
    objc_msgSend(v5, sel_mutableCopy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
    swift_dynamicCast();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v10;
    *(unsigned char *)(v6 + 24) = 1;
    *(void *)uint64_t v1 = v6;
    id v7 = v10;
    swift_release();
    objc_msgSend(v7, sel_addIndex_, with);

    goto LABEL_7;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v4 = *(void **)(*(void *)v1 + 16);
  if ((*(unsigned char *)(*(void *)v1 + 24) & 1) == 0 || (isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_6;
  }
  objc_msgSend(v4, sel_addIndex_, with);
LABEL_7:
  Swift::Int v8 = with;
  Swift::Bool v9 = 0;
  result.Foundation::Morphology::Definiteness value = v8;
  result.is_nil = v9;
  return result;
}

Swift::Int_optional __swiftcall IndexSet.remove(_:)(Swift::Int a1)
{
  unsigned int v3 = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_containsIndex_, a1);
  if (*(unsigned char *)(*(void *)v1 + 24) == 1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v5 = *(void **)(*(void *)v1 + 16);
    if (*(unsigned char *)(*(void *)v1 + 24) & 1) != 0 && (isUniquelyReferenced_nonNull_native)
    {
      objc_msgSend(v5, sel_removeIndex_, a1);
      goto LABEL_7;
    }
  }
  else
  {
    id v5 = *(void **)(*(void *)v1 + 16);
  }
  id v6 = v5;
  objc_msgSend(v6, sel_mutableCopy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
  swift_dynamicCast();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v11;
  *(unsigned char *)(v7 + 24) = 1;
  *(void *)uint64_t v1 = v7;
  id v8 = v11;
  swift_release();
  objc_msgSend(v8, sel_removeIndex_, a1);

LABEL_7:
  char v9 = v3 ^ 1;
  if (v3) {
    Swift::Int v10 = a1;
  }
  else {
    Swift::Int v10 = 0;
  }
  result.Foundation::Morphology::Definiteness value = v10;
  result.is_nil = v9;
  return result;
}

uint64_t IndexSet.filteredIndexSet(in:includeInteger:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v9 = result;
  Swift::Int v10 = *(void **)(*(void *)v5 + 16);
  if (*(unsigned char *)(*(void *)v5 + 24))
  {
    id v32 = 0;
    uint64_t v11 = (void *)swift_allocObject();
    v11[2] = a3;
    v11[3] = a4;
    v11[4] = &v32;
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = partial apply for closure #1 in closure #1 in IndexSet.filteredIndexSet(in:includeInteger:);
    *(void *)(v12 + 24) = v11;
    uint64_t v30 = partial apply for thunk for @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool);
    uint64_t v31 = v12;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v27 = 1107296256;
    uint64_t v28 = thunk for @escaping @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool);
    uint64_t v29 = &block_descriptor_8;
    uint64_t v13 = _Block_copy(&aBlock);
    id v14 = v10;
    swift_retain();
    swift_release();
    id v15 = objc_msgSend(v14, sel_indexesInRange_options_passingTest_, v9, v6, 0, v13);
    _Block_release(v13);
    LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
    Swift::Int_optional result = swift_release();
    if ((v13 & 1) == 0)
    {
      if (v15) {
        goto LABEL_5;
      }
      goto LABEL_9;
    }
    goto LABEL_12;
  }
  id v32 = 0;
  long long v20 = (void *)swift_allocObject();
  v20[2] = a3;
  v20[3] = a4;
  v20[4] = &v32;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = closure #1 in closure #1 in IndexSet.filteredIndexSet(in:includeInteger:)partial apply;
  *(void *)(v21 + 24) = v20;
  uint64_t v30 = thunk for @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool)partial apply;
  uint64_t v31 = v21;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v27 = 1107296256;
  uint64_t v28 = thunk for @escaping @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool);
  uint64_t v29 = &block_descriptor_14;
  uint64_t v22 = _Block_copy(&aBlock);
  swift_retain();
  id v14 = v10;
  swift_release();
  id v15 = objc_msgSend(v14, sel_indexesInRange_options_passingTest_, v9, v6, 0, v22);
  _Block_release(v22);
  LOBYTE(v22) = swift_isEscapingClosureAtFileLocation();
  Swift::Int_optional result = swift_release();
  if ((v22 & 1) == 0)
  {
    if (v15)
    {
LABEL_5:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
      uint64_t v16 = swift_allocObject();
      id v17 = v15;
      objc_msgSend(v17, sel_copy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSIndexSet);
      swift_dynamicCast();
      *(void *)(v16 + 16) = v25;
      *(unsigned char *)(v16 + 24) = 0;

      id v18 = v32;
      if (v32)
      {
LABEL_6:
        id v19 = v18;
        swift_willThrow();
        swift_release();

        return swift_release();
      }
      goto LABEL_10;
    }
LABEL_9:
    id v23 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v23;
    *(unsigned char *)(v16 + 24) = 0;
    id v18 = v32;
    if (v32) {
      goto LABEL_6;
    }
LABEL_10:

    Swift::Int_optional result = swift_release();
    *a5 = v16;
    return result;
  }
LABEL_13:
  __break(1u);
  return result;
}

{
  BOOL v5;
  uint64_t v6;

  uint64_t v5 = __OFADD__(a2, 1);
  uint64_t v6 = a2 + 1;
  if (!v5) {
    return IndexSet.filteredIndexSet(in:includeInteger:)(result, v6, a3, a4, a5);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in IndexSet.filteredIndexSet(in:includeInteger:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 1;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3) & 1;
}

uint64_t IndexSet.filteredIndexSet(includeInteger:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return IndexSet.filteredIndexSet(in:includeInteger:)(0, 0x7FFFFFFFFFFFFFFELL, a1, a2, a3);
}

Swift::Int IndexSet.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = *(id *)(v1 + 16);
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

char *protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance IndexSet@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  long long v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  return specialized BidirectionalCollection.index(_:offsetBy:)((char **)v6, a2, *v3, a3);
}

id protocol witness for SetAlgebra.contains(_:) in conformance IndexSet(void *a1)
{
  return objc_msgSend(*(id *)(*(void *)v1 + 16), sel_containsIndex_, *a1);
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance IndexSet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SetAlgebra.union(_:) in conformance IndexSet(a1, a2, a3, (void (*)(void))IndexSet.union(_:));
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance IndexSet@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IndexSet.intersection(_:)(a1, a2);

  return swift_release();
}

Swift::Int protocol witness for SetAlgebra.remove(_:) in conformance IndexSet@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X8>)
{
  Swift::Int_optional v4 = IndexSet.remove(_:)(*a1);
  *(void *)a2 = v4.value;
  *(unsigned char *)(a2 + 8) = v4.is_nil;
  return v4.value;
}

unint64_t protocol witness for SetAlgebra.update(with:) in conformance IndexSet@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = (unint64_t)IndexSet.update(with:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance IndexSet(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SetAlgebra.formUnion(_:) in conformance IndexSet(a1, a2, a3, (void (*)(uint64_t *__return_ptr, void *))IndexSet.union(_:));
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance IndexSet(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SetAlgebra.formUnion(_:) in conformance IndexSet(a1, a2, a3, (void (*)(uint64_t *__return_ptr, void *))IndexSet.symmetricDifference(_:));
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance IndexSet(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, void *))
{
  uint64_t v5 = *v4;
  v7[0] = *a1;
  v7[1] = v5;
  a4(&v8, v7);
  swift_release();
  uint64_t result = swift_release();
  uint64_t *v4 = v8;
  return result;
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance IndexSet@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v8 = *v2;
  v6[0] = v4;
  v6[1] = v8;
  swift_retain();
  IndexSet.symmetricDifference(_:)(v6, &v7);
  IndexSet.intersection(_:)(&v7, a2);
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance IndexSet(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v6 = *v1;
  uint64_t v7 = v2;
  IndexSet.intersection(_:)(&v7, (uint64_t)&v5);
  unsigned __int8 v3 = specialized static IndexSet.== infix(_:_:)((uint64_t)&v5, (uint64_t)&v6);
  swift_release();
  return v3 & 1;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance IndexSet(uint64_t *a1)
{
  return specialized SetAlgebra.isDisjoint(with:)(*a1);
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance IndexSet(uint64_t *a1)
{
  uint64_t v2 = *v1;
  uint64_t v6 = *a1;
  uint64_t v7 = v2;
  IndexSet.intersection(_:)(&v7, (uint64_t)&v5);
  unsigned __int8 v3 = specialized static IndexSet.== infix(_:_:)((uint64_t)&v5, (uint64_t)&v6);
  swift_release();
  return v3 & 1;
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance IndexSet(uint64_t *a1)
{
  return specialized SetAlgebra.subtract(_:)(*a1);
}

void protocol witness for Hashable.hash(into:) in conformance IndexSet()
{
  id v1 = *(id *)(*(void *)v0 + 16);
  NSObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IndexSet()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = *(id *)(v1 + 16);
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t protocol witness for Collection.indices.getter in conformance IndexSet@<X0>(void *a1@<X8>)
{
  id v2 = a1 + 1;
  *a1 = *v1;
  unsigned __int8 v3 = a1 + 6;
  swift_retain();
  IndexSet.startIndex.getter(v2);
  return IndexSet.endIndex.getter(v3);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance IndexSet()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_count) == 0;
}

double protocol witness for Collection._customLastIndexOfEquatableElement(_:) in conformance IndexSet@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 25) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 41) = 1;
  return result;
}

char *protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance IndexSet@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v5 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v5;
  uint64_t v9 = *(void *)(a1 + 32);
  long long v6 = *(_OWORD *)(a3 + 16);
  v10[0] = *(_OWORD *)a3;
  v10[1] = v6;
  uint64_t v11 = *(void *)(a3 + 32);
  return specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)((char **)v8, a2, (void **)v10, *v4, a4);
}

char *protocol witness for BidirectionalCollection.distance(from:to:) in conformance IndexSet(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v3;
  uint64_t v7 = *(void *)(a1 + 32);
  long long v4 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v4;
  uint64_t v9 = *(void *)(a2 + 32);
  return specialized BidirectionalCollection._distance(from:to:)(v6, (void **)v8, *v2);
}

uint64_t *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance IndexSet(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[5];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }
  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }
  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance IndexSet(void *result, void *a2)
{
  if (*result < *a2 || a2[5] < *result) {
    __break(1u);
  }
  return result;
}

{
  if (*result < *a2 || a2[5] < result[5]) {
    __break(1u);
  }
  return result;
}

id protocol witness for Sequence.underestimatedCount.getter in conformance IndexSet()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_count);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance IndexSet()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_release();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance IndexSet(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance IndexSet@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySiqd__Isgyrzo_10Foundation8IndexSetVABsAG_pAJRszr__lIetMggrzo_Tp5(a1, a2);
}

uint64_t IndexSet.description.getter()
{
  objc_msgSend(*(id *)(*(void *)v0 + 16), sel_count);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x73657865646E6920;
  v2._object = (void *)0xE800000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t IndexSet.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  BOOL v4 = (char *)&v22[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v22[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v0;
  uint64_t v9 = *(void **)(*v0 + 16);
  swift_retain();
  Swift::Int v10 = specialized _copyCollectionToContiguousArray<A>(_:)(0, (uint64_t)objc_msgSend(v9, sel_rangeCount), v8);
  swift_release();
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Range<Int>]);
  *(void *)&long long v23 = v10;
  long long v21 = xmmword_18218A730;
  outlined init with take of Any(&v23, v22);
  uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v13 = v11[2];
  unint64_t v12 = v11[3];
  if (v13 >= v12 >> 1) {
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v11);
  }
  v11[2] = v13 + 1;
  id v14 = &v11[6 * v13];
  long long v15 = v21;
  long long v16 = v22[1];
  void v14[3] = v22[0];
  v14[4] = v16;
  v14[2] = v15;
  *(void *)&long long v21 = v8;
  *(void *)&long long v23 = v11;
  uint64_t v17 = *MEMORY[0x1E4FBC410];
  uint64_t v18 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 104))(v7, v17, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v7, 0, 1, v18);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBC430], v1);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [(label: String?, value: Any)] and conformance [A], &demangling cache variable for type metadata for [(label: String?, value: Any)]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t static IndexSet._getObjectiveCType()()
{
  return type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSIndexSet);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance IndexSet()
{
  objc_msgSend(*(id *)(*(void *)v0 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSIndexSet);
  swift_dynamicCast();
  return v2;
}

uint64_t NSIndexSet._toCustomAnyHashable()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  uint64_t v1 = swift_allocObject();
  id v2 = v0;
  objc_msgSend(v2, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSIndexSet);
  swift_dynamicCast();
  *(void *)(v1 + 16) = v4;
  *(unsigned char *)(v1 + 24) = 0;

  lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSIndexSet()
{
  id v1 = *v0;
  NSIndexSet._toCustomAnyHashable()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IndexSet.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IndexSet.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance IndexSet.RangeCodingKeys()
{
  if (*v0) {
    return 0x6874676E656CLL;
  }
  else {
    return 0x6E6F697461636F6CLL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IndexSet.RangeCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized IndexSet.RangeCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IndexSet.RangeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IndexSet.RangeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t IndexSet.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<IndexSet.RangeCodingKeys>);
  uint64_t v22 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<IndexSet.CodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  Swift::Int v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1[3];
  uint64_t v25 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v11);
  lazy protocol witness table accessor for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  }
  uint64_t v21 = v4;
  unint64_t v12 = v24;
  uint64_t v23 = v8;
  KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
  id v13 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  *(unsigned char *)(v14 + 24) = 0;
  uint64_t v29 = v14;
  __swift_project_boxed_opaque_existential_1(v27, v28);
  if (dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter())
  {
LABEL_3:
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
    *unint64_t v12 = v14;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  }
  uint64_t v20 = v7;
  uint64_t v16 = v21;
  uint64_t v17 = (void (**)(char *, uint64_t))(v22 + 8);
  while (1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v27, v28);
    lazy protocol witness table accessor for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys();
    dispatch thunk of UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)();
    char v26 = 0;
    uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)();
    char v26 = 1;
    uint64_t result = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v19 = v18 + result;
    if (__OFADD__(v18, result)) {
      break;
    }
    if (v19 < v18) {
      goto LABEL_11;
    }
    IndexSet.insert(integersIn:)(v18, v19);
    (*v17)(v6, v16);
    __swift_project_boxed_opaque_existential_1(v27, v28);
    if (dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter())
    {
      uint64_t v14 = v29;
      uint64_t v7 = v20;
      goto LABEL_3;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

char *IndexSet.encode(to:)(void *a1)
{
  uint64_t v3 = v2;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<IndexSet.RangeCodingKeys>);
  char v26 = *(void (***)(char *, uint64_t))(v28 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<IndexSet.CodingKeys>);
  uint64_t v23 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v22 = v9;
  KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  uint64_t v11 = *(void **)(v10 + 16);
  uint64_t v27 = v10;
  swift_retain();
  id v12 = objc_msgSend(v11, sel_rangeCount);
  uint64_t v24 = v7;
  id v25 = v12;
  if (v12)
  {
    uint64_t v13 = 0;
    ++v26;
    while (1)
    {
      char v14 = *(unsigned char *)(v27 + 24);
      uint64_t result = (char *)objc_msgSend(*(id *)(v27 + 16), sel_rangeAtIndex_, v13);
      uint64_t v16 = result;
      uint64_t v18 = &result[v17];
      BOOL v19 = __OFADD__(result, v17);
      if (v14)
      {
        if (v19) {
          goto LABEL_24;
        }
        if ((uint64_t)v18 < (uint64_t)result) {
          goto LABEL_25;
        }
      }
      else
      {
        if (v19) {
          goto LABEL_26;
        }
        if ((uint64_t)v18 < (uint64_t)result) {
          goto LABEL_27;
        }
      }
      if ((uint64_t)v18 < (uint64_t)result) {
        break;
      }
      id v20 = (id)(v13 + 1);
      if (__OFADD__(v13, 1)) {
        goto LABEL_22;
      }
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
      lazy protocol witness table accessor for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys();
      dispatch thunk of UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)();
      char v31 = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (v3)
      {
        (*v26)(v6, v28);
        goto LABEL_20;
      }
      uint64_t result = (char *)(v18 - v16);
      if (__OFSUB__(v18, v16)) {
        goto LABEL_23;
      }
      char v31 = 1;
      uint64_t v21 = v28;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*v26)(v6, v21);
      ++v13;
      if (v20 == v25) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
  else
  {
LABEL_20:
    swift_release();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v22, v24);
    return (char *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance IndexSet@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return IndexSet.init(from:)(a1, a2);
}

char *protocol witness for Encodable.encode(to:) in conformance IndexSet(void *a1)
{
  return IndexSet.encode(to:)(a1);
}

void *IndexSet.init(integersIn:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<RangeSet<Int>.Ranges>);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v44 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RangeSet<Int>.Ranges);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v44 - v15;
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RangeSet<Int>);
  uint64_t v48 = a1;
  RangeSet.ranges.getter();
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges, &demangling cache variable for type metadata for RangeSet<Int>.Ranges);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v45 = a2;
  uint64_t v49 = (int *)v4;
  if (v53 == (void *)v52[0])
  {
    uint64_t v17 = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v18 = v16;
    BOOL v19 = *(void (**)(char *, uint64_t))(v11 + 8);
    v19(v18, v10);
  }
  else
  {
    id v20 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v22 = *v21;
    v20(v52, 0);
    uint64_t v23 = v16;
    BOOL v19 = *(void (**)(char *, uint64_t))(v11 + 8);
    v19(v23, v10);
    if (v22 < 0)
    {
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(v47 - 8) + 8))(v48);
      uint64_t v25 = 0;
      goto LABEL_7;
    }
    uint64_t v17 = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  }
  id v24 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
  v44[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v24;
  *(unsigned char *)(v25 + 24) = 0;
  RangeSet.ranges.getter();
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  uint64_t v26 = v11 + 16;
  uint64_t v50 = v27;
  v27(v6, v13, v10);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v51 = v17;
  v19(v13, v10);
  uint64_t v28 = v49;
  *(void *)&v6[v49[9]] = v52[0];
  outlined init with take of IndexingIterator<RangeSet<Int>.Ranges>((uint64_t)v6, (uint64_t)v9);
  uint64_t v29 = &v9[v28[9]];
  uint64_t v30 = *(void *)v29;
  dispatch thunk of Collection.endIndex.getter();
  if (v30 == v52[0])
  {
LABEL_6:
    (*(void (**)(uint64_t))(*(void *)(v47 - 8) + 8))(v48);
    uint64_t result = (void *)outlined destroy of IndexingIterator<RangeSet<Int>.Ranges>((uint64_t)v9);
LABEL_7:
    *uint64_t v45 = v25;
    return result;
  }
  uint64_t v49 = (int *)v19;
  v44[1] = MEMORY[0x1E4FBC840] + 8;
  v44[2] = v26;
  while (1)
  {
    while (1)
    {
      id v32 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v34 = *v33;
      uint64_t v35 = v33[1];
      v32(v52, 0);
      v50(v13, v9, v10);
      dispatch thunk of Collection.formIndex(after:)();
      ((void (*)(char *, uint64_t))v49)(v13, v10);
      if (*(unsigned char *)(v25 + 24)) {
        break;
      }
      uint64_t result = *(void **)(v25 + 16);
LABEL_16:
      id v46 = result;
      objc_msgSend(v46, sel_mutableCopy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
      swift_dynamicCast();
      uint64_t v38 = v53;
      uint64_t v39 = swift_allocObject();
      *(void *)(v39 + 16) = v38;
      *(unsigned char *)(v39 + 24) = 1;
      id v40 = v38;
      uint64_t result = (void *)swift_release();
      uint64_t v41 = v35 - v34;
      if (__OFSUB__(v35, v34)) {
        goto LABEL_24;
      }
LABEL_20:
      uint64_t v25 = v39;
      objc_msgSend(v40, sel_addIndexesInRange_, v34, v41);

      uint64_t v43 = *(void *)v29;
      dispatch thunk of Collection.endIndex.getter();
      if (v43 == v52[0]) {
        goto LABEL_6;
      }
    }
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t result = *(void **)(v25 + 16);
    if ((*(unsigned char *)(v25 + 24) & 1) == 0) {
      goto LABEL_16;
    }
    if (!isUniquelyReferenced_nonNull_native)
    {
      id v46 = result;
      objc_msgSend(v46, sel_mutableCopy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
      swift_dynamicCast();
      uint64_t v42 = v53;
      uint64_t v39 = swift_allocObject();
      *(void *)(v39 + 16) = v42;
      *(unsigned char *)(v39 + 24) = 1;
      id v40 = v42;
      uint64_t result = (void *)swift_release();
      uint64_t v41 = v35 - v34;
      if (__OFSUB__(v35, v34)) {
        goto LABEL_25;
      }
      goto LABEL_20;
    }
    if (__OFSUB__(v35, v34)) {
      break;
    }
    objc_msgSend(result, sel_addIndexesInRange_, v34, v35 - v34);
    uint64_t v37 = *(void *)v29;
    dispatch thunk of Collection.endIndex.getter();
    if (v37 == v52[0]) {
      goto LABEL_6;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t RangeSet<>.init(_:)(uint64_t a1)
{
  return RangeSet.init<A>(_:)();
}

uint64_t specialized static IndexSet.RangeView.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
  {
    uint64_t v4 = a1[2];
    uint64_t v6 = a2[2];
    uint64_t v7 = v4;
    unsigned __int8 v3 = specialized static IndexSet.== infix(_:_:)((uint64_t)&v7, (uint64_t)&v6);
  }
  else
  {
    unsigned __int8 v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_181C1767C()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in closure #1 in IndexSet.filteredIndexSet(in:includeInteger:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in closure #1 in IndexSet.filteredIndexSet(in:includeInteger:)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_181C17698()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool)()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_181C176D4()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_181C176E4()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t specialized static IndexSet._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  uint64_t v4 = swift_allocObject();
  id v5 = a1;
  objc_msgSend(v5, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();

  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSIndexSet);
  uint64_t result = swift_dynamicCast();
  *(void *)(v4 + 16) = v7;
  *(unsigned char *)(v4 + 24) = 0;
  *a2 = v4;
  return result;
}

uint64_t specialized static IndexSet._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  uint64_t v4 = swift_allocObject();
  id v5 = a1;
  objc_msgSend(v5, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();

  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSIndexSet);
  swift_dynamicCast();
  *(void *)(v4 + 16) = v7;
  *(unsigned char *)(v4 + 24) = 0;
  *a2 = v4;
  return 1;
}

unint64_t lazy protocol witness table accessor for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys;
  if (!lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys;
  if (!lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys;
  if (!lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys;
  if (!lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys;
  if (!lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys;
  if (!lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys;
  if (!lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys;
  if (!lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys);
  }
  return result;
}

uint64_t outlined init with take of IndexingIterator<RangeSet<Int>.Ranges>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<RangeSet<Int>.Ranges>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of IndexingIterator<RangeSet<Int>.Ranges>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<RangeSet<Int>.Ranges>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in IndexSet.RangeView()
{
  return lazy protocol witness table accessor for type DefaultIndices<IndexSet.RangeView> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<IndexSet.RangeView> and conformance <> DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<IndexSet.RangeView>, (void (*)(void))lazy protocol witness table accessor for type IndexSet.RangeView and conformance IndexSet.RangeView);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in IndexSet.RangeView()
{
  return lazy protocol witness table accessor for type DefaultIndices<IndexSet.RangeView> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<IndexSet.RangeView> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<IndexSet.RangeView>, (void (*)(void))lazy protocol witness table accessor for type IndexSet.RangeView and conformance IndexSet.RangeView);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in IndexSet.RangeView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type DefaultIndices<IndexSet.RangeView> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<IndexSet.RangeView>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in IndexSet.RangeView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Slice<IndexSet.RangeView> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<IndexSet.RangeView>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in IndexSet.RangeView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<IndexSet.RangeView> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<IndexSet.RangeView>);
}

unint64_t instantiation function for generic protocol witness table for IndexSet(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
  a1[2] = lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
  a1[3] = lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
  unint64_t result = lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
  a1[4] = result;
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in IndexSet()
{
  return lazy protocol witness table accessor for type DefaultIndices<IndexSet.RangeView> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<IndexSet> and conformance <> DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<IndexSet>, (void (*)(void))lazy protocol witness table accessor for type IndexSet and conformance IndexSet);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in IndexSet()
{
  return lazy protocol witness table accessor for type DefaultIndices<IndexSet.RangeView> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<IndexSet> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<IndexSet>, (void (*)(void))lazy protocol witness table accessor for type IndexSet and conformance IndexSet);
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<IndexSet.RangeView> and conformance <> DefaultIndices<A>(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in IndexSet()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type DefaultIndices<IndexSet> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<IndexSet>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in IndexSet()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Slice<IndexSet> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<IndexSet>);
}

void *assignWithCopy for IndexSet.RangeView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for IndexSet.RangeView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for IndexSet.RangeView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IndexSet.RangeView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for IndexSet.Index(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for IndexSet.Index(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 40) = v3;
  return result;
}

uint64_t type metadata completion function for _MutablePair()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for _MutablePair(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    unsigned int v11 = a2[v6];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v13 = v6;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a2;
          goto LABEL_21;
        case 2:
          int v14 = *(unsigned __int16 *)a2;
          goto LABEL_21;
        case 3:
          int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_21;
        case 4:
          int v14 = *(_DWORD *)a2;
LABEL_21:
          int v15 = (v14 | (v12 << (8 * v6))) + 2;
          unsigned int v11 = v14 + 2;
          if (v6 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1)
    {
      (*(void (**)(void *))(v5 + 16))(a1);
      *((unsigned char *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v6) = 0;
    }
  }
  else
  {
    uint64_t v10 = *(void *)a2;
    *char v3 = *(void *)a2;
    char v3 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for _MutablePair(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24) - 8;
  uint64_t v3 = *(void *)v2;
  unint64_t v4 = *(void *)(*(void *)v2 + 64);
  if (v4 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  unsigned int v5 = a1[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_12;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_12:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1) {
    uint64_t v10 = v3;
  }
  else {
    uint64_t v10 = *(void *)(*(void *)(a2 + 16) - 8);
  }
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t initializeWithCopy for _MutablePair(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(unsigned char *)(a1 + v6) = v12;
  return a1;
}

unsigned __int8 *assignWithCopy for _MutablePair(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 16))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t initializeWithTake for _MutablePair(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(unsigned char *)(a1 + v6) = v12;
  return a1;
}

unsigned __int8 *assignWithTake for _MutablePair(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 32))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for _MutablePair(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (v3 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_22:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_22;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 255;
}

void storeEnumTagSinglePayload for _MutablePair(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x181C18F30);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for _MutablePair(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64);
  if (v2 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  uint64_t v3 = a1[v2];
  int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v7 = (v6 | (v4 << (8 * v2))) + 2;
        LODWORD(v3) = v6 + 2;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v7;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void destructiveInjectEnumTag for _MutablePair(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 1)
  {
    uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
    if (*(void *)(v6 + 64) <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
      size_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a2 - 2;
    if (v7 < 4)
    {
      unsigned int v9 = v8 >> (8 * v7);
      int v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 2;
      bzero(a1, v7);
      if (v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if (v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 2;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    if (*(void *)(v4 + 64) > v5) {
      unint64_t v5 = *(void *)(v4 + 64);
    }
    a1[v5] = a2;
  }
}

uint64_t type metadata accessor for _MutablePair()
{
  return __swift_instantiateGenericMetadata();
}

unsigned char *storeEnumTagSinglePayload for IndexSet.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181C191FCLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for IndexSet.CodingKeys()
{
  return &unk_1ECA4BF10;
}

unsigned char *storeEnumTagSinglePayload for IndexSet.RangeCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181C19300);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for IndexSet.RangeCodingKeys()
{
  return &unk_1ECA4BFA0;
}

uint64_t specialized IndexSet.RangeCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6874676E656CLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance String@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

NSString __swiftcall Substring._bridgeToObjectiveC()()
{
  MEMORY[0x185301F50]();
  uint64_t v0 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return (NSString)v0;
}

BOOL static Substring._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  return a2[3] != 0;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Substring()
{
  MEMORY[0x185301F50](*v0, v0[1], v0[2], v0[3]);
  uint64_t v1 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v1;
}

BOOL protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Substring(void *a1, uint64_t *a2)
{
  return a2[3] != 0;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Substring@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized static Substring._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  return result;
}

unint64_t String._pathResolveFlags(prefixLength:)(unint64_t *a1, unint64_t a2, unint64_t a3)
{
  if ((specialized Sequence<>.starts<A>(with:)(0x2E2FuLL, 0xE200000000000000, a2, a3) & 1) == 0) {
    goto LABEL_23;
  }
  if (specialized Sequence<>.starts<A>(with:)(0x6C6C6F666F6E2E2FuLL, 0xEB000000002F776FLL, a2, a3))
  {
    unsigned __int8 v6 = 0;
    LODWORD(v7) = 1;
    unint64_t result = 10;
LABEL_25:
    *a1 = result;
    return v7 | ((unint64_t)v6 << 32);
  }
  if ((specialized Sequence<>.starts<A>(with:)(0x766C6F7365722E2FuLL, 0xEA00000000002F65, a2, a3) & 1) == 0)
  {
LABEL_23:
    unint64_t result = 0;
    LODWORD(v7) = 0;
    goto LABEL_24;
  }
  BOOL v9 = (a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0;
  if ((a3 & 0x1000000000000000) != 0)
  {
    unint64_t v12 = MEMORY[0x185302230](15, 10, a2, a3);
    uint64_t v10 = a3 & 0x2000000000000000;
  }
  else
  {
    uint64_t v10 = a3 & 0x2000000000000000;
    unint64_t v11 = HIBYTE(a3) & 0xE;
    if ((a3 & 0x2000000000000000) == 0) {
      unint64_t v11 = a2 & 0xFFFFFFFFFFFELL;
    }
    if (v11 < 0xA)
    {
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    unint64_t v12 = 655364;
  }
  if (v10) {
    unint64_t v13 = HIBYTE(a3) & 0xF;
  }
  else {
    unint64_t v13 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v12 >> 14 == 4 * v13) {
    goto LABEL_35;
  }
  char v32 = v9;
  swift_bridgeObjectRetain();
  unint64_t v14 = specialized Collection.suffix(from:)(v12, a2, a3);
  unint64_t v16 = v15;
  unint64_t v18 = v17;
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  unint64_t v21 = specialized Collection<>.firstIndex(of:)(0x2Fu, v14, v16, v18, v20);
  LOBYTE(v16) = v22;
  swift_bridgeObjectRelease();
  if (v16) {
    goto LABEL_35;
  }
  if (v12 >> 14 > v21 >> 14) {
    goto LABEL_33;
  }
  unint64_t v23 = String.subscript.getter();
  uint64_t v27 = v26;
  if (!((v23 ^ v24) >> 14))
  {
LABEL_34:
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  uint64_t v28 = v23;
  uint64_t v29 = v24;
  uint64_t v30 = v25;
  uint64_t v31 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5s6UInt32VSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5i9VGXEfU_s6L7V_SsTG5SiTf1cn_n(v23, v24, v25, v26, 10);
  if ((v31 & 0x10000000000) != 0)
  {
    unint64_t v7 = specialized _parseInteger<A, B>(ascii:radix:)(v28, v29, v30, v27, 10);
    swift_bridgeObjectRelease();
    if ((v7 & 0x100000000) == 0) {
      goto LABEL_27;
    }
LABEL_35:
    unint64_t result = 0;
    LODWORD(v7) = 0;
    unsigned __int8 v6 = 1;
    goto LABEL_25;
  }
  unint64_t v7 = v31;
  swift_bridgeObjectRelease();
  if ((v7 & 0x100000000) != 0) {
    goto LABEL_35;
  }
LABEL_27:
  if ((v21 & 0xC) != 4 << v32)
  {
    unint64_t result = v21 >> 16;
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_29;
    }
LABEL_24:
    unsigned __int8 v6 = 0;
    goto LABEL_25;
  }
  unint64_t result = (unint64_t)_StringGuts._slowEnsureMatchingEncoding(_:)(v21, a2, a3) >> 16;
  if ((a3 & 0x1000000000000000) == 0) {
    goto LABEL_24;
  }
LABEL_29:
  if (v13 >= result)
  {
    unint64_t result = String.UTF8View._foreignDistance(from:to:)();
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t String._queryResolveFlags()(unint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v3 = a1;
  char v107 = 1;
  char v103 = 0;
  unint64_t v4 = (unint64_t)&v77;
  char v102 = 0;
  char v101 = 0;
  char v100 = 0;
  char v99 = 0;
  char v98 = 0;
  char v96 = 0;
  char v94 = 1;
  char v92 = 0;
  char v91 = 0;
  char v104 = 0;
  char v97 = 0;
  if ((a2 & 0x1000000000000000) != 0)
  {
LABEL_86:
    *(void *)&v105[0] = v3;
    *((void *)&v105[0] + 1) = v2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    uint64_t v45 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v46 = (unsigned __int16 *)objc_msgSend(v45, sel__fastCharacterContents);
    id v47 = v45;
    if (v46)
    {
      *(void *)&v105[0] = v3;
      *((void *)&v105[0] + 1) = v2;
      StringProtocol._ephemeralString.getter();
      uint64_t v48 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v49 = objc_msgSend(v48, sel_length);
      swift_unknownObjectRelease();
      char v50 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v46, (uint64_t)v49, 0x40u, 0);
    }
    else
    {
      char v50 = specialized Sequence.allSatisfy(_:)(v3, v2, 64);
    }
    char v51 = v50;
    uint64_t v8 = swift_bridgeObjectRelease();
    if (v51) {
      goto LABEL_15;
    }
    goto LABEL_7;
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    uint64_t v6 = HIBYTE(a2) & 0xF;
    *(void *)&v105[0] = a1;
    *((void *)&v105[0] + 1) = v2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v5 = (char *)v105;
  }
  else
  {
    if ((a1 & 0x1000000000000000) == 0) {
      goto LABEL_90;
    }
    uint64_t v5 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
  }
  while (2)
  {
    BOOL v7 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v5, v6, 0x40u, 0);
    uint64_t v8 = swift_bridgeObjectRetain();
    if (!v7)
    {
LABEL_7:
      uint64_t v9 = HIBYTE(v2) & 0xF;
      if ((v2 & 0x2000000000000000) == 0) {
        uint64_t v9 = v3 & 0xFFFFFFFFFFFFLL;
      }
      if (v9)
      {
        *(void *)&v105[0] = v3;
        *((void *)&v105[0] + 1) = v2;
        MEMORY[0x1F4188790](v8);
        v52[2] = v105;
        char v53 = 64;
        swift_bridgeObjectRetain();
        uint64_t v10 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v52, v3, v2);
        if (v11)
        {
          unint64_t v3 = (unint64_t)v10;
          unint64_t v12 = v11;
          swift_bridgeObjectRelease_n();
        }
        else
        {
          unint64_t v14 = *((void *)&v105[0] + 1);
          unint64_t v13 = *(void *)&v105[0];
          swift_bridgeObjectRetain();
          unint64_t v3 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v13, v14, 0x40u);
          unint64_t v12 = v15;
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
        }
        unint64_t v2 = v12;
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v3 = 0;
        unint64_t v2 = 0xE000000000000000;
      }
    }
LABEL_15:
    swift_bridgeObjectRelease();
    char v16 = v94;
    char v17 = v92;
    char v18 = v91;
    *(void *)&long long v77 = 0;
    BYTE8(v77) = v104;
    BYTE9(v77) = v103;
    BYTE10(v77) = v102;
    BYTE11(v77) = v101;
    BYTE12(v77) = v100;
    BYTE13(v77) = v99;
    BYTE14(v77) = v98;
    HIBYTE(v77) = v97;
    LOBYTE(v78) = v96;
    *(_OWORD *)(v4 + 24) = 0u;
    *((void *)&v82 + 1) = 0;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    LOBYTE(v83) = v16;
    uint64_t v84 = 0;
    *(void *)&long long v85 = 0;
    *((void *)&v85 + 1) = v3;
    unint64_t v86 = v2;
    uint64_t v87 = 0;
    uint64_t v88 = 0;
    char v89 = v17;
    char v90 = v18;
    v105[0] = v77;
    v105[1] = v78;
    v105[4] = v81;
    v105[5] = v82;
    v105[2] = v79;
    v105[3] = v80;
    *(_OWORD *)((char *)v106 + 10) = *(_OWORD *)(v4 + 138);
    v105[7] = v85;
    v106[0] = v2;
    v105[6] = v83;
    unint64_t v19 = (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(1);
    if (v19)
    {
      unint64_t v20 = v19;
      unint64_t v56 = v3;
      unint64_t v57 = v2;
      unint64_t v3 = *(void *)(v19 + 16);
      if (v3)
      {
        uint64_t v21 = 0;
        unint64_t v4 = 0;
        uint64_t v54 = (char *)&v58 + 2;
        uint64_t v55 = (char *)&v58 + 3;
        while (1)
        {
          if (v4 >= *(void *)(v20 + 16))
          {
            __break(1u);
            goto LABEL_86;
          }
          char v22 = (unint64_t *)(v20 + 32 + 32 * v4);
          uint64_t v23 = v22[2];
          unint64_t v2 = v22[3];
          if (specialized Sequence<>.elementsEqual<A>(_:)(0x65766C6F7365722EuLL, 0xE800000000000000, *v22, v22[1]))
          {
            if (v2)
            {
              uint64_t v24 = HIBYTE(v2) & 0xF;
              uint64_t v25 = v23 & 0xFFFFFFFFFFFFLL;
              if ((v2 & 0x2000000000000000) != 0 ? HIBYTE(v2) & 0xF : v23 & 0xFFFFFFFFFFFFLL) {
                break;
              }
            }
          }
LABEL_19:
          if (++v4 == v3) {
            goto LABEL_83;
          }
        }
        if ((v2 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v29 = specialized _parseInteger<A, B>(ascii:radix:)(v23, v2, 10);
          swift_bridgeObjectRelease();
          if ((v29 & 0x100000000) != 0) {
            goto LABEL_19;
          }
          goto LABEL_18;
        }
        if ((v2 & 0x2000000000000000) == 0)
        {
          if ((v23 & 0x1000000000000000) != 0) {
            uint64_t v27 = (unsigned __int8 *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else {
            uint64_t v27 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
          }
          uint64_t v28 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v27, v25, 10);
          LOBYTE(v95[0]) = BYTE4(v28) & 1;
          LODWORD(v29) = v28;
LABEL_66:
          if (v95[0]) {
            goto LABEL_19;
          }
LABEL_18:
          uint64_t v21 = v29 | v21;
          goto LABEL_19;
        }
        uint64_t v58 = v23;
        uint64_t v59 = v2 & 0xFFFFFFFFFFFFFFLL;
        if (v23 == 43)
        {
          if (!v24) {
            goto LABEL_89;
          }
          if (v24 != 1)
          {
            LODWORD(v29) = (BYTE1(v23) - 48);
            if (v29 < 0xA)
            {
              if (v24 == 2) {
                goto LABEL_65;
              }
              if ((BYTE2(v23) - 48) <= 9u)
              {
                LODWORD(v29) = 10 * v29 + (BYTE2(v23) - 48);
                uint64_t v36 = v24 - 3;
                if (v36)
                {
                  uint64_t v37 = (unsigned __int8 *)v55;
                  while (1)
                  {
                    unsigned int v38 = *v37 - 48;
                    if (v38 > 9) {
                      goto LABEL_63;
                    }
                    uint64_t v39 = 10 * v29;
                    if ((v39 & 0xFFFFFFFF00000000) != 0) {
                      goto LABEL_63;
                    }
                    LODWORD(v29) = v39 + v38;
                    if (__CFADD__(v39, v38)) {
                      goto LABEL_63;
                    }
                    ++v37;
                    if (!--v36) {
                      goto LABEL_65;
                    }
                  }
                }
                goto LABEL_65;
              }
            }
            goto LABEL_63;
          }
        }
        else if (v23 == 45)
        {
          if (!v24)
          {
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            uint64_t v5 = (char *)_StringObject.sharedUTF8.getter();
            continue;
          }
          if (v24 != 1)
          {
            if ((BYTE1(v23) - 48) < 0xAu)
            {
              LODWORD(v29) = -(BYTE1(v23) - 48);
              if (BYTE1(v23) == 48)
              {
                if (v24 == 2) {
                  goto LABEL_65;
                }
                unsigned __int8 v30 = BYTE2(v23) - 48;
                if ((BYTE2(v23) - 48) <= 9u)
                {
                  uint64_t v31 = 10 * v29;
                  if ((v31 & 0xFFFFFFFF00000000) == 0)
                  {
                    LODWORD(v29) = v31 - v30;
                    if (v31 >= v30)
                    {
                      uint64_t v32 = v24 - 3;
                      if (v32)
                      {
                        uint64_t v33 = (unsigned __int8 *)v55;
                        do
                        {
                          unsigned int v34 = *v33 - 48;
                          if (v34 > 9) {
                            goto LABEL_63;
                          }
                          uint64_t v35 = 10 * v29;
                          if ((v35 & 0xFFFFFFFF00000000) != 0) {
                            goto LABEL_63;
                          }
                          LODWORD(v29) = v35 - v34;
                          if (v35 < v34) {
                            goto LABEL_63;
                          }
                          ++v33;
                        }
                        while (--v32);
                      }
LABEL_65:
                      LOBYTE(v95[0]) = 0;
                      goto LABEL_66;
                    }
                  }
                }
              }
            }
            goto LABEL_63;
          }
        }
        else
        {
          if (v24)
          {
            LODWORD(v29) = (v23 - 48);
            if (v29 < 0xA)
            {
              if (v24 == 1) {
                goto LABEL_65;
              }
              if ((BYTE1(v23) - 48) <= 9u)
              {
                LODWORD(v29) = 10 * v29 + (BYTE1(v23) - 48);
                uint64_t v40 = v24 - 2;
                if (v40)
                {
                  uint64_t v41 = (unsigned __int8 *)v54;
                  while (1)
                  {
                    unsigned int v42 = *v41 - 48;
                    if (v42 > 9) {
                      goto LABEL_63;
                    }
                    uint64_t v43 = 10 * v29;
                    if ((v43 & 0xFFFFFFFF00000000) != 0) {
                      goto LABEL_63;
                    }
                    LODWORD(v29) = v43 + v42;
                    if (__CFADD__(v43, v42)) {
                      goto LABEL_63;
                    }
                    ++v41;
                    if (!--v40) {
                      goto LABEL_65;
                    }
                  }
                }
                goto LABEL_65;
              }
            }
LABEL_63:
            LODWORD(v29) = 0;
            LOBYTE(v95[0]) = 1;
            goto LABEL_66;
          }
          LOBYTE(v24) = 1;
        }
        LOBYTE(v95[0]) = v24;
        LODWORD(v29) = 0;
        goto LABEL_66;
      }
      uint64_t v21 = 0;
LABEL_83:
      swift_bridgeObjectRelease();
      uint64_t v58 = 0;
      LOBYTE(v59) = v104;
      BYTE1(v59) = v103;
      BYTE2(v59) = v102;
      BYTE3(v59) = v101;
      BYTE4(v59) = v100;
      BYTE5(v59) = v99;
      BYTE6(v59) = v98;
      HIBYTE(v59) = v97;
      char v60 = v96;
      *(_DWORD *)uint64_t v61 = v95[0];
      *(_DWORD *)&v61[3] = *(_DWORD *)((char *)v95 + 3);
      long long v62 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      uint64_t v66 = 0;
      char v67 = v94;
      *(_DWORD *)Swift::UInt v68 = *(_DWORD *)v93;
      *(_DWORD *)&v68[3] = *(_DWORD *)&v93[3];
      uint64_t v69 = 0;
      uint64_t v70 = 0;
      unint64_t v71 = v56;
      unint64_t v72 = v57;
      uint64_t v73 = 0;
      uint64_t v74 = 0;
      char v75 = v92;
      char v76 = v91;
      outlined release of URLComponents((uint64_t)&v58);
    }
    else
    {
      outlined release of URLComponents((uint64_t)&v77);
      return 0;
    }
    return v21;
  }
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(uint64_t a1)
{
  long long v300 = *(_OWORD *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 48);
  long long v304 = *(_OWORD *)(a1 + 64);
  long long v303 = v5;
  long long v302 = v4;
  long long v301 = v3;
  long long v6 = *(_OWORD *)(a1 + 80);
  long long v7 = *(_OWORD *)(a1 + 96);
  long long v8 = *(_OWORD *)(a1 + 112);
  long long v308 = *(_OWORD *)(a1 + 128);
  long long v9 = *(_OWORD *)(a1 + 128);
  long long v307 = *(_OWORD *)(a1 + 112);
  long long v10 = *(_OWORD *)(a1 + 80);
  long long v306 = *(_OWORD *)(a1 + 96);
  long long v305 = v6;
  long long v11 = *(_OWORD *)(a1 + 160);
  long long v311 = *(_OWORD *)(a1 + 176);
  long long v12 = *(_OWORD *)(a1 + 144);
  long long v310 = *(_OWORD *)(a1 + 160);
  long long v309 = *(_OWORD *)(a1 + 144);
  long long v13 = *(_OWORD *)(v1 + 128);
  long long v322 = *(_OWORD *)(v1 + 144);
  long long v14 = *(_OWORD *)(v1 + 144);
  long long v323 = *(_OWORD *)(v1 + 160);
  long long v15 = *(_OWORD *)(v1 + 160);
  long long v324 = *(_OWORD *)(v1 + 176);
  long long v16 = *(_OWORD *)(v1 + 96);
  long long v318 = *(_OWORD *)(v1 + 80);
  long long v17 = *(_OWORD *)(v1 + 80);
  long long v319 = *(_OWORD *)(v1 + 96);
  long long v320 = *(_OWORD *)(v1 + 112);
  long long v18 = *(_OWORD *)(v1 + 112);
  long long v321 = *(_OWORD *)(v1 + 128);
  long long v314 = *(_OWORD *)(v1 + 16);
  long long v315 = *(_OWORD *)(v1 + 32);
  long long v316 = *(_OWORD *)(v1 + 48);
  long long v317 = *(_OWORD *)(v1 + 64);
  long long v313 = *(_OWORD *)v1;
  long long v19 = *(_OWORD *)(v1 + 176);
  long long v235 = v15;
  long long v236 = v19;
  long long v231 = v16;
  long long v232 = v18;
  long long v233 = v13;
  long long v234 = v14;
  long long v20 = *(_OWORD *)(v1 + 16);
  long long v21 = *(_OWORD *)(v1 + 48);
  long long v227 = *(_OWORD *)(v1 + 32);
  long long v228 = v21;
  long long v229 = *(_OWORD *)(v1 + 64);
  long long v230 = v17;
  long long v225 = *(_OWORD *)v1;
  long long v226 = v20;
  long long v22 = *(_OWORD *)(a1 + 176);
  long long v214 = v11;
  long long v215 = v22;
  uint64_t v312 = *(void *)(a1 + 192);
  uint64_t v325 = *(void *)(v1 + 192);
  uint64_t v24 = *(void *)(v1 + 8);
  uint64_t v23 = *(void *)(v1 + 16);
  unint64_t v25 = *(void *)(v1 + 24);
  uint64_t v26 = *(void *)(v1 + 32);
  uint64_t v27 = *(void *)(v1 + 40);
  uint64_t v28 = *(void *)(v1 + 48);
  uint64_t v29 = *(void *)(v1 + 56);
  uint64_t v30 = *(void *)(v1 + 64);
  uint64_t v156 = *(void *)(v1 + 72);
  uint64_t v237 = *(void *)(v1 + 192);
  uint64_t v238 = v24;
  uint64_t v152 = v23;
  uint64_t v239 = v23;
  unint64_t v169 = v25;
  unint64_t v240 = v25;
  uint64_t v174 = v26;
  uint64_t v241 = v26;
  uint64_t v242 = v27;
  uint64_t v243 = v28;
  uint64_t v244 = v29;
  uint64_t v245 = v30;
  uint64_t v32 = *(void *)(a1 + 8);
  uint64_t v31 = *(void *)(a1 + 16);
  unint64_t v33 = *(void *)(a1 + 24);
  uint64_t v34 = *(void *)(a1 + 32);
  uint64_t v36 = *(void *)(a1 + 40);
  uint64_t v35 = *(void *)(a1 + 48);
  uint64_t v37 = *(void *)(a1 + 56);
  uint64_t v38 = *(void *)(a1 + 64);
  uint64_t v147 = *(void *)(a1 + 72);
  uint64_t v39 = *(void *)(a1 + 192);
  long long v210 = v7;
  long long v211 = v8;
  long long v212 = v9;
  long long v213 = v12;
  long long v40 = *(_OWORD *)(a1 + 16);
  long long v41 = *(_OWORD *)(a1 + 48);
  long long v206 = *(_OWORD *)(a1 + 32);
  long long v207 = v41;
  long long v208 = *(_OWORD *)(a1 + 64);
  long long v209 = v10;
  long long v204 = *(_OWORD *)a1;
  long long v205 = v40;
  uint64_t v216 = v39;
  uint64_t v217 = v32;
  uint64_t v173 = v31;
  uint64_t v218 = v31;
  unint64_t v160 = v33;
  unint64_t v219 = v33;
  uint64_t v220 = v34;
  uint64_t v221 = v36;
  uint64_t v222 = v35;
  uint64_t v223 = v37;
  uint64_t v224 = v38;
  outlined retain of AttributedString.Runs(v1);
  uint64_t v168 = a1;
  outlined retain of AttributedString.Runs(a1);
  long long v283 = v322;
  long long v284 = v323;
  long long v285 = v324;
  uint64_t v286 = v325;
  long long v279 = v318;
  long long v280 = v319;
  long long v281 = v320;
  long long v282 = v321;
  long long v275 = v314;
  long long v276 = v315;
  long long v277 = v316;
  long long v278 = v317;
  long long v274 = v313;
  long long v296 = v309;
  long long v297 = v310;
  long long v298 = v311;
  uint64_t v299 = v312;
  long long v292 = v305;
  long long v293 = v306;
  long long v294 = v307;
  long long v295 = v308;
  long long v288 = v301;
  long long v289 = v302;
  long long v290 = v303;
  long long v291 = v304;
  uint64_t v155 = v24;
  uint64_t v146 = v24;
  uint64_t v42 = v24;
  uint64_t v43 = v32;
  long long v287 = v300;
  while (1)
  {
    uint64_t v159 = v38;
    if (v42 == v156)
    {
      long long v201 = v284;
      long long v202 = v285;
      uint64_t v203 = v286;
      long long v197 = v280;
      long long v198 = v281;
      long long v199 = v282;
      long long v200 = v283;
      long long v193 = v276;
      long long v194 = v277;
      long long v195 = v278;
      long long v196 = v279;
      long long v191 = v274;
      long long v192 = v275;
      uint64_t v44 = v147;
      unint64_t v45 = v169;
      if (v43 != v147)
      {
        uint64_t v150 = 0;
        uint64_t v46 = 0;
        uint64_t v158 = v156;
        goto LABEL_92;
      }
      uint64_t v140 = 0;
      uint64_t v190 = v299;
      long long v187 = v296;
      long long v188 = v297;
      long long v189 = v298;
      long long v183 = v292;
      long long v184 = v293;
      long long v185 = v294;
      long long v186 = v295;
      long long v179 = v288;
      long long v180 = v289;
      long long v181 = v290;
      long long v182 = v291;
      long long v178 = v287;
      goto LABEL_189;
    }
    uint64_t result = AttributedString.Runs.subscript.getter((uint64_t)&v238, &v178);
    unint64_t v48 = v169;
    if (v155 < v146 || v155 >= v156) {
      goto LABEL_214;
    }
    uint64_t v171 = v43;
    uint64_t v150 = *((void *)&v178 + 1);
    uint64_t v49 = *(void *)v148;
    uint64_t v50 = *(void *)(*(void *)v148 + 64);
    uint64_t v164 = *(void *)(*(void *)v148 + 80);
    uint64_t v165 = *(void *)(*(void *)v148 + 72);
    uint64_t v163 = *(void *)(*(void *)v148 + 88);
    uint64_t v166 = v178;
    if (v174 == 1 || v152 != *(void *)(*(void *)v148 + 88))
    {
      uint64_t v54 = *(void *)(*(void *)v148 + 72);
      if (!v50) {
        uint64_t v54 = 0;
      }
      if (v155 < 0 || v54 < v155) {
        goto LABEL_222;
      }
      if (v50 && (*(_WORD *)(v50 + 16) ? (BOOL v55 = v155 < v165) : (BOOL v55 = 0), v55))
      {
        uint64_t v153 = v30;
        uint64_t v57 = *(unsigned __int8 *)(v50 + 18);
        if (*(unsigned char *)(v50 + 18))
        {
          swift_unknownObjectRetain_n();
          outlined retain of AttributedString.Runs(v148);
          uint64_t result = swift_unknownObjectRetain();
          uint64_t v58 = v155;
          uint64_t v59 = v50;
          while (1)
          {
            uint64_t v62 = *(unsigned __int16 *)(v59 + 16);
            if (!*(_WORD *)(v59 + 16)) {
              break;
            }
            uint64_t v63 = *(void *)(v59 + 32);
            uint64_t v64 = v58 - v63;
            if (__OFSUB__(v58, v63)) {
              goto LABEL_208;
            }
            if (__OFADD__(v64, 1)) {
              goto LABEL_209;
            }
            if (v64 + 1 <= 0)
            {
              uint64_t v62 = 0;
              goto LABEL_29;
            }
            if (v62 == 1)
            {
              v58 -= v63;
              break;
            }
            uint64_t v65 = *(void *)(v59 + 56);
            BOOL v66 = __OFSUB__(v64, v65);
            uint64_t v67 = v64 - v65;
            if (v66) {
              goto LABEL_220;
            }
            if (__OFADD__(v67, 1)) {
              goto LABEL_221;
            }
            if (v67 + 1 < 1)
            {
              uint64_t v62 = 1;
              uint64_t v58 = v64;
              goto LABEL_29;
            }
            if (v62 == 2)
            {
              uint64_t v58 = v67;
              break;
            }
            Swift::UInt v68 = (void *)(v59 + 80);
            uint64_t v69 = 2;
            while (1)
            {
              if (v62 == v69) {
                goto LABEL_200;
              }
              uint64_t v58 = v67 - *v68;
              if (__OFSUB__(v67, *v68))
              {
LABEL_201:
                __break(1u);
LABEL_202:
                __break(1u);
                goto LABEL_203;
              }
              if (__OFADD__(v58, 1)) {
                goto LABEL_202;
              }
              if (v58 + 1 < 1) {
                break;
              }
              ++v69;
              v68 += 3;
              uint64_t v67 = v58;
              if (v62 == v69) {
                goto LABEL_28;
              }
            }
            uint64_t v62 = v69;
            uint64_t v58 = v67;
LABEL_29:
            char v60 = (4 * *(unsigned char *)(v59 + 18) + 8) & 0x3C;
            uint64_t v57 = ((-15 << v60) - 1) & v57 | (v62 << v60);
            uint64_t v61 = *(void *)(v59 + 24 + 24 * v62);
            swift_unknownObjectRetain();
            uint64_t result = swift_unknownObjectRelease();
            uint64_t v174 = v61;
            uint64_t v59 = v61;
            if (!*(unsigned char *)(v61 + 18)) {
              goto LABEL_52;
            }
          }
LABEL_28:
          if (!v58) {
            goto LABEL_29;
          }
          goto LABEL_207;
        }
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs(v148);
        uint64_t result = swift_unknownObjectRetain();
        uint64_t v58 = v155;
        uint64_t v174 = v50;
LABEL_52:
        uint64_t v70 = *(unsigned __int16 *)(v174 + 16);
        if (*(_WORD *)(v174 + 16))
        {
          unint64_t v71 = v58 - 1;
          if (__OFSUB__(v58, 1)) {
            goto LABEL_232;
          }
          if (__OFADD__(v71, 1)) {
            goto LABEL_233;
          }
          if (v58 <= 0)
          {
            uint64_t v70 = 0;
          }
          else
          {
            if (v70 == 1) {
              goto LABEL_72;
            }
            BOOL v66 = __OFSUB__(v71, 1);
            unint64_t v71 = v58 - 2;
            if (v66) {
              goto LABEL_236;
            }
            if (__OFADD__(v71, 1)) {
              goto LABEL_237;
            }
            if (v58 - 1 < 1)
            {
              uint64_t v70 = 1;
            }
            else
            {
              if (v70 == 2) {
                goto LABEL_72;
              }
              uint64_t v72 = 0;
              unint64_t v73 = v70 - 2;
              if (v71 >= v70 - 3) {
                unint64_t v74 = v70 - 3;
              }
              else {
                unint64_t v74 = v58 - 2;
              }
              if (v74 >= v58 + 0x7FFFFFFFFFFFFFFELL) {
                unint64_t v74 = v58 + 0x7FFFFFFFFFFFFFFELL;
              }
              while (1)
              {
                if (v73 <= v74) {
                  goto LABEL_229;
                }
                if (v58 + 0x7FFFFFFFFFFFFFFELL == v72) {
                  goto LABEL_230;
                }
                if (v71 == v72) {
                  break;
                }
                if (v73 == ++v72)
                {
                  v71 -= v72;
                  goto LABEL_72;
                }
              }
              uint64_t v70 = v58;
            }
          }
        }
        else
        {
          unint64_t v71 = v58;
LABEL_72:
          if (v71) {
            goto LABEL_231;
          }
        }
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v48 = v57 & 0xFFFFFFFFFFFFF0FFLL | (v70 << 8);
        uint64_t v30 = v153;
      }
      else
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs(v148);
        unint64_t v56 = swift_unknownObjectRetain();
        unint64_t v48 = specialized Rope._endPath.getter(v56);
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v174 = 0;
        if (!v50)
        {
          uint64_t v51 = 0;
          uint64_t v53 = v163;
          goto LABEL_79;
        }
      }
      swift_unknownObjectRetain();
      uint64_t v53 = v163;
      uint64_t v51 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v163, v48, v174, v50, v165, v164);
      uint64_t result = swift_unknownObjectRelease_n();
LABEL_79:
      uint64_t v52 = v53;
      goto LABEL_80;
    }
    if (v30 == 2)
    {
      if (v50)
      {
        outlined retain of AttributedString.Runs(v148);
        swift_unknownObjectRetain();
        uint64_t result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v152, v169, v174, v50, v165, v164);
        uint64_t v51 = result;
      }
      else
      {
        uint64_t result = outlined retain of AttributedString.Runs(v148);
        uint64_t v51 = 0;
      }
      uint64_t v52 = v152;
      uint64_t v53 = v163;
    }
    else
    {
      outlined retain of AttributedString.Runs(v148);
      swift_unknownObjectRetain();
      uint64_t result = BigString.Index.utf8Offset.getter();
      uint64_t v53 = v163;
      uint64_t v51 = result;
      uint64_t v52 = v152;
    }
LABEL_80:
    *(void *)&long long v178 = v52;
    *((void *)&v178 + 1) = v48;
    *(void *)&long long v179 = v174;
    if (__OFADD__(v155, 1)) {
      goto LABEL_215;
    }
    if (v52 != v53) {
      goto LABEL_216;
    }
    uint64_t v158 = v155 + 1;
    if (v174)
    {
      unint64_t v75 = *(void *)(v174 + 24 * ((v48 >> ((4 * *(unsigned char *)(v174 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v75 = specialized Rope._Node.subscript.getter(v48, v50);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    BOOL v66 = __OFADD__(v51, v75);
    unint64_t v76 = v51 + v75;
    if (v66) {
      goto LABEL_217;
    }
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v178, v50, v165, v164, v163);
    swift_unknownObjectRelease_n();
    unint64_t v170 = *((void *)&v178 + 1);
    uint64_t v152 = v178;
    long long v77 = (long long *)(v49 + 16);
    uint64_t v174 = v179;
    if (v30 == 2)
    {
      long long v78 = *v77;
      v260[1] = v77[1];
      long long v261 = v77[2];
      v260[0] = v78;
      long long v79 = *v77;
      long long v80 = v77[1];
      v262[2] = v261;
      v262[1] = v80;
      v262[0] = v79;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v262, (uint64_t)v263);
      outlined retain of Locale((uint64_t)v263);
      long long v81 = &v247;
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v260);
      long long v82 = *v77;
      v258[1] = v77[1];
      long long v259 = v77[2];
      v258[0] = v82;
      long long v83 = *v77;
      long long v84 = v77[1];
      v264[2] = v259;
      v264[1] = v84;
      v264[0] = v83;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v264, (uint64_t)v265);
      outlined retain of Locale((uint64_t)v265);
      BigString.startIndex.getter();
      outlined release of Locale((uint64_t)v258);
    }
    else
    {
      long long v85 = *v77;
      v256[1] = v77[1];
      long long v257 = v77[2];
      v256[0] = v85;
      long long v86 = *v77;
      long long v87 = v77[1];
      v266[2] = v257;
      v266[1] = v87;
      v266[0] = v86;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v266, (uint64_t)v267);
      outlined retain of Locale((uint64_t)v267);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v256);
      uint64_t result = BigString.Index.utf8Offset.getter();
      if (__OFSUB__(v76, result)) {
        goto LABEL_223;
      }
      long long v81 = &v246;
    }
    uint64_t v88 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v90 = v89;
    uint64_t v92 = v91;
    uint64_t v30 = v93;
    outlined release of Locale((uint64_t)v81);
    outlined release of AttributedString.Runs(v148);
    uint64_t v238 = v155 + 1;
    uint64_t v239 = v152;
    unint64_t v45 = v170;
    unint64_t v240 = v170;
    uint64_t v241 = v174;
    uint64_t v242 = v88;
    uint64_t v243 = v90;
    uint64_t v244 = v92;
    uint64_t v245 = v30;
    long long v201 = v323;
    long long v202 = v324;
    uint64_t v203 = v325;
    long long v197 = v319;
    long long v198 = v320;
    long long v199 = v321;
    long long v200 = v322;
    long long v193 = v315;
    long long v194 = v316;
    long long v195 = v317;
    long long v196 = v318;
    long long v191 = v313;
    long long v192 = v314;
    uint64_t v43 = v171;
    uint64_t v44 = v147;
    if (v171 == v147)
    {
      long long v187 = v296;
      long long v188 = v297;
      long long v189 = v298;
      uint64_t v190 = v299;
      long long v183 = v292;
      long long v184 = v293;
      long long v185 = v294;
      long long v186 = v295;
      long long v179 = v288;
      long long v180 = v289;
      long long v181 = v290;
      long long v182 = v291;
      long long v178 = v287;
      uint64_t v139 = v166;
      if (v166)
      {
LABEL_187:
        outlined release of AttributedString.Runs((uint64_t)&v178);
        outlined release of AttributedString.Runs((uint64_t)&v191);
        uint64_t v145 = v139;
        goto LABEL_191;
      }
      uint64_t v140 = 0;
LABEL_189:
      outlined release of AttributedString.Runs((uint64_t)&v178);
      outlined release of AttributedString.Runs((uint64_t)&v191);
      if (!v140) {
        return 1;
      }
      uint64_t v145 = v140;
LABEL_191:
      outlined consume of AttributedString.Runs.Run?(v145);
      return 0;
    }
    ++v155;
    uint64_t v46 = v166;
LABEL_92:
    uint64_t result = AttributedString.Runs.subscript.getter((uint64_t)&v217, &v175);
    if (v43 >= v44)
    {
LABEL_203:
      __break(1u);
LABEL_204:
      __break(1u);
LABEL_205:
      __break(1u);
LABEL_206:
      __break(1u);
LABEL_207:
      __break(1u);
LABEL_208:
      __break(1u);
LABEL_209:
      __break(1u);
LABEL_210:
      __break(1u);
LABEL_211:
      __break(1u);
LABEL_212:
      __break(1u);
LABEL_213:
      __break(1u);
LABEL_214:
      __break(1u);
LABEL_215:
      __break(1u);
LABEL_216:
      __break(1u);
LABEL_217:
      __break(1u);
LABEL_218:
      __break(1u);
LABEL_219:
      __break(1u);
LABEL_220:
      __break(1u);
LABEL_221:
      __break(1u);
LABEL_222:
      __break(1u);
LABEL_223:
      __break(1u);
      goto LABEL_224;
    }
    unint64_t v169 = v45;
    uint64_t v167 = v46;
    uint64_t v149 = v176;
    char v94 = *(_OWORD **)v168;
    uint64_t v95 = *(void *)(*(void *)v168 + 64);
    uint64_t v96 = *(void *)(*(void *)v168 + 88);
    uint64_t v157 = *(void *)(*(void *)v168 + 80);
    uint64_t v154 = v30;
    uint64_t v151 = v175;
    uint64_t v161 = *(void *)(*(void *)v168 + 72);
    if (v34 != 1 && v173 == v96)
    {
      if (v38 == 2)
      {
        if (v95)
        {
          outlined retain of AttributedString.Runs(v168);
          swift_unknownObjectRetain();
          unint64_t v97 = v160;
          uint64_t v98 = v157;
          uint64_t result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v173, v160, v34, v95, v161, v157);
          uint64_t v99 = result;
          uint64_t v100 = v173;
          goto LABEL_164;
        }
        uint64_t result = outlined retain of AttributedString.Runs(v168);
        uint64_t v99 = 0;
        unint64_t v97 = v160;
        uint64_t v100 = v173;
      }
      else
      {
        outlined retain of AttributedString.Runs(v168);
        swift_unknownObjectRetain();
        uint64_t result = BigString.Index.utf8Offset.getter();
        uint64_t v99 = result;
        uint64_t v100 = v173;
        unint64_t v97 = v160;
      }
      goto LABEL_163;
    }
    if (v95) {
      uint64_t v101 = *(void *)(*(void *)v168 + 72);
    }
    else {
      uint64_t v101 = 0;
    }
    if (v43 < 0 || v101 < v43) {
      goto LABEL_218;
    }
    if (v95 && *(_WORD *)(v95 + 16) && v43 < *(void *)(*(void *)v168 + 72))
    {
      uint64_t v102 = *(unsigned __int8 *)(v95 + 18);
      uint64_t v172 = v43;
      if (*(unsigned char *)(v95 + 18))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs(v168);
        uint64_t result = swift_unknownObjectRetain();
        uint64_t v103 = v95;
        while (1)
        {
          uint64_t v105 = *(unsigned __int16 *)(v103 + 16);
          if (*(_WORD *)(v103 + 16))
          {
            uint64_t v106 = *(void *)(v103 + 32);
            uint64_t v107 = v43 - v106;
            if (__OFSUB__(v43, v106)) {
              goto LABEL_198;
            }
            if (__OFADD__(v107, 1)) {
              goto LABEL_199;
            }
            if (v107 + 1 <= 0)
            {
              uint64_t v105 = 0;
              goto LABEL_110;
            }
            if (v105 == 1)
            {
              v43 -= v106;
            }
            else
            {
              uint64_t v108 = *(void *)(v103 + 56);
              BOOL v66 = __OFSUB__(v107, v108);
              uint64_t v109 = v107 - v108;
              if (v66) {
                goto LABEL_212;
              }
              if (__OFADD__(v109, 1)) {
                goto LABEL_213;
              }
              if (v109 + 1 < 1)
              {
                uint64_t v105 = 1;
                uint64_t v43 = v107;
                goto LABEL_110;
              }
              if (v105 != 2)
              {
                uint64_t v110 = (void *)(v103 + 80);
                uint64_t v111 = 2;
                while (v105 != v111)
                {
                  uint64_t v43 = v109 - *v110;
                  if (__OFSUB__(v109, *v110)) {
                    goto LABEL_195;
                  }
                  if (__OFADD__(v43, 1)) {
                    goto LABEL_196;
                  }
                  if (v43 + 1 < 1)
                  {
                    uint64_t v105 = v111;
                    uint64_t v43 = v109;
                    goto LABEL_110;
                  }
                  ++v111;
                  v110 += 3;
                  uint64_t v109 = v43;
                  if (v105 == v111) {
                    goto LABEL_109;
                  }
                }
                __break(1u);
LABEL_195:
                __break(1u);
LABEL_196:
                __break(1u);
LABEL_197:
                __break(1u);
LABEL_198:
                __break(1u);
LABEL_199:
                __break(1u);
LABEL_200:
                __break(1u);
                goto LABEL_201;
              }
              uint64_t v43 = v109;
            }
          }
LABEL_109:
          if (v43) {
            goto LABEL_197;
          }
LABEL_110:
          char v104 = (4 * *(unsigned char *)(v103 + 18) + 8) & 0x3C;
          uint64_t v102 = ((-15 << v104) - 1) & v102 | (v105 << v104);
          uint64_t v34 = *(void *)(v103 + 24 + 24 * v105);
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v103 = v34;
          if (!*(unsigned char *)(v34 + 18)) {
            goto LABEL_136;
          }
        }
      }
      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs(v168);
      uint64_t result = swift_unknownObjectRetain();
      uint64_t v34 = v95;
LABEL_136:
      uint64_t v113 = *(unsigned __int16 *)(v34 + 16);
      if (!*(_WORD *)(v34 + 16))
      {
        unint64_t v114 = v43;
        goto LABEL_156;
      }
      unint64_t v114 = v43 - 1;
      if (__OFSUB__(v43, 1)) {
        goto LABEL_227;
      }
      if (__OFADD__(v114, 1)) {
        goto LABEL_228;
      }
      if (v43 <= 0)
      {
        uint64_t v113 = 0;
      }
      else
      {
        if (v113 == 1) {
          goto LABEL_156;
        }
        BOOL v66 = __OFSUB__(v114, 1);
        unint64_t v114 = v43 - 2;
        if (v66) {
          goto LABEL_234;
        }
        if (__OFADD__(v114, 1)) {
          goto LABEL_235;
        }
        if (v43 - 1 < 1)
        {
          uint64_t v113 = 1;
        }
        else
        {
          if (v113 != 2)
          {
            uint64_t v115 = 0;
            unint64_t v116 = v113 - 2;
            if (v114 >= v113 - 3) {
              unint64_t v117 = v113 - 3;
            }
            else {
              unint64_t v117 = v43 - 2;
            }
            if (v117 >= v43 + 0x7FFFFFFFFFFFFFFELL) {
              unint64_t v117 = v43 + 0x7FFFFFFFFFFFFFFELL;
            }
            while (v116 > v117)
            {
              if (v43 + 0x7FFFFFFFFFFFFFFELL == v115) {
                goto LABEL_225;
              }
              if (v114 == v115)
              {
                uint64_t v113 = v43;
                goto LABEL_161;
              }
              if (v116 == ++v115)
              {
                v114 -= v115;
                goto LABEL_156;
              }
            }
LABEL_224:
            __break(1u);
LABEL_225:
            __break(1u);
LABEL_226:
            __break(1u);
LABEL_227:
            __break(1u);
LABEL_228:
            __break(1u);
LABEL_229:
            __break(1u);
LABEL_230:
            __break(1u);
LABEL_231:
            __break(1u);
LABEL_232:
            __break(1u);
LABEL_233:
            __break(1u);
LABEL_234:
            __break(1u);
LABEL_235:
            __break(1u);
LABEL_236:
            __break(1u);
LABEL_237:
            __break(1u);
            return result;
          }
LABEL_156:
          if (v114) {
            goto LABEL_226;
          }
        }
      }
LABEL_161:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v97 = v102 & 0xFFFFFFFFFFFFF0FFLL | (v113 << 8);
      uint64_t v43 = v172;
LABEL_132:
      swift_unknownObjectRetain();
      uint64_t v98 = v157;
      uint64_t v99 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v96, v97, v34, v95, v161, v157);
      uint64_t result = swift_unknownObjectRelease_n();
      uint64_t v100 = v96;
      goto LABEL_164;
    }
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs(v168);
    unint64_t v112 = swift_unknownObjectRetain();
    unint64_t v97 = specialized Rope._endPath.getter(v112);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v34 = 0;
    if (v95) {
      goto LABEL_132;
    }
    uint64_t v99 = 0;
    uint64_t v100 = v96;
LABEL_163:
    uint64_t v98 = v157;
LABEL_164:
    uint64_t v175 = v100;
    unint64_t v176 = v97;
    uint64_t v177 = v34;
    BOOL v66 = __OFADD__(v43++, 1);
    if (v66) {
      goto LABEL_204;
    }
    if (v100 != v96) {
      goto LABEL_205;
    }
    if (v34)
    {
      unint64_t v118 = *(void *)(v34 + 24 * ((v97 >> ((4 * *(unsigned char *)(v34 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v118 = specialized Rope._Node.subscript.getter(v97, v95);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    BOOL v66 = __OFADD__(v99, v118);
    unint64_t v119 = v99 + v118;
    if (v66) {
      goto LABEL_206;
    }
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v175, v95, v161, v98, v96);
    swift_unknownObjectRelease_n();
    uint64_t v173 = v175;
    uint64_t v120 = v177;
    unint64_t v160 = v176;
    unint64_t v121 = v94 + 1;
    if (v159 == 2)
    {
      long long v122 = *v121;
      v254[1] = v94[2];
      long long v255 = v94[3];
      v254[0] = v122;
      long long v123 = *v121;
      long long v124 = v94[2];
      v268[2] = v255;
      v268[1] = v124;
      v268[0] = v123;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v268, (uint64_t)v269);
      outlined retain of Locale((uint64_t)v269);
      uint64_t v125 = &v249;
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v254);
      long long v126 = *v121;
      v252[1] = v94[2];
      long long v253 = v94[3];
      v252[0] = v126;
      long long v127 = *v121;
      long long v128 = v94[2];
      v270[2] = v253;
      v270[1] = v128;
      v270[0] = v127;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v270, (uint64_t)v271);
      outlined retain of Locale((uint64_t)v271);
      BigString.startIndex.getter();
      outlined release of Locale((uint64_t)v252);
    }
    else
    {
      long long v129 = *v121;
      v250[1] = v94[2];
      long long v251 = v94[3];
      v250[0] = v129;
      long long v130 = *v121;
      long long v131 = v94[2];
      v272[2] = v251;
      v272[1] = v131;
      v272[0] = v130;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v272, (uint64_t)v273);
      outlined retain of Locale((uint64_t)v273);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v250);
      uint64_t result = BigString.Index.utf8Offset.getter();
      if (__OFSUB__(v119, result)) {
        goto LABEL_219;
      }
      uint64_t v125 = &v248;
    }
    uint64_t v132 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v134 = v133;
    uint64_t v136 = v135;
    uint64_t v138 = v137;
    outlined release of Locale((uint64_t)v125);
    outlined release of AttributedString.Runs(v168);
    uint64_t v217 = v43;
    uint64_t v218 = v173;
    unint64_t v219 = v160;
    uint64_t v162 = v120;
    uint64_t v220 = v120;
    uint64_t v221 = v132;
    uint64_t v222 = v134;
    uint64_t v223 = v136;
    uint64_t v224 = v138;
    long long v187 = v309;
    long long v188 = v310;
    long long v189 = v311;
    uint64_t v190 = v312;
    long long v183 = v305;
    long long v184 = v306;
    long long v185 = v307;
    long long v186 = v308;
    long long v179 = v301;
    long long v180 = v302;
    long long v181 = v303;
    long long v182 = v304;
    long long v178 = v300;
    uint64_t v139 = v167;
    uint64_t v140 = v151;
    if (!v167) {
      goto LABEL_189;
    }
    if (!v151) {
      goto LABEL_187;
    }
    uint64_t v141 = BigString.Index.utf8Offset.getter();
    uint64_t result = BigString.Index.utf8Offset.getter();
    uint64_t v142 = result - v141;
    if (__OFSUB__(result, v141)) {
      goto LABEL_210;
    }
    uint64_t v143 = BigString.Index.utf8Offset.getter();
    uint64_t result = BigString.Index.utf8Offset.getter();
    if (__OFSUB__(result, v143)) {
      goto LABEL_211;
    }
    if (v142 != result - v143 || (specialized static Dictionary<>.== infix(_:_:)(v167, v151) & 1) == 0) {
      break;
    }
    uint64_t v38 = v138;
    char v144 = specialized static Set.== infix(_:_:)(v150, v149);
    outlined consume of AttributedString.Runs.Run?(v151);
    outlined consume of AttributedString.Runs.Run?(v167);
    if ((v144 & 1) == 0) {
      goto LABEL_183;
    }
    long long v283 = v200;
    long long v284 = v201;
    long long v285 = v202;
    long long v279 = v196;
    long long v280 = v197;
    long long v281 = v198;
    long long v282 = v199;
    long long v275 = v192;
    long long v276 = v193;
    long long v277 = v194;
    long long v278 = v195;
    long long v274 = v191;
    long long v296 = v187;
    long long v297 = v188;
    long long v298 = v189;
    long long v292 = v183;
    long long v293 = v184;
    long long v294 = v185;
    long long v295 = v186;
    long long v288 = v179;
    long long v289 = v180;
    long long v290 = v181;
    long long v291 = v182;
    uint64_t v286 = v203;
    uint64_t v299 = v190;
    long long v287 = v178;
    uint64_t v42 = v158;
    uint64_t v30 = v154;
    uint64_t v34 = v162;
  }
  outlined consume of AttributedString.Runs.Run?(v151);
  outlined consume of AttributedString.Runs.Run?(v167);
LABEL_183:
  outlined release of AttributedString.Runs((uint64_t)&v178);
  outlined release of AttributedString.Runs((uint64_t)&v191);
  return 0;
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v7 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v7 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v8 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  while (v9 < v7)
  {
    if ((a4 & 0x1000000000000000) != 0)
    {
      int v11 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a4 & 0x2000000000000000) == 0 && (a3 & 0x1000000000000000) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      int v11 = _decodeScalar(_:startingAt:)();
    }
    int v13 = v11;
    if (v10 >= v8)
    {
      uint64_t v17 = 0;
      goto LABEL_28;
    }
    uint64_t v14 = v12 + v9;
    if ((a2 & 0x1000000000000000) == 0)
    {
LABEL_16:
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      int v15 = _decodeScalar(_:startingAt:)();
      goto LABEL_20;
    }
LABEL_25:
    int v15 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
LABEL_20:
    uint64_t v17 = 0;
    if (v9 < v7)
    {
      v10 += v16;
      uint64_t v9 = v14;
      if (v13 == v15) {
        continue;
      }
    }
    goto LABEL_28;
  }
  if (v10 < v8)
  {
    int v13 = 0;
    uint64_t v14 = v9;
    if ((a2 & 0x1000000000000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_25;
  }
  uint64_t v17 = 1;
LABEL_28:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(void *a1)
{
  uint64_t v19 = v1[2];
  uint64_t v20 = v1[1];
  uint64_t v17 = (long long *)(*v1 + 16);
  uint64_t v23 = (long long *)(*a1 + 16);
  outlined retain of AttributedString.Runs((uint64_t)v1);
  uint64_t v24 = (uint64_t)a1;
  outlined retain of AttributedString.Runs((uint64_t)a1);
  uint64_t v3 = v20;
  uint64_t v25 = v19;
  while (1)
  {
    uint64_t v4 = v3;
    uint64_t v5 = v25;
    char v22 = static BigString.Index.== infix(_:_:)();
    if (v22)
    {
      if (static BigString.Index.== infix(_:_:)())
      {
        uint64_t v16 = 1;
LABEL_21:
        swift_release();
        swift_release();
        return v16;
      }
      int v21 = 0;
    }
    else
    {
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        goto LABEL_28;
      }
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if ((result & 1) == 0) {
        goto LABEL_29;
      }
      long long v7 = v17[1];
      long long v39 = *v17;
      long long v40 = v7;
      long long v41 = v17[2];
      BigString.unicodeScalars.getter();
      int v8 = BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v26);
      outlined retain of AttributedString.Runs(v18);
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        goto LABEL_30;
      }
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        goto LABEL_31;
      }
      int v21 = v8;
      long long v9 = v17[1];
      long long v36 = *v17;
      long long v37 = v9;
      long long v38 = v17[2];
      BigString.unicodeScalars.getter();
      uint64_t v4 = BigString.UnicodeScalarView.index(after:)();
      uint64_t v5 = v10;
      outlined release of Locale((uint64_t)v27);
      char v11 = static BigString.Index.< infix(_:_:)();
      uint64_t result = outlined release of AttributedString.Runs(v18);
      if (v11) {
        goto LABEL_32;
      }
      if (static BigString.Index.== infix(_:_:)())
      {
LABEL_18:
        swift_release();
        swift_release();
        return 0;
      }
    }
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      break;
    }
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if ((result & 1) == 0) {
      goto LABEL_24;
    }
    uint64_t v25 = v5;
    long long v12 = v23[1];
    long long v33 = *v23;
    long long v34 = v12;
    long long v35 = v23[2];
    BigString.unicodeScalars.getter();
    int v13 = BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v28);
    outlined retain of AttributedString.Runs(v24);
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_25;
    }
    uint64_t v3 = v4;
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_26;
    }
    long long v14 = v23[1];
    long long v30 = *v23;
    long long v31 = v14;
    long long v32 = v23[2];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(after:)();
    outlined release of Locale((uint64_t)v29);
    char v15 = static BigString.Index.< infix(_:_:)();
    uint64_t result = outlined release of AttributedString.Runs(v24);
    if (v15) {
      goto LABEL_27;
    }
    if (v22)
    {
      uint64_t v16 = 0;
      goto LABEL_21;
    }
    if (v21 != v13) {
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(_OWORD *a1)
{
  long long v3 = a1[5];
  long long v4 = a1[7];
  long long v97 = a1[6];
  long long v98 = v4;
  long long v99 = a1[8];
  long long v5 = a1[1];
  long long v6 = a1[3];
  long long v93 = a1[2];
  long long v94 = v6;
  long long v7 = a1[4];
  long long v96 = v3;
  long long v95 = v7;
  long long v8 = *a1;
  long long v92 = v5;
  long long v91 = v8;
  long long v9 = v1[5];
  long long v10 = v1[7];
  long long v106 = v1[6];
  long long v107 = v10;
  long long v108 = v1[8];
  long long v11 = v1[1];
  long long v12 = v1[3];
  long long v102 = v1[2];
  long long v103 = v12;
  long long v104 = v1[4];
  long long v105 = v9;
  long long v100 = *v1;
  long long v101 = v11;
  uint64_t v13 = *((void *)v1 + 2);
  uint64_t v30 = *(void *)v1;
  uint64_t v14 = *((void *)v1 + 14);
  long long v31 = (long long *)(*((void *)v1 + 8) + 16);
  long long v37 = (long long *)(*((void *)a1 + 8) + 16);
  outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v1);
  uint64_t v38 = (uint64_t)a1;
  outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)a1);
  long long v79 = v106;
  long long v80 = v107;
  long long v81 = v108;
  long long v76 = v103;
  long long v78 = v105;
  long long v77 = v104;
  long long v74 = v101;
  long long v75 = v102;
  long long v73 = v100;
  long long v88 = v97;
  long long v89 = v98;
  long long v90 = v99;
  long long v84 = v93;
  long long v85 = v94;
  long long v87 = v96;
  long long v86 = v95;
  uint64_t v15 = v30;
  uint64_t v16 = v13;
  long long v83 = v92;
  long long v82 = v91;
  while (1)
  {
    char v36 = static BigString.Index.== infix(_:_:)();
    if (v36)
    {
      uint64_t v34 = v15;
      long long v54 = v79;
      long long v55 = v80;
      long long v56 = v81;
      long long v50 = v75;
      long long v51 = v76;
      long long v52 = v77;
      long long v53 = v78;
      long long v48 = v73;
      long long v49 = v74;
      if (static BigString.Index.== infix(_:_:)()) {
        goto LABEL_22;
      }
      int v35 = 0;
    }
    else
    {
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        goto LABEL_32;
      }
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if ((result & 1) == 0) {
        goto LABEL_33;
      }
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        goto LABEL_34;
      }
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if ((result & 1) == 0) {
        goto LABEL_35;
      }
      uint64_t v18 = v14;
      long long v19 = v31[1];
      long long v70 = *v31;
      long long v71 = v19;
      long long v72 = v31[2];
      BigString.unicodeScalars.getter();
      int v20 = BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v57);
      outlined retain of Slice<AttributedString.UnicodeScalarView>(v32);
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        goto LABEL_36;
      }
      int v35 = v20;
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        goto LABEL_37;
      }
      long long v21 = v31[1];
      long long v67 = *v31;
      long long v68 = v21;
      long long v69 = v31[2];
      BigString.unicodeScalars.getter();
      uint64_t v14 = v18;
      uint64_t v22 = BigString.UnicodeScalarView.index(after:)();
      uint64_t v16 = v23;
      outlined release of Locale((uint64_t)v58);
      uint64_t v34 = v22;
      char v24 = static BigString.Index.< infix(_:_:)();
      uint64_t result = outlined release of Slice<AttributedString.UnicodeScalarView>(v32);
      if (v24) {
        goto LABEL_38;
      }
      long long v54 = v106;
      long long v55 = v107;
      long long v56 = v108;
      long long v50 = v102;
      long long v51 = v103;
      long long v52 = v104;
      long long v53 = v105;
      long long v48 = v100;
      long long v49 = v101;
      if (static BigString.Index.== infix(_:_:)())
      {
LABEL_22:
        long long v45 = v88;
        long long v46 = v89;
        long long v47 = v90;
        long long v41 = v84;
        long long v42 = v85;
        long long v43 = v86;
        long long v44 = v87;
        long long v39 = v82;
        long long v40 = v83;
        char v29 = v36;
LABEL_24:
        outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v39);
        outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v48);
        return v29 & 1;
      }
    }
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      break;
    }
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if ((result & 1) == 0) {
      goto LABEL_26;
    }
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_27;
    }
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if ((result & 1) == 0) {
      goto LABEL_28;
    }
    uint64_t v33 = v16;
    long long v25 = v37[1];
    long long v64 = *v37;
    long long v65 = v25;
    long long v66 = v37[2];
    BigString.unicodeScalars.getter();
    int v26 = BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v59);
    outlined retain of Slice<AttributedString.UnicodeScalarView>(v38);
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_29;
    }
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_30;
    }
    long long v27 = v37[1];
    long long v61 = *v37;
    long long v62 = v27;
    long long v63 = v37[2];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(after:)();
    outlined release of Locale((uint64_t)v60);
    char v28 = static BigString.Index.< infix(_:_:)();
    uint64_t result = outlined release of Slice<AttributedString.UnicodeScalarView>(v38);
    if (v28) {
      goto LABEL_31;
    }
    long long v45 = v97;
    long long v46 = v98;
    long long v47 = v99;
    long long v41 = v93;
    long long v42 = v94;
    long long v43 = v95;
    long long v44 = v96;
    long long v39 = v91;
    long long v40 = v92;
    if (v36 & 1 | (v35 != v26))
    {
      char v29 = 0;
      goto LABEL_24;
    }
    long long v79 = v54;
    long long v80 = v55;
    long long v81 = v56;
    long long v76 = v51;
    long long v78 = v53;
    long long v77 = v52;
    long long v74 = v49;
    long long v75 = v50;
    long long v73 = v48;
    long long v88 = v97;
    long long v89 = v98;
    long long v90 = v99;
    long long v84 = v93;
    long long v85 = v94;
    long long v87 = v96;
    long long v86 = v95;
    long long v83 = v92;
    long long v82 = v91;
    uint64_t v15 = v34;
    uint64_t v16 = v33;
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

unint64_t specialized Sequence<>.elementsEqual<A>(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4 = a2;
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v5 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v33 = v5;
  uint64_t v6 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v6) = 1;
  }
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v7 = HIBYTE(a2) & 0xF;
  }
  uint64_t v8 = 4 * v5;
  uint64_t v35 = 4 << v6;
  uint64_t v28 = a4 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v27 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  unint64_t v31 = v7;
  uint64_t v9 = 4 * v7;
  uint64_t v10 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0) {
    LOBYTE(v10) = 1;
  }
  uint64_t v11 = 4 << v10;
  uint64_t v25 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v26 = a2 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v12 = 15;
  unint64_t v13 = 15;
  uint64_t v30 = 4 << v10;
  while (1)
  {
    unint64_t v14 = v13 >> 14;
    if (v13 >> 14 == v8)
    {
      char v15 = 0;
      goto LABEL_29;
    }
    unint64_t result = v13;
    if ((v13 & 0xC) == v35)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v13, a3, a4);
      uint64_t v11 = v30;
    }
    unint64_t v17 = result >> 16;
    if (result >> 16 >= v33) {
      break;
    }
    if ((a4 & 0x1000000000000000) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      uint64_t v11 = v30;
      char v15 = result;
    }
    else if ((a4 & 0x2000000000000000) != 0)
    {
      unint64_t v37 = a3;
      uint64_t v38 = v28;
      char v15 = *((unsigned char *)&v37 + v17);
    }
    else
    {
      unint64_t result = v27;
      if ((a3 & 0x1000000000000000) == 0)
      {
        unint64_t result = _StringObject.sharedUTF8.getter();
        uint64_t v11 = v30;
      }
      char v15 = *(unsigned char *)(result + v17);
    }
    if ((v13 & 0xC) == v35)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v13, a3, a4);
      uint64_t v11 = v30;
      unint64_t v13 = result;
      uint64_t v4 = a2;
      if ((a4 & 0x1000000000000000) == 0)
      {
LABEL_24:
        unint64_t v13 = (v13 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v4 = a2;
      if ((a4 & 0x1000000000000000) == 0) {
        goto LABEL_24;
      }
    }
    if (v33 <= v13 >> 16) {
      goto LABEL_54;
    }
    uint64_t v18 = String.UTF8View._foreignIndex(after:)();
    uint64_t v11 = v30;
    uint64_t v4 = a2;
    unint64_t v13 = v18;
LABEL_29:
    unint64_t v19 = v12 >> 14;
    BOOL v20 = v12 >> 14 == v9;
    if (v12 >> 14 == v9)
    {
      char v21 = 0;
      if (v14 == v8) {
        return v20;
      }
      goto LABEL_49;
    }
    unint64_t v22 = v12 & 0xC;
    unint64_t result = v12;
    if (v22 == v11)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a1, v4);
      uint64_t v11 = v30;
      uint64_t v4 = a2;
    }
    unint64_t v23 = result >> 16;
    if (result >> 16 >= v31) {
      goto LABEL_53;
    }
    if ((v4 & 0x1000000000000000) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      uint64_t v11 = v30;
      uint64_t v4 = a2;
      char v21 = result;
      if (v22 == v30) {
        goto LABEL_46;
      }
    }
    else if ((v4 & 0x2000000000000000) != 0)
    {
      unint64_t v37 = a1;
      uint64_t v38 = v26;
      char v21 = *((unsigned char *)&v37 + v23);
      if (v22 == v11) {
        goto LABEL_46;
      }
    }
    else
    {
      unint64_t result = v25;
      if ((a1 & 0x1000000000000000) == 0)
      {
        unint64_t result = _StringObject.sharedUTF8.getter();
        uint64_t v11 = v30;
        uint64_t v4 = a2;
      }
      char v21 = *(unsigned char *)(result + v23);
      if (v22 == v11)
      {
LABEL_46:
        unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a1, v4);
        uint64_t v11 = v30;
        uint64_t v4 = a2;
        unint64_t v12 = result;
        if ((a2 & 0x1000000000000000) == 0)
        {
LABEL_43:
          unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
          if (v14 == v8) {
            return v20;
          }
          goto LABEL_49;
        }
        goto LABEL_47;
      }
    }
    if ((v4 & 0x1000000000000000) == 0) {
      goto LABEL_43;
    }
LABEL_47:
    if (v31 <= v12 >> 16) {
      goto LABEL_55;
    }
    uint64_t v24 = String.UTF8View._foreignIndex(after:)();
    uint64_t v11 = v30;
    uint64_t v4 = a2;
    unint64_t v12 = v24;
    if (v14 == v8) {
      return v20;
    }
LABEL_49:
    BOOL v20 = 0;
    if (v19 == v9 || v15 != v21) {
      return v20;
    }
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  if (a3) {
    uint64_t v4 = &a3[a4];
  }
  else {
    uint64_t v4 = 0;
  }
  if (a1) {
    uint64_t v5 = &a1[a2];
  }
  else {
    uint64_t v5 = 0;
  }
  do
  {
    if (!a3 || a3 == v4)
    {
      int v7 = 0;
      char v6 = 1;
      if (!a1) {
        goto LABEL_15;
      }
    }
    else
    {
      char v6 = 0;
      int v8 = *a3++;
      int v7 = v8;
      if (!a1) {
        goto LABEL_15;
      }
    }
    if (a1 != v5)
    {
      uint64_t v9 = 0;
      int v11 = *a1++;
      int v10 = v11;
      if (v6) {
        return v9;
      }
      goto LABEL_16;
    }
LABEL_15:
    int v10 = 0;
    uint64_t v9 = 1;
    if (v6) {
      return v9;
    }
LABEL_16:
    if (v7 != v10) {
      LODWORD(v9) = 1;
    }
  }
  while (v9 != 1);
  return 0;
}

unint64_t String._removingPathResolveFlags()(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1;
  if ((specialized Collection.first.getter(a1, a2) & 0x1FF) != 0x2F
    || (unint64_t v14 = 0, result = String._pathResolveFlags(prefixLength:)(&v14, v3, a2), (result & 0x100000000) != 0))
  {
    swift_bridgeObjectRetain();
    return v3;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    uint64_t v6 = MEMORY[0x185302230](15, v14, v3, a2);
    goto LABEL_9;
  }
  if ((v14 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0) {
      unint64_t v5 = v3 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 >= v14)
    {
      uint64_t v6 = (v14 << 16) | 4;
LABEL_9:
      swift_bridgeObjectRetain();
      unint64_t v7 = specialized Collection.suffix(from:)(v6, v3, a2);
      uint64_t v9 = v8;
      uint64_t v11 = v10;
      uint64_t v13 = v12;
      swift_bridgeObjectRelease();
      uint64_t v3 = MEMORY[0x185301F50](v7, v9, v11, v13);
      swift_bridgeObjectRelease();
      return v3;
    }
  }
  __break(1u);
  return result;
}

unint64_t String._insertingQueryResolveFlags(_:)(int a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2;
  char v119 = 1;
  char v113 = 0;
  char v112 = 0;
  char v111 = 0;
  char v110 = 0;
  char v109 = 0;
  char v108 = 0;
  char v106 = 0;
  char v105 = 1;
  unsigned __int8 v104 = 0;
  char v103 = 0;
  char v114 = 0;
  char v107 = 0;
  LODWORD(v83) = a1;
  if ((a3 & 0x1000000000000000) != 0)
  {
    *(void *)&v117[0] = a2;
    *((void *)&v117[0] + 1) = a3;
    unint64_t v71 = lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    unint64_t v84 = v71;
    StringProtocol._ephemeralString.getter();
    long long v72 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    long long v73 = (unsigned __int16 *)objc_msgSend(v72, sel__fastCharacterContents);
    id v74 = v72;
    if (v73)
    {
      *(void *)&v117[0] = v4;
      *((void *)&v117[0] + 1) = a3;
      StringProtocol._ephemeralString.getter();
      long long v75 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v76 = objc_msgSend(v75, sel_length);
      swift_unknownObjectRelease();
      char v77 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v73, (uint64_t)v76, 0x40u, 0);
    }
    else
    {
      char v77 = specialized Sequence.allSatisfy(_:)(v4, a3, 64);
    }
    BOOL v7 = v77;
    uint64_t v8 = swift_bridgeObjectRelease();
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      uint64_t v6 = HIBYTE(a3) & 0xF;
      *(void *)&v117[0] = v4;
      *((void *)&v117[0] + 1) = a3 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v5 = (char *)v117;
    }
    else if ((a2 & 0x1000000000000000) != 0)
    {
      unint64_t v5 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t v5 = (char *)_StringObject.sharedUTF8.getter();
    }
    BOOL v7 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v5, v6, 0x40u, 0);
    uint64_t v8 = swift_bridgeObjectRetain();
  }
  unint64_t v9 = a3;
  unint64_t v10 = v4;
  if (!v7)
  {
    uint64_t v11 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v11 = v4 & 0xFFFFFFFFFFFFLL;
    }
    if (v11)
    {
      *(void *)&v117[0] = v4;
      *((void *)&v117[0] + 1) = a3;
      MEMORY[0x1F4188790](v8);
      uint64_t v79 = (uint64_t)v117;
      LOBYTE(v80) = 64;
      swift_bridgeObjectRetain();
      uint64_t v12 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)&v78, v4, a3);
      if (v13)
      {
        unint64_t v10 = (unint64_t)v12;
        unint64_t v9 = v13;
        swift_bridgeObjectRelease_n();
      }
      else
      {
        unint64_t v15 = *((void *)&v117[0] + 1);
        unint64_t v14 = *(void *)&v117[0];
        swift_bridgeObjectRetain();
        unint64_t v10 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v14, v15, 0x40u);
        unint64_t v9 = v16;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v10 = 0;
      unint64_t v9 = 0xE000000000000000;
    }
  }
  swift_bridgeObjectRelease();
  *(void *)&long long v95 = 0;
  BYTE8(v95) = v114;
  BYTE9(v95) = v113;
  BYTE10(v95) = v112;
  BYTE11(v95) = v111;
  BYTE12(v95) = v110;
  BYTE13(v95) = v109;
  BYTE14(v95) = v108;
  HIBYTE(v95) = v107;
  v96[0] = v106;
  memset(&v96[8], 0, 64);
  uint64_t v97 = 0;
  LOBYTE(v98) = v105;
  uint64_t v99 = 0;
  *(void *)&long long v100 = 0;
  *((void *)&v100 + 1) = v10;
  unint64_t v101 = v9;
  unint64_t v82 = v9;
  v102[0] = 0;
  v102[1] = 0;
  LOBYTE(v102[2]) = v104;
  BYTE1(v102[2]) = v103;
  v117[0] = v95;
  v117[1] = *(_OWORD *)v96;
  v117[4] = *(_OWORD *)&v96[48];
  v117[5] = 0uLL;
  v117[2] = *(_OWORD *)&v96[16];
  long long v117[3] = *(_OWORD *)&v96[32];
  *(_OWORD *)((char *)v118 + 10) = *(_OWORD *)((char *)v102 + 2);
  v117[7] = v100;
  v118[0] = v9;
  v117[6] = v98;
  unint64_t v84 = (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(1);
  if (!v84)
  {
    outlined release of URLComponents((uint64_t)&v95);
    swift_bridgeObjectRetain();
    return v4;
  }
  unint64_t v17 = MEMORY[0x1E4FBC860];
  long long v94 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v18 = *(void *)(v84 + 16);
  if (!v18)
  {
    swift_bridgeObjectRelease();
    int v31 = v83;
    if (!v83)
    {
      char v21 = (void *)MEMORY[0x1E4FBC860];
      int64_t v32 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      if (v32) {
        goto LABEL_31;
      }
      goto LABEL_70;
    }
LABEL_69:
    LODWORD(v115[0]) = v31;
    uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter();
    specialized Array.replaceSubrange<A>(_:with:)(0, 0, 0x65766C6F7365722ELL, 0xE800000000000000, v68, v69);
    char v21 = v94;
    int64_t v32 = v94[2];
    if (v32) {
      goto LABEL_31;
    }
LABEL_70:
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v95);
    return 0;
  }
  int v19 = 0;
  BOOL v20 = (unint64_t *)(v84 + 56);
  char v21 = (void *)MEMORY[0x1E4FBC860];
  do
  {
    unint64_t v23 = *(v20 - 3);
    unint64_t v24 = *(v20 - 2);
    uint64_t v26 = *(v20 - 1);
    unint64_t v25 = *v20;
    if (specialized Sequence<>.elementsEqual<A>(_:)(0x65766C6F7365722EuLL, 0xE800000000000000, v23, v24))
    {
      if (v25)
      {
        swift_bridgeObjectRetain();
        unint64_t v27 = specialized FixedWidthInteger.init(_:)(v26, v25);
        if ((v27 & 0x100000000) == 0) {
          v19 |= v27;
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
      }
      unint64_t v29 = v21[2];
      unint64_t v28 = v21[3];
      uint64_t v30 = v21;
      if (v29 >= v28 >> 1) {
        uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v21);
      }
      v30[2] = v29 + 1;
      char v21 = v30;
      unint64_t v22 = &v30[4 * v29];
      void v22[4] = v23;
      v22[5] = v24;
      v22[6] = v26;
      v22[7] = v25;
      long long v94 = v30;
    }
    v20 += 4;
    --v18;
  }
  while (v18);
  swift_bridgeObjectRelease();
  int v31 = v19 | v83;
  unint64_t v17 = MEMORY[0x1E4FBC860];
  if (v19 | v83) {
    goto LABEL_69;
  }
  int64_t v32 = v21[2];
  if (!v32) {
    goto LABEL_70;
  }
LABEL_31:
  char v114 = 0;
  char v107 = 0;
  unint64_t v93 = v17;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32, 0);
  unint64_t v84 = (unint64_t)v21;
  unint64_t v33 = v21 + 7;
  while (1)
  {
    unint64_t v35 = *(v33 - 3);
    unint64_t v34 = *(v33 - 2);
    unint64_t v37 = *(v33 - 1);
    unint64_t v36 = *v33;
    if ((v34 & 0x1000000000000000) != 0)
    {
      *(void *)&v115[0] = *(v33 - 3);
      *((void *)&v115[0] + 1) = v34;
      unint64_t v83 = lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      long long v48 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      long long v49 = (unsigned __int16 *)objc_msgSend(v48, sel__fastCharacterContents);
      id v50 = v48;
      if (v49)
      {
        *(void *)&v115[0] = v35;
        *((void *)&v115[0] + 1) = v34;
        long long v81 = v49;
        StringProtocol._ephemeralString.getter();
        long long v51 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v52 = objc_msgSend(v51, sel_length);
        swift_unknownObjectRelease();
        char v53 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v81, (uint64_t)v52, 0x80u, 1);
      }
      else
      {
        char v53 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v35, v34, 0x80u, 1);
      }
      char v61 = v53;
      swift_bridgeObjectRelease_n();
      if ((v61 & 1) == 0) {
        goto LABEL_65;
      }
    }
    else
    {
      if ((v34 & 0x2000000000000000) != 0)
      {
        uint64_t v39 = HIBYTE(v34) & 0xF;
        *(void *)&v115[0] = *(v33 - 3);
        *((void *)&v115[0] + 1) = v34 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v38 = (char *)v115;
      }
      else if ((v35 & 0x1000000000000000) != 0)
      {
        uint64_t v38 = (char *)((v34 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v39 = v35 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v38 = (char *)_StringObject.sharedUTF8.getter();
      }
      BOOL v40 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v38, v39, 0x80u, 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v40) {
        goto LABEL_65;
      }
    }
    *(void *)&v115[0] = v35;
    *((void *)&v115[0] + 1) = v34;
    if (v36) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_47:
    unint64_t v36 = v93;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v36 + 16) + 1, 1);
      unint64_t v36 = v93;
    }
    unint64_t v46 = *(void *)(v36 + 16);
    unint64_t v45 = *(void *)(v36 + 24);
    if (v46 >= v45 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
      unint64_t v36 = v93;
    }
    v33 += 4;
    *(void *)(v36 + 16) = v46 + 1;
    unint64_t v47 = v36 + 16 * v46;
    *(void *)(v47 + 32) = v35;
    *(void *)(v47 + 40) = v34;
    if (!--v32) {
      goto LABEL_66;
    }
  }
  if ((v36 & 0x1000000000000000) == 0)
  {
    if ((v36 & 0x2000000000000000) != 0)
    {
      uint64_t v42 = HIBYTE(v36) & 0xF;
      v85._uint64_t countAndFlagsBits = v37;
      v85._object = (void *)(v36 & 0xFFFFFFFFFFFFFFLL);
      long long v41 = (char *)&v85;
    }
    else if ((v37 & 0x1000000000000000) != 0)
    {
      long long v41 = (char *)((v36 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v42 = v37 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      long long v41 = (char *)_StringObject.sharedUTF8.getter();
    }
    BOOL v43 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v41, v42, 0x40u, 1);
    swift_bridgeObjectRetain();
    if (!v43) {
      goto LABEL_64;
    }
    goto LABEL_46;
  }
  v85._uint64_t countAndFlagsBits = v37;
  v85._object = (void *)v36;
  unint64_t v54 = lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  unint64_t v83 = v54;
  StringProtocol._ephemeralString.getter();
  long long v55 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  long long v56 = (unsigned __int16 *)objc_msgSend(v55, sel__fastCharacterContents);
  id v57 = v55;
  if (v56)
  {
    v85._uint64_t countAndFlagsBits = v37;
    v85._object = (void *)v36;
    StringProtocol._ephemeralString.getter();
    uint64_t v58 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v59 = objc_msgSend(v58, sel_length);
    swift_unknownObjectRelease();
    char v60 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v56, (uint64_t)v59, 0x40u, 1);
  }
  else
  {
    char v60 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v37, v36, 0x40u, 1);
  }
  char v62 = v60;
  swift_bridgeObjectRelease_n();
  if (v62)
  {
LABEL_46:
    v85._uint64_t countAndFlagsBits = 61;
    v85._object = (void *)0xE100000000000000;
    v44._uint64_t countAndFlagsBits = v37;
    v44._object = (void *)v36;
    String.append(_:)(v44);
    String.append(_:)(v85);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v34 = *((void *)&v115[0] + 1);
    unint64_t v35 = *(void *)&v115[0];
    goto LABEL_47;
  }
LABEL_64:
  swift_bridgeObjectRelease();
LABEL_65:
  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  long long v63 = (void *)swift_allocError();
  *long long v64 = 7;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  int v80 = 0;
  uint64_t v79 = 1048;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_66:
  *(void *)&v115[0] = v36;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v65 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v67 = v66;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v85._uint64_t countAndFlagsBits = 0;
  LOBYTE(v85._object) = v114;
  BYTE1(v85._object) = v113;
  BYTE2(v85._object) = v112;
  BYTE3(v85._object) = v111;
  BYTE4(v85._object) = v110;
  BYTE5(v85._object) = v109;
  BYTE6(v85._object) = v108;
  HIBYTE(v85._object) = v107;
  v86[0] = v106;
  memset(&v86[8], 0, 64);
  uint64_t v87 = 0;
  LOBYTE(v88) = v105;
  uint64_t v89 = 0;
  *(void *)&long long v90 = 0;
  *((void *)&v90 + 1) = v65;
  unint64_t v91 = v67;
  v92[0] = 0;
  v92[1] = 0;
  LOBYTE(v92[2]) = v104;
  BYTE1(v92[2]) = v103;
  v115[1] = *(_OWORD *)v86;
  v115[0] = v85;
  v115[4] = *(_OWORD *)&v86[48];
  v115[5] = 0uLL;
  v115[2] = *(_OWORD *)&v86[16];
  _OWORD v115[3] = *(_OWORD *)&v86[32];
  *(_OWORD *)((char *)v116 + 10) = *(_OWORD *)((char *)v92 + 2);
  v115[7] = v90;
  v116[0] = v67;
  v115[6] = v88;
  unint64_t v4 = (unint64_t)URLComponents._URLComponents.query.getter(v104);
  outlined release of URLComponents((uint64_t)&v85);
  return v4;
}

unint64_t String._removingQueryResolveFlags()(unint64_t a1, unint64_t a2)
{
  unint64_t v3 = a1;
  char v108 = 1;
  char v102 = 0;
  char v101 = 0;
  char v100 = 0;
  char v99 = 0;
  char v98 = 0;
  char v97 = 0;
  char v95 = 0;
  char v94 = 1;
  unsigned __int8 v93 = 0;
  char v92 = 0;
  char v103 = 0;
  char v96 = 0;
  if ((a2 & 0x1000000000000000) != 0)
  {
    *(void *)&v106[0] = a1;
    *((void *)&v106[0] + 1) = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    long long v63 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    long long v64 = (unsigned __int16 *)objc_msgSend(v63, sel__fastCharacterContents);
    id v65 = v63;
    if (v64)
    {
      *(void *)&v106[0] = v3;
      *((void *)&v106[0] + 1) = a2;
      StringProtocol._ephemeralString.getter();
      unint64_t v66 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v67 = objc_msgSend(v66, sel_length);
      swift_unknownObjectRelease();
      char v68 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v64, (uint64_t)v67, 0x40u, 0);
    }
    else
    {
      char v68 = specialized Sequence.allSatisfy(_:)(v3, a2, 64);
    }
    BOOL v6 = v68;
    uint64_t v7 = swift_bridgeObjectRelease();
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v5 = HIBYTE(a2) & 0xF;
      *(void *)&v106[0] = a1;
      *((void *)&v106[0] + 1) = a2 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v4 = (char *)v106;
    }
    else if ((a1 & 0x1000000000000000) != 0)
    {
      unint64_t v4 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v5 = v3 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t v4 = (char *)_StringObject.sharedUTF8.getter();
    }
    BOOL v6 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v4, v5, 0x40u, 0);
    uint64_t v7 = swift_bridgeObjectRetain();
  }
  unint64_t v8 = a2;
  unint64_t v9 = v3;
  if (!v6)
  {
    uint64_t v10 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0) {
      uint64_t v10 = v3 & 0xFFFFFFFFFFFFLL;
    }
    if (v10)
    {
      *(void *)&v106[0] = v3;
      *((void *)&v106[0] + 1) = a2;
      MEMORY[0x1F4188790](v7);
      uint64_t v70 = (uint64_t)v106;
      LOBYTE(v71) = 64;
      swift_bridgeObjectRetain();
      uint64_t v11 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0, (uint64_t)&v69, v3, a2);
      if (v12)
      {
        unint64_t v9 = (unint64_t)v11;
        unint64_t v8 = v12;
        swift_bridgeObjectRelease_n();
      }
      else
      {
        unint64_t v14 = *((void *)&v106[0] + 1);
        unint64_t v13 = *(void *)&v106[0];
        swift_bridgeObjectRetain();
        unint64_t v9 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v13, v14, 0x40u);
        unint64_t v8 = v15;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v9 = 0;
      unint64_t v8 = 0xE000000000000000;
    }
  }
  swift_bridgeObjectRelease();
  *(void *)&long long v84 = 0;
  BYTE8(v84) = v103;
  BYTE9(v84) = v102;
  BYTE10(v84) = v101;
  BYTE11(v84) = v100;
  BYTE12(v84) = v99;
  BYTE13(v84) = v98;
  BYTE14(v84) = v97;
  HIBYTE(v84) = v96;
  v85[0] = v95;
  uint64_t v86 = 0;
  memset(&v85[8], 0, 64);
  LOBYTE(v87) = v94;
  uint64_t v88 = 0;
  *(void *)&long long v89 = 0;
  *((void *)&v89 + 1) = v9;
  unint64_t v90 = v8;
  v91[0] = 0;
  v91[1] = 0;
  LOBYTE(v91[2]) = v93;
  BYTE1(v91[2]) = v92;
  v106[0] = v84;
  v106[1] = *(_OWORD *)v85;
  v106[4] = *(_OWORD *)&v85[48];
  v106[5] = 0uLL;
  _OWORD v106[2] = *(_OWORD *)&v85[16];
  v106[3] = *(_OWORD *)&v85[32];
  *(_OWORD *)((char *)v107 + 10) = *(_OWORD *)((char *)v91 + 2);
  v106[7] = v89;
  v107[0] = v8;
  v106[6] = v87;
  unint64_t v74 = (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(1);
  if (!v74)
  {
    outlined release of URLComponents((uint64_t)&v84);
    swift_bridgeObjectRetain();
    return v3;
  }
  unint64_t v73 = v8;
  uint64_t v16 = *(void *)(v74 + 16);
  unint64_t v17 = (void *)MEMORY[0x1E4FBC860];
  if (v16)
  {
    uint64_t v18 = (uint64_t *)(v74 + 56);
    do
    {
      unint64_t v20 = *(v18 - 3);
      unint64_t v21 = *(v18 - 2);
      uint64_t v23 = *(v18 - 1);
      uint64_t v22 = *v18;
      if ((specialized Sequence<>.elementsEqual<A>(_:)(0x65766C6F7365722EuLL, 0xE800000000000000, v20, v21) & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
        }
        unint64_t v25 = v17[2];
        unint64_t v24 = v17[3];
        if (v25 >= v24 >> 1) {
          unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v17);
        }
        void v17[2] = v25 + 1;
        int v19 = &v17[4 * v25];
        v19[4] = v20;
        v19[5] = v21;
        v19[6] = v23;
        v19[7] = v22;
      }
      v18 += 4;
      --v16;
    }
    while (v16);
  }
  swift_bridgeObjectRelease();
  int64_t v26 = v17[2];
  if (!v26)
  {
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v84);
    return 0;
  }
  char v103 = 0;
  char v96 = 0;
  unint64_t v83 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 0);
  unint64_t v27 = v17 + 7;
  while (1)
  {
    unint64_t v29 = *(v27 - 3);
    unint64_t v28 = *(v27 - 2);
    unint64_t v31 = *(v27 - 1);
    unint64_t v30 = *v27;
    if ((v28 & 0x1000000000000000) != 0)
    {
      *(void *)&v104[0] = *(v27 - 3);
      *((void *)&v104[0] + 1) = v28;
      unint64_t v74 = lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      uint64_t v42 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      BOOL v43 = (unsigned __int16 *)objc_msgSend(v42, sel__fastCharacterContents);
      id v44 = v42;
      if (v43)
      {
        *(void *)&v104[0] = v29;
        *((void *)&v104[0] + 1) = v28;
        long long v72 = v43;
        StringProtocol._ephemeralString.getter();
        unint64_t v45 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v46 = objc_msgSend(v45, sel_length);
        swift_unknownObjectRelease();
        char v47 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v72, (uint64_t)v46, 0x80u, 1);
      }
      else
      {
        char v47 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v29, v28, 0x80u, 1);
      }
      char v55 = v47;
      swift_bridgeObjectRelease_n();
      if ((v55 & 1) == 0) {
        goto LABEL_60;
      }
    }
    else
    {
      if ((v28 & 0x2000000000000000) != 0)
      {
        uint64_t v33 = HIBYTE(v28) & 0xF;
        *(void *)&v104[0] = *(v27 - 3);
        *((void *)&v104[0] + 1) = v28 & 0xFFFFFFFFFFFFFFLL;
        int64_t v32 = (char *)v104;
      }
      else if ((v29 & 0x1000000000000000) != 0)
      {
        int64_t v32 = (char *)((v28 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v33 = v29 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        int64_t v32 = (char *)_StringObject.sharedUTF8.getter();
      }
      BOOL v34 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v32, v33, 0x80u, 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v34) {
        goto LABEL_60;
      }
    }
    *(void *)&v104[0] = v29;
    *((void *)&v104[0] + 1) = v28;
    if (v30) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_42:
    unint64_t v30 = v83;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v30 + 16) + 1, 1);
      unint64_t v30 = v83;
    }
    unint64_t v40 = *(void *)(v30 + 16);
    unint64_t v39 = *(void *)(v30 + 24);
    if (v40 >= v39 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
      unint64_t v30 = v83;
    }
    v27 += 4;
    *(void *)(v30 + 16) = v40 + 1;
    unint64_t v41 = v30 + 16 * v40;
    *(void *)(v41 + 32) = v29;
    *(void *)(v41 + 40) = v28;
    if (!--v26) {
      goto LABEL_61;
    }
  }
  if ((v30 & 0x1000000000000000) == 0)
  {
    if ((v30 & 0x2000000000000000) != 0)
    {
      uint64_t v36 = HIBYTE(v30) & 0xF;
      v75._uint64_t countAndFlagsBits = v31;
      v75._object = (void *)(v30 & 0xFFFFFFFFFFFFFFLL);
      unint64_t v35 = (char *)&v75;
    }
    else if ((v31 & 0x1000000000000000) != 0)
    {
      unint64_t v35 = (char *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v36 = v31 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t v35 = (char *)_StringObject.sharedUTF8.getter();
    }
    BOOL v37 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v35, v36, 0x40u, 1);
    swift_bridgeObjectRetain();
    if (!v37) {
      goto LABEL_59;
    }
    goto LABEL_41;
  }
  v75._uint64_t countAndFlagsBits = v31;
  v75._object = (void *)v30;
  unint64_t v48 = lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  unint64_t v74 = v48;
  StringProtocol._ephemeralString.getter();
  long long v49 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v50 = (unsigned __int16 *)objc_msgSend(v49, sel__fastCharacterContents);
  id v51 = v49;
  if (v50)
  {
    v75._uint64_t countAndFlagsBits = v31;
    v75._object = (void *)v30;
    StringProtocol._ephemeralString.getter();
    id v52 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v53 = objc_msgSend(v52, sel_length);
    swift_unknownObjectRelease();
    char v54 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v50, (uint64_t)v53, 0x40u, 1);
  }
  else
  {
    char v54 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v31, v30, 0x40u, 1);
  }
  char v56 = v54;
  swift_bridgeObjectRelease_n();
  if (v56)
  {
LABEL_41:
    v75._uint64_t countAndFlagsBits = 61;
    v75._object = (void *)0xE100000000000000;
    v38._uint64_t countAndFlagsBits = v31;
    v38._object = (void *)v30;
    String.append(_:)(v38);
    String.append(_:)(v75);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v28 = *((void *)&v104[0] + 1);
    unint64_t v29 = *(void *)&v104[0];
    goto LABEL_42;
  }
LABEL_59:
  swift_bridgeObjectRelease();
LABEL_60:
  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  id v57 = (void *)swift_allocError();
  unsigned char *v58 = 7;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  int v71 = 0;
  uint64_t v70 = 1048;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_61:
  *(void *)&v104[0] = v30;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v59 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v61 = v60;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v75._uint64_t countAndFlagsBits = 0;
  LOBYTE(v75._object) = v103;
  BYTE1(v75._object) = v102;
  BYTE2(v75._object) = v101;
  BYTE3(v75._object) = v100;
  BYTE4(v75._object) = v99;
  BYTE5(v75._object) = v98;
  BYTE6(v75._object) = v97;
  HIBYTE(v75._object) = v96;
  v76[0] = v95;
  memset(&v76[8], 0, 64);
  uint64_t v77 = 0;
  LOBYTE(v78) = v94;
  uint64_t v79 = 0;
  *(void *)&long long v80 = 0;
  *((void *)&v80 + 1) = v59;
  unint64_t v81 = v61;
  v82[0] = 0;
  v82[1] = 0;
  LOBYTE(v82[2]) = v93;
  BYTE1(v82[2]) = v92;
  v104[0] = v75;
  v104[1] = *(_OWORD *)v76;
  v104[4] = *(_OWORD *)&v76[48];
  v104[5] = 0uLL;
  v104[2] = *(_OWORD *)&v76[16];
  v104[3] = *(_OWORD *)&v76[32];
  *(_OWORD *)((char *)v105 + 10) = *(_OWORD *)((char *)v82 + 2);
  v104[7] = v80;
  v105[0] = v61;
  v104[6] = v78;
  unint64_t v3 = (unint64_t)URLComponents._URLComponents.query.getter(v93);
  outlined release of URLComponents((uint64_t)&v75);
  return v3;
}

Swift::String __swiftcall NSString._urlStringByInsertingPathResolveFlags(_:)(Swift::UInt32 a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  unint64_t v7 = v6;
  swift_bridgeObjectRetain();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v5, v7, 1, (uint64_t)v96);
  outlined init with take of URLComponents._URLComponents?((uint64_t)v96, (uint64_t)v134);
  outlined init with take of URLComponents._URLComponents?((uint64_t)v96, (uint64_t)&v97);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg(&v97) == 1) {
    goto LABEL_53;
  }
  unint64_t v8 = v107;
  uint64_t v72 = v108;
  uint64_t v71 = v109;
  uint64_t v70 = v110;
  uint64_t v69 = v111;
  uint64_t v68 = v112;
  uint64_t v67 = v113;
  uint64_t v66 = v114;
  uint64_t v65 = v115;
  uint64_t v9 = v117;
  unint64_t v10 = v118;
  uint64_t v11 = v119;
  unint64_t v12 = v120;
  uint64_t v63 = v122;
  uint64_t v64 = v121;
  char v95 = v98;
  char v94 = v99;
  char v93 = v100;
  char v92 = v101;
  char v91 = v102;
  char v90 = v103;
  char v89 = v104;
  char v88 = v105;
  char v87 = v106;
  char v86 = v116;
  char v85 = v123;
  char v84 = v124;
  uint64_t v73 = v97;
  if (v118)
  {
    outlined init with take of URLComponents._URLComponents?((uint64_t)v134, (uint64_t)&v125);
    outlined retain of URLComponents((uint64_t)&v125);
    unint64_t v13 = v10;
  }
  else if ((v104 & 1) != 0 && v97)
  {
    unint64_t v58 = v107;
    unint64_t v14 = v119;
    if (*(unsigned char *)(v97 + 168))
    {
      outlined init with take of URLComponents._URLComponents?((uint64_t)v134, (uint64_t)&v125);
      outlined retain of URLComponents((uint64_t)&v125);
      uint64_t v15 = MEMORY[0x185302C80](0, 0xE000000000000000);
    }
    else
    {
      unint64_t Resolve = *(void *)(v97 + 24);
      outlined init with take of URLComponents._URLComponents?((uint64_t)v134, (uint64_t)&v125);
      outlined retain of URLComponents((uint64_t)&v125);
      uint64_t v15 = String.subscript.getter();
    }
    uint64_t v9 = MEMORY[0x185301F50](v15);
    unint64_t v13 = v16;
    swift_bridgeObjectRelease();
    uint64_t v11 = v14;
    unint64_t v8 = v58;
  }
  else
  {
    outlined init with take of URLComponents._URLComponents?((uint64_t)v134, (uint64_t)&v125);
    outlined retain of URLComponents((uint64_t)&v125);
    uint64_t v9 = 0;
    unint64_t v13 = 0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  outlined release of URLComponents?(v96);
  if (!a1) {
    goto LABEL_25;
  }
  if ((specialized Collection.first.getter(v9, v13) & 0x1FF) != 0x2F) {
    goto LABEL_25;
  }
  unint64_t v74 = 0;
  unint64_t v17 = String._pathResolveFlags(prefixLength:)(&v74, v9, v13);
  if ((v17 & 0x100000000) != 0) {
    goto LABEL_25;
  }
  LODWORD(Resolve) = v17 | a1;
  if ((v17 | a1) == v17) {
    goto LABEL_25;
  }
  uint64_t v18 = (void *)v74;
  if ((v13 & 0x1000000000000000) != 0) {
    goto LABEL_67;
  }
  if ((v74 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  unint64_t v19 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0) {
    unint64_t v19 = v9 & 0xFFFFFFFFFFFFLL;
  }
  if (v19 < v74) {
    goto LABEL_69;
  }
  for (uint64_t i = (v74 << 16) | 4; ; uint64_t i = MEMORY[0x185302230](15, v18, v9, v13))
  {
    swift_bridgeObjectRetain();
    unint64_t v21 = specialized Collection.suffix(from:)(i, v9, v13);
    uint64_t v56 = v22;
    uint64_t v59 = v23;
    uint64_t v25 = v24;
    swift_bridgeObjectRelease();
    if (Resolve == 1)
    {
      *(void *)&long long v75 = 0x6C6C6F666F6E2E2FLL;
      *((void *)&v75 + 1) = 0xEA0000000000776FLL;
    }
    else
    {
      *(void *)&long long v125 = 0x766C6F7365722E2FLL;
      *((void *)&v125 + 1) = 0xEA00000000002F65;
      LODWORD(v75) = Resolve;
      v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      LODWORD(Resolve) = v11;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      long long v75 = v125;
    }
    *(void *)&long long v125 = v21;
    *((void *)&v125 + 1) = v56;
    *(void *)&long long v126 = v59;
    *((void *)&v126 + 1) = v25;
    lazy protocol witness table accessor for type Substring and conformance Substring();
    String.append<A>(contentsOf:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v13 = *((void *)&v75 + 1);
    uint64_t v9 = v75;
LABEL_25:
    char v95 = 0;
    char v89 = 0;
    if ((v13 & 0x1000000000000000) != 0)
    {
      unint64_t v60 = v11;
      *(void *)&long long v125 = v9;
      *((void *)&v125 + 1) = v13;
      int v42 = lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      LODWORD(Resolve) = v42;
      StringProtocol._ephemeralString.getter();
      BOOL v43 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v44 = (unsigned __int16 *)objc_msgSend(v43, sel__fastCharacterContents);
      id v45 = v43;
      id v57 = v44;
      if (v44)
      {
        *(void *)&long long v125 = v9;
        *((void *)&v125 + 1) = v13;
        StringProtocol._ephemeralString.getter();
        id v46 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v47 = objc_msgSend(v46, sel_length);
        swift_unknownObjectRelease();
        char v48 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v57, (uint64_t)v47, 0x10u, 1);
      }
      else
      {
        char v48 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v13, 0x10u, 1);
      }
      char v53 = v48;
      swift_bridgeObjectRelease_n();
      uint64_t v11 = v60;
      if ((v53 & 1) == 0) {
        goto LABEL_66;
      }
    }
    else
    {
      if ((v13 & 0x2000000000000000) != 0)
      {
        uint64_t v28 = HIBYTE(v13) & 0xF;
        *(void *)&long long v125 = v9;
        *((void *)&v125 + 1) = v13 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v27 = (char *)&v125;
      }
      else if ((v9 & 0x1000000000000000) != 0)
      {
        unint64_t v27 = (char *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v28 = v9 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        unint64_t v27 = (char *)_StringObject.sharedUTF8.getter();
      }
      if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v27, v28, 0x10u, 1)) {
        goto LABEL_66;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v62 = v5;
    if (v12)
    {
      unint64_t v29 = v12;
    }
    else
    {
      if (v88 != 1 || !v73 || (*(unsigned char *)(v73 + 192) & 1) != 0)
      {
        uint64_t v5 = v8;
        char v34 = 0;
        char v35 = 0;
        unint64_t Resolve = 0;
        unint64_t v31 = 0;
        char v95 = 0;
        char v88 = 0;
        goto LABEL_47;
      }
      uint64_t v40 = String.subscript.getter();
      uint64_t v11 = (void *)MEMORY[0x185301F50](v40);
      unint64_t v29 = v41;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      unint64_t v12 = 0;
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRelease();
    unint64_t Resolve = String._removingQueryResolveFlags()((unint64_t)v11, v29);
    unint64_t v31 = v30;
    swift_bridgeObjectRelease();
    char v95 = 0;
    char v88 = 0;
    if (!v31)
    {
      uint64_t v5 = v8;
      char v34 = 0;
      char v35 = 0;
      goto LABEL_47;
    }
    if ((v31 & 0x1000000000000000) == 0) {
      break;
    }
    uint64_t v5 = v8;
    *(void *)&long long v125 = Resolve;
    *((void *)&v125 + 1) = v31;
    unint64_t v8 = lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    uint64_t v11 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    long long v49 = (unsigned __int16 *)objc_msgSend(v11, sel__fastCharacterContents);
    id v50 = v11;
    unint64_t v61 = v49;
    if (v49)
    {
      *(void *)&long long v125 = Resolve;
      *((void *)&v125 + 1) = v31;
      StringProtocol._ephemeralString.getter();
      uint64_t v11 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v51 = objc_msgSend(v11, sel_length);
      swift_unknownObjectRelease();
      char v52 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v61, (uint64_t)v51, 0x40u, 1);
    }
    else
    {
      char v52 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(Resolve, v31, 0x40u, 1);
    }
    char v54 = v52;
    swift_bridgeObjectRelease();
    if (v54) {
      goto LABEL_46;
    }
LABEL_66:
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_67:
    ;
  }
  if ((v31 & 0x2000000000000000) != 0)
  {
    uint64_t v5 = v8;
    uint64_t v33 = HIBYTE(v31) & 0xF;
    *(void *)&long long v125 = Resolve;
    *((void *)&v125 + 1) = v31 & 0xFFFFFFFFFFFFFFLL;
    int64_t v32 = (char *)&v125;
  }
  else
  {
    if ((Resolve & 0x1000000000000000) != 0)
    {
      int64_t v32 = (char *)((v31 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v33 = Resolve & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      int64_t v32 = (char *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v5 = v8;
  }
  if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v32, v33, 0x40u, 1)) {
    goto LABEL_66;
  }
LABEL_46:
  char v35 = v95;
  char v34 = v88;
LABEL_47:
  swift_bridgeObjectRelease();
  *(void *)&long long v75 = v73;
  BYTE8(v75) = v35;
  BYTE9(v75) = v94;
  BYTE10(v75) = v93;
  BYTE11(v75) = v92;
  BYTE12(v75) = v91;
  BYTE13(v75) = v90;
  BYTE14(v75) = v89;
  HIBYTE(v75) = v34;
  LOBYTE(v76) = v87;
  *((void *)&v76 + 1) = v5;
  *(void *)&long long v77 = v72;
  *((void *)&v77 + 1) = v71;
  *(void *)&long long v78 = v70;
  *((void *)&v78 + 1) = v69;
  *(void *)&long long v79 = v68;
  *((void *)&v79 + 1) = v67;
  *(void *)&long long v80 = v66;
  *((void *)&v80 + 1) = v65;
  LOBYTE(v81) = v86;
  *((void *)&v81 + 1) = v9;
  *(void *)&long long v82 = v13;
  *((void *)&v82 + 1) = Resolve;
  *(void *)unint64_t v83 = v31;
  *(void *)&v83[8] = v64;
  *(void *)&v83[16] = v63;
  v83[24] = v85;
  v83[25] = v84;
  long long v125 = v75;
  long long v126 = v76;
  long long v129 = v79;
  long long v130 = v80;
  long long v127 = v77;
  long long v128 = v78;
  *(_OWORD *)((char *)v133 + 10) = *(_OWORD *)&v83[10];
  long long v132 = v82;
  v133[0] = *(_OWORD *)v83;
  long long v131 = v81;
  if (v35)
  {
    uint64_t v5 = v62;
    if (v73)
    {
      uint64_t v5 = *(void *)(v73 + 16);
      unint64_t v36 = *(void *)(v73 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      outlined release of URLComponents((uint64_t)&v75);
      unint64_t v7 = v36;
      goto LABEL_53;
    }
LABEL_52:
    outlined release of URLComponents((uint64_t)&v75);
  }
  else
  {
    outlined retain of URLComponents((uint64_t)&v75);
    uint64_t v37 = URLComponents._URLComponents.computedString.getter();
    unint64_t v39 = v38;
    outlined release of URLComponents((uint64_t)&v75);
    uint64_t v5 = v62;
    if (!v39) {
      goto LABEL_52;
    }
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v75);
    uint64_t v5 = v37;
    unint64_t v7 = v39;
  }
LABEL_53:
  unint64_t v17 = v5;
  uint64_t v18 = (void *)v7;
LABEL_70:
  result._object = v18;
  result._uint64_t countAndFlagsBits = v17;
  return result;
}

Swift::String __swiftcall NSString._urlStringByInsertingQueryResolveFlags(_:)(Swift::UInt32 a1)
{
  uint64_t v3 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  unint64_t v5 = v4;
  swift_bridgeObjectRetain();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v3, v5, 1, (uint64_t)v85);
  outlined init with take of URLComponents._URLComponents?((uint64_t)v85, (uint64_t)v116);
  outlined init with take of URLComponents._URLComponents?((uint64_t)v85, (uint64_t)&v86);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg(&v86) == 1) {
    goto LABEL_37;
  }
  Swift::UInt32 v51 = a1;
  uint64_t v6 = v106;
  unint64_t v7 = v107;
  unint64_t v8 = v108;
  unint64_t v9 = v109;
  uint64_t v53 = v111;
  char v84 = v87;
  char v83 = v88;
  char v82 = v89;
  char v81 = v90;
  char v80 = v91;
  char v79 = v92;
  char v78 = v93;
  char v77 = v94;
  char v76 = v95;
  char v75 = v105;
  char v74 = v112;
  char v73 = v113;
  uint64_t v62 = v97;
  uint64_t v63 = v96;
  uint64_t v60 = v99;
  uint64_t v61 = v98;
  uint64_t v58 = v101;
  uint64_t v59 = v100;
  uint64_t v56 = v103;
  uint64_t v57 = v102;
  uint64_t v54 = v110;
  uint64_t v55 = v104;
  if (v107)
  {
    uint64_t v10 = v86;
    outlined init with take of URLComponents._URLComponents?((uint64_t)v116, (uint64_t)v114);
    outlined retain of URLComponents((uint64_t)v114);
    unint64_t v11 = v7;
  }
  else if ((v93 & 1) != 0 && v86)
  {
    uint64_t v10 = v86;
    if (*(unsigned char *)(v86 + 168))
    {
      outlined init with take of URLComponents._URLComponents?((uint64_t)v116, (uint64_t)v114);
      outlined retain of URLComponents((uint64_t)v114);
      uint64_t v12 = MEMORY[0x185302C80](0, 0xE000000000000000);
    }
    else
    {
      outlined init with take of URLComponents._URLComponents?((uint64_t)v116, (uint64_t)v114);
      outlined retain of URLComponents((uint64_t)v114);
      uint64_t v12 = String.subscript.getter();
    }
    uint64_t v6 = MEMORY[0x185301F50](v12);
    unint64_t v11 = v13;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = v86;
    outlined init with take of URLComponents._URLComponents?((uint64_t)v116, (uint64_t)v114);
    outlined retain of URLComponents((uint64_t)v114);
    uint64_t v6 = 0;
    unint64_t v11 = 0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  outlined release of URLComponents?(v85);
  unint64_t v14 = String._removingPathResolveFlags()(v6, v11);
  unint64_t v16 = v15;
  swift_bridgeObjectRelease();
  char v84 = 0;
  char v78 = 0;
  if ((v16 & 0x1000000000000000) != 0)
  {
    *(void *)&v114[0] = v14;
    *((void *)&v114[0] + 1) = v16;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    char v35 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    unint64_t v36 = (unsigned __int16 *)objc_msgSend(v35, sel__fastCharacterContents);
    id v37 = v35;
    id v50 = v36;
    if (v36)
    {
      *(void *)&v114[0] = v14;
      *((void *)&v114[0] + 1) = v16;
      StringProtocol._ephemeralString.getter();
      unint64_t v38 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v39 = objc_msgSend(v38, sel_length);
      swift_unknownObjectRelease();
      char v40 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v50, (uint64_t)v39, 0x10u, 1);
    }
    else
    {
      char v40 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v14, v16, 0x10u, 1);
    }
    char v47 = v40;
    swift_bridgeObjectRelease_n();
    uint64_t v17 = v10;
    if ((v47 & 1) == 0) {
      goto LABEL_50;
    }
  }
  else if ((v16 & 0x2000000000000000) != 0)
  {
    *(void *)&v114[0] = v14;
    *((void *)&v114[0] + 1) = v16 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v17 = v10;
    if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)((char *)v114, HIBYTE(v16) & 0xF, 0x10u, 1))goto LABEL_50; {
  }
    }
  else
  {
    uint64_t v17 = v10;
    if ((v14 & 0x1000000000000000) != 0)
    {
      uint64_t v18 = (char *)((v16 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v19 = v14 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v18 = (char *)_StringObject.sharedUTF8.getter();
    }
    if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v18, v19, 0x10u, 1)) {
      goto LABEL_50;
    }
  }
  swift_bridgeObjectRelease();
  if (v9)
  {
    unint64_t v20 = v9;
LABEL_20:
    swift_bridgeObjectRetain();
    goto LABEL_21;
  }
  unint64_t v8 = 0;
  unint64_t v20 = 0xE000000000000000;
  if (v77 == 1 && v17)
  {
    if ((*(unsigned char *)(v17 + 192) & 1) == 0)
    {
      uint64_t v33 = String.subscript.getter();
      unint64_t v8 = MEMORY[0x185301F50](v33);
      unint64_t v20 = v34;
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    unint64_t v8 = 0;
  }
LABEL_21:
  unint64_t v21 = String._insertingQueryResolveFlags(_:)(v51, v8, v20);
  unint64_t v23 = v22;
  swift_bridgeObjectRelease();
  char v84 = 0;
  char v77 = 0;
  if (!v23)
  {
    char v26 = 0;
    char v27 = 0;
    goto LABEL_34;
  }
  if ((v23 & 0x1000000000000000) != 0)
  {
    uint64_t v52 = v17;
    *(void *)&v114[0] = v21;
    *((void *)&v114[0] + 1) = v23;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    unint64_t v41 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    int v42 = (unsigned __int16 *)objc_msgSend(v41, sel__fastCharacterContents);
    id v43 = v41;
    if (v42)
    {
      *(void *)&v114[0] = v21;
      *((void *)&v114[0] + 1) = v23;
      StringProtocol._ephemeralString.getter();
      id v44 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v45 = objc_msgSend(v44, sel_length);
      swift_unknownObjectRelease();
      char v46 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v42, (uint64_t)v45, 0x40u, 1);
    }
    else
    {
      char v46 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v21, v23, 0x40u, 1);
    }
    char v48 = v46;
    swift_bridgeObjectRelease();
    uint64_t v17 = v52;
    if (v48) {
      goto LABEL_33;
    }
LABEL_50:
    swift_bridgeObjectRelease();
    uint64_t v31 = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_51;
  }
  if ((v23 & 0x2000000000000000) != 0)
  {
    uint64_t v25 = HIBYTE(v23) & 0xF;
    *(void *)&v114[0] = v21;
    *((void *)&v114[0] + 1) = v23 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v24 = (char *)v114;
  }
  else if ((v21 & 0x1000000000000000) != 0)
  {
    uint64_t v24 = (char *)((v23 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v25 = v21 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v24 = (char *)_StringObject.sharedUTF8.getter();
  }
  if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v24, v25, 0x40u, 1)) {
    goto LABEL_50;
  }
LABEL_33:
  char v27 = v84;
  char v26 = v77;
LABEL_34:
  swift_bridgeObjectRelease();
  *(void *)&long long v64 = v17;
  BYTE8(v64) = v27;
  BYTE9(v64) = v83;
  BYTE10(v64) = v82;
  BYTE11(v64) = v81;
  BYTE12(v64) = v80;
  BYTE13(v64) = v79;
  BYTE14(v64) = v78;
  HIBYTE(v64) = v26;
  LOBYTE(v65) = v76;
  *((void *)&v65 + 1) = v63;
  *(void *)&long long v66 = v62;
  *((void *)&v66 + 1) = v61;
  *(void *)&long long v67 = v60;
  *((void *)&v67 + 1) = v59;
  *(void *)&long long v68 = v58;
  *((void *)&v68 + 1) = v57;
  *(void *)&long long v69 = v56;
  *((void *)&v69 + 1) = v55;
  LOBYTE(v70) = v75;
  *((void *)&v70 + 1) = v14;
  *(void *)&long long v71 = v16;
  *((void *)&v71 + 1) = v21;
  *(void *)uint64_t v72 = v23;
  *(void *)&v72[8] = v54;
  *(void *)&v72[16] = v53;
  v72[24] = v74;
  v72[25] = v73;
  v114[0] = v64;
  v114[1] = v65;
  v114[4] = v68;
  v114[5] = v69;
  v114[2] = v66;
  _OWORD v114[3] = v67;
  *(_OWORD *)((char *)v115 + 10) = *(_OWORD *)&v72[10];
  v114[7] = v71;
  v115[0] = *(_OWORD *)v72;
  v114[6] = v70;
  outlined retain of URLComponents((uint64_t)&v64);
  uint64_t v28 = URLComponents._URLComponents.computedString.getter();
  unint64_t v30 = v29;
  outlined release of URLComponents((uint64_t)&v64);
  if (v30)
  {
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v64);
    uint64_t v3 = v28;
    unint64_t v5 = v30;
  }
  else
  {
    outlined release of URLComponents((uint64_t)&v64);
  }
LABEL_37:
  uint64_t v31 = v3;
  int64_t v32 = (void *)v5;
LABEL_51:
  result._object = v32;
  result._uint64_t countAndFlagsBits = v31;
  return result;
}

id @objc NSString._urlStringByInsertingPathResolveFlags(_:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  id v6 = a1;
  a4(a3);

  unint64_t v7 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();

  return v7;
}

Swift::String __swiftcall NSString._urlStringByRemovingResolveFlags()()
{
  uint64_t v1 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
  unint64_t v3 = v2;
  swift_bridgeObjectRetain();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v1, v3, 1, (uint64_t)v81);
  outlined init with take of URLComponents._URLComponents?((uint64_t)v81, (uint64_t)v112);
  outlined init with take of URLComponents._URLComponents?((uint64_t)v81, (uint64_t)&v82);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg(&v82) == 1) {
    goto LABEL_35;
  }
  uint64_t v4 = v82;
  uint64_t v5 = v102;
  unint64_t v6 = v103;
  unint64_t v7 = v104;
  unint64_t v8 = v105;
  uint64_t v49 = v107;
  char v80 = v83;
  char v79 = v84;
  char v78 = v85;
  char v77 = v86;
  char v76 = v87;
  char v75 = v88;
  char v74 = v89;
  char v73 = v90;
  char v72 = v91;
  char v71 = v101;
  char v70 = v108;
  char v69 = v109;
  uint64_t v58 = v93;
  uint64_t v59 = v92;
  uint64_t v56 = v95;
  uint64_t v57 = v94;
  uint64_t v54 = v97;
  uint64_t v55 = v96;
  uint64_t v52 = v99;
  uint64_t v53 = v98;
  uint64_t v50 = v106;
  uint64_t v51 = v100;
  if (v103)
  {
    outlined init with take of URLComponents._URLComponents?((uint64_t)v112, (uint64_t)v110);
    outlined retain of URLComponents((uint64_t)v110);
    unint64_t v9 = v6;
  }
  else if ((v89 & 1) != 0 && v82)
  {
    if (*(unsigned char *)(v82 + 168))
    {
      outlined init with take of URLComponents._URLComponents?((uint64_t)v112, (uint64_t)v110);
      outlined retain of URLComponents((uint64_t)v110);
      uint64_t v10 = MEMORY[0x185302C80](0, 0xE000000000000000);
    }
    else
    {
      outlined init with take of URLComponents._URLComponents?((uint64_t)v112, (uint64_t)v110);
      outlined retain of URLComponents((uint64_t)v110);
      uint64_t v10 = String.subscript.getter();
    }
    uint64_t v5 = MEMORY[0x185301F50](v10);
    unint64_t v9 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of URLComponents._URLComponents?((uint64_t)v112, (uint64_t)v110);
    outlined retain of URLComponents((uint64_t)v110);
    uint64_t v5 = 0;
    unint64_t v9 = 0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  outlined release of URLComponents?(v81);
  unint64_t v12 = String._removingPathResolveFlags()(v5, v9);
  unint64_t v14 = v13;
  swift_bridgeObjectRelease();
  char v80 = 0;
  char v74 = 0;
  if ((v14 & 0x1000000000000000) != 0)
  {
    *(void *)&v110[0] = v12;
    *((void *)&v110[0] + 1) = v14;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    int64_t v32 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v33 = (unsigned __int16 *)objc_msgSend(v32, sel__fastCharacterContents);
    id v34 = v32;
    char v47 = v33;
    if (v33)
    {
      *(void *)&v110[0] = v12;
      *((void *)&v110[0] + 1) = v14;
      StringProtocol._ephemeralString.getter();
      char v35 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v36 = objc_msgSend(v35, sel_length);
      swift_unknownObjectRelease();
      char v37 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v47, (uint64_t)v36, 0x10u, 1);
    }
    else
    {
      char v37 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v12, v14, 0x10u, 1);
    }
    char v44 = v37;
    swift_bridgeObjectRelease_n();
    if ((v44 & 1) == 0) {
      goto LABEL_48;
    }
  }
  else
  {
    if ((v14 & 0x2000000000000000) != 0)
    {
      uint64_t v16 = HIBYTE(v14) & 0xF;
      *(void *)&v110[0] = v12;
      *((void *)&v110[0] + 1) = v14 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v15 = (char *)v110;
    }
    else if ((v12 & 0x1000000000000000) != 0)
    {
      unint64_t v15 = (char *)((v14 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v16 = v12 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t v15 = (char *)_StringObject.sharedUTF8.getter();
    }
    if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v15, v16, 0x10u, 1)) {
      goto LABEL_48;
    }
  }
  swift_bridgeObjectRelease();
  if (v8)
  {
    unint64_t v17 = v8;
  }
  else
  {
    if (v73 != 1 || !v4 || (*(unsigned char *)(v4 + 192) & 1) != 0)
    {
      char v23 = 0;
      char v24 = 0;
      unint64_t Resolve = 0;
      unint64_t v20 = 0;
      char v80 = 0;
      char v73 = 0;
      goto LABEL_32;
    }
    uint64_t v30 = String.subscript.getter();
    unint64_t v7 = MEMORY[0x185301F50](v30);
    unint64_t v17 = v31;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  unint64_t Resolve = String._removingQueryResolveFlags()(v7, v17);
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  char v80 = 0;
  char v73 = 0;
  if (!v20)
  {
    char v23 = 0;
    char v24 = 0;
    goto LABEL_32;
  }
  if ((v20 & 0x1000000000000000) != 0)
  {
    *(void *)&v110[0] = Resolve;
    *((void *)&v110[0] + 1) = v20;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    unint64_t v38 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v39 = (unsigned __int16 *)objc_msgSend(v38, sel__fastCharacterContents);
    id v40 = v38;
    char v48 = v39;
    if (v39)
    {
      *(void *)&v110[0] = Resolve;
      *((void *)&v110[0] + 1) = v20;
      StringProtocol._ephemeralString.getter();
      unint64_t v41 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v42 = objc_msgSend(v41, sel_length);
      swift_unknownObjectRelease();
      char v43 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v48, (uint64_t)v42, 0x40u, 1);
    }
    else
    {
      char v43 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(Resolve, v20, 0x40u, 1);
    }
    char v45 = v43;
    swift_bridgeObjectRelease();
    if (v45) {
      goto LABEL_31;
    }
LABEL_48:
    swift_bridgeObjectRelease();
    uint64_t v28 = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_49;
  }
  if ((v20 & 0x2000000000000000) != 0)
  {
    uint64_t v22 = HIBYTE(v20) & 0xF;
    *(void *)&v110[0] = Resolve;
    *((void *)&v110[0] + 1) = v20 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v21 = (char *)v110;
  }
  else if ((Resolve & 0x1000000000000000) != 0)
  {
    unint64_t v21 = (char *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v22 = Resolve & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v21 = (char *)_StringObject.sharedUTF8.getter();
  }
  if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v21, v22, 0x40u, 1)) {
    goto LABEL_48;
  }
LABEL_31:
  char v24 = v80;
  char v23 = v73;
LABEL_32:
  swift_bridgeObjectRelease();
  *(void *)&long long v60 = v4;
  BYTE8(v60) = v24;
  BYTE9(v60) = v79;
  BYTE10(v60) = v78;
  BYTE11(v60) = v77;
  BYTE12(v60) = v76;
  BYTE13(v60) = v75;
  BYTE14(v60) = v74;
  HIBYTE(v60) = v23;
  LOBYTE(v61) = v72;
  *((void *)&v61 + 1) = v59;
  *(void *)&long long v62 = v58;
  *((void *)&v62 + 1) = v57;
  *(void *)&long long v63 = v56;
  *((void *)&v63 + 1) = v55;
  *(void *)&long long v64 = v54;
  *((void *)&v64 + 1) = v53;
  *(void *)&long long v65 = v52;
  *((void *)&v65 + 1) = v51;
  LOBYTE(v66) = v71;
  *((void *)&v66 + 1) = v12;
  *(void *)&long long v67 = v14;
  *((void *)&v67 + 1) = Resolve;
  *(void *)long long v68 = v20;
  *(void *)&v68[8] = v50;
  *(void *)&v68[16] = v49;
  v68[24] = v70;
  v68[25] = v69;
  v110[0] = v60;
  v110[1] = v61;
  v110[4] = v64;
  v110[5] = v65;
  v110[2] = v62;
  v110[3] = v63;
  *(_OWORD *)((char *)v111 + 10) = *(_OWORD *)&v68[10];
  v110[7] = v67;
  v111[0] = *(_OWORD *)v68;
  v110[6] = v66;
  outlined retain of URLComponents((uint64_t)&v60);
  uint64_t v25 = URLComponents._URLComponents.computedString.getter();
  unint64_t v27 = v26;
  outlined release of URLComponents((uint64_t)&v60);
  if (v27)
  {
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v60);
    uint64_t v1 = v25;
    unint64_t v3 = v27;
  }
  else
  {
    outlined release of URLComponents((uint64_t)&v60);
  }
LABEL_35:
  uint64_t v28 = v1;
  unint64_t v29 = (void *)v3;
LABEL_49:
  result._object = v29;
  result._uint64_t countAndFlagsBits = v28;
  return result;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5s6UInt32VSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5i9VGXEfU_s6L7V_SsTG5SiTf1cn_n(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    LODWORD(result) = 0;
    unsigned __int8 v14 = 0;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v13[0] = a3;
    v13[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v11 = v13;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    unint64_t v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    unint64_t v11 = (void *)_StringObject.sharedUTF8.getter();
  }
  uint64_t result = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5s6UInt32VSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5h9VGXEfU_s6L7V_SsTG5SiTf1nnc_nTf4xnn_n((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    unsigned __int8 v14 = BYTE4(result) & 1;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }
  return result;
}

uint64_t specialized static Substring._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v4 = String.subscript.getter();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  a2[1] = v6;
  a2[2] = v8;
  a2[3] = v10;
  return result;
}

uint64_t specialized static Substring._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v1 = String.subscript.getter();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5s6UInt32VSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5h9VGXEfU_s6L7V_SsTG5SiTf1nnc_nTf4xnn_n(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_104;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    uint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_100;
  }
  if (v17 < a3 >> 16)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_99;
  }
  if (v18 < v15)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  unint64_t v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    unint64_t v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v33 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v34 = a6 + 55;
        }
        else
        {
          unsigned __int8 v33 = 97;
          unsigned __int8 v34 = 65;
        }
        if (a6 <= 10) {
          unsigned __int8 v35 = a6 + 48;
        }
        else {
          unsigned __int8 v35 = 58;
        }
        if (v19)
        {
          unsigned int v24 = 0;
          id v36 = v19 + 1;
          uint64_t v37 = result - 1;
          do
          {
            unsigned int v38 = *v36;
            if (v38 < 0x30 || v38 >= v35)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                unsigned int v29 = 0;
                unsigned __int8 v30 = 1;
                if (v38 < 0x61 || v38 >= v33) {
                  return v29 | ((unint64_t)v30 << 32);
                }
                char v39 = -87;
              }
              else
              {
                char v39 = -55;
              }
            }
            else
            {
              char v39 = -48;
            }
            unint64_t v40 = v24 * (unint64_t)a6;
            if ((v40 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_96;
            }
            unsigned __int8 v41 = v38 + v39;
            unsigned int v24 = v40 + v41;
            if (__CFADD__(v40, v41)) {
              goto LABEL_96;
            }
            ++v36;
            --v37;
          }
          while (v37);
LABEL_94:
          unsigned __int8 v30 = 0;
          unsigned int v29 = v24;
          return v29 | ((unint64_t)v30 << 32);
        }
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    goto LABEL_103;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v42 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v43 = a6 + 55;
      }
      else
      {
        unsigned __int8 v42 = 97;
        unsigned __int8 v43 = 65;
      }
      if (a6 <= 10) {
        unsigned __int8 v44 = a6 + 48;
      }
      else {
        unsigned __int8 v44 = 58;
      }
      if (v19)
      {
        unsigned int v24 = 0;
        while (1)
        {
          unsigned int v45 = *v19;
          if (v45 < 0x30 || v45 >= v44)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              unsigned int v29 = 0;
              unsigned __int8 v30 = 1;
              if (v45 < 0x61 || v45 >= v42) {
                return v29 | ((unint64_t)v30 << 32);
              }
              char v46 = -87;
            }
            else
            {
              char v46 = -55;
            }
          }
          else
          {
            char v46 = -48;
          }
          unint64_t v47 = v24 * (unint64_t)a6;
          if ((v47 & 0xFFFFFFFF00000000) != 0) {
            goto LABEL_96;
          }
          unsigned __int8 v48 = v45 + v46;
          unsigned int v24 = v47 + v48;
          if (__CFADD__(v47, v48)) {
            goto LABEL_96;
          }
          ++v19;
          if (!--result) {
            goto LABEL_94;
          }
        }
      }
      goto LABEL_95;
    }
LABEL_96:
    unsigned int v29 = 0;
    unsigned __int8 v30 = 1;
    return v29 | ((unint64_t)v30 << 32);
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v22 = a6 + 55;
      }
      else
      {
        unsigned __int8 v21 = 97;
        unsigned __int8 v22 = 65;
      }
      if (a6 <= 10) {
        unsigned __int8 v23 = a6 + 48;
      }
      else {
        unsigned __int8 v23 = 58;
      }
      if (v19)
      {
        unsigned int v24 = 0;
        uint64_t v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              unsigned int v29 = 0;
              unsigned __int8 v30 = 1;
              if (v27 < 0x61 || v27 >= v21) {
                return v29 | ((unint64_t)v30 << 32);
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          unint64_t v31 = v24 * (unint64_t)a6;
          if ((v31 & 0xFFFFFFFF00000000) != 0) {
            goto LABEL_96;
          }
          unsigned __int8 v32 = v27 + v28;
          unsigned int v24 = v31 - v32;
          if (v31 < v32) {
            goto LABEL_96;
          }
          ++v25;
          if (!--v26) {
            goto LABEL_94;
          }
        }
      }
LABEL_95:
      unsigned int v29 = 0;
      unsigned __int8 v30 = 0;
      return v29 | ((unint64_t)v30 << 32);
    }
    goto LABEL_96;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

void __swiftcall CollectionDifference.Change._bridgeToObjectiveC()(NSOrderedCollectionChange *__return_ptr retstr)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  ((void (*)())MEMORY[0x1F4188790])();
  uint64_t v5 = (char *)v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)v38 - v7;
  double v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (uint64_t *)((char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, double))(v13 + 16))(v12, v10);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v15 = *v12;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Int?);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  unint64_t v17 = (char *)v12 + *(int *)(TupleTypeMetadata3 + 48);
  int64_t v18 = (char *)v12 + *(int *)(TupleTypeMetadata3 + 64);
  unint64_t v19 = (void (**)(uint64_t *, char *, uint64_t))(v3 + 16);
  int v20 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  if (v18[8]) {
    uint64_t v21 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v21 = *(void *)v18;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v20(v5, v17, v2);
    uint64_t v39 = v2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v38);
    (*v19)(boxed_opaque_existential_1, v5, v2);
    uint64_t v23 = v39;
    if (v39)
    {
      unsigned int v24 = __swift_project_boxed_opaque_existential_1(v38, v39);
      uint64_t v25 = *(void *)(v23 - 8);
      double v26 = MEMORY[0x1F4188790](v24);
      char v28 = (char *)v38 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v25 + 16))(v28, v26);
      uint64_t v29 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v23);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
    }
    else
    {
      uint64_t v29 = 0;
    }
    objc_msgSend(objc_allocWithZone((Class)NSOrderedCollectionChange), sel_initWithObject_type_index_associatedIndex_, v29, 1, v15, v21);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    v20(v8, v17, v2);
    uint64_t v39 = v2;
    unsigned __int8 v30 = __swift_allocate_boxed_opaque_existential_1(v38);
    (*v19)(v30, v8, v2);
    uint64_t v31 = v39;
    if (v39)
    {
      unsigned __int8 v32 = __swift_project_boxed_opaque_existential_1(v38, v39);
      uint64_t v33 = *(void *)(v31 - 8);
      double v34 = MEMORY[0x1F4188790](v32);
      id v36 = (char *)v38 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v33 + 16))(v36, v34);
      uint64_t v37 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v36, v31);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
    }
    else
    {
      uint64_t v37 = 0;
    }
    objc_msgSend(objc_allocWithZone((Class)NSOrderedCollectionChange), sel_initWithObject_type_index_associatedIndex_, v37, 0, v15, v21);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
}

uint64_t static CollectionDifference.Change._forceBridgeFromObjectiveC(_:result:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  double v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(v10, sel_object, v7))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v15, 0, sizeof(v15));
  }
  outlined init with take of Any?((uint64_t)v15, (uint64_t)&v16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  swift_dynamicCast();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a3);
  uint64_t result = static CollectionDifference.Change._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, a3);
  if ((result & 1) == 0)
  {
    unint64_t v16 = 0;
    unint64_t v17 = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    unint64_t v16 = 0xD000000000000011;
    unint64_t v17 = 0x80000001823AD070;
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSOrderedCollectionChange);
    v12._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._uint64_t countAndFlagsBits = 544175136;
    v13._object = (void *)0xE400000000000000;
    String.append(_:)(v13);
    type metadata accessor for CollectionDifference.Change();
    v14._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static CollectionDifference.Change._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v27[-v8];
  uint64_t v10 = *(void *)(a3 - 8);
  double v12 = MEMORY[0x1F4188790](v11);
  Swift::String v14 = &v27[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (objc_msgSend(a1, sel_object, v12))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v29, v30);
  }
  else
  {
    memset(v30, 0, sizeof(v30));
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  int v15 = swift_dynamicCast();
  unint64_t v16 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (!v15)
  {
    v16(v9, 1, 1, a3);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return 0;
  }
  v16(v9, 0, 1, a3);
  unint64_t v17 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v17(v14, v9, a3);
  id v18 = objc_msgSend(a1, sel_associatedIndex);
  if (v18 == (id)0x7FFFFFFFFFFFFFFFLL) {
    id v19 = 0;
  }
  else {
    id v19 = objc_msgSend(a1, sel_associatedIndex);
  }
  if ((unint64_t)objc_msgSend(a1, sel_changeType) > 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, a3);
    return 0;
  }
  BOOL v28 = v18 == (id)0x7FFFFFFFFFFFFFFFLL;
  type metadata accessor for CollectionDifference.Change();
  uint64_t v20 = type metadata accessor for Optional();
  (*(void (**)(void *, uint64_t))(*(void *)(v20 - 8) + 8))(a2, v20);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Int?);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  unsigned __int8 v22 = (char *)a2 + *(int *)(TupleTypeMetadata3 + 48);
  uint64_t v23 = (char *)a2 + *(int *)(TupleTypeMetadata3 + 64);
  *a2 = objc_msgSend(a1, sel_index);
  v17(v22, v14, a3);
  *(void *)uint64_t v23 = v19;
  v23[8] = v28;
  swift_storeEnumTagMultiPayload();
  uint64_t v24 = type metadata accessor for CollectionDifference.Change();
  uint64_t v25 = 1;
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(a2, 0, 1, v24);
  return v25;
}

uint64_t static CollectionDifference.Change._unconditionallyBridgeFromObjectiveC(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CollectionDifference.Change();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12.n128_f64[0] = MEMORY[0x1F4188790](v11);
  Swift::String v14 = (uint64_t *)((char *)&v17 - v13);
  uint64_t v15 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v15 + 56))((char *)&v17 - v13, 1, 1, v6, v12);
  if (a1)
  {
    static CollectionDifference.Change._forceBridgeFromObjectiveC(_:result:)(a1, v14, a2);
    (*(void (**)(char *, void *, uint64_t))(v8 + 16))(v10, v14, v7);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v10, 1, v6);
    if (result != 1)
    {
      (*(void (**)(void *, uint64_t))(v8 + 8))(v14, v7);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(a3, v10, v6);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance CollectionDifference<A>.Change(void *a1, void *a2, uint64_t a3)
{
  return static CollectionDifference.Change._forceBridgeFromObjectiveC(_:result:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance CollectionDifference<A>.Change(void *a1, void *a2, uint64_t a3)
{
  return static CollectionDifference.Change._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance CollectionDifference<A>.Change@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static CollectionDifference.Change._unconditionallyBridgeFromObjectiveC(_:)(a1, *(void *)(a2 + 16), a3);
}

void __swiftcall CollectionDifference._bridgeToObjectiveC()(NSOrderedCollectionDifference *__return_ptr retstr)
{
  uint64_t v1 = type metadata accessor for CollectionDifference.Change();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v11 - v3;
  swift_getWitnessTable();
  uint64_t v5 = dispatch thunk of Collection.count.getter();
  uint64_t v6 = MEMORY[0x1E4FBC860];
  if (v5)
  {
    uint64_t v7 = v5;
    uint64_t v14 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    dispatch thunk of Collection.startIndex.getter();
    if (v7 < 0)
    {
      __break(1u);
      return;
    }
    __n128 v12 = (void (**)(char *))(v2 + 16);
    do
    {
      uint64_t v8 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
      (*v12)(v4);
      v8(v13, 0);
      CollectionDifference.Change._bridgeToObjectiveC()(v9);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      dispatch thunk of Collection.formIndex(after:)();
      --v7;
    }
    while (v7);
    uint64_t v6 = v14;
  }
  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0) {
      uint64_t v10 = v6;
    }
    else {
      uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8;
    }
  }
  else
  {
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSOrderedCollectionChange);
    uint64_t v10 = _ContiguousArrayBuffer._asCocoaArray()();
  }
  objc_msgSend(objc_allocWithZone((Class)NSOrderedCollectionDifference), sel_initWithChanges_, v10);
  swift_unknownObjectRelease();
}

uint64_t static CollectionDifference._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = static CollectionDifference._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, a3);
  if ((result & 1) == 0)
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSOrderedCollectionDifference);
    v4._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._uint64_t countAndFlagsBits = 544175136;
    v5._object = (void *)0xE400000000000000;
    String.append(_:)(v5);
    type metadata accessor for CollectionDifference();
    v6._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

BOOL static CollectionDifference._conditionallyBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for CollectionDifference();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  unsigned __int8 v44 = &v36[-v8];
  uint64_t v40 = a3;
  uint64_t v9 = type metadata accessor for CollectionDifference.Change();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v38 = *(void *)(v10 - 8);
  uint64_t v39 = v10;
  MEMORY[0x1F4188790](v10);
  __n128 v12 = &v36[-v11];
  uint64_t v13 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v53 = &v36[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v17 = MEMORY[0x1F4188790](v16);
  id v19 = &v36[-v18];
  uint64_t v43 = v7;
  unsigned __int8 v41 = *(void (**)(uint64_t, uint64_t, double))(v7 + 8);
  uint64_t v42 = v7 + 8;
  v41(a2, v6, v17);
  uint64_t v20 = swift_unknownObjectRetain();
  NSFastEnumerationIterator.init(_:)(v20, (uint64_t)v83);
  long long v80 = v83[10];
  long long v81 = v83[11];
  v82[0] = v84[0];
  *(_OWORD *)((char *)v82 + 9) = *(_OWORD *)((char *)v84 + 9);
  long long v76 = v83[6];
  long long v77 = v83[7];
  long long v78 = v83[8];
  long long v79 = v83[9];
  long long v72 = v83[2];
  long long v73 = v83[3];
  long long v74 = v83[4];
  long long v75 = v83[5];
  long long v70 = v83[0];
  long long v71 = v83[1];
  outlined retain of Locale((uint64_t)v83);
  NSFastEnumerationIterator.next()((uint64_t)&v68);
  uint64_t v46 = v6;
  uint64_t v47 = v5;
  uint64_t v45 = a2;
  if (v69)
  {
    uint64_t v51 = (unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v13 + 48);
    uint64_t v52 = (void (**)(unsigned char *, void, uint64_t, uint64_t))(v13 + 56);
    uint64_t v21 = (void (**)(unint64_t, unsigned char *, uint64_t))(v13 + 32);
    uint64_t v48 = v13 + 8;
    uint64_t v49 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v13 + 16);
    uint64_t v22 = MEMORY[0x1E4FBC860];
    uint64_t v50 = MEMORY[0x1E4FBC840] + 8;
    while (1)
    {
      outlined init with take of Any(&v68, v54);
      outlined init with copy of Any((uint64_t)v54, (uint64_t)&v55);
      int v23 = swift_dynamicCast();
      (*v52)(v12, v23 ^ 1u, 1, v9);
      if ((*v51)(v12, 1, v9) == 1) {
        break;
      }
      uint64_t v24 = *v21;
      (*v21)((unint64_t)v19, v12, v9);
      (*v49)(v53, v19, v9);
      if (!swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v27 = MEMORY[0x185302610](v22, v9);
        uint64_t v22 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27 + 1, 1, v22, v9);
      }
      unint64_t v26 = *(void *)(v22 + 16);
      unint64_t v25 = *(void *)(v22 + 24);
      if (v26 >= v25 >> 1)
      {
        BOOL v37 = v25 > 1;
        uint64_t v28 = type metadata accessor for Array();
        uint64_t v22 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v37, v26 + 1, 1, v22, *(void *)(v28 + 16));
      }
      *(void *)(v22 + 16) = v26 + 1;
      v24(v22+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(void *)(v13 + 72) * v26, v53, v9);
      (*(void (**)(unsigned char *, uint64_t))(v13 + 8))(v19, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
      NSFastEnumerationIterator.next()((uint64_t)&v68);
      if (!v69) {
        goto LABEL_11;
      }
    }
    outlined release of Locale((uint64_t)v83);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
    long long v65 = v80;
    long long v66 = v81;
    v67[0] = v82[0];
    *(_OWORD *)((char *)v67 + 9) = *(_OWORD *)((char *)v82 + 9);
    long long v61 = v76;
    long long v62 = v77;
    long long v63 = v78;
    long long v64 = v79;
    long long v57 = v72;
    long long v58 = v73;
    long long v59 = v74;
    long long v60 = v75;
    long long v55 = v70;
    long long v56 = v71;
    outlined release of Locale((uint64_t)&v55);
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v38 + 8))(v12, v39);
    uint64_t v30 = v47;
    uint64_t v29 = v45;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v45, 1, 1, v47);
  }
  else
  {
    uint64_t v22 = MEMORY[0x1E4FBC860];
LABEL_11:
    long long v65 = v80;
    long long v66 = v81;
    v67[0] = v82[0];
    *(_OWORD *)((char *)v67 + 9) = *(_OWORD *)((char *)v82 + 9);
    long long v61 = v76;
    long long v62 = v77;
    long long v63 = v78;
    long long v64 = v79;
    long long v57 = v72;
    long long v58 = v73;
    long long v59 = v74;
    long long v60 = v75;
    long long v55 = v70;
    long long v56 = v71;
    outlined release of Locale((uint64_t)&v55);
    *(void *)&v54[0] = v22;
    type metadata accessor for Array();
    swift_getWitnessTable();
    uint64_t v29 = v45;
    CollectionDifference.init<A>(_:)();
    outlined release of Locale((uint64_t)v83);
    uint64_t v30 = v47;
  }
  uint64_t v31 = v44;
  uint64_t v32 = v29;
  uint64_t v33 = v46;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v43 + 16))(v44, v32, v46);
  BOOL v34 = (*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48))(v31, 1, v30) != 1;
  ((void (*)(unsigned char *, uint64_t))v41)(v31, v33);
  return v34;
}

void static CollectionDifference._unconditionallyBridgeFromObjectiveC(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CollectionDifference.Change();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v32[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v10);
  unsigned __int8 v41 = &v32[-v11];
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = &v32[-v13];
  uint64_t v15 = type metadata accessor for CollectionDifference();
  uint64_t v16 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = &v32[-v17];
  if (a1)
  {
    uint64_t v35 = v18;
    uint64_t v36 = v15;
    uint64_t v37 = a2;
    uint64_t v34 = a3;
    uint64_t v19 = swift_unknownObjectRetain();
    NSFastEnumerationIterator.init(_:)(v19, (uint64_t)v60);
    long long v57 = v60[10];
    long long v58 = v60[11];
    v59[0] = v61[0];
    *(_OWORD *)((char *)v59 + 9) = *(_OWORD *)((char *)v61 + 9);
    long long v53 = v60[6];
    long long v54 = v60[7];
    long long v55 = v60[8];
    long long v56 = v60[9];
    long long v49 = v60[2];
    long long v50 = v60[3];
    long long v51 = v60[4];
    long long v52 = v60[5];
    long long v47 = v60[0];
    long long v48 = v60[1];
    outlined retain of Locale((uint64_t)v60);
    NSFastEnumerationIterator.next()((uint64_t)&v45);
    if (v46)
    {
      uint64_t v20 = (void (**)(unint64_t, unsigned char *, uint64_t))(v7 + 32);
      uint64_t v39 = v7 + 8;
      uint64_t v21 = MEMORY[0x1E4FBC860];
      uint64_t v38 = MEMORY[0x1E4FBC840] + 8;
      uint64_t v40 = v9;
      do
      {
        outlined init with take of Any(&v45, v43);
        outlined init with copy of Any((uint64_t)v43, (uint64_t)v42);
        uint64_t v22 = v41;
        swift_dynamicCast();
        int v23 = *v20;
        (*v20)((unint64_t)v14, v22, v6);
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 16))(v9, v14, v6);
        if (!swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v27 = MEMORY[0x185302610](v21, v6);
          uint64_t v21 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27 + 1, 1, v21, v6);
        }
        unint64_t v25 = *(void *)(v21 + 16);
        unint64_t v24 = *(void *)(v21 + 24);
        if (v25 >= v24 >> 1)
        {
          BOOL v33 = v24 > 1;
          uint64_t v28 = type metadata accessor for Array();
          uint64_t v21 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33, v25 + 1, 1, v21, *(void *)(v28 + 16));
        }
        *(void *)(v21 + 16) = v25 + 1;
        unint64_t v26 = v21
            + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
            + *(void *)(v7 + 72) * v25;
        uint64_t v9 = v40;
        v23(v26, v40, v6);
        (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v14, v6);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
        NSFastEnumerationIterator.next()((uint64_t)&v45);
      }
      while (v46);
    }
    else
    {
      uint64_t v21 = MEMORY[0x1E4FBC860];
    }
    v43[10] = v57;
    v43[11] = v58;
    v44[0] = v59[0];
    *(_OWORD *)((char *)v44 + 9) = *(_OWORD *)((char *)v59 + 9);
    v43[6] = v53;
    v43[7] = v54;
    v43[8] = v55;
    v43[9] = v56;
    v43[2] = v49;
    v43[3] = v50;
    v43[4] = v51;
    v43[5] = v52;
    v43[0] = v47;
    v43[1] = v48;
    outlined release of Locale((uint64_t)v43);
    v42[0] = v21;
    type metadata accessor for Array();
    swift_getWitnessTable();
    uint64_t v29 = v35;
    CollectionDifference.init<A>(_:)();
    outlined release of Locale((uint64_t)v60);
    uint64_t v30 = v36;
    uint64_t v31 = *(void *)(v36 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v36) != 1)
    {
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(v31 + 32))(v34, v29, v30);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance CollectionDifference<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static CollectionDifference._forceBridgeFromObjectiveC(_:result:)(a1, a2, *(void *)(a3 + 16));
}

BOOL protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance CollectionDifference<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static CollectionDifference._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, *(void *)(a3 + 16));
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance CollectionDifference<A>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICUListFormatter.Signature()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Swift::UInt v2 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ICUListFormatter.Signature()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Swift::UInt v2 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICUListFormatter.Signature()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Swift::UInt v2 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ICUListFormatter.Signature(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v5 = a2[2];
  uint64_t v4 = a2[3];
  if (*a1 == *a2 && a1[1] == a2[1])
  {
    if (v2 != v5) {
      return 0;
    }
    return v3 == v4;
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if ((v7 & 1) != 0 && v2 == v5) {
    return v3 == v4;
  }
  return result;
}

uint64_t ICUListFormatter.__deallocating_deinit()
{
  ulistfmt_close();

  return swift_deallocClassInstance();
}

uint64_t initializeWithCopy for ICUListFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ICUListFormatter.Signature(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for ICUListFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

void protocol witness for _TimeZoneProtocol.init(secondsFromGMT:) in conformance _TimeZoneAutoupdating()
{
}

void protocol witness for _TimeZoneProtocol.init(identifier:) in conformance _TimeZoneAutoupdating()
{
}

uint64_t protocol witness for _TimeZoneProtocol.localizedName(for:locale:) in conformance _TimeZoneAutoupdating()
{
  return _TimeZoneAutoupdating.localizedName(for:locale:)();
}

uint64_t specialized _TimeZoneAutoupdating.debugDescription.getter()
{
  strcpy((char *)v10, "autoupdating ");
  HIWORD(v10[1]) = -4864;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (uint64_t *)(static TimeZoneCache.cache + 16);
  Swift::UInt v1 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in TimeZoneCache.current.getter(v0, v9);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  uint64_t v2 = v9[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(ObjectType, v2);
  uint64_t v6 = v5;
  swift_unknownObjectRelease();
  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return v10[0];
}

uint64_t specialized _TimeZoneAutoupdating.localizedName(for:locale:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v5 = (uint64_t *)(static TimeZoneCache.cache + 16);
  uint64_t v6 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in TimeZoneCache.current.getter(v5, v12);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  uint64_t v7 = v12[1];
  uint64_t ObjectType = swift_getObjectType();
  v11[0] = v3;
  v11[1] = v4;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v7 + 88))(a1, v11, ObjectType, v7);
  swift_unknownObjectRelease();
  return v9;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance _FTSSequence.Iterator@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = _FTSSequence.Iterator.next()();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance _FTSSequence@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(const char **)v1;
  int v4 = *(_DWORD *)(v1 + 8);
  type metadata accessor for _FTSSequence.Iterator();
  uint64_t v5 = swift_allocObject();
  uint64_t result = _FTSSequence.Iterator.init(_:_:)(v3, v4);
  *a1 = v5;
  return result;
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance _FTSSequence()
{
  return specialized _copySequenceToContiguousArray<A>(_:)(*(const char **)v0, *(_DWORD *)(v0 + 8));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _FTSSequence(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(const char **)v3, *(_DWORD *)(v3 + 8));
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance _FTSSequence@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation12_FTSSequenceVACOqd__Isgyrzo_AjBsAG_pAJRszr__lIetMgyrzo_Tp5(a1, a2);
}

uint64_t _POSIXDirectoryContentsSequence.Iterator.init(path:appendSlashForDirectory:prefix:)(uint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 64) = 0;
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }
  else
  {
    Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v11 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
    goto LABEL_54;
  }
  if (v11 < -1)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v12 = v11 + 1;
  if (v11 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v14 = (char *)v56 - v13;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v14, v12, 1, a1, a2);
    char v16 = v15;
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0 || (uint64_t v17 = opendir(v14)) == 0)
    {
LABEL_35:
      uint64_t v36 = swift_bridgeObjectRelease();
      *(void *)(v5 + 24) = 0;
      *(void *)(v5 + 32) = 0xE000000000000000;
      *(void *)(v5 + 40) = 0;
      *(void *)(v5 + 48) = 0xE000000000000000;
      *(unsigned char *)(v5 + 56) = 0;
      int v37 = MEMORY[0x185301870](v36);
      int v38 = v37;
      uint64_t v39 = 263;
      switch(v37)
      {
        case 1:
        case 13:
          uint64_t v39 = 257;
          goto LABEL_45;
        case 2:
          uint64_t v39 = 260;
          goto LABEL_45;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          goto LABEL_40;
        case 27:
          goto LABEL_45;
        default:
          if (v37 == 63)
          {
            uint64_t v39 = 258;
          }
          else
          {
            if (v37 == 102)
            {
              id v40 = 0;
              uint64_t v39 = 256;
LABEL_50:
              specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v39, a1, a2, v40, 0x7265646C6F46, 0xE600000000000000, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v58, 0, 0);
              long long v53 = *(void **)(v5 + 64);
              *(void *)(v5 + 64) = v58;

              return v5;
            }
LABEL_40:
            uint64_t v39 = 256;
          }
LABEL_45:
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
          {
            unint64_t v58 = 0;
            unint64_t v59 = 0xE000000000000000;
            _StringGuts.grow(_:)(22);
            swift_bridgeObjectRelease();
            unint64_t v58 = 0xD000000000000014;
            unint64_t v59 = 0x80000001823A9780;
            int v57 = v38;
            v55._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v55);
            swift_bridgeObjectRelease();
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x181C22BE8);
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v44 = (int)POSIXErrorCode.rawValue.getter();
          id v45 = objc_allocWithZone((Class)NSError);
          uint64_t v46 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v40 = objc_msgSend(v45, sel_initWithDomain_code_userInfo_, v46, v44, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v47 = objc_msgSend(v40, sel_domain);
          id v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
          uint64_t v50 = v49;

          if (v48 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v50 == v51)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_50;
          }
          char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v52) {
            goto LABEL_50;
          }
          break;
      }
LABEL_55:
      __break(1u);
    }
  }
  else
  {
    uint64_t v18 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v18, v12, 1, a1, a2);
    char v20 = v19;
    swift_bridgeObjectRelease();
    if (v20)
    {
      MEMORY[0x185309510](v18, -1, -1);
      goto LABEL_35;
    }
    uint64_t v17 = opendir(v18);
    MEMORY[0x185309510](v18, -1, -1);
    if (!v17) {
      goto LABEL_35;
    }
  }
  *(void *)(v5 + 24) = a1;
  *(void *)(v5 + 32) = a2;
  *(void *)(v5 + 16) = v17;
  *(unsigned char *)(v5 + 56) = a3 & 1;
  uint64_t v21 = *(void *)(a4 + 16);
  if (v21)
  {
    swift_bridgeObjectRetain();
    v56[1] = a4;
    uint64_t v22 = (unint64_t *)(a4 + 40);
    int v23 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      unint64_t v25 = *(v22 - 1);
      unint64_t v26 = *v22;
      uint64_t v27 = HIBYTE(*v22) & 0xF;
      if ((*v22 & 0x2000000000000000) == 0) {
        uint64_t v27 = v25 & 0xFFFFFFFFFFFFLL;
      }
      if (v27)
      {
        swift_bridgeObjectRetain_n();
        String.index(before:)();
        uint64_t v28 = String.subscript.getter();
        uint64_t v30 = v29;
        swift_bridgeObjectRelease();
        if (v28 == 47 && v30 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v32 & 1) == 0)
          {
            unint64_t v58 = v25;
            unint64_t v59 = v26;
            swift_bridgeObjectRetain();
            v33._uint64_t countAndFlagsBits = 47;
            v33._object = (void *)0xE100000000000000;
            String.append(_:)(v33);
            swift_bridgeObjectRelease();
            unint64_t v25 = v58;
            unint64_t v26 = v59;
          }
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
        }
        unint64_t v35 = v23[2];
        unint64_t v34 = v23[3];
        if (v35 >= v34 >> 1) {
          int v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v23);
        }
        double v23[2] = v35 + 1;
        unint64_t v24 = &v23[2 * v35];
        v24[4] = v25;
        v24[5] = v26;
      }
      v22 += 2;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
  }
  else
  {
    int v23 = (void *)MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRelease();
  unint64_t v58 = (unint64_t)v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v41 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v43 = v42;
  swift_bridgeObjectRelease();
  *(void *)(v5 + 40) = v41;
  *(void *)(v5 + 48) = v43;
  return v5;
}

uint64_t _POSIXDirectoryContentsSequence.Iterator.__deallocating_deinit()
{
  uint64_t v1 = *(DIR **)(v0 + 16);
  if (v1) {
    closedir(v1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t __swift_memcpy12_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for _FTSSequence(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for _FTSSequence(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 12) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 12) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _FTSSequence()
{
  return &type metadata for _FTSSequence;
}

uint64_t outlined copy of _FTSSequence.Iterator.State(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for _FTSSequence.Iterator.State(uint64_t a1)
{
  return outlined consume of _FTSSequence.Iterator.State(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t initializeWithCopy for _FTSSequence.Iterator.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of _FTSSequence.Iterator.State(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for _FTSSequence.Iterator.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of _FTSSequence.Iterator.State(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  char v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  outlined consume of _FTSSequence.Iterator.State(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for _FTSSequence.Iterator.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  char v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of _FTSSequence.Iterator.State(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _FTSSequence.Iterator.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _FTSSequence.Iterator.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for _FTSSequence.Iterator.State(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 1u) {
    return *(unsigned __int8 *)(a1 + 24);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

ValueMetadata *type metadata accessor for _FTSSequence.Iterator.State()
{
  return &type metadata for _FTSSequence.Iterator.State;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in _FTSSequence()
{
  return lazy protocol witness table accessor for type _FTSSequence.Iterator and conformance _FTSSequence.Iterator(&lazy protocol witness table cache variable for type _FTSSequence.Iterator and conformance _FTSSequence.Iterator, (void (*)(void))type metadata accessor for _FTSSequence.Iterator);
}

uint64_t protocol witness for IteratorProtocol.next() in conformance _POSIXDirectoryContentsSequence.Iterator@<X0>(uint64_t a1@<X8>)
{
  _POSIXDirectoryContentsSequence.Iterator.next()((uint64_t)v3);
  return outlined init with take of _POSIXDirectoryContentsSequence.Iterator.Element?((uint64_t)v3, a1);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance _POSIXDirectoryContentsSequence@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  unint64_t v4 = *(void *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  type metadata accessor for _POSIXDirectoryContentsSequence.Iterator();
  uint64_t v7 = swift_allocObject();
  uint64_t result = _POSIXDirectoryContentsSequence.Iterator.init(path:appendSlashForDirectory:prefix:)(v3, v4, v5, v6);
  *a1 = v7;
  return result;
}

char *protocol witness for Sequence._copyToContiguousArray() in conformance _POSIXDirectoryContentsSequence()
{
  uint64_t v1 = specialized _copySequenceToContiguousArray<A>(_:)(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16), *(void *)(v0 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _POSIXDirectoryContentsSequence(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(void *)v3, *(void *)(v3 + 8), *(unsigned char *)(v3 + 16), *(timespec **)(v3 + 24));
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance _POSIXDirectoryContentsSequence@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation16AttributedStringV5IndexVqd__Isgyrzo_AJ01_k13ConverterFromiJ0VABsAG_pANRszr__lIetMggrzo_Tp5Tm(a1, a2);
}

uint64_t initializeWithCopy for _POSIXDirectoryContentsSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _POSIXDirectoryContentsSequence(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _POSIXDirectoryContentsSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for _POSIXDirectoryContentsSequence()
{
  return &type metadata for _POSIXDirectoryContentsSequence;
}

uint64_t initializeWithCopy for _POSIXDirectoryContentsSequence.Iterator.Element(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _POSIXDirectoryContentsSequence.Iterator.Element(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for _POSIXDirectoryContentsSequence.Iterator.Element(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for _POSIXDirectoryContentsSequence.Iterator.Element(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _POSIXDirectoryContentsSequence.Iterator.Element(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t outlined copy of _FTSSequence.Element(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for _FTSSequence.Element(uint64_t a1)
{
  return outlined consume of _FTSSequence.Element(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t initializeWithCopy for _FTSSequence.Element(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of _FTSSequence.Element(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for _FTSSequence.Element(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of _FTSSequence.Element(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  outlined consume of _FTSSequence.Element(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for _FTSSequence.Element(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of _FTSSequence.Element(v5, v7, v6, v8);
  return a1;
}

ValueMetadata *type metadata accessor for _FTSSequence.Element()
{
  return &type metadata for _FTSSequence.Element;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in _POSIXDirectoryContentsSequence()
{
  return lazy protocol witness table accessor for type _FTSSequence.Iterator and conformance _FTSSequence.Iterator(&lazy protocol witness table cache variable for type _POSIXDirectoryContentsSequence.Iterator and conformance _POSIXDirectoryContentsSequence.Iterator, (void (*)(void))type metadata accessor for _POSIXDirectoryContentsSequence.Iterator);
}

uint64_t lazy protocol witness table accessor for type _FTSSequence.Iterator and conformance _FTSSequence.Iterator(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _FTSSequence.Element.SwiftFTSENT(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for _FTSSequence.Element.SwiftFTSENT(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)uint64_t result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _FTSSequence.Element.SwiftFTSENT()
{
  return &type metadata for _FTSSequence.Element.SwiftFTSENT;
}

void static CocoaError.formatting.getter(void *a1@<X8>)
{
  *a1 = 2048;
}

id specialized _BridgedStoredNSError.code.getter@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(a1, sel_code);
  *a2 = result;
  return result;
}

void static CocoaError.propertyListReadCorrupt.getter(void *a1@<X8>)
{
  *a1 = 3840;
}

void static CocoaError.coderReadCorrupt.getter(void *a1@<X8>)
{
  *a1 = 4864;
}

void static CocoaError.fileNoSuchFile.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static CocoaError.fileLocking.getter(void *a1@<X8>)
{
  *a1 = 255;
}

void static CocoaError.fileReadUnknown.getter(void *a1@<X8>)
{
  *a1 = 256;
}

void static CocoaError.fileReadNoPermission.getter(void *a1@<X8>)
{
  *a1 = 257;
}

void static CocoaError.fileReadInvalidFileName.getter(void *a1@<X8>)
{
  *a1 = 258;
}

void static CocoaError.fileReadCorruptFile.getter(void *a1@<X8>)
{
  *a1 = 259;
}

void static CocoaError.fileReadNoSuchFile.getter(void *a1@<X8>)
{
  *a1 = 260;
}

void static CocoaError.fileReadInapplicableStringEncoding.getter(void *a1@<X8>)
{
  *a1 = 261;
}

void static CocoaError.fileReadUnsupportedScheme.getter(void *a1@<X8>)
{
  *a1 = 262;
}

void static CocoaError.fileReadTooLarge.getter(void *a1@<X8>)
{
  *a1 = 263;
}

void static CocoaError.fileReadUnknownStringEncoding.getter(void *a1@<X8>)
{
  *a1 = 264;
}

void static CocoaError.fileWriteUnknown.getter(void *a1@<X8>)
{
  *a1 = 512;
}

void static CocoaError.fileWriteNoPermission.getter(void *a1@<X8>)
{
  *a1 = 513;
}

void static CocoaError.fileWriteInvalidFileName.getter(void *a1@<X8>)
{
  *a1 = 514;
}

void static CocoaError.fileWriteFileExists.getter(void *a1@<X8>)
{
  *a1 = 516;
}

void static CocoaError.fileWriteInapplicableStringEncoding.getter(void *a1@<X8>)
{
  *a1 = 517;
}

void static CocoaError.fileWriteUnsupportedScheme.getter(void *a1@<X8>)
{
  *a1 = 518;
}

void static CocoaError.fileWriteOutOfSpace.getter(void *a1@<X8>)
{
  *a1 = 640;
}

void static CocoaError.fileWriteVolumeReadOnly.getter(void *a1@<X8>)
{
  *a1 = 642;
}

void static CocoaError.fileManagerUnmountUnknown.getter(void *a1@<X8>)
{
  *a1 = 768;
}

void static CocoaError.fileManagerUnmountBusy.getter(void *a1@<X8>)
{
  *a1 = 769;
}

void static CocoaError.keyValueValidation.getter(void *a1@<X8>)
{
  *a1 = 1024;
}

void static CocoaError.userCancelled.getter(void *a1@<X8>)
{
  *a1 = 3072;
}

void static CocoaError.featureUnsupported.getter(void *a1@<X8>)
{
  *a1 = 3328;
}

void static CocoaError.executableNotLoadable.getter(void *a1@<X8>)
{
  *a1 = 3584;
}

void static CocoaError.executableArchitectureMismatch.getter(void *a1@<X8>)
{
  *a1 = 3585;
}

void static CocoaError.executableRuntimeMismatch.getter(void *a1@<X8>)
{
  *a1 = 3586;
}

void static CocoaError.executableLoad.getter(void *a1@<X8>)
{
  *a1 = 3587;
}

void static CocoaError.executableLink.getter(void *a1@<X8>)
{
  *a1 = 3588;
}

void static CocoaError.propertyListReadUnknownVersion.getter(void *a1@<X8>)
{
  *a1 = 3841;
}

void static CocoaError.propertyListReadStream.getter(void *a1@<X8>)
{
  *a1 = 3842;
}

void static CocoaError.propertyListWriteStream.getter(void *a1@<X8>)
{
  *a1 = 3851;
}

void static CocoaError.propertyListWriteInvalid.getter(void *a1@<X8>)
{
  *a1 = 3852;
}

void static CocoaError.xpcConnectionInterrupted.getter(void *a1@<X8>)
{
  *a1 = 4097;
}

void static CocoaError.xpcConnectionInvalid.getter(void *a1@<X8>)
{
  *a1 = 4099;
}

void static CocoaError.xpcConnectionReplyInvalid.getter(void *a1@<X8>)
{
  *a1 = 4101;
}

void static CocoaError.ubiquitousFileUnavailable.getter(void *a1@<X8>)
{
  *a1 = 4353;
}

void static CocoaError.ubiquitousFileNotUploadedDueToQuota.getter(void *a1@<X8>)
{
  *a1 = 4354;
}

void static CocoaError.ubiquitousFileUbiquityServerNotAvailable.getter(void *a1@<X8>)
{
  *a1 = 4355;
}

void static CocoaError.userActivityHandoffFailed.getter(void *a1@<X8>)
{
  *a1 = 4608;
}

void static CocoaError.userActivityConnectionUnavailable.getter(void *a1@<X8>)
{
  *a1 = 4609;
}

void static CocoaError.userActivityRemoteApplicationTimedOut.getter(void *a1@<X8>)
{
  *a1 = 4610;
}

void static CocoaError.userActivityHandoffUserInfoTooLarge.getter(void *a1@<X8>)
{
  *a1 = 4611;
}

void static CocoaError.coderValueNotFound.getter(void *a1@<X8>)
{
  *a1 = 4865;
}

void static CocoaError.coderInvalidValue.getter(void *a1@<X8>)
{
  *a1 = 4866;
}

BOOL CocoaError.isCoderError.getter()
{
  id v1 = *v0;
  return (uint64_t)objc_msgSend(*v0, sel_code) >= 4864 && (uint64_t)objc_msgSend(v1, sel_code) < 4992;
}

BOOL CocoaError.isExecutableError.getter()
{
  id v1 = *v0;
  return (uint64_t)objc_msgSend(*v0, sel_code) >= 3584 && (uint64_t)objc_msgSend(v1, sel_code) < 3840;
}

BOOL CocoaError.isFileError.getter()
{
  id v1 = *v0;
  return ((unint64_t)objc_msgSend(*v0, sel_code) & 0x8000000000000000) == 0
      && (uint64_t)objc_msgSend(v1, sel_code) < 1024;
}

BOOL CocoaError.isFormattingError.getter()
{
  id v1 = *v0;
  return (uint64_t)objc_msgSend(*v0, sel_code) >= 2048 && (uint64_t)objc_msgSend(v1, sel_code) < 2560;
}

BOOL CocoaError.isPropertyListError.getter()
{
  id v1 = *v0;
  return (uint64_t)objc_msgSend(*v0, sel_code) >= 3840 && (uint64_t)objc_msgSend(v1, sel_code) < 4096;
}

BOOL CocoaError.isValidationError.getter()
{
  id v1 = *v0;
  return (uint64_t)objc_msgSend(*v0, sel_code) >= 1024 && (uint64_t)objc_msgSend(v1, sel_code) < 2048;
}

BOOL CocoaError.isUbiquitousFileError.getter()
{
  id v1 = *v0;
  return (uint64_t)objc_msgSend(*v0, sel_code) >= 4352 && (uint64_t)objc_msgSend(v1, sel_code) < 4608;
}

BOOL CocoaError.isUserActivityError.getter()
{
  id v1 = *v0;
  return (uint64_t)objc_msgSend(*v0, sel_code) >= 4608 && (uint64_t)objc_msgSend(v1, sel_code) < 4864;
}

BOOL CocoaError.isXPCConnectionError.getter()
{
  id v1 = *v0;
  return (uint64_t)objc_msgSend(*v0, sel_code) >= 4096 && (uint64_t)objc_msgSend(v1, sel_code) < 4225;
}

uint64_t one-time initialization function for log()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static Calendar.log = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static _LocaleICU.log = result;
  return result;
}

uint64_t _handleCalendarError(_:date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)(uint64_t a1, uint64_t *a2, uint64_t *a3, const void *a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned __int8 *a7)
{
  void (*v43)(long long *__return_ptr, uint64_t, void *);
  Swift::String v44;
  Swift::String v45;
  void *(*v46)(long long *__return_ptr, uint64_t, void *);
  void *v47;
  uint64_t v48;
  id v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t ObjectType;
  void (*v55)(long long *__return_ptr, uint64_t, void *);
  Swift::String v56;
  Swift::String v57;
  void *(*v58)(long long *__return_ptr, uint64_t, void *);
  void *v59;
  uint64_t v60;
  id v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void (*v67)(long long *__return_ptr, uint64_t, void *);
  Swift::String v68;
  Swift::String v69;
  void *(*v70)(long long *__return_ptr, uint64_t, void *);
  void *v71;
  uint64_t v72;
  os_unfair_lock_s *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  Swift::String v80;
  Swift::String v81;
  void (*v82)(long long *__return_ptr, uint64_t, void *);
  uint64_t v83;
  Swift::String v84;
  Swift::String v85;
  uint64_t (*v86)(uint64_t, void *);
  uint64_t v87;
  Swift::String v88;
  Swift::String v89;
  uint64_t (*v90)(uint64_t, void *);
  uint64_t v91;
  Swift::String v92;
  os_log_t v93;
  uint64_t v94;
  unint64_t v95;
  long long v96;
  uint64_t v97;
  void *v98;
  Swift::String v99;
  Swift::String v100;
  Swift::String v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  int v108;
  const char *v109;
  os_unfair_lock_s *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  void *v115;
  Swift::String v116;
  Swift::String v117;
  void (*v118)(long long *__return_ptr, uint64_t, void *);
  uint64_t v119;
  Swift::String v120;
  Swift::String v121;
  uint64_t (*v122)(uint64_t, void *);
  uint64_t v123;
  Swift::String v124;
  Swift::String v125;
  uint64_t (*v126)(uint64_t, void *);
  uint64_t v127;
  Swift::String v128;
  os_log_t v129;
  uint64_t v130;
  unint64_t v131;
  long long v132;
  uint64_t v133;
  void *v134;
  Swift::String v135;
  Swift::String v136;
  Swift::String v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  int v144;
  const char *v145;
  os_unfair_lock_s *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  void *v151;
  Swift::String v152;
  Swift::String v153;
  void (*v154)(long long *__return_ptr, uint64_t, void *);
  uint64_t v155;
  Swift::String v156;
  Swift::String v157;
  uint64_t (*v158)(uint64_t, void *);
  uint64_t v159;
  Swift::String v160;
  Swift::String v161;
  uint64_t (*v162)(uint64_t, void *);
  uint64_t v163;
  Swift::String v164;
  os_log_t v165;
  uint64_t v166;
  unint64_t v167;
  long long v168;
  uint64_t v169;
  void *v170;
  Swift::String v171;
  Swift::String v172;
  Swift::String v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  int v180;
  const char *v181;
  char *v182;
  uint64_t v183;
  unint64_t v184;
  os_log_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  unint64_t v189;
  os_log_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  int v196;
  uint64_t v197;
  int v198;
  os_log_t v199;
  os_log_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  long long v209;
  unsigned char v210[32];
  Swift::String v211;
  long long v212;
  long long v213;
  long long v214;
  uint64_t v215;
  unint64_t v216;
  _OWORD v217[18];
  uint64_t v218;
  unsigned char v219[296];

  uint64_t v14 = type metadata accessor for Mirror();
  uint64_t v203 = *(void *)(v14 - 8);
  long long v204 = v14;
  MEMORY[0x1F4188790](v14);
  long long v200 = (os_log_t)((char *)&v194 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v16);
  long long v199 = (os_log_t)((char *)&v194 - v17);
  MEMORY[0x1F4188790](v18);
  char v20 = ((char *)&v194 - v19);
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v22 = *(void *)(v21 - 8);
  long long v207 = v21;
  long long v208 = v22;
  MEMORY[0x1F4188790](v21);
  long long v206 = (char *)&v194 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  long long v205 = (char *)&v194 - v25;
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v194 - v27;
  uint64_t v29 = *(char **)a1;
  long long v201 = *(void *)(a1 + 8);
  long long v202 = v29;
  int v30 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v31 = *a2;
  uint64_t v32 = *a3;
  Swift::String v33 = (void *)a3[1];
  memcpy(v219, a4, 0x11AuLL);
  int v34 = *a5;
  uint64_t v35 = *a6;
  int v36 = *a7;
  if (!v30)
  {
    long long v200 = v20;
    long long v206 = v28;
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v49 = (id)static Calendar.log;
    int v38 = v206;
    Logger.init(_:)();
    swift_unknownObjectRetain();
    outlined retain of DateComponents((uint64_t)v219);
    swift_unknownObjectRetain();
    outlined retain of DateComponents((uint64_t)v219);
    uint64_t v39 = Logger.logObject.getter();
    uint64_t v50 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v39, (os_log_type_t)v50)) {
      goto LABEL_18;
    }
    long long v195 = v50;
    long long v196 = v34;
    long long v199 = v39;
    long long v197 = v35;
    uint64_t v51 = swift_slowAlloc();
    long long v194 = swift_slowAlloc();
    uint64_t v218 = v194;
    *(_DWORD *)uint64_t v51 = 134350850;
    *(void *)&v217[0] = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v51 + 12) = 2050;
    *(void *)&v217[0] = v201;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v51 + 22) = 2082;
    LOBYTE(v217[0]) = (_BYTE)v202;
    char v52 = Calendar.Component.debugDescription.getter();
    *(void *)&v217[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, &v218);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    long long v205 = (char *)v51;
    *(_WORD *)(v51 + 32) = 2082;
    *(void *)&v217[0] = 0;
    *((void *)&v217[0] + 1) = 0xE000000000000000;
    swift_unknownObjectRetain();
    _StringGuts.grow(_:)(72);
    uint64_t ObjectType = swift_getObjectType();
    Swift::String v55 = (void (*)(long long *__return_ptr, uint64_t, void *))v33[3];
    swift_unknownObjectRetain();
    v55(&v212, ObjectType, v33);
    swift_unknownObjectRelease();
    LOBYTE(v209) = v212;
    _print_unlocked<A, B>(_:_:)();
    v56._uint64_t countAndFlagsBits = 10272;
    v56._object = (void *)0xE200000000000000;
    String.append(_:)(v56);
    *(void *)&long long v212 = v32;
    *((void *)&v212 + 1) = v33;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CalendarProtocol & Swift.AnyObject);
    _print_unlocked<A, B>(_:_:)();
    v57._uint64_t countAndFlagsBits = 0x656C61636F6C2029;
    v57._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v57);
    unint64_t v58 = (void *(*)(long long *__return_ptr, uint64_t, void *))v33[4];
    swift_unknownObjectRetain();
    unint64_t v59 = v58(&v212, ObjectType, v33);
    long long v198 = v36;
    if ((void)v212)
    {
      uint64_t v60 = *((void *)&v212 + 1);
      swift_unknownObjectRelease();
    }
    else
    {
      if (one-time initialization token for cache != -1) {
        unint64_t v59 = (void *)swift_once();
      }
      uint64_t v110 = (os_unfair_lock_s *)static LocaleCache.cache;
      MEMORY[0x1F4188790](v59);
      *(&v194 - 2) = 0;
      *(&v194 - 1) = 0xE000000000000000;
      swift_retain_n();
      os_unfair_lock_lock(v110 + 31);
      closure #1 in LocaleCache.fixed(_:)partial apply((uint64_t)&v110[4], &v209);
      os_unfair_lock_unlock(v110 + 31);
      swift_unknownObjectRelease();
      swift_release_n();
      uint64_t v60 = *((void *)&v209 + 1);
    }
    uint64_t v111 = v205;
    long long v202 = v205 + 34;
    char v112 = swift_getObjectType();
    char v113 = (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 64))(v112, v60);
    uint64_t v115 = v114;
    swift_unknownObjectRelease();
    v116._uint64_t countAndFlagsBits = v113;
    v116._object = v115;
    String.append(_:)(v116);
    swift_bridgeObjectRelease();
    v117._uint64_t countAndFlagsBits = 0x6F7A20656D697420;
    v117._object = (void *)0xEC000000203A656ELL;
    String.append(_:)(v117);
    unint64_t v118 = (void (*)(long long *__return_ptr, uint64_t, void *))v33[6];
    swift_unknownObjectRetain();
    v118(&v212, ObjectType, v33);
    swift_unknownObjectRelease();
    char v119 = v212;
    swift_getObjectType();
    *(void *)&long long v209 = v119;
    v120._uint64_t countAndFlagsBits = dispatch thunk of CustomDebugStringConvertible.debugDescription.getter();
    String.append(_:)(v120);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    v121._uint64_t countAndFlagsBits = 0x6557747372696620;
    v121._object = (void *)0xEF203A7961646B65;
    String.append(_:)(v121);
    uint64_t v122 = (uint64_t (*)(uint64_t, void *))v33[7];
    swift_unknownObjectRetain();
    char v123 = v122(ObjectType, v33);
    swift_unknownObjectRelease();
    *(void *)&long long v212 = v123;
    v124._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v124);
    swift_bridgeObjectRelease();
    v125._object = (void *)0x80000001823AD310;
    v125._uint64_t countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v125);
    long long v126 = (uint64_t (*)(uint64_t, void *))v33[9];
    swift_unknownObjectRetain();
    long long v127 = v126(ObjectType, v33);
    swift_unknownObjectRelease();
    *(void *)&long long v212 = v127;
    v128._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v128);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&v217[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(uint64_t *)&v217[0], *((unint64_t *)&v217[0] + 1), &v218);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    *((_WORD *)v111 + 21) = 2082;
    memcpy(v217, v219, 0x11AuLL);
    outlined retain of DateComponents((uint64_t)v219);
    long long v129 = v200;
    DateComponents.customMirror.getter();
    long long v130 = Mirror.children.getter();
    (*(void (**)(os_log_t, uint64_t))(v203 + 8))(v129, v204);
    long long v131 = 0xE000000000000000;
    long long v215 = 0;
    uint64_t v216 = 0xE000000000000000;
    swift_retain();
    dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (*((void *)&v217[2] + 1))
    {
      long long v204 = v130;
      do
      {
        long long v212 = v217[0];
        long long v213 = v217[1];
        long long v214 = v217[2];
        v211._uint64_t countAndFlagsBits = 0;
        v211._object = (void *)0xE000000000000000;
        long long v132 = v217[0];
        long long v209 = v217[0];
        outlined init with copy of Any((uint64_t)&v213, (uint64_t)v210);
        if (*((void *)&v132 + 1)) {
          uint64_t v133 = v132;
        }
        else {
          uint64_t v133 = 0;
        }
        if (*((void *)&v132 + 1)) {
          uint64_t v134 = (void *)*((void *)&v132 + 1);
        }
        else {
          uint64_t v134 = (void *)0xE000000000000000;
        }
        swift_bridgeObjectRetain();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
        v135._uint64_t countAndFlagsBits = v133;
        v135._object = v134;
        String.append(_:)(v135);
        swift_bridgeObjectRelease();
        v136._uint64_t countAndFlagsBits = 8250;
        v136._object = (void *)0xE200000000000000;
        String.append(_:)(v136);
        _print_unlocked<A, B>(_:_:)();
        v137._uint64_t countAndFlagsBits = 32;
        v137._object = (void *)0xE100000000000000;
        String.append(_:)(v137);
        String.append(_:)(v211);
        swift_bridgeObjectRelease();
        outlined destroy of (label: String?, value: Any)((uint64_t)&v212);
        dispatch thunk of _AnyIteratorBoxBase.next()();
      }
      while (*((void *)&v217[2] + 1));
      uint64_t v138 = v215;
      long long v131 = v216;
    }
    else
    {
      uint64_t v138 = 0;
    }
    uint64_t v139 = 0x656D69547478656ELL;
    swift_release();
    swift_release();
    uint64_t v140 = v205;
    outlined release of DateComponents((uint64_t)v219);
    *(void *)&v217[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v138, v131, &v218);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined release of DateComponents((uint64_t)v219);
    outlined release of DateComponents((uint64_t)v219);
    *((_WORD *)v140 + 26) = 2082;
    if (v196) {
      uint64_t v141 = 0x647261776B636162;
    }
    else {
      uint64_t v141 = 0x64726177726F66;
    }
    uint64_t v142 = 0xE800000000000000;
    if (v196) {
      uint64_t v143 = 0xE800000000000000;
    }
    else {
      uint64_t v143 = 0xE700000000000000;
    }
    *(void *)&v217[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v141, v143, &v218);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *((_WORD *)v140 + 31) = 2082;
    char v144 = v198;
    switch(v197)
    {
      case 1:
        uint64_t v139 = 0xD000000000000023;
        uint64_t v145 = "nextTimePreservingSmallerComponents";
        goto LABEL_88;
      case 2:
        uint64_t v139 = 0xD000000000000027;
        uint64_t v145 = "previousTimePreservingSmallerComponents";
LABEL_88:
        uint64_t v142 = (unint64_t)(v145 - 32) | 0x8000000000000000;
        break;
      case 3:
        uint64_t v142 = 0xE600000000000000;
        uint64_t v139 = 0x746369727473;
        break;
      default:
        break;
    }
    long long v187 = v205;
    *(void *)&v217[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v139, v142, &v218);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *((_WORD *)v187 + 36) = 2080;
    if (v144) {
      long long v188 = 1953718636;
    }
    else {
      long long v188 = 0x7473726966;
    }
    if (v144) {
      long long v189 = 0xE400000000000000;
    }
    else {
      long long v189 = 0xE500000000000000;
    }
    *(void *)&v217[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v188, v189, &v218);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v190 = v199;
    _os_log_impl(&dword_181795000, v199, (os_log_type_t)v195, "Out of range Calendar enumeration result: start: %{public}f test: %{public}f %{public}s %{public}s %{public}s %{public}s %{public}s %s", (uint8_t *)v187, 0x52u);
    goto LABEL_115;
  }
  if (v30 != 1)
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    long long v61 = (id)static Calendar.log;
    int v38 = v206;
    Logger.init(_:)();
    swift_unknownObjectRetain();
    outlined retain of DateComponents((uint64_t)v219);
    swift_unknownObjectRetain();
    outlined retain of DateComponents((uint64_t)v219);
    uint64_t v39 = Logger.logObject.getter();
    long long v62 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v39, (os_log_type_t)v62)) {
      goto LABEL_18;
    }
    long long v195 = v62;
    long long v196 = v34;
    long long v199 = v39;
    long long v197 = v35;
    long long v63 = swift_slowAlloc();
    long long v194 = swift_slowAlloc();
    uint64_t v218 = v194;
    *(_DWORD *)long long v63 = 134350850;
    *(void *)&v217[0] = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v63 + 12) = 2050;
    *(void *)&v217[0] = v201;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v63 + 22) = 2082;
    LOBYTE(v217[0]) = (_BYTE)v202;
    long long v64 = Calendar.Component.debugDescription.getter();
    *(void *)&v217[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, &v218);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    long long v205 = (char *)v63;
    *(_WORD *)(v63 + 32) = 2082;
    *(void *)&v217[0] = 0;
    *((void *)&v217[0] + 1) = 0xE000000000000000;
    swift_unknownObjectRetain();
    _StringGuts.grow(_:)(72);
    long long v66 = swift_getObjectType();
    long long v67 = (void (*)(long long *__return_ptr, uint64_t, void *))v33[3];
    swift_unknownObjectRetain();
    v67(&v212, v66, v33);
    swift_unknownObjectRelease();
    LOBYTE(v209) = v212;
    _print_unlocked<A, B>(_:_:)();
    v68._uint64_t countAndFlagsBits = 10272;
    v68._object = (void *)0xE200000000000000;
    String.append(_:)(v68);
    *(void *)&long long v212 = v32;
    *((void *)&v212 + 1) = v33;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CalendarProtocol & Swift.AnyObject);
    _print_unlocked<A, B>(_:_:)();
    v69._uint64_t countAndFlagsBits = 0x656C61636F6C2029;
    v69._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v69);
    long long v70 = (void *(*)(long long *__return_ptr, uint64_t, void *))v33[4];
    swift_unknownObjectRetain();
    long long v71 = v70(&v212, v66, v33);
    long long v198 = v36;
    if ((void)v212)
    {
      long long v72 = *((void *)&v212 + 1);
      swift_unknownObjectRelease();
    }
    else
    {
      if (one-time initialization token for cache != -1) {
        long long v71 = (void *)swift_once();
      }
      uint64_t v146 = (os_unfair_lock_s *)static LocaleCache.cache;
      MEMORY[0x1F4188790](v71);
      *(&v194 - 2) = 0;
      *(&v194 - 1) = 0xE000000000000000;
      swift_retain_n();
      os_unfair_lock_lock(v146 + 31);
      closure #1 in LocaleCache.fixed(_:)partial apply((uint64_t)&v146[4], &v209);
      os_unfair_lock_unlock(v146 + 31);
      swift_unknownObjectRelease();
      swift_release_n();
      long long v72 = *((void *)&v209 + 1);
    }
    uint64_t v147 = v205;
    long long v202 = v205 + 34;
    uint64_t v148 = swift_getObjectType();
    uint64_t v149 = (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 64))(v148, v72);
    uint64_t v151 = v150;
    swift_unknownObjectRelease();
    v152._uint64_t countAndFlagsBits = v149;
    v152._object = v151;
    String.append(_:)(v152);
    swift_bridgeObjectRelease();
    v153._uint64_t countAndFlagsBits = 0x6F7A20656D697420;
    v153._object = (void *)0xEC000000203A656ELL;
    String.append(_:)(v153);
    uint64_t v154 = (void (*)(long long *__return_ptr, uint64_t, void *))v33[6];
    swift_unknownObjectRetain();
    v154(&v212, v66, v33);
    swift_unknownObjectRelease();
    uint64_t v155 = v212;
    swift_getObjectType();
    *(void *)&long long v209 = v155;
    v156._uint64_t countAndFlagsBits = dispatch thunk of CustomDebugStringConvertible.debugDescription.getter();
    String.append(_:)(v156);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    v157._uint64_t countAndFlagsBits = 0x6557747372696620;
    v157._object = (void *)0xEF203A7961646B65;
    String.append(_:)(v157);
    uint64_t v158 = (uint64_t (*)(uint64_t, void *))v33[7];
    swift_unknownObjectRetain();
    uint64_t v159 = v158(v66, v33);
    swift_unknownObjectRelease();
    *(void *)&long long v212 = v159;
    v160._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v160);
    swift_bridgeObjectRelease();
    v161._object = (void *)0x80000001823AD310;
    v161._uint64_t countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v161);
    uint64_t v162 = (uint64_t (*)(uint64_t, void *))v33[9];
    swift_unknownObjectRetain();
    uint64_t v163 = v162(v66, v33);
    swift_unknownObjectRelease();
    *(void *)&long long v212 = v163;
    v164._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v164);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&v217[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(uint64_t *)&v217[0], *((unint64_t *)&v217[0] + 1), &v218);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    *((_WORD *)v147 + 21) = 2082;
    memcpy(v217, v219, 0x11AuLL);
    outlined retain of DateComponents((uint64_t)v219);
    uint64_t v165 = v200;
    DateComponents.customMirror.getter();
    uint64_t v166 = Mirror.children.getter();
    (*(void (**)(os_log_t, uint64_t))(v203 + 8))(v165, v204);
    uint64_t v167 = 0xE000000000000000;
    long long v215 = 0;
    uint64_t v216 = 0xE000000000000000;
    swift_retain();
    dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (*((void *)&v217[2] + 1))
    {
      long long v204 = v166;
      do
      {
        long long v212 = v217[0];
        long long v213 = v217[1];
        long long v214 = v217[2];
        v211._uint64_t countAndFlagsBits = 0;
        v211._object = (void *)0xE000000000000000;
        uint64_t v168 = v217[0];
        long long v209 = v217[0];
        outlined init with copy of Any((uint64_t)&v213, (uint64_t)v210);
        if (*((void *)&v168 + 1)) {
          unint64_t v169 = v168;
        }
        else {
          unint64_t v169 = 0;
        }
        if (*((void *)&v168 + 1)) {
          unint64_t v170 = (void *)*((void *)&v168 + 1);
        }
        else {
          unint64_t v170 = (void *)0xE000000000000000;
        }
        swift_bridgeObjectRetain();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
        v171._uint64_t countAndFlagsBits = v169;
        v171._object = v170;
        String.append(_:)(v171);
        swift_bridgeObjectRelease();
        v172._uint64_t countAndFlagsBits = 8250;
        v172._object = (void *)0xE200000000000000;
        String.append(_:)(v172);
        _print_unlocked<A, B>(_:_:)();
        v173._uint64_t countAndFlagsBits = 32;
        v173._object = (void *)0xE100000000000000;
        String.append(_:)(v173);
        String.append(_:)(v211);
        swift_bridgeObjectRelease();
        outlined destroy of (label: String?, value: Any)((uint64_t)&v212);
        dispatch thunk of _AnyIteratorBoxBase.next()();
      }
      while (*((void *)&v217[2] + 1));
      uint64_t v174 = v215;
      uint64_t v167 = v216;
    }
    else
    {
      uint64_t v174 = 0;
    }
    uint64_t v175 = 0x656D69547478656ELL;
    swift_release();
    swift_release();
    unint64_t v176 = v205;
    outlined release of DateComponents((uint64_t)v219);
    *(void *)&v217[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v174, v167, &v218);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined release of DateComponents((uint64_t)v219);
    outlined release of DateComponents((uint64_t)v219);
    *((_WORD *)v176 + 26) = 2082;
    if (v196) {
      uint64_t v177 = 0x647261776B636162;
    }
    else {
      uint64_t v177 = 0x64726177726F66;
    }
    long long v178 = 0xE800000000000000;
    if (v196) {
      long long v179 = 0xE800000000000000;
    }
    else {
      long long v179 = 0xE700000000000000;
    }
    *(void *)&v217[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v177, v179, &v218);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *((_WORD *)v176 + 31) = 2082;
    long long v180 = v198;
    switch(v197)
    {
      case 1:
        uint64_t v175 = 0xD000000000000023;
        long long v181 = "nextTimePreservingSmallerComponents";
        goto LABEL_106;
      case 2:
        uint64_t v175 = 0xD000000000000027;
        long long v181 = "previousTimePreservingSmallerComponents";
LABEL_106:
        long long v178 = (unint64_t)(v181 - 32) | 0x8000000000000000;
        break;
      case 3:
        long long v178 = 0xE600000000000000;
        uint64_t v175 = 0x746369727473;
        break;
      default:
        break;
    }
    long long v187 = v205;
    *(void *)&v217[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v175, v178, &v218);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *((_WORD *)v187 + 36) = 2080;
    if (v180) {
      long long v191 = 1953718636;
    }
    else {
      long long v191 = 0x7473726966;
    }
    if (v180) {
      long long v192 = 0xE400000000000000;
    }
    else {
      long long v192 = 0xE500000000000000;
    }
    *(void *)&v217[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v191, v192, &v218);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v190 = v199;
    _os_log_impl(&dword_181795000, v199, (os_log_type_t)v195, "Unexpected Calendar enumeration result: start: %{public}f test: %{public}f %{public}s %{public}s %{public}s %{public}s %{public}s %s", (uint8_t *)v187, 0x52u);
LABEL_115:
    long long v193 = v194;
    swift_arrayDestroy();
    MEMORY[0x185309510](v193, -1, -1);
    MEMORY[0x185309510](v187, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v208 + 8))(v206, v207);
  }
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  id v37 = (id)static Calendar.log;
  int v38 = v205;
  Logger.init(_:)();
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)v219);
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)v219);
  uint64_t v39 = Logger.logObject.getter();
  int v40 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v39, (os_log_type_t)v40))
  {
LABEL_18:
    swift_unknownObjectRelease_n();
    outlined release of DateComponents((uint64_t)v219);
    outlined release of DateComponents((uint64_t)v219);

    return (*(uint64_t (**)(char *, uint64_t))(v208 + 8))(v38, v207);
  }
  long long v195 = v40;
  long long v200 = v39;
  long long v197 = v35;
  uint64_t v41 = swift_slowAlloc();
  long long v194 = swift_slowAlloc();
  uint64_t v218 = v194;
  *(_DWORD *)uint64_t v41 = 134350850;
  *(void *)&v217[0] = v31;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v41 + 12) = 2050;
  *(void *)&v217[0] = v202;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v41 + 22) = 2050;
  *(void *)&v217[0] = v201;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  long long v206 = (char *)v41;
  *(_WORD *)(v41 + 32) = 2082;
  *(void *)&v217[0] = 0;
  *((void *)&v217[0] + 1) = 0xE000000000000000;
  swift_unknownObjectRetain();
  _StringGuts.grow(_:)(72);
  uint64_t v42 = swift_getObjectType();
  uint64_t v43 = (void (*)(long long *__return_ptr, uint64_t, void *))v33[3];
  swift_unknownObjectRetain();
  v43(&v212, v42, v33);
  swift_unknownObjectRelease();
  LOBYTE(v209) = v212;
  _print_unlocked<A, B>(_:_:)();
  v44._uint64_t countAndFlagsBits = 10272;
  v44._object = (void *)0xE200000000000000;
  String.append(_:)(v44);
  *(void *)&long long v212 = v32;
  *((void *)&v212 + 1) = v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CalendarProtocol & Swift.AnyObject);
  _print_unlocked<A, B>(_:_:)();
  v45._uint64_t countAndFlagsBits = 0x656C61636F6C2029;
  v45._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v45);
  uint64_t v46 = (void *(*)(long long *__return_ptr, uint64_t, void *))v33[4];
  swift_unknownObjectRetain();
  id v47 = v46(&v212, v42, v33);
  long long v198 = v36;
  long long v196 = v34;
  if ((void)v212)
  {
    id v48 = *((void *)&v212 + 1);
    swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for cache != -1) {
      id v47 = (void *)swift_once();
    }
    long long v74 = (os_unfair_lock_s *)static LocaleCache.cache;
    MEMORY[0x1F4188790](v47);
    *(&v194 - 2) = 0;
    *(&v194 - 1) = 0xE000000000000000;
    swift_retain_n();
    os_unfair_lock_lock(v74 + 31);
    closure #1 in LocaleCache.fixed(_:)partial apply((uint64_t)&v74[4], &v209);
    os_unfair_lock_unlock(v74 + 31);
    swift_unknownObjectRelease();
    swift_release_n();
    id v48 = *((void *)&v209 + 1);
  }
  long long v75 = v206;
  long long v202 = v206 + 34;
  long long v76 = swift_getObjectType();
  long long v77 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 64))(v76, v48);
  long long v79 = v78;
  swift_unknownObjectRelease();
  v80._uint64_t countAndFlagsBits = v77;
  v80._object = v79;
  String.append(_:)(v80);
  swift_bridgeObjectRelease();
  v81._uint64_t countAndFlagsBits = 0x6F7A20656D697420;
  v81._object = (void *)0xEC000000203A656ELL;
  String.append(_:)(v81);
  uint64_t v82 = (void (*)(long long *__return_ptr, uint64_t, void *))v33[6];
  swift_unknownObjectRetain();
  v82(&v212, v42, v33);
  swift_unknownObjectRelease();
  char v83 = v212;
  swift_getObjectType();
  *(void *)&long long v209 = v83;
  v84._uint64_t countAndFlagsBits = dispatch thunk of CustomDebugStringConvertible.debugDescription.getter();
  String.append(_:)(v84);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v85._uint64_t countAndFlagsBits = 0x6557747372696620;
  v85._object = (void *)0xEF203A7961646B65;
  String.append(_:)(v85);
  char v86 = (uint64_t (*)(uint64_t, void *))v33[7];
  swift_unknownObjectRetain();
  char v87 = v86(v42, v33);
  swift_unknownObjectRelease();
  *(void *)&long long v212 = v87;
  v88._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v88);
  swift_bridgeObjectRelease();
  v89._object = (void *)0x80000001823AD310;
  v89._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v89);
  char v90 = (uint64_t (*)(uint64_t, void *))v33[9];
  swift_unknownObjectRetain();
  char v91 = v90(v42, v33);
  swift_unknownObjectRelease();
  *(void *)&long long v212 = v91;
  v92._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v92);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)&v217[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(uint64_t *)&v217[0], *((unint64_t *)&v217[0] + 1), &v218);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_unknownObjectRelease_n();
  swift_bridgeObjectRelease();
  *((_WORD *)v75 + 21) = 2082;
  memcpy(v217, v219, 0x11AuLL);
  outlined retain of DateComponents((uint64_t)v219);
  uint64_t v93 = v199;
  DateComponents.customMirror.getter();
  uint64_t v94 = Mirror.children.getter();
  (*(void (**)(os_log_t, uint64_t))(v203 + 8))(v93, v204);
  uint64_t v95 = 0xE000000000000000;
  long long v215 = 0;
  uint64_t v216 = 0xE000000000000000;
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (*((void *)&v217[2] + 1))
  {
    long long v204 = v94;
    do
    {
      long long v212 = v217[0];
      long long v213 = v217[1];
      long long v214 = v217[2];
      v211._uint64_t countAndFlagsBits = 0;
      v211._object = (void *)0xE000000000000000;
      uint64_t v96 = v217[0];
      long long v209 = v217[0];
      outlined init with copy of Any((uint64_t)&v213, (uint64_t)v210);
      if (*((void *)&v96 + 1)) {
        uint64_t v97 = v96;
      }
      else {
        uint64_t v97 = 0;
      }
      if (*((void *)&v96 + 1)) {
        uint64_t v98 = (void *)*((void *)&v96 + 1);
      }
      else {
        uint64_t v98 = (void *)0xE000000000000000;
      }
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
      v99._uint64_t countAndFlagsBits = v97;
      v99._object = v98;
      String.append(_:)(v99);
      swift_bridgeObjectRelease();
      v100._uint64_t countAndFlagsBits = 8250;
      v100._object = (void *)0xE200000000000000;
      String.append(_:)(v100);
      _print_unlocked<A, B>(_:_:)();
      v101._uint64_t countAndFlagsBits = 32;
      v101._object = (void *)0xE100000000000000;
      String.append(_:)(v101);
      String.append(_:)(v211);
      swift_bridgeObjectRelease();
      outlined destroy of (label: String?, value: Any)((uint64_t)&v212);
      dispatch thunk of _AnyIteratorBoxBase.next()();
    }
    while (*((void *)&v217[2] + 1));
    uint64_t v102 = v215;
    uint64_t v95 = v216;
  }
  else
  {
    uint64_t v102 = 0;
  }
  unint64_t v103 = 0x656D69547478656ELL;
  swift_release();
  swift_release();
  unint64_t v104 = v206;
  outlined release of DateComponents((uint64_t)v219);
  *(void *)&v217[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, v95, &v218);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined release of DateComponents((uint64_t)v219);
  outlined release of DateComponents((uint64_t)v219);
  *((_WORD *)v104 + 26) = 2082;
  if (v196) {
    unint64_t v105 = 0x647261776B636162;
  }
  else {
    unint64_t v105 = 0x64726177726F66;
  }
  uint64_t v106 = 0xE800000000000000;
  if (v196) {
    uint64_t v107 = 0xE800000000000000;
  }
  else {
    uint64_t v107 = 0xE700000000000000;
  }
  *(void *)&v217[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v105, v107, &v218);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *((_WORD *)v104 + 31) = 2082;
  char v108 = v198;
  switch(v197)
  {
    case 1:
      unint64_t v103 = 0xD000000000000023;
      char v109 = "nextTimePreservingSmallerComponents";
      goto LABEL_86;
    case 2:
      unint64_t v103 = 0xD000000000000027;
      char v109 = "previousTimePreservingSmallerComponents";
LABEL_86:
      uint64_t v106 = (unint64_t)(v109 - 32) | 0x8000000000000000;
      break;
    case 3:
      uint64_t v106 = 0xE600000000000000;
      unint64_t v103 = 0x746369727473;
      break;
    default:
      break;
  }
  long long v182 = v206;
  *(void *)&v217[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v103, v106, &v218);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *((_WORD *)v182 + 36) = 2080;
  if (v108) {
    long long v183 = 1953718636;
  }
  else {
    long long v183 = 0x7473726966;
  }
  if (v108) {
    long long v184 = 0xE400000000000000;
  }
  else {
    long long v184 = 0xE500000000000000;
  }
  *(void *)&v217[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v183, v184, &v218);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  long long v185 = v200;
  _os_log_impl(&dword_181795000, v200, (os_log_type_t)v195, "Not advancing Calendar enumeration result: %{public}f next: %{public}f previous: %{public}f %{public}s %{public}s %{public}s %{public}s %s", (uint8_t *)v182, 0x52u);
  long long v186 = v194;
  swift_arrayDestroy();
  MEMORY[0x185309510](v186, -1, -1);
  MEMORY[0x185309510](v182, -1, -1);

  return (*(uint64_t (**)(char *, uint64_t))(v208 + 8))(v205, v207);
}

uint64_t _handleCalendarResultNotFound(date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)(uint64_t *a1, uint64_t *a2, const void *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  void (*v28)(long long *__return_ptr, uint64_t, void *);
  Swift::String v29;
  Swift::String v30;
  void *(*v31)(long long *__return_ptr, uint64_t, void *);
  void *v32;
  uint64_t v33;
  os_unfair_lock_s *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  Swift::String v41;
  Swift::String v42;
  void (*v43)(long long *__return_ptr, uint64_t, void *);
  uint64_t v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t (*v47)(uint64_t, void *);
  uint64_t v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t (*v51)(uint64_t, void *);
  uint64_t v52;
  Swift::String v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  os_log_type_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  os_log_t v76;
  uint64_t v77;
  void v78[2];
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  os_log_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  long long v92;
  unsigned char v93[32];
  Swift::String v94;
  long long v95;
  _OWORD v96[2];
  uint64_t v97;
  unint64_t v98;
  _OWORD v99[18];
  uint64_t v100;
  unsigned char v101[296];

  uint64_t v12 = type metadata accessor for Mirror();
  char v87 = *(void *)(v12 - 8);
  char v88 = v12;
  MEMORY[0x1F4188790](v12);
  char v86 = (char *)v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Logger();
  char v91 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *a1;
  uint64_t v19 = *a2;
  uint64_t v18 = (void *)a2[1];
  memcpy(v101, a3, 0x11AuLL);
  char v89 = *a4;
  uint64_t v20 = *a5;
  int v21 = *a6;
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  id v22 = (id)static Calendar.log;
  Logger.init(_:)();
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)v101);
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)v101);
  uint64_t v23 = Logger.logObject.getter();
  int v24 = static os_log_type_t.debug.getter();
  uint64_t v25 = v16;
  if (os_log_type_enabled(v23, (os_log_type_t)v24))
  {
    char v83 = v23;
    long long v79 = v20;
    uint64_t v82 = v21;
    uint64_t v26 = swift_slowAlloc();
    long long v80 = swift_slowAlloc();
    uint64_t v100 = v80;
    *(_DWORD *)uint64_t v26 = 134350338;
    *(void *)&v99[0] = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    char v90 = v26;
    *(_WORD *)(v26 + 12) = 2082;
    *(void *)&v99[0] = 0;
    *((void *)&v99[0] + 1) = 0xE000000000000000;
    swift_unknownObjectRetain();
    _StringGuts.grow(_:)(72);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v28 = (void (*)(long long *__return_ptr, uint64_t, void *))v18[3];
    swift_unknownObjectRetain();
    v28(&v95, ObjectType, v18);
    swift_unknownObjectRelease();
    LOBYTE(v92) = v95;
    _print_unlocked<A, B>(_:_:)();
    v29._uint64_t countAndFlagsBits = 10272;
    v29._object = (void *)0xE200000000000000;
    String.append(_:)(v29);
    *(void *)&uint64_t v95 = v19;
    *((void *)&v95 + 1) = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CalendarProtocol & Swift.AnyObject);
    _print_unlocked<A, B>(_:_:)();
    v30._uint64_t countAndFlagsBits = 0x656C61636F6C2029;
    v30._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v30);
    uint64_t v31 = (void *(*)(long long *__return_ptr, uint64_t, void *))v18[4];
    swift_unknownObjectRetain();
    uint64_t v32 = v31(&v95, ObjectType, v18);
    char v84 = v25;
    char v85 = v14;
    long long v81 = v24;
    if ((void)v95)
    {
      Swift::String v33 = *((void *)&v95 + 1);
      swift_unknownObjectRelease();
    }
    else
    {
      if (one-time initialization token for cache != -1) {
        uint64_t v32 = (void *)swift_once();
      }
      uint64_t v35 = (os_unfair_lock_s *)static LocaleCache.cache;
      MEMORY[0x1F4188790](v32);
      v78[-2] = 0;
      v78[-1] = 0xE000000000000000;
      swift_retain_n();
      os_unfair_lock_lock(v35 + 31);
      partial apply for closure #1 in LocaleCache.fixed(_:)((uint64_t)&v35[4], &v92);
      os_unfair_lock_unlock(v35 + 31);
      swift_unknownObjectRelease();
      swift_release_n();
      Swift::String v33 = *((void *)&v92 + 1);
    }
    int v36 = v90;
    v78[1] = v90 + 14;
    id v37 = swift_getObjectType();
    int v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 64))(v37, v33);
    int v40 = v39;
    swift_unknownObjectRelease();
    v41._uint64_t countAndFlagsBits = v38;
    v41._object = v40;
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42._uint64_t countAndFlagsBits = 0x6F7A20656D697420;
    v42._object = (void *)0xEC000000203A656ELL;
    String.append(_:)(v42);
    uint64_t v43 = (void (*)(long long *__return_ptr, uint64_t, void *))v18[6];
    swift_unknownObjectRetain();
    v43(&v95, ObjectType, v18);
    swift_unknownObjectRelease();
    uint64_t v44 = v95;
    swift_getObjectType();
    *(void *)&uint64_t v92 = v44;
    v45._uint64_t countAndFlagsBits = dispatch thunk of CustomDebugStringConvertible.debugDescription.getter();
    String.append(_:)(v45);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    v46._uint64_t countAndFlagsBits = 0x6557747372696620;
    v46._object = (void *)0xEF203A7961646B65;
    String.append(_:)(v46);
    id v47 = (uint64_t (*)(uint64_t, void *))v18[7];
    swift_unknownObjectRetain();
    id v48 = v47(ObjectType, v18);
    swift_unknownObjectRelease();
    *(void *)&uint64_t v95 = v48;
    v49._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    v50._object = (void *)0x80000001823AD310;
    v50._uint64_t countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v50);
    uint64_t v51 = (uint64_t (*)(uint64_t, void *))v18[9];
    swift_unknownObjectRetain();
    char v52 = v51(ObjectType, v18);
    swift_unknownObjectRelease();
    *(void *)&uint64_t v95 = v52;
    v53._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v53);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&v99[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(uint64_t *)&v99[0], *((unint64_t *)&v99[0] + 1), &v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v36 + 22) = 2082;
    memcpy(v99, v101, 0x11AuLL);
    outlined retain of DateComponents((uint64_t)v101);
    long long v54 = v86;
    DateComponents.customMirror.getter();
    Swift::String v55 = Mirror.children.getter();
    (*(void (**)(char *, uint64_t))(v87 + 8))(v54, v88);
    long long v56 = 0xE000000000000000;
    uint64_t v97 = 0;
    uint64_t v98 = 0xE000000000000000;
    swift_retain();
    dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (*((void *)&v99[2] + 1))
    {
      char v88 = v55;
      do
      {
        uint64_t v95 = v99[0];
        v96[0] = v99[1];
        v96[1] = v99[2];
        v94._uint64_t countAndFlagsBits = 0;
        v94._object = (void *)0xE000000000000000;
        int v57 = (void *)*((void *)&v99[0] + 1);
        unint64_t v58 = *(void *)&v99[0];
        uint64_t v92 = v99[0];
        outlined init with copy of Any((uint64_t)v96, (uint64_t)v93);
        if (v57)
        {
          unint64_t v59 = v57;
        }
        else
        {
          unint64_t v58 = 0;
          unint64_t v59 = (void *)0xE000000000000000;
        }
        swift_bridgeObjectRetain();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
        v60._uint64_t countAndFlagsBits = v58;
        v60._object = v59;
        String.append(_:)(v60);
        swift_bridgeObjectRelease();
        v61._uint64_t countAndFlagsBits = 8250;
        v61._object = (void *)0xE200000000000000;
        String.append(_:)(v61);
        _print_unlocked<A, B>(_:_:)();
        v62._uint64_t countAndFlagsBits = 32;
        v62._object = (void *)0xE100000000000000;
        String.append(_:)(v62);
        String.append(_:)(v94);
        swift_bridgeObjectRelease();
        outlined destroy of (label: String?, value: Any)((uint64_t)&v95);
        dispatch thunk of _AnyIteratorBoxBase.next()();
      }
      while (*((void *)&v99[2] + 1));
      long long v63 = v97;
      long long v56 = v98;
    }
    else
    {
      long long v63 = 0;
    }
    swift_release();
    swift_release();
    long long v64 = v90;
    outlined release of DateComponents((uint64_t)v101);
    *(void *)&v99[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v56, &v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined release of DateComponents((uint64_t)v101);
    outlined release of DateComponents((uint64_t)v101);
    *(_WORD *)(v64 + 32) = 2082;
    if (v89) {
      long long v65 = 0x647261776B636162;
    }
    else {
      long long v65 = 0x64726177726F66;
    }
    long long v66 = 0xE800000000000000;
    if (v89) {
      long long v67 = 0xE800000000000000;
    }
    else {
      long long v67 = 0xE700000000000000;
    }
    *(void *)&v99[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v67, &v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v64 + 42) = 2082;
    long long v68 = 0x656D69547478656ELL;
    long long v70 = v84;
    uint64_t v69 = v85;
    long long v71 = v81;
    switch(v79)
    {
      case 1:
        long long v68 = 0xD000000000000023;
        long long v72 = "nextTimePreservingSmallerComponents";
        goto LABEL_27;
      case 2:
        long long v68 = 0xD000000000000027;
        long long v72 = "previousTimePreservingSmallerComponents";
LABEL_27:
        long long v66 = (unint64_t)(v72 - 32) | 0x8000000000000000;
        break;
      case 3:
        long long v66 = 0xE600000000000000;
        long long v68 = 0x746369727473;
        break;
      default:
        break;
    }
    long long v73 = v90;
    *(void *)&v99[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v66, &v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v73 + 52) = 2080;
    if (v82) {
      long long v74 = 1953718636;
    }
    else {
      long long v74 = 0x7473726966;
    }
    if (v82) {
      long long v75 = 0xE400000000000000;
    }
    else {
      long long v75 = 0xE500000000000000;
    }
    *(void *)&v99[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, &v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    long long v76 = v83;
    _os_log_impl(&dword_181795000, v83, v71, "Unable to find Calendar enumeration result: %{public}f %{public}s %{public}s %{public}s %{public}s %s", (uint8_t *)v73, 0x3Eu);
    long long v77 = v80;
    swift_arrayDestroy();
    MEMORY[0x185309510](v77, -1, -1);
    MEMORY[0x185309510](v73, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v91 + 8))(v70, v69);
  }
  else
  {
    swift_unknownObjectRelease_n();
    outlined release of DateComponents((uint64_t)v101);
    outlined release of DateComponents((uint64_t)v101);

    return (*(uint64_t (**)(char *, uint64_t))(v91 + 8))(v16, v14);
  }
}

Foundation::Date_optional __swiftcall Calendar.DatesByMatching.Iterator.next()()
{
  unint64_t v2 = v1;
  uint64_t v3 = v0;
  if (v2[47])
  {
    *(void *)uint64_t v0 = 0;
    *(unsigned char *)(v0 + 8) = 1;
  }
  else
  {
    uint64_t v4 = *v2;
    uint64_t v5 = v2[8];
    uint64_t v18 = v2[9];
    uint64_t v6 = (void *)v2[7];
    memcpy(__dst, v2 + 10, 0x11AuLL);
    uint64_t v7 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);

      char v14 = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      unsigned __int8 v8 = *((unsigned char *)v2 + 362);
      uint64_t v9 = v2[1];
      char v10 = *((unsigned char *)v2 + 16);
      unsigned __int8 v11 = *((unsigned char *)v2 + 364);
      unsigned __int8 v12 = *((unsigned char *)v2 + 363);
      double v13 = *((double *)v2 + 3);
      while (1)
      {
        v21[0] = v5;
        v21[1] = v18;
        id v27 = v6;
        memcpy(v26, __dst, 0x11AuLL);
        unsigned __int8 v25 = v8;
        unsigned __int8 v24 = v12;
        unsigned __int8 v23 = v11;
        double v22 = v13;
        uint64_t v19 = v9;
        char v20 = v10;
        swift_unknownObjectRetain();
        outlined retain of DateComponents((uint64_t)__dst);
        Calendar._enumerateDatesStep(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:inSearchingDate:previouslyReturnedMatchDate:)((double *)&v27, v26, &v25, &v24, &v23, &v22, (uint64_t)&v19, (uint64_t)&v28);
        outlined release of DateComponents((uint64_t)__dst);
        char v14 = swift_unknownObjectRelease();
        double v16 = v28;
        int v17 = v29;
        double v13 = v30;
        *((double *)v2 + 3) = v30;
        if (v17 != 2) {
          break;
        }
        if (v7 >= v2[46])
        {
          uint64_t *v2 = v7;
          v21[0] = (uint64_t)v6;
          double v28 = *(double *)&v5;
          uint64_t v29 = v18;
          memcpy(v26, __dst, 0x11AuLL);
          LOBYTE(v19) = v11;
          LOBYTE(v27) = v8;
          LOBYTE(v22) = v12;
          char v14 = _handleCalendarResultNotFound(date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)(v21, (uint64_t *)&v28, v26, (unsigned __int8 *)&v19, (unsigned __int8 *)&v27, (unsigned __int8 *)&v22);
          *((unsigned char *)v2 + 376) = 1;
          goto LABEL_14;
        }
        ++v7;
      }
      uint64_t *v2 = v7;
      if ((v2[6] & 1) != 0 || (Swift::Double v15 = v16, *((double *)v2 + 4) <= v16) && *((double *)v2 + 5) > v16)
      {
        *((double *)v2 + 1) = v16;
        *((unsigned char *)v2 + 16) = 0;
        *(double *)uint64_t v3 = v16;
        *(unsigned char *)(v3 + 8) = 0;
        goto LABEL_16;
      }
      *((unsigned char *)v2 + 376) = 1;
LABEL_14:
      *(void *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 8) = 1;
    }
  }
LABEL_16:
  result.Foundation::Morphology::Definiteness value = *(Foundation::Date *)&v15;
  result.is_nil = v14;
  return result;
}

double Calendar.DatesByMatching.makeIterator()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v13 = *(void *)(v1 + 24);
  char v7 = *(unsigned char *)(v1 + 40);
  memcpy(__dst, (const void *)(v1 + 48), 0x11AuLL);
  char v8 = *(unsigned char *)(v1 + 330);
  char v9 = *(unsigned char *)(v1 + 331);
  char v10 = *(unsigned char *)(v1 + 332);
  memcpy(v15, (const void *)(v1 + 48), sizeof(v15));
  v14[0] = v3;
  v14[1] = v4;
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)__dst);
  BOOL v11 = DateComponents._validate(for:)(v14);
  v15[0] = 1;
  LOBYTE(v14[0]) = v7;
  memcpy((void *)(a1 + 80), __dst, 0x11AuLL);
  double result = NAN;
  *(_OWORD *)a1 = xmmword_18218B600;
  *(unsigned char *)(a1 + 16) = v15[0];
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v13;
  *(void *)(a1 + 40) = v6;
  *(unsigned char *)(a1 + 48) = v14[0];
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 64) = v3;
  *(void *)(a1 + 72) = v4;
  *(unsigned char *)(a1 + 362) = v8;
  *(unsigned char *)(a1 + 363) = v9;
  *(unsigned char *)(a1 + 364) = v10;
  *(void *)(a1 + 368) = 100;
  *(unsigned char *)(a1 + 376) = !v11;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance Calendar.DatesByMatching@<X0>(uint64_t a1@<X8>)
{
  Calendar.DatesByMatching.makeIterator()(a1);
  memcpy(v3, v1, 0x14DuLL);
  return outlined release of Calendar.DatesByAdding((uint64_t)v3);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Calendar.DatesByMatching()
{
  memcpy(__dst, v0, 0x14DuLL);
  uint64_t v1 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)__dst);
  outlined release of Calendar.DatesByAdding((uint64_t)__dst);
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Calendar.DatesByMatching(uint64_t a1, void *a2, uint64_t a3)
{
  memcpy(v8, v3, sizeof(v8));
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance Calendar.DatesByMatching@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  memcpy(v6, v2, sizeof(v6));
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5(a1, a2);
}

Foundation::Date_optional __swiftcall Calendar.DatesByAdding.Iterator.next()()
{
  void (*v11)(double *__return_ptr, unsigned char *, double *, uint64_t, uint64_t, uint64_t);
  char v12;
  double v13;
  double v14;
  double v15;
  char v16;
  unsigned char __dst[288];
  unsigned char __src[296];
  Foundation::Date_optional result;

  uint64_t v3 = v0;
  if (*(unsigned char *)(v1 + 331))
  {
    void *v0 = 0;
LABEL_3:
    *((unsigned char *)v3 + 8) = 1;
    goto LABEL_15;
  }
  memcpy(__dst, (const void *)(v1 + 48), 0x11AuLL);
  uint64_t v4 = *(void *)(v1 + 336);
  DateComponents.scaled(by:)(v4, (uint64_t)__src);
  uint64_t v5 = *(void *)(v1 + 8);
  double v6 = *(double *)(v1 + 16);
  uint64_t v7 = *(unsigned __int8 *)(v1 + 330);
  memcpy(__dst, __src, 0x11AuLL);
  double v8 = 1.59271755e13;
  if (v6 <= 1.59271755e13) {
    double v8 = v6;
  }
  double v9 = fmax(v8, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  char v14 = v9;
  BOOL v11 = *(void (**)(double *__return_ptr, unsigned char *, double *, uint64_t, uint64_t, uint64_t))(v5 + 200);
  swift_unknownObjectRetain();
  v11(&v15, __dst, &v14, v7, ObjectType, v5);
  swift_unknownObjectRelease();
  unsigned __int8 v12 = outlined release of DateComponents((uint64_t)__src);
  uint64_t v13 = v15;
  if (v16)
  {
    *(unsigned char *)(v1 + 331) = 1;
    *(double *)uint64_t v3 = v13;
    *((unsigned char *)v3 + 8) = 1;
    goto LABEL_15;
  }
  if ((*(unsigned char *)(v1 + 40) & 1) == 0)
  {
    Swift::Double v2 = v15;
    if (*(double *)(v1 + 24) > v15 || *(double *)(v1 + 32) <= v15)
    {
      *(unsigned char *)(v1 + 331) = 1;
      *uint64_t v3 = 0;
      goto LABEL_3;
    }
  }
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v1 + 336) = v4 + 1;
    *(double *)uint64_t v3 = v13;
    *((unsigned char *)v3 + 8) = 0;
  }
LABEL_15:
  result.Foundation::Morphology::Definiteness value = *(Foundation::Date *)&v2;
  result.is_nil = v12;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance Calendar.DatesByAdding@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  double v8 = v1 + 6;
  char v9 = *((unsigned char *)v1 + 40);
  memcpy(v12, v1 + 6, 0x11AuLL);
  char v10 = *((unsigned char *)v1 + 330);
  char v14 = v9;
  memcpy(&__src[7], v8, 0x11AuLL);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v14;
  memcpy((void *)(a1 + 41), __src, 0x121uLL);
  *(unsigned char *)(a1 + 330) = v10;
  *(unsigned char *)(a1 + 331) = 0;
  *(void *)(a1 + 336) = 1;
  v15[0] = v3;
  v15[1] = v4;
  _OWORD v15[2] = v5;
  long long v15[3] = v6;
  _OWORD v15[4] = v7;
  char v16 = v9;
  memcpy(v17, v8, 0x11AuLL);
  v17[282] = v10;
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)v12);
  return outlined release of Calendar.DatesByAdding((uint64_t)v15);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Calendar.DatesByAdding()
{
  memcpy(__dst, v0, 0x14BuLL);
  uint64_t v1 = specialized _copySequenceToContiguousArray<A>(_:)(__dst);
  outlined release of Calendar.DatesByAdding((uint64_t)__dst);
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Calendar.DatesByAdding(uint64_t a1, uint64_t a2, uint64_t a3)
{
  memcpy(v8, v3, sizeof(v8));
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance Calendar.DatesByAdding@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  memcpy(v6, v2, sizeof(v6));
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5(a1, a2);
}

void *Calendar._adjustedDateForMismatchedHour(matchDate:compsToMatch:matchingPolicy:repeatedTimePolicy:isExactMatch:)@<X0>(double *a1@<X0>, unsigned __int8 *a2@<X2>, unsigned char *a3@<X4>, uint64_t a4@<X8>)
{
  void (*v20)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  uint64_t v21;
  double v22;
  double v23;
  Foundation::Date v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  void v29[15];
  char v30;
  uint64_t v31;
  void v32[15];
  char v33;
  uint64_t v34;
  double v35[2];
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  uint64_t v5 = v4;
  double v8 = *a1;
  int v9 = *a2;
  uint64_t v10 = *v4;
  uint64_t v11 = v5[1];
  LOBYTE(v29[0]) = 4;
  if (v8 <= 1.59271755e13) {
    double v12 = v8;
  }
  else {
    double v12 = 1.59271755e13;
  }
  double v13 = fmax(v12, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  *(double *)uint64_t v32 = v13;
  double result = (*(void *(**)(double *__return_ptr, void *, void *, uint64_t, uint64_t))(v11 + 160))(v35, v29, v32, ObjectType, v11);
  if (v36) {
    goto LABEL_21;
  }
  double v16 = v35[0];
  double v17 = v35[1];
  double v18 = v35[0];
  uint64_t v39 = 16;
  if (v35[0] <= 1.59271755e13) {
    double v19 = v35[0];
  }
  else {
    double v19 = 1.59271755e13;
  }
  v32[0] = fmax(v19, -2.11845067e11);
  char v20 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v11 + 192);
  v20(v35, &v39, (double *)v32, ObjectType, v11);
  outlined release of DateComponents((uint64_t)v35);
  if (v38) {
    int v21 = 0;
  }
  else {
    int v21 = v37;
  }
  double v22 = v17 + v18;
  int v34 = 16;
  if (v22 <= 1.59271755e13) {
    unsigned __int8 v23 = v22;
  }
  else {
    unsigned __int8 v23 = 1.59271755e13;
  }
  v29[0] = fmax(v23, -2.11845067e11);
  v20((double *)v32, &v34, (double *)v29, ObjectType, v11);
  double result = (void *)outlined release of DateComponents((uint64_t)v32);
  unsigned __int8 v25 = v32[14];
  if (v33) {
    unsigned __int8 v25 = 0;
  }
  if (__OFSUB__(v25, v21))
  {
    __break(1u);
LABEL_40:
    __break(1u);
    return result;
  }
  if (v25 - v21 <= 1 && (v21 != 23 || v25 <= 0))
  {
    uint64_t v26 = v18 + -1.0;
    uint64_t v31 = 16;
    if (v18 + -1.0 > 1.59271755e13) {
      uint64_t v26 = 1.59271755e13;
    }
    double v28 = fmax(v26, -2.11845067e11);
    v20((double *)v29, &v31, &v28, ObjectType, v11);
    double result = (void *)outlined release of DateComponents((uint64_t)v29);
    id v27 = v29[14];
    if (v30) {
      id v27 = 0;
    }
    if (!__OFSUB__(v21, v27))
    {
      if (v21 - v27 <= 1 && (v27 != 23 || v21 <= 0)) {
        goto LABEL_21;
      }
      if (v9 == 3) {
        goto LABEL_21;
      }
      *a3 = 0;
      if (v9 == 2) {
        goto LABEL_21;
      }
      if (!v9)
      {
        *(double *)a4 = v16;
        *(unsigned char *)(a4 + 8) = 0;
        return result;
      }
      goto LABEL_37;
    }
    goto LABEL_40;
  }
  if (v9 == 3)
  {
LABEL_21:
    *(void *)a4 = 0;
    *(unsigned char *)(a4 + 8) = 1;
    return result;
  }
  *a3 = 0;
  if (v9)
  {
    if (v9 == 1)
    {
      v29[0] = v10;
      v29[1] = v11;
      LOBYTE(v28) = 4;
      uint64_t v31 = *(void *)&v8;
      *(Foundation::Date_optional *)(&result - 1) = Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)&v28, 1, v24, (Swift::Bool)&v31);
      return result;
    }
LABEL_37:
    *(double *)a4 = v8;
    *(unsigned char *)(a4 + 8) = 0;
    return result;
  }
  *(double *)a4 = v22;
  *(unsigned char *)(a4 + 8) = 0;
  return result;
}

uint64_t Calendar._adjustedDateForMismatchedLeapMonthOrDay(start:searchingDate:matchDate:matchingComponents:compsToMatch:nextHighestUnit:direction:matchingPolicy:repeatedTimePolicy:isExactMatch:isLeapDay:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 *a9, unsigned char *a10, unsigned char *a11)
{
  void (*v51)(long long *__return_ptr, uint64_t, uint64_t);
  Foundation::Date v52;
  char v53;
  uint64_t v54;
  BOOL v55;
  Swift::Int v56;
  double v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  long long v63;
  long long v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  char v71;
  uint64_t v72;
  double v73;
  BOOL v74;
  uint64_t v75;
  void (*v76)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t);
  Foundation::Date v77;
  uint64_t v78;
  BOOL v79;
  BOOL v80;
  char v81;
  void (*v82)(_OWORD *__return_ptr, long long *, uint64_t, uint64_t);
  double v83;
  void (*v84)(_OWORD *__return_ptr, long long *, uint64_t, uint64_t);
  Foundation::Date v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  uint64_t v96;
  unsigned __int8 v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  BOOL v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  double v106;
  uint64_t v107;
  BOOL v108;
  uint64_t v109;
  long long *v110;
  double v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  BOOL v115;
  uint64_t v116;
  BOOL v117;
  double v118;
  uint64_t v119;
  double v120;
  __int16 v121;
  double v122;
  uint64_t v123;
  __int16 v124;
  double v125;
  uint64_t v126;
  double v127;
  __int16 v128;
  double v129;
  double v130;
  uint64_t v131;
  long long v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  unsigned char *v136;
  long long v137;
  uint64_t v138;
  BOOL v139;
  double v140;
  BOOL v141;
  uint64_t v142;
  BOOL v143;
  uint64_t v144;
  BOOL v145;
  uint64_t v146;
  long long v147;
  BOOL v148;
  char v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  char v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  char v195;
  char v196;
  uint64_t v197;
  char v198;
  char v199;
  char v200;
  uint64_t v201;
  char v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  BOOL v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  void (*v212)(long long *__return_ptr, uint64_t, uint64_t);
  int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  double v217;
  char v218;
  uint64_t v219;
  void (*v220)(long long *__return_ptr, uint64_t *, long long *, uint64_t, uint64_t);
  unsigned __int8 v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  BOOL v225;
  uint64_t v226;
  int v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  BOOL v233;
  BOOL v234;
  long long v235[18];
  long long v236[18];
  _OWORD v237[18];
  _OWORD v238[18];
  uint64_t v239;
  unsigned __int8 v240;
  _OWORD v241[18];
  long long v242[18];
  _OWORD v243[18];
  _OWORD v244[18];
  long long v245[18];
  long long v246[18];
  uint64_t __dst[36];
  void __src[36];
  long long v249;
  long long v250;
  long long v251;
  long long v252;
  long long v253;
  long long v254;
  long long v255;
  long long v256;
  long long v257;
  long long v258;
  long long v259;
  long long v260;
  long long v261;
  char v262;
  long long v263;
  long long v264;
  long long v265;
  long long v266;
  _OWORD v267[19];

  MEMORY[0x1F4188790](a1);
  long long v232 = v12;
  char v14 = v13;
  double v16 = v15;
  double v18 = v17;
  long long v231 = v19;
  double v21 = *v20;
  double v23 = *v22;
  uint64_t v217 = *v24;
  long long v26 = *(_OWORD *)(v25 + 16);
  long long v263 = *(_OWORD *)v25;
  long long v264 = v26;
  long long v27 = *(_OWORD *)(v25 + 48);
  long long v265 = *(_OWORD *)(v25 + 32);
  long long v266 = v27;
  long long v226 = *(void *)(v25 + 64);
  char v28 = *(unsigned char *)(v25 + 72);
  long long v29 = *(_OWORD *)(v25 + 73);
  uint64_t v250 = *(_OWORD *)(v25 + 89);
  char v249 = v29;
  long long v30 = *(_OWORD *)(v25 + 105);
  long long v31 = *(_OWORD *)(v25 + 121);
  long long v32 = *(_OWORD *)(v25 + 137);
  long long v254 = *(_OWORD *)(v25 + 153);
  long long v253 = v32;
  uint64_t v252 = v31;
  long long v251 = v30;
  long long v33 = *(_OWORD *)(v25 + 169);
  long long v34 = *(_OWORD *)(v25 + 185);
  long long v35 = *(_OWORD *)(v25 + 201);
  uint64_t v258 = *(_OWORD *)(v25 + 217);
  long long v257 = v35;
  long long v256 = v34;
  long long v255 = v33;
  long long v36 = *(_OWORD *)(v25 + 233);
  long long v37 = *(_OWORD *)(v25 + 249);
  long long v38 = *(_OWORD *)(v25 + 265);
  unint64_t v262 = *(unsigned char *)(v25 + 281);
  long long v261 = v38;
  uint64_t v260 = v37;
  long long v259 = v36;
  memcpy(v267, v39, 0x11AuLL);
  uint64_t v218 = *v18;
  uint64_t v224 = *v16;
  long long v228 = *v14;
  uint64_t v221 = *a9;
  uint64_t v41 = *v11;
  uint64_t v40 = v11[1];
  uint64_t v42 = qword_18218B7E8[byte_1ECA4BB61] | qword_18218B7E8[byte_1ECA4BB60] | qword_18218B7E8[byte_1ECA4BB62];
  __dst[0] = v42;
  if (v23 <= 1.59271755e13) {
    double v43 = v23;
  }
  else {
    double v43 = 1.59271755e13;
  }
  double v44 = fmax(v43, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  *(double *)char v246 = v44;
  uint64_t v220 = *(void (**)(void *__return_ptr, uint64_t *, long long *, uint64_t, uint64_t))(v40 + 192);
  v220(__src, __dst, v246, ObjectType, v40);
  if ((v42 & 0x4000) != 0)
  {
    __src[0] = v41;
    __src[1] = v40;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if (__src[2])
    {
      __dst[0] = __src[2];
      __dst[1] = __src[3];
      swift_unknownObjectRetain();
      Calendar.timeZone.setter(__dst);
    }
  }
  memcpy(__dst, __src, 0x11AuLL);
  uint64_t v46 = __dst[8];
  uint64_t v47 = __dst[6];
  if (((BYTE8(v267[5]) & 1) != 0 || (__dst[11] & 1) == 0 && __dst[10] == *(void *)&v267[5])
    && (__dst[8] != *(void *)&v267[4] ? (char v48 = 1) : (char v48 = __dst[9]), (BYTE8(v267[4]) & 1) != 0 || (v48 & 1) == 0)
    || (((LOBYTE(__dst[7]) | LOBYTE(__dst[9])) | (BYTE8(v267[5]) | BYTE8(v267[4]))) & 1) != 0)
  {
    uint64_t result = outlined release of DateComponents((uint64_t)__dst);
    *(void *)long long v231 = 0;
    *(unsigned char *)(v231 + 8) = 1;
    return result;
  }
  char v50 = v28;
  long long v209 = *(void *)&v267[5];
  uint64_t v216 = *(void *)&v267[4];
  uint64_t v51 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v40 + 24);
  swift_unknownObjectRetain();
  long long v214 = ObjectType;
  long long v212 = v51;
  v51(v246, ObjectType, v40);
  long long v215 = v41;
  swift_unknownObjectRelease();
  uint64_t v223 = v40;
  if (LOBYTE(v246[0]))
  {
    long long v53 = v50;
  }
  else
  {
    long long v53 = v50;
    if (v216 == 2 && (v50 & 1) == 0 && v226 == 2)
    {
      long long v54 = v47 <= 0 ? -(-v47 & 3) : v47 & 3;
      if (v224)
      {
        Swift::String v55 = v46 >= 2 && v54 == 0;
        long long v56 = v55 ? -4 : -v54;
      }
      else
      {
        long long v56 = 4 - v54;
      }
      *(void *)&v246[0] = v41;
      *((void *)&v246[0] + 1) = v40;
      LOBYTE(v243[0]) = 1;
      *(double *)uint64_t v244 = v23;
      Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)v243, v56, v52, (Swift::Bool)v244);
      if ((BYTE8(v245[0]) & 1) == 0)
      {
        int v57 = *(double *)v245;
        LOBYTE(v244[0]) = 1;
        if (*(double *)v245 > 1.59271755e13) {
          int v57 = 1.59271755e13;
        }
        *(void *)&v245[0] = fmax(v57, -2.11845067e11);
        (*(void (**)(long long *__return_ptr, _OWORD *, long long *, uint64_t))(v40 + 160))(v246, v244, v245, ObjectType);
        if ((v246[1] & 1) == 0)
        {
          *(void *)&v245[0] = v41;
          *((void *)&v245[0] + 1) = v40;
          *(void *)&v243[0] = *(void *)&v246[0];
          memcpy(v246, v267, 0x11AuLL);
          LOBYTE(v242[0]) = 0;
          LOBYTE(v241[0]) = v228;
          LOBYTE(v238[0]) = v221;
          Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)((double *)v243, v246, (unsigned __int8 *)v242, (unsigned __int8 *)v241, (unsigned __int8 *)v238, (double *)v244);
          if (v12) {
            return outlined release of DateComponents((uint64_t)__dst);
          }
          unint64_t v58 = *(void *)&v244[0];
          if (BYTE8(v244[0]))
          {
            unint64_t v59 = __dst;
LABEL_148:
            uint64_t result = outlined release of DateComponents((uint64_t)v59);
            char v119 = v231;
            *(void *)long long v231 = v58;
            goto LABEL_149;
          }
          long long v232 = 0;
          uint64_t v217 = *(double *)v244;
          unint64_t v120 = *(double *)v244;
          DateComponents.setUnits.getter((uint64_t *)v241);
          uint64_t v121 = v241[0];
          *(void *)&v244[0] = *(void *)&v241[0];
          if (v120 <= 1.59271755e13) {
            uint64_t v122 = v120;
          }
          else {
            uint64_t v122 = 1.59271755e13;
          }
          *(void *)&v243[0] = fmax(v122, -2.11845067e11);
          v220(v245, (uint64_t *)v244, v243, ObjectType, v40);
          char v123 = *(void *)&v245[0];
          if ((v121 & 0x4000) != 0)
          {
            *(void *)&v245[0] = v41;
            *((void *)&v245[0] + 1) = v40;
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (*(void *)&v245[1])
            {
              v244[0] = v245[1];
              swift_unknownObjectRetain();
              Calendar.timeZone.setter((uint64_t *)v244);
              char v123 = *(void *)&v245[0];
            }
            else
            {
              char v123 = v41;
            }
          }
          long long v132 = v245[1];
          *(long long *)((char *)&v246[16] + 10) = *(long long *)((char *)&v245[16] + 10);
          v246[14] = v245[14];
          v246[15] = v245[15];
          v246[16] = v245[16];
          v246[10] = v245[10];
          v246[11] = v245[11];
          v246[12] = v245[12];
          v246[13] = v245[13];
          v246[6] = v245[6];
          v246[7] = v245[7];
          v246[8] = v245[8];
          v246[9] = v245[9];
          v246[2] = v245[2];
          v246[3] = v245[3];
          v246[4] = v245[4];
          v246[5] = v245[5];
          *(void *)&v246[0] = v123;
          *((void *)&v246[0] + 1) = *((void *)&v245[0] + 1);
          v246[1] = v245[1];
          if (*(void *)&v267[0])
          {
            v246[0] = v267[0];
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if ((void)v132)
            {
              v244[0] = v132;
              swift_unknownObjectRetain();
              Calendar.timeZone.setter((uint64_t *)v244);
            }
          }
          uint64_t v133 = *(void *)&v267[1];
          if (*(void *)&v267[1])
          {
            uint64_t v134 = *((void *)&v267[1] + 1);
            v246[1] = v267[1];
            swift_unknownObjectRetain_n();
            swift_unknownObjectRelease();
            if (*(void *)&v246[0])
            {
              *(void *)&v244[0] = v133;
              *((void *)&v244[0] + 1) = v134;
              Calendar.timeZone.setter((uint64_t *)v244);
            }
            else
            {
              swift_unknownObjectRelease();
            }
          }
          memcpy(v244, v246, 0x11AuLL);
          memcpy(v243, v246, 0x11AuLL);
          memcpy(v242, v267, 0x11AuLL);
          uint64_t v135 = specialized static DateComponents.== infix(_:_:)((uint64_t)v243, v242);
          outlined release of DateComponents((uint64_t)v244);
          if (v135)
          {
            uint64_t result = outlined release of DateComponents((uint64_t)__dst);
            long long v71 = 0;
            goto LABEL_62;
          }
        }
      }
    }
  }
  if (v228 == 3)
  {
    swift_unknownObjectRetain();
    v212(v246, ObjectType, v40);
    swift_unknownObjectRelease();
    if (!LOBYTE(v246[0]))
    {
      uint64_t result = outlined release of DateComponents((uint64_t)__dst);
      long long v71 = 0;
      *a10 = 0;
LABEL_62:
      long long v72 = v231;
LABEL_63:
      long long v73 = v217;
LABEL_76:
      *(double *)long long v72 = v73;
      *(unsigned char *)(v72 + 8) = v71 & 1;
      return result;
    }
    *(double *)uint64_t v243 = v23;
    v246[0] = v263;
    v246[1] = v264;
    v246[2] = v265;
    v246[3] = v266;
    *(long long *)((char *)&v246[16] + 9) = v261;
    *(long long *)((char *)&v246[14] + 9) = v259;
    *(long long *)((char *)&v246[15] + 9) = v260;
    *(long long *)((char *)&v246[10] + 9) = v255;
    *(long long *)((char *)&v246[11] + 9) = v256;
    *(long long *)((char *)&v246[12] + 9) = v257;
    *(long long *)((char *)&v246[13] + 9) = v258;
    *(long long *)((char *)&v246[6] + 9) = v251;
    *(long long *)((char *)&v246[7] + 9) = v252;
    *(long long *)((char *)&v246[8] + 9) = v253;
    *(long long *)((char *)&v246[9] + 9) = v254;
    *(long long *)((char *)&v246[4] + 9) = v249;
    *(void *)&v245[0] = v41;
    *((void *)&v245[0] + 1) = v40;
    *(void *)&v246[4] = v226;
    BYTE8(v246[4]) = v53;
    BYTE9(v246[17]) = v262;
    *(long long *)((char *)&v246[5] + 9) = v250;
    LOBYTE(v242[0]) = v218;
    LOBYTE(v241[0]) = v224;
    LOBYTE(v238[0]) = 3;
    LOBYTE(v237[0]) = v221;
    Calendar._matchingDate(after:matching:inNextHighestUnit:direction:matchingPolicy:repeatedTimePolicy:)((double *)v243, v246, v242, (unsigned __int8 *)v241, (unsigned __int8 *)v238, (unsigned __int8 *)v237, (double *)v244);
    if (!v232)
    {
      uint64_t result = outlined release of DateComponents((uint64_t)__dst);
      long long v73 = *(double *)v244;
      long long v71 = BYTE8(v244[0]);
      long long v72 = v231;
      goto LABEL_76;
    }
    return outlined release of DateComponents((uint64_t)__dst);
  }
  v245[0] = 0uLL;
  v244[0] = 0uLL;
  outlined retain of DateComponents((uint64_t)v267);
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v245, (uint64_t *)v244, 0, 1, 0, 1, 0, 1, (uint64_t)v246, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  if (v47 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v60 = 0;
  }
  else {
    uint64_t v60 = v47;
  }
  *(void *)&v246[3] = v60;
  BYTE8(v246[3]) = v47 == 0x7FFFFFFFFFFFFFFFLL;
  long long v199 = BYTE9(v267[17]);
  if (v216 == 0x7FFFFFFFFFFFFFFFLL) {
    long long v61 = 0;
  }
  else {
    long long v61 = v216;
  }
  long long v182 = *(void *)&v267[17];
  long long v198 = BYTE8(v267[17]);
  long long v196 = BYTE8(v267[16]);
  long long v197 = *(void *)&v267[16];
  long long v194 = *(void *)&v267[15];
  long long v195 = BYTE8(v267[15]);
  long long v193 = BYTE8(v267[14]);
  long long v192 = *(void *)&v267[14];
  uint64_t v190 = *(void *)&v267[13];
  long long v191 = BYTE8(v267[13]);
  long long v188 = *(void *)&v267[12];
  long long v189 = BYTE8(v267[12]);
  long long v202 = BYTE8(v267[11]);
  long long v186 = *(void *)&v267[10];
  long long v187 = BYTE8(v267[10]);
  long long v184 = *(void *)&v267[6];
  long long v185 = BYTE8(v267[6]);
  long long v62 = *(void *)&v267[3];
  long long v183 = *(void *)&v267[2];
  long long v200 = BYTE8(v267[2]);
  long long v63 = v267[1];
  BYTE8(v246[4]) = v216 == 0x7FFFFFFFFFFFFFFFLL;
  *(void *)&v246[5] = 1;
  long long v64 = v267[0];
  *(void *)&v246[4] = v61;
  BYTE8(v246[5]) = 0;
  long long v65 = *(void *)&v267[9];
  long long v227 = BYTE8(v267[9]);
  unint64_t v219 = *(void *)&v267[8];
  long long v213 = BYTE8(v267[8]);
  long long v211 = *(void *)&v267[7];
  long long v210 = BYTE8(v267[7]);
  long long v206 = *(void *)&v267[11];
  if (!v228)
  {
    long long v201 = *(void *)&v267[9];
    *(void *)&v245[2] = *(void *)&v246[2];
    if (v47 > *(uint64_t *)&v267[3]) {
      long long v62 = v47;
    }
    BYTE8(v245[2]) = BYTE8(v246[2]);
    long long v74 = v62 == 0x7FFFFFFFFFFFFFFFLL;
    if (v62 == 0x7FFFFFFFFFFFFFFFLL) {
      long long v62 = 0;
    }
    *(void *)&v245[3] = v60;
    if (BYTE8(v267[3])) {
      long long v75 = v60;
    }
    else {
      long long v75 = v62;
    }
    BYTE8(v245[3]) = v47 == 0x7FFFFFFFFFFFFFFFLL;
    if (BYTE8(v267[3])) {
      long long v74 = v47 == 0x7FFFFFFFFFFFFFFFLL;
    }
    long long v208 = v74;
    *(void *)&v245[4] = v61;
    BYTE8(v245[4]) = v216 == 0x7FFFFFFFFFFFFFFFLL;
    *(void *)&v245[6] = *(void *)&v246[6];
    BYTE8(v245[6]) = BYTE8(v246[6]);
    *(void *)&v245[7] = *(void *)&v246[7];
    BYTE8(v245[7]) = BYTE8(v246[7]);
    *(void *)&v245[8] = *(void *)&v246[8];
    BYTE8(v245[8]) = BYTE8(v246[8]);
    *(void *)&v245[9] = *(void *)&v246[9];
    BYTE8(v245[9]) = BYTE8(v246[9]);
    *(void *)&v245[10] = *(void *)&v246[10];
    BYTE8(v245[10]) = BYTE8(v246[10]);
    *(void *)&v245[11] = *(void *)&v246[11];
    BYTE8(v245[11]) = BYTE8(v246[11]);
    *(void *)&v245[12] = *(void *)&v246[12];
    BYTE8(v245[12]) = BYTE8(v246[12]);
    *(void *)&v245[13] = *(void *)&v246[13];
    BYTE8(v245[13]) = BYTE8(v246[13]);
    *(void *)&v245[14] = *(void *)&v246[14];
    BYTE8(v245[14]) = BYTE8(v246[14]);
    *(void *)&v245[15] = *(void *)&v246[15];
    BYTE8(v245[15]) = BYTE8(v246[15]);
    BYTE8(v245[16]) = BYTE8(v246[16]);
    *(void *)&v245[16] = *(void *)&v246[16];
    *(void *)&v245[17] = *(void *)&v246[17];
    WORD4(v245[17]) = WORD4(v246[17]);
    v245[0] = v246[0];
    v245[1] = v246[1];
    *(void *)&v245[5] = 1;
    BYTE8(v245[5]) = 0;
    memcpy(v244, v245, 0x11AuLL);
    long long v76 = *(void (**)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t))(v223 + 176);
    outlined retain of DateComponents((uint64_t)v245);
    v76(v243, v244, ObjectType, v223);
    outlined release of DateComponents((uint64_t)v245);
    long long v78 = *(void *)&v243[0];
    if ((BYTE8(v243[0]) & 1) != 0
      || (long long v204 = v75,
          *(void *)&v244[0] = v41,
          *((void *)&v244[0] + 1) = v223,
          LOBYTE(v241[0]) = 2,
          *(void *)&v242[0] = *(void *)&v243[0],
          Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)v241, 1, v77, (Swift::Bool)v242), long long v78 = *(void *)&v243[0], (BYTE8(v243[0]) & 1) != 0))
    {
      outlined release of DateComponents((uint64_t)v245);
      outlined release of DateComponents((uint64_t)__dst);
      *(void *)long long v231 = v78;
      *(unsigned char *)(v231 + 8) = 1;
      v244[0] = v64;
      v244[1] = v63;
      *(void *)&v244[2] = v183;
      BYTE8(v244[2]) = v200;
      *(void *)&v244[3] = v75;
      BYTE8(v244[3]) = v208;
      *(void *)&v244[4] = v216;
      BYTE8(v244[4]) = 0;
      *(void *)&v244[5] = v209;
      BYTE8(v244[5]) = 0;
      *(void *)&v244[6] = v184;
      BYTE8(v244[6]) = v185;
      *(void *)&v244[7] = v211;
      BYTE8(v244[7]) = v210;
      *(void *)&v244[8] = v219;
      BYTE8(v244[8]) = v213;
      *(void *)&v244[9] = v201;
      BYTE8(v244[9]) = v227;
      *(void *)&v244[10] = v186;
      BYTE8(v244[10]) = v187;
      *(void *)&v244[11] = v206;
      BYTE8(v244[11]) = v202;
      *(void *)&v244[12] = v188;
      BYTE8(v244[12]) = v189;
      *(void *)&v244[13] = v190;
      BYTE8(v244[13]) = v191;
      *(void *)&v244[14] = v192;
      BYTE8(v244[14]) = v193;
      *(void *)&v244[15] = v194;
      BYTE8(v244[15]) = v195;
      BYTE8(v244[16]) = v196;
      *(void *)&v244[16] = v197;
      *(void *)&v244[17] = v182;
      BYTE8(v244[17]) = v198;
      BYTE9(v244[17]) = v199;
      return outlined release of DateComponents((uint64_t)v244);
    }
    uint64_t v106 = *(double *)v243;
    *(void *)&v235[0] = 4;
    if (*(double *)v243 > 1.59271755e13) {
      uint64_t v106 = 1.59271755e13;
    }
    *(void *)&v243[0] = fmax(v106, -2.11845067e11);
    v220(v244, (uint64_t *)v235, v243, ObjectType, v223);
    outlined release of DateComponents((uint64_t)v244);
    uint64_t v107 = *(void *)&v244[4];
    if (BYTE8(v244[4])) {
      uint64_t v107 = 0;
    }
    *(void *)&v243[5] = 1;
    BYTE8(v243[16]) = v196;
    BYTE8(v243[17]) = v198;
    char v108 = v107 == 0x7FFFFFFFFFFFFFFFLL;
    if (v107 == 0x7FFFFFFFFFFFFFFFLL) {
      char v109 = 0;
    }
    else {
      char v109 = v107;
    }
    *(void *)&v241[0] = v41;
    *((void *)&v241[0] + 1) = v223;
    *(double *)uint64_t v237 = v21;
    v243[0] = v64;
    v243[1] = v63;
    *(void *)&v243[2] = v183;
    BYTE8(v243[2]) = v200;
    *(void *)&v243[3] = v75;
    BYTE8(v243[3]) = v208;
    *(void *)&v243[4] = v109;
    BYTE8(v243[4]) = v107 == 0x7FFFFFFFFFFFFFFFLL;
    BYTE8(v243[5]) = 0;
    *(void *)&v243[6] = v184;
    BYTE8(v243[6]) = v185;
    *(void *)&v243[7] = v211;
    BYTE8(v243[7]) = v210;
    *(void *)&v243[8] = v219;
    BYTE8(v243[8]) = v213;
    *(void *)&v243[9] = v201;
    BYTE8(v243[9]) = v227;
    *(void *)&v243[10] = v186;
    BYTE8(v243[10]) = v187;
    *(void *)&v243[11] = v206;
    BYTE8(v243[11]) = v202;
    *(void *)&v243[12] = v188;
    BYTE8(v243[12]) = v189;
    *(void *)&v243[13] = v190;
    BYTE8(v243[13]) = v191;
    *(void *)&v243[14] = v192;
    BYTE8(v243[14]) = v193;
    *(void *)&v243[15] = v194;
    BYTE8(v243[15]) = v195;
    *(void *)&v243[16] = v197;
    *(void *)&v243[17] = v182;
    BYTE9(v243[17]) = v199;
    memcpy(v242, v243, 0x11AuLL);
    LOBYTE(v236[0]) = v224;
    LOBYTE(v239) = 0;
    unint64_t v240 = v221;
    outlined retain of DateComponents((uint64_t)v243);
    Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)((double *)v237, v242, (unsigned __int8 *)v236, (unsigned __int8 *)&v239, &v240, (double *)v238);
    if (v232)
    {
      outlined release of DateComponents((uint64_t)__dst);
      outlined release of DateComponents((uint64_t)v243);
      uint64_t v110 = v245;
LABEL_137:
      outlined release of DateComponents((uint64_t)v110);
      return outlined release of DateComponents((uint64_t)v243);
    }
    long long v230 = v109;
    long long v234 = v108;
    outlined release of DateComponents((uint64_t)v243);
    unint64_t v58 = *(void *)&v238[0];
    if (BYTE8(v238[0]))
    {
      outlined release of DateComponents((uint64_t)v245);
      outlined release of DateComponents((uint64_t)__dst);
      unint64_t v59 = (uint64_t *)v243;
      goto LABEL_148;
    }
    uint64_t v217 = *(double *)v238;
    long long v127 = *(double *)v238;
    DateComponents.setUnits.getter(&v239);
    long long v128 = v239;
    *(void *)&v238[0] = v239;
    if (v127 <= 1.59271755e13) {
      long long v129 = v127;
    }
    else {
      long long v129 = 1.59271755e13;
    }
    long long v130 = fmax(v129, -2.11845067e11);
    *(double *)uint64_t v237 = v130;
    outlined retain of DateComponents((uint64_t)v243);
    v220(v241, (uint64_t *)v238, v237, ObjectType, v223);
    long long v131 = *(void *)&v241[0];
    if ((v128 & 0x4000) != 0)
    {
      *(void *)&v241[0] = v41;
      *((void *)&v241[0] + 1) = v223;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if (*(void *)&v241[1])
      {
        v238[0] = v241[1];
        swift_unknownObjectRetain();
        Calendar.timeZone.setter((uint64_t *)v238);
        long long v131 = *(void *)&v241[0];
      }
      else
      {
        long long v131 = v41;
      }
    }
    uint64_t v138 = v182;
    uint64_t v147 = v241[1];
    *(long long *)((char *)&v242[16] + 10) = *(_OWORD *)((char *)&v241[16] + 10);
    v242[14] = v241[14];
    v242[15] = v241[15];
    v242[16] = v241[16];
    v242[10] = v241[10];
    v242[11] = v241[11];
    v242[12] = v241[12];
    v242[13] = v241[13];
    v242[6] = v241[6];
    v242[7] = v241[7];
    v242[8] = v241[8];
    v242[9] = v241[9];
    v242[2] = v241[2];
    v242[3] = v241[3];
    v242[4] = v241[4];
    v242[5] = v241[5];
    *(void *)&v242[0] = v131;
    *((void *)&v242[0] + 1) = *((void *)&v241[0] + 1);
    v242[1] = v241[1];
    if ((void)v64)
    {
      v242[0] = v64;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if ((void)v147)
      {
        v238[0] = v147;
        swift_unknownObjectRetain();
        Calendar.timeZone.setter((uint64_t *)v238);
      }
    }
    if ((void)v63)
    {
      v242[1] = v63;
      swift_unknownObjectRetain_n();
      swift_unknownObjectRelease();
      if (*(void *)&v242[0])
      {
        v238[0] = v63;
        Calendar.timeZone.setter((uint64_t *)v238);
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    memcpy(v238, v242, 0x11AuLL);
    memcpy(v237, v242, 0x11AuLL);
    memcpy(v236, v243, 0x11AuLL);
    uint64_t v148 = specialized static DateComponents.== infix(_:_:)((uint64_t)v237, v236);
    outlined release of DateComponents((uint64_t)v238);
    outlined release of DateComponents((uint64_t)v243);
    if (v148)
    {
      unint64_t v240 = 3;
      *(double *)long long v236 = v130;
      (*(void (**)(_OWORD *__return_ptr, unsigned __int8 *, long long *, uint64_t))(v223 + 160))(v237, &v240, v236, ObjectType);
      outlined release of DateComponents((uint64_t)__dst);
      outlined release of DateComponents((uint64_t)v245);
      long long v71 = 0;
      uint64_t v145 = 0;
      if ((v237[1] & 1) == 0) {
        uint64_t v217 = *(double *)v237;
      }
    }
    else
    {
      outlined release of DateComponents((uint64_t)v245);
      outlined release of DateComponents((uint64_t)__dst);
      uint64_t v217 = 0.0;
      uint64_t v145 = 0;
      long long v71 = 1;
    }
    uint64_t v146 = 1;
    long long v72 = v231;
    uint64_t v136 = a10;
    uint64_t v141 = v208;
    uint64_t v142 = v204;
    uint64_t v143 = v234;
    char v144 = v230;
LABEL_198:
    v245[0] = v64;
    v245[1] = v63;
    *(void *)&v245[2] = v183;
    BYTE8(v245[2]) = v200;
    *(void *)&v245[3] = v142;
    BYTE8(v245[3]) = v141;
    *(void *)&v245[4] = v144;
    BYTE8(v245[4]) = v143;
    *(void *)&v245[5] = v146;
    BYTE8(v245[5]) = v145;
    *(void *)&v245[6] = v184;
    BYTE8(v245[6]) = v185;
    *(void *)&v245[7] = v211;
    BYTE8(v245[7]) = v210;
    *(void *)&v245[8] = v219;
    BYTE8(v245[8]) = v213;
    *(void *)&v245[9] = v201;
    BYTE8(v245[9]) = v227;
    *(void *)&v245[10] = v186;
    BYTE8(v245[10]) = v187;
    *(void *)&v245[11] = v206;
    BYTE8(v245[11]) = v202;
    *(void *)&v245[12] = v188;
    BYTE8(v245[12]) = v189;
    *(void *)&v245[13] = v190;
    BYTE8(v245[13]) = v191;
    *(void *)&v245[14] = v192;
    BYTE8(v245[14]) = v193;
    *(void *)&v245[15] = v194;
    BYTE8(v245[15]) = v195;
    BYTE8(v245[16]) = v196;
    *(void *)&v245[16] = v197;
    *(void *)&v245[17] = v138;
    BYTE8(v245[17]) = v198;
    BYTE9(v245[17]) = v199;
    uint64_t result = outlined release of DateComponents((uint64_t)v245);
    *uint64_t v136 = 0;
    *a11 = 1;
    goto LABEL_63;
  }
  long long v180 = v60;
  long long v181 = v61;
  uint64_t v203 = *(void *)&v267[3];
  long long v207 = BYTE8(v267[3]);
  long long v66 = qword_18218B7E8[byte_1ECA4BB39] | qword_18218B7E8[byte_1ECA4BB38] | qword_18218B7E8[byte_1ECA4BB3A];
  *(void *)&v244[0] = v66;
  if (v21 <= 1.59271755e13) {
    long long v67 = v21;
  }
  else {
    long long v67 = 1.59271755e13;
  }
  *(void *)&v243[0] = fmax(v67, -2.11845067e11);
  v220(v245, (uint64_t *)v244, v243, ObjectType, v223);
  if ((v66 & 0x4000) != 0)
  {
    *(void *)&v245[0] = v41;
    *((void *)&v245[0] + 1) = v223;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if (*(void *)&v245[1])
    {
      v244[0] = v245[1];
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)v244);
    }
  }
  memcpy(v244, v245, 0x11AuLL);
  outlined release of DateComponents((uint64_t)v244);
  long long v68 = v219;
  if (!v210)
  {
LABEL_80:
    uint64_t v69 = v211;
    long long v70 = v211 == 0x7FFFFFFFFFFFFFFFLL;
    if (v211 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v69 = 0;
    }
    if (!v213) {
      goto LABEL_86;
    }
    goto LABEL_83;
  }
  uint64_t v69 = *(void *)&v244[7];
  if ((BYTE8(v244[7]) & 1) == 0)
  {
    long long v211 = *(void *)&v244[7];
    goto LABEL_80;
  }
  long long v70 = 1;
  if (!v213) {
    goto LABEL_86;
  }
LABEL_83:
  long long v68 = *(void *)&v244[8];
  if (BYTE8(v244[8]))
  {
    long long v79 = 1;
    if (!v227) {
      goto LABEL_91;
    }
    goto LABEL_89;
  }
LABEL_86:
  long long v79 = v68 == 0x7FFFFFFFFFFFFFFFLL;
  if (v68 == 0x7FFFFFFFFFFFFFFFLL) {
    long long v68 = 0;
  }
  if (!v227) {
    goto LABEL_91;
  }
LABEL_89:
  long long v65 = *(void *)&v244[9];
  if (BYTE8(v244[9]))
  {
    long long v80 = 1;
    goto LABEL_93;
  }
LABEL_91:
  long long v80 = v65 == 0x7FFFFFFFFFFFFFFFLL;
  if (v65 == 0x7FFFFFFFFFFFFFFFLL) {
    long long v65 = 0;
  }
LABEL_93:
  long long v201 = v65;
  LOBYTE(v227) = v80;
  unint64_t v219 = v68;
  LOBYTE(v213) = v79;
  long long v211 = v69;
  LOBYTE(v210) = v70;
  if (v228 == 1)
  {
    if ((v207 & 1) == 0 && v47 <= v203) {
      uint64_t v47 = v203;
    }
    if (v47 == 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v203 = 0;
      long long v207 = 1;
    }
    else
    {
      long long v207 = 0;
      uint64_t v203 = v47;
    }
    long long v179 = *(void *)&v246[16];
    uint64_t v175 = *(void *)&v246[17];
    uint64_t v154 = *((void *)&v246[0] + 1);
    uint64_t v155 = *(void *)&v246[0];
    v243[0] = v246[0];
    uint64_t v152 = *((void *)&v246[1] + 1);
    uint64_t v153 = *(void *)&v246[1];
    v243[1] = v246[1];
    uint64_t v151 = *(void *)&v246[2];
    *(void *)&v243[2] = *(void *)&v246[2];
    uint64_t v150 = BYTE8(v246[2]);
    BYTE8(v243[2]) = BYTE8(v246[2]);
    *(void *)&v243[3] = v203;
    BYTE8(v243[3]) = v207;
    *(void *)&v243[4] = v181;
    BYTE8(v243[4]) = v216 == 0x7FFFFFFFFFFFFFFFLL;
    *(void *)&v243[5] = 1;
    BYTE8(v243[5]) = 0;
    uint64_t v172 = *(void *)&v246[8];
    uint64_t v173 = *(void *)&v246[6];
    *(void *)&v243[6] = *(void *)&v246[6];
    long long v178 = BYTE8(v246[6]);
    BYTE8(v243[6]) = BYTE8(v246[6]);
    uint64_t v177 = *(void *)&v246[7];
    *(void *)&v243[7] = *(void *)&v246[7];
    unint64_t v176 = BYTE8(v246[7]);
    BYTE8(v243[7]) = BYTE8(v246[7]);
    *(void *)&v243[8] = *(void *)&v246[8];
    uint64_t v171 = BYTE8(v246[8]);
    BYTE8(v243[8]) = BYTE8(v246[8]);
    unint64_t v170 = *(void *)&v246[9];
    *(void *)&v243[9] = *(void *)&v246[9];
    unint64_t v169 = BYTE8(v246[9]);
    BYTE8(v243[9]) = BYTE8(v246[9]);
    uint64_t v168 = *(void *)&v246[10];
    *(void *)&v243[10] = *(void *)&v246[10];
    uint64_t v167 = BYTE8(v246[10]);
    BYTE8(v243[10]) = BYTE8(v246[10]);
    uint64_t v166 = *(void *)&v246[11];
    *(void *)&v243[11] = *(void *)&v246[11];
    uint64_t v165 = BYTE8(v246[11]);
    BYTE8(v243[11]) = BYTE8(v246[11]);
    uint64_t v164 = *(void *)&v246[12];
    *(void *)&v243[12] = *(void *)&v246[12];
    uint64_t v163 = BYTE8(v246[12]);
    BYTE8(v243[12]) = BYTE8(v246[12]);
    uint64_t v162 = *(void *)&v246[13];
    *(void *)&v243[13] = *(void *)&v246[13];
    uint64_t v161 = BYTE8(v246[13]);
    BYTE8(v243[13]) = BYTE8(v246[13]);
    unint64_t v160 = *(void *)&v246[14];
    *(void *)&v243[14] = *(void *)&v246[14];
    uint64_t v159 = BYTE8(v246[14]);
    BYTE8(v243[14]) = BYTE8(v246[14]);
    uint64_t v158 = *(void *)&v246[15];
    *(void *)&v243[15] = *(void *)&v246[15];
    uint64_t v156 = BYTE8(v246[16]);
    uint64_t v157 = BYTE8(v246[15]);
    BYTE8(v243[15]) = BYTE8(v246[15]);
    BYTE8(v243[16]) = BYTE8(v246[16]);
    *(void *)&v243[16] = *(void *)&v246[16];
    *(void *)&v243[17] = *(void *)&v246[17];
    uint64_t v174 = BYTE8(v246[17]);
    WORD4(v243[17]) = WORD4(v246[17]);
    uint64_t v149 = BYTE9(v246[17]);
    memcpy(v242, v243, 0x11AuLL);
    char v84 = *(void (**)(_OWORD *__return_ptr, long long *, uint64_t, uint64_t))(v223 + 176);
    outlined retain of DateComponents((uint64_t)v243);
    v84(v241, v242, ObjectType, v223);
    outlined release of DateComponents((uint64_t)v243);
    char v83 = *(double *)v241;
    if (BYTE8(v241[0])) {
      goto LABEL_103;
    }
    uint64_t v96 = v203;
    *(void *)&v242[0] = v41;
    *((void *)&v242[0] + 1) = v223;
    LOBYTE(v237[0]) = 2;
    *(void *)&v238[0] = *(void *)&v241[0];
    Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)v237, 1, v85, (Swift::Bool)v238);
    unint64_t v105 = *(double *)v241;
    if (BYTE8(v241[0]))
    {
      outlined release of DateComponents((uint64_t)v243);
      outlined release of DateComponents((uint64_t)__dst);
      *(double *)long long v231 = v105;
      *(unsigned char *)(v231 + 8) = 1;
      v242[0] = v64;
      v242[1] = v63;
      *(void *)&v242[2] = v183;
      BYTE8(v242[2]) = v200;
      *(void *)&v242[3] = v203;
      BYTE8(v242[3]) = v207;
      *(void *)&v242[4] = v216;
      BYTE8(v242[4]) = 0;
      *(void *)&v242[5] = v209;
      BYTE8(v242[5]) = 0;
      *(void *)&v242[6] = v184;
      BYTE8(v242[6]) = v185;
      *(void *)&v242[7] = v211;
      BYTE8(v242[7]) = v210;
      *(void *)&v242[8] = v219;
      BYTE8(v242[8]) = v213;
      *(void *)&v242[9] = v65;
      BYTE8(v242[9]) = v227;
      *(void *)&v242[10] = v186;
      BYTE8(v242[10]) = v187;
      *(void *)&v242[11] = v206;
      BYTE8(v242[11]) = v202;
      *(void *)&v242[12] = v188;
      BYTE8(v242[12]) = v189;
      *(void *)&v242[13] = v190;
      BYTE8(v242[13]) = v191;
      *(void *)&v242[14] = v192;
      BYTE8(v242[14]) = v193;
      *(void *)&v242[15] = v194;
      BYTE8(v242[15]) = v195;
      BYTE8(v242[16]) = v196;
      *(void *)&v242[16] = v197;
      *(void *)&v242[17] = v182;
      BYTE8(v242[17]) = v198;
      BYTE9(v242[17]) = v199;
      return outlined release of DateComponents((uint64_t)v242);
    }
    uint64_t v94 = v199;
    uint64_t v111 = *(double *)v241;
    *(void *)&v241[0] = 4;
    if (v105 > 1.59271755e13) {
      uint64_t v111 = 1.59271755e13;
    }
    *(void *)&v238[0] = fmax(v111, -2.11845067e11);
    v220(v242, (uint64_t *)v241, v238, v214, v223);
    outlined release of DateComponents((uint64_t)v242);
    uint64_t v102 = 0;
    char v112 = *(void *)&v242[4];
    if (BYTE8(v242[4])) {
      char v112 = 0;
    }
    char v101 = v112 == 0x7FFFFFFFFFFFFFFFLL;
    if (v112 == 0x7FFFFFFFFFFFFFFFLL) {
      unint64_t v104 = 0;
    }
    else {
      unint64_t v104 = v112;
    }
    unint64_t v103 = 1;
    uint64_t v99 = v203;
    uint64_t v95 = v207;
    uint64_t v100 = v207;
    char v91 = v198;
    uint64_t v93 = v200;
    char v88 = *((void *)&v63 + 1);
    uint64_t v97 = v221;
    uint64_t v98 = v216;
    uint64_t v92 = v202;
    long long v81 = v174;
    goto LABEL_135;
  }
  long long v178 = BYTE8(v246[6]);
  uint64_t v177 = *(void *)&v246[7];
  unint64_t v176 = BYTE8(v246[7]);
  BYTE8(v243[3]) = v47 == 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v154 = *((void *)&v246[0] + 1);
  uint64_t v155 = *(void *)&v246[0];
  v243[0] = v246[0];
  uint64_t v152 = *((void *)&v246[1] + 1);
  uint64_t v153 = *(void *)&v246[1];
  v243[1] = v246[1];
  uint64_t v151 = *(void *)&v246[2];
  *(void *)&v243[2] = *(void *)&v246[2];
  uint64_t v150 = BYTE8(v246[2]);
  BYTE8(v243[2]) = BYTE8(v246[2]);
  *(void *)&v243[3] = v180;
  *(void *)&v243[4] = v181;
  BYTE8(v243[4]) = v216 == 0x7FFFFFFFFFFFFFFFLL;
  *(void *)&v243[5] = 1;
  BYTE8(v243[5]) = 0;
  uint64_t v172 = *(void *)&v246[8];
  uint64_t v173 = *(void *)&v246[6];
  *(void *)&v243[6] = *(void *)&v246[6];
  BYTE8(v243[6]) = BYTE8(v246[6]);
  *(void *)&v243[7] = *(void *)&v246[7];
  BYTE8(v243[7]) = BYTE8(v246[7]);
  *(void *)&v243[8] = *(void *)&v246[8];
  uint64_t v171 = BYTE8(v246[8]);
  BYTE8(v243[8]) = BYTE8(v246[8]);
  unint64_t v170 = *(void *)&v246[9];
  *(void *)&v243[9] = *(void *)&v246[9];
  unint64_t v169 = BYTE8(v246[9]);
  BYTE8(v243[9]) = BYTE8(v246[9]);
  uint64_t v168 = *(void *)&v246[10];
  *(void *)&v243[10] = *(void *)&v246[10];
  uint64_t v167 = BYTE8(v246[10]);
  BYTE8(v243[10]) = BYTE8(v246[10]);
  uint64_t v166 = *(void *)&v246[11];
  *(void *)&v243[11] = *(void *)&v246[11];
  uint64_t v165 = BYTE8(v246[11]);
  BYTE8(v243[11]) = BYTE8(v246[11]);
  uint64_t v164 = *(void *)&v246[12];
  *(void *)&v243[12] = *(void *)&v246[12];
  uint64_t v163 = BYTE8(v246[12]);
  BYTE8(v243[12]) = BYTE8(v246[12]);
  uint64_t v162 = *(void *)&v246[13];
  *(void *)&v243[13] = *(void *)&v246[13];
  uint64_t v161 = BYTE8(v246[13]);
  BYTE8(v243[13]) = BYTE8(v246[13]);
  unint64_t v160 = *(void *)&v246[14];
  *(void *)&v243[14] = *(void *)&v246[14];
  uint64_t v159 = BYTE8(v246[14]);
  BYTE8(v243[14]) = BYTE8(v246[14]);
  uint64_t v158 = *(void *)&v246[15];
  *(void *)&v243[15] = *(void *)&v246[15];
  uint64_t v156 = BYTE8(v246[16]);
  uint64_t v157 = BYTE8(v246[15]);
  BYTE8(v243[15]) = BYTE8(v246[15]);
  BYTE8(v243[16]) = BYTE8(v246[16]);
  long long v179 = *(void *)&v246[16];
  *(void *)&v243[16] = *(void *)&v246[16];
  uint64_t v175 = *(void *)&v246[17];
  *(void *)&v243[17] = *(void *)&v246[17];
  long long v81 = BYTE8(v246[17]);
  WORD4(v243[17]) = WORD4(v246[17]);
  uint64_t v149 = BYTE9(v246[17]);
  memcpy(v242, v243, 0x11AuLL);
  uint64_t v82 = *(void (**)(_OWORD *__return_ptr, long long *, uint64_t, uint64_t))(v223 + 176);
  outlined retain of DateComponents((uint64_t)v243);
  v82(v241, v242, ObjectType, v223);
  outlined release of DateComponents((uint64_t)v243);
  char v83 = *(double *)v241;
  if (BYTE8(v241[0]))
  {
LABEL_103:
    outlined release of DateComponents((uint64_t)v243);
    outlined release of DateComponents((uint64_t)__dst);
    *(double *)long long v231 = v83;
    *(unsigned char *)(v231 + 8) = 1;
    v242[0] = v64;
    v242[1] = v63;
    *(void *)&v242[2] = v183;
    BYTE8(v242[2]) = v200;
    *(void *)&v242[3] = v203;
    BYTE8(v242[3]) = v207;
    *(void *)&v242[4] = v216;
    BYTE8(v242[4]) = 0;
    *(void *)&v242[5] = v209;
    BYTE8(v242[5]) = 0;
    *(void *)&v242[6] = v184;
    BYTE8(v242[6]) = v185;
    *(void *)&v242[7] = v211;
    BYTE8(v242[7]) = v210;
    *(void *)&v242[8] = v219;
    BYTE8(v242[8]) = v213;
    *(void *)&v242[9] = v65;
    BYTE8(v242[9]) = v227;
    *(void *)&v242[10] = v186;
    BYTE8(v242[10]) = v187;
    *(void *)&v242[11] = v206;
    BYTE8(v242[11]) = v202;
    *(void *)&v242[12] = v188;
    BYTE8(v242[12]) = v189;
    *(void *)&v242[13] = v190;
    BYTE8(v242[13]) = v191;
    *(void *)&v242[14] = v192;
    BYTE8(v242[14]) = v193;
    *(void *)&v242[15] = v194;
    BYTE8(v242[15]) = v195;
    BYTE8(v242[16]) = v196;
    *(void *)&v242[16] = v197;
    *(void *)&v242[17] = v182;
    BYTE8(v242[17]) = v198;
    BYTE9(v242[17]) = v199;
    return outlined release of DateComponents((uint64_t)v242);
  }
  char v86 = *(double *)v241;
  LOBYTE(v241[0]) = 3;
  LOBYTE(v238[0]) = 2;
  if (v83 > 1.59271755e13) {
    char v86 = 1.59271755e13;
  }
  *(void *)&v242[0] = fmax(v86, -2.11845067e11);
  uint64_t result = (*(uint64_t (**)(_OWORD *, _OWORD *, long long *, uint64_t))(v223 + 144))(v241, v238, v242, ObjectType);
  char v88 = *((void *)&v63 + 1);
  if (v89)
  {
    outlined release of DateComponents((uint64_t)v243);
    outlined release of DateComponents((uint64_t)__dst);
    v242[0] = v64;
    v242[1] = v63;
    *(void *)&v242[2] = v183;
    BYTE8(v242[2]) = v200;
    *(unsigned char *)(v231 + 8) = 1;
    *(void *)long long v231 = 0;
    *(void *)&v242[3] = v203;
    BYTE8(v242[3]) = v207;
    *(void *)&v242[4] = v216;
    BYTE8(v242[4]) = 0;
    *(void *)&v242[5] = v209;
    BYTE8(v242[5]) = 0;
    *(void *)&v242[6] = v184;
    BYTE8(v242[6]) = v185;
    *(void *)&v242[7] = v211;
    BYTE8(v242[7]) = v210;
    *(void *)&v242[8] = v219;
    BYTE8(v242[8]) = v213;
    *(void *)&v242[9] = v65;
    BYTE8(v242[9]) = v227;
    *(void *)&v242[10] = v186;
    BYTE8(v242[10]) = v187;
    *(void *)&v242[11] = v206;
    BYTE8(v242[11]) = v202;
    *(void *)&v242[12] = v188;
    BYTE8(v242[12]) = v189;
    *(void *)&v242[13] = v190;
    BYTE8(v242[13]) = v191;
    *(void *)&v242[14] = v192;
    BYTE8(v242[14]) = v193;
    *(void *)&v242[15] = v194;
    BYTE8(v242[15]) = v195;
    BYTE8(v242[16]) = v196;
    *(void *)&v242[16] = v197;
    *(void *)&v242[17] = v182;
    BYTE8(v242[17]) = v198;
    BYTE9(v242[17]) = v199;
    return outlined release of DateComponents((uint64_t)v242);
  }
  char v90 = v87 - result;
  char v91 = v198;
  uint64_t v92 = v202;
  uint64_t v93 = v200;
  if (__OFSUB__(v87, result))
  {
    __break(1u);
  }
  else
  {
    uint64_t v94 = v199;
    uint64_t v95 = v207;
    uint64_t v96 = v203;
    uint64_t v97 = v221;
    uint64_t v98 = v216;
    uint64_t v99 = v180;
    uint64_t v100 = v47 == 0x7FFFFFFFFFFFFFFFLL;
    if (v209 >= v90 || (char v90 = v209 - 1, !__OFSUB__(v209, 1)))
    {
      char v101 = 0;
      uint64_t v102 = v90 == 0x7FFFFFFFFFFFFFFFLL;
      if (v90 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v103 = 0;
      }
      else {
        unint64_t v103 = v90;
      }
      unint64_t v104 = v216;
LABEL_135:
      *(void *)&v242[0] = v155;
      *((void *)&v242[0] + 1) = v154;
      *(void *)&v242[1] = v153;
      *((void *)&v242[1] + 1) = v152;
      *(void *)&v242[2] = v151;
      BYTE8(v242[2]) = v150;
      *(void *)&v242[3] = v99;
      BYTE8(v242[3]) = v100;
      *(void *)&v242[4] = v181;
      BYTE8(v242[4]) = v98 == 0x7FFFFFFFFFFFFFFFLL;
      *(void *)&v242[5] = 1;
      BYTE8(v242[5]) = 0;
      *(void *)&v242[6] = v173;
      BYTE8(v242[6]) = v178;
      *(void *)&v242[7] = v177;
      BYTE8(v242[7]) = v176;
      *(void *)&v242[8] = v172;
      BYTE8(v242[8]) = v171;
      *(void *)&v242[9] = v170;
      BYTE8(v242[9]) = v169;
      *(void *)&v242[10] = v168;
      BYTE8(v242[10]) = v167;
      *(void *)&v242[11] = v166;
      BYTE8(v242[11]) = v165;
      *(void *)&v242[12] = v164;
      BYTE8(v242[12]) = v163;
      *(void *)&v242[13] = v162;
      BYTE8(v242[13]) = v161;
      *(void *)&v242[14] = v160;
      BYTE8(v242[14]) = v159;
      *(void *)&v242[15] = v158;
      BYTE8(v242[15]) = v157;
      BYTE8(v242[16]) = v156;
      *(void *)&v242[16] = v179;
      *(void *)&v242[17] = v175;
      BYTE8(v242[17]) = v81;
      BYTE9(v242[17]) = v149;
      *(void *)&v238[0] = v41;
      *((void *)&v238[0] + 1) = v223;
      *(double *)long long v236 = v23;
      v243[0] = v64;
      *(void *)&v243[1] = v63;
      *((void *)&v243[1] + 1) = v88;
      *(void *)&v243[2] = v183;
      BYTE8(v243[2]) = v93;
      *(void *)&v243[3] = v96;
      BYTE8(v243[3]) = v95;
      *(void *)&v243[4] = v104;
      BYTE8(v243[4]) = v101;
      *(void *)&v243[5] = v103;
      BYTE8(v243[5]) = v102;
      *(void *)&v243[6] = v184;
      BYTE8(v243[6]) = v185;
      *(void *)&v243[7] = v211;
      BYTE8(v243[7]) = v210;
      *(void *)&v243[8] = v219;
      BYTE8(v243[8]) = v213;
      *(void *)&v243[9] = v65;
      BYTE8(v243[9]) = v227;
      *(void *)&v243[10] = v186;
      BYTE8(v243[10]) = v187;
      *(void *)&v243[11] = v206;
      BYTE8(v243[11]) = v92;
      *(void *)&v243[12] = v188;
      BYTE8(v243[12]) = v189;
      *(void *)&v243[13] = v190;
      BYTE8(v243[13]) = v191;
      *(void *)&v243[14] = v192;
      BYTE8(v243[14]) = v193;
      *(void *)&v243[15] = v194;
      BYTE8(v243[15]) = v195;
      BYTE8(v243[16]) = v196;
      *(void *)&v243[16] = v197;
      *(void *)&v243[17] = v182;
      BYTE8(v243[17]) = v91;
      BYTE9(v243[17]) = v94;
      char v113 = v103;
      uint64_t v114 = v95;
      uint64_t v115 = v101;
      char v116 = v104;
      uint64_t v117 = v102;
      memcpy(v241, v243, 0x11AuLL);
      LOBYTE(v235[0]) = v224;
      LOBYTE(v239) = v228;
      unint64_t v240 = v97;
      outlined retain of DateComponents((uint64_t)v243);
      Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)((double *)v236, v241, (unsigned __int8 *)v235, (unsigned __int8 *)&v239, &v240, (double *)v237);
      if (v232)
      {
        outlined release of DateComponents((uint64_t)__dst);
        outlined release of DateComponents((uint64_t)v243);
        uint64_t v110 = v242;
        goto LABEL_137;
      }
      uint64_t v222 = v113;
      long long v225 = v117;
      long long v229 = v116;
      long long v233 = v115;
      long long v205 = v96;
      outlined release of DateComponents((uint64_t)v243);
      unint64_t v118 = *(double *)v237;
      if (BYTE8(v237[0]))
      {
        outlined release of DateComponents((uint64_t)v242);
        outlined release of DateComponents((uint64_t)__dst);
        uint64_t result = outlined release of DateComponents((uint64_t)v243);
        char v119 = v231;
        *(double *)long long v231 = v118;
LABEL_149:
        *(unsigned char *)(v119 + 8) = 1;
        return result;
      }
      DateComponents.setUnits.getter(&v239);
      char v124 = v239;
      *(void *)&v241[0] = v239;
      if (v118 <= 1.59271755e13) {
        long long v125 = v118;
      }
      else {
        long long v125 = 1.59271755e13;
      }
      *(void *)&v237[0] = fmax(v125, -2.11845067e11);
      outlined retain of DateComponents((uint64_t)v243);
      v220(v238, (uint64_t *)v241, v237, v214, v223);
      long long v126 = *(void *)&v238[0];
      if ((v124 & 0x4000) != 0)
      {
        *(void *)&v238[0] = v215;
        *((void *)&v238[0] + 1) = v223;
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        if (*(void *)&v238[1])
        {
          v241[0] = v238[1];
          swift_unknownObjectRetain();
          Calendar.timeZone.setter((uint64_t *)v241);
          long long v126 = *(void *)&v238[0];
        }
        else
        {
          long long v126 = v215;
        }
      }
      long long v72 = v231;
      uint64_t v136 = a10;
      uint64_t v137 = v238[1];
      *(_OWORD *)((char *)&v241[16] + 10) = *(_OWORD *)((char *)&v238[16] + 10);
      v241[14] = v238[14];
      v241[15] = v238[15];
      v241[16] = v238[16];
      v241[10] = v238[10];
      v241[11] = v238[11];
      v241[12] = v238[12];
      v241[13] = v238[13];
      v241[6] = v238[6];
      v241[7] = v238[7];
      v241[8] = v238[8];
      v241[9] = v238[9];
      v241[2] = v238[2];
      v241[3] = v238[3];
      v241[4] = v238[4];
      v241[5] = v238[5];
      *(void *)&v241[0] = v126;
      *((void *)&v241[0] + 1) = *((void *)&v238[0] + 1);
      v241[1] = v238[1];
      if ((void)v64)
      {
        v241[0] = v64;
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        if ((void)v137)
        {
          v237[0] = v137;
          swift_unknownObjectRetain();
          Calendar.timeZone.setter((uint64_t *)v237);
        }
      }
      uint64_t v138 = v182;
      if ((void)v63)
      {
        v241[1] = v63;
        swift_unknownObjectRetain_n();
        swift_unknownObjectRelease();
        if (*(void *)&v241[0])
        {
          v237[0] = v63;
          Calendar.timeZone.setter((uint64_t *)v237);
        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
      memcpy(v237, v241, 0x11AuLL);
      memcpy(v236, v241, 0x11AuLL);
      memcpy(v235, v243, 0x11AuLL);
      uint64_t v139 = specialized static DateComponents.== infix(_:_:)((uint64_t)v236, v235);
      outlined release of DateComponents((uint64_t)v237);
      outlined release of DateComponents((uint64_t)__dst);
      outlined release of DateComponents((uint64_t)v243);
      outlined release of DateComponents((uint64_t)v242);
      if (v139) {
        uint64_t v140 = v118;
      }
      else {
        uint64_t v140 = 0.0;
      }
      uint64_t v217 = v140;
      long long v71 = !v139;
      uint64_t v141 = v114;
      uint64_t v142 = v205;
      uint64_t v143 = v233;
      char v144 = v229;
      uint64_t v145 = v225;
      uint64_t v146 = v222;
      goto LABEL_198;
    }
  }
  __break(1u);
  return result;
}

uint64_t Calendar.preserveSmallerUnits(_:compsToMatch:compsToModify:)(double *a1, uint64_t a2, uint64_t a3)
{
  double v5 = *a1;
  uint64_t v6 = *(void *)(a2 + 112);
  int v7 = *(unsigned __int8 *)(a2 + 120);
  uint64_t v8 = *(void *)(a2 + 128);
  int v9 = *(unsigned __int8 *)(a2 + 136);
  uint64_t v10 = *(void *)(a2 + 144);
  int v20 = *(unsigned __int8 *)(a2 + 152);
  uint64_t v12 = *v3;
  uint64_t v11 = v3[1];
  uint64_t v13 = qword_18218B7E8[byte_1ECA4BA49] | qword_18218B7E8[byte_1ECA4BA48] | qword_18218B7E8[byte_1ECA4BA4A];
  __dst[0] = v13;
  if (v5 > 1.59271755e13) {
    double v5 = 1.59271755e13;
  }
  double v14 = fmax(v5, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v22 = v14;
  (*(void (**)(void *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v11 + 192))(__src, __dst, &v22, ObjectType, v11);
  if ((v13 & 0x4000) != 0)
  {
    __src[0] = v12;
    __src[1] = v11;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if (__src[2])
    {
      __dst[0] = __src[2];
      __dst[1] = __src[3];
      swift_unknownObjectRetain();
      Calendar.timeZone.setter(__dst);
    }
  }
  memcpy(__dst, __src, 0x11AuLL);
  uint64_t result = outlined release of DateComponents((uint64_t)__dst);
  if (v7 && (uint64_t v6 = __dst[14], (__dst[15] & 1) != 0))
  {
    BOOL v17 = 1;
  }
  else
  {
    BOOL v17 = v6 == 0x7FFFFFFFFFFFFFFFLL;
    if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v6 = 0;
    }
  }
  *(void *)(a3 + 112) = v6;
  *(unsigned char *)(a3 + 120) = v17;
  if (v9 && (uint64_t v8 = __dst[16], (__dst[17] & 1) != 0))
  {
    BOOL v18 = 1;
  }
  else
  {
    BOOL v18 = v8 == 0x7FFFFFFFFFFFFFFFLL;
    if (v8 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v8 = 0;
    }
  }
  *(void *)(a3 + 128) = v8;
  *(unsigned char *)(a3 + 136) = v18;
  if (v20 && (uint64_t v10 = __dst[18], (__dst[19] & 1) != 0))
  {
    BOOL v19 = 1;
  }
  else
  {
    BOOL v19 = v10 == 0x7FFFFFFFFFFFFFFFLL;
    if (v10 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v10 = 0;
    }
  }
  *(void *)(a3 + 144) = v10;
  *(unsigned char *)(a3 + 152) = v19;
  return result;
}

uint64_t Calendar._adjustedDateForMismatchedChineseLeapMonth(start:searchingDate:matchDate:matchingComponents:compsToMatch:direction:matchingPolicy:repeatedTimePolicy:isExactMatch:isLeapDay:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned char *a9, unsigned char *a10)
{
  void (*v35)(void *__return_ptr, void, void);
  uint64_t v36;
  uint64_t v37;
  double v38;
  __int16 v39;
  double v40;
  uint64_t result;
  long long v42;
  unsigned __int8 v43;
  BOOL v44;
  double v45;
  void (*v46)(void *__return_ptr, void, void, void, void);
  double v47;
  double v48;
  uint64_t v49;
  double v50;
  double v51;
  __int16 v52;
  double v53;
  double v54;
  double v55;
  __int16 v56;
  double v57;
  double v58;
  long long v59;
  BOOL v60;
  long long v61;
  BOOL v62;
  double v63;
  double v64;
  uint64_t v65;
  BOOL v66;
  char v67;
  double v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  double v80;
  int v81;
  BOOL v82;
  int v83;
  void (*v84)(void *__return_ptr, void, void, void, void);
  uint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  double v89;
  uint64_t v90;
  double v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  int v124;
  unsigned __int8 v125;
  void (*v126)(void *__return_ptr, void, void, void, void);
  double v127[36];
  double v128;
  double v129;
  double v130;
  unsigned __int8 v131;
  unsigned __int8 v132;
  unsigned __int8 v133;
  long long v134[18];
  double v135;
  unsigned __int8 v136;
  uint64_t v137;
  double v138;
  double v139;
  char v140;
  long long v141[18];
  _OWORD v142[18];
  _OWORD v143[18];
  long long v144[18];
  _OWORD v145[18];
  _OWORD v146[18];
  double v147;
  double v148;
  long long v149;
  long long v150;
  long long v151;
  long long v152;
  long long v153;
  long long v154;
  long long v155;
  long long v156;
  long long v157;
  long long v158;
  long long v159;
  long long v160;
  long long v161;
  long long v162;
  long long v163;
  _OWORD v164[2];
  uint64_t v165;
  _OWORD __src[18];
  _OWORD v167[18];
  void v168[36];
  uint64_t __dst[36];
  void v170[36];
  void v171[38];
  uint64_t v172;

  MEMORY[0x1F4188790](a1);
  uint64_t v13 = v12;
  Swift::Double v15 = v14;
  BOOL v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = *v20;
  uint64_t v23 = *v22;
  double v25 = *v24;
  int v27 = *(unsigned __int8 *)(v26 + 281);
  memcpy(v171, v28, 0x11AuLL);
  uint64_t v122 = *v17;
  char v124 = *v15;
  long long v125 = *v13;
  double v30 = *v10;
  double v29 = v10[1];
  uint64_t v31 = qword_18218B7E8[byte_1ECA4BBB1] | qword_18218B7E8[byte_1ECA4BBB0] | qword_18218B7E8[byte_1ECA4BBB2] | qword_18218B7E8[byte_1ECA4BBB3];
  __dst[0] = v31;
  if (v25 <= 1.59271755e13) {
    double v32 = v25;
  }
  else {
    double v32 = 1.59271755e13;
  }
  double v33 = fmax(v32, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  *(double *)uint64_t v168 = v33;
  long long v35 = *(void (**)(void *__return_ptr, void, void))(*(void *)&v29 + 192);
  uint64_t v172 = ObjectType;
  long long v126 = (void (*)(void *__return_ptr, void, void, void, void))v35;
  v35(v170, __dst, v168);
  if ((v31 & 0x4000) != 0)
  {
    *(double *)unint64_t v170 = v30;
    *(double *)&v170[1] = v29;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if (v170[2])
    {
      __dst[0] = v170[2];
      __dst[1] = v170[3];
      swift_unknownObjectRetain();
      Calendar.timeZone.setter(__dst);
    }
  }
  memcpy(__dst, v170, 0x11AuLL);
  if (v27 == 2 || BYTE1(__dst[35]) == 2 || (__dst[35] & 0x100) != 0 || (v27 & 1) == 0)
  {
    uint64_t result = outlined release of DateComponents((uint64_t)__dst);
    *(double *)uint64_t v19 = v25;
    *(unsigned char *)(v19 + 8) = 0;
    return result;
  }
  uint64_t v121 = v11;
  *a9 = 0;
  unint64_t v120 = v171[35];
  unint64_t v118 = v171[32];
  char v119 = v171[34];
  char v116 = v171[31];
  uint64_t v117 = v171[33];
  uint64_t v114 = v171[28];
  uint64_t v115 = v171[30];
  char v112 = v171[27];
  char v113 = v171[29];
  uint64_t v110 = v171[24];
  uint64_t v111 = v171[26];
  char v108 = v171[23];
  char v109 = v171[25];
  uint64_t v106 = v171[20];
  uint64_t v107 = v171[22];
  unint64_t v104 = v171[19];
  unint64_t v105 = v171[21];
  uint64_t v102 = v171[16];
  unint64_t v103 = v171[18];
  uint64_t v100 = v171[15];
  char v101 = v171[17];
  uint64_t v98 = v171[12];
  uint64_t v99 = v171[14];
  uint64_t v96 = v171[11];
  uint64_t v97 = v171[13];
  uint64_t v94 = v171[8];
  uint64_t v95 = v171[10];
  uint64_t v93 = v171[9];
  char v91 = v30;
  long long v36 = v171[2];
  long long v37 = v171[0];
  memcpy(v167, v171, 0x11AuLL);
  LOBYTE(v168[33]) = v171[33];
  LOWORD(v168[35]) = LOBYTE(v171[35]);
  BYTE9(v167[17]) = 0;
  v168[0] = v171[0];
  uint64_t v92 = v171[1];
  v168[1] = v171[1];
  v168[2] = v171[2];
  char v90 = v171[3];
  v168[3] = v171[3];
  char v85 = v171[4];
  v168[4] = v171[4];
  char v86 = v171[5];
  LOBYTE(v168[5]) = v171[5];
  char v87 = v171[6];
  v168[6] = v171[6];
  char v88 = v171[7];
  LOBYTE(v168[7]) = v171[7];
  v168[8] = v171[8];
  LOBYTE(v168[9]) = v171[9];
  v168[10] = v171[10];
  LOBYTE(v168[11]) = v171[11];
  v168[12] = v171[12];
  LOBYTE(v168[13]) = v171[13];
  v168[14] = v171[14];
  LOBYTE(v168[15]) = v171[15];
  v168[16] = v171[16];
  LOBYTE(v168[17]) = v171[17];
  v168[18] = v171[18];
  LOBYTE(v168[19]) = v171[19];
  v168[20] = v171[20];
  LOBYTE(v168[21]) = v171[21];
  v168[22] = v171[22];
  LOBYTE(v168[23]) = v171[23];
  long long v38 = v29;
  v168[24] = v171[24];
  LOBYTE(v168[25]) = v171[25];
  v168[26] = v171[26];
  LOBYTE(v168[27]) = v171[27];
  v168[28] = v171[28];
  LOBYTE(v168[29]) = v171[29];
  v168[30] = v171[30];
  LOBYTE(v168[31]) = v171[31];
  v168[32] = v171[32];
  v168[34] = v171[34];
  DateComponents.setUnits.getter(&v165);
  uint64_t v39 = v165;
  *(void *)&v146[0] = v165;
  *(double *)uint64_t v145 = v33;
  outlined retain of DateComponents((uint64_t)v171);
  outlined retain of DateComponents((uint64_t)v168);
  v126(&v147, v146, v145, v172, *(void *)&v29);
  uint64_t v40 = v147;
  if ((v39 & 0x4000) != 0)
  {
    uint64_t v147 = v91;
    uint64_t v148 = v29;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if ((void)v149)
    {
      v146[0] = v149;
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)v146);
      uint64_t v40 = v147;
    }
    else
    {
      uint64_t v40 = v91;
    }
  }
  uint64_t v42 = v149;
  *(_OWORD *)((char *)&__src[16] + 10) = *(_OWORD *)((char *)v164 + 10);
  __src[14] = v162;
  __src[15] = v163;
  __src[16] = v164[0];
  __src[10] = v158;
  __src[11] = v159;
  __src[12] = v160;
  __src[13] = v161;
  __src[6] = v154;
  __src[7] = v155;
  __src[8] = v156;
  __src[9] = v157;
  __src[2] = v150;
  __src[3] = v151;
  __src[4] = v152;
  __src[5] = v153;
  *(double *)uint64_t __src = v40;
  *((double *)__src + 1) = v148;
  __src[1] = v149;
  if (v37)
  {
    *(void *)&__src[0] = v37;
    *((void *)&__src[0] + 1) = v92;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if ((void)v42)
    {
      v146[0] = v42;
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)v146);
    }
  }
  char v89 = v25;
  double v43 = v125;
  if (v36)
  {
    *(void *)&__src[1] = v36;
    *((void *)&__src[1] + 1) = v90;
    swift_unknownObjectRetain_n();
    swift_unknownObjectRelease();
    if (*(void *)&__src[0])
    {
      *(void *)&v146[0] = v36;
      *((void *)&v146[0] + 1) = v90;
      Calendar.timeZone.setter((uint64_t *)v146);
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  memcpy(v146, __src, 0x11AuLL);
  memcpy(v145, __src, 0x11AuLL);
  memcpy(v144, v168, 0x11AuLL);
  double v44 = specialized static DateComponents.== infix(_:_:)((uint64_t)v145, v144);
  outlined release of DateComponents((uint64_t)v146);
  outlined release of DateComponents((uint64_t)v168);
  if (!v44)
  {
    *(double *)char v144 = v91;
    *((double *)v144 + 1) = v29;
    *(void *)&v142[0] = v23;
    memcpy(v145, v168, 0x11AuLL);
    LOBYTE(v141[0]) = v122;
    LOBYTE(v134[0]) = v124;
    LOBYTE(v127[0]) = v125;
    outlined retain of DateComponents((uint64_t)v168);
    Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)((double *)v142, v145, (unsigned __int8 *)v141, (unsigned __int8 *)v134, (unsigned __int8 *)v127, (double *)v143);
    if (v121)
    {
      outlined release of DateComponents((uint64_t)__dst);
      outlined release of DateComponents((uint64_t)v168);
      return outlined release of DateComponents((uint64_t)v168);
    }
    outlined release of DateComponents((uint64_t)v168);
    uint64_t v49 = *(void *)&v143[0];
    if (BYTE8(v143[0]))
    {
      outlined release of DateComponents((uint64_t)v168);
      uint64_t result = outlined release of DateComponents((uint64_t)__dst);
      *(void *)uint64_t v19 = v49;
      *(unsigned char *)(v19 + 8) = 1;
      return result;
    }
    char v89 = *(double *)v143;
    double v25 = *(double *)v143;
    DateComponents.setUnits.getter((uint64_t *)v134);
    char v52 = v134[0];
    *(void *)&v143[0] = *(void *)&v134[0];
    if (v25 <= 1.59271755e13) {
      long long v53 = v25;
    }
    else {
      long long v53 = 1.59271755e13;
    }
    *(void *)&v142[0] = fmax(v53, -2.11845067e11);
    outlined retain of DateComponents((uint64_t)v168);
    v126(v144, v143, v142, v172, *(void *)&v29);
    long long v54 = *(double *)v144;
    uint64_t v121 = 0;
    if ((v52 & 0x4000) != 0)
    {
      *(double *)char v144 = v91;
      *((double *)v144 + 1) = v29;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if (*(void *)&v144[1])
      {
        v143[0] = v144[1];
        swift_unknownObjectRetain();
        Calendar.timeZone.setter((uint64_t *)v143);
        long long v54 = *(double *)v144;
      }
      else
      {
        long long v54 = v91;
      }
    }
    double v43 = v125;
    unint64_t v59 = v144[1];
    *(_OWORD *)((char *)&v145[16] + 10) = *(long long *)((char *)&v144[16] + 10);
    v145[14] = v144[14];
    v145[15] = v144[15];
    v145[16] = v144[16];
    v145[10] = v144[10];
    v145[11] = v144[11];
    v145[12] = v144[12];
    v145[13] = v144[13];
    v145[6] = v144[6];
    v145[7] = v144[7];
    v145[8] = v144[8];
    v145[9] = v144[9];
    v145[2] = v144[2];
    v145[3] = v144[3];
    v145[4] = v144[4];
    v145[5] = v144[5];
    *(double *)uint64_t v145 = v54;
    *((void *)&v145[0] + 1) = *((void *)&v144[0] + 1);
    v145[1] = v144[1];
    if (v37)
    {
      *(void *)&v145[0] = v37;
      *((void *)&v145[0] + 1) = v92;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if ((void)v59)
      {
        v143[0] = v59;
        swift_unknownObjectRetain();
        Calendar.timeZone.setter((uint64_t *)v143);
      }
    }
    if (v36)
    {
      *(void *)&v145[1] = v36;
      *((void *)&v145[1] + 1) = v90;
      swift_unknownObjectRetain_n();
      swift_unknownObjectRelease();
      if (*(void *)&v145[0])
      {
        *(void *)&v143[0] = v36;
        *((void *)&v143[0] + 1) = v90;
        Calendar.timeZone.setter((uint64_t *)v143);
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    memcpy(v143, v145, 0x11AuLL);
    memcpy(v142, v145, 0x11AuLL);
    memcpy(v141, v168, 0x11AuLL);
    uint64_t v60 = specialized static DateComponents.== infix(_:_:)((uint64_t)v142, v141);
    outlined release of DateComponents((uint64_t)v143);
    outlined release of DateComponents((uint64_t)v168);
    if (!v60)
    {
      outlined release of DateComponents((uint64_t)v168);
      uint64_t result = outlined release of DateComponents((uint64_t)__dst);
      *(void *)uint64_t v19 = 0;
      *(unsigned char *)(v19 + 8) = 1;
      return result;
    }
  }
  LOBYTE(v144[0]) = 2;
  if (v25 <= 1.59271755e13) {
    id v45 = v25;
  }
  else {
    id v45 = 1.59271755e13;
  }
  *(void *)&v145[0] = fmax(v45, -2.11845067e11);
  uint64_t v46 = *(void (**)(void *__return_ptr, void, void, void, void))(*(void *)&v29 + 160);
  v46(&v138, v144, v145, v172, *(void *)&v38);
  if (v140)
  {
    outlined release of DateComponents((uint64_t)v168);
    uint64_t result = outlined release of DateComponents((uint64_t)__dst);
    *(double *)uint64_t v19 = v89;
    *(unsigned char *)(v19 + 8) = 0;
    return result;
  }
  *(void *)&v145[2] = v85;
  BYTE8(v145[2]) = v86;
  uint64_t v47 = v138;
  *(void *)&v145[3] = v87;
  BYTE9(v167[17]) = 1;
  char v48 = v139 + v138;
  *(double *)uint64_t v143 = v91;
  *((double *)v143 + 1) = v38;
  *(double *)uint64_t v141 = v139 + v138;
  *(void *)&v145[0] = v37;
  *((void *)&v145[0] + 1) = v92;
  *(void *)&v145[1] = v36;
  *((void *)&v145[1] + 1) = v90;
  BYTE8(v145[3]) = v88;
  *(void *)&v145[4] = v94;
  BYTE8(v145[4]) = v93;
  *(void *)&v145[5] = v95;
  BYTE8(v145[5]) = v96;
  *(void *)&v145[6] = v98;
  BYTE8(v145[6]) = v97;
  *(void *)&v145[7] = v99;
  BYTE8(v145[7]) = v100;
  *(void *)&v145[8] = v102;
  BYTE8(v145[8]) = v101;
  *(void *)&v145[9] = v103;
  BYTE8(v145[9]) = v104;
  *(void *)&v145[10] = v106;
  BYTE8(v145[10]) = v105;
  *(void *)&v145[11] = v107;
  BYTE8(v145[11]) = v108;
  *(void *)&v145[12] = v110;
  BYTE8(v145[12]) = v109;
  *(void *)&v145[13] = v111;
  BYTE8(v145[13]) = v112;
  *(void *)&v145[14] = v114;
  BYTE8(v145[14]) = v113;
  *(void *)&v145[15] = v115;
  BYTE8(v145[15]) = v116;
  BYTE8(v145[16]) = v117;
  *(void *)&v145[16] = v118;
  *(void *)&v145[17] = v119;
  BYTE8(v145[17]) = v120;
  BYTE9(v145[17]) = 1;
  memcpy(v144, v145, 0x11AuLL);
  LOBYTE(v134[0]) = v122;
  LOBYTE(v127[0]) = v124;
  LOBYTE(v128) = v43;
  outlined retain of DateComponents((uint64_t)v145);
  Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)((double *)v141, v144, (unsigned __int8 *)v134, (unsigned __int8 *)v127, (unsigned __int8 *)&v128, (double *)v142);
  if (v121)
  {
    outlined release of DateComponents((uint64_t)__dst);
    outlined release of DateComponents((uint64_t)v145);
    return outlined release of DateComponents((uint64_t)v145);
  }
  outlined release of DateComponents((uint64_t)v145);
  char v84 = v46;
  if (BYTE8(v142[0]))
  {
    char v50 = v91;
    uint64_t v51 = v38;
  }
  else
  {
    char v123 = *(void *)&v142[0];
    Swift::String v55 = *(double *)v142;
    DateComponents.setUnits.getter((uint64_t *)v127);
    long long v56 = LOWORD(v127[0]);
    *(double *)uint64_t v142 = v127[0];
    if (v55 <= 1.59271755e13) {
      int v57 = v55;
    }
    else {
      int v57 = 1.59271755e13;
    }
    *(void *)&v141[0] = fmax(v57, -2.11845067e11);
    outlined retain of DateComponents((uint64_t)v145);
    v126(v143, v142, v141, v172, *(void *)&v38);
    unint64_t v58 = *(double *)v143;
    if ((v56 & 0x4000) != 0)
    {
      *(double *)uint64_t v143 = v91;
      *((double *)v143 + 1) = v38;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if (*(void *)&v143[1])
      {
        v142[0] = v143[1];
        swift_unknownObjectRetain();
        Calendar.timeZone.setter((uint64_t *)v142);
        unint64_t v58 = *(double *)v143;
      }
      else
      {
        unint64_t v58 = v91;
      }
    }
    double v43 = v125;
    char v50 = v91;
    long long v61 = v143[1];
    *(long long *)((char *)&v144[16] + 10) = *(_OWORD *)((char *)&v143[16] + 10);
    v144[14] = v143[14];
    v144[15] = v143[15];
    v144[16] = v143[16];
    v144[10] = v143[10];
    v144[11] = v143[11];
    v144[12] = v143[12];
    v144[13] = v143[13];
    v144[6] = v143[6];
    v144[7] = v143[7];
    v144[8] = v143[8];
    v144[9] = v143[9];
    v144[2] = v143[2];
    v144[3] = v143[3];
    v144[4] = v143[4];
    v144[5] = v143[5];
    *(double *)char v144 = v58;
    *((void *)&v144[0] + 1) = *((void *)&v143[0] + 1);
    v144[1] = v143[1];
    if (v37)
    {
      *(void *)&v144[0] = v37;
      *((void *)&v144[0] + 1) = v92;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if ((void)v61)
      {
        v142[0] = v61;
        swift_unknownObjectRetain();
        Calendar.timeZone.setter((uint64_t *)v142);
      }
    }
    if (v36)
    {
      *(void *)&v144[1] = v36;
      *((void *)&v144[1] + 1) = v90;
      swift_unknownObjectRetain_n();
      swift_unknownObjectRelease();
      if (*(void *)&v144[0])
      {
        *(void *)&v142[0] = v36;
        *((void *)&v142[0] + 1) = v90;
        Calendar.timeZone.setter((uint64_t *)v142);
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    memcpy(v142, v144, 0x11AuLL);
    memcpy(v141, v144, 0x11AuLL);
    memcpy(v134, v145, 0x11AuLL);
    long long v62 = specialized static DateComponents.== infix(_:_:)((uint64_t)v141, v134);
    outlined release of DateComponents((uint64_t)v142);
    outlined release of DateComponents((uint64_t)v145);
    if (v62)
    {
      outlined release of DateComponents((uint64_t)v145);
      uint64_t result = outlined release of DateComponents((uint64_t)__dst);
      *(void *)uint64_t v19 = v123;
      *(unsigned char *)(v19 + 8) = 0;
      return result;
    }
    uint64_t v51 = v38;
  }
  if (v124 == 3)
  {
    outlined release of DateComponents((uint64_t)v145);
    uint64_t result = outlined release of DateComponents((uint64_t)__dst);
    *(void *)uint64_t v19 = 0;
    *(unsigned char *)(v19 + 8) = 1;
    return result;
  }
  uint64_t v137 = 4;
  if (v48 <= 1.59271755e13) {
    long long v63 = v48;
  }
  else {
    long long v63 = 1.59271755e13;
  }
  long long v64 = fmax(v63, -2.11845067e11);
  *(double *)uint64_t v142 = v64;
  v126(v144, &v137, v142, v172, *(void *)&v51);
  memcpy(v143, v144, 0x11AuLL);
  outlined release of DateComponents((uint64_t)v143);
  if (BYTE9(v143[17]))
  {
    if (v124)
    {
      *(double *)uint64_t v141 = v50;
      *((double *)v141 + 1) = v51;
      *(void *)&v134[0] = v21;
      memcpy(v142, v171, 0x11AuLL);
      Calendar.preserveSmallerUnits(_:compsToMatch:compsToModify:)((double *)v134, (uint64_t)v142, (uint64_t)v167);
      if (v124 == 1)
      {
        BYTE9(v167[17]) = 0;
        LOBYTE(v141[0]) = 3;
        *(double *)uint64_t v142 = v64;
        v84(v134, v141, v142, v172, *(void *)&v51);
        if (v134[1])
        {
          uint64_t v172 = *(void *)&v167[16];
          v142[0] = v167[0];
          v142[1] = v167[1];
          *(void *)&v142[2] = *(void *)&v167[2];
          BYTE8(v142[2]) = BYTE8(v167[2]);
          *(void *)&v142[3] = *(void *)&v167[3];
          BYTE8(v142[3]) = BYTE8(v167[3]);
          *(void *)&v142[4] = *(void *)&v167[4];
          BYTE8(v142[4]) = BYTE8(v167[4]);
          *(void *)&v142[5] = 1;
          BYTE8(v142[5]) = 0;
          *(void *)&v142[6] = *(void *)&v167[6];
          BYTE8(v142[6]) = BYTE8(v167[6]);
          *(void *)&v142[7] = *(void *)&v167[7];
          BYTE8(v142[7]) = BYTE8(v167[7]);
          *(void *)&v142[8] = *(void *)&v167[8];
          BYTE8(v142[8]) = BYTE8(v167[8]);
          *(void *)&v142[9] = *(void *)&v167[9];
          BYTE8(v142[9]) = BYTE8(v167[9]);
          *(void *)&v142[10] = *(void *)&v167[10];
          BYTE8(v142[10]) = BYTE8(v167[10]);
          *(void *)&v142[11] = *(void *)&v167[11];
          BYTE8(v142[11]) = BYTE8(v167[11]);
          *(void *)&v142[12] = *(void *)&v167[12];
          BYTE8(v142[12]) = BYTE8(v167[12]);
          *(void *)&v142[13] = *(void *)&v167[13];
          BYTE8(v142[13]) = BYTE8(v167[13]);
          *(void *)&v142[14] = *(void *)&v167[14];
          BYTE8(v142[14]) = BYTE8(v167[14]);
          *(void *)&v142[15] = *(void *)&v167[15];
          BYTE8(v142[15]) = BYTE8(v167[15]);
          BYTE8(v142[16]) = BYTE8(v167[16]);
          *(void *)&v142[16] = *(void *)&v167[16];
          *(void *)&v142[17] = *(void *)&v167[17];
          WORD4(v142[17]) = BYTE8(v167[17]);
          outlined release of DateComponents((uint64_t)v142);
          uint64_t result = outlined release of DateComponents((uint64_t)__dst);
          long long v68 = v89;
          goto LABEL_126;
        }
        v127[0] = v50;
        v127[1] = v51;
        long long v130 = *((double *)v134 + 1) + *(double *)v134;
        uint64_t v172 = *(void *)&v167[16];
        v142[0] = v167[0];
        v142[1] = v167[1];
        *(void *)&v142[2] = *(void *)&v167[2];
        BYTE8(v142[2]) = BYTE8(v167[2]);
        *(void *)&v142[3] = *(void *)&v167[3];
        BYTE8(v142[3]) = BYTE8(v167[3]);
        *(void *)&v142[4] = *(void *)&v167[4];
        BYTE8(v142[4]) = BYTE8(v167[4]);
        *(void *)&v142[5] = 1;
        BYTE8(v142[5]) = 0;
        *(void *)&v142[6] = *(void *)&v167[6];
        BYTE8(v142[6]) = BYTE8(v167[6]);
        *(void *)&v142[7] = *(void *)&v167[7];
        BYTE8(v142[7]) = BYTE8(v167[7]);
        *(void *)&v142[8] = *(void *)&v167[8];
        BYTE8(v142[8]) = BYTE8(v167[8]);
        *(void *)&v142[9] = *(void *)&v167[9];
        BYTE8(v142[9]) = BYTE8(v167[9]);
        *(void *)&v142[10] = *(void *)&v167[10];
        BYTE8(v142[10]) = BYTE8(v167[10]);
        *(void *)&v142[11] = *(void *)&v167[11];
        BYTE8(v142[11]) = BYTE8(v167[11]);
        *(void *)&v142[12] = *(void *)&v167[12];
        BYTE8(v142[12]) = BYTE8(v167[12]);
        *(void *)&v142[13] = *(void *)&v167[13];
        BYTE8(v142[13]) = BYTE8(v167[13]);
        *(void *)&v142[14] = *(void *)&v167[14];
        BYTE8(v142[14]) = BYTE8(v167[14]);
        *(void *)&v142[15] = *(void *)&v167[15];
        BYTE8(v142[15]) = BYTE8(v167[15]);
        BYTE8(v142[16]) = BYTE8(v167[16]);
        *(void *)&v142[16] = *(void *)&v167[16];
        *(void *)&v142[17] = *(void *)&v167[17];
        WORD4(v142[17]) = BYTE8(v167[17]);
        memcpy(v141, v142, 0x11AuLL);
        LOBYTE(v135) = 0;
        uint64_t v136 = 1;
        uint64_t v133 = v125;
        outlined retain of DateComponents((uint64_t)v142);
        Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)(&v130, v141, (unsigned __int8 *)&v135, &v136, &v133, &v128);
        outlined release of DateComponents((uint64_t)__dst);
        outlined release of DateComponents((uint64_t)v142);
        uint64_t result = outlined release of DateComponents((uint64_t)v142);
        long long v80 = v128;
        char v83 = LOBYTE(v129);
        long long v68 = v89;
LABEL_122:
        uint64_t v82 = v83 == 0;
LABEL_123:
        if (v82) {
          long long v68 = v80;
        }
        goto LABEL_126;
      }
      LOBYTE(v134[0]) = 2;
      *(double *)uint64_t v142 = v64;
      uint64_t v69 = v172;
      v84(v141, v134, v142, v172, *(void *)&v51);
      if ((v141[1] & 1) == 0)
      {
        long long v70 = *((double *)v141 + 1) + *(double *)v141 + -1.0;
        long long v71 = v69;
        long long v72 = qword_18218B7E8[byte_1ECA4BB89] | qword_18218B7E8[byte_1ECA4BB88];
        *(void *)&v141[0] = v72;
        if (v70 <= 1.59271755e13) {
          long long v73 = v70;
        }
        else {
          long long v73 = 1.59271755e13;
        }
        *(void *)&v134[0] = fmax(v73, -2.11845067e11);
        v126(v142, v141, v134, v71, *(void *)&v51);
        if ((v72 & 0x4000) != 0)
        {
          *(double *)uint64_t v142 = v50;
          *((double *)v142 + 1) = v51;
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          if (*(void *)&v142[1])
          {
            v141[0] = v142[1];
            swift_unknownObjectRetain();
            Calendar.timeZone.setter((uint64_t *)v141);
          }
        }
        memcpy(v141, v142, 0x11AuLL);
        long long v74 = *(void *)&v141[4];
        if (*(void *)&v141[4] == 0x7FFFFFFFFFFFFFFFLL) {
          long long v75 = 0;
        }
        else {
          long long v75 = *(void *)&v141[4];
        }
        if (*(void *)&v141[4] == 0x7FFFFFFFFFFFFFFFLL) {
          long long v76 = 1;
        }
        else {
          long long v76 = BYTE8(v141[4]);
        }
        long long v77 = *(void *)&v141[5];
        if (!BYTE8(v141[4])) {
          long long v74 = v75;
        }
        if (*(void *)&v141[5] == 0x7FFFFFFFFFFFFFFFLL) {
          long long v78 = 0;
        }
        else {
          long long v78 = *(void *)&v141[5];
        }
        if (*(void *)&v141[5] == 0x7FFFFFFFFFFFFFFFLL) {
          long long v79 = 1;
        }
        else {
          long long v79 = BYTE8(v141[5]);
        }
        if (!BYTE8(v141[5])) {
          long long v77 = v78;
        }
        long long v128 = v50;
        long long v129 = v51;
        *(void *)&v134[2] = *(void *)&v167[2];
        BYTE8(v134[2]) = BYTE8(v167[2]);
        *(void *)&v134[3] = *(void *)&v167[3];
        BYTE8(v134[3]) = BYTE8(v167[3]);
        *(void *)&v167[4] = v74;
        *(void *)&v134[4] = v74;
        BYTE8(v167[4]) = v76;
        BYTE8(v134[4]) = v76;
        *(void *)&v167[5] = v77;
        *(void *)&v134[5] = v77;
        BYTE8(v167[5]) = v79;
        BYTE8(v134[5]) = v79;
        *(void *)&v134[6] = *(void *)&v167[6];
        BYTE8(v134[6]) = BYTE8(v167[6]);
        *(void *)&v134[7] = *(void *)&v167[7];
        BYTE8(v134[7]) = BYTE8(v167[7]);
        *(void *)&v134[8] = *(void *)&v167[8];
        BYTE8(v134[8]) = BYTE8(v167[8]);
        *(void *)&v134[9] = *(void *)&v167[9];
        BYTE8(v134[9]) = BYTE8(v167[9]);
        *(void *)&v134[10] = *(void *)&v167[10];
        BYTE8(v134[10]) = BYTE8(v167[10]);
        *(void *)&v134[11] = *(void *)&v167[11];
        BYTE8(v134[11]) = BYTE8(v167[11]);
        *(void *)&v134[12] = *(void *)&v167[12];
        BYTE8(v134[12]) = BYTE8(v167[12]);
        *(void *)&v134[13] = *(void *)&v167[13];
        BYTE8(v134[13]) = BYTE8(v167[13]);
        *(void *)&v134[14] = *(void *)&v167[14];
        BYTE8(v134[14]) = BYTE8(v167[14]);
        *(void *)&v134[15] = *(void *)&v167[15];
        BYTE8(v134[15]) = BYTE8(v167[15]);
        BYTE8(v134[16]) = BYTE8(v167[16]);
        BYTE8(v134[17]) = BYTE8(v167[17]);
        *(void *)&v134[16] = *(void *)&v167[16];
        uint64_t v135 = v70;
        v134[0] = v167[0];
        v134[1] = v167[1];
        *(void *)&v134[17] = *(void *)&v167[17];
        BYTE9(v134[17]) = 1;
        memcpy(v127, v134, 0x11AuLL);
        uint64_t v136 = 1;
        uint64_t v133 = v124;
        long long v132 = v125;
        outlined retain of DateComponents((uint64_t)v134);
        Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)(&v135, v127, &v136, &v133, &v132, &v130);
        long long v68 = v89;
        outlined release of DateComponents((uint64_t)v141);
        outlined release of DateComponents((uint64_t)__dst);
        outlined release of DateComponents((uint64_t)v134);
        uint64_t result = outlined release of DateComponents((uint64_t)v134);
        long long v80 = v130;
        char v83 = v131;
        goto LABEL_122;
      }
      memcpy(v142, v167, 0x11AuLL);
      outlined release of DateComponents((uint64_t)v142);
      uint64_t result = outlined release of DateComponents((uint64_t)__dst);
    }
    else
    {
      LOBYTE(v134[0]) = 2;
      *(double *)uint64_t v141 = v64;
      v84(v142, v134, v141, v172, *(void *)&v51);
      outlined release of DateComponents((uint64_t)__dst);
      uint64_t result = outlined release of DateComponents((uint64_t)v145);
      if ((v142[1] & 1) == 0)
      {
        long long v68 = *((double *)v142 + 1) + *(double *)v142;
        goto LABEL_126;
      }
    }
    long long v68 = v89;
    goto LABEL_126;
  }
  if (v124)
  {
    BYTE9(v167[17]) = 0;
    *(double *)uint64_t v141 = v50;
    *((double *)v141 + 1) = v51;
    *(void *)&v134[0] = v21;
    memcpy(v142, v171, 0x11AuLL);
    Calendar.preserveSmallerUnits(_:compsToMatch:compsToModify:)((double *)v134, (uint64_t)v142, (uint64_t)v167);
    if (v124 == 1)
    {
      *(void *)&long long v130 = 4;
      *(double *)uint64_t v141 = v64;
      v126(v142, &v130, v141, v172, *(void *)&v51);
      outlined release of DateComponents((uint64_t)v142);
      long long v65 = *(void *)&v142[4];
      if (BYTE8(v142[4])) {
        long long v65 = 0;
      }
      long long v66 = v65 == 0x7FFFFFFFFFFFFFFFLL;
      v127[0] = v50;
      v127[1] = v51;
      *(void *)&v141[2] = *(void *)&v167[2];
      BYTE8(v141[2]) = BYTE8(v167[2]);
      *(void *)&v141[3] = *(void *)&v167[3];
      BYTE8(v141[3]) = BYTE8(v167[3]);
      if (v65 == 0x7FFFFFFFFFFFFFFFLL) {
        long long v65 = 0;
      }
      *(void *)&v141[4] = v65;
      long long v67 = v66;
      BYTE8(v141[4]) = v67;
      *(void *)&v141[5] = *(void *)&v167[5];
      BYTE8(v141[5]) = BYTE8(v167[5]);
      *(void *)&v141[6] = *(void *)&v167[6];
      BYTE8(v141[6]) = BYTE8(v167[6]);
      *(void *)&v141[7] = *(void *)&v167[7];
      BYTE8(v141[7]) = BYTE8(v167[7]);
      *(void *)&v141[8] = *(void *)&v167[8];
      BYTE8(v141[8]) = BYTE8(v167[8]);
      *(void *)&v141[9] = *(void *)&v167[9];
      BYTE8(v141[9]) = BYTE8(v167[9]);
      *(void *)&v141[10] = *(void *)&v167[10];
      BYTE8(v141[10]) = BYTE8(v167[10]);
      *(void *)&v141[11] = *(void *)&v167[11];
      BYTE8(v141[11]) = BYTE8(v167[11]);
      *(void *)&v141[12] = *(void *)&v167[12];
      BYTE8(v141[12]) = BYTE8(v167[12]);
      *(void *)&v141[13] = *(void *)&v167[13];
      BYTE8(v141[13]) = BYTE8(v167[13]);
      *(void *)&v141[14] = *(void *)&v167[14];
      BYTE8(v141[14]) = BYTE8(v167[14]);
      *(void *)&v141[15] = *(void *)&v167[15];
      BYTE8(v141[15]) = BYTE8(v167[15]);
      BYTE8(v141[16]) = BYTE8(v167[16]);
      WORD4(v141[17]) = WORD4(v167[17]);
      *(void *)&v141[16] = *(void *)&v167[16];
      *(void *)&v141[17] = *(void *)&v167[17];
      uint64_t v135 = v48;
      v141[0] = v167[0];
      v141[1] = v167[1];
      memcpy(v134, v141, 0x11AuLL);
      uint64_t v136 = 0;
      uint64_t v133 = 1;
      long long v132 = v43;
      outlined retain of DateComponents((uint64_t)v141);
      Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)(&v135, v134, &v136, &v133, &v132, &v128);
      outlined release of DateComponents((uint64_t)__dst);
      outlined release of DateComponents((uint64_t)v141);
      uint64_t result = outlined release of DateComponents((uint64_t)v141);
      long long v80 = v128;
      long long v81 = LOBYTE(v129);
    }
    else
    {
      *(double *)uint64_t v134 = v50;
      *((double *)v134 + 1) = v51;
      long long v128 = v47;
      memcpy(v142, v167, 0x11AuLL);
      memcpy(v141, v167, 0x11AuLL);
      LOBYTE(v130) = 0;
      LOBYTE(v135) = v124;
      uint64_t v136 = v43;
      outlined retain of DateComponents((uint64_t)v142);
      Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)(&v128, v141, (unsigned __int8 *)&v130, (unsigned __int8 *)&v135, &v136, v127);
      outlined release of DateComponents((uint64_t)__dst);
      outlined release of DateComponents((uint64_t)v142);
      uint64_t result = outlined release of DateComponents((uint64_t)v142);
      long long v80 = v127[0];
      long long v81 = LOBYTE(v127[1]);
    }
    uint64_t v82 = v81 == 0;
    long long v68 = v89;
    goto LABEL_123;
  }
  outlined release of DateComponents((uint64_t)v145);
  uint64_t result = outlined release of DateComponents((uint64_t)__dst);
  long long v68 = v48;
LABEL_126:
  *a10 = 1;
  *(double *)uint64_t v19 = v68;
  *(unsigned char *)(v19 + 8) = 0;
  return result;
}

uint64_t initializeWithCopy for Calendar.DatesByMatching(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  long long v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v11;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v3 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v3;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  uint64_t v4 = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 240) = v4;
  uint64_t v5 = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 256) = v5;
  uint64_t v6 = *(void *)(a2 + 272);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(void *)(a1 + 272) = v6;
  uint64_t v7 = *(void *)(a2 + 288);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(void *)(a1 + 288) = v7;
  uint64_t v8 = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(void *)(a1 + 304) = v8;
  uint64_t v9 = *(void *)(a2 + 320);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(void *)(a1 + 320) = v9;
  *(unsigned char *)(a1 + 329) = *(unsigned char *)(a2 + 329);
  *(unsigned char *)(a1 + 330) = *(unsigned char *)(a2 + 330);
  *(unsigned char *)(a1 + 331) = *(unsigned char *)(a2 + 331);
  *(unsigned char *)(a1 + 332) = *(unsigned char *)(a2 + 332);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Calendar.DatesByMatching(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 331;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  long long v6 = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v9;
  uint64_t v10 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v10;
  uint64_t v11 = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = v11;
  uint64_t v12 = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = v12;
  uint64_t v13 = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = v13;
  uint64_t v14 = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = v14;
  uint64_t v15 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = v15;
  uint64_t v16 = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = v16;
  uint64_t v17 = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 208) = v17;
  uint64_t v18 = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 224) = v18;
  uint64_t v19 = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 240) = v19;
  uint64_t v20 = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 256) = v20;
  uint64_t v21 = *(void *)(a2 + 272);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(void *)(a1 + 272) = v21;
  uint64_t v22 = *(void *)(a2 + 288);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(void *)(a1 + 288) = v22;
  uint64_t v23 = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(void *)(a1 + 304) = v23;
  uint64_t v24 = *(void *)(a2 + 320);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(void *)(a1 + 320) = v24;
  *(unsigned char *)(a1 + 329) = *(unsigned char *)(a2 + 329);
  *(unsigned char *)(a1 + 330) = *(unsigned char *)(a2 + 330);
  *(unsigned char *)(a1 + 331) = *(unsigned char *)(a2 + 331);
  *(unsigned char *)(a1 + 332) = *(unsigned char *)(v4 + 1);
  return a1;
}

void *__swift_memcpy333_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x14DuLL);
}

uint64_t assignWithTake for Calendar.DatesByMatching(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 331;
  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  uint64_t v5 = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = v5;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  uint64_t v6 = *(void *)(a2 + 288);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(void *)(a1 + 288) = v6;
  uint64_t v7 = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(void *)(a1 + 304) = v7;
  uint64_t v8 = *(void *)(a2 + 320);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(void *)(a1 + 320) = v8;
  *(unsigned char *)(a1 + 329) = *(unsigned char *)(a2 + 329);
  *(unsigned char *)(a1 + 330) = *(unsigned char *)(a2 + 330);
  *(unsigned char *)(a1 + 331) = *(unsigned char *)(a2 + 331);
  *(unsigned char *)(a1 + 332) = *(unsigned char *)(v4 + 1);
  return a1;
}

uint64_t getEnumTagSinglePayload for Calendar.DatesByMatching(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 333)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.DatesByMatching(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 332) = 0;
    *(_DWORD *)(result + 328) = 0;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 333) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 333) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Calendar.DatesByMatching()
{
  return &type metadata for Calendar.DatesByMatching;
}

uint64_t initializeWithCopy for Calendar.DatesByAdding(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  long long v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v11;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v3 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v3;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  uint64_t v4 = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 240) = v4;
  uint64_t v5 = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 256) = v5;
  uint64_t v6 = *(void *)(a2 + 272);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(void *)(a1 + 272) = v6;
  uint64_t v7 = *(void *)(a2 + 288);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(void *)(a1 + 288) = v7;
  uint64_t v8 = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(void *)(a1 + 304) = v8;
  uint64_t v9 = *(void *)(a2 + 320);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(void *)(a1 + 320) = v9;
  *(unsigned char *)(a1 + 329) = *(unsigned char *)(a2 + 329);
  *(unsigned char *)(a1 + 330) = *(unsigned char *)(a2 + 330);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Calendar.DatesByAdding(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v8;
  uint64_t v9 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v9;
  uint64_t v10 = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = v10;
  uint64_t v11 = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = v11;
  uint64_t v12 = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = v12;
  uint64_t v13 = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = v13;
  uint64_t v14 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = v14;
  uint64_t v15 = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = v15;
  uint64_t v16 = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 208) = v16;
  uint64_t v17 = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 224) = v17;
  uint64_t v18 = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 240) = v18;
  uint64_t v19 = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 256) = v19;
  uint64_t v20 = *(void *)(a2 + 272);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(void *)(a1 + 272) = v20;
  uint64_t v21 = *(void *)(a2 + 288);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(void *)(a1 + 288) = v21;
  uint64_t v22 = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(void *)(a1 + 304) = v22;
  uint64_t v23 = *(void *)(a2 + 320);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(void *)(a1 + 320) = v23;
  *(unsigned char *)(a1 + 329) = *(unsigned char *)(a2 + 329);
  *(unsigned char *)(a1 + 330) = *(unsigned char *)(a2 + 330);
  return a1;
}

void *__swift_memcpy331_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x14BuLL);
}

uint64_t assignWithTake for Calendar.DatesByAdding(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  uint64_t v4 = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = v4;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  uint64_t v5 = *(void *)(a2 + 288);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(void *)(a1 + 288) = v5;
  uint64_t v6 = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(void *)(a1 + 304) = v6;
  uint64_t v7 = *(void *)(a2 + 320);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(void *)(a1 + 320) = v7;
  *(unsigned char *)(a1 + 329) = *(unsigned char *)(a2 + 329);
  *(unsigned char *)(a1 + 330) = *(unsigned char *)(a2 + 330);
  return a1;
}

uint64_t getEnumTagSinglePayload for Calendar.DatesByAdding(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 331)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.DatesByAdding(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 330) = 0;
    *(_WORD *)(result + 328) = 0;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 331) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 331) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Calendar.DatesByAdding()
{
  return &type metadata for Calendar.DatesByAdding;
}

unint64_t lazy protocol witness table accessor for type Calendar.DatesByMatching.Iterator and conformance Calendar.DatesByMatching.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.DatesByMatching.Iterator and conformance Calendar.DatesByMatching.Iterator;
  if (!lazy protocol witness table cache variable for type Calendar.DatesByMatching.Iterator and conformance Calendar.DatesByMatching.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.DatesByMatching.Iterator and conformance Calendar.DatesByMatching.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.DatesByAdding.Iterator and conformance Calendar.DatesByAdding.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.DatesByAdding.Iterator and conformance Calendar.DatesByAdding.Iterator;
  if (!lazy protocol witness table cache variable for type Calendar.DatesByAdding.Iterator and conformance Calendar.DatesByAdding.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.DatesByAdding.Iterator and conformance Calendar.DatesByAdding.Iterator);
  }
  return result;
}

uint64_t Calendar.dateIfEraHasYear(era:year:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v92)(long long *__return_ptr, long long *, uint64_t *, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  uint64_t v109[36];
  long long v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  char v144;
  char v145;
  long long __dst[18];
  unsigned char __src[296];

  uint64_t v6 = *v3;
  uint64_t v7 = v3[1];
  __dst[0] = 0uLL;
  uint64_t v110 = 0uLL;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, (uint64_t *)&v110, a1, 0, a2, 0, 0, 1, (uint64_t)__src, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  uint64_t ObjectType = swift_getObjectType();
  memcpy(__dst, __src, 0x11AuLL);
  (*(void (**)(uint64_t *__return_ptr, long long *, uint64_t, uint64_t))(v7 + 176))(v109, __dst, ObjectType, v7);
  uint64_t result = outlined release of DateComponents((uint64_t)__src);
  if (v109[1])
  {
    *(void *)a3 = v109[0];
    *(unsigned char *)(a3 + 8) = 1;
    return result;
  }
  double v10 = *(double *)v109;
  uint64_t v11 = qword_18218B7E8[byte_1ECA4B991] | qword_18218B7E8[byte_1ECA4B990];
  *(void *)&uint64_t v110 = v11;
  if (*(double *)v109 <= 1.59271755e13) {
    double v12 = *(double *)v109;
  }
  else {
    double v12 = 1.59271755e13;
  }
  v109[0] = fmax(v12, -2.11845067e11);
  uint64_t v92 = *(void (**)(long long *__return_ptr, long long *, uint64_t *, uint64_t, uint64_t))(v7 + 192);
  v92(__dst, &v110, v109, ObjectType, v7);
  uint64_t v13 = *(void *)&__dst[0];
  uint64_t v93 = ObjectType;
  uint64_t v94 = v6;
  uint64_t v80 = a2;
  uint64_t v95 = v7;
  if ((v11 & 0x4000) != 0)
  {
    *(void *)&__dst[0] = v6;
    *((void *)&__dst[0] + 1) = v7;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if (*(void *)&__dst[1])
    {
      uint64_t v110 = __dst[1];
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)&v110);
      uint64_t v13 = *(void *)&__dst[0];
    }
    else
    {
      uint64_t v13 = v6;
    }
  }
  uint64_t v14 = *((void *)&__dst[0] + 1);
  uint64_t v16 = *((void *)&__dst[1] + 1);
  uint64_t v15 = *(void *)&__dst[1];
  uint64_t v90 = *(void *)&__dst[2];
  int v17 = BYTE8(__dst[2]);
  uint64_t v18 = *(void *)&__dst[3];
  int v19 = BYTE8(__dst[3]);
  uint64_t v20 = *(void *)&__dst[4];
  char v21 = BYTE8(__dst[4]);
  uint64_t v22 = *(void *)&__dst[5];
  char v23 = BYTE8(__dst[5]);
  uint64_t v24 = *(void *)&__dst[6];
  char v25 = BYTE8(__dst[6]);
  uint64_t v26 = *(void *)&__dst[7];
  char v27 = BYTE8(__dst[7]);
  uint64_t v28 = *(void *)&__dst[8];
  char v29 = BYTE8(__dst[8]);
  uint64_t v30 = *(void *)&__dst[9];
  char v31 = BYTE8(__dst[9]);
  uint64_t v91 = *(void *)&__dst[10];
  char v32 = BYTE8(__dst[10]);
  uint64_t v33 = *(void *)&__dst[11];
  char v34 = BYTE8(__dst[11]);
  uint64_t v79 = *(void *)&__dst[12];
  char v78 = BYTE8(__dst[12]);
  uint64_t v35 = *(void *)&__dst[13];
  char v36 = BYTE8(__dst[13]);
  uint64_t v89 = *(void *)&__dst[14];
  char v88 = BYTE8(__dst[14]);
  uint64_t v87 = *(void *)&__dst[15];
  char v85 = BYTE8(__dst[15]);
  char v86 = BYTE8(__dst[16]);
  uint64_t v84 = *(void *)&__dst[16];
  uint64_t v82 = *(void *)&__dst[17];
  uint64_t v77 = a3;
  char v83 = BYTE8(__dst[17]);
  char v81 = BYTE9(__dst[17]);
  if (v80 == 1)
  {
    unint64_t v105 = *(void *)&__dst[3];
    uint64_t v110 = 0uLL;
    v109[1] = 0;
    v109[0] = 0;
    unint64_t v104 = v13;
    char v76 = BYTE8(__dst[5]);
    uint64_t v75 = *(void *)&__dst[6];
    char v74 = BYTE8(__dst[6]);
    uint64_t v73 = *(void *)&__dst[7];
    char v72 = BYTE8(__dst[7]);
    uint64_t v71 = *(void *)&__dst[8];
    char v70 = BYTE8(__dst[8]);
    uint64_t v69 = *(void *)&__dst[9];
    unint64_t v103 = BYTE8(__dst[3]);
    char v101 = *(void *)&__dst[1];
    uint64_t v102 = *((void *)&__dst[0] + 1);
    uint64_t v99 = *(void *)&__dst[4];
    uint64_t v100 = *((void *)&__dst[1] + 1);
    uint64_t v98 = BYTE8(__dst[4]);
    uint64_t v97 = *(void *)&__dst[5];
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(&v110, v109, 0, 1, 0, 1, 0, 1, (uint64_t)__dst, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1);
    uint64_t v37 = v69;
    char v38 = v70;
    uint64_t v39 = v71;
    char v40 = v72;
    uint64_t v41 = v73;
    char v42 = v74;
    uint64_t v43 = v75;
    char v44 = v76;
    uint64_t v45 = v90;
    uint64_t v46 = v91;
    uint64_t v47 = v79;
    char v48 = v78;
    uint64_t v49 = v89;
    char v50 = v88;
    uint64_t v51 = v87;
    char v52 = v86;
    char v53 = v85;
    uint64_t v54 = v84;
    char v55 = v83;
    uint64_t v56 = v82;
    for (char i = v81; ; char i = BYTE1(v109[35]))
    {
      *(void *)&uint64_t v110 = v104;
      *((void *)&v110 + 1) = v102;
      uint64_t v111 = v101;
      char v112 = v100;
      uint64_t v115 = v105;
      uint64_t v114 = v17 & 1;
      char v113 = v45;
      char v116 = v103 & 1;
      uint64_t v117 = v99;
      unint64_t v118 = v98 & 1;
      char v119 = v97;
      unint64_t v120 = v44 & 1;
      uint64_t v121 = v43;
      uint64_t v122 = v42 & 1;
      char v123 = v41;
      char v124 = v40 & 1;
      long long v125 = v39;
      long long v126 = v38 & 1;
      long long v127 = v37;
      long long v128 = v31 & 1;
      long long v129 = v46;
      long long v130 = v32 & 1;
      long long v131 = v33;
      long long v132 = v34 & 1;
      uint64_t v133 = v47;
      uint64_t v134 = v48 & 1;
      uint64_t v135 = v35;
      uint64_t v136 = v36 & 1;
      uint64_t v137 = v49;
      uint64_t v138 = v50 & 1;
      uint64_t v139 = v51;
      uint64_t v140 = v53 & 1;
      uint64_t v142 = v52 & 1;
      uint64_t v141 = v54;
      uint64_t v143 = v56;
      char v144 = v55 & 1;
      uint64_t v145 = i;
      if ((v17 & 1) != 0 || v45 >= a1) {
        break;
      }
      memcpy(v109, __dst, 0x11AuLL);
      if (v10 <= 1.59271755e13) {
        double v58 = v10;
      }
      else {
        double v58 = 1.59271755e13;
      }
      char v108 = fmax(v58, -2.11845067e11);
      (*(void (**)(uint64_t *__return_ptr, uint64_t *, double *, void, uint64_t, uint64_t))(v95 + 200))(&v106, v109, &v108, 0, v93, v95);
      double v59 = *(double *)&v106;
      if (v107)
      {
        outlined release of DateComponents((uint64_t)__dst);
        uint64_t result = outlined release of DateComponents((uint64_t)&v110);
        uint64_t v68 = v77;
        *(double *)uint64_t v77 = v59;
        goto LABEL_38;
      }
      double v10 = *(double *)&v106;
      uint64_t v106 = 1;
      if (v59 <= 1.59271755e13) {
        double v60 = v59;
      }
      else {
        double v60 = 1.59271755e13;
      }
      char v108 = fmax(v60, -2.11845067e11);
      v92((long long *)v109, (long long *)&v106, (uint64_t *)&v108, v93, v95);
      outlined release of DateComponents((uint64_t)&v110);
      char v101 = v109[2];
      uint64_t v102 = v109[1];
      uint64_t v45 = v109[4];
      LOBYTE(v17) = v109[5];
      unint64_t v104 = v109[0];
      unint64_t v105 = v109[6];
      unint64_t v103 = v109[7];
      uint64_t v99 = v109[8];
      uint64_t v100 = v109[3];
      uint64_t v98 = v109[9];
      uint64_t v97 = v109[10];
      char v44 = v109[11];
      uint64_t v43 = v109[12];
      char v42 = v109[13];
      uint64_t v41 = v109[14];
      char v40 = v109[15];
      uint64_t v39 = v109[16];
      char v38 = v109[17];
      uint64_t v37 = v109[18];
      char v31 = v109[19];
      uint64_t v46 = v109[20];
      char v32 = v109[21];
      uint64_t v33 = v109[22];
      char v34 = v109[23];
      uint64_t v47 = v109[24];
      char v48 = v109[25];
      uint64_t v35 = v109[26];
      char v36 = v109[27];
      uint64_t v49 = v109[28];
      char v50 = v109[29];
      uint64_t v51 = v109[30];
      char v53 = v109[31];
      char v52 = v109[33];
      uint64_t v54 = v109[32];
      uint64_t v56 = v109[34];
      char v55 = v109[35];
    }
    uint64_t v64 = qword_18218B7E8[byte_1ECA4B969] | qword_18218B7E8[byte_1ECA4B968];
    uint64_t v106 = v64;
    if (v10 <= 1.59271755e13) {
      double v65 = v10;
    }
    else {
      double v65 = 1.59271755e13;
    }
    char v108 = fmax(v65, -2.11845067e11);
    v92((long long *)v109, (long long *)&v106, (uint64_t *)&v108, v93, v95);
    if ((v64 & 0x4000) != 0)
    {
      v109[0] = v94;
      v109[1] = v95;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if (v109[2])
      {
        uint64_t v106 = v109[2];
        uint64_t v107 = v109[3];
        swift_unknownObjectRetain();
        Calendar.timeZone.setter(&v106);
      }
    }
    outlined release of DateComponents((uint64_t)__dst);
    outlined release of DateComponents((uint64_t)&v110);
    uint64_t v13 = v109[0];
    uint64_t v14 = v109[1];
    uint64_t v15 = v109[2];
    uint64_t v16 = v109[3];
    uint64_t v90 = v109[4];
    int v17 = LOBYTE(v109[5]);
    uint64_t v18 = v109[6];
    int v19 = LOBYTE(v109[7]);
    uint64_t v20 = v109[8];
    char v21 = v109[9];
    uint64_t v22 = v109[10];
    char v23 = v109[11];
    uint64_t v24 = v109[12];
    char v25 = v109[13];
    uint64_t v26 = v109[14];
    char v27 = v109[15];
    uint64_t v28 = v109[16];
    char v29 = v109[17];
    uint64_t v30 = v109[18];
    char v31 = v109[19];
    uint64_t v91 = v109[20];
    char v32 = v109[21];
    uint64_t v33 = v109[22];
    char v34 = v109[23];
    uint64_t v62 = v109[24];
    char v63 = v109[25];
    uint64_t v35 = v109[26];
    char v61 = v109[27];
    uint64_t v89 = v109[28];
    char v86 = v109[33];
    char v83 = v109[35];
    char v88 = v109[29];
    uint64_t v87 = v109[30];
    char v85 = v109[31];
    uint64_t v84 = v109[32];
    uint64_t v82 = v109[34];
    char v81 = BYTE1(v109[35]);
  }
  else
  {
    char v61 = BYTE8(__dst[13]);
    uint64_t v62 = *(void *)&__dst[12];
    char v63 = BYTE8(__dst[12]);
  }
  *(void *)&__dst[0] = v13;
  *((void *)&__dst[0] + 1) = v14;
  *(void *)&__dst[1] = v15;
  *((void *)&__dst[1] + 1) = v16;
  *(void *)&__dst[2] = v90;
  BYTE8(__dst[2]) = v17;
  uint64_t v66 = v18;
  *(void *)&__dst[3] = v18;
  int v67 = v19;
  BYTE8(__dst[3]) = v19;
  *(void *)&__dst[4] = v20;
  BYTE8(__dst[4]) = v21;
  *(void *)&__dst[5] = v22;
  BYTE8(__dst[5]) = v23;
  *(void *)&__dst[6] = v24;
  BYTE8(__dst[6]) = v25;
  *(void *)&__dst[7] = v26;
  BYTE8(__dst[7]) = v27;
  *(void *)&__dst[8] = v28;
  BYTE8(__dst[8]) = v29;
  *(void *)&__dst[9] = v30;
  BYTE8(__dst[9]) = v31;
  *(void *)&__dst[10] = v91;
  BYTE8(__dst[10]) = v32;
  *(void *)&__dst[11] = v33;
  BYTE8(__dst[11]) = v34;
  *(void *)&__dst[12] = v62;
  BYTE8(__dst[12]) = v63;
  *(void *)&__dst[13] = v35;
  BYTE8(__dst[13]) = v61;
  *(void *)&__dst[14] = v89;
  BYTE8(__dst[14]) = v88;
  *(void *)&__dst[15] = v87;
  BYTE8(__dst[15]) = v85;
  BYTE8(__dst[16]) = v86;
  *(void *)&__dst[16] = v84;
  *(void *)&__dst[17] = v82;
  BYTE8(__dst[17]) = v83;
  BYTE9(__dst[17]) = v81;
  uint64_t result = outlined release of DateComponents((uint64_t)__dst);
  if (!v17)
  {
    if (v90 != a1) {
      goto LABEL_36;
    }
LABEL_34:
    if (v67)
    {
      if (v80 != 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_36;
      }
    }
    else if (v66 != v80)
    {
      goto LABEL_36;
    }
    *(double *)uint64_t v77 = v10;
    *(unsigned char *)(v77 + 8) = 0;
    return result;
  }
  if (a1 == 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_34;
  }
LABEL_36:
  uint64_t v68 = v77;
  *(void *)uint64_t v77 = 0;
LABEL_38:
  *(unsigned char *)(v68 + 8) = 1;
  return result;
}

void *Calendar.dateIfEraHasYearForWeekOfYear(era:yearForWeekOfYear:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v91)(long long *__return_ptr, long long *, uint64_t *, uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  uint64_t v109[36];
  long long v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  char v144;
  char v145;
  long long __dst[18];
  unsigned char __src[296];

  uint64_t v7 = *v3;
  uint64_t v6 = v3[1];
  __dst[0] = 0uLL;
  uint64_t v110 = 0uLL;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, (uint64_t *)&v110, a1, 0, a2, 0, 0, 1, (uint64_t)__src, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  uint64_t ObjectType = swift_getObjectType();
  memcpy(__dst, __src, 0x11AuLL);
  (*(void (**)(uint64_t *__return_ptr, long long *, uint64_t, uint64_t))(v6 + 176))(v109, __dst, ObjectType, v6);
  uint64_t result = (void *)outlined release of DateComponents((uint64_t)__src);
  double v10 = *(double *)v109;
  if (v109[1]) {
    goto LABEL_38;
  }
  uint64_t v11 = qword_18218B7E8[byte_1ECA4A981] | qword_18218B7E8[byte_1ECA4A980];
  *(void *)&uint64_t v110 = v11;
  if (*(double *)v109 <= 1.59271755e13) {
    double v12 = *(double *)v109;
  }
  else {
    double v12 = 1.59271755e13;
  }
  v109[0] = fmax(v12, -2.11845067e11);
  uint64_t v91 = *(void (**)(long long *__return_ptr, long long *, uint64_t *, uint64_t, uint64_t))(v6 + 192);
  v91(__dst, &v110, v109, ObjectType, v6);
  uint64_t v13 = *(void *)&__dst[0];
  uint64_t v93 = v7;
  uint64_t v94 = v6;
  uint64_t v92 = ObjectType;
  uint64_t v78 = a3;
  uint64_t v79 = a2;
  if ((v11 & 0x4000) != 0)
  {
    *(void *)&__dst[0] = v7;
    *((void *)&__dst[0] + 1) = v6;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if (*(void *)&__dst[1])
    {
      uint64_t v110 = __dst[1];
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)&v110);
      uint64_t v13 = *(void *)&__dst[0];
    }
    else
    {
      uint64_t v13 = v7;
    }
  }
  uint64_t v15 = *((void *)&__dst[1] + 1);
  uint64_t v14 = *(void *)&__dst[1];
  uint64_t v88 = *(void *)&__dst[2];
  int v16 = BYTE8(__dst[2]);
  uint64_t v17 = *(void *)&__dst[3];
  int v18 = BYTE8(__dst[3]);
  uint64_t v19 = *(void *)&__dst[4];
  char v20 = BYTE8(__dst[4]);
  uint64_t v21 = *(void *)&__dst[5];
  char v22 = BYTE8(__dst[5]);
  uint64_t v23 = *(void *)&__dst[6];
  char v24 = BYTE8(__dst[6]);
  uint64_t v25 = *(void *)&__dst[7];
  char v26 = BYTE8(__dst[7]);
  uint64_t v27 = *(void *)&__dst[8];
  char v28 = BYTE8(__dst[8]);
  uint64_t v29 = *(void *)&__dst[9];
  char v30 = BYTE8(__dst[9]);
  uint64_t v90 = *(void *)&__dst[10];
  char v89 = BYTE8(__dst[10]);
  uint64_t v31 = *(void *)&__dst[11];
  char v32 = BYTE8(__dst[11]);
  uint64_t v33 = *(void *)&__dst[12];
  char v34 = BYTE8(__dst[12]);
  uint64_t v35 = *(void *)&__dst[13];
  char v36 = BYTE8(__dst[13]);
  uint64_t v37 = *(void *)&__dst[14];
  char v87 = BYTE8(__dst[14]);
  uint64_t v86 = *(void *)&__dst[15];
  char v84 = BYTE8(__dst[15]);
  char v85 = BYTE8(__dst[16]);
  uint64_t v83 = *(void *)&__dst[16];
  uint64_t v81 = *(void *)&__dst[17];
  char v82 = BYTE8(__dst[17]);
  char v80 = BYTE9(__dst[17]);
  unint64_t v105 = *((void *)&__dst[0] + 1);
  if (v79 == 1)
  {
    uint64_t v110 = 0uLL;
    v109[1] = 0;
    v109[0] = 0;
    char v77 = BYTE8(__dst[5]);
    uint64_t v76 = *(void *)&__dst[6];
    char v75 = BYTE8(__dst[6]);
    uint64_t v74 = *(void *)&__dst[7];
    char v73 = BYTE8(__dst[7]);
    uint64_t v72 = *(void *)&__dst[8];
    char v71 = BYTE8(__dst[8]);
    uint64_t v70 = *(void *)&__dst[9];
    unint64_t v103 = *(void *)&__dst[3];
    uint64_t v102 = BYTE8(__dst[3]);
    uint64_t v100 = *(void *)&__dst[1];
    char v101 = v13;
    uint64_t v98 = *(void *)&__dst[4];
    uint64_t v99 = *((void *)&__dst[1] + 1);
    uint64_t v97 = BYTE8(__dst[4]);
    uint64_t v96 = *(void *)&__dst[5];
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(&v110, v109, 0, 1, 0, 1, 0, 1, (uint64_t)__dst, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1);
    char v38 = v69;
    uint64_t v39 = v70;
    char v40 = v71;
    uint64_t v41 = v72;
    char v42 = v73;
    uint64_t v43 = v74;
    char v44 = v75;
    uint64_t v45 = v76;
    char v46 = v77;
    uint64_t v47 = v90;
    uint64_t v48 = v37;
    char v49 = v89;
    uint64_t v50 = v33;
    uint64_t v51 = v88;
    char v52 = v87;
    uint64_t v53 = v86;
    char v54 = v85;
    char v55 = v84;
    uint64_t v56 = v83;
    char v57 = v82;
    uint64_t v58 = v81;
    for (char i = v80; ; char i = BYTE1(v109[35]))
    {
      *(void *)&uint64_t v110 = v101;
      *((void *)&v110 + 1) = v105;
      uint64_t v111 = v100;
      char v112 = v99;
      uint64_t v115 = v103;
      uint64_t v114 = v16 & 1;
      char v113 = v51;
      char v116 = v102 & 1;
      uint64_t v117 = v98;
      unint64_t v118 = v97 & 1;
      char v119 = v96;
      unint64_t v120 = v46 & 1;
      uint64_t v121 = v45;
      uint64_t v122 = v44 & 1;
      char v123 = v43;
      char v124 = v42 & 1;
      long long v125 = v41;
      long long v126 = v40 & 1;
      long long v127 = v39;
      long long v128 = v38 & 1;
      long long v129 = v47;
      long long v130 = v49 & 1;
      long long v131 = v31;
      long long v132 = v32 & 1;
      uint64_t v133 = v50;
      uint64_t v134 = v34 & 1;
      uint64_t v135 = v35;
      uint64_t v136 = v36 & 1;
      uint64_t v137 = v48;
      uint64_t v138 = v52 & 1;
      uint64_t v139 = v53;
      uint64_t v140 = v55 & 1;
      uint64_t v142 = v54 & 1;
      uint64_t v141 = v56;
      uint64_t v143 = v58;
      char v144 = v57 & 1;
      uint64_t v145 = i;
      if ((v16 & 1) != 0 || v51 >= a1) {
        break;
      }
      memcpy(v109, __dst, 0x11AuLL);
      if (v10 <= 1.59271755e13) {
        double v60 = v10;
      }
      else {
        double v60 = 1.59271755e13;
      }
      char v108 = fmax(v60, -2.11845067e11);
      (*(void (**)(uint64_t *__return_ptr, uint64_t *, double *, void, uint64_t, uint64_t))(v94 + 200))(&v106, v109, &v108, 0, v92, v94);
      double v10 = *(double *)&v106;
      if (v107)
      {
        outlined release of DateComponents((uint64_t)__dst);
        uint64_t result = (void *)outlined release of DateComponents((uint64_t)&v110);
        a3 = v78;
        goto LABEL_38;
      }
      uint64_t v106 = 1;
      if (v10 <= 1.59271755e13) {
        double v61 = v10;
      }
      else {
        double v61 = 1.59271755e13;
      }
      char v108 = fmax(v61, -2.11845067e11);
      v91((long long *)v109, (long long *)&v106, (uint64_t *)&v108, v92, v94);
      outlined release of DateComponents((uint64_t)&v110);
      uint64_t v100 = v109[2];
      char v101 = v109[0];
      uint64_t v51 = v109[4];
      LOBYTE(v16) = v109[5];
      unint64_t v103 = v109[6];
      unint64_t v105 = v109[1];
      uint64_t v102 = v109[7];
      uint64_t v98 = v109[8];
      uint64_t v99 = v109[3];
      uint64_t v97 = v109[9];
      uint64_t v96 = v109[10];
      char v46 = v109[11];
      uint64_t v45 = v109[12];
      char v44 = v109[13];
      uint64_t v43 = v109[14];
      char v42 = v109[15];
      uint64_t v41 = v109[16];
      char v40 = v109[17];
      uint64_t v39 = v109[18];
      char v38 = v109[19];
      uint64_t v47 = v109[20];
      char v49 = v109[21];
      uint64_t v31 = v109[22];
      char v32 = v109[23];
      uint64_t v50 = v109[24];
      char v34 = v109[25];
      uint64_t v35 = v109[26];
      char v36 = v109[27];
      uint64_t v48 = v109[28];
      char v52 = v109[29];
      uint64_t v53 = v109[30];
      char v55 = v109[31];
      char v54 = v109[33];
      uint64_t v56 = v109[32];
      uint64_t v58 = v109[34];
      char v57 = v109[35];
    }
    uint64_t v63 = qword_18218B7E8[byte_1ECA4A959] | qword_18218B7E8[byte_1ECA4A958];
    uint64_t v106 = v63;
    if (v10 <= 1.59271755e13) {
      double v64 = v10;
    }
    else {
      double v64 = 1.59271755e13;
    }
    char v108 = fmax(v64, -2.11845067e11);
    v91((long long *)v109, (long long *)&v106, (uint64_t *)&v108, v92, v94);
    if ((v63 & 0x4000) != 0)
    {
      v109[0] = v93;
      v109[1] = v94;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if (v109[2])
      {
        uint64_t v106 = v109[2];
        uint64_t v107 = v109[3];
        swift_unknownObjectRetain();
        Calendar.timeZone.setter(&v106);
      }
    }
    outlined release of DateComponents((uint64_t)__dst);
    outlined release of DateComponents((uint64_t)&v110);
    uint64_t v13 = v109[0];
    unint64_t v105 = v109[1];
    uint64_t v14 = v109[2];
    uint64_t v15 = v109[3];
    uint64_t v88 = v109[4];
    int v16 = LOBYTE(v109[5]);
    uint64_t v17 = v109[6];
    int v18 = LOBYTE(v109[7]);
    uint64_t v19 = v109[8];
    char v20 = v109[9];
    uint64_t v21 = v109[10];
    char v22 = v109[11];
    uint64_t v23 = v109[12];
    char v24 = v109[13];
    uint64_t v25 = v109[14];
    char v26 = v109[15];
    uint64_t v27 = v109[16];
    char v28 = v109[17];
    uint64_t v29 = v109[18];
    char v30 = v109[19];
    uint64_t v90 = v109[20];
    char v89 = v109[21];
    uint64_t v31 = v109[22];
    char v32 = v109[23];
    uint64_t v33 = v109[24];
    char v34 = v109[25];
    uint64_t v35 = v109[26];
    char v36 = v109[27];
    uint64_t v62 = v109[28];
    char v85 = v109[33];
    char v82 = v109[35];
    char v87 = v109[29];
    uint64_t v86 = v109[30];
    char v84 = v109[31];
    uint64_t v83 = v109[32];
    uint64_t v81 = v109[34];
    char v80 = BYTE1(v109[35]);
  }
  else
  {
    uint64_t v62 = *(void *)&__dst[14];
  }
  *(void *)&__dst[0] = v13;
  *((void *)&__dst[0] + 1) = v105;
  *(void *)&__dst[1] = v14;
  *((void *)&__dst[1] + 1) = v15;
  *(void *)&__dst[2] = v88;
  BYTE8(__dst[2]) = v16;
  unint64_t v104 = v17;
  *(void *)&__dst[3] = v17;
  int v65 = v18;
  BYTE8(__dst[3]) = v18;
  *(void *)&__dst[4] = v19;
  BYTE8(__dst[4]) = v20;
  *(void *)&__dst[5] = v21;
  BYTE8(__dst[5]) = v22;
  *(void *)&__dst[6] = v23;
  BYTE8(__dst[6]) = v24;
  *(void *)&__dst[7] = v25;
  BYTE8(__dst[7]) = v26;
  *(void *)&__dst[8] = v27;
  BYTE8(__dst[8]) = v28;
  *(void *)&__dst[9] = v29;
  BYTE8(__dst[9]) = v30;
  *(void *)&__dst[10] = v90;
  BYTE8(__dst[10]) = v89;
  *(void *)&__dst[11] = v31;
  BYTE8(__dst[11]) = v32;
  *(void *)&__dst[12] = v33;
  BYTE8(__dst[12]) = v34;
  *(void *)&__dst[13] = v35;
  BYTE8(__dst[13]) = v36;
  *(void *)&__dst[14] = v62;
  BYTE8(__dst[14]) = v87;
  *(void *)&__dst[15] = v86;
  BYTE8(__dst[15]) = v84;
  BYTE8(__dst[16]) = v85;
  *(void *)&__dst[16] = v83;
  *(void *)&__dst[17] = v81;
  BYTE8(__dst[17]) = v82;
  BYTE9(__dst[17]) = v80;
  uint64_t result = (void *)outlined release of DateComponents((uint64_t)__dst);
  if (v16) {
    BOOL v66 = a1 == 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    BOOL v66 = v88 == a1;
  }
  a3 = v78;
  if (!v66)
  {
LABEL_36:
    double v10 = 0.0;
LABEL_38:
    *(double *)a3 = v10;
    *(unsigned char *)(a3 + 8) = 1;
    return result;
  }
  if (v65)
  {
    if (v79 != 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_36;
    }
  }
  else if (v104 != v79)
  {
    goto LABEL_36;
  }
  LOBYTE(v106) = 12;
  if (v10 <= 1.59271755e13) {
    double v67 = v10;
  }
  else {
    double v67 = 1.59271755e13;
  }
  v109[0] = fmax(v67, -2.11845067e11);
  uint64_t result = (*(void *(**)(long long *__return_ptr, uint64_t *, uint64_t *, uint64_t))(v94 + 160))(&v110, &v106, v109, v92);
  if (v111)
  {
    lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
    swift_allocError();
    *(void *)uint64_t v68 = 12;
    *(double *)(v68 + 8) = v10;
    *(unsigned char *)(v68 + 16) = 0;
    return (void *)swift_willThrow();
  }
  else
  {
    *(void *)uint64_t v78 = v110;
    *(unsigned char *)(v78 + 8) = 0;
  }
  return result;
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError()
{
  unint64_t result = lazy protocol witness table cache variable for type CalendarEnumerationError and conformance CalendarEnumerationError;
  if (!lazy protocol witness table cache variable for type CalendarEnumerationError and conformance CalendarEnumerationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalendarEnumerationError and conformance CalendarEnumerationError);
  }
  return result;
}

uint64_t outlined release of Calendar.DatesByAdding(uint64_t a1)
{
  return a1;
}

void specialized Calendar._enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)(double *a1, const void *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, uint64_t *a6, void (**a7)(void, void, void, void))
{
  double v13 = *a1;
  memcpy(__dst, a2, sizeof(__dst));
  uint64_t v14 = *a3;
  uint64_t v15 = *a4;
  uint64_t v16 = *a5;
  uint64_t v17 = *a6;
  uint64_t v18 = a6[1];
  uint64_t __src = (void *)a2;
  memcpy(v43, a2, 0x11AuLL);
  double v40 = *(double *)&v17;
  uint64_t v41 = v18;
  _Block_copy(a7);
  if (DateComponents._validate(for:)((uint64_t *)&v40) && v13 >= -2.11845067e11 && v13 <= 1.59271755e13)
  {
    unint64_t v19 = 0;
    double v20 = 0.0;
    char v21 = 1;
    double v22 = v13;
    do
    {
      v34[0] = v17;
      v34[1] = v18;
      id v39 = *(id *)&v13;
      memcpy(v43, __src, 0x11AuLL);
      unsigned __int8 v38 = v14;
      unsigned __int8 v37 = v15;
      unsigned __int8 v36 = v16;
      double v35 = v22;
      double v32 = v20;
      LOBYTE(v33) = v21 & 1;
      Calendar._enumerateDatesStep(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:inSearchingDate:previouslyReturnedMatchDate:)((double *)&v39, v43, &v38, &v37, &v36, &v35, (uint64_t)&v32, (uint64_t)&v40);
      double v22 = v42;
      if (v41 == 2)
      {
        if (v19 > 0x63)
        {
          *(double *)char v34 = v13;
          double v40 = *(double *)&v17;
          uint64_t v41 = v18;
          memcpy(v43, __dst, 0x11AuLL);
          LOBYTE(v32) = v16;
          LOBYTE(v39) = v14;
          LOBYTE(v35) = v15;
          _handleCalendarResultNotFound(date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)(v34, (uint64_t *)&v40, v43, (unsigned __int8 *)&v32, (unsigned __int8 *)&v39, (unsigned __int8 *)&v35);
          _Block_release(a7);
          return;
        }
      }
      else
      {
        double v20 = v40;
        unsigned int v30 = v41 & 1;
        _Block_copy(a7);
        char v24 = (unsigned char *)swift_slowAlloc();
        *char v24 = 0;
        uint64_t v25 = v18;
        uint64_t v26 = v16;
        uint64_t v27 = v14;
        uint64_t v28 = v15;
        id v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v20);
        ((void (**)(void, id, void, unsigned char *))a7)[2](a7, v29, v30, v24);

        uint64_t v15 = v28;
        uint64_t v14 = v27;
        uint64_t v16 = v26;
        uint64_t v18 = v25;
        LOBYTE(v25) = *v24;
        MEMORY[0x185309510](v24, -1, -1);
        _Block_release(a7);
        char v21 = 0;
        if (v25) {
          goto LABEL_4;
        }
      }
    }
    while (!__OFADD__(v19++, 1));
    __break(1u);

    _Block_release(a7);
    _Block_release(a7);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_4:
    _Block_release(a7);
  }
}

uint64_t destructiveInjectEnumTag for CalendarEnumerationError(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CalendarEnumerationError()
{
  return &type metadata for CalendarEnumerationError;
}

uint64_t destroy for Calendar.DatesByMatching()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for Calendar.DatesByAdding.Iterator(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  long long v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v11;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v3 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v3;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  uint64_t v4 = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 240) = v4;
  uint64_t v5 = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 256) = v5;
  uint64_t v6 = *(void *)(a2 + 272);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(void *)(a1 + 272) = v6;
  uint64_t v7 = *(void *)(a2 + 288);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(void *)(a1 + 288) = v7;
  uint64_t v8 = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(void *)(a1 + 304) = v8;
  uint64_t v9 = *(void *)(a2 + 320);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(void *)(a1 + 320) = v9;
  *(unsigned char *)(a1 + 329) = *(unsigned char *)(a2 + 329);
  *(unsigned char *)(a1 + 330) = *(unsigned char *)(a2 + 330);
  *(unsigned char *)(a1 + 331) = *(unsigned char *)(a2 + 331);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Calendar.DatesByAdding.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 330;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  long long v6 = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v9;
  uint64_t v10 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v10;
  uint64_t v11 = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = v11;
  uint64_t v12 = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = v12;
  uint64_t v13 = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = v13;
  uint64_t v14 = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = v14;
  uint64_t v15 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = v15;
  uint64_t v16 = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = v16;
  uint64_t v17 = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 208) = v17;
  uint64_t v18 = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 224) = v18;
  uint64_t v19 = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 240) = v19;
  uint64_t v20 = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 256) = v20;
  uint64_t v21 = *(void *)(a2 + 272);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(void *)(a1 + 272) = v21;
  uint64_t v22 = *(void *)(a2 + 288);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(void *)(a1 + 288) = v22;
  uint64_t v23 = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(void *)(a1 + 304) = v23;
  uint64_t v24 = *(void *)(a2 + 320);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(void *)(a1 + 320) = v24;
  *(unsigned char *)(a1 + 329) = *(unsigned char *)(a2 + 329);
  *(unsigned char *)(a1 + 330) = *(unsigned char *)(a2 + 330);
  *(unsigned char *)(a1 + 331) = *(unsigned char *)(v4 + 1);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  return a1;
}

void *__swift_memcpy344_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x158uLL);
}

uint64_t assignWithTake for Calendar.DatesByAdding.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 330;
  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  uint64_t v5 = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = v5;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  uint64_t v6 = *(void *)(a2 + 288);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(void *)(a1 + 288) = v6;
  uint64_t v7 = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(void *)(a1 + 304) = v7;
  uint64_t v8 = *(void *)(a2 + 320);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(void *)(a1 + 320) = v8;
  *(unsigned char *)(a1 + 329) = *(unsigned char *)(a2 + 329);
  *(unsigned char *)(a1 + 330) = *(unsigned char *)(a2 + 330);
  *(unsigned char *)(a1 + 331) = *(unsigned char *)(v4 + 1);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  return a1;
}

uint64_t getEnumTagSinglePayload for Calendar.DatesByAdding.Iterator(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 344)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.DatesByAdding.Iterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 344) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 344) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Calendar.DatesByAdding.Iterator()
{
  return &type metadata for Calendar.DatesByAdding.Iterator;
}

uint64_t destroy for Calendar.DatesByMatching.Iterator()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for Calendar.DatesByMatching.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  long long v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  uint64_t v5 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = v5;
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  uint64_t v6 = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 256) = v6;
  uint64_t v7 = *(void *)(a2 + 272);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(void *)(a1 + 272) = v7;
  uint64_t v8 = *(void *)(a2 + 288);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(void *)(a1 + 288) = v8;
  uint64_t v9 = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(void *)(a1 + 304) = v9;
  uint64_t v10 = *(void *)(a2 + 320);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(void *)(a1 + 320) = v10;
  uint64_t v11 = *(void *)(a2 + 336);
  *(unsigned char *)(a1 + 344) = *(unsigned char *)(a2 + 344);
  *(void *)(a1 + 336) = v11;
  uint64_t v12 = *(void *)(a2 + 352);
  *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
  *(void *)(a1 + 352) = v12;
  *(unsigned char *)(a1 + 361) = *(unsigned char *)(a2 + 361);
  *(unsigned char *)(a1 + 362) = *(unsigned char *)(a2 + 362);
  *(unsigned char *)(a1 + 363) = *(unsigned char *)(a2 + 363);
  *(unsigned char *)(a1 + 364) = *(unsigned char *)(a2 + 364);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Calendar.DatesByMatching.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 363;
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 88) = v8;
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 104) = v9;
  uint64_t v10 = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = v10;
  uint64_t v11 = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = v11;
  uint64_t v12 = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = v12;
  uint64_t v13 = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = v13;
  uint64_t v14 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = v14;
  uint64_t v15 = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = v15;
  uint64_t v16 = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 208) = v16;
  uint64_t v17 = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 224) = v17;
  uint64_t v18 = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 240) = v18;
  uint64_t v19 = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 256) = v19;
  uint64_t v20 = *(void *)(a2 + 272);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(void *)(a1 + 272) = v20;
  uint64_t v21 = *(void *)(a2 + 288);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(void *)(a1 + 288) = v21;
  uint64_t v22 = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(void *)(a1 + 304) = v22;
  uint64_t v23 = *(void *)(a2 + 320);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(void *)(a1 + 320) = v23;
  uint64_t v24 = *(void *)(a2 + 336);
  *(unsigned char *)(a1 + 344) = *(unsigned char *)(a2 + 344);
  *(void *)(a1 + 336) = v24;
  uint64_t v25 = *(void *)(a2 + 352);
  *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
  *(void *)(a1 + 352) = v25;
  *(unsigned char *)(a1 + 361) = *(unsigned char *)(a2 + 361);
  *(unsigned char *)(a1 + 362) = *(unsigned char *)(a2 + 362);
  *(unsigned char *)(a1 + 363) = *(unsigned char *)(a2 + 363);
  *(unsigned char *)(a1 + 364) = *(unsigned char *)(v4 + 1);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(unsigned char *)(a1 + 376) = *(unsigned char *)(v4 + 13);
  return a1;
}

void *__swift_memcpy377_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x179uLL);
}

uint64_t assignWithTake for Calendar.DatesByMatching.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 363;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  uint64_t v6 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = v6;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  uint64_t v7 = *(void *)(a2 + 320);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(void *)(a1 + 320) = v7;
  uint64_t v8 = *(void *)(a2 + 336);
  *(unsigned char *)(a1 + 344) = *(unsigned char *)(a2 + 344);
  *(void *)(a1 + 336) = v8;
  uint64_t v9 = *(void *)(a2 + 352);
  *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
  *(void *)(a1 + 352) = v9;
  *(unsigned char *)(a1 + 361) = *(unsigned char *)(a2 + 361);
  *(unsigned char *)(a1 + 362) = *(unsigned char *)(a2 + 362);
  *(unsigned char *)(a1 + 363) = *(unsigned char *)(a2 + 363);
  *(unsigned char *)(a1 + 364) = *(unsigned char *)(v4 + 1);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(unsigned char *)(a1 + 376) = *(unsigned char *)(v4 + 13);
  return a1;
}

uint64_t getEnumTagSinglePayload for Calendar.DatesByMatching.Iterator(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 377)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.DatesByMatching.Iterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 376) = 0;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 377) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 377) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Calendar.DatesByMatching.Iterator()
{
  return &type metadata for Calendar.DatesByMatching.Iterator;
}

uint64_t specialized RangeReplaceableCollection<>.removeLast()()
{
  uint64_t v1 = v0[1];
  if ((v1 & 0x2000000000000000) == 0)
  {
    if ((*v0 & 0xFFFFFFFFFFFFLL) != 0) {
      goto LABEL_5;
    }
    __break(1u);
  }
  if ((v1 & 0xF00000000000000) == 0)
  {
    __break(1u);
    return result;
  }
LABEL_5:
  String.index(before:)();

  return String.remove(at:)();
}

uint64_t URL.FormatStyle.Component.rawValue.getter()
{
  return qword_18218C628[*v0];
}

void static URL.FormatStyle.ComponentDisplayOption.always.getter(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
}

void static URL.FormatStyle.HostDisplayOption.always.getter(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
}

__n128 URL.FormatStyle.init(scheme:user:password:host:port:path:query:fragment:)@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, char *a4@<X3>, char *a5@<X4>, char *a6@<X5>, char *a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>)
{
  char v9 = *a2;
  char v10 = *a3;
  char v11 = *a4;
  char v12 = a4[24];
  uint64_t v13 = *((void *)a4 + 4);
  char v14 = *a5;
  char v15 = *a6;
  char v16 = *a7;
  char v17 = *a8;
  *(unsigned char *)a9 = *(unsigned char *)a1;
  *(_OWORD *)(a9 + 8) = *(_OWORD *)(a1 + 8);
  *(unsigned char *)(a9 + 24) = v9;
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a9 + 48) = v10;
  *(_OWORD *)(a9 + 56) = *(_OWORD *)(a3 + 8);
  *(unsigned char *)(a9 + 72) = v11;
  *(_OWORD *)(a9 + 80) = *(_OWORD *)(a4 + 8);
  *(unsigned char *)(a9 + 96) = v12;
  *(void *)(a9 + 104) = v13;
  *(unsigned char *)(a9 + 112) = v14;
  *(_OWORD *)(a9 + 120) = *(_OWORD *)(a5 + 8);
  *(unsigned char *)(a9 + 136) = v15;
  *(_OWORD *)(a9 + 144) = *(_OWORD *)(a6 + 8);
  *(unsigned char *)(a9 + 160) = v16;
  *(_OWORD *)(a9 + 168) = *(_OWORD *)(a7 + 8);
  *(unsigned char *)(a9 + 184) = v17;
  __n128 result = *(__n128 *)(a8 + 8);
  *(__n128 *)(a9 + 192) = result;
  return result;
}

uint64_t URL.FormatStyle.format(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  int v203 = *v1;
  uint64_t v5 = *((void *)v1 + 2);
  uint64_t v202 = *((void *)v1 + 1);
  int v206 = v1[24];
  uint64_t v6 = *((void *)v1 + 4);
  uint64_t v204 = *((void *)v1 + 5);
  uint64_t v205 = v6;
  LODWORD(v209) = v1[48];
  unint64_t v7 = *((void *)v1 + 7);
  uint64_t v207 = *((void *)v1 + 8);
  unint64_t v208 = v7;
  int v189 = v1[72];
  uint64_t v8 = *((void *)v1 + 10);
  uint64_t v187 = *((void *)v1 + 11);
  uint64_t v188 = v8;
  int v185 = v1[96];
  uint64_t v186 = *((void *)v1 + 13);
  int v192 = v1[112];
  uint64_t v9 = *((void *)v1 + 15);
  uint64_t v190 = *((void *)v1 + 16);
  uint64_t v191 = v9;
  int v195 = v1[136];
  uint64_t v10 = *((void *)v1 + 18);
  uint64_t v193 = *((void *)v1 + 19);
  uint64_t v194 = v10;
  int v198 = v1[160];
  uint64_t v11 = *((void *)v1 + 21);
  uint64_t v196 = *((void *)v1 + 22);
  uint64_t v197 = v11;
  int v12 = v1[184];
  uint64_t v13 = *((void *)v1 + 24);
  uint64_t v14 = *((void *)v1 + 25);
  uint64_t v200 = v13;
  swift_retain();
  id v15 = (id)v2;
  swift_retain();
  uint64_t v210 = v3;
  int v201 = v12;
  uint64_t v199 = v14;
  if (_foundation_swift_url_feature_enabled())
  {
    if (!v3)
    {
LABEL_208:
      __break(1u);
LABEL_209:

      swift_bridgeObjectRelease();
      LODWORD(v184) = 0;
      uint64_t v183 = 714;
      goto LABEL_211;
    }
    unint64_t v16 = (unint64_t)v15;
    uint64_t v17 = v4;
    id v18 = *(id *)(v3 + 16);
    unint64_t v19 = *(void *)(v3 + 24);
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
  }
  else
  {
    id v20 = objc_msgSend(v15, sel_relativeString);
    id v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    unint64_t v19 = v21;
    uint64_t v17 = v4;
    swift_release();
    swift_release();
    unint64_t v16 = (unint64_t)v15;
  }
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)((uint64_t)v18, v19, 1, (uint64_t)v252);
  outlined init with take of LocalePreferences?((uint64_t)v252, (uint64_t)v251, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  outlined init with take of LocalePreferences?((uint64_t)v252, (uint64_t)&v253, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v253) == 1)
  {
    *(void *)&long long v229 = v16;
    *((void *)&v229 + 1) = v210;
    *(void *)&long long v230 = v17;
    return URL.absoluteString.getter();
  }
  uint64_t v2 = 0;
  v266[2] = v259;
  long long v266[3] = v260;
  v267[0] = v261[0];
  *(_OWORD *)((char *)v267 + 10) = *(_OWORD *)((char *)v261 + 10);
  long long v264 = v255;
  long long v265 = v256;
  v266[0] = v257;
  v266[1] = v258;
  long long v262 = v253;
  long long v263 = v254;
  long long v247 = v259;
  long long v248 = v260;
  v249[0] = v261[0];
  *(_OWORD *)((char *)v249 + 10) = *(_OWORD *)((char *)v261 + 10);
  long long v243 = v255;
  long long v244 = v256;
  long long v245 = v257;
  long long v246 = v258;
  long long v241 = v253;
  long long v242 = v254;
  char v250 = 1;
  long long v238 = 0uLL;
  LOBYTE(v239[0]) = 0;
  *(_OWORD *)((char *)v239 + 8) = 0u;
  *(_OWORD *)((char *)&v239[1] + 8) = 0u;
  *(_OWORD *)((char *)&v239[2] + 8) = 0u;
  *(_OWORD *)((char *)&v239[3] + 8) = 0u;
  *((void *)&v239[4] + 1) = 0;
  LOBYTE(v240[0]) = 1;
  *(_OWORD *)((char *)v240 + 8) = 0u;
  *(_OWORD *)((char *)&v240[1] + 8) = 0u;
  *(_OWORD *)((char *)&v240[2] + 8) = 0u;
  WORD4(v240[3]) = 0;
  uint64_t v23 = v210;
  *(void *)&long long v220 = v16;
  *((void *)&v220 + 1) = v210;
  *(void *)&long long v221 = v17;
  LOBYTE(v211) = v203;
  *((void *)&v211 + 1) = v202;
  *(void *)&long long v212 = v5;
  if (URL.FormatStyle.shouldDisplayComponent(from:basedOn:)((uint64_t)&v220, (unsigned __int8 *)&v211))
  {
    uint64_t v24 = (void *)v264;
    unint64_t v25 = v17;
    if ((void)v264)
    {
      uint64_t v26 = *((void *)&v263 + 1);
      outlined init with take of LocalePreferences?((uint64_t)v251, (uint64_t)&v229, &demangling cache variable for type metadata for URLComponents._URLComponents?);
      outlined retain of URLComponents((uint64_t)&v229);
      uint64_t v27 = v24;
    }
    else if ((BYTE9(v262) & 1) != 0 {
           && (outlined init with take of LocalePreferences?((uint64_t)&v262, (uint64_t)v268, &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)v268, (uint64_t)v274, &demangling cache variable for type metadata for URLParseInfo?), v274[0])&& (*(unsigned char *)(v274[0] + 48) & 1) == 0)
    }
    {
      outlined init with take of LocalePreferences?((uint64_t)v251, (uint64_t)&v229, &demangling cache variable for type metadata for URLComponents._URLComponents?);
      outlined retain of URLComponents((uint64_t)&v229);
      uint64_t v90 = String.subscript.getter();
      uint64_t v26 = MEMORY[0x185301F50](v90);
      uint64_t v27 = v91;
      unint64_t v25 = v17;
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined init with take of LocalePreferences?((uint64_t)v251, (uint64_t)&v229, &demangling cache variable for type metadata for URLComponents._URLComponents?);
      outlined retain of URLComponents((uint64_t)&v229);
      uint64_t v26 = 0;
      uint64_t v27 = 0;
    }
    swift_bridgeObjectRetain();
    outlined release of URLComponents?(v252);
    v28.value._uint64_t countAndFlagsBits = v26;
    v28.value._object = v27;
    URLComponents._URLComponents.setScheme(_:)(v28);
    if (v2) {
      goto LABEL_209;
    }
    swift_bridgeObjectRelease();
    uint64_t v23 = v210;
  }
  else
  {
    unint64_t v25 = v17;
  }
  *(void *)&long long v220 = v16;
  *((void *)&v220 + 1) = v23;
  *(void *)&long long v221 = v25;
  LOBYTE(v211) = v206;
  *((void *)&v211 + 1) = v205;
  *(void *)&long long v212 = v204;
  if (URL.FormatStyle.shouldDisplayComponent(from:basedOn:)((uint64_t)&v220, (unsigned __int8 *)&v211))
  {
    uint64_t v29 = outlined retain of URLComponents((uint64_t)&v241);
    unint64_t v30 = (unint64_t)URLComponents._URLComponents.user.getter(v29);
    unint64_t v32 = v31;
    outlined release of URLComponents?(v252);
    BYTE8(v238) = 0;
    BYTE10(v238) = 0;
    if (v32)
    {
      if ((v32 & 0x1000000000000000) != 0)
      {
        *(void *)&long long v229 = v30;
        *((void *)&v229 + 1) = v32;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        uint64_t v92 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v93 = (unsigned __int16 *)objc_msgSend(v92, sel__fastCharacterContents);
        id v94 = v92;
        if (v93)
        {
          *(void *)&long long v229 = v30;
          *((void *)&v229 + 1) = v32;
          StringProtocol._ephemeralString.getter();
          uint64_t v95 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v96 = objc_msgSend(v95, sel_length);
          swift_unknownObjectRelease();
          char v97 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v93, (uint64_t)v96, 2u, 0);
        }
        else
        {
          char v97 = specialized Sequence.allSatisfy(_:)(v30, v32, 2);
        }
        char v105 = v97;
        uint64_t v35 = swift_bridgeObjectRelease();
        uint64_t v23 = v210;
        if ((v105 & 1) == 0) {
          goto LABEL_25;
        }
      }
      else
      {
        if ((v32 & 0x2000000000000000) != 0)
        {
          uint64_t v34 = HIBYTE(v32) & 0xF;
          *(void *)&long long v229 = v30;
          *((void *)&v229 + 1) = v32 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v33 = (char *)&v229;
        }
        else if ((v30 & 0x1000000000000000) != 0)
        {
          uint64_t v33 = (char *)((v32 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v34 = v30 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v33 = (char *)_StringObject.sharedUTF8.getter();
        }
        uint64_t v35 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v33, v34, 2u, 0);
        if ((v35 & 1) == 0)
        {
LABEL_25:
          uint64_t v36 = HIBYTE(v32) & 0xF;
          if ((v32 & 0x2000000000000000) == 0) {
            uint64_t v36 = v30 & 0xFFFFFFFFFFFFLL;
          }
          if (v36)
          {
            *(void *)&long long v229 = v30;
            *((void *)&v229 + 1) = v32;
            MEMORY[0x1F4188790](v35);
            uint64_t v183 = (uint64_t)&v229;
            LOBYTE(v184) = 2;
            swift_bridgeObjectRetain();
            unsigned __int8 v37 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v182, v30, v32);
            if (v38)
            {
              unint64_t v30 = (unint64_t)v37;
              unint64_t v39 = v38;
              swift_bridgeObjectRelease_n();
            }
            else
            {
              unint64_t v41 = *((void *)&v229 + 1);
              unint64_t v40 = v229;
              swift_bridgeObjectRetain();
              unint64_t v30 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v40, v41, 2u);
              unint64_t v39 = v42;
              swift_bridgeObjectRelease_n();
              uint64_t v23 = v210;
              swift_bridgeObjectRelease();
            }
            unint64_t v32 = v39;
          }
          else
          {
            swift_bridgeObjectRelease();
            unint64_t v30 = 0;
            unint64_t v32 = 0xE000000000000000;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    *((void *)&v239[1] + 1) = v30;
    *(void *)&v239[2] = v32;
  }
  *(void *)&long long v220 = v16;
  *((void *)&v220 + 1) = v23;
  *(void *)&long long v221 = v25;
  LOBYTE(v211) = v209;
  *((void *)&v211 + 1) = v208;
  *(void *)&long long v212 = v207;
  if ((URL.FormatStyle.shouldDisplayComponent(from:basedOn:)((uint64_t)&v220, (unsigned __int8 *)&v211) & 1) == 0) {
    goto LABEL_51;
  }
  uint64_t v43 = outlined retain of URLComponents((uint64_t)&v241);
  unint64_t v44 = (unint64_t)URLComponents._URLComponents.password.getter(v43);
  unint64_t v46 = v45;
  outlined release of URLComponents?(v252);
  BYTE8(v238) = 0;
  BYTE11(v238) = 0;
  if (v46)
  {
    if ((v46 & 0x1000000000000000) != 0)
    {
      *(void *)&long long v229 = v44;
      *((void *)&v229 + 1) = v46;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      uint64_t v98 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v99 = (unsigned __int16 *)objc_msgSend(v98, sel__fastCharacterContents);
      id v100 = v98;
      if (v99)
      {
        *(void *)&long long v229 = v44;
        *((void *)&v229 + 1) = v46;
        StringProtocol._ephemeralString.getter();
        char v101 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v102 = objc_msgSend(v101, sel_length);
        swift_unknownObjectRelease();
        char v103 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v99, (uint64_t)v102, 2u, 0);
      }
      else
      {
        char v103 = specialized Sequence.allSatisfy(_:)(v44, v46, 2);
      }
      char v106 = v103;
      uint64_t v49 = swift_bridgeObjectRelease();
      uint64_t v23 = v210;
      if ((v106 & 1) == 0) {
        goto LABEL_42;
      }
    }
    else
    {
      if ((v46 & 0x2000000000000000) != 0)
      {
        uint64_t v48 = HIBYTE(v46) & 0xF;
        *(void *)&long long v229 = v44;
        *((void *)&v229 + 1) = v46 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v47 = (char *)&v229;
      }
      else if ((v44 & 0x1000000000000000) != 0)
      {
        uint64_t v47 = (char *)((v46 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v48 = v44 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v47 = (char *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v49 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v47, v48, 2u, 0);
      if ((v49 & 1) == 0)
      {
LABEL_42:
        uint64_t v50 = HIBYTE(v46) & 0xF;
        if ((v46 & 0x2000000000000000) == 0) {
          uint64_t v50 = v44 & 0xFFFFFFFFFFFFLL;
        }
        if (v50)
        {
          *(void *)&long long v229 = v44;
          *((void *)&v229 + 1) = v46;
          MEMORY[0x1F4188790](v49);
          uint64_t v183 = (uint64_t)&v229;
          LOBYTE(v184) = 2;
          swift_bridgeObjectRetain();
          uint64_t v51 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v182, v44, v46);
          if (v52)
          {
            unint64_t v44 = (unint64_t)v51;
            unint64_t v53 = v52;
            swift_bridgeObjectRelease_n();
          }
          else
          {
            unint64_t v55 = *((void *)&v229 + 1);
            unint64_t v54 = v229;
            swift_bridgeObjectRetain();
            unint64_t v44 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v54, v55, 2u);
            unint64_t v53 = v56;
            swift_bridgeObjectRelease_n();
            uint64_t v23 = v210;
            swift_bridgeObjectRelease();
          }
          unint64_t v46 = v53;
        }
        else
        {
          swift_bridgeObjectRelease();
          unint64_t v44 = 0;
          unint64_t v46 = 0xE000000000000000;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  *((void *)&v239[2] + 1) = v44;
  *(void *)&v239[3] = v46;
LABEL_51:
  outlined init with take of LocalePreferences?((uint64_t)v266 + 8, (uint64_t)v269, &demangling cache variable for type metadata for String?);
  outlined init with take of LocalePreferences?((uint64_t)v269, (uint64_t)&v272, &demangling cache variable for type metadata for String?);
  unint64_t v57 = v273;
  if (v273)
  {
    uint64_t v58 = v272;
    outlined init with take of LocalePreferences?((uint64_t)v251, (uint64_t)&v229, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    uint64_t v59 = outlined retain of URLComponents((uint64_t)&v229);
  }
  else if ((BYTE12(v262) & 1) != 0 {
         && (outlined init with take of LocalePreferences?((uint64_t)&v262, (uint64_t)v270, &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)v270, (uint64_t)&v271, &demangling cache variable for type metadata for URLParseInfo?), v271)&& (*(unsigned char *)(v271 + 120) & 1) == 0)
  }
  {
    outlined init with take of LocalePreferences?((uint64_t)v251, (uint64_t)&v229, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined retain of URLComponents((uint64_t)&v229);
    uint64_t v82 = String.subscript.getter();
    uint64_t v58 = MEMORY[0x185301F50](v82);
    unint64_t v57 = v83;
    uint64_t v59 = swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of LocalePreferences?((uint64_t)v251, (uint64_t)&v229, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined retain of URLComponents((uint64_t)&v229);
    uint64_t v59 = URLComponents._URLComponents.port.getter();
    if (v60)
    {
      URLComponents._URLComponents.percentEncodedUser.getter();
      uint64_t v62 = v61;
      uint64_t v59 = swift_bridgeObjectRelease();
      if (!v62)
      {
        outlined release of URLComponents?(v252);
        goto LABEL_118;
      }
    }
    uint64_t v58 = 0;
    unint64_t v57 = 0xE000000000000000;
  }
  uint64_t v63 = v58 & 0xFFFFFFFFFFFFLL;
  if ((v57 & 0x2000000000000000) != 0) {
    uint64_t v64 = HIBYTE(v57) & 0xF;
  }
  else {
    uint64_t v64 = v58 & 0xFFFFFFFFFFFFLL;
  }
  if (!v64)
  {
    outlined retain of String?((uint64_t)v269);
    swift_bridgeObjectRelease();
    outlined release of URLComponents?(v252);
    uint64_t v66 = 0;
    unint64_t v68 = 0xE000000000000000;
    uint64_t v23 = v210;
LABEL_108:
    uint64_t v109 = HIBYTE(v68) & 0xF;
    if ((v68 & 0x2000000000000000) == 0) {
      uint64_t v109 = v66 & 0xFFFFFFFFFFFFLL;
    }
    if (v109)
    {
      *(void *)&long long v220 = v16;
      *((void *)&v220 + 1) = v23;
      *(void *)&long long v221 = v25;
      *(void *)&long long v211 = v188;
      *((void *)&v211 + 1) = v187;
      char v110 = URL.FormatStyle.url(_:satisfies:)((uint64_t)&v220, (uint64_t)&v211);
      char v111 = URL.FormatStyle.isIPv4(_:)(v66, v68);
      char v112 = URL.FormatStyle.isIPv6(_:)(v66, v68);
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v113 = specialized URL.UnicodeLookalikeTable.allCharactersInIDNScriptAllowList(in:)(v66, v68);
      if (v113)
      {
        if ((v189 & 1) == 0)
        {
          LODWORD(v209) = 0;
          uint64_t v23 = v210;
          if ((v110 & 1) == 0)
          {
LABEL_116:
            URLComponents._URLComponents.host.setter(v66, v68);
            goto LABEL_119;
          }
LABEL_150:
          swift_bridgeObjectRelease();
          goto LABEL_119;
        }
      }
      else
      {
        uint64_t v113 = specialized URL.UnicodeLookalikeTable.allCharactersAllowedByTLDRules(in:)(v66, v68);
        if ((v189 & 1) == 0)
        {
          LODWORD(v209) = v113 ^ 1;
          uint64_t v23 = v210;
          if ((v110 & 1) == 0) {
            goto LABEL_116;
          }
          goto LABEL_150;
        }
        if ((v113 & 1) == 0)
        {
          if ((v110 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            LODWORD(v209) = 1;
            uint64_t v23 = v210;
            goto LABEL_119;
          }
          LODWORD(v209) = 1;
          unint64_t v137 = v68;
          goto LABEL_166;
        }
      }
      unint64_t v123 = v16;
      unint64_t v208 = v25;
      char v124 = v111 | v112;
      *(void *)&long long v229 = 46;
      *((void *)&v229 + 1) = 0xE100000000000000;
      MEMORY[0x1F4188790](v113);
      uint64_t v183 = (uint64_t)&v229;
      swift_bridgeObjectRetain_n();
      uint64_t v125 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:), (uint64_t)v182, v66, v68);
      swift_bridgeObjectRelease();
      *(void *)&long long v220 = v125;
      uint64_t v207 = v2;
      if (v185 && !((*(void *)(v125 + 16) < 4uLL) | v124 & 1))
      {
        URL.FormatStyle.formatMultiLevelSubdomains(from:forHost:)((uint64_t)&v220);
        uint64_t v2 = 1;
        if (!v186) {
          goto LABEL_160;
        }
      }
      else
      {
        uint64_t v2 = 0;
        if (!v186) {
          goto LABEL_160;
        }
      }
      uint64_t v138 = v220;
      if (*(void *)(v220 + 16) >= 3uLL)
      {
        char v139 = v110;
        if (v124)
        {
LABEL_161:
          swift_bridgeObjectRetain();
          uint64_t v146 = v66;
          unint64_t v137 = v68;
          unint64_t v16 = v123;
LABEL_164:
          swift_bridgeObjectRelease();
          if ((v139 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            uint64_t v23 = v210;
            if (v2) {
              URLComponents._URLComponents.host.setter(v66, v68);
            }
            else {
              swift_bridgeObjectRelease();
            }
            LODWORD(v209) = 0;
            unint64_t v25 = v208;
            goto LABEL_119;
          }
          swift_bridgeObjectRelease();
          LODWORD(v209) = 0;
          uint64_t v66 = v146;
          unint64_t v25 = v208;
LABEL_166:
          uint64_t v23 = v210;
          URLComponents._URLComponents.host.setter(v66, v137);
          goto LABEL_119;
        }
        uint64_t v140 = *(void *)(v220 + 40);
        uint64_t v209 = *(void *)(v220 + 32);
        uint64_t v142 = *(void *)(v220 + 48);
        uint64_t v141 = *(void *)(v220 + 56);
        swift_bridgeObjectRetain();
        uint64_t v143 = MEMORY[0x185301F50](v209, v140, v142, v141);
        uint64_t v145 = v144;
        swift_bridgeObjectRelease();
        LOBYTE(v141) = specialized Set.contains(_:)(v143, v145, v186);
        swift_bridgeObjectRelease();
        unint64_t v16 = v123;
        if ((v141 & 1) == 0)
        {
LABEL_163:
          *(void *)&long long v229 = v220;
          swift_bridgeObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Substring]);
          lazy protocol witness table accessor for type [Substring] and conformance [A]();
          lazy protocol witness table accessor for type Substring and conformance Substring();
          uint64_t v146 = Sequence<>.joined(separator:)();
          unint64_t v137 = v147;
          swift_bridgeObjectRelease();
          goto LABEL_164;
        }
        if (*(void *)(v138 + 16))
        {
          LOBYTE(v2) = 1;
          specialized Array.replaceSubrange<A>(_:with:)(0, 1);
          goto LABEL_163;
        }
        __break(1u);
        goto LABEL_208;
      }
LABEL_160:
      char v139 = v110;
      if (v124) {
        goto LABEL_161;
      }
      unint64_t v16 = v123;
      goto LABEL_163;
    }
    swift_bridgeObjectRelease();
LABEL_118:
    LODWORD(v209) = 0;
    goto LABEL_119;
  }
  if (BYTE8(v267[1]))
  {
    unint64_t v208 = v25;
    *(void *)&long long v229 = v58;
    *((void *)&v229 + 1) = v57;
    MEMORY[0x1F4188790](v59);
    uint64_t v183 = (uint64_t)&v229;
    uint64_t v184 = MEMORY[0x1E4FBC870];
    outlined retain of String?((uint64_t)v269);
    swift_bridgeObjectRetain();
    char v69 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:), (uint64_t)v182, v58, v57);
    if (v70 == 1)
    {
      long long v71 = v229;
      swift_bridgeObjectRetain();
      uint64_t v66 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v71, *((unint64_t *)&v71 + 1), MEMORY[0x1E4FBC870]);
      unint64_t v68 = v72;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v66 = (uint64_t)v69;
      unint64_t v68 = v70;
      swift_bridgeObjectRelease_n();
    }
    uint64_t v23 = v210;
    outlined release of URLComponents?(v252);
    unint64_t v25 = v208;
    if (!v68) {
      goto LABEL_118;
    }
    goto LABEL_108;
  }
  if ((v57 & 0x1000000000000000) != 0)
  {
    outlined retain of String?((uint64_t)v269);
    swift_bridgeObjectRetain();
  }
  else
  {
    if ((v57 & 0x2000000000000000) != 0)
    {
      *(void *)&long long v229 = v58;
      *((void *)&v229 + 1) = v57 & 0xFFFFFFFFFFFFFFLL;
      *(void *)&long long v220 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      *((void *)&v220 + 1) = 0;
      swift_bridgeObjectRetain();
      outlined retain of String?((uint64_t)v269);
      swift_bridgeObjectRetain();
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v229, HIBYTE(v57) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v220, 0, (unsigned __int8 *)&v229, HIBYTE(v57) & 0xF, (uint64_t *)&v211);
      unint64_t v68 = *((void *)&v211 + 1);
      uint64_t v66 = v211;
      swift_release();
    }
    else
    {
      if ((v58 & 0x1000000000000000) != 0)
      {
        int v65 = (unsigned __int8 *)((v57 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        int v65 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        uint64_t v63 = v104;
      }
      *(void *)&long long v229 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      *((void *)&v229 + 1) = 0;
      swift_bridgeObjectRetain();
      outlined retain of String?((uint64_t)v269);
      swift_bridgeObjectRetain();
      uint64_t v66 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v65, v63, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v229, 0, v65, v63);
      unint64_t v68 = v67;
    }
    swift_bridgeObjectRelease();
    if (v68 != 1)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_107;
    }
  }
  *(void *)&long long v229 = v58;
  *((void *)&v229 + 1) = v57;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  char v73 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v74 = objc_msgSend(v73, sel__fastCharacterContents);
  id v75 = v73;
  if (!v74)
  {
    *(void *)&long long v229 = v58;
    *((void *)&v229 + 1) = v57;
    swift_bridgeObjectRetain();
    uint64_t v85 = String.init<A>(_:)();
    unint64_t v86 = v84;
    if ((v84 & 0x1000000000000000) != 0)
    {
      uint64_t v85 = static String._copying(_:)();
      unint64_t v108 = v107;
      swift_bridgeObjectRelease();
      unint64_t v86 = v108;
      if ((v108 & 0x2000000000000000) == 0) {
        goto LABEL_85;
      }
    }
    else if ((v84 & 0x2000000000000000) == 0)
    {
LABEL_85:
      if ((v85 & 0x1000000000000000) != 0)
      {
        char v87 = (unsigned __int8 *)((v86 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v88 = v85 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        char v87 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      *(void *)&long long v229 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      *((void *)&v229 + 1) = 0;
      uint64_t v66 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v87, v88, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v229, 0, v87, v88);
      unint64_t v68 = v89;
      goto LABEL_106;
    }
    *(void *)&long long v229 = v85;
    *((void *)&v229 + 1) = v86 & 0xFFFFFFFFFFFFFFLL;
    *(void *)&long long v220 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    *((void *)&v220 + 1) = 0;
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v229, HIBYTE(v86) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v220, 0, (unsigned __int8 *)&v229, HIBYTE(v86) & 0xF, (uint64_t *)&v211);
    unint64_t v68 = *((void *)&v211 + 1);
    uint64_t v66 = v211;
    swift_release();
LABEL_106:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
LABEL_107:
    outlined release of URLComponents?(v252);
    uint64_t v23 = v210;
    if (!v68) {
      goto LABEL_118;
    }
    goto LABEL_108;
  }
  unint64_t v208 = v16;
  *(void *)&long long v229 = v58;
  *((void *)&v229 + 1) = v57;
  StringProtocol._ephemeralString.getter();
  uint64_t v76 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v77 = objc_msgSend(v76, sel_length);
  uint64_t v78 = swift_unknownObjectRelease();
  MEMORY[0x1F4188790](v78);
  LOBYTE(v183) = 0;
  MEMORY[0x1F4188790](v79);
  v181[2] = v74;
  v181[3] = v77;
  uint64_t v66 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v74, (uint64_t)v77, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), v80, partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), (uint64_t)v181);
  unint64_t v68 = v81;
  swift_bridgeObjectRelease_n();
  outlined release of URLComponents?(v252);
  if (v68)
  {
    uint64_t v23 = v210;
    unint64_t v16 = v208;
    goto LABEL_108;
  }
  LODWORD(v209) = 0;
  uint64_t v23 = v210;
  unint64_t v16 = v208;
LABEL_119:
  *(void *)&long long v220 = v16;
  *((void *)&v220 + 1) = v23;
  *(void *)&long long v221 = v25;
  LOBYTE(v211) = v192;
  *((void *)&v211 + 1) = v191;
  *(void *)&long long v212 = v190;
  if ((URL.FormatStyle.shouldDisplayComponent(from:basedOn:)((uint64_t)&v220, (unsigned __int8 *)&v211) & 1) == 0) {
    goto LABEL_123;
  }
  long long v235 = v247;
  long long v236 = v248;
  v237[0] = v249[0];
  *(_OWORD *)((char *)v237 + 10) = *(_OWORD *)((char *)v249 + 10);
  long long v231 = v243;
  long long v232 = v244;
  long long v233 = v245;
  long long v234 = v246;
  long long v229 = v241;
  long long v230 = v242;
  uint64_t v114 = URLComponents.port.getter();
  BYTE8(v238) = 0;
  BYTE13(v238) = 0;
  if ((v115 & 1) != 0 || (v114 & 0x8000000000000000) == 0)
  {
    *((void *)&v239[4] + 1) = v114;
    LOBYTE(v240[0]) = v115 & 1;
LABEL_123:
    *(void *)&long long v220 = v16;
    *((void *)&v220 + 1) = v23;
    *(void *)&long long v221 = v25;
    LOBYTE(v211) = v195;
    *((void *)&v211 + 1) = v194;
    *(void *)&long long v212 = v193;
    if (URL.FormatStyle.shouldDisplayComponent(from:basedOn:)((uint64_t)&v220, (unsigned __int8 *)&v211))
    {
      outlined init with take of LocalePreferences?((uint64_t)v251, (uint64_t)&v229, &demangling cache variable for type metadata for URLComponents._URLComponents?);
      outlined retain of URLComponents((uint64_t)&v229);
      unint64_t v116 = (unint64_t)URLComponents._URLComponents.path.getter();
      unint64_t v118 = v117;
      outlined release of URLComponents?(v252);
      BYTE8(v238) = 0;
      BYTE14(v238) = 0;
      uint64_t v119 = HIBYTE(v118) & 0xF;
      if ((v118 & 0x2000000000000000) == 0) {
        uint64_t v119 = v116 & 0xFFFFFFFFFFFFLL;
      }
      if (v119)
      {
        unint64_t v120 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v116, v118);
        unint64_t v122 = v121;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v120 = 0;
        unint64_t v122 = 0xE000000000000000;
      }
      swift_bridgeObjectRelease();
      *((void *)&v240[0] + 1) = v120;
      *(void *)&v240[1] = v122;
      uint64_t v23 = v210;
    }
    *(void *)&long long v220 = v16;
    *((void *)&v220 + 1) = v23;
    *(void *)&long long v221 = v25;
    LOBYTE(v211) = v198;
    *((void *)&v211 + 1) = v197;
    *(void *)&long long v212 = v196;
    if ((URL.FormatStyle.shouldDisplayComponent(from:basedOn:)((uint64_t)&v220, (unsigned __int8 *)&v211) & 1) == 0)
    {
LABEL_174:
      *(void *)&long long v220 = v16;
      *((void *)&v220 + 1) = v23;
      *(void *)&long long v221 = v25;
      LOBYTE(v211) = v201;
      *((void *)&v211 + 1) = v200;
      *(void *)&long long v212 = v199;
      if ((URL.FormatStyle.shouldDisplayComponent(from:basedOn:)((uint64_t)&v220, (unsigned __int8 *)&v211) & 1) == 0)
      {
LABEL_191:
        long long v226 = v240[0];
        long long v227 = v240[1];
        v228[0] = v240[2];
        *(_OWORD *)((char *)v228 + 10) = *(_OWORD *)((char *)&v240[2] + 10);
        long long v222 = v239[1];
        long long v223 = v239[2];
        long long v224 = v239[3];
        long long v225 = v239[4];
        long long v220 = v238;
        long long v221 = v239[0];
        long long v216 = v239[4];
        long long v217 = v240[0];
        long long v218 = v240[1];
        v219[0] = v240[2];
        *(_OWORD *)((char *)v219 + 10) = *(_OWORD *)((char *)&v240[2] + 10);
        long long v213 = v239[1];
        long long v214 = v239[2];
        long long v215 = v239[3];
        long long v211 = v238;
        long long v212 = v239[0];
        outlined retain of URLComponents((uint64_t)&v220);
        uint64_t v22 = URL.FormatStyle.generateFormattedString(from:useEncodedHost:)(&v211, v209 & 1);
        outlined release of URLComponents?(v252);
        outlined release of URLComponents((uint64_t)&v220);
        outlined release of URLComponents((uint64_t)&v220);
        return v22;
      }
      uint64_t v151 = outlined retain of URLComponents((uint64_t)&v241);
      unint64_t v152 = (unint64_t)URLComponents._URLComponents.fragment.getter(v151);
      unint64_t v154 = v153;
      outlined release of URLComponents?(v252);
      BYTE8(v238) = 0;
      LOBYTE(v239[0]) = 0;
      if (v154)
      {
        if ((v154 & 0x1000000000000000) != 0)
        {
          *(void *)&long long v229 = v152;
          *((void *)&v229 + 1) = v154;
          lazy protocol witness table accessor for type String and conformance String();
          swift_bridgeObjectRetain();
          StringProtocol._ephemeralString.getter();
          uint64_t v173 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v174 = (unsigned __int16 *)objc_msgSend(v173, sel__fastCharacterContents);
          id v175 = v173;
          if (v174)
          {
            *(void *)&long long v229 = v152;
            *((void *)&v229 + 1) = v154;
            StringProtocol._ephemeralString.getter();
            unint64_t v176 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v177 = objc_msgSend(v176, sel_length);
            swift_unknownObjectRelease();
            char v178 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v174, (uint64_t)v177, 0x40u, 0);
          }
          else
          {
            char v178 = specialized Sequence.allSatisfy(_:)(v152, v154, 64);
          }
          char v180 = v178;
          uint64_t v157 = swift_bridgeObjectRelease();
          if ((v180 & 1) == 0) {
            goto LABEL_182;
          }
        }
        else
        {
          if ((v154 & 0x2000000000000000) != 0)
          {
            uint64_t v156 = HIBYTE(v154) & 0xF;
            *(void *)&long long v229 = v152;
            *((void *)&v229 + 1) = v154 & 0xFFFFFFFFFFFFFFLL;
            uint64_t v155 = (char *)&v229;
          }
          else if ((v152 & 0x1000000000000000) != 0)
          {
            uint64_t v155 = (char *)((v154 & 0xFFFFFFFFFFFFFFFLL) + 32);
            uint64_t v156 = v152 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            uint64_t v155 = (char *)_StringObject.sharedUTF8.getter();
          }
          uint64_t v157 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v155, v156, 0x40u, 0);
          if ((v157 & 1) == 0)
          {
LABEL_182:
            uint64_t v158 = HIBYTE(v154) & 0xF;
            if ((v154 & 0x2000000000000000) == 0) {
              uint64_t v158 = v152 & 0xFFFFFFFFFFFFLL;
            }
            if (v158)
            {
              *(void *)&long long v229 = v152;
              *((void *)&v229 + 1) = v154;
              MEMORY[0x1F4188790](v157);
              uint64_t v183 = (uint64_t)&v229;
              LOBYTE(v184) = 64;
              swift_bridgeObjectRetain();
              uint64_t v159 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0, (uint64_t)v182, v152, v154);
              if (v160)
              {
                unint64_t v152 = (unint64_t)v159;
                unint64_t v161 = v160;
                swift_bridgeObjectRelease_n();
              }
              else
              {
                unint64_t v163 = *((void *)&v229 + 1);
                unint64_t v162 = v229;
                swift_bridgeObjectRetain();
                unint64_t v152 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v162, v163, 0x40u);
                unint64_t v161 = v164;
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease();
              }
              unint64_t v154 = v161;
            }
            else
            {
              swift_bridgeObjectRelease();
              unint64_t v152 = 0;
              unint64_t v154 = 0xE000000000000000;
            }
          }
        }
      }
      swift_bridgeObjectRelease();
      *((void *)&v240[2] + 1) = v152;
      *(void *)&v240[3] = v154;
      goto LABEL_191;
    }
    uint64_t v126 = outlined retain of URLComponents((uint64_t)&v241);
    unint64_t v127 = (unint64_t)URLComponents._URLComponents.query.getter(v126);
    unint64_t v129 = v128;
    outlined release of URLComponents?(v252);
    BYTE8(v238) = 0;
    HIBYTE(v238) = 0;
    if (v129)
    {
      if ((v129 & 0x1000000000000000) != 0)
      {
        *(void *)&long long v229 = v127;
        *((void *)&v229 + 1) = v129;
        unint64_t v166 = lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        unint64_t v208 = v166;
        StringProtocol._ephemeralString.getter();
        uint64_t v167 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v168 = (unsigned __int16 *)objc_msgSend(v167, sel__fastCharacterContents);
        id v169 = v167;
        if (v168)
        {
          *(void *)&long long v229 = v127;
          *((void *)&v229 + 1) = v129;
          StringProtocol._ephemeralString.getter();
          unint64_t v170 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v171 = objc_msgSend(v170, sel_length);
          swift_unknownObjectRelease();
          char v172 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v168, (uint64_t)v171, 0x40u, 0);
        }
        else
        {
          char v172 = specialized Sequence.allSatisfy(_:)(v127, v129, 64);
        }
        char v179 = v172;
        uint64_t v132 = swift_bridgeObjectRelease();
        if ((v179 & 1) == 0) {
          goto LABEL_144;
        }
      }
      else
      {
        if ((v129 & 0x2000000000000000) != 0)
        {
          uint64_t v131 = HIBYTE(v129) & 0xF;
          *(void *)&long long v229 = v127;
          *((void *)&v229 + 1) = v129 & 0xFFFFFFFFFFFFFFLL;
          long long v130 = (char *)&v229;
        }
        else if ((v127 & 0x1000000000000000) != 0)
        {
          long long v130 = (char *)((v129 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v131 = v127 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          long long v130 = (char *)_StringObject.sharedUTF8.getter();
        }
        uint64_t v132 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v130, v131, 0x40u, 0);
        if ((v132 & 1) == 0)
        {
LABEL_144:
          uint64_t v133 = HIBYTE(v129) & 0xF;
          if ((v129 & 0x2000000000000000) == 0) {
            uint64_t v133 = v127 & 0xFFFFFFFFFFFFLL;
          }
          if (v133)
          {
            *(void *)&long long v229 = v127;
            *((void *)&v229 + 1) = v129;
            MEMORY[0x1F4188790](v132);
            uint64_t v183 = (uint64_t)&v229;
            LOBYTE(v184) = 64;
            swift_bridgeObjectRetain();
            uint64_t v134 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v182, v127, v129);
            if (v135)
            {
              unint64_t v127 = (unint64_t)v134;
              unint64_t v136 = v135;
              swift_bridgeObjectRelease_n();
            }
            else
            {
              unint64_t v149 = *((void *)&v229 + 1);
              unint64_t v148 = v229;
              swift_bridgeObjectRetain();
              unint64_t v127 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v148, v149, 0x40u);
              unint64_t v136 = v150;
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
            }
            unint64_t v129 = v136;
          }
          else
          {
            swift_bridgeObjectRelease();
            unint64_t v127 = 0;
            unint64_t v129 = 0xE000000000000000;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    *((void *)&v240[1] + 1) = v127;
    *(void *)&v240[2] = v129;
    uint64_t v23 = v210;
    goto LABEL_174;
  }
  LODWORD(v184) = 0;
  uint64_t v183 = 764;
LABEL_211:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void static URL.FormatStyle.ComponentDisplayOption.never.getter(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
}

Swift::Int static URL.FormatStyle.ComponentDisplayOption.omitIfHTTPFamily.getter@<X0>(uint64_t a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v1 = static _SetStorage.allocate(capacity:)();
  char v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = v1 + 56;
  while (1)
  {
    char v5 = v2;
    uint64_t v6 = (char *)&outlined read-only object #0 of static URL.FormatStyle.ComponentDisplayOption.omitIfHTTPFamily.getter
       + 16 * v3;
    uint64_t v8 = *((void *)v6 + 4);
    uint64_t v7 = *((void *)v6 + 5);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int result = Hasher._finalize()();
    uint64_t v10 = -1 << *(unsigned char *)(v1 + 32);
    unint64_t v11 = result & ~v10;
    unint64_t v12 = v11 >> 6;
    uint64_t v13 = *(void *)(v4 + 8 * (v11 >> 6));
    uint64_t v14 = 1 << v11;
    if (((1 << v11) & v13) == 0) {
      break;
    }
    uint64_t v15 = *(void *)(v1 + 48);
    unint64_t v16 = (void *)(v15 + 16 * v11);
    if (*v16 != v8 || v16[1] != v7)
    {
      Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v4 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            goto LABEL_18;
          }
          unint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_3:
    char v2 = 1;
    uint64_t v3 = 1;
    if (v5)
    {
      Swift::Int result = swift_arrayDestroy();
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = v1;
      return result;
    }
  }
LABEL_18:
  *(void *)(v4 + 8 * v12) = v14 | v13;
  unint64_t v21 = (void *)(*(void *)(v1 + 48) + 16 * v11);
  *unint64_t v21 = v8;
  v21[1] = v7;
  uint64_t v22 = *(void *)(v1 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (!v23)
  {
    *(void *)(v1 + 16) = v24;
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t URL.FormatStyle.hash(into:)(uint64_t a1)
{
  char v2 = v1;
  uint64_t v5 = *((void *)v2 + 1);
  uint64_t v4 = *((void *)v2 + 2);
  Swift::UInt v6 = v2[24];
  uint64_t v7 = *((void *)v2 + 5);
  Swift::UInt v20 = v2[48];
  uint64_t v8 = *((void *)v2 + 8);
  uint64_t v13 = *((void *)v2 + 4);
  uint64_t v14 = *((void *)v2 + 7);
  Swift::UInt v21 = v2[72];
  uint64_t v9 = *((void *)v2 + 11);
  Swift::UInt8 v22 = v2[96];
  uint64_t v10 = *((void *)v2 + 13);
  Swift::UInt v23 = v2[112];
  uint64_t v15 = *((void *)v2 + 10);
  uint64_t v16 = *((void *)v2 + 15);
  uint64_t v24 = *((void *)v2 + 16);
  Swift::UInt v25 = v2[136];
  uint64_t v17 = *((void *)v2 + 18);
  uint64_t v26 = *((void *)v2 + 19);
  Swift::UInt v27 = v2[160];
  uint64_t v18 = *((void *)v2 + 21);
  uint64_t v28 = *((void *)v2 + 22);
  Swift::UInt v29 = v2[184];
  uint64_t v11 = *((void *)v2 + 25);
  uint64_t v19 = *((void *)v2 + 24);
  Hasher._combine(_:)(*v2);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_18218C628[(char)v5]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v6);
  if (v7)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_18218C628[(char)v13]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v7);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v20);
  if (v8)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_18218C628[(char)v14]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v8);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v21);
  if (v9)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_18218C628[(char)v15]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    specialized Set.hash(into:)(a1, v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  Hasher._combine(_:)(v22);
  if (v10)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v10);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v23);
  if (v24)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_18218C628[(char)v16]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v24);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v25);
  if (v26)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_18218C628[(char)v17]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v26);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v27);
  if (v28)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_18218C628[(char)v18]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v28);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v29);
  if (v11)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_18218C628[(char)v19]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v11);
  }
  else
  {
    Hasher._combine(_:)(0);
  }

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URL.FormatStyle.CodingKeys()
{
  uint64_t result = 0x656D65686373;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1919251317;
      break;
    case 2:
      uint64_t result = 0x64726F7773736170;
      break;
    case 3:
      uint64_t result = 1953722216;
      break;
    case 4:
      uint64_t result = 1953656688;
      break;
    case 5:
      uint64_t result = 1752457584;
      break;
    case 6:
      uint64_t result = 0x7972657571;
      break;
    case 7:
      uint64_t result = 0x746E656D67617266;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.FormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.FormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t URL.FormatStyle.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.FormatStyle.CodingKeys>);
  uint64_t v42 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v6 = *v1;
  uint64_t v7 = *((void *)v1 + 1);
  uint64_t v8 = *((void *)v1 + 2);
  int v49 = v1[24];
  uint64_t v9 = *((void *)v1 + 4);
  uint64_t v40 = *((void *)v1 + 5);
  uint64_t v41 = v9;
  int v39 = v1[48];
  uint64_t v10 = *((void *)v1 + 7);
  uint64_t v37 = *((void *)v1 + 8);
  uint64_t v38 = v10;
  int v32 = v1[72];
  uint64_t v11 = *((void *)v1 + 11);
  uint64_t v33 = *((void *)v1 + 10);
  uint64_t v34 = v11;
  int v36 = v1[96];
  uint64_t v35 = *((void *)v1 + 13);
  int v29 = v1[112];
  uint64_t v12 = *((void *)v1 + 16);
  uint64_t v30 = *((void *)v1 + 15);
  uint64_t v31 = v12;
  int v26 = v1[136];
  uint64_t v27 = *((void *)v1 + 18);
  uint64_t v28 = *((void *)v1 + 19);
  int v23 = v1[160];
  uint64_t v24 = *((void *)v1 + 21);
  uint64_t v25 = *((void *)v1 + 22);
  HIDWORD(v20) = v1[184];
  uint64_t v21 = *((void *)v1 + 24);
  uint64_t v22 = *((void *)v1 + 25);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys();
  uint64_t v13 = v3;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v44 = v6;
  uint64_t v45 = v7;
  uint64_t v46 = v8;
  char v50 = 0;
  lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption();
  uint64_t v14 = v43;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v14) {
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v5, v3);
  }
  uint64_t v16 = v37;
  uint64_t v17 = v38;
  char v18 = v39;
  char v44 = v49;
  uint64_t v19 = v42;
  uint64_t v45 = v41;
  uint64_t v46 = v40;
  char v50 = 1;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  char v44 = v18;
  uint64_t v45 = v17;
  uint64_t v46 = v16;
  char v50 = 2;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  char v44 = v32;
  uint64_t v45 = v33;
  uint64_t v46 = v34;
  char v47 = v36;
  uint64_t v48 = v35;
  char v50 = 3;
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  char v44 = v29;
  uint64_t v45 = v30;
  uint64_t v46 = v31;
  char v50 = 4;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  char v44 = v26;
  uint64_t v45 = v27;
  uint64_t v46 = v28;
  char v50 = 5;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  char v44 = v23;
  uint64_t v45 = v24;
  uint64_t v46 = v25;
  char v50 = 6;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  char v44 = BYTE4(v20);
  uint64_t v45 = v21;
  uint64_t v46 = v22;
  char v50 = 7;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v5, v13);
}

Swift::Int URL.FormatStyle.hashValue.getter()
{
  Hasher.init(_seed:)();
  URL.FormatStyle.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t URL.FormatStyle.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URL.FormatStyle.CodingKeys>);
  uint64_t v5 = *(void *)(v123 - 8);
  MEMORY[0x1F4188790](v123);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v61 = a2;
  uint64_t v62 = v5;
  LOBYTE(v63) = 0;
  lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v60 = v76;
  uint64_t v9 = v78;
  uint64_t v8 = v79;
  LOBYTE(v63) = 1;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v10 = (uint64_t)a1;
  uint64_t v58 = v9;
  uint64_t v59 = v8;
  LODWORD(v9) = v76;
  uint64_t v12 = v78;
  uint64_t v11 = v79;
  LOBYTE(v63) = 2;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v54 = v9;
  uint64_t v55 = v12;
  uint64_t v57 = v11;
  LODWORD(v11) = v76;
  uint64_t v13 = v79;
  uint64_t v53 = v78;
  LOBYTE(v63) = 3;
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v52 = v13;
  int v48 = v76;
  int v49 = v11;
  uint64_t v15 = v78;
  uint64_t v14 = v79;
  LODWORD(v12) = v80;
  LOBYTE(v63) = 4;
  uint64_t v56 = v82;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v51 = 0;
  int v45 = v12;
  *(void *)&long long v46 = v15;
  *((void *)&v46 + 1) = v14;
  int v43 = v76;
  uint64_t v16 = v79;
  uint64_t v44 = v78;
  LOBYTE(v63) = 5;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v47 = v16;
  LODWORD(v12) = v76;
  uint64_t v18 = v78;
  uint64_t v17 = v79;
  LOBYTE(v63) = 6;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v50 = v17;
  int v41 = v12;
  uint64_t v42 = v18;
  LODWORD(v12) = v76;
  uint64_t v20 = v78;
  uint64_t v19 = v79;
  char v111 = 7;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v7, v123);
  LODWORD(v51) = v112;
  uint64_t v62 = *((void *)&v113 + 1);
  uint64_t v123 = v113;
  LOBYTE(v63) = v60;
  *((void *)&v63 + 1) = v58;
  char v21 = v12;
  int v39 = v12;
  *(void *)&long long v64 = v59;
  BYTE8(v64) = v54;
  *(void *)&long long v65 = v55;
  *((void *)&v65 + 1) = v57;
  uint64_t v22 = v19;
  uint64_t v23 = v57;
  LOBYTE(v66) = v49;
  uint64_t v40 = v20;
  uint64_t v24 = v52;
  *((void *)&v66 + 1) = v53;
  *(void *)&long long v67 = v52;
  BYTE8(v67) = v48;
  uint64_t v25 = *((void *)&v46 + 1);
  long long v68 = v46;
  LOBYTE(v69) = v45;
  *((void *)&v69 + 1) = v56;
  LOBYTE(v70) = v43;
  uint64_t v26 = v47;
  *((void *)&v70 + 1) = v44;
  *(void *)&long long v71 = v47;
  BYTE8(v71) = v41;
  *(void *)&long long v72 = v42;
  *((void *)&v72 + 1) = v50;
  LOBYTE(v73) = v21;
  *((void *)&v73 + 1) = v20;
  *(void *)&long long v74 = v22;
  uint64_t v27 = v22;
  BYTE8(v74) = v112;
  long long v75 = v113;
  outlined retain of URL.FormatStyle((uint64_t)&v63);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v28 = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v29 = v27;
  swift_bridgeObjectRelease();
  long long v30 = v74;
  uint64_t v31 = v61;
  v61[10] = v73;
  v31[11] = v30;
  v31[12] = v75;
  long long v32 = v70;
  v31[6] = v69;
  v31[7] = v32;
  long long v33 = v72;
  v31[8] = v71;
  v31[9] = v33;
  long long v34 = v66;
  v31[2] = v65;
  v31[3] = v34;
  long long v35 = v68;
  v31[4] = v67;
  unsigned char v31[5] = v35;
  long long v36 = v64;
  *uint64_t v31 = v63;
  v31[1] = v36;
  __swift_destroy_boxed_opaque_existential_1(v10);
  unsigned __int8 v76 = v60;
  *(_DWORD *)id v77 = v122[0];
  *(_DWORD *)&v77[3] = *(_DWORD *)((char *)v122 + 3);
  uint64_t v78 = v58;
  uint64_t v79 = v59;
  unsigned __int8 v80 = v54;
  *(_DWORD *)unint64_t v81 = *(_DWORD *)v121;
  *(_DWORD *)&v81[3] = *(_DWORD *)&v121[3];
  uint64_t v82 = v55;
  uint64_t v83 = v23;
  char v84 = v49;
  *(_DWORD *)&v85[3] = *(_DWORD *)&v120[3];
  *(_DWORD *)uint64_t v85 = *(_DWORD *)v120;
  uint64_t v86 = v53;
  uint64_t v87 = v24;
  char v88 = v48;
  *(_DWORD *)unint64_t v89 = *(_DWORD *)v119;
  *(_DWORD *)&v89[3] = *(_DWORD *)&v119[3];
  uint64_t v90 = v46;
  uint64_t v91 = v28;
  char v92 = v45;
  *(_DWORD *)uint64_t v93 = *(_DWORD *)v118;
  *(_DWORD *)&v93[3] = *(_DWORD *)&v118[3];
  uint64_t v94 = v56;
  char v95 = v43;
  *(_DWORD *)&v96[3] = *(_DWORD *)&v117[3];
  *(_DWORD *)id v96 = *(_DWORD *)v117;
  uint64_t v97 = v44;
  uint64_t v98 = v26;
  char v99 = v41;
  *(_DWORD *)&v100[3] = *(_DWORD *)&v116[3];
  *(_DWORD *)id v100 = *(_DWORD *)v116;
  uint64_t v101 = v42;
  uint64_t v102 = v50;
  char v103 = v39;
  *(_DWORD *)uint64_t v104 = *(_DWORD *)v115;
  *(_DWORD *)&v104[3] = *(_DWORD *)&v115[3];
  uint64_t v105 = v40;
  uint64_t v106 = v29;
  char v107 = v51;
  *(_DWORD *)&v108[3] = *(_DWORD *)&v114[3];
  *(_DWORD *)unint64_t v108 = *(_DWORD *)v114;
  uint64_t v109 = v123;
  uint64_t v110 = v62;
  return outlined release of URL.FormatStyle((uint64_t)&v76);
}

uint64_t protocol witness for Decodable.init(from:) in conformance URL.FormatStyle@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return URL.FormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URL.FormatStyle(void *a1)
{
  return URL.FormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance URL.FormatStyle()
{
  Hasher.init(_seed:)();
  URL.FormatStyle.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URL.FormatStyle()
{
  Hasher.init(_seed:)();
  URL.FormatStyle.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t URL.FormatStyle.Component.description.getter()
{
  uint64_t result = 0x656D65686373;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x656D616E72657375;
      break;
    case 2:
      uint64_t result = 0x64726F7773736170;
      break;
    case 3:
      uint64_t result = 1953722216;
      break;
    case 4:
      uint64_t result = 1953656688;
      break;
    case 5:
      uint64_t result = 1752457584;
      break;
    case 6:
      uint64_t result = 0x7972657571;
      break;
    case 7:
      uint64_t result = 0x746E656D67617266;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t URL.FormatStyle.Component.init(rawValue:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 1;
  switch(result)
  {
    case 1:
      char v2 = 0;
      goto LABEL_3;
    case 2:
LABEL_3:
      *a2 = v2;
      return result;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      goto LABEL_6;
    case 4:
      *a2 = 2;
      return result;
    case 8:
      *a2 = 3;
      return result;
    case 16:
      *a2 = 4;
      return result;
    case 32:
      *a2 = 5;
      return result;
    case 64:
      *a2 = 6;
      return result;
    default:
      if (result == 128) {
        *a2 = 7;
      }
      else {
LABEL_6:
      }
        *a2 = 8;
      return result;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance URL.FormatStyle.Component(char *a1, char *a2)
{
  return qword_18218C628[*a1] == qword_18218C628[*a2];
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance URL.FormatStyle.Component@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  return URL.FormatStyle.Component.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance URL.FormatStyle.Component(void *a1@<X8>)
{
  *a1 = qword_18218C628[*v1];
}

uint64_t protocol witness for Decodable.init(from:) in conformance URL.FormatStyle.Component()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URL.FormatStyle.Component()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance URL.FormatStyle.Component()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_18218C628[v1]);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance URL.FormatStyle.Component()
{
  Hasher._combine(_:)(qword_18218C628[*v0]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URL.FormatStyle.Component()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_18218C628[v1]);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.FormatStyle.Component()
{
  uint64_t result = 0x656D65686373;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x656D616E72657375;
      break;
    case 2:
      uint64_t result = 0x64726F7773736170;
      break;
    case 3:
      uint64_t result = 1953722216;
      break;
    case 4:
      uint64_t result = 1953656688;
      break;
    case 5:
      uint64_t result = 1752457584;
      break;
    case 6:
      uint64_t result = 0x7972657571;
      break;
    case 7:
      uint64_t result = 0x746E656D67617266;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t URL.FormatStyle.ComponentDisplayCondition.description.getter()
{
  uint64_t v1 = *v0;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  unint64_t v2 = 0xE600000000000000;
  uint64_t v3 = 0x656D65686373;
  switch(v1)
  {
    case 1:
      unint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x656D616E72657375;
      break;
    case 2:
      unint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x64726F7773736170;
      break;
    case 3:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1953722216;
      break;
    case 4:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1953656688;
      break;
    case 5:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1752457584;
      break;
    case 6:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x7972657571;
      break;
    case 7:
      unint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x746E656D67617266;
      break;
    default:
      break;
  }
  unint64_t v4 = v2;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0x7365686374616D20;
  v5._object = (void *)0xE900000000000020;
  String.append(_:)(v5);
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = Set.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2123369;
}

uint64_t URL.FormatStyle.ComponentDisplayCondition.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.FormatStyle.ComponentDisplayCondition.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = *v1;
  v10[0] = *((void *)v1 + 1);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = v8;
  char v12 = 0;
  lazy protocol witness table accessor for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10[1] = v10[0];
    char v11 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
    lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t URL.FormatStyle.ComponentDisplayCondition.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URL.FormatStyle.ComponentDisplayCondition.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v14 = 0;
    lazy protocol witness table accessor for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v9 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
    char v13 = 1;
    lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v10 = v12[1];
    *(unsigned char *)a2 = v9;
    *(void *)(a2 + 8) = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys()
{
  if (*v0) {
    return 0x6D65726975716572;
  }
  else {
    return 0x6E656E6F706D6F63;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized URL.FormatStyle.ComponentDisplayCondition.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance URL.FormatStyle.ComponentDisplayCondition@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return URL.FormatStyle.ComponentDisplayCondition.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URL.FormatStyle.ComponentDisplayCondition(void *a1)
{
  return URL.FormatStyle.ComponentDisplayCondition.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance URL.FormatStyle.ComponentDisplayCondition()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_18218C628[v1]);
  specialized Set.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance URL.FormatStyle.ComponentDisplayCondition(uint64_t a1)
{
  uint64_t v3 = *((void *)v1 + 1);
  Hasher._combine(_:)(qword_18218C628[*v1]);

  specialized Set.hash(into:)(a1, v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URL.FormatStyle.ComponentDisplayCondition()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_18218C628[v1]);
  specialized Set.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance URL.FormatStyle.ComponentDisplayCondition(char *a1, char *a2)
{
  if (qword_18218C628[*a1] == qword_18218C628[*a2]) {
    return specialized static Set.== infix(_:_:)(*((void *)a1 + 1), *((void *)a2 + 1));
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance URL.FormatStyle.ComponentDisplayOption.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URL.FormatStyle.ComponentDisplayOption.Option()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t URL.FormatStyle.ComponentDisplayOption.description.getter()
{
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v1 = *(void *)(v0 + 16);
  if (*(unsigned char *)v0)
  {
    if (!v1) {
      return 0x737961776C61;
    }
    uint64_t v3 = 0x656D65686373;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    unint64_t v11 = 0xD000000000000015;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    uint64_t v4 = (void *)0xE600000000000000;
    switch((char)v2)
    {
      case 1:
        goto LABEL_6;
      case 2:
        goto LABEL_9;
      case 3:
        goto LABEL_10;
      case 4:
        goto LABEL_11;
      case 5:
        goto LABEL_12;
      case 6:
        goto LABEL_13;
      case 7:
        goto LABEL_14;
      default:
        break;
    }
  }
  else
  {
    if (!v1) {
      return 0x726576656ELL;
    }
    uint64_t v3 = 0x656D65686373;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    unint64_t v11 = 0xD000000000000013;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    uint64_t v4 = (void *)0xE600000000000000;
    switch((char)v2)
    {
      case 1:
LABEL_6:
        uint64_t v4 = (void *)0xE800000000000000;
        uint64_t v3 = 0x656D616E72657375;
        break;
      case 2:
LABEL_9:
        uint64_t v4 = (void *)0xE800000000000000;
        uint64_t v3 = 0x64726F7773736170;
        break;
      case 3:
LABEL_10:
        uint64_t v4 = (void *)0xE400000000000000;
        uint64_t v3 = 1953722216;
        break;
      case 4:
LABEL_11:
        uint64_t v4 = (void *)0xE400000000000000;
        uint64_t v3 = 1953656688;
        break;
      case 5:
LABEL_12:
        uint64_t v4 = (void *)0xE400000000000000;
        uint64_t v3 = 1752457584;
        break;
      case 6:
LABEL_13:
        uint64_t v4 = (void *)0xE500000000000000;
        uint64_t v3 = 0x7972657571;
        break;
      case 7:
LABEL_14:
        uint64_t v4 = (void *)0xE800000000000000;
        uint64_t v3 = 0x746E656D67617266;
        break;
      default:
        break;
    }
  }
  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v4;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 0x7365686374616D20;
  v7._object = (void *)0xE900000000000020;
  String.append(_:)(v7);
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = Set.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 2123369;
  v9._object = (void *)0xE300000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 41;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return v11;
}

uint64_t static URL.FormatStyle.ComponentDisplayOption.displayWhen(_:matches:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static URL.FormatStyle.ComponentDisplayOption.displayWhen(_:matches:)(a1, a2, 1, a3);
}

uint64_t static URL.FormatStyle.ComponentDisplayOption.omitWhen(_:matches:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static URL.FormatStyle.ComponentDisplayOption.displayWhen(_:matches:)(a1, a2, 0, a3);
}

uint64_t static URL.FormatStyle.ComponentDisplayOption.displayWhen(_:matches:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a1;
  *(unsigned char *)a4 = a3;
  *(void *)(a4 + 8) = v4;
  *(void *)(a4 + 16) = a2;
  return swift_bridgeObjectRetain();
}

void URL.FormatStyle.ComponentDisplayOption.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v5 = *((void *)v2 + 1);
  uint64_t v4 = *((void *)v2 + 2);
  Hasher._combine(_:)(*v2);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_18218C628[(char)v5]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys()
{
  if (*v0) {
    return 0x6F697469646E6F63;
  }
  else {
    return 0x6E6F6974706FLL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized URL.FormatStyle.ComponentDisplayOption.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t URL.FormatStyle.ComponentDisplayOption.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.FormatStyle.ComponentDisplayOption.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  Swift::String v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = *v1;
  uint64_t v9 = *((void *)v1 + 1);
  uint64_t v11 = *((void *)v1 + 2);
  uint64_t v12 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = v8;
  char v15 = 0;
  lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v13 = v12;
    uint64_t v14 = v11;
    char v15 = 1;
    lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int URL.FormatStyle.ComponentDisplayOption.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  uint64_t v3 = *((void *)v0 + 1);
  uint64_t v2 = *((void *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_18218C628[(char)v3]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)((uint64_t)v5, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t URL.FormatStyle.ComponentDisplayOption.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URL.FormatStyle.ComponentDisplayOption.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v14 = 0;
    lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v9 = v13[0];
    char v14 = 1;
    lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v12 = v13[0];
    uint64_t v11 = v13[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)a2 = v9;
    *(void *)(a2 + 8) = v12;
    *(void *)(a2 + 16) = v11;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t URL.FormatStyle.HostDisplayOption.Option.encode(to:)(void *a1, int a2)
{
  int v18 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys>);
  uint64_t v16 = *(void *)(v3 - 8);
  uint64_t v17 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys>);
  uint64_t v6 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  char v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.FormatStyle.HostDisplayOption.Option.CodingKeys>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
  if (v18)
  {
    char v20 = 1;
    lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    char v19 = 0;
    lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v15);
  }
  return (*v13)(v12, v9);
}

uint64_t protocol witness for Decodable.init(from:) in conformance URL.FormatStyle.ComponentDisplayOption@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return URL.FormatStyle.ComponentDisplayOption.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URL.FormatStyle.ComponentDisplayOption(void *a1)
{
  return URL.FormatStyle.ComponentDisplayOption.encode(to:)(a1);
}

void protocol witness for Hashable.hash(into:) in conformance URL.FormatStyle.ComponentDisplayOption(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v5 = *((void *)v2 + 1);
  uint64_t v4 = *((void *)v2 + 2);
  Hasher._combine(_:)(*v2);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_18218C628[(char)v5]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URL.FormatStyle.ComponentDisplayOption()
{
  Swift::UInt v1 = *v0;
  uint64_t v3 = *((void *)v0 + 1);
  uint64_t v2 = *((void *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_18218C628[(char)v3]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)((uint64_t)v5, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys()
{
  if (*v0) {
    return 0x6579616C70736964;
  }
  else {
    return 0x64657474696D6FLL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized URL.FormatStyle.HostDisplayOption.Option.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance URL.FormatStyle.HostDisplayOption.Option@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized URL.FormatStyle.HostDisplayOption.Option.init(from:)(a1);
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URL.FormatStyle.HostDisplayOption.Option(void *a1)
{
  return URL.FormatStyle.HostDisplayOption.Option.encode(to:)(a1, *v1);
}

uint64_t URL.FormatStyle.HostDisplayOption.description.getter()
{
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v1 = *(void *)(v0 + 16);
  if (*(unsigned char *)v0)
  {
    int v3 = *(unsigned __int8 *)(v0 + 24);
    if (v1)
    {
      uint64_t v4 = 0x656D65686373;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      uint64_t v5 = (void *)0xE600000000000000;
      switch((char)v2)
      {
        case 1:
          uint64_t v5 = (void *)0xE800000000000000;
          uint64_t v4 = 0x656D616E72657375;
          break;
        case 2:
          uint64_t v5 = (void *)0xE800000000000000;
          uint64_t v4 = 0x64726F7773736170;
          break;
        case 3:
          uint64_t v5 = (void *)0xE400000000000000;
          uint64_t v4 = 1953722216;
          break;
        case 4:
          uint64_t v5 = (void *)0xE400000000000000;
          uint64_t v4 = 1953656688;
          break;
        case 5:
          uint64_t v5 = (void *)0xE400000000000000;
          uint64_t v4 = 1752457584;
          break;
        case 6:
          uint64_t v5 = (void *)0xE500000000000000;
          uint64_t v4 = 0x7972657571;
          break;
        case 7:
          uint64_t v5 = (void *)0xE800000000000000;
          uint64_t v4 = 0x746E656D67617266;
          break;
        default:
          break;
      }
      v11._uint64_t countAndFlagsBits = v4;
      v11._object = v5;
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      v12._uint64_t countAndFlagsBits = 0x7365686374616D20;
      v12._object = (void *)0xE900000000000020;
      String.append(_:)(v12);
      swift_bridgeObjectRetain();
      v13._uint64_t countAndFlagsBits = Set.description.getter();
      String.append(_:)(v13);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      uint64_t v9 = 2123369;
      char v8 = (void *)0xE300000000000000;
    }
    else
    {
      char v8 = (void *)0xEC0000006E6F6974;
      uint64_t v9 = 0x69646E6F63206F6ELL;
    }
    unint64_t v27 = 0;
    _StringGuts.grow(_:)(81);
    v14._uint64_t countAndFlagsBits = 0xD000000000000024;
    v14._object = (void *)0x80000001823AD410;
    String.append(_:)(v14);
    if (v3) {
      uint64_t v15 = 1702195828;
    }
    else {
      uint64_t v15 = 0x65736C6166;
    }
    if (v3) {
      unint64_t v16 = 0xE400000000000000;
    }
    else {
      unint64_t v16 = 0xE500000000000000;
    }
    unint64_t v17 = v16;
    String.append(_:)(*(Swift::String *)&v15);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    v18._object = (void *)0x80000001823AD440;
    String.append(_:)(v18);
    swift_bridgeObjectRetain();
    v19._uint64_t countAndFlagsBits = Set.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = 0x7469646E6F63202CLL;
    v20._object = (void *)0xED0000203A6E6F69;
    String.append(_:)(v20);
    v21._uint64_t countAndFlagsBits = v9;
    v21._object = v8;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!v1) {
      return 0x726576656ELL;
    }
    uint64_t v6 = 0x656D65686373;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    unint64_t v27 = 0xD000000000000013;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    uint64_t v7 = (void *)0xE600000000000000;
    switch((char)v2)
    {
      case 1:
        uint64_t v7 = (void *)0xE800000000000000;
        uint64_t v6 = 0x656D616E72657375;
        break;
      case 2:
        uint64_t v7 = (void *)0xE800000000000000;
        uint64_t v6 = 0x64726F7773736170;
        break;
      case 3:
        uint64_t v7 = (void *)0xE400000000000000;
        uint64_t v6 = 1953722216;
        break;
      case 4:
        uint64_t v7 = (void *)0xE400000000000000;
        uint64_t v6 = 1953656688;
        break;
      case 5:
        uint64_t v7 = (void *)0xE400000000000000;
        uint64_t v6 = 1752457584;
        break;
      case 6:
        uint64_t v7 = (void *)0xE500000000000000;
        uint64_t v6 = 0x7972657571;
        break;
      case 7:
        uint64_t v7 = (void *)0xE800000000000000;
        uint64_t v6 = 0x746E656D67617266;
        break;
      default:
        break;
    }
    v22._uint64_t countAndFlagsBits = v6;
    v22._object = v7;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._uint64_t countAndFlagsBits = 0x7365686374616D20;
    v23._object = (void *)0xE900000000000020;
    String.append(_:)(v23);
    swift_bridgeObjectRetain();
    v24._uint64_t countAndFlagsBits = Set.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25._uint64_t countAndFlagsBits = 2123369;
    v25._object = (void *)0xE300000000000000;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._uint64_t countAndFlagsBits = 41;
    v26._object = (void *)0xE100000000000000;
    String.append(_:)(v26);
  }
  return v27;
}

void static URL.FormatStyle.HostDisplayOption.never.getter(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
}

uint64_t static URL.FormatStyle.HostDisplayOption.displayWhen(_:matches:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *a1;
  *(unsigned char *)a3 = 1;
  *(void *)(a3 + 8) = v3;
  *(void *)(a3 + 16) = a2;
  *(unsigned char *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  return swift_bridgeObjectRetain();
}

uint64_t static URL.FormatStyle.HostDisplayOption.omitWhen(_:matches:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *a1;
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 8) = v3;
  *(void *)(a3 + 16) = a2;
  *(unsigned char *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  return swift_bridgeObjectRetain();
}

Swift::Int static URL.FormatStyle.HostDisplayOption.omitIfHTTPFamily.getter@<X0>(uint64_t a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v1 = static _SetStorage.allocate(capacity:)();
  char v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = v1 + 56;
  while (1)
  {
    char v5 = v2;
    uint64_t v6 = (char *)&outlined read-only object #0 of static URL.FormatStyle.HostDisplayOption.omitIfHTTPFamily.getter
       + 16 * v3;
    uint64_t v8 = *((void *)v6 + 4);
    uint64_t v7 = *((void *)v6 + 5);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int result = Hasher._finalize()();
    uint64_t v10 = -1 << *(unsigned char *)(v1 + 32);
    unint64_t v11 = result & ~v10;
    unint64_t v12 = v11 >> 6;
    uint64_t v13 = *(void *)(v4 + 8 * (v11 >> 6));
    uint64_t v14 = 1 << v11;
    if (((1 << v11) & v13) == 0) {
      break;
    }
    uint64_t v15 = *(void *)(v1 + 48);
    unint64_t v16 = (void *)(v15 + 16 * v11);
    if (*v16 != v8 || v16[1] != v7)
    {
      Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v4 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            goto LABEL_18;
          }
          Swift::String v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_3:
    char v2 = 1;
    uint64_t v3 = 1;
    if (v5)
    {
      Swift::Int result = swift_arrayDestroy();
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = v1;
      *(unsigned char *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      return result;
    }
  }
LABEL_18:
  *(void *)(v4 + 8 * v12) = v14 | v13;
  Swift::String v21 = (void *)(*(void *)(v1 + 48) + 16 * v11);
  *Swift::String v21 = v8;
  v21[1] = v7;
  uint64_t v22 = *(void *)(v1 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (!v23)
  {
    *(void *)(v1 + 16) = v24;
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t static URL.FormatStyle.HostDisplayOption.omitSpecificSubdomains(_:includeMultiLevelSubdomains:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 1;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 24) = a2;
  *(void *)(a3 + 32) = a1;
  return swift_bridgeObjectRetain();
}

uint64_t static URL.FormatStyle.HostDisplayOption.omitSpecificSubdomains(_:includeMultiLevelSubdomains:when:matches:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5 = *a3;
  *(unsigned char *)a5 = 1;
  *(void *)(a5 + 8) = v5;
  *(void *)(a5 + 16) = a4;
  *(unsigned char *)(a5 + 24) = a2;
  *(void *)(a5 + 32) = a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

void URL.FormatStyle.HostDisplayOption.hash(into:)(uint64_t a1)
{
  char v2 = v1;
  uint64_t v5 = *((void *)v2 + 1);
  uint64_t v4 = *((void *)v2 + 2);
  Swift::UInt8 v6 = v2[24];
  uint64_t v7 = *((void *)v2 + 4);
  Hasher._combine(_:)(*v2);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_18218C628[(char)v5]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v6);
  if (v7)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance URL.FormatStyle.HostDisplayOption.CodingKeys()
{
  unint64_t result = 0x6E6F6974706FLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6F697469646E6F63;
      break;
    case 2:
      unint64_t result = 0xD000000000000018;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URL.FormatStyle.HostDisplayOption.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized URL.FormatStyle.HostDisplayOption.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.FormatStyle.HostDisplayOption.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.FormatStyle.HostDisplayOption.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t URL.FormatStyle.HostDisplayOption.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.FormatStyle.HostDisplayOption.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = *v1;
  uint64_t v9 = *((void *)v1 + 1);
  uint64_t v14 = *((void *)v1 + 2);
  uint64_t v15 = v9;
  int v18 = v1[24];
  uint64_t v13 = *((void *)v1 + 4);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v16) = v8;
  char v19 = 0;
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = v13;
    uint64_t v16 = v15;
    uint64_t v17 = v14;
    char v19 = 1;
    lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v16) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v16 = v10;
    char v19 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
    lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int URL.FormatStyle.HostDisplayOption.hashValue.getter()
{
  char v1 = *(unsigned char *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  unsigned char v4[72] = *(unsigned char *)v0;
  long long v5 = *(_OWORD *)(v0 + 8);
  char v6 = v1;
  uint64_t v7 = v2;
  Hasher.init(_seed:)();
  URL.FormatStyle.HostDisplayOption.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t URL.FormatStyle.HostDisplayOption.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URL.FormatStyle.HostDisplayOption.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v19 = 0;
    lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v9 = v16;
    char v19 = 1;
    lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v18 = v9;
    uint64_t v12 = v16;
    uint64_t v11 = v17;
    LOBYTE(v16) = 2;
    swift_bridgeObjectRetain();
    HIDWORD(v14) = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v15 = v12;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
    char v19 = 3;
    lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    LOBYTE(v12) = BYTE4(v14) & 1;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v13 = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)a2 = v18;
    *(void *)(a2 + 8) = v15;
    *(void *)(a2 + 16) = v11;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance URL.FormatStyle.HostDisplayOption@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return URL.FormatStyle.HostDisplayOption.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URL.FormatStyle.HostDisplayOption(void *a1)
{
  return URL.FormatStyle.HostDisplayOption.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance URL.FormatStyle.HostDisplayOption()
{
  char v1 = *(unsigned char *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  unsigned char v4[72] = *(unsigned char *)v0;
  long long v5 = *(_OWORD *)(v0 + 8);
  char v6 = v1;
  uint64_t v7 = v2;
  Hasher.init(_seed:)();
  URL.FormatStyle.HostDisplayOption.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URL.FormatStyle.HostDisplayOption()
{
  char v1 = *(unsigned char *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  unsigned char v4[72] = *(unsigned char *)v0;
  long long v5 = *(_OWORD *)(v0 + 8);
  char v6 = v1;
  uint64_t v7 = v2;
  Hasher.init(_seed:)();
  URL.FormatStyle.HostDisplayOption.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t URL.FormatStyle.scheme(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v35 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v34 = *((void *)a1 + 1);
  long long v5 = v2[11];
  long long v45 = v2[10];
  long long v46 = v5;
  long long v47 = v2[12];
  long long v6 = v2[7];
  long long v41 = v2[6];
  long long v42 = v6;
  long long v7 = v2[9];
  long long v43 = v2[8];
  long long v44 = v7;
  long long v8 = v2[3];
  long long v37 = v2[2];
  long long v38 = v8;
  long long v9 = v2[5];
  long long v39 = v2[4];
  long long v40 = v9;
  long long v10 = v2[1];
  v36[0] = *v2;
  v36[1] = v10;
  char v33 = BYTE8(v46);
  uint64_t v31 = *((void *)&v47 + 1);
  uint64_t v32 = v47;
  char v30 = v45;
  uint64_t v28 = v46;
  uint64_t v29 = *((void *)&v45 + 1);
  char v27 = BYTE8(v43);
  uint64_t v25 = *((void *)&v44 + 1);
  uint64_t v26 = v44;
  char v24 = v42;
  uint64_t v22 = v43;
  uint64_t v23 = *((void *)&v42 + 1);
  char v11 = BYTE8(v39);
  uint64_t v20 = *((void *)&v40 + 1);
  uint64_t v21 = v40;
  char v19 = v41;
  uint64_t v18 = *((void *)&v41 + 1);
  char v12 = v8;
  uint64_t v14 = *((void *)&v8 + 1);
  uint64_t v13 = v39;
  char v15 = BYTE8(v10);
  long long v16 = v37;
  outlined retain of URL.FormatStyle((uint64_t)v36);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)a2 = v35;
  *(void *)(a2 + 8) = v34;
  *(void *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 32) = v16;
  *(unsigned char *)(a2 + 48) = v12;
  *(void *)(a2 + 56) = v14;
  *(void *)(a2 + 64) = v13;
  *(unsigned char *)(a2 + 72) = v11;
  *(void *)(a2 + 80) = v21;
  *(void *)(a2 + 88) = v20;
  *(unsigned char *)(a2 + 96) = v19;
  *(void *)(a2 + 104) = v18;
  *(unsigned char *)(a2 + 112) = v24;
  *(void *)(a2 + 120) = v23;
  *(void *)(a2 + 128) = v22;
  *(unsigned char *)(a2 + 136) = v27;
  *(void *)(a2 + 144) = v26;
  *(void *)(a2 + 152) = v25;
  *(unsigned char *)(a2 + 160) = v30;
  *(void *)(a2 + 168) = v29;
  *(void *)(a2 + 176) = v28;
  *(unsigned char *)(a2 + 184) = v33;
  *(void *)(a2 + 192) = v32;
  *(void *)(a2 + 200) = v31;
  return result;
}

uint64_t URL.FormatStyle.user(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v36 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v35 = *((void *)a1 + 1);
  long long v5 = v2[11];
  long long v44 = v2[10];
  long long v45 = v5;
  long long v46 = v2[12];
  long long v6 = v2[7];
  long long v40 = v2[6];
  long long v41 = v6;
  long long v7 = v2[9];
  long long v42 = v2[8];
  long long v43 = v7;
  long long v8 = v2[3];
  v37[2] = v2[2];
  v37[3] = v8;
  long long v9 = v2[5];
  long long v38 = v2[4];
  long long v39 = v9;
  long long v10 = v2[1];
  v37[0] = *v2;
  v37[1] = v10;
  char v34 = BYTE8(v45);
  uint64_t v32 = *((void *)&v46 + 1);
  uint64_t v33 = v46;
  char v31 = v44;
  uint64_t v29 = v45;
  uint64_t v30 = *((void *)&v44 + 1);
  char v28 = BYTE8(v42);
  uint64_t v26 = *((void *)&v43 + 1);
  uint64_t v27 = v43;
  char v25 = v41;
  uint64_t v23 = v42;
  uint64_t v24 = *((void *)&v41 + 1);
  char v11 = BYTE8(v38);
  uint64_t v21 = *((void *)&v39 + 1);
  uint64_t v22 = v39;
  char v20 = v40;
  uint64_t v19 = *((void *)&v40 + 1);
  char v12 = v8;
  uint64_t v14 = *((void *)&v8 + 1);
  uint64_t v13 = v38;
  char v15 = v37[0];
  uint64_t v16 = *((void *)&v37[0] + 1);
  uint64_t v17 = v10;
  outlined retain of URL.FormatStyle((uint64_t)v37);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)a2 = v15;
  *(void *)(a2 + 8) = v16;
  *(void *)(a2 + 16) = v17;
  *(unsigned char *)(a2 + 24) = v36;
  *(void *)(a2 + 32) = v35;
  *(void *)(a2 + 40) = v4;
  *(unsigned char *)(a2 + 48) = v12;
  *(void *)(a2 + 56) = v14;
  *(void *)(a2 + 64) = v13;
  *(unsigned char *)(a2 + 72) = v11;
  *(void *)(a2 + 80) = v22;
  *(void *)(a2 + 88) = v21;
  *(unsigned char *)(a2 + 96) = v20;
  *(void *)(a2 + 104) = v19;
  *(unsigned char *)(a2 + 112) = v25;
  *(void *)(a2 + 120) = v24;
  *(void *)(a2 + 128) = v23;
  *(unsigned char *)(a2 + 136) = v28;
  *(void *)(a2 + 144) = v27;
  *(void *)(a2 + 152) = v26;
  *(unsigned char *)(a2 + 160) = v31;
  *(void *)(a2 + 168) = v30;
  *(void *)(a2 + 176) = v29;
  *(unsigned char *)(a2 + 184) = v34;
  *(void *)(a2 + 192) = v33;
  *(void *)(a2 + 200) = v32;
  return result;
}

uint64_t URL.FormatStyle.password(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v35 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v34 = *((void *)a1 + 1);
  long long v5 = v2[11];
  long long v45 = v2[10];
  long long v46 = v5;
  long long v47 = v2[12];
  long long v6 = v2[7];
  long long v41 = v2[6];
  long long v42 = v6;
  long long v7 = v2[9];
  long long v43 = v2[8];
  long long v44 = v7;
  long long v8 = v2[3];
  long long v37 = v2[2];
  long long v38 = v8;
  long long v9 = v2[5];
  long long v39 = v2[4];
  long long v40 = v9;
  long long v10 = v2[1];
  v36[0] = *v2;
  v36[1] = v10;
  char v33 = BYTE8(v46);
  uint64_t v31 = *((void *)&v47 + 1);
  uint64_t v32 = v47;
  char v30 = v45;
  uint64_t v28 = v46;
  uint64_t v29 = *((void *)&v45 + 1);
  char v27 = BYTE8(v43);
  uint64_t v25 = *((void *)&v44 + 1);
  uint64_t v26 = v44;
  char v24 = v42;
  uint64_t v22 = v43;
  uint64_t v23 = *((void *)&v42 + 1);
  char v11 = BYTE8(v39);
  uint64_t v20 = *((void *)&v40 + 1);
  uint64_t v21 = v40;
  char v19 = v41;
  uint64_t v18 = *((void *)&v41 + 1);
  char v12 = BYTE8(v10);
  long long v13 = v37;
  char v14 = v36[0];
  uint64_t v15 = *((void *)&v36[0] + 1);
  uint64_t v16 = v10;
  outlined retain of URL.FormatStyle((uint64_t)v36);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)a2 = v14;
  *(void *)(a2 + 8) = v15;
  *(void *)(a2 + 16) = v16;
  *(unsigned char *)(a2 + 24) = v12;
  *(_OWORD *)(a2 + 32) = v13;
  *(unsigned char *)(a2 + 48) = v35;
  *(void *)(a2 + 56) = v34;
  *(void *)(a2 + 64) = v4;
  *(unsigned char *)(a2 + 72) = v11;
  *(void *)(a2 + 80) = v21;
  *(void *)(a2 + 88) = v20;
  *(unsigned char *)(a2 + 96) = v19;
  *(void *)(a2 + 104) = v18;
  *(unsigned char *)(a2 + 112) = v24;
  *(void *)(a2 + 120) = v23;
  *(void *)(a2 + 128) = v22;
  *(unsigned char *)(a2 + 136) = v27;
  *(void *)(a2 + 144) = v26;
  *(void *)(a2 + 152) = v25;
  *(unsigned char *)(a2 + 160) = v30;
  *(void *)(a2 + 168) = v29;
  *(void *)(a2 + 176) = v28;
  *(unsigned char *)(a2 + 184) = v33;
  *(void *)(a2 + 192) = v32;
  *(void *)(a2 + 200) = v31;
  return result;
}

uint64_t URL.FormatStyle.host(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v35 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v34 = *((void *)a1 + 1);
  char v33 = a1[24];
  uint64_t v5 = *((void *)a1 + 4);
  long long v6 = v2[11];
  long long v45 = v2[10];
  long long v46 = v6;
  long long v47 = v2[12];
  long long v7 = v2[7];
  long long v41 = v2[6];
  long long v42 = v7;
  long long v8 = v2[9];
  long long v43 = v2[8];
  long long v44 = v8;
  long long v9 = v2[3];
  long long v37 = v2[2];
  long long v38 = v9;
  long long v10 = v2[5];
  long long v39 = v2[4];
  long long v40 = v10;
  long long v11 = v2[1];
  v36[0] = *v2;
  v36[1] = v11;
  char v32 = BYTE8(v46);
  uint64_t v30 = *((void *)&v47 + 1);
  uint64_t v31 = v47;
  char v29 = v45;
  uint64_t v27 = v46;
  uint64_t v28 = *((void *)&v45 + 1);
  char v26 = BYTE8(v43);
  uint64_t v24 = *((void *)&v44 + 1);
  uint64_t v25 = v44;
  char v23 = v42;
  uint64_t v21 = v43;
  uint64_t v22 = *((void *)&v42 + 1);
  char v20 = v9;
  uint64_t v18 = v39;
  uint64_t v19 = *((void *)&v9 + 1);
  char v12 = BYTE8(v11);
  long long v13 = v37;
  char v14 = v36[0];
  uint64_t v15 = *((void *)&v36[0] + 1);
  uint64_t v16 = v11;
  outlined retain of URL.FormatStyle((uint64_t)v36);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)a2 = v14;
  *(void *)(a2 + 8) = v15;
  *(void *)(a2 + 16) = v16;
  *(unsigned char *)(a2 + 24) = v12;
  *(_OWORD *)(a2 + 32) = v13;
  *(unsigned char *)(a2 + 48) = v20;
  *(void *)(a2 + 56) = v19;
  *(void *)(a2 + 64) = v18;
  *(unsigned char *)(a2 + 72) = v35;
  *(void *)(a2 + 80) = v34;
  *(void *)(a2 + 88) = v4;
  *(unsigned char *)(a2 + 96) = v33;
  *(void *)(a2 + 104) = v5;
  *(unsigned char *)(a2 + 112) = v23;
  *(void *)(a2 + 120) = v22;
  *(void *)(a2 + 128) = v21;
  *(unsigned char *)(a2 + 136) = v26;
  *(void *)(a2 + 144) = v25;
  *(void *)(a2 + 152) = v24;
  *(unsigned char *)(a2 + 160) = v29;
  *(void *)(a2 + 168) = v28;
  *(void *)(a2 + 176) = v27;
  *(unsigned char *)(a2 + 184) = v32;
  *(void *)(a2 + 192) = v31;
  *(void *)(a2 + 200) = v30;
  return result;
}

uint64_t URL.FormatStyle.port(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v35 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v34 = *((void *)a1 + 1);
  long long v5 = v2[11];
  long long v45 = v2[10];
  long long v46 = v5;
  long long v47 = v2[12];
  long long v6 = v2[7];
  long long v41 = v2[6];
  long long v42 = v6;
  long long v7 = v2[9];
  long long v43 = v2[8];
  long long v44 = v7;
  long long v8 = v2[3];
  long long v37 = v2[2];
  long long v38 = v8;
  long long v9 = v2[5];
  long long v39 = v2[4];
  long long v40 = v9;
  long long v10 = v2[1];
  v36[0] = *v2;
  v36[1] = v10;
  char v33 = BYTE8(v46);
  uint64_t v31 = *((void *)&v47 + 1);
  uint64_t v32 = v47;
  char v30 = v45;
  uint64_t v28 = v46;
  uint64_t v29 = *((void *)&v45 + 1);
  char v27 = BYTE8(v43);
  uint64_t v25 = *((void *)&v44 + 1);
  uint64_t v26 = v44;
  char v24 = BYTE8(v39);
  uint64_t v22 = *((void *)&v40 + 1);
  uint64_t v23 = v40;
  char v20 = v8;
  char v21 = v41;
  uint64_t v18 = v39;
  uint64_t v19 = *((void *)&v8 + 1);
  char v11 = BYTE8(v10);
  long long v12 = v37;
  char v13 = v36[0];
  uint64_t v15 = *((void *)&v36[0] + 1);
  uint64_t v14 = v10;
  uint64_t v16 = *((void *)&v41 + 1);
  outlined retain of URL.FormatStyle((uint64_t)v36);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)a2 = v13;
  *(void *)(a2 + 8) = v15;
  *(void *)(a2 + 16) = v14;
  *(unsigned char *)(a2 + 24) = v11;
  *(_OWORD *)(a2 + 32) = v12;
  *(unsigned char *)(a2 + 48) = v20;
  *(void *)(a2 + 56) = v19;
  *(void *)(a2 + 64) = v18;
  *(unsigned char *)(a2 + 72) = v24;
  *(void *)(a2 + 80) = v23;
  *(void *)(a2 + 88) = v22;
  *(unsigned char *)(a2 + 96) = v21;
  *(void *)(a2 + 104) = v16;
  *(unsigned char *)(a2 + 112) = v35;
  *(void *)(a2 + 120) = v34;
  *(void *)(a2 + 128) = v4;
  *(unsigned char *)(a2 + 136) = v27;
  *(void *)(a2 + 144) = v26;
  *(void *)(a2 + 152) = v25;
  *(unsigned char *)(a2 + 160) = v30;
  *(void *)(a2 + 168) = v29;
  *(void *)(a2 + 176) = v28;
  *(unsigned char *)(a2 + 184) = v33;
  *(void *)(a2 + 192) = v32;
  *(void *)(a2 + 200) = v31;
  return result;
}

uint64_t URL.FormatStyle.path(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v35 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v34 = *((void *)a1 + 1);
  long long v5 = v2[11];
  long long v45 = v2[10];
  long long v46 = v5;
  long long v47 = v2[12];
  long long v6 = v2[7];
  long long v41 = v2[6];
  long long v42 = v6;
  long long v7 = v2[9];
  long long v43 = v2[8];
  long long v44 = v7;
  long long v8 = v2[3];
  long long v37 = v2[2];
  long long v38 = v8;
  long long v9 = v2[5];
  long long v39 = v2[4];
  long long v40 = v9;
  long long v10 = v2[1];
  v36[0] = *v2;
  v36[1] = v10;
  char v33 = BYTE8(v46);
  uint64_t v31 = *((void *)&v47 + 1);
  uint64_t v32 = v47;
  char v30 = v45;
  uint64_t v28 = v46;
  uint64_t v29 = *((void *)&v45 + 1);
  char v27 = v42;
  uint64_t v25 = v43;
  uint64_t v26 = *((void *)&v42 + 1);
  char v24 = BYTE8(v39);
  uint64_t v22 = *((void *)&v40 + 1);
  uint64_t v23 = v40;
  char v21 = v41;
  uint64_t v20 = *((void *)&v41 + 1);
  char v19 = v8;
  uint64_t v11 = v39;
  uint64_t v18 = *((void *)&v8 + 1);
  char v12 = BYTE8(v10);
  long long v13 = v37;
  char v14 = v36[0];
  uint64_t v16 = *((void *)&v36[0] + 1);
  uint64_t v15 = v10;
  outlined retain of URL.FormatStyle((uint64_t)v36);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)a2 = v14;
  *(void *)(a2 + 8) = v16;
  *(void *)(a2 + 16) = v15;
  *(unsigned char *)(a2 + 24) = v12;
  *(_OWORD *)(a2 + 32) = v13;
  *(unsigned char *)(a2 + 48) = v19;
  *(void *)(a2 + 56) = v18;
  *(void *)(a2 + 64) = v11;
  *(unsigned char *)(a2 + 72) = v24;
  *(void *)(a2 + 80) = v23;
  *(void *)(a2 + 88) = v22;
  *(unsigned char *)(a2 + 96) = v21;
  *(void *)(a2 + 104) = v20;
  *(unsigned char *)(a2 + 112) = v27;
  *(void *)(a2 + 120) = v26;
  *(void *)(a2 + 128) = v25;
  *(unsigned char *)(a2 + 136) = v35;
  *(void *)(a2 + 144) = v34;
  *(void *)(a2 + 152) = v4;
  *(unsigned char *)(a2 + 160) = v30;
  *(void *)(a2 + 168) = v29;
  *(void *)(a2 + 176) = v28;
  *(unsigned char *)(a2 + 184) = v33;
  *(void *)(a2 + 192) = v32;
  *(void *)(a2 + 200) = v31;
  return result;
}

uint64_t URL.FormatStyle.query(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v35 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v34 = *((void *)a1 + 1);
  long long v5 = v2[11];
  long long v45 = v2[10];
  long long v46 = v5;
  long long v47 = v2[12];
  long long v6 = v2[7];
  long long v41 = v2[6];
  long long v42 = v6;
  long long v7 = v2[9];
  long long v43 = v2[8];
  long long v44 = v7;
  long long v8 = v2[3];
  long long v37 = v2[2];
  long long v38 = v8;
  long long v9 = v2[5];
  long long v39 = v2[4];
  long long v40 = v9;
  long long v10 = v2[1];
  v36[0] = *v2;
  v36[1] = v10;
  char v33 = BYTE8(v46);
  uint64_t v31 = *((void *)&v47 + 1);
  uint64_t v32 = v47;
  char v30 = BYTE8(v43);
  uint64_t v28 = *((void *)&v44 + 1);
  uint64_t v29 = v44;
  char v27 = v42;
  uint64_t v25 = v43;
  uint64_t v26 = *((void *)&v42 + 1);
  char v24 = BYTE8(v39);
  uint64_t v22 = *((void *)&v40 + 1);
  uint64_t v23 = v40;
  char v21 = v41;
  uint64_t v20 = *((void *)&v41 + 1);
  char v19 = v8;
  uint64_t v11 = v39;
  uint64_t v18 = *((void *)&v8 + 1);
  char v12 = BYTE8(v10);
  long long v13 = v37;
  char v14 = v36[0];
  uint64_t v16 = *((void *)&v36[0] + 1);
  uint64_t v15 = v10;
  outlined retain of URL.FormatStyle((uint64_t)v36);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)a2 = v14;
  *(void *)(a2 + 8) = v16;
  *(void *)(a2 + 16) = v15;
  *(unsigned char *)(a2 + 24) = v12;
  *(_OWORD *)(a2 + 32) = v13;
  *(unsigned char *)(a2 + 48) = v19;
  *(void *)(a2 + 56) = v18;
  *(void *)(a2 + 64) = v11;
  *(unsigned char *)(a2 + 72) = v24;
  *(void *)(a2 + 80) = v23;
  *(void *)(a2 + 88) = v22;
  *(unsigned char *)(a2 + 96) = v21;
  *(void *)(a2 + 104) = v20;
  *(unsigned char *)(a2 + 112) = v27;
  *(void *)(a2 + 120) = v26;
  *(void *)(a2 + 128) = v25;
  *(unsigned char *)(a2 + 136) = v30;
  *(void *)(a2 + 144) = v29;
  *(void *)(a2 + 152) = v28;
  *(unsigned char *)(a2 + 160) = v35;
  *(void *)(a2 + 168) = v34;
  *(void *)(a2 + 176) = v4;
  *(unsigned char *)(a2 + 184) = v33;
  *(void *)(a2 + 192) = v32;
  *(void *)(a2 + 200) = v31;
  return result;
}

uint64_t URL.FormatStyle.fragment(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v35 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v34 = *((void *)a1 + 1);
  long long v5 = v2[11];
  long long v45 = v2[10];
  long long v46 = v5;
  long long v47 = v2[12];
  long long v6 = v2[7];
  long long v41 = v2[6];
  long long v42 = v6;
  long long v7 = v2[9];
  long long v43 = v2[8];
  long long v44 = v7;
  long long v8 = v2[3];
  long long v37 = v2[2];
  long long v38 = v8;
  long long v9 = v2[5];
  long long v39 = v2[4];
  long long v40 = v9;
  long long v10 = v2[1];
  v36[0] = *v2;
  v36[1] = v10;
  char v33 = v45;
  uint64_t v31 = v46;
  uint64_t v32 = *((void *)&v45 + 1);
  char v30 = BYTE8(v43);
  uint64_t v28 = *((void *)&v44 + 1);
  uint64_t v29 = v44;
  char v27 = v42;
  uint64_t v25 = v43;
  uint64_t v26 = *((void *)&v42 + 1);
  char v24 = BYTE8(v39);
  uint64_t v22 = *((void *)&v40 + 1);
  uint64_t v23 = v40;
  char v21 = v41;
  uint64_t v20 = *((void *)&v41 + 1);
  char v19 = v8;
  uint64_t v11 = v39;
  uint64_t v18 = *((void *)&v8 + 1);
  char v12 = BYTE8(v10);
  long long v13 = v37;
  char v14 = v36[0];
  uint64_t v16 = *((void *)&v36[0] + 1);
  uint64_t v15 = v10;
  outlined retain of URL.FormatStyle((uint64_t)v36);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)a2 = v14;
  *(void *)(a2 + 8) = v16;
  *(void *)(a2 + 16) = v15;
  *(unsigned char *)(a2 + 24) = v12;
  *(_OWORD *)(a2 + 32) = v13;
  *(unsigned char *)(a2 + 48) = v19;
  *(void *)(a2 + 56) = v18;
  *(void *)(a2 + 64) = v11;
  *(unsigned char *)(a2 + 72) = v24;
  *(void *)(a2 + 80) = v23;
  *(void *)(a2 + 88) = v22;
  *(unsigned char *)(a2 + 96) = v21;
  *(void *)(a2 + 104) = v20;
  *(unsigned char *)(a2 + 112) = v27;
  *(void *)(a2 + 120) = v26;
  *(void *)(a2 + 128) = v25;
  *(unsigned char *)(a2 + 136) = v30;
  *(void *)(a2 + 144) = v29;
  *(void *)(a2 + 152) = v28;
  *(unsigned char *)(a2 + 160) = v33;
  *(void *)(a2 + 168) = v32;
  *(void *)(a2 + 176) = v31;
  *(unsigned char *)(a2 + 184) = v35;
  *(void *)(a2 + 192) = v34;
  *(void *)(a2 + 200) = v4;
  return result;
}

uint64_t URL.FormatStyle.parseStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  long long v3 = v1[9];
  long long v4 = v1[11];
  long long v26 = v1[10];
  long long v27 = v4;
  long long v5 = v1[11];
  long long v28 = v1[12];
  long long v6 = v1[5];
  long long v7 = v1[7];
  long long v22 = v1[6];
  long long v23 = v7;
  long long v8 = v1[7];
  long long v9 = v1[9];
  long long v24 = v1[8];
  long long v25 = v9;
  long long v10 = v1[1];
  long long v11 = v1[3];
  long long v18 = v1[2];
  long long v19 = v11;
  long long v12 = v1[3];
  long long v13 = v1[5];
  long long v20 = v1[4];
  long long v21 = v13;
  long long v14 = v1[1];
  v17[0] = *v1;
  v17[1] = v14;
  v16[10] = v26;
  v16[11] = v5;
  v16[12] = v1[12];
  v16[6] = v22;
  v16[7] = v8;
  unsigned char v16[8] = v24;
  v16[9] = v3;
  void v16[2] = v18;
  v16[3] = v12;
  v16[4] = v20;
  v16[5] = v6;
  v16[0] = v17[0];
  v16[1] = v10;
  outlined retain of URL.FormatStyle((uint64_t)v17);
  return URL.ParseStrategy.init(format:lenient:)(v16, a1);
}

uint64_t protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance URL.FormatStyle@<X0>(uint64_t a1@<X8>)
{
  long long v3 = v1[9];
  long long v4 = v1[11];
  long long v26 = v1[10];
  long long v27 = v4;
  long long v5 = v1[11];
  long long v28 = v1[12];
  long long v6 = v1[5];
  long long v7 = v1[7];
  long long v22 = v1[6];
  long long v23 = v7;
  long long v8 = v1[7];
  long long v9 = v1[9];
  long long v24 = v1[8];
  long long v25 = v9;
  long long v10 = v1[1];
  long long v11 = v1[3];
  long long v18 = v1[2];
  long long v19 = v11;
  long long v12 = v1[3];
  long long v13 = v1[5];
  long long v20 = v1[4];
  long long v21 = v13;
  long long v14 = v1[1];
  v17[0] = *v1;
  v17[1] = v14;
  v16[10] = v26;
  v16[11] = v5;
  v16[12] = v1[12];
  v16[6] = v22;
  v16[7] = v8;
  unsigned char v16[8] = v24;
  v16[9] = v3;
  void v16[2] = v18;
  v16[3] = v12;
  v16[4] = v20;
  v16[5] = v6;
  v16[0] = v17[0];
  v16[1] = v10;
  outlined retain of URL.FormatStyle((uint64_t)v17);
  return URL.ParseStrategy.init(format:lenient:)(v16, a1);
}

uint64_t URL.FormatStyle.url(_:satisfies:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2)
  {
    long long v3 = *(void **)a1;
    long long v4 = *(void **)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    if (*(unsigned char *)a2 == 4)
    {
      *((void *)&v60 + 1) = *(void *)(a1 + 8);
      uint64_t v61 = v5;
      *(void *)&unsigned long long v60 = URL.port.getter();
      BYTE8(v60) = v6 & 1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
      if (swift_dynamicCast())
      {
        *(void *)&unsigned long long v60 = v62;
        uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
LABEL_40:
        char v9 = specialized Set.contains(_:)(v7, v8, v2);
        swift_bridgeObjectRelease();
        return v9 & 1;
      }
      goto LABEL_59;
    }
    switch(*(unsigned char *)a2)
    {
      case 1:
        swift_retain();
        id v11 = v3;
        swift_retain();
        if (_foundation_swift_url_feature_enabled())
        {
          *(void *)&unsigned long long v60 = v11;
          *((void *)&v60 + 1) = v4;
          uint64_t v61 = v5;
          Swift::String_optional v15 = URL.user(percentEncoded:)(1);
          object = v15.value._object;
          uint64_t countAndFlagsBits = v15.value._countAndFlagsBits;
          goto LABEL_22;
        }
        id v26 = objc_msgSend(v11, sel_user);
        goto LABEL_32;
      case 2:
        swift_retain();
        id v11 = v3;
        swift_retain();
        if (_foundation_swift_url_feature_enabled())
        {
          *(void *)&unsigned long long v60 = v11;
          *((void *)&v60 + 1) = v4;
          uint64_t v61 = v5;
          Swift::String_optional v14 = URL.password(percentEncoded:)(1);
          object = v14.value._object;
          uint64_t countAndFlagsBits = v14.value._countAndFlagsBits;
          goto LABEL_22;
        }
        id v26 = objc_msgSend(v11, sel_password);
        goto LABEL_32;
      case 3:
        swift_retain();
        id v11 = v3;
        swift_retain();
        if (_foundation_swift_url_feature_enabled())
        {
          *(void *)&unsigned long long v60 = v11;
          *((void *)&v60 + 1) = v4;
          uint64_t v61 = v5;
          Swift::String_optional v16 = URL.host(percentEncoded:)(1);
          object = v16.value._object;
          uint64_t countAndFlagsBits = v16.value._countAndFlagsBits;
          goto LABEL_22;
        }
        id v26 = objc_msgSend(v11, sel_host);
        goto LABEL_32;
      case 4:
        __break(1u);
        JUMPOUT(0x181C35D98);
      case 5:
        swift_retain();
        id v17 = v3;
        swift_retain();
        if ((_foundation_swift_url_feature_enabled() & 1) == 0)
        {
          id v27 = objc_msgSend(v17, sel__parameterString);
          if (v27)
          {
            long long v28 = v27;
            id v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
            uint64_t v31 = v30;

            if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
              && (id v32 = objc_msgSend(v17, sel_path)) != 0)
            {
              char v33 = v32;
              id v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
              char v36 = v35;

              *(void *)&unsigned long long v60 = v34;
              *((void *)&v60 + 1) = v36;
              swift_bridgeObjectRetain();
              v37._uint64_t countAndFlagsBits = 59;
              v37._object = (void *)0xE100000000000000;
              String.append(_:)(v37);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              v38._uint64_t countAndFlagsBits = (uint64_t)v29;
              v38._object = v31;
              String.append(_:)(v38);
              swift_release();
              swift_release();

              swift_bridgeObjectRelease();
            }
            else
            {
              *(void *)&unsigned long long v60 = 59;
              *((void *)&v60 + 1) = 0xE100000000000000;
              v53._uint64_t countAndFlagsBits = (uint64_t)v29;
              v53._object = v31;
              String.append(_:)(v53);
              swift_release();
              swift_release();
            }
            swift_bridgeObjectRelease();
            uint64_t v50 = v60;
            uint64_t v52 = *((void *)&v60 + 1);
          }
          else
          {
            id v54 = objc_msgSend(v17, sel_path);
            if (v54)
            {
              id v18 = v54;
              uint64_t v50 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
              uint64_t v52 = v55;
              swift_release();
              swift_release();

LABEL_57:
              goto LABEL_58;
            }
            swift_release();
            swift_release();

            uint64_t v50 = 0;
            uint64_t v52 = 0xE000000000000000;
          }
LABEL_58:
          *(void *)&unsigned long long v60 = v50;
          *((void *)&v60 + 1) = v52;
          uint64_t v42 = v52;
          if (v52)
          {
LABEL_39:
            uint64_t v7 = v60;
            uint64_t v8 = v42;
            goto LABEL_40;
          }
LABEL_59:
          char v9 = 0;
          return v9 & 1;
        }
        uint64_t v61 = v5;
        id v18 = v17;
        swift_retain();
        swift_retain();
        unsigned long long v19 = (unsigned __int128)URL.path(percentEncoded:)(1);
        uint64_t v20 = v19;
        unsigned long long v60 = v19;
        swift_bridgeObjectRetain();
        if (String.count.getter() <= 1)
        {
          unint64_t v21 = *((void *)&v19 + 1);
        }
        else
        {
          unint64_t v21 = *((void *)&v19 + 1);
          if ((specialized BidirectionalCollection.last.getter(v19, *((unint64_t *)&v19 + 1)) & 0x1FF) == 0x2F)
          {
            specialized RangeReplaceableCollection<>.popLast()();
            swift_bridgeObjectRelease();
            uint64_t v20 = v60;
            unint64_t v21 = *((void *)&v60 + 1);
          }
        }
        uint64_t v62 = Set.init(minimumCapacity:)();
        uint64_t v43 = specialized Set._Variant.insert(_:)(&v59, 0x2FuLL);
        uint64_t v44 = v62;
        uint64_t v45 = HIBYTE(v21) & 0xF;
        if ((v21 & 0x2000000000000000) == 0) {
          uint64_t v45 = v20 & 0xFFFFFFFFFFFFLL;
        }
        if (v45)
        {
          id v58 = v18;
          uint64_t v62 = v20;
          unint64_t v63 = v21;
          MEMORY[0x1F4188790](v43);
          v57[2] = &v62;
          long long v57[3] = v44;
          swift_bridgeObjectRetain();
          long long v46 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v57, v20, v21);
          if (v47 == (void *)1)
          {
            Swift::Int v48 = v62;
            unint64_t v49 = v63;
            swift_bridgeObjectRetain();
            uint64_t v50 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v48, v49, v44);
            uint64_t v52 = v51;
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v50 = (uint64_t)v46;
            uint64_t v52 = (uint64_t)v47;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id v18 = v58;
          if (!v52)
          {
            swift_release();
            swift_release();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v50 = 0;
            uint64_t v52 = 0xE000000000000000;
            goto LABEL_56;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v50 = 0;
          uint64_t v52 = 0xE000000000000000;
        }
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_56:
        swift_release();
        swift_release();
        goto LABEL_57;
      case 6:
        swift_retain();
        id v11 = v3;
        swift_retain();
        if (_foundation_swift_url_feature_enabled())
        {
          *(void *)&unsigned long long v60 = v11;
          *((void *)&v60 + 1) = v4;
          uint64_t v61 = v5;
          Swift::String_optional v22 = URL.query(percentEncoded:)(1);
          object = v22.value._object;
          uint64_t countAndFlagsBits = v22.value._countAndFlagsBits;
          goto LABEL_22;
        }
        id v26 = objc_msgSend(v11, sel_query);
        goto LABEL_32;
      case 7:
        swift_retain();
        id v11 = v3;
        swift_retain();
        if (_foundation_swift_url_feature_enabled())
        {
          *(void *)&unsigned long long v60 = v11;
          *((void *)&v60 + 1) = v4;
          uint64_t v61 = v5;
          Swift::String_optional v23 = URL.fragment(percentEncoded:)(1);
          object = v23.value._object;
          uint64_t countAndFlagsBits = v23.value._countAndFlagsBits;
LABEL_22:
          uint64_t v24 = countAndFlagsBits;
          unint64_t v25 = (unint64_t)object;
          swift_release();
          swift_release();
        }
        else
        {
          id v26 = objc_msgSend(v11, sel_fragment);
LABEL_32:
          id v39 = v26;
          if (v39)
          {
            long long v40 = v39;
            uint64_t v24 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
            unint64_t v25 = v41;
            swift_release();
            swift_release();
          }
          else
          {
            swift_release();
            swift_release();

            uint64_t v24 = 0;
            unint64_t v25 = 0;
          }
        }
        uint64_t v62 = v24;
        unint64_t v63 = v25;
LABEL_36:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        if ((swift_dynamicCast() & 1) == 0) {
          unsigned long long v60 = 0uLL;
        }
        uint64_t v42 = *((void *)&v60 + 1);
        if (*((void *)&v60 + 1)) {
          goto LABEL_39;
        }
        goto LABEL_59;
      default:
        *(void *)&unsigned long long v60 = *(void *)a1;
        *((void *)&v60 + 1) = v4;
        uint64_t v61 = v5;
        uint64_t v62 = URL.scheme.getter();
        unint64_t v63 = v10;
        goto LABEL_36;
    }
  }
  char v9 = 1;
  return v9 & 1;
}

uint64_t URL.FormatStyle.shouldDisplayComponent(from:basedOn:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *((void *)a2 + 2);
  if (v3)
  {
    long long v4 = *(void **)a1;
    uint64_t v5 = *(void **)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    if (a2[8] == 4)
    {
      *((void *)&v63 + 1) = *(void *)(a1 + 8);
      uint64_t v64 = v6;
      swift_bridgeObjectRetain();
      *(void *)&unsigned long long v63 = URL.port.getter();
      BYTE8(v63) = v7 & 1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
      if (swift_dynamicCast())
      {
        *(void *)&unsigned long long v63 = v65;
        uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
        goto LABEL_39;
      }
      goto LABEL_58;
    }
    switch(a2[8])
    {
      case 1u:
        swift_retain();
        swift_bridgeObjectRetain();
        id v11 = v4;
        swift_retain();
        if (_foundation_swift_url_feature_enabled())
        {
          *(void *)&unsigned long long v63 = v11;
          *((void *)&v63 + 1) = v5;
          uint64_t v64 = v6;
          Swift::String_optional v15 = URL.user(percentEncoded:)(1);
          object = v15.value._object;
          uint64_t countAndFlagsBits = v15.value._countAndFlagsBits;
          goto LABEL_21;
        }
        id v25 = objc_msgSend(v11, sel_user);
        goto LABEL_31;
      case 2u:
        swift_retain();
        swift_bridgeObjectRetain();
        id v11 = v4;
        swift_retain();
        if (_foundation_swift_url_feature_enabled())
        {
          *(void *)&unsigned long long v63 = v11;
          *((void *)&v63 + 1) = v5;
          uint64_t v64 = v6;
          Swift::String_optional v14 = URL.password(percentEncoded:)(1);
          object = v14.value._object;
          uint64_t countAndFlagsBits = v14.value._countAndFlagsBits;
          goto LABEL_21;
        }
        id v25 = objc_msgSend(v11, sel_password);
        goto LABEL_31;
      case 3u:
        swift_retain();
        swift_bridgeObjectRetain();
        id v11 = v4;
        swift_retain();
        if (_foundation_swift_url_feature_enabled())
        {
          *(void *)&unsigned long long v63 = v11;
          *((void *)&v63 + 1) = v5;
          uint64_t v64 = v6;
          Swift::String_optional v16 = URL.host(percentEncoded:)(1);
          object = v16.value._object;
          uint64_t countAndFlagsBits = v16.value._countAndFlagsBits;
          goto LABEL_21;
        }
        id v25 = objc_msgSend(v11, sel_host);
        goto LABEL_31;
      case 4u:
        __break(1u);
        JUMPOUT(0x181C36530);
      case 5u:
        swift_retain();
        swift_bridgeObjectRetain();
        id v17 = v4;
        swift_retain();
        if ((_foundation_swift_url_feature_enabled() & 1) == 0)
        {
          id v26 = objc_msgSend(v17, sel__parameterString);
          if (v26)
          {
            id v27 = v26;
            id v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
            char v30 = v29;

            if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
              && (id v31 = objc_msgSend(v17, sel_path)) != 0)
            {
              id v32 = v31;
              id v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
              char v35 = v34;

              *(void *)&unsigned long long v63 = v33;
              *((void *)&v63 + 1) = v35;
              swift_bridgeObjectRetain();
              v36._uint64_t countAndFlagsBits = 59;
              v36._object = (void *)0xE100000000000000;
              String.append(_:)(v36);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              v37._uint64_t countAndFlagsBits = (uint64_t)v28;
              v37._object = v30;
              String.append(_:)(v37);
              swift_release();
              swift_release();

              swift_bridgeObjectRelease();
            }
            else
            {
              *(void *)&unsigned long long v63 = 59;
              *((void *)&v63 + 1) = 0xE100000000000000;
              v53._uint64_t countAndFlagsBits = (uint64_t)v28;
              v53._object = v30;
              String.append(_:)(v53);
              swift_release();
              swift_release();
            }
            swift_bridgeObjectRelease();
            uint64_t v50 = v63;
            uint64_t v52 = *((void *)&v63 + 1);
          }
          else
          {
            id v54 = objc_msgSend(v17, sel_path);
            if (v54)
            {
              uint64_t v55 = v54;
              uint64_t v50 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
              uint64_t v52 = v56;
              swift_release();
              swift_release();
            }
            else
            {
              swift_release();
              swift_release();

              uint64_t v50 = 0;
              uint64_t v52 = 0xE000000000000000;
            }
          }
LABEL_57:
          *(void *)&unsigned long long v63 = v50;
          *((void *)&v63 + 1) = v52;
          uint64_t v41 = v52;
          if (v52)
          {
LABEL_38:
            uint64_t v8 = v63;
            uint64_t v9 = v41;
LABEL_39:
            char v42 = specialized Set.contains(_:)(v8, v9, v3);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v42) {
              return v2;
            }
            return v2 ^ 1;
          }
LABEL_58:
          swift_bridgeObjectRelease();
          return v2 ^ 1;
        }
        uint64_t v64 = v6;
        id v61 = v17;
        swift_retain();
        swift_retain();
        unsigned long long v18 = (unsigned __int128)URL.path(percentEncoded:)(1);
        uint64_t v19 = v18;
        unsigned long long v63 = v18;
        swift_bridgeObjectRetain();
        if (String.count.getter() <= 1)
        {
          unint64_t v20 = *((void *)&v18 + 1);
        }
        else
        {
          unint64_t v20 = *((void *)&v18 + 1);
          if ((specialized BidirectionalCollection.last.getter(v18, *((unint64_t *)&v18 + 1)) & 0x1FF) == 0x2F)
          {
            specialized RangeReplaceableCollection<>.popLast()();
            swift_bridgeObjectRelease();
            uint64_t v19 = v63;
            unint64_t v20 = *((void *)&v63 + 1);
          }
        }
        uint64_t v65 = Set.init(minimumCapacity:)();
        uint64_t v43 = specialized Set._Variant.insert(_:)(&v62, 0x2FuLL);
        uint64_t v44 = v65;
        uint64_t v45 = HIBYTE(v20) & 0xF;
        if ((v20 & 0x2000000000000000) == 0) {
          uint64_t v45 = v19 & 0xFFFFFFFFFFFFLL;
        }
        if (v45)
        {
          v60[1] = v60;
          uint64_t v65 = v19;
          unint64_t v66 = v20;
          MEMORY[0x1F4188790](v43);
          _OWORD v59[2] = &v65;
          _OWORD v59[3] = v44;
          swift_bridgeObjectRetain();
          long long v46 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v59, v19, v20);
          if (v47 == (void *)1)
          {
            Swift::Int v48 = v65;
            unint64_t v49 = v66;
            swift_bridgeObjectRetain();
            uint64_t v50 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v48, v49, v44);
            uint64_t v52 = v51;
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v50 = (uint64_t)v46;
            uint64_t v52 = (uint64_t)v47;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v57 = v61;
          if (!v52)
          {
            swift_release();
            swift_release();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v50 = 0;
            uint64_t v52 = 0xE000000000000000;
            goto LABEL_56;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v50 = 0;
          uint64_t v52 = 0xE000000000000000;
          uint64_t v57 = v61;
        }
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_56:
        swift_release();
        swift_release();

        goto LABEL_57;
      case 6u:
        swift_retain();
        swift_bridgeObjectRetain();
        id v11 = v4;
        swift_retain();
        if (_foundation_swift_url_feature_enabled())
        {
          *(void *)&unsigned long long v63 = v11;
          *((void *)&v63 + 1) = v5;
          uint64_t v64 = v6;
          Swift::String_optional v21 = URL.query(percentEncoded:)(1);
          object = v21.value._object;
          uint64_t countAndFlagsBits = v21.value._countAndFlagsBits;
          goto LABEL_21;
        }
        id v25 = objc_msgSend(v11, sel_query);
        goto LABEL_31;
      case 7u:
        swift_retain();
        swift_bridgeObjectRetain();
        id v11 = v4;
        swift_retain();
        if (_foundation_swift_url_feature_enabled())
        {
          *(void *)&unsigned long long v63 = v11;
          *((void *)&v63 + 1) = v5;
          uint64_t v64 = v6;
          Swift::String_optional v22 = URL.fragment(percentEncoded:)(1);
          object = v22.value._object;
          uint64_t countAndFlagsBits = v22.value._countAndFlagsBits;
LABEL_21:
          uint64_t v23 = countAndFlagsBits;
          unint64_t v24 = (unint64_t)object;
          swift_release();
          swift_release();
        }
        else
        {
          id v25 = objc_msgSend(v11, sel_fragment);
LABEL_31:
          id v38 = v25;
          if (v38)
          {
            id v39 = v38;
            uint64_t v23 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
            unint64_t v24 = v40;
            swift_release();
            swift_release();
          }
          else
          {
            swift_release();
            swift_release();

            uint64_t v23 = 0;
            unint64_t v24 = 0;
          }
        }
        uint64_t v65 = v23;
        unint64_t v66 = v24;
LABEL_35:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        if ((swift_dynamicCast() & 1) == 0) {
          unsigned long long v63 = 0uLL;
        }
        uint64_t v41 = *((void *)&v63 + 1);
        if (*((void *)&v63 + 1)) {
          goto LABEL_38;
        }
        goto LABEL_58;
      default:
        *(void *)&unsigned long long v63 = *(void *)a1;
        *((void *)&v63 + 1) = v5;
        uint64_t v64 = v6;
        swift_bridgeObjectRetain();
        uint64_t v65 = URL.scheme.getter();
        unint64_t v66 = v10;
        goto LABEL_35;
    }
  }
  return v2;
}

uint64_t URL.FormatStyle.isIPv4(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v21 = 46;
  uint64_t v22 = 0xE100000000000000;
  void v19[2] = &v21;
  swift_bridgeObjectRetain();
  long long v4 = (void *)specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)specialized partial apply, (uint64_t)v19, a1, a2);
  uint64_t v5 = v4;
  if (v4[2] == 4 && (v7 = v4[4], unint64_t v6 = v4[5], (v6 ^ v7) >= 0x4000))
  {
    uint64_t v8 = v4 + 7;
    for (unint64_t i = 1; ; ++i)
    {
      unint64_t v11 = *(v8 - 1);
      unint64_t v10 = *v8;
      swift_bridgeObjectRetain();
      if ((v10 & 0x1000000000000000) != 0)
      {
        unint64_t v13 = specialized _parseInteger<A, B>(ascii:radix:)(v7, v6, v11, v10, 10);
        char v15 = v18;
      }
      else
      {
        if ((v10 & 0x2000000000000000) != 0)
        {
          uint64_t v21 = v11;
          uint64_t v22 = v10 & 0xFFFFFFFFFFFFFFLL;
          long long v12 = &v21;
        }
        else
        {
          long long v12 = (uint64_t *)((v11 & 0x1000000000000000) != 0
                          ? (v10 & 0xFFFFFFFFFFFFFFFLL) + 32
                          : _StringObject.sharedUTF8.getter());
        }
        unint64_t v13 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_nTf4xnn_n((uint64_t)v12, v7, v6, v11, v10, 10);
        char v20 = v14 & 1;
        char v15 = v14 & 1;
      }
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v17 = 0;
      if ((v15 & 1) != 0 || (v13 & 0x8000000000000000) != 0 || v13 > 0xFF) {
        break;
      }
      if (i == 4)
      {
        uint64_t v17 = 1;
        break;
      }
      if (i >= v5[2])
      {
        __break(1u);
        return result;
      }
      unint64_t v7 = v8[1];
      unint64_t v6 = v8[2];
      if ((v6 ^ v7) < 0x4000) {
        goto LABEL_19;
      }
      v8 += 4;
    }
  }
  else
  {
LABEL_19:
    uint64_t v17 = 0;
  }
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t URL.FormatStyle.isIPv6(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v47 = a1;
  unint64_t v48 = a2;
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = 91;
  v4._object = (void *)0xE100000000000000;
  if (!String.hasPrefix(_:)(v4)
    || (v5._uint64_t countAndFlagsBits = 93,
        v5._object = (void *)0xE100000000000000,
        uint64_t result = String.hasSuffix(_:)(v5),
        (result & 1) == 0))
  {
LABEL_65:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  uint64_t result = specialized Collection.first.getter(a1, a2);
  if (!v8)
  {
LABEL_73:
    __break(1u);
    return result;
  }
  specialized RangeReplaceableCollection.removeFirst(_:)(1);
  swift_bridgeObjectRelease();
  specialized RangeReplaceableCollection<>.removeLast()();
  uint64_t v9 = swift_bridgeObjectRelease();
  uint64_t v10 = v47;
  unint64_t v11 = v48;
  uint64_t v45 = 58;
  uint64_t v46 = 0xE100000000000000;
  MEMORY[0x1F4188790](v9);
  v43[2] = &v45;
  swift_bridgeObjectRetain_n();
  uint64_t v12 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)specialized partial apply, (uint64_t)v43, v10, v11);
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    unint64_t v14 = 0;
    uint64_t v44 = (char *)&v45 + 1;
    while (v14 < *(void *)(v12 + 16))
    {
      char v15 = (uint64_t *)(v12 + 32 + 32 * v14);
      uint64_t v16 = *v15;
      unint64_t v17 = v15[1];
      if ((v17 ^ *v15) >= 0x4000)
      {
        uint64_t v19 = v15[2];
        uint64_t v18 = v15[3];
        swift_bridgeObjectRetain();
        uint64_t v20 = MEMORY[0x185301F50](v16, v17, v19, v18);
        unint64_t v22 = v21;
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v23 = HIBYTE(v22) & 0xF;
        uint64_t v24 = v20 & 0xFFFFFFFFFFFFLL;
        if ((v22 & 0x2000000000000000) != 0) {
          uint64_t v25 = HIBYTE(v22) & 0xF;
        }
        else {
          uint64_t v25 = v20 & 0xFFFFFFFFFFFFLL;
        }
        if (!v25) {
          goto LABEL_69;
        }
        if ((v22 & 0x1000000000000000) != 0)
        {
          unint64_t v27 = specialized _parseInteger<A, B>(ascii:radix:)(v20, v22, 16);
          char v29 = v42;
        }
        else if ((v22 & 0x2000000000000000) != 0)
        {
          uint64_t v45 = v20;
          uint64_t v46 = v22 & 0xFFFFFFFFFFFFFFLL;
          if (v20 == 43)
          {
            if (!v23) {
              goto LABEL_72;
            }
            uint64_t v35 = v23 - 1;
            if (v35)
            {
              unint64_t v27 = 0;
              Swift::String v36 = (unsigned __int8 *)v44;
              while (1)
              {
                int v37 = *v36;
                unsigned __int8 v38 = v37 - 48;
                if ((v37 - 48) >= 0xA)
                {
                  if ((v37 - 65) < 6)
                  {
                    unsigned __int8 v38 = v37 - 55;
                  }
                  else
                  {
                    if ((v37 - 97) > 5) {
                      break;
                    }
                    unsigned __int8 v38 = v37 - 87;
                  }
                }
                if ((v27 - 0x800000000000000) >> 60 != 15) {
                  break;
                }
                BOOL v34 = __OFADD__(16 * v27, v38);
                unint64_t v27 = 16 * v27 + v38;
                if (v34) {
                  break;
                }
                ++v36;
                if (!--v35)
                {
LABEL_57:
                  char v29 = 0;
                  goto LABEL_59;
                }
              }
            }
          }
          else if (v20 == 45)
          {
            if (!v23) {
              goto LABEL_71;
            }
            uint64_t v30 = v23 - 1;
            if (v30)
            {
              unint64_t v27 = 0;
              id v31 = (unsigned __int8 *)v44;
              while (1)
              {
                int v32 = *v31;
                unsigned __int8 v33 = v32 - 48;
                if ((v32 - 48) >= 0xA)
                {
                  if ((v32 - 65) < 6)
                  {
                    unsigned __int8 v33 = v32 - 55;
                  }
                  else
                  {
                    if ((v32 - 97) > 5) {
                      break;
                    }
                    unsigned __int8 v33 = v32 - 87;
                  }
                }
                if ((v27 - 0x800000000000000) >> 60 != 15) {
                  break;
                }
                BOOL v34 = __OFSUB__(16 * v27, v33);
                unint64_t v27 = 16 * v27 - v33;
                if (v34) {
                  break;
                }
                ++v31;
                if (!--v30) {
                  goto LABEL_57;
                }
              }
            }
          }
          else if (v23)
          {
            unint64_t v27 = 0;
            id v39 = &v45;
            while (1)
            {
              int v40 = *(unsigned __int8 *)v39;
              unsigned __int8 v41 = v40 - 48;
              if ((v40 - 48) >= 0xA)
              {
                if ((v40 - 65) < 6)
                {
                  unsigned __int8 v41 = v40 - 55;
                }
                else
                {
                  if ((v40 - 97) > 5) {
                    break;
                  }
                  unsigned __int8 v41 = v40 - 87;
                }
              }
              if ((v27 - 0x800000000000000) >> 60 != 15) {
                break;
              }
              BOOL v34 = __OFADD__(16 * v27, v41);
              unint64_t v27 = 16 * v27 + v41;
              if (v34) {
                break;
              }
              id v39 = (uint64_t *)((char *)v39 + 1);
              if (!--v23) {
                goto LABEL_57;
              }
            }
          }
          unint64_t v27 = 0;
          char v29 = 1;
        }
        else
        {
          if ((v20 & 0x1000000000000000) != 0) {
            id v26 = (unsigned __int8 *)((v22 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else {
            id v26 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
          }
          unint64_t v27 = (unint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v26, v24, 16);
          char v29 = v28 & 1;
        }
LABEL_59:
        swift_bridgeObjectRelease();
        if ((v29 & 1) != 0 || (v27 & 0x8000000000000000) != 0 || v27 >> 16) {
          goto LABEL_67;
        }
      }
      if (++v14 == v13) {
        goto LABEL_66;
      }
    }
    __break(1u);
LABEL_69:
    swift_bridgeObjectRelease();
LABEL_67:
    swift_bridgeObjectRelease();
    goto LABEL_65;
  }
LABEL_66:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t URL.FormatStyle.generateFormattedString(from:useEncodedHost:)(_OWORD *a1, char a2)
{
  Swift::String v3 = (Swift::String)a1[7];
  long long v4 = a1[5];
  Swift::String v219 = (Swift::String)a1[6];
  Swift::String v220 = v3;
  long long v5 = a1[7];
  *(_OWORD *)long long v221 = a1[8];
  *(_OWORD *)&v221[10] = *(_OWORD *)((char *)a1 + 138);
  Swift::String v6 = (Swift::String)a1[3];
  long long v7 = a1[1];
  Swift::String v215 = (Swift::String)a1[2];
  Swift::String v216 = v6;
  long long v8 = a1[3];
  Swift::String v9 = (Swift::String)a1[5];
  Swift::String v217 = (Swift::String)a1[4];
  Swift::String v218 = v9;
  Swift::String v10 = (Swift::String)a1[1];
  Swift::String v213 = (Swift::String)*a1;
  Swift::String v214 = v10;
  Swift::String v210 = v219;
  long long v211 = v5;
  v212[0] = a1[8];
  *(_OWORD *)((char *)v212 + 10) = *(_OWORD *)((char *)a1 + 138);
  Swift::String v206 = v215;
  long long v207 = v8;
  Swift::String v208 = v217;
  long long v209 = v4;
  uint64_t v202 = 0;
  unint64_t v203 = 0xE000000000000000;
  Swift::String v204 = v213;
  long long v205 = v7;
  uint64_t countAndFlagsBits = v213._countAndFlagsBits;
  if (v215._countAndFlagsBits)
  {
    uint64_t object = (uint64_t)v214._object;
    uint64_t v13 = (void *)v215._countAndFlagsBits;
  }
  else
  {
    if (BYTE1(v213._object) != 1 || !v213._countAndFlagsBits || (*(unsigned char *)(v213._countAndFlagsBits + 48) & 1) != 0) {
      goto LABEL_52;
    }
    outlined retain of URLComponents((uint64_t)&v213);
    uint64_t v20 = String.subscript.getter();
    uint64_t object = MEMORY[0x185301F50](v20);
    uint64_t v13 = v21;
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v213);
  }
  v200[0]._uint64_t countAndFlagsBits = object;
  v200[0]._uint64_t object = v13;
  swift_bridgeObjectRetain();
  v14._uint64_t countAndFlagsBits = 58;
  v14._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = object;
  v15._uint64_t object = v13;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  unint64_t v16 = v218._countAndFlagsBits;
  if (v218._countAndFlagsBits)
  {
    uint64_t v17 = (uint64_t)v217._object;
    uint64_t v18 = outlined retain of URLComponents((uint64_t)&v213);
    unint64_t v19 = v16;
  }
  else if (BYTE4(v213._object) == 1 && countAndFlagsBits && (*(unsigned char *)(countAndFlagsBits + 120) & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v213);
    uint64_t v25 = String.subscript.getter();
    uint64_t v17 = MEMORY[0x185301F50](v25);
    unint64_t v19 = v26;
    uint64_t v18 = swift_bridgeObjectRelease();
  }
  else
  {
    outlined retain of URLComponents((uint64_t)&v213);
    uint64_t v18 = URLComponents._URLComponents.port.getter();
    if (v22)
    {
      URLComponents._URLComponents.percentEncodedUser.getter();
      uint64_t v24 = v23;
      uint64_t v18 = swift_bridgeObjectRelease();
      if (!v24)
      {
        outlined release of URLComponents((uint64_t)&v213);
        goto LABEL_52;
      }
    }
    uint64_t v17 = 0;
    unint64_t v19 = 0xE000000000000000;
  }
  uint64_t v27 = v17 & 0xFFFFFFFFFFFFLL;
  if ((v19 & 0x2000000000000000) != 0) {
    uint64_t v28 = HIBYTE(v19) & 0xF;
  }
  else {
    uint64_t v28 = v17 & 0xFFFFFFFFFFFFLL;
  }
  if (!v28)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v213);
    goto LABEL_51;
  }
  if ((v221[24] & 1) == 0)
  {
    if ((v19 & 0x1000000000000000) != 0)
    {
      uint64_t v195 = countAndFlagsBits;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      if ((v19 & 0x2000000000000000) != 0)
      {
        v200[0]._uint64_t countAndFlagsBits = v17;
        v200[0]._uint64_t object = (void *)(v19 & 0xFFFFFFFFFFFFFFLL);
        int v198 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        uint64_t v199 = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)v200, HIBYTE(v19) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v198, 0, (unsigned __int8 *)v200, HIBYTE(v19) & 0xF, &v196);
        uint64_t v35 = v196;
        uint64_t v37 = (uint64_t)v197;
        swift_release();
      }
      else
      {
        if ((v17 & 0x1000000000000000) != 0)
        {
          BOOL v34 = (unsigned __int8 *)((v19 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          BOOL v34 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
          uint64_t v27 = v55;
        }
        v200[0]._uint64_t countAndFlagsBits = (uint64_t)@nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        v200[0]._uint64_t object = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        uint64_t v35 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v34, v27, (uint64_t (**)(uint64_t, uint64_t, uint64_t))v200, 0, v34, v27);
        uint64_t v37 = v36;
      }
      swift_bridgeObjectRelease();
      if (v37 != 1)
      {
        swift_bridgeObjectRelease_n();
        outlined release of URLComponents((uint64_t)&v213);
        outlined consume of AttributedString.AttributeRunBoundaries?(v35, v37);
        if (!v37) {
          goto LABEL_52;
        }
LABEL_51:
        v58._uint64_t countAndFlagsBits = 12079;
        v58._uint64_t object = (void *)0xE200000000000000;
        String.append(_:)(v58);
        goto LABEL_52;
      }
      uint64_t v195 = countAndFlagsBits;
    }
    v200[0]._uint64_t countAndFlagsBits = v17;
    v200[0]._uint64_t object = (void *)v19;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    unsigned __int8 v38 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v39 = objc_msgSend(v38, sel__fastCharacterContents);
    id v40 = v38;
    if (v39)
    {
      v200[0]._uint64_t countAndFlagsBits = v17;
      v200[0]._uint64_t object = (void *)v19;
      StringProtocol._ephemeralString.getter();
      unsigned __int8 v41 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v42 = objc_msgSend(v41, sel_length);
      uint64_t v43 = swift_unknownObjectRelease();
      MEMORY[0x1F4188790](v43);
      LOBYTE(v193) = 0;
      MEMORY[0x1F4188790](v44);
      id v190 = v39;
      id v191 = v42;
      specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v39, (uint64_t)v42, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v45, (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)v189);
      uint64_t v47 = v46;
      swift_bridgeObjectRelease_n();
      outlined release of URLComponents((uint64_t)&v213);
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = v195;
      if (!v47) {
        goto LABEL_52;
      }
      goto LABEL_51;
    }
    v200[0]._uint64_t countAndFlagsBits = v17;
    v200[0]._uint64_t object = (void *)v19;
    swift_bridgeObjectRetain();
    uint64_t v49 = String.init<A>(_:)();
    unint64_t v50 = v48;
    uint64_t countAndFlagsBits = v195;
    if ((v48 & 0x1000000000000000) != 0)
    {
      uint64_t v49 = static String._copying(_:)();
      unint64_t v57 = v56;
      swift_bridgeObjectRelease();
      unint64_t v50 = v57;
      if ((v57 & 0x2000000000000000) == 0) {
        goto LABEL_42;
      }
    }
    else if ((v48 & 0x2000000000000000) == 0)
    {
LABEL_42:
      if ((v49 & 0x1000000000000000) != 0)
      {
        uint64_t v51 = (unsigned __int8 *)((v50 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v52 = v49 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v51 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      v200[0]._uint64_t countAndFlagsBits = (uint64_t)@nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      v200[0]._uint64_t object = 0;
      _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v51, v52, (uint64_t (**)(uint64_t, uint64_t, uint64_t))v200, 0, v51, v52);
      id v54 = v53;
LABEL_50:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      outlined release of URLComponents((uint64_t)&v213);
      swift_bridgeObjectRelease();
      if (!v54) {
        goto LABEL_52;
      }
      goto LABEL_51;
    }
    v200[0]._uint64_t countAndFlagsBits = v49;
    v200[0]._uint64_t object = (void *)(v50 & 0xFFFFFFFFFFFFFFLL);
    int v198 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    uint64_t v199 = 0;
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)v200, HIBYTE(v50) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v198, 0, (unsigned __int8 *)v200, HIBYTE(v50) & 0xF, &v196);
    id v54 = v197;
    swift_release();
    goto LABEL_50;
  }
  v200[0]._uint64_t countAndFlagsBits = v17;
  v200[0]._uint64_t object = (void *)v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v193 = v200;
  uint64_t v194 = MEMORY[0x1E4FBC870];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v192, v17, v19);
  if (v29 == 1)
  {
    id v31 = v200[0]._object;
    Swift::Int v30 = v200[0]._countAndFlagsBits;
    swift_bridgeObjectRetain();
    specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v30, (unint64_t)v31, MEMORY[0x1E4FBC870]);
    uint64_t v33 = v32;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v33 = v29;
    swift_bridgeObjectRelease_n();
  }
  outlined release of URLComponents((uint64_t)&v213);
  swift_bridgeObjectRelease();
  if (v33) {
    goto LABEL_51;
  }
LABEL_52:
  uint64_t v59 = outlined retain of URLComponents((uint64_t)&v213);
  unsigned long long v60 = URLComponents._URLComponents.user.getter(v59);
  char v62 = v61;
  outlined release of URLComponents((uint64_t)&v213);
  if (v62)
  {
    v63._uint64_t countAndFlagsBits = (uint64_t)v60;
    v63._uint64_t object = v62;
    String.append(_:)(v63);
    swift_bridgeObjectRelease();
  }
  uint64_t v64 = outlined retain of URLComponents((uint64_t)&v213);
  uint64_t v65 = URLComponents._URLComponents.password.getter(v64);
  long long v67 = v66;
  outlined release of URLComponents((uint64_t)&v213);
  if (v67)
  {
    uint64_t v68 = outlined retain of URLComponents((uint64_t)&v213);
    URLComponents._URLComponents.user.getter(v68);
    uint64_t v70 = v69;
    outlined release of URLComponents((uint64_t)&v213);
    swift_bridgeObjectRelease();
    if (v70)
    {
      v71._uint64_t countAndFlagsBits = 58;
      v71._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v71);
    }
    v72._uint64_t countAndFlagsBits = (uint64_t)v65;
    v72._uint64_t object = v67;
    String.append(_:)(v72);
    swift_bridgeObjectRelease();
  }
  if (a2)
  {
    outlined retain of URLComponents((uint64_t)&v213);
    uint64_t v73 = URLComponents._URLComponents.encodedHost.getter();
    long long v75 = v74;
LABEL_60:
    outlined release of URLComponents((uint64_t)&v213);
    goto LABEL_61;
  }
  unint64_t v76 = v218._countAndFlagsBits;
  if (v218._countAndFlagsBits)
  {
    uint64_t v77 = (uint64_t)v217._object;
    uint64_t v78 = outlined retain of URLComponents((uint64_t)&v213);
    unint64_t v79 = v76;
  }
  else if (BYTE4(v213._object) == 1 && countAndFlagsBits && (*(unsigned char *)(countAndFlagsBits + 120) & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v213);
    uint64_t v83 = String.subscript.getter();
    uint64_t v77 = MEMORY[0x185301F50](v83);
    unint64_t v79 = v84;
    uint64_t v78 = swift_bridgeObjectRelease();
  }
  else
  {
    outlined retain of URLComponents((uint64_t)&v213);
    uint64_t v78 = URLComponents._URLComponents.port.getter();
    if (v80)
    {
      URLComponents._URLComponents.percentEncodedUser.getter();
      uint64_t v82 = v81;
      uint64_t v78 = swift_bridgeObjectRelease();
      if (!v82)
      {
        outlined release of URLComponents((uint64_t)&v213);
        goto LABEL_91;
      }
    }
    uint64_t v77 = 0;
    unint64_t v79 = 0xE000000000000000;
  }
  uint64_t v85 = v77 & 0xFFFFFFFFFFFFLL;
  if ((v79 & 0x2000000000000000) != 0) {
    uint64_t v86 = HIBYTE(v79) & 0xF;
  }
  else {
    uint64_t v86 = v77 & 0xFFFFFFFFFFFFLL;
  }
  if (v86)
  {
    if (v221[24] == 1)
    {
      v200[0]._uint64_t countAndFlagsBits = v77;
      v200[0]._uint64_t object = (void *)v79;
      MEMORY[0x1F4188790](v78);
      uint64_t v193 = v200;
      uint64_t v194 = MEMORY[0x1E4FBC870];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v87 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v192, v77, v79);
      if (v88 == (void *)1)
      {
        Swift::String v89 = v200[0];
        swift_bridgeObjectRetain();
        uint64_t v73 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v89._countAndFlagsBits, (unint64_t)v89._object, MEMORY[0x1E4FBC870]);
        long long v75 = v90;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v73 = (uint64_t)v87;
        long long v75 = v88;
        swift_bridgeObjectRelease_n();
      }
      outlined release of URLComponents((uint64_t)&v213);
      if (!v75) {
        goto LABEL_91;
      }
      goto LABEL_87;
    }
    if ((v79 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      if ((v79 & 0x2000000000000000) != 0)
      {
        v200[0]._uint64_t countAndFlagsBits = v77;
        v200[0]._uint64_t object = (void *)(v79 & 0xFFFFFFFFFFFFFFLL);
        int v198 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        uint64_t v199 = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)v200, HIBYTE(v79) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v198, 0, (unsigned __int8 *)v200, HIBYTE(v79) & 0xF, &v196);
        uint64_t v73 = v196;
        long long v75 = v197;
        swift_release();
      }
      else
      {
        if ((v77 & 0x1000000000000000) != 0)
        {
          uint64_t v91 = (unsigned __int8 *)((v79 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          uint64_t v91 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
          uint64_t v85 = v156;
        }
        v200[0]._uint64_t countAndFlagsBits = (uint64_t)@nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        v200[0]._uint64_t object = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        uint64_t v73 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v91, v85, (uint64_t (**)(uint64_t, uint64_t, uint64_t))v200, 0, v91, v85);
        long long v75 = v92;
      }
      swift_bridgeObjectRelease();
      if (v75 != (void *)1)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_60;
      }
    }
    v200[0]._uint64_t countAndFlagsBits = v77;
    v200[0]._uint64_t object = (void *)v79;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    char v111 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v112 = objc_msgSend(v111, sel__fastCharacterContents);
    id v113 = v111;
    if (v112)
    {
      v200[0]._uint64_t countAndFlagsBits = v77;
      v200[0]._uint64_t object = (void *)v79;
      StringProtocol._ephemeralString.getter();
      uint64_t v114 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v115 = objc_msgSend(v114, sel_length);
      uint64_t v116 = swift_unknownObjectRelease();
      MEMORY[0x1F4188790](v116);
      LOBYTE(v193) = 0;
      MEMORY[0x1F4188790](v117);
      id v190 = v112;
      id v191 = v115;
      uint64_t v73 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v112, (uint64_t)v115, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v118, (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)v189);
      long long v75 = v119;
      swift_bridgeObjectRelease_n();
      outlined release of URLComponents((uint64_t)&v213);
LABEL_61:
      if (!v75) {
        goto LABEL_91;
      }
      goto LABEL_87;
    }
    v200[0]._uint64_t countAndFlagsBits = v77;
    v200[0]._uint64_t object = (void *)v79;
    swift_bridgeObjectRetain();
    uint64_t v144 = String.init<A>(_:)();
    unint64_t v145 = v143;
    if ((v143 & 0x1000000000000000) != 0)
    {
      uint64_t v144 = static String._copying(_:)();
      unint64_t v159 = v158;
      swift_bridgeObjectRelease();
      unint64_t v145 = v159;
      if ((v159 & 0x2000000000000000) == 0) {
        goto LABEL_131;
      }
    }
    else if ((v143 & 0x2000000000000000) == 0)
    {
LABEL_131:
      if ((v144 & 0x1000000000000000) != 0)
      {
        uint64_t v146 = (unsigned __int8 *)((v145 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v147 = v144 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v146 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      v200[0]._uint64_t countAndFlagsBits = (uint64_t)@nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      v200[0]._uint64_t object = 0;
      uint64_t v73 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v146, v147, (uint64_t (**)(uint64_t, uint64_t, uint64_t))v200, 0, v146, v147);
      long long v75 = v148;
      goto LABEL_147;
    }
    v200[0]._uint64_t countAndFlagsBits = v144;
    v200[0]._uint64_t object = (void *)(v145 & 0xFFFFFFFFFFFFFFLL);
    int v198 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    uint64_t v199 = 0;
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)v200, HIBYTE(v145) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v198, 0, (unsigned __int8 *)v200, HIBYTE(v145) & 0xF, &v196);
    uint64_t v73 = v196;
    long long v75 = v197;
    swift_release();
LABEL_147:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    goto LABEL_60;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined release of URLComponents((uint64_t)&v213);
  uint64_t v73 = 0;
  long long v75 = (void *)0xE000000000000000;
LABEL_87:
  uint64_t v93 = outlined retain of URLComponents((uint64_t)&v213);
  URLComponents._URLComponents.user.getter(v93);
  uint64_t v95 = v94;
  outlined release of URLComponents((uint64_t)&v213);
  swift_bridgeObjectRelease();
  if (v95
    || (uint64_t v96 = outlined retain of URLComponents((uint64_t)&v213),
        URLComponents._URLComponents.password.getter(v96),
        uint64_t v98 = v97,
        outlined release of URLComponents((uint64_t)&v213),
        swift_bridgeObjectRelease(),
        v98))
  {
    v99._uint64_t countAndFlagsBits = 64;
    v99._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v99);
  }
  v100._uint64_t countAndFlagsBits = v73;
  v100._uint64_t object = v75;
  String.append(_:)(v100);
  swift_bridgeObjectRelease();
LABEL_91:
  v200[7] = v220;
  v201[0] = *(_OWORD *)v221;
  *(_OWORD *)((char *)v201 + 10) = *(_OWORD *)&v221[10];
  v200[3] = v216;
  v200[4] = v217;
  v200[5] = v218;
  v200[6] = v219;
  v200[0] = v213;
  v200[1] = v214;
  v200[2] = v215;
  uint64_t v101 = URLComponents.port.getter();
  if (v102) {
    goto LABEL_153;
  }
  uint64_t v103 = v101;
  unint64_t v104 = v218._countAndFlagsBits;
  if (v218._countAndFlagsBits)
  {
    uint64_t v105 = (uint64_t)v217._object;
    uint64_t v106 = outlined retain of URLComponents((uint64_t)&v213);
    unint64_t v107 = v104;
  }
  else if (BYTE4(v213._object) == 1 && countAndFlagsBits && (*(unsigned char *)(countAndFlagsBits + 120) & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v213);
    uint64_t v120 = String.subscript.getter();
    uint64_t v105 = MEMORY[0x185301F50](v120);
    unint64_t v107 = v121;
    uint64_t v106 = swift_bridgeObjectRelease();
  }
  else
  {
    outlined retain of URLComponents((uint64_t)&v213);
    uint64_t v106 = URLComponents._URLComponents.port.getter();
    if (v108)
    {
      URLComponents._URLComponents.percentEncodedUser.getter();
      uint64_t v110 = v109;
      uint64_t v106 = swift_bridgeObjectRelease();
      if (!v110)
      {
        outlined release of URLComponents((uint64_t)&v213);
        goto LABEL_152;
      }
    }
    uint64_t v105 = 0;
    unint64_t v107 = 0xE000000000000000;
  }
  uint64_t v122 = v105 & 0xFFFFFFFFFFFFLL;
  if ((v107 & 0x2000000000000000) != 0) {
    uint64_t v123 = HIBYTE(v107) & 0xF;
  }
  else {
    uint64_t v123 = v105 & 0xFFFFFFFFFFFFLL;
  }
  if (!v123)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v213);
LABEL_151:
    v162._uint64_t countAndFlagsBits = 58;
    v162._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v162);
    goto LABEL_152;
  }
  if (v221[24])
  {
    v200[0]._uint64_t countAndFlagsBits = v105;
    v200[0]._uint64_t object = (void *)v107;
    MEMORY[0x1F4188790](v106);
    uint64_t v193 = v200;
    uint64_t v194 = MEMORY[0x1E4FBC870];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v192, v105, v107);
    if (v124 == 1)
    {
      uint64_t v126 = v200[0]._object;
      Swift::Int v125 = v200[0]._countAndFlagsBits;
      swift_bridgeObjectRetain();
      specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v125, (unint64_t)v126, MEMORY[0x1E4FBC870]);
      uint64_t v128 = v127;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v128 = v124;
      swift_bridgeObjectRelease_n();
    }
    outlined release of URLComponents((uint64_t)&v213);
    swift_bridgeObjectRelease();
    if (!v128) {
      goto LABEL_152;
    }
    goto LABEL_151;
  }
  if ((v107 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    if ((v107 & 0x2000000000000000) != 0)
    {
      v200[0]._uint64_t countAndFlagsBits = v105;
      v200[0]._uint64_t object = (void *)(v107 & 0xFFFFFFFFFFFFFFLL);
      int v198 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      uint64_t v199 = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)v200, HIBYTE(v107) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v198, 0, (unsigned __int8 *)v200, HIBYTE(v107) & 0xF, &v196);
      uint64_t v130 = v196;
      uint64_t v132 = (uint64_t)v197;
      swift_release();
    }
    else
    {
      if ((v105 & 0x1000000000000000) != 0)
      {
        unint64_t v129 = (unsigned __int8 *)((v107 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        unint64_t v129 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        uint64_t v122 = v157;
      }
      v200[0]._uint64_t countAndFlagsBits = (uint64_t)@nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      v200[0]._uint64_t object = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      uint64_t v130 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v129, v122, (uint64_t (**)(uint64_t, uint64_t, uint64_t))v200, 0, v129, v122);
      uint64_t v132 = v131;
    }
    swift_bridgeObjectRelease();
    if (v132 != 1)
    {
      swift_bridgeObjectRelease_n();
      outlined release of URLComponents((uint64_t)&v213);
      outlined consume of AttributedString.AttributeRunBoundaries?(v130, v132);
      if (!v132) {
        goto LABEL_152;
      }
      goto LABEL_151;
    }
  }
  v200[0]._uint64_t countAndFlagsBits = v105;
  v200[0]._uint64_t object = (void *)v107;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  uint64_t v133 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v134 = objc_msgSend(v133, sel__fastCharacterContents);
  id v135 = v133;
  if (v134)
  {
    v200[0]._uint64_t countAndFlagsBits = v105;
    v200[0]._uint64_t object = (void *)v107;
    StringProtocol._ephemeralString.getter();
    unint64_t v136 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v137 = objc_msgSend(v136, sel_length);
    uint64_t v138 = swift_unknownObjectRelease();
    MEMORY[0x1F4188790](v138);
    LOBYTE(v193) = 0;
    MEMORY[0x1F4188790](v139);
    id v190 = v134;
    id v191 = v137;
    specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v134, (uint64_t)v137, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v140, (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)v189);
    uint64_t v142 = v141;
    swift_bridgeObjectRelease_n();
    outlined release of URLComponents((uint64_t)&v213);
    swift_bridgeObjectRelease();
    if (!v142) {
      goto LABEL_152;
    }
    goto LABEL_151;
  }
  v200[0]._uint64_t countAndFlagsBits = v105;
  v200[0]._uint64_t object = (void *)v107;
  swift_bridgeObjectRetain();
  uint64_t v150 = String.init<A>(_:)();
  unint64_t v151 = v149;
  if ((v149 & 0x1000000000000000) != 0)
  {
    uint64_t v150 = static String._copying(_:)();
    unint64_t v161 = v160;
    swift_bridgeObjectRelease();
    unint64_t v151 = v161;
    if ((v161 & 0x2000000000000000) == 0) {
      goto LABEL_136;
    }
LABEL_149:
    v200[0]._uint64_t countAndFlagsBits = v150;
    v200[0]._uint64_t object = (void *)(v151 & 0xFFFFFFFFFFFFFFLL);
    int v198 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    uint64_t v199 = 0;
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)v200, HIBYTE(v151) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v198, 0, (unsigned __int8 *)v200, HIBYTE(v151) & 0xF, &v196);
    uint64_t v155 = v197;
    swift_release();
    goto LABEL_150;
  }
  if ((v149 & 0x2000000000000000) != 0) {
    goto LABEL_149;
  }
LABEL_136:
  if ((v150 & 0x1000000000000000) != 0)
  {
    unint64_t v152 = (unsigned __int8 *)((v151 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v153 = v150 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v152 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
  v200[0]._uint64_t countAndFlagsBits = (uint64_t)@nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
  v200[0]._uint64_t object = 0;
  _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v152, v153, (uint64_t (**)(uint64_t, uint64_t, uint64_t))v200, 0, v152, v153);
  uint64_t v155 = v154;
LABEL_150:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  outlined release of URLComponents((uint64_t)&v213);
  swift_bridgeObjectRelease();
  if (v155) {
    goto LABEL_151;
  }
LABEL_152:
  v200[0]._uint64_t countAndFlagsBits = v103;
  v163._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v163);
  swift_bridgeObjectRelease();
LABEL_153:
  outlined retain of URLComponents((uint64_t)&v213);
  unint64_t v164 = (unint64_t)URLComponents._URLComponents.path.getter();
  unint64_t v166 = v165;
  outlined release of URLComponents((uint64_t)&v213);
  swift_bridgeObjectRelease();
  uint64_t v167 = HIBYTE(v166) & 0xF;
  if ((v166 & 0x2000000000000000) == 0) {
    uint64_t v167 = v164 & 0xFFFFFFFFFFFFLL;
  }
  if (v167)
  {
    outlined retain of URLComponents((uint64_t)&v213);
    uint64_t v168 = (uint64_t)URLComponents._URLComponents.path.getter();
    unint64_t v170 = v169;
    outlined release of URLComponents((uint64_t)&v213);
    v200[0]._uint64_t countAndFlagsBits = v168;
    v200[0]._uint64_t object = v170;
    swift_bridgeObjectRetain();
    v171._uint64_t countAndFlagsBits = 47;
    v171._uint64_t object = (void *)0xE100000000000000;
    LOBYTE(v168) = String.hasSuffix(_:)(v171);
    swift_bridgeObjectRelease();
    if (v168)
    {
      uint64_t v172 = outlined retain of URLComponents((uint64_t)&v213);
      URLComponents._URLComponents.query.getter(v172);
      uint64_t v174 = v173;
      outlined release of URLComponents((uint64_t)&v213);
      swift_bridgeObjectRelease();
      if (!v174)
      {
        uint64_t v175 = outlined retain of URLComponents((uint64_t)&v213);
        URLComponents._URLComponents.fragment.getter(v175);
        uint64_t v177 = v176;
        outlined release of URLComponents((uint64_t)&v213);
        swift_bridgeObjectRelease();
        if (!v177)
        {
          specialized RangeReplaceableCollection<>.removeLast()();
          swift_bridgeObjectRelease();
        }
      }
    }
    String.append(_:)(v200[0]);
    swift_bridgeObjectRelease();
  }
  uint64_t v178 = outlined retain of URLComponents((uint64_t)&v213);
  char v179 = URLComponents._URLComponents.query.getter(v178);
  long long v181 = v180;
  outlined release of URLComponents((uint64_t)&v213);
  if (v181)
  {
    v200[0]._uint64_t countAndFlagsBits = 63;
    v200[0]._uint64_t object = (void *)0xE100000000000000;
    v182._uint64_t countAndFlagsBits = (uint64_t)v179;
    v182._uint64_t object = v181;
    String.append(_:)(v182);
    swift_bridgeObjectRelease();
    String.append(_:)(v200[0]);
    swift_bridgeObjectRelease();
  }
  uint64_t v183 = outlined retain of URLComponents((uint64_t)&v213);
  uint64_t v184 = URLComponents._URLComponents.fragment.getter(v183);
  uint64_t v186 = v185;
  outlined release of URLComponents((uint64_t)&v213);
  if (v186)
  {
    v200[0]._uint64_t countAndFlagsBits = 35;
    v200[0]._uint64_t object = (void *)0xE100000000000000;
    v187._uint64_t countAndFlagsBits = (uint64_t)v184;
    v187._uint64_t object = v186;
    String.append(_:)(v187);
    swift_bridgeObjectRelease();
    String.append(_:)(v200[0]);
    swift_bridgeObjectRelease();
  }
  return v202;
}

uint64_t URL.FormatStyle.formatMultiLevelSubdomains(from:forHost:)(uint64_t a1)
{
  uint64_t v2 = (void *)String._bridgeToObjectiveCImpl()();
  id v3 = (id)__NSURLGetTopLevelDomain(v2);
  uint64_t result = swift_unknownObjectRelease();
  if (v3)
  {
    id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    unint64_t v7 = v6;

    v15[0] = 46;
    v15[1] = 0xE100000000000000;
    MEMORY[0x1F4188790](v8);
    uint64_t v14[2] = v15;
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)specialized partial apply, (uint64_t)v14, (uint64_t)v5, v7);
    swift_bridgeObjectRelease();
    uint64_t v10 = *(void *)(v9 + 16);
    uint64_t result = swift_bridgeObjectRelease();
    int64_t v11 = v10 + 2;
    if (__OFADD__(v10, 2))
    {
      __break(1u);
    }
    else
    {
      unint64_t v12 = *(void *)(*(void *)a1 + 16);
      if (v11 >= (uint64_t)v12) {
        return result;
      }
      unint64_t v13 = v12 - v11;
      if (!__OFSUB__(v12, v11))
      {
        if (!v13) {
          return result;
        }
        if ((v13 & 0x8000000000000000) == 0)
        {
          if (v12 >= v13) {
            return specialized Array.replaceSubrange<A>(_:with:)(0, v13);
          }
LABEL_13:
          __break(1u);
          return result;
        }
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance URL.FormatStyle@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = URL.FormatStyle.format(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t URL.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v3;
  long long v6 = *(_OWORD *)(v3 + 1);
  return (*(uint64_t (**)(uint64_t *))(a3 + 48))(&v5);
}

Swift::String __swiftcall URL.formatted()()
{
  uint64_t v37 = v0[1];
  uint64_t v38 = *v0;
  uint64_t v36 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v1 = static _SetStorage.allocate(capacity:)();
  char v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = v1 + 56;
  while (1)
  {
    char v5 = v2;
    long long v6 = (char *)&outlined read-only object #0 of URL.formatted() + 16 * v3;
    uint64_t v8 = *((void *)v6 + 4);
    uint64_t v7 = *((void *)v6 + 5);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v9 = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v1 + 32);
    unint64_t v12 = v9 & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = *(void *)(v4 + 8 * (v12 >> 6));
    uint64_t v15 = 1 << v12;
    if (((1 << v12) & v14) == 0) {
      break;
    }
    uint64_t v16 = *(void *)(v1 + 48);
    uint64_t v17 = (void *)(v16 + 16 * v12);
    if (*v17 != v8 || v17[1] != v7)
    {
      Swift::Int v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((v9 & 1) == 0)
      {
        uint64_t v19 = ~v11;
        unint64_t v12 = (v12 + 1) & v19;
        unint64_t v13 = v12 >> 6;
        uint64_t v14 = *(void *)(v4 + 8 * (v12 >> 6));
        uint64_t v15 = 1 << v12;
        if ((v14 & (1 << v12)) == 0) {
          break;
        }
        uint64_t v20 = (void *)(v16 + 16 * v12);
        if (*v20 != v8 || v20[1] != v7)
        {
          Swift::Int v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((v9 & 1) == 0)
          {
            unint64_t v12 = (v12 + 1) & v19;
            unint64_t v13 = v12 >> 6;
            uint64_t v14 = *(void *)(v4 + 8 * (v12 >> 6));
            uint64_t v15 = 1 << v12;
            if ((v14 & (1 << v12)) == 0) {
              break;
            }
            char v22 = (void *)(v16 + 16 * v12);
            if (*v22 != v8 || v22[1] != v7)
            {
              Swift::Int v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((v9 & 1) == 0)
              {
                unint64_t v12 = (v12 + 1) & v19;
                unint64_t v13 = v12 >> 6;
                uint64_t v14 = *(void *)(v4 + 8 * (v12 >> 6));
                uint64_t v15 = 1 << v12;
                if ((v14 & (1 << v12)) == 0) {
                  break;
                }
                uint64_t v24 = (void *)(v16 + 16 * v12);
                if (*v24 != v8 || v24[1] != v7)
                {
                  Swift::Int v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  if ((v9 & 1) == 0)
                  {
                    unint64_t v12 = (v12 + 1) & v19;
                    unint64_t v13 = v12 >> 6;
                    uint64_t v14 = *(void *)(v4 + 8 * (v12 >> 6));
                    uint64_t v15 = 1 << v12;
                    if ((v14 & (1 << v12)) == 0) {
                      break;
                    }
                    uint64_t v25 = (void *)(v16 + 16 * v12);
                    if (*v25 != v8 || v25[1] != v7)
                    {
                      do
                      {
                        Swift::Int v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        if (v9) {
                          break;
                        }
                        unint64_t v12 = (v12 + 1) & v19;
                        unint64_t v13 = v12 >> 6;
                        uint64_t v14 = *(void *)(v4 + 8 * (v12 >> 6));
                        uint64_t v15 = 1 << v12;
                        if ((v14 & (1 << v12)) == 0) {
                          goto LABEL_37;
                        }
                        unint64_t v26 = (void *)(v16 + 16 * v12);
                      }
                      while (*v26 != v8 || v26[1] != v7);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_3:
    char v2 = 1;
    uint64_t v3 = 1;
    if (v5)
    {
      swift_arrayDestroy();
      v53[1] = 0;
      *(void *)&long long v54 = 0;
      BYTE8(v54) = 0;
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      LOBYTE(v57) = 0;
      uint64_t v58 = 0;
      *(void *)&long long v59 = 0;
      BYTE8(v59) = 1;
      uint64_t v63 = 0;
      LOBYTE(v64) = 0;
      uint64_t v60 = 0;
      uint64_t v61 = 0;
      LOBYTE(v62) = 0;
      uint64_t v65 = 0;
      *(void *)&long long v66 = v1;
      BYTE8(v66) = 1;
      uint64_t v67 = 0;
      uint64_t v68 = 0;
      LOBYTE(v69) = 0;
      uint64_t v70 = 0;
      *(void *)&long long v71 = 0;
      BYTE8(v71) = 0;
      uint64_t v72 = 0;
      uint64_t v73 = 0;
      long long v49 = 0u;
      long long v50 = v69;
      long long v51 = v71;
      long long v52 = 0u;
      LOBYTE(v53[0]) = 1;
      long long v47 = v64;
      long long v48 = v66;
      long long v42 = 0u;
      long long v43 = v57;
      long long v45 = 0u;
      long long v46 = v62;
      long long v44 = v59;
      long long v40 = v53[0];
      long long v41 = v54;
      v39[0] = v38;
      v39[1] = v37;
      v39[2] = v36;
      uint64_t v32 = URL.FormatStyle.format(_:)(v39);
      BOOL v34 = v33;
      outlined release of URL.FormatStyle((uint64_t)v53);
      Swift::Int v9 = v32;
      uint64_t v10 = v34;
      goto LABEL_41;
    }
  }
LABEL_37:
  *(void *)(v4 + 8 * v13) = v15 | v14;
  uint64_t v28 = (void *)(*(void *)(v1 + 48) + 16 * v12);
  *uint64_t v28 = v8;
  v28[1] = v7;
  uint64_t v29 = *(void *)(v1 + 16);
  BOOL v30 = __OFADD__(v29, 1);
  uint64_t v31 = v29 + 1;
  if (!v30)
  {
    *(void *)(v1 + 16) = v31;
    goto LABEL_3;
  }
  __break(1u);
LABEL_41:
  result._uint64_t object = v10;
  result._uint64_t countAndFlagsBits = v9;
  return result;
}

Swift::Int static FormatStyle<>.url.getter@<X0>(uint64_t a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = static _SetStorage.allocate(capacity:)();
  char v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = v2 + 56;
  while (1)
  {
    char v6 = v3;
    uint64_t v7 = (char *)&outlined read-only object #0 of static FormatStyle<>.url.getter + 16 * v4;
    uint64_t v9 = *((void *)v7 + 4);
    uint64_t v8 = *((void *)v7 + 5);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int result = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v12 = result & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = *(void *)(v5 + 8 * (v12 >> 6));
    uint64_t v15 = 1 << v12;
    if (((1 << v12) & v14) == 0) {
      break;
    }
    uint64_t v16 = *(void *)(v2 + 48);
    uint64_t v17 = (void *)(v16 + 16 * v12);
    if (*v17 != v9 || v17[1] != v8)
    {
      Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        uint64_t v19 = ~v11;
        unint64_t v12 = (v12 + 1) & v19;
        unint64_t v13 = v12 >> 6;
        uint64_t v14 = *(void *)(v5 + 8 * (v12 >> 6));
        uint64_t v15 = 1 << v12;
        if ((v14 & (1 << v12)) == 0) {
          break;
        }
        uint64_t v20 = (void *)(v16 + 16 * v12);
        if (*v20 != v9 || v20[1] != v8)
        {
          Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
          {
            unint64_t v12 = (v12 + 1) & v19;
            unint64_t v13 = v12 >> 6;
            uint64_t v14 = *(void *)(v5 + 8 * (v12 >> 6));
            uint64_t v15 = 1 << v12;
            if ((v14 & (1 << v12)) == 0) {
              break;
            }
            char v22 = (void *)(v16 + 16 * v12);
            if (*v22 != v9 || v22[1] != v8)
            {
              Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((result & 1) == 0)
              {
                unint64_t v12 = (v12 + 1) & v19;
                unint64_t v13 = v12 >> 6;
                uint64_t v14 = *(void *)(v5 + 8 * (v12 >> 6));
                uint64_t v15 = 1 << v12;
                if ((v14 & (1 << v12)) == 0) {
                  break;
                }
                uint64_t v24 = (void *)(v16 + 16 * v12);
                if (*v24 != v9 || v24[1] != v8)
                {
                  do
                  {
                    Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    if (result) {
                      break;
                    }
                    unint64_t v12 = (v12 + 1) & v19;
                    unint64_t v13 = v12 >> 6;
                    uint64_t v14 = *(void *)(v5 + 8 * (v12 >> 6));
                    uint64_t v15 = 1 << v12;
                    if ((v14 & (1 << v12)) == 0) {
                      goto LABEL_33;
                    }
                    uint64_t v25 = (void *)(v16 + 16 * v12);
                  }
                  while (*v25 != v9 || v25[1] != v8);
                }
              }
            }
          }
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_3:
    char v3 = 1;
    uint64_t v4 = 1;
    if (v6)
    {
      Swift::Int result = swift_arrayDestroy();
      *(unsigned char *)a1 = 1;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(unsigned char *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      *(unsigned char *)(a1 + 48) = 0;
      *(void *)(a1 + 56) = 0;
      *(void *)(a1 + 64) = 0;
      *(unsigned char *)(a1 + 72) = 1;
      *(void *)(a1 + 80) = 0;
      *(void *)(a1 + 88) = 0;
      *(unsigned char *)(a1 + 96) = 0;
      *(void *)(a1 + 104) = 0;
      *(unsigned char *)(a1 + 112) = 0;
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 128) = v2;
      *(unsigned char *)(a1 + 136) = 1;
      *(void *)(a1 + 144) = 0;
      *(void *)(a1 + 152) = 0;
      *(unsigned char *)(a1 + 160) = 0;
      *(void *)(a1 + 168) = 0;
      *(void *)(a1 + 176) = 0;
      *(unsigned char *)(a1 + 184) = 0;
      *(void *)(a1 + 192) = 0;
      *(void *)(a1 + 200) = 0;
      return result;
    }
  }
LABEL_33:
  *(void *)(v5 + 8 * v13) = v15 | v14;
  uint64_t v27 = (void *)(*(void *)(v2 + 48) + 16 * v12);
  void *v27 = v9;
  v27[1] = v8;
  uint64_t v28 = *(void *)(v2 + 16);
  BOOL v29 = __OFADD__(v28, 1);
  uint64_t v30 = v28 + 1;
  if (!v29)
  {
    *(void *)(v2 + 16) = v30;
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

Swift::Int static ParseableFormatStyle<>.url.getter@<X0>(uint64_t a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = static _SetStorage.allocate(capacity:)();
  char v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = v2 + 56;
  while (1)
  {
    char v6 = v3;
    uint64_t v7 = (char *)&outlined read-only object #0 of static ParseableFormatStyle<>.url.getter + 16 * v4;
    uint64_t v9 = *((void *)v7 + 4);
    uint64_t v8 = *((void *)v7 + 5);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int result = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v12 = result & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = *(void *)(v5 + 8 * (v12 >> 6));
    uint64_t v15 = 1 << v12;
    if (((1 << v12) & v14) == 0) {
      break;
    }
    uint64_t v16 = *(void *)(v2 + 48);
    uint64_t v17 = (void *)(v16 + 16 * v12);
    if (*v17 != v9 || v17[1] != v8)
    {
      Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        uint64_t v19 = ~v11;
        unint64_t v12 = (v12 + 1) & v19;
        unint64_t v13 = v12 >> 6;
        uint64_t v14 = *(void *)(v5 + 8 * (v12 >> 6));
        uint64_t v15 = 1 << v12;
        if ((v14 & (1 << v12)) == 0) {
          break;
        }
        uint64_t v20 = (void *)(v16 + 16 * v12);
        if (*v20 != v9 || v20[1] != v8)
        {
          Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
          {
            unint64_t v12 = (v12 + 1) & v19;
            unint64_t v13 = v12 >> 6;
            uint64_t v14 = *(void *)(v5 + 8 * (v12 >> 6));
            uint64_t v15 = 1 << v12;
            if ((v14 & (1 << v12)) == 0) {
              break;
            }
            char v22 = (void *)(v16 + 16 * v12);
            if (*v22 != v9 || v22[1] != v8)
            {
              Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((result & 1) == 0)
              {
                unint64_t v12 = (v12 + 1) & v19;
                unint64_t v13 = v12 >> 6;
                uint64_t v14 = *(void *)(v5 + 8 * (v12 >> 6));
                uint64_t v15 = 1 << v12;
                if ((v14 & (1 << v12)) == 0) {
                  break;
                }
                uint64_t v24 = (void *)(v16 + 16 * v12);
                if (*v24 != v9 || v24[1] != v8)
                {
                  do
                  {
                    Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    if (result) {
                      break;
                    }
                    unint64_t v12 = (v12 + 1) & v19;
                    unint64_t v13 = v12 >> 6;
                    uint64_t v14 = *(void *)(v5 + 8 * (v12 >> 6));
                    uint64_t v15 = 1 << v12;
                    if ((v14 & (1 << v12)) == 0) {
                      goto LABEL_33;
                    }
                    uint64_t v25 = (void *)(v16 + 16 * v12);
                  }
                  while (*v25 != v9 || v25[1] != v8);
                }
              }
            }
          }
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_3:
    char v3 = 1;
    uint64_t v4 = 1;
    if (v6)
    {
      Swift::Int result = swift_arrayDestroy();
      *(unsigned char *)a1 = 1;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(unsigned char *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      *(unsigned char *)(a1 + 48) = 0;
      *(void *)(a1 + 56) = 0;
      *(void *)(a1 + 64) = 0;
      *(unsigned char *)(a1 + 72) = 1;
      *(void *)(a1 + 80) = 0;
      *(void *)(a1 + 88) = 0;
      *(unsigned char *)(a1 + 96) = 0;
      *(void *)(a1 + 104) = 0;
      *(unsigned char *)(a1 + 112) = 0;
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 128) = v2;
      *(unsigned char *)(a1 + 136) = 1;
      *(void *)(a1 + 144) = 0;
      *(void *)(a1 + 152) = 0;
      *(unsigned char *)(a1 + 160) = 0;
      *(void *)(a1 + 168) = 0;
      *(void *)(a1 + 176) = 0;
      *(unsigned char *)(a1 + 184) = 0;
      *(void *)(a1 + 192) = 0;
      *(void *)(a1 + 200) = 0;
      return result;
    }
  }
LABEL_33:
  *(void *)(v5 + 8 * v13) = v15 | v14;
  uint64_t v27 = (void *)(*(void *)(v2 + 48) + 16 * v12);
  void *v27 = v9;
  v27[1] = v8;
  uint64_t v28 = *(void *)(v2 + 16);
  BOOL v29 = __OFADD__(v28, 1);
  uint64_t v30 = v28 + 1;
  if (!v29)
  {
    *(void *)(v2 + 16) = v30;
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (unint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      unsigned __int8 v23 = a3 + 48;
      unsigned __int8 v24 = a3 + 55;
      unsigned __int8 v25 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v23 = 58;
      }
      else
      {
        unsigned __int8 v25 = 97;
        unsigned __int8 v24 = 65;
      }
      if (result)
      {
        uint64_t v26 = 0;
        do
        {
          unsigned int v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              uint64_t v13 = 0;
              if (v27 < 0x61 || v27 >= v25) {
                return (unsigned __int8 *)v13;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63) {
            return 0;
          }
          uint64_t v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  uint64_t v15 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v16 = a3 + 48;
  unsigned __int8 v17 = a3 + 55;
  unsigned __int8 v18 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v16 = 58;
  }
  else
  {
    unsigned __int8 v18 = 97;
    unsigned __int8 v17 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v19 = result + 1;
  do
  {
    unsigned int v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        uint64_t v13 = 0;
        if (v20 < 0x61 || v20 >= v18) {
          return (unsigned __int8 *)v13;
        }
        char v21 = -87;
      }
      else
      {
        char v21 = -55;
      }
    }
    else
    {
      char v21 = -48;
    }
    uint64_t v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21))) {
      return 0;
    }
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned __int8 v13;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  unsigned __int8 v32;

  uint64_t v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      unsigned __int8 v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }
        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }
        if (a3 <= 10) {
          uint64_t v19 = a3 + 48;
        }
        else {
          uint64_t v19 = 58;
        }
        if (result)
        {
          unsigned __int8 v8 = 0;
          unsigned int v20 = result + 1;
          do
          {
            char v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                char v12 = 0;
                uint64_t v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                uint64_t v22 = -87;
              }
              else
              {
                uint64_t v22 = -55;
              }
            }
            else
            {
              uint64_t v22 = -48;
            }
            unsigned __int8 v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v24 = v21 + v22;
            unsigned __int8 v8 = v23 + v24;
            if (__CFADD__(v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          uint64_t v13 = 0;
          char v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      char v12 = 0;
      uint64_t v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v26 = a3 + 55;
        }
        else
        {
          unsigned __int8 v25 = 97;
          uint64_t v26 = 65;
        }
        if (a3 <= 10) {
          unsigned int v27 = a3 + 48;
        }
        else {
          unsigned int v27 = 58;
        }
        if (result)
        {
          char v28 = 0;
          do
          {
            uint64_t v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                char v12 = 0;
                uint64_t v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                uint64_t v30 = -87;
              }
              else
              {
                uint64_t v30 = -55;
              }
            }
            else
            {
              uint64_t v30 = -48;
            }
            uint64_t v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            uint64_t v32 = v29 + v30;
            char v28 = v31 + v32;
            if (__CFADD__(v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          uint64_t v13 = 0;
          char v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      int v4 = a2 - 1;
      if (a2 != 1)
      {
        uint64_t v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          uint64_t v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          unsigned __int8 v8 = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            uint64_t v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                char v12 = 0;
                uint64_t v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                unsigned int v11 = -87;
              }
              else
              {
                unsigned int v11 = -55;
              }
            }
            else
            {
              unsigned int v11 = -48;
            }
            uint64_t v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            uint64_t v15 = v10 + v11;
            unsigned __int8 v8 = v14 - v15;
            if (v14 < v15) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        char v12 = 0;
        uint64_t v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (unint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      uint64_t v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        uint64_t v22 = 58;
      }
      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }
      if (result)
      {
        unsigned __int8 v25 = 0;
        do
        {
          uint64_t v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0;
              }
              unsigned int v27 = -87;
            }
            else
            {
              unsigned int v27 = -55;
            }
          }
          else
          {
            unsigned int v27 = -48;
          }
          char v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63) {
            return 0;
          }
          unsigned __int8 v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  uint64_t v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    uint64_t v15 = 58;
  }
  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  unsigned __int8 v18 = result + 1;
  do
  {
    uint64_t v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0;
        }
        unsigned int v20 = -87;
      }
      else
      {
        unsigned int v20 = -55;
      }
    }
    else
    {
      unsigned int v20 = -48;
    }
    char v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20))) {
      return 0;
    }
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned __int16 v12;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  int v24;
  unsigned int v25;
  char v26;

  uint64_t v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v14 = a2 - 1;
      if (a2 != 1)
      {
        uint64_t v15 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = a3 + 55;
        }
        else
        {
          uint64_t v15 = 97;
          unsigned __int8 v16 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v17 = a3 + 48;
        }
        else {
          unsigned __int8 v17 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          unsigned __int8 v18 = result + 1;
          do
          {
            uint64_t v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                char v12 = 0;
                uint64_t v13 = 1;
                if (v19 < 0x61 || v19 >= v15) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                unsigned int v20 = -87;
              }
              else
              {
                unsigned int v20 = -55;
              }
            }
            else
            {
              unsigned int v20 = -48;
            }
            if ((((unsigned __int16)v8 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v8 = (unsigned __int16)(v8 * a3) + (v19 + v20);
            if ((v8 & 0x10000) != 0) {
              goto LABEL_72;
            }
            ++v18;
            --v14;
          }
          while (v14);
LABEL_48:
          uint64_t v13 = 0;
          char v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }
        goto LABEL_71;
      }
LABEL_72:
      char v12 = 0;
      uint64_t v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 16));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        char v21 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v22 = a3 + 55;
        }
        else
        {
          char v21 = 97;
          uint64_t v22 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v23 = a3 + 48;
        }
        else {
          unsigned __int8 v23 = 58;
        }
        if (result)
        {
          LOWORD(v24) = 0;
          do
          {
            unsigned __int8 v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                char v12 = 0;
                uint64_t v13 = 1;
                if (v25 < 0x61 || v25 >= v21) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                uint64_t v26 = -87;
              }
              else
              {
                uint64_t v26 = -55;
              }
            }
            else
            {
              uint64_t v26 = -48;
            }
            if ((((unsigned __int16)v24 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v24 = (unsigned __int16)(v24 * a3) + (v25 + v26);
            if ((v24 & 0x10000) != 0) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          uint64_t v13 = 0;
          char v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      int v4 = a2 - 1;
      if (a2 != 1)
      {
        uint64_t v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          uint64_t v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            uint64_t v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                char v12 = 0;
                uint64_t v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                unsigned int v11 = -87;
              }
              else
              {
                unsigned int v11 = -55;
              }
            }
            else
            {
              unsigned int v11 = -48;
            }
            if ((((unsigned __int16)v8 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v8 = (unsigned __int16)(v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        char v12 = 0;
        uint64_t v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 16));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v5 = *(void **)v3;
  int64_t v6 = *(void *)(*(void *)v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  Swift::Int result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v10 > v5[3] >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    Swift::Int result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v13, 1, v5);
    uint64_t v5 = result;
  }
  uint64_t v14 = &v5[a1 + 4];
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v15 = v5[2];
  BOOL v16 = __OFSUB__(v15, a2);
  uint64_t v17 = v15 - a2;
  if (v16) {
    goto LABEL_26;
  }
  if ((v17 & 0x8000000000000000) == 0)
  {
    Swift::Int result = v14 + 1;
    unsigned __int8 v18 = &v5[a2 + 4];
    if (v14 + 1 != v18 || result >= &v18[v17]) {
      Swift::Int result = memmove(result, v18, 8 * v17);
    }
    uint64_t v19 = v5[2];
    BOOL v16 = __OFADD__(v19, v9);
    uint64_t v20 = v19 + v9;
    if (!v16)
    {
      v5[2] = v20;
LABEL_20:
      void *v14 = a3;
      *(void *)uint64_t v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  Swift::Int result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    unint64_t v7 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v24 < v5) {
    goto LABEL_34;
  }
LABEL_4:
  uint64_t v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v11 = v10 + v8;
    if (!__OFADD__(v10, v8)) {
      goto LABEL_8;
    }
LABEL_39:
    __break(1u);
LABEL_40:
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  unint64_t v7 = *v4;
  if (*v4 >> 62) {
    goto LABEL_37;
  }
  uint64_t v10 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v11 = v10 + v8;
  if (__OFADD__(v10, v8)) {
    goto LABEL_39;
  }
LABEL_8:
  unint64_t v7 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v4 = v7;
  uint64_t v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_19;
    }
    uint64_t v10 = 1;
  }
  if (v7 >> 62) {
    goto LABEL_40;
  }
  uint64_t v14 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11) {
    uint64_t v15 = v11;
  }
  else {
    uint64_t v15 = v14;
  }
  unint64_t v7 = MEMORY[0x185303130](v10, v15, 1, v7);
  unint64_t *v4 = v7;
  uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_19:
  BOOL v16 = (void *)(v13 + 32 + 8 * v6);
  type metadata accessor for JSONReference();
  swift_arrayDestroy();
  if (v8)
  {
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v18 = v25 - v5;
      if (!__OFSUB__(v25, v5))
      {
LABEL_22:
        if (v18 < 0)
        {
LABEL_47:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v19 = (char *)(v16 + 1);
        uint64_t v20 = (char *)(v13 + 32 + 8 * v5);
        if (v16 + 1 != (void *)v20 || v19 >= &v20[8 * v18]) {
          memmove(v19, v20, 8 * v18);
        }
        if (!(v7 >> 62))
        {
          uint64_t v21 = *(void *)(v13 + 16);
          uint64_t v22 = v21 + v8;
          if (!__OFADD__(v21, v8))
          {
LABEL_28:
            *(void *)(v13 + 16) = v22;
            goto LABEL_29;
          }
          goto LABEL_46;
        }
LABEL_44:
        swift_bridgeObjectRetain();
        uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v22 = v26 + v8;
        if (!__OFADD__(v26, v8)) {
          goto LABEL_28;
        }
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
    }
    else
    {
      uint64_t v17 = *(void *)(v13 + 16);
      uint64_t v18 = v17 - v5;
      if (!__OFSUB__(v17, v5)) {
        goto LABEL_22;
      }
    }
    __break(1u);
    goto LABEL_44;
  }
LABEL_29:
  *BOOL v16 = v3;

  return specialized Array._endMutation()();
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v8 = *(void **)v6;
  int64_t v9 = *(void *)(*(void *)v6 + 16);
  if (v9 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v12 = 1 - v11;
  if (__OFSUB__(1, v11))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v13 = v9 + v12;
  if (__OFADD__(v9, v12))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v13 > v8[3] >> 1)
  {
    if (v9 <= v13) {
      int64_t v17 = v9 + v12;
    }
    else {
      int64_t v17 = v9;
    }
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v17, 1, v8);
  }
  uint64_t v18 = &v8[4 * a1 + 4];
  uint64_t result = (char *)swift_arrayDestroy();
  if (!v12) {
    goto LABEL_20;
  }
  uint64_t v20 = v8[2];
  BOOL v21 = __OFSUB__(v20, a2);
  uint64_t v22 = v20 - a2;
  if (v21) {
    goto LABEL_26;
  }
  if ((v22 & 0x8000000000000000) == 0)
  {
    uint64_t result = (char *)(v18 + 4);
    unsigned __int8 v23 = &v8[4 * a2 + 4];
    if (v18 + 4 != v23 || result >= (char *)&v23[4 * v22]) {
      uint64_t result = (char *)memmove(result, v23, 32 * v22);
    }
    uint64_t v24 = v8[2];
    BOOL v21 = __OFADD__(v24, v12);
    uint64_t v25 = v24 + v12;
    if (!v21)
    {
      _OWORD v8[2] = v25;
LABEL_20:
      *uint64_t v18 = a3;
      v18[1] = a4;
      void v18[2] = a5;
      v18[3] = a6;
      *(void *)uint64_t v6 = v8;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3, unsigned int a4)
{
  if (a1 < 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v6 = *v4;
  int64_t v7 = *((void *)*v4 + 2);
  if (v7 < a2)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v11 = a3 - v9;
  if (__OFSUB__(a3, v9))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  int64_t v12 = v7 + v11;
  if (__OFADD__(v7, v11))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v12 > *((void *)v6 + 3) >> 1)
  {
    if (v7 <= v12) {
      int64_t v15 = v7 + v11;
    }
    else {
      int64_t v15 = v7;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v15, 1, v6);
    uint64_t v6 = result;
  }
  BOOL v16 = v6 + 32;
  int64_t v17 = &v6[a1 + 32];
  uint64_t v18 = &v17[a3];
  if (!v11)
  {
LABEL_20:
    if (a3 < 1)
    {
LABEL_34:
      unint64_t *v4 = v6;
      return result;
    }
    unint64_t v25 = (unint64_t)&v6[a3 + 32 + a1];
    if (v25 <= (unint64_t)&v6[a1 + 33]) {
      unint64_t v25 = (unint64_t)&v6[a1 + 33];
    }
    unint64_t v26 = v25 - (void)&v6[a1] - 33;
    if (v26 >= a3) {
      unint64_t v26 = a3;
    }
    unint64_t v27 = v26 + 1;
    if (v27 > 0x20)
    {
      uint64_t v29 = v27 & 0x1F;
      if ((v27 & 0x1F) == 0) {
        uint64_t v29 = 32;
      }
      unint64_t v28 = v27 - v29;
      v17 += v28;
      int8x16_t v30 = vdupq_n_s8(a4);
      uint64_t v31 = (int8x16_t *)&v6[a1 + 48];
      unint64_t v32 = v28;
      do
      {
        v31[-1] = v30;
        *uint64_t v31 = v30;
        v31 += 2;
        v32 -= 32;
      }
      while (v32);
    }
    else
    {
      unint64_t v28 = 0;
    }
    unint64_t v33 = a3 - v28;
    while (v33)
    {
      *v17++ = a4;
      --v33;
      if (v17 >= v18) {
        goto LABEL_34;
      }
    }
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v19 = *((void *)v6 + 2);
  size_t v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    BOOL v21 = &v16[a2];
    if (v18 != &v16[a2] || v18 >= &v21[v20]) {
      uint64_t result = (char *)memmove(&v17[a3], v21, v20);
    }
    uint64_t v22 = *((void *)v6 + 2);
    BOOL v23 = __OFADD__(v22, v11);
    uint64_t v24 = v22 + v11;
    if (v23) {
      goto LABEL_42;
    }
    *((void *)v6 + 2) = v24;
    goto LABEL_20;
  }
LABEL_43:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized Set.hash(into:)(uint64_t a1, uint64_t a2)
{
  Hasher._finalize()();
  Swift::UInt v3 = 0;
  int64_t v4 = 0;
  uint64_t v5 = a2 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a2 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v4++, 1)) {
      goto LABEL_19;
    }
    if (v4 >= v9)
    {
LABEL_17:
      Hasher._combine(_:)(v3);
      return;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (!v14) {
      break;
    }
LABEL_16:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_5:
    Swift::UInt v12 = *(unsigned __int8 *)(*(void *)(a2 + 48) + v11);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v12);
    v3 ^= Hasher._finalize()();
  }
  int64_t v15 = v4 + 1;
  if (v4 + 1 >= v9) {
    goto LABEL_17;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    ++v4;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v9) {
      goto LABEL_17;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  Swift::UInt v8;
  int64_t v9;
  Swift::Int v10;
  uint64_t v12;
  int64_t v13;

  Hasher._finalize()();
  Swift::UInt v3 = a2 + 56;
  int64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  uint64_t v6 = v5 & *(void *)(a2 + 56);
  uint64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  unint64_t v8 = 0;
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_5;
    }
    if (__OFADD__(v9++, 1)) {
      goto LABEL_19;
    }
    if (v9 >= v7)
    {
LABEL_17:
      swift_release();
      Hasher._combine(_:)(v8);
      return;
    }
    Swift::UInt v12 = *(void *)(v3 + 8 * v9);
    if (!v12) {
      break;
    }
LABEL_16:
    uint64_t v6 = (v12 - 1) & v12;
LABEL_5:
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    unint64_t v10 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    v8 ^= v10;
  }
  int64_t v13 = v9 + 1;
  if (v9 + 1 >= v7) {
    goto LABEL_17;
  }
  Swift::UInt v12 = *(void *)(v3 + 8 * v13);
  if (v12)
  {
    ++v9;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v9 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_17;
    }
    Swift::UInt v12 = *(void *)(v3 + 8 * v9);
    ++v13;
    if (v12) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
}

uint64_t specialized static URL.FormatStyle.HostDisplayOption.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v2 = *((void *)a1 + 2);
  int v3 = a1[24];
  uint64_t v4 = *((void *)a1 + 4);
  uint64_t v5 = *((void *)a2 + 2);
  int v6 = a2[24];
  uint64_t v7 = *((void *)a2 + 4);
  if (!v2)
  {
    if (!v5)
    {
      if (v3 != v6) {
        return 0;
      }
      goto LABEL_15;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (!v5)
  {
    swift_bridgeObjectRetain();
    goto LABEL_11;
  }
  if (*(void *)((char *)qword_18218C628 + ((uint64_t)(*((void *)a1 + 1) << 56) >> 53)) != *(void *)((char *)qword_18218C628 + ((uint64_t)(*((void *)a2 + 1) << 56) >> 53))) {
    return 0;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  char v8 = specialized static Set.== infix(_:_:)(v2, v5);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  uint64_t result = 0;
  if ((v8 & 1) != 0 && ((v3 ^ v6) & 1) == 0)
  {
LABEL_15:
    if (v4)
    {
      if (v7)
      {
        swift_bridgeObjectRetain();
        uint64_t v10 = swift_bridgeObjectRetain();
        char v11 = specialized static Set.== infix(_:_:)(v10, v7);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v11) {
          return 1;
        }
      }
    }
    else if (!v7)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t specialized static URL.FormatStyle.ComponentDisplayOption.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v2 = *((void *)a1 + 2);
  uint64_t v3 = *((void *)a2 + 2);
  if (v2)
  {
    if (v3)
    {
      if (*(void *)((char *)qword_18218C628 + ((uint64_t)(*((void *)a1 + 1) << 56) >> 53)) == *(void *)((char *)qword_18218C628 + ((uint64_t)(*((void *)a2 + 1) << 56) >> 53)))
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        char v4 = specialized static Set.== infix(_:_:)(v2, v3);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        return v4 & 1;
      }
      return 0;
    }
    swift_bridgeObjectRetain();
    goto LABEL_9;
  }
  if (v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  return 1;
}

uint64_t specialized static URL.FormatStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v2 = *((void *)a1 + 2);
  int v3 = a1[24];
  uint64_t v4 = *((void *)a1 + 4);
  uint64_t v5 = *((void *)a1 + 5);
  int v131 = a1[48];
  uint64_t v128 = *((void *)a1 + 7);
  uint64_t v129 = *((void *)a1 + 8);
  int v126 = a1[72];
  uint64_t v6 = *((void *)a1 + 11);
  uint64_t v121 = *((void *)a1 + 10);
  int v119 = a1[96];
  uint64_t v123 = *((void *)a1 + 13);
  int v117 = a1[112];
  uint64_t v114 = *((void *)a1 + 15);
  uint64_t v7 = *((void *)a1 + 19);
  int v8 = a1[160];
  uint64_t v9 = *((void *)a1 + 21);
  uint64_t v10 = *((void *)a1 + 22);
  int v11 = a1[184];
  uint64_t v12 = *((void *)a1 + 24);
  uint64_t v13 = *((void *)a1 + 25);
  uint64_t v14 = *((void *)a2 + 2);
  int v15 = a2[24];
  uint64_t v17 = *((void *)a2 + 4);
  uint64_t v16 = *((void *)a2 + 5);
  int v18 = a2[48];
  uint64_t v127 = *((void *)a2 + 7);
  uint64_t v130 = *((void *)a2 + 8);
  int v125 = a2[72];
  uint64_t v120 = *((void *)a2 + 10);
  uint64_t v124 = *((void *)a2 + 11);
  int v118 = a2[96];
  uint64_t v122 = *((void *)a2 + 13);
  int v116 = a2[112];
  uint64_t v113 = *((void *)a2 + 15);
  uint64_t v115 = *((void *)a2 + 16);
  int v112 = a2[136];
  uint64_t v19 = *((void *)a2 + 19);
  uint64_t v111 = *((void *)a2 + 18);
  int v20 = a2[160];
  uint64_t v21 = *((void *)a2 + 21);
  uint64_t v22 = *((void *)a2 + 22);
  int v23 = a2[184];
  uint64_t v25 = *((void *)a2 + 24);
  uint64_t v24 = *((void *)a2 + 25);
  if (!v2)
  {
    if (v14) {
      goto LABEL_11;
    }
    int v109 = a1[136];
    uint64_t v110 = *((void *)a1 + 16);
    char v108 = *((void *)a1 + 18);
    if (v3 != v15) {
      return 0;
    }
    goto LABEL_15;
  }
  if (!v14) {
    goto LABEL_10;
  }
  int v109 = a1[136];
  uint64_t v110 = *((void *)a1 + 16);
  char v108 = *((void *)a1 + 18);
  if (*(void *)((char *)qword_18218C628 + ((uint64_t)(*((void *)a1 + 1) << 56) >> 53)) != *(void *)((char *)qword_18218C628 + ((uint64_t)(*((void *)a2 + 1) << 56) >> 53))) {
    return 0;
  }
  uint64_t v77 = *((void *)a1 + 11);
  uint64_t v80 = *((void *)a1 + 19);
  int v97 = a2[160];
  int v102 = a1[160];
  uint64_t v88 = *((void *)a2 + 22);
  uint64_t v92 = *((void *)a2 + 21);
  uint64_t v84 = *((void *)a1 + 21);
  int v75 = a2[184];
  uint64_t v69 = *((void *)a1 + 24);
  uint64_t v70 = *((void *)a2 + 24);
  int v67 = a1[184];
  uint64_t v68 = *((void *)a1 + 22);
  uint64_t v72 = *((void *)a2 + 25);
  uint64_t v74 = *((void *)a1 + 25);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  char v26 = specialized static Set.== infix(_:_:)(v2, v14);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  uint64_t result = 0;
  if (v26)
  {
    uint64_t v24 = v72;
    uint64_t v13 = v74;
    uint64_t v10 = v68;
    LOBYTE(v12) = v69;
    int v11 = v67;
    LOBYTE(v25) = v70;
    int v23 = v75;
    LOBYTE(v9) = v84;
    uint64_t v22 = v88;
    uint64_t v6 = v77;
    uint64_t v7 = v80;
    int v20 = v97;
    int v8 = v102;
    LOBYTE(v21) = v92;
    if (((v3 ^ v15) & 1) == 0)
    {
LABEL_15:
      if (v5)
      {
        if (!v16) {
          goto LABEL_10;
        }
        if (qword_18218C628[(char)v4] != qword_18218C628[(char)v17]) {
          return 0;
        }
        uint64_t v78 = v6;
        uint64_t v81 = v7;
        int v98 = v20;
        int v103 = v8;
        uint64_t v89 = v22;
        char v93 = v21;
        char v85 = v9;
        int v76 = v23;
        char v28 = v25;
        int v29 = v11;
        uint64_t v30 = v10;
        char v31 = v12;
        uint64_t v32 = v24;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        char v33 = specialized static Set.== infix(_:_:)(v5, v16);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        uint64_t result = 0;
        if ((v33 & 1) == 0) {
          return result;
        }
        uint64_t v24 = v32;
        LOBYTE(v12) = v31;
        uint64_t v10 = v30;
        int v11 = v29;
        LOBYTE(v25) = v28;
        int v23 = v76;
        LOBYTE(v9) = v85;
        uint64_t v22 = v89;
        uint64_t v6 = v78;
        uint64_t v7 = v81;
        int v20 = v98;
        int v8 = v103;
        LOBYTE(v21) = v93;
        if ((v131 ^ v18)) {
          return result;
        }
      }
      else
      {
        if (v16) {
          goto LABEL_11;
        }
        if (v131 != v18) {
          return 0;
        }
      }
      if (v129)
      {
        if (!v130) {
          goto LABEL_10;
        }
        if (qword_18218C628[(char)v128] != qword_18218C628[(char)v127]) {
          return 0;
        }
        uint64_t v79 = v6;
        uint64_t v82 = v7;
        int v99 = v20;
        int v104 = v8;
        uint64_t v90 = v22;
        char v94 = v21;
        char v86 = v9;
        int v34 = v23;
        char v35 = v25;
        int v36 = v11;
        uint64_t v37 = v10;
        char v38 = v12;
        uint64_t v39 = v24;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        char v40 = specialized static Set.== infix(_:_:)(v129, v130);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        uint64_t result = 0;
        if ((v40 & 1) == 0) {
          return result;
        }
        uint64_t v24 = v39;
        LOBYTE(v12) = v38;
        uint64_t v10 = v37;
        int v11 = v36;
        LOBYTE(v25) = v35;
        int v23 = v34;
        LOBYTE(v9) = v86;
        uint64_t v22 = v90;
        uint64_t v6 = v79;
        uint64_t v7 = v82;
        int v20 = v99;
        int v8 = v104;
        LOBYTE(v21) = v94;
        if ((v126 ^ v125)) {
          return result;
        }
      }
      else
      {
        if (v130) {
          goto LABEL_11;
        }
        if (v126 != v125) {
          return 0;
        }
      }
      if (v6)
      {
        if (v124)
        {
          if (qword_18218C628[(char)v121] != qword_18218C628[(char)v120]) {
            return 0;
          }
          uint64_t v107 = v19;
          int v100 = v20;
          int v105 = v8;
          uint64_t v91 = v22;
          char v95 = v21;
          uint64_t v83 = v7;
          char v87 = v9;
          int v41 = v23;
          char v42 = v25;
          int v43 = v11;
          uint64_t v44 = v10;
          char v45 = v12;
          uint64_t v46 = v24;
          uint64_t v47 = v6;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          char v48 = specialized static Set.== infix(_:_:)(v47, v124);
          swift_bridgeObjectRelease();
          uint64_t v49 = v122;
          swift_bridgeObjectRelease_n();
          if ((v48 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return 0;
          }
          goto LABEL_42;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v49 = v122;
        if (!v124)
        {
          uint64_t v107 = v19;
          int v100 = v20;
          int v105 = v8;
          uint64_t v91 = v22;
          char v95 = v21;
          uint64_t v83 = v7;
          char v87 = v9;
          int v41 = v23;
          char v42 = v25;
          int v43 = v11;
          uint64_t v44 = v10;
          char v45 = v12;
          uint64_t v46 = v24;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_42:
          if (v119 != v118)
          {
LABEL_43:
            swift_bridgeObjectRelease();
LABEL_50:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return 0;
          }
          if (v123)
          {
            if (!v49) {
              goto LABEL_43;
            }
            swift_bridgeObjectRetain();
            uint64_t v50 = swift_bridgeObjectRetain();
            char v132 = specialized static Set.== infix(_:_:)(v50, v49);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = 0;
            if ((v132 & 1) == 0) {
              return result;
            }
            char v52 = v87;
            uint64_t v51 = v91;
            uint64_t v53 = v83;
            int v55 = v100;
            int v54 = v105;
            char v56 = v95;
            if ((v117 ^ v116)) {
              return result;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            if (v49) {
              goto LABEL_50;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            char v52 = v87;
            uint64_t v51 = v91;
            uint64_t v53 = v83;
            int v55 = v100;
            int v54 = v105;
            char v56 = v95;
            if (v117 != v116) {
              return 0;
            }
          }
          char v71 = v42;
          uint64_t v73 = v46;
          int v101 = v55;
          int v106 = v54;
          char v96 = v56;
          int v57 = v43;
          uint64_t v58 = v44;
          char v59 = v45;
          if (v110)
          {
            if (!v115) {
              goto LABEL_10;
            }
            if (qword_18218C628[(char)v114] != qword_18218C628[(char)v113]) {
              return 0;
            }
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            char v60 = specialized static Set.== infix(_:_:)(v110, v115);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            uint64_t result = 0;
            if ((v60 & 1) == 0) {
              return result;
            }
            uint64_t v61 = v53;
            if ((v109 ^ v112)) {
              return result;
            }
          }
          else
          {
            if (v115) {
              goto LABEL_11;
            }
            uint64_t v61 = v53;
            if (v109 != v112) {
              return 0;
            }
          }
          if (v61)
          {
            if (!v107) {
              goto LABEL_10;
            }
            if (qword_18218C628[v108] != qword_18218C628[(char)v111]) {
              return 0;
            }
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            char v62 = specialized static Set.== infix(_:_:)(v53, v107);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            uint64_t result = 0;
            if ((v62 & 1) == 0) {
              return result;
            }
            uint64_t v63 = v58;
            if ((v106 ^ v101)) {
              return result;
            }
          }
          else
          {
            if (v107) {
              goto LABEL_11;
            }
            uint64_t v63 = v58;
            if (v106 != v101) {
              return 0;
            }
          }
          if (!v63)
          {
            if (v51) {
              goto LABEL_11;
            }
            uint64_t v65 = v13;
            if (v57 != v41) {
              return 0;
            }
            goto LABEL_82;
          }
          if (v51)
          {
            if (qword_18218C628[v52] != qword_18218C628[v96]) {
              return 0;
            }
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            char v64 = specialized static Set.== infix(_:_:)(v58, v51);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            uint64_t result = 0;
            if ((v64 & 1) == 0) {
              return result;
            }
            uint64_t v65 = v13;
            if ((v57 ^ v41)) {
              return result;
            }
LABEL_82:
            if (!v65)
            {
              if (!v73) {
                return 1;
              }
              goto LABEL_11;
            }
            if (v73)
            {
              if (qword_18218C628[v59] == qword_18218C628[v71])
              {
                swift_bridgeObjectRetain_n();
                swift_bridgeObjectRetain_n();
                char v66 = specialized static Set.== infix(_:_:)(v13, v73);
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
                return v66 & 1;
              }
              return 0;
            }
          }
LABEL_10:
          swift_bridgeObjectRetain_n();
LABEL_11:
          swift_bridgeObjectRelease_n();
          return 0;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
  }
  return result;
}

uint64_t specialized URL.FormatStyle.HostDisplayOption.Option.init(from:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v22 = v2;
  uint64_t v23 = v3;
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys>);
  uint64_t v25 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  int v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URL.FormatStyle.HostDisplayOption.Option.CodingKeys>);
  uint64_t v24 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  int v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1((void *)a1, *(void *)(a1 + 24));
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys();
  uint64_t v12 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    goto LABEL_7;
  }
  uint64_t v13 = v25;
  uint64_t v21 = v6;
  uint64_t v26 = a1;
  uint64_t v14 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v14 + 16) != 1)
  {
    uint64_t v16 = type metadata accessor for DecodingError();
    swift_allocError();
    int v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *int v18 = &type metadata for URL.FormatStyle.HostDisplayOption.Option;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, *MEMORY[0x1E4FBBA70], v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v9);
    a1 = v26;
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1(a1);
    return a1;
  }
  a1 = *(unsigned __int8 *)(v14 + 32);
  if (a1)
  {
    LODWORD(v25) = *(unsigned __int8 *)(v14 + 32);
    char v28 = 1;
    lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v15 = v24;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v9);
    a1 = v25;
  }
  else
  {
    char v27 = 0;
    lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v19 = v24;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v21);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v9);
  }
  __swift_destroy_boxed_opaque_existential_1(v26);
  return a1;
}

unint64_t lazy protocol witness table accessor for type [Substring] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Substring] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Substring] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Substring]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Substring] and conformance [A]);
  }
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[4 * a2 + 4];
    if (a1 != a2 || &v4[4 * a1 + 4] >= (void *)&v16[32 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[4 * a1 + 4], v16, 32 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[6 * a2 + 4];
    if (a1 != a2 || &v4[6 * a1 + 4] >= (void *)&v16[48 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[6 * a1 + 4], v16, 48 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption);
  }
  return result;
}

uint64_t outlined retain of URL.FormatStyle(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<String>);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle and conformance URL.FormatStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for URL.FormatStyle(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type URL.FormatStyle and conformance URL.FormatStyle();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for URL.FormatStyle(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type URL.FormatStyle and conformance URL.FormatStyle();
  a1[2] = lazy protocol witness table accessor for type URL.FormatStyle and conformance URL.FormatStyle();
  unint64_t result = lazy protocol witness table accessor for type URL.FormatStyle and conformance URL.FormatStyle();
  a1[3] = result;
  return result;
}

uint64_t destroy for URL.FormatStyle()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for URL.FormatStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for URL.FormatStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy208_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t assignWithTake for URL.FormatStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for URL.FormatStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 208)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for URL.FormatStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 208) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 208) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for URL.FormatStyle()
{
  return &type metadata for URL.FormatStyle;
}

ValueMetadata *type metadata accessor for URL.FormatStyle.Component()
{
  return &type metadata for URL.FormatStyle.Component;
}

uint64_t destroy for URL.FormatStyle.ComponentDisplayOption()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for URL.FormatStyle.ComponentDisplayOption(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for URL.FormatStyle.ComponentDisplayOption(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for URL.FormatStyle.ComponentDisplayOption(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for URL.FormatStyle.ComponentDisplayOption(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for URL.FormatStyle.ComponentDisplayOption(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for URL.FormatStyle.ComponentDisplayOption()
{
  return &type metadata for URL.FormatStyle.ComponentDisplayOption;
}

uint64_t destroy for URL.FormatStyle.HostDisplayOption()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for URL.FormatStyle.HostDisplayOption(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for URL.FormatStyle.HostDisplayOption(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for URL.FormatStyle.HostDisplayOption(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for URL.FormatStyle.HostDisplayOption(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for URL.FormatStyle.HostDisplayOption(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for URL.FormatStyle.HostDisplayOption()
{
  return &type metadata for URL.FormatStyle.HostDisplayOption;
}

ValueMetadata *type metadata accessor for URL.FormatStyle.HostDisplayOption.Option()
{
  return &type metadata for URL.FormatStyle.HostDisplayOption.Option;
}

unsigned char *storeEnumTagSinglePayload for URL.FormatStyle.HostDisplayOption.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181C3BFA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for URL.FormatStyle.HostDisplayOption.CodingKeys()
{
  return &unk_1ECA43B30;
}

uint64_t initializeBufferWithCopyOfBuffer for URL.FormatStyle.ComponentDisplayCondition(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for URL.FormatStyle.ComponentDisplayCondition(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for URL.FormatStyle.ComponentDisplayCondition(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for URL.FormatStyle.ComponentDisplayCondition()
{
  return &type metadata for URL.FormatStyle.ComponentDisplayCondition;
}

ValueMetadata *type metadata accessor for URL.FormatStyle.ComponentDisplayOption.Option()
{
  return &type metadata for URL.FormatStyle.ComponentDisplayOption.Option;
}

void *type metadata accessor for URL.FormatStyle.ComponentDisplayOption.CodingKeys()
{
  return &unk_1ECA43D18;
}

unsigned char *storeEnumTagSinglePayload for URL.FormatStyle.Component(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *__n128 result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181C3C194);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 7;
        break;
    }
  }
  return result;
}

void *type metadata accessor for URL.FormatStyle.CodingKeys()
{
  return &unk_1ECA43940;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v5 = *v3;
  int64_t v6 = *((void *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = v10 - v8;
  if (__OFSUB__(v10, v8))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  int64_t v12 = v6 + v11;
  if (__OFADD__(v6, v11))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  __n128 result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v12 > *((void *)v5 + 3) >> 1)
  {
    if (v6 <= v12) {
      int64_t v14 = v6 + v11;
    }
    else {
      int64_t v14 = v6;
    }
    __n128 result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v14, 1, v5);
    uint64_t v5 = result;
  }
  uint64_t v15 = &v5[8 * a1 + 32];
  if (!v11) {
    goto LABEL_20;
  }
  uint64_t v16 = *((void *)v5 + 2);
  BOOL v17 = __OFSUB__(v16, a2);
  uint64_t v18 = v16 - a2;
  if (v17) {
    goto LABEL_28;
  }
  if (v18 < 0)
  {
LABEL_30:
    __n128 result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  __n128 result = &v15[8 * v10];
  uint64_t v19 = &v5[8 * a2 + 32];
  if (result != v19 || result >= &v19[8 * v18]) {
    __n128 result = (char *)memmove(result, v19, 8 * v18);
  }
  uint64_t v20 = *((void *)v5 + 2);
  BOOL v17 = __OFADD__(v20, v11);
  uint64_t v21 = v20 + v11;
  if (v17)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  *((void *)v5 + 2) = v21;
LABEL_20:
  if (v10) {
    __n128 result = (char *)memcpy(v15, (const void *)(a3 + 32), 8 * v10);
  }
  *int v3 = v5;
  return result;
}

uint64_t specialized URL.FormatStyle.ComponentDisplayCondition.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E656E6F706D6F63 && a2 == 0xE900000000000074;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D65726975716572 && a2 == 0xEC00000073746E65)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized URL.FormatStyle.ComponentDisplayOption.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F6974706FLL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F697469646E6F63 && a2 == 0xE90000000000006ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys);
  }
  return result;
}

uint64_t specialized URL.FormatStyle.HostDisplayOption.Option.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64657474696D6FLL && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6579616C70736964 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized URL.FormatStyle.HostDisplayOption.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F6974706FLL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F697469646E6F63 && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001823AD460 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001823AD480)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys);
  }
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = *v6;
  int64_t v9 = *((void *)*v6 + 2);
  if (v9 < a2)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  int64_t v13 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v14 = v13 - v11;
  if (__OFSUB__(v13, v11))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  int64_t v15 = v9 + v14;
  if (__OFADD__(v9, v14))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  unint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v15 > *((void *)v8 + 3) >> 1)
  {
    if (v9 <= v15) {
      int64_t v18 = v9 + v14;
    }
    else {
      int64_t v18 = v9;
    }
    unint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v18, 1, v8);
    uint64_t v8 = result;
  }
  uint64_t v19 = v8 + 32;
  uint64_t v20 = &v8[a1 + 32];
  if (!v14) {
    goto LABEL_21;
  }
  uint64_t v21 = *((void *)v8 + 2);
  size_t v22 = v21 - a2;
  if (__OFSUB__(v21, a2)) {
    goto LABEL_30;
  }
  if ((v22 & 0x8000000000000000) != 0)
  {
LABEL_32:
    unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  unint64_t result = &v20[v13];
  uint64_t v23 = &v19[a2];
  if (&v20[v13] != &v19[a2] || result >= &v23[v22]) {
    unint64_t result = (char *)memmove(result, v23, v22);
  }
  uint64_t v24 = *((void *)v8 + 2);
  BOOL v25 = __OFADD__(v24, v14);
  uint64_t v26 = v24 + v14;
  if (v25)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  *((void *)v8 + 2) = v26;
LABEL_21:
  if (v13 >= 1) {
    unint64_t result = (char *)memcpy(v20, (const void *)(a4 + a5), v13);
  }
  *char v6 = v8;
  return result;
}

void *type metadata accessor for URL.FormatStyle.HostDisplayOption.Option.CodingKeys()
{
  return &unk_1ECA439D0;
}

void *type metadata accessor for URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys()
{
  return &unk_1ECA43A60;
}

void *type metadata accessor for URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys()
{
  return &unk_1ECA43A80;
}

unsigned char *storeEnumTagSinglePayload for URL.FormatStyle.HostDisplayOption.Option(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181C3D440);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for URL.FormatStyle.ComponentDisplayCondition.CodingKeys()
{
  return &unk_1ECA43E68;
}

uint64_t closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)specialized partial apply(void *a1)
{
  return partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:)(a1) & 1;
}

uint64_t Range<>._utf8OffsetRange.getter()
{
  uint64_t v0 = BigString.Index.utf8Offset.getter();
  BigString.Index.utf8Offset.getter();
  return v0;
}

uint64_t AttributedString.setAttributes(_:)(uint64_t *a1)
{
  BOOL v2 = v1;
  uint64_t v3 = a1[1];
  uint64_t v18 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    unsigned int v4 = (void *)*v1;
    long long v5 = *(_OWORD *)(*v1 + 16);
    long long v6 = *(_OWORD *)(*v1 + 48);
    v21[1] = *(_OWORD *)(*v1 + 32);
    uint64_t v21[2] = v6;
    v21[0] = v5;
    uint64_t v7 = v4[8];
    uint64_t v8 = v4[9];
    uint64_t v9 = v4[10];
    uint64_t v10 = v4[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v21);
    swift_unknownObjectRetain();
    uint64_t *v2 = AttributedString.Guts.init(string:runs:)(v21, v7, v8, v9, v10);
    swift_release();
  }
  uint64_t v11 = (_OWORD *)*v2;
  long long v12 = v11[1];
  long long v13 = v11[3];
  v20[1] = v11[2];
  v20[2] = v13;
  v20[0] = v12;
  swift_retain();
  outlined retain of Locale((uint64_t)v20);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v20);
  long long v14 = v11[1];
  long long v15 = v11[3];
  v19[1] = v11[2];
  void v19[2] = v15;
  v19[0] = v14;
  long long v16 = v11[1];
  v22[1] = v11[2];
  _OWORD v22[2] = v15;
  v22[0] = v16;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v22, (uint64_t)v23);
  outlined retain of Locale((uint64_t)v23);
  BigString.endIndex.getter();
  outlined release of Locale((uint64_t)v19);
  swift_release();
  return AttributedString.Guts.setAttributes(_:in:)(v18, v3);
}

uint64_t AttributedString.replaceAttributes(_:with:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if ((specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) == 0
    || (uint64_t result = specialized static Set.== infix(_:_:)(v5, v7), (result & 1) == 0))
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = (void *)*v2;
      long long v10 = *(_OWORD *)(*v2 + 16);
      long long v11 = *(_OWORD *)(*v2 + 32);
      _OWORD v36[2] = *(_OWORD *)(*v2 + 48);
      v36[0] = v10;
      v36[1] = v11;
      uint64_t v12 = v9[8];
      uint64_t v13 = v9[9];
      uint64_t v14 = v9[10];
      uint64_t v15 = v9[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v36);
      swift_unknownObjectRetain();
      *uint64_t v3 = AttributedString.Guts.init(string:runs:)(v36, v12, v13, v14, v15);
      swift_release();
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v16 = specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v16)
    {
      char v17 = 1;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v17 = specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v32 = MEMORY[0x1E4FBC860];
    uint64_t v18 = *v3;
    long long v19 = *(_OWORD *)(*v3 + 16);
    long long v20 = *(_OWORD *)(*v3 + 32);
    long long v35 = *(_OWORD *)(*v3 + 48);
    v34[1] = v20;
    v34[0] = v19;
    long long v21 = *(_OWORD *)(v18 + 16);
    v37[1] = *(_OWORD *)(v18 + 32);
    v37[2] = v35;
    v37[0] = v21;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v37, (uint64_t)v38);
    outlined retain of Locale((uint64_t)v38);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v34);
    uint64_t v22 = BigString.UTF8View.count.getter();
    uint64_t result = outlined release of Locale((uint64_t)v33);
    if (v22 < 0)
    {
      __break(1u);
    }
    else
    {
      MEMORY[0x1F4188790](result);
      v31[2] = v4;
      v31[3] = v5;
      MEMORY[0x1F4188790](v23);
      v28[2] = v4;
      v28[3] = v5;
      v28[4] = v6;
      unsigned char v28[5] = v24;
      char v29 = v17 & 1;
      uint64_t v30 = &v32;
      swift_retain();
      AttributedString._InternalRunsSlice.updateEach(when:with:)((uint64_t (*)(uint64_t, uint64_t))partial apply for closure #1 in AttributedString.replaceAttributes(_:with:), (uint64_t)v31, (void (*)(uint64_t *, uint64_t, uint64_t))partial apply for closure #2 in AttributedString.replaceAttributes(_:with:), (uint64_t)v28, (void *)v18, 0, v22);
      swift_release();
      uint64_t v25 = v32;
      uint64_t v26 = *(void *)(v32 + 16);
      if (v26)
      {
        swift_bridgeObjectRetain();
        char v27 = (uint64_t *)(v25 + 40);
        do
        {
          AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(*(v27 - 1), *v27, 0, 0);
          v27 += 2;
          --v26;
        }
        while (v26);
        swift_bridgeObjectRelease();
      }
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t AttributedString.startIndex.getter@<X0>(uint64_t *a1@<X8>)
{
  return AttributedString.startIndex.getter(MEMORY[0x1E4F59DD0], a1);
}

uint64_t AttributedString.endIndex.getter@<X0>(uint64_t *a1@<X8>)
{
  return AttributedString.startIndex.getter(MEMORY[0x1E4F59DE8], a1);
}

uint64_t AttributedString.startIndex.getter@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *v2;
  long long v6 = *(_OWORD *)(*v2 + 16);
  long long v7 = *(_OWORD *)(*v2 + 48);
  v18[1] = *(_OWORD *)(*v2 + 32);
  void v18[2] = v7;
  v18[0] = v6;
  long long v8 = *(_OWORD *)(v5 + 16);
  v19[1] = *(_OWORD *)(v5 + 32);
  void v19[2] = v7;
  v19[0] = v8;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v19, (uint64_t)v20);
  uint64_t v9 = outlined retain of Locale((uint64_t)v20);
  uint64_t v10 = a1(v9);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t result = outlined release of Locale((uint64_t)v18);
  *a2 = v10;
  a2[1] = v12;
  a2[2] = v14;
  a2[3] = v16;
  return result;
}

uint64_t specialized AttributedStringProtocol.description.getter(_OWORD *a1)
{
  long long v2 = a1[2];
  v240[0] = a1[1];
  v240[1] = v2;
  v240[2] = a1[3];
  swift_retain();
  outlined retain of Locale((uint64_t)v240);
  uint64_t v3 = BigString.startIndex.getter();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  outlined release of Locale((uint64_t)v240);
  long long v10 = a1[2];
  v238[0] = a1[1];
  v238[1] = v10;
  long long v239 = a1[3];
  v241[0] = v238[0];
  v241[1] = v10;
  v241[2] = v239;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v241, (uint64_t)v242);
  outlined retain of Locale((uint64_t)v242);
  uint64_t v11 = BigString.endIndex.getter();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  outlined release of Locale((uint64_t)v238);
  uint64_t v230 = v3;
  uint64_t v231 = v5;
  uint64_t v232 = v7;
  uint64_t v233 = v9;
  uint64_t v234 = v11;
  uint64_t v235 = v13;
  uint64_t v236 = v15;
  uint64_t v237 = v17;
  uint64_t v204 = 0;
  unint64_t v205 = 0xE000000000000000;
  uint64_t v18 = swift_retain();
  AttributedString.Runs.init(_:in:)(v18, &v251);
  long long v19 = v252;
  uint64_t v20 = v251;
  long long v156 = v260;
  uint64_t v21 = v260;
  if (v252 == (void *)v260)
  {
    uint64_t v22 = 0;
    goto LABEL_159;
  }
  uint64_t v155 = v253;
  uint64_t v23 = v254;
  uint64_t v24 = v255;
  uint64_t v25 = v256;
  uint64_t v26 = v257;
  uint64_t v27 = v258;
  long long v148 = v262;
  long long v149 = v261;
  long long v147 = v263;
  uint64_t v28 = v259;
  uint64_t v145 = v264;
  uint64_t v144 = v265;
  uint64_t v162 = v267;
  uint64_t v163 = v266;
  uint64_t v160 = v269;
  uint64_t v161 = v268;
  uint64_t v158 = v271;
  uint64_t v159 = v270;
  uint64_t result = outlined retain of AttributedString.Runs((uint64_t)&v251);
  uint64_t v157 = (long long *)(v20 + 16);
  uint64_t countAndFlagsBits = v155;
  uint64_t v170 = v24;
  uint64_t v153 = v24;
  unint64_t v154 = v23;
  unint64_t v166 = v23;
  uint64_t v167 = v25;
  uint64_t v151 = v26;
  uint64_t v152 = v25;
  uint64_t v30 = v26;
  uint64_t v150 = v27;
  uint64_t v146 = v28;
  uint64_t v31 = (uint64_t)v19;
  uint64_t v168 = (void *)v20;
  uint64_t v142 = v21;
  unint64_t v143 = v19;
  while (2)
  {
    if (v31 >= v21) {
      goto LABEL_164;
    }
    v188._uint64_t countAndFlagsBits = v20;
    v188._unint64_t object = v19;
    *(void *)&long long v189 = v155;
    *((void *)&v189 + 1) = v154;
    *(void *)&long long v190 = v153;
    *((void *)&v190 + 1) = v152;
    *(void *)&long long v191 = v151;
    *((void *)&v191 + 1) = v150;
    *(_OWORD *)&v192[8] = v156;
    long long v193 = v149;
    long long v194 = v148;
    long long v195 = v147;
    uint64_t v33 = v145;
    *(void *)int v192 = v146;
    uint64_t v196 = v145;
    uint64_t v197 = v144;
    uint64_t v198 = v163;
    uint64_t v199 = v162;
    uint64_t v200 = v161;
    uint64_t v201 = v160;
    uint64_t v202 = v159;
    uint64_t v203 = v158;
    uint64_t v175 = v28;
    uint64_t v177 = v31;
    v187[0] = v31;
    v187[1] = countAndFlagsBits;
    v187[2] = (uint64_t)v166;
    v187[3] = v170;
    v187[4] = v167;
    v187[5] = v30;
    v187[6] = v27;
    v187[7] = v28;
    uint64_t result = (uint64_t)AttributedString.Runs._resolve(_:)(v187, &v179._countAndFlagsBits);
    if (v179._countAndFlagsBits != *(void *)(v20 + 88))
    {
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
      goto LABEL_168;
    }
    unint64_t object = (unint64_t)v179._object;
    uint64_t v35 = *((void *)&v181 + 1);
    long long v37 = v182;
    uint64_t v36 = v183;
    if ((void)v180)
    {
      uint64_t v38 = v180 + 24 * (((unint64_t)v179._object >> ((4 * *(unsigned char *)(v180 + 18) + 8) & 0x3C)) & 0xF);
      uint64_t v39 = *(void *)(v38 + 32);
      unint64_t v171 = *(void *)(v38 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v164 = *((void *)&v181 + 1);
      uint64_t v40 = *(void *)(v20 + 64);
      swift_retain();
      swift_unknownObjectRetain();
      unint64_t v171 = specialized Rope._Node.subscript.getter(object, v40);
      uint64_t v39 = v41;
      uint64_t v35 = v164;
      swift_unknownObjectRelease();
    }
    uint64_t v42 = v144;
    char v43 = static BigString.Index.< infix(_:_:)();
    if (v43)
    {
      uint64_t v33 = v35;
      uint64_t v44 = *((void *)&v37 + 1);
      uint64_t v42 = v37;
    }
    else
    {
      uint64_t v44 = v163;
    }
    if (v43) {
      uint64_t v45 = v36;
    }
    else {
      uint64_t v45 = v162;
    }
    uint64_t result = BigString.Index.utf8Offset.getter();
    uint64_t v46 = result + v171;
    if (__OFADD__(result, v171)) {
      goto LABEL_166;
    }
    uint64_t v47 = BigString.Index.utf8Offset.getter();
    if (v47 >= v46) {
      uint64_t v48 = v46;
    }
    else {
      uint64_t v48 = v47;
    }
    long long v49 = *v157;
    long long v50 = v157[1];
    long long v229 = v157[2];
    v228[1] = v50;
    v228[0] = v49;
    long long v51 = *v157;
    long long v52 = v157[1];
    v243[2] = v229;
    v243[1] = v52;
    v243[0] = v51;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v243, (uint64_t)v244);
    outlined retain of Locale((uint64_t)v244);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v228);
    uint64_t result = BigString.Index.utf8Offset.getter();
    if (__OFSUB__(v48, result)) {
      goto LABEL_167;
    }
    uint64_t v53 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v55 = v54;
    uint64_t v57 = v56;
    uint64_t v59 = v58;
    outlined release of Locale((uint64_t)v206);
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result)
    {
LABEL_168:
      __break(1u);
      goto LABEL_169;
    }
    uint64_t v211 = v33;
    uint64_t v212 = v42;
    uint64_t v213 = v44;
    uint64_t v214 = v45;
    uint64_t v215 = v53;
    uint64_t v216 = v55;
    uint64_t v217 = v57;
    uint64_t v218 = v59;
    uint64_t v60 = countAndFlagsBits;
    unint64_t v62 = v168[8];
    uint64_t v61 = v168[9];
    uint64_t v172 = v168[10];
    uint64_t v63 = v170;
    uint64_t v165 = v168[11];
    if (v170 == 1 || countAndFlagsBits != v168[11])
    {
      if (v62) {
        uint64_t v67 = v168[9];
      }
      else {
        uint64_t v67 = 0;
      }
      if (v177 < 0 || v67 < v177)
      {
LABEL_174:
        __break(1u);
LABEL_175:
        __break(1u);
LABEL_176:
        __break(1u);
LABEL_177:
        __break(1u);
LABEL_178:
        __break(1u);
LABEL_179:
        __break(1u);
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
        goto LABEL_182;
      }
      if (v62 && v177 < v61 && *(_WORD *)(v62 + 16))
      {
        uint64_t v68 = v168[9];
        uint64_t v69 = *(unsigned __int8 *)(v62 + 18);
        if (*(unsigned char *)(v62 + 18))
        {
          swift_unknownObjectRetain_n();
          uint64_t result = swift_retain();
          uint64_t v70 = v177;
          unint64_t v71 = v62;
          while (1)
          {
            unint64_t v74 = *(unsigned __int16 *)(v71 + 16);
            if (*(_WORD *)(v71 + 16))
            {
              uint64_t v75 = *(void *)(v71 + 32);
              BOOL v76 = __OFSUB__(v70, v75);
              uint64_t v77 = v70 - v75;
              if (v76) {
                goto LABEL_162;
              }
              if (__OFADD__(v77, 1)) {
                goto LABEL_163;
              }
              if (v77 + 1 <= 0)
              {
                unint64_t v74 = 0;
                goto LABEL_39;
              }
              if (v74 == 1) {
                goto LABEL_37;
              }
              uint64_t v78 = *(void *)(v71 + 56);
              uint64_t v70 = v77 - v78;
              if (__OFSUB__(v77, v78)) {
                goto LABEL_172;
              }
              if (__OFADD__(v70, 1)) {
                goto LABEL_173;
              }
              if (v70 + 1 < 1)
              {
                unint64_t v74 = 1;
                uint64_t v70 = v77;
                goto LABEL_39;
              }
              if (v74 == 2) {
                goto LABEL_38;
              }
              uint64_t v79 = *(void *)(v71 + 80);
              uint64_t v80 = v70 - v79;
              if (__OFSUB__(v70, v79)) {
                goto LABEL_180;
              }
              if (__OFADD__(v80, 1)) {
                goto LABEL_181;
              }
              if (v80 + 1 < 1)
              {
                unint64_t v74 = 2;
                goto LABEL_39;
              }
              if (v74 != 3)
              {
                uint64_t v81 = *(void *)(v71 + 104);
                BOOL v76 = __OFSUB__(v80, v81);
                uint64_t v77 = v80 - v81;
                if (v76) {
                  goto LABEL_185;
                }
                if (__OFADD__(v77, 1)) {
                  goto LABEL_186;
                }
                if (v77 + 1 < 1)
                {
                  unint64_t v74 = 3;
                  uint64_t v70 = v80;
                  goto LABEL_39;
                }
                if (v74 != 4)
                {
                  uint64_t v82 = 4;
                  if (v74 > 4) {
                    uint64_t v82 = *(unsigned __int16 *)(v71 + 16);
                  }
                  uint64_t v83 = (void *)(v71 + 128);
                  uint64_t v84 = 4;
                  while (1)
                  {
                    if (v82 == v84) {
                      goto LABEL_176;
                    }
                    uint64_t v70 = v77 - *v83;
                    if (__OFSUB__(v77, *v83)) {
                      goto LABEL_177;
                    }
                    if (__OFADD__(v70, 1)) {
                      goto LABEL_178;
                    }
                    if (v70 + 1 < 1) {
                      break;
                    }
                    ++v84;
                    v83 += 3;
                    uint64_t v77 = v70;
                    if (v74 == v84) {
                      goto LABEL_38;
                    }
                  }
                  unint64_t v74 = v84;
                  uint64_t v70 = v77;
                  goto LABEL_39;
                }
LABEL_37:
                uint64_t v70 = v77;
                goto LABEL_38;
              }
              v70 -= v79;
            }
LABEL_38:
            if (v70)
            {
LABEL_161:
              __break(1u);
LABEL_162:
              __break(1u);
LABEL_163:
              __break(1u);
LABEL_164:
              __break(1u);
              goto LABEL_165;
            }
LABEL_39:
            char v72 = (4 * *(unsigned char *)(v71 + 18) + 8) & 0x3C;
            uint64_t v69 = ((-15 << v72) - 1) & v69 | (v74 << v72);
            unint64_t v73 = *(void *)(v71 + 24 + 24 * v74);
            swift_unknownObjectRetain();
            uint64_t result = swift_unknownObjectRelease();
            unint64_t v71 = v73;
            if (!*(unsigned char *)(v73 + 18)) {
              goto LABEL_78;
            }
          }
        }
        swift_unknownObjectRetain_n();
        uint64_t result = swift_retain();
        uint64_t v70 = v177;
        unint64_t v73 = v62;
LABEL_78:
        uint64_t v85 = v73;
        unint64_t v86 = *(unsigned __int16 *)(v73 + 16);
        if (*(_WORD *)(v73 + 16))
        {
          unint64_t v87 = v70 - 1;
          if (__OFSUB__(v70, 1))
          {
LABEL_183:
            __break(1u);
            goto LABEL_184;
          }
          if (__OFADD__(v87, 1))
          {
LABEL_184:
            __break(1u);
LABEL_185:
            __break(1u);
LABEL_186:
            __break(1u);
            goto LABEL_187;
          }
          uint64_t v61 = v68;
          if (v70 <= 0)
          {
            unint64_t v86 = 0;
          }
          else
          {
            if (v86 == 1) {
              goto LABEL_108;
            }
            BOOL v76 = __OFSUB__(v87, 1);
            unint64_t v87 = v70 - 2;
            if (v76)
            {
LABEL_187:
              __break(1u);
LABEL_188:
              __break(1u);
LABEL_189:
              __break(1u);
LABEL_190:
              __break(1u);
LABEL_191:
              __break(1u);
              goto LABEL_192;
            }
            if (__OFADD__(v87, 1)) {
              goto LABEL_188;
            }
            if (v70 - 1 < 1)
            {
              unint64_t v86 = 1;
            }
            else
            {
              if (v86 == 2) {
                goto LABEL_108;
              }
              BOOL v76 = __OFSUB__(v87, 1);
              unint64_t v87 = v70 - 3;
              if (v76) {
                goto LABEL_191;
              }
              if (__OFADD__(v87, 1))
              {
LABEL_192:
                __break(1u);
LABEL_193:
                __break(1u);
                goto LABEL_194;
              }
              if (v70 - 2 < 1)
              {
                unint64_t v86 = 2;
              }
              else
              {
                if (v86 == 3) {
                  goto LABEL_108;
                }
                BOOL v76 = __OFSUB__(v87, 1);
                unint64_t v87 = v70 - 4;
                if (v76) {
                  goto LABEL_193;
                }
                if (__OFADD__(v87, 1))
                {
LABEL_194:
                  __break(1u);
                  return result;
                }
                if (v70 - 3 < 1)
                {
                  unint64_t v86 = 3;
                }
                else
                {
                  if (v86 == 4) {
                    goto LABEL_108;
                  }
                  uint64_t v88 = 0;
                  uint64_t v89 = 4;
                  if (v86 > 4) {
                    uint64_t v89 = v86;
                  }
                  unint64_t v90 = v89 - 4;
                  if (v87 >= v86 - 5) {
                    unint64_t v91 = v86 - 5;
                  }
                  else {
                    unint64_t v91 = v70 - 4;
                  }
                  if (v91 >= v70 + 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v91 = v70 + 0x7FFFFFFFFFFFFFFCLL;
                  }
                  while (1)
                  {
                    if (v90 <= v91) {
                      goto LABEL_189;
                    }
                    if (v70 + 0x7FFFFFFFFFFFFFFCLL == v88) {
                      goto LABEL_190;
                    }
                    if (v87 == v88) {
                      break;
                    }
                    if (v86 - 4 == ++v88)
                    {
                      v87 -= v88;
                      goto LABEL_108;
                    }
                  }
                  unint64_t v86 = v70;
                }
              }
            }
          }
        }
        else
        {
          unint64_t v87 = v70;
          uint64_t v61 = v68;
LABEL_108:
          if (v87)
          {
LABEL_182:
            __break(1u);
            goto LABEL_183;
          }
        }
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v64 = v69 & 0xFFFFFFFFFFFFF0FFLL | (v86 << 8);
        uint64_t v63 = v85;
        uint64_t v60 = v165;
      }
      else
      {
        swift_unknownObjectRetain_n();
        swift_retain();
        uint64_t v60 = v165;
        unint64_t v64 = specialized Rope._endPath.getter(v62);
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v63 = 0;
        if (!v62)
        {
          uint64_t v65 = v61;
          uint64_t v66 = 0;
          goto LABEL_117;
        }
      }
      swift_unknownObjectRetain();
      uint64_t v65 = v61;
      uint64_t v66 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v60, v64, v63, v62, v61, v172);
      uint64_t result = swift_unknownObjectRelease_n();
      goto LABEL_117;
    }
    if (v175 == 2)
    {
      if (v62)
      {
        swift_retain();
        swift_unknownObjectRetain();
        unint64_t v64 = (unint64_t)v166;
        uint64_t v65 = v61;
        uint64_t result = specialized Rope._Node.distanceFromStart<A>(to:in:)(countAndFlagsBits, (unint64_t)v166, v170, v62, v61, v172);
        uint64_t v66 = result;
        goto LABEL_117;
      }
      uint64_t v65 = v168[9];
      uint64_t result = swift_retain();
      uint64_t v66 = 0;
    }
    else
    {
      uint64_t v65 = v168[9];
      swift_unknownObjectRetain();
      swift_retain();
      uint64_t result = BigString.Index.utf8Offset.getter();
      uint64_t v66 = result;
    }
    unint64_t v64 = (unint64_t)v166;
LABEL_117:
    v188._uint64_t countAndFlagsBits = v60;
    v188._unint64_t object = (void *)v64;
    *(void *)&long long v189 = v63;
    if (__OFADD__(v177, 1))
    {
LABEL_169:
      __break(1u);
      goto LABEL_170;
    }
    if (v60 != v165)
    {
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
      goto LABEL_174;
    }
    uint64_t v178 = v177 + 1;
    if (v63)
    {
      unint64_t v92 = *(void *)(v63 + 24 * ((v64 >> ((4 * *(unsigned char *)(v63 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v92 = specialized Rope._Node.subscript.getter(v64, v62);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    BOOL v76 = __OFADD__(v66, v92);
    unint64_t v93 = v66 + v92;
    if (v76) {
      goto LABEL_171;
    }
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v188, v62, v65, v172, v165);
    swift_unknownObjectRelease_n();
    unint64_t v166 = v188._object;
    uint64_t countAndFlagsBits = v188._countAndFlagsBits;
    uint64_t v170 = v189;
    if (v175 != 2)
    {
      long long v109 = *v157;
      long long v110 = v157[1];
      long long v223 = v157[2];
      v222[1] = v110;
      v222[0] = v109;
      long long v111 = *v157;
      long long v112 = v157[1];
      _OWORD v249[2] = v223;
      v249[1] = v112;
      v249[0] = v111;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v249, (uint64_t)v250);
      outlined retain of Locale((uint64_t)v250);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v222);
      uint64_t result = BigString.Index.utf8Offset.getter();
      if (!__OFSUB__(v93, result))
      {
        uint64_t v102 = BigString.UTF8View.index(_:offsetBy:)();
        uint64_t v104 = v113;
        uint64_t v173 = v114;
        uint64_t v107 = v115;
        char v108 = &v207;
        goto LABEL_127;
      }
      goto LABEL_175;
    }
    long long v94 = *v157;
    long long v95 = v157[1];
    long long v227 = v157[2];
    v226[1] = v95;
    v226[0] = v94;
    long long v96 = *v157;
    long long v97 = v157[1];
    v245[2] = v227;
    v245[1] = v97;
    v245[0] = v96;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v245, (uint64_t)v246);
    outlined retain of Locale((uint64_t)v246);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v226);
    long long v98 = *v157;
    long long v99 = v157[1];
    long long v225 = v157[2];
    v224[1] = v99;
    v224[0] = v98;
    long long v100 = *v157;
    long long v101 = v157[1];
    v247[2] = v225;
    v247[1] = v101;
    v247[0] = v100;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v247, (uint64_t)v248);
    outlined retain of Locale((uint64_t)v248);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v224);
    uint64_t v102 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v104 = v103;
    uint64_t v173 = v105;
    uint64_t v107 = v106;
    char v108 = &v208;
LABEL_127:
    outlined release of Locale((uint64_t)v108);
    swift_release();
    uint64_t v174 = v104;
    uint64_t v176 = v107;
    uint64_t v167 = v102;
    long long v116 = a1[2];
    long long v219 = a1[1];
    long long v220 = v116;
    long long v221 = a1[3];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v209);
    uint64_t v117 = MEMORY[0x185302030](v210);
    int v119 = v118;
    uint64_t v120 = v204 & 0xFFFFFFFFFFFFLL;
    if ((v205 & 0x2000000000000000) != 0) {
      uint64_t v120 = HIBYTE(v205) & 0xF;
    }
    if (v120)
    {
      v121._uint64_t countAndFlagsBits = 10;
      v121._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v121);
    }
    v186._uint64_t countAndFlagsBits = v117;
    v186._unint64_t object = v119;
    v122._uint64_t countAndFlagsBits = 32;
    v122._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v122);
    v185._uint64_t countAndFlagsBits = 0;
    v185._unint64_t object = (void *)0xE000000000000000;
    uint64_t v123 = v39 + 64;
    uint64_t v124 = 1 << *(unsigned char *)(v39 + 32);
    if (v124 < 64) {
      uint64_t v125 = ~(-1 << v124);
    }
    else {
      uint64_t v125 = -1;
    }
    unint64_t v126 = v125 & *(void *)(v39 + 64);
    int64_t v127 = (unint64_t)(v124 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v128 = 0;
    while (1)
    {
      if (v126)
      {
        unint64_t v129 = __clz(__rbit64(v126));
        v126 &= v126 - 1;
        unint64_t v130 = v129 | (v128 << 6);
        goto LABEL_136;
      }
      int64_t v139 = v128 + 1;
      if (__OFADD__(v128, 1))
      {
        __break(1u);
        goto LABEL_161;
      }
      if (v139 >= v127) {
        break;
      }
      unint64_t v140 = *(void *)(v123 + 8 * v139);
      ++v128;
      if (!v140)
      {
        int64_t v128 = v139 + 1;
        if (v139 + 1 >= v127) {
          break;
        }
        unint64_t v140 = *(void *)(v123 + 8 * v128);
        if (!v140)
        {
          int64_t v128 = v139 + 2;
          if (v139 + 2 >= v127) {
            break;
          }
          unint64_t v140 = *(void *)(v123 + 8 * v128);
          if (!v140)
          {
            int64_t v128 = v139 + 3;
            if (v139 + 3 >= v127) {
              break;
            }
            unint64_t v140 = *(void *)(v123 + 8 * v128);
            if (!v140)
            {
              int64_t v128 = v139 + 4;
              if (v139 + 4 >= v127) {
                break;
              }
              unint64_t v140 = *(void *)(v123 + 8 * v128);
              if (!v140)
              {
                int64_t v128 = v139 + 5;
                if (v139 + 5 >= v127) {
                  break;
                }
                unint64_t v140 = *(void *)(v123 + 8 * v128);
                if (!v140)
                {
                  int64_t v141 = v139 + 6;
                  if (v141 >= v127) {
                    break;
                  }
                  unint64_t v140 = *(void *)(v123 + 8 * v141);
                  if (!v140)
                  {
                    while (1)
                    {
                      int64_t v128 = v141 + 1;
                      if (__OFADD__(v141, 1)) {
                        goto LABEL_179;
                      }
                      if (v128 >= v127) {
                        goto LABEL_4;
                      }
                      unint64_t v140 = *(void *)(v123 + 8 * v128);
                      ++v141;
                      if (v140) {
                        goto LABEL_157;
                      }
                    }
                  }
                  int64_t v128 = v141;
                }
              }
            }
          }
        }
      }
LABEL_157:
      unint64_t v126 = (v140 - 1) & v140;
      unint64_t v130 = __clz(__rbit64(v140)) + (v128 << 6);
LABEL_136:
      int v131 = (uint64_t *)(*(void *)(v39 + 48) + 16 * v130);
      uint64_t v133 = *v131;
      char v132 = (void *)v131[1];
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v39 + 56) + 72 * v130, (uint64_t)&v189);
      v188._uint64_t countAndFlagsBits = v133;
      v188._unint64_t object = v132;
      long long v181 = v190;
      long long v182 = v191;
      long long v183 = *(_OWORD *)v192;
      uint64_t v184 = *(void *)&v192[16];
      Swift::String v179 = v188;
      long long v180 = v189;
      Swift::String v134 = v188;
      swift_bridgeObjectRetain();
      String.append(_:)(v134);
      v135._uint64_t countAndFlagsBits = 2112800;
      v135._unint64_t object = (void *)0xE300000000000000;
      String.append(_:)(v135);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v180, (uint64_t)v187);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      v136._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v136);
      swift_bridgeObjectRelease();
      v137._uint64_t countAndFlagsBits = 10;
      v137._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v137);
      v138._uint64_t countAndFlagsBits = 9;
      v138._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v138);
      swift_bridgeObjectRelease();
      uint64_t result = outlined destroy of Any?((uint64_t)&v179, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
    }
LABEL_4:
    swift_release();
    v188._uint64_t countAndFlagsBits = 2683;
    v188._unint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v185);
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = 125;
    v32._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v32);
    String.append(_:)(v188);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    String.append(_:)(v186);
    uint64_t v20 = (uint64_t)v168;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v21 = v142;
    long long v19 = v143;
    uint64_t v28 = v176;
    uint64_t v31 = v178;
    uint64_t v27 = v173;
    uint64_t v30 = v174;
    if (v178 != v142) {
      continue;
    }
    break;
  }
  outlined release of AttributedString.Runs((uint64_t)&v251);
  uint64_t v22 = v204;
LABEL_159:
  swift_release();
  swift_release();
  return v22;
}

Swift::UInt specialized AttributedStringProtocol.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  long long v4 = *(_OWORD *)(v1 + 24);
  long long v137 = *(_OWORD *)(v1 + 8);
  long long v138 = v4;
  long long v5 = *(_OWORD *)(v1 + 56);
  long long v139 = *(_OWORD *)(v1 + 40);
  long long v140 = v5;
  outlined retain of AttributedString.Runs(v1);
  uint64_t v6 = swift_retain();
  AttributedString.Runs.init(_:in:)(v6, &v164);
  uint64_t v7 = *((void *)&v164 + 1);
  uint64_t v8 = *((void *)&v168 + 1);
  Swift::UInt result = *((void *)&v168 + 1) - *((void *)&v164 + 1);
  if (__OFSUB__(*((void *)&v168 + 1), *((void *)&v164 + 1))) {
    goto LABEL_142;
  }
  uint64_t v93 = v1;
  unint64_t v105 = *((void *)&v165 + 1);
  uint64_t v106 = v165;
  uint64_t v11 = *((void *)&v166 + 1);
  uint64_t v10 = v166;
  uint64_t v13 = *((void *)&v167 + 1);
  uint64_t v12 = v167;
  uint64_t v111 = v168;
  Hasher._combine(_:)(result);
  if (v7 == v8) {
    goto LABEL_118;
  }
  uint64_t v99 = *((void *)&v173 + 1);
  uint64_t v100 = v173;
  uint64_t v97 = *((void *)&v172 + 1);
  uint64_t v98 = v174;
  long long v110 = (void *)v164;
  uint64_t v104 = (long long *)(v164 + 16);
  long long v94 = (long long *)(v3 + 16);
  Swift::UInt result = outlined retain of AttributedString.Runs((uint64_t)&v164);
  uint64_t v95 = v8;
  uint64_t v96 = a1;
  do
  {
    if (v7 >= v8)
    {
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
      goto LABEL_130;
    }
    long long v130 = v174;
    long long v131 = v175;
    uint64_t v132 = v176;
    long long v126 = v170;
    long long v127 = v171;
    long long v128 = v172;
    long long v129 = v173;
    long long v122 = v166;
    long long v123 = v167;
    long long v124 = v168;
    long long v125 = v169;
    long long v120 = v164;
    long long v121 = v165;
    v119[0] = v7;
    v119[1] = v106;
    v119[2] = v105;
    long long v119[3] = v10;
    v119[4] = v11;
    v119[5] = v12;
    v119[6] = v13;
    unsigned char v119[7] = v111;
    Swift::UInt result = (Swift::UInt)AttributedString.Runs._resolve(_:)(v119, &v112);
    if (v112 != v110[11]) {
      goto LABEL_123;
    }
    uint64_t v103 = v7;
    unint64_t v29 = v113;
    uint64_t v30 = v115;
    uint64_t v31 = v116;
    uint64_t v33 = v117;
    uint64_t v32 = v118;
    if (v114)
    {
      int v34 = (void *)(v114 + 24 * ((v113 >> ((4 * *(unsigned char *)(v114 + 18) + 8) & 0x3C)) & 0xF));
      uint64_t v35 = v34[4];
      unint64_t v108 = v34[3];
      uint64_t v36 = v34[5];
      outlined retain of AttributedString.Runs((uint64_t)&v164);
      uint64_t v102 = v35;
      swift_bridgeObjectRetain();
      uint64_t v101 = v36;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v37 = v110[8];
      outlined retain of AttributedString.Runs((uint64_t)&v164);
      swift_unknownObjectRetain();
      unint64_t v108 = specialized Rope._Node.subscript.getter(v29, v37);
      uint64_t v101 = v39;
      uint64_t v102 = v38;
      swift_unknownObjectRelease();
    }
    uint64_t v40 = v97;
    uint64_t v41 = v99;
    char v42 = static BigString.Index.< infix(_:_:)();
    if (v42)
    {
      uint64_t v40 = v30;
      uint64_t v43 = v31;
    }
    else
    {
      uint64_t v43 = v100;
    }
    if (v42)
    {
      uint64_t v41 = v33;
      uint64_t v44 = v32;
    }
    else
    {
      uint64_t v44 = v98;
    }
    Swift::UInt result = BigString.Index.utf8Offset.getter();
    uint64_t v45 = result + v108;
    if (__OFADD__(result, v108)) {
      goto LABEL_124;
    }
    uint64_t v46 = BigString.Index.utf8Offset.getter();
    if (v46 >= v45) {
      uint64_t v47 = v45;
    }
    else {
      uint64_t v47 = v46;
    }
    long long v48 = *v104;
    long long v49 = v104[2];
    v153[1] = v104[1];
    v153[2] = v49;
    v153[0] = v48;
    long long v50 = *v104;
    v154[1] = v104[1];
    v154[2] = v49;
    v154[0] = v50;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v154, (uint64_t)v155);
    outlined retain of Locale((uint64_t)v155);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v153);
    Swift::UInt result = BigString.Index.utf8Offset.getter();
    if (__OFSUB__(v47, result)) {
      goto LABEL_125;
    }
    uint64_t v51 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v53 = v52;
    uint64_t v55 = v54;
    uint64_t v57 = v56;
    outlined release of Locale((uint64_t)v133);
    Swift::UInt result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_126;
    }
    uint64_t v141 = v40;
    uint64_t v142 = v43;
    uint64_t v143 = v41;
    uint64_t v144 = v44;
    uint64_t v145 = v51;
    uint64_t v146 = v53;
    uint64_t v147 = v55;
    uint64_t v148 = v57;
    uint64_t v58 = v110[8];
    uint64_t v59 = v110[9];
    uint64_t v60 = v110[11];
    uint64_t v109 = v110[10];
    uint64_t v61 = v106;
    if (v10 == 1 || v106 != v60)
    {
      if (v58) {
        uint64_t v65 = v110[9];
      }
      else {
        uint64_t v65 = 0;
      }
      uint64_t v62 = v103;
      if (v103 < 0 || v65 < v103) {
        goto LABEL_135;
      }
      if (!v58 || v103 >= v59 || !*(_WORD *)(v58 + 16))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)&v164);
        unint64_t v79 = swift_unknownObjectRetain();
        unint64_t v63 = specialized Rope._endPath.getter(v79);
        Swift::UInt result = swift_unknownObjectRelease();
        uint64_t v10 = 0;
        if (!v58)
        {
          uint64_t v64 = 0;
          goto LABEL_107;
        }
LABEL_68:
        swift_unknownObjectRetain();
        uint64_t v64 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v60, v63, v10, v58, v59, v109);
        Swift::UInt result = swift_unknownObjectRelease_n();
LABEL_107:
        uint64_t v61 = v60;
        goto LABEL_108;
      }
      uint64_t v107 = v110[9];
      uint64_t v66 = *(unsigned __int8 *)(v58 + 18);
      if (*(unsigned char *)(v58 + 18))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)&v164);
        Swift::UInt result = swift_unknownObjectRetain();
        uint64_t v67 = v103;
        uint64_t v68 = v58;
        while (1)
        {
          unint64_t v70 = *(unsigned __int16 *)(v68 + 16);
          if (*(_WORD *)(v68 + 16))
          {
            uint64_t v71 = *(void *)(v68 + 32);
            BOOL v72 = __OFSUB__(v67, v71);
            uint64_t v73 = v67 - v71;
            if (v72) {
              goto LABEL_120;
            }
            if (__OFADD__(v73, 1)) {
              goto LABEL_121;
            }
            if (v73 + 1 <= 0)
            {
              unint64_t v70 = 0;
              goto LABEL_40;
            }
            if (v70 != 1)
            {
              uint64_t v74 = *(void *)(v68 + 56);
              uint64_t v67 = v73 - v74;
              if (__OFSUB__(v73, v74)) {
                goto LABEL_133;
              }
              if (__OFADD__(v67, 1)) {
                goto LABEL_134;
              }
              if (v67 + 1 < 1)
              {
                unint64_t v70 = 1;
                uint64_t v67 = v73;
                goto LABEL_40;
              }
              if (v70 == 2) {
                goto LABEL_39;
              }
              uint64_t v75 = *(void *)(v68 + 80);
              BOOL v72 = __OFSUB__(v67, v75);
              uint64_t v73 = v67 - v75;
              if (v72) {
                goto LABEL_137;
              }
              if (__OFADD__(v73, 1)) {
                goto LABEL_138;
              }
              if (v73 + 1 < 1)
              {
                unint64_t v70 = 2;
                goto LABEL_40;
              }
              if (v70 != 3)
              {
                uint64_t v76 = 3;
                if (v70 > 3) {
                  uint64_t v76 = *(unsigned __int16 *)(v68 + 16);
                }
                uint64_t v77 = (void *)(v68 + 104);
                uint64_t v78 = 3;
                while (v76 != v78)
                {
                  uint64_t v67 = v73 - *v77;
                  if (__OFSUB__(v73, *v77)) {
                    goto LABEL_131;
                  }
                  if (__OFADD__(v67, 1)) {
                    goto LABEL_132;
                  }
                  if (v67 + 1 < 1)
                  {
                    unint64_t v70 = v78;
                    uint64_t v67 = v73;
                    goto LABEL_40;
                  }
                  ++v78;
                  v77 += 3;
                  uint64_t v73 = v67;
                  if (v70 == v78) {
                    goto LABEL_39;
                  }
                }
LABEL_130:
                __break(1u);
LABEL_131:
                __break(1u);
LABEL_132:
                __break(1u);
LABEL_133:
                __break(1u);
LABEL_134:
                __break(1u);
LABEL_135:
                __break(1u);
LABEL_136:
                __break(1u);
LABEL_137:
                __break(1u);
LABEL_138:
                __break(1u);
LABEL_139:
                __break(1u);
LABEL_140:
                __break(1u);
                goto LABEL_141;
              }
            }
            uint64_t v67 = v73;
          }
LABEL_39:
          if (v67)
          {
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
            goto LABEL_122;
          }
LABEL_40:
          char v69 = (4 * *(unsigned char *)(v68 + 18) + 8) & 0x3C;
          uint64_t v66 = ((-15 << v69) - 1) & v66 | (v70 << v69);
          uint64_t v10 = *(void *)(v68 + 24 + 24 * v70);
          swift_unknownObjectRetain();
          Swift::UInt result = swift_unknownObjectRelease();
          uint64_t v68 = v10;
          if (!*(unsigned char *)(v10 + 18)) {
            goto LABEL_73;
          }
        }
      }
      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs((uint64_t)&v164);
      Swift::UInt result = swift_unknownObjectRetain();
      uint64_t v67 = v103;
      uint64_t v10 = v58;
LABEL_73:
      unint64_t v80 = *(unsigned __int16 *)(v10 + 16);
      if (!*(_WORD *)(v10 + 16))
      {
        unint64_t v81 = v67;
        goto LABEL_99;
      }
      unint64_t v81 = v67 - 1;
      if (__OFSUB__(v67, 1)) {
        goto LABEL_140;
      }
      if (!__OFADD__(v81, 1))
      {
        if (v67 <= 0)
        {
          unint64_t v80 = 0;
          goto LABEL_105;
        }
        if (v80 != 1)
        {
          BOOL v72 = __OFSUB__(v81, 1);
          unint64_t v81 = v67 - 2;
          if (v72) {
            goto LABEL_145;
          }
          if (__OFADD__(v81, 1)) {
            goto LABEL_146;
          }
          if (v67 - 1 < 1)
          {
            unint64_t v80 = 1;
            goto LABEL_105;
          }
          if (v80 != 2)
          {
            BOOL v72 = __OFSUB__(v81, 1);
            unint64_t v81 = v67 - 3;
            if (v72) {
              goto LABEL_147;
            }
            if (__OFADD__(v81, 1)) {
              goto LABEL_148;
            }
            if (v67 - 2 >= 1)
            {
              if (v80 != 3)
              {
                uint64_t v82 = 0;
                uint64_t v83 = 3;
                if (v80 > 3) {
                  uint64_t v83 = *(unsigned __int16 *)(v10 + 16);
                }
                unint64_t v84 = v83 - 3;
                if (v81 >= v80 - 4) {
                  unint64_t v85 = v80 - 4;
                }
                else {
                  unint64_t v85 = v67 - 3;
                }
                if (v85 >= v67 + 0x7FFFFFFFFFFFFFFDLL) {
                  unint64_t v85 = v67 + 0x7FFFFFFFFFFFFFFDLL;
                }
                while (v84 > v85)
                {
                  if (v67 + 0x7FFFFFFFFFFFFFFDLL == v82) {
                    goto LABEL_144;
                  }
                  if (v81 == v82)
                  {
                    unint64_t v80 = v67;
                    goto LABEL_105;
                  }
                  if (v80 - 3 == ++v82)
                  {
                    v81 -= v82;
                    goto LABEL_99;
                  }
                }
LABEL_143:
                __break(1u);
LABEL_144:
                __break(1u);
LABEL_145:
                __break(1u);
LABEL_146:
                __break(1u);
LABEL_147:
                __break(1u);
LABEL_148:
                __break(1u);
                return result;
              }
              goto LABEL_99;
            }
            unint64_t v80 = 2;
LABEL_105:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v63 = v66 & 0xFFFFFFFFFFFFF0FFLL | (v80 << 8);
            uint64_t v59 = v107;
            goto LABEL_68;
          }
        }
LABEL_99:
        if (v81) {
          goto LABEL_139;
        }
        goto LABEL_105;
      }
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
      goto LABEL_143;
    }
    uint64_t v62 = v103;
    if (v111 == 2)
    {
      if (v58)
      {
        outlined retain of AttributedString.Runs((uint64_t)&v164);
        swift_unknownObjectRetain();
        unint64_t v63 = v105;
        Swift::UInt result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v106, v105, v10, v58, v59, v109);
        uint64_t v64 = result;
        goto LABEL_108;
      }
      Swift::UInt result = swift_retain();
      uint64_t v64 = 0;
    }
    else
    {
      outlined retain of AttributedString.Runs((uint64_t)&v164);
      swift_unknownObjectRetain();
      Swift::UInt result = BigString.Index.utf8Offset.getter();
      uint64_t v64 = result;
    }
    unint64_t v63 = v105;
LABEL_108:
    *(void *)&long long v120 = v61;
    *((void *)&v120 + 1) = v63;
    *(void *)&long long v121 = v10;
    BOOL v72 = __OFADD__(v62, 1);
    uint64_t v86 = v62 + 1;
    if (v72) {
      goto LABEL_127;
    }
    if (v61 != v60) {
      goto LABEL_128;
    }
    if (v10)
    {
      unint64_t v87 = *(void *)(v10 + 24 * ((v63 >> ((4 * *(unsigned char *)(v10 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v87 = specialized Rope._Node.subscript.getter(v63, v58);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    Swift::UInt result = swift_bridgeObjectRelease();
    BOOL v72 = __OFADD__(v64, v87);
    unint64_t v88 = v64 + v87;
    if (v72) {
      goto LABEL_129;
    }
    uint64_t v7 = v86;
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v120, v58, v59, v109, v60);
    swift_unknownObjectRelease_n();
    unint64_t v105 = *((void *)&v120 + 1);
    uint64_t v106 = v120;
    uint64_t v10 = v121;
    if (v111 == 2)
    {
      long long v14 = *v104;
      long long v15 = v104[2];
      v152[1] = v104[1];
      v152[2] = v15;
      v152[0] = v14;
      long long v16 = *v104;
      v156[1] = v104[1];
      v156[2] = v15;
      v156[0] = v16;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v156, (uint64_t)v157);
      outlined retain of Locale((uint64_t)v157);
      uint64_t v17 = &v135;
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v152);
      long long v18 = *v104;
      long long v19 = v104[2];
      v151[1] = v104[1];
      v151[2] = v19;
      v151[0] = v18;
      long long v20 = *v104;
      long long v21 = v104[1];
      v158[2] = v19;
      v158[1] = v21;
      v158[0] = v20;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v158, (uint64_t)&v159);
      outlined retain of Locale((uint64_t)&v159);
      BigString.startIndex.getter();
      outlined release of Locale((uint64_t)v151);
    }
    else
    {
      long long v89 = *v104;
      long long v90 = v104[2];
      v150[1] = v104[1];
      v150[2] = v90;
      v150[0] = v89;
      long long v91 = *v104;
      long long v92 = v104[1];
      v160[2] = v90;
      v160[1] = v92;
      v160[0] = v91;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v160, (uint64_t)&v161);
      outlined retain of Locale((uint64_t)&v161);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v150);
      Swift::UInt result = BigString.Index.utf8Offset.getter();
      if (__OFSUB__(v88, result)) {
        goto LABEL_136;
      }
      uint64_t v17 = &v134;
    }
    uint64_t v11 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v12 = v22;
    uint64_t v13 = v23;
    uint64_t v111 = v24;
    outlined release of Locale((uint64_t)v17);
    outlined release of AttributedString.Runs((uint64_t)&v164);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(v96, v102);
    specialized Set.hash(into:)(v96, v101);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v25 = *v94;
    long long v26 = v94[2];
    v149[1] = v94[1];
    v149[2] = v26;
    v149[0] = v25;
    long long v27 = *v94;
    long long v28 = v94[1];
    v162[2] = v26;
    v162[1] = v28;
    v162[0] = v27;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v162, (uint64_t)v163);
    outlined retain of Locale((uint64_t)v163);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v149);
    BigSubstring.hash(into:)();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Swift::UInt result = outlined release of Locale((uint64_t)v136);
    uint64_t v8 = v95;
  }
  while (v7 != v95);
  outlined release of AttributedString.Runs((uint64_t)&v164);
LABEL_118:
  outlined release of AttributedString.Runs((uint64_t)&v164);
  return outlined release of AttributedString.Runs(v93);
}

Swift::UInt specialized AttributedStringProtocol.hash(into:)(uint64_t a1, _OWORD *a2)
{
  long long v4 = a2[2];
  v175[0] = a2[1];
  v175[1] = v4;
  v175[2] = a2[3];
  swift_retain();
  outlined retain of Locale((uint64_t)v175);
  uint64_t v5 = BigString.startIndex.getter();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  outlined release of Locale((uint64_t)v175);
  long long v12 = a2[2];
  v173[0] = a2[1];
  v173[1] = v12;
  long long v174 = a2[3];
  v176[0] = v173[0];
  v176[1] = v12;
  v176[2] = v174;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v176, (uint64_t)v177);
  outlined retain of Locale((uint64_t)v177);
  uint64_t v13 = BigString.endIndex.getter();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  outlined release of Locale((uint64_t)v173);
  uint64_t v165 = v5;
  uint64_t v166 = v7;
  uint64_t v167 = v9;
  uint64_t v168 = v11;
  uint64_t v169 = v13;
  uint64_t v170 = v15;
  uint64_t v171 = v17;
  uint64_t v172 = v19;
  uint64_t v20 = swift_retain();
  uint64_t v107 = a2;
  AttributedString.Runs.init(_:in:)(v20, &v188);
  uint64_t v21 = *((void *)&v188 + 1);
  uint64_t v22 = *((void *)&v192 + 1);
  Swift::UInt result = *((void *)&v192 + 1) - *((void *)&v188 + 1);
  if (__OFSUB__(*((void *)&v192 + 1), *((void *)&v188 + 1))) {
    goto LABEL_142;
  }
  unint64_t v118 = *((void *)&v189 + 1);
  uint64_t v119 = v189;
  uint64_t v25 = *((void *)&v190 + 1);
  uint64_t v24 = v190;
  uint64_t v27 = *((void *)&v191 + 1);
  uint64_t v26 = v191;
  uint64_t v28 = v192;
  Hasher._combine(_:)(result);
  if (v21 == v22) {
    goto LABEL_118;
  }
  uint64_t v112 = *((void *)&v197 + 1);
  uint64_t v113 = v197;
  uint64_t v110 = *((void *)&v196 + 1);
  uint64_t v111 = v198;
  long long v123 = (void *)v188;
  uint64_t v116 = (long long *)(v188 + 16);
  Swift::UInt result = outlined retain of AttributedString.Runs((uint64_t)&v188);
  uint64_t v108 = v22;
  uint64_t v109 = a1;
  do
  {
    if (v21 >= v22)
    {
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
      goto LABEL_130;
    }
    long long v144 = v198;
    long long v145 = v199;
    uint64_t v146 = v200;
    long long v140 = v194;
    long long v141 = v195;
    long long v142 = v196;
    long long v143 = v197;
    long long v136 = v190;
    long long v137 = v191;
    long long v138 = v192;
    long long v139 = v193;
    long long v134 = v188;
    long long v135 = v189;
    v133[0] = v21;
    v133[1] = v119;
    _OWORD v133[2] = v118;
    v133[3] = v24;
    v133[4] = v25;
    v133[5] = v26;
    v133[6] = v27;
    v133[7] = v28;
    Swift::UInt result = (Swift::UInt)AttributedString.Runs._resolve(_:)(v133, &v126);
    if (v126 != v123[11]) {
      goto LABEL_123;
    }
    uint64_t v117 = v28;
    uint64_t v124 = v21;
    unint64_t v42 = v127;
    uint64_t v43 = v129;
    uint64_t v44 = v130;
    uint64_t v46 = v131;
    uint64_t v45 = v132;
    if (v128)
    {
      uint64_t v47 = (void *)(v128 + 24 * ((v127 >> ((4 * *(unsigned char *)(v128 + 18) + 8) & 0x3C)) & 0xF));
      uint64_t v48 = v47[4];
      unint64_t v121 = v47[3];
      uint64_t v49 = v47[5];
      outlined retain of AttributedString.Runs((uint64_t)&v188);
      uint64_t v115 = v48;
      swift_bridgeObjectRetain();
      uint64_t v114 = v49;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v50 = v123[8];
      outlined retain of AttributedString.Runs((uint64_t)&v188);
      swift_unknownObjectRetain();
      unint64_t v121 = specialized Rope._Node.subscript.getter(v42, v50);
      uint64_t v114 = v52;
      uint64_t v115 = v51;
      swift_unknownObjectRelease();
    }
    uint64_t v53 = v110;
    uint64_t v54 = v112;
    char v55 = static BigString.Index.< infix(_:_:)();
    if (v55)
    {
      uint64_t v53 = v43;
      uint64_t v56 = v44;
    }
    else
    {
      uint64_t v56 = v113;
    }
    if (v55)
    {
      uint64_t v54 = v46;
      uint64_t v57 = v45;
    }
    else
    {
      uint64_t v57 = v111;
    }
    Swift::UInt result = BigString.Index.utf8Offset.getter();
    uint64_t v58 = result + v121;
    if (__OFADD__(result, v121)) {
      goto LABEL_124;
    }
    uint64_t v59 = BigString.Index.utf8Offset.getter();
    if (v59 >= v58) {
      uint64_t v60 = v58;
    }
    else {
      uint64_t v60 = v59;
    }
    long long v61 = *v116;
    long long v62 = v116[2];
    v164[1] = v116[1];
    v164[2] = v62;
    v164[0] = v61;
    long long v63 = *v116;
    long long v64 = v116[1];
    v178[2] = v62;
    v178[1] = v64;
    v178[0] = v63;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v178, (uint64_t)v179);
    outlined retain of Locale((uint64_t)v179);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v164);
    Swift::UInt result = BigString.Index.utf8Offset.getter();
    if (__OFSUB__(v60, result)) {
      goto LABEL_125;
    }
    uint64_t v65 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v67 = v66;
    uint64_t v69 = v68;
    uint64_t v71 = v70;
    outlined release of Locale((uint64_t)v147);
    Swift::UInt result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_126;
    }
    uint64_t v151 = v53;
    uint64_t v152 = v56;
    uint64_t v153 = v54;
    uint64_t v154 = v57;
    uint64_t v155 = v65;
    uint64_t v156 = v67;
    uint64_t v157 = v69;
    uint64_t v158 = v71;
    uint64_t v72 = v123[8];
    uint64_t v73 = v123[9];
    uint64_t v74 = v123[11];
    uint64_t v122 = v123[10];
    uint64_t v75 = v119;
    if (v24 == 1 || v119 != v74)
    {
      if (v72) {
        uint64_t v79 = v123[9];
      }
      else {
        uint64_t v79 = 0;
      }
      uint64_t v76 = v124;
      if (v124 < 0 || v79 < v124) {
        goto LABEL_135;
      }
      if (!v72 || v124 >= v73 || !*(_WORD *)(v72 + 16))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)&v188);
        unint64_t v93 = swift_unknownObjectRetain();
        unint64_t v77 = specialized Rope._endPath.getter(v93);
        Swift::UInt result = swift_unknownObjectRelease();
        uint64_t v24 = 0;
        if (!v72)
        {
          uint64_t v78 = 0;
          goto LABEL_107;
        }
LABEL_68:
        swift_unknownObjectRetain();
        uint64_t v78 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v74, v77, v24, v72, v73, v122);
        Swift::UInt result = swift_unknownObjectRelease_n();
LABEL_107:
        uint64_t v75 = v74;
        goto LABEL_108;
      }
      uint64_t v120 = v123[9];
      uint64_t v80 = *(unsigned __int8 *)(v72 + 18);
      if (*(unsigned char *)(v72 + 18))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)&v188);
        Swift::UInt result = swift_unknownObjectRetain();
        uint64_t v81 = v124;
        uint64_t v82 = v72;
        while (1)
        {
          unint64_t v84 = *(unsigned __int16 *)(v82 + 16);
          if (*(_WORD *)(v82 + 16))
          {
            uint64_t v85 = *(void *)(v82 + 32);
            BOOL v86 = __OFSUB__(v81, v85);
            uint64_t v87 = v81 - v85;
            if (v86) {
              goto LABEL_120;
            }
            if (__OFADD__(v87, 1)) {
              goto LABEL_121;
            }
            if (v87 + 1 <= 0)
            {
              unint64_t v84 = 0;
              goto LABEL_40;
            }
            if (v84 != 1)
            {
              uint64_t v88 = *(void *)(v82 + 56);
              uint64_t v81 = v87 - v88;
              if (__OFSUB__(v87, v88)) {
                goto LABEL_133;
              }
              if (__OFADD__(v81, 1)) {
                goto LABEL_134;
              }
              if (v81 + 1 < 1)
              {
                unint64_t v84 = 1;
                uint64_t v81 = v87;
                goto LABEL_40;
              }
              if (v84 == 2) {
                goto LABEL_39;
              }
              uint64_t v89 = *(void *)(v82 + 80);
              BOOL v86 = __OFSUB__(v81, v89);
              uint64_t v87 = v81 - v89;
              if (v86) {
                goto LABEL_137;
              }
              if (__OFADD__(v87, 1)) {
                goto LABEL_138;
              }
              if (v87 + 1 < 1)
              {
                unint64_t v84 = 2;
                goto LABEL_40;
              }
              if (v84 != 3)
              {
                uint64_t v90 = 3;
                if (v84 > 3) {
                  uint64_t v90 = *(unsigned __int16 *)(v82 + 16);
                }
                long long v91 = (void *)(v82 + 104);
                uint64_t v92 = 3;
                while (v90 != v92)
                {
                  uint64_t v81 = v87 - *v91;
                  if (__OFSUB__(v87, *v91)) {
                    goto LABEL_131;
                  }
                  if (__OFADD__(v81, 1)) {
                    goto LABEL_132;
                  }
                  if (v81 + 1 < 1)
                  {
                    unint64_t v84 = v92;
                    uint64_t v81 = v87;
                    goto LABEL_40;
                  }
                  ++v92;
                  v91 += 3;
                  uint64_t v87 = v81;
                  if (v84 == v92) {
                    goto LABEL_39;
                  }
                }
LABEL_130:
                __break(1u);
LABEL_131:
                __break(1u);
LABEL_132:
                __break(1u);
LABEL_133:
                __break(1u);
LABEL_134:
                __break(1u);
LABEL_135:
                __break(1u);
LABEL_136:
                __break(1u);
LABEL_137:
                __break(1u);
LABEL_138:
                __break(1u);
LABEL_139:
                __break(1u);
LABEL_140:
                __break(1u);
                goto LABEL_141;
              }
            }
            uint64_t v81 = v87;
          }
LABEL_39:
          if (v81)
          {
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
            goto LABEL_122;
          }
LABEL_40:
          char v83 = (4 * *(unsigned char *)(v82 + 18) + 8) & 0x3C;
          uint64_t v80 = ((-15 << v83) - 1) & v80 | (v84 << v83);
          uint64_t v24 = *(void *)(v82 + 24 + 24 * v84);
          swift_unknownObjectRetain();
          Swift::UInt result = swift_unknownObjectRelease();
          uint64_t v82 = v24;
          if (!*(unsigned char *)(v24 + 18)) {
            goto LABEL_73;
          }
        }
      }
      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs((uint64_t)&v188);
      Swift::UInt result = swift_unknownObjectRetain();
      uint64_t v81 = v124;
      uint64_t v24 = v72;
LABEL_73:
      unint64_t v94 = *(unsigned __int16 *)(v24 + 16);
      if (!*(_WORD *)(v24 + 16))
      {
        unint64_t v95 = v81;
        goto LABEL_99;
      }
      unint64_t v95 = v81 - 1;
      if (__OFSUB__(v81, 1)) {
        goto LABEL_140;
      }
      if (!__OFADD__(v95, 1))
      {
        if (v81 <= 0)
        {
          unint64_t v94 = 0;
          goto LABEL_105;
        }
        if (v94 != 1)
        {
          BOOL v86 = __OFSUB__(v95, 1);
          unint64_t v95 = v81 - 2;
          if (v86) {
            goto LABEL_145;
          }
          if (__OFADD__(v95, 1)) {
            goto LABEL_146;
          }
          if (v81 - 1 < 1)
          {
            unint64_t v94 = 1;
            goto LABEL_105;
          }
          if (v94 != 2)
          {
            BOOL v86 = __OFSUB__(v95, 1);
            unint64_t v95 = v81 - 3;
            if (v86) {
              goto LABEL_147;
            }
            if (__OFADD__(v95, 1)) {
              goto LABEL_148;
            }
            if (v81 - 2 >= 1)
            {
              if (v94 != 3)
              {
                uint64_t v96 = 0;
                uint64_t v97 = 3;
                if (v94 > 3) {
                  uint64_t v97 = *(unsigned __int16 *)(v24 + 16);
                }
                unint64_t v98 = v97 - 3;
                if (v95 >= v94 - 4) {
                  unint64_t v99 = v94 - 4;
                }
                else {
                  unint64_t v99 = v81 - 3;
                }
                if (v99 >= v81 + 0x7FFFFFFFFFFFFFFDLL) {
                  unint64_t v99 = v81 + 0x7FFFFFFFFFFFFFFDLL;
                }
                while (v98 > v99)
                {
                  if (v81 + 0x7FFFFFFFFFFFFFFDLL == v96) {
                    goto LABEL_144;
                  }
                  if (v95 == v96)
                  {
                    unint64_t v94 = v81;
                    goto LABEL_105;
                  }
                  if (v94 - 3 == ++v96)
                  {
                    v95 -= v96;
                    goto LABEL_99;
                  }
                }
LABEL_143:
                __break(1u);
LABEL_144:
                __break(1u);
LABEL_145:
                __break(1u);
LABEL_146:
                __break(1u);
LABEL_147:
                __break(1u);
LABEL_148:
                __break(1u);
                return result;
              }
              goto LABEL_99;
            }
            unint64_t v94 = 2;
LABEL_105:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v77 = v80 & 0xFFFFFFFFFFFFF0FFLL | (v94 << 8);
            uint64_t v73 = v120;
            goto LABEL_68;
          }
        }
LABEL_99:
        if (v95) {
          goto LABEL_139;
        }
        goto LABEL_105;
      }
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
      goto LABEL_143;
    }
    uint64_t v76 = v124;
    if (v117 == 2)
    {
      if (v72)
      {
        outlined retain of AttributedString.Runs((uint64_t)&v188);
        swift_unknownObjectRetain();
        unint64_t v77 = v118;
        Swift::UInt result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v119, v118, v24, v72, v73, v122);
        uint64_t v78 = result;
        goto LABEL_108;
      }
      Swift::UInt result = swift_retain();
      uint64_t v78 = 0;
    }
    else
    {
      outlined retain of AttributedString.Runs((uint64_t)&v188);
      swift_unknownObjectRetain();
      Swift::UInt result = BigString.Index.utf8Offset.getter();
      uint64_t v78 = result;
    }
    unint64_t v77 = v118;
LABEL_108:
    *(void *)&long long v134 = v75;
    *((void *)&v134 + 1) = v77;
    *(void *)&long long v135 = v24;
    BOOL v86 = __OFADD__(v76, 1);
    uint64_t v100 = v76 + 1;
    if (v86) {
      goto LABEL_127;
    }
    if (v75 != v74) {
      goto LABEL_128;
    }
    if (v24)
    {
      unint64_t v101 = *(void *)(v24 + 24 * ((v77 >> ((4 * *(unsigned char *)(v24 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v101 = specialized Rope._Node.subscript.getter(v77, v72);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    Swift::UInt result = swift_bridgeObjectRelease();
    BOOL v86 = __OFADD__(v78, v101);
    unint64_t v102 = v78 + v101;
    if (v86) {
      goto LABEL_129;
    }
    uint64_t v125 = v100;
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v134, v72, v73, v122, v74);
    swift_unknownObjectRelease_n();
    unint64_t v118 = *((void *)&v134 + 1);
    uint64_t v119 = v134;
    uint64_t v24 = v135;
    if (v117 == 2)
    {
      long long v29 = *v116;
      long long v30 = v116[2];
      v163[1] = v116[1];
      v163[2] = v30;
      v163[0] = v29;
      long long v31 = *v116;
      long long v32 = v116[1];
      v180[2] = v30;
      v180[1] = v32;
      v180[0] = v31;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v180, (uint64_t)v181);
      outlined retain of Locale((uint64_t)v181);
      uint64_t v33 = &v149;
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v163);
      long long v34 = *v116;
      long long v35 = v116[2];
      v162[1] = v116[1];
      v162[2] = v35;
      v162[0] = v34;
      long long v36 = *v116;
      long long v37 = v116[1];
      v182[2] = v35;
      v182[1] = v37;
      v182[0] = v36;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v182, (uint64_t)&v183);
      outlined retain of Locale((uint64_t)&v183);
      BigString.startIndex.getter();
      outlined release of Locale((uint64_t)v162);
    }
    else
    {
      long long v103 = *v116;
      long long v104 = v116[2];
      v161[1] = v116[1];
      v161[2] = v104;
      v161[0] = v103;
      long long v105 = *v116;
      long long v106 = v116[1];
      v184[2] = v104;
      v184[1] = v106;
      v184[0] = v105;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v184, (uint64_t)&v185);
      outlined retain of Locale((uint64_t)&v185);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v161);
      Swift::UInt result = BigString.Index.utf8Offset.getter();
      if (__OFSUB__(v102, result)) {
        goto LABEL_136;
      }
      uint64_t v33 = &v148;
    }
    uint64_t v25 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v26 = v38;
    uint64_t v27 = v39;
    uint64_t v28 = v40;
    outlined release of Locale((uint64_t)v33);
    outlined release of AttributedString.Runs((uint64_t)&v188);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(v109, v115);
    specialized Set.hash(into:)(v109, v114);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v41 = v107[2];
    v159[0] = v107[1];
    v159[1] = v41;
    long long v160 = v107[3];
    v186[0] = v159[0];
    v186[1] = v41;
    v186[2] = v160;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v186, (uint64_t)v187);
    outlined retain of Locale((uint64_t)v187);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v159);
    BigSubstring.hash(into:)();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Swift::UInt result = outlined release of Locale((uint64_t)v150);
    uint64_t v21 = v125;
    uint64_t v22 = v108;
  }
  while (v125 != v108);
  outlined release of AttributedString.Runs((uint64_t)&v188);
LABEL_118:
  outlined release of AttributedString.Runs((uint64_t)&v188);
  return swift_release();
}

uint64_t static AttributedString.Index.< infix(_:_:)(void *a1, void *a2)
{
  return static AttributedString.Index.< infix(_:_:)(a1, a2, MEMORY[0x1E4F59DD8]);
}

uint64_t AttributedString.init(_:attributes:)@<X0>(uint64_t *a1@<X4>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  BigString.init(_:)();
  uint64_t result = AttributedString.init(_:attributes:)(v7, v3, v4, &v6);
  *a2 = v6;
  return result;
}

uint64_t AttributedString.init<A>(_:attributes:)@<X0>(long long *a1@<X0>, uint64_t *a2@<X1>, ValueMetadata *a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  static AttributedString._bstring<A>(from:)(a1, a3, v11);
  AttributedString.init(_:attributes:)(v11, v7, v8, &v10);
  uint64_t result = (*((uint64_t (**)(long long *, ValueMetadata *))a3[-1].Description + 1))(a1, a3);
  *a4 = v10;
  return result;
}

uint64_t static AttributedString._bstring<A>(from:)@<X0>(long long *a1@<X0>, ValueMetadata *a2@<X1>, _OWORD *a3@<X8>)
{
  Description = (void (**)(char *, void, ValueMetadata *))a2[-1].Description;
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v9 == MEMORY[0x1E4FBB1A0])
  {
    swift_bridgeObjectRetain();
    uint64_t result = BigString.init(_:)();
    goto LABEL_8;
  }
  if (a2 == (ValueMetadata *)MEMORY[0x1E4FBB7A8])
  {
    swift_bridgeObjectRetain();
    uint64_t result = BigString.init(_:)();
    goto LABEL_8;
  }
  if (a2 == &type metadata for AttributedString.CharacterView)
  {
    uint64_t v14 = *(_OWORD **)a1;
    long long v15 = *(long long *)((char *)a1 + 24);
    v53[7] = *(long long *)((char *)a1 + 8);
    v53[8] = v15;
    long long v16 = *(long long *)((char *)a1 + 56);
    v53[9] = *(long long *)((char *)a1 + 40);
    v53[10] = v16;
    long long v17 = v14[1];
    long long v18 = v14[3];
    v53[1] = v14[2];
    void v53[2] = v18;
    v53[0] = v17;
    swift_retain();
    outlined retain of Locale((uint64_t)v53);
    BigSubstring.init(_unchecked:in:)();
    BigString.init(_:)();
    long long v42 = v66;
    long long v43 = v65;
    long long v41 = v67;
    uint64_t result = swift_release();
LABEL_11:
    long long v13 = v41;
    long long v12 = v42;
    long long v11 = v43;
    goto LABEL_12;
  }
  if ((ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<AttributedString.CharacterView>) == a2)
  {
    long long v19 = a1[3];
    long long v46 = a1[2];
    long long v47 = v19;
    long long v20 = a1[8];
    long long v21 = a1[6];
    long long v51 = a1[7];
    long long v52 = v20;
    long long v22 = a1[5];
    long long v48 = a1[4];
    long long v49 = v22;
    long long v50 = v21;
    long long v23 = a1[1];
    long long v44 = *a1;
    long long v45 = v23;
    long long v65 = v44;
    long long v66 = v23;
    long long v67 = v46;
    long long v68 = v47;
    uint64_t v24 = (_OWORD *)v48;
    long long v25 = *(_OWORD *)(v48 + 16);
    long long v26 = *(_OWORD *)(v48 + 48);
    v69[1] = *(_OWORD *)(v48 + 32);
    v69[2] = v26;
    v69[0] = v25;
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v44);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v44);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v44);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v44);
    outlined retain of Locale((uint64_t)v69);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v69);
    *(void *)&long long v43 = BigSubstring.startIndex.getter();
    uint64_t v28 = v27;
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    uint64_t v33 = BigSubstring.endIndex.getter();
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    outlined release of Locale((uint64_t)v53);
    outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v44);
    outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v44);
    uint64_t v57 = v43;
    uint64_t v58 = v28;
    uint64_t v59 = v30;
    uint64_t v60 = v32;
    uint64_t v61 = v33;
    uint64_t v62 = v35;
    uint64_t v63 = v37;
    uint64_t v64 = v39;
    long long v40 = v24[2];
    long long v54 = v24[1];
    long long v55 = v40;
    long long v56 = v24[3];
    v70[1] = v40;
    v70[2] = v56;
    v70[0] = v54;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v70, (uint64_t)v71);
    outlined retain of Locale((uint64_t)v71);
    BigSubstring.init(_unchecked:in:)();
    outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v44);
    BigString.init(_:)();
    long long v42 = v53[15];
    long long v43 = v53[14];
    long long v41 = v53[16];
    uint64_t result = outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v44);
    goto LABEL_11;
  }
  ((void (**)(char *, long long *, ValueMetadata *))Description)[2](v8, a1, a2);
  uint64_t result = BigString.init<A>(_:)();
LABEL_8:
  long long v11 = v44;
  long long v12 = v45;
  long long v13 = v46;
LABEL_12:
  *a3 = v11;
  a3[1] = v12;
  a3[2] = v13;
  return result;
}

uint64_t AttributedString.init<A, B>(_:including:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, ValueMetadata *a3@<X3>, uint64_t a4@<X5>, void *a5@<X8>)
{
  Description = (void (**)(char *, uint64_t, uint64_t, double))a3[-1].Description;
  double v11 = MEMORY[0x1F4188790](a1);
  long long v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Description[2](v13, a1, v14, v11);
  AttributedString.init<A, B>(_:including:)((uint64_t)v13, a2, a3, a4, &v17);
  swift_release();
  uint64_t result = ((uint64_t (*)(uint64_t, ValueMetadata *))Description[1])(a1, a3);
  *a5 = v17;
  return result;
}

{
  long long v10;
  _OWORD *v11;
  void *v12;
  long long v13;
  long long v14;
  long long v15;
  int64_t v16;
  uint64_t result;
  long long v18;
  unsigned char v19[48];
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  unsigned char v30[48];

  AttributedStringProtocol.__guts.getter(a3, a4);
  (*(void (**)(long long *__return_ptr, ValueMetadata *, uint64_t))(a4 + 32))(&v27, a3, a4);
  long long v18 = v27;
  uint64_t v10 = v28;
  (*(void (**)(long long *__return_ptr, ValueMetadata *, uint64_t))(a4 + 40))(&v20, a3, a4);
  long long v23 = v18;
  uint64_t v24 = v10;
  long long v25 = v20;
  long long v26 = v21;
  double v11 = AttributedString.Guts.copy(in:)();
  swift_retain_n();
  uint64_t v12 = static AttributeScope.scopeDescription.getter(a2);
  swift_bridgeObjectRelease();
  long long v13 = v11[1];
  uint64_t v14 = v11[3];
  long long v21 = v11[2];
  long long v22 = v14;
  long long v20 = v13;
  long long v15 = v11[1];
  uint64_t v28 = v11[2];
  uint64_t v29 = v14;
  uint64_t v27 = v15;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v27, (uint64_t)v30);
  outlined retain of Locale((uint64_t)v30);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)&v20);
  uint64_t v16 = BigString.UTF8View.count.getter();
  outlined release of Locale((uint64_t)v19);
  uint64_t result = swift_release();
  if (v16 < 0)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)(v11, 0, v16, (uint64_t)v12);
    swift_release();
    swift_bridgeObjectRelease();
    (*((void (**)(uint64_t, ValueMetadata *))a3[-1].Description + 1))(a1, a3);
    uint64_t result = swift_bridgeObjectRelease();
    *a5 = v11;
  }
  return result;
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance AttributedString@<X0>(void *a1@<X8>)
{
  BigString.init(_:)();
  uint64_t result = AttributedString.init(_:attributes:)(v4, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], &v3);
  *a1 = v3;
  return result;
}

uint64_t closure #2 in AttributedString.replaceAttributes(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v11 = a4 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(a4 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(a4 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v19 = v18 | (v17 << 6);
      goto LABEL_5;
    }
    int64_t v23 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (v23 >= v15) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v11 + 8 * v23);
    ++v17;
    if (!v24)
    {
      int64_t v17 = v23 + 1;
      if (v23 + 1 >= v15) {
        goto LABEL_23;
      }
      unint64_t v24 = *(void *)(v11 + 8 * v17);
      if (!v24)
      {
        int64_t v17 = v23 + 2;
        if (v23 + 2 >= v15) {
          goto LABEL_23;
        }
        unint64_t v24 = *(void *)(v11 + 8 * v17);
        if (!v24)
        {
          int64_t v17 = v23 + 3;
          if (v23 + 3 >= v15) {
            goto LABEL_23;
          }
          unint64_t v24 = *(void *)(v11 + 8 * v17);
          if (!v24) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v14 = (v24 - 1) & v24;
    unint64_t v19 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_5:
    long long v20 = (unint64_t *)(*(void *)(a4 + 48) + 16 * v19);
    unint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    uint64_t v29 = 0;
    memset(v28, 0, sizeof(v28));
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v28, v21, v22);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v25 = v23 + 4;
  if (v25 < v15)
  {
    unint64_t v24 = *(void *)(v11 + 8 * v25);
    if (!v24)
    {
      while (1)
      {
        int64_t v17 = v25 + 1;
        if (__OFADD__(v25, 1)) {
          goto LABEL_27;
        }
        if (v17 >= v15) {
          goto LABEL_23;
        }
        unint64_t v24 = *(void *)(v11 + 8 * v17);
        ++v25;
        if (v24) {
          goto LABEL_22;
        }
      }
    }
    int64_t v17 = v25;
    goto LABEL_22;
  }
LABEL_23:
  swift_release();
  LOBYTE(v28[0]) = 0;
  uint64_t result = specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(a6, (char *)v28);
  if (a8) {
    return Array<A>._extend(with:)(a2, a3);
  }
  return result;
}

uint64_t static AttributedString.Index.== infix(_:_:)(void *a1, void *a2)
{
  return static AttributedString.Index.< infix(_:_:)(a1, a2, MEMORY[0x1E4F59DE0]);
}

uint64_t static AttributedString.Index.< infix(_:_:)(void *a1, void *a2, uint64_t (*a3)(void, void, void, void, void, void, void, void))
{
  return a3(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance AttributedString.Index(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.< infix(_:_:) in conformance AttributedString.Index(a1, a2, a3, a4, MEMORY[0x1E4F59DD8]);
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance AttributedString.Index()
{
  return (static BigString.Index.< infix(_:_:)() & 1) == 0;
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance AttributedString.Index()
{
  return static BigString.Index.< infix(_:_:)();
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance AttributedString.Index(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void, void, void))
{
  return a5(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t AttributedString.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(_OWORD **)v3;
  long long v6 = *(_OWORD *)(*(void *)v3 + 32);
  v41[0] = *(_OWORD *)(*(void *)v3 + 16);
  v41[1] = v6;
  v41[2] = v5[3];
  swift_retain();
  outlined retain of Locale((uint64_t)v41);
  uint64_t v7 = BigString.startIndex.getter();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  outlined release of Locale((uint64_t)v41);
  long long v14 = v5[1];
  long long v15 = v5[3];
  v40[1] = v5[2];
  v40[2] = v15;
  v40[0] = v14;
  long long v16 = v5[1];
  v42[1] = v5[2];
  v42[2] = v15;
  v42[0] = v16;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v42, (uint64_t)v43);
  outlined retain of Locale((uint64_t)v43);
  uint64_t v17 = BigString.endIndex.getter();
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  outlined release of Locale((uint64_t)v40);
  swift_release();
  uint64_t v32 = v7;
  uint64_t v33 = v9;
  uint64_t v34 = v11;
  uint64_t v35 = v13;
  uint64_t v36 = v17;
  uint64_t v37 = v19;
  uint64_t v38 = v21;
  uint64_t v39 = v23;
  AttributedString.Guts.getUniformValue<A>(in:key:)(a1, a2, (uint64_t)v30);
  if (v31)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v30, (uint64_t)v29);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v30);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(a3, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    outlined destroy of Any?((uint64_t)v30, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v26 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(a3, 1, 1, v26);
  }
}

void (*AttributedString.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, uint64_t a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  uint64_t v9[2] = a4;
  v9[3] = v4;
  *uint64_t v9 = a2;
  v9[1] = a3;
  swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  v9[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  _OWORD v9[5] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[6] = malloc(v12);
  uint64_t v13 = malloc(v12);
  v9[7] = v13;
  AttributedString.subscript.getter(a3, a4, (uint64_t)v13);
  return AttributedString.subscript.modify;
}

void AttributedString.subscript.modify(uint64_t **a1, uint64_t a2)
{
  long long v2 = *a1;
  uint64_t v3 = (void *)(*a1)[6];
  uint64_t v4 = (void *)(*a1)[7];
  if (a2)
  {
    uint64_t v5 = v2[4];
    uint64_t v6 = v2[5];
    uint64_t v7 = v2[2];
    uint64_t v8 = v2[1];
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[6], v4, v5);
    AttributedString.subscript.setter((uint64_t)v3, v9, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    AttributedString.subscript.setter((*a1)[7], a2, v2[1], v2[2]);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t AttributedString.subscript.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return AttributedString.subscript.getter(*(void *)(*MEMORY[0x1E4FBC5F0] + *a1 + 8), a2, a3);
}

uint64_t key path getter for AttributedString.subscript<A>(dynamicMember:) : <A>AttributedStringA@<X0>(void **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(uint64_t *)((char *)a1 + a2 - 8);
  uint64_t v5 = *a1;
  swift_retain();
  AttributedString.subscript.getter(v5, v4, a3);

  return swift_release();
}

void (*AttributedString.subscript.modify(void *a1, void *a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x40uLL);
  *a1 = v7;
  void *v7 = a3;
  v7[1] = v3;
  uint64_t v8 = *(void *)(*MEMORY[0x1E4FBC5F0] + *a2 + 8);
  void v7[2] = v8;
  swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  _OWORD v7[3] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v7[4] = v10;
  size_t v11 = *(void *)(v10 + 64);
  _OWORD v7[5] = malloc(v11);
  v7[6] = malloc(v11);
  size_t v12 = malloc(v11);
  v7[7] = v12;
  AttributedString.subscript.getter(v8, a3, (uint64_t)v12);
  return AttributedString.subscript.modify;
}

void AttributedString.subscript.modify(uint64_t **a1, char a2)
{
  long long v2 = *a1;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))((*a1)[4] + 16);
  v3((*a1)[6], v2[7], v2[3]);
  uint64_t v5 = (void *)v2[6];
  long long v15 = (void *)v2[7];
  uint64_t v7 = v2[4];
  uint64_t v6 = (void *)v2[5];
  uint64_t v9 = v2[2];
  uint64_t v8 = v2[3];
  uint64_t v10 = *v2;
  if (a2)
  {
    v3(v2[5], (uint64_t)v5, v2[3]);
    AttributedString.subscript.setter((uint64_t)v6, v11, v9, v10);
    size_t v12 = *(void (**)(void *, uint64_t))(v7 + 8);
    v12(v5, v8);
    uint64_t v13 = v15;
    v12(v15, v8);
  }
  else
  {
    AttributedString.subscript.setter((uint64_t)v5, v4, v2[2], *v2);
    uint64_t v13 = v15;
    (*(void (**)(void *, uint64_t))(v7 + 8))(v15, v8);
  }
  free(v13);
  free(v5);
  free(v6);

  free(v2);
}

uint64_t AttributedString.subscript.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(_OWORD **)v1;
  long long v4 = *(_OWORD *)(*(void *)v1 + 16);
  long long v5 = *(_OWORD *)(*(void *)v1 + 48);
  v12[1] = *(_OWORD *)(*(void *)v1 + 32);
  void v12[2] = v5;
  v12[0] = v4;
  swift_retain();
  outlined retain of Locale((uint64_t)v12);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v12);
  long long v6 = v3[1];
  long long v7 = v3[3];
  v11[1] = v3[2];
  v11[2] = v7;
  v11[0] = v6;
  long long v8 = v3[1];
  v13[1] = v3[2];
  void v13[2] = v7;
  v13[0] = v8;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v13, (uint64_t)v14);
  outlined retain of Locale((uint64_t)v14);
  BigString.endIndex.getter();
  outlined release of Locale((uint64_t)v11);
  swift_release();
  uint64_t result = AttributedString.Guts.getUniformValues(in:)();
  *a1 = result;
  a1[1] = v10;
  a1[2] = 0;
  a1[3] = 0;
  return result;
}

double key path getter for AttributedString.subscript<A>(dynamicMember:) : <A>AttributedStringA@<D0>(_OWORD *a1@<X8>)
{
  swift_retain();
  AttributedString.subscript.getter((uint64_t *)v4);
  swift_release();
  double result = *(double *)v4;
  long long v3 = v4[1];
  *a1 = v4[0];
  a1[1] = v3;
  return result;
}

uint64_t key path setter for AttributedString.subscript<A>(dynamicMember:) : <A>AttributedStringA(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + a3 - 16);
  uint64_t v5 = *(void *)(a4 + a3 - 8);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v9 = a1[2];
  uint64_t v8 = a1[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = AttributedString.subscript.modify(v14, v10, v4, v5);
  *size_t v12 = v6;
  v12[1] = v7;
  void v12[2] = v9;
  _OWORD v12[3] = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(void *, void))v11)(v14, 0);
}

void (*AttributedString.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1)
{
  uint64_t v5 = v4;
  uint64_t v9 = malloc(0x68uLL);
  *a1 = v9;
  v9[11] = a4;
  v9[12] = v5;
  v9[10] = a3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v10 = *(void **)v5;
    long long v12 = *(_OWORD *)(*(void *)v5 + 32);
    long long v11 = *(_OWORD *)(*(void *)v5 + 48);
    *(_OWORD *)uint64_t v9 = *(_OWORD *)(*(void *)v5 + 16);
    *((_OWORD *)v9 + 1) = v12;
    *((_OWORD *)v9 + 2) = v11;
    uint64_t v13 = v10[8];
    uint64_t v14 = v10[9];
    uint64_t v15 = v10[10];
    uint64_t v16 = v10[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v9);
    swift_unknownObjectRetain();
    *(void *)uint64_t v5 = AttributedString.Guts.init(string:runs:)(v9, v13, v14, v15, v16);
    swift_release();
  }
  v9[6] = MEMORY[0x1E4FBC868];
  uint64_t v17 = v9 + 6;
  uint64_t v18 = MEMORY[0x1E4FBC870];
  _OWORD v17[2] = 0;
  _OWORD v17[3] = 0;
  v17[1] = v18;
  return AttributedString.subscript.modify;
}

void AttributedString.subscript.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  $defer #1 <A>() in AttributedString.subscript.modify((uint64_t *)(*(void *)a1 + 48), *(uint64_t **)(*(void *)a1 + 96));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t $defer #1 <A>() in AttributedString.subscript.modify(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[3];
  if (v2)
  {
    unint64_t v27 = a1[2];
    long long v3 = (_OWORD *)*a2;
    long long v4 = *(_OWORD *)(*a2 + 16);
    long long v5 = *(_OWORD *)(*a2 + 48);
    long long v40 = *(_OWORD *)(*a2 + 32);
    long long v41 = v5;
    long long v39 = v4;
    swift_bridgeObjectRetain();
    swift_retain();
    outlined retain of Locale((uint64_t)&v39);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)&v39);
    long long v6 = v3[1];
    long long v7 = v3[3];
    long long v37 = v3[2];
    long long v38 = v7;
    long long v36 = v6;
    long long v8 = v3[1];
    long long v43 = v3[2];
    long long v44 = v7;
    long long v42 = v8;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v42, (uint64_t)v45);
    outlined retain of Locale((uint64_t)v45);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)&v36);
    long long v9 = v3[2];
    long long v33 = v3[1];
    long long v34 = v9;
    long long v35 = v3[3];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v28);
    long long v10 = v3[2];
    long long v30 = v3[1];
    long long v31 = v10;
    long long v32 = v3[3];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v29);
    uint64_t v11 = BigString.Index.utf8Offset.getter();
    uint64_t v12 = BigString.Index.utf8Offset.getter();
    AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)(v27, v2, v11, v12, 1);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    uint64_t v14 = *a2;
    uint64_t v15 = *a1;
    long long v16 = *(_OWORD *)(*a2 + 16);
    long long v17 = *(_OWORD *)(*a2 + 48);
    long long v40 = *(_OWORD *)(*a2 + 32);
    long long v41 = v17;
    long long v39 = v16;
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined retain of Locale((uint64_t)&v39);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)&v39);
    long long v18 = *(_OWORD *)(v14 + 16);
    long long v19 = *(_OWORD *)(v14 + 48);
    long long v37 = *(_OWORD *)(v14 + 32);
    long long v38 = v19;
    long long v36 = v18;
    long long v20 = *(_OWORD *)(v14 + 16);
    long long v43 = *(_OWORD *)(v14 + 32);
    long long v44 = v19;
    long long v42 = v20;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v42, (uint64_t)v45);
    outlined retain of Locale((uint64_t)v45);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)&v36);
    swift_release();
    long long v21 = *(_OWORD *)(v14 + 32);
    long long v33 = *(_OWORD *)(v14 + 16);
    long long v34 = v21;
    long long v35 = *(_OWORD *)(v14 + 48);
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v28);
    long long v22 = *(_OWORD *)(v14 + 32);
    long long v30 = *(_OWORD *)(v14 + 16);
    long long v31 = v22;
    long long v32 = *(_OWORD *)(v14 + 48);
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v29);
    uint64_t v23 = BigString.Index.utf8Offset.getter();
    uint64_t v24 = BigString.Index.utf8Offset.getter();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)((void *)v14, v23, v24, v15, 0);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v15))
    {
      uint64_t v25 = swift_bridgeObjectRetain();
      uint64_t v26 = specialized Sequence.compactMap<A>(_:)(v25);
      swift_bridgeObjectRelease();
      AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v23, v24, 0, v26);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
    }
    return swift_bridgeObjectRelease();
  }
}

uint64_t AttributedString.subscript.setter(uint64_t *a1)
{
  specialized AttributedString.subscript.setter(a1);

  return swift_release();
}

Swift::Int AttributedString.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  specialized AttributedStringProtocol.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for AttributedStringProtocol.endIndex.getter in conformance AttributedString@<X0>(uint64_t *a1@<X8>)
{
  return protocol witness for AttributedStringProtocol.startIndex.getter in conformance AttributedString(MEMORY[0x1E4F59DE8], a1);
}

uint64_t (*protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  long long v8 = malloc(0x28uLL);
  *a1 = v8;
  _OWORD v8[4] = AttributedString.subscript.modify(v8, a2, a3, a4);
  return protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString;
}

{
  void *v7;
  uint64_t v8;

  long long v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[4] = AttributedString.subscript.modify(v7, v8, a3, a4);
  return protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString;
}

uint64_t protocol witness for AttributedStringProtocol.subscript.getter in conformance AttributedString@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return AttributedString.subscript.getter(a1, a2, a3);
}

uint64_t protocol witness for AttributedStringProtocol.subscript.setter in conformance AttributedString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized AttributedString.subscript.setter(a1, a3, a4);
  swift_release();
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(a1, v5);
}

uint64_t (*protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString(void *a1, void *a2, uint64_t a3, uint64_t a4))()
{
  long long v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[4] = AttributedString.subscript.modify(v7, a2, a4);
  return protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString;
}

uint64_t protocol witness for AttributedStringProtocol.subscript.setter in conformance AttributedString(uint64_t *a1)
{
  specialized AttributedString.subscript.setter(a1);

  return swift_release();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  specialized AttributedStringProtocol.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

Swift::UInt protocol witness for Hashable.hash(into:) in conformance AttributedString(uint64_t a1)
{
  return specialized AttributedStringProtocol.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  specialized AttributedStringProtocol.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString()
{
  return specialized AttributedStringProtocol.description.getter(*v0);
}

uint64_t specialized AttributedString.replaceSubrange<A, B>(_:with:)(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    long long v4 = *(void **)v2;
    long long v5 = *(_OWORD *)(*(void *)v2 + 16);
    long long v6 = *(_OWORD *)(*(void *)v2 + 48);
    v30[1] = *(_OWORD *)(*(void *)v2 + 32);
    _OWORD v30[2] = v6;
    v30[0] = v5;
    uint64_t v7 = v4[8];
    uint64_t v8 = v4[9];
    uint64_t v9 = v4[10];
    uint64_t v10 = v4[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v30);
    swift_unknownObjectRetain();
    *(void *)uint64_t v3 = AttributedString.Guts.init(string:runs:)(v30, v7, v8, v9, v10);
    swift_release();
  }
  uint64_t v11 = *(_OWORD **)v3;
  long long v12 = *(_OWORD *)(*(void *)v3 + 16);
  long long v13 = *(_OWORD *)(*(void *)v3 + 48);
  v29[1] = *(_OWORD *)(*(void *)v3 + 32);
  v29[2] = v13;
  v29[0] = v12;
  swift_retain();
  outlined retain of Locale((uint64_t)v29);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v29);
  long long v14 = v11[1];
  long long v15 = v11[3];
  v28[1] = v11[2];
  v28[2] = v15;
  v28[0] = v14;
  long long v16 = v11[1];
  v31[1] = v11[2];
  v31[2] = v15;
  v31[0] = v16;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v31, (uint64_t)v32);
  outlined retain of Locale((uint64_t)v32);
  BigString.endIndex.getter();
  uint64_t v18 = v17;
  outlined release of Locale((uint64_t)v28);
  uint64_t v22 = v18;
  uint64_t v23 = 0;
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  swift_release();
  v21[0] = v24;
  v21[1] = v25;
  uint64_t v21[2] = v26;
  _OWORD v21[3] = v27;
  return specialized AttributedString.Guts.replaceSubrange<A>(_:with:)((uint64_t)v21, a2);
}

uint64_t specialized AttributedString.replaceSubrange<A, B>(_:with:)(_OWORD *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    long long v6 = *(void **)v2;
    long long v7 = *(_OWORD *)(*(void *)v2 + 16);
    long long v8 = *(_OWORD *)(*(void *)v2 + 48);
    v25[1] = *(_OWORD *)(*(void *)v2 + 32);
    _OWORD v25[2] = v8;
    v25[0] = v7;
    uint64_t v9 = v6[8];
    uint64_t v10 = v6[9];
    uint64_t v11 = v6[10];
    uint64_t v12 = v6[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v25);
    swift_unknownObjectRetain();
    *(void *)uint64_t v3 = AttributedString.Guts.init(string:runs:)(v25, v9, v10, v11, v12);
    swift_release();
  }
  long long v13 = *(_OWORD **)v3;
  long long v14 = *(_OWORD *)(*(void *)v3 + 16);
  long long v15 = *(_OWORD *)(*(void *)v3 + 48);
  v24[1] = *(_OWORD *)(*(void *)v3 + 32);
  v24[2] = v15;
  v24[0] = v14;
  swift_retain();
  outlined retain of Locale((uint64_t)v24);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v24);
  long long v16 = v13[1];
  long long v17 = v13[3];
  v23[1] = v13[2];
  double v23[2] = v17;
  v23[0] = v16;
  long long v18 = v13[1];
  v26[1] = v13[2];
  v26[2] = v17;
  v26[0] = v18;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v26, (uint64_t)v27);
  outlined retain of Locale((uint64_t)v27);
  BigString.endIndex.getter();
  outlined release of Locale((uint64_t)v23);
  swift_release();
  long long v19 = a1[1];
  v22[0] = *a1;
  v22[1] = v19;
  long long v20 = a1[3];
  _OWORD v22[2] = a1[2];
  long long v22[3] = v20;
  return specialized AttributedString.Guts.replaceSubrange<A>(_:with:)((uint64_t)v22, a2);
}

uint64_t AttributedString.replaceSubrange<A, B>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, ValueMetadata *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    long long v8 = *(void **)v6;
    long long v9 = *(_OWORD *)(*(void *)v6 + 16);
    long long v10 = *(_OWORD *)(*(void *)v6 + 48);
    v36[1] = *(_OWORD *)(*(void *)v6 + 32);
    _OWORD v36[2] = v10;
    v36[0] = v9;
    uint64_t v11 = v8[8];
    uint64_t v12 = v8[9];
    uint64_t v14 = v8[10];
    uint64_t v13 = v8[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v36);
    swift_unknownObjectRetain();
    *(void *)uint64_t v7 = AttributedString.Guts.init(string:runs:)(v36, v11, v12, v14, v13);
    swift_release();
  }
  long long v15 = *(_OWORD **)v7;
  long long v16 = *(_OWORD *)(*(void *)v7 + 16);
  long long v17 = *(_OWORD *)(*(void *)v7 + 48);
  v35[1] = *(_OWORD *)(*(void *)v7 + 32);
  v35[2] = v17;
  v35[0] = v16;
  swift_retain();
  outlined retain of Locale((uint64_t)v35);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v35);
  long long v18 = v15[1];
  long long v19 = v15[3];
  v34[1] = v15[2];
  _OWORD v34[2] = v19;
  v34[0] = v18;
  long long v20 = v15[1];
  v37[1] = v15[2];
  v37[2] = v19;
  v37[0] = v20;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v37, (uint64_t)v38);
  outlined retain of Locale((uint64_t)v38);
  BigString.endIndex.getter();
  uint64_t v22 = v21;
  outlined release of Locale((uint64_t)v34);
  uint64_t v28 = v22;
  uint64_t v29 = 0;
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  swift_release();
  v27[0] = v30;
  v27[1] = v31;
  v27[2] = v32;
  void v27[3] = v33;
  return AttributedString.Guts.replaceSubrange<A>(_:with:)((uint64_t)v27, a2, a4, a6);
}

uint64_t AttributedString.insert<A>(_:at:)(uint64_t a1, uint64_t *a2, ValueMetadata *a3, uint64_t a4)
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
  }
  else
  {
    *(void *)&long long v12 = v7;
    *((void *)&v12 + 1) = v8;
    uint64_t v13 = v9;
    uint64_t v14 = v10;
    uint64_t v15 = v7;
    uint64_t v16 = v8;
    uint64_t v17 = v9;
    uint64_t v18 = v10;
    return specialized AttributedString.replaceSubrange<A, B>(_:with:)(&v12, a1, a3, a4);
  }
  return result;
}

uint64_t AttributedString.removeSubrange<A>(_:)(uint64_t a1)
{
  BigString.init()();
  uint64_t v6 = 0;
  MEMORY[0x185309530](&v6, 8);
  uint64_t v2 = v6;
  type metadata accessor for AttributedString.Guts();
  uint64_t inited = swift_initStackObject();
  uint64_t result = BigString.isEmpty.getter();
  if (result)
  {
    long long v5 = v8;
    *(_OWORD *)(inited + 16) = v7;
    *(_OWORD *)(inited + 32) = v5;
    *(_OWORD *)(inited + 48) = v9;
    *(void *)(inited + 64) = 0;
    *(void *)(inited + 72) = 0;
    *(void *)(inited + 80) = 0;
    *(void *)(inited + 88) = v2;
    specialized AttributedString.replaceSubrange<A, B>(_:with:)(a1, (_OWORD *)inited);
    swift_setDeallocating();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static AttributedString.+ infix<A>(_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, ValueMetadata *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  long long v5 = (_OWORD *)*a1;
  *a5 = *a1;
  long long v6 = v5[1];
  long long v7 = v5[3];
  v36[1] = v5[2];
  _OWORD v36[2] = v7;
  v36[0] = v6;
  swift_retain();
  outlined retain of Locale((uint64_t)v36);
  uint64_t v8 = BigString.endIndex.getter();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  outlined release of Locale((uint64_t)v36);
  long long v15 = v5[1];
  long long v16 = v5[3];
  v35[1] = v5[2];
  v35[2] = v16;
  v35[0] = v15;
  swift_retain();
  outlined retain of Locale((uint64_t)v35);
  uint64_t v17 = BigString.endIndex.getter();
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  outlined release of Locale((uint64_t)v35);
  swift_release();
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
  }
  else
  {
    *(void *)&long long v28 = v8;
    *((void *)&v28 + 1) = v10;
    uint64_t v29 = v12;
    uint64_t v30 = v14;
    uint64_t v31 = v17;
    uint64_t v32 = v19;
    uint64_t v33 = v21;
    uint64_t v34 = v23;
    return specialized AttributedString.replaceSubrange<A, B>(_:with:)(&v28, a2, a3, a4);
  }
  return result;
}

uint64_t static AttributedString.+= infix<A>(_:_:)(uint64_t a1, uint64_t a2, ValueMetadata *a3, uint64_t a4)
{
  long long v4 = *(_OWORD **)a1;
  long long v5 = *(_OWORD *)(*(void *)a1 + 16);
  long long v6 = *(_OWORD *)(*(void *)a1 + 48);
  v34[1] = *(_OWORD *)(*(void *)a1 + 32);
  _OWORD v34[2] = v6;
  v34[0] = v5;
  swift_retain();
  outlined retain of Locale((uint64_t)v34);
  uint64_t v7 = BigString.endIndex.getter();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  outlined release of Locale((uint64_t)v34);
  swift_release();
  long long v14 = v4[2];
  v33[0] = v4[1];
  v33[1] = v14;
  void v33[2] = v4[3];
  swift_retain();
  outlined retain of Locale((uint64_t)v33);
  uint64_t v15 = BigString.endIndex.getter();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  outlined release of Locale((uint64_t)v33);
  swift_release();
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
  }
  else
  {
    *(void *)&long long v26 = v7;
    *((void *)&v26 + 1) = v9;
    uint64_t v27 = v11;
    uint64_t v28 = v13;
    uint64_t v29 = v15;
    uint64_t v30 = v17;
    uint64_t v31 = v19;
    uint64_t v32 = v21;
    return specialized AttributedString.replaceSubrange<A, B>(_:with:)(&v26, a2, a3, a4);
  }
  return result;
}

uint64_t static AttributedString.+= infix(_:_:)(uint64_t a1, _OWORD **a2)
{
  uint64_t v21 = *a2;
  uint64_t v2 = *(_OWORD **)a1;
  long long v3 = *(_OWORD *)(*(void *)a1 + 16);
  long long v4 = *(_OWORD *)(*(void *)a1 + 48);
  v30[1] = *(_OWORD *)(*(void *)a1 + 32);
  _OWORD v30[2] = v4;
  v30[0] = v3;
  swift_retain();
  outlined retain of Locale((uint64_t)v30);
  uint64_t v5 = BigString.endIndex.getter();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  outlined release of Locale((uint64_t)v30);
  swift_release();
  long long v12 = v2[2];
  v29[0] = v2[1];
  v29[1] = v12;
  v29[2] = v2[3];
  swift_retain();
  outlined retain of Locale((uint64_t)v29);
  uint64_t v13 = BigString.endIndex.getter();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  outlined release of Locale((uint64_t)v29);
  swift_release();
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
  }
  else
  {
    *(void *)&long long v22 = v5;
    *((void *)&v22 + 1) = v7;
    uint64_t v23 = v9;
    uint64_t v24 = v11;
    uint64_t v25 = v13;
    uint64_t v26 = v15;
    uint64_t v27 = v17;
    uint64_t v28 = v19;
    return specialized AttributedString.replaceSubrange<A, B>(_:with:)(&v22, v21);
  }
  return result;
}

double key path getter for AttributedString.subscript<A>(_:) : <A>AttributedStringA@<D0>(uint64_t a1@<X8>)
{
  AttributedString.subscript.getter(&v4);
  uint64_t v2 = v9;
  *(void *)a1 = v4;
  *(_OWORD *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 40) = v7;
  double result = *(double *)&v8;
  *(_OWORD *)(a1 + 56) = v8;
  *(void *)(a1 + 72) = v2;
  return result;
}

uint64_t key path setter for AttributedString.subscript<A>(_:) : <A>AttributedStringA(uint64_t *a1)
{
  uint64_t v1 = a1[9];
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a1 + 1);
  long long v5 = *(_OWORD *)(a1 + 3);
  long long v6 = *(_OWORD *)(a1 + 5);
  long long v7 = *(_OWORD *)(a1 + 7);
  uint64_t v8 = v1;
  swift_retain();
  return specialized AttributedString.subscript.setter(&v3);
}

uint64_t AttributedString.subscript.setter(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  specialized AttributedString.subscript.setter(a1);
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);

  return v5(a2, a3);
}

unsigned __int16 *specialized closure #2 in Rope._Node.extract<A>(from:to:in:into:)(unsigned __int16 *result, void *a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  uint64_t v8 = a2;
  uint64_t v9 = result;
  uint64_t v10 = *result;
  uint64_t v11 = a3;
  if (!*result) {
    goto LABEL_15;
  }
  uint64_t v12 = a2[2];
  uint64_t v13 = a3 - v12;
  if (__OFSUB__(a3, v12))
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (__OFADD__(v13, 1))
  {
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  if (v13 + 1 < 1)
  {
    uint64_t v10 = 0;
    uint64_t v13 = a3;
    BOOL v14 = __OFSUB__(a4, a3);
    uint64_t v15 = a4 - a3;
    if (v14) {
      goto LABEL_33;
    }
  }
  else
  {
    if (v10 == 1)
    {
      uint64_t v11 = a3 - v12;
LABEL_15:
      if (!v11)
      {
        uint64_t v13 = 0;
        BOOL v14 = __OFSUB__(a4, a3);
        uint64_t v15 = a4 - a3;
        if (!v14) {
          goto LABEL_17;
        }
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    uint64_t v16 = a2 + 5;
    uint64_t v17 = 1;
    while (1)
    {
      uint64_t v18 = *v16;
      v16 += 3;
      uint64_t v11 = v13 - v18;
      if (__OFSUB__(v13, v18))
      {
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      if (__OFADD__(v11, 1)) {
        goto LABEL_52;
      }
      if (v11 + 1 < 1) {
        break;
      }
      ++v17;
      uint64_t v13 = v11;
      if (v10 == v17) {
        goto LABEL_15;
      }
    }
    uint64_t v10 = v17;
    BOOL v14 = __OFSUB__(a4, a3);
    uint64_t v15 = a4 - a3;
    if (v14) {
      goto LABEL_33;
    }
  }
LABEL_17:
  double result = (unsigned __int16 *)specialized Rope._UnsafeHandle.findSlot<A>(from:offsetBy:in:preferEnd:)(v10, v13, v15, 1, result, (uint64_t)a2);
  uint64_t v5 = v19;
  uint64_t v20 = &v8[3 * v10];
  if ((unsigned __int16 *)v10 != result)
  {
    if (v13 < 0) {
      goto LABEL_57;
    }
    uint64_t v28 = v8[3 * v10 + 2];
    if (v28 < v13) {
      goto LABEL_57;
    }
    long long v6 = result;
    if (v13 == v28)
    {
LABEL_36:
      uint64_t v32 = v10 + 1;
      if (!__OFADD__(v10, 1))
      {
        if ((uint64_t)v6 >= v32)
        {
          if ((unsigned __int16 *)v32 != v6)
          {
            if (v32 >= (uint64_t)v6)
            {
LABEL_61:
              __break(1u);
              return result;
            }
            uint64_t v33 = &v8[3 * v10 + 5];
            uint64_t v34 = (char *)v6 + ~v10;
            do
            {
              uint64_t v35 = *(v33 - 1);
              uint64_t v36 = *v33;
              v33 += 3;
              uint64_t v37 = swift_unknownObjectRetain();
              double result = (unsigned __int16 *)specialized Rope.Builder._insertBeforeTip(_:)(v37, v35, v36);
              --v34;
            }
            while (v34);
          }
          if ((v5 & 0x8000000000000000) == 0)
          {
            long long v38 = &v8[3 * (void)v6];
            if (v38[2] >= v5)
            {
              if (!v5) {
                return result;
              }
              uint64_t v39 = *v38;
              int v40 = *(unsigned __int8 *)(*v38 + 18);
              uint64_t v41 = *v38 + 24;
              swift_unknownObjectRetain();
              uint64_t v25 = v39 + 16;
              uint64_t v26 = (void *)v41;
              uint64_t v27 = 0;
              if (!v40) {
                goto LABEL_25;
              }
LABEL_46:
              specialized closure #2 in Rope._Node.extract<A>(from:to:in:into:)(v25, v26, v27, v5, a5);
              goto LABEL_47;
            }
          }
LABEL_60:
          __break(1u);
          goto LABEL_61;
        }
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    uint64_t v29 = *v20;
    int v30 = *(unsigned __int8 *)(*v20 + 18);
    uint64_t v31 = *v20 + 24;
    swift_unknownObjectRetain();
    double result = (unsigned __int16 *)(v29 + 16);
    a2 = (void *)v31;
    uint64_t v15 = v13;
    a4 = v28;
    uint64_t v9 = a5;
    if (v30)
    {
      specialized closure #2 in Rope._Node.extract<A>(from:to:in:into:)(result, v31, v13, v28, a5);
LABEL_35:
      double result = (unsigned __int16 *)swift_unknownObjectRelease();
      goto LABEL_36;
    }
LABEL_34:
    specialized closure #1 in Rope._Node.extract<A>(from:to:in:into:)((uint64_t)result, a2, v15, a4, v9);
    goto LABEL_35;
  }
  BOOL v21 = v19 < v13 || v8[3 * v10 + 2] < v19;
  if (v21 || v13 < 0) {
    goto LABEL_56;
  }
  if (v13 == v19) {
    return result;
  }
  uint64_t v22 = *v20;
  int v23 = *(unsigned __int8 *)(*v20 + 18);
  uint64_t v24 = *v20 + 24;
  swift_unknownObjectRetain();
  uint64_t v25 = v22 + 16;
  uint64_t v26 = (void *)v24;
  uint64_t v27 = v13;
  if (v23) {
    goto LABEL_46;
  }
LABEL_25:
  specialized closure #1 in Rope._Node.extract<A>(from:to:in:into:)(v25, v26, v27, v5, a5);
LABEL_47:

  return (unsigned __int16 *)swift_unknownObjectRelease();
}

uint64_t partial apply for closure #1 in AttributedString.replaceAttributes(_:with:)(uint64_t a1)
{
  return specialized AttributedString._AttributeStorage.matches(_:)(*(void *)(v1 + 16), a1);
}

uint64_t partial apply for closure #2 in AttributedString.replaceAttributes(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #2 in AttributedString.replaceAttributes(_:with:)(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(unsigned char *)(v3 + 48));
}

uint64_t specialized AttributedString.subscript.setter(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v5 = a1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    long long v7 = (void *)*v1;
    long long v8 = *(_OWORD *)(*v1 + 16);
    long long v9 = *(_OWORD *)(*v1 + 48);
    v16[1] = *(_OWORD *)(*v1 + 32);
    void v16[2] = v9;
    v16[0] = v8;
    uint64_t v10 = v7[8];
    uint64_t v14 = v7[9];
    uint64_t v11 = v7[10];
    uint64_t v12 = v7[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v16);
    swift_unknownObjectRetain();
    uint64_t *v2 = AttributedString.Guts.init(string:runs:)(v16, v10, v14, v11, v12);
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15[0] = v3;
  v15[1] = v4;
  void v15[2] = v6;
  long long v15[3] = v5;
  $defer #1 <A>() in AttributedString.subscript.modify(v15, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized AttributedString.subscript.setter(_OWORD *a1)
{
  long long v2 = a1[3];
  v20[2] = a1[2];
  _OWORD v20[3] = v2;
  v20[4] = a1[4];
  long long v3 = a1[1];
  v20[0] = *a1;
  v20[1] = v3;
  uint64_t v4 = *(_OWORD **)v1;
  long long v5 = *(_OWORD *)(*(void *)v1 + 16);
  long long v6 = *(_OWORD *)(*(void *)v1 + 48);
  v22[1] = *(_OWORD *)(*(void *)v1 + 32);
  _OWORD v22[2] = v6;
  v22[0] = v5;
  swift_retain();
  outlined retain of Locale((uint64_t)v22);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v22);
  long long v7 = v4[1];
  long long v8 = v4[3];
  v21[1] = v4[2];
  uint64_t v21[2] = v8;
  v21[0] = v7;
  long long v9 = v4[1];
  v23[1] = v4[2];
  double v23[2] = v8;
  v23[0] = v9;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v23, (uint64_t)v24);
  outlined retain of Locale((uint64_t)v24);
  BigString.endIndex.getter();
  uint64_t v11 = v10;
  outlined release of Locale((uint64_t)v21);
  uint64_t v14 = v11;
  uint64_t v15 = 0;
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  swift_release();
  v13[0] = v16;
  v13[1] = v17;
  void v13[2] = v18;
  long long v13[3] = v19;
  specialized AttributedString.replaceSubrange<A, B>(_:with:)(v13, (uint64_t)v20);
  return outlined release of AttributedString.Runs((uint64_t)v20);
}

uint64_t associated type witness table accessor for ExpressibleByStringLiteral.StringLiteralType : _ExpressibleByBuiltinStringLiteral in AttributedString()
{
  return MEMORY[0x1E4FBB220];
}

uint64_t associated type witness table accessor for ExpressibleByExtendedGraphemeClusterLiteral.ExtendedGraphemeClusterLiteralType : _ExpressibleByBuiltinExtendedGraphemeClusterLiteral in AttributedString()
{
  return MEMORY[0x1E4FBB230];
}

uint64_t associated type witness table accessor for ExpressibleByUnicodeScalarLiteral.UnicodeScalarLiteralType : _ExpressibleByBuiltinUnicodeScalarLiteral in AttributedString()
{
  return MEMORY[0x1E4FBB228];
}

uint64_t sub_181C434EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized AttributedString.subscript.setter(a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t sub_181C43518()
{
  return 16;
}

__n128 sub_181C43524(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_181C43538()
{
  return 16;
}

__n128 sub_181C43544(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_181C43558()
{
  return 16;
}

__n128 sub_181C43564(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t destroy for Calendar.DatesByRecurring()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Calendar.DatesByRecurring(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  uint64_t v7 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v7;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v8;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Calendar.DatesByRecurring(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v6 = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v6;
  return a1;
}

__n128 __swift_memcpy145_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for Calendar.DatesByRecurring(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for Calendar.DatesByRecurring(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 145)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.DatesByRecurring(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 144) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 145) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 145) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Calendar.DatesByRecurring()
{
  return &type metadata for Calendar.DatesByRecurring;
}

unint64_t lazy protocol witness table accessor for type Calendar.DatesByRecurring.Iterator and conformance Calendar.DatesByRecurring.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.DatesByRecurring.Iterator and conformance Calendar.DatesByRecurring.Iterator;
  if (!lazy protocol witness table cache variable for type Calendar.DatesByRecurring.Iterator and conformance Calendar.DatesByRecurring.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.DatesByRecurring.Iterator and conformance Calendar.DatesByRecurring.Iterator);
  }
  return result;
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation12_FTSSequenceVACOqd__Isgyrzo_AjBsAG_pAJRszr__lIetMgyrzo_Tp5@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation16AttributedStringV5IndexVqd__Isgyrzo_AJ01_k13ConverterFromiJ0VABsAG_pANRszr__lIetMggrzo_Tp5@<X0>(uint64_t a1@<X6>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation16AttributedStringV5IndexVqd__Isgyrzo_AJ01_k13ConverterFromiJ0VABsAG_pANRszr__lIetMggrzo_Tp5Tm(a1, a2);
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySJqd__Isgyrzo_10Foundation16AttributedStringV13CharacterViewVABsAG_pALRszr__lIetMggrzo_Tp5@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5(a1, a2);
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation16AttributedStringV5IndexVqd__Isgyrzo_AJ01_k13ConverterFromiJ0VABsAG_pANRszr__lIetMggrzo_Tp5Tm@<X0>(uint64_t a1@<X6>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation16AttributedStringV12_InternalRunVqd__Isgyrzo_AJ01_K9RunsSliceVABsAG_pANRszr__lIetMggrzo_Tp5@<X0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySiqd__Isgyrzo_10Foundation9IndexPathVABsAG_pAJRszr__lIetMggrzo_Tp5(a1, a2);
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySiqd__Isgyrzo_10Foundation8IndexSetVABsAG_pAJRszr__lIetMggrzo_Tp5@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1);
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySiqd__Isgyrzo_10Foundation9IndexPathVABsAG_pAJRszr__lIetMggrzo_Tp5@<X0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t result = swift_allocObject();
  unint64_t v9 = 0;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a3;
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = MEMORY[0x1E4FBC860];
  while (1)
  {
    if (v10 == v9)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return v11;
    }
    if (v9 >= *(void *)(a1 + 16)) {
      break;
    }
    uint64_t v12 = *(void *)(a1 + 8 * v9++ + 32);
    if (v12 >= a2 && v12 < a3)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v15 = v4;
      if ((result & 1) == 0) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1);
      }
      unint64_t v14 = *(void *)(v11 + 16);
      unint64_t v13 = *(void *)(v11 + 24);
      if (v14 >= v13 >> 1) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      }
      *(void *)(v11 + 16) = v14 + 1;
      *(void *)(v11 + 8 * v14 + 32) = v12;
      uint64_t v4 = v15;
    }
  }
  __break(1u);
  return result;
}

double Calendar.DatesByRecurring.Iterator.init(start:matching:range:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void (*v31)(uint64_t *__return_ptr, unsigned char *, double *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  unint64_t v49;
  char v50;
  char v51;
  char v52;
  int v53;
  char v54;
  double result;
  int v56;
  BOOL v57;
  char v58;
  BOOL v59;
  char v60;
  BOOL v61;
  char v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98[2];
  unsigned char __src[288];
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  unsigned char v106[288];
  double __dst[37];
  char v108;
  char v109;
  unsigned char v110[7];
  unsigned char v111[7];
  __int16 v112;
  char v113;
  char v114;
  char v115;

  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v92 = *(unsigned char *)(a2 + 16);
  uint64_t v76 = *(void *)(a2 + 24);
  uint64_t v75 = *(void *)(a2 + 32);
  uint64_t v78 = *(unsigned char *)(a2 + 17);
  uint64_t v79 = *(unsigned char *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v11 = *(void *)(a2 + 80);
  uint64_t v12 = *(void *)(a2 + 88);
  uint64_t v13 = *(void *)(a2 + 96);
  uint64_t v14 = *(void *)(a2 + 104);
  uint64_t v15 = *(void *)(a2 + 112);
  char v83 = *(double *)a3;
  unint64_t v84 = *(char *)(a2 + 18);
  unint64_t v77 = *(void *)(a3 + 8);
  BOOL v86 = *(unsigned char *)(a3 + 16);
  uint64_t v100 = *(void *)a2;
  unint64_t v93 = v6;
  unint64_t v101 = v6;
  uint64_t v72 = one-time initialization token for cache;
  uint64_t v80 = v11;
  swift_bridgeObjectRetain_n();
  uint64_t v97 = v12;
  swift_bridgeObjectRetain_n();
  unint64_t v95 = v14;
  swift_bridgeObjectRetain_n();
  long long v91 = v7;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v90 = v9;
  swift_bridgeObjectRetain_n();
  uint64_t v89 = v10;
  swift_bridgeObjectRetain_n();
  uint64_t v96 = v13;
  swift_bridgeObjectRetain_n();
  uint64_t v16 = v100;
  swift_unknownObjectRetain();
  uint64_t v88 = v15;
  swift_bridgeObjectRetain();
  if (v72 != -1) {
    swift_once();
  }
  uint64_t v17 = static CalendarCache.cache + 16;
  long long v18 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v18);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v17, (uint64_t *)__dst);
  os_unfair_lock_unlock(v18);
  swift_release_n();
  LOBYTE(v17) = specialized static Calendar.== infix(_:_:)((uint64_t)&v100, (uint64_t)__dst);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (v17)
  {
    long long v19 = (os_unfair_lock_s *)static CalendarCache.cache;
    swift_retain_n();
    os_unfair_lock_lock(v19 + 15);
    closure #1 in CalendarCache.current.getter(&v100);
    os_unfair_lock_unlock(v19 + 15);
    swift_release_n();
    uint64_t v20 = v100;
    uint64_t v21 = v101;
    swift_unknownObjectRelease();
    uint64_t v16 = v20;
  }
  else
  {
    uint64_t v21 = v93;
  }
  uint64_t v22 = v80;
  unsigned int v23 = v84;
  swift_unknownObjectRetain();
  uint64_t v73 = *(void *)(v13 + 16);
  swift_bridgeObjectRelease();
  uint64_t v81 = *(void *)(v95 + 16);
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(v97 + 16);
  swift_bridgeObjectRelease();
  unint64_t v94 = *(void *)(v22 + 16);
  swift_bridgeObjectRelease();
  uint64_t v25 = *(void *)(v89 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v25)
  {
    switch((char)v84)
    {
      case 3:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v57 = 0;
        break;
      case 4:
        uint64_t v57 = v94 != 0;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 5:
        swift_bridgeObjectRelease();
        if (v94)
        {
          swift_bridgeObjectRelease();
          goto LABEL_9;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v26 = (v24 | v81) != 0;
        goto LABEL_11;
      default:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_9:
        swift_bridgeObjectRelease();
        char v26 = 1;
        goto LABEL_11;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v26 = 2;
LABEL_11:
    uint64_t v57 = v26;
  }
  uint64_t v70 = *(void *)(v90 + 16);
  swift_bridgeObjectRelease();
  long long v68 = *(void *)(v8 + 16);
  swift_bridgeObjectRelease();
  long long v66 = *(void *)(v91 + 16);
  swift_bridgeObjectRelease();
  if (v86)
  {
    long long v65 = 0;
    uint64_t v64 = 1;
  }
  else
  {
    double v27 = v83;
    __src[0] = 0x1020A030405uLL >> (8 * v84);
    if (v83 > 1.59271755e13) {
      double v27 = 1.59271755e13;
    }
    double v28 = fmax(v27, -2.11845067e11);
    uint64_t v29 = v24;
    uint64_t ObjectType = swift_getObjectType();
    __dst[0] = v28;
    uint64_t v31 = *(void (**)(uint64_t *__return_ptr, unsigned char *, double *, uint64_t, uint64_t))(v21 + 160);
    swift_unknownObjectRetain();
    uint64_t v32 = ObjectType;
    uint64_t v24 = v29;
    v31(&v100, __src, __dst, v32, v21);
    swift_unknownObjectRelease();
    uint64_t v33 = v100;
    uint64_t v64 = v102;
    if ((_BYTE)v102) {
      uint64_t v33 = 0;
    }
    long long v65 = v33;
  }
  switch((char)v84)
  {
    case 0:
      uint64_t v34 = qword_1ECA2F8A8;
      goto LABEL_43;
    case 1:
      uint64_t v36 = qword_1ECA2F778;
      uint64_t v35 = unk_1ECA2F780;
      break;
    case 2:
      uint64_t v37 = unk_1ECA2F7B0;
      if ((unk_1ECA2F7B0 & ~qword_1ECA2F7A8) == 0) {
        uint64_t v37 = 0;
      }
      uint64_t v36 = v37 | qword_1ECA2F7A8;
      uint64_t v35 = qword_1ECA2F7B8;
      break;
    case 3:
      long long v38 = &qword_1ECA2F7E0;
      goto LABEL_27;
    case 4:
      long long v38 = &qword_1ECA2F820;
LABEL_27:
      uint64_t v39 = v38[1];
      if ((v39 & ~*v38) == 0) {
        uint64_t v39 = 0;
      }
      int v40 = v39 | *v38;
      uint64_t v41 = v38[2];
      uint64_t v35 = v38[3];
      if ((v41 & ~v40) == 0) {
        uint64_t v41 = 0;
      }
      uint64_t v36 = v41 | v40;
      break;
    case 5:
      long long v42 = unk_1ECA2F868;
      if ((unk_1ECA2F868 & ~qword_1ECA2F860) == 0) {
        long long v42 = 0;
      }
      long long v43 = v42 | qword_1ECA2F860;
      long long v44 = qword_1ECA2F870;
      if ((qword_1ECA2F870 & ~v43) == 0) {
        long long v44 = 0;
      }
      long long v45 = v44 | v43;
      if ((unk_1ECA2F878 & ~v45) != 0) {
        long long v46 = unk_1ECA2F878;
      }
      else {
        long long v46 = 0;
      }
      uint64_t v36 = v46 | v45;
      uint64_t v35 = qword_1ECA2F880;
      break;
    default:
      JUMPOUT(0);
  }
  if ((v35 & ~v36) == 0) {
    uint64_t v35 = 0;
  }
  uint64_t v34 = v35 | v36;
LABEL_43:
  uint64_t v61 = v81 == 0;
  long long v47 = 0x2010101uLL >> (8 * v84);
  if (!v94) {
    LOBYTE(v47) = 2;
  }
  uint64_t v82 = v47;
  long long v48 = v84 >= 6u || v24 == 0;
  uint64_t v100 = v16;
  unint64_t v101 = v21;
  long long v49 = 0x202020101uLL >> (8 * v84);
  if (v48) {
    LOBYTE(v49) = 2;
  }
  uint64_t v63 = v49;
  *(void *)&__dst[0] = v34;
  v98[0] = v5;
  Calendar._dateComponents(_:from:)((uint64_t *)__dst, (double *)v98, __src);
  uint64_t v100 = v16;
  unint64_t v101 = v21;
  unint64_t v102 = v5;
  long long v104 = 0;
  long long v103 = 0;
  long long v105 = 1;
  memcpy(v106, __src, 0x11AuLL);
  v106[282] = v92;
  v106[283] = v78;
  v106[284] = 0;
  memcpy(__dst, __src, 0x11AuLL);
  v98[0] = v16;
  v98[1] = v21;
  swift_unknownObjectRetain_n();
  outlined retain of DateComponents((uint64_t)__src);
  uint64_t v59 = DateComponents._validate(for:)(v98);
  outlined release of Calendar.DatesByAdding((uint64_t)&v100);
  uint64_t v109 = 1;
  uint64_t v108 = 1;
  memcpy(__dst, __src, 0x11AuLL);
  uint64_t v85 = qword_18218C9D0[v84];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  long long v67 = 2 * (v66 == 0);
  long long v50 = v23 == 0;
  if (!v68) {
    long long v50 = 2;
  }
  uint64_t v69 = v50;
  if (v70) {
    long long v51 = v23 < 2;
  }
  else {
    long long v51 = 2;
  }
  uint64_t v71 = !v59;
  long long v52 = v23 != 5;
  uint64_t v53 = v61;
  if (v23 != 5) {
    uint64_t v53 = 1;
  }
  if (v53) {
    long long v54 = 2;
  }
  else {
    long long v54 = 0;
  }
  uint64_t v62 = v54;
  if (!v73) {
    long long v52 = 2;
  }
  uint64_t v58 = v51;
  uint64_t v60 = v52;
  uint64_t v115 = v86;
  uint64_t v114 = v64;
  uint64_t v74 = v109;
  uint64_t v87 = v108;
  memcpy((void *)(a4 + 264), __dst, 0x11AuLL);
  *(unsigned char *)(a4 + 26) = v23;
  *(void *)(a4 + 32) = v76;
  *(void *)(a4 + 40) = v75;
  *(void *)a4 = v5;
  *(void *)(a4 + 8) = v16;
  *(void *)(a4 + 16) = v21;
  *(unsigned char *)(a4 + 24) = v92;
  *(unsigned char *)(a4 + 25) = v78;
  *(unsigned char *)(a4 + 48) = v79;
  *(void *)(a4 + 56) = v91;
  *(void *)(a4 + 64) = v8;
  *(void *)(a4 + 72) = v90;
  *(void *)(a4 + 80) = v89;
  *(void *)(a4 + 88) = v22;
  *(void *)(a4 + 96) = v97;
  *(void *)(a4 + 104) = v96;
  *(void *)(a4 + 112) = v95;
  *(void *)(a4 + 120) = v88;
  *(double *)(a4 + 128) = v83;
  *(void *)(a4 + 136) = v77;
  *(unsigned char *)(a4 + 144) = v115;
  *(void *)(a4 + 152) = v65;
  *(unsigned char *)(a4 + 160) = v114;
  *(void *)(a4 + 168) = 0;
  *(unsigned char *)(a4 + 176) = v60;
  *(unsigned char *)(a4 + 177) = v62;
  *(unsigned char *)(a4 + 178) = v63;
  *(unsigned char *)(a4 + 179) = v82;
  *(unsigned char *)(a4 + 180) = v57;
  *(unsigned char *)(a4 + 181) = v58;
  *(unsigned char *)(a4 + 182) = v69;
  *(unsigned char *)(a4 + 183) = v67;
  uint64_t result = NAN;
  *(_OWORD *)(a4 + 184) = xmmword_18218B600;
  *(unsigned char *)(a4 + 200) = v74;
  *(void *)(a4 + 208) = v5;
  *(void *)(a4 + 216) = 0;
  *(void *)(a4 + 224) = 0;
  *(unsigned char *)(a4 + 232) = v87;
  *(_DWORD *)(a4 + 233) = v98[0];
  *(_DWORD *)(a4 + 236) = *(_DWORD *)((char *)v98 + 3);
  *(void *)(a4 + 240) = v5;
  *(void *)(a4 + 248) = v16;
  *(void *)(a4 + 256) = v21;
  *(unsigned char *)(a4 + 546) = v92;
  *(_WORD *)(a4 + 547) = v78;
  *(_WORD *)(a4 + 549) = v112;
  *(unsigned char *)(a4 + 551) = v113;
  *(void *)(a4 + 552) = 100;
  *(unsigned char *)(a4 + 560) = v71;
  long long v56 = *(_DWORD *)v111;
  *(_DWORD *)(a4 + 564) = *(_DWORD *)&v111[3];
  *(_DWORD *)(a4 + 561) = v56;
  *(void *)(a4 + 568) = 0;
  *(unsigned char *)(a4 + 576) = 0;
  *(_DWORD *)(a4 + 580) = *(_DWORD *)&v110[3];
  *(_DWORD *)(a4 + 577) = *(_DWORD *)v110;
  *(void *)(a4 + 584) = v85;
  *(void *)(a4 + 592) = 0;
  *(void *)(a4 + 600) = MEMORY[0x1E4FBC860];
  return result;
}

Swift::Void __swiftcall Calendar.DatesByRecurring.Iterator.nextGroup()()
{
  if ((*(unsigned char *)(v0 + 576) & 1) == 0)
  {
    uint64_t v1 = v0;
    next #1 () in Calendar.DatesByRecurring.Iterator.nextGroup()(v0, (uint64_t)&v138);
    if (BYTE8(v138))
    {
LABEL_3:
      *(unsigned char *)(v0 + 576) = 1;
      return;
    }
    while (1)
    {
      uint64_t v2 = *(void *)(v0 + 568);
      BOOL v3 = __OFSUB__(v2, 1);
      uint64_t v4 = v2 - 1;
      if (v3) {
        break;
      }
      uint64_t v5 = *(void *)(v0 + 32);
      if (!v5) {
        goto LABEL_87;
      }
      if (v4 == 0x8000000000000000 && v5 == -1) {
        goto LABEL_88;
      }
      if (!(v4 % v5))
      {
        uint64_t v7 = v138;
        if ((*(unsigned char *)(v0 + 160) & 1) != 0 || *(double *)&v138 >= *(double *)(v0 + 152))
        {
          uint64_t v115 = (unsigned char *)(v0 + 576);
          uint64_t v8 = (long long *)(v0 + 8);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Date>);
          uint64_t v9 = swift_allocObject();
          char v10 = 0;
          uint64_t v11 = 0;
          *(_OWORD *)(v9 + 16) = xmmword_1821037E0;
          *(void *)(v9 + 32) = v7;
          dates._rawValue = (void *)v9;
          uint64_t v12 = *(unsigned __int8 *)(v0 + 176);
          uint64_t v13 = *(unsigned __int8 *)(v0 + 177);
          int v14 = *(unsigned __int8 *)(v0 + 178);
          int v15 = *(unsigned __int8 *)(v0 + 179);
          int v125 = *(unsigned __int8 *)(v0 + 181);
          int v126 = *(unsigned __int8 *)(v0 + 180);
          int v123 = *(unsigned __int8 *)(v0 + 183);
          int v124 = *(unsigned __int8 *)(v0 + 182);
          int v116 = v15;
          int v117 = v14;
          do
          {
            char v127 = v10;
            int v16 = *((unsigned __int8 *)&outlined read-only object #0 of Calendar.DatesByRecurring.Iterator.nextGroup()
                  + v11
                  + 32);
            if (v12 != 2 && ((v12 & 1) == 0) != v16)
            {
              char v17 = *(unsigned char *)(v1 + 24);
              char v18 = *(unsigned char *)(v1 + 25);
              char v19 = *(unsigned char *)(v1 + 26);
              char v20 = *(unsigned char *)(v1 + 48);
              uint64_t v21 = *(void *)(v1 + 120);
              long long v130 = *(_OWORD *)(v1 + 8);
              v131[0] = v17;
              v131[1] = v18;
              v131[2] = v19;
              *(_OWORD *)&v131[8] = *(_OWORD *)(v1 + 32);
              uint64_t v118 = *(void *)&v131[8];
              v131[24] = v20;
              long long v22 = *(_OWORD *)(v1 + 72);
              long long v132 = *(_OWORD *)(v1 + 56);
              long long v133 = v22;
              long long v23 = *(_OWORD *)(v1 + 104);
              long long v134 = *(_OWORD *)(v1 + 88);
              long long v135 = v23;
              uint64_t v136 = v21;
              uint64_t v128 = v7;
              Calendar.RecurrenceRule._expandOrLimitMonths(dates:anchor:action:)(&dates, (Foundation::Date)v134, (Foundation::ComponentAction)&v128);
              uint64_t v5 = v118;
            }
            if (v13 != 2 && (v13 & 1) == 0 && (v16 & 1) == 0)
            {
              char v24 = *(unsigned char *)(v1 + 24);
              char v25 = *(unsigned char *)(v1 + 25);
              char v26 = *(unsigned char *)(v1 + 26);
              char v27 = *(unsigned char *)(v1 + 48);
              uint64_t v28 = *(void *)(v1 + 120);
              long long v130 = *(_OWORD *)(v1 + 8);
              v131[0] = v24;
              v131[1] = v25;
              v131[2] = v26;
              *(_OWORD *)&v131[8] = *(_OWORD *)(v1 + 32);
              uint64_t v119 = *(void *)&v131[8];
              v131[24] = v27;
              long long v29 = *(_OWORD *)(v1 + 72);
              long long v132 = *(_OWORD *)(v1 + 56);
              long long v133 = v29;
              long long v30 = *(_OWORD *)(v1 + 104);
              long long v134 = *(_OWORD *)(v1 + 88);
              long long v135 = v30;
              uint64_t v136 = v28;
              uint64_t v128 = v7;
              Calendar.RecurrenceRule._expandWeeks(dates:anchor:)(&dates, (Foundation::Date)v134);
              uint64_t v5 = v119;
            }
            if (v14 != 2 && ((v14 & 1) == 0) != v16)
            {
              char v31 = *(unsigned char *)(v1 + 24);
              char v32 = *(unsigned char *)(v1 + 25);
              char v33 = *(unsigned char *)(v1 + 26);
              char v34 = *(unsigned char *)(v1 + 48);
              uint64_t v35 = *(void *)(v1 + 120);
              long long v130 = *(_OWORD *)(v1 + 8);
              v131[0] = v31;
              v131[1] = v32;
              v131[2] = v33;
              *(_OWORD *)&v131[8] = *(_OWORD *)(v1 + 32);
              uint64_t v120 = *(void *)&v131[8];
              v131[24] = v34;
              long long v36 = *(_OWORD *)(v1 + 72);
              long long v132 = *(_OWORD *)(v1 + 56);
              long long v133 = v36;
              long long v37 = *(_OWORD *)(v1 + 104);
              long long v134 = *(_OWORD *)(v1 + 88);
              long long v135 = v37;
              uint64_t v136 = v35;
              uint64_t v128 = v7;
              Calendar.RecurrenceRule._expandOrLimitDaysOfTheYear(dates:anchor:action:)(&dates, (Foundation::Date)v134, (Foundation::ComponentAction)&v128);
              uint64_t v5 = v120;
            }
            if (v15 != 2 && ((v15 & 1) == 0) != v16)
            {
              char v38 = *(unsigned char *)(v1 + 24);
              char v39 = *(unsigned char *)(v1 + 25);
              char v40 = *(unsigned char *)(v1 + 26);
              char v41 = *(unsigned char *)(v1 + 48);
              uint64_t v42 = *(void *)(v1 + 120);
              long long v130 = *(_OWORD *)(v1 + 8);
              v131[0] = v38;
              v131[1] = v39;
              v131[2] = v40;
              *(_OWORD *)&v131[8] = *(_OWORD *)(v1 + 32);
              uint64_t v121 = *(void *)&v131[8];
              v131[24] = v41;
              long long v43 = *(_OWORD *)(v1 + 72);
              long long v132 = *(_OWORD *)(v1 + 56);
              long long v133 = v43;
              long long v44 = *(_OWORD *)(v1 + 104);
              long long v134 = *(_OWORD *)(v1 + 88);
              long long v135 = v44;
              uint64_t v136 = v42;
              uint64_t v128 = v7;
              Calendar.RecurrenceRule._expandOrLimitDaysOfTheMonth(dates:anchor:action:)(&dates, (Foundation::Date)v134, (Foundation::ComponentAction)&v128);
              uint64_t v5 = v121;
            }
            if (v126 != 2 && ((v126 & 1) == 0) != v16)
            {
              long long v45 = *(_OWORD *)(v1 + 88);
              long long v142 = *(_OWORD *)(v1 + 72);
              long long v143 = v45;
              long long v144 = *(_OWORD *)(v1 + 104);
              uint64_t v145 = *(void *)(v1 + 120);
              long long v46 = *(_OWORD *)(v1 + 24);
              long long v138 = *v8;
              long long v139 = v46;
              long long v47 = *(_OWORD *)(v1 + 56);
              long long v140 = *(_OWORD *)(v1 + 40);
              long long v141 = v47;
              if (BYTE2(v46) == 5)
              {
                if (*(void *)(v144 + 16)) {
                  char v48 = 2;
                }
                else {
                  char v48 = 1;
                }
              }
              else
              {
                char v48 = 2;
              }
              uint64_t v49 = v13;
              uint64_t v50 = v12;
              uint64_t v5 = *((void *)&v139 + 1);
              if (v16)
              {
                long long v51 = *(_OWORD *)(v1 + 88);
                long long v133 = *(_OWORD *)(v1 + 72);
                long long v134 = v51;
                long long v135 = *(_OWORD *)(v1 + 104);
                uint64_t v136 = *(void *)(v1 + 120);
                long long v52 = *(_OWORD *)(v1 + 24);
                long long v130 = *v8;
                *(_OWORD *)uint64_t v131 = v52;
                long long v53 = *(_OWORD *)(v1 + 56);
                *(_OWORD *)&v131[16] = *(_OWORD *)(v1 + 40);
                long long v132 = v53;
                v54._rawValue = (void *)*((void *)&v142 + 1);
                char v129 = v48;
                uint64_t v128 = v7;
                outlined retain of Calendar.RecurrenceRule((uint64_t)&v138);
                uint64_t v56 = (unint64_t)Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(v54, (Foundation::Calendar::Component)&v129, v55);
                outlined retain of Calendar.RecurrenceRule((uint64_t)&v138);
                Swift::Int v57 = swift_bridgeObjectRetain();
                uint64_t v58 = (void *)specialized _ArrayProtocol.filter(_:)(v57, v56, &v138);
                outlined release of Calendar.RecurrenceRule((uint64_t)&v138);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined release of Calendar.RecurrenceRule((uint64_t)&v138);
                dates._rawValue = v58;
              }
              else
              {
                if ((BYTE2(v46) & 0xFE) == 4) {
                  char v59 = v48;
                }
                else {
                  char v59 = 0xA030405u >> (8 * BYTE2(v46));
                }
                outlined retain of Calendar.RecurrenceRule((uint64_t)&v138);
                uint64_t v60 = swift_bridgeObjectRetain();
                uint64_t v61 = (void *)specialized Sequence.flatMap<A>(_:)(v60, (uint64_t *)&v138, v48, v59);
                swift_bridgeObjectRelease_n();
                outlined release of Calendar.RecurrenceRule((uint64_t)&v138);
                dates._rawValue = v61;
              }
              uint64_t v12 = v50;
              uint64_t v13 = v49;
              int v15 = v116;
              int v14 = v117;
            }
            if (v125 != 2 && ((v125 & 1) == 0) != v16)
            {
              char v62 = *(unsigned char *)(v1 + 24);
              char v63 = *(unsigned char *)(v1 + 25);
              char v64 = *(unsigned char *)(v1 + 26);
              char v65 = *(unsigned char *)(v1 + 48);
              uint64_t v66 = *(void *)(v1 + 120);
              long long v130 = *(_OWORD *)(v1 + 8);
              v131[0] = v62;
              v131[1] = v63;
              v131[2] = v64;
              *(_OWORD *)&v131[8] = *(_OWORD *)(v1 + 32);
              uint64_t v122 = *(void *)&v131[8];
              v131[24] = v65;
              long long v67 = *(_OWORD *)(v1 + 72);
              long long v132 = *(_OWORD *)(v1 + 56);
              long long v133 = v67;
              long long v68 = *(_OWORD *)(v1 + 104);
              long long v134 = *(_OWORD *)(v1 + 88);
              long long v135 = v68;
              uint64_t v136 = v66;
              char v129 = 4;
              uint64_t v128 = v7;
              Calendar.RecurrenceRule._expandOrLimitTimeComponent(_:dates:anchor:action:)((Foundation::Calendar::Component)&v129, &dates, (Foundation::Date)v134, (Foundation::ComponentAction)&v128);
              uint64_t v5 = v122;
            }
            if (v124 != 2 && ((v124 & 1) == 0) != v16)
            {
              char v69 = *(unsigned char *)(v1 + 24);
              char v70 = *(unsigned char *)(v1 + 25);
              char v71 = *(unsigned char *)(v1 + 26);
              uint64_t v72 = *(void *)(v1 + 40);
              char v73 = *(unsigned char *)(v1 + 48);
              uint64_t v74 = *(void *)(v1 + 120);
              long long v130 = *(_OWORD *)(v1 + 8);
              v131[0] = v69;
              v131[1] = v70;
              v131[2] = v71;
              *(void *)&v131[8] = v5;
              *(void *)&v131[16] = v72;
              v131[24] = v73;
              long long v75 = *(_OWORD *)(v1 + 72);
              long long v132 = *(_OWORD *)(v1 + 56);
              long long v133 = v75;
              long long v76 = *(_OWORD *)(v1 + 104);
              long long v134 = *(_OWORD *)(v1 + 88);
              long long v135 = v76;
              uint64_t v136 = v74;
              char v129 = 5;
              uint64_t v128 = v7;
              Calendar.RecurrenceRule._expandOrLimitTimeComponent(_:dates:anchor:action:)((Foundation::Calendar::Component)&v129, &dates, (Foundation::Date)v134, (Foundation::ComponentAction)&v128);
            }
            if (v123 != 2 && ((((v123 & 1) == 0) ^ v16) & 1) != 0)
            {
              char v77 = *(unsigned char *)(v1 + 24);
              char v78 = *(unsigned char *)(v1 + 25);
              char v79 = *(unsigned char *)(v1 + 26);
              uint64_t v80 = *(void *)(v1 + 40);
              char v81 = *(unsigned char *)(v1 + 48);
              uint64_t v82 = *(void *)(v1 + 120);
              long long v130 = *(_OWORD *)(v1 + 8);
              v131[0] = v77;
              v131[1] = v78;
              v131[2] = v79;
              *(void *)&v131[8] = v5;
              *(void *)&v131[16] = v80;
              v131[24] = v81;
              long long v83 = *(_OWORD *)(v1 + 72);
              long long v132 = *(_OWORD *)(v1 + 56);
              long long v133 = v83;
              long long v84 = *(_OWORD *)(v1 + 104);
              long long v134 = *(_OWORD *)(v1 + 88);
              long long v135 = v84;
              uint64_t v136 = v82;
              char v129 = 6;
              uint64_t v128 = v7;
              Calendar.RecurrenceRule._expandOrLimitTimeComponent(_:dates:anchor:action:)((Foundation::Calendar::Component)&v129, &dates, (Foundation::Date)v134, (Foundation::ComponentAction)&v128);
            }
            char v10 = 1;
            uint64_t v11 = 1u;
          }
          while ((v127 & 1) == 0);
          uint64_t v85 = swift_bridgeObjectRetain();
          BOOL v86 = (void *)specialized _ArrayProtocol.filter(_:)(v85, (double *)v1);
          swift_bridgeObjectRelease_n();
          dates._rawValue = v86;
          if (!*(unsigned char *)(v1 + 48))
          {
            uint64_t v105 = v86[2];
            if (v105)
            {
              double v106 = *(double *)(v1 + 40);
              swift_bridgeObjectRetain();
              uint64_t v107 = 0;
              uint64_t v108 = (void *)MEMORY[0x1E4FBC860];
              do
              {
                double v111 = *(double *)&v86[v107 + 4];
                if (v106 >= v111)
                {
                  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  *(void *)&long long v130 = v108;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  {
                    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v108[2] + 1, 1);
                    uint64_t v108 = (void *)v130;
                  }
                  unint64_t v110 = v108[2];
                  unint64_t v109 = v108[3];
                  if (v110 >= v109 >> 1)
                  {
                    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v109 > 1, v110 + 1, 1);
                    uint64_t v108 = (void *)v130;
                  }
                  v108[2] = v110 + 1;
                  *(double *)&v108[v110 + 4] = v111;
                }
                ++v107;
              }
              while (v105 != v107);
              swift_bridgeObjectRelease_n();
              dates._rawValue = v108;
              if (!v108[2])
              {
                swift_release();
                *uint64_t v115 = 1;
                return;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              dates._rawValue = (void *)MEMORY[0x1E4FBC860];
            }
          }
          specialized MutableCollection<>.sort(by:)(&dates);
          uint64_t v87 = *(void *)(v1 + 120);
          int64_t v88 = *(void *)(v87 + 16);
          if (v88)
          {
            *(void *)&long long v130 = MEMORY[0x1E4FBC860];
            swift_bridgeObjectRetain();
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v88, 0);
            uint64_t v89 = 0;
            uint64_t v90 = v130;
            rawValue = dates._rawValue;
            do
            {
              uint64_t v92 = *(void *)(v87 + 8 * v89 + 32);
              if (v92 < 0) {
                uint64_t v93 = rawValue[2] + v92;
              }
              else {
                uint64_t v93 = v92 - 1;
              }
              *(void *)&long long v130 = v90;
              unint64_t v95 = *(void *)(v90 + 16);
              unint64_t v94 = *(void *)(v90 + 24);
              if (v95 >= v94 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v94 > 1, v95 + 1, 1);
                uint64_t v90 = v130;
              }
              ++v89;
              *(void *)(v90 + 16) = v95 + 1;
              *(void *)(v90 + 8 * v95 + 32) = v93;
            }
            while (v88 != v89);
            swift_bridgeObjectRelease();
            uint64_t v96 = dates._rawValue;
            uint64_t v97 = specialized _ArrayProtocol.filter(_:)(v90, 0, *((void *)dates._rawValue + 2));
            int64_t v98 = *(void *)(v97 + 16);
            if (v98)
            {
              *(void *)&long long v130 = MEMORY[0x1E4FBC860];
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v98, 0);
              uint64_t v99 = 0;
              uint64_t v100 = (void *)v130;
              while (1)
              {
                unint64_t v101 = *(void *)(v97 + 8 * v99 + 32);
                if ((v101 & 0x8000000000000000) != 0) {
                  goto LABEL_89;
                }
                if (v101 >= v96[2]) {
                  goto LABEL_90;
                }
                uint64_t v102 = v96[v101 + 4];
                *(void *)&long long v130 = v100;
                unint64_t v104 = v100[2];
                unint64_t v103 = v100[3];
                if (v104 >= v103 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v103 > 1, v104 + 1, 1);
                  uint64_t v100 = (void *)v130;
                }
                ++v99;
                v100[2] = v104 + 1;
                v100[v104 + 4] = v102;
                if (v98 == v99)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  goto LABEL_83;
                }
              }
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v100 = (void *)MEMORY[0x1E4FBC860];
LABEL_83:
            dates._rawValue = v100;
          }
          uint64_t v113 = swift_bridgeObjectRetain();
          uint64_t v114 = specialized Sequence.reversed()(v113);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(void *)(v1 + 600) = v114;
          return;
        }
      }
      next #1 () in Calendar.DatesByRecurring.Iterator.nextGroup()(v0, (uint64_t)&v138);
      if (BYTE8(v138)) {
        goto LABEL_3;
      }
    }
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
  }
  __break(1u);
}

uint64_t next #1 () in Calendar.DatesByRecurring.Iterator.nextGroup()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result;
  if (*(void *)(result + 568))
  {
    uint64_t v4 = (unsigned __int8 *)(result + 547);
    double v5 = 0.0;
    if (*(unsigned char *)(result + 560))
    {
      char v6 = 1;
    }
    else
    {
      uint64_t v7 = *(void *)(result + 184);
      BOOL v8 = __OFADD__(v7, 1);
      uint64_t v9 = v7 + 1;
      if (v8) {
        goto LABEL_19;
      }
      double v10 = *(double *)(result + 208);
      while (1)
      {
        *(void *)(v2 + 184) = v9;
        long long v19 = *(_OWORD *)(v2 + 248);
        id v25 = *(id *)(v2 + 240);
        memcpy(__dst, (const void *)(v2 + 264), 0x11AuLL);
        memcpy(v24, (const void *)(v2 + 264), 0x11AuLL);
        unsigned __int8 v23 = *(unsigned char *)(v2 + 546);
        unsigned __int8 v22 = *v4;
        unsigned __int8 v21 = *(unsigned char *)(v2 + 548);
        double v20 = v10;
        char v11 = *(unsigned char *)(v2 + 200);
        uint64_t v17 = *(void *)(v2 + 192);
        char v18 = v11;
        swift_unknownObjectRetain();
        outlined retain of DateComponents((uint64_t)__dst);
        Calendar._enumerateDatesStep(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:inSearchingDate:previouslyReturnedMatchDate:)((double *)&v25, v24, &v23, &v22, &v21, &v20, (uint64_t)&v17, (uint64_t)&v26);
        outlined release of DateComponents((uint64_t)__dst);
        uint64_t result = swift_unknownObjectRelease();
        double v12 = *(double *)&v26;
        int v13 = BYTE8(v26);
        double v10 = v27;
        *(double *)(v2 + 208) = v27;
        if (v13 != 2) {
          break;
        }
        uint64_t v14 = *(void *)(v2 + 184);
        if (v14 >= *(void *)(v2 + 552))
        {
          *(void *)&long long v19 = *(void *)(v2 + 240);
          long long v26 = *(_OWORD *)(v2 + 248);
          memcpy(v24, (const void *)(v2 + 264), 0x11AuLL);
          LOBYTE(v17) = *(unsigned char *)(v2 + 548);
          LOBYTE(v25) = *(unsigned char *)(v2 + 546);
          LOBYTE(v20) = *v4;
          uint64_t result = _handleCalendarResultNotFound(date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)((uint64_t *)&v19, (uint64_t *)&v26, v24, (unsigned __int8 *)&v17, (unsigned __int8 *)&v25, (unsigned __int8 *)&v20);
          char v6 = 1;
          *(unsigned char *)(v2 + 560) = 1;
          goto LABEL_16;
        }
        uint64_t v9 = v14 + 1;
      }
      if ((*(unsigned char *)(v2 + 232) & 1) != 0 || *(double *)(v2 + 216) <= v12 && *(double *)(v2 + 224) > v12)
      {
        char v6 = 0;
        *(double *)(v2 + 192) = v12;
        *(unsigned char *)(v2 + 200) = 0;
        double v5 = v12;
      }
      else
      {
        char v6 = 1;
        *(unsigned char *)(v2 + 560) = 1;
      }
    }
  }
  else
  {
    char v6 = 0;
    double v5 = *(double *)result;
  }
LABEL_16:
  uint64_t v15 = *(void *)(v2 + 568);
  BOOL v8 = __OFADD__(v15, 1);
  uint64_t v16 = v15 + 1;
  if (!v8)
  {
    *(void *)(v2 + 568) = v16;
    *(double *)a2 = v5;
    *(unsigned char *)(a2 + 8) = v6;
    return result;
  }
  __break(1u);
LABEL_19:
  __break(1u);

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall Calendar.RecurrenceRule._expandOrLimitMonths(dates:anchor:action:)(Swift::OpaquePointer *dates, Foundation::Date anchor, Foundation::ComponentAction action)
{
  void (*v35)(_OWORD *__return_ptr, _OWORD *, double *, uint64_t, void);
  void (*v36)(_OWORD *__return_ptr, char *, double *, uint64_t, void);
  double v37;
  void *v38;
  uint64_t v39;
  char v40;
  double v41;
  _OWORD __src[18];
  void v43[2];
  char v44;
  long long v45[6];
  long long v46;
  uint64_t v47;
  _OWORD __dst[18];
  uint64_t v49;

  char v5 = v3;
  double v7 = *(double *)action;
  long long v8 = *(_OWORD *)(v4 + 80);
  v45[4] = *(_OWORD *)(v4 + 64);
  v45[5] = v8;
  long long v46 = *(_OWORD *)(v4 + 96);
  long long v47 = *(void *)(v4 + 112);
  long long v9 = *(_OWORD *)(v4 + 16);
  v45[0] = *(_OWORD *)v4;
  v45[1] = v9;
  long long v10 = *(_OWORD *)(v4 + 48);
  v45[2] = *(_OWORD *)(v4 + 32);
  v45[3] = v10;
  v43[0] = 0;
  v43[1] = 0;
  long long v44 = 1;
  uint64_t v49 = v46;
  int64_t v11 = *(void *)(v46 + 16);
  uint64_t v12 = MEMORY[0x1E4FBC860];
  if (v11)
  {
    *(void *)&__dst[0] = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    uint64_t v12 = *(void *)&__dst[0];
    int v13 = (unsigned char *)(v46 + 40);
    while (1)
    {
      uint64_t v14 = *((void *)v13 - 1);
      char v15 = *v13;
      if (v14 <= 0)
      {
        specialized getter of monthRange #1 in Calendar.RecurrenceRule._expandOrLimitMonths(dates:anchor:action:)((uint64_t)v43, v45, v7);
        BOOL v17 = __OFADD__(v16, v14);
        v14 += v16;
        if (v17) {
          break;
        }
      }
      *(void *)&__dst[0] = v12;
      unint64_t v19 = *(void *)(v12 + 16);
      unint64_t v18 = *(void *)(v12 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        uint64_t v12 = *(void *)&__dst[0];
      }
      v13 += 16;
      *(void *)(v12 + 16) = v19 + 1;
      uint64_t v20 = v12 + 16 * v19;
      *(void *)(v20 + 32) = v14;
      *(unsigned char *)(v20 + 40) = v15;
      if (!--v11)
      {
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v49);
        goto LABEL_9;
      }
    }
    __break(1u);
    goto LABEL_31;
  }
LABEL_9:
  if (v5)
  {
    outlined retain of Calendar.RecurrenceRule((uint64_t)v45);
    swift_bridgeObjectRetain();
    char v39 = swift_bridgeObjectRetain();
    char v38 = (void *)specialized _ArrayProtocol.filter(_:)(v39, (uint64_t *)v45, v12);
    swift_bridgeObjectRelease();
    outlined release of Calendar.RecurrenceRule((uint64_t)v45);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  uint64_t v21 = unk_1ECA2F540;
  if ((unk_1ECA2F540 & ~qword_1ECA2F538) == 0) {
    uint64_t v21 = 0;
  }
  uint64_t v22 = v21 | qword_1ECA2F538;
  uint64_t v23 = qword_1ECA2F548;
  if ((qword_1ECA2F548 & ~v22) == 0) {
    uint64_t v23 = 0;
  }
  uint64_t v24 = v23 | v22;
  if ((unk_1ECA2F550 & ~v24) != 0) {
    uint64_t v25 = unk_1ECA2F550;
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v26 = v25 | v24;
  uint64_t v28 = qword_1ECA2F558;
  uint64_t v27 = unk_1ECA2F560;
  if ((qword_1ECA2F558 & ~v26) == 0) {
    uint64_t v28 = 0;
  }
  uint64_t v29 = v28 | v26;
  if ((unk_1ECA2F560 & ~v29) == 0) {
    uint64_t v27 = 0;
  }
  __int16 v30 = v27 | v29;
  long long v31 = v45[0];
  *(void *)&__dst[0] = v27 | v29;
  double v32 = 1.59271755e13;
  if (v7 <= 1.59271755e13) {
    double v32 = v7;
  }
  double v33 = fmax(v32, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  char v41 = v33;
  uint64_t v35 = *(void (**)(_OWORD *__return_ptr, _OWORD *, double *, uint64_t, void))(*((void *)&v31 + 1) + 192);
  swift_unknownObjectRetain();
  v35(__src, __dst, &v41, ObjectType, *((void *)&v31 + 1));
  if ((v30 & 0x4000) != 0)
  {
    __src[0] = v31;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if (*(void *)&__src[1])
    {
      __dst[0] = __src[1];
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)__dst);
    }
  }
  swift_unknownObjectRelease();
  memcpy(__dst, __src, 0x11AuLL);
  char v40 = 1;
  char v41 = v33;
  long long v36 = *(void (**)(_OWORD *__return_ptr, char *, double *, uint64_t, void))(*((void *)&v31 + 1) + 160);
  swift_unknownObjectRetain();
  v36(__src, &v40, &v41, ObjectType, *((void *)&v31 + 1));
  swift_unknownObjectRelease();
  if ((__src[1] & 1) == 0)
  {
    long long v37 = *(double *)__src;
    outlined retain of Calendar.RecurrenceRule((uint64_t)v45);
    outlined retain of DateComponents((uint64_t)__dst);
    char v38 = specialized Sequence.compactMap<A>(_:)(v12, (uint64_t)__dst, v45, v37);
    outlined release of Calendar.RecurrenceRule((uint64_t)v45);
    outlined release of DateComponents((uint64_t)__dst);
    swift_bridgeObjectRelease();
    outlined release of DateComponents((uint64_t)__dst);
LABEL_29:
    swift_bridgeObjectRelease();
    dates->_rawValue = v38;
    return;
  }
LABEL_31:
  __break(1u);
}

Swift::Void __swiftcall Calendar.RecurrenceRule._expandWeeks(dates:anchor:)(Swift::OpaquePointer *dates, Foundation::Date anchor)
{
  void (*v13)(void *__return_ptr, double *, void *, uint64_t, void);
  double v14;
  double v15;
  uint64_t (*v16)(void *, double *, void *, uint64_t, void);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  double v22;
  void (*v23)(void *__return_ptr, uint64_t *, double *, uint64_t, void);
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, void);
  uint64_t v28;
  uint64_t (*v29)(uint64_t, void);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Swift::OpaquePointer *v49;
  uint64_t v50;
  void v51[23];
  char v52;
  uint64_t v53;
  void v54[2];
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  _OWORD v59[6];
  long long v60;
  uint64_t v61;
  double v62;
  _OWORD v63[2];

  double v5 = *v2;
  long long v6 = v3[5];
  void v59[4] = v3[4];
  v59[5] = v6;
  uint64_t v60 = v3[6];
  uint64_t v61 = *((void *)v3 + 14);
  long long v7 = v3[1];
  long long v8 = *v3;
  v59[0] = *v3;
  v59[1] = v7;
  long long v9 = v3[3];
  _OWORD v59[2] = v3[2];
  _OWORD v59[3] = v9;
  LOBYTE(v62) = 1;
  if (v5 > 1.59271755e13) {
    double v5 = 1.59271755e13;
  }
  double v10 = fmax(v5, -2.11845067e11);
  v63[0] = v8;
  long long v11 = v8;
  uint64_t ObjectType = swift_getObjectType();
  *(double *)long long v51 = v10;
  int v13 = *(void (**)(void *__return_ptr, double *, void *, uint64_t, void))(*((void *)&v11 + 1) + 160);
  outlined retain of Locale((uint64_t)v63);
  v13(v54, &v62, v51, ObjectType, *((void *)&v11 + 1));
  outlined release of Locale((uint64_t)v63);
  if (v55) {
    return;
  }
  char v15 = *(double *)v54;
  uint64_t v14 = *(double *)&v54[1];
  LOBYTE(v51[0]) = 11;
  LOBYTE(v62) = 1;
  *(double *)Swift::OpaquePointer v54 = v10;
  uint64_t v16 = *(uint64_t (**)(void *, double *, void *, uint64_t, void))(*((void *)&v11 + 1) + 144);
  outlined retain of Locale((uint64_t)v63);
  BOOL v17 = v16(v51, &v62, v54, ObjectType, *((void *)&v11 + 1));
  unint64_t v19 = v18;
  uint64_t v21 = v20;
  outlined release of Locale((uint64_t)v63);
  if (v21) {
    return;
  }
  uint64_t v49 = dates;
  uint64_t v58 = 128;
  if (v15 <= 1.59271755e13) {
    uint64_t v22 = v15;
  }
  else {
    uint64_t v22 = 1.59271755e13;
  }
  v51[0] = fmax(v22, -2.11845067e11);
  uint64_t v23 = *(void (**)(void *__return_ptr, uint64_t *, double *, uint64_t, void))(*((void *)&v11 + 1) + 192);
  v23(v54, &v58, (double *)v51, ObjectType, *((void *)&v11 + 1));
  outlined release of DateComponents((uint64_t)v54);
  if (v57) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = v56;
  }
  uint64_t v25 = v14 + v15 + -0.01;
  long long v53 = 128;
  if (v25 > 1.59271755e13) {
    uint64_t v25 = 1.59271755e13;
  }
  char v62 = fmax(v25, -2.11845067e11);
  v23(v51, &v53, &v62, ObjectType, *((void *)&v11 + 1));
  outlined release of DateComponents((uint64_t)v51);
  if (v52) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = v51[22];
  }
  uint64_t v27 = *(uint64_t (**)(uint64_t, void))(*((void *)&v11 + 1) + 72);
  outlined retain of Locale((uint64_t)v63);
  uint64_t v28 = v27(ObjectType, *((void *)&v11 + 1));
  outlined release of Locale((uint64_t)v63);
  uint64_t v29 = *(uint64_t (**)(uint64_t, void))(*((void *)&v11 + 1) + 56);
  outlined retain of Locale((uint64_t)v63);
  __int16 v30 = v29(ObjectType, *((void *)&v11 + 1));
  outlined release of Locale((uint64_t)v63);
  long long v31 = 7 - v24;
  if (__OFSUB__(7, v24)) {
    goto LABEL_41;
  }
  double v32 = v31 + v30;
  if (__OFADD__(v31, v30))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  double v33 = 7 - v26;
  if (__OFSUB__(7, v26))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  char v34 = __OFADD__(v33, v30);
  uint64_t v35 = v33 + v30;
  if (v34)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v32 < v28)
  {
    char v34 = __OFADD__(v17++, 1);
    if (v34) {
      goto LABEL_45;
    }
  }
  if (v35 < v28)
  {
    char v34 = __OFSUB__(v19--, 1);
    if (!v34) {
      goto LABEL_27;
    }
    __break(1u);
  }
  char v34 = __OFSUB__(v19, 2);
  v19 -= 2;
  if (v34)
  {
LABEL_46:
    __break(1u);
    return;
  }
LABEL_27:
  long long v36 = *((void *)&v60 + 1);
  char v62 = *((double *)&v60 + 1);
  long long v37 = *(void *)(*((void *)&v60 + 1) + 16);
  char v38 = MEMORY[0x1E4FBC860];
  if (v37)
  {
    uint64_t v50 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37, 0);
    char v38 = v50;
    char v39 = (uint64_t *)(v36 + 32);
    while (1)
    {
      char v41 = *v39++;
      char v40 = v41;
      uint64_t v42 = v41 - 1;
      if (v41 < 1)
      {
        long long v44 = v40 + 1;
        long long v43 = v19 + v44;
        if (__OFADD__(v19, v44)) {
          goto LABEL_40;
        }
      }
      else
      {
        long long v43 = v42 + v17;
        if (__OFADD__(v42, v17))
        {
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
      }
      long long v46 = *(void *)(v50 + 16);
      long long v45 = *(void *)(v50 + 24);
      if (v46 >= v45 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
      }
      *(void *)(v50 + 16) = v46 + 1;
      *(void *)(v50 + 8 * v46 + 32) = v43;
      if (!--v37)
      {
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v62);
        break;
      }
    }
  }
  outlined retain of Calendar.RecurrenceRule((uint64_t)v59);
  swift_bridgeObjectRetain();
  long long v47 = swift_bridgeObjectRetain();
  char v48 = specialized Sequence.flatMap<A>(_:)(v47, v59, v38);
  swift_bridgeObjectRelease();
  outlined release of Calendar.RecurrenceRule((uint64_t)v59);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v49->_rawValue = (void *)v48;
}

Swift::Void __swiftcall Calendar.RecurrenceRule._expandOrLimitDaysOfTheYear(dates:anchor:action:)(Swift::OpaquePointer *dates, Foundation::Date anchor, Foundation::ComponentAction action)
{
  void (*v18)(_OWORD *__return_ptr, _OWORD *, _OWORD *, uint64_t, void);
  void (*v19)(_OWORD *__return_ptr, void *, double *, uint64_t, void);
  long long v20;
  uint64_t v21;
  uint64_t *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _OWORD v37[18];
  double v38;
  char v39;
  void *v40;
  _OWORD __dst[18];
  _OWORD __src[18];
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  uint64_t v50;
  void v51[3];

  double v6 = *(double *)action;
  long long v7 = *(_OWORD *)(v4 + 80);
  long long v47 = *(_OWORD *)(v4 + 64);
  char v48 = v7;
  uint64_t v49 = *(_OWORD *)(v4 + 96);
  uint64_t v50 = *(void *)(v4 + 112);
  long long v8 = *(_OWORD *)(v4 + 16);
  long long v43 = *(_OWORD *)v4;
  long long v44 = v8;
  long long v9 = *(_OWORD *)(v4 + 48);
  long long v45 = *(_OWORD *)(v4 + 32);
  long long v46 = v9;
  if (v3)
  {
    outlined retain of Calendar.RecurrenceRule((uint64_t)&v43);
    char v34 = swift_bridgeObjectRetain();
    uint64_t v35 = (void *)specialized _ArrayProtocol.filter(_:)(v34, (uint64_t)&v43, (uint64_t (*)(uint64_t *, uint64_t))closure #1 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheYear(dates:anchor:action:));
    outlined release of Calendar.RecurrenceRule((uint64_t)&v43);
    swift_bridgeObjectRelease();
LABEL_32:
    dates->_rawValue = v35;
    return;
  }
  uint64_t v10 = unk_1ECA2F5C0;
  if ((unk_1ECA2F5C0 & ~qword_1ECA2F5B8) == 0) {
    uint64_t v10 = 0;
  }
  uint64_t v11 = v10 | qword_1ECA2F5B8;
  uint64_t v12 = qword_1ECA2F5C8;
  if ((qword_1ECA2F5C8 & ~(v10 | qword_1ECA2F5B8)) == 0) {
    uint64_t v12 = 0;
  }
  __int16 v13 = v12 | v11;
  long long v14 = v43;
  *(void *)&__dst[0] = v12 | v11;
  double v15 = 1.59271755e13;
  if (v6 <= 1.59271755e13) {
    double v15 = v6;
  }
  double v16 = fmax(v15, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  *(double *)long long v37 = v16;
  unint64_t v18 = *(void (**)(_OWORD *__return_ptr, _OWORD *, _OWORD *, uint64_t, void))(*((void *)&v14 + 1) + 192);
  swift_unknownObjectRetain();
  v18(__src, __dst, v37, ObjectType, *((void *)&v14 + 1));
  if ((v13 & 0x4000) != 0)
  {
    __src[0] = v14;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if (*(void *)&__src[1])
    {
      __dst[0] = __src[1];
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)__dst);
    }
  }
  swift_unknownObjectRelease();
  memcpy(__dst, __src, 0x11AuLL);
  char v40 = (void *)MEMORY[0x1E4FBC860];
  LOBYTE(v51[0]) = 0x1020A030405uLL >> (8 * BYTE2(v44));
  char v38 = v16;
  unint64_t v19 = *(void (**)(_OWORD *__return_ptr, void *, double *, uint64_t, void))(*((void *)&v14 + 1) + 160);
  swift_unknownObjectRetain();
  v19(v37, v51, &v38, ObjectType, *((void *)&v14 + 1));
  swift_unknownObjectRelease();
  if (v37[1]) {
    goto LABEL_35;
  }
  uint64_t v20 = v37[0];
  char v38 = 0.0;
  char v39 = 1;
  v51[0] = *((void *)&v48 + 1);
  uint64_t v21 = *(void *)(*((void *)&v48 + 1) + 16);
  if (!v21)
  {
LABEL_31:
    outlined retain of Calendar.RecurrenceRule((uint64_t)&v43);
    long long v36 = swift_bridgeObjectRetain();
    uint64_t v35 = (void *)specialized Sequence.flatMap<A>(_:)(v36, (uint64_t *)&v40, (uint64_t)&v43, *(double *)&v20, *((double *)&v20 + 1));
    outlined release of Calendar.RecurrenceRule((uint64_t)&v43);
    outlined release of DateComponents((uint64_t)__dst);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    goto LABEL_32;
  }
  uint64_t v22 = (uint64_t *)(*((void *)&v48 + 1) + 32);
  swift_bridgeObjectRetain();
  uint64_t v23 = (void *)MEMORY[0x1E4FBC860];
  while (1)
  {
    uint64_t v25 = *v22++;
    uint64_t v24 = v25;
    if (v25 >= 1)
    {
      *(void *)&v37[2] = *(void *)&__dst[2];
      BYTE8(v37[2]) = BYTE8(__dst[2]);
      *(void *)&long long v37[3] = *(void *)&__dst[3];
      BYTE8(v37[3]) = BYTE8(__dst[3]);
      *(void *)&_OWORD v37[4] = *(void *)&__dst[4];
      BYTE8(v37[4]) = BYTE8(__dst[4]);
      *(void *)&v37[5] = *(void *)&__dst[5];
      BYTE8(v37[5]) = BYTE8(__dst[5]);
      if (v24 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v26 = 0;
      }
      else {
        uint64_t v26 = v24;
      }
      *(void *)&v37[6] = v26;
      BYTE8(v37[6]) = v24 == 0x7FFFFFFFFFFFFFFFLL;
      *(void *)&v37[7] = *(void *)&__dst[7];
      BYTE8(v37[7]) = BYTE8(__dst[7]);
      *(void *)&v37[8] = *(void *)&__dst[8];
      BYTE8(v37[8]) = BYTE8(__dst[8]);
      *(void *)&v37[9] = *(void *)&__dst[9];
      BYTE8(v37[9]) = BYTE8(__dst[9]);
      *(void *)&v37[10] = *(void *)&__dst[10];
      BYTE8(v37[10]) = BYTE8(__dst[10]);
      *(void *)&v37[11] = *(void *)&__dst[11];
      BYTE8(v37[11]) = BYTE8(__dst[11]);
      *(void *)&v37[12] = *(void *)&__dst[12];
      BYTE8(v37[12]) = BYTE8(__dst[12]);
      *(void *)&v37[13] = *(void *)&__dst[13];
      BYTE8(v37[13]) = BYTE8(__dst[13]);
      *(void *)&v37[14] = *(void *)&__dst[14];
      BYTE8(v37[14]) = BYTE8(__dst[14]);
      *(void *)&v37[15] = *(void *)&__dst[15];
      BYTE8(v37[15]) = BYTE8(__dst[15]);
      BYTE8(v37[16]) = BYTE8(__dst[16]);
      *(void *)&v37[16] = *(void *)&__dst[16];
      *(void *)&v37[17] = *(void *)&__dst[17];
      WORD4(v37[17]) = WORD4(__dst[17]);
      v37[0] = __dst[0];
      v37[1] = __dst[1];
      outlined retain of DateComponents((uint64_t)__dst);
      goto LABEL_24;
    }
    outlined retain of DateComponents((uint64_t)__dst);
    uint64_t v27 = specialized getter of daysInYear #1 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheYear(dates:anchor:action:)(&v38, &v43, v6);
    uint64_t v28 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    uint64_t v29 = __OFADD__(v28, v24);
    __int16 v30 = v28 + v24;
    if (v29) {
      goto LABEL_34;
    }
    *(void *)&v37[2] = *(void *)&__dst[2];
    BYTE8(v37[2]) = BYTE8(__dst[2]);
    *(void *)&long long v37[3] = *(void *)&__dst[3];
    BYTE8(v37[3]) = BYTE8(__dst[3]);
    *(void *)&_OWORD v37[4] = *(void *)&__dst[4];
    BYTE8(v37[4]) = BYTE8(__dst[4]);
    *(void *)&v37[5] = *(void *)&__dst[5];
    BYTE8(v37[5]) = BYTE8(__dst[5]);
    long long v31 = v30 == 0x7FFFFFFFFFFFFFFFLL;
    if (v30 == 0x7FFFFFFFFFFFFFFFLL) {
      __int16 v30 = 0;
    }
    *(void *)&v37[6] = v30;
    BYTE8(v37[6]) = v31;
    *(void *)&v37[7] = *(void *)&__dst[7];
    BYTE8(v37[7]) = BYTE8(__dst[7]);
    *(void *)&v37[8] = *(void *)&__dst[8];
    BYTE8(v37[8]) = BYTE8(__dst[8]);
    *(void *)&v37[9] = *(void *)&__dst[9];
    BYTE8(v37[9]) = BYTE8(__dst[9]);
    *(void *)&v37[10] = *(void *)&__dst[10];
    BYTE8(v37[10]) = BYTE8(__dst[10]);
    *(void *)&v37[11] = *(void *)&__dst[11];
    BYTE8(v37[11]) = BYTE8(__dst[11]);
    *(void *)&v37[12] = *(void *)&__dst[12];
    BYTE8(v37[12]) = BYTE8(__dst[12]);
    *(void *)&v37[13] = *(void *)&__dst[13];
    BYTE8(v37[13]) = BYTE8(__dst[13]);
    *(void *)&v37[14] = *(void *)&__dst[14];
    BYTE8(v37[14]) = BYTE8(__dst[14]);
    *(void *)&v37[15] = *(void *)&__dst[15];
    BYTE8(v37[15]) = BYTE8(__dst[15]);
    BYTE8(v37[16]) = BYTE8(__dst[16]);
    *(void *)&v37[16] = *(void *)&__dst[16];
    *(void *)&v37[17] = *(void *)&__dst[17];
    WORD4(v37[17]) = WORD4(__dst[17]);
    v37[0] = __dst[0];
    v37[1] = __dst[1];
LABEL_24:
    outlined retain of DateComponents((uint64_t)v37);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
    }
    double v33 = v23[2];
    double v32 = v23[3];
    if (v33 >= v32 >> 1) {
      uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v23);
    }
    double v23[2] = v33 + 1;
    memcpy(&v23[36 * v33 + 4], v37, 0x11AuLL);
    outlined release of DateComponents((uint64_t)v37);
    if (!--v21)
    {
      outlined release of [String : AttributedString._AttributeValue]((uint64_t)v51);
      char v40 = v23;
      goto LABEL_31;
    }
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
}

Swift::Void __swiftcall Calendar.RecurrenceRule._expandOrLimitDaysOfTheMonth(dates:anchor:action:)(Swift::OpaquePointer *dates, Foundation::Date anchor, Foundation::ComponentAction action)
{
  void (*v19)(_OWORD *__return_ptr, _OWORD *, _OWORD *, uint64_t, void);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t (*v23)(void *, void *, _OWORD *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  void (*v28)(_OWORD *__return_ptr, void *, void *, uint64_t, uint64_t);
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int64_t v48;
  unint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  BOOL v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  BOOL v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  Swift::OpaquePointer *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(void *, char *, _OWORD *, uint64_t, uint64_t);
  uint64_t v85;
  int64_t v86;
  void v87[2];
  _OWORD v88[18];
  char v89;
  void *v90;
  _OWORD __dst[18];
  _OWORD __src[18];
  long long v93;
  long long v94;
  long long v95;
  long long v96;
  long long v97;
  long long v98;
  long long v99;
  uint64_t v100;
  void v101[2];

  double v6 = *(double *)action;
  long long v7 = v4[5];
  uint64_t v97 = v4[4];
  int64_t v98 = v7;
  uint64_t v99 = v4[6];
  uint64_t v100 = *((void *)v4 + 14);
  long long v8 = v4[1];
  uint64_t v93 = *v4;
  unint64_t v94 = v8;
  long long v9 = v4[3];
  unint64_t v95 = v4[2];
  uint64_t v96 = v9;
  if (v3)
  {
    outlined retain of Calendar.RecurrenceRule((uint64_t)&v93);
    uint64_t v21 = swift_bridgeObjectRetain();
    uint64_t v22 = (void *)specialized _ArrayProtocol.filter(_:)(v21, (uint64_t)&v93, (uint64_t (*)(uint64_t *, uint64_t))closure #1 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheMonth(dates:anchor:action:));
    outlined release of Calendar.RecurrenceRule((uint64_t)&v93);
    swift_bridgeObjectRelease();
    dates->_rawValue = v22;
    return;
  }
  uint64_t v10 = unk_1ECA2F6B0;
  if ((unk_1ECA2F6B0 & ~qword_1ECA2F6A8) == 0) {
    uint64_t v10 = 0;
  }
  uint64_t v11 = v10 | qword_1ECA2F6A8;
  uint64_t v13 = qword_1ECA2F6B8;
  uint64_t v12 = unk_1ECA2F6C0;
  if ((qword_1ECA2F6B8 & ~v11) == 0) {
    uint64_t v13 = 0;
  }
  uint64_t v14 = v13 | v11;
  if ((unk_1ECA2F6C0 & ~v14) == 0) {
    uint64_t v12 = 0;
  }
  __int16 v15 = v12 | v14;
  long long v16 = v93;
  *(void *)&__dst[0] = v12 | v14;
  if (v6 > 1.59271755e13) {
    double v6 = 1.59271755e13;
  }
  double v17 = fmax(v6, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  *(double *)int64_t v88 = v17;
  unint64_t v19 = *(void (**)(_OWORD *__return_ptr, _OWORD *, _OWORD *, uint64_t, void))(*((void *)&v93 + 1) + 192);
  swift_unknownObjectRetain();
  v19(__src, __dst, v88, ObjectType, *((void *)&v93 + 1));
  char v78 = dates;
  if ((v15 & 0x4000) != 0)
  {
    __src[0] = v16;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    uint64_t v20 = *((void *)&v16 + 1);
    if (*(void *)&__src[1])
    {
      __dst[0] = __src[1];
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)__dst);
    }
    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    uint64_t v20 = *((void *)&v16 + 1);
  }
  memcpy(__dst, __src, 0x11AuLL);
  uint64_t v90 = (void *)MEMORY[0x1E4FBC860];
  if (BYTE2(v94) != 5)
  {
    v101[0] = v98;
    char v62 = *(void *)(v98 + 16);
    if (!v62)
    {
LABEL_90:
      outlined retain of Calendar.RecurrenceRule((uint64_t)&v93);
      long long v76 = swift_bridgeObjectRetain();
      char v77 = specialized Sequence.flatMap<A>(_:)(v76, (uint64_t)&v93, (uint64_t *)&v90);
      outlined release of Calendar.RecurrenceRule((uint64_t)&v93);
      outlined release of DateComponents((uint64_t)__dst);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v78->_rawValue = (void *)v77;
      return;
    }
    long long v84 = *(void (**)(void *, char *, _OWORD *, uint64_t, uint64_t))(v20 + 144);
    uint64_t v85 = v20;
    char v63 = (uint64_t *)(v98 + 32);
    swift_bridgeObjectRetain();
    char v64 = v62 - 1;
    char v65 = (void *)MEMORY[0x1E4FBC860];
    while (1)
    {
      long long v67 = *v63++;
      uint64_t v66 = v67;
      LOBYTE(v87[0]) = 3;
      uint64_t v89 = 2;
      *(double *)int64_t v88 = v17;
      swift_unknownObjectRetain();
      v84(v87, &v89, v88, ObjectType, v85);
      char v69 = v68;
      char v71 = v70;
      swift_unknownObjectRelease();
      if (v71) {
        break;
      }
      if (__OFSUB__(v69, 1)) {
        goto LABEL_95;
      }
      if (v66 < 1)
      {
        if (__OFADD__(v69 - 1, 1)) {
          goto LABEL_97;
        }
        char v73 = v69 + v66;
        if (__OFADD__(v69, v66))
        {
LABEL_98:
          __break(1u);
          break;
        }
        uint64_t v72 = v73 == 0x7FFFFFFFFFFFFFFFLL;
        if (v73 == 0x7FFFFFFFFFFFFFFFLL) {
          char v73 = 0;
        }
      }
      else
      {
        uint64_t v72 = v66 == 0x7FFFFFFFFFFFFFFFLL;
        if (v66 == 0x7FFFFFFFFFFFFFFFLL) {
          char v73 = 0;
        }
        else {
          char v73 = v66;
        }
      }
      *(void *)&v88[2] = *(void *)&__dst[2];
      BYTE8(v88[2]) = BYTE8(__dst[2]);
      *(void *)&v88[3] = *(void *)&__dst[3];
      BYTE8(v88[3]) = BYTE8(__dst[3]);
      *(void *)&v88[4] = *(void *)&__dst[4];
      BYTE8(v88[4]) = BYTE8(__dst[4]);
      *(void *)&v88[5] = v73;
      BYTE8(v88[5]) = v72;
      *(void *)&v88[6] = *(void *)&__dst[6];
      BYTE8(v88[6]) = BYTE8(__dst[6]);
      *(void *)&v88[7] = *(void *)&__dst[7];
      BYTE8(v88[7]) = BYTE8(__dst[7]);
      *(void *)&v88[8] = *(void *)&__dst[8];
      BYTE8(v88[8]) = BYTE8(__dst[8]);
      *(void *)&v88[9] = *(void *)&__dst[9];
      BYTE8(v88[9]) = BYTE8(__dst[9]);
      *(void *)&v88[10] = *(void *)&__dst[10];
      BYTE8(v88[10]) = BYTE8(__dst[10]);
      *(void *)&v88[11] = *(void *)&__dst[11];
      BYTE8(v88[11]) = BYTE8(__dst[11]);
      *(void *)&v88[12] = *(void *)&__dst[12];
      BYTE8(v88[12]) = BYTE8(__dst[12]);
      *(void *)&v88[13] = *(void *)&__dst[13];
      BYTE8(v88[13]) = BYTE8(__dst[13]);
      *(void *)&v88[14] = *(void *)&__dst[14];
      BYTE8(v88[14]) = BYTE8(__dst[14]);
      *(void *)&v88[15] = *(void *)&__dst[15];
      BYTE8(v88[15]) = BYTE8(__dst[15]);
      BYTE8(v88[16]) = BYTE8(__dst[16]);
      *(void *)&v88[16] = *(void *)&__dst[16];
      *(void *)&v88[17] = *(void *)&__dst[17];
      WORD4(v88[17]) = WORD4(__dst[17]);
      v88[0] = __dst[0];
      v88[1] = __dst[1];
      outlined retain of DateComponents((uint64_t)__dst);
      outlined retain of DateComponents((uint64_t)v88);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v65[2] + 1, 1, v65);
      }
      long long v75 = v65[2];
      uint64_t v74 = v65[3];
      if (v75 >= v74 >> 1) {
        char v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v74 > 1), v75 + 1, 1, v65);
      }
      v65[2] = v75 + 1;
      memcpy(&v65[36 * v75 + 4], v88, 0x11AuLL);
      outlined release of DateComponents((uint64_t)v88);
      if (!v64)
      {
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)v101);
        uint64_t v90 = v65;
        goto LABEL_90;
      }
      --v64;
    }
    __break(1u);
    goto LABEL_100;
  }
  LOBYTE(v101[0]) = 2;
  LOBYTE(v87[0]) = 1;
  *(double *)int64_t v88 = v17;
  uint64_t v23 = *(uint64_t (**)(void *, void *, _OWORD *, uint64_t, uint64_t))(v20 + 144);
  swift_unknownObjectRetain();
  uint64_t v24 = v23(v101, v87, v88, ObjectType, v20);
  uint64_t v82 = v25;
  long long v83 = v24;
  uint64_t v27 = v26;
  swift_unknownObjectRelease();
  if (v27)
  {
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  LOBYTE(v87[0]) = 1;
  *(double *)unint64_t v101 = v17;
  uint64_t v28 = *(void (**)(_OWORD *__return_ptr, void *, void *, uint64_t, uint64_t))(v20 + 160);
  swift_unknownObjectRetain();
  v28(v88, v87, v101, ObjectType, v20);
  swift_unknownObjectRelease();
  if ((v88[1] & 1) == 0)
  {
    uint64_t v29 = *(double *)v88;
    v87[0] = 0;
    __int16 v30 = v98;
    v101[0] = v98;
    long long v31 = *(void *)(v98 + 16);
    if (v31)
    {
      double v32 = v98 + 32;
      swift_bridgeObjectRetain();
      double v33 = 0;
      char v34 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v80 = v31;
      char v81 = v30;
      char v79 = v30 + 32;
      do
      {
        if (v33 >= *(void *)(v30 + 16)) {
          goto LABEL_96;
        }
        uint64_t v35 = *(void *)(v32 + 8 * v33);
        if (v35 < 1)
        {
          char v39 = specialized getter of monthsToDaysInMonth #1 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheMonth(dates:anchor:action:)(v87, v83, v82, (uint64_t *)&v93, v29);
          char v40 = v39;
          char v41 = 0;
          uint64_t v42 = v39 + 64;
          long long v43 = 1 << *(unsigned char *)(v39 + 32);
          if (v43 < 64) {
            long long v44 = ~(-1 << v43);
          }
          else {
            long long v44 = -1;
          }
          long long v45 = v44 & *(void *)(v39 + 64);
          BOOL v86 = (unint64_t)(v43 + 63) >> 6;
          if (v45)
          {
LABEL_37:
            long long v46 = __clz(__rbit64(v45));
            v45 &= v45 - 1;
            long long v47 = v46 | (v41 << 6);
            goto LABEL_52;
          }
          while (1)
          {
            char v48 = v41 + 1;
            if (__OFADD__(v41, 1)) {
              goto LABEL_93;
            }
            if (v48 >= v86) {
              goto LABEL_21;
            }
            uint64_t v49 = *(void *)(v42 + 8 * v48);
            ++v41;
            if (!v49)
            {
              char v41 = v48 + 1;
              if (v48 + 1 >= v86) {
                goto LABEL_21;
              }
              uint64_t v49 = *(void *)(v42 + 8 * v41);
              if (!v49)
              {
                char v41 = v48 + 2;
                if (v48 + 2 >= v86) {
                  goto LABEL_21;
                }
                uint64_t v49 = *(void *)(v42 + 8 * v41);
                if (!v49)
                {
                  uint64_t v50 = v48 + 3;
                  if (v50 >= v86)
                  {
LABEL_21:
                    swift_release();
                    long long v31 = v80;
                    __int16 v30 = v81;
                    double v32 = v79;
                    goto LABEL_22;
                  }
                  uint64_t v49 = *(void *)(v42 + 8 * v50);
                  if (!v49)
                  {
                    while (1)
                    {
                      char v41 = v50 + 1;
                      if (__OFADD__(v50, 1)) {
                        break;
                      }
                      if (v41 >= v86) {
                        goto LABEL_21;
                      }
                      uint64_t v49 = *(void *)(v42 + 8 * v41);
                      ++v50;
                      if (v49) {
                        goto LABEL_51;
                      }
                    }
LABEL_94:
                    __break(1u);
LABEL_95:
                    __break(1u);
LABEL_96:
                    __break(1u);
LABEL_97:
                    __break(1u);
                    goto LABEL_98;
                  }
                  char v41 = v50;
                }
              }
            }
LABEL_51:
            long long v45 = (v49 - 1) & v49;
            long long v47 = __clz(__rbit64(v49)) + (v41 << 6);
LABEL_52:
            long long v51 = 8 * v47;
            long long v52 = *(void *)(*(void *)(v40 + 56) + 8 * v47);
            long long v53 = __OFADD__(v52, 1);
            Swift::OpaquePointer v54 = v52 + 1;
            if (v53)
            {
              __break(1u);
LABEL_92:
              __break(1u);
LABEL_93:
              __break(1u);
              goto LABEL_94;
            }
            long long v53 = __OFADD__(v54, v35);
            Foundation::Date v55 = v54 + v35;
            if (v53) {
              goto LABEL_92;
            }
            uint64_t v56 = *(void *)(*(void *)(v40 + 48) + v51);
            *(void *)&v88[2] = *(void *)&__dst[2];
            BYTE8(v88[2]) = BYTE8(__dst[2]);
            *(void *)&v88[3] = *(void *)&__dst[3];
            BYTE8(v88[3]) = BYTE8(__dst[3]);
            Swift::Int v57 = v55 == 0x7FFFFFFFFFFFFFFFLL;
            if (v55 == 0x7FFFFFFFFFFFFFFFLL) {
              Foundation::Date v55 = 0;
            }
            uint64_t v58 = v56 == 0x7FFFFFFFFFFFFFFFLL;
            if (v56 == 0x7FFFFFFFFFFFFFFFLL) {
              uint64_t v56 = 0;
            }
            *(void *)&v88[4] = v56;
            char v59 = v58;
            BYTE8(v88[4]) = v59;
            *(void *)&v88[5] = v55;
            BYTE8(v88[5]) = v57;
            *(void *)&v88[6] = *(void *)&__dst[6];
            BYTE8(v88[6]) = BYTE8(__dst[6]);
            *(void *)&v88[7] = *(void *)&__dst[7];
            BYTE8(v88[7]) = BYTE8(__dst[7]);
            *(void *)&v88[8] = *(void *)&__dst[8];
            BYTE8(v88[8]) = BYTE8(__dst[8]);
            *(void *)&v88[9] = *(void *)&__dst[9];
            BYTE8(v88[9]) = BYTE8(__dst[9]);
            *(void *)&v88[10] = *(void *)&__dst[10];
            BYTE8(v88[10]) = BYTE8(__dst[10]);
            *(void *)&v88[11] = *(void *)&__dst[11];
            BYTE8(v88[11]) = BYTE8(__dst[11]);
            *(void *)&v88[12] = *(void *)&__dst[12];
            BYTE8(v88[12]) = BYTE8(__dst[12]);
            *(void *)&v88[13] = *(void *)&__dst[13];
            BYTE8(v88[13]) = BYTE8(__dst[13]);
            *(void *)&v88[14] = *(void *)&__dst[14];
            BYTE8(v88[14]) = BYTE8(__dst[14]);
            *(void *)&v88[15] = *(void *)&__dst[15];
            BYTE8(v88[15]) = BYTE8(__dst[15]);
            BYTE8(v88[16]) = BYTE8(__dst[16]);
            *(void *)&v88[16] = *(void *)&__dst[16];
            *(void *)&v88[17] = *(void *)&__dst[17];
            WORD4(v88[17]) = WORD4(__dst[17]);
            v88[0] = __dst[0];
            v88[1] = __dst[1];
            outlined retain of DateComponents((uint64_t)__dst);
            outlined retain of DateComponents((uint64_t)v88);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              char v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1, v34);
            }
            uint64_t v61 = v34[2];
            uint64_t v60 = v34[3];
            if (v61 >= v60 >> 1) {
              char v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v60 > 1), v61 + 1, 1, v34);
            }
            _OWORD v34[2] = v61 + 1;
            memcpy(&v34[36 * v61 + 4], v88, 0x11AuLL);
            outlined release of DateComponents((uint64_t)v88);
            uint64_t v90 = v34;
            if (v45) {
              goto LABEL_37;
            }
          }
        }
        *(void *)&v88[2] = *(void *)&__dst[2];
        BYTE8(v88[2]) = BYTE8(__dst[2]);
        *(void *)&v88[3] = *(void *)&__dst[3];
        BYTE8(v88[3]) = BYTE8(__dst[3]);
        *(void *)&v88[4] = *(void *)&__dst[4];
        BYTE8(v88[4]) = BYTE8(__dst[4]);
        if (v35 == 0x7FFFFFFFFFFFFFFFLL) {
          long long v36 = 0;
        }
        else {
          long long v36 = v35;
        }
        *(void *)&v88[5] = v36;
        BYTE8(v88[5]) = v35 == 0x7FFFFFFFFFFFFFFFLL;
        *(void *)&v88[6] = *(void *)&__dst[6];
        BYTE8(v88[6]) = BYTE8(__dst[6]);
        *(void *)&v88[7] = *(void *)&__dst[7];
        BYTE8(v88[7]) = BYTE8(__dst[7]);
        *(void *)&v88[8] = *(void *)&__dst[8];
        BYTE8(v88[8]) = BYTE8(__dst[8]);
        *(void *)&v88[9] = *(void *)&__dst[9];
        BYTE8(v88[9]) = BYTE8(__dst[9]);
        *(void *)&v88[10] = *(void *)&__dst[10];
        BYTE8(v88[10]) = BYTE8(__dst[10]);
        *(void *)&v88[11] = *(void *)&__dst[11];
        BYTE8(v88[11]) = BYTE8(__dst[11]);
        *(void *)&v88[12] = *(void *)&__dst[12];
        BYTE8(v88[12]) = BYTE8(__dst[12]);
        *(void *)&v88[13] = *(void *)&__dst[13];
        BYTE8(v88[13]) = BYTE8(__dst[13]);
        *(void *)&v88[14] = *(void *)&__dst[14];
        BYTE8(v88[14]) = BYTE8(__dst[14]);
        *(void *)&v88[15] = *(void *)&__dst[15];
        BYTE8(v88[15]) = BYTE8(__dst[15]);
        BYTE8(v88[16]) = BYTE8(__dst[16]);
        *(void *)&v88[16] = *(void *)&__dst[16];
        *(void *)&v88[17] = *(void *)&__dst[17];
        WORD4(v88[17]) = WORD4(__dst[17]);
        v88[0] = __dst[0];
        v88[1] = __dst[1];
        outlined retain of DateComponents((uint64_t)__dst);
        outlined retain of DateComponents((uint64_t)v88);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1, v34);
        }
        char v38 = v34[2];
        long long v37 = v34[3];
        if (v38 >= v37 >> 1) {
          char v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v37 > 1), v38 + 1, 1, v34);
        }
        _OWORD v34[2] = v38 + 1;
        memcpy(&v34[36 * v38 + 4], v88, 0x11AuLL);
        outlined release of DateComponents((uint64_t)v88);
        uint64_t v90 = v34;
LABEL_22:
        ++v33;
      }
      while (v33 != v31);
      outlined release of [String : AttributedString._AttributeValue]((uint64_t)v101);
    }
    swift_bridgeObjectRelease();
    goto LABEL_90;
  }
LABEL_101:
  __break(1u);
}

Swift::Void __swiftcall Calendar.RecurrenceRule._expandOrLimitTimeComponent(_:dates:anchor:action:)(Foundation::Calendar::Component _, Swift::OpaquePointer *dates, Foundation::Date anchor, Foundation::ComponentAction action)
{
  void (*v22)(long long *__return_ptr, _OWORD *, void *, uint64_t, void);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  Swift::Int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  long long v37;
  uint64_t v38;
  uint64_t v39;
  Swift::OpaquePointer *v40;
  char v41;
  unsigned char __dst[282];
  void v43[36];
  _OWORD __src[18];
  uint64_t v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  uint64_t v53;
  char v54;
  unsigned char v55[7];
  uint64_t v56;
  char v57;
  long long v58;
  long long v59;
  long long v60;
  long long v61;
  long long v62;
  long long v63;
  long long v64;
  long long v65;
  long long v66;
  char v67;
  long long v68;
  long long v69;
  long long v70;
  long long v71;
  long long v72;
  long long v73;
  long long v74;
  long long v75;
  long long v76;
  char v77;
  char v78;
  _DWORD v79[2];
  char v80;
  long long v81;
  long long v82;
  long long v83;
  long long v84;
  long long v85;
  long long v86;
  long long v87;
  _OWORD v88[3];
  long long v89;
  _OWORD v90[3];
  uint64_t v91;
  Swift::Int_optional v92;

  char v6 = v4;
  int v8 = *(unsigned __int8 *)_;
  double v9 = *(double *)action;
  long long v10 = *(_OWORD *)(v5 + 80);
  v90[0] = *(_OWORD *)(v5 + 64);
  v90[1] = v10;
  v90[2] = *(_OWORD *)(v5 + 96);
  long long v91 = *(void *)(v5 + 112);
  long long v11 = *(_OWORD *)(v5 + 16);
  v88[0] = *(_OWORD *)v5;
  v88[1] = v11;
  long long v12 = *(_OWORD *)(v5 + 48);
  v88[2] = *(_OWORD *)(v5 + 32);
  uint64_t v89 = v12;
  switch(v8)
  {
    case 6:
      uint64_t v13 = (uint64_t *)&v89;
      char v14 = 5;
      break;
    case 5:
      uint64_t v13 = (uint64_t *)&v89 + 1;
      char v14 = 4;
      break;
    case 4:
      uint64_t v13 = (uint64_t *)v90;
      char v14 = 3;
      break;
    default:
      return;
  }
  uint64_t v15 = *v13;
  swift_bridgeObjectRetain();
  if (v6)
  {
    outlined retain of Calendar.RecurrenceRule((uint64_t)v88);
    swift_bridgeObjectRetain();
    uint64_t v25 = swift_bridgeObjectRetain();
    uint64_t v26 = (void *)specialized _ArrayProtocol.filter(_:)(v25, (uint64_t *)v88, v8, v15);
    swift_bridgeObjectRelease();
    outlined release of Calendar.RecurrenceRule((uint64_t)v88);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    dates->_rawValue = v26;
  }
  else
  {
    char v40 = dates;
    uint64_t v16 = unk_1ECA2F628;
    if ((unk_1ECA2F628 & ~qword_1ECA2F620) == 0) {
      uint64_t v16 = 0;
    }
    __int16 v17 = v16 | qword_1ECA2F620;
    long long v18 = v88[0];
    *(void *)&__src[0] = v16 | qword_1ECA2F620;
    double v19 = 1.59271755e13;
    if (v9 <= 1.59271755e13) {
      double v19 = v9;
    }
    double v20 = fmax(v19, -2.11845067e11);
    uint64_t ObjectType = swift_getObjectType();
    *(double *)long long v43 = v20;
    uint64_t v22 = *(void (**)(long long *__return_ptr, _OWORD *, void *, uint64_t, void))(*((void *)&v88[0] + 1)
                                                                                             + 192);
    swift_unknownObjectRetain();
    v22(&v46, __src, v43, ObjectType, *((void *)&v88[0] + 1));
    if ((v17 & 0x4000) != 0)
    {
      long long v46 = v18;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if ((void)v47)
      {
        __src[0] = v47;
        swift_unknownObjectRetain();
        Calendar.timeZone.setter((uint64_t *)__src);
      }
    }
    swift_unknownObjectRelease();
    uint64_t v85 = v50;
    BOOL v86 = v51;
    uint64_t v87 = v52;
    char v81 = v46;
    uint64_t v82 = v47;
    long long v84 = v49;
    long long v83 = v48;
    uint64_t v23 = v53;
    *(_DWORD *)((char *)v79 + 3) = *(_DWORD *)&v55[3];
    v79[0] = *(_DWORD *)v55;
    uint64_t v24 = v56;
    uint64_t v74 = v64;
    long long v75 = v65;
    long long v76 = v66;
    char v77 = v67;
    char v70 = v60;
    char v71 = v61;
    uint64_t v72 = v62;
    char v73 = v63;
    long long v68 = v58;
    char v69 = v59;
    uint64_t v80 = v54;
    char v78 = v57;
    if (v8 == 6)
    {
      uint64_t v24 = 0;
      uint64_t v23 = 0;
      uint64_t v80 = 1;
      char v78 = 1;
    }
    else if (v8 == 5)
    {
      uint64_t v23 = 0;
      uint64_t v80 = 1;
    }
    uint64_t v27 = *(void *)(v15 + 16);
    char v39 = v23;
    if (v27)
    {
      long long v45 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 0);
      uint64_t v28 = v24;
      uint64_t v29 = 0;
      __src[4] = v50;
      __src[5] = v51;
      __src[6] = v52;
      __src[0] = v46;
      __src[1] = v47;
      __src[2] = v48;
      __src[3] = v49;
      *(_OWORD *)((char *)&__src[16] + 9) = v66;
      *(_OWORD *)((char *)&__src[14] + 9) = v64;
      *(_OWORD *)((char *)&__src[15] + 9) = v65;
      *(_OWORD *)((char *)&__src[10] + 9) = v60;
      *(_OWORD *)((char *)&__src[11] + 9) = v61;
      *(_OWORD *)((char *)&__src[12] + 9) = v62;
      *(_OWORD *)((char *)&__src[13] + 9) = v63;
      *(_OWORD *)((char *)&__src[8] + 9) = v58;
      BYTE8(__src[7]) = v80;
      *(_DWORD *)((char *)&__src[7] + 9) = *(_DWORD *)v55;
      __int16 v30 = v45;
      *(void *)&__src[7] = v23;
      HIDWORD(__src[7]) = *(_DWORD *)&v55[3];
      char v38 = v28;
      *(void *)&__src[8] = v28;
      BYTE8(__src[8]) = v78;
      BYTE9(__src[17]) = v67;
      long long v31 = v27 - 1;
      *(_OWORD *)((char *)&__src[9] + 9) = v59;
      while (1)
      {
        double v32 = *(void *)(v15 + 8 * v29 + 32);
        memcpy(__dst, __src, sizeof(__dst));
        char v41 = v8;
        v92.Foundation::Morphology::Definiteness value = v32;
        v92.is_nil = 0;
        DateComponents.setValue(_:for:)(v92, (Foundation::Calendar::Component)&v41);
        memcpy(v43, __dst, 0x11AuLL);
        outlined retain of DateComponents((uint64_t)__src);
        long long v45 = v30;
        char v34 = *(void *)(v30 + 16);
        double v33 = *(void *)(v30 + 24);
        if (v34 >= v33 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
          __int16 v30 = v45;
        }
        *(void *)(v30 + 16) = v34 + 1;
        memcpy((void *)(v30 + 288 * v34 + 32), v43, 0x11AuLL);
        if (v31 == v29) {
          break;
        }
        ++v29;
      }
      swift_bridgeObjectRelease();
      uint64_t v24 = v38;
    }
    else
    {
      swift_bridgeObjectRelease();
      __int16 v30 = MEMORY[0x1E4FBC860];
    }
    outlined retain of Calendar.RecurrenceRule((uint64_t)v88);
    swift_bridgeObjectRetain();
    uint64_t v35 = swift_bridgeObjectRetain();
    long long v36 = specialized Sequence.flatMap<A>(_:)(v35, (uint64_t)v88, v14, v30);
    swift_bridgeObjectRelease();
    outlined release of Calendar.RecurrenceRule((uint64_t)v88);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_OWORD *)((char *)&__src[16] + 9) = v76;
    __src[4] = v85;
    __src[5] = v86;
    __src[6] = v87;
    __src[0] = v81;
    __src[1] = v82;
    __src[2] = v83;
    __src[3] = v84;
    *(_OWORD *)((char *)&__src[14] + 9) = v74;
    *(_OWORD *)((char *)&__src[15] + 9) = v75;
    *(_OWORD *)((char *)&__src[10] + 9) = v70;
    *(_OWORD *)((char *)&__src[11] + 9) = v71;
    *(_OWORD *)((char *)&__src[12] + 9) = v72;
    *(_OWORD *)((char *)&__src[13] + 9) = v73;
    long long v37 = v69;
    *(_OWORD *)((char *)&__src[8] + 9) = v68;
    v40->_rawValue = (void *)v36;
    *(void *)&__src[7] = v39;
    BYTE8(__src[7]) = v80;
    *(_DWORD *)((char *)&__src[7] + 9) = v79[0];
    HIDWORD(__src[7]) = *(_DWORD *)((char *)v79 + 3);
    *(void *)&__src[8] = v24;
    BYTE8(__src[8]) = v78;
    BYTE9(__src[17]) = v77;
    *(_OWORD *)((char *)&__src[9] + 9) = v37;
    outlined release of DateComponents((uint64_t)__src);
  }
}

uint64_t specialized Sequence.reversed()(uint64_t result)
{
  uint64_t v1 = (void *)result;
  unint64_t v2 = *(void *)(result + 16);
  if (v2 < 2) {
    return (uint64_t)v1;
  }
  unint64_t v3 = 0;
  unint64_t v4 = v2 >> 1;
  for (unint64_t i = v2 + 3; ; --i)
  {
    if (v3 == i - 4) {
      goto LABEL_5;
    }
    unint64_t v6 = v1[2];
    if (v3 >= v6) {
      break;
    }
    if (i - 4 >= v6) {
      goto LABEL_12;
    }
    uint64_t v7 = v1[v3 + 4];
    uint64_t v8 = v1[i];
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
      uint64_t v1 = (void *)result;
    }
    v1[v3 + 4] = v8;
    v1[i] = v7;
LABEL_5:
    if (v4 == ++v3) {
      return (uint64_t)v1;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

Foundation::Date_optional __swiftcall Calendar.DatesByRecurring.Iterator.next()()
{
  uint64_t v3 = v0;
  if (*(unsigned char *)(v1 + 576))
  {
LABEL_2:
    *(void *)uint64_t v3 = 0;
    char v4 = 1;
LABEL_26:
    *(unsigned char *)(v3 + 8) = v4;
    goto LABEL_29;
  }
  uint64_t v5 = (unsigned char *)(v1 + 576);
  if (*(unsigned char *)(v1 + 48) == 1 && *(void *)(v1 + 168) >= *(void *)(v1 + 40))
  {
LABEL_24:
    char v4 = 1;
    *uint64_t v5 = 1;
    *(void *)uint64_t v3 = 0;
    goto LABEL_26;
  }
  unint64_t v6 = *(void **)(v1 + 600);
  while (!v6[2])
  {
    Calendar.DatesByRecurring.Iterator.nextGroup()();
    unint64_t v6 = *(void **)(v1 + 600);
    if (v6[2])
    {
      *(void *)(v1 + 592) = 0;
    }
    else
    {
      uint64_t v13 = *(void *)(v1 + 592);
      BOOL v11 = __OFADD__(v13, 1);
      uint64_t v14 = v13 + 1;
      if (v11) {
        goto LABEL_28;
      }
      *(void *)(v1 + 592) = v14;
      if (*(void *)(v1 + 584) < v14) {
        goto LABEL_24;
      }
    }
LABEL_8:
    if (*v5) {
      goto LABEL_2;
    }
  }
  LOBYTE(v7) = swift_isUniquelyReferenced_nonNull_native();
  if (v7)
  {
    uint64_t v8 = v6[2];
    if (!v8) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v6);
    unint64_t v6 = v7;
    uint64_t v8 = v7[2];
    if (!v8)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
  }
  uint64_t v9 = v8 - 1;
  double v2 = *(double *)&v6[v9 + 4];
  _OWORD v6[2] = v9;
  *(void *)(v1 + 600) = v6;
  uint64_t v10 = *(void *)(v1 + 168);
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (!v11)
  {
    *(void *)(v1 + 168) = v12;
    if (!*(unsigned char *)(v1 + 48) && *(double *)(v1 + 40) < v2) {
      goto LABEL_24;
    }
    if (*(unsigned char *)(v1 + 144)) {
      goto LABEL_25;
    }
    if (*(double *)(v1 + 136) < v2) {
      goto LABEL_24;
    }
    if (v2 >= *(double *)(v1 + 128))
    {
LABEL_25:
      char v4 = 0;
      *(double *)uint64_t v3 = v2;
      goto LABEL_26;
    }
    goto LABEL_8;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  result.Foundation::Morphology::Definiteness value = *(Foundation::Date *)&v2;
  result.is_nil = (char)v7;
  return result;
}

double protocol witness for Sequence.makeIterator() in conformance Calendar.DatesByRecurring@<D0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 24);
  char v3 = *(unsigned char *)(v1 + 25);
  char v4 = *(unsigned char *)(v1 + 26);
  char v5 = *(unsigned char *)(v1 + 48);
  uint64_t v6 = *(void *)(v1 + 120);
  char v7 = *(unsigned char *)(v1 + 144);
  uint64_t v24 = *(void *)v1;
  long long v13 = *(_OWORD *)(v1 + 8);
  char v14 = v2;
  char v15 = v3;
  char v16 = v4;
  long long v17 = *(_OWORD *)(v1 + 32);
  char v18 = v5;
  long long v8 = *(_OWORD *)(v1 + 72);
  long long v19 = *(_OWORD *)(v1 + 56);
  long long v20 = v8;
  long long v9 = *(_OWORD *)(v1 + 104);
  long long v21 = *(_OWORD *)(v1 + 88);
  long long v22 = v9;
  uint64_t v23 = v6;
  long long v11 = *(_OWORD *)(v1 + 128);
  char v12 = v7;
  return Calendar.DatesByRecurring.Iterator.init(start:matching:range:)(&v24, (uint64_t)&v13, (uint64_t)&v11, a1);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Calendar.DatesByRecurring()
{
  long long v1 = *(_OWORD *)(v0 + 112);
  v8[6] = *(_OWORD *)(v0 + 96);
  v8[7] = v1;
  v8[8] = *(_OWORD *)(v0 + 128);
  char v9 = *(unsigned char *)(v0 + 144);
  long long v2 = *(_OWORD *)(v0 + 48);
  _OWORD v8[2] = *(_OWORD *)(v0 + 32);
  v8[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 80);
  _OWORD v8[4] = *(_OWORD *)(v0 + 64);
  _OWORD v8[5] = v3;
  long long v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v8);
  uint64_t v6 = v5;
  outlined release of Calendar.DatesByRecurring((uint64_t)v8);
  return v6;
}

void protocol witness for Sequence._copyContents(initializing:) in conformance Calendar.DatesByRecurring(char *a1, double *a2, uint64_t a3)
{
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance Calendar.DatesByRecurring@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5(a1, a2);
}

uint64_t closure #2 in Calendar.RecurrenceRule._expandWeeks(dates:anchor:)@<X0>(double *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void (*v10)(void *__return_ptr, uint64_t *, _OWORD *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t *__return_ptr, _OWORD *, double *, void, uint64_t, uint64_t);
  uint64_t v27;
  double v28;
  _OWORD v29[2];
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  BOOL v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  uint64_t v79;
  char v80;
  void v81[33];
  char v82;
  _OWORD v83[2];
  uint64_t v84;

  double v6 = *a1;
  v83[0] = *a2;
  long long v84 = 2048;
  if (v6 > 1.59271755e13) {
    double v6 = 1.59271755e13;
  }
  double v7 = fmax(v6, -2.11845067e11);
  uint64_t v8 = *((void *)&v83[0] + 1);
  uint64_t ObjectType = swift_getObjectType();
  *(double *)uint64_t v29 = v7;
  uint64_t v10 = *(void (**)(void *__return_ptr, uint64_t *, _OWORD *, uint64_t, uint64_t))(*((void *)&v83[0] + 1)
                                                                                           + 192);
  outlined retain of Locale((uint64_t)v83);
  uint64_t v27 = ObjectType;
  v10(v81, &v84, v29, ObjectType, v8);
  outlined release of DateComponents((uint64_t)v81);
  Foundation::Date_optional result = outlined release of Locale((uint64_t)v83);
  if (v82) {
    char v12 = 0;
  }
  else {
    char v12 = v81[32];
  }
  long long v13 = *(void *)(a3 + 16);
  if (!v13)
  {
    char v18 = (void *)MEMORY[0x1E4FBC860];
LABEL_23:
    *a4 = v18;
    return result;
  }
  uint64_t v26 = *(void (**)(uint64_t *__return_ptr, _OWORD *, double *, void, uint64_t, uint64_t))(v8 + 200);
  Foundation::Date_optional result = swift_bridgeObjectRetain();
  char v14 = *(void *)(a3 + 32);
  char v15 = __OFSUB__(v14, v12);
  char v16 = v14 - v12;
  if (!v15)
  {
    long long v17 = 0;
    char v18 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v24 = v8;
    uint64_t v25 = a3;
    while (1)
    {
      char v78 = 1;
      long long v19 = v16 == 0x7FFFFFFFFFFFFFFFLL;
      if (v16 == 0x7FFFFFFFFFFFFFFFLL) {
        char v16 = 0;
      }
      char v77 = 1;
      long long v76 = 1;
      long long v75 = 1;
      uint64_t v74 = 1;
      char v73 = 1;
      uint64_t v72 = 1;
      char v71 = 1;
      char v70 = 1;
      char v69 = 1;
      long long v68 = 1;
      long long v67 = 1;
      uint64_t v66 = 1;
      char v65 = 1;
      char v64 = v19;
      char v63 = 1;
      __int16 v30 = 0;
      memset(v29, 0, sizeof(v29));
      long long v31 = v78;
      double v32 = 0;
      double v33 = 1;
      char v34 = 0;
      uint64_t v35 = 1;
      long long v36 = 0;
      long long v37 = 1;
      char v38 = 0;
      char v39 = 1;
      char v40 = 0;
      char v41 = 1;
      uint64_t v42 = 0;
      long long v43 = 1;
      long long v44 = 0;
      long long v45 = 1;
      long long v46 = 0;
      long long v47 = 1;
      char v48 = 0;
      uint64_t v49 = 1;
      uint64_t v50 = 0;
      long long v51 = 1;
      long long v52 = 0;
      long long v53 = 1;
      Swift::OpaquePointer v54 = 0;
      Foundation::Date v55 = 1;
      uint64_t v56 = 0;
      Swift::Int v57 = 1;
      uint64_t v58 = v16;
      char v59 = v19;
      uint64_t v60 = 0;
      uint64_t v61 = 1;
      char v62 = 2;
      uint64_t v28 = v7;
      outlined retain of Locale((uint64_t)v83);
      v26(&v79, v29, &v28, 0, v27, v8);
      Foundation::Date_optional result = outlined release of Locale((uint64_t)v83);
      if ((v80 & 1) == 0)
      {
        long long v20 = v79;
        Foundation::Date_optional result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          Foundation::Date_optional result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
          char v18 = (void *)result;
        }
        long long v22 = v18[2];
        long long v21 = v18[3];
        if (v22 >= v21 >> 1)
        {
          Foundation::Date_optional result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v18);
          char v18 = (void *)result;
        }
        void v18[2] = v22 + 1;
        v18[v22 + 4] = v20;
        uint64_t v8 = v24;
        a3 = v25;
      }
      if (v13 - 1 == v17) {
        break;
      }
      uint64_t v23 = *(void *)(a3 + 8 * v17++ + 40);
      char v15 = __OFSUB__(v23, v12);
      char v16 = v23 - v12;
      if (v15) {
        goto LABEL_24;
      }
    }
    Foundation::Date_optional result = swift_bridgeObjectRelease();
    goto LABEL_23;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t specialized getter of monthRange #1 in Calendar.RecurrenceRule._expandOrLimitMonths(dates:anchor:action:)(uint64_t a1, long long *a2, double a3)
{
  if (*(unsigned char *)(a1 + 16) != 1) {
    return *(void *)a1;
  }
  char v15 = 2;
  char v14 = 1;
  if (a3 > 1.59271755e13) {
    a3 = 1.59271755e13;
  }
  double v4 = fmax(a3, -2.11845067e11);
  long long v16 = *a2;
  uint64_t v5 = *((void *)&v16 + 1);
  uint64_t ObjectType = swift_getObjectType();
  double v13 = v4;
  double v7 = *(uint64_t (**)(void, void, void, void, void))(*((void *)&v16 + 1) + 144);
  outlined retain of Locale((uint64_t)&v16);
  uint64_t v8 = v7(&v15, &v14, &v13, ObjectType, v5);
  uint64_t v10 = v9;
  LOBYTE(ObjectType) = v11;
  uint64_t result = outlined release of Locale((uint64_t)&v16);
  if ((ObjectType & 1) == 0)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v10;
    *(unsigned char *)(a1 + 16) = 0;
    return v8;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheMonth(dates:anchor:action:)(double *a1, uint64_t a2)
{
  void (*v7)(void *__return_ptr, void, void, void, void);
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void, void, void, void, void);
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  double v22;
  char v23;
  char v24;
  void v25[11];
  char v26;
  uint64_t v27;
  double v28;
  _OWORD v29[2];

  double v3 = *a1;
  v29[0] = *(_OWORD *)a2;
  uint64_t v27 = 8;
  if (v3 > 1.59271755e13) {
    double v3 = 1.59271755e13;
  }
  double v4 = fmax(v3, -2.11845067e11);
  uint64_t v5 = *((void *)&v29[0] + 1);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v28 = v4;
  double v7 = *(void (**)(void *__return_ptr, void, void, void, void))(*((void *)&v29[0] + 1) + 192);
  outlined retain of Locale((uint64_t)v29);
  v7(v25, &v27, &v28, ObjectType, v5);
  outlined release of DateComponents((uint64_t)v25);
  outlined release of Locale((uint64_t)v29);
  if (v26) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v25[10];
  }
  uint64_t v9 = *(double *)(a2 + 80);
  uint64_t v28 = v9;
  uint64_t v10 = *(void *)(*(void *)&v9 + 16);
  if (v10)
  {
    char v11 = (uint64_t *)(*(void *)&v9 + 32);
    uint64_t result = swift_bridgeObjectRetain();
    double v13 = 0;
    char v14 = 1;
    while (1)
    {
      long long v16 = *v11++;
      char v15 = v16;
      if (v16 >= 1)
      {
        if (v15 == v8) {
          goto LABEL_19;
        }
      }
      else
      {
        if ((v14 & 1) == 0) {
          goto LABEL_13;
        }
        uint64_t v24 = 3;
        uint64_t v23 = 2;
        long long v22 = v4;
        long long v17 = *(void (**)(void, void, void, void, void))(v5 + 144);
        outlined retain of Locale((uint64_t)v29);
        v17(&v24, &v23, &v22, ObjectType, v5);
        double v13 = v18;
        long long v20 = v19;
        uint64_t result = outlined release of Locale((uint64_t)v29);
        if (v20)
        {
          char v14 = 1;
        }
        else
        {
LABEL_13:
          if (__OFADD__(v13, v15))
          {
            __break(1u);
            return result;
          }
          if (v13 + v15 == v8)
          {
LABEL_19:
            long long v21 = 1;
            goto LABEL_20;
          }
          char v14 = 0;
        }
      }
      if (!--v10)
      {
        long long v21 = 0;
LABEL_20:
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v28);
        return v21;
      }
    }
  }
  return 0;
}

uint64_t specialized getter of monthsToDaysInMonth #1 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheMonth(dates:anchor:action:)(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, double a5)
{
  void (*v87)(void *__return_ptr, void, void, void, void);
  uint64_t v88;
  uint64_t ObjectType;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  long long v94;
  char v95;
  double v96;
  unsigned __int8 v97;
  __int16 v98;
  id v99;
  long long v100;
  uint64_t v101;
  uint64_t v102[36];
  long long v103[18];
  _OWORD v104[18];
  uint64_t __dst[36];
  void __src[37];

  uint64_t v9 = (void *)*a1;
  if (*a1)
  {
    swift_bridgeObjectRetain();
    return (uint64_t)v9;
  }
  if (a2 == a3)
  {
    uint64_t v9 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_116;
  }
  long long v84 = a1;
  if (a3 < a2) {
    goto LABEL_125;
  }
  double v8 = a5;
  uint64_t v5 = *a4;
  uint64_t v7 = a4[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v87 = *(void (**)(void *__return_ptr, void, void, void, void))(v7 + 192);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  if (a2 >= a3)
  {
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }
  double v6 = 0;
  if (v8 <= 1.59271755e13) {
    double v12 = v8;
  }
  else {
    double v12 = 1.59271755e13;
  }
  uint64_t v9 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v86 = a3;
  double v13 = fmax(v12, -2.11845067e11);
  uint64_t v14 = a2;
  uint64_t v85 = a2;
  while (2)
  {
    uint64_t v90 = v14;
    long long v91 = v9;
    uint64_t v15 = static _SetStorage.allocate(capacity:)();
    long long v16 = (void *)(v15 + 56);
    Swift::UInt v17 = byte_1ECA2F650;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v17);
    Swift::Int v18 = Hasher._finalize()();
    char v19 = *(unsigned char *)(v15 + 32);
    uint64_t v20 = -1 << v19;
    unint64_t v21 = v18 & ~(-1 << v19);
    unint64_t v22 = v21 >> 6;
    uint64_t v23 = *(void *)(v15 + 56 + 8 * (v21 >> 6));
    uint64_t v24 = 1 << v21;
    uint64_t v25 = *(void *)(v15 + 48);
    if (((1 << v21) & v23) == 0) {
      goto LABEL_17;
    }
    char v26 = v19 & 0x3F;
    if (*(unsigned __int8 *)(v25 + v21) != v17)
    {
      uint64_t v27 = ~v20;
      while (1)
      {
        unint64_t v21 = (v21 + 1) & v27;
        unint64_t v22 = v21 >> 6;
        uint64_t v23 = v16[v21 >> 6];
        uint64_t v24 = 1 << v21;
        if ((v23 & (1 << v21)) == 0) {
          break;
        }
        if (*(unsigned __int8 *)(v25 + v21) == v17) {
          goto LABEL_19;
        }
      }
LABEL_17:
      v16[v22] = v24 | v23;
      *(unsigned char *)(v25 + v21) = v17;
      uint64_t v28 = *(void *)(v15 + 16);
      BOOL v29 = __OFADD__(v28, 1);
      uint64_t v30 = v28 + 1;
      if (v29) {
        goto LABEL_123;
      }
      *(void *)(v15 + 16) = v30;
      char v26 = *(unsigned char *)(v15 + 32) & 0x3F;
    }
LABEL_19:
    int64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 1 << v26;
    if (1 << v26 < 64) {
      uint64_t v34 = ~(-1 << (1 << v26));
    }
    else {
      uint64_t v34 = -1;
    }
    unint64_t v35 = v34 & *v16;
    int64_t v36 = (unint64_t)(v33 + 63) >> 6;
    int64_t v88 = v90 + 1;
    while (1)
    {
      if (v35)
      {
        unint64_t v37 = __clz(__rbit64(v35));
        v35 &= v35 - 1;
        unint64_t v38 = v37 | (v31 << 6);
        goto LABEL_24;
      }
      BOOL v29 = __OFADD__(v31++, 1);
      if (v29)
      {
        __break(1u);
        goto LABEL_119;
      }
      if (v31 >= v36) {
        goto LABEL_45;
      }
      unint64_t v39 = v16[v31];
      if (!v39) {
        break;
      }
LABEL_40:
      unint64_t v41 = __clz(__rbit64(v39));
      unint64_t v35 = (v39 - 1) & v39;
      unint64_t v38 = v41 + (v31 << 6);
LABEL_24:
      v32 |= qword_18218CA38[*(char *)(*(void *)(v15 + 48) + v38)];
    }
    int64_t v40 = v31 + 1;
    if (v31 + 1 >= v36) {
      goto LABEL_45;
    }
    unint64_t v39 = v16[v40];
    if (v39) {
      goto LABEL_39;
    }
    int64_t v40 = v31 + 2;
    if (v31 + 2 >= v36) {
      goto LABEL_45;
    }
    unint64_t v39 = v16[v40];
    if (v39) {
      goto LABEL_39;
    }
    int64_t v40 = v31 + 3;
    if (v31 + 3 >= v36) {
      goto LABEL_45;
    }
    unint64_t v39 = v16[v40];
    if (v39) {
      goto LABEL_39;
    }
    int64_t v40 = v31 + 4;
    if (v31 + 4 >= v36) {
      goto LABEL_45;
    }
    unint64_t v39 = v16[v40];
    if (v39)
    {
LABEL_39:
      int64_t v31 = v40;
      goto LABEL_40;
    }
    int64_t v40 = v31 + 5;
    if (v31 + 5 < v36)
    {
      unint64_t v39 = v16[v40];
      if (!v39)
      {
        while (1)
        {
          int64_t v31 = v40 + 1;
          if (__OFADD__(v40, 1)) {
            break;
          }
          if (v31 >= v36) {
            goto LABEL_45;
          }
          unint64_t v39 = v16[v31];
          ++v40;
          if (v39) {
            goto LABEL_40;
          }
        }
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
        uint64_t v99 = v6;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_133;
        }
        unint64_t v94 = v100;
        unint64_t v95 = v101;
        uint64_t v96 = v8;
        uint64_t v92 = v5;
        uint64_t v93 = v7;
        memcpy(v102, v103, 0x11AuLL);
        int64_t v98 = 0;
        uint64_t v97 = 0;
        _handleCalendarError(_:date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)((uint64_t)&v94, (uint64_t *)&v96, &v92, v102, (unsigned __int8 *)&v98 + 1, (unsigned __int8 *)&v98, &v97);

LABEL_127:
        outlined release of DateComponents((uint64_t)v103);
        memcpy(v102, v104, 0x11AuLL);
        outlined release of DateComponents((uint64_t)v102);
        swift_unknownObjectRelease();
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        swift_unknownObjectRelease();
        __break(1u);
        goto LABEL_130;
      }
      goto LABEL_39;
    }
LABEL_45:
    swift_unknownObjectRetain();
    __dst[0] = v32;
    *(double *)unint64_t v104 = v13;
    v87(__src, __dst, v104, ObjectType, v7);
    if ((v32 & 0x4000) != 0)
    {
      __src[0] = v5;
      __src[1] = v7;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if (__src[2])
      {
        __dst[0] = __src[2];
        __dst[1] = __src[3];
        swift_unknownObjectRetain();
        Calendar.timeZone.setter(__dst);
      }
    }
    swift_release();
    memcpy(__dst, __src, 0x11AuLL);
    outlined release of DateComponents((uint64_t)__dst);
    if (__dst[9]) {
      goto LABEL_129;
    }
    if (__dst[8] == v90)
    {
      swift_unknownObjectRelease();
      double v42 = v8;
    }
    else
    {
      v103[0] = 0uLL;
      v102[0] = 0;
      v102[1] = 0;
      DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v103, v102, 0, 1, 0, 1, 0, 1, (uint64_t)v104, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1);
      *(void *)&v103[2] = *(void *)&v104[2];
      BYTE8(v103[2]) = BYTE8(v104[2]);
      *(void *)&v103[3] = *(void *)&v104[3];
      BYTE8(v103[3]) = BYTE8(v104[3]);
      *(void *)&v103[5] = *(void *)&v104[5];
      BYTE8(v103[5]) = BYTE8(v104[5]);
      *(void *)&v103[6] = *(void *)&v104[6];
      BYTE8(v103[6]) = BYTE8(v104[6]);
      *(void *)&v103[7] = *(void *)&v104[7];
      BYTE8(v103[7]) = BYTE8(v104[7]);
      *(void *)&v103[8] = *(void *)&v104[8];
      BYTE8(v103[8]) = BYTE8(v104[8]);
      *(void *)&v103[9] = *(void *)&v104[9];
      BYTE8(v103[9]) = BYTE8(v104[9]);
      *(void *)&v103[10] = *(void *)&v104[10];
      BYTE8(v103[10]) = BYTE8(v104[10]);
      *(void *)&v103[11] = *(void *)&v104[11];
      BYTE8(v103[11]) = BYTE8(v104[11]);
      *(void *)&v103[12] = *(void *)&v104[12];
      BYTE8(v103[12]) = BYTE8(v104[12]);
      *(void *)&v103[13] = *(void *)&v104[13];
      BYTE8(v103[13]) = BYTE8(v104[13]);
      *(void *)&v103[14] = *(void *)&v104[14];
      BYTE8(v103[14]) = BYTE8(v104[14]);
      *(void *)&v103[15] = *(void *)&v104[15];
      BYTE8(v103[15]) = BYTE8(v104[15]);
      BYTE8(v103[16]) = BYTE8(v104[16]);
      *(void *)&v103[16] = *(void *)&v104[16];
      *(void *)&v103[17] = *(void *)&v104[17];
      WORD4(v103[17]) = WORD4(v104[17]);
      *(void *)&v104[4] = v90;
      BYTE8(v104[4]) = 0;
      v103[0] = v104[0];
      v103[1] = v104[1];
      *(void *)&v103[4] = v90;
      BYTE8(v103[4]) = 0;
      memcpy(v102, v103, 0x11AuLL);
      *(void *)&uint64_t v100 = v5;
      *((void *)&v100 + 1) = v7;
      outlined retain of DateComponents((uint64_t)v103);
      if (!DateComponents._validate(for:)((uint64_t *)&v100) || v8 < -2.11845067e11 || v8 > 1.59271755e13) {
        goto LABEL_127;
      }
      uint64_t v43 = 101;
      uint64_t v44 = *(void *)&v8;
      while (1)
      {
        *(void *)&unint64_t v94 = v5;
        *((void *)&v94 + 1) = v7;
        uint64_t v99 = *(id *)&v8;
        memcpy(v102, v103, 0x11AuLL);
        int64_t v98 = 0;
        uint64_t v97 = 0;
        uint64_t v96 = *(double *)&v44;
        uint64_t v92 = 0;
        LOBYTE(v93) = 1;
        Calendar._enumerateDatesStep(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:inSearchingDate:previouslyReturnedMatchDate:)((double *)&v99, v102, (unsigned __int8 *)&v98 + 1, (unsigned __int8 *)&v98, &v97, &v96, (uint64_t)&v92, (uint64_t)&v100);
        if (BYTE8(v100) != 2) {
          break;
        }
        uint64_t v44 = v101;
        if (!--v43)
        {
          *(double *)&unint64_t v94 = v8;
          *(void *)&uint64_t v100 = v5;
          *((void *)&v100 + 1) = v7;
          memcpy(v102, v103, 0x11AuLL);
          LOBYTE(v92) = 0;
          LOBYTE(v99) = 0;
          LOBYTE(v96) = 0;
          _handleCalendarResultNotFound(date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)((uint64_t *)&v94, (uint64_t *)&v100, v102, (unsigned __int8 *)&v92, (unsigned __int8 *)&v99, (unsigned __int8 *)&v96);
          goto LABEL_127;
        }
      }
      double v42 = *(double *)&v100;
      outlined release of DateComponents((uint64_t)v103);
      outlined release of DateComponents((uint64_t)v103);
      swift_unknownObjectRelease();
    }
    LOBYTE(v103[0]) = 3;
    LOBYTE(v102[0]) = 2;
    if (v42 <= 1.59271755e13) {
      double v45 = v42;
    }
    else {
      double v45 = 1.59271755e13;
    }
    *(void *)&v104[0] = fmax(v45, -2.11845067e11);
    long long v46 = *(void (**)(void, void, void, void, void))(v7 + 144);
    swift_unknownObjectRetain();
    v46(v103, v102, v104, ObjectType, v7);
    uint64_t v48 = v47;
    char v50 = v49;
    swift_unknownObjectRelease();
    if (v50)
    {
LABEL_130:
      __break(1u);
      goto LABEL_131;
    }
    uint64_t v51 = v48 - 1;
    if (__OFSUB__(v48, 1)) {
      goto LABEL_120;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v104[0] = v91;
    uint64_t v9 = v91;
    unint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)(v90);
    uint64_t v55 = v91[2];
    BOOL v56 = (v53 & 1) == 0;
    uint64_t v57 = v55 + v56;
    if (__OFADD__(v55, v56))
    {
LABEL_121:
      __break(1u);
      goto LABEL_122;
    }
    char v58 = v53;
    if (v91[3] < v57)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v57, isUniquelyReferenced_nonNull_native);
      uint64_t v9 = *(void **)&v104[0];
      unint64_t v59 = specialized __RawDictionaryStorage.find<A>(_:)(v90);
      if ((v58 & 1) != (v60 & 1)) {
        goto LABEL_132;
      }
      unint64_t v54 = v59;
      if ((v58 & 1) == 0)
      {
LABEL_68:
        v9[(v54 >> 6) + 8] |= 1 << v54;
        uint64_t v61 = 8 * v54;
        *(void *)(v9[6] + v61) = v90;
        *(void *)(v9[7] + v61) = v51;
        uint64_t v62 = v9[2];
        BOOL v29 = __OFADD__(v62, 1);
        uint64_t v63 = v62 + 1;
        if (v29) {
          goto LABEL_124;
        }
        uint64_t v9[2] = v63;
LABEL_73:
        swift_bridgeObjectRelease();
        if (v88 != v86)
        {
          if (v88 < v85) {
            goto LABEL_119;
          }
          uint64_t v14 = v90 + 1;
          if (v88 >= v86) {
            goto LABEL_119;
          }
          continue;
        }
        a1 = v84;
LABEL_116:
        *a1 = v9;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        return (uint64_t)v9;
      }
LABEL_72:
      *(void *)(v9[7] + 8 * v54) = v51;
      goto LABEL_73;
    }
    break;
  }
  if (isUniquelyReferenced_nonNull_native)
  {
    if ((v53 & 1) == 0) {
      goto LABEL_68;
    }
    goto LABEL_72;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int>);
  uint64_t v64 = static _DictionaryStorage.copy(original:)();
  char v65 = v91;
  uint64_t v9 = (void *)v64;
  if (!v91[2])
  {
LABEL_113:
    swift_bridgeObjectRelease();
    if ((v58 & 1) == 0) {
      goto LABEL_68;
    }
    goto LABEL_72;
  }
  uint64_t v66 = (void *)(v64 + 64);
  long long v67 = v91 + 8;
  unint64_t v68 = (unint64_t)((1 << *((unsigned char *)v9 + 32)) + 63) >> 6;
  if (v9 != v91 || v66 >= &v67[v68])
  {
    memmove(v66, v91 + 8, 8 * v68);
    char v65 = v91;
  }
  int64_t v69 = 0;
  uint64_t v9[2] = v65[2];
  uint64_t v70 = 1 << *((unsigned char *)v65 + 32);
  if (v70 < 64) {
    uint64_t v71 = ~(-1 << v70);
  }
  else {
    uint64_t v71 = -1;
  }
  unint64_t v72 = v71 & v65[8];
  int64_t v73 = (unint64_t)(v70 + 63) >> 6;
  while (2)
  {
    if (v72)
    {
      unint64_t v74 = __clz(__rbit64(v72));
      v72 &= v72 - 1;
      unint64_t v75 = v74 | (v69 << 6);
LABEL_86:
      uint64_t v76 = 8 * v75;
      uint64_t v77 = *(void *)(v65[7] + v76);
      *(void *)(v9[6] + v76) = *(void *)(v65[6] + v76);
      *(void *)(v9[7] + v76) = v77;
      continue;
    }
    break;
  }
  BOOL v29 = __OFADD__(v69++, 1);
  if (v29) {
    goto LABEL_128;
  }
  if (v69 >= v73) {
    goto LABEL_113;
  }
  unint64_t v78 = v67[v69];
  if (v78)
  {
LABEL_100:
    unint64_t v80 = __clz(__rbit64(v78));
    unint64_t v72 = (v78 - 1) & v78;
    unint64_t v75 = v80 + (v69 << 6);
    goto LABEL_86;
  }
  int64_t v79 = v69 + 1;
  if (v69 + 1 >= v73) {
    goto LABEL_113;
  }
  unint64_t v78 = v67[v79];
  if (v78) {
    goto LABEL_99;
  }
  int64_t v79 = v69 + 2;
  if (v69 + 2 >= v73) {
    goto LABEL_113;
  }
  unint64_t v78 = v67[v79];
  if (v78) {
    goto LABEL_99;
  }
  int64_t v79 = v69 + 3;
  if (v69 + 3 >= v73) {
    goto LABEL_113;
  }
  unint64_t v78 = v67[v79];
  if (v78) {
    goto LABEL_99;
  }
  int64_t v79 = v69 + 4;
  if (v69 + 4 >= v73) {
    goto LABEL_113;
  }
  unint64_t v78 = v67[v79];
  if (v78)
  {
LABEL_99:
    int64_t v69 = v79;
    goto LABEL_100;
  }
  char v81 = v9;
  int64_t v82 = v69 + 5;
  if (v69 + 5 >= v73) {
    goto LABEL_112;
  }
  unint64_t v78 = v67[v82];
  if (v78) {
    goto LABEL_107;
  }
  int64_t v82 = v69 + 6;
  if (v69 + 6 >= v73) {
    goto LABEL_112;
  }
  unint64_t v78 = v67[v82];
  if (v78) {
    goto LABEL_107;
  }
  int64_t v82 = v69 + 7;
  if (v69 + 7 >= v73)
  {
LABEL_112:
    uint64_t v9 = v81;
    goto LABEL_113;
  }
  unint64_t v78 = v67[v82];
  if (v78)
  {
LABEL_107:
    int64_t v69 = v82;
    char v65 = v91;
    goto LABEL_100;
  }
  while (1)
  {
    int64_t v69 = v82 + 1;
    if (__OFADD__(v82, 1)) {
      break;
    }
    if (v69 >= v73) {
      goto LABEL_112;
    }
    unint64_t v78 = v67[v69];
    ++v82;
    uint64_t v9 = v81;
    char v65 = v91;
    if (v78) {
      goto LABEL_100;
    }
  }
LABEL_131:
  __break(1u);
LABEL_132:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_133:

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #3 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheMonth(dates:anchor:action:)@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  void (*v12)(_OWORD *__return_ptr, unsigned char *, _OWORD *, uint64_t, void);
  uint64_t result;
  long long v14;
  double v15;
  unint64_t v16;
  double v17;
  double v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  Swift::UInt v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  void (*v36)(_OWORD *__return_ptr, double *, unsigned char *, uint64_t, void);
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  unsigned __int8 v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  double v56;
  _OWORD __src[24];
  _OWORD v58[24];
  unsigned char v59[330];
  char v60;
  unsigned __int8 v61;
  char v62;
  long long v63[18];
  double v64[36];
  unsigned char v65[282];
  _OWORD __dst[19];
  char v67;
  int v68;

  double v7 = *a1;
  v59[0] = 2;
  if (v7 > 1.59271755e13) {
    double v7 = 1.59271755e13;
  }
  double v8 = fmax(v7, -2.11845067e11);
  double v10 = *(double *)a2;
  double v9 = *(double *)(a2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  *(double *)uint64_t __src = v8;
  double v12 = *(void (**)(_OWORD *__return_ptr, unsigned char *, _OWORD *, uint64_t, void))(*(void *)&v9 + 160);
  swift_unknownObjectRetain();
  BOOL v56 = v9;
  v12(v58, v59, __src, ObjectType, *(void *)&v9);
  uint64_t result = swift_unknownObjectRelease();
  if (v58[1]) {
    goto LABEL_56;
  }
  unint64_t v54 = *a3;
  char v53 = *(void *)(*a3 + 16);
  if (!v53)
  {
    char v19 = (void *)MEMORY[0x1E4FBC860];
LABEL_51:
    *a4 = v19;
    return result;
  }
  uint64_t v14 = v58[0];
  uint64_t v15 = *(double *)v58;
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  if (*((double *)&v14 + 1) + v15 < v15) {
    goto LABEL_55;
  }
  char v49 = a4;
  unint64_t v68 = *(unsigned __int8 *)(a2 + 16);
  char v50 = *(unsigned char *)(a2 + 17);
  long long v52 = v54 + 32;
  swift_bridgeObjectRetain();
  long long v16 = 0;
  if (v15 <= 1.59271755e13) {
    Swift::UInt v17 = v15;
  }
  else {
    Swift::UInt v17 = 1.59271755e13;
  }
  Swift::Int v18 = fmax(v17, -2.11845067e11);
  char v19 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v51 = v10;
  while (2)
  {
    memcpy(__dst, (const void *)(v52 + 288 * v16), 0x11AuLL);
    memcpy(v65, (const void *)(v52 + 288 * v16), sizeof(v65));
    uint64_t v55 = v16 + 1;
    uint64_t v20 = static _SetStorage.allocate(capacity:)();
    unint64_t v21 = 0;
    unint64_t v22 = v20 + 56;
    do
    {
      char v26 = outlined read-only object #0 of closure #3 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheMonth(dates:anchor:action:)[v21 + 32];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      uint64_t result = Hasher._finalize()();
      uint64_t v27 = -1 << *(unsigned char *)(v20 + 32);
      uint64_t v28 = result & ~v27;
      BOOL v29 = v28 >> 6;
      uint64_t v30 = *(void *)(v22 + 8 * (v28 >> 6));
      int64_t v31 = 1 << v28;
      uint64_t v32 = *(void *)(v20 + 48);
      if (((1 << v28) & v30) != 0)
      {
        if (*(unsigned __int8 *)(v32 + v28) == v26) {
          goto LABEL_13;
        }
        uint64_t v33 = ~v27;
        while (1)
        {
          uint64_t v28 = (v28 + 1) & v33;
          BOOL v29 = v28 >> 6;
          uint64_t v30 = *(void *)(v22 + 8 * (v28 >> 6));
          int64_t v31 = 1 << v28;
          if ((v30 & (1 << v28)) == 0) {
            break;
          }
          if (*(unsigned __int8 *)(v32 + v28) == v26) {
            goto LABEL_13;
          }
        }
      }
      *(void *)(v22 + 8 * v29) = v31 | v30;
      *(unsigned char *)(v32 + v28) = v26;
      uint64_t v23 = *(void *)(v20 + 16);
      uint64_t v24 = __OFADD__(v23, 1);
      uint64_t v25 = v23 + 1;
      if (v24)
      {
        __break(1u);
        goto LABEL_53;
      }
      *(void *)(v20 + 16) = v25;
LABEL_13:
      ++v21;
    }
    while (v21 != 15);
    outlined retain of DateComponents((uint64_t)__dst);
    swift_unknownObjectRetain();
    outlined retain of DateComponents((uint64_t)__dst);
    specialized _NativeSet.filter(_:)(v20, __dst);
    outlined release of DateComponents((uint64_t)__dst);
    *(double *)uint64_t __src = v51;
    *((double *)__src + 1) = v56;
    uint64_t v34 = swift_bridgeObjectRetain();
    Calendar.ComponentSet.init(_:)(v34, v59);
    unint64_t v35 = BYTE9(__dst[17]);
    v64[0] = v18;
    Calendar._dateComponents(_:from:)((uint64_t *)v59, v64, v58);
    swift_release();
    if (v35 == 2)
    {
      uint64_t result = outlined retain of DateComponents((uint64_t)__dst);
    }
    else
    {
      *(void *)&v64[0] = 4;
      *(double *)unint64_t v59 = v18;
      int64_t v36 = *(void (**)(_OWORD *__return_ptr, double *, unsigned char *, uint64_t, void))(*(void *)&v56 + 192);
      outlined retain of DateComponents((uint64_t)__dst);
      v36(__src, v64, v59, ObjectType, *(void *)&v56);
      memcpy(v59, __src, 0x11AuLL);
      uint64_t result = outlined release of DateComponents((uint64_t)v59);
      BYTE9(v58[17]) = v59[281];
    }
    unint64_t v37 = *(void *)&__dst[10];
    unint64_t v38 = *(void *)&v58[10];
    unint64_t v39 = BYTE8(v58[10]) ^ 1 | BYTE8(__dst[10]);
    if (BYTE8(v58[10]) & 1) != 0 || (BYTE8(__dst[10]))
    {
LABEL_31:
      *(void *)&v59[32] = *(void *)&__dst[2];
      v59[40] = BYTE8(__dst[2]);
      *(void *)&char v59[48] = *(void *)&__dst[3];
      v59[56] = BYTE8(__dst[3]);
      *(void *)&v59[64] = *(void *)&__dst[4];
      v59[72] = BYTE8(__dst[4]);
      *(void *)&v59[80] = *(void *)&__dst[5];
      v59[88] = BYTE8(__dst[5]);
      *(void *)&v59[96] = *(void *)&__dst[6];
      v59[104] = BYTE8(__dst[6]);
      *(void *)&v59[112] = *(void *)&__dst[7];
      v59[120] = BYTE8(__dst[7]);
      *(void *)&v59[128] = *(void *)&__dst[8];
      v59[136] = BYTE8(__dst[8]);
      *(void *)&v59[144] = *(void *)&__dst[9];
      v59[152] = BYTE8(__dst[9]);
      *(void *)&v59[160] = v37;
      v59[168] = v39;
      *(void *)&v59[176] = *(void *)&__dst[11];
      v59[184] = BYTE8(__dst[11]);
      *(void *)&v59[192] = *(void *)&__dst[12];
      v59[200] = BYTE8(__dst[12]);
      *(void *)&v59[208] = *(void *)&__dst[13];
      v59[216] = BYTE8(__dst[13]);
      *(void *)&v59[224] = *(void *)&__dst[14];
      v59[232] = BYTE8(__dst[14]);
      *(void *)&v59[240] = *(void *)&__dst[15];
      v59[248] = BYTE8(__dst[15]);
      v59[264] = BYTE8(__dst[16]);
      *(void *)&v59[256] = *(void *)&__dst[16];
      *(void *)&v59[272] = *(void *)&__dst[17];
      v59[280] = BYTE8(__dst[17]);
      v59[281] = v35;
      *(_OWORD *)unint64_t v59 = __dst[0];
      *(_OWORD *)&v59[16] = __dst[1];
      memcpy(v64, v59, 0x11AuLL);
      *(void *)&__src[2] = *(void *)&v58[2];
      BYTE8(__src[2]) = BYTE8(v58[2]);
      *(void *)&__src[3] = *(void *)&v58[3];
      BYTE8(__src[3]) = BYTE8(v58[3]);
      *(void *)&__src[4] = *(void *)&v58[4];
      BYTE8(__src[4]) = BYTE8(v58[4]);
      *(void *)&__src[5] = *(void *)&v58[5];
      BYTE8(__src[5]) = BYTE8(v58[5]);
      *(void *)&__src[6] = *(void *)&v58[6];
      BYTE8(__src[6]) = BYTE8(v58[6]);
      *(void *)&__src[7] = *(void *)&v58[7];
      BYTE8(__src[7]) = BYTE8(v58[7]);
      *(void *)&__src[8] = *(void *)&v58[8];
      BYTE8(__src[8]) = BYTE8(v58[8]);
      *(void *)&__src[9] = *(void *)&v58[9];
      BYTE8(__src[9]) = BYTE8(v58[9]);
      *(void *)&__src[10] = v38;
      BYTE8(__src[10]) = BYTE8(v58[10]);
      *(void *)&__src[11] = *(void *)&v58[11];
      BYTE8(__src[11]) = BYTE8(v58[11]);
      *(void *)&__src[12] = *(void *)&v58[12];
      BYTE8(__src[12]) = BYTE8(v58[12]);
      *(void *)&__src[13] = *(void *)&v58[13];
      BYTE8(__src[13]) = BYTE8(v58[13]);
      *(void *)&__src[14] = *(void *)&v58[14];
      BYTE8(__src[14]) = BYTE8(v58[14]);
      *(void *)&__src[15] = *(void *)&v58[15];
      BYTE8(__src[15]) = BYTE8(v58[15]);
      BYTE8(__src[16]) = BYTE8(v58[16]);
      *(void *)&__src[16] = *(void *)&v58[16];
      *(void *)&__src[17] = *(void *)&v58[17];
      WORD4(__src[17]) = WORD4(v58[17]);
      __src[0] = v58[0];
      __src[1] = v58[1];
      memcpy(v63, __src, 0x11AuLL);
      unint64_t v41 = specialized static DateComponents.== infix(_:_:)((uint64_t)v64, v63);
      outlined release of DateComponents((uint64_t)v59);
      outlined release of DateComponents((uint64_t)__src);
      swift_unknownObjectRelease();
      if (v41)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
        }
        uint64_t v43 = v19[2];
        double v42 = v19[3];
        if (v43 >= v42 >> 1) {
          char v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v42 > 1), v43 + 1, 1, v19);
        }
        void v19[2] = v43 + 1;
        v19[v43 + 4] = v14;
      }
      goto LABEL_37;
    }
    int64_t v40 = *(void *)&v58[10] - *(void *)&__dst[10];
    if (__OFSUB__(*(void *)&v58[10], *(void *)&__dst[10])) {
      goto LABEL_54;
    }
    if (v40 < 0) {
      int64_t v40 = *(void *)&__dst[10] - *(void *)&v58[10];
    }
    if ((unint64_t)v40 < 0x1F5)
    {
      unint64_t v38 = 0;
      unint64_t v37 = 0;
      unint64_t v39 = 0;
      goto LABEL_31;
    }
    outlined release of DateComponents((uint64_t)__dst);
    *(void *)&__src[2] = *(void *)&v58[2];
    BYTE8(__src[2]) = BYTE8(v58[2]);
    *(void *)&__src[3] = *(void *)&v58[3];
    BYTE8(__src[3]) = BYTE8(v58[3]);
    *(void *)&__src[4] = *(void *)&v58[4];
    BYTE8(__src[4]) = BYTE8(v58[4]);
    *(void *)&__src[5] = *(void *)&v58[5];
    BYTE8(__src[5]) = BYTE8(v58[5]);
    *(void *)&__src[6] = *(void *)&v58[6];
    BYTE8(__src[6]) = BYTE8(v58[6]);
    *(void *)&__src[7] = *(void *)&v58[7];
    BYTE8(__src[7]) = BYTE8(v58[7]);
    *(void *)&__src[8] = *(void *)&v58[8];
    BYTE8(__src[8]) = BYTE8(v58[8]);
    *(void *)&__src[9] = *(void *)&v58[9];
    BYTE8(__src[9]) = BYTE8(v58[9]);
    *(void *)&__src[10] = v38;
    *(void *)&__src[11] = *(void *)&v58[11];
    BYTE8(__src[11]) = BYTE8(v58[11]);
    *(void *)&__src[12] = *(void *)&v58[12];
    BYTE8(__src[12]) = BYTE8(v58[12]);
    *(void *)&__src[13] = *(void *)&v58[13];
    BYTE8(__src[13]) = BYTE8(v58[13]);
    *(void *)&__src[14] = *(void *)&v58[14];
    BYTE8(__src[14]) = BYTE8(v58[14]);
    *(void *)&__src[15] = *(void *)&v58[15];
    BYTE8(__src[15]) = BYTE8(v58[15]);
    BYTE8(__src[16]) = BYTE8(v58[16]);
    *(void *)&__src[16] = *(void *)&v58[16];
    *(void *)&__src[17] = *(void *)&v58[17];
    WORD4(__src[17]) = WORD4(v58[17]);
    __src[0] = v58[0];
    __src[1] = v58[1];
    BYTE8(__src[10]) = 0;
    outlined release of DateComponents((uint64_t)__src);
    swift_unknownObjectRelease();
LABEL_37:
    *(double *)unint64_t v59 = v51;
    *(double *)&v59[8] = v56;
    *(void *)&v59[16] = v14;
    *(void *)&v59[24] = v14;
    *(double *)&v59[32] = *((double *)&v14 + 1) + v15;
    v59[40] = 0;
    memcpy(&v59[48], v65, 0x11AuLL);
    uint64_t v44 = v68;
    char v60 = v68;
    uint64_t v61 = v50;
    uint64_t v62 = 0;
    memcpy(__src, __dst, 0x11AuLL);
    v64[0] = v51;
    v64[1] = v56;
    swift_unknownObjectRetain();
    outlined retain of DateComponents((uint64_t)__dst);
    swift_unknownObjectRetain();
    outlined retain of DateComponents((uint64_t)__dst);
    double v45 = DateComponents._validate(for:)((uint64_t *)v64);
    outlined release of Calendar.DatesByAdding((uint64_t)v59);
    LOBYTE(v63[0]) = 1;
    long long v67 = 0;
    memcpy(&v58[5], v65, 0x11AuLL);
    v58[0] = xmmword_18218B600;
    LOBYTE(v58[1]) = 1;
    *((void *)&v58[1] + 1) = v14;
    *(void *)&v58[2] = v14;
    *((double *)&v58[2] + 1) = *((double *)&v14 + 1) + v15;
    LOBYTE(v58[3]) = 0;
    *((void *)&v58[3] + 1) = v14;
    *(double *)&v58[4] = v51;
    *((double *)&v58[4] + 1) = v56;
    BYTE10(v58[22]) = v44;
    *(_WORD *)((char *)&v58[22] + 11) = v50;
    *(void *)&v58[23] = 100;
    BYTE8(v58[23]) = !v45;
    Calendar.DatesByMatching.Iterator.next()();
    if (BYTE8(__src[0]))
    {
      long long v16 = v55;
    }
    else
    {
      long long v46 = *(void *)&__src[0];
      long long v16 = v55;
      do
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
        }
        uint64_t v48 = v19[2];
        uint64_t v47 = v19[3];
        if (v48 >= v47 >> 1) {
          char v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v47 > 1), v48 + 1, 1, v19);
        }
        void v19[2] = v48 + 1;
        v19[v48 + 4] = v46;
        Calendar.DatesByMatching.Iterator.next()();
        long long v46 = *(void *)&__src[0];
      }
      while ((BYTE8(__src[0]) & 1) == 0);
    }
    memcpy(__src, v58, 0x179uLL);
    outlined release of Calendar.DatesByMatching.Iterator((uint64_t)__src);
    uint64_t result = outlined release of DateComponents((uint64_t)__dst);
    if (v16 == v53)
    {
      uint64_t result = swift_bridgeObjectRelease();
      a4 = v49;
      goto LABEL_51;
    }
    if (v16 < *(void *)(v54 + 16)) {
      continue;
    }
    break;
  }
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
  return result;
}

uint64_t closure #1 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheYear(dates:anchor:action:)(double *a1, uint64_t a2)
{
  void (*v7)(void *__return_ptr, void, void, void, void);
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void, void, void, void, void);
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  char v24;
  char v25;
  void v26[13];
  char v27;
  uint64_t v28;
  double v29;
  _OWORD v30[2];

  double v3 = *a1;
  v30[0] = *(_OWORD *)a2;
  uint64_t v28 = 0x40000;
  if (v3 > 1.59271755e13) {
    double v3 = 1.59271755e13;
  }
  double v4 = fmax(v3, -2.11845067e11);
  uint64_t v5 = *((void *)&v30[0] + 1);
  uint64_t ObjectType = swift_getObjectType();
  BOOL v29 = v4;
  double v7 = *(void (**)(void *__return_ptr, void, void, void, void))(*((void *)&v30[0] + 1) + 192);
  outlined retain of Locale((uint64_t)v30);
  unint64_t v22 = ObjectType;
  v7(v26, &v28, &v29, ObjectType, v5);
  outlined release of DateComponents((uint64_t)v26);
  outlined release of Locale((uint64_t)v30);
  if (v27) {
    double v8 = 0;
  }
  else {
    double v8 = v26[12];
  }
  double v9 = *(double *)(a2 + 88);
  BOOL v29 = v9;
  double v10 = *(void *)(*(void *)&v9 + 16);
  if (v10)
  {
    char v11 = (uint64_t *)(*(void *)&v9 + 32);
    uint64_t result = swift_bridgeObjectRetain();
    double v13 = 0;
    uint64_t v14 = 1;
    while (1)
    {
      long long v16 = *v11++;
      uint64_t v15 = v16;
      if (v16 >= 1)
      {
        if (v15 == v8) {
          goto LABEL_18;
        }
      }
      else
      {
        if ((v14 & 1) == 0) {
          goto LABEL_13;
        }
        uint64_t v25 = 17;
        uint64_t v14 = 1;
        uint64_t v24 = 1;
        uint64_t v23 = v4;
        Swift::UInt v17 = *(void (**)(void, void, void, void, void))(v5 + 144);
        outlined retain of Locale((uint64_t)v30);
        v17(&v25, &v24, &v23, v22, v5);
        double v13 = v18;
        uint64_t v20 = v19;
        uint64_t result = outlined release of Locale((uint64_t)v30);
        if ((v20 & 1) == 0)
        {
LABEL_13:
          if (__OFADD__(v13, v15))
          {
            __break(1u);
            return result;
          }
          if (v13 + v15 == v8)
          {
LABEL_18:
            unint64_t v21 = 1;
            goto LABEL_19;
          }
          uint64_t v14 = 0;
        }
      }
      if (!--v10)
      {
        unint64_t v21 = 0;
LABEL_19:
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v29);
        return v21;
      }
    }
  }
  return 0;
}

uint64_t specialized getter of daysInYear #1 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheYear(dates:anchor:action:)(unsigned char *a1, long long *a2, double a3)
{
  if (a1[8] != 1) {
    return *(void *)a1;
  }
  char v14 = 17;
  char v13 = 1;
  if (a3 > 1.59271755e13) {
    a3 = 1.59271755e13;
  }
  double v4 = fmax(a3, -2.11845067e11);
  long long v15 = *a2;
  uint64_t v5 = *((void *)&v15 + 1);
  uint64_t ObjectType = swift_getObjectType();
  double v12 = v4;
  double v7 = *(void (**)(void, void, void, void, void))(*((void *)&v15 + 1) + 144);
  outlined retain of Locale((uint64_t)&v15);
  v7(&v14, &v13, &v12, ObjectType, v5);
  uint64_t v9 = v8;
  LOBYTE(v5) = v10;
  uint64_t result = outlined release of Locale((uint64_t)&v15);
  if ((v5 & 1) == 0)
  {
    uint64_t result = v9 - 1;
    if (!__OFSUB__(v9, 1))
    {
      *(void *)a1 = result;
      a1[8] = 0;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void closure #2 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheYear(dates:anchor:action:)(uint64_t *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v19 = *a1;
  uint64_t v18 = *(void *)(*a1 + 16);
  if (!v18)
  {
    char v10 = (void *)MEMORY[0x1E4FBC860];
LABEL_17:
    *a3 = v10;
    return;
  }
  double v6 = a4 + a5;
  if (a4 + a5 >= a4)
  {
    long long v15 = a3;
    uint64_t v8 = *(void *)a2;
    uint64_t v7 = *(void *)(a2 + 8);
    char v17 = *(unsigned char *)(a2 + 16);
    unsigned __int8 v16 = *(unsigned char *)(a2 + 17);
    swift_bridgeObjectRetain();
    unint64_t v9 = 0;
    char v10 = (void *)MEMORY[0x1E4FBC860];
    while (1)
    {
      memcpy(__dst, (const void *)(v19 + 32 + 288 * v9), 0x11AuLL);
      v24[0] = v8;
      v24[1] = v7;
      *(double *)&v24[2] = a4;
      *(double *)&_OWORD v24[3] = a4;
      *(double *)&v24[4] = v6;
      char v25 = 0;
      memcpy(v26, __dst, 0x11AuLL);
      v26[282] = v17;
      v26[283] = v16;
      v26[284] = 0;
      memcpy(v20, __dst, 0x11AuLL);
      v21[0] = v8;
      v21[1] = v7;
      outlined retain of DateComponents((uint64_t)__dst);
      outlined retain of DateComponents((uint64_t)__dst);
      swift_unknownObjectRetain();
      outlined retain of DateComponents((uint64_t)__dst);
      swift_unknownObjectRetain();
      BOOL v11 = DateComponents._validate(for:)(v21);
      outlined release of Calendar.DatesByAdding((uint64_t)v24);
      char v32 = 1;
      char v30 = 0;
      memcpy(&__src[5], __dst, 0x11AuLL);
      __src[0] = xmmword_18218B600;
      LOBYTE(__src[1]) = 1;
      *(_DWORD *)((char *)&__src[1] + 1) = *(_DWORD *)v31;
      DWORD1(__src[1]) = *(_DWORD *)&v31[3];
      *((double *)&__src[1] + 1) = a4;
      *(double *)&__src[2] = a4;
      *((double *)&__src[2] + 1) = v6;
      LOBYTE(__src[3]) = 0;
      *(_DWORD *)((char *)&__src[3] + 1) = *(_DWORD *)v29;
      DWORD1(__src[3]) = *(_DWORD *)&v29[3];
      *((double *)&__src[3] + 1) = a4;
      *(void *)&__src[4] = v8;
      *((void *)&__src[4] + 1) = v7;
      BYTE10(__src[22]) = v17;
      *(_WORD *)((char *)&__src[22] + 11) = v16;
      *(_WORD *)((char *)&__src[22] + 13) = v27;
      HIBYTE(__src[22]) = v28;
      *(void *)&__src[23] = 100;
      BYTE8(__src[23]) = !v11;
      Calendar.DatesByMatching.Iterator.next()();
      if ((v20[1] & 1) == 0)
      {
        uint64_t v12 = v20[0];
        do
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
          }
          unint64_t v14 = v10[2];
          unint64_t v13 = v10[3];
          if (v14 >= v13 >> 1) {
            char v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v10);
          }
          void v10[2] = v14 + 1;
          v10[v14 + 4] = v12;
          Calendar.DatesByMatching.Iterator.next()();
          uint64_t v12 = v20[0];
        }
        while ((v20[1] & 1) == 0);
      }
      ++v9;
      memcpy(v20, __src, 0x179uLL);
      outlined release of Calendar.DatesByMatching.Iterator((uint64_t)v20);
      outlined release of DateComponents((uint64_t)__dst);
      if (v9 == v18) {
        break;
      }
      if (v9 >= *(void *)(v19 + 16))
      {
        __break(1u);
        goto LABEL_18;
      }
    }
    swift_bridgeObjectRelease();
    a3 = v15;
    goto LABEL_17;
  }
LABEL_18:
  __break(1u);
}

uint64_t closure #3 in Calendar.RecurrenceRule._expandOrLimitTimeComponent(_:dates:anchor:action:)@<X0>(double *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  void (*v14)(_OWORD *__return_ptr, unsigned char *, _OWORD *, uint64_t, void);
  uint64_t result;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::UInt v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  void (*v37)(_OWORD *__return_ptr, double *, unsigned char *, uint64_t, void);
  uint64_t v38;
  uint64_t v39;
  char v40;
  double v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  BOOL v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  unsigned __int8 v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  _OWORD __dst[24];
  _OWORD __src[24];
  unsigned char v61[330];
  char v62;
  unsigned __int8 v63;
  char v64;
  long long v65[18];
  double v66[36];
  unsigned char v67[282];
  _OWORD v68[19];
  char v69;
  int v70;

  double v8 = *a1;
  v61[0] = a3;
  double v9 = 1.59271755e13;
  if (v8 <= 1.59271755e13) {
    double v9 = v8;
  }
  double v10 = fmax(v9, -2.11845067e11);
  double v11 = *(double *)a2;
  double v12 = *(double *)(a2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  *(double *)__dst = v10;
  unint64_t v14 = *(void (**)(_OWORD *__return_ptr, unsigned char *, _OWORD *, uint64_t, void))(*(void *)&v12 + 160);
  swift_unknownObjectRetain();
  v14(__src, v61, __dst, ObjectType, *(void *)&v12);
  uint64_t result = swift_unknownObjectRelease();
  if (__src[1]) {
    goto LABEL_51;
  }
  BOOL v56 = *(void *)(a4 + 16);
  if (!v56)
  {
    uint64_t v20 = (void *)MEMORY[0x1E4FBC860];
LABEL_47:
    *a5 = v20;
    return result;
  }
  unsigned __int8 v16 = *((double *)__src + 1);
  char v53 = *(void *)&__src[0];
  char v17 = *(double *)__src;
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  uint64_t v18 = v16 + v17;
  if (v18 < v17) {
    goto LABEL_50;
  }
  unint64_t v54 = v11;
  uint64_t v51 = a5;
  uint64_t v70 = *(unsigned __int8 *)(a2 + 16);
  long long v52 = *(unsigned char *)(a2 + 17);
  uint64_t v55 = a4 + 32;
  swift_bridgeObjectRetain();
  uint64_t v19 = 0;
  uint64_t v20 = (void *)MEMORY[0x1E4FBC860];
  char v58 = v12;
LABEL_9:
  memcpy(v68, (const void *)(v55 + 288 * v19), 0x11AuLL);
  memcpy(v67, (const void *)(v55 + 288 * v19), sizeof(v67));
  uint64_t v57 = v19 + 1;
  unint64_t v21 = static _SetStorage.allocate(capacity:)();
  unint64_t v22 = 0;
  uint64_t v23 = v21 + 56;
  while (1)
  {
    uint64_t v24 = outlined read-only object #0 of closure #3 in Calendar.RecurrenceRule._expandOrLimitTimeComponent(_:dates:anchor:action:)[v22 + 32];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v24);
    uint64_t result = Hasher._finalize()();
    char v25 = -1 << *(unsigned char *)(v21 + 32);
    char v26 = result & ~v25;
    __int16 v27 = v26 >> 6;
    char v28 = *(void *)(v23 + 8 * (v26 >> 6));
    BOOL v29 = 1 << v26;
    char v30 = *(void *)(v21 + 48);
    if (((1 << v26) & v28) == 0) {
      break;
    }
    if (*(unsigned __int8 *)(v30 + v26) != v24)
    {
      int64_t v31 = ~v25;
      do
      {
        char v26 = (v26 + 1) & v31;
        __int16 v27 = v26 >> 6;
        char v28 = *(void *)(v23 + 8 * (v26 >> 6));
        BOOL v29 = 1 << v26;
        if ((v28 & (1 << v26)) == 0) {
          goto LABEL_17;
        }
      }
      while (*(unsigned __int8 *)(v30 + v26) != v24);
    }
LABEL_10:
    if (++v22 == 15)
    {
      outlined retain of DateComponents((uint64_t)v68);
      swift_unknownObjectRetain();
      outlined retain of DateComponents((uint64_t)v68);
      specialized _NativeSet.filter(_:)(v21, v68);
      outlined release of DateComponents((uint64_t)v68);
      *(double *)__dst = v54;
      *((double *)__dst + 1) = v58;
      unint64_t v35 = swift_bridgeObjectRetain();
      Calendar.ComponentSet.init(_:)(v35, v61);
      int64_t v36 = BYTE9(v68[17]);
      v66[0] = v10;
      Calendar._dateComponents(_:from:)((uint64_t *)v61, v66, __src);
      swift_release();
      if (v36 == 2)
      {
        uint64_t result = outlined retain of DateComponents((uint64_t)v68);
      }
      else
      {
        *(void *)&v66[0] = 4;
        *(double *)uint64_t v61 = v10;
        unint64_t v37 = *(void (**)(_OWORD *__return_ptr, double *, unsigned char *, uint64_t, void))(*(void *)&v58 + 192);
        outlined retain of DateComponents((uint64_t)v68);
        v37(__dst, v66, v61, ObjectType, *(void *)&v58);
        memcpy(v61, __dst, 0x11AuLL);
        uint64_t result = outlined release of DateComponents((uint64_t)v61);
        BYTE9(__src[17]) = v61[281];
      }
      unint64_t v38 = *(void *)&v68[10];
      unint64_t v39 = *(void *)&__src[10];
      int64_t v40 = BYTE8(__src[10]) ^ 1 | BYTE8(v68[10]);
      if (BYTE8(__src[10]))
      {
        unint64_t v41 = v58;
      }
      else
      {
        unint64_t v41 = v58;
        if ((BYTE8(v68[10]) & 1) == 0)
        {
          double v42 = *(void *)&__src[10] - *(void *)&v68[10];
          if (__OFSUB__(*(void *)&__src[10], *(void *)&v68[10])) {
            goto LABEL_49;
          }
          if (v42 < 0) {
            double v42 = *(void *)&v68[10] - *(void *)&__src[10];
          }
          if ((unint64_t)v42 >= 0x1F5)
          {
            outlined release of DateComponents((uint64_t)v68);
            *(void *)&__dst[2] = *(void *)&__src[2];
            BYTE8(__dst[2]) = BYTE8(__src[2]);
            *(void *)&__dst[3] = *(void *)&__src[3];
            BYTE8(__dst[3]) = BYTE8(__src[3]);
            *(void *)&__dst[4] = *(void *)&__src[4];
            BYTE8(__dst[4]) = BYTE8(__src[4]);
            *(void *)&__dst[5] = *(void *)&__src[5];
            BYTE8(__dst[5]) = BYTE8(__src[5]);
            *(void *)&__dst[6] = *(void *)&__src[6];
            BYTE8(__dst[6]) = BYTE8(__src[6]);
            *(void *)&__dst[7] = *(void *)&__src[7];
            BYTE8(__dst[7]) = BYTE8(__src[7]);
            *(void *)&__dst[8] = *(void *)&__src[8];
            BYTE8(__dst[8]) = BYTE8(__src[8]);
            *(void *)&__dst[9] = *(void *)&__src[9];
            BYTE8(__dst[9]) = BYTE8(__src[9]);
            *(void *)&__dst[10] = v39;
            *(void *)&__dst[11] = *(void *)&__src[11];
            BYTE8(__dst[11]) = BYTE8(__src[11]);
            *(void *)&__dst[12] = *(void *)&__src[12];
            BYTE8(__dst[12]) = BYTE8(__src[12]);
            *(void *)&__dst[13] = *(void *)&__src[13];
            BYTE8(__dst[13]) = BYTE8(__src[13]);
            *(void *)&__dst[14] = *(void *)&__src[14];
            BYTE8(__dst[14]) = BYTE8(__src[14]);
            *(void *)&__dst[15] = *(void *)&__src[15];
            BYTE8(__dst[15]) = BYTE8(__src[15]);
            BYTE8(__dst[16]) = BYTE8(__src[16]);
            *(void *)&__dst[16] = *(void *)&__src[16];
            *(void *)&__dst[17] = *(void *)&__src[17];
            WORD4(__dst[17]) = WORD4(__src[17]);
            __dst[0] = __src[0];
            __dst[1] = __src[1];
            BYTE8(__dst[10]) = 0;
            outlined release of DateComponents((uint64_t)__dst);
            swift_unknownObjectRelease();
            goto LABEL_37;
          }
          unint64_t v39 = 0;
          unint64_t v38 = 0;
          int64_t v40 = 0;
        }
      }
      *(void *)&v61[32] = *(void *)&v68[2];
      v61[40] = BYTE8(v68[2]);
      *(void *)&unsigned char v61[48] = *(void *)&v68[3];
      v61[56] = BYTE8(v68[3]);
      *(void *)&v61[64] = *(void *)&v68[4];
      v61[72] = BYTE8(v68[4]);
      *(void *)&v61[80] = *(void *)&v68[5];
      v61[88] = BYTE8(v68[5]);
      *(void *)&v61[96] = *(void *)&v68[6];
      v61[104] = BYTE8(v68[6]);
      *(void *)&v61[112] = *(void *)&v68[7];
      v61[120] = BYTE8(v68[7]);
      *(void *)&v61[128] = *(void *)&v68[8];
      v61[136] = BYTE8(v68[8]);
      *(void *)&v61[144] = *(void *)&v68[9];
      v61[152] = BYTE8(v68[9]);
      *(void *)&v61[160] = v38;
      v61[168] = v40;
      *(void *)&v61[176] = *(void *)&v68[11];
      v61[184] = BYTE8(v68[11]);
      *(void *)&v61[192] = *(void *)&v68[12];
      v61[200] = BYTE8(v68[12]);
      *(void *)&v61[208] = *(void *)&v68[13];
      v61[216] = BYTE8(v68[13]);
      *(void *)&v61[224] = *(void *)&v68[14];
      v61[232] = BYTE8(v68[14]);
      *(void *)&v61[240] = *(void *)&v68[15];
      v61[248] = BYTE8(v68[15]);
      v61[264] = BYTE8(v68[16]);
      *(void *)&v61[256] = *(void *)&v68[16];
      *(void *)&v61[272] = *(void *)&v68[17];
      v61[280] = BYTE8(v68[17]);
      v61[281] = v36;
      *(_OWORD *)uint64_t v61 = v68[0];
      *(_OWORD *)&v61[16] = v68[1];
      memcpy(v66, v61, 0x11AuLL);
      *(void *)&__dst[2] = *(void *)&__src[2];
      BYTE8(__dst[2]) = BYTE8(__src[2]);
      *(void *)&__dst[3] = *(void *)&__src[3];
      BYTE8(__dst[3]) = BYTE8(__src[3]);
      *(void *)&__dst[4] = *(void *)&__src[4];
      BYTE8(__dst[4]) = BYTE8(__src[4]);
      *(void *)&__dst[5] = *(void *)&__src[5];
      BYTE8(__dst[5]) = BYTE8(__src[5]);
      *(void *)&__dst[6] = *(void *)&__src[6];
      BYTE8(__dst[6]) = BYTE8(__src[6]);
      *(void *)&__dst[7] = *(void *)&__src[7];
      BYTE8(__dst[7]) = BYTE8(__src[7]);
      *(void *)&__dst[8] = *(void *)&__src[8];
      BYTE8(__dst[8]) = BYTE8(__src[8]);
      *(void *)&__dst[9] = *(void *)&__src[9];
      BYTE8(__dst[9]) = BYTE8(__src[9]);
      *(void *)&__dst[10] = v39;
      BYTE8(__dst[10]) = BYTE8(__src[10]);
      *(void *)&__dst[11] = *(void *)&__src[11];
      BYTE8(__dst[11]) = BYTE8(__src[11]);
      *(void *)&__dst[12] = *(void *)&__src[12];
      BYTE8(__dst[12]) = BYTE8(__src[12]);
      *(void *)&__dst[13] = *(void *)&__src[13];
      BYTE8(__dst[13]) = BYTE8(__src[13]);
      *(void *)&__dst[14] = *(void *)&__src[14];
      BYTE8(__dst[14]) = BYTE8(__src[14]);
      *(void *)&__dst[15] = *(void *)&__src[15];
      BYTE8(__dst[15]) = BYTE8(__src[15]);
      BYTE8(__dst[16]) = BYTE8(__src[16]);
      *(void *)&__dst[16] = *(void *)&__src[16];
      *(void *)&__dst[17] = *(void *)&__src[17];
      WORD4(__dst[17]) = WORD4(__src[17]);
      __dst[0] = __src[0];
      __dst[1] = __src[1];
      memcpy(v65, __dst, 0x11AuLL);
      uint64_t v43 = specialized static DateComponents.== infix(_:_:)((uint64_t)v66, v65);
      outlined release of DateComponents((uint64_t)v61);
      outlined release of DateComponents((uint64_t)__dst);
      swift_unknownObjectRelease();
      if (v43)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
        }
        double v45 = v20[2];
        uint64_t v44 = v20[3];
        if (v45 >= v44 >> 1) {
          uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v44 > 1), v45 + 1, 1, v20);
        }
        v20[2] = v45 + 1;
        *(double *)&v20[v45 + 4] = v8;
      }
LABEL_37:
      *(double *)uint64_t v61 = v54;
      *(double *)&v61[8] = v41;
      *(void *)&v61[16] = v53;
      *(void *)&v61[24] = v53;
      *(double *)&v61[32] = v18;
      v61[40] = 0;
      memcpy(&v61[48], v67, 0x11AuLL);
      long long v46 = v70;
      uint64_t v62 = v70;
      uint64_t v63 = v52;
      uint64_t v64 = 0;
      memcpy(__dst, v68, 0x11AuLL);
      v66[0] = v54;
      v66[1] = v41;
      swift_unknownObjectRetain();
      outlined retain of DateComponents((uint64_t)v68);
      swift_unknownObjectRetain();
      outlined retain of DateComponents((uint64_t)v68);
      uint64_t v47 = DateComponents._validate(for:)((uint64_t *)v66);
      outlined release of Calendar.DatesByAdding((uint64_t)v61);
      LOBYTE(v65[0]) = 1;
      int64_t v69 = 0;
      memcpy(&__src[5], v67, 0x11AuLL);
      __src[0] = xmmword_18218B600;
      LOBYTE(__src[1]) = 1;
      *((void *)&__src[1] + 1) = v53;
      *(void *)&__src[2] = v53;
      *((double *)&__src[2] + 1) = v18;
      LOBYTE(__src[3]) = 0;
      *((void *)&__src[3] + 1) = v53;
      *(double *)&__src[4] = v54;
      *((double *)&__src[4] + 1) = v41;
      BYTE10(__src[22]) = v46;
      *(_WORD *)((char *)&__src[22] + 11) = v52;
      *(void *)&__src[23] = 100;
      BYTE8(__src[23]) = !v47;
      Calendar.DatesByMatching.Iterator.next()();
      if (BYTE8(__dst[0]))
      {
        uint64_t v19 = v57;
      }
      else
      {
        uint64_t v48 = *(void *)&__dst[0];
        uint64_t v19 = v57;
        do
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
          }
          char v50 = v20[2];
          char v49 = v20[3];
          if (v50 >= v49 >> 1) {
            uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v49 > 1), v50 + 1, 1, v20);
          }
          v20[2] = v50 + 1;
          v20[v50 + 4] = v48;
          Calendar.DatesByMatching.Iterator.next()();
          uint64_t v48 = *(void *)&__dst[0];
        }
        while ((BYTE8(__dst[0]) & 1) == 0);
      }
      memcpy(__dst, __src, 0x179uLL);
      outlined release of Calendar.DatesByMatching.Iterator((uint64_t)__dst);
      outlined release of DateComponents((uint64_t)v68);
      if (v19 == v56)
      {
        uint64_t result = swift_bridgeObjectRelease();
        a5 = v51;
        goto LABEL_47;
      }
      goto LABEL_9;
    }
  }
LABEL_17:
  *(void *)(v23 + 8 * v27) = v29 | v28;
  *(unsigned char *)(v30 + v26) = v24;
  char v32 = *(void *)(v21 + 16);
  uint64_t v33 = __OFADD__(v32, 1);
  uint64_t v34 = v32 + 1;
  if (!v33)
  {
    *(void *)(v21 + 16) = v34;
    goto LABEL_10;
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

Swift::OpaquePointer_optional __swiftcall Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(Swift::OpaquePointer a1, Foundation::Calendar::Component in, Foundation::Date anchor)
{
  void (*v111)(_OWORD *__return_ptr, _OWORD *, _OWORD *, uint64_t, void);
  Swift::Bool v112;
  void *v113;
  double v114;
  double v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(_OWORD *__return_ptr, _OWORD *, _OWORD *, uint64_t, void);
  char v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  int64_t v128;
  unint64_t i;
  int64_t v130;
  unint64_t v131;
  int64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  Swift::Int_optional v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  char v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  void *v160;
  int64_t v161;
  int64_t v162;
  int64_t v163;
  int64_t v164;
  int64_t v165;
  int64_t v166;
  int64_t v167;
  int64_t v168;
  uint64_t v169;
  int64_t v170;
  uint64_t v171;
  char *v172;
  char v173;
  int v174;
  _OWORD v175[18];
  _OWORD v176[18];
  uint64_t v177;
  char v178;
  uint64_t v179;
  char v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  char v184;
  _OWORD __dst[18];
  _OWORD __src[18];
  long long v187[7];
  uint64_t v188;
  Swift::OpaquePointer_optional result;

  long long v174 = *(unsigned __int8 *)in;
  double v5 = *v3;
  long long v6 = *(_OWORD *)(v4 + 80);
  v187[4] = *(_OWORD *)(v4 + 64);
  v187[5] = v6;
  v187[6] = *(_OWORD *)(v4 + 96);
  long long v188 = *(void *)(v4 + 112);
  long long v7 = *(_OWORD *)(v4 + 16);
  v187[0] = *(_OWORD *)v4;
  v187[1] = v7;
  long long v8 = *(_OWORD *)(v4 + 48);
  v187[2] = *(_OWORD *)(v4 + 32);
  v187[3] = v8;
  uint64_t v9 = *((void *)a1._rawValue + 2);
  if (!v9)
  {
    uint64_t v165 = MEMORY[0x1E4FBC868];
LABEL_152:
    if (v174 == 2) {
      char v102 = 10;
    }
    else {
      char v102 = 11;
    }
    long long v173 = v102;
    uint64_t v104 = qword_1ECA2F4D0;
    uint64_t v103 = unk_1ECA2F4D8;
    uint64_t v105 = qword_1ECA2F4E0;
    uint64_t v106 = unk_1ECA2F4E8;
    LOBYTE(v176[0]) = v174;
    double v107 = 1.59271755e13;
    if (v5 <= 1.59271755e13) {
      double v107 = v5;
    }
    double v108 = fmax(v107, -2.11845067e11);
    long long v109 = v187[0];
    uint64_t ObjectType = swift_getObjectType();
    *(double *)__dst = v108;
    double v111 = *(void (**)(_OWORD *__return_ptr, _OWORD *, _OWORD *, uint64_t, void))(*((void *)&v187[0] + 1)
                                                                                            + 160);
    swift_unknownObjectRetain();
    v111(__src, v176, __dst, ObjectType, *((void *)&v187[0] + 1));
    swift_unknownObjectRelease();
    if (__src[1])
    {
      swift_bridgeObjectRelease();
      uint64_t v113 = 0;
LABEL_233:
      long long v160 = v113;
      goto LABEL_254;
    }
    uint64_t v114 = *((double *)__src + 1);
    uint64_t v115 = *(double *)__src;
    if ((v103 & ~v104) != 0) {
      int v116 = v103;
    }
    else {
      int v116 = 0;
    }
    int v117 = v116 | v104;
    if ((v105 & ~v117) != 0) {
      uint64_t v118 = v105;
    }
    else {
      uint64_t v118 = 0;
    }
    uint64_t v119 = v118 | v117;
    if ((v106 & ~v119) != 0) {
      uint64_t v120 = v106;
    }
    else {
      uint64_t v120 = 0;
    }
    uint64_t v121 = v120 | v119;
    uint64_t v122 = swift_allocObject();
    *(void *)(v122 + 16) = 0;
    *(void *)(v122 + 24) = 0;
    uint64_t v171 = v122;
    *(unsigned char *)(v122 + 32) = 1;
    *(void *)&__dst[0] = v121;
    *(double *)uint64_t v176 = v108;
    int v123 = *(void (**)(_OWORD *__return_ptr, _OWORD *, _OWORD *, uint64_t, void))(*((void *)&v109 + 1)
                                                                                            + 192);
    swift_unknownObjectRetain();
    v123(__src, __dst, v176, ObjectType, *((void *)&v109 + 1));
    if ((v121 & 0x4000) != 0)
    {
      __src[0] = v109;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      int v124 = v173;
      if (*(void *)&__src[1])
      {
        __dst[0] = __src[1];
        swift_unknownObjectRetain();
        Calendar.timeZone.setter((uint64_t *)__dst);
      }
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
      int v124 = v173;
    }
    memcpy(__dst, __src, 0x11AuLL);
    char v183 = 0;
    uint64_t v184 = 1;
    long long v181 = 0;
    long long v182 = 1;
    char v161 = v165 + 64;
    int v125 = 1 << *(unsigned char *)(v165 + 32);
    int v126 = -1;
    if (v125 < 64) {
      int v126 = ~(-1 << v125);
    }
    char v127 = v126 & *(void *)(v165 + 64);
    uint64_t v162 = (unint64_t)(v125 + 63) >> 6;
    swift_bridgeObjectRetain();
    uint64_t v128 = 0;
    uint64_t v113 = (void *)MEMORY[0x1E4FBC860];
    if (v127) {
      goto LABEL_178;
    }
LABEL_179:
    long long v130 = v128 + 1;
    if (__OFADD__(v128, 1)) {
      goto LABEL_242;
    }
    if (v130 < v162)
    {
      uint64_t v131 = *(void *)(v161 + 8 * v130);
      long long v132 = v128 + 1;
      if (v131) {
        goto LABEL_192;
      }
      long long v132 = v128 + 2;
      if (v128 + 2 >= v162) {
        goto LABEL_232;
      }
      uint64_t v131 = *(void *)(v161 + 8 * v132);
      if (v131) {
        goto LABEL_192;
      }
      long long v132 = v128 + 3;
      if (v128 + 3 >= v162) {
        goto LABEL_232;
      }
      uint64_t v131 = *(void *)(v161 + 8 * v132);
      if (v131)
      {
LABEL_192:
        uint64_t v169 = (v131 - 1) & v131;
        uint64_t v170 = v132;
        for (unint64_t i = __clz(__rbit64(v131)) + (v132 << 6); ; unint64_t i = __clz(__rbit64(v127)) | (v128 << 6))
        {
          long long v134 = *(char *)(*(void *)(v165 + 48) + i);
          long long v135 = *(void *)(*(void *)(v165 + 56) + 8 * i);
          uint64_t v136 = one-time initialization token for weekdays;
          swift_bridgeObjectRetain();
          if (v136 != -1) {
            swift_once();
          }
          long long v137 = (char *)static Locale.Weekday.weekdays;
          long long v138 = *((void *)static Locale.Weekday.weekdays + 2);
          if (!v138) {
            break;
          }
          swift_bridgeObjectRetain();
          long long v139 = 0;
          long long v140 = qword_18218CA00[v134];
          while (qword_18218CA00[v137[v139 + 32]] != v140)
          {
            long long v141 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease_n();
            if (v141) {
              goto LABEL_202;
            }
            if (v138 == ++v139) {
              goto LABEL_246;
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_202:
          swift_bridgeObjectRelease();
          long long v142 = v139 + 1;
          if (__OFADD__(v139, 1)) {
            goto LABEL_238;
          }
          long long v143 = *(void *)(v135 + 16);
          if (v143)
          {
            long long v144 = 0;
            Swift::String v179 = 0;
            long long v180 = 1;
            uint64_t v177 = 0;
            uint64_t v178 = 1;
            if (v139 == 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v145 = 0;
            }
            else {
              uint64_t v145 = v139 + 1;
            }
            uint64_t v146 = v143 - 1;
            while (1)
            {
              uint64_t v147 = *(void *)(v135 + 8 * v144 + 32);
              memcpy(v176, __dst, 0x11AuLL);
              outlined retain of DateComponents((uint64_t)__dst);
              if (v147 < 1)
              {
                v150.Foundation::Morphology::Definiteness value = specialized getter of lastWeek #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(&v177, v171, v187, v124, v174, v142, &v181, v5, v115, v114);
                BOOL v52 = __OFADD__(v150.value, v147);
                v150.value += v147;
                if (v52) {
                  goto LABEL_236;
                }
              }
              else
              {
                char v148 = specialized getter of firstWeek #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(&v179, v171, v187, v124, v174, v142, &v183, v5, v115);
                char v149 = v148 - 1;
                if (__OFSUB__(v148, 1))
                {
                  __break(1u);
LABEL_235:
                  __break(1u);
LABEL_236:
                  __break(1u);
                  goto LABEL_237;
                }
                v150.Foundation::Morphology::Definiteness value = v149 + v147;
                if (__OFADD__(v149, v147)) {
                  goto LABEL_235;
                }
              }
              LOBYTE(v175[0]) = v124;
              v150.is_nil = 0;
              DateComponents.setValue(_:for:)(v150, (Foundation::Calendar::Component)v175);
              *(void *)&v175[2] = *(void *)&v176[2];
              BYTE8(v175[2]) = BYTE8(v176[2]);
              *(void *)&_OWORD v175[3] = *(void *)&v176[3];
              BYTE8(v175[3]) = BYTE8(v176[3]);
              *(void *)&v175[4] = *(void *)&v176[4];
              BYTE8(v175[4]) = BYTE8(v176[4]);
              *(void *)&v175[5] = *(void *)&v176[5];
              BYTE8(v175[5]) = BYTE8(v176[5]);
              *(void *)&v175[6] = *(void *)&v176[6];
              BYTE8(v175[6]) = BYTE8(v176[6]);
              *(void *)&v175[7] = *(void *)&v176[7];
              BYTE8(v175[7]) = BYTE8(v176[7]);
              *(void *)&v175[8] = *(void *)&v176[8];
              BYTE8(v175[8]) = BYTE8(v176[8]);
              *(void *)&v175[9] = *(void *)&v176[9];
              BYTE8(v175[9]) = BYTE8(v176[9]);
              *(void *)&v175[10] = *(void *)&v176[10];
              BYTE8(v175[10]) = BYTE8(v176[10]);
              BYTE8(v175[11]) = v142 == 0x7FFFFFFFFFFFFFFFLL;
              *(void *)&v175[12] = *(void *)&v176[12];
              BYTE8(v175[12]) = BYTE8(v176[12]);
              *(void *)&v175[13] = *(void *)&v176[13];
              BYTE8(v175[13]) = BYTE8(v176[13]);
              *(void *)&v175[14] = *(void *)&v176[14];
              BYTE8(v175[14]) = BYTE8(v176[14]);
              *(void *)&v175[15] = *(void *)&v176[15];
              BYTE8(v175[15]) = BYTE8(v176[15]);
              BYTE8(v175[16]) = BYTE8(v176[16]);
              *(void *)&v175[16] = *(void *)&v176[16];
              *(void *)&v175[17] = *(void *)&v176[17];
              WORD4(v175[17]) = WORD4(v176[17]);
              v175[0] = v176[0];
              v175[1] = v176[1];
              *(void *)&v175[11] = v145;
              outlined retain of DateComponents((uint64_t)v175);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v113 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v113[2] + 1, 1, v113);
              }
              uint64_t v152 = v113[2];
              uint64_t v151 = v113[3];
              if (v152 >= v151 >> 1) {
                uint64_t v113 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v151 > 1), v152 + 1, 1, v113);
              }
              v113[2] = v152 + 1;
              memcpy(&v113[36 * v152 + 4], v175, 0x11AuLL);
              outlined release of DateComponents((uint64_t)v175);
              if (v146 == v144) {
                break;
              }
              ++v144;
              int v124 = v173;
            }
            swift_bridgeObjectRelease();
            int v124 = v173;
            char v127 = v169;
            uint64_t v128 = v170;
            if (!v169) {
              goto LABEL_179;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            if (v174 == 2)
            {
              uint64_t v153 = 0;
              uint64_t v154 = BYTE8(__dst[16]);
              uint64_t v155 = 1;
              uint64_t v156 = *(void *)&__dst[16];
            }
            else
            {
              uint64_t v156 = 0;
              uint64_t v155 = BYTE8(__dst[15]);
              uint64_t v154 = 1;
              uint64_t v153 = *(void *)&__dst[15];
            }
            char v127 = v169;
            uint64_t v128 = v170;
            *(void *)&v176[2] = *(void *)&__dst[2];
            BYTE8(v176[2]) = BYTE8(__dst[2]);
            *(void *)&long long v176[3] = *(void *)&__dst[3];
            BYTE8(v176[3]) = BYTE8(__dst[3]);
            *(void *)&v176[4] = *(void *)&__dst[4];
            BYTE8(v176[4]) = BYTE8(__dst[4]);
            *(void *)&v176[5] = *(void *)&__dst[5];
            BYTE8(v176[5]) = BYTE8(__dst[5]);
            *(void *)&v176[6] = *(void *)&__dst[6];
            BYTE8(v176[6]) = BYTE8(__dst[6]);
            *(void *)&v176[7] = *(void *)&__dst[7];
            BYTE8(v176[7]) = BYTE8(__dst[7]);
            *(void *)&v176[8] = *(void *)&__dst[8];
            BYTE8(v176[8]) = BYTE8(__dst[8]);
            *(void *)&v176[9] = *(void *)&__dst[9];
            BYTE8(v176[9]) = BYTE8(__dst[9]);
            *(void *)&v176[10] = *(void *)&__dst[10];
            BYTE8(v176[10]) = BYTE8(__dst[10]);
            if (v139 == 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v157 = 0;
            }
            else {
              uint64_t v157 = v139 + 1;
            }
            *(void *)&v176[11] = v157;
            BYTE8(v176[11]) = v139 == 0x7FFFFFFFFFFFFFFELL;
            *(void *)&v176[12] = *(void *)&__dst[12];
            BYTE8(v176[12]) = BYTE8(__dst[12]);
            *(void *)&v176[13] = *(void *)&__dst[13];
            BYTE8(v176[13]) = BYTE8(__dst[13]);
            *(void *)&v176[14] = *(void *)&__dst[14];
            BYTE8(v176[14]) = BYTE8(__dst[14]);
            *(void *)&v176[15] = v153;
            BYTE8(v176[15]) = v155;
            BYTE8(v176[16]) = v154;
            *(void *)&v176[16] = v156;
            *(void *)&v176[17] = *(void *)&__dst[17];
            WORD4(v176[17]) = WORD4(__dst[17]);
            v176[0] = __dst[0];
            v176[1] = __dst[1];
            outlined retain of DateComponents((uint64_t)__dst);
            outlined retain of DateComponents((uint64_t)v176);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v113 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v113[2] + 1, 1, v113);
            }
            char v159 = v113[2];
            uint64_t v158 = v113[3];
            if (v159 >= v158 >> 1) {
              uint64_t v113 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v158 > 1), v159 + 1, 1, v113);
            }
            v113[2] = v159 + 1;
            memcpy(&v113[36 * v159 + 4], v176, 0x11AuLL);
            outlined release of DateComponents((uint64_t)v176);
            if (!v169) {
              goto LABEL_179;
            }
          }
LABEL_178:
          uint64_t v169 = (v127 - 1) & v127;
          uint64_t v170 = v128;
        }
LABEL_237:
        __break(1u);
LABEL_238:
        __break(1u);
        goto LABEL_239;
      }
      long long v133 = v128 + 4;
      if (v128 + 4 < v162)
      {
        uint64_t v131 = *(void *)(v161 + 8 * v133);
        if (!v131)
        {
          while (1)
          {
            long long v132 = v133 + 1;
            if (__OFADD__(v133, 1)) {
              goto LABEL_245;
            }
            if (v132 >= v162) {
              goto LABEL_232;
            }
            uint64_t v131 = *(void *)(v161 + 8 * v132);
            ++v133;
            if (v131) {
              goto LABEL_192;
            }
          }
        }
        long long v132 = v128 + 4;
        goto LABEL_192;
      }
    }
LABEL_232:
    swift_release();
    outlined release of DateComponents((uint64_t)__dst);
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_233;
  }
  double v10 = (char *)a1._rawValue + 32;
  swift_bridgeObjectRetain();
  uint64_t v11 = 0;
  int64_t v12 = MEMORY[0x1E4FBC868];
  uint64_t v172 = v10;
  while (1)
  {
    unint64_t v13 = &v10[16 * v11];
    uint64_t v14 = *(void *)v13;
    int v15 = v13[8];
    if ((v15 & 0x80000000) == 0) {
      break;
    }
    char v26 = v15 & 0x7F;
    if (!*(void *)(v12 + 16) || (unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v26), (v28 & 1) == 0))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_1821037E0;
      *(void *)(v29 + 32) = v14;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&__src[0] = v12;
      unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
      uint64_t v45 = *(void *)(v12 + 16);
      BOOL v46 = (v44 & 1) == 0;
      uint64_t v47 = v45 + v46;
      if (!__OFADD__(v45, v46))
      {
        char v48 = v44;
        if (*(void *)(v12 + 24) < v47)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v47, isUniquelyReferenced_nonNull_native);
          uint64_t v23 = *(void *)&__src[0];
          unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
          if ((v48 & 1) != (v50 & 1)) {
            goto LABEL_253;
          }
          unint64_t v35 = v49;
          double v10 = v172;
          if (v48) {
            goto LABEL_36;
          }
          goto LABEL_31;
        }
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v23 = v12;
          double v10 = v172;
          if (v44) {
            goto LABEL_36;
          }
          goto LABEL_31;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Locale.Weekday, [Int]>);
        uint64_t v72 = static _DictionaryStorage.copy(original:)();
        uint64_t v23 = v72;
        int64_t v73 = v12;
        double v10 = v172;
        if (!*(void *)(v12 + 16)) {
          goto LABEL_111;
        }
        unint64_t v74 = (char *)(v72 + 64);
        unint64_t v75 = (char *)(v12 + 64);
        unint64_t v76 = (unint64_t)((1 << *(unsigned char *)(v23 + 32)) + 63) >> 6;
        uint64_t v163 = v12 + 64;
        if (v23 != v12 || v74 >= &v75[8 * v76]) {
          memmove(v74, v75, 8 * v76);
        }
        int64_t v77 = 0;
        *(void *)(v23 + 16) = *(void *)(v73 + 16);
        uint64_t v78 = 1 << *(unsigned char *)(v73 + 32);
        if (v78 < 64) {
          uint64_t v79 = ~(-1 << v78);
        }
        else {
          uint64_t v79 = -1;
        }
        unint64_t v80 = v79 & *(void *)(v73 + 64);
        uint64_t v167 = (unint64_t)(v78 + 63) >> 6;
        while (1)
        {
          if (v80)
          {
            unint64_t v81 = __clz(__rbit64(v80));
            v80 &= v80 - 1;
            unint64_t v82 = v81 | (v77 << 6);
          }
          else
          {
            int64_t v84 = v77 + 1;
            if (__OFADD__(v77, 1)) {
              goto LABEL_248;
            }
            double v10 = v172;
            if (v84 >= v167) {
              goto LABEL_111;
            }
            unint64_t v85 = *(void *)(v163 + 8 * v84);
            ++v77;
            if (!v85)
            {
              int64_t v77 = v84 + 1;
              if (v84 + 1 >= v167) {
                goto LABEL_111;
              }
              unint64_t v85 = *(void *)(v163 + 8 * v77);
              if (!v85)
              {
                int64_t v77 = v84 + 2;
                if (v84 + 2 >= v167) {
                  goto LABEL_111;
                }
                unint64_t v85 = *(void *)(v163 + 8 * v77);
                if (!v85)
                {
                  int64_t v77 = v84 + 3;
                  if (v84 + 3 >= v167) {
                    goto LABEL_111;
                  }
                  unint64_t v85 = *(void *)(v163 + 8 * v77);
                  if (!v85)
                  {
                    int64_t v77 = v84 + 4;
                    if (v84 + 4 >= v167) {
                      goto LABEL_111;
                    }
                    unint64_t v85 = *(void *)(v163 + 8 * v77);
                    if (!v85)
                    {
                      int64_t v77 = v84 + 5;
                      if (v84 + 5 >= v167) {
                        goto LABEL_111;
                      }
                      unint64_t v85 = *(void *)(v163 + 8 * v77);
                      if (!v85)
                      {
                        int64_t v77 = v84 + 6;
                        if (v84 + 6 >= v167) {
                          goto LABEL_111;
                        }
                        unint64_t v85 = *(void *)(v163 + 8 * v77);
                        if (!v85)
                        {
                          int64_t v86 = v84 + 7;
                          if (v86 >= v167) {
                            goto LABEL_111;
                          }
                          unint64_t v85 = *(void *)(v163 + 8 * v86);
                          if (!v85)
                          {
                            double v10 = v172;
                            while (1)
                            {
                              int64_t v77 = v86 + 1;
                              if (__OFADD__(v86, 1)) {
                                goto LABEL_251;
                              }
                              if (v77 >= v167) {
                                break;
                              }
                              unint64_t v85 = *(void *)(v163 + 8 * v77);
                              ++v86;
                              if (v85) {
                                goto LABEL_110;
                              }
                            }
LABEL_111:
                            swift_bridgeObjectRelease();
                            if (v48)
                            {
LABEL_36:
                              uint64_t v54 = *(void *)(v23 + 56);
                              swift_bridgeObjectRelease();
                              *(void *)(v54 + 8 * v35) = v29;
                              goto LABEL_74;
                            }
LABEL_31:
                            *(void *)(v23 + 8 * (v35 >> 6) + 64) |= 1 << v35;
                            *(unsigned char *)(*(void *)(v23 + 48) + v35) = v26;
                            *(void *)(*(void *)(v23 + 56) + 8 * v35) = v29;
                            uint64_t v51 = *(void *)(v23 + 16);
                            BOOL v52 = __OFADD__(v51, 1);
                            uint64_t v53 = v51 + 1;
                            if (!v52) {
                              goto LABEL_73;
                            }
LABEL_243:
                            __break(1u);
LABEL_244:
                            __break(1u);
LABEL_245:
                            __break(1u);
LABEL_246:
                            swift_bridgeObjectRelease();
                            __break(1u);
LABEL_247:
                            __break(1u);
LABEL_248:
                            __break(1u);
LABEL_249:
                            __break(1u);
                            goto LABEL_250;
                          }
                          int64_t v77 = v86;
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_110:
            unint64_t v80 = (v85 - 1) & v85;
            unint64_t v82 = __clz(__rbit64(v85)) + (v77 << 6);
          }
          uint64_t v83 = *(void *)(*(void *)(v73 + 56) + 8 * v82);
          *(unsigned char *)(*(void *)(v23 + 48) + v82) = *(unsigned char *)(*(void *)(v73 + 48) + v82);
          *(void *)(*(void *)(v23 + 56) + 8 * v82) = v83;
          swift_bridgeObjectRetain();
        }
      }
LABEL_241:
      __break(1u);
LABEL_242:
      __break(1u);
      goto LABEL_243;
    }
    uint64_t v29 = *(void *)(*(void *)(v12 + 56) + 8 * v27);
    uint64_t v30 = *(void *)(v29 + 16);
    if (!v30) {
      goto LABEL_75;
    }
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v29 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30 + 1, 1, (void *)v29);
    }
    unint64_t v32 = *(void *)(v29 + 16);
    unint64_t v31 = *(void *)(v29 + 24);
    if (v32 >= v31 >> 1) {
      uint64_t v29 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, (void *)v29);
    }
    *(void *)(v29 + 16) = v32 + 1;
    *(void *)(v29 + 8 * v32 + 32) = v14;
    char v33 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&__src[0] = v12;
    unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
    uint64_t v36 = *(void *)(v12 + 16);
    BOOL v37 = (v34 & 1) == 0;
    uint64_t v38 = v36 + v37;
    if (__OFADD__(v36, v37)) {
      goto LABEL_244;
    }
    char v39 = v34;
    if (*(void *)(v12 + 24) < v38)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, v33);
      uint64_t v23 = *(void *)&__src[0];
      unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
      if ((v39 & 1) != (v41 & 1)) {
        goto LABEL_253;
      }
      unint64_t v35 = v40;
      double v10 = v172;
      if ((v39 & 1) == 0) {
        goto LABEL_147;
      }
      goto LABEL_36;
    }
    if (v33)
    {
      uint64_t v23 = v12;
      double v10 = v172;
      if ((v34 & 1) == 0) {
        goto LABEL_147;
      }
      goto LABEL_36;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Locale.Weekday, [Int]>);
    uint64_t v87 = static _DictionaryStorage.copy(original:)();
    uint64_t v23 = v87;
    int64_t v88 = v12;
    double v10 = v172;
    if (!*(void *)(v12 + 16)) {
      goto LABEL_146;
    }
    uint64_t v89 = (char *)(v87 + 64);
    uint64_t v90 = (char *)(v12 + 64);
    unint64_t v91 = (unint64_t)((1 << *(unsigned char *)(v23 + 32)) + 63) >> 6;
    long long v164 = v12 + 64;
    if (v23 != v12 || v89 >= &v90[8 * v91]) {
      memmove(v89, v90, 8 * v91);
    }
    int64_t v12 = 0;
    *(void *)(v23 + 16) = *(void *)(v88 + 16);
    uint64_t v92 = 1 << *(unsigned char *)(v88 + 32);
    if (v92 < 64) {
      uint64_t v93 = ~(-1 << v92);
    }
    else {
      uint64_t v93 = -1;
    }
    unint64_t v94 = v93 & *(void *)(v88 + 64);
    uint64_t v168 = (unint64_t)(v92 + 63) >> 6;
    while (1)
    {
      if (v94)
      {
        unint64_t v95 = __clz(__rbit64(v94));
        v94 &= v94 - 1;
        unint64_t v96 = v95 | (v12 << 6);
        goto LABEL_122;
      }
      int64_t v98 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        goto LABEL_249;
      }
      double v10 = v172;
      if (v98 >= v168) {
        goto LABEL_146;
      }
      unint64_t v99 = *(void *)(v164 + 8 * v98);
      ++v12;
      if (!v99)
      {
        int64_t v12 = v98 + 1;
        if (v98 + 1 >= v168) {
          goto LABEL_146;
        }
        unint64_t v99 = *(void *)(v164 + 8 * v12);
        if (!v99)
        {
          int64_t v12 = v98 + 2;
          if (v98 + 2 >= v168) {
            goto LABEL_146;
          }
          unint64_t v99 = *(void *)(v164 + 8 * v12);
          if (!v99)
          {
            int64_t v12 = v98 + 3;
            if (v98 + 3 >= v168) {
              goto LABEL_146;
            }
            unint64_t v99 = *(void *)(v164 + 8 * v12);
            if (!v99)
            {
              int64_t v12 = v98 + 4;
              if (v98 + 4 >= v168) {
                goto LABEL_146;
              }
              unint64_t v99 = *(void *)(v164 + 8 * v12);
              if (!v99)
              {
                int64_t v12 = v98 + 5;
                if (v98 + 5 >= v168) {
                  goto LABEL_146;
                }
                unint64_t v99 = *(void *)(v164 + 8 * v12);
                if (!v99)
                {
                  int64_t v12 = v98 + 6;
                  if (v98 + 6 >= v168) {
                    goto LABEL_146;
                  }
                  unint64_t v99 = *(void *)(v164 + 8 * v12);
                  if (!v99) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
LABEL_145:
      unint64_t v94 = (v99 - 1) & v99;
      unint64_t v96 = __clz(__rbit64(v99)) + (v12 << 6);
LABEL_122:
      uint64_t v97 = *(void *)(*(void *)(v88 + 56) + 8 * v96);
      *(unsigned char *)(*(void *)(v23 + 48) + v96) = *(unsigned char *)(*(void *)(v88 + 48) + v96);
      *(void *)(*(void *)(v23 + 56) + 8 * v96) = v97;
      swift_bridgeObjectRetain();
    }
    int64_t v100 = v98 + 7;
    if (v100 >= v168) {
      goto LABEL_146;
    }
    unint64_t v99 = *(void *)(v164 + 8 * v100);
    if (v99)
    {
      int64_t v12 = v100;
      goto LABEL_145;
    }
    while (1)
    {
      int64_t v12 = v100 + 1;
      if (__OFADD__(v100, 1)) {
        goto LABEL_252;
      }
      double v10 = v172;
      if (v12 >= v168) {
        break;
      }
      unint64_t v99 = *(void *)(v164 + 8 * v12);
      ++v100;
      if (v99) {
        goto LABEL_145;
      }
    }
LABEL_146:
    swift_bridgeObjectRelease();
    if (v39) {
      goto LABEL_36;
    }
LABEL_147:
    *(void *)(v23 + 8 * (v35 >> 6) + 64) |= 1 << v35;
    *(unsigned char *)(*(void *)(v23 + 48) + v35) = v26;
    *(void *)(*(void *)(v23 + 56) + 8 * v35) = v29;
    uint64_t v101 = *(void *)(v23 + 16);
    BOOL v52 = __OFADD__(v101, 1);
    uint64_t v53 = v101 + 1;
    if (v52)
    {
      __break(1u);
      goto LABEL_150;
    }
LABEL_73:
    *(void *)(v23 + 16) = v53;
LABEL_74:
    swift_bridgeObjectRelease();
    int64_t v12 = v23;
LABEL_75:
    if (++v11 == v9)
    {
LABEL_150:
      uint64_t v165 = v12;
      swift_bridgeObjectRelease();
      goto LABEL_152;
    }
  }
  char v16 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&__src[0] = v12;
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
  uint64_t v19 = *(void *)(v12 + 16);
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
LABEL_239:
    __break(1u);
    goto LABEL_240;
  }
  char v22 = v17;
  if (*(void *)(v12 + 24) < v21)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, v16);
    uint64_t v23 = *(void *)&__src[0];
    unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
    if ((v22 & 1) != (v25 & 1)) {
      goto LABEL_253;
    }
    unint64_t v18 = v24;
    if ((v22 & 1) == 0) {
      goto LABEL_72;
    }
LABEL_23:
    uint64_t v42 = *(void *)(v23 + 56);
    swift_bridgeObjectRelease();
    *(void *)(v42 + 8 * v18) = MEMORY[0x1E4FBC860];
    goto LABEL_74;
  }
  if (v16)
  {
    uint64_t v23 = v12;
    if (v17) {
      goto LABEL_23;
    }
LABEL_72:
    *(void *)(v23 + 8 * (v18 >> 6) + 64) |= 1 << v18;
    *(unsigned char *)(*(void *)(v23 + 48) + v18) = v14;
    *(void *)(*(void *)(v23 + 56) + 8 * v18) = MEMORY[0x1E4FBC860];
    uint64_t v71 = *(void *)(v23 + 16);
    BOOL v52 = __OFADD__(v71, 1);
    uint64_t v53 = v71 + 1;
    if (!v52) {
      goto LABEL_73;
    }
LABEL_240:
    __break(1u);
    goto LABEL_241;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Locale.Weekday, [Int]>);
  uint64_t v55 = static _DictionaryStorage.copy(original:)();
  uint64_t v23 = v55;
  int64_t v56 = v12;
  if (!*(void *)(v12 + 16))
  {
LABEL_71:
    swift_bridgeObjectRelease();
    if (v22) {
      goto LABEL_23;
    }
    goto LABEL_72;
  }
  uint64_t v57 = (char *)(v55 + 64);
  char v58 = (char *)(v12 + 64);
  unint64_t v59 = (unint64_t)((1 << *(unsigned char *)(v23 + 32)) + 63) >> 6;
  uint64_t v166 = v12 + 64;
  if (v23 != v12 || v57 >= &v58[8 * v59]) {
    memmove(v57, v58, 8 * v59);
  }
  int64_t v60 = 0;
  *(void *)(v23 + 16) = *(void *)(v56 + 16);
  uint64_t v61 = 1 << *(unsigned char *)(v56 + 32);
  if (v61 < 64) {
    uint64_t v62 = ~(-1 << v61);
  }
  else {
    uint64_t v62 = -1;
  }
  unint64_t v63 = v62 & *(void *)(v56 + 64);
  int64_t v64 = (unint64_t)(v61 + 63) >> 6;
  while (2)
  {
    if (v63)
    {
      unint64_t v65 = __clz(__rbit64(v63));
      v63 &= v63 - 1;
      unint64_t v66 = v65 | (v60 << 6);
LABEL_46:
      uint64_t v67 = *(void *)(*(void *)(v56 + 56) + 8 * v66);
      *(unsigned char *)(*(void *)(v23 + 48) + v66) = *(unsigned char *)(*(void *)(v56 + 48) + v66);
      *(void *)(*(void *)(v23 + 56) + 8 * v66) = v67;
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  int64_t v68 = v60 + 1;
  if (__OFADD__(v60, 1)) {
    goto LABEL_247;
  }
  double v10 = v172;
  if (v68 >= v64) {
    goto LABEL_71;
  }
  unint64_t v69 = *(void *)(v166 + 8 * v68);
  ++v60;
  if (v69) {
    goto LABEL_70;
  }
  int64_t v60 = v68 + 1;
  if (v68 + 1 >= v64) {
    goto LABEL_71;
  }
  unint64_t v69 = *(void *)(v166 + 8 * v60);
  if (v69) {
    goto LABEL_70;
  }
  int64_t v60 = v68 + 2;
  if (v68 + 2 >= v64) {
    goto LABEL_71;
  }
  unint64_t v69 = *(void *)(v166 + 8 * v60);
  if (v69) {
    goto LABEL_70;
  }
  int64_t v60 = v68 + 3;
  if (v68 + 3 >= v64) {
    goto LABEL_71;
  }
  unint64_t v69 = *(void *)(v166 + 8 * v60);
  if (v69) {
    goto LABEL_70;
  }
  int64_t v60 = v68 + 4;
  if (v68 + 4 >= v64) {
    goto LABEL_71;
  }
  unint64_t v69 = *(void *)(v166 + 8 * v60);
  if (v69) {
    goto LABEL_70;
  }
  int64_t v60 = v68 + 5;
  if (v68 + 5 >= v64) {
    goto LABEL_71;
  }
  unint64_t v69 = *(void *)(v166 + 8 * v60);
  if (v69) {
    goto LABEL_70;
  }
  int64_t v60 = v68 + 6;
  if (v68 + 6 >= v64) {
    goto LABEL_71;
  }
  unint64_t v69 = *(void *)(v166 + 8 * v60);
  if (v69)
  {
LABEL_70:
    unint64_t v63 = (v69 - 1) & v69;
    unint64_t v66 = __clz(__rbit64(v69)) + (v60 << 6);
    goto LABEL_46;
  }
  int64_t v70 = v68 + 7;
  if (v70 >= v64) {
    goto LABEL_71;
  }
  unint64_t v69 = *(void *)(v166 + 8 * v70);
  if (v69)
  {
    int64_t v60 = v70;
    goto LABEL_70;
  }
  double v10 = v172;
  while (1)
  {
    int64_t v60 = v70 + 1;
    if (__OFADD__(v70, 1)) {
      break;
    }
    if (v60 >= v64) {
      goto LABEL_71;
    }
    unint64_t v69 = *(void *)(v166 + 8 * v60);
    ++v70;
    if (v69) {
      goto LABEL_70;
    }
  }
LABEL_250:
  __break(1u);
LABEL_251:
  __break(1u);
LABEL_252:
  __break(1u);
LABEL_253:
  long long v160 = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_254:
  result.value._rawValue = v160;
  result.is_nil = v112;
  return result;
}

Swift::Int closure #1 in Calendar.RecurrenceRule._expandOrLimitWeekdays(dates:anchor:action:)(double *a1, uint64_t a2, long long *a3)
{
  void (*v33)(_OWORD *__return_ptr, double *, _OWORD *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  long long v38[18];
  double __dst[36];
  _OWORD __src[18];
  _OWORD v41[18];
  long long v42;
  long long v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  __int16 v75;
  long long v76;
  _OWORD v77[19];

  uint64_t v4 = v3;
  if (!a2) {
    return 0;
  }
  uint64_t v36 = *(void *)(a2 + 16);
  if (!v36) {
    return 0;
  }
  double v5 = *a1;
  unint64_t v35 = a2 + 32;
  unint64_t v76 = *a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  double v6 = 1.59271755e13;
  if (v5 <= 1.59271755e13) {
    double v6 = v5;
  }
  double v7 = fmax(v6, -2.11845067e11);
  swift_bridgeObjectRetain_n();
  uint64_t v8 = 0;
  while (2)
  {
    memcpy(v77, (const void *)(v35 + 288 * v8), 0x11AuLL);
    BOOL v37 = v8 + 1;
    uint64_t v13 = static _SetStorage.allocate(capacity:)();
    uint64_t v14 = 0;
    uint64_t v15 = v13 + 56;
    do
    {
      Swift::UInt v19 = outlined read-only object #0 of closure #1 in Calendar.RecurrenceRule._expandOrLimitWeekdays(dates:anchor:action:)[v14 + 32];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v19);
      Swift::Int result = Hasher._finalize()();
      uint64_t v21 = -1 << *(unsigned char *)(v13 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      uint64_t v24 = *(void *)(v15 + 8 * (v22 >> 6));
      uint64_t v25 = 1 << v22;
      uint64_t v26 = *(void *)(v13 + 48);
      if (((1 << v22) & v24) != 0)
      {
        if (*(unsigned __int8 *)(v26 + v22) == v19) {
          goto LABEL_12;
        }
        uint64_t v27 = ~v21;
        while (1)
        {
          unint64_t v22 = (v22 + 1) & v27;
          unint64_t v23 = v22 >> 6;
          uint64_t v24 = *(void *)(v15 + 8 * (v22 >> 6));
          uint64_t v25 = 1 << v22;
          if ((v24 & (1 << v22)) == 0) {
            break;
          }
          if (*(unsigned __int8 *)(v26 + v22) == v19) {
            goto LABEL_12;
          }
        }
      }
      *(void *)(v15 + 8 * v23) = v25 | v24;
      *(unsigned char *)(v26 + v22) = v19;
      uint64_t v16 = *(void *)(v13 + 16);
      BOOL v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        goto LABEL_33;
      }
      *(void *)(v13 + 16) = v18;
LABEL_12:
      ++v14;
    }
    while (v14 != 15);
    outlined retain of DateComponents((uint64_t)v77);
    outlined retain of DateComponents((uint64_t)v77);
    outlined retain of Locale((uint64_t)&v76);
    uint64_t v28 = v4;
    specialized _NativeSet.filter(_:)(v13, v77);
    outlined release of DateComponents((uint64_t)v77);
    v41[0] = v76;
    uint64_t v29 = swift_bridgeObjectRetain();
    Calendar.ComponentSet.init(_:)(v29, __src);
    __dst[0] = v7;
    Calendar._dateComponents(_:from:)((uint64_t *)__src, __dst, &v42);
    swift_release();
    char v30 = BYTE9(v77[17]);
    if (BYTE9(v77[17]) == 2)
    {
      Swift::Int result = outlined retain of DateComponents((uint64_t)v77);
    }
    else
    {
      *(void *)&__dst[0] = 4;
      uint64_t v31 = *((void *)&v76 + 1);
      uint64_t ObjectType = swift_getObjectType();
      *(double *)uint64_t __src = v7;
      char v33 = *(void (**)(_OWORD *__return_ptr, double *, _OWORD *, uint64_t, uint64_t))(v31 + 192);
      outlined retain of DateComponents((uint64_t)v77);
      v33(v41, __dst, __src, ObjectType, v31);
      uint64_t v4 = v28;
      memcpy(__src, v41, 0x11AuLL);
      Swift::Int result = outlined release of DateComponents((uint64_t)__src);
      HIBYTE(v75) = BYTE9(__src[17]);
    }
    uint64_t v10 = *(void *)&v77[10];
    uint64_t v9 = v60;
    char v11 = v61 ^ 1 | BYTE8(v77[10]);
    if (v61 & 1) != 0 || (BYTE8(v77[10])) {
      goto LABEL_7;
    }
    char v34 = v60 - *(void *)&v77[10];
    if (__OFSUB__(v60, *(void *)&v77[10]))
    {
LABEL_33:
      __break(1u);
      return result;
    }
    if (v34 < 0) {
      char v34 = *(void *)&v77[10] - v60;
    }
    if ((unint64_t)v34 >= 0x1F5)
    {
      outlined release of DateComponents((uint64_t)v77);
      *(void *)&v41[2] = v44;
      BYTE8(v41[2]) = v45;
      *(void *)&_OWORD v41[3] = v46;
      BYTE8(v41[3]) = v47;
      *(void *)&v41[4] = v48;
      BYTE8(v41[4]) = v49;
      *(void *)&v41[5] = v50;
      BYTE8(v41[5]) = v51;
      *(void *)&v41[6] = v52;
      BYTE8(v41[6]) = v53;
      *(void *)&v41[7] = v54;
      BYTE8(v41[7]) = v55;
      *(void *)&v41[8] = v56;
      BYTE8(v41[8]) = v57;
      *(void *)&v41[9] = v58;
      BYTE8(v41[9]) = v59;
      *(void *)&v41[10] = v9;
      *(void *)&v41[11] = v62;
      BYTE8(v41[11]) = v63;
      *(void *)&void v41[12] = v64;
      BYTE8(v41[12]) = v65;
      *(void *)&v41[13] = v66;
      BYTE8(v41[13]) = v67;
      *(void *)&void v41[14] = v68;
      BYTE8(v41[14]) = v69;
      *(void *)&v41[15] = v70;
      BYTE8(v41[15]) = v71;
      BYTE8(v41[16]) = v73;
      *(void *)&v41[16] = v72;
      *(void *)&v41[17] = v74;
      WORD4(v41[17]) = v75;
      v41[0] = v42;
      v41[1] = v43;
      BYTE8(v41[10]) = 0;
      outlined release of DateComponents((uint64_t)v41);
      outlined release of Locale((uint64_t)&v76);
      outlined release of DateComponents((uint64_t)v77);
      goto LABEL_8;
    }
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    char v11 = 0;
LABEL_7:
    *(void *)&__src[2] = *(void *)&v77[2];
    BYTE8(__src[2]) = BYTE8(v77[2]);
    *(void *)&__src[3] = *(void *)&v77[3];
    BYTE8(__src[3]) = BYTE8(v77[3]);
    *(void *)&__src[4] = *(void *)&v77[4];
    BYTE8(__src[4]) = BYTE8(v77[4]);
    *(void *)&__src[5] = *(void *)&v77[5];
    BYTE8(__src[5]) = BYTE8(v77[5]);
    *(void *)&__src[6] = *(void *)&v77[6];
    BYTE8(__src[6]) = BYTE8(v77[6]);
    *(void *)&__src[7] = *(void *)&v77[7];
    BYTE8(__src[7]) = BYTE8(v77[7]);
    *(void *)&__src[8] = *(void *)&v77[8];
    BYTE8(__src[8]) = BYTE8(v77[8]);
    *(void *)&__src[9] = *(void *)&v77[9];
    BYTE8(__src[9]) = BYTE8(v77[9]);
    *(void *)&__src[10] = v10;
    BYTE8(__src[10]) = v11;
    *(void *)&__src[11] = *(void *)&v77[11];
    BYTE8(__src[11]) = BYTE8(v77[11]);
    *(void *)&__src[12] = *(void *)&v77[12];
    BYTE8(__src[12]) = BYTE8(v77[12]);
    *(void *)&__src[13] = *(void *)&v77[13];
    BYTE8(__src[13]) = BYTE8(v77[13]);
    *(void *)&__src[14] = *(void *)&v77[14];
    BYTE8(__src[14]) = BYTE8(v77[14]);
    *(void *)&__src[15] = *(void *)&v77[15];
    BYTE8(__src[15]) = BYTE8(v77[15]);
    BYTE8(__src[16]) = BYTE8(v77[16]);
    *(void *)&__src[16] = *(void *)&v77[16];
    *(void *)&__src[17] = *(void *)&v77[17];
    BYTE8(__src[17]) = BYTE8(v77[17]);
    BYTE9(__src[17]) = v30;
    __src[0] = v77[0];
    __src[1] = v77[1];
    memcpy(__dst, __src, 0x11AuLL);
    *(void *)&v41[2] = v44;
    BYTE8(v41[2]) = v45;
    *(void *)&_OWORD v41[3] = v46;
    BYTE8(v41[3]) = v47;
    *(void *)&v41[4] = v48;
    BYTE8(v41[4]) = v49;
    *(void *)&v41[5] = v50;
    BYTE8(v41[5]) = v51;
    *(void *)&v41[6] = v52;
    BYTE8(v41[6]) = v53;
    *(void *)&v41[7] = v54;
    BYTE8(v41[7]) = v55;
    *(void *)&v41[8] = v56;
    BYTE8(v41[8]) = v57;
    *(void *)&v41[9] = v58;
    BYTE8(v41[9]) = v59;
    *(void *)&v41[10] = v9;
    BYTE8(v41[10]) = v61;
    *(void *)&v41[11] = v62;
    BYTE8(v41[11]) = v63;
    *(void *)&void v41[12] = v64;
    BYTE8(v41[12]) = v65;
    *(void *)&v41[13] = v66;
    BYTE8(v41[13]) = v67;
    *(void *)&void v41[14] = v68;
    BYTE8(v41[14]) = v69;
    *(void *)&v41[15] = v70;
    BYTE8(v41[15]) = v71;
    BYTE8(v41[16]) = v73;
    *(void *)&v41[16] = v72;
    *(void *)&v41[17] = v74;
    WORD4(v41[17]) = v75;
    v41[0] = v42;
    v41[1] = v43;
    memcpy(v38, v41, 0x11AuLL);
    BOOL v12 = specialized static DateComponents.== infix(_:_:)((uint64_t)__dst, v38);
    outlined release of DateComponents((uint64_t)__src);
    outlined release of DateComponents((uint64_t)v41);
    outlined release of Locale((uint64_t)&v76);
    outlined release of DateComponents((uint64_t)v77);
    if (v12)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
LABEL_8:
    uint64_t v8 = v37;
    if (v37 != v36) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease_n();
  return 0;
}

uint64_t closure #2 in Calendar.RecurrenceRule._expandOrLimitWeekdays(dates:anchor:action:)@<X0>(double *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, char a4@<W3>, void *a5@<X8>, Foundation::Date a6@<D0>)
{
  void (*v18)(double *__return_ptr, _OWORD *, void *, uint64_t, uint64_t);
  uint64_t v19;
  double v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  int64_t v34;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  char *v37;
  char *v38;
  size_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  int64_t v43;
  uint64_t result;
  void *v45;
  unint64_t v46;
  unsigned __int8 v47;
  char v48;
  int v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD __src[18];
  void v54[42];
  _OWORD __dst[18];
  double v56[43];

  double v9 = *a1;
  v10._rawValue = (void *)a2[9];
  LOBYTE(v54[0]) = a3;
  v56[0] = v9;
  unint64_t v11 = (unint64_t)Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(v10, (Foundation::Calendar::Component)v54, a6);
  if (!v11) {
    goto LABEL_36;
  }
  unint64_t v12 = v11;
  uint64_t v45 = a5;
  LOBYTE(__dst[0]) = a4;
  double v13 = 1.59271755e13;
  if (v9 <= 1.59271755e13) {
    double v13 = v9;
  }
  double v14 = fmax(v13, -2.11845067e11);
  uint64_t v15 = *a2;
  uint64_t v16 = a2[1];
  uint64_t ObjectType = swift_getObjectType();
  *(double *)uint64_t v54 = v14;
  uint64_t v18 = *(void (**)(double *__return_ptr, _OWORD *, void *, uint64_t, uint64_t))(v16 + 160);
  swift_unknownObjectRetain();
  uint64_t v51 = v16;
  v18(v56, __dst, v54, ObjectType, v16);
  BOOL v52 = v15;
  swift_unknownObjectRelease();
  if (LOBYTE(v56[2]))
  {
LABEL_37:
    __break(1u);
LABEL_38:
    Swift::Int result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    Swift::UInt v19 = *(void *)(v12 + 16);
    if (v19)
    {
      char v50 = v56[0];
      BOOL v20 = v56[1] + v56[0];
      if (v56[1] + v56[0] < v56[0]) {
        goto LABEL_35;
      }
      char v48 = *((unsigned char *)a2 + 16);
      unint64_t v49 = *((unsigned __int8 *)a2 + 18);
      uint64_t v47 = *((unsigned char *)a2 + 17);
      memcpy(__dst, (const void *)(v12 + 32), 0x11AuLL);
      uint64_t v21 = v19 - 1;
      unint64_t v22 = (void *)MEMORY[0x1E4FBC860];
      unint64_t v23 = 320;
      BOOL v46 = v12;
      while (1)
      {
        if (v49 == 3)
        {
          uint64_t v24 = 0;
          uint64_t v25 = 0;
          uint64_t v26 = 0;
          uint64_t v27 = 1;
          uint64_t v28 = 2;
          uint64_t v29 = 1;
          char v30 = 1;
        }
        else
        {
          char v30 = BYTE8(__dst[2]);
          uint64_t v26 = *(void *)&__dst[2];
          uint64_t v29 = BYTE8(__dst[3]);
          uint64_t v25 = *(void *)&__dst[3];
          uint64_t v27 = BYTE8(__dst[4]);
          uint64_t v24 = *(void *)&__dst[4];
          uint64_t v28 = BYTE9(__dst[17]);
        }
        *(void *)&__src[2] = v26;
        BYTE8(__src[2]) = v30;
        *(void *)&__src[3] = v25;
        BYTE8(__src[3]) = v29;
        *(void *)&__src[4] = v24;
        BYTE8(__src[4]) = v27;
        *(void *)&__src[5] = *(void *)&__dst[5];
        BYTE8(__src[5]) = BYTE8(__dst[5]);
        *(void *)&__src[6] = *(void *)&__dst[6];
        BYTE8(__src[6]) = BYTE8(__dst[6]);
        *(void *)&__src[7] = *(void *)&__dst[7];
        BYTE8(__src[7]) = BYTE8(__dst[7]);
        *(void *)&__src[8] = *(void *)&__dst[8];
        BYTE8(__src[8]) = BYTE8(__dst[8]);
        *(void *)&__src[9] = *(void *)&__dst[9];
        BYTE8(__src[9]) = BYTE8(__dst[9]);
        *(void *)&__src[10] = *(void *)&__dst[10];
        BYTE8(__src[10]) = BYTE8(__dst[10]);
        *(void *)&__src[11] = *(void *)&__dst[11];
        BYTE8(__src[11]) = BYTE8(__dst[11]);
        *(void *)&__src[12] = *(void *)&__dst[12];
        BYTE8(__src[12]) = BYTE8(__dst[12]);
        *(void *)&__src[13] = *(void *)&__dst[13];
        BYTE8(__src[13]) = BYTE8(__dst[13]);
        *(void *)&__src[14] = *(void *)&__dst[14];
        BYTE8(__src[14]) = BYTE8(__dst[14]);
        *(void *)&__src[15] = *(void *)&__dst[15];
        BYTE8(__src[15]) = BYTE8(__dst[15]);
        BYTE8(__src[16]) = BYTE8(__dst[16]);
        *(void *)&__src[16] = *(void *)&__dst[16];
        *(void *)&__src[17] = *(void *)&__dst[17];
        BYTE8(__src[17]) = BYTE8(__dst[17]);
        BYTE9(__src[17]) = v28;
        __src[0] = __dst[0];
        __src[1] = __dst[1];
        v54[0] = v52;
        v54[1] = v51;
        *(double *)&_OWORD v54[2] = v50;
        *(double *)&v54[3] = v50;
        *(double *)&v54[4] = v20;
        LOBYTE(v54[5]) = 0;
        memcpy(&v54[6], __src, 0x11AuLL);
        BYTE2(v54[41]) = v48;
        *(_WORD *)((char *)&v54[41] + 3) = v47;
        memcpy(v56, v54, 0x14DuLL);
        outlined retain of DateComponents((uint64_t)__dst);
        swift_unknownObjectRetain();
        outlined retain of DateComponents((uint64_t)__dst);
        outlined retain of DateComponents((uint64_t)__src);
        uint64_t v31 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v56);
        outlined release of Calendar.DatesByAdding((uint64_t)v54);
        unint64_t v32 = *(void *)(v31 + 16);
        char v33 = v22[2];
        char v34 = v33 + v32;
        if (__OFADD__(v33, v32))
        {
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
        char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
        if (isUniquelyReferenced_nonNull_native && v34 <= v22[3] >> 1)
        {
          if (*(void *)(v31 + 16)) {
            goto LABEL_15;
          }
        }
        else
        {
          if (v33 <= v34) {
            uint64_t v43 = v33 + v32;
          }
          else {
            uint64_t v43 = v33;
          }
          unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v43, 1, v22);
          if (*(void *)(v31 + 16))
          {
LABEL_15:
            uint64_t v36 = v22[2];
            if ((v22[3] >> 1) - v36 < v32) {
              goto LABEL_33;
            }
            BOOL v37 = (char *)&v22[v36 + 4];
            uint64_t v38 = (char *)(v31 + 32);
            char v39 = 8 * v32;
            if (v31 + 32 < (unint64_t)&v37[8 * v32] && v37 < &v38[v39]) {
              goto LABEL_38;
            }
            memcpy(v37, v38, v39);
            if (v32)
            {
              unint64_t v40 = v22[2];
              char v41 = __OFADD__(v40, v32);
              uint64_t v42 = v40 + v32;
              if (v41) {
                goto LABEL_34;
              }
              _OWORD v22[2] = v42;
            }
            goto LABEL_26;
          }
        }
        if (v32) {
          goto LABEL_32;
        }
LABEL_26:
        swift_release();
        outlined release of DateComponents((uint64_t)__dst);
        outlined release of DateComponents((uint64_t)__src);
        if (!v21)
        {
          Swift::Int result = swift_bridgeObjectRelease();
          goto LABEL_30;
        }
        memcpy(__dst, (const void *)(v46 + v23), 0x11AuLL);
        v23 += 288;
        --v21;
      }
    }
    Swift::Int result = swift_bridgeObjectRelease();
    unint64_t v22 = (void *)MEMORY[0x1E4FBC860];
LABEL_30:
    *uint64_t v45 = v22;
  }
  return result;
}

uint64_t getter of weekRange #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(uint64_t a1, long long *a2, char a3, char a4, double a5)
{
  if (*(unsigned char *)(a1 + 32) != 1) {
    return *(void *)(a1 + 16);
  }
  char v17 = a3;
  char v16 = a4;
  if (a5 > 1.59271755e13) {
    a5 = 1.59271755e13;
  }
  double v6 = fmax(a5, -2.11845067e11);
  long long v18 = *a2;
  uint64_t v7 = *((void *)&v18 + 1);
  uint64_t ObjectType = swift_getObjectType();
  double v15 = v6;
  double v9 = *(uint64_t (**)(void, void, void, void, void))(*((void *)&v18 + 1) + 144);
  outlined retain of Locale((uint64_t)&v18);
  uint64_t v10 = v9(&v17, &v16, &v15, ObjectType, v7);
  uint64_t v12 = v11;
  LOBYTE(ObjectType) = v13;
  uint64_t result = outlined release of Locale((uint64_t)&v18);
  if ((ObjectType & 1) == 0)
  {
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 24) = v12;
    *(unsigned char *)(a1 + 32) = 0;
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized getter of firstWeekday #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(unsigned char *a1, long long *a2, double a3)
{
  void (*v7)(void *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  uint64_t result;
  double v9;
  void v10[23];
  char v11;
  uint64_t v12;
  long long v13;

  if (a1[8] != 1) {
    return *(void *)a1;
  }
  char v13 = *a2;
  uint64_t v12 = 128;
  if (a3 > 1.59271755e13) {
    a3 = 1.59271755e13;
  }
  double v4 = fmax(a3, -2.11845067e11);
  uint64_t v5 = *((void *)&v13 + 1);
  uint64_t ObjectType = swift_getObjectType();
  double v9 = v4;
  uint64_t v7 = *(void (**)(void *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(*((void *)&v13 + 1) + 192);
  outlined retain of Locale((uint64_t)&v13);
  v7(v10, &v12, &v9, ObjectType, v5);
  outlined release of DateComponents((uint64_t)v10);
  outlined release of Locale((uint64_t)&v13);
  if (v11) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = v10[22];
  }
  *(void *)a1 = result;
  a1[8] = 0;
  return result;
}

uint64_t specialized getter of lastWeekday #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(unsigned char *a1, uint64_t a2, double a3, double a4)
{
  if (a1[8] != 1) {
    return *(void *)a1;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  double v6 = a3 + a4 + -0.1;
  uint64_t v13 = 128;
  if (v6 > 1.59271755e13) {
    double v6 = 1.59271755e13;
  }
  double v7 = fmax(v6, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v10 = v7;
  (*(void (**)(void *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v5 + 192))(v11, &v13, &v10, ObjectType, v5);
  outlined release of DateComponents((uint64_t)v11);
  if (v12) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = v11[22];
  }
  *(void *)a1 = result;
  a1[8] = 0;
  return result;
}

uint64_t specialized getter of firstWeek #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(unsigned char *a1, uint64_t a2, long long *a3, char a4, char a5, uint64_t a6, unsigned char *a7, double a8, double a9)
{
  if (a1[8] != 1) {
    return *(void *)a1;
  }
  uint64_t v14 = getter of weekRange #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(a2, a3, a4, a5, a8);
  BOOL v15 = specialized getter of firstWeekday #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(a7, a3, a9) > a6;
  uint64_t result = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    *(void *)a1 = result;
    a1[8] = 0;
  }
  return result;
}

uint64_t specialized getter of lastWeek #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(unsigned char *a1, uint64_t a2, long long *a3, char a4, char a5, uint64_t a6, unsigned char *a7, double a8, double a9, double a10)
{
  if (a1[8] != 1) {
    return *(void *)a1;
  }
  getter of weekRange #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(a2, a3, a4, a5, a8);
  uint64_t v17 = v16;
  BOOL v18 = specialized getter of lastWeekday #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(a7, (uint64_t)a3, a9, a10) < a6;
  uint64_t result = v17 - v18;
  if (__OFSUB__(v17, v18))
  {
    __break(1u);
  }
  else
  {
    *(void *)a1 = result;
    a1[8] = 0;
  }
  return result;
}

void specialized _copySequenceToContiguousArray<A>(_:)(void *a1)
{
  uint64_t v2 = (uint64_t)objc_msgSend(a1, sel_count);
  if (v2 <= 0)
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
    unint64_t v6 = *(void *)(MEMORY[0x1E4FBC860] + 24);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v3 = (void *)swift_allocObject();
    int64_t v4 = _swift_stdlib_malloc_size(v3);
    uint64_t v5 = v4 - 32;
    if (v4 < 32) {
      uint64_t v5 = v4 - 1;
    }
    unint64_t v6 = 2 * (v5 >> 5);
    v3[2] = v2;
    v3[3] = v6;
  }
  NSFastEnumerationIterator.init(_:)((uint64_t)a1, (uint64_t)v39);
  if (v2 < 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  unint64_t v7 = v6 >> 1;
  uint64_t v8 = v3 + 4;
  if (v2)
  {
    v7 -= v2;
    do
    {
      NSFastEnumerationIterator.next()((uint64_t)&v23);
      if (!*((void *)&v24 + 1)) {
        goto LABEL_38;
      }
      outlined init with take of Any(&v23, v8);
      v8 += 2;
    }
    while (--v2);
  }
  NSFastEnumerationIterator.next()((uint64_t)&v36);
  if (v37)
  {
    while (1)
    {
      outlined init with take of Any(&v36, v38);
      if (!v7)
      {
        unint64_t v9 = v3[3];
        if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_35;
        }
        int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
        if (v10 <= 1) {
          uint64_t v11 = 1;
        }
        else {
          uint64_t v11 = v10;
        }
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
        char v12 = (void *)swift_allocObject();
        int64_t v13 = _swift_stdlib_malloc_size(v12);
        uint64_t v14 = v13 - 32;
        if (v13 < 32) {
          uint64_t v14 = v13 - 1;
        }
        uint64_t v15 = v14 >> 5;
        void v12[2] = v11;
        _OWORD v12[3] = 2 * (v14 >> 5);
        unint64_t v16 = (unint64_t)(v12 + 4);
        uint64_t v17 = v3[3] >> 1;
        if (v3[2])
        {
          if (v12 != v3 || v16 >= (unint64_t)&v3[4 * v17 + 4]) {
            memmove(v12 + 4, v3 + 4, 32 * v17);
          }
          v3[2] = 0;
        }
        uint64_t v8 = (_OWORD *)(v16 + 32 * v17);
        unint64_t v7 = (v15 & 0x7FFFFFFFFFFFFFFFLL) - v17;
        swift_release();
        uint64_t v3 = v12;
      }
      BOOL v19 = __OFSUB__(v7--, 1);
      if (v19) {
        break;
      }
      outlined init with take of Any(v38, v8);
      v8 += 2;
      NSFastEnumerationIterator.next()((uint64_t)&v36);
      if (!v37) {
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
LABEL_30:
  long long v33 = v39[10];
  long long v34 = v39[11];
  v35[0] = v40[0];
  *(_OWORD *)((char *)v35 + 9) = *(_OWORD *)((char *)v40 + 9);
  long long v29 = v39[6];
  long long v30 = v39[7];
  long long v31 = v39[8];
  long long v32 = v39[9];
  long long v25 = v39[2];
  long long v26 = v39[3];
  long long v27 = v39[4];
  long long v28 = v39[5];
  long long v23 = v39[0];
  long long v24 = v39[1];
  outlined release of Locale((uint64_t)&v23);
  outlined destroy of Any?((uint64_t)&v36, (uint64_t *)&demangling cache variable for type metadata for Any?);
  unint64_t v20 = v3[3];
  if (v20 >= 2)
  {
    unint64_t v21 = v20 >> 1;
    BOOL v19 = __OFSUB__(v21, v7);
    unint64_t v22 = v21 - v7;
    if (v19)
    {
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      return;
    }
    v3[2] = v22;
  }
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  char *v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  id v15;
  id v16;
  unint64_t v17;
  id v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  BOOL v29;
  id v30;
  id v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  char *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;

  uint64_t v2 = (uint64_t)objc_msgSend(a1, sel_count);
  uint64_t v3 = v2;
  if (v2 <= 0)
  {
    if (v2 < 0)
    {
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    int64_t v4 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v17 = *(void *)(MEMORY[0x1E4FBC860] + 24);
    uint64_t v14 = v17 >> 1;
    BOOL v18 = objc_msgSend(a1, sel_firstIndex);
    if (v18 != (id)0x7FFFFFFFFFFFFFFFLL)
    {
      unint64_t v16 = v18;
      if (v17 > 1)
      {
        uint64_t v11 = v4 + 32;
        long long v29 = __OFSUB__(v14--, 1);
        if (!v29)
        {
LABEL_27:
          *(void *)uint64_t v11 = v16;
          long long v30 = objc_msgSend(a1, sel_indexGreaterThanIndex_, v16);
          if (v30 != (id)0x7FFFFFFFFFFFFFFFLL)
          {
            long long v31 = v30;
            while (1)
            {
              if (v14)
              {
                v11 += 8;
                long long v29 = __OFSUB__(v14--, 1);
                if (v29) {
                  goto LABEL_55;
                }
              }
              else
              {
                long long v32 = *((void *)v4 + 3);
                if ((uint64_t)((v32 >> 1) + 0x4000000000000000) < 0) {
                  goto LABEL_57;
                }
                long long v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
                if (v33 <= 1) {
                  long long v34 = 1;
                }
                else {
                  long long v34 = v33;
                }
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
                unint64_t v35 = (char *)swift_allocObject();
                long long v36 = _swift_stdlib_malloc_size(v35);
                uint64_t v37 = v36 - 32;
                if (v36 < 32) {
                  uint64_t v37 = v36 - 25;
                }
                uint64_t v38 = v37 >> 3;
                *((void *)v35 + 2) = v34;
                *((void *)v35 + 3) = 2 * (v37 >> 3);
                char v39 = (unint64_t)(v35 + 32);
                unint64_t v40 = *((void *)v4 + 3) >> 1;
                if (*((void *)v4 + 2))
                {
                  if (v35 != v4 || v39 >= (unint64_t)&v4[8 * v40 + 32]) {
                    memmove(v35 + 32, v4 + 32, 8 * v40);
                  }
                  *((void *)v4 + 2) = 0;
                }
                uint64_t v11 = (char *)(v39 + 8 * v40);
                uint64_t v42 = (v38 & 0x7FFFFFFFFFFFFFFFLL) - v40;
                swift_release();
                int64_t v4 = v35;
                long long v29 = __OFSUB__(v42, 1);
                uint64_t v14 = v42 - 1;
                if (v29) {
                  goto LABEL_55;
                }
              }
              *(void *)uint64_t v11 = v31;
              long long v31 = objc_msgSend(a1, sel_indexGreaterThanIndex_, v31);
              if (v31 == (id)0x7FFFFFFFFFFFFFFFLL) {
                goto LABEL_49;
              }
            }
          }
          goto LABEL_49;
        }
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
LABEL_14:
      BOOL v19 = *((void *)v4 + 3);
      if ((uint64_t)((v19 >> 1) + 0x4000000000000000) < 0)
      {
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      unint64_t v20 = v19 & 0xFFFFFFFFFFFFFFFELL;
      if (v20 <= 1) {
        unint64_t v21 = 1;
      }
      else {
        unint64_t v21 = v20;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      unint64_t v22 = (char *)swift_allocObject();
      long long v23 = _swift_stdlib_malloc_size(v22);
      long long v24 = v23 - 32;
      if (v23 < 32) {
        long long v24 = v23 - 25;
      }
      long long v25 = v24 >> 3;
      *((void *)v22 + 2) = v21;
      *((void *)v22 + 3) = 2 * (v24 >> 3);
      long long v26 = v22 + 32;
      long long v27 = *((void *)v4 + 3) >> 1;
      uint64_t v11 = &v22[8 * v27 + 32];
      uint64_t v14 = (v25 & 0x7FFFFFFFFFFFFFFFLL) - v27;
      if (*((void *)v4 + 2))
      {
        long long v28 = v4 + 32;
        if (v22 != v4 || v26 >= &v28[8 * v27]) {
          memmove(v26, v28, 8 * v27);
        }
        *((void *)v4 + 2) = 0;
      }
      swift_release();
      int64_t v4 = v22;
LABEL_26:
      long long v29 = __OFSUB__(v14--, 1);
      if (!v29) {
        goto LABEL_27;
      }
      goto LABEL_55;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    int64_t v4 = (char *)swift_allocObject();
    uint64_t v5 = _swift_stdlib_malloc_size(v4);
    unint64_t v6 = v5 - 32;
    if (v5 < 32) {
      unint64_t v6 = v5 - 25;
    }
    unint64_t v7 = v6 >> 3;
    *((void *)v4 + 2) = v3;
    *((void *)v4 + 3) = 2 * (v6 >> 3);
    uint64_t v8 = a1;
    unint64_t v9 = objc_msgSend(v8, sel_firstIndex);
    if (v9 == (id)0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_59;
    }
    int64_t v10 = v9;
    *((void *)v4 + 4) = v9;
    uint64_t v11 = v4 + 40;
    char v12 = v3 - 1;
    if (v3 != 1)
    {
      do
      {
        int64_t v13 = objc_msgSend(v8, sel_indexGreaterThanIndex_, v10);
        if (v13 == (id)0x7FFFFFFFFFFFFFFFLL) {
          goto LABEL_56;
        }
        int64_t v10 = v13;
        *(void *)uint64_t v11 = v13;
        v11 += 8;
      }
      while (--v12);
    }
    uint64_t v14 = (v7 & 0x7FFFFFFFFFFFFFFFLL) - v3;
    uint64_t v15 = objc_msgSend(v8, sel_indexGreaterThanIndex_, v10);
    if (v15 != (id)0x7FFFFFFFFFFFFFFFLL)
    {
      unint64_t v16 = v15;
      if (v14) {
        goto LABEL_26;
      }
      goto LABEL_14;
    }
  }
LABEL_49:

  uint64_t v43 = *((void *)v4 + 3);
  if (v43 >= 2)
  {
    char v44 = v43 >> 1;
    long long v29 = __OFSUB__(v44, v14);
    uint64_t v45 = v44 - v14;
    if (v29)
    {
LABEL_60:
      __break(1u);
      return;
    }
    *((void *)v4 + 2) = v45;
  }
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(void *a1)
{
  NSFastEnumerationIterator.init(_:)((uint64_t)a1, (uint64_t)v24);
  NSFastEnumerationIterator.next()((uint64_t)&v21);
  long long v1 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v2 = 0;
  if (v22)
  {
    uint64_t v3 = (_OWORD *)(MEMORY[0x1E4FBC860] + 32);
    while (1)
    {
      uint64_t result = (uint64_t)outlined init with take of Any(&v21, v23);
      if (!v2)
      {
        unint64_t v5 = v1[3];
        if ((uint64_t)((v5 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_26;
        }
        int64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
        if (v6 <= 1) {
          uint64_t v7 = 1;
        }
        else {
          uint64_t v7 = v6;
        }
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
        uint64_t v8 = (void *)swift_allocObject();
        int64_t v9 = _swift_stdlib_malloc_size(v8);
        uint64_t v10 = v9 - 32;
        if (v9 < 32) {
          uint64_t v10 = v9 - 1;
        }
        uint64_t v11 = v10 >> 5;
        _OWORD v8[2] = v7;
        v8[3] = 2 * (v10 >> 5);
        unint64_t v12 = (unint64_t)(v8 + 4);
        uint64_t v13 = v1[3] >> 1;
        if (v1[2])
        {
          if (v8 != v1 || v12 >= (unint64_t)&v1[4 * v13 + 4]) {
            memmove(v8 + 4, v1 + 4, 32 * v13);
          }
          v1[2] = 0;
        }
        uint64_t v3 = (_OWORD *)(v12 + 32 * v13);
        uint64_t v2 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - v13;
        uint64_t result = swift_release();
        long long v1 = v8;
      }
      BOOL v15 = __OFSUB__(v2--, 1);
      if (v15) {
        break;
      }
      outlined init with take of Any(v23, v3);
      v3 += 2;
      NSFastEnumerationIterator.next()((uint64_t)&v21);
      if (!v22) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
LABEL_21:
  v19[10] = v24[10];
  v19[11] = v24[11];
  v20[0] = v25[0];
  *(_OWORD *)((char *)v20 + 9) = *(_OWORD *)((char *)v25 + 9);
  v19[6] = v24[6];
  v19[7] = v24[7];
  v19[8] = v24[8];
  v19[9] = v24[9];
  void v19[2] = v24[2];
  long long v19[3] = v24[3];
  void v19[4] = v24[4];
  v19[5] = v24[5];
  v19[0] = v24[0];
  v19[1] = v24[1];
  outlined release of Locale((uint64_t)v19);
  uint64_t result = outlined destroy of Any?((uint64_t)&v21, (uint64_t *)&demangling cache variable for type metadata for Any?);
  unint64_t v16 = v1[3];
  if (v16 < 2) {
    return (uint64_t)v1;
  }
  unint64_t v17 = v16 >> 1;
  BOOL v15 = __OFSUB__(v17, v2);
  uint64_t v18 = v17 - v2;
  if (!v15)
  {
    v1[2] = v18;
    return (uint64_t)v1;
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  void *v14;
  unint64_t v15;
  char *v16;
  uint64_t result;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t isClassOrObjCExistentialType;
  uint64_t v22;
  id v23;
  long long v24;
  long long v25;
  long long v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  char *v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  BOOL v47;
  long long v48;
  long long v49;
  long long v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char **v58;
  _OWORD *v59;
  char *v60;
  long long v61;
  uint64_t v62;
  long long v63;
  long long v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  long long v69;
  long long v70;
  long long v71;
  long long v72;
  _OWORD v73[12];
  _OWORD v74[2];

  uint64_t v2 = (uint64_t)objc_msgSend(a1, sel_count);
  if (v2 <= 0)
  {
    int64_t v60 = (char *)MEMORY[0x1E4FBC860];
    int64_t v6 = *(void *)(MEMORY[0x1E4FBC860] + 24);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: Any, value: Any)>);
    uint64_t v3 = (void *)swift_allocObject();
    int64_t v4 = _swift_stdlib_malloc_size(v3);
    unint64_t v5 = v4 - 32;
    if (v4 < 32) {
      unint64_t v5 = v4 + 31;
    }
    int64_t v6 = 2 * (v5 >> 6);
    v3[2] = v2;
    v3[3] = v6;
    int64_t v60 = (char *)v3;
  }
  type metadata accessor for NSDictionary.Iterator();
  uint64_t v7 = (_OWORD *)swift_allocObject();
  NSFastEnumerationIterator.init(_:)((uint64_t)a1, (uint64_t)v73);
  uint64_t v8 = v73[11];
  v7[11] = v73[10];
  v7[12] = v8;
  v7[13] = v74[0];
  *(_OWORD *)((char *)v7 + 217) = *(_OWORD *)((char *)v74 + 9);
  int64_t v9 = v73[7];
  v7[7] = v73[6];
  v7[8] = v9;
  uint64_t v10 = v73[9];
  v7[9] = v73[8];
  v7[10] = v10;
  uint64_t v11 = v73[3];
  _OWORD v7[3] = v73[2];
  v7[4] = v11;
  unint64_t v12 = v73[5];
  _OWORD v7[5] = v73[4];
  v7[6] = v12;
  uint64_t v13 = v73[1];
  v7[1] = v73[0];
  void v7[2] = v13;
  if (v2 < 0)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    uint64_t result = outlined destroy of Any?((uint64_t)&v67, (uint64_t *)&demangling cache variable for type metadata for Any?);
    unint64_t v69 = 0u;
    int64_t v70 = 0u;
    uint64_t v71 = 0u;
    uint64_t v72 = 0u;
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  unint64_t v59 = v7;
  uint64_t v14 = v7 + 1;
  BOOL v15 = v6 >> 1;
  unint64_t v16 = v60 + 32;
  if (v2)
  {
    v15 -= v2;
    do
    {
      NSFastEnumerationIterator.next()((uint64_t)&v67);
      if (!v68) {
        goto LABEL_51;
      }
      outlined init with take of Any(&v67, &v63);
      uint64_t result = outlined init with copy of Any((uint64_t)&v63, (uint64_t)&v69);
      if (!*v14) {
        goto LABEL_52;
      }
      self;
      uint64_t v18 = (void *)swift_dynamicCastObjCClassUnconditional();
      BOOL v19 = *((void *)&v64 + 1);
      unint64_t v20 = __swift_project_boxed_opaque_existential_1(&v63, *((uint64_t *)&v64 + 1));
      swift_unknownObjectRetain();
      isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      if (isClassOrObjCExistentialType)
      {
        if (*(void *)(*(void *)(v19 - 8) + 64) != 8)
        {
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
        uint64_t v22 = *v20;
        swift_unknownObjectRetain();
      }
      else
      {
        char v58 = &v57;
        long long v27 = MEMORY[0x1F4188790](isClassOrObjCExistentialType);
        uint64_t v57 = (char *)&v57 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(double))(v29 + 16))(v27);
        uint64_t v22 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      }
      long long v23 = objc_msgSend(v18, sel_objectForKey_, v22);
      swift_unknownObjectRelease();
      uint64_t result = swift_unknownObjectRelease();
      if (!v23) {
        goto LABEL_53;
      }
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v63);
      outlined init with take of Any(&v67, &v71);
      long long v24 = v69;
      long long v25 = v70;
      long long v26 = v72;
      *((_OWORD *)v16 + 2) = v71;
      *((_OWORD *)v16 + 3) = v26;
      *(_OWORD *)unint64_t v16 = v24;
      *((_OWORD *)v16 + 1) = v25;
      v16 += 64;
    }
    while (--v2);
  }
  NSFastEnumerationIterator.next()((uint64_t)&v61);
  if (!v62)
  {
LABEL_41:
    outlined destroy of Any?((uint64_t)&v61, (uint64_t *)&demangling cache variable for type metadata for Any?);
    unint64_t v63 = 0u;
    int64_t v64 = 0u;
    unint64_t v65 = 0u;
    unint64_t v66 = 0u;
    swift_release();
    outlined destroy of Any?((uint64_t)&v63, &demangling cache variable for type metadata for (key: Any, value: Any)?);
    uint64_t result = (uint64_t)v60;
    uint64_t v54 = *((void *)v60 + 3);
    if (v54 < 2) {
      return result;
    }
    uint64_t v55 = v54 >> 1;
    uint64_t v47 = __OFSUB__(v55, v15);
    int64_t v56 = v55 - v15;
    if (!v47)
    {
      *((void *)v60 + 2) = v56;
      return result;
    }
    goto LABEL_50;
  }
  while (1)
  {
    outlined init with take of Any(&v61, &v67);
    uint64_t result = outlined init with copy of Any((uint64_t)&v67, (uint64_t)&v63);
    if (!*v14) {
      break;
    }
    self;
    long long v30 = (void *)swift_dynamicCastObjCClassUnconditional();
    long long v31 = v68;
    long long v32 = __swift_project_boxed_opaque_existential_1(&v67, v68);
    swift_unknownObjectRetain();
    long long v33 = _swift_isClassOrObjCExistentialType();
    if (v33)
    {
      if (*(void *)(*(void *)(v31 - 8) + 64) != 8) {
        goto LABEL_46;
      }
      long long v34 = *v32;
      swift_unknownObjectRetain();
    }
    else
    {
      char v58 = &v57;
      uint64_t v51 = MEMORY[0x1F4188790](v33);
      uint64_t v57 = (char *)&v57 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(double))(v53 + 16))(v51);
      long long v34 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    }
    unint64_t v35 = objc_msgSend(v30, sel_objectForKey_, v34);
    swift_unknownObjectRelease();
    uint64_t result = swift_unknownObjectRelease();
    if (!v35) {
      goto LABEL_55;
    }
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v67);
    outlined init with take of Any(&v61, &v65);
    unint64_t v69 = v63;
    int64_t v70 = v64;
    uint64_t v71 = v65;
    uint64_t v72 = v66;
    if (!v15)
    {
      long long v36 = *((void *)v60 + 3);
      if ((uint64_t)((v36 >> 1) + 0x4000000000000000) < 0) {
        goto LABEL_48;
      }
      uint64_t v37 = v36 & 0xFFFFFFFFFFFFFFFELL;
      if (v37 <= 1) {
        uint64_t v38 = 1;
      }
      else {
        uint64_t v38 = v37;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: Any, value: Any)>);
      char v39 = (char *)swift_allocObject();
      unint64_t v40 = _swift_stdlib_malloc_size(v39);
      char v41 = v40 - 32;
      if (v40 < 32) {
        char v41 = v40 + 31;
      }
      uint64_t v42 = v41 >> 6;
      *((void *)v39 + 2) = v38;
      *((void *)v39 + 3) = 2 * (v41 >> 6);
      uint64_t v43 = v60;
      char v44 = v39 + 32;
      uint64_t v45 = *((void *)v60 + 3) >> 1;
      if (*((void *)v60 + 2))
      {
        BOOL v46 = v60 + 32;
        if (v39 != v60 || v44 >= &v46[64 * v45]) {
          memmove(v39 + 32, v46, v45 << 6);
        }
        *((void *)v43 + 2) = 0;
      }
      unint64_t v16 = &v44[64 * v45];
      BOOL v15 = (v42 & 0x7FFFFFFFFFFFFFFFLL) - v45;
      swift_release();
      int64_t v60 = v39;
    }
    uint64_t v47 = __OFSUB__(v15--, 1);
    if (v47) {
      goto LABEL_47;
    }
    char v48 = v69;
    unint64_t v49 = v70;
    char v50 = v72;
    *((_OWORD *)v16 + 2) = v71;
    *((_OWORD *)v16 + 3) = v50;
    *(_OWORD *)unint64_t v16 = v48;
    *((_OWORD *)v16 + 1) = v49;
    v16 += 64;
    NSFastEnumerationIterator.next()((uint64_t)&v61);
    if (!v62) {
      goto LABEL_41;
    }
  }
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

void specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  long long v3 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)&v32[16] = *(_OWORD *)(a1 + 72);
  *(_OWORD *)&v32[32] = v3;
  *(_OWORD *)&unsigned char v32[48] = *(_OWORD *)(a1 + 104);
  *(void *)&v32[64] = *(void *)(a1 + 120);
  long long v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)long long v30 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)&v30[16] = v4;
  long long v5 = *(_OWORD *)(a1 + 56);
  long long v31 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)long long v32 = v5;
  outlined init with take of Range<Date>?(a1 + 128, (uint64_t)v69);
  uint64_t v46 = v2;
  outlined init with take of Range<Date>?((uint64_t)v69, (uint64_t)v45);
  outlined retain of Calendar.DatesByRecurring(a1);
  Calendar.DatesByRecurring.Iterator.init(start:matching:range:)(&v46, (uint64_t)v30, (uint64_t)v45, (uint64_t)&v47);
  int64_t v6 = (void *)MEMORY[0x1E4FBC860];
  if (v66)
  {
    uint64_t v28 = 0;
    long long v29 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = (double *)(MEMORY[0x1E4FBC860] + 32);
LABEL_4:
    if (v52 != 1 || v62 < *((uint64_t *)&v51 + 1))
    {
      int64_t v9 = v68;
      do
      {
        if (v9[2])
        {
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v10 = v9[2];
            if (!v10) {
              goto LABEL_46;
            }
          }
          else
          {
            int64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
            uint64_t v10 = v9[2];
            if (!v10) {
              goto LABEL_46;
            }
          }
          uint64_t v11 = v10 - 1;
          double v12 = *(double *)&v9[v11 + 4];
          uint64_t v9[2] = v11;
          int64_t v68 = v9;
          if (__OFADD__(v62, 1))
          {
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
            goto LABEL_48;
          }
          ++v62;
          if (!v52 && *((double *)&v51 + 1) < v12) {
            break;
          }
          if (v59) {
            goto LABEL_25;
          }
          if (*((double *)&v58 + 1) < v12) {
            break;
          }
          if (v12 >= *(double *)&v58)
          {
LABEL_25:
            if (!v7)
            {
              unint64_t v14 = v6[3];
              if ((uint64_t)((v14 >> 1) + 0x4000000000000000) < 0) {
                goto LABEL_50;
              }
              int64_t v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
              if (v15 <= 1) {
                uint64_t v16 = 1;
              }
              else {
                uint64_t v16 = v15;
              }
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Date>);
              unint64_t v17 = (void *)swift_allocObject();
              int64_t v18 = _swift_stdlib_malloc_size(v17);
              uint64_t v19 = v18 - 32;
              if (v18 < 32) {
                uint64_t v19 = v18 - 25;
              }
              uint64_t v20 = v19 >> 3;
              _OWORD v17[2] = v16;
              _OWORD v17[3] = 2 * (v19 >> 3);
              unint64_t v21 = (unint64_t)(v17 + 4);
              uint64_t v22 = v6[3] >> 1;
              if (v6[2])
              {
                long long v23 = v6 + 4;
                if (v17 != v6 || v21 >= (unint64_t)v23 + 8 * v22) {
                  memmove(v17 + 4, v23, 8 * v22);
                }
                _OWORD v6[2] = 0;
              }
              uint64_t v8 = (double *)(v21 + 8 * v22);
              uint64_t v7 = (v20 & 0x7FFFFFFFFFFFFFFFLL) - v22;
              swift_release();
              int64_t v6 = v17;
            }
            BOOL v24 = __OFSUB__(v7--, 1);
            if (!v24)
            {
              *v8++ = v12;
              goto LABEL_4;
            }
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
            return;
          }
        }
        else
        {
          Calendar.DatesByRecurring.Iterator.nextGroup()();
          int64_t v9 = v68;
          if (v68[2])
          {
            *((void *)&v67 + 1) = 0;
          }
          else
          {
            uint64_t v13 = *((void *)&v67 + 1) + 1;
            if (__OFADD__(*((void *)&v67 + 1), 1)) {
              goto LABEL_47;
            }
            ++*((void *)&v67 + 1);
            if ((uint64_t)v67 < v13) {
              break;
            }
          }
        }
      }
      while ((v66 & 1) == 0);
    }
    uint64_t v28 = v7;
    long long v29 = v6;
  }
  memcpy(v40, v64, sizeof(v40));
  *(void *)long long v30 = v47;
  *(_OWORD *)&v30[8] = v48;
  *(_WORD *)&unsigned char v30[24] = v49;
  v30[26] = v50;
  long long v31 = v51;
  v32[0] = v52;
  *(_OWORD *)&v32[8] = v53;
  *(_OWORD *)&v32[24] = v54;
  *(_OWORD *)&v32[40] = v55;
  *(_OWORD *)&v32[56] = v56;
  uint64_t v33 = v57;
  long long v34 = v58;
  char v35 = v59;
  uint64_t v36 = v60;
  char v37 = v61;
  uint64_t v38 = v62;
  uint64_t v39 = v63;
  uint64_t v41 = v65;
  char v42 = 1;
  long long v43 = v67;
  char v44 = v68;
  outlined release of Calendar.DatesByRecurring.Iterator((uint64_t)v30);
  unint64_t v25 = v29[3];
  if (v25 >= 2)
  {
    unint64_t v26 = v25 >> 1;
    BOOL v24 = __OFSUB__(v26, v28);
    uint64_t v27 = v26 - v28;
    if (v24)
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    v29[2] = v27;
  }
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v2 = a1 + 331;
  uint64_t v3 = *(uint64_t *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = *(void **)(a1 + 16);
  double v83 = *(double *)(a1 + 32);
  double v84 = *(double *)(a1 + 24);
  int64_t v6 = (const void *)(a1 + 48);
  char v7 = *(unsigned char *)(a1 + 40);
  memcpy(__dst, (const void *)(a1 + 48), 0x11AuLL);
  unsigned __int8 v87 = *(unsigned char *)(a1 + 330);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 331);
  uint64_t v9 = *(unsigned __int8 *)(v2 + 1);
  memcpy(v107, v6, 0x11AuLL);
  double v93 = *(double *)&v3;
  uint64_t v94 = v4;
  uint64_t v86 = v4;
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)__dst);
  BOOL v10 = DateComponents._validate(for:)((uint64_t *)&v93);
  uint64_t v11 = v9;
  char v144 = 1;
  char v63 = v7;
  char v143 = v7;
  uint64_t v73 = __dst[0];
  v139[0] = *(_DWORD *)((char *)&__dst[5] + 1);
  *(_DWORD *)((char *)v139 + 3) = HIDWORD(__dst[5]);
  *(_DWORD *)((char *)v138 + 3) = HIDWORD(__dst[7]);
  v138[0] = *(_DWORD *)((char *)&__dst[7] + 1);
  v137[0] = *(_DWORD *)((char *)&__dst[9] + 1);
  *(_DWORD *)((char *)v137 + 3) = HIDWORD(__dst[9]);
  v136[0] = *(_DWORD *)((char *)&__dst[11] + 1);
  *(_DWORD *)((char *)v136 + 3) = HIDWORD(__dst[11]);
  *(_DWORD *)((char *)v135 + 3) = HIDWORD(__dst[13]);
  v135[0] = *(_DWORD *)((char *)&__dst[13] + 1);
  *(_DWORD *)((char *)v134 + 3) = HIDWORD(__dst[15]);
  v134[0] = *(_DWORD *)((char *)&__dst[15] + 1);
  uint64_t v74 = __dst[14];
  uint64_t v75 = __dst[16];
  *(_DWORD *)((char *)v133 + 3) = HIDWORD(__dst[17]);
  v133[0] = *(_DWORD *)((char *)&__dst[17] + 1);
  uint64_t v76 = __dst[18];
  *(_DWORD *)((char *)v132 + 3) = HIDWORD(__dst[19]);
  v132[0] = *(_DWORD *)((char *)&__dst[19] + 1);
  uint64_t v77 = __dst[20];
  *(_DWORD *)((char *)v131 + 3) = HIDWORD(__dst[21]);
  v131[0] = *(_DWORD *)((char *)&__dst[21] + 1);
  uint64_t v78 = __dst[22];
  *(_DWORD *)((char *)v130 + 3) = HIDWORD(__dst[23]);
  v130[0] = *(_DWORD *)((char *)&__dst[23] + 1);
  uint64_t v79 = __dst[24];
  *(_DWORD *)((char *)v129 + 3) = HIDWORD(__dst[25]);
  v129[0] = *(_DWORD *)((char *)&__dst[25] + 1);
  uint64_t v80 = __dst[26];
  *(_DWORD *)((char *)v128 + 3) = HIDWORD(__dst[27]);
  v128[0] = *(_DWORD *)((char *)&__dst[27] + 1);
  uint64_t v81 = __dst[28];
  *(_DWORD *)((char *)v127 + 3) = HIDWORD(__dst[29]);
  v127[0] = *(_DWORD *)((char *)&__dst[29] + 1);
  *(_DWORD *)((char *)v126 + 3) = HIDWORD(__dst[31]);
  v126[0] = *(_DWORD *)((char *)&__dst[31] + 1);
  *(_DWORD *)((char *)v125 + 3) = HIDWORD(__dst[33]);
  v125[0] = *(_DWORD *)((char *)&__dst[33] + 1);
  char v141 = 1;
  char v140 = v7;
  char v124 = v8;
  char v123 = v9;
  char v82 = BYTE1(__dst[35]);
  if (v10)
  {
    uint64_t v64 = 0;
    uint64_t v62 = (void *)MEMORY[0x1E4FBC860];
    char v61 = (double *)(MEMORY[0x1E4FBC860] + 32);
    uint64_t v12 = -1;
    char v13 = 1;
    double v14 = 0.0;
    int64_t v15 = v5;
    while (2)
    {
      uint64_t v60 = v12;
      while (1)
      {
        uint64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
          goto LABEL_38;
        }
        v90[0] = v3;
        v90[1] = v86;
        id v92 = v5;
        memcpy(v107, __dst, 0x11AuLL);
        v106[0] = v87;
        uint64_t v17 = v8;
        v105[0] = v8;
        uint64_t v18 = v11;
        v104[0] = v11;
        unint64_t v91 = v15;
        double v88 = v14;
        LOBYTE(v89) = v13 & 1;
        swift_unknownObjectRetain();
        outlined retain of DateComponents((uint64_t)__dst);
        Calendar._enumerateDatesStep(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:inSearchingDate:previouslyReturnedMatchDate:)((double *)&v92, v107, v106, v105, v104, (double *)&v91, (uint64_t)&v88, (uint64_t)&v93);
        outlined release of DateComponents((uint64_t)__dst);
        swift_unknownObjectRelease();
        int64_t v15 = v95;
        if (v94 != 2) {
          break;
        }
        ++v12;
        uint64_t v8 = v17;
        if (v16 >= 100)
        {
          v90[0] = (uint64_t)v5;
          if (v60 + 1 > 100) {
            uint64_t v16 = v60 + 1;
          }
          else {
            uint64_t v16 = 100;
          }
          uint64_t v54 = v86;
          double v93 = *(double *)&v3;
          uint64_t v94 = v86;
          memcpy(v107, __dst, 0x11AuLL);
          LOBYTE(v88) = v11;
          LOBYTE(v92) = v87;
          LOBYTE(v91) = v17;
          _handleCalendarResultNotFound(date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)(v90, (uint64_t *)&v93, v107, (unsigned __int8 *)&v88, (unsigned __int8 *)&v92, (unsigned __int8 *)&v91);
          char v82 = BYTE1(__dst[35]);
          uint64_t v53 = __dst[34];
          char v46 = __dst[35];
          uint64_t v52 = __dst[32];
          char v45 = __dst[33];
          uint64_t v55 = __dst[30];
          char v44 = __dst[31];
          char v43 = __dst[29];
          uint64_t v80 = __dst[26];
          uint64_t v81 = __dst[28];
          char v42 = __dst[27];
          char v40 = __dst[25];
          uint64_t v78 = __dst[22];
          uint64_t v79 = __dst[24];
          char v39 = __dst[23];
          char v38 = __dst[21];
          uint64_t v76 = __dst[18];
          uint64_t v77 = __dst[20];
          unsigned __int8 v37 = __dst[19];
          uint64_t v75 = __dst[16];
          unsigned __int8 v35 = __dst[17];
          uint64_t v74 = __dst[14];
          uint64_t v71 = __dst[10];
          uint64_t v72 = __dst[12];
          uint64_t v70 = __dst[8];
          uint64_t v69 = __dst[6];
          uint64_t v68 = __dst[4];
          uint64_t v66 = __dst[2];
          uint64_t v67 = __dst[3];
          uint64_t v73 = __dst[0];
          uint64_t v85 = __dst[1];
          unsigned __int8 v34 = __dst[15];
          char v36 = __dst[13];
          char v41 = __dst[11];
          char v47 = __dst[9];
          char v48 = __dst[7];
          char v49 = __dst[5];
          double v51 = v83;
          double v20 = v84;
          goto LABEL_31;
        }
      }
      double v19 = v93;
      double v20 = v84;
      uint64_t v21 = v64;
      if ((v63 & 1) == 0 && (v93 < v84 || v93 >= v83))
      {
        char v82 = BYTE1(__dst[35]);
        uint64_t v53 = __dst[34];
        char v46 = __dst[35];
        char v45 = __dst[33];
        uint64_t v55 = __dst[30];
        char v44 = __dst[31];
        char v43 = __dst[29];
        uint64_t v80 = __dst[26];
        uint64_t v81 = __dst[28];
        char v42 = __dst[27];
        char v40 = __dst[25];
        uint64_t v78 = __dst[22];
        uint64_t v79 = __dst[24];
        char v39 = __dst[23];
        char v38 = __dst[21];
        uint64_t v76 = __dst[18];
        uint64_t v77 = __dst[20];
        unsigned __int8 v37 = __dst[19];
        uint64_t v75 = __dst[16];
        unsigned __int8 v35 = __dst[17];
        uint64_t v74 = __dst[14];
        uint64_t v71 = __dst[10];
        uint64_t v72 = __dst[12];
        uint64_t v70 = __dst[8];
        uint64_t v69 = __dst[6];
        uint64_t v68 = __dst[4];
        uint64_t v66 = __dst[2];
        uint64_t v67 = __dst[3];
        uint64_t v73 = __dst[0];
        uint64_t v85 = __dst[1];
        unsigned __int8 v34 = __dst[15];
        char v36 = __dst[13];
        char v41 = __dst[11];
        char v47 = __dst[9];
        char v48 = __dst[7];
        char v49 = __dst[5];
        uint64_t v54 = v86;
        double v51 = v83;
        LOBYTE(v8) = v17;
        uint64_t v52 = __dst[32];
LABEL_31:
        char v50 = v62;
        goto LABEL_32;
      }
      char v141 = 0;
      if (!v64)
      {
        unint64_t v22 = v62[3];
        if ((uint64_t)((v22 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_40;
        }
        int64_t v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
        if (v23 <= 1) {
          uint64_t v24 = 1;
        }
        else {
          uint64_t v24 = v23;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Date>);
        unint64_t v25 = (void *)swift_allocObject();
        int64_t v26 = _swift_stdlib_malloc_size(v25);
        uint64_t v27 = v26 - 32;
        if (v26 < 32) {
          uint64_t v27 = v26 - 25;
        }
        uint64_t v28 = v27 >> 3;
        _OWORD v25[2] = v24;
        _OWORD v25[3] = 2 * (v27 >> 3);
        unint64_t v29 = (unint64_t)(v25 + 4);
        uint64_t v30 = v62[3] >> 1;
        if (v62[2])
        {
          long long v31 = v62 + 4;
          if (v25 != v62 || v29 >= (unint64_t)v31 + 8 * v30)
          {
            uint64_t v65 = v27 >> 3;
            memmove(v25 + 4, v31, 8 * v30);
            unint64_t v29 = (unint64_t)(v25 + 4);
            uint64_t v28 = v65;
          }
          v62[2] = 0;
        }
        char v61 = (double *)(v29 + 8 * v30);
        uint64_t v21 = (v28 & 0x7FFFFFFFFFFFFFFFLL) - v30;
        swift_release();
        uint64_t v62 = v25;
        uint64_t v11 = v18;
      }
      BOOL v32 = __OFSUB__(v21, 1);
      uint64_t v33 = v21 - 1;
      if (!v32)
      {
        uint64_t v8 = v17;
        uint64_t v64 = v33;
        char v13 = 0;
        *v61++ = v19;
        double v14 = v19;
        uint64_t v12 = v16;
        continue;
      }
      goto LABEL_39;
    }
  }
  uint64_t v64 = 0;
  unsigned __int8 v34 = __dst[15] & 1;
  unsigned __int8 v35 = __dst[17] & 1;
  char v36 = __dst[13];
  unsigned __int8 v37 = __dst[19] & 1;
  char v38 = __dst[21] & 1;
  uint64_t v71 = __dst[10];
  uint64_t v72 = __dst[12];
  char v39 = __dst[23] & 1;
  char v40 = __dst[25] & 1;
  char v41 = __dst[11];
  char v42 = __dst[27] & 1;
  char v43 = __dst[29] & 1;
  char v44 = __dst[31] & 1;
  uint64_t v70 = __dst[8];
  char v45 = __dst[33] & 1;
  char v46 = __dst[35] & 1;
  char v47 = __dst[9];
  uint64_t v69 = __dst[6];
  char v48 = __dst[7];
  char v49 = __dst[5];
  uint64_t v68 = __dst[4];
  uint64_t v67 = __dst[3];
  double v14 = 0.0;
  uint64_t v16 = -1;
  int64_t v15 = v5;
  uint64_t v66 = __dst[2];
  uint64_t v85 = __dst[1];
  char v50 = (void *)MEMORY[0x1E4FBC860];
  double v51 = v83;
  double v20 = v84;
  uint64_t v53 = __dst[34];
  uint64_t v52 = __dst[32];
  uint64_t v54 = v86;
  uint64_t v55 = __dst[30];
LABEL_32:
  LOBYTE(v93) = v49;
  LOBYTE(v90[0]) = v48;
  LOBYTE(v88) = v47;
  LOBYTE(v92) = v41;
  LOBYTE(v91) = v36;
  v106[0] = v34;
  v105[0] = v35;
  v104[0] = v37;
  char v103 = v38;
  char v102 = v39;
  char v101 = v40;
  char v100 = v42;
  char v99 = v43;
  char v98 = v44;
  char v97 = v45;
  char v96 = v46;
  v107[0] = v16;
  *(double *)&v107[1] = v14;
  LOBYTE(v107[2]) = v141;
  v107[3] = v15;
  *(double *)&v107[4] = v20;
  *(double *)&v107[5] = v51;
  LOBYTE(v107[6]) = v140;
  v107[7] = v5;
  v107[8] = v3;
  v107[9] = v54;
  v107[10] = v73;
  v107[11] = v85;
  v107[12] = v66;
  v107[13] = v67;
  v107[14] = v68;
  LOBYTE(v107[15]) = v49;
  v107[16] = v69;
  LOBYTE(v107[17]) = v48;
  v107[18] = v70;
  LOBYTE(v107[19]) = v47;
  v107[20] = v71;
  LOBYTE(v107[21]) = v41;
  v107[22] = v72;
  LOBYTE(v107[23]) = v36;
  v107[24] = v74;
  LOBYTE(v107[25]) = v34;
  v107[26] = v75;
  LOBYTE(v107[27]) = v35;
  v107[28] = v76;
  LOBYTE(v107[29]) = v37;
  v107[30] = v77;
  LOBYTE(v107[31]) = v38;
  v107[32] = v78;
  LOBYTE(v107[33]) = v39;
  v107[34] = v79;
  LOBYTE(v107[35]) = v40;
  v107[36] = v80;
  char v108 = v42;
  uint64_t v109 = v81;
  char v110 = v43;
  uint64_t v111 = v55;
  char v112 = v44;
  uint64_t v113 = v52;
  char v114 = v45;
  uint64_t v115 = v53;
  char v116 = v46;
  char v117 = v82;
  unsigned __int8 v118 = v87;
  char v119 = v8;
  char v120 = v11;
  uint64_t v121 = 100;
  char v122 = 1;
  outlined release of Calendar.DatesByMatching.Iterator((uint64_t)v107);
  unint64_t v56 = v50[3];
  if (v56 < 2) {
    return (uint64_t)v50;
  }
  unint64_t v57 = v56 >> 1;
  BOOL v32 = __OFSUB__(v57, v64);
  uint64_t v58 = v57 - v64;
  if (!v32)
  {
    void v50[2] = v58;
    return (uint64_t)v50;
  }
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(double *a1)
{
  void (*v41)(double *__return_ptr, unsigned char *, double *, uint64_t, uint64_t, uint64_t);
  unsigned char __src[330];
  char v43;
  char v44;
  uint64_t v45;
  double v46;
  double v47[36];
  unsigned char v48[288];
  unsigned char __dst[296];

  double v2 = *a1;
  uint64_t v3 = *((void *)a1 + 1);
  double v4 = a1[2];
  double v5 = a1[3];
  double v6 = a1[4];
  uint64_t v7 = *((unsigned __int8 *)a1 + 40);
  memcpy(__dst, a1 + 6, 0x11AuLL);
  uint64_t v8 = *((unsigned __int8 *)a1 + 330);
  uint64_t ObjectType = swift_getObjectType();
  char v41 = *(void (**)(double *__return_ptr, unsigned char *, double *, uint64_t, uint64_t, uint64_t))(v3 + 200);
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)__dst);
  uint64_t v10 = 0;
  double v11 = 1.59271755e13;
  if (v4 <= 1.59271755e13) {
    double v11 = v4;
  }
  double v12 = fmax(v11, -2.11845067e11);
  double v38 = v5;
  double v13 = v5;
  double v14 = (void *)MEMORY[0x1E4FBC860];
  int64_t v15 = (double *)(MEMORY[0x1E4FBC860] + 32);
  double v37 = v6;
  double v16 = v6;
  uint64_t v17 = 1;
  unsigned int v40 = v8;
  uint64_t v39 = ObjectType;
  while (1)
  {
    memcpy(v47, __dst, 0x11AuLL);
    DateComponents.scaled(by:)(v17, (uint64_t)__src);
    memcpy(v48, __src, 0x11AuLL);
    memcpy(__src, v48, 0x11AuLL);
    char v46 = v12;
    swift_unknownObjectRetain();
    v41(v47, __src, &v46, v8, ObjectType, v3);
    swift_unknownObjectRelease();
    uint64_t result = outlined release of DateComponents((uint64_t)v48);
    if ((LOBYTE(v47[1]) & 1) != 0
      || (double v19 = v47[0], (v7 & 1) == 0) && (v47[0] >= v13 ? (v20 = v47[0] < v16) : (v20 = 0), !v20))
    {
      *(double *)uint64_t __src = v2;
      *(void *)&__src[8] = v3;
      *(double *)&__src[16] = v4;
      *(double *)&_OWORD __src[24] = v38;
      *(double *)&__src[32] = v37;
      __src[40] = v7;
      memcpy(&__src[48], __dst, 0x11AuLL);
      char v43 = v8;
      char v44 = 1;
      char v45 = v17;
      uint64_t result = outlined release of Calendar.DatesByAdding((uint64_t)__src);
      unint64_t v34 = v14[3];
      if (v34 >= 2)
      {
        unint64_t v35 = v34 >> 1;
        BOOL v33 = __OFSUB__(v35, v10);
        uint64_t v36 = v35 - v10;
        if (v33) {
          goto LABEL_34;
        }
        uint64_t v14[2] = v36;
      }
      return (uint64_t)v14;
    }
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (!v10)
    {
      unint64_t v21 = v14[3];
      if ((uint64_t)((v21 >> 1) + 0x4000000000000000) < 0) {
        goto LABEL_33;
      }
      uint64_t v22 = v7;
      uint64_t v23 = v3;
      int64_t v24 = v21 & 0xFFFFFFFFFFFFFFFELL;
      if (v24 <= 1) {
        uint64_t v25 = 1;
      }
      else {
        uint64_t v25 = v24;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Date>);
      int64_t v26 = (void *)swift_allocObject();
      int64_t v27 = _swift_stdlib_malloc_size(v26);
      uint64_t v28 = v27 - 32;
      if (v27 < 32) {
        uint64_t v28 = v27 - 25;
      }
      uint64_t v29 = v28 >> 3;
      v26[2] = v25;
      long long v26[3] = 2 * (v28 >> 3);
      unint64_t v30 = (unint64_t)(v26 + 4);
      uint64_t v31 = v14[3] >> 1;
      if (v14[2])
      {
        BOOL v32 = v14 + 4;
        if (v26 != v14 || v30 >= (unint64_t)v32 + 8 * v31) {
          memmove(v26 + 4, v32, 8 * v31);
        }
        uint64_t v14[2] = 0;
      }
      int64_t v15 = (double *)(v30 + 8 * v31);
      uint64_t v10 = (v29 & 0x7FFFFFFFFFFFFFFFLL) - v31;
      uint64_t result = swift_release();
      double v14 = v26;
      uint64_t v3 = v23;
      uint64_t v7 = v22;
      uint64_t v8 = v40;
      uint64_t ObjectType = v39;
    }
    BOOL v33 = __OFSUB__(v10--, 1);
    if (v33) {
      goto LABEL_32;
    }
    *v15++ = v19;
    ++v17;
  }
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

char *specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  type metadata accessor for _POSIXDirectoryContentsSequence.Iterator();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = 0;
  *(void *)(inited + 64) = 0;
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v9 = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    Swift::Int v9 = HIBYTE(a2) & 0xF;
  }
  else
  {
    Swift::Int v9 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v10 = 3 * v9;
  if ((unsigned __int128)(v9 * (__int128)3) >> 64 != (3 * v9) >> 63)
  {
    __break(1u);
    goto LABEL_99;
  }
  if (v10 < -1)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  swift_bridgeObjectRetain_n();
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v10 >= 1024)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v17 = (const char *)swift_slowAlloc();
      swift_bridgeObjectRetain();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v17, v10 + 1, 1, a1, a2);
      char v19 = v18;
      swift_bridgeObjectRelease();
      if (v19)
      {
        MEMORY[0x185309510](v17, -1, -1);
      }
      else
      {
        double v16 = opendir(v17);
        MEMORY[0x185309510](v17, -1, -1);
        if (v16) {
          goto LABEL_15;
        }
      }
LABEL_35:
      uint64_t v35 = swift_bridgeObjectRelease();
      *(void *)(inited + 24) = 0;
      *(void *)(inited + 32) = 0xE000000000000000;
      *(void *)(inited + 40) = 0;
      *(void *)(inited + 48) = 0xE000000000000000;
      *(unsigned char *)(inited + 56) = 0;
      int v36 = MEMORY[0x185301870](v35);
      LODWORD(v37) = v36;
      uint64_t v38 = 263;
      switch(v36)
      {
        case 1:
        case 13:
          uint64_t v38 = 257;
          goto LABEL_46;
        case 2:
          uint64_t v38 = 260;
          goto LABEL_46;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          goto LABEL_40;
        case 27:
          goto LABEL_46;
        default:
          if (v36 == 63)
          {
            uint64_t v38 = 258;
          }
          else
          {
            if (v36 == 102)
            {
              id v39 = 0;
              uint64_t v38 = 256;
              goto LABEL_51;
            }
LABEL_40:
            uint64_t v38 = 256;
          }
LABEL_46:
          uint64_t v98 = a4;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
          {
LABEL_104:
            *(void *)&v101.st_dev = 0;
            v101.__darwin_ino64_t st_ino = 0xE000000000000000;
            _StringGuts.grow(_:)(22);
            swift_bridgeObjectRelease();
            *(void *)&v101.st_dev = 0xD000000000000014;
            v101.__darwin_ino64_t st_ino = 0x80000001823A9780;
            LODWORD(v99) = v37;
            v91._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v91);
            swift_bridgeObjectRelease();
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x181C4F378);
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v46 = (int)POSIXErrorCode.rawValue.getter();
          id v47 = objc_allocWithZone((Class)NSError);
          uint64_t v48 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v39 = objc_msgSend(v47, sel_initWithDomain_code_userInfo_, v48, v46, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v49 = objc_msgSend(v39, sel_domain);
          id v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
          uint64_t v52 = v51;

          if (v50 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v52 == v53)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v54 & 1) == 0)
            {
LABEL_101:
              __break(1u);
LABEL_102:
              __break(1u);
            }
          }
LABEL_51:
          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v38, a1, a2, v39, 0x7265646C6F46, 0xE600000000000000, 0, 0, &v101, 0, 0);
          uint64_t v55 = *(void *)&v101.st_dev;
          unint64_t v56 = *(void **)(inited + 64);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          *(void *)(inited + 64) = v55;
          char v43 = *(DIR **)(inited + 16);
          if (v43) {
            goto LABEL_52;
          }
          goto LABEL_43;
      }
    }
  }
  MEMORY[0x1F4188790](isStackAllocationSafe);
  double v13 = (char *)&v92 - v12;
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v13, v10 + 1, 1, a1, a2);
  char v15 = v14;
  swift_bridgeObjectRelease();
  if (v15) {
    goto LABEL_35;
  }
  double v16 = opendir(v13);
  if (!v16) {
    goto LABEL_35;
  }
LABEL_15:
  *(void *)(inited + 24) = a1;
  *(void *)(inited + 32) = a2;
  *(void *)(inited + 16) = v16;
  *(unsigned char *)(inited + 56) = a3 & 1;
  uint64_t v20 = *(void *)(a4 + 16);
  if (v20)
  {
    swift_bridgeObjectRetain();
    uint64_t v98 = a4;
    unint64_t v21 = (__darwin_ino64_t *)(a4 + 40);
    uint64_t v22 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      uint64_t v24 = *(v21 - 1);
      __darwin_ino64_t st_ino = *v21;
      uint64_t v26 = HIBYTE(*v21) & 0xF;
      if ((*v21 & 0x2000000000000000) == 0) {
        uint64_t v26 = v24 & 0xFFFFFFFFFFFFLL;
      }
      if (v26)
      {
        swift_bridgeObjectRetain_n();
        String.index(before:)();
        uint64_t v27 = String.subscript.getter();
        uint64_t v29 = v28;
        swift_bridgeObjectRelease();
        BOOL v30 = v27 == 47 && v29 == 0xE100000000000000;
        if (v30)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v31 & 1) == 0)
          {
            *(void *)&v101.st_dev = v24;
            v101.__darwin_ino64_t st_ino = st_ino;
            swift_bridgeObjectRetain();
            v32._uint64_t countAndFlagsBits = 47;
            v32._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v32);
            swift_bridgeObjectRelease();
            uint64_t v24 = *(void *)&v101.st_dev;
            __darwin_ino64_t st_ino = v101.st_ino;
          }
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
        }
        unint64_t v34 = v22[2];
        unint64_t v33 = v22[3];
        if (v34 >= v33 >> 1) {
          uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v34 + 1, 1, v22);
        }
        _OWORD v22[2] = v34 + 1;
        uint64_t v23 = &v22[2 * v34];
        v23[4] = v24;
        v23[5] = st_ino;
      }
      v21 += 2;
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v22 = (void *)MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRelease();
  *(void *)&v101.st_dev = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v40 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v42 = v41;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(inited + 40) = v40;
  *(void *)(inited + 48) = v42;
  char v43 = *(DIR **)(inited + 16);
  if (v43)
  {
LABEL_52:
    unint64_t v57 = readdir(v43);
    char v45 = (char *)MEMORY[0x1E4FBC860];
    if (v57)
    {
      uint64_t v58 = v57;
      uint64_t v44 = 0;
      p_st_atimespec = &v101.st_atimespec;
      uint64_t v98 = MEMORY[0x1E4FBC860] + 32;
      while (1)
      {
        if (!v58->d_namlen || !v58->d_ino) {
          goto LABEL_62;
        }
        uint64_t v66 = String.init(cString:)();
        double v37 = v65;
        if (v66 == 46 && v65 == (void *)0xE100000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
          || v66 == 11822 && v37 == (void *)0xE200000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
          || v66 == 24366 && v37 == (void *)0xE200000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_62;
        }
        BOOL v30 = *(unsigned char *)(inited + 56) == 1;
        char v97 = p_st_atimespec;
        if (!v30) {
          break;
        }
        if (v58->d_type)
        {
          if (v58->d_type != 4) {
            break;
          }
        }
        else
        {
          memset(&v101, 0, 28);
          timespec *p_st_atimespec = 0u;
          p_st_atimespec[1] = 0u;
          p_st_atimespec[2] = 0u;
          p_st_atimespec[3] = 0u;
          p_st_atimespec[4] = 0u;
          p_st_atimespec[5] = 0u;
          p_st_atimespec[6] = 0u;
          __darwin_ino64_t v70 = *(void *)(inited + 32);
          uint64_t v99 = *(void *)(inited + 24);
          __darwin_ino64_t v100 = v70;
          swift_bridgeObjectRetain();
          v71._uint64_t countAndFlagsBits = 47;
          v71._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v71);
          __darwin_ino64_t v96 = v100;
          swift_bridgeObjectRetain();
          v72._uint64_t countAndFlagsBits = v66;
          v72._unint64_t object = v37;
          String.append(_:)(v72);
          swift_bridgeObjectRelease();
          __darwin_ino64_t v95 = v100;
          uint64_t v73 = String.utf8CString.getter();
          __darwin_ino64_t v96 = v73;
          swift_bridgeObjectRelease();
          LODWORD(v73) = stat((const char *)(v73 + 32), &v101);
          swift_release();
          if (v73) {
            break;
          }
          int st_mode = v101.st_mode;
          int v75 = S_IFMT.getter() & st_mode;
          if (v75 != (unsigned __int16)S_IFDIR.getter()) {
            break;
          }
        }
        __darwin_ino64_t v67 = *(void *)(inited + 48);
        *(void *)&v101.st_dev = *(void *)(inited + 40);
        v101.__darwin_ino64_t st_ino = v67;
        swift_bridgeObjectRetain();
        v68._uint64_t countAndFlagsBits = v66;
        v68._unint64_t object = v37;
        String.append(_:)(v68);
        __darwin_ino64_t v96 = v101.st_ino;
        swift_bridgeObjectRetain();
        v69._uint64_t countAndFlagsBits = 47;
        v69._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v69);
        swift_bridgeObjectRelease();
LABEL_83:
        uint64_t v78 = *(void *)&v101.st_dev;
        __darwin_ino64_t v79 = v101.st_ino;
        __uint8_t d_type = v58->d_type;
        if (v44)
        {
          p_st_atimespec = v97;
          uint64_t v81 = v98;
        }
        else
        {
          LODWORD(v95) = v58->d_type;
          __darwin_ino64_t v96 = v101.st_ino;
          uint64_t v98 = *(void *)&v101.st_dev;
          unint64_t v82 = *((void *)v45 + 3);
          if ((uint64_t)((v82 >> 1) + 0x4000000000000000) < 0)
          {
            __break(1u);
            goto LABEL_104;
          }
          int64_t v83 = v82 & 0xFFFFFFFFFFFFFFFELL;
          if (v83 <= 1) {
            uint64_t v84 = 1;
          }
          else {
            uint64_t v84 = v83;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_POSIXDirectoryContentsSequence.Iterator.Element>);
          uint64_t v85 = (char *)swift_allocObject();
          uint64_t v86 = (uint64_t)(_swift_stdlib_malloc_size(v85) - 32) / 40;
          *((void *)v85 + 2) = v84;
          *((void *)v85 + 3) = 2 * v86;
          unsigned __int8 v87 = v85 + 32;
          uint64_t v88 = *((void *)v45 + 3) >> 1;
          uint64_t v89 = 40 * v88;
          if (*((void *)v45 + 2))
          {
            uint64_t v90 = v45 + 32;
            if (v85 != v45 || v87 >= &v90[v89])
            {
              uint64_t v94 = v85 + 32;
              uint64_t v93 = v86;
              memmove(v85 + 32, v90, 40 * v88);
              unsigned __int8 v87 = v94;
              uint64_t v86 = v93;
            }
            *((void *)v45 + 2) = 0;
          }
          uint64_t v81 = (uint64_t)&v87[v89];
          uint64_t v44 = (v86 & 0x7FFFFFFFFFFFFFFFLL) - v88;
          swift_release();
          char v45 = v85;
          p_st_atimespec = v97;
          uint64_t v78 = v98;
          __darwin_ino64_t v79 = v96;
          __uint8_t d_type = v95;
        }
        BOOL v62 = __OFSUB__(v44--, 1);
        if (v62) {
          goto LABEL_102;
        }
        *(void *)uint64_t v81 = v66;
        *(void *)(v81 + 8) = v37;
        *(void *)(v81 + 16) = v78;
        *(void *)(v81 + 24) = v79;
        *(unsigned char *)(v81 + 32) = d_type;
        uint64_t v98 = v81 + 40;
LABEL_62:
        uint64_t v58 = readdir(v43);
        if (!v58) {
          goto LABEL_55;
        }
      }
      __darwin_ino64_t v76 = *(void *)(inited + 48);
      *(void *)&v101.st_dev = *(void *)(inited + 40);
      v101.__darwin_ino64_t st_ino = v76;
      swift_bridgeObjectRetain();
      v77._uint64_t countAndFlagsBits = v66;
      v77._unint64_t object = v37;
      String.append(_:)(v77);
      goto LABEL_83;
    }
    uint64_t v44 = 0;
LABEL_55:
    closedir(v43);
    *(void *)(inited + 16) = 0;
    swift_release();
  }
  else
  {
LABEL_43:
    swift_release();
    uint64_t v44 = 0;
    char v45 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v60 = *((void *)v45 + 3);
  if (v60 >= 2)
  {
    unint64_t v61 = v60 >> 1;
    BOOL v62 = __OFSUB__(v61, v44);
    uint64_t v63 = v61 - v44;
    if (!v62)
    {
      *((void *)v45 + 2) = v63;
      return v45;
    }
    goto LABEL_100;
  }
  return v45;
}