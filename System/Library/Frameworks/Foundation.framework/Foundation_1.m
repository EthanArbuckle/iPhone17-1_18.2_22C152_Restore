void sub_18183219C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t $defer #1 () in static __KVOKeyPathBridgeMachinery._withBridgeableKeyPath(from:to:block:)(uint64_t a1, uint64_t a2)
{
  id v4 = objc_msgSend(self, sel_currentThread);
  id v5 = objc_msgSend(v4, sel_threadDictionary);

  outlined init with copy of Any?(a2, (uint64_t)v14);
  uint64_t v6 = v15;
  if (v15)
  {
    v7 = __swift_project_boxed_opaque_existential_1(v14, v15);
    uint64_t v8 = *(void *)(v6 - 8);
    double v9 = MEMORY[0x1F4188790](v7);
    v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v8 + 16))(v11, v9);
    uint64_t v12 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  else
  {
    uint64_t v12 = 0;
  }
  objc_msgSend(v5, sel_setObject_forKeyedSubscript_, v12, a1);

  return swift_unknownObjectRelease();
}

uint64_t specialized static __KVOKeyPathBridgeMachinery._withBridgeableKeyPath(from:to:block:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = (objc_class *)type metadata accessor for __KVOKeyPathBridgeMachinery.BridgeKey();
  v13 = (char *)objc_allocWithZone(v12);
  v14 = &v13[OBJC_IVAR____TtCC10FoundationP33_6DA0945A07226B3278459E9368612FF427__KVOKeyPathBridgeMachinery9BridgeKey_value];
  *(void *)v14 = a1;
  *((void *)v14 + 1) = a2;
  v29.receiver = v13;
  v29.super_class = v12;
  swift_bridgeObjectRetain();
  id v15 = objc_msgSendSuper2(&v29, sel_init);
  v16 = self;
  id v17 = objc_msgSend(v16, sel_currentThread);
  id v18 = objc_msgSend(v17, sel_threadDictionary);

  id v19 = v15;
  id v20 = objc_msgSend(v18, sel_objectForKeyedSubscript_, v19);

  if (v20)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v27, 0, sizeof(v27));
  }
  outlined init with take of Any?((uint64_t)v27, (uint64_t)v28);
  id v21 = objc_msgSend(v16, sel_currentThread);
  id v22 = objc_msgSend(v21, sel_threadDictionary);

  id v23 = v19;
  objc_msgSend(v22, sel_setObject_forKeyedSubscript_, a3, v23);

  objc_msgSend(a4, sel_addObserver_forKeyPath_options_context_, a5, String._bridgeToObjectiveCImpl()(), a8, 0);
  swift_unknownObjectRelease();
  $defer #1 () in static __KVOKeyPathBridgeMachinery._withBridgeableKeyPath(from:to:block:)((uint64_t)v23, (uint64_t)v28);

  return outlined destroy of Any?((uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for Any?);
}

Swift::Int __KVOKeyPathBridgeMachinery.BridgeKey.hash.getter()
{
  Hasher.init()();
  Swift::UInt v0 = type metadata accessor for __KVOKeyPathBridgeMachinery.BridgeKey();
  Hasher._combine(_:)(v0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher.finalize()();
}

uint64_t type metadata accessor for __KVOKeyPathBridgeMachinery.BridgeKey()
{
  return self;
}

uint64_t __NSFinalizeThreadData()
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  _CFSetTSD();
  uint64_t result = _NSThreadGet0(1);
  v1 = (void *)result;
  uint64_t v2 = *(void *)(result + 8);
  int v3 = *(unsigned __int8 *)(v2 + 60);
  if (v3 == 2)
  {
    *(unsigned char *)(v2 + 60) = 3;
    pthread_attr_destroy((pthread_attr_t *)(*(void *)(result + 8) + 80));

    return _CFSetTSD();
  }
  else if (v3 == 1)
  {
    *(unsigned char *)(v2 + 60) = 2;
    _CFAutoreleasePoolPush();

    *(void *)(v1[1] + 40) = 0;
    return _CFAutoreleasePoolPop();
  }
  else if (!*(unsigned char *)(v2 + 60))
  {
    *(unsigned char *)(v2 + 60) = 1;
    _CFAutoreleasePoolPush();
    objc_msgSend(+[NSNotificationCenter _defaultCenterWithoutCreating](NSNotificationCenter, "_defaultCenterWithoutCreating"), "postNotificationName:object:userInfo:", @"NSThreadWillExitNotification", v1, 0);
    atomic_store(0xFu, (unsigned __int8 *)(v1[1] + 63));
    objc_sync_enter(v1);
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id v4 = *(void **)(v1[1] + 64);
    uint64_t v5 = [v4 countByEnumeratingWithState:&v26 objects:v25 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v27;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v27 != v6) {
            objc_enumerationMutation(v4);
          }
          [*(id *)(*((void *)&v26 + 1) + 8 * i) signal:1];
        }
        uint64_t v5 = [v4 countByEnumeratingWithState:&v26 objects:v25 count:16];
      }
      while (v5);
    }
    uint64_t v8 = v1[1];
    double v9 = *(void **)(v8 + 72);
    if (v9)
    {
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      uint64_t v10 = [v9 countByEnumeratingWithState:&v21 objects:v20 count:16];
      if (v10)
      {
        uint64_t v11 = *(void *)v22;
        do
        {
          for (uint64_t j = 0; j != v10; ++j)
          {
            if (*(void *)v22 != v11) {
              objc_enumerationMutation(v9);
            }
            v13 = (__CFRunLoopSource *)[*(id *)(v1[1] + 72) objectForKey:*(void *)(*((void *)&v21 + 1) + 8 * j)];
            memset(&v19, 0, sizeof(v19));
            CFRunLoopSourceGetContext(v13, &v19);
            free(v19.info);
          }
          uint64_t v10 = [v9 countByEnumeratingWithState:&v21 objects:v20 count:16];
        }
        while (v10);
      }

      *(void *)(v1[1] + 72) = 0;
      uint64_t v8 = v1[1];
    }
    v14 = *(void **)(v8 + 64);
    if (v14)
    {

      *(void *)(v1[1] + 64) = 0;
    }
    objc_sync_exit(v1);
    id v15 = (void *)v1[1];
    if (v15) {
      id v15 = (void *)v15[3];
    }

    -[_NSThreadData setArgument:]((void *)v1[1], 0);
    v16 = (void *)v1[1];
    if (v16) {
      v16 = (void *)v16[1];
    }

    uint64_t v18 = v1[1];
    id v17 = v1 + 1;
    -[_NSThreadData setTarget:](v18, 0);

    *(void *)(*v17 + 40) = 0;
    return _CFAutoreleasePoolPop();
  }
  return result;
}

void sub_181832C78(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _NSThreadGet0(int a1)
{
  uint64_t v2 = pthread_self();
  int v3 = (_opaque_pthread_t *)pthread_main_thread_np();
  int v4 = pthread_equal(v2, v3);
  BOOL v5 = a1 == 1;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = a1 == 1;
  }
  if (!v4) {
    BOOL v5 = 0;
  }
  if (a1) {
    int v7 = v5;
  }
  else {
    int v7 = 1;
  }
  if (!v6 || (uint64_t v8 = _CFGetTSD()) == 0)
  {
    if (v7)
    {
      if (_MergedGlobals_7_1 != -1) {
        dispatch_once(&_MergedGlobals_7_1, &__block_literal_global_50);
      }
      uint64_t v8 = qword_1EB1ED030;
    }
    else
    {
      uint64_t v8 = objc_opt_new();
      atomic_store(0xEu, (unsigned __int8 *)(*(void *)(v8 + 8) + 63));
      *(void *)(*(void *)(v8 + 8) + 144) = pthread_self();
    }
    _CFSetTSD();
    if (v6) {
      _CFSetTSD();
    }
  }
  return v8;
}

BOOL isBlock(void *a1)
{
  if (!a1) {
    return 0;
  }
  Class = object_getClass(a1);
  Class Superclass = class_getSuperclass(Class);
  if (!Superclass) {
    return 0;
  }
  int v3 = Superclass;
  do
  {
    uint64_t v4 = objc_opt_class();
    BOOL v5 = v3 == (objc_class *)v4;
    if (v3 == (objc_class *)v4) {
      break;
    }
    int v3 = class_getSuperclass(v3);
  }
  while (v3);
  return v5;
}

void sub_181833AF8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t threadRunLoop(_opaque_pthread_t *a1)
{
  if (pthread_equal(a1, 0)) {
    return 0;
  }

  return MEMORY[0x1F40D90A0](a1);
}

void sub_181833D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void _performFileHandleSource(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 8);
  int v2 = *(unsigned __int16 *)(a1 + 16);
  int v3 = *(__CFRunLoopSource **)(a1 + 24);
  _CFAutoreleasePoolPush();
  uint64_t v4 = 0;
  char v5 = 1;
  int v6 = v2 - 12;
  int v7 = 0;
  switch(v6)
  {
    case 0:
      uint64_t v8 = atomic_load((unsigned int *)(v1 + 16));
      if (v8 == -1)
      {
        signed int v16 = atomic_load((unsigned int *)(v1 + 12));
        long long v23 = +[NSNumber numberWithInteger:v16];
        *(void *)&long long v22 = @"NSFileHandleError";
        uint64_t v4 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v23 forKeys:&v22 count:1];
      }
      else
      {
        long long v23 = (NSNumber *)[objc_allocWithZone((Class)NSFileHandle) initWithFileDescriptor:v8 closeOnDealloc:1];
        *(void *)&long long v22 = @"NSFileHandleNotificationFileHandleItem";
        uint64_t v4 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v23 forKeys:&v22 count:1];
      }
      char v5 = 0;
      int v7 = @"NSFileHandleConnectionAcceptedNotification";
      break;
    case 2:
      if (atomic_load((unsigned int *)(v1 + 12)))
      {
        signed int v10 = atomic_load((unsigned int *)(v1 + 12));
        long long v23 = +[NSNumber numberWithInteger:v10];
        uint64_t v24 = [MEMORY[0x1E4F1C9B8] data];
        long long v22 = xmmword_1E51F7B28;
        uint64_t v4 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v23 forKeys:&v22 count:2];
        char v5 = 0;
      }
      else
      {
        id v17 = *(NSNumber **)(v1 + 32);
        if (!v17) {
          id v17 = (NSNumber *)[MEMORY[0x1E4F1C9B8] data];
        }
        long long v23 = v17;
        *(void *)&long long v22 = @"NSFileHandleNotificationDataItem";
        uint64_t v4 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v23 forKeys:&v22 count:1];
        uint64_t v18 = *(NSObject **)(v1 + 32);
        if (v18) {
          dispatch_release(v18);
        }
        char v5 = 0;
        *(void *)(v1 + 32) = 0;
      }
      int v7 = @"NSFileHandleReadCompletionNotification";
      break;
    case 4:
      if (atomic_load((unsigned int *)(v1 + 12)))
      {
        signed int v12 = atomic_load((unsigned int *)(v1 + 12));
        long long v23 = +[NSNumber numberWithInteger:v12];
        uint64_t v24 = [MEMORY[0x1E4F1C9B8] data];
        long long v22 = xmmword_1E51F7B28;
        uint64_t v4 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v23 forKeys:&v22 count:2];
        char v5 = 0;
      }
      else
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v1 + 8));
        CFRunLoopSourceContext v19 = *(NSNumber **)(v1 + 32);
        if (!v19) {
          CFRunLoopSourceContext v19 = (NSNumber *)[MEMORY[0x1E4F1C9B8] data];
        }
        long long v23 = v19;
        *(void *)&long long v22 = @"NSFileHandleNotificationDataItem";
        uint64_t v4 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v23 forKeys:&v22 count:1];
        os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 8));
        id v20 = *(NSObject **)(v1 + 32);
        if (v20) {
          dispatch_release(v20);
        }
        char v5 = 0;
        *(void *)(v1 + 32) = 0;
      }
      int v7 = @"NSFileHandleReadToEndOfFileCompletionNotification";
      break;
    case 8:
      if (atomic_load((unsigned int *)(v1 + 12)))
      {
        signed int v14 = atomic_load((unsigned int *)(v1 + 12));
        long long v23 = +[NSNumber numberWithInteger:v14];
        *(void *)&long long v22 = @"NSFileHandleError";
        uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v23 forKeys:&v22 count:1];
      }
      else
      {
        uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionary];
      }
      uint64_t v4 = (void *)v15;
      char v5 = 0;
      int v7 = @"NSFileHandleDataAvailableNotification";
      break;
    default:
      break;
  }
  CFRunLoopSourceInvalidate(v3);
  CFRelease(v3);
  id v21 = v4;
  _CFAutoreleasePoolPop();
  if ((v5 & 1) == 0) {
    [+[NSNotificationCenter defaultCenter] postNotificationName:v7 object:v1 userInfo:v4];
  }

  CFRelease((CFTypeRef)v1);
}

void protocol witness for Collection.subscript.read in conformance AttributedString.UnicodeScalarView(void **a1)
{
}

NSUInteger NSRoundUpToMultipleOfPageSize(NSUInteger bytes)
{
  return (bytes + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
}

uint64_t __NSOperationQueueGetOperations(uint64_t a1, void *a2, char a3)
{
  int v6 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  int v7 = *(void **)(a1 + 16);
  if (v7)
  {
    uint64_t v8 = 0;
    do
    {
      if ((a3 & 1) != 0 || object_getClass(v7) != (Class)_NSBarrierOperation)
      {
        ++v8;
        [a2 addObject:v7];
      }
      int v7 = (void *)v7[2];
    }
    while (v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  os_unfair_lock_unlock(v6);
  return v8;
}

uint64_t __NSOPERATIONQUEUE_IS_WAITING_ON_AN_OPERATION__(void *a1)
{
  return [a1 waitUntilFinished];
}

void oq_end_waiting(NSMapTable *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  memset(&enumerator, 0, sizeof(enumerator));
  NSEnumerateMapTable(&enumerator, a1);
  pthread_override_t __override = 0;
  key = 0;
  while (NSNextMapEnumeratorPair(&enumerator, &key, (void **)&__override))
  {
    if (__override) {
      pthread_override_qos_class_end_np(__override);
    }
  }
}

BOOL NSNextMapEnumeratorPair(NSMapEnumerator *enumerator, void **key, void **value)
{
  if (!enumerator)
  {
    NSLog((NSString *)@"%s: state argument is NULL", key, value, "BOOL NSNextMapEnumeratorPair(NSMapEnumerator * _Nonnull, void ** _Nullable, void ** _Nullable)");
LABEL_9:
    LOBYTE(bs) = 1;
    return (char)bs;
  }
  puint64_t i = enumerator->_pi;
  suint64_t i = enumerator->_si;
  if (enumerator->_pi > si)
  {
    if (key) {
      void *key = (void *)*((void *)enumerator->_bs + si);
    }
    if (value) {
      *value = (void *)*((void *)enumerator->_bs + si + pi);
    }
    enumerator->_suint64_t i = si + 1;
    goto LABEL_9;
  }
  bs = enumerator->_bs;
  if (bs)
  {
    free(bs);
    LOBYTE(bs) = 0;
    enumerator->_bs = 0;
  }
  return (char)bs;
}

NSMapEnumerator *__cdecl NSEnumerateMapTable(NSMapEnumerator *__return_ptr retstr, NSMapTable *table)
{
  if (!table) {
    NSLog((NSString *)@"%s: map table argument is NULL", "NSMapEnumerator NSEnumerateMapTable(NSMapTable * _Nonnull)");
  }
  retstr->_puint64_t i = 0;
  retstr->_suint64_t i = 0;
  retstr->_bs = 0;
  NSUInteger v4 = [(NSMapTable *)table count];
  NSUInteger v5 = v4;
  retstr->_puint64_t i = v4;
  retstr->_suint64_t i = 0;
  if (v4) {
    int v6 = (char *)malloc_type_calloc(v4, 0x10uLL, 0x80040B8603338uLL);
  }
  else {
    int v6 = 0;
  }
  retstr->_bs = v6;
  uint64_t result = [(NSMapTable *)table getKeys:v6 values:&v6[8 * v5]];
  retstr->_puint64_t i = (NSUInteger)result;
  return result;
}

NSMapTable *oq_begin_waiting(uint64_t a1, qos_class_t a2)
{
  NSUInteger v4 = (os_unfair_lock_s *)(a1 + 8);
  NSUInteger v5 = [[NSMapTable alloc] initWithKeyOptions:258 valueOptions:258 capacity:0];
  os_unfair_lock_lock(v4);
  uint64_t v6 = [*(id *)(a1 + 152) count];
  if (v6)
  {
    uint64_t v7 = v6;
    for (uint64_t i = 0; i != v7; ++i)
    {
      double v9 = (_opaque_pthread_t *)[*(id *)(a1 + 152) pointerAtIndex:i];
      pthread_override_t started = pthread_override_qos_class_start_np(v9, a2, 0);
      NSMapInsertKnownAbsent(v5, v9, started);
    }
  }
  os_unfair_lock_unlock(v4);
  return v5;
}

void NSMapInsertKnownAbsent(NSMapTable *table, const void *key, const void *value)
{
  if (!table) {
    NSLog((NSString *)@"%s: map table argument is NULL", "void NSMapInsertKnownAbsent(NSMapTable * _Nonnull, const void * _Nullable, const void * _Nullable)");
  }

  [(NSMapTable *)table setItem:value forKnownAbsentKey:key];
}

id NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(void **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  signed int v10 = a2;
  uint64_t v11 = *a1;
  if (a2)
  {
    type metadata accessor for NSURLResourceKey(0);
    id v12 = v11;
    swift_bridgeObjectRetain();
    signed int v10 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
  }
  else
  {
    id v13 = v11;
  }
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a4;
  *(void *)(v14 + 24) = a5;
  v18[4] = partial apply for closure #1 in NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:);
  v18[5] = v14;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 1107296256;
  v18[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool);
  v18[3] = &block_descriptor_1;
  uint64_t v15 = _Block_copy(v18);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(a4);
  swift_release();
  id v16 = (id)__NSFileManagerEnumeratorAtURL(v6, (uint64_t)v11, (uint64_t)v10, a3, (uint64_t)v15);
  _Block_release(v15);

  return v16;
}

uint64_t outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t __NSFileCoordinatorSharedAccessArbiter_block_invoke_2(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  qword_1EB1EDDE0 = result;
  return result;
}

uint64_t __NSFileManagerEnumeratorAtURL(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[5] = *MEMORY[0x1E4F143B8];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = ____NSFileManagerEnumeratorAtURL_block_invoke;
  v6[3] = &unk_1E51F7C80;
  v6[4] = a5;
  return [a1 enumeratorAtURL:a2 includingPropertiesForKeys:a3 options:a4 errorHandler:v6];
}

NSFileAccessArbiterProxy *__NSFileCoordinatorSharedAccessArbiter_block_invoke()
{
  qos_class_t v0 = qos_class_main();
  uint64_t v1 = dispatch_queue_attr_make_with_qos_class(0, v0, 0);
  int v2 = dispatch_queue_attr_make_with_autorelease_frequency(v1, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  int v3 = dispatch_queue_create("com.apple.FileCoordination.3", v2);
  id v4 = +[NSFileCoordinator _createConnectionToFileAccessArbiterForQueue:v3];
  objc_msgSend(v4, "setRemoteObjectInterface:", +[NSFileCoordinator _fileAccessArbiterInterface](NSFileCoordinator, "_fileAccessArbiterInterface"));
  [v4 setOptions:4096];
  NSUInteger v5 = [[NSFileAccessArbiterProxy alloc] initWithServer:v4 queue:v3];
  [v4 resume];

  dispatch_release(v3);
  return v5;
}

void message_handler_error(uint64_t a1, uint64_t a2)
{
  v11[5] = *MEMORY[0x1E4F143B8];
  if (a2 == MEMORY[0x1E4F14520])
  {
    ++*(void *)(*(void *)(a1 + 72) + 8);
    int v3 = (void *)MEMORY[0x185308110](a1);
    uint64_t v4 = [(id)a1 interruptionHandler];
    if (v4) {
      (*(void (**)(void))(v4 + 16))();
    }
  }
  else if (a2 != MEMORY[0x1E4F14550])
  {
    if (a2 == MEMORY[0x1E4F14528])
    {
      NSUInteger v5 = (void *)MEMORY[0x185308110](a1);
      -[_NSXPCConnectionRequestedReplies invalidate](*(void *)(a1 + 64));
      uint64_t v6 = [(id)a1 invalidationHandler];
      if (v6) {
        (*(void (**)(void))(v6 + 16))();
      }
      uint64_t v7 = [(id)a1 _additionalInvalidationHandler];
      if (v7)
      {
        uint64_t v8 = (void *)v7;
        global_queue = dispatch_get_global_queue(21, 0);
        dispatch_async(global_queue, v8);
        objc_msgSend((id)a1, "set_additionalInvalidationHandler:", 0);
      }
      [(id)a1 setInvalidationHandler:0];
      [(id)a1 setInterruptionHandler:0];
      [(id)a1 setExportedObject:0];
      -[_NSXPCConnectionExportedObjectTable invalidate](*(void *)(a1 + 56));
      -[_NSXPCConnectionClassCache clear](*(void *)(a1 + 120));
      -[_NSXPCConnectionClassCache clear](*(void *)(a1 + 128));
      if ((atomic_fetch_and_explicit((atomic_uchar *volatile)(a1 + 32), 0xFBu, memory_order_relaxed) & 4) != 0)
      {
        signed int v10 = *(NSObject **)(a1 + 24);
        v11[0] = MEMORY[0x1E4F143A8];
        v11[1] = 3221225472;
        v11[2] = __message_handler_error_block_invoke;
        v11[3] = &unk_1E51F71D0;
        v11[4] = a1;
        dispatch_async(v10, v11);
      }
    }
    else if (a2 == MEMORY[0x1E4F14548])
    {
      [(id)a1 invalidate];
    }
  }
}

NSUInteger NSCountHashTable(NSHashTable *table)
{
  if (!table) {
    NSLog((NSString *)@"%s: hash table argument is NULL", "NSUInteger NSCountHashTable(NSHashTable * _Nonnull)");
  }

  return [(NSHashTable *)table count];
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.Precision()
{
  return &type metadata for NumberFormatStyleConfiguration.Precision;
}

uint64_t LockedState._Buffer.__deallocating_deinit()
{
  (*(void (**)(char *))(*(void *)(*(void *)(*(void *)v0
                                                         + class metadata base offset for LockedState._Buffer)
                                             - 8)
                                 + 8))(&v0[*(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v0 + 16)]);

  return swift_deallocClassInstance();
}

uint64_t *destroy for _NSSwiftTimeZone.State(uint64_t *result)
{
  unint64_t v1 = result[1];
  if (v1 >> 60 != 15) {
    return (uint64_t *)outlined consume of Data._Representation(*result, v1);
  }
  return result;
}

uint64_t destroy for _LocaleICU.State(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    if (v2 == 1) {
      goto LABEL_8;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[5])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[9])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_8:
  if (a1[14])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[18] >= 2uLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[22])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (a1[37])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[42] >= 2uLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[46] >= 2uLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[49] != 1) {
    swift_unknownObjectRelease();
  }
  if (a1[52] >= 2uLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decoder.singleValueContainer() in conformance _PlistDecoder<A>@<X0>(void *a1@<X8>)
{
  return _PlistDecoder.singleValueContainer()(a1);
}

uint64_t _PlistDecoder.singleValueContainer()@<X0>(void *a1@<X8>)
{
  a1[3] = type metadata accessor for _PlistDecoder();
  a1[4] = swift_getWitnessTable();
  *a1 = v1;
  return swift_retain();
}

uint64_t _PlistDecoder.container<A>(keyedBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v7 = v4;
  uint64_t v34 = a3;
  uint64_t v32 = a2;
  uint64_t v29 = a4;
  uint64_t v30 = a1;
  uint64_t v8 = *(void *)(*v4 + 88);
  uint64_t v9 = *(void *)(*v4 + 80);
  swift_getAssociatedTypeWitness();
  uint64_t v33 = v8;
  uint64_t v31 = v9;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v27 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  id v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  id v16 = (char *)v26 - v15;
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v18);
  long long v28 = (char *)v26 - v19;
  uint64_t v20 = v4[2];
  swift_bridgeObjectRetain_n();
  uint64_t v21 = MEMORY[0x185302620](v20, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v21)
  {
    v26[1] = v5;
    uint64_t v35 = v20;
    type metadata accessor for Array();
    swift_getWitnessTable();
    BidirectionalCollection.last.getter();
    uint64_t v6 = v27;
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v16, v27);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v13, 1, AssociatedTypeWitness) != 1)
    {
      long long v22 = v28;
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v28, v13, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v6);
      swift_bridgeObjectRelease();
      uint64_t v23 = v7[5];
      uint64_t v24 = *(void (**)(uint64_t, char *, void *, uint64_t, uint64_t, uint64_t))(v33 + 24);
      swift_retain();
      v24(v30, v22, v7, v23, v32, v34);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v22, AssociatedTypeWitness);
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v6);
  __break(1u);
  return result;
}

uint64_t _PlistUnkeyedDecodingContainer.decode<A>(_:)@<X0>(ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v80 = a4;
  v81 = a1;
  uint64_t v82 = a3;
  uint64_t v79 = a5;
  uint64_t v84 = a2;
  uint64_t v6 = a2 - 8;
  uint64_t v68 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  v67 = (char *)v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v66 = type metadata accessor for Optional();
  uint64_t v71 = *(void *)(v66 - 8);
  MEMORY[0x1F4188790](v66);
  v72 = (char *)v63 - v10;
  uint64_t v74 = AssociatedTypeWitness;
  uint64_t v83 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v11);
  id v13 = (char *)v63 - v12;
  uint64_t v73 = AssociatedConformanceWitness;
  uint64_t v14 = v5;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)v63 - v18;
  uint64_t v20 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v25 = MEMORY[0x1F4188790](v24);
  v77 = (char *)v63 - v26;
  uint64_t v27 = *(int *)(v6 + 48);
  uint64_t v29 = v28;
  uint64_t v30 = *(void (**)(char *, double))(v17 + 16);
  uint64_t v69 = v14 + v27;
  v30(v19, v25);
  uint64_t v75 = v15;
  uint64_t v76 = v20;
  int v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, v15);
  uint64_t v70 = v29;
  uint64_t v78 = v17;
  if (v31 == 1)
  {
    uint64_t v32 = v71;
    v64 = v23;
    uint64_t v33 = *(void (**)(char *, uint64_t))(v17 + 8);
    v63[1] = v17 + 8;
    v63[0] = v33;
    v33(v19, v29);
    uint64_t v65 = v14;
    uint64_t v34 = v73;
    swift_getAssociatedTypeWitness();
    uint64_t v35 = swift_getAssociatedConformanceWitness();
    v36 = *(void (**)(uint64_t, uint64_t))(v35 + 16);
    uint64_t v37 = swift_checkMetadataState();
    v38 = v72;
    v36(v37, v35);
    uint64_t v39 = v74;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v38, 1, v74) == 1)
    {
      (*(void (**)(char *, uint64_t))(v32 + 8))(v38, v66);
      v40 = v67;
      uint64_t v41 = v68;
      uint64_t v42 = v84;
      (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v67, v65, v84);
      type metadata accessor for DecodingError();
      uint64_t v43 = swift_allocError();
      _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)((uint64_t)v81, v42, v82, v44);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v42);
      uint64_t v85 = v43;
      return swift_willThrow();
    }
    v56 = v13;
    (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v13, v38, v39);
    uint64_t v57 = v65;
    v58 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 80);
    swift_unknownObjectRetain();
    v59 = v56;
    uint64_t v60 = swift_checkMetadataState();
    v46 = v64;
    uint64_t v61 = v85;
    v58(v59, v60, v34);
    uint64_t v85 = v61;
    if (v61)
    {
      (*(void (**)(char *, uint64_t))(v83 + 8))(v59, v39);
      return swift_unknownObjectRelease();
    }
    uint64_t v47 = v57;
    (*(void (**)(char *, uint64_t))(v83 + 8))(v59, v39);
    swift_unknownObjectRelease();
    uint64_t v62 = v69;
    ((void (*)(uint64_t, uint64_t))v63[0])(v69, v70);
    uint64_t v49 = v75;
    uint64_t v48 = v76;
    (*(void (**)(uint64_t, char *, uint64_t))(v76 + 16))(v62, v46, v75);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 56))(v62, 0, 1, v49);
  }
  else
  {
    v46 = v19;
    uint64_t v47 = v14;
    uint64_t v49 = v75;
    uint64_t v48 = v76;
  }
  uint64_t v50 = (uint64_t)v77;
  (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v77, v46, v49);
  uint64_t v51 = *(int *)(v84 + 48);
  uint64_t v52 = *(void *)(v47 + v51);
  uint64_t v53 = v85;
  specialized _PlistDecoder.unwrapGeneric<A, B>(_:as:for:_:)(v50, v81, *(void *)(v47 + *(int *)(v84 + 52)), v52, 0, 0, 2, v82, v79);
  uint64_t v54 = v78;
  uint64_t v85 = v53;
  if (!v53)
  {
    *(void *)(v47 + v51) = v52 + 1;
    uint64_t v55 = v69;
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v69, v70);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v55, 1, 1, v49);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 8))(v50, v49);
}

uint64_t storeEnumTagSinglePayload for BPlistMap.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x76)
  {
    *(void *)uint64_t result = a2 - 119;
    if (a3 >= 0x77) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x77) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t specialized _PlistDecodingStorage.push(container:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  double v4 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7, v3, v4);
  type metadata accessor for Array();
  Array._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v8 = *v2;
  char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  uint64_t v10 = v8 & 0xFFFFFFFFFFFFFF8;
  if ((isClassOrObjCExistentialType & 1) == 0) {
    uint64_t v10 = v8;
  }
  Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)(v10 + 16));
  return Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

unint64_t *initializeBufferWithCopyOfBuffer for BPlistMap.Value(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of BPlistMap.Value(*a2);
  *a1 = v3;
  return a1;
}

unint64_t outlined copy of BPlistMap.Value(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
      uint64_t result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for XMLPlistMap.Value(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x78 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 120);
  }
  unsigned int v3 = ((*(void *)a1 >> 60) & 0x8F | (16 * (*(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x77) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

unint64_t outlined consume of XMLPlistMap.Value(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t destroy for XMLPlistMap.Value(unint64_t *a1)
{
  return outlined consume of XMLPlistMap.Value(*a1);
}

uint64_t storeEnumTagSinglePayload for XMLPlistMap.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x77)
  {
    *(void *)uint64_t result = a2 - 120;
    if (a3 >= 0x78) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x78) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

unint64_t *initializeBufferWithCopyOfBuffer for XMLPlistMap.Value(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of XMLPlistMap.Value(*a2);
  *a1 = v3;
  return a1;
}

unint64_t outlined copy of XMLPlistMap.Value(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
      uint64_t result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

void *_PlistKeyedDecodingContainer.decode(_:forKey:)(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v52 = a4;
  uint64_t v56 = a3;
  uint64_t v55 = a2;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v42 = *(void *)(v13 - 8);
  uint64_t v43 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v41 = (char *)&v40 - v14;
  swift_getAssociatedTypeWitness();
  uint64_t v49 = a8;
  uint64_t v50 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v44 = *(void *)(v17 - 8);
  uint64_t v45 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v40 - v18;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v21);
  v46 = (char *)&v40 - v22;
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v40 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v47 = (char *)&v40 - v24;
  uint64_t v51 = a1;
  uint64_t v53 = a5;
  uint64_t v54 = a7;
  double v25 = (void *)v56;
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (v25[2] && (a1 = v25, unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v19, v25[7] + *(void *)(v20 + 72) * v28, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v19, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, 1, 1, AssociatedTypeWitness);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v44 + 8))(v19, v45);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)((uint64_t)v51, v52, v53, v54, v30, v49, &demangling cache variable for type metadata for String.Type, &demangling cache variable for type metadata for String.Type.Type);
    swift_willThrow();
  }
  else
  {
    uint64_t v56 = v23;
    int v31 = v46;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v46, v19, AssociatedTypeWitness);
    a1 = *(void **)(v55 + 24);
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v33 = swift_checkMetadataState();
    uint64_t v35 = (uint64_t)v47;
    uint64_t v34 = v48;
    v32(v31, v33, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v31, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v34)
    {
      uint64_t v36 = v53;
      uint64_t v37 = *(void *)(v53 - 8);
      uint64_t v38 = (uint64_t)v41;
      (*(void (**)(char *, void *, uint64_t))(v37 + 16))(v41, v51, v53);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v38, 0, 1, v36);
      a1 = _PlistDecoder.unwrapString<A>(from:for:_:)(v35, v52, v38, v36, v54);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v38, v43);
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v35, v56);
    }
  }
  return a1;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, uint64_t, void, void, uint64_t))_PlistKeyedDecodingContainer.decode<A>(_:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, void, void, void, void, void, uint64_t, void, void, uint64_t))
{
  return a7(a1, a2, *v7, v7[1], v7[2], a5[2], a5[3], a3, a5[4], a5[5], a4);
}

uint64_t _PlistKeyedDecodingContainer.decode<A>(_:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v55 = a3;
  uint64_t v58 = a7;
  unint64_t v59 = a5;
  uint64_t v61 = a4;
  uint64_t v45 = a8;
  uint64_t v46 = a1;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v48 = *(void *)(v13 - 8);
  uint64_t v49 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v47 = (char *)&v42 - v14;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v50 = *(void *)(v17 - 8);
  uint64_t v51 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v42 - v18;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v21);
  unint64_t v52 = (char *)&v42 - v22;
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v43 = *(void *)(v23 - 8);
  uint64_t v44 = v23;
  MEMORY[0x1F4188790](v23);
  uint64_t v53 = (char *)&v42 - v24;
  uint64_t v56 = a2;
  uint64_t v57 = a9;
  uint64_t v60 = a6;
  uint64_t v25 = v61;
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v25 + 16) && (unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v19, *(void *)(v25 + 56) + *(void *)(v20 + 72) * v28, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v19, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, 1, 1, AssociatedTypeWitness);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v50 + 8))(v19, v51);
    type metadata accessor for DecodingError();
    swift_allocError();
    int v31 = v30;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v56, v59, v60, MetatypeMetadata, v31, v57);
    return swift_willThrow();
  }
  else
  {
    uint64_t v34 = v52;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v52, v19, AssociatedTypeWitness);
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v36 = swift_checkMetadataState();
    uint64_t v38 = (uint64_t)v53;
    uint64_t v37 = v54;
    v35(v34, v36, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v34, AssociatedTypeWitness);
    if (v37)
    {
      return swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
      uint64_t v39 = v60;
      uint64_t v40 = *(void *)(v60 - 8);
      uint64_t v41 = (uint64_t)v47;
      (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v47, v56, v60);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v41, 0, 1, v39);
      _PlistDecoder.unwrapGeneric<A, B>(_:as:for:_:)(v38, v59, v41, v58, v39, a11, v57, v45);
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v41, v49);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v38, v44);
    }
  }
}

unint64_t protocol witness for PlistDecodingMap.value(from:) in conformance BPlistMap@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = BPlistMap.loadValue(at:)(*a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t specialized _PlistDecoder.unwrapGeneric<A, B>(_:as:for:_:)@<X0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v50 = a8;
  uint64_t v10 = v9;
  LODWORD(v58) = a7;
  uint64_t v52 = a5;
  uint64_t v53 = a6;
  uint64_t v49 = a9;
  uint64_t v15 = *(void *)(*v10 + 88);
  swift_getAssociatedTypeWitness();
  uint64_t v48 = v15;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  if (a2 == &type metadata for Date)
  {
    uint64_t result = specialized _PlistDecoder.unwrapDate<A>(from:for:_:)(a1, a3, a4, v52, v53, v58);
    if (v51) {
      return result;
    }
    return swift_dynamicCast();
  }
  uint64_t v19 = a4;
  uint64_t v20 = v53;
  uint64_t v47 = a1;
  if (a2 == &type metadata for Data)
  {
    uint64_t result = (uint64_t)specialized _PlistDecoder.unwrapData<A>(from:for:_:)(v47, a3, v19, v52, v53, v58);
    if (v51) {
      return result;
    }
    uint64_t v54 = (void *)result;
    uint64_t v55 = v29;
    return swift_dynamicCast();
  }
  uint64_t v21 = a2;
  uint64_t v44 = (char *)&v43 - v17;
  uint64_t v45 = v18;
  char v22 = v58;
  uint64_t v23 = v52;
  uint64_t v46 = v21;
  if ((_BYTE)v58 == 0xFF)
  {
    unint64_t v30 = a3;
    uint64_t v31 = a3 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain();
    uint64_t v32 = v19;
    uint64_t v26 = v20;
    goto LABEL_16;
  }
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 40) = &type metadata for _CodingKey;
  *(void *)(v24 + 48) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v25 = swift_allocObject();
  *(void *)(v24 + 16) = v25;
  *(void *)(v25 + 16) = v19;
  *(void *)(v25 + 24) = v23;
  *(void *)(v25 + 32) = v20;
  *(unsigned char *)(v25 + 40) = v22;
  *(void *)(v24 + 56) = a3;
  uint64_t v26 = v20;
  if (!(a3 >> 62))
  {
    uint64_t v27 = (uint64_t *)(a3 + 64);
LABEL_14:
    uint64_t v33 = *v27;
    uint64_t result = swift_retain();
    uint64_t v32 = v19;
    uint64_t v26 = v20;
    uint64_t v34 = v33 + 1;
    if (__OFADD__(v33, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    goto LABEL_15;
  }
  if (a3 >> 62 == 1)
  {
    uint64_t v27 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_14;
  }
  uint64_t v32 = v19;
  uint64_t v34 = 1;
LABEL_15:
  *(void *)(v24 + 64) = v34;
  uint64_t v31 = v24 & 0x3FFFFFFFFFFFFFFFLL;
  unint64_t v30 = v24;
LABEL_16:
  uint64_t v35 = v10[5];
  v10[5] = v30;
  outlined copy of _CodingKey?(v32, v23, v26, v22);
  uint64_t v36 = type metadata accessor for _PlistDecodingStorage();
  uint64_t v58 = v31;
  swift_retain();
  specialized _PlistDecodingStorage.push(container:)(v47, v36);
  uint64_t v56 = type metadata accessor for _PlistDecoder();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v54 = v10;
  swift_retain();
  uint64_t v37 = v51;
  dispatch thunk of Decodable.init(from:)();
  if (!v37) {
    goto LABEL_19;
  }
  v10[5] = v35;
  swift_retain();
  swift_release();
  uint64_t v38 = swift_bridgeObjectRetain();
  uint64_t v39 = MEMORY[0x185302620](v38, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (!v39)
  {
    __break(1u);
LABEL_19:
    v10[5] = v35;
    swift_retain();
    swift_release();
    uint64_t v40 = swift_bridgeObjectRetain();
    uint64_t v41 = MEMORY[0x185302620](v40, AssociatedTypeWitness);
    uint64_t result = swift_bridgeObjectRelease();
    if (v41) {
      goto LABEL_20;
    }
LABEL_24:
    __break(1u);
    return result;
  }
LABEL_20:
  type metadata accessor for Array();
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v42 = v44;
  RangeReplaceableCollection<>.removeLast()();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v42, AssociatedTypeWitness);
  swift_release();
  return swift_release();
}

uint64_t _PlistDecoder.unwrapGeneric<A, B>(_:as:for:_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v67 = a3;
  uint64_t v9 = v8;
  uint64_t v63 = a4;
  uint64_t v64 = a7;
  uint64_t v59 = a6;
  uint64_t v69 = (uint64_t *)a2;
  uint64_t v65 = a1;
  uint64_t v62 = a8;
  uint64_t v11 = *(void *)(*(void *)v8 + 88);
  uint64_t v12 = *(void *)(*(void *)v8 + 80);
  swift_getAssociatedTypeWitness();
  uint64_t v57 = v12;
  uint64_t v58 = v11;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v53 - v14;
  uint64_t v61 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Optional();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  char v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v26 = MEMORY[0x1F4188790](v23);
  uint64_t v27 = (char *)&v53 - v24;
  if (v25 == &type metadata for Date)
  {
    uint64_t v35 = v66;
    uint64_t result = _PlistDecoder.unwrapDate<A>(from:for:_:)(v65, (unint64_t)v69, v67, a5, v64, (uint64_t)v68);
    if (v35) {
      return result;
    }
    return swift_dynamicCast();
  }
  if (v25 == &type metadata for Data)
  {
    uint64_t v37 = v66;
    uint64_t result = (uint64_t)_PlistDecoder.unwrapData<A>(from:for:_:)(v65, (unint64_t)v69, v67, a5, v64);
    if (v37) {
      return result;
    }
    v68[0] = result;
    v68[1] = v38;
    return swift_dynamicCast();
  }
  uint64_t v55 = v13;
  uint64_t v56 = v25;
  uint64_t v54 = v15;
  unint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16);
  v28((char *)&v53 - v24, v67, v19, v26);
  ((void (*)(char *, char *, uint64_t))v28)(v22, v27, v19);
  uint64_t v29 = v61;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v22, 1, a5) == 1)
  {
    unint64_t v30 = *(void (**)(char *, uint64_t))(v20 + 8);
    v30(v27, v19);
    v30(v22, v19);
    uint64_t v31 = v69;
    swift_retain();
    uint64_t v32 = AssociatedTypeWitness;
    uint64_t v33 = v65;
    uint64_t v34 = v66;
    goto LABEL_16;
  }
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
  v39(v18, v22, a5);
  uint64_t v31 = (uint64_t *)swift_allocObject();
  uint64_t v40 = v64;
  v31[5] = a5;
  v31[6] = v40;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v31 + 2);
  v39((char *)boxed_opaque_existential_1, v18, a5);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v27, v19);
  unint64_t v42 = (unint64_t)v69;
  v31[7] = (uint64_t)v69;
  if (!(v42 >> 62))
  {
    uint64_t v43 = (uint64_t *)(v42 + 64);
    uint64_t v32 = AssociatedTypeWitness;
    uint64_t v33 = v65;
    uint64_t v34 = v66;
LABEL_14:
    uint64_t v44 = *v43;
    uint64_t result = swift_retain();
    uint64_t v45 = v44 + 1;
    if (__OFADD__(v44, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    goto LABEL_15;
  }
  uint64_t v32 = AssociatedTypeWitness;
  uint64_t v33 = v65;
  uint64_t v34 = v66;
  if (v42 >> 62 == 1)
  {
    uint64_t v43 = (uint64_t *)((v42 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_14;
  }
  uint64_t v45 = 1;
LABEL_15:
  v31[8] = v45;
LABEL_16:
  uint64_t v46 = *(void *)(v9 + 40);
  *(void *)(v9 + 40) = v31;
  uint64_t v47 = type metadata accessor for _PlistDecodingStorage();
  swift_retain();
  specialized _PlistDecodingStorage.push(container:)(v33, v47);
  v68[3] = type metadata accessor for _PlistDecoder();
  v68[4] = swift_getWitnessTable();
  v68[0] = v9;
  swift_retain();
  dispatch thunk of Decodable.init(from:)();
  if (!v34) {
    goto LABEL_19;
  }
  *(void *)(v9 + 40) = v46;
  v46 &= 0x3FFFFFFFFFFFFFFFuLL;
  swift_retain();
  swift_release();
  uint64_t v48 = swift_bridgeObjectRetain();
  uint64_t v49 = MEMORY[0x185302620](v48, v32);
  swift_bridgeObjectRelease();
  if (!v49)
  {
    __break(1u);
LABEL_19:
    *(void *)(v9 + 40) = v46;
    swift_retain();
    swift_release();
    uint64_t v50 = swift_bridgeObjectRetain();
    uint64_t v51 = MEMORY[0x185302620](v50, v32);
    uint64_t result = swift_bridgeObjectRelease();
    if (v51) {
      goto LABEL_20;
    }
LABEL_24:
    __break(1u);
    return result;
  }
LABEL_20:
  type metadata accessor for Array();
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v52 = v54;
  RangeReplaceableCollection<>.removeLast()();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v52, v32);
  swift_release();
  return swift_release();
}

void protocol witness for Decoder.container<A>(keyedBy:) in conformance JSONDecoderImpl()
{
}

void JSONDecoderImpl.container<A>(keyedBy:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    return;
  }
  double v4 = v0;
  uint64_t v5 = v2 + 24 * v3;
  Swift::Int v7 = *(void *)(v5 + 8);
  uint64_t v6 = *(void *)(v5 + 16);
  unsigned int v8 = *(unsigned __int8 *)(v5 + 24);
  if (v8 >> 5 != 3)
  {
    BOOL v9 = v8 >> 5 == 5 && (v6 | v7) == 0;
    if (v9 && v8 == 160)
    {
      uint64_t v22 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v24 = v23;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      unint64_t v25 = v4[20];
      swift_retain();
      _CodingPathNode.path.getter(v25);
      swift_release();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v22 - 8) + 104))(v24, *MEMORY[0x1E4FBBA80], v22);
LABEL_20:
      swift_willThrow();
      return;
    }
    uint64_t v10 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v12 = v11;
    uint64_t *v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    unint64_t v13 = v4[20];
    swift_retain();
    _CodingPathNode.path.getter(v13);
    swift_release();
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    uint64_t v29 = (void *)0xD000000000000035;
    unint64_t v30 = 0x80000001823B3300;
    uint64_t v14 = v4[2];
    uint64_t v15 = *(void *)(v14 + 16);
    if (v15)
    {
      uint64_t v16 = (void *)0xE800000000000000;
      uint64_t v17 = 0x676E697274732061;
      switch(*(unsigned __int8 *)(v14 + 24 * v15 + 24) >> 5)
      {
        case 1:
          uint64_t v16 = (void *)0xE600000000000000;
          uint64_t v17 = 0x7265626D756ELL;
          break;
        case 2:
          uint64_t v16 = (void *)0xE400000000000000;
          uint64_t v17 = 1819242338;
          break;
        case 3:
          uint64_t v16 = (void *)0xEC0000007972616ELL;
          uint64_t v17 = 0x6F69746369642061;
          break;
        case 4:
          uint64_t v17 = 0x7961727261206E61;
          break;
        case 5:
          uint64_t v16 = (void *)0xE400000000000000;
          uint64_t v17 = 1819047278;
          break;
        default:
          break;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v27._countAndFlagsBits = v17;
      v27._object = v16;
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v28._countAndFlagsBits = 0x64616574736E6920;
      v28._object = (void *)0xE90000000000002ELL;
      String.append(_:)(v28);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v10 - 8) + 104))(v12, *MEMORY[0x1E4FBBA70], v10);
      goto LABEL_20;
    }
    goto LABEL_22;
  }
  unint64_t v18 = v4[20];
  unint64_t v20 = v4[17];
  uint64_t v29 = (void *)v4[16];
  unint64_t v19 = (unint64_t)v29;
  unint64_t v30 = v20;
  uint64_t v32 = v18 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain_n();
  swift_retain();
  outlined copy of JSONEncoder.KeyEncodingStrategy((unint64_t)v29);
  uint64_t v21 = static JSONDecoderImpl.KeyedContainer.stringify(objectRegion:using:codingPathNode:keyDecodingStrategy:)(v7, v6, (uint64_t)v4, v18, (unint64_t *)&v29);
  if (v1)
  {
    swift_release();
    swift_release_n();
    outlined consume of JSONEncoder.KeyEncodingStrategy(v19);
  }
  else
  {
    uint64_t v26 = v21;
    outlined consume of JSONEncoder.KeyEncodingStrategy(v19);
    swift_release();
    uint64_t v29 = v4;
    unint64_t v30 = v18;
    uint64_t v31 = v26;
    type metadata accessor for JSONDecoderImpl.KeyedContainer();
    swift_getWitnessTable();
    KeyedDecodingContainer.init<A>(_:)();
  }
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

unint64_t outlined consume of JSONEncoder.KeyEncodingStrategy(unint64_t result)
{
  if (result >= 2) {
    return swift_release();
  }
  return result;
}

unint64_t outlined copy of JSONEncoder.KeyEncodingStrategy(unint64_t result)
{
  if (result >= 2) {
    return swift_retain();
  }
  return result;
}

uint64_t type metadata accessor for JSONDecoderImpl.KeyedContainer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _PlistDecoder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _PlistDecodingStorage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _PlistDecoder.decode(_:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v21 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  Swift::Int v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v20 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v22 = (char *)v20 - v13;
  uint64_t v14 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain_n();
  uint64_t v15 = MEMORY[0x185302620](v14, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v15)
  {
    v20[1] = v1;
    uint64_t v23 = v14;
    type metadata accessor for Array();
    swift_getWitnessTable();
    BidirectionalCollection.last.getter();
    uint64_t v2 = v21;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v21);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, AssociatedTypeWitness) != 1)
    {
      uint64_t v16 = (uint64_t)v22;
      (*(void (**)(void))(v11 + 32))();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v2);
      swift_bridgeObjectRelease();
      unint64_t v17 = *(void *)(v3 + 40);
      swift_retain();
      unint64_t v18 = specialized _PlistDecoder.unwrapString<A>(from:for:_:)(v16, v17, 0, 0, 0, 0xFFu);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v16, AssociatedTypeWitness);
      return (uint64_t)v18;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v2);
  __break(1u);
  return result;
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  uint64_t v1 = *(void *)(*v0 + 88);
  uint64_t v2 = *(void *)(*v0 + 80);
  swift_getAssociatedTypeWitness();
  uint64_t v22 = v2;
  uint64_t v23 = v1;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v20 = type metadata accessor for Optional();
  double v4 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v19 - v8;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v19 - v12;
  uint64_t v21 = v0;
  uint64_t v14 = v0[2];
  swift_bridgeObjectRetain_n();
  uint64_t v15 = MEMORY[0x185302620](v14, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v15)
  {
    uint64_t v24 = v14;
    type metadata accessor for Array();
    swift_getWitnessTable();
    BidirectionalCollection.last.getter();
    uint64_t v15 = v20;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v9, v20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, AssociatedTypeWitness) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v6, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v15);
      swift_bridgeObjectRelease();
      uint64_t v16 = v21[5];
      swift_retain();
      unint64_t v17 = specialized _PlistDecoder.unwrapBool<A>(from:for:_:)((uint64_t)v13, v16, 0, 0, 0, 0xFFu, v22, v23);
      swift_release();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
      return v17 & 1;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v15);
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  uint64_t v2 = v1;
  uint64_t v3 = v0;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v20 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  Swift::Int v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v21 = (char *)&v19 - v13;
  uint64_t v14 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain_n();
  uint64_t v15 = MEMORY[0x185302620](v14, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v15)
  {
    unint64_t v19 = v1;
    uint64_t v22 = v14;
    type metadata accessor for Array();
    swift_getWitnessTable();
    BidirectionalCollection.last.getter();
    uint64_t v2 = v20;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, AssociatedTypeWitness) != 1)
    {
      uint64_t v16 = (uint64_t)v21;
      (*(void (**)(void))(v11 + 32))();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v2);
      swift_bridgeObjectRelease();
      unint64_t v17 = *(void *)(v3 + 40);
      swift_retain();
      specialized _PlistDecoder.unwrapFloatingPoint<A, B>(from:for:_:)(v16, v17, 0, 0, 0, 0xFFu);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v16, AssociatedTypeWitness);
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v2);
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  uint64_t v2 = v1;
  uint64_t v3 = v0;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v20 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  Swift::Int v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v21 = (char *)&v19 - v13;
  uint64_t v14 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain_n();
  uint64_t v15 = MEMORY[0x185302620](v14, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v15)
  {
    unint64_t v19 = v1;
    uint64_t v22 = v14;
    type metadata accessor for Array();
    swift_getWitnessTable();
    BidirectionalCollection.last.getter();
    uint64_t v2 = v20;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, AssociatedTypeWitness) != 1)
    {
      uint64_t v16 = (uint64_t)v21;
      (*(void (**)(void))(v11 + 32))();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v2);
      swift_bridgeObjectRelease();
      unint64_t v17 = *(void *)(v3 + 40);
      swift_retain();
      specialized _PlistDecoder.unwrapFloatingPoint<A, B>(from:for:_:)(v16, v17, 0, 0, 0, 0xFFu);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v16, AssociatedTypeWitness);
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v2);
  __break(1u);
  return result;
}

unint64_t destroy for BPlistMap.Value(unint64_t *a1)
{
  return outlined consume of BPlistMap.Value(*a1);
}

uint64_t getEnumTagSinglePayload for BPlistMap.Value(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x77 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 119);
  }
  unsigned int v3 = ((*(void *)a1 >> 60) & 0x8F | (16 * (*(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x76) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

void *_PlistDecoder.unwrapString<A>(from:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v41 = a5;
  uint64_t v42 = a3;
  v44[11] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *v5;
  uint64_t v40 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v38 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v43 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  unint64_t v18 = (char *)&v38 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(v20 + 40))(a1, v19, v20, v16))
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v39 = v22;
    *uint64_t v22 = MEMORY[0x1E4FBB1A0];
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
    v23(v18, v42, v12);
    v23(v14, (uint64_t)v18, v12);
    uint64_t v24 = v40;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v14, 1, a4) == 1)
    {
      unint64_t v25 = *(void (**)(char *, uint64_t))(v43 + 8);
      v25(v14, v12);
      _CodingPathNode.path.getter(a2);
      v25(v18, v12);
    }
    else
    {
      uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
      uint64_t v42 = v21;
      unint64_t v30 = v38;
      v29(v38, v14, a4);
      uint64_t v31 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v33 = v41;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v33;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v24 + 16))(boxed_opaque_existential_1, v30, a4);
      v44[0] = v31;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v18, v12);
      uint64_t v35 = v30;
      uint64_t v21 = v42;
      (*(void (**)(char *, uint64_t))(v24 + 8))(v35, a4);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v36 = v39;
    v44[0] = 0;
    v44[1] = 0xE000000000000000;
    Swift::String v28 = v44;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v36, *MEMORY[0x1E4FBBA80], v21);
    swift_willThrow();
  }
  else
  {
    uint64_t v26 = v6[3];
    Swift::String v27 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 72);
    swift_unknownObjectRetain();
    Swift::String v28 = (void *)v27(a1, v26, a2, v42, a4, v41, v19, v20);
    swift_unknownObjectRelease();
  }
  return v28;
}

void *specialized _PlistDecoder.unwrapString<A>(from:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  Swift::Int v7 = v6;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *v6;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  unsigned __int8 v32 = a6;
  uint64_t v11 = *(void *)(v10 + 80);
  uint64_t v12 = *(void *)(v10 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(a1, v11, v12))
  {
    uint64_t v13 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v15 = v14;
    void *v14 = MEMORY[0x1E4FBB1A0];
    char v16 = v32;
    if (v32 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      uint64_t v18 = v30;
      uint64_t v17 = v31;
      uint64_t v19 = v29;
      outlined copy of _CodingKey(v29, v30, v31, v32);
      outlined copy of _CodingKey(v29, v30, v31, v32);
      uint64_t v20 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v22 = swift_allocObject();
      *(void *)(inited + 32) = v22;
      *(void *)(v22 + 16) = v19;
      *(void *)(v22 + 24) = v18;
      *(void *)(v22 + 32) = v17;
      *(unsigned char *)(v22 + 40) = v16;
      v28[0] = v20;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v19, v18, v17, v16);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v28[0] = 0;
    v28[1] = 0xE000000000000000;
    uint64_t v26 = v28;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104))(v15, *MEMORY[0x1E4FBBA80], v13);
    swift_willThrow();
  }
  else
  {
    uint64_t v23 = v7[3];
    uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v12 + 72);
    unint64_t v25 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    uint64_t v26 = (void *)v24(a1, v23, a2, &v29, &type metadata for _CodingKey, v25, v11, v12);
    swift_unknownObjectRelease();
  }
  return v26;
}

BOOL protocol witness for static PlistDecodingFormat.valueIsNull(_:) in conformance _BPlistDecodingFormat(void *a1)
{
  return ((*a1 + 0x6FFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFF7) == 0 && *a1 >> 60 == 9;
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapString<A>(from:in:for:_:) in conformance _BPlistDecodingFormat(unint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static _BPlistDecodingFormat.unwrapString<A>(from:in:for:_:)(*a1, a2, a3, a4, a5, a6);
}

uint64_t static _BPlistDecodingFormat.unwrapString<A>(from:in:for:_:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v67 = a6;
  uint64_t v69 = (uint64_t *)a3;
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v66 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v64 = (char *)&v62 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v14);
  char v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v62 - v18;
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v62 - v21;
  double v26 = MEMORY[0x1F4188790](v23);
  uint64_t v65 = (char *)&v62 - v27;
  if (a1 >> 60)
  {
    unint64_t v68 = a1;
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t, double))(v25 + 16);
    uint64_t v36 = v25;
    v35(v19, a4, v14, v26);
    ((void (*)(char *, char *, uint64_t))v35)(v16, v19, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1, a5) == 1)
    {
      uint64_t v37 = *(void (**)(char *, uint64_t))(v36 + 8);
      v37(v16, v14);
      _CodingPathNode.path.getter((unint64_t)v69);
      v37(v19, v14);
    }
    else
    {
      uint64_t v38 = v66;
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v66, v16, a5);
      uint64_t v39 = _CodingPathNode.path.getter((unint64_t)v69);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v41 = v67;
      *(void *)(inited + 56) = a5;
      *(void *)(inited + 64) = v41;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 16))(boxed_opaque_existential_1, v38, a5);
      *(void *)&long long v70 = v39;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v19, v14);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v38, a5);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(MEMORY[0x1E4FBB1A0], v68, (uint64_t (*)(uint64_t))BPlistMap.Value.debugDataTypeDescription.getter, v43);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  uint64_t v62 = a5;
  uint64_t v63 = v25;
  uint64_t v66 = (char *)&v62;
  MEMORY[0x1F4188790](v24);
  *((unsigned char *)&v62 - 16) = v28;
  uint64_t v29 = *(void *)(a2 + 64);
  *(double *)&long long v31 = MEMORY[0x1F4188790](v30);
  *(&v62 - 4) = (uint64_t)partial apply for closure #1 in static _BPlistDecodingFormat.unwrapString<A>(from:in:for:_:);
  *(&v62 - 3) = v32;
  *((_OWORD *)&v62 - 1) = v31;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v29 + 40));
  uint64_t v33 = v68;
  partial apply for specialized closure #1 in BPlistMap.withBuffer<A>(for:perform:)((void *)(v29 + 16), &v70);
  if (v33)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v29 + 40));
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v29 + 40));
  swift_release();
  if (*((void *)&v70 + 1)) {
    return v70;
  }
  uint64_t v44 = v63;
  uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 16);
  uint64_t v46 = v65;
  uint64_t v47 = v14;
  v45(v65, a4, v14);
  v45(v22, (uint64_t)v46, v14);
  uint64_t v48 = v62;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v22, 1, v62) != 1)
  {
    uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    uint64_t v52 = v64;
    v51(v64, v22, v48);
    uint64_t v50 = (uint64_t *)swift_allocObject();
    uint64_t v53 = v67;
    v50[5] = v48;
    v50[6] = v53;
    uint64_t v54 = __swift_allocate_boxed_opaque_existential_1(v50 + 2);
    v51((char *)v54, v52, v48);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v47);
    unint64_t v55 = (unint64_t)v69;
    v50[7] = (uint64_t)v69;
    if (v55 >> 62)
    {
      if (v55 >> 62 != 1)
      {
        uint64_t v58 = 1;
LABEL_16:
        v50[8] = v58;
        goto LABEL_17;
      }
      uint64_t v56 = (uint64_t *)((v55 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      uint64_t v56 = (uint64_t *)(v55 + 64);
    }
    uint64_t v57 = *v56;
    swift_retain();
    uint64_t v58 = v57 + 1;
    if (__OFADD__(v57, 1)) {
      __break(1u);
    }
    goto LABEL_16;
  }
  uint64_t v49 = *(void (**)(char *, uint64_t))(v44 + 8);
  v49(v46, v14);
  v49(v22, v14);
  uint64_t v50 = v69;
  swift_retain();
LABEL_17:
  uint64_t v59 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v61 = v60;
  _CodingPathNode.path.getter((unint64_t)v50);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v59 - 8) + 104))(v61, *MEMORY[0x1E4FBBA78], v59);
  swift_release();
  return swift_willThrow();
}

uint64_t protocol witness for static PlistDecodingFormat.container<A>(keyedBy:for:referencing:codingPathNode:) in conformance _BPlistDecodingFormat(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  return static _BPlistDecodingFormat.container<A>(keyedBy:for:referencing:codingPathNode:)(a1, *a2, a3, a4, a5, a6);
}

void protocol witness for PlistArrayIterator.next() in conformance BPlistMap.ArrayIterator(uint64_t a1@<X8>)
{
  unint64_t v2 = v1[1];
  unint64_t v3 = *(void *)(*v1 + 16);
  if (v2 == v3)
  {
    uint64_t v4 = 0;
LABEL_5:
    *(void *)a1 = v4;
    *(unsigned char *)(a1 + 8) = v2 == v3;
    return;
  }
  if (v2 < v3)
  {
    uint64_t v4 = *(void *)(*v1 + 8 * v2 + 32);
    v1[1] = v2 + 1;
    goto LABEL_5;
  }
  __break(1u);
}

unint64_t protocol witness for PlistDecodingMap.value(from:) in conformance XMLPlistMap@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v2 = *a1;
  *a2 = v2;
  return outlined copy of XMLPlistMap.Value(v2);
}

BOOL protocol witness for static PlistDecodingFormat.valueIsNull(_:) in conformance _XMLPlistDecodingFormat(void *a1)
{
  return *a1 == 0x8000000000000000;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URL.CodingKeys()
{
  if (*v0) {
    return 0x65766974616C6572;
  }
  else {
    return 1702060386;
  }
}

unint64_t protocol witness for PlistArrayIterator.next() in conformance XMLPlistMap.ArrayIterator@<X0>(unint64_t *a1@<X8>)
{
  Swift::Int v3 = *v1;
  unint64_t result = XMLPlistMap.loadValue(at:)(*v1);
  unint64_t v5 = result;
  if ((~result & 0xF000000000000007) != 0)
  {
    unint64_t result = XMLPlistMap.offset(after:)(v3);
    unint64_t *v1 = result;
  }
  *a1 = v5;
  return result;
}

unsigned char *storeEnumTagSinglePayload for URL.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *_PlistDecoder.unwrapData<A>(from:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v6 = v5;
  uint64_t v41 = a5;
  uint64_t v42 = a3;
  v44[11] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *v5;
  uint64_t v40 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v38 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v43 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v38 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(v20 + 40))(a1, v19, v20, v16))
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v39 = v22;
    *uint64_t v22 = &type metadata for Data;
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
    v23(v18, v42, v12);
    v23(v14, (uint64_t)v18, v12);
    uint64_t v24 = v40;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v14, 1, a4) == 1)
    {
      uint64_t v25 = *(void (**)(char *, uint64_t))(v43 + 8);
      v25(v14, v12);
      _CodingPathNode.path.getter(a2);
      v25(v18, v12);
    }
    else
    {
      uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
      uint64_t v42 = v21;
      uint64_t v30 = v38;
      v29(v38, v14, a4);
      uint64_t v31 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v33 = v41;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v33;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v24 + 16))(boxed_opaque_existential_1, v30, a4);
      v44[0] = v31;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v18, v12);
      uint64_t v35 = v30;
      uint64_t v21 = v42;
      (*(void (**)(char *, uint64_t))(v24 + 8))(v35, a4);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v36 = v39;
    v44[0] = 0;
    v44[1] = 0xE000000000000000;
    char v28 = v44;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v36, *MEMORY[0x1E4FBBA80], v21);
    swift_willThrow();
  }
  else
  {
    uint64_t v26 = v6[3];
    uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 64);
    swift_unknownObjectRetain();
    char v28 = (void *)v27(a1, v26, a2, v42, a4, v41, v19, v20);
    swift_unknownObjectRelease();
  }
  return v28;
}

uint64_t protocol witness for static PlistDecodingFormat.container<A>(keyedBy:for:referencing:codingPathNode:) in conformance _XMLPlistDecodingFormat(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  return static _XMLPlistDecodingFormat.container<A>(keyedBy:for:referencing:codingPathNode:)(a1, *a2, a3, a4);
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapData<A>(from:in:for:_:) in conformance _BPlistDecodingFormat(unint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static _BPlistDecodingFormat.unwrapData<A>(from:in:for:_:)(*a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapData<A>(from:in:for:_:) in conformance _XMLPlistDecodingFormat(unint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static _XMLPlistDecodingFormat.unwrapData<A>(from:in:for:_:)(*a1, a2, a3, a4, a5, a6);
}

uint64_t static _XMLPlistDecodingFormat.unwrapData<A>(from:in:for:_:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return XMLPlistMap.Value.dataValue<A>(in:for:_:)(a2, a3, a4, a1, a5, a6);
}

uint64_t _PlistKeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v78 = a8;
  v90 = (uint64_t *)a5;
  uint64_t v91 = a3;
  uint64_t v95 = a4;
  uint64_t v101 = a2;
  uint64_t v77 = a1;
  uint64_t v76 = a9;
  uint64_t v83 = *(void *)(a6 - 8);
  uint64_t v96 = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v73 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v81 = *(void *)(v15 - 8);
  uint64_t v82 = v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v80 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v84 = (char *)&v72 - v18;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v21 = type metadata accessor for Optional();
  uint64_t v86 = *(void *)(v21 - 8);
  uint64_t v87 = v21;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v72 - v22;
  uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v25);
  v94 = (char *)&v72 - v26;
  uint64_t v88 = AssociatedConformanceWitness;
  uint64_t v27 = v95;
  uint64_t v79 = swift_getAssociatedTypeWitness();
  uint64_t v75 = *(void *)(v79 - 8);
  MEMORY[0x1F4188790](v79);
  uint64_t v74 = (char *)&v72 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  v93 = (char *)&v72 - v30;
  uint64_t v97 = a6;
  uint64_t v98 = a7;
  uint64_t v31 = v96;
  uint64_t v99 = v96;
  uint64_t v100 = a11;
  uint64_t v85 = type metadata accessor for _PlistKeyedDecodingContainer();
  uint64_t v92 = a6;
  uint64_t v32 = v31;
  uint64_t v33 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v27 + 16) && (unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v34), (v36 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v24 + 16))(v23, *(void *)(v27 + 56) + *(void *)(v24 + 72) * v35, AssociatedTypeWitness);
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v37 = 1;
  }
  uint64_t v38 = v94;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v23, v37, 1, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v23, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v86 + 8))(v23, v87);
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v40 = v39;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v101, (unint64_t)v90, v92, MetatypeMetadata, v40, v31);
    return swift_willThrow();
  }
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v38, v23, AssociatedTypeWitness);
  uint64_t v43 = v88;
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v88 + 80);
  swift_unknownObjectRetain();
  uint64_t v45 = swift_checkMetadataState();
  uint64_t v46 = v89;
  v44(v38, v45, v43);
  if (v46)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v38, AssociatedTypeWitness);
    return swift_unknownObjectRelease();
  }
  (*(void (**)(char *, uint64_t))(v24 + 8))(v38, AssociatedTypeWitness);
  swift_unknownObjectRelease();
  uint64_t v48 = v83;
  uint64_t v47 = v84;
  uint64_t v49 = v92;
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v84, v101, v92);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v47, 0, 1, v49);
  uint64_t v50 = v80;
  uint64_t v51 = v81;
  uint64_t v52 = v82;
  (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v80, v47, v82);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v50, 1, v49) == 1)
  {
    uint64_t v53 = v50;
    uint64_t v54 = *(void (**)(char *, uint64_t))(v51 + 8);
    v54(v47, v52);
    v54(v53, v52);
    unint64_t v55 = v90;
    swift_retain();
    uint64_t v56 = v91;
    uint64_t v57 = v79;
    uint64_t v58 = (uint64_t)v93;
    goto LABEL_17;
  }
  uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
  uint64_t v60 = v73;
  v59(v73, v50, v49);
  unint64_t v55 = (uint64_t *)swift_allocObject();
  v55[5] = v49;
  v55[6] = v32;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v55 + 2);
  v59((char *)boxed_opaque_existential_1, v60, v49);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v84, v52);
  unint64_t v62 = (unint64_t)v90;
  uint64_t v56 = v91;
  v55[7] = (uint64_t)v90;
  uint64_t v57 = v79;
  if (!(v62 >> 62))
  {
    uint64_t v63 = (uint64_t *)(v62 + 64);
    uint64_t v58 = (uint64_t)v93;
LABEL_15:
    uint64_t v64 = *v63;
    uint64_t result = swift_retain();
    uint64_t v65 = v64 + 1;
    if (__OFADD__(v64, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    goto LABEL_16;
  }
  uint64_t v58 = (uint64_t)v93;
  if (v62 >> 62 == 1)
  {
    uint64_t v63 = (uint64_t *)((v62 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_15;
  }
  uint64_t v65 = 1;
LABEL_16:
  v55[8] = v65;
LABEL_17:
  uint64_t v66 = *(void *)(v56 + 40);
  *(void *)(v56 + 40) = v55;
  uint64_t v67 = type metadata accessor for _PlistDecodingStorage();
  swift_retain();
  specialized _PlistDecodingStorage.push(container:)(v58, v67);
  _PlistDecoder.container<A>(keyedBy:)(v77, v78, a12, v76);
  *(void *)(v56 + 40) = v66;
  swift_retain();
  swift_release();
  uint64_t v68 = swift_bridgeObjectRetain();
  uint64_t v69 = MEMORY[0x185302620](v68, v57);
  uint64_t result = swift_bridgeObjectRelease();
  if (v69)
  {
    type metadata accessor for Array();
    swift_getWitnessTable();
    swift_getWitnessTable();
    long long v70 = v74;
    RangeReplaceableCollection<>.removeLast()();
    uint64_t v71 = *(void (**)(char *, uint64_t))(v75 + 8);
    v71(v70, v57);
    swift_release();
    v71(v93, v57);
    return swift_release();
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X7>, uint64_t *a5@<X8>, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(a7);
  uint64_t v29 = v13;
  __swift_instantiateConcreteTypeFromMangledName(a8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainerProtocol);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
    unint64_t v27 = 0;
    unint64_t v28 = 0xE000000000000000;
    _StringGuts.grow(_:)(64);
    unint64_t v14 = 0xD00000000000003DLL;
    uint64_t v15 = "Cannot get nested keyed container -- no value found for key \"";
  }
  else
  {
    uint64_t v29 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
    if ((swift_dynamicCast() & 1) == 0)
    {
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      unint64_t v27 = 0xD00000000000001DLL;
      unint64_t v28 = 0x80000001823B2190;
      v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      v21._countAndFlagsBits = 2238496;
      v21._object = (void *)0xE300000000000000;
      String.append(_:)(v21);
      v22._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      uint64_t v18 = 3025186;
      unint64_t v19 = 0xE300000000000000;
      goto LABEL_7;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
    unint64_t v27 = 0;
    unint64_t v28 = 0xE000000000000000;
    _StringGuts.grow(_:)(66);
    unint64_t v14 = 0xD00000000000003FLL;
    uint64_t v15 = "Cannot get nested unkeyed container -- no value found for key \"";
  }
  unint64_t v16 = (unint64_t)(v15 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v14);
  v17._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  uint64_t v18 = 34;
  unint64_t v19 = 0xE100000000000000;
LABEL_7:
  String.append(_:)(*(Swift::String *)&v18);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context));
  a5[3] = a3;
  a5[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  _CodingPathNode.path.getter(a2);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v24 = *MEMORY[0x1E4FBBA68];
  uint64_t v25 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 104))(a5, v24, v25);
}

uint64_t _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X7>, uint64_t *a5@<X8>, uint64_t a6)
{
  uint64_t v26 = a4;
  swift_getMetatypeMetadata();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainerProtocol);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
    unint64_t v24 = 0;
    unint64_t v25 = 0xE000000000000000;
    _StringGuts.grow(_:)(64);
    unint64_t v11 = 0xD00000000000003DLL;
    uint64_t v12 = "Cannot get nested keyed container -- no value found for key \"";
  }
  else
  {
    uint64_t v26 = a4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
    if (!swift_dynamicCast())
    {
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      unint64_t v24 = 0xD00000000000001DLL;
      unint64_t v25 = 0x80000001823B2190;
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._countAndFlagsBits = 2238496;
      v18._object = (void *)0xE300000000000000;
      String.append(_:)(v18);
      v19._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      uint64_t v15 = 3025186;
      unint64_t v16 = 0xE300000000000000;
      goto LABEL_7;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
    unint64_t v24 = 0;
    unint64_t v25 = 0xE000000000000000;
    _StringGuts.grow(_:)(66);
    unint64_t v11 = 0xD00000000000003FLL;
    uint64_t v12 = "Cannot get nested unkeyed container -- no value found for key \"";
  }
  unint64_t v13 = (unint64_t)(v12 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v11);
  v14._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  uint64_t v15 = 34;
  unint64_t v16 = 0xE100000000000000;
LABEL_7:
  String.append(_:)(*(Swift::String *)&v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context));
  a5[3] = a3;
  a5[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  _CodingPathNode.path.getter(a2);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v21 = *MEMORY[0x1E4FBBA68];
  uint64_t v22 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 104))(a5, v21, v22);
}

unsigned char *storeEnumTagSinglePayload for TimeZone.DaylightSavingTimePolicy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t NSKVOPendingNotificationStackIdentifierHash(uint64_t a1)
{
  v12[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 8), "hash", *(void *)a1);
  LODWORD(result) = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  v12[1] = v2;
  v12[2] = v4;
  uint64_t v5 = (unsigned __int8 *)v12 + 3;
  for (unint64_t i = 28; i > 7; i -= 4)
  {
    unsigned int v7 = *(v5 - 3) + 16 * result;
    unsigned int v8 = *(v5 - 2) + 16 * (v7 ^ (16 * (v7 >> 28)));
    unsigned int v9 = *(v5 - 1) + 16 * (v8 ^ (16 * (v8 >> 28)));
    int v10 = *v5;
    v5 += 4;
    int v11 = v10 + 16 * (v9 ^ (16 * (v9 >> 28)));
    uint64_t result = (v11 ^ ((v11 & 0xF0000000) >> 24)) & ~(v11 & 0xF0000000);
  }
  return result;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.Notation()
{
  return &type metadata for NumberFormatStyleConfiguration.Notation;
}

ValueMetadata *type metadata accessor for Date.ISO8601FormatStyle()
{
  return &type metadata for Date.ISO8601FormatStyle;
}

NSCompoundPredicate *invertPredicate(void *a1)
{
  if ((objc_opt_isKindOfClass() & 1) != 0 && ![a1 compoundPredicateType])
  {
    uint64_t v5 = objc_msgSend((id)objc_msgSend(a1, "subpredicates"), "objectAtIndex:", 0);
    return (NSCompoundPredicate *)v5;
  }
  else
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", a1, 0);
    int v3 = [[NSCompoundPredicate alloc] initWithType:0 subpredicates:v2];

    return v3;
  }
}

NSCompoundPredicate *buildANDPredicate(void *a1, void *a2)
{
  if ((objc_opt_isKindOfClass() & 1) != 0 && [a1 compoundPredicateType] == 1)
  {
    if ((objc_opt_isKindOfClass() & 1) == 0 || [a2 compoundPredicateType] != 1)
    {
      uint64_t v5 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithArray:", objc_msgSend(a1, "subpredicates"));
      [v5 addObject:a2];
      goto LABEL_13;
    }
    uint64_t v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithArray:", objc_msgSend(a1, "subpredicates"));
  }
  else
  {
    if ((objc_opt_isKindOfClass() & 1) == 0 || [a2 compoundPredicateType] != 1)
    {
      uint64_t v5 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", a1, a2, 0);
      goto LABEL_13;
    }
    uint64_t v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithObjects:", a1, 0);
  }
  uint64_t v5 = (void *)v4;
  uint64_t v6 = [a2 subpredicates];
  if (v6) {
    [v5 addObjectsFromArray:v6];
  }
LABEL_13:
  unsigned int v7 = [[NSCompoundPredicate alloc] initWithType:1 subpredicates:v5];

  return v7;
}

NSComparisonPredicate *HandleStringAggregatePredicate(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a3)
  {
    unsigned int v8 = [a3 rangeOfString:@"c" options:1] != 0x7FFFFFFFFFFFFFFFLL;
    if ([a3 rangeOfString:@"d" options:1] != 0x7FFFFFFFFFFFFFFFLL) {
      v8 |= 2u;
    }
    if ([a3 rangeOfString:@"n" options:1] != 0x7FFFFFFFFFFFFFFFLL) {
      v8 |= 4u;
    }
    if ([a3 rangeOfString:@"l" options:1] != 0x7FFFFFFFFFFFFFFFLL) {
      v8 |= 8u;
    }
    if ([a3 rangeOfString:@"w" options:1] == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = v8 | 0x10;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  id v10 = +[NSPredicateOperator _newOperatorWithType:a2 modifier:0 options:v9];
  int v11 = [[NSComparisonPredicate alloc] initWithPredicateOperator:v10 leftExpression:a1 rightExpression:a4];

  return v11;
}

void sub_18183DDCC(_Unwind_Exception *a1)
{
}

void sub_18183DDEC(void *a1)
{
}

void sub_18183EBE8(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18183E968);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18183EF2C()
{
}

void sub_18183F558(_Unwind_Exception *a1)
{
}

void sub_18183F584(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __CFString *a12, NSString *a13, __CFString *a14, uint64_t a15)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v17 = objc_begin_catch(exc_buf);
      if (v15)
      {
        Swift::String v18 = v17;
        a11 = 0;
        if ((objc_opt_isKindOfClass() & 1) != 0
          && (objc_msgSend(v16, "__categorizeException:intoError:", v18, &a11), a11))
        {
          a14 = @"NSUnderlyingError";
          a15 = a11;
          Swift::String v19 = &a14;
          Swift::String v20 = &a15;
        }
        else
        {
          a12 = @"NSDebugDescription";
          [v18 debugDescription];
          a13 = +[NSString stringWithFormat:@"Caught exception during archival: %@"];
          Swift::String v19 = &a12;
          Swift::String v20 = (uint64_t *)&a13;
        }
        *uint64_t v15 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 4866, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v20 forKeys:v19 count:1]);
      }
      objc_end_catch();
      JUMPOUT(0x18183F508);
    }
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18183F50CLL);
  }
  JUMPOUT(0x18183F578);
}

uint64_t specialized NSCoder.decodeObject<A>(of:forKey:)(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  type metadata accessor for NSMorphologyPronoun(0, a3);
  ObjCClassFromMetadata = (const char *)swift_getObjCClassFromMetadata();
  uint64_t v5 = String._bridgeToObjectiveCImpl()();
  id v6 = (id)__NSCoderDecodeObjectOfClassForKey(v3, ObjCClassFromMetadata, v5, 0);
  swift_unknownObjectRelease();
  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v9 = 0u;
    long long v10 = 0u;
  }
  outlined init with take of LocalePreferences?((uint64_t)&v9, (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for Any?);
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)&v9, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (*((void *)&v10 + 1))
  {
    if (swift_dynamicCast()) {
      return v8;
    }
    else {
      return 0;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v9, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
}

uint64_t NSCoder.decodeObject<A>(of:forKey:)()
{
  ObjCClassFromMetadata = (const char *)swift_getObjCClassFromMetadata();
  uint64_t v2 = String._bridgeToObjectiveCImpl()();
  id v3 = (id)__NSCoderDecodeObjectOfClassForKey(v0, ObjCClassFromMetadata, v2, 0);
  swift_unknownObjectRelease();
  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v6 = 0u;
    long long v7 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v6, (uint64_t)v8);
  outlined init with take of Any?((uint64_t)v8, (uint64_t)&v6);
  if (*((void *)&v7 + 1))
  {
    if (swift_dynamicCast()) {
      return v5;
    }
    else {
      return 0;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v6, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
}

uint64_t __NSCoderDecodeObjectOfClassForKey(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (a4) {
    return objc_msgSend(a1, "decodeTopLevelObjectOfClass:forKey:error:", a2, a3);
  }
  else {
    return [a1 decodeObjectOfClass:a2 forKey:a3];
  }
}

uint64_t ICUNumberFormatterBase.FormatResult.__deallocating_deinit()
{
  unumf_closeResult();

  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  return &type metadata for Date.ISO8601FormatStyle.TimeZoneSeparator;
}

ValueMetadata *type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator()
{
  return &type metadata for Date.ISO8601FormatStyle.TimeSeparator;
}

ValueMetadata *type metadata accessor for Date.ISO8601FormatStyle.DateSeparator()
{
  return &type metadata for Date.ISO8601FormatStyle.DateSeparator;
}

ValueMetadata *type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator()
{
  return &type metadata for Date.ISO8601FormatStyle.DateTimeSeparator;
}

uint64_t URLQueryItem.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IntegerFormatStyle.notation(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  uint64_t v7 = a3 + *(int *)(a2 + 36);
  uint64_t result = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  *(unsigned char *)(v7 + *(int *)(result + 44)) = v6;
  return result;
}

__n128 IntegerFormatStyle.precision(_:)@<Q0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v11 = a1[1];
  long long v12 = *a1;
  __n128 v10 = (__n128)a1[2];
  uint64_t v6 = *((void *)a1 + 6);
  char v7 = *((unsigned char *)a1 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  uint64_t v8 = a3 + *(int *)(a2 + 36);
  *(_OWORD *)(v8 + 16) = v12;
  *(_OWORD *)(v8 + 32) = v11;
  __n128 result = v10;
  *(__n128 *)(v8 + 48) = v10;
  *(void *)(v8 + 64) = v6;
  *(unsigned char *)(v8 + 72) = v7;
  return result;
}

_OWORD *initializeWithCopy for IntegerFormatStyle(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  v5[8] = *((unsigned char *)a2 + v4 + 8);
  *(void *)uint64_t v5 = *(void *)((char *)a2 + v4);
  *(_OWORD *)(v5 + 57) = *(_OWORD *)((char *)a2 + v4 + 57);
  long long v7 = *(_OWORD *)((char *)a2 + v4 + 48);
  long long v8 = *(_OWORD *)((char *)a2 + v4 + 16);
  *((_OWORD *)v5 + 2) = *(_OWORD *)((char *)a2 + v4 + 32);
  *((_OWORD *)v5 + 3) = v7;
  *((_OWORD *)v5 + 1) = v8;
  v5[73] = *((unsigned char *)a2 + v4 + 73);
  *((_WORD *)v5 + 37) = *(_WORD *)((char *)a2 + v4 + 74);
  v5[76] = *((unsigned char *)a2 + v4 + 76);
  v5[77] = *((unsigned char *)a2 + v4 + 77);
  long long v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v10 = v9[9];
  long long v11 = &v5[v10];
  long long v12 = &v6[v10];
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  swift_unknownObjectRetain();
  if (v15(v12, 1, v13))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v17 = v9[10];
  Swift::String v18 = &v5[v17];
  Swift::String v19 = &v6[v17];
  *(void *)Swift::String v18 = *(void *)v19;
  v18[8] = v19[8];
  v5[v9[11]] = v6[v9[11]];
  return a1;
}

uint64_t URLComponents._URLComponents.percentEncodedUser.getter()
{
  if (*(void *)(v0 + 48))
  {
    uint64_t v1 = *(void *)(v0 + 40);
  }
  else
  {
    if (*(unsigned char *)(v0 + 10))
    {
      outlined init with take of LocalePreferences?(v0, (uint64_t)v7, &demangling cache variable for type metadata for URLParseInfo?);
      outlined init with take of LocalePreferences?((uint64_t)v7, (uint64_t)&v8, &demangling cache variable for type metadata for URLParseInfo?);
      if (v8)
      {
        if ((*(unsigned char *)(v8 + 72) & 1) == 0)
        {
          uint64_t v2 = String.subscript.getter();
          uint64_t v1 = MEMORY[0x185301F50](v2);
          swift_bridgeObjectRelease();
          goto LABEL_13;
        }
      }
    }
    outlined init with take of LocalePreferences?(v0 + 56, (uint64_t)v6, &demangling cache variable for type metadata for String?);
    outlined init with take of LocalePreferences?((uint64_t)v6, (uint64_t)v9, &demangling cache variable for type metadata for String?);
    if (!v10)
    {
      if ((*(unsigned char *)(v0 + 11) & 1) == 0
        || (outlined init with take of LocalePreferences?(v0, (uint64_t)&v5, &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)&v5, (uint64_t)&v11, &demangling cache variable for type metadata for URLParseInfo?), !v11)|| (*(unsigned char *)(v11 + 96) & 1) != 0)
      {
        uint64_t v1 = 0;
        goto LABEL_13;
      }
      uint64_t v4 = String.subscript.getter();
      MEMORY[0x185301F50](v4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v1 = 0;
  }
LABEL_13:
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v6 = v4;
  uint64_t v9 = a3(0);
  MEMORY[0x1F4188790](v9);
  long long v12 = (char *)&v57 - v11;
  uint64_t v13 = v6 + 64;
  uint64_t v14 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v15 = a2 & ~v14;
  if (((*(void *)(v6 + 64 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
    return v15;
  }
  uint64_t v16 = ~v14;
  uint64_t v17 = *(void *)(v10 + 72);
  uint64_t v89 = ~v14;
  uint64_t v90 = v17;
  uint64_t v88 = &v128;
  while (1)
  {
    outlined init with copy of ICUNumberFormatter.Signature(*(void *)(v6 + 48) + v90 * v15, (uint64_t)v12, a4);
    specialized static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((uint64_t)v12, a1);
    if ((v18 & 1) == 0) {
      goto LABEL_6;
    }
    uint64_t v19 = *(int *)(v9 + 20);
    uint64_t v20 = *(void *)&v12[v19];
    uint64_t v21 = *(void *)&v12[v19 + 8];
    uint64_t v22 = (void *)(a1 + v19);
    BOOL v23 = v20 == *v22 && v21 == v22[1];
    if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_6;
    }
    outlined init with take of LocalePreferences?((uint64_t)&v12[*(int *)(v9 + 24)], (uint64_t)v129, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?(a1 + *(int *)(v9 + 24), (uint64_t)v130, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v129, (uint64_t)v131, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v131) == 1)
    {
      outlined init with take of LocalePreferences?((uint64_t)v130, (uint64_t)v127, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v127) == 1) {
        goto LABEL_150;
      }
      goto LABEL_4;
    }
    outlined init with take of LocalePreferences?((uint64_t)v129, (uint64_t)&v119, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v130, (uint64_t)v127, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v127) != 1) {
      break;
    }
    v91[6] = v125;
    v92[0] = v126[0];
    *(_OWORD *)((char *)v92 + 12) = *(_OWORD *)((char *)v126 + 12);
    v91[2] = v121;
    v91[3] = v122;
    v91[4] = v123;
    v91[5] = v124;
    v91[0] = v119;
    v91[1] = v120;
    outlined init with take of LocalePreferences?((uint64_t)v129, (uint64_t)v93, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v129, (uint64_t)&v98, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences(&v98);
    outlined retain of LocalePreferences(v93);
    outlined release of LocalePreferences(v91);
LABEL_4:
    outlined init with take of LocalePreferences?((uint64_t)v129, (uint64_t)v127, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v130, (uint64_t)v88, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v130, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    outlined release of (LocalePreferences?, LocalePreferences?)((uint64_t)v127);
LABEL_5:
    uint64_t v16 = v89;
LABEL_6:
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v12, a4);
    unint64_t v15 = (v15 + 1) & v16;
    if (((*(void *)(v13 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
      return v15;
    }
  }
  outlined init with take of LocalePreferences?((uint64_t)v130, (uint64_t)&v98, &demangling cache variable for type metadata for LocalePreferences?);
  unint64_t v24 = (uint64_t *)*((void *)&v119 + 1);
  uint64_t v87 = *((void *)&v120 + 1);
  uint64_t v83 = v121;
  uint64_t v85 = v120;
  uint64_t v86 = *((void *)&v121 + 1);
  uint64_t v84 = v122;
  id v80 = (id)v123;
  uint64_t v81 = *((void *)&v122 + 1);
  id v78 = (id)v124;
  id v79 = (id)*((void *)&v123 + 1);
  id v76 = (id)v125;
  id v77 = (id)*((void *)&v124 + 1);
  uint64_t v74 = *(void *)&v126[0];
  uint64_t v75 = *((void *)&v125 + 1);
  uint64_t v72 = *((void *)&v126[0] + 1);
  uint64_t v73 = *(void *)&v126[1];
  int v70 = BYTE9(v126[1]);
  int v71 = BYTE8(v126[1]);
  int v67 = BYTE11(v126[1]);
  int v68 = BYTE10(v126[1]);
  int v69 = v119;
  uint64_t v82 = (uint64_t *)*((void *)&v119 + 1);
  if (v119 != 2)
  {
    if v98 != 2 && ((((v119 & 1) == 0) ^ v98)) {
      goto LABEL_21;
    }
LABEL_35:
    outlined init with take of LocalePreferences?((uint64_t)v129, (uint64_t)v91, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v129, (uint64_t)v93, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences(v93);
    uint64_t v34 = v91;
    goto LABEL_36;
  }
  if (v98 != 2) {
    goto LABEL_35;
  }
LABEL_21:
  uint64_t v25 = (uint64_t)v99;
  if (!*((void *)&v119 + 1))
  {
    uint64_t v65 = v13;
    uint64_t v66 = v6;
    if (v99)
    {
      outlined init with take of LocalePreferences?((uint64_t)v129, (uint64_t)v91, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v129, (uint64_t)v93, &demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences(v93);
      unint64_t v35 = v91;
LABEL_42:
      outlined retain of LocalePreferences(v35);
      goto LABEL_43;
    }
LABEL_55:
    if (v87)
    {
      uint64_t v13 = v65;
      uint64_t v6 = v66;
      if (!v101 || (v85 != v100 || v87 != v101) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_85;
      }
    }
    else
    {
      uint64_t v13 = v65;
      uint64_t v6 = v66;
      if (v101) {
        goto LABEL_85;
      }
    }
    if (v86)
    {
      if (!v103 || (v83 != v102 || v86 != v103) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_85;
      }
    }
    else if (v103)
    {
      goto LABEL_85;
    }
    if (v84)
    {
      if (!v104 || (specialized static Dictionary<>.== infix(_:_:)(v84, v104) & 1) == 0) {
        goto LABEL_85;
      }
    }
    else if (v104)
    {
      goto LABEL_85;
    }
    if (v81)
    {
      if (!v105 || (specialized static Dictionary<>.== infix(_:_:)(v81, v105) & 1) == 0) {
        goto LABEL_85;
      }
    }
    else if (v105)
    {
      goto LABEL_85;
    }
    if (!v80)
    {
      id v62 = v108;
      id v63 = v107;
      id v60 = v110;
      uint64_t v61 = v109;
      id v64 = v106;
      outlined retain of LocalePreferences?((uint64_t)v129, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v129, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      if (v64) {
        goto LABEL_37;
      }
      outlined retain of LocalePreferences?((uint64_t)v130, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      goto LABEL_88;
    }
    if (v106)
    {
      id v62 = v108;
      id v63 = v107;
      id v60 = v110;
      uint64_t v61 = v109;
      id v64 = v106;
      type metadata accessor for CFDictionaryRef(0);
      id v59 = v39;
      outlined retain of LocalePreferences?((uint64_t)v129, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v129, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v130, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      id v58 = (id)lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v64 = v64;
      id v57 = v80;
      char v40 = static _CFObject.== infix(_:_:)();

      if ((v40 & 1) == 0) {
        goto LABEL_101;
      }
LABEL_88:
      if (v79)
      {
        if (!v63) {
          goto LABEL_101;
        }
        id v41 = v63;
        type metadata accessor for CFDictionaryRef(0);
        id v64 = v42;
        id v59 = (id)lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        id v63 = v41;
        id v58 = v79;
        LOBYTE(v41) = static _CFObject.== infix(_:_:)();

        if ((v41 & 1) == 0) {
          goto LABEL_101;
        }
      }
      else if (v63)
      {
        goto LABEL_101;
      }
      if (v78)
      {
        uint64_t v25 = (uint64_t)v62;
        if (!v62)
        {
          outlined retain of LocalePreferences?((uint64_t)v130, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
          goto LABEL_38;
        }
        type metadata accessor for CFDictionaryRef(0);
        id v64 = v43;
        id v63 = (id)lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        id v62 = (id)v25;
        id v59 = v78;
        char v44 = static _CFObject.== infix(_:_:)();

        if (v44)
        {
LABEL_96:
          uint64_t v65 = v13;
          uint64_t v66 = v6;
          if (v77)
          {
            uint64_t v45 = v61;
            if (!v61) {
              goto LABEL_135;
            }
            type metadata accessor for CFDictionaryRef(0);
            id v64 = (id)lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            id v46 = v45;
            id v47 = v77;
            char v48 = static _CFObject.== infix(_:_:)();

            if ((v48 & 1) == 0) {
              goto LABEL_135;
            }
          }
          else if (v61)
          {
            goto LABEL_135;
          }
          if (v76)
          {
            if (!v60) {
              goto LABEL_135;
            }
            type metadata accessor for CFDictionaryRef(0);
            id v64 = (id)lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            id v49 = v60;
            id v50 = v76;
            char v51 = static _CFObject.== infix(_:_:)();

            if ((v51 & 1) == 0) {
              goto LABEL_135;
            }
          }
          else if (v60)
          {
            goto LABEL_135;
          }
          uint64_t v25 = v111;
          if (v75)
          {
            if (!v111) {
              goto LABEL_118;
            }
            swift_bridgeObjectRetain();
            uint64_t v52 = swift_bridgeObjectRetain();
            char v53 = specialized static Dictionary<>.== infix(_:_:)(v52, v25);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v53 & 1) == 0) {
              goto LABEL_135;
            }
          }
          else if (v111)
          {
            goto LABEL_135;
          }
          uint64_t v25 = v112;
          if (!v74)
          {
            if (v112) {
              goto LABEL_135;
            }
LABEL_120:
            if (v73)
            {
              if (!v114 || (v72 != v113 || v73 != v114) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              {
LABEL_135:
                uint64_t v38 = outlined consume of LocalePreferences?;
                uint64_t v37 = v130;
LABEL_54:
                outlined retain of LocalePreferences?((uint64_t)v37, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))v38);
                goto LABEL_43;
              }
            }
            else if (v114)
            {
              goto LABEL_135;
            }
            if (v71 == 2)
            {
              if (v115 != 2) {
                goto LABEL_135;
              }
            }
            else if (v115 == 2 || ((v115 ^ v71) & 1) != 0)
            {
              goto LABEL_135;
            }
            int v56 = v116;
            if (v70 == 2)
            {
              outlined retain of LocalePreferences?((uint64_t)v130, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              if (v56 == 2) {
                goto LABEL_138;
              }
            }
            else
            {
              outlined retain of LocalePreferences?((uint64_t)v130, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              if (v56 != 2 && ((v56 ^ v70) & 1) == 0)
              {
LABEL_138:
                if (v68 == 2)
                {
                  uint64_t v13 = v65;
                  uint64_t v6 = v66;
                  if (v117 != 2) {
                    goto LABEL_37;
                  }
                }
                else
                {
                  LOBYTE(v25) = 0;
                  if (v117 == 2) {
                    goto LABEL_44;
                  }
                  uint64_t v13 = v65;
                  uint64_t v6 = v66;
                  if (((((v68 & 1) == 0) ^ v117) & 1) == 0) {
                    goto LABEL_38;
                  }
                }
                if (v67 == 2)
                {
                  if (v118 != 2) {
                    goto LABEL_37;
                  }
                  goto LABEL_148;
                }
                LOBYTE(v25) = 0;
                if (v118 != 2 && ((((v67 & 1) == 0) ^ v118) & 1) != 0) {
LABEL_148:
                }
                  LOBYTE(v25) = 1;
LABEL_38:
                LOBYTE(v93[0]) = v69;
                v93[1] = v82;
                v93[2] = v85;
                v93[3] = v87;
                v93[4] = v83;
                v93[5] = v86;
                v93[6] = v84;
                v93[7] = v81;
                v93[8] = v80;
                v93[9] = v79;
                v93[10] = v78;
                v93[11] = v77;
                v93[12] = v76;
                v93[13] = v75;
                v93[14] = v74;
                v93[15] = v72;
                v93[16] = v73;
                char v94 = v71;
                char v95 = v70;
                char v96 = v68;
                char v97 = v67;
                outlined release of LocalePreferences(v93);
                outlined retain of LocalePreferences?((uint64_t)v129, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                if (v25)
                {
LABEL_150:
                  outlined destroy of ICUNumberFormatter.Signature((uint64_t)v12, a4);
                  return v15;
                }
                goto LABEL_5;
              }
            }
LABEL_43:
            LOBYTE(v25) = 0;
LABEL_44:
            uint64_t v13 = v65;
            uint64_t v6 = v66;
            goto LABEL_38;
          }
          if (v112)
          {
            swift_bridgeObjectRetain();
            uint64_t v54 = swift_bridgeObjectRetain();
            char v55 = specialized static Dictionary<>.== infix(_:_:)(v54, v25);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v55 & 1) == 0) {
              goto LABEL_135;
            }
            goto LABEL_120;
          }
LABEL_118:
          outlined retain of LocalePreferences?((uint64_t)v130, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
          goto LABEL_44;
        }
      }
      else if (!v62)
      {
        goto LABEL_96;
      }
LABEL_101:
      outlined retain of LocalePreferences?((uint64_t)v130, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
      goto LABEL_37;
    }
LABEL_85:
    outlined retain of LocalePreferences?((uint64_t)v129, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v129, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    goto LABEL_37;
  }
  if (!v99)
  {
    outlined init with take of LocalePreferences?((uint64_t)v129, (uint64_t)v91, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v129, (uint64_t)v93, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences(v93);
    outlined retain of LocalePreferences(v91);
    goto LABEL_38;
  }
  uint64_t v26 = *(void *)(*((void *)&v119 + 1) + 16);
  if (v26 != v99[2])
  {
    outlined init with take of LocalePreferences?((uint64_t)v129, (uint64_t)v93, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v129, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    uint64_t v34 = v93;
LABEL_36:
    outlined retain of LocalePreferences(v34);
LABEL_37:
    LOBYTE(v25) = 0;
    goto LABEL_38;
  }
  uint64_t v65 = v13;
  uint64_t v66 = v6;
  if (!v26 || *((void **)&v119 + 1) == v99) {
    goto LABEL_55;
  }
  if (*(void *)(*((void *)&v119 + 1) + 32) != v99[4] || *(void *)(*((void *)&v119 + 1) + 40) != v99[5])
  {
    uint64_t v27 = v26;
    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v26 = v27;
    unint64_t v24 = v82;
    if ((v28 & 1) == 0) {
      goto LABEL_74;
    }
  }
  if (v26 == 1) {
    goto LABEL_55;
  }
  uint64_t result = v24[6];
  if (result != *(void *)(v25 + 48) || v24[7] != *(void *)(v25 + 56))
  {
    uint64_t v30 = v26;
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v26 = v30;
    unint64_t v24 = v82;
    if ((result & 1) == 0)
    {
LABEL_74:
      outlined init with take of LocalePreferences?((uint64_t)v129, (uint64_t)v93, &demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v129, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      unint64_t v35 = v93;
      goto LABEL_42;
    }
  }
  uint64_t v31 = v26 - 2;
  if (v26 == 2) {
    goto LABEL_55;
  }
  uint64_t v32 = (void *)(v25 + 72);
  uint64_t v33 = v24 + 9;
  while (v31)
  {
    uint64_t result = *(v33 - 1);
    if (result != *(v32 - 1) || *v33 != *v32)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        outlined retain of LocalePreferences?((uint64_t)v129, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        uint64_t v37 = v129;
        uint64_t v38 = outlined copy of LocalePreferences?;
        goto LABEL_54;
      }
    }
    v32 += 2;
    v33 += 2;
    if (!--v31) {
      goto LABEL_55;
    }
  }
  __break(1u);
  return result;
}

uint64_t outlined destroy of ICUNumberFormatter.Signature(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for ICUNumberFormatter.Signature(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for ICUNumberFormatter.Signature);
}

uint64_t destroy for ICUNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(type metadata accessor for NumberFormatStyleConfiguration.Collection(0) + 36);
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t result = *(void *)(v7 + 8);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for NumberFormatStyleConfiguration.Collection(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, type metadata singleton initialization cache for NumberFormatStyleConfiguration.Collection);
}

uint64_t closure #1 in LocaleCache.fixedNSLocale(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  char v4 = v3;
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  outlined init with take of LocalePreferences?(a2 + 32, (uint64_t)v66);
  *(void *)&long long v67 = v9;
  *((void *)&v67 + 1) = v8;
  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v68);
  v64[6] = v68[5];
  v64[7] = v68[6];
  v65[0] = v69[0];
  *(_OWORD *)((char *)v65 + 12) = *(_OWORD *)((char *)v69 + 12);
  v64[2] = v68[1];
  v64[3] = v68[2];
  v64[4] = v68[3];
  v64[5] = v68[4];
  v64[0] = v67;
  v64[1] = v68[0];
  uint64_t v10 = *(void *)(a1 + 80);
  uint64_t v11 = *(void *)(v10 + 16);
  swift_bridgeObjectRetain();
  outlined retain of LocalePreferences?((uint64_t)v66, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  if (v11)
  {
    outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v67);
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)((unint64_t *)v64);
    if (v13)
    {
      id v14 = *(id *)(*(void *)(v10 + 56) + 8 * v12);
      outlined release of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v67);
      uint64_t result = outlined release of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v67);
LABEL_51:
      *a3 = v14;
      return result;
    }
    outlined release of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v67);
  }
  uint64_t v16 = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating(&lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU, (void (*)(uint64_t))type metadata accessor for _LocaleICU);
  uint64_t v17 = (objc_class *)type metadata accessor for _NSSwiftLocale();
  char v18 = objc_allocWithZone(v17);
  uint64_t v19 = OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling;
  uint64_t v20 = &v18[OBJC_IVAR____NSSwiftLocale_locale];
  *uint64_t v20 = a2;
  v20[1] = v16;
  v18[v19] = 2;
  uint64_t v21 = String._bridgeToObjectiveCImpl()();
  v63.receiver = v18;
  v63.super_class = v17;
  swift_retain_n();
  id v22 = objc_msgSendSuper2(&v63, sel_initWithLocaleIdentifier_, v21);
  swift_unknownObjectRelease();
  outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v67);
  id v14 = v22;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v70 = *(void *)(a1 + 80);
  uint64_t v24 = v70;
  *(void *)(a1 + 80) = 0x8000000000000000;
  unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)((unint64_t *)v64);
  uint64_t v27 = *(void *)(v24 + 16);
  BOOL v28 = (v25 & 1) == 0;
  uint64_t v29 = v27 + v28;
  if (__OFADD__(v27, v28))
  {
    __break(1u);
  }
  else
  {
    char v4 = v25;
    if (*(void *)(v24 + 24) < v29)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v29, isUniquelyReferenced_nonNull_native);
      uint64_t v30 = v70;
      unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)((unint64_t *)v64);
      if ((v4 & 1) != (v32 & 1)) {
        goto LABEL_54;
      }
      unint64_t v26 = v31;
      if ((v4 & 1) == 0) {
        goto LABEL_49;
      }
LABEL_12:
      uint64_t v33 = *(void *)(v30 + 56);

      *(void *)(v33 + 8 * v26) = v14;
LABEL_50:
      *(void *)(a1 + 80) = v30;
      swift_bridgeObjectRelease();
      outlined release of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v67);
      outlined release of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v67);
      uint64_t result = swift_release();
      goto LABEL_51;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v30 = v24;
      if (v25) {
        goto LABEL_12;
      }
LABEL_49:
      specialized _NativeDictionary._insert(at:key:value:)(v26, v64, (uint64_t)v14, (void *)v30);
      outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v67);
      goto LABEL_50;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<LocaleCache.State.IdentifierAndPrefs, _NSSwiftLocale>);
  uint64_t v34 = static _DictionaryStorage.copy(original:)();
  uint64_t v30 = v34;
  if (!*(void *)(v24 + 16))
  {
LABEL_48:
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_12;
    }
    goto LABEL_49;
  }
  unint64_t v35 = (void *)(v34 + 64);
  unint64_t v36 = (unint64_t)((1 << *(unsigned char *)(v30 + 32)) + 63) >> 6;
  if (v30 != v24 || (unint64_t)v35 >= v24 + 64 + 8 * v36) {
    memmove(v35, (const void *)(v24 + 64), 8 * v36);
  }
  int64_t v37 = 0;
  *(void *)(v30 + 16) = *(void *)(v24 + 16);
  uint64_t v38 = 1 << *(unsigned char *)(v24 + 32);
  uint64_t v39 = -1;
  if (v38 < 64) {
    uint64_t v39 = ~(-1 << v38);
  }
  unint64_t v40 = v39 & *(void *)(v24 + 64);
  uint64_t v56 = v24 + 64;
  int64_t v57 = (unint64_t)(v38 + 63) >> 6;
  while (1)
  {
    if (v40)
    {
      uint64_t v59 = (v40 - 1) & v40;
      int64_t v60 = v37;
      unint64_t v41 = __clz(__rbit64(v40)) | (v37 << 6);
      goto LABEL_22;
    }
    int64_t v52 = v37 + 1;
    if (__OFADD__(v37, 1))
    {
      __break(1u);
      goto LABEL_53;
    }
    if (v52 >= v57) {
      goto LABEL_48;
    }
    unint64_t v53 = *(void *)(v56 + 8 * v52);
    int64_t v54 = v37 + 1;
    if (!v53)
    {
      int64_t v54 = v37 + 2;
      if (v37 + 2 >= v57) {
        goto LABEL_48;
      }
      unint64_t v53 = *(void *)(v56 + 8 * v54);
      if (!v53)
      {
        int64_t v54 = v37 + 3;
        if (v37 + 3 >= v57) {
          goto LABEL_48;
        }
        unint64_t v53 = *(void *)(v56 + 8 * v54);
        if (!v53)
        {
          int64_t v54 = v37 + 4;
          if (v37 + 4 >= v57) {
            goto LABEL_48;
          }
          unint64_t v53 = *(void *)(v56 + 8 * v54);
          if (!v53)
          {
            int64_t v54 = v37 + 5;
            if (v37 + 5 >= v57) {
              goto LABEL_48;
            }
            unint64_t v53 = *(void *)(v56 + 8 * v54);
            if (!v53)
            {
              int64_t v54 = v37 + 6;
              if (v37 + 6 >= v57) {
                goto LABEL_48;
              }
              unint64_t v53 = *(void *)(v56 + 8 * v54);
              if (!v53)
              {
                int64_t v54 = v37 + 7;
                if (v37 + 7 >= v57) {
                  goto LABEL_48;
                }
                unint64_t v53 = *(void *)(v56 + 8 * v54);
                if (!v53)
                {
                  int64_t v54 = v37 + 8;
                  if (v37 + 8 >= v57) {
                    goto LABEL_48;
                  }
                  unint64_t v53 = *(void *)(v56 + 8 * v54);
                  if (!v53) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_47:
    uint64_t v59 = (v53 - 1) & v53;
    int64_t v60 = v54;
    unint64_t v41 = __clz(__rbit64(v53)) + (v54 << 6);
LABEL_22:
    uint64_t v42 = (_OWORD *)(*(void *)(v24 + 48) + 160 * v41);
    long long v43 = v42[2];
    long long v44 = v42[3];
    long long v45 = v42[5];
    v61[4] = v42[4];
    v61[5] = v45;
    v61[3] = v44;
    long long v46 = v42[6];
    long long v47 = v42[7];
    long long v48 = v42[8];
    *(_OWORD *)&v62[12] = *(_OWORD *)((char *)v42 + 140);
    v61[7] = v47;
    *(_OWORD *)id v62 = v48;
    v61[6] = v46;
    long long v49 = v42[1];
    v61[0] = *v42;
    v61[1] = v49;
    v61[2] = v43;
    uint64_t v58 = 8 * v41;
    id v50 = *(void **)(*(void *)(v24 + 56) + 8 * v41);
    memmove((void *)(*(void *)(v30 + 48) + 160 * v41), v42, 0x9CuLL);
    *(void *)(*(void *)(v30 + 56) + v58) = v50;
    outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)v61);
    id v51 = v50;
    unint64_t v40 = v59;
    int64_t v37 = v60;
  }
  uint64_t v55 = v37 + 9;
  if (v37 + 9 >= v57) {
    goto LABEL_48;
  }
  unint64_t v53 = *(void *)(v56 + 8 * v55);
  if (v53)
  {
    int64_t v54 = v37 + 9;
    goto LABEL_47;
  }
  while (1)
  {
    int64_t v54 = v55 + 1;
    if (__OFADD__(v55, 1)) {
      break;
    }
    if (v54 >= v57) {
      goto LABEL_48;
    }
    unint64_t v53 = *(void *)(v56 + 8 * v54);
    ++v55;
    if (v53) {
      goto LABEL_47;
    }
  }
LABEL_53:
  __break(1u);
LABEL_54:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined release of LocaleCache.State.IdentifierAndPrefs(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  long long v12 = *(_OWORD *)(a1 + 80);
  long long v10 = *(_OWORD *)(a1 + 112);
  long long v11 = *(_OWORD *)(a1 + 96);
  swift_bridgeObjectRelease();
  outlined consume of LocalePreferences?(v13, v2, v3, v4, v5, v6, v7, v8, (void *)v12, *((void **)&v12 + 1), (void *)v11, *((void **)&v11 + 1), (void *)v10);
  return a1;
}

uint64_t outlined retain of LocaleCache.State.IdentifierAndPrefs(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  long long v12 = *(_OWORD *)(a1 + 80);
  long long v10 = *(_OWORD *)(a1 + 112);
  long long v11 = *(_OWORD *)(a1 + 96);
  swift_bridgeObjectRetain();
  outlined copy of LocalePreferences?(v13, v2, v3, v4, v5, v6, v7, v8, (void *)v12, *((void **)&v12 + 1), (void *)v11, *((void **)&v11 + 1), (void *)v10);
  return a1;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unint64_t *a1)
{
  Hasher.init(_seed:)();
  outlined init with take of LocalePreferences?((uint64_t)(a1 + 2), (uint64_t)v56, &demangling cache variable for type metadata for LocalePreferences?);
  String.hash(into:)();
  outlined init with take of LocalePreferences?((uint64_t)v56, (uint64_t)v57, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v57) == 1)
  {
    Hasher._combine(_:)(0);
    goto LABEL_53;
  }
  outlined init with take of LocalePreferences?((uint64_t)v56, (uint64_t)v37, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v37[0] == 2)
  {
    Swift::UInt8 v2 = 0;
  }
  else
  {
    Swift::UInt8 v2 = v37[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v2);
  uint64_t v3 = v38;
  if (!v38)
  {
    Hasher._combine(_:)(0);
    uint64_t v8 = v37;
    goto LABEL_17;
  }
  Hasher._combine(_:)(1u);
  Swift::UInt v4 = *(void *)(v3 + 16);
  Hasher._combine(_:)(v4);
  if (!v4)
  {
    outlined init with take of LocalePreferences?((uint64_t)v56, (uint64_t)v36, &demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v8 = v36;
LABEL_17:
    outlined retain of LocalePreferences(v8);
    if (!v39) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
  outlined retain of LocalePreferences?((uint64_t)v56, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v5 = v3 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v5 += 16;
    --v4;
  }
  while (v4);
  swift_bridgeObjectRelease();
  if (!v39)
  {
LABEL_11:
    Hasher._combine(_:)(0);
    if (!v40) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v40)
  {
LABEL_12:
    Hasher._combine(_:)(0);
    uint64_t v6 = v41;
    if (!v41) {
      goto LABEL_13;
    }
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v55, v6);
    swift_bridgeObjectRelease();
    uint64_t v7 = v42;
    if (!v42) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v6 = v41;
  if (v41) {
    goto LABEL_20;
  }
LABEL_13:
  Hasher._combine(_:)(0);
  uint64_t v7 = v42;
  if (!v42)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v55, v7);
  swift_bridgeObjectRelease();
LABEL_22:
  long long v10 = v43;
  uint64_t v9 = v44;
  long long v12 = v45;
  long long v11 = v46;
  uint64_t v13 = v47;
  if (v43)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v14 = v9;
    id v15 = v12;
    id v16 = v11;
    id v17 = v13;
    id v18 = v10;
    _CFObject.hash(into:)();
    if (v9) {
      goto LABEL_24;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    id v23 = v13;
    id v24 = v9;
    id v25 = v12;
    id v26 = v11;
    if (v9)
    {
LABEL_24:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v19 = v9;
      _CFObject.hash(into:)();

      if (v12) {
        goto LABEL_25;
      }
      goto LABEL_30;
    }
  }
  Hasher._combine(_:)(0);
  if (v12)
  {
LABEL_25:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v20 = v12;
    _CFObject.hash(into:)();

    if (v11) {
      goto LABEL_26;
    }
LABEL_31:
    Hasher._combine(_:)(0);
    if (v13) {
      goto LABEL_27;
    }
    goto LABEL_32;
  }
LABEL_30:
  Hasher._combine(_:)(0);
  if (!v11) {
    goto LABEL_31;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  id v21 = v11;
  _CFObject.hash(into:)();

  if (v13)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v22 = v13;
    _CFObject.hash(into:)();

    goto LABEL_33;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  id v22 = 0;
LABEL_33:

  uint64_t v27 = v48;
  if (v27)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v55, v27);
    swift_bridgeObjectRelease();
    uint64_t v28 = v49;
    if (v49) {
      goto LABEL_35;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    if (v50) {
      goto LABEL_36;
    }
LABEL_39:
    Hasher._combine(_:)(0);
    goto LABEL_40;
  }
  Hasher._combine(_:)(0);
  uint64_t v28 = v49;
  if (!v49) {
    goto LABEL_38;
  }
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v55, v28);
  swift_bridgeObjectRelease();
  if (!v50) {
    goto LABEL_39;
  }
LABEL_36:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_40:
  if (v51 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v29 = v51 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v29);
  }
  if (v52 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v30 = v52 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v30);
  }
  if (v53 == 2)
  {
    Swift::UInt8 v31 = 0;
  }
  else
  {
    Swift::UInt8 v31 = v53 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v31);
  if (v54 == 2)
  {
    Swift::UInt8 v32 = 0;
  }
  else
  {
    Swift::UInt8 v33 = v54 & 1;
    Hasher._combine(_:)(1u);
    Swift::UInt8 v32 = v33;
  }
  Hasher._combine(_:)(v32);
  outlined retain of LocalePreferences?((uint64_t)v56, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_53:
  Swift::Int v34 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v34);
}

{
  Swift::UInt8 v2;
  uint64_t v3;
  Swift::UInt v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  Swift::UInt v29;
  Swift::UInt v30;
  Swift::UInt8 v31;
  Swift::UInt8 v32;
  Swift::UInt8 v33;
  Swift::Int v34;
  unsigned char v36[144];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  char v54;
  unsigned char v55[72];
  unsigned char v56[144];
  unsigned char v57[152];

  Hasher.init(_seed:)();
  outlined init with take of LocalePreferences?((uint64_t)(a1 + 4), (uint64_t)v56, &demangling cache variable for type metadata for LocalePreferences?);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v56, (uint64_t)v57, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v57) == 1)
  {
    Hasher._combine(_:)(0);
    goto LABEL_53;
  }
  outlined init with take of LocalePreferences?((uint64_t)v56, (uint64_t)&v37, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v37 == 2)
  {
    Swift::UInt8 v2 = 0;
  }
  else
  {
    Swift::UInt8 v2 = v37 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v2);
  uint64_t v3 = v38;
  if (!v38)
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v37);
    uint64_t v8 = &v37;
    goto LABEL_17;
  }
  Hasher._combine(_:)(1u);
  Swift::UInt v4 = *(void *)(v3 + 16);
  Hasher._combine(_:)(v4);
  if (!v4)
  {
    outlined init with take of LocalePreferences?((uint64_t)v56, (uint64_t)v36, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v56, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    uint64_t v8 = (uint64_t *)v36;
LABEL_17:
    outlined retain of LocalePreferences(v8);
    if (!v39) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
  outlined retain of LocalePreferences?((uint64_t)v56, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v56, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v5 = v3 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v5 += 16;
    --v4;
  }
  while (v4);
  swift_bridgeObjectRelease();
  if (!v39)
  {
LABEL_11:
    Hasher._combine(_:)(0);
    if (!v40) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v40)
  {
LABEL_12:
    Hasher._combine(_:)(0);
    uint64_t v6 = v41;
    if (!v41) {
      goto LABEL_13;
    }
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v55, v6);
    swift_bridgeObjectRelease();
    uint64_t v7 = v42;
    if (!v42) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v6 = v41;
  if (v41) {
    goto LABEL_20;
  }
LABEL_13:
  Hasher._combine(_:)(0);
  uint64_t v7 = v42;
  if (!v42)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v55, v7);
  swift_bridgeObjectRelease();
LABEL_22:
  long long v10 = v43;
  uint64_t v9 = v44;
  long long v12 = v45;
  long long v11 = v46;
  uint64_t v13 = v47;
  if (v43)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v14 = v9;
    id v15 = v12;
    id v16 = v11;
    id v17 = v13;
    id v18 = v10;
    _CFObject.hash(into:)();
    if (v9) {
      goto LABEL_24;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    id v23 = v13;
    id v24 = v9;
    id v25 = v12;
    id v26 = v11;
    if (v9)
    {
LABEL_24:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v19 = v9;
      _CFObject.hash(into:)();

      if (v12) {
        goto LABEL_25;
      }
      goto LABEL_30;
    }
  }
  Hasher._combine(_:)(0);
  if (v12)
  {
LABEL_25:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v20 = v12;
    _CFObject.hash(into:)();

    if (v11) {
      goto LABEL_26;
    }
LABEL_31:
    Hasher._combine(_:)(0);
    if (v13) {
      goto LABEL_27;
    }
    goto LABEL_32;
  }
LABEL_30:
  Hasher._combine(_:)(0);
  if (!v11) {
    goto LABEL_31;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  id v21 = v11;
  _CFObject.hash(into:)();

  if (v13)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v22 = v13;
    _CFObject.hash(into:)();

    goto LABEL_33;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  id v22 = 0;
LABEL_33:

  uint64_t v27 = v48;
  if (v27)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v55, v27);
    swift_bridgeObjectRelease();
    uint64_t v28 = v49;
    if (v49) {
      goto LABEL_35;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    if (v50) {
      goto LABEL_36;
    }
LABEL_39:
    Hasher._combine(_:)(0);
    goto LABEL_40;
  }
  Hasher._combine(_:)(0);
  uint64_t v28 = v49;
  if (!v49) {
    goto LABEL_38;
  }
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v55, v28);
  swift_bridgeObjectRelease();
  if (!v50) {
    goto LABEL_39;
  }
LABEL_36:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_40:
  if (v51 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v29 = v51 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v29);
  }
  if (v52 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v30 = v52 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v30);
  }
  if (v53 == 2)
  {
    Swift::UInt8 v31 = 0;
  }
  else
  {
    Swift::UInt8 v31 = v53 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v31);
  if (v54 == 2)
  {
    Swift::UInt8 v32 = 0;
  }
  else
  {
    Swift::UInt8 v33 = v54 & 1;
    Hasher._combine(_:)(1u);
    Swift::UInt8 v32 = v33;
  }
  Hasher._combine(_:)(v32);
  outlined retain of LocalePreferences?((uint64_t)v56, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v56, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_53:
  Swift::Int v34 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v34);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = v2;
    uint64_t v7 = ~v4;
    unint64_t v8 = *a1;
    unint64_t v9 = a1[1];
    outlined init with take of LocalePreferences?((uint64_t)(a1 + 2), (uint64_t)v100, &demangling cache variable for type metadata for LocalePreferences?);
    while (1)
    {
      long long v10 = (long long *)(*(void *)(v6 + 48) + 160 * v5);
      long long v11 = v10[1];
      long long v97 = *v10;
      v98[0] = v11;
      long long v12 = v10[4];
      long long v14 = v10[2];
      long long v13 = v10[3];
      v98[4] = v10[5];
      v98[3] = v12;
      v98[1] = v14;
      v98[2] = v13;
      long long v16 = v10[7];
      long long v15 = v10[8];
      long long v17 = v10[6];
      *(_OWORD *)((char *)v99 + 12) = *(long long *)((char *)v10 + 140);
      v99[0] = v15;
      v98[5] = v17;
      v98[6] = v16;
      if (v97 != __PAIR128__(v9, v8) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_5;
      }
      outlined init with take of LocalePreferences?((uint64_t)v98, (uint64_t)v96, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v96) == 1)
      {
        outlined init with take of LocalePreferences?((uint64_t)v100, (uint64_t)v94, &demangling cache variable for type metadata for LocalePreferences?);
        if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v94) == 1) {
          return v5;
        }
        outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v97);
        goto LABEL_4;
      }
      outlined init with take of LocalePreferences?((uint64_t)v98, (uint64_t)&v86, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v100, (uint64_t)v94, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v94) == 1)
      {
        long long v84 = v92;
        *(_OWORD *)uint64_t v85 = *(_OWORD *)v93;
        *(_OWORD *)&v85[12] = *(_OWORD *)&v93[12];
        long long v80 = v88;
        long long v81 = v89;
        long long v82 = v90;
        long long v83 = v91;
        long long v78 = v86;
        long long v79 = v87;
        outlined retain of LocalePreferences?((uint64_t)v98, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocalePreferences?((uint64_t)v98, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v97);
        outlined release of LocalePreferences(&v78);
LABEL_4:
        outlined init with take of LocalePreferences?((uint64_t)v98, (uint64_t)v94, &demangling cache variable for type metadata for LocalePreferences?);
        outlined init with take of LocalePreferences?((uint64_t)v100, (uint64_t)&v95, &demangling cache variable for type metadata for LocalePreferences?);
        outlined retain of LocalePreferences?((uint64_t)v100, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined release of (LocalePreferences?, LocalePreferences?)((uint64_t)v94);
        outlined release of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v97);
        goto LABEL_5;
      }
      outlined init with take of LocalePreferences?((uint64_t)v100, (uint64_t)&v78, &demangling cache variable for type metadata for LocalePreferences?);
      unint64_t v72 = *((void *)&v87 + 1);
      unint64_t v67 = v88;
      unint64_t v69 = v87;
      unint64_t v70 = *((void *)&v88 + 1);
      uint64_t v68 = v89;
      uint64_t v65 = (void *)v90;
      uint64_t v66 = *((void *)&v89 + 1);
      objc_super v63 = (void *)v91;
      id v64 = (void *)*((void *)&v90 + 1);
      uint64_t v61 = (void *)v92;
      id v62 = (void *)*((void *)&v91 + 1);
      uint64_t v59 = *(void *)v93;
      uint64_t v60 = *((void *)&v92 + 1);
      unint64_t v56 = *(void *)&v93[8];
      unint64_t v58 = *(void *)&v93[16];
      int v57 = v93[24];
      int v54 = v93[26];
      int v55 = v93[25];
      int v52 = v93[27];
      char v53 = v86;
      uint64_t v71 = *((void *)&v86 + 1);
      if (v86 == 2)
      {
        if (v78 != 2) {
          goto LABEL_61;
        }
      }
      else if (v78 == 2 || ((((v86 & 1) == 0) ^ v78) & 1) == 0)
      {
LABEL_61:
        outlined retain of LocalePreferences?((uint64_t)v98, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocalePreferences?((uint64_t)v98, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v97);
        outlined retain of LocalePreferences?((uint64_t)v100, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
LABEL_62:
        LOBYTE(v24) = 0;
        goto LABEL_63;
      }
      uint64_t v18 = *((void *)&v78 + 1);
      if (*((void *)&v86 + 1))
      {
        if (!*((void *)&v78 + 1)) {
          goto LABEL_61;
        }
        uint64_t v19 = *(void *)(*((void *)&v86 + 1) + 16);
        if (v19 != *(void *)(*((void *)&v78 + 1) + 16)) {
          goto LABEL_61;
        }
        uint64_t v49 = v7;
        if (v19 && *((void *)&v86 + 1) != *((void *)&v78 + 1))
        {
          if (*(_OWORD *)(*((void *)&v86 + 1) + 32) != *(_OWORD *)(*((void *)&v78 + 1) + 32)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            goto LABEL_34;
          }
          uint64_t v20 = v19 - 1;
          if (v20)
          {
            id v21 = (void *)(v18 + 56);
            id v22 = (void *)(v71 + 56);
            while (1)
            {
              BOOL v23 = *(v22 - 1) == *(v21 - 1) && *v22 == *v21;
              if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                break;
              }
              v21 += 2;
              v22 += 2;
              if (!--v20) {
                goto LABEL_36;
              }
            }
LABEL_34:
            outlined retain of LocalePreferences?((uint64_t)v98, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences?((uint64_t)v98, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v97);
            outlined retain of LocalePreferences?((uint64_t)v100, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
LABEL_35:
            LOBYTE(v24) = 0;
            uint64_t v7 = v49;
            goto LABEL_63;
          }
        }
      }
      else
      {
        uint64_t v49 = v7;
        if (*((void *)&v78 + 1)) {
          goto LABEL_34;
        }
      }
LABEL_36:
      if (v72)
      {
        uint64_t v7 = v49;
        if (!*((void *)&v79 + 1)
          || __PAIR128__(v72, v69) != v79 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_61;
        }
      }
      else
      {
        uint64_t v7 = v49;
        if (*((void *)&v79 + 1)) {
          goto LABEL_61;
        }
      }
      if (v70)
      {
        if (!*((void *)&v80 + 1)
          || __PAIR128__(v70, v67) != v80 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_61;
        }
      }
      else if (*((void *)&v80 + 1))
      {
        goto LABEL_61;
      }
      if (v68)
      {
        if (!(void)v81 || (specialized static Dictionary<>.== infix(_:_:)(v68, v81) & 1) == 0) {
          goto LABEL_61;
        }
      }
      else if ((void)v81)
      {
        goto LABEL_61;
      }
      if (v66)
      {
        if (!*((void *)&v81 + 1)
          || (specialized static Dictionary<>.== infix(_:_:)(v66, *((uint64_t *)&v81 + 1)) & 1) == 0)
        {
          goto LABEL_61;
        }
      }
      else if (*((void *)&v81 + 1))
      {
        goto LABEL_61;
      }
      uint64_t v50 = (void *)*((void *)&v82 + 1);
      id v24 = (void *)v82;
      if (v65)
      {
        if (!(void)v82)
        {
          outlined retain of LocalePreferences?((uint64_t)v98, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?((uint64_t)v98, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v97);
          outlined retain of LocalePreferences?((uint64_t)v100, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          goto LABEL_63;
        }
        long long v45 = (void *)*((void *)&v83 + 1);
        long long v46 = (void *)v83;
        long long v44 = (void *)v84;
        type metadata accessor for CFDictionaryRef(0);
        outlined retain of LocalePreferences?((uint64_t)v98, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocalePreferences?((uint64_t)v98, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v97);
        outlined retain of LocalePreferences?((uint64_t)v100, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        id v25 = v24;
        id v43 = v65;
        char v26 = static _CFObject.== infix(_:_:)();

        if ((v26 & 1) == 0) {
          goto LABEL_62;
        }
      }
      else
      {
        long long v45 = (void *)*((void *)&v83 + 1);
        long long v46 = (void *)v83;
        long long v44 = (void *)v84;
        outlined retain of LocalePreferences?((uint64_t)v98, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocalePreferences?((uint64_t)v98, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v97);
        outlined retain of LocalePreferences?((uint64_t)v100, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        if (v24) {
          goto LABEL_62;
        }
      }
      if (v64)
      {
        LOBYTE(v24) = (_BYTE)v50;
        if (!v50) {
          goto LABEL_63;
        }
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        id v27 = v50;
        id v51 = v64;
        char v28 = static _CFObject.== infix(_:_:)();

        if ((v28 & 1) == 0) {
          goto LABEL_62;
        }
      }
      else if (v50)
      {
        goto LABEL_62;
      }
      if (v63)
      {
        if (!v46) {
          goto LABEL_62;
        }
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        id v29 = v46;
        id v47 = v63;
        char v30 = static _CFObject.== infix(_:_:)();

        if ((v30 & 1) == 0) {
          goto LABEL_62;
        }
      }
      else if (v46)
      {
        goto LABEL_62;
      }
      if (v62)
      {
        LOBYTE(v24) = (_BYTE)v45;
        if (!v45) {
          goto LABEL_63;
        }
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        id v31 = v45;
        id v48 = v62;
        char v32 = static _CFObject.== infix(_:_:)();

        if ((v32 & 1) == 0) {
          goto LABEL_62;
        }
      }
      else if (v45)
      {
        goto LABEL_62;
      }
      uint64_t v49 = v7;
      if (v61)
      {
        if (!v44) {
          goto LABEL_35;
        }
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        id v33 = v44;
        id v34 = v61;
        char v35 = static _CFObject.== infix(_:_:)();

        if ((v35 & 1) == 0) {
          goto LABEL_35;
        }
      }
      else if (v44)
      {
        goto LABEL_35;
      }
      uint64_t v36 = *((void *)&v84 + 1);
      if (v60)
      {
        if (!*((void *)&v84 + 1)) {
          goto LABEL_35;
        }
        swift_bridgeObjectRetain();
        uint64_t v37 = swift_bridgeObjectRetain();
        char v38 = specialized static Dictionary<>.== infix(_:_:)(v37, v36);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v38 & 1) == 0) {
          goto LABEL_35;
        }
      }
      else if (*((void *)&v84 + 1))
      {
        goto LABEL_35;
      }
      uint64_t v39 = *(void *)v85;
      if (v59)
      {
        if (!*(void *)v85) {
          goto LABEL_35;
        }
        swift_bridgeObjectRetain();
        uint64_t v40 = swift_bridgeObjectRetain();
        char v41 = specialized static Dictionary<>.== infix(_:_:)(v40, v39);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v41 & 1) == 0) {
          goto LABEL_35;
        }
      }
      else if (*(void *)v85)
      {
        goto LABEL_35;
      }
      if (!v58) {
        break;
      }
      if (!*(void *)&v85[16]) {
        goto LABEL_35;
      }
      uint64_t v7 = v49;
      if (__PAIR128__(v58, v56) == *(_OWORD *)&v85[8]) {
        goto LABEL_103;
      }
      LOBYTE(v24) = 0;
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        goto LABEL_103;
      }
LABEL_63:
      LOBYTE(v73[0]) = v53;
      v73[1] = v71;
      v73[2] = v69;
      v73[3] = v72;
      v73[4] = v67;
      v73[5] = v70;
      v73[6] = v68;
      v73[7] = v66;
      v73[8] = v65;
      v73[9] = v64;
      v73[10] = v63;
      v73[11] = v62;
      v73[12] = v61;
      v73[13] = v60;
      v73[14] = v59;
      v73[15] = v56;
      v73[16] = v58;
      char v74 = v57;
      char v75 = v55;
      char v76 = v54;
      char v77 = v52;
      outlined release of LocalePreferences(v73);
      outlined retain of LocalePreferences?((uint64_t)v100, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v98, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
      outlined release of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v97);
      if (v24) {
        return v5;
      }
LABEL_5:
      unint64_t v5 = (v5 + 1) & v7;
      if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
        return v5;
      }
    }
    uint64_t v7 = v49;
    if (*(void *)&v85[16]) {
      goto LABEL_62;
    }
LABEL_103:
    if (v57 == 2)
    {
      uint64_t v7 = v49;
      if (v85[24] != 2) {
        goto LABEL_62;
      }
    }
    else
    {
      LOBYTE(v24) = 0;
      if (v85[24] == 2) {
        goto LABEL_124;
      }
      uint64_t v7 = v49;
      if ((v85[24] ^ v57)) {
        goto LABEL_63;
      }
    }
    if (v55 == 2)
    {
      uint64_t v7 = v49;
      if (v85[25] != 2) {
        goto LABEL_62;
      }
    }
    else
    {
      LOBYTE(v24) = 0;
      if (v85[25] == 2) {
        goto LABEL_124;
      }
      uint64_t v7 = v49;
      if ((v85[25] ^ v55)) {
        goto LABEL_63;
      }
    }
    if (v54 == 2)
    {
      uint64_t v7 = v49;
      if (v85[26] != 2) {
        goto LABEL_62;
      }
LABEL_118:
      if (v52 == 2)
      {
        uint64_t v7 = v49;
        if (v85[27] != 2) {
          goto LABEL_62;
        }
LABEL_123:
        LOBYTE(v24) = 1;
        goto LABEL_63;
      }
      LOBYTE(v24) = 0;
      if (v85[27] != 2)
      {
        uint64_t v7 = v49;
        if (((((v52 & 1) == 0) ^ v85[27]) & 1) == 0) {
          goto LABEL_63;
        }
        goto LABEL_123;
      }
      goto LABEL_124;
    }
    LOBYTE(v24) = 0;
    if (v85[26] != 2)
    {
      uint64_t v7 = v49;
      if (((((v54 & 1) == 0) ^ v85[26]) & 1) == 0) {
        goto LABEL_63;
      }
      goto LABEL_118;
    }
LABEL_124:
    uint64_t v7 = v49;
    goto LABEL_63;
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  long long *v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  BOOL v27;
  long long v28;
  id v29;
  char v30;
  id v31;
  char v32;
  id v33;
  char v34;
  id v35;
  char v36;
  id v37;
  id v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  int v44;
  id v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  id v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  char v55;
  int v56;
  int v57;
  int v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  void *v73;
  unint64_t v74;
  unint64_t v75;
  void v76[15];
  long long v77;
  char v78;
  char v79;
  char v80;
  char v81;
  long long v82;
  long long v83;
  long long v84;
  long long v85;
  long long v86;
  long long v87;
  long long v88;
  unsigned char v89[28];
  long long v90;
  long long v91;
  long long v92;
  long long v93;
  long long v94;
  long long v95;
  long long v96;
  unsigned char v97[28];
  unsigned char v98[144];
  uint64_t v99;
  unsigned char v100[45];
  long long v101;
  long long v102;
  _OWORD v103[7];
  _OWORD v104[2];
  unsigned char v105[152];

  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = v2;
    uint64_t v7 = ~v4;
    unint64_t v8 = *a1;
    unint64_t v9 = a1[1];
    long long v11 = a1[2];
    long long v10 = a1[3];
    outlined init with take of LocalePreferences?((uint64_t)(a1 + 4), (uint64_t)v105, &demangling cache variable for type metadata for LocalePreferences?);
    char v75 = v10;
    int v54 = v7;
    do
    {
      long long v12 = (long long *)(*(void *)(v6 + 48) + 176 * v5);
      long long v14 = v12[1];
      long long v13 = v12[2];
      uint64_t v101 = *v12;
      uint64_t v102 = v14;
      v103[0] = v13;
      long long v15 = v12[5];
      long long v17 = v12[3];
      long long v16 = v12[4];
      v103[4] = v12[6];
      v103[3] = v15;
      v103[1] = v17;
      v103[2] = v16;
      uint64_t v19 = v12[8];
      uint64_t v18 = v12[9];
      uint64_t v20 = v12[7];
      *(_OWORD *)((char *)v104 + 12) = *(long long *)((char *)v12 + 156);
      v104[0] = v18;
      v103[5] = v20;
      v103[6] = v19;
      if (v101 != __PAIR128__(v9, v8) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
        || v102 != __PAIR128__(v10, v11) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        goto LABEL_5;
      }
      outlined init with take of LocalePreferences?((uint64_t)v103, (uint64_t)v100, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v100) == 1)
      {
        outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v98, &demangling cache variable for type metadata for LocalePreferences?);
        if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v98) == 1) {
          return v5;
        }
        outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)&v101);
        goto LABEL_4;
      }
      outlined init with take of LocalePreferences?((uint64_t)v103, (uint64_t)&v90, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v98, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v98) == 1)
      {
        long long v88 = v96;
        *(_OWORD *)long long v89 = *(_OWORD *)v97;
        *(_OWORD *)&v89[12] = *(_OWORD *)&v97[12];
        long long v84 = v92;
        uint64_t v85 = v93;
        long long v86 = v94;
        long long v87 = v95;
        long long v82 = v90;
        long long v83 = v91;
        outlined retain of LocalePreferences?((uint64_t)v103, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        long long v10 = v75;
        outlined retain of LocalePreferences?((uint64_t)v103, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)&v101);
        outlined release of LocalePreferences(&v82);
LABEL_4:
        outlined init with take of LocalePreferences?((uint64_t)v103, (uint64_t)v98, &demangling cache variable for type metadata for LocalePreferences?);
        outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)&v99, &demangling cache variable for type metadata for LocalePreferences?);
        outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined release of (LocalePreferences?, LocalePreferences?)((uint64_t)v98);
        outlined release of ICUByteCountNumberFormatter.Signature((uint64_t)&v101);
        goto LABEL_5;
      }
      outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)&v82, &demangling cache variable for type metadata for LocalePreferences?);
      char v74 = *((void *)&v91 + 1);
      unint64_t v69 = v92;
      uint64_t v71 = v91;
      unint64_t v72 = *((void *)&v92 + 1);
      unint64_t v70 = v93;
      unint64_t v67 = (void *)v94;
      uint64_t v68 = *((void *)&v93 + 1);
      uint64_t v65 = (void *)v95;
      uint64_t v66 = (void *)*((void *)&v94 + 1);
      objc_super v63 = (void *)v96;
      id v64 = (void *)*((void *)&v95 + 1);
      uint64_t v61 = *(void *)v97;
      id v62 = *((void *)&v96 + 1);
      uint64_t v60 = *(_OWORD *)&v97[8];
      unint64_t v58 = v97[25];
      uint64_t v59 = v97[24];
      unint64_t v56 = v97[27];
      int v57 = v97[26];
      int v55 = v90;
      uint64_t v73 = (void *)*((void *)&v90 + 1);
      if (v90 == 2)
      {
        if (v82 != 2) {
          goto LABEL_69;
        }
      }
      else if (v82 == 2 || ((((v90 & 1) == 0) ^ v82) & 1) == 0)
      {
LABEL_69:
        outlined retain of LocalePreferences?((uint64_t)v103, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocalePreferences?((uint64_t)v103, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)&v101);
LABEL_70:
        LOBYTE(v26) = 0;
        goto LABEL_71;
      }
      id v21 = (void *)*((void *)&v82 + 1);
      if (*((void *)&v90 + 1))
      {
        if (!*((void *)&v82 + 1)) {
          goto LABEL_69;
        }
        id v22 = *(void *)(*((void *)&v90 + 1) + 16);
        if (v22 != *(void *)(*((void *)&v82 + 1) + 16)) {
          goto LABEL_69;
        }
        int v52 = v3;
        if (v22 && *((void *)&v90 + 1) != *((void *)&v82 + 1))
        {
          if (*(_OWORD *)(*((void *)&v90 + 1) + 32) != *(_OWORD *)(*((void *)&v82 + 1) + 32)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            goto LABEL_33;
          }
          if (v22 != 1)
          {
            if ((v73[6] != v21[6] || v73[7] != v21[7]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              goto LABEL_33;
            }
            BOOL v23 = v22 - 2;
            if (v23)
            {
              id v24 = v21 + 9;
              id v25 = v73 + 9;
              while (1)
              {
                id v27 = *(v25 - 1) == *(v24 - 1) && *v25 == *v24;
                if (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                  break;
                }
                v24 += 2;
                v25 += 2;
                if (!--v23) {
                  goto LABEL_43;
                }
              }
LABEL_33:
              outlined retain of LocalePreferences?((uint64_t)v103, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
              outlined retain of LocalePreferences?((uint64_t)v103, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
              outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)&v101);
LABEL_34:
              LOBYTE(v26) = 0;
LABEL_35:
              uint64_t v3 = v52;
              goto LABEL_71;
            }
          }
        }
      }
      else
      {
        int v52 = v3;
        if (*((void *)&v82 + 1)) {
          goto LABEL_33;
        }
      }
LABEL_43:
      if (v74)
      {
        uint64_t v3 = v52;
        if (!*((void *)&v83 + 1)
          || __PAIR128__(v74, v71) != v83 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_69;
        }
      }
      else
      {
        uint64_t v3 = v52;
        if (*((void *)&v83 + 1)) {
          goto LABEL_69;
        }
      }
      if (v72)
      {
        if (!*((void *)&v84 + 1)
          || __PAIR128__(v72, v69) != v84 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_69;
        }
      }
      else if (*((void *)&v84 + 1))
      {
        goto LABEL_69;
      }
      if (v70)
      {
        if (!(void)v85 || (specialized static Dictionary<>.== infix(_:_:)(v70, v85) & 1) == 0) {
          goto LABEL_69;
        }
      }
      else if ((void)v85)
      {
        goto LABEL_69;
      }
      if (v68)
      {
        if (!*((void *)&v85 + 1)
          || (specialized static Dictionary<>.== infix(_:_:)(v68, *((uint64_t *)&v85 + 1)) & 1) == 0)
        {
          goto LABEL_69;
        }
      }
      else if (*((void *)&v85 + 1))
      {
        goto LABEL_69;
      }
      char v28 = v86;
      if (v67)
      {
        if (!(void)v86) {
          goto LABEL_69;
        }
        id v48 = (void *)*((void *)&v87 + 1);
        uint64_t v49 = (void *)v87;
        id v47 = (void *)v88;
        type metadata accessor for CFDictionaryRef(0);
        outlined retain of LocalePreferences?((uint64_t)v103, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocalePreferences?((uint64_t)v103, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)&v101);
        outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        id v29 = (id)v28;
        long long v46 = v67;
        char v30 = static _CFObject.== infix(_:_:)();

        if ((v30 & 1) == 0)
        {
LABEL_93:
          outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
          goto LABEL_70;
        }
      }
      else
      {
        id v48 = (void *)*((void *)&v87 + 1);
        uint64_t v49 = (void *)v87;
        id v47 = (void *)v88;
        outlined retain of LocalePreferences?((uint64_t)v103, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocalePreferences?((uint64_t)v103, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)&v101);
        if ((void)v28) {
          goto LABEL_70;
        }
        outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      }
      if (v66)
      {
        if (!*((void *)&v28 + 1)) {
          goto LABEL_93;
        }
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        id v31 = *((id *)&v28 + 1);
        char v53 = v66;
        char v32 = static _CFObject.== infix(_:_:)();

        if ((v32 & 1) == 0) {
          goto LABEL_93;
        }
      }
      else if (*((void *)&v28 + 1))
      {
        goto LABEL_93;
      }
      if (v65)
      {
        if (!v49) {
          goto LABEL_93;
        }
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        id v33 = v49;
        uint64_t v50 = v65;
        id v34 = static _CFObject.== infix(_:_:)();

        if ((v34 & 1) == 0) {
          goto LABEL_93;
        }
      }
      else if (v49)
      {
        goto LABEL_93;
      }
      if (v64)
      {
        if (!v48) {
          goto LABEL_93;
        }
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        char v35 = v48;
        id v51 = v64;
        uint64_t v36 = static _CFObject.== infix(_:_:)();

        if ((v36 & 1) == 0) {
          goto LABEL_93;
        }
      }
      else if (v48)
      {
        goto LABEL_93;
      }
      int v52 = v3;
      if (v63)
      {
        if (!v47) {
          goto LABEL_120;
        }
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        uint64_t v37 = v47;
        char v38 = v63;
        uint64_t v39 = static _CFObject.== infix(_:_:)();

        if ((v39 & 1) == 0) {
          goto LABEL_120;
        }
      }
      else if (v47)
      {
        goto LABEL_120;
      }
      char v26 = *((void *)&v88 + 1);
      if (v62)
      {
        if (!*((void *)&v88 + 1)) {
          goto LABEL_104;
        }
        swift_bridgeObjectRetain();
        uint64_t v40 = swift_bridgeObjectRetain();
        char v41 = specialized static Dictionary<>.== infix(_:_:)(v40, v26);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v41 & 1) == 0)
        {
LABEL_120:
          outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
          goto LABEL_34;
        }
      }
      else if (*((void *)&v88 + 1))
      {
        goto LABEL_120;
      }
      char v26 = *(void *)v89;
      if (v61)
      {
        if (!*(void *)v89)
        {
LABEL_104:
          outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
          goto LABEL_35;
        }
        swift_bridgeObjectRetain();
        uint64_t v42 = swift_bridgeObjectRetain();
        id v43 = specialized static Dictionary<>.== infix(_:_:)(v42, v26);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v43 & 1) == 0) {
          goto LABEL_120;
        }
      }
      else if (*(void *)v89)
      {
        goto LABEL_120;
      }
      if (*((void *)&v60 + 1))
      {
        if (!*(void *)&v89[16]
          || v60 != *(_OWORD *)&v89[8] && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_120;
        }
      }
      else if (*(void *)&v89[16])
      {
        goto LABEL_120;
      }
      if (v59 == 2)
      {
        if (v89[24] != 2) {
          goto LABEL_120;
        }
      }
      else if (v89[24] == 2 || ((v89[24] ^ v59) & 1) != 0)
      {
        goto LABEL_120;
      }
      long long v44 = v89[25];
      if (v58 == 2)
      {
        outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
        if (v44 != 2) {
          goto LABEL_34;
        }
      }
      else
      {
        outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
        if (v44 == 2 || ((v44 ^ v58) & 1) != 0) {
          goto LABEL_34;
        }
      }
      if (v57 == 2)
      {
        uint64_t v3 = v52;
        if (v89[26] != 2) {
          goto LABEL_70;
        }
      }
      else
      {
        LOBYTE(v26) = 0;
        if (v89[26] == 2) {
          goto LABEL_35;
        }
        uint64_t v3 = v52;
        if (((((v57 & 1) == 0) ^ v89[26]) & 1) == 0) {
          goto LABEL_71;
        }
      }
      if (v56 == 2)
      {
        uint64_t v3 = v52;
        if (v89[27] == 2) {
          goto LABEL_133;
        }
        goto LABEL_70;
      }
      LOBYTE(v26) = 0;
      if (v89[27] == 2) {
        goto LABEL_35;
      }
      uint64_t v3 = v52;
      if ((((v56 & 1) == 0) ^ v89[27])) {
LABEL_133:
      }
        LOBYTE(v26) = 1;
LABEL_71:
      LOBYTE(v76[0]) = v55;
      v76[1] = v73;
      v76[2] = v71;
      v76[3] = v74;
      v76[4] = v69;
      v76[5] = v72;
      v76[6] = v70;
      v76[7] = v68;
      v76[8] = v67;
      v76[9] = v66;
      v76[10] = v65;
      v76[11] = v64;
      v76[12] = v63;
      v76[13] = v62;
      v76[14] = v61;
      char v77 = v60;
      long long v78 = v59;
      long long v79 = v58;
      long long v80 = v57;
      long long v81 = v56;
      outlined release of LocalePreferences(v76);
      outlined retain of LocalePreferences?((uint64_t)v103, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
      outlined release of ICUByteCountNumberFormatter.Signature((uint64_t)&v101);
      if (v26) {
        return v5;
      }
      uint64_t v7 = v54;
      long long v10 = v75;
LABEL_5:
      unint64_t v5 = (v5 + 1) & v7;
    }
    while (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

uint64_t outlined retain of LocalePreferences?(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))
{
  return a1;
}

uint64_t outlined copy of LocalePreferences?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v14 = a9;
    id v15 = a10;
    id v16 = a11;
    id v17 = a12;
    id v18 = a13;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of LocalePreferences?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

id @objc _NSSwiftURLComponents.string.getter(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();
  uint64_t v6 = v5;

  if (v6)
  {
    uint64_t v7 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void *static DateComponents._unconditionallyBridgeFromObjectiveC(_:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    __src[0] = 0uLL;
    uint64_t v9 = 0;
    uint64_t v8 = 0;
    id v3 = a1;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__src, &v8, 0, 1, 0, 1, 0, 1, (uint64_t)v7, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1);
    destructiveProjectEnumData for PredicateCodableError(v7, v4);
    outlined init with take of DateComponents?((uint64_t)v7, (uint64_t)v6);
    static DateComponents._conditionallyBridgeFromObjectiveC(_:result:)(v3, (uint64_t)v6);
    outlined init with take of DateComponents?((uint64_t)v6, (uint64_t)&v8);
    outlined init with take of DateComponents?((uint64_t)&v8, (uint64_t)__src);
    uint64_t result = (void *)_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)__src);
    if (result == 1)
    {
      __break(1u);
    }
    else
    {

      return memcpy(a2, __src, 0x11AuLL);
    }
  }
  else
  {
    __src[0] = 0uLL;
    uint64_t v9 = 0;
    uint64_t v8 = 0;
    return (void *)DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__src, &v8, 0, 1, 0, 1, 0, 1, (uint64_t)a2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
                     0,
                     1,
                     0,
                     1,
                     0,
                     1,
                     0,
                     1,
                     0,
                     1,
                     0,
                     1);
  }
  return result;
}

uint64_t outlined init with take of DateComponents?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateComponents?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s10Foundation13URLComponentsV01_B0VSgWOg(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t type metadata accessor for _NSSwiftURLComponents()
{
  return self;
}

uint64_t specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v16 = 1;
  Swift::Int v5 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(a1, a2, a3);
  swift_bridgeObjectRelease();
  if (v5)
  {
    char v7 = *(unsigned char *)(v5 + 218);
    *(void *)&long long v9 = v5;
    *((void *)&v9 + 1) = 0x101010101010101;
    v10[0] = 1;
    memset(&v10[8], 0, 64);
    uint64_t v11 = 0;
    v12[0] = 1;
    memset(&v12[8], 0, 48);
    v12[56] = v7;
    v12[57] = 0;
    long long v13 = v9;
    *(_OWORD *)id v14 = *(_OWORD *)v10;
    *(_OWORD *)&v14[48] = *(_OWORD *)&v10[48];
    *(_OWORD *)&v14[64] = 0uLL;
    *(_OWORD *)&v14[16] = *(_OWORD *)&v10[16];
    *(_OWORD *)&v14[32] = *(_OWORD *)&v10[32];
    *(_OWORD *)&v15[42] = *(_OWORD *)&v12[42];
    *(_OWORD *)&v15[16] = *(_OWORD *)&v12[16];
    *(_OWORD *)&v15[32] = *(_OWORD *)&v12[32];
    *(_OWORD *)id v15 = *(_OWORD *)v12;
    destructiveProjectEnumData for PredicateCodableError(&v13, v6);
    outlined retain of URLComponents((uint64_t)&v9);
    outlined init with take of LocalePreferences?((uint64_t)&v13, (uint64_t)v17, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  }
  else
  {
    _s10Foundation13URLComponentsV01_B0VSgWOi0_((uint64_t)&v13);
    outlined init with take of LocalePreferences?((uint64_t)&v13, (uint64_t)v17, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    char v7 = 0;
  }
  *(void *)&long long v13 = v5;
  *((void *)&v13 + 1) = 0x101010101010101;
  v14[0] = 1;
  memset(&v14[8], 0, 72);
  v15[0] = v16;
  memset(&v15[8], 0, 48);
  v15[56] = v7;
  v15[57] = 0;
  outlined release of URLComponents((uint64_t)&v13);
  return outlined init with take of LocalePreferences?((uint64_t)v17, a4, &demangling cache variable for type metadata for URLComponents._URLComponents?);
}

uint64_t outlined init with take of LocalePreferences?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _NSSwiftURLComponents.string.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____NSSwiftURLComponents_lock);
  int v2 = v1 + 4;
  id v3 = v1 + 43;
  os_unfair_lock_lock(v1 + 43);
  closure #1 in _NSSwiftURLComponents.components.getter(v2, &v8);
  os_unfair_lock_unlock(v3);
  void v6[6] = v14;
  v6[7] = v15;
  v7[0] = v16[0];
  *(_OWORD *)((char *)v7 + 10) = *(_OWORD *)((char *)v16 + 10);
  v6[2] = v10;
  v6[3] = v11;
  v6[4] = v12;
  v6[5] = v13;
  v6[0] = v8;
  v6[1] = v9;
  v16[8] = v14;
  v16[9] = v15;
  v17[0] = v16[0];
  *(_OWORD *)((char *)v17 + 10) = *(_OWORD *)((char *)v16 + 10);
  v16[4] = v10;
  v16[5] = v11;
  v16[6] = v12;
  v16[7] = v13;
  v16[2] = v8;
  v16[3] = v9;
  if (BYTE8(v8))
  {
    if (*(void *)&v6[0])
    {
      uint64_t v4 = *(void *)(*(void *)&v6[0] + 16);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = URLComponents._URLComponents.computedString.getter();
  }
  outlined release of URLComponents((uint64_t)v6);
  return v4;
}

uint64_t outlined release of URLComponents(uint64_t a1)
{
  return a1;
}

uint64_t closure #1 in _NSSwiftURLComponents.components.getter@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  long long v2 = a1[7];
  long long v3 = a1[5];
  long long v19 = a1[6];
  long long v20 = v2;
  long long v4 = a1[7];
  v21[0] = a1[8];
  *(_OWORD *)((char *)v21 + 10) = *(_OWORD *)((char *)a1 + 138);
  long long v5 = a1[3];
  long long v7 = a1[1];
  long long v15 = a1[2];
  long long v6 = v15;
  long long v16 = v5;
  long long v8 = a1[3];
  long long v9 = a1[5];
  long long v17 = a1[4];
  long long v10 = v17;
  long long v18 = v9;
  long long v11 = a1[1];
  v14[0] = *a1;
  long long v12 = v14[0];
  v14[1] = v11;
  a2[6] = v19;
  a2[7] = v4;
  a2[8] = a1[8];
  *(_OWORD *)((char *)a2 + 138) = *(_OWORD *)((char *)a1 + 138);
  a2[2] = v6;
  a2[3] = v8;
  a2[4] = v10;
  a2[5] = v3;
  *a2 = v12;
  a2[1] = v7;
  return outlined retain of URLComponents((uint64_t)v14);
}

uint64_t outlined retain of URLComponents(uint64_t a1)
{
  return a1;
}

void *outlined release of LocalePreferences(void *a1)
{
  long long v2 = (void *)a1[8];
  long long v4 = (void *)a1[9];
  long long v3 = (void *)a1[10];
  long long v6 = (void *)a1[11];
  long long v5 = (void *)a1[12];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined init with copy of ICUNumberFormatter.Signature(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t initializeWithCopy for ICUNumberFormatter.Signature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
  *(_WORD *)(a1 + 74) = *(_WORD *)(a2 + 74);
  *(unsigned char *)(a1 + 77) = *(unsigned char *)(a2 + 77);
  long long v7 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v8 = v7[9];
  long long v9 = (void *)(a1 + v8);
  long long v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v14 = v7[10];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  *(unsigned char *)(a1 + v7[11]) = *(unsigned char *)(a2 + v7[11]);
  uint64_t v17 = *(int *)(a3 + 20);
  uint64_t v18 = *(int *)(a3 + 24);
  long long v19 = (void *)(a1 + v17);
  long long v20 = (void *)(a2 + v17);
  uint64_t v21 = v20[1];
  *long long v19 = *v20;
  v19[1] = v21;
  uint64_t v22 = a1 + v18;
  uint64_t v23 = a2 + v18;
  uint64_t v24 = *(void *)(a2 + v18 + 8);
  swift_bridgeObjectRetain();
  if (v24 == 1)
  {
    long long v25 = *(_OWORD *)(v23 + 112);
    *(_OWORD *)(v22 + 96) = *(_OWORD *)(v23 + 96);
    *(_OWORD *)(v22 + 112) = v25;
    *(_OWORD *)(v22 + 124) = *(_OWORD *)(v23 + 124);
    long long v26 = *(_OWORD *)(v23 + 48);
    *(_OWORD *)(v22 + 32) = *(_OWORD *)(v23 + 32);
    *(_OWORD *)(v22 + 48) = v26;
    long long v27 = *(_OWORD *)(v23 + 80);
    *(_OWORD *)(v22 + 64) = *(_OWORD *)(v23 + 64);
    *(_OWORD *)(v22 + 80) = v27;
    long long v28 = *(_OWORD *)(v23 + 16);
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    *(_OWORD *)(v22 + 16) = v28;
  }
  else
  {
    *(unsigned char *)uint64_t v22 = *(unsigned char *)v23;
    uint64_t v29 = *(void *)(v23 + 16);
    uint64_t v30 = *(void *)(v23 + 24);
    *(void *)(v22 + 8) = v24;
    *(void *)(v22 + 16) = v29;
    uint64_t v31 = *(void *)(v23 + 32);
    uint64_t v32 = *(void *)(v23 + 40);
    *(void *)(v22 + 24) = v30;
    *(void *)(v22 + 32) = v31;
    uint64_t v33 = *(void *)(v23 + 48);
    uint64_t v34 = *(void *)(v23 + 56);
    *(void *)(v22 + 40) = v32;
    *(void *)(v22 + 48) = v33;
    uint64_t v36 = *(void **)(v23 + 64);
    char v35 = *(void **)(v23 + 72);
    *(void *)(v22 + 56) = v34;
    *(void *)(v22 + 64) = v36;
    id v47 = *(void **)(v23 + 80);
    id v48 = *(void **)(v23 + 88);
    *(void *)(v22 + 72) = v35;
    *(void *)(v22 + 80) = v47;
    uint64_t v37 = *(void *)(v23 + 104);
    uint64_t v49 = *(void **)(v23 + 96);
    *(void *)(v22 + 88) = v48;
    *(void *)(v22 + 96) = v49;
    uint64_t v38 = *(void *)(v23 + 120);
    uint64_t v39 = *(void *)(v23 + 112);
    *(void *)(v22 + 104) = v37;
    *(void *)(v22 + 112) = v39;
    uint64_t v40 = *(void *)(v23 + 128);
    *(void *)(v22 + 120) = v38;
    *(void *)(v22 + 128) = v40;
    *(_DWORD *)(v22 + 136) = *(_DWORD *)(v23 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v41 = v36;
    id v42 = v35;
    id v43 = v47;
    id v44 = v48;
    id v45 = v49;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t type metadata accessor for ICULegacyNumberFormatter.Signature(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for ICULegacyNumberFormatter.Signature);
}

uint64_t type metadata accessor for ICUPercentNumberFormatter.Signature(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for ICUPercentNumberFormatter.Signature);
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, _OWORD *a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  long long v4 = (_OWORD *)(a4[6] + 160 * result);
  long long v5 = a2[7];
  v4[6] = a2[6];
  v4[7] = v5;
  v4[8] = a2[8];
  *(_OWORD *)((char *)v4 + 140) = *(_OWORD *)((char *)a2 + 140);
  long long v6 = a2[3];
  v4[2] = a2[2];
  v4[3] = v6;
  long long v7 = a2[5];
  v4[4] = a2[4];
  v4[5] = v7;
  long long v8 = a2[1];
  *long long v4 = *a2;
  v4[1] = v8;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v9 = a4[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a4[2] = v11;
  }
  return result;
}

{
  _OWORD *v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(result >> 6) + 8] |= 1 << result;
  long long v4 = (_OWORD *)(a4[6] + 176 * result);
  long long v5 = a2[9];
  v4[8] = a2[8];
  v4[9] = v5;
  *(_OWORD *)((char *)v4 + 156) = *(_OWORD *)((char *)a2 + 156);
  long long v6 = a2[5];
  v4[4] = a2[4];
  v4[5] = v6;
  long long v7 = a2[7];
  v4[6] = a2[6];
  v4[7] = v7;
  long long v8 = a2[1];
  *long long v4 = *a2;
  v4[1] = v8;
  uint64_t v9 = a2[3];
  v4[2] = a2[2];
  v4[3] = v9;
  *(void *)(a4[7] + 8 * result) = a3;
  BOOL v10 = a4[2];
  uint64_t v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

{
  _OWORD *v4;
  long long v5;
  long long v6;
  long long v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(result >> 6) + 8] |= 1 << result;
  long long v4 = (_OWORD *)(a4[6] + 96 * result);
  long long v5 = a2[3];
  v4[2] = a2[2];
  v4[3] = v5;
  long long v6 = a2[5];
  v4[4] = a2[4];
  v4[5] = v6;
  long long v7 = a2[1];
  *long long v4 = *a2;
  v4[1] = v7;
  *(void *)(a4[7] + 8 * result) = a3;
  long long v8 = a4[2];
  uint64_t v9 = __OFADD__(v8, 1);
  BOOL v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  long long v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<LocaleCache.State.IdentifierAndPrefs, _NSSwiftLocale>);
  char v113 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_134;
  }
  v108 = v2;
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  v109 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v112 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  swift_retain();
  int64_t v12 = 0;
  uint64_t v110 = v7;
  uint64_t v111 = v5;
  while (1)
  {
    if (v10)
    {
      uint64_t v116 = (v10 - 1) & v10;
      unint64_t v23 = __clz(__rbit64(v10)) | (v12 << 6);
    }
    else
    {
      int64_t v24 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        goto LABEL_139;
      }
      if (v24 >= v112) {
        goto LABEL_129;
      }
      unint64_t v25 = v109[v24];
      ++v12;
      if (!v25)
      {
        int64_t v12 = v24 + 1;
        if (v24 + 1 >= v112) {
          goto LABEL_129;
        }
        unint64_t v25 = v109[v12];
        if (!v25)
        {
          int64_t v26 = v24 + 2;
          if (v26 >= v112) {
            goto LABEL_129;
          }
          unint64_t v25 = v109[v26];
          if (!v25)
          {
            while (1)
            {
              int64_t v12 = v26 + 1;
              if (__OFADD__(v26, 1)) {
                goto LABEL_140;
              }
              if (v12 >= v112) {
                break;
              }
              unint64_t v25 = v109[v12];
              ++v26;
              if (v25) {
                goto LABEL_21;
              }
            }
LABEL_129:
            swift_release();
            long long v3 = v108;
            if (v113)
            {
              uint64_t v107 = 1 << *(unsigned char *)(v5 + 32);
              if (v107 >= 64) {
                bzero(v109, ((unint64_t)(v107 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v109 = -1 << v107;
              }
              *(void *)(v5 + 16) = 0;
            }
LABEL_134:
            swift_release();
            *long long v3 = v7;
            return;
          }
          int64_t v12 = v26;
        }
      }
LABEL_21:
      uint64_t v116 = (v25 - 1) & v25;
      unint64_t v23 = __clz(__rbit64(v25)) + (v12 << 6);
    }
    int64_t v117 = v12;
    uint64_t v27 = *(void *)(v5 + 48) + 160 * v23;
    if (v113)
    {
      uint64_t v28 = *(void *)v27;
      uint64_t v29 = *(void *)(v27 + 8);
      outlined init with take of LocalePreferences?(v27 + 16, (uint64_t)&v138, &demangling cache variable for type metadata for LocalePreferences?);
      id v115 = *(id *)(*(void *)(v5 + 56) + 8 * v23);
      uint64_t v30 = &v138;
    }
    else
    {
      long long v31 = *(_OWORD *)(v27 + 32);
      long long v32 = *(_OWORD *)(v27 + 48);
      long long v33 = *(_OWORD *)(v27 + 80);
      long long v142 = *(_OWORD *)(v27 + 64);
      long long v143 = v33;
      long long v141 = v32;
      long long v34 = *(_OWORD *)(v27 + 96);
      long long v35 = *(_OWORD *)(v27 + 112);
      long long v36 = *(_OWORD *)(v27 + 128);
      *(_OWORD *)((char *)v146 + 12) = *(_OWORD *)(v27 + 140);
      long long v145 = v35;
      v146[0] = v36;
      long long v144 = v34;
      long long v37 = *(_OWORD *)(v27 + 16);
      long long v138 = *(_OWORD *)v27;
      long long v139 = v37;
      long long v140 = v31;
      uint64_t v38 = *(void **)(*(void *)(v5 + 56) + 8 * v23);
      uint64_t v29 = *((void *)&v138 + 1);
      uint64_t v28 = v138;
      outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v138);
      id v115 = v38;
      uint64_t v30 = &v139;
    }
    outlined init with take of LocalePreferences?((uint64_t)v30, (uint64_t)v147, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher.init(_seed:)();
    uint64_t v114 = v29;
    String.hash(into:)();
    outlined init with take of LocalePreferences?((uint64_t)v147, (uint64_t)v137, &demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v118 = v28;
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v137) == 1)
    {
      Hasher._combine(_:)(0);
      goto LABEL_120;
    }
    outlined init with take of LocalePreferences?((uint64_t)v147, (uint64_t)&v138, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v138 == 2)
    {
      Swift::UInt8 v39 = 0;
    }
    else
    {
      Swift::UInt8 v39 = v138 & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v39);
    uint64_t v40 = *((void *)&v138 + 1);
    if (!*((void *)&v138 + 1))
    {
      Hasher._combine(_:)(0);
      id v45 = &v138;
      goto LABEL_41;
    }
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(void *)(v40 + 16));
    uint64_t v41 = *(void *)(v40 + 16);
    if (v41) {
      break;
    }
    outlined init with take of LocalePreferences?((uint64_t)v147, (uint64_t)&v127, &demangling cache variable for type metadata for LocalePreferences?);
    id v45 = &v127;
LABEL_41:
    outlined retain of LocalePreferences(v45);
    if (*((void *)&v139 + 1)) {
      goto LABEL_42;
    }
LABEL_35:
    Hasher._combine(_:)(0);
    if (*((void *)&v140 + 1)) {
      goto LABEL_43;
    }
LABEL_36:
    Hasher._combine(_:)(0);
    uint64_t v43 = v141;
    if ((void)v141) {
      goto LABEL_44;
    }
LABEL_37:
    Hasher._combine(_:)(0);
    uint64_t v44 = *((void *)&v141 + 1);
    if (*((void *)&v141 + 1)) {
      goto LABEL_66;
    }
LABEL_38:
    Hasher._combine(_:)(0);
LABEL_88:
    long long v76 = v142;
    long long v77 = v143;
    long long v78 = (void *)v144;
    if ((void)v142)
    {
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v79 = *((id *)&v76 + 1);
      id v80 = (id)v77;
      id v81 = *((id *)&v77 + 1);
      id v82 = v78;
      id v83 = (id)v76;
      _CFObject.hash(into:)();
      if (*((void *)&v76 + 1)) {
        goto LABEL_90;
      }
    }
    else
    {
      Hasher._combine(_:)(0);
      id v88 = v78;
      id v89 = *((id *)&v76 + 1);
      id v90 = (id)v77;
      id v91 = *((id *)&v77 + 1);
      if (*((void *)&v76 + 1))
      {
LABEL_90:
        Hasher._combine(_:)(1u);
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        id v84 = *((id *)&v76 + 1);
        _CFObject.hash(into:)();

        if ((void)v77) {
          goto LABEL_91;
        }
        goto LABEL_96;
      }
    }
    Hasher._combine(_:)(0);
    if ((void)v77)
    {
LABEL_91:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v85 = (id)v77;
      _CFObject.hash(into:)();

      if (*((void *)&v77 + 1)) {
        goto LABEL_92;
      }
      goto LABEL_97;
    }
LABEL_96:
    Hasher._combine(_:)(0);
    if (*((void *)&v77 + 1))
    {
LABEL_92:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v86 = *((id *)&v77 + 1);
      _CFObject.hash(into:)();

      if (v78) {
        goto LABEL_93;
      }
      goto LABEL_98;
    }
LABEL_97:
    Hasher._combine(_:)(0);
    if (v78)
    {
LABEL_93:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v87 = v78;
      _CFObject.hash(into:)();

      goto LABEL_99;
    }
LABEL_98:
    Hasher._combine(_:)(0);
    id v87 = 0;
LABEL_99:

    uint64_t v92 = *((void *)&v144 + 1);
    if (v92)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)((uint64_t)&v132, v92);
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    uint64_t v93 = v145;
    if ((void)v145)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)((uint64_t)&v132, v93);
      swift_bridgeObjectRelease();
      if (!*(void *)&v146[0]) {
        goto LABEL_106;
      }
    }
    else
    {
      Hasher._combine(_:)(0);
      if (!*(void *)&v146[0])
      {
LABEL_106:
        Hasher._combine(_:)(0);
        goto LABEL_107;
      }
    }
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
LABEL_107:
    if (BYTE8(v146[0]) == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Swift::UInt v94 = BYTE8(v146[0]) & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v94);
    }
    if (BYTE9(v146[0]) == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Swift::UInt v95 = BYTE9(v146[0]) & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v95);
    }
    if (BYTE10(v146[0]) == 2)
    {
      Swift::UInt8 v96 = 0;
    }
    else
    {
      Swift::UInt8 v96 = BYTE10(v146[0]) & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v96);
    if (BYTE11(v146[0]) == 2)
    {
      Swift::UInt8 v97 = 0;
    }
    else
    {
      Swift::UInt8 v98 = BYTE11(v146[0]) & 1;
      Hasher._combine(_:)(1u);
      Swift::UInt8 v97 = v98;
    }
    Hasher._combine(_:)(v97);
    outlined retain of LocalePreferences?((uint64_t)v147, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
    uint64_t v7 = v110;
    uint64_t v5 = v111;
LABEL_120:
    Swift::Int v99 = Hasher._finalize()();
    uint64_t v100 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v101 = v99 & ~v100;
    unint64_t v102 = v101 >> 6;
    if (((-1 << v101) & ~*(void *)(v11 + 8 * (v101 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v101) & ~*(void *)(v11 + 8 * (v101 >> 6)))) | v101 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v14 = v118;
    }
    else
    {
      char v103 = 0;
      unint64_t v104 = (unint64_t)(63 - v100) >> 6;
      uint64_t v14 = v118;
      do
      {
        if (++v102 == v104 && (v103 & 1) != 0)
        {
          __break(1u);
          goto LABEL_135;
        }
        BOOL v105 = v102 == v104;
        if (v102 == v104) {
          unint64_t v102 = 0;
        }
        v103 |= v105;
        uint64_t v106 = *(void *)(v11 + 8 * v102);
      }
      while (v106 == -1);
      unint64_t v13 = __clz(__rbit64(~v106)) + (v102 << 6);
    }
    *(void *)&long long v138 = v14;
    *((void *)&v138 + 1) = v114;
    outlined init with take of LocalePreferences?((uint64_t)v147, (uint64_t)&v139, &demangling cache variable for type metadata for LocalePreferences?);
    *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    uint64_t v15 = (_OWORD *)(*(void *)(v7 + 48) + 160 * v13);
    long long v16 = v139;
    *uint64_t v15 = v138;
    v15[1] = v16;
    long long v17 = v143;
    long long v19 = v140;
    long long v18 = v141;
    v15[4] = v142;
    v15[5] = v17;
    v15[2] = v19;
    v15[3] = v18;
    long long v20 = v144;
    long long v21 = v145;
    long long v22 = v146[0];
    *(_OWORD *)((char *)v15 + 140) = *(_OWORD *)((char *)v146 + 12);
    v15[7] = v21;
    v15[8] = v22;
    v15[6] = v20;
    *(void *)(*(void *)(v7 + 56) + 8 * v13) = v115;
    ++*(void *)(v7 + 16);
    unint64_t v10 = v116;
    int64_t v12 = v117;
  }
  outlined retain of LocalePreferences?((uint64_t)v147, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v42 = v40 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v42 += 16;
    --v41;
  }
  while (v41);
  swift_bridgeObjectRelease();
  if (!*((void *)&v139 + 1)) {
    goto LABEL_35;
  }
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!*((void *)&v140 + 1)) {
    goto LABEL_36;
  }
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v43 = v141;
  if (!(void)v141) {
    goto LABEL_37;
  }
LABEL_44:
  Hasher._combine(_:)(1u);
  Swift::UInt v46 = 0;
  int64_t v47 = 0;
  uint64_t v48 = v43 + 64;
  uint64_t v49 = 1 << *(unsigned char *)(v43 + 32);
  if (v49 < 64) {
    uint64_t v50 = ~(-1 << v49);
  }
  else {
    uint64_t v50 = -1;
  }
  unint64_t v51 = v50 & *(void *)(v43 + 64);
  int64_t v52 = (unint64_t)(v49 + 63) >> 6;
  long long v123 = v133;
  long long v125 = v132;
  long long v119 = v135;
  long long v121 = v134;
  uint64_t v53 = v136;
  while (2)
  {
    if (v51)
    {
      unint64_t v54 = __clz(__rbit64(v51));
      v51 &= v51 - 1;
      unint64_t v55 = v54 | (v47 << 6);
LABEL_49:
      Swift::UInt v56 = *(unsigned __int8 *)(*(void *)(v43 + 48) + v55);
      Swift::UInt v57 = *(void *)(*(void *)(v43 + 56) + 8 * v55);
      long long v127 = v125;
      long long v128 = v123;
      long long v129 = v121;
      long long v130 = v119;
      uint64_t v131 = v53;
      Hasher._combine(_:)(v56);
      Hasher._combine(_:)(v57);
      v46 ^= Hasher._finalize()();
      continue;
    }
    break;
  }
  int64_t v58 = v47 + 1;
  if (__OFADD__(v47, 1))
  {
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
    goto LABEL_137;
  }
  if (v58 >= v52) {
    goto LABEL_65;
  }
  unint64_t v59 = *(void *)(v48 + 8 * v58);
  ++v47;
  if (v59) {
    goto LABEL_64;
  }
  int64_t v47 = v58 + 1;
  if (v58 + 1 >= v52) {
    goto LABEL_65;
  }
  unint64_t v59 = *(void *)(v48 + 8 * v47);
  if (v59) {
    goto LABEL_64;
  }
  int64_t v47 = v58 + 2;
  if (v58 + 2 >= v52) {
    goto LABEL_65;
  }
  unint64_t v59 = *(void *)(v48 + 8 * v47);
  if (v59)
  {
LABEL_64:
    unint64_t v51 = (v59 - 1) & v59;
    unint64_t v55 = __clz(__rbit64(v59)) + (v47 << 6);
    goto LABEL_49;
  }
  int64_t v60 = v58 + 3;
  if (v60 < v52)
  {
    unint64_t v59 = *(void *)(v48 + 8 * v60);
    if (!v59)
    {
      while (1)
      {
        int64_t v47 = v60 + 1;
        if (__OFADD__(v60, 1)) {
          break;
        }
        if (v47 >= v52) {
          goto LABEL_65;
        }
        unint64_t v59 = *(void *)(v48 + 8 * v47);
        ++v60;
        if (v59) {
          goto LABEL_64;
        }
      }
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
    int64_t v47 = v60;
    goto LABEL_64;
  }
LABEL_65:
  swift_bridgeObjectRetain();
  Hasher._combine(_:)(v46);
  swift_bridgeObjectRelease();
  uint64_t v44 = *((void *)&v141 + 1);
  if (!*((void *)&v141 + 1)) {
    goto LABEL_38;
  }
LABEL_66:
  Hasher._combine(_:)(1u);
  Swift::UInt v61 = 0;
  int64_t v62 = 0;
  uint64_t v63 = v44 + 64;
  uint64_t v64 = 1 << *(unsigned char *)(v44 + 32);
  if (v64 < 64) {
    uint64_t v65 = ~(-1 << v64);
  }
  else {
    uint64_t v65 = -1;
  }
  unint64_t v66 = v65 & *(void *)(v44 + 64);
  int64_t v67 = (unint64_t)(v64 + 63) >> 6;
  long long v124 = v133;
  long long v126 = v132;
  long long v120 = v135;
  long long v122 = v134;
  uint64_t v68 = v136;
  while (2)
  {
    if (v66)
    {
      unint64_t v69 = __clz(__rbit64(v66));
      v66 &= v66 - 1;
      unint64_t v70 = v69 | (v62 << 6);
LABEL_71:
      Swift::UInt v71 = *(unsigned __int8 *)(*(void *)(v44 + 48) + v70);
      Swift::UInt v72 = *(void *)(*(void *)(v44 + 56) + 8 * v70);
      long long v127 = v126;
      long long v128 = v124;
      long long v129 = v122;
      long long v130 = v120;
      uint64_t v131 = v68;
      Hasher._combine(_:)(v71);
      Hasher._combine(_:)(v72);
      v61 ^= Hasher._finalize()();
      continue;
    }
    break;
  }
  int64_t v73 = v62 + 1;
  if (__OFADD__(v62, 1)) {
    goto LABEL_136;
  }
  if (v73 >= v67)
  {
LABEL_87:
    swift_bridgeObjectRetain();
    Hasher._combine(_:)(v61);
    swift_bridgeObjectRelease();
    goto LABEL_88;
  }
  unint64_t v74 = *(void *)(v63 + 8 * v73);
  ++v62;
  if (v74) {
    goto LABEL_86;
  }
  int64_t v62 = v73 + 1;
  if (v73 + 1 >= v67) {
    goto LABEL_87;
  }
  unint64_t v74 = *(void *)(v63 + 8 * v62);
  if (v74) {
    goto LABEL_86;
  }
  int64_t v62 = v73 + 2;
  if (v73 + 2 >= v67) {
    goto LABEL_87;
  }
  unint64_t v74 = *(void *)(v63 + 8 * v62);
  if (v74)
  {
LABEL_86:
    unint64_t v66 = (v74 - 1) & v74;
    unint64_t v70 = __clz(__rbit64(v74)) + (v62 << 6);
    goto LABEL_71;
  }
  int64_t v75 = v73 + 3;
  if (v75 >= v67) {
    goto LABEL_87;
  }
  unint64_t v74 = *(void *)(v63 + 8 * v75);
  if (v74)
  {
    int64_t v62 = v75;
    goto LABEL_86;
  }
  while (1)
  {
    int64_t v62 = v75 + 1;
    if (__OFADD__(v75, 1)) {
      break;
    }
    if (v62 >= v67) {
      goto LABEL_87;
    }
    unint64_t v74 = *(void *)(v63 + 8 * v62);
    ++v75;
    if (v74) {
      goto LABEL_86;
    }
  }
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
}

{
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<ICUMeasurementNumberFormatter.Signature, ICUMeasurementNumberFormatter?>);
}

{
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<ICUByteCountNumberFormatter.Signature, ICUByteCountNumberFormatter?>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  void *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  Swift::UInt v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  void *v32;
  id v33;
  uint64_t ObjectType;
  void (*v35)(long long *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  Swift::UInt8 v38;
  void (*v39)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  long long *v47;
  Swift::UInt v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  Swift::UInt v58;
  Swift::UInt v59;
  int64_t v60;
  unint64_t v61;
  int64_t v62;
  Swift::UInt v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  Swift::UInt v73;
  Swift::UInt v74;
  int64_t v75;
  unint64_t v76;
  int64_t v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  Swift::UInt v98;
  Swift::UInt v99;
  Swift::UInt8 v100;
  Swift::UInt8 v101;
  Swift::UInt8 v102;
  Swift::Int v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char v107;
  unint64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  char v114;
  int64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  int64_t v123;
  char v124;
  void *v125;
  Swift::UInt8 v126;
  uint64_t v127;
  uint64_t v128;
  long long v129;
  long long v130;
  long long v131;
  long long v132;
  long long v133;
  long long v134;
  long long v135;
  long long v136;
  long long v137;
  long long v138;
  long long v139;
  long long v140;
  uint64_t v141;
  char v142[8];
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  char v157;
  char v158;
  char v159;
  void v160[18];
  unsigned char v161[144];
  unsigned char v162[144];
  long long v163;
  long long v164;
  long long v165;
  long long v166;
  uint64_t v167;

  long long v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Date.ComponentsFormatStyle, NSDateComponentsFormatter>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (!*(void *)(v5 + 16))
  {
    uint64_t v111 = v6;
    goto LABEL_140;
  }
  char v113 = v2;
  uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  uint64_t v9 = v8 & *(void *)(v5 + 64);
  id v115 = (unint64_t)(v7 + 63) >> 6;
  unint64_t v10 = v6 + 64;
  uint64_t v11 = v6;
  swift_retain();
  int64_t v12 = v11;
  unint64_t v13 = 0;
  uint64_t v116 = (void *)(v5 + 64);
  int64_t v117 = v12;
  uint64_t v118 = v5;
  uint64_t v114 = a2;
  while (1)
  {
    if (v9)
    {
      long long v19 = __clz(__rbit64(v9));
      long long v20 = (v9 - 1) & v9;
      long long v21 = v19 | (v13 << 6);
    }
    else
    {
      long long v22 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_145;
      }
      if (v22 >= v115) {
        goto LABEL_134;
      }
      unint64_t v23 = v116[v22];
      ++v13;
      if (!v23)
      {
        unint64_t v13 = v22 + 1;
        if (v22 + 1 >= v115) {
          goto LABEL_134;
        }
        unint64_t v23 = v116[v13];
        if (!v23)
        {
          int64_t v24 = v22 + 2;
          if (v24 >= v115) {
            goto LABEL_134;
          }
          unint64_t v23 = v116[v24];
          if (!v23)
          {
            while (1)
            {
              unint64_t v13 = v24 + 1;
              if (__OFADD__(v24, 1)) {
                goto LABEL_146;
              }
              if (v13 >= v115) {
                break;
              }
              unint64_t v23 = v116[v13];
              ++v24;
              if (v23) {
                goto LABEL_21;
              }
            }
LABEL_134:
            uint64_t v111 = v12;
            swift_release();
            long long v3 = v113;
            if (a2)
            {
              int64_t v112 = 1 << *(unsigned char *)(v5 + 32);
              if (v112 >= 64) {
                bzero(v116, ((unint64_t)(v112 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v116 = -1 << v112;
              }
              *(void *)(v5 + 16) = 0;
            }
LABEL_140:
            swift_release();
            *long long v3 = v111;
            return;
          }
          unint64_t v13 = v24;
        }
      }
LABEL_21:
      long long v20 = (v23 - 1) & v23;
      long long v21 = __clz(__rbit64(v23)) + (v13 << 6);
    }
    unint64_t v25 = *(void *)(v5 + 56);
    int64_t v26 = (unsigned __int8 *)(*(void *)(v5 + 48) + 56 * v21);
    uint64_t v27 = *v26;
    uint64_t v28 = *((void *)v26 + 1);
    uint64_t v29 = *((void *)v26 + 2);
    uint64_t v30 = *((void *)v26 + 3);
    long long v128 = *((void *)v26 + 4);
    long long v127 = *((void *)v26 + 5);
    long long v31 = v26[48];
    long long v32 = *(void **)(v25 + 8 * v21);
    long long v122 = v20;
    if ((a2 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      long long v33 = v32;
    }
    long long v125 = v32;
    Hasher.init(_seed:)();
    long long v124 = v27;
    Hasher._combine(_:)(v27);
    long long v126 = v31;
    long long v123 = v13;
    long long v119 = v28;
    if (v28)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Set.hash(into:)(&v163, v28);
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    uint64_t v5 = v118;
    ObjectType = swift_getObjectType();
    long long v35 = *(void (**)(long long *, uint64_t, uint64_t))(v30 + 120);
    swift_unknownObjectRetain();
    long long v121 = v30;
    v35(&v163, ObjectType, v30);
    long long v120 = v29;
    swift_unknownObjectRelease();
    long long v36 = swift_getObjectType();
    long long v37 = *(uint64_t (**)(uint64_t, uint64_t))(v127 + 48);
    swift_unknownObjectRetain();
    if (v37(v36, v127))
    {
      uint64_t v38 = 1;
LABEL_31:
      Hasher._combine(_:)(v38);
      swift_unknownObjectRelease();
      uint64_t v9 = v122;
      uint64_t v40 = v126;
      goto LABEL_125;
    }
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v127 + 64))(v36, v127);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::UInt8 v39 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v127 + 464);
    swift_unknownObjectRetain();
    v39(v160, v36, v127);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v160, (uint64_t)v161, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v161, (uint64_t)v162, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v162) == 1)
    {
      uint64_t v38 = 0;
      goto LABEL_31;
    }
    outlined init with take of LocalePreferences?((uint64_t)v161, (uint64_t)v142, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v142[0] == 2)
    {
      uint64_t v41 = 0;
    }
    else
    {
      uint64_t v41 = v142[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v41);
    uint64_t v42 = v143;
    uint64_t v40 = v126;
    if (!v143)
    {
      Hasher._combine(_:)(0);
      int64_t v47 = (long long *)v142;
      goto LABEL_46;
    }
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(void *)(v42 + 16));
    uint64_t v43 = *(void *)(v42 + 16);
    if (v43) {
      break;
    }
    outlined init with take of LocalePreferences?((uint64_t)v161, (uint64_t)&v137, &demangling cache variable for type metadata for LocalePreferences?);
    int64_t v47 = &v137;
LABEL_46:
    outlined retain of LocalePreferences(v47);
    if (v144) {
      goto LABEL_47;
    }
LABEL_40:
    Hasher._combine(_:)(0);
    if (v145) {
      goto LABEL_48;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    id v45 = v146;
    if (v146) {
      goto LABEL_49;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    Swift::UInt v46 = v147;
    if (v147) {
      goto LABEL_71;
    }
LABEL_43:
    Hasher._combine(_:)(0);
LABEL_93:
    long long v78 = v148;
    id v79 = v149;
    id v81 = v150;
    id v80 = v151;
    id v82 = v152;
    if (v148)
    {
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v83 = v79;
      id v84 = v81;
      id v85 = v80;
      id v86 = v82;
      id v87 = v78;
      _CFObject.hash(into:)();
      if (v79) {
        goto LABEL_95;
      }
    }
    else
    {
      Hasher._combine(_:)(0);
      uint64_t v92 = v82;
      uint64_t v93 = v79;
      Swift::UInt v94 = v81;
      Swift::UInt v95 = v80;
      if (v79)
      {
LABEL_95:
        Hasher._combine(_:)(1u);
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        id v88 = v79;
        _CFObject.hash(into:)();

        if (v81) {
          goto LABEL_96;
        }
        goto LABEL_101;
      }
    }
    Hasher._combine(_:)(0);
    if (v81)
    {
LABEL_96:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v89 = v81;
      _CFObject.hash(into:)();

      if (v80) {
        goto LABEL_97;
      }
      goto LABEL_102;
    }
LABEL_101:
    Hasher._combine(_:)(0);
    if (v80)
    {
LABEL_97:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v90 = v80;
      _CFObject.hash(into:)();

      if (v82) {
        goto LABEL_98;
      }
      goto LABEL_103;
    }
LABEL_102:
    Hasher._combine(_:)(0);
    if (v82)
    {
LABEL_98:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v91 = v82;
      _CFObject.hash(into:)();

      goto LABEL_104;
    }
LABEL_103:
    Hasher._combine(_:)(0);
    id v91 = 0;
LABEL_104:
    uint64_t v29 = v120;

    Swift::UInt8 v96 = v153;
    if (v96)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)((uint64_t)&v163, v96);
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    uint64_t v5 = v118;
    a2 = v114;
    Swift::UInt8 v97 = v154;
    if (v154)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)((uint64_t)&v163, v97);
      swift_bridgeObjectRelease();
      if (!v155) {
        goto LABEL_111;
      }
    }
    else
    {
      Hasher._combine(_:)(0);
      if (!v155)
      {
LABEL_111:
        Hasher._combine(_:)(0);
        goto LABEL_112;
      }
    }
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
LABEL_112:
    uint64_t v30 = v121;
    if (v156 == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Swift::UInt8 v98 = v156 & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v98);
    }
    if (v157 == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Swift::Int v99 = v157 & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v99);
    }
    if (v158 == 2)
    {
      uint64_t v100 = 0;
    }
    else
    {
      uint64_t v100 = v158 & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v100);
    if (v159 == 2)
    {
      unint64_t v101 = 0;
    }
    else
    {
      unint64_t v102 = v159 & 1;
      Hasher._combine(_:)(1u);
      unint64_t v101 = v102;
    }
    Hasher._combine(_:)(v101);
    outlined retain of LocalePreferences?((uint64_t)v161, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v161, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
    swift_unknownObjectRelease();
    uint64_t v9 = v122;
    unint64_t v13 = v123;
LABEL_125:
    Hasher._combine(_:)(v40);
    char v103 = Hasher._finalize()();
    int64_t v12 = v117;
    unint64_t v104 = -1 << *(unsigned char *)(v117 + 32);
    BOOL v105 = v103 & ~v104;
    uint64_t v106 = v105 >> 6;
    if (((-1 << v105) & ~*(void *)(v10 + 8 * (v105 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1 << v105) & ~*(void *)(v10 + 8 * (v105 >> 6)))) | v105 & 0x7FFFFFFFFFFFFFC0;
      long long v16 = v124;
      uint64_t v15 = v125;
      long long v17 = v127;
    }
    else
    {
      uint64_t v107 = 0;
      v108 = (unint64_t)(63 - v104) >> 6;
      long long v16 = v124;
      uint64_t v15 = v125;
      long long v17 = v127;
      do
      {
        if (++v106 == v108 && (v107 & 1) != 0)
        {
          __break(1u);
          goto LABEL_141;
        }
        v109 = v106 == v108;
        if (v106 == v108) {
          uint64_t v106 = 0;
        }
        v107 |= v109;
        uint64_t v110 = *(void *)(v10 + 8 * v106);
      }
      while (v110 == -1);
      uint64_t v14 = __clz(__rbit64(~v110)) + (v106 << 6);
    }
    *(void *)(v10 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    long long v18 = *(void *)(v117 + 48) + 56 * v14;
    *(unsigned char *)long long v18 = v16;
    *(void *)(v18 + 8) = v119;
    *(void *)(v18 + 16) = v29;
    *(void *)(v18 + 24) = v30;
    *(void *)(v18 + 32) = v128;
    *(void *)(v18 + 40) = v17;
    *(unsigned char *)(v18 + 48) = v40;
    *(void *)(*(void *)(v117 + 56) + 8 * v14) = v15;
    ++*(void *)(v117 + 16);
  }
  outlined retain of LocalePreferences?((uint64_t)v161, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v44 = v42 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v44 += 16;
    --v43;
  }
  while (v43);
  swift_bridgeObjectRelease();
  uint64_t v40 = v126;
  if (!v144) {
    goto LABEL_40;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v145) {
    goto LABEL_41;
  }
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  id v45 = v146;
  if (!v146) {
    goto LABEL_42;
  }
LABEL_49:
  Hasher._combine(_:)(1u);
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = v45 + 64;
  unint64_t v51 = 1 << *(unsigned char *)(v45 + 32);
  if (v51 < 64) {
    int64_t v52 = ~(-1 << v51);
  }
  else {
    int64_t v52 = -1;
  }
  uint64_t v53 = v52 & *(void *)(v45 + 64);
  unint64_t v54 = (unint64_t)(v51 + 63) >> 6;
  long long v133 = v164;
  long long v135 = v163;
  long long v129 = v166;
  uint64_t v131 = v165;
  unint64_t v55 = v167;
  while (2)
  {
    if (v53)
    {
      Swift::UInt v56 = __clz(__rbit64(v53));
      v53 &= v53 - 1;
      Swift::UInt v57 = v56 | (v49 << 6);
LABEL_54:
      int64_t v58 = *(unsigned __int8 *)(*(void *)(v45 + 48) + v57);
      unint64_t v59 = *(void *)(*(void *)(v45 + 56) + 8 * v57);
      v137 = v135;
      long long v138 = v133;
      long long v139 = v131;
      long long v140 = v129;
      long long v141 = v55;
      Hasher._combine(_:)(v58);
      Hasher._combine(_:)(v59);
      v48 ^= Hasher._finalize()();
      continue;
    }
    break;
  }
  int64_t v60 = v49 + 1;
  if (__OFADD__(v49, 1))
  {
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
    goto LABEL_143;
  }
  if (v60 >= v54) {
    goto LABEL_70;
  }
  Swift::UInt v61 = *(void *)(v50 + 8 * v60);
  ++v49;
  if (v61) {
    goto LABEL_69;
  }
  uint64_t v49 = v60 + 1;
  if (v60 + 1 >= v54) {
    goto LABEL_70;
  }
  Swift::UInt v61 = *(void *)(v50 + 8 * v49);
  if (v61) {
    goto LABEL_69;
  }
  uint64_t v49 = v60 + 2;
  if (v60 + 2 >= v54) {
    goto LABEL_70;
  }
  Swift::UInt v61 = *(void *)(v50 + 8 * v49);
  if (v61)
  {
LABEL_69:
    uint64_t v53 = (v61 - 1) & v61;
    Swift::UInt v57 = __clz(__rbit64(v61)) + (v49 << 6);
    goto LABEL_54;
  }
  int64_t v62 = v60 + 3;
  if (v62 < v54)
  {
    Swift::UInt v61 = *(void *)(v50 + 8 * v62);
    if (!v61)
    {
      while (1)
      {
        uint64_t v49 = v62 + 1;
        if (__OFADD__(v62, 1)) {
          break;
        }
        if (v49 >= v54) {
          goto LABEL_70;
        }
        Swift::UInt v61 = *(void *)(v50 + 8 * v49);
        ++v62;
        if (v61) {
          goto LABEL_69;
        }
      }
LABEL_143:
      __break(1u);
      goto LABEL_144;
    }
    uint64_t v49 = v62;
    goto LABEL_69;
  }
LABEL_70:
  swift_bridgeObjectRetain();
  Hasher._combine(_:)(v48);
  swift_bridgeObjectRelease();
  uint64_t v40 = v126;
  Swift::UInt v46 = v147;
  if (!v147) {
    goto LABEL_43;
  }
LABEL_71:
  Hasher._combine(_:)(1u);
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = v46 + 64;
  unint64_t v66 = 1 << *(unsigned char *)(v46 + 32);
  if (v66 < 64) {
    int64_t v67 = ~(-1 << v66);
  }
  else {
    int64_t v67 = -1;
  }
  uint64_t v68 = v67 & *(void *)(v46 + 64);
  unint64_t v69 = (unint64_t)(v66 + 63) >> 6;
  long long v134 = v164;
  uint64_t v136 = v163;
  long long v130 = v166;
  long long v132 = v165;
  unint64_t v70 = v167;
  while (2)
  {
    if (v68)
    {
      Swift::UInt v71 = __clz(__rbit64(v68));
      v68 &= v68 - 1;
      Swift::UInt v72 = v71 | (v64 << 6);
LABEL_76:
      int64_t v73 = *(unsigned __int8 *)(*(void *)(v46 + 48) + v72);
      unint64_t v74 = *(void *)(*(void *)(v46 + 56) + 8 * v72);
      v137 = v136;
      long long v138 = v134;
      long long v139 = v132;
      long long v140 = v130;
      long long v141 = v70;
      Hasher._combine(_:)(v73);
      Hasher._combine(_:)(v74);
      v63 ^= Hasher._finalize()();
      continue;
    }
    break;
  }
  int64_t v75 = v64 + 1;
  if (__OFADD__(v64, 1)) {
    goto LABEL_142;
  }
  if (v75 >= v69)
  {
LABEL_92:
    swift_bridgeObjectRetain();
    Hasher._combine(_:)(v63);
    swift_bridgeObjectRelease();
    uint64_t v40 = v126;
    goto LABEL_93;
  }
  long long v76 = *(void *)(v65 + 8 * v75);
  ++v64;
  if (v76) {
    goto LABEL_91;
  }
  uint64_t v64 = v75 + 1;
  if (v75 + 1 >= v69) {
    goto LABEL_92;
  }
  long long v76 = *(void *)(v65 + 8 * v64);
  if (v76) {
    goto LABEL_91;
  }
  uint64_t v64 = v75 + 2;
  if (v75 + 2 >= v69) {
    goto LABEL_92;
  }
  long long v76 = *(void *)(v65 + 8 * v64);
  if (v76)
  {
LABEL_91:
    uint64_t v68 = (v76 - 1) & v76;
    Swift::UInt v72 = __clz(__rbit64(v76)) + (v64 << 6);
    goto LABEL_76;
  }
  long long v77 = v75 + 3;
  if (v77 >= v69) {
    goto LABEL_92;
  }
  long long v76 = *(void *)(v65 + 8 * v77);
  if (v76)
  {
    uint64_t v64 = v77;
    goto LABEL_91;
  }
  while (1)
  {
    uint64_t v64 = v77 + 1;
    if (__OFADD__(v77, 1)) {
      break;
    }
    if (v64 >= v69) {
      goto LABEL_92;
    }
    long long v76 = *(void *)(v65 + 8 * v64);
    ++v77;
    if (v76) {
      goto LABEL_91;
    }
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
}

uint64_t _NSSwiftURLComponents.host.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____NSSwiftURLComponents_lock);
  long long v2 = v1 + 4;
  long long v3 = v1 + 43;
  os_unfair_lock_lock(v1 + 43);
  closure #1 in _NSSwiftURLComponents.components.getter(v2, &v54);
  os_unfair_lock_unlock(v3);
  long long v51 = v60;
  long long v52 = v61;
  v53[0] = v62[0];
  *(_OWORD *)((char *)v53 + 10) = *(_OWORD *)((char *)v62 + 10);
  v48[2] = v56;
  v48[3] = v57;
  long long v49 = v58;
  long long v50 = v59;
  v48[0] = v54;
  v48[1] = v55;
  v62[8] = v60;
  v62[9] = v61;
  v63[0] = v62[0];
  *(_OWORD *)((char *)v63 + 10) = *(_OWORD *)((char *)v62 + 10);
  v62[4] = v56;
  v62[5] = v57;
  v62[6] = v58;
  v62[7] = v59;
  v62[2] = v54;
  v62[3] = v55;
  if ((void)v59)
  {
    uint64_t v5 = *((void *)&v49 + 1);
    unint64_t v6 = v50;
  }
  else if ((BYTE12(v48[0]) & 1) != 0 && *(void *)&v48[0] && (*(unsigned char *)(*(void *)&v48[0] + 120) & 1) == 0)
  {
    uint64_t v28 = String.subscript.getter();
    uint64_t v5 = MEMORY[0x185301F50](v28);
    unint64_t v6 = v29;
    uint64_t v4 = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = URLComponents._URLComponents.port.getter();
    if (v7)
    {
      uint64_t v8 = URLComponents._URLComponents.percentEncodedUser.getter();
      uint64_t v10 = v9;
      uint64_t v4 = swift_bridgeObjectRelease();
      if (!v10)
      {
        outlined release of URLComponents((uint64_t)v48);
        return v8;
      }
    }
    uint64_t v5 = 0;
    unint64_t v6 = 0xE000000000000000;
  }
  uint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  if ((v6 & 0x2000000000000000) != 0) {
    uint64_t v12 = HIBYTE(v6) & 0xF;
  }
  else {
    uint64_t v12 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v12)
  {
    if (BYTE8(v53[1]))
    {
      Swift::UInt v46 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v5;
      uint64_t v47 = v6;
      MEMORY[0x1F4188790](v4);
      uint64_t v41 = &v46;
      uint64_t v42 = MEMORY[0x1E4FBC870];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v13 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:), (uint64_t)&v40, v5, v6);
      if (v14 == 1)
      {
        uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v46;
        unint64_t v16 = v47;
        swift_bridgeObjectRetain();
        uint64_t v8 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)((Swift::Int)v15, v16, MEMORY[0x1E4FBC870]);
        swift_bridgeObjectRelease_n();
LABEL_40:
        swift_bridgeObjectRelease();
        goto LABEL_41;
      }
      uint64_t v8 = (uint64_t)v13;
LABEL_27:
      swift_bridgeObjectRelease_n();
LABEL_41:
      outlined release of URLComponents((uint64_t)v48);
      return v8;
    }
    if ((v6 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      if ((v6 & 0x2000000000000000) != 0)
      {
        Swift::UInt v46 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v5;
        uint64_t v47 = v6 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v44 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        uint64_t v45 = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v46, HIBYTE(v6) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v44, 0, (unsigned __int8 *)&v46, HIBYTE(v6) & 0xF, v43);
        uint64_t v8 = v43[0];
        uint64_t v19 = v43[1];
        swift_release();
      }
      else
      {
        if ((v5 & 0x1000000000000000) != 0)
        {
          long long v17 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          long long v17 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
          uint64_t v11 = v35;
        }
        Swift::UInt v46 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        uint64_t v47 = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        uint64_t v8 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v17, v11, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v46, 0, v17, v11);
        uint64_t v19 = v18;
      }
      swift_bridgeObjectRelease();
      if (v19 != 1) {
        goto LABEL_27;
      }
    }
    Swift::UInt v46 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v5;
    uint64_t v47 = v6;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    long long v20 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v21 = objc_msgSend(v20, sel__fastCharacterContents);
    id v22 = v20;
    if (v21)
    {
      Swift::UInt v46 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v5;
      uint64_t v47 = v6;
      StringProtocol._ephemeralString.getter();
      unint64_t v23 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v24 = objc_msgSend(v23, sel_length);
      uint64_t v25 = swift_unknownObjectRelease();
      MEMORY[0x1F4188790](v25);
      LOBYTE(v41) = 0;
      MEMORY[0x1F4188790](v26);
      v39[2] = v21;
      v39[3] = v24;
      uint64_t v8 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v21, (uint64_t)v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), v27, partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), (uint64_t)v39);
      swift_bridgeObjectRelease_n();
      outlined release of URLComponents((uint64_t)v48);
      return v8;
    }
    Swift::UInt v46 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v5;
    uint64_t v47 = v6;
    swift_bridgeObjectRetain();
    uint64_t v31 = String.init<A>(_:)();
    unint64_t v32 = v30;
    if ((v30 & 0x1000000000000000) != 0)
    {
      uint64_t v31 = static String._copying(_:)();
      unint64_t v37 = v36;
      swift_bridgeObjectRelease();
      unint64_t v32 = v37;
      if ((v37 & 0x2000000000000000) == 0) {
        goto LABEL_32;
      }
    }
    else if ((v30 & 0x2000000000000000) == 0)
    {
LABEL_32:
      if ((v31 & 0x1000000000000000) != 0)
      {
        long long v33 = (unsigned __int8 *)((v32 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v34 = v31 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        long long v33 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      Swift::UInt v46 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      uint64_t v47 = 0;
      uint64_t v8 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v33, v34, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v46, 0, v33, v34);
      goto LABEL_39;
    }
    Swift::UInt v46 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v31;
    uint64_t v47 = v32 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v44 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    uint64_t v45 = 0;
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v46, HIBYTE(v32) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v44, 0, (unsigned __int8 *)&v46, HIBYTE(v32) & 0xF, v43);
    uint64_t v8 = v43[0];
    swift_release();
LABEL_39:
    swift_bridgeObjectRelease_n();
    goto LABEL_40;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined release of URLComponents((uint64_t)v48);
  return 0;
}

uint64_t _NSSwiftURLComponents._scheme.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____NSSwiftURLComponents_lock);
  long long v2 = v1 + 4;
  long long v3 = v1 + 43;
  os_unfair_lock_lock(v1 + 43);
  closure #1 in _NSSwiftURLComponents.components.getter(v2, v16);
  os_unfair_lock_unlock(v3);
  long long v13 = v21;
  long long v14 = v22;
  v15[0] = v23[0];
  *(_OWORD *)((char *)v15 + 10) = *(_OWORD *)((char *)v23 + 10);
  long long v9 = v17;
  long long v10 = v18;
  long long v11 = v19;
  long long v12 = v20;
  long long v7 = v16[0];
  long long v8 = v16[1];
  if ((void)v17)
  {
    uint64_t v4 = *((void *)&v8 + 1);
  }
  else if ((BYTE9(v7) & 1) != 0 && (void)v7 && (*(unsigned char *)(v7 + 48) & 1) == 0)
  {
    uint64_t v6 = String.subscript.getter();
    uint64_t v4 = MEMORY[0x185301F50](v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = 0;
  }
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v7);
  return v4;
}

uint64_t one-time initialization function for localizedStringLogger()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, localizedStringLogger);
  __swift_project_value_buffer(v0, (uint64_t)localizedStringLogger);
  return Logger.init(subsystem:category:)();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void *String.init(localized:)(uint64_t *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[9];
  uint64_t v11 = *a1;
  long long v12 = *(_OWORD *)(a1 + 1);
  uint64_t v13 = v1;
  uint64_t v14 = v2;
  long long v15 = *(_OWORD *)(a1 + 5);
  long long v16 = *(_OWORD *)(a1 + 7);
  uint64_t v17 = v3;
  long long v4 = *((_OWORD *)a1 + 6);
  long long v18 = *((_OWORD *)a1 + 5);
  long long v19 = v4;
  long long v6 = 0uLL;
  __int16 v7 = 256;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  char v10 = 0;
  return specialized String.init(localized:options:)((long long *)&v11, &v6);
}

void postQueueNotifications(char *a1, int a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v35 = (void *)*((void *)a1 + 1);
  uint64_t v3 = 24;
  if (a2) {
    uint64_t v3 = 16;
  }
  long long v4 = *(void **)&a1[v3];
  if (a2) {
    uint64_t v5 = (id *)(a1 + 16);
  }
  else {
    uint64_t v5 = (id *)(a1 + 24);
  }
  if (![*v5 count]) {
    return;
  }
  *uint64_t v5 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if (!v4) {
    return;
  }
  long long v33 = a1;
  Current = CFRunLoopGetCurrent();
  CFRunLoopMode v7 = CFRunLoopCopyCurrentMode(Current);
  _CFAutoreleasePoolPush();
  uint64_t v8 = [v4 count];
  if (v8 < 1)
  {
LABEL_31:
    long long v18 = v33;
    if ((a2 & 1) == 0) {
      postQueueNotifications(v33, 1);
    }
    goto LABEL_33;
  }
  uint64_t v9 = v8;
  char v10 = 0;
  uint64_t v11 = 0;
  uint64_t v34 = *MEMORY[0x1E4F1D410];
LABEL_10:
  char v32 = v10;
  do
  {
    uint64_t v37 = [v4 objectAtIndex:v11];
    long long v12 = v4;
    uint64_t v13 = (void *)[v4 objectAtIndex:v11 + 1];
    if (([v13 containsObject:v7] & 1) == 0
      && (![v13 containsObject:v34] || !_CFRunLoop01()))
    {
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      uint64_t v14 = [v13 countByEnumeratingWithState:&v39 objects:&context count:16];
      if (!v14)
      {
LABEL_26:
        long long v4 = v12;
        goto LABEL_16;
      }
      uint64_t v15 = v14;
      uint64_t v16 = *(void *)v40;
LABEL_20:
      uint64_t v17 = 0;
      while (1)
      {
        if (*(void *)v40 != v16) {
          objc_enumerationMutation(v13);
        }
        if (_CFRunLoopModeContainsMode()) {
          break;
        }
        if (v15 == ++v17)
        {
          uint64_t v15 = [v13 countByEnumeratingWithState:&v39 objects:&context count:16];
          if (v15) {
            goto LABEL_20;
          }
          goto LABEL_26;
        }
      }
    }
    [v35 postNotification:v37];
    long long v4 = v12;
    [v12 removeObjectAtIndex:v11 + 1];
    [v12 removeObjectAtIndex:v11];
    v9 -= 2;
    if (!a2)
    {
      char v10 = 1;
      postQueueNotifications(v33, 1);
      if (v11 < v9) {
        goto LABEL_10;
      }
      goto LABEL_30;
    }
    v11 -= 2;
LABEL_16:
    v11 += 2;
  }
  while (v11 < v9);
  if ((v32 & 1) == 0) {
    goto LABEL_31;
  }
LABEL_30:
  CFRunLoopWakeUp(Current);
  long long v18 = v33;
LABEL_33:
  _CFAutoreleasePoolPop();
  CFRelease(v7);
  if ([v4 count])
  {
    context.version = 0;
    context.info = v18;
    context.retain = (const void *(__cdecl *)(const void *))MEMORY[0x1E4F1C280];
    context.release = (void (__cdecl *)(const void *))MEMORY[0x1E4F1C278];
    context.copyDescription = (CFStringRef (__cdecl *)(const void *))MEMORY[0x1E4F1C220];
    if (a2) {
      uint64_t v19 = 16;
    }
    else {
      uint64_t v19 = 24;
    }
    if (a2) {
      CFOptionFlags v20 = 130;
    }
    else {
      CFOptionFlags v20 = 32;
    }
    if (a2) {
      long long v21 = (void (__cdecl *)(CFRunLoopObserverRef, CFRunLoopActivity, void *))__NSPostASAPQueueNotes;
    }
    else {
      long long v21 = (void (__cdecl *)(CFRunLoopObserverRef, CFRunLoopActivity, void *))__NSPostIdleQueueNotes;
    }
    long long v22 = CFRunLoopObserverCreate(0, v20, 0, 0, v21, &context);
    uint64_t v23 = [v4 count];
    if (v23 >= 1)
    {
      uint64_t v24 = v23;
      for (uint64_t i = 0; i < v24; i += 2)
      {
        uint64_t v26 = (void *)[v4 objectAtIndex:i | 1];
        uint64_t v27 = [v26 count];
        if (v27 >= 1)
        {
          uint64_t v28 = v27;
          for (uint64_t j = 0; j != v28; ++j)
            CFRunLoopAddObserver(Current, v22, (CFRunLoopMode)[v26 objectAtIndex:j]);
        }
      }
    }
    CFRelease(v22);
    if (*(void *)&v33[v19])
    {
      uint64_t v30 = [v4 count];
      if (v30)
      {
        uint64_t v31 = v30 - 1;
        do
          objc_msgSend(*(id *)&v33[v19], "insertObject:atIndex:", objc_msgSend(v4, "objectAtIndex:", v31--), 0);
        while (v31 != -1);
      }
      goto LABEL_53;
    }
    *(void *)&v33[v19] = v4;
  }
  else
  {
LABEL_53:
  }
}

void String.LocalizationOptions.init(nsOptions:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = objc_msgSend(a1, sel_pluralizationNumber);
  uint64_t v5 = v4;
  if (v4)
  {
    if (objc_msgSend(v4, sel_integerValue) == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      id v6 = 0;
      char v7 = 1;
    }
    else
    {
      id v6 = objc_msgSend(v5, sel_integerValue);
      char v7 = 0;
    }
  }
  else
  {
    id v6 = 0;
    char v7 = 0;
  }

  *(void *)a2 = 0;
  *(void *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 16) = v7;
  *(unsigned char *)(a2 + 17) = v5 == 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 40) = 0;
}

void *specialized LocalizedStringResource._withExtensionForBundle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  outlined init with take of LocalePreferences?(a1 + 96, (uint64_t)v141, &demangling cache variable for type metadata for String?);
  outlined init with take of LocalePreferences?((uint64_t)v141, (uint64_t)v147, &demangling cache variable for type metadata for String?);
  if (!v147[1])
  {
    if (one-time initialization token for localizedStringLogger != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)localizedStringLogger);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v24, v25)) {
      goto LABEL_32;
    }
    uint64_t v26 = a2;
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    uint64_t v28 = "LocalizedStringResource did not contain a sandbox extension token. Proceeding to lookup localized string witho"
          "ut consuming a sandbox extension.";
    goto LABEL_31;
  }
  uint64_t v8 = v147[0];
  Swift::String v139 = *(Swift::String *)(a1 + 72);
  uint64_t v140 = *(void *)(a1 + 88);
  outlined retain of URL((void **)&v139);
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v131 = v8;
    uint64_t v129 = a2;
    v132._uint64_t countAndFlagsBits = v3;
    Swift::String v142 = v139;
    uint64_t v143 = v140;
    outlined retain of URL((void **)&v139);
    Swift::String v9 = URL.path(percentEncoded:)(1);
    Swift::String v142 = v9;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v9._countAndFlagsBits, (unint64_t)v9._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    v137._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v10 = specialized Set._Variant.insert(_:)(&v133, 0x2FuLL);
    uint64_t countAndFlagsBits = v137._countAndFlagsBits;
    Swift::String v12 = v142;
    uint64_t v13 = ((unint64_t)v142._object >> 56) & 0xF;
    if (((uint64_t)v142._object & 0x2000000000000000) == 0) {
      uint64_t v13 = v142._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v13)
    {
      uint64_t v128 = a3;
      Swift::String v137 = v142;
      MEMORY[0x1F4188790](v10);
      long long v122 = &v137;
      uint64_t v123 = countAndFlagsBits;
      swift_bridgeObjectRetain();
      uint64_t v14 = v132._countAndFlagsBits;
      uint64_t v15 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v121, v12._countAndFlagsBits, (unint64_t)v12._object);
      uint64_t v4 = v14;
      if (v16 == 1)
      {
        uint64_t v17 = v14;
        unint64_t object = (unint64_t)v137._object;
        Swift::Int v18 = v137._countAndFlagsBits;
        swift_bridgeObjectRetain();
        CFOptionFlags v20 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v18, object, countAndFlagsBits);
        unint64_t v22 = v21;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v4 = v17;
      }
      else
      {
        CFOptionFlags v20 = (void (*)(char *, void))v15;
        unint64_t v22 = v16;
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      a3 = v128;
      a2 = v129;
      if (!v22)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined release of URL((id *)&v139);
        CFOptionFlags v20 = 0;
        unint64_t v22 = 0xE000000000000000;
        goto LABEL_23;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      CFOptionFlags v20 = 0;
      unint64_t v22 = 0xE000000000000000;
      uint64_t v4 = v132._countAndFlagsBits;
      a2 = v129;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of URL((id *)&v139);
LABEL_23:
    int v29 = specialized String.withFileSystemRepresentation<A>(_:)((uint64_t)v20, v22);
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  if (!objc_msgSend( (id) v139._countAndFlagsBits, sel_fileSystemRepresentation))
  {
    outlined release of URL((id *)&v139);
    goto LABEL_25;
  }
  int v29 = foundation_sandbox_check_path();
LABEL_24:
  outlined release of URL((id *)&v139);
  if (!v29)
  {
    if (one-time initialization token for localizedStringLogger != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)localizedStringLogger);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v24, v25)) {
      goto LABEL_32;
    }
    uint64_t v26 = a2;
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    uint64_t v28 = "LocalizedStringResource contained a sandbox extension token but sandbox check passed without consuming the tok"
          "en. Proceeding to lookup localized string without consuming a sandbox extension.";
LABEL_31:
    _os_log_impl(&dword_181795000, v24, v25, v28, v27, 2u);
    char v32 = v27;
    a2 = v26;
    MEMORY[0x185309510](v32, -1, -1);
LABEL_32:

LABEL_33:
    uint64_t v130 = 0;
    uint64_t v131 = 1;
    goto LABEL_34;
  }
LABEL_25:
  String.utf8CString.getter();
  uint64_t v30 = sandbox_extension_consume();
  swift_release();
  if (v30 != -1)
  {
    uint64_t v130 = v30;
    uint64_t v131 = 0;
    goto LABEL_34;
  }
  if (one-time initialization token for localizedStringLogger != -1) {
    swift_once();
  }
  uint64_t v53 = type metadata accessor for Logger();
  __swift_project_value_buffer(v53, (uint64_t)localizedStringLogger);
  outlined retain of LocalizedStringResource(a1);
  outlined retain of LocalizedStringResource(a1);
  long long v54 = Logger.logObject.getter();
  int v55 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v54, (os_log_type_t)v55))
  {
    outlined release of LocalizedStringResource(a1);
    outlined release of LocalizedStringResource(a1);

    goto LABEL_33;
  }
  LODWORD(v131) = v55;
  v132._uint64_t countAndFlagsBits = v4;
  uint64_t v56 = swift_slowAlloc();
  uint64_t v57 = swift_slowAlloc();
  *(void *)&long long v133 = v57;
  *(_DWORD *)uint64_t v56 = 136315394;
  outlined retain of URL((void **)&v139);
  char v58 = _foundation_swift_url_feature_enabled();
  uint64_t v128 = a3;
  uint64_t v130 = v57;
  if (v58)
  {
    uint64_t v127 = (uint64_t)v54;
    uint64_t v129 = a2;
    Swift::String v142 = v139;
    uint64_t v143 = v140;
    outlined retain of URL((void **)&v139);
    Swift::String v59 = URL.path(percentEncoded:)(1);
    Swift::String v142 = v59;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v59._countAndFlagsBits, (unint64_t)v59._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    v137._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v60 = specialized Set._Variant.insert(_:)(&v148, 0x2FuLL);
    uint64_t v61 = v137._countAndFlagsBits;
    Swift::String v62 = v142;
    uint64_t v63 = ((unint64_t)v142._object >> 56) & 0xF;
    if (((uint64_t)v142._object & 0x2000000000000000) == 0) {
      uint64_t v63 = v142._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v63)
    {
      Swift::String v137 = v142;
      MEMORY[0x1F4188790](v60);
      long long v122 = &v137;
      uint64_t v123 = v61;
      swift_bridgeObjectRetain();
      uint64_t v64 = v132._countAndFlagsBits;
      uint64_t v65 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v121, v62._countAndFlagsBits, (unint64_t)v62._object);
      v132._uint64_t countAndFlagsBits = v64;
      if (v66 == 1)
      {
        Swift::String v67 = v137;
        swift_bridgeObjectRetain();
        uint64_t v68 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v67._countAndFlagsBits, (unint64_t)v67._object, v61);
        unint64_t v70 = v69;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v68 = (uint64_t)v65;
        unint64_t v70 = v66;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a2 = v129;
      if (!v70)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined release of URL((id *)&v139);
        uint64_t v68 = 0;
        unint64_t v70 = 0xE000000000000000;
        goto LABEL_107;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v68 = 0;
      unint64_t v70 = 0xE000000000000000;
      a2 = v129;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of URL((id *)&v139);
LABEL_107:
    outlined release of URL((id *)&v139);
    goto LABEL_108;
  }
  uint64_t v100 = a2;
  unint64_t v101 = (void *)v139._countAndFlagsBits;
  id v102 = objc_msgSend((id)v139._countAndFlagsBits, sel__parameterString);
  if (!v102)
  {
    id v115 = objc_msgSend(v101, sel_path);
    if (v115)
    {
      uint64_t v116 = v115;
      uint64_t v68 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
      unint64_t v70 = v117;

      outlined release of URL((id *)&v139);
    }
    else
    {
      outlined release of URL((id *)&v139);
      uint64_t v68 = 0;
      unint64_t v70 = 0xE000000000000000;
    }
    goto LABEL_109;
  }
  char v103 = v102;
  uint64_t v127 = (uint64_t)v54;
  id v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(v102);
  uint64_t v106 = v105;

  if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
    && (id v107 = objc_msgSend(v101, sel_path)) != 0)
  {
    v108 = v107;
    id v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
    uint64_t v111 = v110;

    v142._uint64_t countAndFlagsBits = (uint64_t)v109;
    v142._unint64_t object = v111;
    swift_bridgeObjectRetain();
    v112._uint64_t countAndFlagsBits = 59;
    v112._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v112);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v113._uint64_t countAndFlagsBits = (uint64_t)v104;
    v113._unint64_t object = v106;
    String.append(_:)(v113);
    swift_bridgeObjectRelease();
  }
  else
  {
    v142._uint64_t countAndFlagsBits = 59;
    v142._unint64_t object = (void *)0xE100000000000000;
    v114._uint64_t countAndFlagsBits = (uint64_t)v104;
    v114._unint64_t object = v106;
    String.append(_:)(v114);
  }
  swift_bridgeObjectRelease();
  outlined release of URL((id *)&v139);
  unint64_t v70 = (unint64_t)v142._object;
  uint64_t v68 = v142._countAndFlagsBits;
  a2 = v100;
LABEL_108:
  long long v54 = v127;
LABEL_109:
  os_log_type_t v118 = v131;
  v142._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v70, (uint64_t *)&v133);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined release of LocalizedStringResource(a1);
  uint64_t v119 = outlined release of LocalizedStringResource(a1);
  *(_WORD *)(v56 + 12) = 1026;
  LODWORD(v142._countAndFlagsBits) = MEMORY[0x185301870](v119);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  _os_log_impl(&dword_181795000, v54, v118, "Unable to consume sandbox extension for path '%s' (errno: %{public}d)", (uint8_t *)v56, 0x12u);
  uint64_t v131 = 1;
  uint64_t v120 = v130;
  swift_arrayDestroy();
  MEMORY[0x185309510](v120, -1, -1);
  MEMORY[0x185309510](v56, -1, -1);

  uint64_t v130 = 0;
  uint64_t v4 = v132._countAndFlagsBits;
  a3 = v128;
LABEL_34:
  Swift::String v137 = *(Swift::String *)(a1 + 72);
  uint64_t v138 = *(void *)(a1 + 88);
  uint64_t v33 = v137._countAndFlagsBits;
  id v34 = objc_allocWithZone((Class)NSBundle);
  outlined retain of URL((void **)&v137);
  id v35 = objc_msgSend(v34, sel_initWithURL_, v33);
  if (!v35)
  {
    outlined release of URL((id *)&v137);
    long long v40 = 0;
    goto LABEL_90;
  }
  unint64_t v36 = v35;
  uint64_t v37 = *(void *)(a2 + 32);
  if (v37)
  {
    uint64_t v38 = v4;
    uint64_t v39 = *(void *)(a2 + 24);
    outlined retain of String.LocalizationOptions(a2);
    goto LABEL_64;
  }
  v132._uint64_t countAndFlagsBits = v4;
  uint64_t v129 = a2;
  outlined retain of String.LocalizationOptions(a2);
  id v41 = objc_msgSend(v36, sel_localizations);
  if (!v41) {
    id v41 = (id)_ContiguousArrayBuffer._asCocoaArray()();
  }
  long long v42 = self;
  uint64_t v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_1821037E0;
  uint64_t v128 = a3;
  long long v136 = *(_OWORD *)(a3 + 56);
  uint64_t v44 = *((void *)&v136 + 1);
  uint64_t ObjectType = swift_getObjectType();
  LOBYTE(v142._countAndFlagsBits) = 1;
  Swift::UInt v46 = *(uint64_t (**)(Swift::String *, uint64_t, uint64_t))(v44 + 416);
  outlined retain of Locale((uint64_t)&v136);
  uint64_t v47 = v46(&v142, ObjectType, v44);
  uint64_t v49 = v48;
  outlined release of Locale((uint64_t)&v136);
  *(void *)(v43 + 32) = v47;
  *(void *)(v43 + 40) = v49;
  id v50 = objc_msgSend(v42, sel_preferredLocalizationsFromArray_forPreferences_, v41, _ContiguousArrayBuffer._asCocoaArray()());

  swift_unknownObjectRelease();
  if (!v50)
  {
    long long v52 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v38 = v132._countAndFlagsBits;
    a3 = v128;
LABEL_58:
    a2 = v129;
    if (!v52[2])
    {
      swift_bridgeObjectRelease();
      uint64_t v39 = 0;
      uint64_t v37 = 0;
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }
  uint64_t v51 = swift_dynamicCastClass();
  uint64_t v38 = v132._countAndFlagsBits;
  a3 = v128;
  if (v51)
  {
    long long v52 = (void *)v51;

    goto LABEL_58;
  }
  swift_unknownObjectRelease();
  objc_msgSend(v50, sel_copy);
  unint64_t v71 = _bridgeCocoaArray<A>(_:)();
  swift_unknownObjectRelease();
  long long v52 = (void *)specialized _arrayForceCast<A, B>(_:)(v71);

  swift_bridgeObjectRelease();
  if (v52[2])
  {
    a2 = v129;
LABEL_63:
    uint64_t v39 = v52[4];
    uint64_t v37 = v52[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_64;
  }
  swift_bridgeObjectRelease();
  uint64_t v39 = 0;
  uint64_t v37 = 0;
  a2 = v129;
LABEL_64:
  char v72 = *(unsigned char *)(a2 + 16);
  int v73 = *(unsigned __int8 *)(a2 + 17);
  uint64_t v74 = *(void *)(a3 + 8);
  uint64_t v127 = *(void *)a3;
  Swift::String v132 = *(Swift::String *)a2;
  Swift::String v142 = v132;
  LOBYTE(v143) = v72;
  int v124 = v73;
  BYTE1(v143) = v73;
  uint64_t v125 = v39;
  uint64_t v144 = v39;
  uint64_t v145 = v37;
  char v146 = 1;
  outlined init with take of LocalePreferences?(a3 + 40, (uint64_t)v135, &demangling cache variable for type metadata for String?);
  uint64_t v75 = *(void *)(a3 + 56);
  uint64_t v76 = *(void *)(a3 + 64);
  if (v132._countAndFlagsBits) {
    uint64_t v77 = v132._countAndFlagsBits;
  }
  else {
    uint64_t v77 = MEMORY[0x1E4FBC860];
  }
  long long v133 = *(_OWORD *)(a3 + 16);
  uint64_t v134 = *(void *)(a3 + 32);
  uint64_t v78 = v133;
  uint64_t v148 = v77;
  uint64_t v149 = 0;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  uint64_t v128 = v74;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v79 = v36;
  swift_bridgeObjectRetain();
  outlined retain of String.LocalizationValue((uint64_t)&v133);
  swift_bridgeObjectRetain();
  uint64_t v126 = v76;
  uint64_t v80 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n(v78, &v148, v75, v76);
  v132._uint64_t countAndFlagsBits = v38;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  id v81 = v79;
  uint64_t v129 = v80;
  if (v37)
  {
    swift_bridgeObjectRetain();
    id v82 = objc_msgSend(v81, sel_localizations);
    if (!v82) {
      id v82 = (id)_ContiguousArrayBuffer._asCocoaArray()();
    }
    id v83 = self;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v84 = swift_allocObject();
    *(_OWORD *)(v84 + 16) = xmmword_1821037E0;
    *(void *)(v84 + 32) = v125;
    *(void *)(v84 + 40) = v37;
    id v85 = objc_msgSend(v83, sel_preferredLocalizationsFromArray_forPreferences_, v82, _ContiguousArrayBuffer._asCocoaArray()());

    swift_unknownObjectRelease();
    if (v85)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }
      uint64_t v86 = swift_dynamicCastClass();
      if (v86)
      {
        id v87 = (void *)v86;
      }
      else
      {
        swift_unknownObjectRelease();
        objc_msgSend(v85, sel_copy);
        unint64_t v88 = _bridgeCocoaArray<A>(_:)();
        swift_unknownObjectRelease();
        id v87 = (void *)specialized _arrayForceCast<A, B>(_:)(v88);

        swift_bridgeObjectRelease();
      }
    }
    else
    {
      id v87 = (void *)MEMORY[0x1E4FBC860];
    }
  }
  else
  {
    id v87 = 0;
  }
  uint64_t v89 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v90 = String._bridgeToObjectiveCImpl()();
  outlined init with take of LocalePreferences?((uint64_t)v135, (uint64_t)&v148, &demangling cache variable for type metadata for String?);
  if (v149)
  {
    id v91 = (void *)String._bridgeToObjectiveCImpl()();
    if (!v87) {
      goto LABEL_81;
    }
    goto LABEL_80;
  }
  id v91 = 0;
  if (v87) {
LABEL_80:
  }
    id v87 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
LABEL_81:
  id v92 = objc_msgSend(v81, sel_localizedStringForKey_value_table_localizations_, v89, v90, v91, v87);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  long long v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
  uint64_t v94 = v93;

  uint64_t v95 = v129;
  if (!*(void *)(v129 + 16))
  {
    if ((v124 & 1) != 0
      || (String._bridgeToObjectiveCImpl()(),
          id v98 = (id)_CFStringGetFormatSpecifierConfiguration(),
          swift_unknownObjectRelease(),
          !v98))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();

      swift_bridgeObjectRelease();
      goto LABEL_89;
    }
  }
  swift_unknownObjectRetain();
  uint64_t v96 = v126;
  uint64_t v97 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n(v95, v75, v126);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  long long v40 = specialized withVaList<A>(_:_:)(v97, (uint64_t)v40, v94, v75, v96);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
LABEL_89:
  outlined release of String.LocalizationValue((uint64_t)&v133);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of URL((id *)&v137);
LABEL_90:
  if ((v131 & 1) == 0) {
    sandbox_extension_release();
  }
  return v40;
}

void *String.init(localized:table:bundle:locale:comment:)(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v7 = *a1;
  uint64_t v8 = *a5;
  uint64_t v9 = a5[1];
  __int16 v24 = 256;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  char v27 = 0;
  v23[0] = MEMORY[0x1E4FBC860];
  memset(&v23[1], 0, 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v21 = v9;
  uint64_t v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n(v7, v23, v8, v9);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (a4) {
    id v11 = a4;
  }
  else {
    id v11 = objc_msgSend(self, sel_mainBundle);
  }
  uint64_t v12 = String._bridgeToObjectiveCImpl()();
  id v22 = a4;
  swift_bridgeObjectRelease();
  uint64_t v13 = String._bridgeToObjectiveCImpl()();
  if (a3) {
    uint64_t v14 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    uint64_t v14 = 0;
  }
  id v15 = objc_msgSend(v11, sel_localizedStringForKey_value_table_localizations_, v12, v13, v14, 0);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  unint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  if (*(void *)(v10 + 16))
  {
    swift_unknownObjectRetain();
    uint64_t v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n(v10, v8, v9);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v16 = specialized withVaList<A>(_:_:)(v19, (uint64_t)v16, v18, v8, v21);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v16;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (v6)
  {
    uint64_t v25 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    uint64_t v7 = v25;
    for (uint64_t i = a1 + 32; ; i += 120)
    {
      closure #1 in String.LocalizationValue.argumentsWithReplacements(_:locale:)(i, a2, a3, a4, (uint64_t)v23);
      if (v5) {
        break;
      }
      uint64_t v5 = 0;
      uint64_t v25 = v7;
      unint64_t v14 = *(void *)(v7 + 16);
      unint64_t v13 = *(void *)(v7 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        uint64_t v7 = v25;
      }
      *(void *)(v7 + 16) = v14 + 1;
      uint64_t v15 = v7 + 120 * v14;
      long long v16 = v23[0];
      long long v17 = v23[1];
      long long v18 = v23[3];
      *(_OWORD *)(v15 + 64) = v23[2];
      *(_OWORD *)(v15 + 80) = v18;
      *(_OWORD *)(v15 + 32) = v16;
      *(_OWORD *)(v15 + 48) = v17;
      long long v19 = v23[4];
      long long v20 = v23[5];
      long long v21 = v23[6];
      *(unsigned char *)(v15 + 144) = v24;
      *(_OWORD *)(v15 + 112) = v20;
      *(_OWORD *)(v15 + 128) = v21;
      *(_OWORD *)(v15 + 96) = v19;
      if (!--v6) {
        return v7;
      }
    }
    swift_release();
  }
  return v7;
}

void sub_181849004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, uint64_t a13, uint64_t *a14)
{
  if (a2 == 1)
  {
    id v17 = objc_begin_catch(exception_object);
    if (a14)
    {
      CFGetAllocator(v15);
      *a14 = _CFBundleCreateError();
    }
    long long v18 = _NSOSLog();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = [v14 bundleURL];
      *(_DWORD *)(v16 - 128) = 138412546;
      uint64_t v20 = v16 - 128;
      *(void *)(v20 + 4) = v19;
      *(_WORD *)(v16 - 116) = 2112;
      *(void *)(v20 + 14) = v17;
      _os_log_error_impl(&dword_181795000, v18, OS_LOG_TYPE_ERROR, "NSBundle %@ loading failed because an exception was raised during loading %@", (uint8_t *)(v16 - 128), 0x16u);
    }
    objc_end_catch();
    JUMPOUT(0x181848D98);
  }
  _Unwind_Resume(exception_object);
}

id *outlined release of URL(id *a1)
{
  swift_release();
  swift_release();
  return a1;
}

void **outlined retain of URL(void **a1)
{
  uint64_t v2 = *a1;
  swift_retain();
  id v3 = v2;
  swift_retain();
  return a1;
}

void *_NSBundlePathFromExecutablePath(void *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = objc_msgSend((id)objc_msgSend(a1, "_stringByResolvingSymlinksInPathUsingCache:", 1), "stringByDeletingLastPathComponent");
  uint64_t v2 = (void *)[v1 stringByDeletingLastPathComponent];
  id v3 = (void *)[v2 lastPathComponent];
  if (!objc_msgSend(v3, "compare:options:range:", @"Contents", 0, 0, objc_msgSend(v3, "length"))
    || !objc_msgSend(v3, "compare:options:range:", @"Executables", 0, 0, objc_msgSend(v3, "length"))
    && (uint64_t v2 = (void *)[v2 stringByDeletingLastPathComponent],
        uint64_t v4 = (void *)[v2 lastPathComponent],
        !objc_msgSend(v4, "compare:options:range:", @"Support Files", 0, 0, objc_msgSend(v4, "length"))))
  {
    uint64_t v5 = (void *)[v2 stringByDeletingLastPathComponent];
    memset(&v7, 0, sizeof(v7));
    if ([v5 getFileSystemRepresentation:v8 maxLength:1024])
    {
      if (!stat(v8, &v7))
      {
        if (access(v8, 4))
        {
          getpid();
          sandbox_check();
        }
        else if ((v7.st_mode & 0xF000) == 0x4000)
        {
          return v5;
        }
      }
    }
  }
  return v1;
}

uint64_t _NSBundleInitializePrincipalClass(uint64_t result)
{
  if (result)
  {
    Class = object_getClass((id)result);
    uint64_t result = class_respondsToSelector(Class, sel_self);
    if (result)
    {
      return self;
    }
  }
  return result;
}

Class _NSBundleGetPrincipalClassFromInfoDict(unint64_t *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int v2 = atomic_load(a1 + 1);
  if ((v2 & 0x4000000) == 0)
  {
    id v3 = _NSOSLog();
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      return 0;
    }
    *(_DWORD *)id v22 = 138412290;
    *(void *)&v22[4] = [a1 bundleURL];
    long long v21 = "NSBundle %@ principal class is nil because the bundle is not loaded";
LABEL_20:
    _os_log_debug_impl(&dword_181795000, v3, OS_LOG_TYPE_DEBUG, v21, v22, 0xCu);
    return 0;
  }
  uint64_t v5 = (void *)[a1 infoDictionary];
  int64_t v6 = (NSString *)[v5 objectForKey:@"NSPrincipalClass"];
  stat v7 = (NSString *)a1[7];
  if (v6)
  {
    uint64_t v8 = v6;
    Class result = NSClassFromString(v6);
    if (result) {
      return result;
    }
    if (v7)
    {
      uint64_t v9 = _NSOSLog();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)id v22 = 138412802;
        *(void *)&v22[4] = [a1 bundleURL];
        *(_WORD *)&v22[12] = 2112;
        *(void *)&v22[14] = v7;
        *(_WORD *)&v22[22] = 2112;
        uint64_t v23 = v8;
        uint64_t v10 = "NSBundle %@ principal class is using first class name %@ because the bundle's principal class name %@ is not present";
        id v11 = v9;
        uint32_t v12 = 32;
LABEL_22:
        _os_log_debug_impl(&dword_181795000, v11, OS_LOG_TYPE_DEBUG, v10, v22, v12);
        goto LABEL_11;
      }
      goto LABEL_11;
    }
LABEL_17:
    id v3 = _NSOSLog();
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      return 0;
    }
    *(_DWORD *)id v22 = 138412290;
    *(void *)&v22[4] = [a1 bundleURL];
    long long v21 = "NSBundle %@ principal class is nil because all fallbacks have failed";
    goto LABEL_20;
  }
  if (!v7)
  {
    uint64_t v14 = objc_msgSend((id)objc_msgSend(a1, "bundlePath"), "_stringByResolvingSymlinksInPathUsingCache:", 0);
    uint64_t v15 = (id *)+[__NSBundleTables bundleTables]();
    uint64_t v16 = -[__NSBundleTables bundleForPath:](v15, v14);
    if (v16)
    {
      id v17 = v16;
      if (v16 != (id *)a1)
      {
        long long v18 = (os_unfair_lock_s *)(v16 + 8);
        os_unfair_lock_lock((os_unfair_lock_t)v16 + 16);
        uint64_t v19 = (NSString *)v17[7];
        os_unfair_lock_unlock(v18);
        if (v19)
        {
          [v5 setObject:v19 forKey:@"NSPrincipalClass"];
          Class v20 = NSClassFromString(v19);

          return v20;
        }
      }
    }
    goto LABEL_17;
  }
  unint64_t v13 = _NSOSLog();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)id v22 = 138412546;
    *(void *)&v22[4] = [a1 bundleURL];
    *(_WORD *)&v22[12] = 2112;
    *(void *)&v22[14] = v7;
    uint64_t v10 = "NSBundle %@ principal class is using first class name %@ because the bundle has no principal class name";
    id v11 = v13;
    uint32_t v12 = 22;
    goto LABEL_22;
  }
LABEL_11:
  objc_msgSend(v5, "setObject:forKey:", v7, @"NSPrincipalClass", *(_OWORD *)v22, *(void *)&v22[16], v23);
  return NSClassFromString(v7);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t outlined release of String.LocalizationValue(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of String.LocalizationValue(uint64_t a1)
{
  return a1;
}

uint64_t foundation_sandbox_check_path()
{
  return sandbox_check();
}

Swift::Void __swiftcall _NSLocalizedStringResourceSwiftWrapper.encode(with:)(NSCoder with)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if ([(objc_class *)with.super.isa allowsKeyedCoding])
  {
    type metadata accessor for PropertyListEncoder();
    uint64_t inited = (void *)swift_initStackObject();
    uint64_t v4 = MEMORY[0x1E4FBC868];
    inited[2] = 200;
    inited[3] = v4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
    uint64_t v5 = swift_allocObject();
    *(_DWORD *)(v5 + 16) = 0;
    int64_t v6 = (os_unfair_lock_s *)(v5 + 16);
    inited[4] = v5;
    long long v7 = *(_OWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 64);
    long long v8 = *(_OWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 96);
    v24[5] = *(_OWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 80);
    v24[6] = v8;
    long long v9 = *(_OWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 32);
    v24[3] = *(_OWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 48);
    v24[4] = v7;
    long long v10 = *(_OWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 16);
    v24[0] = *(_OWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped);
    v24[1] = v10;
    v24[2] = v9;
    swift_retain();
    outlined retain of LocalizedStringResource((uint64_t)v24);
    os_unfair_lock_lock(v6);
    swift_release();
    swift_retain();
    os_unfair_lock_unlock(v6);
    swift_release();
    uint64_t v11 = (uint64_t)specialized PropertyListEncoder._encodeBPlist<A>(_:)(v24);
    unint64_t v13 = v12;
    outlined release of LocalizedStringResource((uint64_t)v24);
    switch(v13 >> 62)
    {
      case 1uLL:
        if (v11 >> 32 < (int)v11) {
          __break(1u);
        }
        outlined copy of Data._Representation(v11, v13);
        uint64_t v14 = __DataStorage.bridgedReference(_:)((int)v11, v11 >> 32);
        goto LABEL_8;
      case 2uLL:
        uint64_t v15 = *(void *)(v11 + 16);
        uint64_t v16 = *(void *)(v11 + 24);
        outlined copy of Data._Representation(v11, v13);
        swift_retain();
        swift_retain();
        id v17 = __DataStorage.bridgedReference(_:)(v15, v16);
        swift_release();
        swift_release();
        goto LABEL_9;
      case 3uLL:
        uint64_t v14 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
        goto LABEL_8;
      default:
        uint64_t v18 = v11;
        __int16 v19 = v13;
        char v20 = BYTE2(v13);
        char v21 = BYTE3(v13);
        char v22 = BYTE4(v13);
        char v23 = BYTE5(v13);
        uint64_t v14 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, &v18, BYTE6(v13));
LABEL_8:
        id v17 = v14;
LABEL_9:
        outlined consume of Data._Representation(v11, v13);
        [(objc_class *)with.super.isa encodeObject:v17 forKey:String._bridgeToObjectiveCImpl()()];
        outlined consume of Data._Representation(v11, v13);

        swift_unknownObjectRelease();
        swift_setDeallocating();
        swift_release();
        swift_bridgeObjectRelease();
        break;
    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return self;
}

void *specialized String.init(localized:options:)(long long *a1, long long *a2)
{
  long long v2 = a1[5];
  *(_OWORD *)&v18[16] = a1[4];
  long long v19 = v2;
  long long v20 = a1[6];
  long long v3 = a1[1];
  long long v15 = *a1;
  long long v16 = v3;
  long long v4 = a1[3];
  long long v17 = a1[2];
  *(_OWORD *)uint64_t v18 = v4;
  long long v5 = *a2;
  long long v6 = a2[1];
  *(_OWORD *)((char *)v22 + 9) = *(long long *)((char *)a2 + 25);
  long long v21 = v5;
  v22[0] = v6;
  outlined retain of String.LocalizationOptions((uint64_t)&v21);
  outlined retain of LocalizedStringResource((uint64_t)&v15);
  long long v7 = specialized LocalizedStringResource._withExtensionForBundle<A>(_:)((uint64_t)&v15, (uint64_t)&v21, (uint64_t)&v15);
  uint64_t v9 = v8;
  outlined release of LocalizedStringResource((uint64_t)&v15);
  outlined release of String.LocalizationOptions((uint64_t)&v21);
  if (v9)
  {
    outlined release of String.LocalizationOptions((uint64_t)&v21);
    outlined release of LocalizedStringResource((uint64_t)&v15);
  }
  else
  {
    long long v23 = v16;
    uint64_t v24 = v17;
    v13[2] = v16;
    uint64_t v14 = v17;
    long long v12 = v21;
    v13[0] = v22[0];
    *(_OWORD *)((char *)v13 + 9) = *(_OWORD *)((char *)v22 + 9);
    long long v25 = *(_OWORD *)&v18[8];
    long long v11 = *(_OWORD *)&v18[8];
    outlined retain of String.LocalizationValue((uint64_t)&v23);
    outlined retain of Locale((uint64_t)&v25);
    long long v7 = String.LocalizationValue.resolve(key:options:table:bundle:locale:performLocalization:)(v7, 0, &v12, (uint64_t)v7, 0, 0, (uint64_t *)&v11, 0);
    outlined release of LocalizedStringResource((uint64_t)&v15);
    outlined release of Locale((uint64_t)&v25);
    outlined release of String.LocalizationValue((uint64_t)&v23);
    outlined release of String.LocalizationOptions((uint64_t)&v21);
  }
  return v7;
}

uint64_t outlined release of LocalizedStringResource(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined release of String.LocalizationOptions(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of String.LocalizationOptions(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of LocalizedStringResource(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  id v3 = v2;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t *specialized PropertyListEncoder._encodeBPlist<A>(_:)(_OWORD *a1)
{
  long long v4 = specialized PropertyListEncoder.encodeToTopLevelContainerBPlist<A>(_:)(a1);
  if (!v2)
  {
    uint64_t v5 = (uint64_t)v4;
    unsigned int v6 = *((unsigned __int8 *)v4 + 40);
    uint64_t v7 = *((void *)v4 + 2);
    unint64_t v8 = *((void *)v4 + 3);
    uint64_t v9 = *((void *)v4 + 4);
    switch(v6 >> 4)
    {
      case 0u:
        goto LABEL_23;
      case 1u:
      case 2u:
      case 3u:
      case 4u:
        uint64_t v10 = type metadata accessor for EncodingError();
        swift_allocError();
        long long v12 = v11;
        uint64_t v60 = (char *)v11
            + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context))
                     + 48);
        v12[3] = &type metadata for LocalizedStringResource;
        unint64_t v13 = (_OWORD *)swift_allocObject();
        *long long v12 = v13;
        long long v14 = a1[1];
        v13[1] = *a1;
        v13[2] = v14;
        long long v15 = a1[3];
        _OWORD v13[3] = a1[2];
        v13[4] = v15;
        long long v16 = a1[5];
        v13[5] = a1[4];
        v13[6] = v16;
        v13[7] = a1[6];
        uint64_t v55 = 0;
        unint64_t v56 = 0xE000000000000000;
        outlined retain of LocalizedStringResource((uint64_t)a1);
        outlined copy of _BPlistEncodingFormat.Reference.Backing(v7, v8, v9, v6);
        _StringGuts.grow(_:)(54);
        v17._uint64_t countAndFlagsBits = 0x6576656C2D706F54;
        v17._unint64_t object = (void *)0xEA0000000000206CLL;
        String.append(_:)(v17);
        v18._unint64_t object = (void *)0x80000001821F7450;
        v18._uint64_t countAndFlagsBits = 0xD000000000000017;
        String.append(_:)(v18);
        unint64_t v19 = 0xD00000000000002ALL;
        long long v20 = " encoded as number property list fragment.";
        goto LABEL_4;
      case 7u:
        uint64_t v22 = type metadata accessor for EncodingError();
        swift_allocError();
        uint64_t v24 = v23;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
        v24[3] = &type metadata for LocalizedStringResource;
        long long v25 = (_OWORD *)swift_allocObject();
        *uint64_t v24 = v25;
        long long v26 = a1[1];
        v25[1] = *a1;
        v25[2] = v26;
        long long v27 = a1[3];
        v25[3] = a1[2];
        v25[4] = v27;
        long long v28 = a1[5];
        v25[5] = a1[4];
        v25[6] = v28;
        v25[7] = a1[6];
        uint64_t v55 = 0;
        unint64_t v56 = 0xE000000000000000;
        outlined retain of LocalizedStringResource((uint64_t)a1);
        _StringGuts.grow(_:)(52);
        v29._uint64_t countAndFlagsBits = 0x6576656C2D706F54;
        v29._unint64_t object = (void *)0xEA0000000000206CLL;
        String.append(_:)(v29);
        v30._unint64_t object = (void *)0x80000001821F7450;
        v30._uint64_t countAndFlagsBits = 0xD000000000000017;
        String.append(_:)(v30);
        unint64_t v31 = 0xD000000000000028;
        char v32 = " encoded as date property list fragment.";
        goto LABEL_24;
      case 9u:
        unint64_t v33 = v9 | v8;
        if (!(v9 | v8 | v7) && v6 == 144
          || (v6 == 144 ? (BOOL v34 = v7 == 1) : (BOOL v34 = 0), v34 ? (v35 = v33 == 0) : (v35 = 0), v35))
        {
          uint64_t v10 = type metadata accessor for EncodingError();
          swift_allocError();
          long long v12 = v48;
          uint64_t v60 = (char *)v48
              + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context))
                       + 48);
          v12[3] = &type metadata for LocalizedStringResource;
          uint64_t v49 = (_OWORD *)swift_allocObject();
          *long long v12 = v49;
          long long v50 = a1[1];
          v49[1] = *a1;
          v49[2] = v50;
          long long v51 = a1[3];
          v49[3] = a1[2];
          v49[4] = v51;
          long long v52 = a1[5];
          v49[5] = a1[4];
          v49[6] = v52;
          v49[7] = a1[6];
          uint64_t v55 = 0;
          unint64_t v56 = 0xE000000000000000;
          outlined retain of LocalizedStringResource((uint64_t)a1);
          outlined copy of _BPlistEncodingFormat.Reference.Backing(v7, v8, v9, v6);
          _StringGuts.grow(_:)(55);
          v53._uint64_t countAndFlagsBits = 0x6576656C2D706F54;
          v53._unint64_t object = (void *)0xEA0000000000206CLL;
          String.append(_:)(v53);
          v54._unint64_t object = (void *)0x80000001821F7450;
          v54._uint64_t countAndFlagsBits = 0xD000000000000017;
          String.append(_:)(v54);
          unint64_t v19 = 0xD00000000000002BLL;
          long long v20 = " encoded as BOOLean property list fragment.";
LABEL_4:
          unint64_t v21 = (unint64_t)(v20 - 32) | 0x8000000000000000;
          uint64_t v1 = &v55;
          String.append(_:)(*(Swift::String *)&v19);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(void *, void, uint64_t))(*(void *)(v10 - 8) + 104))(v12, *MEMORY[0x1E4FBBAA0], v10);
        }
        else
        {
          if (v6 != 144 || v7 != 2 || v33 != 0)
          {
LABEL_22:
            uint64_t v38 = swift_slowAlloc();
            uint64_t v55 = MEMORY[0x1E4FBC860];
            LOBYTE(v56) = 0;
            uint64_t v57 = v38;
            uint64_t v58 = 0x2000;
            uint64_t v59 = 0;
            uint64_t v1 = (uint64_t *)_BPlistEncodingFormat.Writer.serializePlist(_:)(v5);
            swift_bridgeObjectRelease();
            outlined consume of Data._Representation(0, 0xC000000000000000);
            swift_release();
            return v1;
          }
LABEL_23:
          uint64_t v22 = type metadata accessor for EncodingError();
          swift_allocError();
          uint64_t v24 = v39;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
          v24[3] = &type metadata for LocalizedStringResource;
          long long v40 = (_OWORD *)swift_allocObject();
          *uint64_t v24 = v40;
          long long v41 = a1[1];
          v40[1] = *a1;
          v40[2] = v41;
          long long v42 = a1[3];
          v40[3] = a1[2];
          v40[4] = v42;
          long long v43 = a1[5];
          v40[5] = a1[4];
          v40[6] = v43;
          v40[7] = a1[6];
          uint64_t v55 = 0;
          unint64_t v56 = 0xE000000000000000;
          outlined retain of LocalizedStringResource((uint64_t)a1);
          _StringGuts.grow(_:)(54);
          v44._uint64_t countAndFlagsBits = 0x6576656C2D706F54;
          v44._unint64_t object = (void *)0xEA0000000000206CLL;
          String.append(_:)(v44);
          v45._unint64_t object = (void *)0x80000001821F7450;
          v45._uint64_t countAndFlagsBits = 0xD000000000000017;
          String.append(_:)(v45);
          unint64_t v31 = 0xD00000000000002ALL;
          char v32 = " encoded as string property list fragment.";
LABEL_24:
          unint64_t v46 = (unint64_t)(v32 - 32) | 0x8000000000000000;
          uint64_t v1 = &v55;
          String.append(_:)(*(Swift::String *)&v31);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(void *, void, uint64_t))(*(void *)(v22 - 8) + 104))(v24, *MEMORY[0x1E4FBBAA0], v22);
        }
        swift_willThrow();
        swift_release();
        break;
      default:
        goto LABEL_22;
    }
  }
  return v1;
}

uint64_t _NSOSLog()
{
  if (qword_1EB1ED5B8 != -1) {
    dispatch_once(&qword_1EB1ED5B8, &__block_literal_global_34);
  }
  return _MergedGlobals_111;
}

uint64_t destroy for Locale.Language(void *a1)
{
  if (a1[1])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[5])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t result = a1[9];
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _NSUnarchiverPointerTableEntryRetain(uint64_t a1, uint64_t a2)
{
  __int16 v2 = (*(unsigned char *)(a2 + 9))++ + 1;
  if ((v2 & 0x100) == 0) {
    return a2;
  }
  __break(1u);
  return result;
}

NSUInteger NSPageSize(void)
{
  return *MEMORY[0x1E4F14B00];
}

__n128 protocol witness for Collection.startIndex.getter in conformance AttributedString.UnicodeScalarView@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 8);
  long long v3 = *(_OWORD *)(v1 + 24);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void message_handler(uint64_t a1, id a2)
{
  if (object_getClass(a2) == (Class)MEMORY[0x1E4F145A8])
  {
    uint64_t v5 = *(void *)(a1 + 16);
    if (v5)
    {
      unsigned int v6 = *(void (**)(void))(v5 + 16);
      v6();
    }
  }
  else if (object_getClass(a2) == (Class)MEMORY[0x1E4F14590])
  {
    if (*(void *)(a1 + 24))
    {
      xpc_object_t reply = xpc_dictionary_create_reply(a2);
      (*(void (**)(void))(*(void *)(a1 + 24) + 16))();
      if (reply)
      {
        xpc_release(reply);
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void message_handler_0(void *a1, id a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  Class Class = object_getClass(a2);
  if (Class == (Class)MEMORY[0x1E4F14590])
  {
    xpc_object_t v6 = __NSXPCCONNECTION_IS_CREATING_REPLY__(a2);
    message_handler_message(a1, a2, (uint64_t)v6);
    if (v6)
    {
      xpc_release(v6);
    }
  }
  else if (Class == (Class)MEMORY[0x1E4F145A8])
  {
    message_handler_error((uint64_t)a1, (uint64_t)a2);
  }
  else
  {
    uint64_t v5 = _NSXPCLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      int v7 = 138543362;
      unint64_t v8 = a1;
      _os_log_fault_impl(&dword_181795000, v5, OS_LOG_TYPE_FAULT, "%{public}@: Unexpected data on XPC connection, invalidating the connection.", (uint8_t *)&v7, 0xCu);
    }
    [a1 invalidate];
  }
}

void message_handler_message(void *a1, xpc_object_t xdict, uint64_t a3)
{
  uint64_t uint64 = xpc_dictionary_get_uint64(xdict, "f");
  uint64_t v7 = uint64;
  if ((uint64 & 4) != 0)
  {
    if ((uint64 & 8) != 0)
    {
      uint64_t v9 = xpc_dictionary_get_uint64(xdict, "proxynum");
      if (v9)
      {
        uint64_t v10 = a1[7];
        long long v11 = a1[3];
        -[_NSXPCConnectionExportedObjectTable receivedReleaseForProxyNumber:userQueue:](v10, v9, v11);
      }
    }
    else if ((uint64 & 0x10) != 0)
    {
      [a1 _decodeProgressMessageWithData:xdict flags:uint64];
    }
  }
  else
  {
    unint64_t v8 = (void *)MEMORY[0x185308110]();
    [a1 _decodeAndInvokeMessageWithEvent:xdict reply:a3 flags:v7];
  }
}

xpc_object_t __NSXPCCONNECTION_IS_CREATING_REPLY__(void *a1)
{
  return xpc_dictionary_create_reply(a1);
}

void sub_18184B128(_Unwind_Exception *a1)
{
}

void sub_18184B158(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int buf, long long a20,uint64_t a21)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v22 = objc_begin_catch(a1);
      long long v23 = _NSXPCLongMessageLog();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
      {
        if (*v21) {
          uint64_t v24 = *v21;
        }
        else {
          uint64_t v24 = 0;
        }
        Name = sel_getName(v24);
        uint64_t v26 = [v22 debugDescription];
        buf = 138543874;
        WORD2(a20) = 2082;
        *(void *)((char *)&a20 + 6) = Name;
        HIWORD(a20) = 2114;
        a21 = v26;
        _os_log_fault_impl(&dword_181795000, v23, OS_LOG_TYPE_FAULT, "%{public}@: Exception caught during invocation of reply block to message '%{public}s'.\n\nException: %{public}@", (uint8_t *)&buf, 0x20u);
      }
      if (dyld_program_sdk_at_least()) {
        objc_exception_throw(v22);
      }
      objc_end_catch();
      JUMPOUT(0x18184B044);
    }
    objc_begin_catch(a1);
    JUMPOUT(0x18184B048);
  }
  _Unwind_Resume(a1);
}

void sub_18184B24C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18184B260);
  }
  _Unwind_Resume(a1);
}

void sub_18184B270(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __CFString *a17, uint64_t a18, long long buf, int a20,__int16 a21,__int16 a22,uint64_t a23)
{
  if (a2 == 2)
  {
    id v25 = objc_begin_catch(a1);
    uint64_t v26 = _NSXPCLongMessageLog();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
    {
      if (v23[4]) {
        Swift::String v30 = (const char *)v23[4];
      }
      else {
        Swift::String v30 = 0;
      }
      Name = sel_getName(v30);
      uint64_t v32 = [v25 debugDescription];
      LODWORD(buf) = 138543874;
      *(void *)((char *)&buf + 4) = v24;
      WORD6(buf) = 2082;
      *(void *)((char *)&buf + 14) = Name;
      a22 = 2114;
      a23 = v32;
      _os_log_fault_impl(&dword_181795000, v26, OS_LOG_TYPE_FAULT, "%{public}@: Exception caught during decoding of reply to message '%{public}s', dropping incoming message and calling failure block.\n\nIgnored Exception: %{public}@", (uint8_t *)&buf, 0x20u);
    }
    if (objc_getProperty(v23, v27, 16, 1))
    {
      id Property = objc_getProperty(v23, v28, 16, 1);
      a17 = @"NSDebugDescription";
      a18 = [v24 _errorDescription];
      +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 4101, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a18 forKeys:&a17 count:1]);
      __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__((uint64_t)Property);
    }
    -[_NSXPCConnectionExpectedReplyInfo cleanup]((uint64_t)v23);
    objc_end_catch();
    JUMPOUT(0x18184B064);
  }
  _Unwind_Resume(a1);
}

void sub_18184B3D8(_Unwind_Exception *a1)
{
}

void sub_18184C050(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *exc_buf, uint64_t a14, int a15, int a16)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v19 = objc_begin_catch(a1);
      long long v20 = _NSXPCLongMessageLog();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
      {
        unint64_t v21 = *(const char **)(v18 - 200);
        if (v21) {
          Name = sel_getName(v21);
        }
        else {
          Name = "(unknown selector)";
        }
        uint64_t v23 = [v19 debugDescription];
        *(_DWORD *)(v18 - 192) = 138544130;
        uint64_t v24 = v18 - 192;
        *(void *)(v24 + 4) = v16;
        *(_WORD *)(v18 - 180) = 2082;
        *(void *)(v24 + 14) = Name;
        *(_WORD *)(v18 - 170) = 2114;
        *(void *)(v18 - 168) = v19;
        *(_WORD *)(v18 - 160) = 2114;
        *(void *)(v24 + 34) = v23;
        _os_log_fault_impl(&dword_181795000, v20, OS_LOG_TYPE_FAULT, "%{public}@: Warning: Exception caught during invocation of selector %{public}s, dropping incoming message and invalidating the connection.\nException: %{public}@\n%{public}@", (uint8_t *)(v18 - 192), 0x2Au);
      }
      [v16 invalidate];
      if (dyld_program_sdk_at_least()) {
        objc_exception_throw(v19);
      }
      objc_end_catch();
      JUMPOUT(0x18184BAFCLL);
    }
    objc_begin_catch(a1);
    if (v17) {
      JUMPOUT(0x18184BB0CLL);
    }
    JUMPOUT(0x18184BB04);
  }
  JUMPOUT(0x18184C328);
}

void sub_18184C194(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18184C1B0);
  }
  JUMPOUT(0x18184C328);
}

void sub_18184C1C8()
{
}

void sub_18184C1F4(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18184C200);
  }
  JUMPOUT(0x18184C328);
}

void sub_18184C2D4(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18184C2ECLL);
  }
  JUMPOUT(0x18184C328);
}

void sub_18184C300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object)
{
  _Block_object_dispose((const void *)(v13 - 240), 8);
  _Unwind_Resume(a1);
}

void sub_18184C330(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18184C328);
}

uint64_t __NSXPCCONNECTION_IS_CALLING_OUT_TO_REPLY_BLOCK__(void *a1)
{
  return [a1 invoke];
}

void sub_18184C720(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_18184C734(_Unwind_Exception *a1)
{
}

id __NSXPCCONNECTION_IS_CALLING_OUT_TO_EXPORTED_OBJECT_S0__(void *a1, const char *a2)
{
  return [a1 a2];
}

void _sendReplyArgumentsOnly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v12 = [[NSXPCEncoder alloc] initWithStackSpace:v17 size:2048];
  [(NSXPCEncoder *)v12 _setConnection:a1];
  [(NSXPCEncoder *)v12 setDelegate:a1];
  if (*(void *)(a1 + 80)) {
    -[NSXPCCoder setUserInfo:](v12, "setUserInfo:");
  }
  [(NSXPCEncoder *)v12 _encodeInvocationObjectArgumentsOnly:a3 count:a4 typeString:a2 selector:0 isReply:1 into:a7];

  char v15 = atomic_load((unsigned int *)(a1 + 36));
  if ((v15 & 0x40) != 0)
  {
    objc_msgSend(*(id *)(a1 + 152), "sendMessage:", a7, v13, v14);
  }
  else
  {
    long long v16 = *(_xpc_connection_s **)(a1 + 8);
    if (v16) {
      xpc_connection_send_message(v16, a7);
    }
  }
}

void sub_18184C970(_Unwind_Exception *a1)
{
}

void _NSXPCSerializationStartWrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 0x2000) = 0;
  if (a2 && (uint64_t v4 = a3) != 0)
  {
    *(void *)(a1 + 8216) = a2;
    char v5 = 1;
  }
  else
  {
    uint64_t v4 = 8196;
    xpc_object_t v6 = malloc_type_malloc(0x2004uLL, 0xA9F9A193uLL);
    *(void *)(a1 + 8216) = v6;
    if (!v6) {
      objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"Unable to allocate enough memory to encode data" userInfo:0]);
    }
    char v5 = 0;
  }
  *(void *)(a1 + 8208) = v4;
  *(void *)(a1 + 8200) = 0;
  *(unsigned char *)(a1 + 8248) = 0;
  *(unsigned char *)(a1 + 8249) = v5;
  _reserveSpace(a1, 8);
  *(void *)(*(void *)(a1 + 8216) + *(void *)(a1 + 8200)) = 0x37317473696C7062;
  *(void *)(a1 + 8200) += 8;
}

void sub_18184DEDC(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_18184DEF0(_Unwind_Exception *a1)
{
}

xpc_object_t __NSXPCCONNECTION_IS_WAITING_FOR_A_SYNCHRONOUS_REPLY__(_xpc_connection_s *a1, void *a2)
{
  return xpc_connection_send_message_with_reply_sync(a1, a2);
}

CFMutableDictionaryRef _createTablesIfNeeded_locked(CFMutableDictionaryRef result)
{
  uint64_t v1 = result;
  if (!*((void *)result + 3))
  {
    __n128 result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], 1, 0, MEMORY[0x1E4F1D540]);
    v1[3] = result;
  }
  if (!v1[4])
  {
    __n128 result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], 1, 0, MEMORY[0x1E4F1D540]);
    v1[4] = result;
  }
  if (!v1[5])
  {
    __n128 result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], 1, 0, 0);
    v1[5] = result;
  }
  return result;
}

uint64_t _NSXPCLog()
{
  if (qword_1EB1ED5C8 != -1) {
    dispatch_once(&qword_1EB1ED5C8, &__block_literal_global_41_0);
  }
  return qword_1EB1ED5C0;
}

void sub_18184EDE4(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_18184EDF8(_Unwind_Exception *a1)
{
}

uint64_t _NSXPCLongMessageLog()
{
  if (qword_1EB1ED5E8 != -1) {
    dispatch_once(&qword_1EB1ED5E8, &__block_literal_global_48_0);
  }
  return qword_1EB1ED5E0;
}

void ____addOperations_block_invoke_2(uint64_t a1)
{
}

NSString *__cdecl NSStringFromProtocol(Protocol *proto)
{
  __n128 result = (NSString *)protocol_getName(proto);
  if (result)
  {
    return +[NSString stringWithUTF8String:result];
  }
  return result;
}

uint64_t Notification.userInfo.getter()
{
  return swift_bridgeObjectRetain();
}

id static String._forceBridgeFromObjectiveC(_:result:)(void *a1, void *a2)
{
  swift_bridgeObjectRelease();
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t type metadata instantiation function for PredicateExpressions.OptionalFlatMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 64);
}

void ____addOperations_block_invoke_4(uint64_t a1)
{
}

ValueMetadata *type metadata accessor for AttributeContainer()
{
  return &type metadata for AttributeContainer;
}

uint64_t BPlistMap.__deallocating_deinit()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 40));
  closure #1 in XMLPlistMap.deinit((void *)(v1 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 40));
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t XMLPlistMap.__deallocating_deinit()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 40));
  closure #1 in XMLPlistMap.deinit((void *)(v1 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 40));
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t closure #1 in XMLPlistMap.deinit(void *a1)
{
  uint64_t result = a1[2];
  if (result)
  {
    if (result == *a1) {
      return MEMORY[0x185309510]();
    }
    else {
      __break(1u);
    }
  }
  return result;
}

void NSKVOPendingNotificationStackIdentifierRelease(uint64_t a1, id *a2)
{
  free(a2);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int64(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int64(a1, a2, a3, a4, (SEL *)&selRef_longLongValue, (SEL *)&selRef_initWithLongLong_);
}

uint64_t _NSKeyValueProxyDeallocate(void *a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueProxyLock);
  if (a1 && (unint64_t)_objc_rootRetainCount() > 1)
  {
    uint64_t v2 = 0;
  }
  else
  {
    objc_msgSend((id)objc_msgSend((id)objc_opt_class(), "_proxyShare"), "removeObject:", a1);
    os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueProxyLock);
    [a1 _proxyNonGCFinalize];
    os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueProxyLock);
    uint64_t v2 = 1;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueProxyLock);
  return v2;
}

void sub_18184FAD8(_Unwind_Exception *exception_object)
{
}

uint64_t getObjectValue(uint64_t a1, void *a2, __CFString *a3, CFIndex *a4, int a5, NSError **a6)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  uint64_t NoteCount = _CFLocaleGetNoteCount();
  uint64_t v13 = _CFTimeZoneGetNoteCount() + NoteCount;
  if (v13 + _CFCalendarGetMidnightNoteCount() != *(void *)(a1 + 24)) {
    [(id)a1 _clearFormatter];
  }
  [(id)a1 _regenerateFormatterIfAbsent];
  if (a5)
  {
    BOOL v14 = _CFExecutableLinkedOnOrAfter() != 0;
    if (a4)
    {
LABEL_5:
      CFIndex v16 = *a4;
      CFIndex v15 = a4[1];
      goto LABEL_8;
    }
  }
  else
  {
    BOOL v14 = 0;
    if (a4) {
      goto LABEL_5;
    }
  }
  CFIndex v15 = [(__CFString *)a3 length];
  CFIndex v16 = 0;
LABEL_8:
  rangep.location = v16;
  rangep.length = v15;
  char v17 = *(__CFDateFormatter **)(a1 + 16);
  if (v17) {
    CFDateRef v18 = CFDateFormatterCreateDateFromString((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], v17, a3, &rangep);
  }
  else {
    CFDateRef v18 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  CFDateRef v19 = v18;
  uint64_t v20 = [(__CFString *)a3 substringFromIndex:rangep.length + rangep.location];
  if (v18
    && (!v14
     || [+[NSCharacterSet whitespaceCharacterSet](NSCharacterSet, "whitespaceCharacterSet") isSupersetOfSet:+[NSCharacterSet characterSetWithCharactersInString:v20]]))
  {
    if (a4) {
      *(CFRange *)a4 = rangep;
    }
    if (a2)
    {
      if ([(id)a1 generatesCalendarDates])
      {
        [(__CFDate *)v18 timeIntervalSinceReferenceDate];
        unint64_t v21 = +[NSCalendarDate dateWithTimeIntervalSinceReferenceDate:](NSCalendarDate, "dateWithTimeIntervalSinceReferenceDate:");
        -[NSCalendarDate setTimeZone:](v21, "setTimeZone:", [(id)a1 timeZone]);
        [(NSCalendarDate *)v21 setCalendarFormat:&stru_1ECA5C228];
        *a2 = v21;
      }
      else
      {
        *a2 = v18;
      }
    }
    return 1;
  }
  else if (a6)
  {
    id v22 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 2048, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", a3, @"NSInvalidValue", 0));
    uint64_t result = 0;
    *a6 = v22;
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t getObjectValue_0(uint64_t a1, void *a2, __CFString *a3, CFIndex *a4, int a5, void *a6)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = 0x1EB1DE000uLL;
  [*(id *)(a1 + 40) lock];
  if (-[__CFString isEqualToString:](a3, "isEqualToString:", [(id)a1 nilSymbol]))
  {
    if (a2) {
      *a2 = 0;
    }
    goto LABEL_70;
  }
  if (-[__CFString isEqualToString:](a3, "isEqualToString:", [(id)a1 negativeInfinitySymbol]))
  {
    if (a2)
    {
      if ([(id)a1 generatesDecimalNumbers])
      {
        uint64_t v13 = +[NSDecimalNumber minimumDecimalNumber];
LABEL_69:
        *a2 = v13;
        goto LABEL_70;
      }
      uint64_t v20 = (NSDecimalNumber **)MEMORY[0x1E4F1D3A0];
      goto LABEL_68;
    }
    goto LABEL_70;
  }
  if (!-[__CFString isEqualToString:](a3, "isEqualToString:", [(id)a1 positiveInfinitySymbol]))
  {
    BOOL v14 = (void *)[(id)a1 decimalSeparator];
    CFIndex v15 = (void *)[(id)a1 groupingSeparator];
    if ([v15 length] && objc_msgSend(v15, "characterAtIndex:", 0) == 160
      || [v14 length] && objc_msgSend(v14, "characterAtIndex:", 0) == 160)
    {
      CFIndex v16 = +[NSCharacterSet characterSetWithCharactersInString:@"0123456789"];
      uint64_t v17 = [(__CFString *)a3 rangeOfCharacterFromSet:v16 options:2];
      uint64_t v18 = [(__CFString *)a3 rangeOfCharacterFromSet:v16 options:6];
      if (v17 != 0x7FFFFFFFFFFFFFFFLL && v18 != 0x7FFFFFFFFFFFFFFFLL)
      {
        chars[0] = 160;
        a3 = (__CFString *)[(__CFString *)a3 stringByReplacingOccurrencesOfString:@" ", +[NSString stringWithCharacters:chars length:1], 2, v17, v18 - v17 + 1 withString options range];
      }
    }
    if (_CFLocaleGetNoteCount() != *(void *)(a1 + 24)) {
      [(id)a1 _clearFormatter];
    }
    if (a5) {
      BOOL v19 = _CFExecutableLinkedOnOrAfter() != 0;
    }
    else {
      BOOL v19 = 0;
    }
    uint64_t v21 = [(__CFString *)a3 length];
    CFIndex v64 = v21;
    if (a4)
    {
      CFIndex v22 = *a4;
      CFIndex v23 = a4[1];
    }
    else
    {
      CFIndex v22 = 0;
      CFIndex v23 = v21;
    }
    rangep.location = v22;
    rangep.length = v23;
    uint64_t v24 = *(__CFNumberFormatter **)(a1 + 16);
    uint64_t v25 = (CFAllocatorRef *)MEMORY[0x1E4F1CFB0];
    if (v24 || ([(id)a1 _regenerateFormatter], (uint64_t v24 = *(__CFNumberFormatter **)(a1 + 16)) != 0)) {
      uint64_t v24 = CFNumberFormatterCreateNumberFromString(*v25, v24, a3, &rangep, [(id)a1 allowsFloats] ^ 1);
    }
    Swift::String v67 = a6;
    uint64_t v26 = v24;
    uint64_t v27 = [(__CFString *)a3 substringFromIndex:rangep.length + rangep.location];
    if (v24) {
      BOOL v28 = v19;
    }
    else {
      BOOL v28 = 0;
    }
    BOOL v65 = v19;
    if (v28)
    {
      uint64_t v29 = v27;
      Swift::String v30 = +[NSCharacterSet whitespaceCharacterSet];
      unint64_t v31 = +[NSCharacterSet characterSetWithCharactersInString:v29];
      uint64_t v32 = v30;
      unint64_t v12 = 0x1EB1DE000uLL;
      if ([(NSCharacterSet *)v32 isSupersetOfSet:v31]) {
        goto LABEL_38;
      }
    }
    else if (v24)
    {
      goto LABEL_38;
    }
    uint64_t v39 = *(__CFNumberFormatter **)(a1 + 16);
    if (!v39) {
      goto LABEL_88;
    }
    CFStringRef Format = CFNumberFormatterGetFormat(v39);
    if (!Format) {
      goto LABEL_88;
    }
    CFStringRef v41 = Format;
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
    theString = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], 0);
    CFIndex Length = CFStringGetLength(v41);
    if (Length >= 1)
    {
      CFIndex v43 = Length;
      CFIndex v44 = 0;
      BOOL v45 = 0;
      while (1)
      {
        chars[0] = 0;
        int CharacterAtIndex = CFStringGetCharacterAtIndex(v41, v44);
        chars[0] = CharacterAtIndex;
        if ((CharacterAtIndex - 35) > 0x1D) {
          break;
        }
        if (((1 << (CharacterAtIndex - 35)) & 0x207FED05) != 0) {
          goto LABEL_52;
        }
        if (CharacterAtIndex != 39) {
          break;
        }
        BOOL v45 = !v45;
LABEL_55:
        if (v43 == ++v44) {
          goto LABEL_72;
        }
      }
      if (CharacterAtIndex != 164 && CharacterAtIndex != 8240) {
        goto LABEL_55;
      }
LABEL_52:
      if (v45)
      {
        BOOL v45 = 1;
      }
      else
      {
        CFStringAppendCharacters(theString, chars, 1);
        BOOL v45 = 0;
      }
      goto LABEL_55;
    }
LABEL_72:
    uint64_t v49 = theString;
    if (CFEqual(theString, v41))
    {
      CFRelease(theString);
      unint64_t v12 = 0x1EB1DE000;
      goto LABEL_88;
    }
    CFRetain(v41);
    CFNumberFormatterSetFormat(*(CFNumberFormatterRef *)(a1 + 16), theString);
    if (a4)
    {
      CFIndex v51 = *a4;
      CFIndex v52 = a4[1];
    }
    else
    {
      CFIndex v51 = 0;
      CFIndex v52 = v64;
    }
    rangep.location = v51;
    rangep.length = v52;
    uint64_t v24 = CFNumberFormatterCreateNumberFromString(allocator, *(CFNumberFormatterRef *)(a1 + 16), a3, &rangep, [(id)a1 allowsFloats] ^ 1);
    Swift::String v53 = v24;
    uint64_t v54 = [(__CFString *)a3 substringFromIndex:rangep.length + rangep.location];
    char v55 = v24 == 0;
    if (v24) {
      char v56 = !v65;
    }
    else {
      char v56 = 1;
    }
    if ((v56 & 1) == 0)
    {
      uint64_t v57 = v54;
      uint64_t v58 = +[NSCharacterSet whitespaceCharacterSet];
      uint64_t v59 = +[NSCharacterSet characterSetWithCharactersInString:v57];
      uint64_t v60 = v58;
      uint64_t v49 = theString;
      char v55 = ![(NSCharacterSet *)v60 isSupersetOfSet:v59];
    }
    unint64_t v12 = 0x1EB1DE000;
    CFNumberFormatterSetFormat(*(CFNumberFormatterRef *)(a1 + 16), v41);
    CFRelease(v41);
    CFRelease(v49);
    if (v55)
    {
LABEL_88:
      BOOL v34 = v67;
      if (v67)
      {
        uint64_t v50 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", a3, @"NSInvalidValue", 0, v61, v62);
        goto LABEL_90;
      }
LABEL_91:
      uint64_t v47 = 0;
      goto LABEL_92;
    }
LABEL_38:
    if (a4) {
      *(CFRange *)a4 = rangep;
    }
    uint64_t v33 = [(id)a1 minimum];
    BOOL v34 = v67;
    if (v33 && (uint64_t v35 = v33, [(__CFNumberFormatter *)v24 compare:v33] == -1))
    {
      if (!v67) {
        goto LABEL_91;
      }
      uint64_t v37 = (void *)MEMORY[0x1E4F1C9E8];
      uint64_t v38 = NSMinimumValidValueErrorKey;
    }
    else
    {
      uint64_t v36 = [(id)a1 maximum];
      if (!v36 || (uint64_t v35 = v36, [(__CFNumberFormatter *)v24 compare:v36] != 1))
      {
        if (a2)
        {
          if ([(id)a1 generatesDecimalNumbers])
          {
            memset(chars, 0, sizeof(chars));
            int v72 = 0;
            if (v24) {
              [(__CFNumberFormatter *)v24 decimalValue];
            }
            long long v69 = *(_OWORD *)chars;
            int v70 = v72;
            *a2 = +[NSDecimalNumber decimalNumberWithDecimal:&v69];
          }
          else
          {
            *a2 = v24;
          }
        }
        uint64_t v47 = 1;
        goto LABEL_92;
      }
      if (!v67) {
        goto LABEL_91;
      }
      uint64_t v37 = (void *)MEMORY[0x1E4F1C9E8];
      uint64_t v38 = NSMaximumValidValueErrorKey;
    }
    uint64_t v50 = objc_msgSend(v37, "dictionaryWithObjectsAndKeys:", v35, *v38, v24, @"NSInvalidValue", 0);
LABEL_90:
    uint64_t v47 = 0;
    *BOOL v34 = +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:2048 userInfo:v50];
LABEL_92:
    [*(id *)(a1 + *(int *)(v12 + 1296)) unlock];
    return v47;
  }
  if (a2)
  {
    if ([(id)a1 generatesDecimalNumbers])
    {
      uint64_t v13 = +[NSDecimalNumber maximumDecimalNumber];
      goto LABEL_69;
    }
    uint64_t v20 = (NSDecimalNumber **)MEMORY[0x1E4F1D3A8];
LABEL_68:
    uint64_t v13 = *v20;
    goto LABEL_69;
  }
LABEL_70:
  [*(id *)(a1 + 40) unlock];
  return 1;
}

void sub_181851754(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void _sortedObjectsUsingDescriptors(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v8 = malloc_type_malloc(8 * a2, 0x100004000313F17uLL);
  uint64_t v9 = [MEMORY[0x1E4F1CA98] null];
  uint64_t v10 = v9;
  uint64_t v11 = 0;
  do
  {
    if (*(void *)(a1 + 8 * v11) == v9) {
      *(void *)(a1 + 8 * v11) = 0;
    }
    ++v11;
  }
  while (a2 != v11);
  size_t v12 = [a3 count];
  uint64_t v13 = malloc_type_calloc(1uLL, 0x28uLL, 0x10A00404BF391D6uLL);
  void *v13 = malloc_type_calloc(v12, 0x30uLL, 0x10A004036D404F5uLL);
  if (v12)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 8;
    do
    {
      uint64_t v16 = [a3 objectAtIndex:v14];
      uint64_t v17 = (char *)*v13;
      if ((*(unsigned char *)(v16 + 8) & 4) != 0)
      {
        free(v17);
        free(v13);
        objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:@"Sort descriptor was decoded from a secure archive and local evaluation is not enabled." userInfo:0]);
      }
      *(void *)&v17[v15] = v16;
      ++v14;
      v15 += 48;
    }
    while (v12 != v14);
  }
  unint64_t v31 = a3;
  _OWORD v13[3] = 0;
  v13[4] = v12;
  v13[1] = a1;
  v13[2] = a2;
  _NSInitializeCacheLine(0, v13);
  uint64_t v18 = (char *)*v13;
  if (!*(void *)(*v13 + 16))
  {
    uint64_t v19 = 0;
    uint64_t v20 = (uint64_t *)(*(void *)v18 + 8);
    do
    {
      uint64_t v21 = v13[1];
      uint64_t v22 = *(void *)(v21 + 8 * v19);
      if (*((void *)v18 + 3)) {
        uint64_t v22 = objc_msgSend(*(id *)(v21 + 8 * v19), "valueForKeyPath:");
      }
      if (v22 == [MEMORY[0x1E4F1CA98] null]) {
        uint64_t v22 = 0;
      }
      MethodImplementation = _NSNullCompare;
      if (v22)
      {
        if (*((void *)v18 + 5))
        {
          uint64_t v24 = (objc_class *)objc_opt_class();
          MethodImplementation = class_getMethodImplementation(v24, *((SEL *)v18 + 5));
        }
        else
        {
          MethodImplementation = *(void **)(*((void *)v18 + 1) + 32);
        }
      }
      *(v20 - 1) = (uint64_t)MethodImplementation;
      *uint64_t v20 = v22;
      ++v19;
      v20 += 2;
    }
    while (a2 != v19);
  }
  uint64_t v25 = 0;
  do
  {
    v8[v25] = v25;
    ++v25;
  }
  while (a2 != v25);
  [v31 count];
  CFMergeSortArray();
  uint64_t v26 = 0;
  do
  {
    uint64_t v27 = *(void *)(a1 + 8 * v8[v26]);
    if (!v27) {
      uint64_t v27 = v10;
    }
    *(void *)(a4 + 8 * v26++) = v27;
  }
  while (a2 != v26);
  uint64_t v28 = v13[3];
  uint64_t v29 = (void *)*v13;
  if (v28)
  {
    Swift::String v30 = v29 + 2;
    do
    {
      if (!*v30) {
        free((void *)*(v30 - 2));
      }
      v30 += 6;
      --v28;
    }
    while (v28);
  }
  free(v29);
  free(v13);

  free(v8);
}

void *_NSInitializeCacheLine(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 48 * a1;
  xpc_object_t v6 = *(void **)(v5 + 8);
  *(unsigned char *)(v5 + 32) = [v6 ascending];
  *(unsigned char *)(v5 + 33) = [v6 reverseNullOrder];
  *(void *)(v5 + 40) = [v6 selector];
  *(void *)(v5 + 24) = [v6 key];
  uint64_t v7 = (objc_class *)objc_opt_class();
  IMP MethodImplementation = class_getMethodImplementation(v7, sel_compareObject_toObject_);
  uint64_t v9 = (IMP *)(v5 + 16);
  if (MethodImplementation == (IMP)_NSInternalCompareObject)
  {
    *uint64_t v9 = 0;
    uint64_t result = malloc_type_calloc(a2[2], 0x10uLL, 0x80040803F642BuLL);
  }
  else
  {
    IMP v10 = MethodImplementation;
    uint64_t result = 0;
    *uint64_t v9 = v10;
  }
  *(void *)(v4 + 48 * a1) = result;
  ++a2[3];
  return result;
}

void sub_1818520BC(_Unwind_Exception *exception_object)
{
}

void *NSAllocateObjectArray(unint64_t a1)
{
  if (a1 >> 61)
  {
    long long v3 = +[NSString stringWithFormat:@"*** attempt to allocate id buffer with too large of a count (%lu) -- possibly data is corrupt", a1];
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3A8] reason:v3 userInfo:0]);
  }
  size_t v1 = malloc_good_size(8 * a1);

  return malloc_type_calloc(1uLL, v1, 0xBC19A329uLL);
}

id _NSGetProxyValueWithGetter(NSObject *a1, uint64_t a2, void *a3)
{
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueProxyLock);
  id v5 = _NSGetProxyValueWithGetterNoLock(a1, a3);
  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueProxyLock);
  return v5;
}

id _NSGetProxyValueWithGetterNoLock(NSObject *a1, void *a2)
{
  uint64_t v4 = (void *)[a2 proxyClass];
  id v5 = (void *)[v4 _proxyShare];
  xpc_object_t v6 = (NSKeyValueProxyShareKey *)_NSGetProxyValueWithGetterNoLock_proxyShareKey;
  if (!_NSGetProxyValueWithGetterNoLock_proxyShareKey)
  {
    xpc_object_t v6 = objc_alloc_init(NSKeyValueProxyShareKey);
    _NSGetProxyValueWithGetterNoLock_proxyShareKey = (uint64_t)v6;
  }
  v6->_container = a1;
  uint64_t v7 = [a2 key];
  *(void *)(_NSGetProxyValueWithGetterNoLock_proxyShareKey + 16) = v7;
  unint64_t v8 = objc_msgSend(v5, "member:");
  uint64_t v9 = _NSGetProxyValueWithGetterNoLock_proxyShareKey;
  *(void *)(_NSGetProxyValueWithGetterNoLock_proxyShareKey + 8) = 0;
  *(void *)(v9 + 16) = 0;
  if (v8)
  {
    id v10 = v8;
    id v11 = v8;
  }
  else
  {
    id v10 = objc_alloc((Class)v4);
    [v10 _proxyInitWithContainer:a1 getter:a2];
    [v5 addObject:v10];
  }

  return v10;
}

id __NSKeyedUnarchiverSecureUnarchiveObjectOfClasses(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = [MEMORY[0x1E4F1CAD0] setWithArray:a1];

  return +[NSKeyedUnarchiver unarchivedObjectOfClasses:v5 fromData:a2 error:a3];
}

void sub_181852E64(_Unwind_Exception *exception_object)
{
}

void sub_181853024(_Unwind_Exception *exception_object)
{
}

void *_checkErrorAndRound(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, NSDecimal *retstr, uint64_t a7, void *a8)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1
    && (uint64_t result = (void *)[a8 exceptionDuringOperation:a2 error:a1 leftOperand:a3 rightOperand:a4]) != 0)
  {
    if (a5 == 0x7FFF) {
      return result;
    }
    long long v16 = 0uLL;
    int v17 = 0;
    [result decimalValue];
    _NSDecimalRound(a7, (int)&v16, a5, retstr);
    size_t v12 = self;
    long long v14 = *(_OWORD *)a7;
    LODWORD(v15) = *(_DWORD *)(a7 + 16);
    uint64_t v13 = &v14;
  }
  else
  {
    if (a5 != 0x7FFF) {
      _NSDecimalRound(a7, a7, a5, retstr);
    }
    size_t v12 = self;
    long long v16 = *(_OWORD *)a7;
    int v17 = *(_DWORD *)(a7 + 16);
    uint64_t v13 = &v16;
  }
  return objc_msgSend(v12, "decimalNumberWithDecimal:", v13, v14, v15);
}

NSHashTable *_NSKeyValueProxyShareCreate()
{
  uint64_t v0 = [[NSPointerFunctions alloc] initWithOptions:5];
  [(NSPointerFunctions *)v0 setHashFunction:NSKeyValueProxyHash];
  [(NSPointerFunctions *)v0 setIsEqualFunction:NSKeyValueProxyIsEqual];
  size_t v1 = [[NSHashTable alloc] initWithPointerFunctions:v0 capacity:0];

  return v1;
}

uint64_t getEnumTagSinglePayload for URLComponents.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t type metadata completion function for PredicateExpressions.ForcedUnwrap()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t String.LocalizationValue.init(stringLiteral:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = MEMORY[0x1E4FBC860];
  a3[1] = result;
  a3[2] = a2;
  return result;
}

uint64_t URLQueryItem.init(name:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t closure #1 in NSNotificationCenter.Notifications.Iterator.next()()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

BOOL NSEqualSizes(NSSize aSize, NSSize bSize)
{
  return aSize.height == bSize.height && aSize.width == bSize.width;
}

uint64_t initializeWithCopy for DateComponents(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v4 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v4;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  uint64_t v5 = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 224) = v5;
  uint64_t v6 = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 240) = v6;
  uint64_t v7 = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 256) = v7;
  uint64_t v8 = *(void *)(a2 + 272);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(void *)(a1 + 272) = v8;
  *(unsigned char *)(a1 + 281) = *(unsigned char *)(a2 + 281);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

void protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance URLQueryItem(void *a1, uint64_t *a2)
{
  outlined consume of Locale.LanguageCode?(*a2, a2[1]);
  id v4 = objc_msgSend(a1, sel_name);
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  id v8 = objc_msgSend(a1, sel_value);
  if (v8)
  {
    uint64_t v9 = v8;
    id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v12 = v11;
  }
  else
  {
    id v10 = 0;
    uint64_t v12 = 0;
  }
  *a2 = (uint64_t)v5;
  a2[1] = v7;
  a2[2] = (uint64_t)v10;
  a2[3] = v12;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Date(void *a1, uint64_t a2)
{
  objc_msgSend(a1, sel_timeIntervalSinceReferenceDate);
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = 0;
  return 1;
}

uint64_t static Array._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2, uint64_t a3)
{
  swift_bridgeObjectRelease();
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }
  type metadata accessor for _ContiguousArrayStorage();
  uint64_t result = swift_dynamicCastClass();
  uint64_t v7 = result;
  if (!result)
  {
    swift_unknownObjectRelease();
    char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
    objc_msgSend(a1, sel_copy);
    if (isClassOrObjCExistentialType)
    {
      uint64_t v7 = _bridgeCocoaArray<A>(_:)();
      uint64_t result = swift_unknownObjectRelease();
    }
    else
    {
      unint64_t v9 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      specialized _arrayForceCast<A, B>(_:)(v9, a3);
      uint64_t v7 = v10;
      uint64_t result = swift_bridgeObjectRelease();
    }
  }
  *a2 = v7;
  return result;
}

uint64_t _PlistKeyedDecodingContainer.allKeys.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v48 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  uint64_t v11 = (char *)&v43 - v10;
  uint64_t v12 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v13);
  Swift::String v53 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  unint64_t v46 = (char *)&v43 - v16;
  swift_bridgeObjectRetain();
  _swift_isClassOrObjCExistentialType();
  uint64_t v54 = MEMORY[0x1E4FBC860];
  uint64_t v17 = *(void *)(a2 + 64);
  uint64_t v51 = a2 + 64;
  uint64_t v18 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  uint64_t i = v19 & v17;
  int64_t v52 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v21 = (unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  uint64_t v47 = v12;
  uint64_t v22 = (void (**)(char *, char *, uint64_t))(v12 + 32);
  CFIndex v44 = (uint64_t (**)(char *, uint64_t))(v9 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v24 = 0;
  uint64_t v49 = a6;
  uint64_t v50 = a2;
  BOOL v45 = v21;
  if (i) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v25 = v24 + 1;
  if (!__OFADD__(v24, 1))
  {
    if (v25 < v52)
    {
      uint64_t v26 = *(void *)(v51 + 8 * v25);
      ++v24;
      if (v26) {
        goto LABEL_22;
      }
      int64_t v24 = v25 + 1;
      if (v25 + 1 >= v52) {
        goto LABEL_55;
      }
      uint64_t v26 = *(void *)(v51 + 8 * v24);
      if (v26) {
        goto LABEL_22;
      }
      int64_t v24 = v25 + 2;
      if (v25 + 2 >= v52) {
        goto LABEL_55;
      }
      uint64_t v26 = *(void *)(v51 + 8 * v24);
      if (v26) {
        goto LABEL_22;
      }
      int64_t v24 = v25 + 3;
      if (v25 + 3 >= v52) {
        goto LABEL_55;
      }
      uint64_t v26 = *(void *)(v51 + 8 * v24);
      if (v26)
      {
LABEL_22:
        for (uint64_t i = (v26 - 1) & v26; ; i &= i - 1)
        {
          swift_bridgeObjectRetain();
          dispatch thunk of CodingKey.init(stringValue:)();
          if ((*v21)(v11, 1, a4) == 1)
          {
            uint64_t result = (*v44)(v11, v48);
            if (!i) {
              goto LABEL_7;
            }
            continue;
          }
          uint64_t v28 = *v22;
          uint64_t v29 = v46;
          (*v22)(v46, v11, a4);
          v28(v53, v29, a4);
          char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
          uint64_t v31 = v54;
          if (isClassOrObjCExistentialType)
          {
            if ((swift_isUniquelyReferenced_nonNull_bridgeObject() & 1) != 0
              && ((_swift_isClassOrObjCExistentialType() & 1) == 0
               || (v31 & 0x8000000000000000) == 0 && (v31 & 0x4000000000000000) == 0))
            {
              goto LABEL_38;
            }
          }
          else if (swift_isUniquelyReferenced_nonNull_native())
          {
            goto LABEL_38;
          }
          if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && (v31 < 0 || (v31 & 0x4000000000000000) != 0))
          {
            specialized _ArrayBuffer._nonNative.getter(v31);
            swift_unknownObjectRetain();
            uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
            swift_unknownObjectRelease();
          }
          else
          {
            char v32 = _swift_isClassOrObjCExistentialType();
            uint64_t v33 = v31 & 0xFFFFFFFFFFFFFF8;
            if ((v32 & 1) == 0) {
              uint64_t v33 = v31;
            }
            uint64_t v34 = *(void *)(v33 + 16);
          }
          uint64_t v31 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34 + 1, 1, v31, a4);
          uint64_t v54 = v31;
LABEL_38:
          if (_swift_isClassOrObjCExistentialType()) {
            uint64_t v35 = v31 & 0xFFFFFFFFFFFFFF8;
          }
          else {
            uint64_t v35 = v31;
          }
          uint64_t v36 = *(void *)(v35 + 16);
          if (_swift_isClassOrObjCExistentialType()) {
            uint64_t v37 = v31 & 0xFFFFFFFFFFFFFF8;
          }
          else {
            uint64_t v37 = v31;
          }
          unint64_t v38 = *(void *)(v37 + 24);
          uint64_t v39 = v36 + 1;
          if (v36 + 1 > (uint64_t)(v38 >> 1))
          {
            Swift::Bool v42 = v38 > 1;
            type metadata accessor for Array();
            Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42, v36 + 1, 1);
            uint64_t v31 = v54;
          }
          if (_swift_isClassOrObjCExistentialType())
          {
            uint64_t v40 = v31 & 0xFFFFFFFFFFFFFF8;
            *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10) = v39;
          }
          else
          {
            *(void *)(v31 + 16) = v39;
            uint64_t v40 = v31 & 0xFFFFFFFFFFFFFF8;
          }
          if (_swift_isClassOrObjCExistentialType()) {
            uint64_t v41 = v40;
          }
          else {
            uint64_t v41 = v31;
          }
          uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v28)(v41+ ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))+ *(void *)(v47 + 72) * v36, v53, a4);
          uint64_t v54 = v31;
          uint64_t v21 = v45;
          if (!i) {
            goto LABEL_7;
          }
LABEL_6:
          ;
        }
      }
      int64_t v27 = v25 + 4;
      if (v27 < v52)
      {
        uint64_t v26 = *(void *)(v51 + 8 * v27);
        if (v26)
        {
          int64_t v24 = v27;
          goto LABEL_22;
        }
        while (1)
        {
          int64_t v24 = v27 + 1;
          if (__OFADD__(v27, 1)) {
            goto LABEL_57;
          }
          if (v24 >= v52) {
            break;
          }
          uint64_t v26 = *(void *)(v51 + 8 * v24);
          ++v27;
          if (v26) {
            goto LABEL_22;
          }
        }
      }
    }
LABEL_55:
    swift_release();
    swift_bridgeObjectRelease();
    return v54;
  }
  __break(1u);
LABEL_57:
  __break(1u);
  return result;
}

BOOL static Array._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, char **a2, uint64_t a3)
{
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_copy);
  unint64_t v6 = _bridgeCocoaArray<A>(_:)();
  swift_unknownObjectRelease();
  uint64_t v7 = specialized _arrayConditionalCast<A, B>(_:)(v6, a3);
  swift_bridgeObjectRelease();
  *a2 = v7;
  return v7 != 0;
}

char *specialized _arrayConditionalCast<A, B>(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Optional();
  id v5 = *(void (**)(char *, char *, uint64_t))(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  id v8 = (char *)&v26 - v7;
  uint64_t v34 = *(void *)(a2 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v35 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  char v32 = (char *)&v26 - v11;
  uint64_t v12 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(a1 >> 62);
  if (a1 >> 62)
  {
LABEL_23:
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v33 = v8;
  uint64_t v37 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v28 = type metadata accessor for ContiguousArray();
  ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13 & ~(v13 >> 63), 0);
  id v8 = v37;
  if (!v12)
  {
    uint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v14) {
      return v8;
    }
LABEL_7:
    uint64_t v26 = v5;
    uint64_t v27 = v4;
    unint64_t v31 = a1 & 0xC000000000000001;
    uint64_t v12 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56);
    uint64_t v15 = (void (**)(char *, char *, uint64_t))(v34 + 32);
    uint64_t v16 = 4;
    unint64_t v29 = a1;
    uint64_t v30 = MEMORY[0x1E4FBC838] + 8;
    while (1)
    {
      uint64_t v17 = v16 - 4;
      if (v31)
      {
        uint64_t v18 = MEMORY[0x185303120](v16 - 4, a1);
        uint64_t v4 = v16 - 3;
        if (__OFADD__(v17, 1)) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v18 = swift_unknownObjectRetain();
        uint64_t v4 = v16 - 3;
        if (__OFADD__(v17, 1))
        {
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
      }
      uint64_t v36 = v18;
      uint64_t v19 = v33;
      int v20 = swift_dynamicCast();
      uint64_t v21 = *v12;
      if (!v20)
      {
        v21(v19, 1, 1, a2);
        swift_release();
        (*((void (**)(char *, uint64_t))v26 + 1))(v19, v27);
        return 0;
      }
      v21(v19, 0, 1, a2);
      id v5 = *v15;
      uint64_t v22 = v32;
      (*v15)(v32, v19, a2);
      v5(v35, v22, a2);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v8 + 2) + 1, 1);
        id v8 = v37;
      }
      unint64_t v24 = *((void *)v8 + 2);
      unint64_t v23 = *((void *)v8 + 3);
      if (v24 >= v23 >> 1)
      {
        ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        id v8 = v37;
      }
      *((void *)v8 + 2) = v24 + 1;
      v5(&v8[((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(void *)(v34 + 72) * v24], v35, a2);
      ++v16;
      a1 = v29;
      if (v4 == v14) {
        return v8;
      }
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v14) {
    goto LABEL_7;
  }
  return v8;
}

uint64_t storeEnumTagSinglePayload for NSObject.KeyValueObservingPublisher(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)(void *a1, uint64_t a2)
{
  if (!a1) {
    return MEMORY[0x1E4FBC860];
  }
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }
  type metadata accessor for _ContiguousArrayStorage();
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
    objc_msgSend(a1, sel_copy);
    if (isClassOrObjCExistentialType)
    {
      uint64_t v6 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      unint64_t v7 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      specialized _arrayForceCast<A, B>(_:)(v7, a2);
      uint64_t v6 = v8;
      swift_bridgeObjectRelease();
    }
    return v6;
  }
  return result;
}

void specialized _arrayForceCast<A, B>(_:)(unint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v22 - v8;
  char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  unint64_t v11 = v3 >> 62;
  if (isClassOrObjCExistentialType)
  {
    if (v11)
    {
      swift_bridgeObjectRetain();
      _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      specialized _ContiguousArrayBuffer.storesOnlyElementsOfType<A>(_:)(v3 & 0xFFFFFFFFFFFFFF8, a2);
    }
    return;
  }
  if (!v11)
  {
    uint64_t v12 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12) {
      goto LABEL_6;
    }
LABEL_24:
    _swift_isClassOrObjCExistentialType();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_24;
  }
LABEL_6:
  uint64_t v24 = MEMORY[0x1E4FBC860];
  v22[0] = type metadata accessor for ContiguousArray();
  ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 & ~(v12 >> 63), 0);
  if (v12 < 0)
  {
    __break(1u);
  }
  else if ((v3 & 0xC000000000000001) != 0)
  {
    uint64_t v13 = 0;
    v22[1] = v4 + 32;
    uint64_t v14 = v24;
    unint64_t v15 = v3;
    do
    {
      uint64_t v23 = MEMORY[0x185303120](v13, v3);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v14 + 16) + 1, 1);
        uint64_t v14 = v24;
      }
      unint64_t v17 = *(void *)(v14 + 16);
      unint64_t v16 = *(void *)(v14 + 24);
      if (v17 >= v16 >> 1)
      {
        ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        uint64_t v14 = v24;
      }
      ++v13;
      *(void *)(v14 + 16) = v17 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v14+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v17, v9, a2);
      unint64_t v3 = v15;
    }
    while (v12 != v13);
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v3 + 32);
    uint64_t v19 = v24;
    do
    {
      uint64_t v23 = *v18;
      swift_unknownObjectRetain();
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1);
        uint64_t v19 = v24;
      }
      unint64_t v21 = *(void *)(v19 + 16);
      unint64_t v20 = *(void *)(v19 + 24);
      if (v21 >= v20 >> 1)
      {
        ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        uint64_t v19 = v24;
      }
      *(void *)(v19 + 16) = v21 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v19+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v21, v6, a2);
      ++v18;
      --v12;
    }
    while (v12);
  }
}

__n128 __swift_memcpy16_1(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t JSONDecoderImpl.KeyedContainer.allKeys.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v9[2] = a4;
  v9[3] = a5;
  swift_bridgeObjectRetain();
  uint64_t v7 = _sSTsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlFxq_Sgs5Error_pRi_zRi0_zRi__Ri0__r0_lySSqd__Isgnrzo_SD4KeysVySSyp_GABsAG_pAJRszr__lIetMggozo_Tp5((void (*)(void))partial apply for closure #1 in _PlistDictionaryKeyedDecodingContainer.allKeys.getter, (uint64_t)v9, a3, a4);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t _sSTsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlFxq_Sgs5Error_pRi_zRi0_zRi__Ri0__r0_lySSqd__Isgnrzo_SD4KeysVySSyp_GABsAG_pAJRszr__lIetMggozo_Tp5(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _sSTsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlFxq_Sgs5Error_pRi_zRi0_zRi__Ri0__r0_lySSqd__Isgnrzo_SD4KeysVySSyp_GABsAG_pAJRszr__lIetMggozo_Tp5Tm(a1, a2, a3, a4);
}

uint64_t _sSTsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlFxq_Sgs5Error_pRi_zRi0_zRi__Ri0__r0_lySSqd__Isgnrzo_SD4KeysVySSyp_GABsAG_pAJRszr__lIetMggozo_Tp5Tm(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v51 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v51);
  uint64_t v12 = (char *)&v47 - v11;
  uint64_t v13 = *(void *)(a4 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v10);
  uint64_t v60 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v49 = (char *)&v47 - v16;
  _swift_isClassOrObjCExistentialType();
  uint64_t v62 = MEMORY[0x1E4FBC860];
  uint64_t v17 = *(void *)(a3 + 64);
  uint64_t v55 = a3 + 64;
  uint64_t v18 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  int64_t v56 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v50 = v13;
  uint64_t v58 = (void (**)(char *, char *, uint64_t))(v13 + 32);
  uint64_t v59 = (unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  uint64_t v48 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v22 = 0;
  uint64_t v53 = a2;
  uint64_t v54 = result;
  int64_t v52 = a1;
  if (v20) {
    goto LABEL_6;
  }
LABEL_7:
  if (!__OFADD__(v22++, 1))
  {
    if (v22 >= v56) {
      goto LABEL_58;
    }
    unint64_t v26 = *(void *)(v55 + 8 * v22);
    if (v26)
    {
LABEL_19:
      unint64_t v20 = (v26 - 1) & v26;
      for (unint64_t i = __clz(__rbit64(v26)) + (v22 << 6); ; unint64_t i = v23 | (v22 << 6))
      {
        uint64_t v28 = result;
        unint64_t v29 = (void *)(*(void *)(result + 48) + 16 * i);
        uint64_t v30 = v29[1];
        v61[0] = *v29;
        v61[1] = v30;
        swift_bridgeObjectRetain();
        a1(v61);
        if (v4)
        {
          swift_release();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        if ((*v59)(v12, 1, a4) == 1)
        {
          (*v48)(v12, v51);
          uint64_t result = v28;
          if (!v20) {
            goto LABEL_7;
          }
          goto LABEL_6;
        }
        unint64_t v31 = *v58;
        char v32 = v49;
        (*v58)(v49, v12, a4);
        v31(v60, v32, a4);
        char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
        uint64_t v34 = v62;
        uint64_t v57 = v31;
        if (isClassOrObjCExistentialType)
        {
          if ((swift_isUniquelyReferenced_nonNull_bridgeObject() & 1) != 0
            && ((_swift_isClassOrObjCExistentialType() & 1) == 0
             || (v34 & 0x8000000000000000) == 0 && (v34 & 0x4000000000000000) == 0))
          {
            goto LABEL_36;
          }
        }
        else if (swift_isUniquelyReferenced_nonNull_native())
        {
          goto LABEL_36;
        }
        if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && (v34 < 0 || (v34 & 0x4000000000000000) != 0))
        {
          specialized _ArrayBuffer._nonNative.getter(v34);
          swift_unknownObjectRetain();
          uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
          swift_unknownObjectRelease();
        }
        else
        {
          char v35 = _swift_isClassOrObjCExistentialType();
          uint64_t v36 = v34 & 0xFFFFFFFFFFFFFF8;
          if ((v35 & 1) == 0) {
            uint64_t v36 = v34;
          }
          uint64_t v37 = *(void *)(v36 + 16);
        }
        uint64_t v34 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37 + 1, 1, v34, a4);
        uint64_t v62 = v34;
LABEL_36:
        if (_swift_isClassOrObjCExistentialType()) {
          uint64_t v38 = v34 & 0xFFFFFFFFFFFFFF8;
        }
        else {
          uint64_t v38 = v34;
        }
        uint64_t v39 = *(void *)(v38 + 16);
        if (_swift_isClassOrObjCExistentialType()) {
          uint64_t v40 = v34 & 0xFFFFFFFFFFFFFF8;
        }
        else {
          uint64_t v40 = v34;
        }
        unint64_t v41 = *(void *)(v40 + 24);
        uint64_t v42 = v39 + 1;
        if (v39 + 1 > (uint64_t)(v41 >> 1))
        {
          Swift::Bool v46 = v41 > 1;
          type metadata accessor for Array();
          Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46, v39 + 1, 1);
          uint64_t v34 = v62;
        }
        uint64_t v43 = v12;
        if (_swift_isClassOrObjCExistentialType())
        {
          uint64_t v44 = v34 & 0xFFFFFFFFFFFFFF8;
          *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10) = v42;
        }
        else
        {
          *(void *)(v34 + 16) = v42;
          uint64_t v44 = v34 & 0xFFFFFFFFFFFFFF8;
        }
        if (_swift_isClassOrObjCExistentialType()) {
          uint64_t v45 = v44;
        }
        else {
          uint64_t v45 = v34;
        }
        v57((char *)(v45+ ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ *(void *)(v50 + 72) * v39), v60, a4);
        uint64_t v62 = v34;
        uint64_t result = v54;
        a1 = v52;
        uint64_t v12 = v43;
        if (!v20) {
          goto LABEL_7;
        }
LABEL_6:
        unint64_t v23 = __clz(__rbit64(v20));
        v20 &= v20 - 1;
      }
    }
    int64_t v27 = v22 + 1;
    if (v22 + 1 >= v56) {
      goto LABEL_58;
    }
    unint64_t v26 = *(void *)(v55 + 8 * v27);
    if (!v26)
    {
      int64_t v27 = v22 + 2;
      if (v22 + 2 >= v56) {
        goto LABEL_58;
      }
      unint64_t v26 = *(void *)(v55 + 8 * v27);
      if (!v26)
      {
        int64_t v27 = v22 + 3;
        if (v22 + 3 >= v56) {
          goto LABEL_58;
        }
        unint64_t v26 = *(void *)(v55 + 8 * v27);
        if (!v26)
        {
          int64_t v27 = v22 + 4;
          if (v22 + 4 < v56)
          {
            unint64_t v26 = *(void *)(v55 + 8 * v27);
            if (v26) {
              goto LABEL_18;
            }
            while (1)
            {
              int64_t v22 = v27 + 1;
              if (__OFADD__(v27, 1)) {
                goto LABEL_60;
              }
              if (v22 >= v56) {
                break;
              }
              unint64_t v26 = *(void *)(v55 + 8 * v22);
              ++v27;
              if (v26) {
                goto LABEL_19;
              }
            }
          }
LABEL_58:
          swift_release();
          return v62;
        }
      }
    }
LABEL_18:
    int64_t v22 = v27;
    goto LABEL_19;
  }
  __break(1u);
LABEL_60:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in _PlistDictionaryKeyedDecodingContainer.allKeys.getter()
{
  return dispatch thunk of CodingKey.init(stringValue:)();
}

Swift::Void __swiftcall ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(Swift::Bool bufferIsUnique, Swift::Int minimumCapacity, Swift::Bool growForAppend)
{
  *uint64_t v4 = _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(bufferIsUnique, minimumCapacity, growForAppend, (void *)*v4, *(void *)(v3 + 16));
}

uint64_t _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t a5)
{
  if (a3)
  {
    unint64_t v8 = a4[3];
    int64_t v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v9 = a2;
      }
    }
  }
  else
  {
    int64_t v9 = a2;
  }
  uint64_t v10 = a4[2];
  if (v9 <= v10) {
    uint64_t v11 = a4[2];
  }
  else {
    uint64_t v11 = v9;
  }
  if (!v11)
  {
    uint64_t v14 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  getContiguousArrayStorageType<A>(for:)(a5, a5);
  uint64_t v12 = *(void *)(*(void *)(a5 - 8) + 72);
  uint64_t v13 = *(unsigned __int8 *)(*(void *)(a5 - 8) + 80);
  uint64_t v14 = (void *)swift_allocObject();
  size_t v15 = _swift_stdlib_malloc_size(v14);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  int64_t v16 = v15 - ((v13 + 32) & ~v13);
  if (v16 == 0x8000000000000000 && v12 == -1) {
    goto LABEL_34;
  }
  uint64_t v18 = v16 / v12;
  swift_retain();
  char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  _OWORD v14[2] = v10;
  void v14[3] = isClassOrObjCExistentialType & 1 | (unint64_t)(2 * v18);
  swift_release();
LABEL_19:
  uint64_t v20 = *(void *)(a5 - 8);
  unint64_t v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  int64_t v22 = (char *)v14 + v21;
  unint64_t v23 = (char *)a4 + v21;
  if (a1)
  {
    if (v14 < a4 || v22 >= &v23[*(void *)(v20 + 72) * v10])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v14 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v24 = *(void *)(v20 + 72) * v10;
  int64_t v25 = &v22[v24];
  unint64_t v26 = (unint64_t)&v23[v24];
  if (v23 >= v25 || (unint64_t)v22 >= v26)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v14;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = _ArrayBuffer.capacity.getter();
  if (a3)
  {
    uint64_t v11 = v10;
    if (v10 < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_42;
      }
      if (2 * v10 <= a2) {
        uint64_t v11 = a2;
      }
      else {
        uint64_t v11 = 2 * v10;
      }
    }
  }
  else
  {
    uint64_t v11 = a2;
  }
  if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && (a4 < 0 || (a4 & 0x4000000000000000) != 0))
  {
    specialized _ArrayBuffer._nonNative.getter(a4);
    swift_unknownObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_unknownObjectRelease();
  }
  else
  {
    char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
    uint64_t v13 = a4 & 0xFFFFFFFFFFFFFF8;
    if ((isClassOrObjCExistentialType & 1) == 0) {
      uint64_t v13 = a4;
    }
    uint64_t v14 = *(void *)(v13 + 16);
  }
  if (v11 <= v14) {
    uint64_t v11 = v14;
  }
  if (v11)
  {
    getContiguousArrayStorageType<A>(for:)(a5, a5);
    uint64_t v15 = *(void *)(*(void *)(a5 - 8) + 72);
    uint64_t v16 = *(unsigned __int8 *)(*(void *)(a5 - 8) + 80);
    uint64_t v17 = (void *)swift_allocObject();
    size_t v18 = _swift_stdlib_malloc_size(v17);
    if (v15)
    {
      int64_t v19 = v18 - ((v16 + 32) & ~v16);
      if (v19 != 0x8000000000000000 || v15 != -1)
      {
        uint64_t v21 = v19 / v15;
        swift_retain();
        char v22 = _swift_isClassOrObjCExistentialType();
        _OWORD v17[2] = v14;
        v17[3] = v22 & 1 | (unint64_t)(2 * v21);
        swift_release();
        if (a1) {
          goto LABEL_23;
        }
        goto LABEL_32;
      }
    }
LABEL_42:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_43:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v17 = (void *)MEMORY[0x1E4FBC860];
  if (a1)
  {
LABEL_23:
    char v23 = _swift_isClassOrObjCExistentialType();
    if ((v14 & 0x8000000000000000) == 0)
    {
      if (v23) {
        unint64_t v24 = a4 & 0xFFFFFFFFFFFFFF8;
      }
      else {
        unint64_t v24 = a4;
      }
      uint64_t v25 = *(void *)(a5 - 8);
      if ((unint64_t)v17 < v24
        || (unint64_t v26 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80),
            (unint64_t)v17 + v26 >= v24 + v26 + *(void *)(v25 + 72) * v14))
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v17 != (void *)v24)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      if (_swift_isClassOrObjCExistentialType()) {
        uint64_t v27 = a4 & 0xFFFFFFFFFFFFFF8;
      }
      else {
        uint64_t v27 = a4;
      }
      *(void *)(v27 + 16) = 0;
      swift_bridgeObjectRelease();
      return (uint64_t)v17;
    }
    goto LABEL_43;
  }
LABEL_32:
  if ((v14 & 0x8000000000000000) == 0)
  {
    _ArrayBuffer._copyContents(subRange:initializing:)();
    return (uint64_t)v17;
  }
LABEL_44:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t getContiguousArrayStorageType<A>(for:)(uint64_t a1, uint64_t a2)
{
  if (swift_isClassType()) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    return __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  }
  else
  {
    return type metadata accessor for _ContiguousArrayStorage();
  }
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

Swift::Void __swiftcall Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(Swift::Bool bufferIsUnique, Swift::Int minimumCapacity, Swift::Bool growForAppend)
{
  *uint64_t v4 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(bufferIsUnique, minimumCapacity, growForAppend, *v4, *(void *)(v3 + 16));
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void))JSONDecoderImpl.KeyedContainer.nestedUnkeyedContainer(forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder(forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void))JSONDecoderImpl.KeyedContainer.superDecoder(forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void))
{
  return a4(a1, *v4, v4[1], v4[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t JSONDecoderImpl.KeyedContainer.superDecoder(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v8 = JSONDecoderImpl.KeyedContainer.decoderForKeyNoThrow<A>(_:)(a1, a2, a3, a4, a5, a5, a6, a6);
  a7[3] = type metadata accessor for JSONDecoderImpl();
  uint64_t result = lazy protocol witness table accessor for type JSONDecoderImpl and conformance JSONDecoderImpl(&lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl, (void (*)(uint64_t))type metadata accessor for JSONDecoderImpl);
  a7[4] = result;
  *a7 = v8;
  return result;
}

uint64_t JSONDecoderImpl.KeyedContainer.decoderForKeyNoThrow<A>(_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v91 = (uint64_t *)a3;
  uint64_t v13 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v89 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  unint64_t v88 = (char *)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  id v87 = (char *)&v81 - v19;
  uint64_t v20 = a1;
  uint64_t v90 = a8;
  uint64_t v21 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a4 + 16) && (unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22), (v24 & 1) != 0))
  {
    uint64_t v25 = *(void *)(a4 + 56) + 24 * v23;
    uint64_t v26 = *(void *)v25;
    id v85 = *(char **)(v25 + 8);
    uint64_t v86 = v26;
    LODWORD(v84) = *(unsigned __int8 *)(v25 + 16);
    swift_bridgeObjectRelease();
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v28 = type metadata accessor for DecodingError();
    uint64_t v86 = swift_allocError();
    uint64_t v93 = v16;
    uint64_t v30 = v29;
    id v85 = (char *)v29
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                 + 48);
    id v92 = v15;
    uint64_t v31 = v90;
    v30[3] = a6;
    v30[4] = v31;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v30);
    id v83 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v13 + 16);
    v83(boxed_opaque_existential_1, a1, a6);
    uint64_t v84 = _CodingPathNode.path.getter((unint64_t)v91);
    unint64_t v94 = 0;
    unint64_t v95 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    unint64_t v94 = 0xD00000000000001DLL;
    unint64_t v95 = 0x80000001823B2190;
    v33._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._uint64_t countAndFlagsBits = 2238496;
    v34._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v34);
    uint64_t v15 = v92;
    v35._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._uint64_t countAndFlagsBits = 3025186;
    v36._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v36);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    uint64_t v37 = v30;
    uint64_t v16 = v93;
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v28 - 8) + 104))(v37, *MEMORY[0x1E4FBBA68], v28);
    uint64_t v38 = (void *)v86;
    swift_willThrow();

    uint64_t v27 = (void (*)(char *, uint64_t, uint64_t))v83;
    id v85 = 0;
    uint64_t v86 = 0;
    LODWORD(v84) = 160;
  }
  uint64_t v39 = *(void *)(a2 + 24);
  id v92 = *(char **)(a2 + 32);
  uint64_t v93 = v39;
  uint64_t v40 = v87;
  v27(v87, v20, a6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v40, 0, 1, a6);
  uint64_t v42 = v88;
  uint64_t v41 = v89;
  (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v88, v40, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v42, 1, a6) == 1)
  {
    uint64_t v43 = *(void (**)(char *, uint64_t))(v41 + 8);
    swift_bridgeObjectRetain();
    swift_retain();
    v43(v40, v16);
    v43(v42, v16);
    uint64_t v44 = v91;
    swift_retain();
    goto LABEL_13;
  }
  uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v45(v15, v42, a6);
  uint64_t v44 = (uint64_t *)swift_allocObject();
  uint64_t v46 = v90;
  v44[5] = a6;
  v44[6] = v46;
  uint64_t v47 = __swift_allocate_boxed_opaque_existential_1(v44 + 2);
  v45((char *)v47, v15, a6);
  uint64_t v49 = *(void (**)(char *, uint64_t))(v41 + 8);
  unint64_t v48 = v41 + 8;
  swift_bridgeObjectRetain();
  swift_retain();
  v49(v40, v16);
  unint64_t v50 = (unint64_t)v91;
  v44[7] = (uint64_t)v91;
  if (!(v50 >> 62))
  {
    uint64_t v51 = (int64_t *)(v50 + 64);
LABEL_11:
    int64_t v52 = *v51;
    swift_retain();
    unint64_t v54 = v52 + 1;
    if (__OFADD__(v52, 1))
    {
      __break(1u);
      goto LABEL_17;
    }
    goto LABEL_12;
  }
  if (v50 >> 62 == 1)
  {
    uint64_t v51 = (int64_t *)((v50 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_11;
  }
  unint64_t v54 = 1;
LABEL_12:
  v44[8] = v54;
LABEL_13:
  int64_t v56 = *(void **)(a2 + 40);
  uint64_t v55 = *(void *)(a2 + 48);
  unint64_t v57 = *(void *)(a2 + 64);
  uint64_t v58 = *(void *)(a2 + 72);
  uint64_t v60 = *(void *)(a2 + 80);
  uint64_t v59 = *(char **)(a2 + 88);
  uint64_t v61 = *(void *)(a2 + 96);
  id v87 = *(char **)(a2 + 104);
  unint64_t v88 = v59;
  uint64_t v63 = *(void *)(a2 + 112);
  uint64_t v62 = *(void (**)(uint64_t *, uint64_t, uint64_t))(a2 + 120);
  unint64_t v82 = v57;
  id v83 = v62;
  uint64_t v64 = *(void *)(a2 + 136);
  unint64_t v81 = *(void *)(a2 + 128);
  unint64_t v65 = v81;
  uint64_t v89 = v64;
  id v91 = *(uint64_t **)(a2 + 144);
  LODWORD(v90) = *(unsigned __int8 *)(a2 + 152);
  char v66 = *(unsigned char *)(a2 + 56);
  type metadata accessor for JSONDecoderImpl();
  a2 = swift_allocObject();
  *(void *)(a2 + 160) = v44;
  Swift::String v67 = v92;
  *(void *)(a2 + 24) = v93;
  *(void *)(a2 + 32) = v67;
  uint64_t v68 = v56;
  *(void *)(a2 + 40) = v56;
  *(void *)(a2 + 48) = v55;
  uint64_t v69 = v55;
  char v70 = v66;
  *(unsigned char *)(a2 + 56) = v66;
  unint64_t v72 = v82;
  unint64_t v71 = v83;
  *(void *)(a2 + 64) = v82;
  *(void *)(a2 + 72) = v58;
  uint64_t v74 = v87;
  uint64_t v73 = (uint64_t)v88;
  *(void *)(a2 + 80) = v60;
  *(void *)(a2 + 88) = v73;
  *(void *)(a2 + 96) = v61;
  *(void *)(a2 + 104) = v74;
  *(void *)(a2 + 112) = v63;
  *(void *)(a2 + 120) = v71;
  *(void *)(a2 + 128) = v65;
  unint64_t v75 = (unint64_t)v91;
  *(void *)(a2 + 136) = v89;
  *(void *)(a2 + 144) = v75;
  *(unsigned char *)(a2 + 152) = v90;
  outlined copy of JSONEncoder.DateEncodingStrategy(v68, v69, v70);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v72);
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v60, v73);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v81);
  swift_bridgeObjectRetain();
  uint64_t v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v48 = v53[2];
  unint64_t v54 = v53[3];
  int64_t v52 = v48 + 1;
  if (v48 >= v54 >> 1) {
LABEL_17:
  }
    uint64_t v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v54 > 1), v52, 1, v53);
  uint64_t v77 = v85;
  uint64_t v76 = v86;
  char v78 = v84;
  v53[2] = v52;
  id v79 = &v53[3 * v48];
  v79[4] = v76;
  v79[5] = v77;
  *((unsigned char *)v79 + 48) = v78;
  *(void *)(a2 + 16) = v53;
  return a2;
}

uint64_t destroy for PropertyListEncoder._Options()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t getEnumTagSinglePayload for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t JSONDecoderImpl.KeyedContainer.nestedUnkeyedContainer(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v60 = a7;
  Swift::String v67 = (void *)a3;
  uint64_t v63 = a2;
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v59 = &v56[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v62 = *(char **)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = &v56[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = &v56[-v17];
  uint64_t v64 = a6;
  uint64_t v19 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(void *)(a4 + 16) || (unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20), (v22 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v29 = type metadata accessor for DecodingError();
    uint64_t v63 = swift_allocError();
    uint64_t v31 = v30;
    uint64_t v62 = (char *)v30
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                 + 48);
    uint64_t v32 = v64;
    v31[3] = a5;
    v31[4] = v32;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v31);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16))(boxed_opaque_existential_1, a1, a5);
    _CodingPathNode.path.getter((unint64_t)v67);
    unint64_t v65 = 0;
    unint64_t v66 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    unint64_t v65 = 0xD00000000000001DLL;
    unint64_t v66 = 0x80000001823B2190;
    v34._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._uint64_t countAndFlagsBits = 2238496;
    v35._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v35);
    v36._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._uint64_t countAndFlagsBits = 3025186;
    v37._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v37);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v29 - 8) + 104))(v31, *MEMORY[0x1E4FBBA68], v29);
    return swift_willThrow();
  }
  uint64_t v23 = *(void *)(a4 + 56) + 24 * v21;
  uint64_t v24 = *(void *)v23;
  uint64_t v58 = *(void *)(v23 + 8);
  int v57 = *(unsigned __int8 *)(v23 + 16);
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(v18, a1, a5);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, a5);
  uint64_t v25 = v62;
  (*((void (**)(unsigned char *, unsigned char *, uint64_t))v62 + 2))(v15, v18, v13);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v15, 1, a5) == 1)
  {
    uint64_t v26 = (void (*)(unsigned char *, uint64_t))*((void *)v25 + 1);
    v26(v18, v13);
    v26(v15, v13);
    uint64_t v27 = v67;
    swift_retain();
    uint64_t v28 = v63;
    goto LABEL_12;
  }
  uint64_t v39 = *(void (**)(uint64_t *, unsigned char *, uint64_t))(v11 + 32);
  uint64_t v40 = v59;
  v39((uint64_t *)v59, v15, a5);
  uint64_t v27 = (void *)swift_allocObject();
  uint64_t v41 = v64;
  v27[5] = a5;
  v27[6] = v41;
  uint64_t v42 = __swift_allocate_boxed_opaque_existential_1(v27 + 2);
  v39(v42, v40, a5);
  uint64_t v44 = (void (*)(unsigned char *, uint64_t))*((void *)v25 + 1);
  uint64_t v43 = v25 + 8;
  v44(v18, v13);
  unint64_t v45 = (unint64_t)v67;
  v27[7] = v67;
  if (v45 >> 62)
  {
    if (v45 >> 62 != 1)
    {
      uint64_t v28 = v63;
      uint64_t v48 = 1;
      goto LABEL_11;
    }
    uint64_t v46 = (uint64_t *)((v45 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v46 = (uint64_t *)(v45 + 64);
  }
  uint64_t v28 = v63;
  uint64_t v47 = *v46;
  swift_retain();
  uint64_t v48 = v47 + 1;
  if (!__OFADD__(v47, 1))
  {
LABEL_11:
    v27[8] = v48;
LABEL_12:
    uint64_t v43 = *(void **)(v28 + 160);
    *(void *)(v28 + 160) = v27;
    uint64_t v27 = *(void **)(v28 + 16);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v28 + 16) = v27;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
  __break(1u);
LABEL_26:
  uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
  *(void *)(v28 + 16) = v27;
LABEL_13:
  unint64_t v51 = v27[2];
  unint64_t v50 = v27[3];
  if (v51 >= v50 >> 1) {
    uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v50 > 1), v51 + 1, 1, v27);
  }
  _OWORD v27[2] = v51 + 1;
  int64_t v52 = &v27[3 * v51];
  uint64_t v53 = v58;
  v52[4] = v24;
  v52[5] = v53;
  *((unsigned char *)v52 + 48) = v57;
  *(void *)(v28 + 16) = v27;
  uint64_t v54 = v61;
  JSONDecoderImpl.unkeyedContainer()(v60);
  if (v54)
  {
    *(void *)(v28 + 160) = v43;
    swift_retain();
    swift_release();
    uint64_t v43 = *(void **)(v28 + 16);
    if (v43[2])
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v55 = v43[2];
        if (v55)
        {
LABEL_23:
          uint64_t v43[2] = v55 - 1;
          *(void *)(v28 + 16) = v43;
          swift_release();
          return swift_release();
        }
        goto LABEL_19;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew()(v43);
    uint64_t v55 = v43[2];
    if (v55) {
      goto LABEL_23;
    }
LABEL_19:
    __break(1u);
  }
  *(void *)(v28 + 160) = v43;
  swift_retain();
  swift_release();
  uint64_t v43 = *(void **)(v28 + 16);
  if (!v43[2])
  {
    __break(1u);
LABEL_31:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v43);
    uint64_t v43 = (void *)result;
    uint64_t v55 = *(void *)(result + 16);
    if (v55) {
      goto LABEL_23;
    }
    goto LABEL_32;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_31;
  }
  uint64_t v55 = v43[2];
  if (v55) {
    goto LABEL_23;
  }
LABEL_32:
  __break(1u);
  return result;
}

void protocol witness for Decoder.unkeyedContainer() in conformance JSONDecoderImpl(uint64_t *a1@<X8>)
{
}

void JSONDecoderImpl.unkeyedContainer()(uint64_t *a1@<X8>)
{
  unint64_t v2 = v1;
  uint64_t v4 = v2[2];
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = v4 + 24 * v5;
    uint64_t v8 = *(void *)(v6 + 8);
    uint64_t v7 = *(void *)(v6 + 16);
    unsigned int v9 = *(unsigned __int8 *)(v6 + 24);
    if (v9 >> 5 == 4)
    {
      uint64_t v19 = v2[20];
      uint64_t v20 = v2[4];
      a1[3] = (uint64_t)&unk_1ECA369A0;
      a1[4] = lazy protocol witness table accessor for type JSONDecoderImpl.UnkeyedContainer and conformance JSONDecoderImpl.UnkeyedContainer();
      uint64_t v21 = swift_allocObject();
      *a1 = v21;
      *(void *)(v21 + 16) = v2;
      *(void *)(v21 + 24) = v8;
      *(void *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 32) = v20;
      *(unsigned char *)(v21 + 56) = -2;
      *(void *)(v21 + 64) = v7;
      *(unsigned char *)(v21 + 72) = 0;
      *(void *)(v21 + 80) = 0;
      *(void *)(v21 + 88) = v19;
      swift_retain();
      swift_retain();
      swift_retain();
      return;
    }
    BOOL v10 = v9 >> 5 == 5 && (v7 | v8) == 0;
    if (v10 && v9 == 160)
    {
      uint64_t v22 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v24 = v23;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
      unint64_t v25 = v2[20];
      swift_retain();
      _CodingPathNode.path.getter(v25);
      swift_release();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v22 - 8) + 104))(v24, *MEMORY[0x1E4FBBA80], v22);
LABEL_18:
      swift_willThrow();
      return;
    }
    uint64_t v11 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v13 = v12;
    *uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    unint64_t v14 = v2[20];
    swift_retain();
    _CodingPathNode.path.getter(v14);
    swift_release();
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    uint64_t v15 = v2[2];
    uint64_t v16 = *(void *)(v15 + 16);
    if (v16)
    {
      uint64_t v17 = (void *)0xE800000000000000;
      uint64_t v18 = 0x676E697274732061;
      switch(*(unsigned __int8 *)(v15 + 24 * v16 + 24) >> 5)
      {
        case 1:
          uint64_t v17 = (void *)0xE600000000000000;
          uint64_t v18 = 0x7265626D756ELL;
          break;
        case 2:
          uint64_t v17 = (void *)0xE400000000000000;
          uint64_t v18 = 1819242338;
          break;
        case 3:
          uint64_t v17 = (void *)0xEC0000007972616ELL;
          uint64_t v18 = 0x6F69746369642061;
          break;
        case 4:
          uint64_t v18 = 0x7961727261206E61;
          break;
        case 5:
          uint64_t v17 = (void *)0xE400000000000000;
          uint64_t v18 = 1819047278;
          break;
        default:
          break;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v26._uint64_t countAndFlagsBits = v18;
      v26._unint64_t object = v17;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._uint64_t countAndFlagsBits = 0x64616574736E6920;
      v27._unint64_t object = (void *)0xE90000000000002ELL;
      String.append(_:)(v27);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v13, *MEMORY[0x1E4FBBA70], v11);
      goto LABEL_18;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type JSONDecoderImpl.UnkeyedContainer and conformance JSONDecoderImpl.UnkeyedContainer()
{
  unint64_t result = lazy protocol witness table cache variable for type JSONDecoderImpl.UnkeyedContainer and conformance JSONDecoderImpl.UnkeyedContainer;
  if (!lazy protocol witness table cache variable for type JSONDecoderImpl.UnkeyedContainer and conformance JSONDecoderImpl.UnkeyedContainer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JSONDecoderImpl.UnkeyedContainer and conformance JSONDecoderImpl.UnkeyedContainer);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox.AttributeKey()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AttributedString.AttributeKey@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 24) = 1;
  return result;
}

NSString *__NSLocalizedFileSizeDescription(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a3 & 0x70000000 | a1)
  {
    if ((_WORD)a3) {
      int v8 = (unsigned __int16)a3;
    }
    else {
      int v8 = 0xFFFF;
    }
    if ((a3 & 0x180000) != 0 && (a3 & 0x40000) == 0) {
      unint64_t v10 = 1024;
    }
    else {
      unint64_t v10 = 1000;
    }
    uint64_t v11 = [&unk_1ECAB8210 count];
    uint64_t v12 = v11 - 1;
    if (v11 == 1)
    {
      double v16 = (double)v10;
LABEL_32:
      uint64_t v19 = v12;
    }
    else
    {
      uint64_t v13 = 0;
      if (a1 >= 0) {
        unint64_t v14 = a1;
      }
      else {
        unint64_t v14 = -a1;
      }
      double v15 = (double)v14;
      double v16 = (double)v10;
      if (a2) {
        uint64_t v17 = a2;
      }
      else {
        uint64_t v17 = v10;
      }
      double v18 = (double)v17;
      uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
      while (1)
      {
        if ((v8 & (1 << v13)) != 0) {
          uint64_t v19 = v13;
        }
        long double v20 = pow((double)v10, (double)(unint64_t)v13);
        if (fabs(roundedSize(v13, (a3 & 0x400000) == 0, v15 / v20)) < v18 && v19 != 0x7FFFFFFFFFFFFFFFLL) {
          break;
        }
        if (v12 == ++v13)
        {
          if (v19 == 0x7FFFFFFFFFFFFFFFLL) {
            goto LABEL_32;
          }
          break;
        }
      }
    }
    double v24 = pow(v16, (double)(unint64_t)v19);
    double v25 = (double)a1 / v24;
    double v26 = -v25;
    if (a1 >= 0) {
      double v26 = (double)a1 / v24;
    }
    if (v26 >= 1.0e15) {
      Swift::String v27 = +[NSNumber numberWithLongLong:a1 / (unint64_t)v24];
    }
    else {
      Swift::String v27 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v25, v24, v26);
    }
    uint64_t v28 = v27;
    uint64_t v29 = +[NSNumber numberWithLongLong:a1];
    return __NSLocalizedFileSizeDescriptionFormatNumber(v28, v19, (uint64_t)v29, a3, a4);
  }
  else
  {
    uint64_t v22 = (void *)_NSFoundationBundle();
    if (a3) {
      uint64_t v23 = @"Zero bytes";
    }
    else {
      uint64_t v23 = @"Zero KB";
    }
    return (NSString *)[v22 localizedStringForKey:v23 value:&stru_1ECA5C228 table:@"FileSizeFormatting"];
  }
}

double roundedSize(uint64_t a1, int a2, double a3)
{
  double v3 = a3;
  if (a2)
  {
    LOBYTE(a3) = numberOfFractionDigits[a1];
    double v4 = (double)*(unint64_t *)&a3;
  }
  else
  {
    double v4 = 0.0;
    if (v3 >= 1.0e-20 && v3 < 100.0) {
      double v4 = (double)(uint64_t)(2 - vcvtmd_s64_f64(log10(v3)));
    }
  }
  double v6 = __exp10(v4);
  return round(v6 * v3) / v6;
}

NSCalendar __swiftcall Calendar._bridgeToObjectiveC()()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (NSCalendar)(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 216))(ObjectType, v1);
}

id specialized _CalendarAutoupdating.bridgeToNSCalendar()()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = static CalendarCache.cache + 16;
  uint64_t v1 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v0, (uint64_t *)&v9);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  unint64_t v2 = (objc_class *)type metadata accessor for _NSSwiftCalendar();
  long long v7 = v9;
  double v3 = (char *)objc_allocWithZone(v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Calendar, os_unfair_lock_s>);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 32) = 0;
  *(_OWORD *)(v4 + 16) = v7;
  *(void *)&v3[OBJC_IVAR____NSSwiftCalendar__lock] = v4;
  uint64_t v5 = *MEMORY[0x1E4F1C318];
  v8.receiver = v3;
  v8.super_class = v2;
  id result = objc_msgSendSuper2(&v8, sel_initWithCheckedCalendarIdentifier_, v5);
  if (!result) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in CalendarCache.autoupdatingCurrent.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = lazy protocol witness table accessor for type _CalendarICU and conformance _CalendarICU(&lazy protocol witness table cache variable for type _CalendarAutoupdating and conformance _CalendarAutoupdating, (void (*)(uint64_t))type metadata accessor for _CalendarAutoupdating);
    uint64_t v5 = v3;
  }
  else
  {
    type metadata accessor for _CalendarAutoupdating();
    uint64_t v5 = swift_allocObject();
    *(void *)(a1 + 16) = v5;
    uint64_t v4 = lazy protocol witness table accessor for type _CalendarICU and conformance _CalendarICU(&lazy protocol witness table cache variable for type _CalendarAutoupdating and conformance _CalendarAutoupdating, (void (*)(uint64_t))type metadata accessor for _CalendarAutoupdating);
    swift_retain();
  }
  *a2 = v5;
  a2[1] = v4;
  return swift_retain();
}

uint64_t lazy protocol witness table accessor for type _CalendarICU and conformance _CalendarICU(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_181857BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _NSSwiftCalendar.date(byAdding:to:options:)(const void *a1, double *a2, char a3)
{
  double v6 = *a2;
  long long v7 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____NSSwiftCalendar__lock);
  objc_super v8 = v7 + 4;
  long long v9 = v7 + 8;
  os_unfair_lock_lock(v7 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v8, &v18);
  uint64_t v10 = a3 & 1;
  os_unfair_lock_unlock(v9);
  uint64_t v11 = *((void *)&v18 + 1);
  memcpy(__dst, a1, 0x11AuLL);
  double v12 = 1.59271755e13;
  if (v6 <= 1.59271755e13) {
    double v12 = v6;
  }
  double v13 = fmax(v12, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v16 = v13;
  (*(void (**)(unsigned char *, double *, uint64_t, uint64_t, uint64_t))(v11 + 200))(__dst, &v16, v10, ObjectType, v11);

  return swift_unknownObjectRelease();
}

void *Calendar.dateComponents(_:from:)@<X0>(double *a1@<X1>, void *a2@<X8>)
{
  double v4 = *a1;
  long long v10 = *v2;
  uint64_t v5 = swift_bridgeObjectRetain();
  Calendar.ComponentSet.init(_:)(v5, &v9);
  double v6 = 1.59271755e13;
  if (v4 <= 1.59271755e13) {
    double v6 = v4;
  }
  double v8 = fmax(v6, -2.11845067e11);
  return Calendar._dateComponents(_:from:)(&v9, &v8, a2);
}

NSDateComponents __swiftcall DateComponents._bridgeToObjectiveC()()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  char v34 = *((unsigned char *)v0 + 40);
  uint64_t v19 = v0[4];
  uint64_t v20 = v0[6];
  char v35 = *((unsigned char *)v0 + 56);
  uint64_t v21 = v0[8];
  char v36 = *((unsigned char *)v0 + 72);
  uint64_t v22 = v0[10];
  char v37 = *((unsigned char *)v0 + 88);
  uint64_t v17 = v0[12];
  unsigned int v5 = *((unsigned __int8 *)v0 + 104);
  uint64_t v23 = v0[14];
  char v38 = *((unsigned char *)v0 + 120);
  uint64_t v24 = v0[16];
  char v39 = *((unsigned char *)v0 + 136);
  uint64_t v25 = v0[18];
  char v40 = *((unsigned char *)v0 + 152);
  uint64_t v26 = v0[20];
  char v41 = *((unsigned char *)v0 + 168);
  uint64_t v27 = v0[22];
  char v42 = *((unsigned char *)v0 + 184);
  uint64_t v28 = v0[24];
  char v43 = *((unsigned char *)v0 + 200);
  uint64_t v29 = v0[26];
  char v44 = *((unsigned char *)v0 + 216);
  long long v18 = (const char *)v0[28];
  char v47 = *((unsigned char *)v0 + 280);
  char v33 = *((unsigned char *)v0 + 232);
  uint64_t v30 = v0[30];
  char v45 = *((unsigned char *)v0 + 248);
  uint64_t v31 = v0[32];
  char v46 = *((unsigned char *)v0 + 264);
  uint64_t v32 = v0[34];
  unsigned int v6 = *((unsigned __int8 *)v0 + 281);
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9D8]), sel_init);
  if (v2)
  {
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v16 = __PAIR64__(v6, v5);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 216);
    swift_unknownObjectRetain();
    uint64_t v10 = v9(ObjectType, v1);
    unsigned int v6 = HIDWORD(v16);
    uint64_t v11 = (void *)v10;
    objc_msgSend(v7, sel_setCalendar_, v10);
    swift_unknownObjectRelease();
  }
  if (v3)
  {
    uint64_t v12 = swift_getObjectType();
    double v13 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 120);
    swift_unknownObjectRetain();
    unint64_t v14 = (void *)v13(v12, v4);
    objc_msgSend(v7, sel_setTimeZone_, v14);
    swift_unknownObjectRelease();
  }
  if (v34)
  {
    if (v35) {
      goto LABEL_7;
    }
  }
  else
  {
    objc_msgSend(v7, sel_setEra_, v19);
    if (v35)
    {
LABEL_7:
      if (v36) {
        goto LABEL_8;
      }
      goto LABEL_26;
    }
  }
  objc_msgSend(v7, sel_setYear_, v20, v16);
  if (v36)
  {
LABEL_8:
    if (v37) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  objc_msgSend(v7, sel_setMonth_, v21, v16);
  if (v37)
  {
LABEL_9:
    if (v38) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
LABEL_27:
  objc_msgSend(v7, sel_setDay_, v22, v16);
  if (v38)
  {
LABEL_10:
    if (v39) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
LABEL_28:
  objc_msgSend(v7, sel_setHour_, v23, v16);
  if (v39)
  {
LABEL_11:
    if (v40) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_29:
  objc_msgSend(v7, sel_setMinute_, v24, v16);
  if (v40)
  {
LABEL_12:
    if (v41) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }
LABEL_30:
  objc_msgSend(v7, sel_setSecond_, v25, v16);
  if (v41)
  {
LABEL_13:
    if (v42) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  objc_msgSend(v7, sel_setNanosecond_, v26, v16);
  if (v42)
  {
LABEL_14:
    if (v43) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  objc_msgSend(v7, sel_setWeekday_, v27, v16);
  if (v43)
  {
LABEL_15:
    if (v44) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_33:
  objc_msgSend(v7, sel_setWeekdayOrdinal_, v28, v16);
  if (v44)
  {
LABEL_16:
    if (v45) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }
LABEL_34:
  objc_msgSend(v7, sel_setQuarter_, v29, v16);
  if (v45)
  {
LABEL_17:
    if (v46) {
      goto LABEL_18;
    }
    goto LABEL_36;
  }
LABEL_35:
  objc_msgSend(v7, sel_setWeekOfMonth_, v30, v16);
  if (v46)
  {
LABEL_18:
    if (v47) {
      goto LABEL_19;
    }
    goto LABEL_37;
  }
LABEL_36:
  objc_msgSend(v7, sel_setWeekOfYear_, v31, v16);
  if (v47)
  {
LABEL_19:
    if (v5) {
      goto LABEL_20;
    }
    goto LABEL_38;
  }
LABEL_37:
  objc_msgSend(v7, sel_setYearForWeekOfYear_, v32, v16);
  if (v5)
  {
LABEL_20:
    if (v6 == 2) {
      goto LABEL_21;
    }
LABEL_39:
    objc_msgSend(v7, sel_setLeapMonth_, v6 & 1, v16);
    if (v33) {
      return (NSDateComponents)v7;
    }
    goto LABEL_22;
  }
LABEL_38:
  objc_msgSend(v7, sel_setDayOfYear_, v17, v16);
  if (v6 != 2) {
    goto LABEL_39;
  }
LABEL_21:
  if ((v33 & 1) == 0) {
LABEL_22:
  }
    __NSDateComponentsSetWeek(v7, v18);
  return (NSDateComponents)v7;
}

void *_NSSwiftCalendar._components(_:from:)@<X0>(int a1@<W0>, double *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  double v7 = *a2;
  _fromNSCalendarUnits(_:)(a1);
  double v8 = *(os_unfair_lock_s **)&v3[OBJC_IVAR____NSSwiftCalendar__lock];
  uint64_t v9 = v8 + 4;
  uint64_t v10 = v8 + 8;
  os_unfair_lock_lock(v8 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v9, &v25);
  os_unfair_lock_unlock(v10);
  long long v24 = v25;
  uint64_t v11 = swift_bridgeObjectRetain();
  Calendar.ComponentSet.init(_:)(v11, &v23);
  double v12 = 1.59271755e13;
  if (v7 <= 1.59271755e13) {
    double v12 = v7;
  }
  double v22 = fmax(v12, -2.11845067e11);
  Calendar._dateComponents(_:from:)(&v23, &v22, __src);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if ((a1 & 0x100000) != 0)
  {
    type metadata accessor for _NSSwiftCalendar();
    uint64_t v13 = swift_dynamicCastClass();
    if (v13)
    {
      uint64_t v14 = *(void *)(v13 + OBJC_IVAR____NSSwiftCalendar__lock);
      double v15 = (_OWORD *)(v14 + 16);
      unint64_t v16 = (os_unfair_lock_s *)(v14 + 32);
      id v17 = v4;
      os_unfair_lock_lock(v16);
      closure #1 in _NSSwiftCalendar.calendar.getter(v15, &v25);
      os_unfair_lock_unlock(v16);

      uint64_t v19 = *((void *)&v25 + 1);
      uint64_t v18 = v25;
    }
    else
    {
      type metadata accessor for _CalendarBridged();
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = v4;
      uint64_t v19 = _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _CalendarBridged and conformance _CalendarBridged, (void (*)(uint64_t))type metadata accessor for _CalendarBridged);
      id v20 = v4;
    }
    swift_unknownObjectRelease();
    *(void *)&__src[0] = v18;
    *((void *)&__src[0] + 1) = v19;
    if (*(void *)&__src[1])
    {
      long long v25 = __src[1];
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)&v25);
    }
  }
  if ((a1 & 0x100) != 0)
  {
    *(void *)&__src[14] = *(void *)&__src[16];
    BYTE8(__src[14]) = BYTE8(__src[16]);
  }
  return memcpy(a3, __src, 0x11AuLL);
}

void *Calendar._dateComponents(_:from:)@<X0>(uint64_t *a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  double v6 = *a2;
  uint64_t v8 = *v3;
  uint64_t v7 = v3[1];
  v12[0] = *a1;
  if (v6 > 1.59271755e13) {
    double v6 = 1.59271755e13;
  }
  double v9 = fmax(v6, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v13 = v9;
  (*(void (**)(void *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v7 + 192))(__src, v12, &v13, ObjectType, v7);
  if ((v5 & 0x4000) != 0)
  {
    __src[0] = v8;
    __src[1] = v7;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if (__src[2])
    {
      v12[0] = __src[2];
      v12[1] = __src[3];
      swift_unknownObjectRetain();
      Calendar.timeZone.setter(v12);
    }
  }
  return memcpy(a3, __src, 0x11AuLL);
}

uint64_t protocol witness for _CalendarProtocol.dateComponents(_:from:) in conformance _CalendarGregorian@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v9 = *a1;
  uint64_t v8 = v5;
  long long v7 = *(_OWORD *)(v3 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)(&v9, (double *)&v8, (uint64_t *)&v7, a3);

  return swift_unknownObjectRelease();
}

uint64_t Calendar.ComponentSet.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  int64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = result + 56;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v12 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9) {
      goto LABEL_25;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v3;
    if (!v13)
    {
      int64_t v3 = v12 + 1;
      if (v12 + 1 >= v9) {
        goto LABEL_25;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v3);
      if (!v13)
      {
        int64_t v3 = v12 + 2;
        if (v12 + 2 >= v9) {
          goto LABEL_25;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v3);
        if (!v13)
        {
          int64_t v3 = v12 + 3;
          if (v12 + 3 >= v9) {
            goto LABEL_25;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v3);
          if (!v13)
          {
            int64_t v3 = v12 + 4;
            if (v12 + 4 >= v9) {
              goto LABEL_25;
            }
            unint64_t v13 = *(void *)(v5 + 8 * v3);
            if (!v13) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v3 << 6);
LABEL_5:
    v4 |= qword_1821A0560[*(char *)(*(void *)(result + 48) + v11)];
  }
  int64_t v14 = v12 + 5;
  if (v14 >= v9)
  {
LABEL_25:
    uint64_t result = swift_release();
    *a2 = v4;
    return result;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v3 = v14;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v3 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v3 >= v9) {
      goto LABEL_25;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v3);
    ++v14;
    if (v13) {
      goto LABEL_24;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _fromNSCalendarUnits(_:)(int a1)
{
  uint64_t v4 = MEMORY[0x1E4FBC870];
  if ((a1 & 2) != 0)
  {
    specialized Set._Variant.insert(_:)(&v3, 0);
    if ((a1 & 4) == 0)
    {
LABEL_3:
      if ((a1 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }
  else if ((a1 & 4) == 0)
  {
    goto LABEL_3;
  }
  specialized Set._Variant.insert(_:)(&v3, 1uLL);
  if ((a1 & 8) == 0)
  {
LABEL_4:
    if ((a1 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
LABEL_23:
  specialized Set._Variant.insert(_:)(&v3, 2uLL);
  if ((a1 & 0x10) == 0)
  {
LABEL_5:
    if ((a1 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }
LABEL_24:
  specialized Set._Variant.insert(_:)(&v3, 3uLL);
  if ((a1 & 0x20) == 0)
  {
LABEL_6:
    if ((a1 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }
LABEL_25:
  specialized Set._Variant.insert(_:)(&v3, 4uLL);
  if ((a1 & 0x40) == 0)
  {
LABEL_7:
    if ((a1 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }
LABEL_26:
  specialized Set._Variant.insert(_:)(&v3, 5uLL);
  if ((a1 & 0x80) == 0)
  {
LABEL_8:
    if ((a1 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }
LABEL_27:
  specialized Set._Variant.insert(_:)(&v3, 6uLL);
  if ((a1 & 0x200) == 0)
  {
LABEL_9:
    if ((a1 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_28:
  specialized Set._Variant.insert(_:)(&v3, 7uLL);
  if ((a1 & 0x400) == 0)
  {
LABEL_10:
    if ((a1 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }
LABEL_29:
  specialized Set._Variant.insert(_:)(&v3, 8uLL);
  if ((a1 & 0x800) == 0)
  {
LABEL_11:
    if ((a1 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_30:
  specialized Set._Variant.insert(_:)(&v3, 9uLL);
  if ((a1 & 0x1000) == 0)
  {
LABEL_12:
    if ((a1 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_31:
  specialized Set._Variant.insert(_:)(&v3, 0xAuLL);
  if ((a1 & 0x2000) == 0)
  {
LABEL_13:
    if ((a1 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }
LABEL_32:
  specialized Set._Variant.insert(_:)(&v3, 0xBuLL);
  if ((a1 & 0x4000) == 0)
  {
LABEL_14:
    if ((a1 & 0x10000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }
LABEL_33:
  specialized Set._Variant.insert(_:)(&v3, 0xCuLL);
  if ((a1 & 0x10000) == 0)
  {
LABEL_15:
    if ((a1 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }
LABEL_34:
  specialized Set._Variant.insert(_:)(&v3, 0x11uLL);
  if ((a1 & 0x8000) == 0)
  {
LABEL_16:
    if ((a1 & 0x100000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }
LABEL_35:
  specialized Set._Variant.insert(_:)(&v3, 0xDuLL);
  if ((a1 & 0x100000) == 0)
  {
LABEL_17:
    if ((a1 & 0x200000) == 0) {
      goto LABEL_18;
    }
LABEL_37:
    specialized Set._Variant.insert(_:)(&v3, 0xFuLL);
    if ((a1 & 0x100) == 0) {
      return v4;
    }
    goto LABEL_19;
  }
LABEL_36:
  specialized Set._Variant.insert(_:)(&v3, 0xEuLL);
  if ((a1 & 0x200000) != 0) {
    goto LABEL_37;
  }
LABEL_18:
  if ((a1 & 0x100) != 0) {
LABEL_19:
  }
    specialized Set._Variant.insert(_:)(&v3, 0xBuLL);
  return v4;
}

uint64_t specialized Set._Variant.insert(_:)(unsigned char *a1, unint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }
  uint64_t result = 0;
  LOBYTE(a2) = *(unsigned char *)(*(void *)(*v2 + 48) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  char v3 = v2;
  Swift::Int v6 = *v2;
  uint64_t v7 = MEMORY[0x185303FF0](*(void *)(v6 + 40), a2, 1);
  unint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  uint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int64_t v14 = *v3;
    *char v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *char v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(unsigned __int8 *)(v10 + v9) != a2)
  {
    unint64_t v11 = ~v8;
    do
    {
      uint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(unsigned __int8 *)(v10 + v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;

  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }
  uint64_t result = 0;
  LOBYTE(a2) = *(unsigned char *)(*(void *)(*v2 + 48) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

unint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(unint64_t result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  Swift::UInt v6 = result;
  unint64_t v7 = *v3;
  unint64_t v8 = *(void *)(*v3 + 16);
  unint64_t v9 = *(void *)(*v3 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
  {
    unint64_t v10 = *v3;
    goto LABEL_112;
  }
  if ((a3 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
    if (v9 > v8)
    {
      uint64_t v32 = static _SetStorage.copy(original:)();
      unint64_t v10 = v32;
      if (!*(void *)(v7 + 16)) {
        goto LABEL_102;
      }
      uint64_t result = v32 + 56;
      unint64_t v33 = v7 + 56;
      unint64_t v34 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
      if (v10 != v7 || result >= v33 + 8 * v34) {
        uint64_t result = (unint64_t)memmove((void *)result, (const void *)(v7 + 56), 8 * v34);
      }
      int64_t v35 = 0;
      *(void *)(v10 + 16) = *(void *)(v7 + 16);
      uint64_t v36 = 1 << *(unsigned char *)(v7 + 32);
      uint64_t v37 = -1;
      if (v36 < 64) {
        uint64_t v37 = ~(-1 << v36);
      }
      unint64_t v38 = v37 & *(void *)(v7 + 56);
      int64_t v39 = (unint64_t)(v36 + 63) >> 6;
      while (1)
      {
        if (v38)
        {
          unint64_t v40 = __clz(__rbit64(v38));
          v38 &= v38 - 1;
          unint64_t v41 = v40 | (v35 << 6);
        }
        else
        {
          int64_t v42 = v35 + 1;
          if (__OFADD__(v35, 1)) {
            goto LABEL_117;
          }
          if (v42 >= v39) {
            goto LABEL_102;
          }
          unint64_t v43 = *(void *)(v33 + 8 * v42);
          ++v35;
          if (!v43)
          {
            int64_t v35 = v42 + 1;
            if (v42 + 1 >= v39) {
              goto LABEL_102;
            }
            unint64_t v43 = *(void *)(v33 + 8 * v35);
            if (!v43)
            {
              int64_t v35 = v42 + 2;
              if (v42 + 2 >= v39) {
                goto LABEL_102;
              }
              unint64_t v43 = *(void *)(v33 + 8 * v35);
              if (!v43)
              {
                int64_t v35 = v42 + 3;
                if (v42 + 3 >= v39) {
                  goto LABEL_102;
                }
                unint64_t v43 = *(void *)(v33 + 8 * v35);
                if (!v43)
                {
                  int64_t v44 = v42 + 4;
                  if (v44 >= v39) {
                    goto LABEL_102;
                  }
                  unint64_t v43 = *(void *)(v33 + 8 * v44);
                  if (!v43)
                  {
                    while (1)
                    {
                      int64_t v35 = v44 + 1;
                      if (__OFADD__(v44, 1)) {
                        goto LABEL_121;
                      }
                      if (v35 >= v39) {
                        break;
                      }
                      unint64_t v43 = *(void *)(v33 + 8 * v35);
                      ++v44;
                      if (v43) {
                        goto LABEL_65;
                      }
                    }
LABEL_102:
                    uint64_t result = swift_release();
                    *uint64_t v4 = v10;
LABEL_112:
                    *(void *)(v10 + 8 * (a2 >> 6) + 56) |= 1 << a2;
                    *(unsigned char *)(*(void *)(v10 + 48) + a2) = v6;
                    uint64_t v70 = *(void *)(v10 + 16);
                    BOOL v71 = __OFADD__(v70, 1);
                    uint64_t v72 = v70 + 1;
                    if (!v71)
                    {
                      *(void *)(v10 + 16) = v72;
                      return result;
                    }
LABEL_119:
                    __break(1u);
                    goto LABEL_120;
                  }
                  int64_t v35 = v44;
                }
              }
            }
          }
LABEL_65:
          unint64_t v38 = (v43 - 1) & v43;
          unint64_t v41 = __clz(__rbit64(v43)) + (v35 << 6);
        }
        *(unsigned char *)(*(void *)(v10 + 48) + v41) = *(unsigned char *)(*(void *)(v7 + 48) + v41);
      }
    }
    uint64_t result = static _SetStorage.resize(original:capacity:move:)();
    unint64_t v10 = result;
    if (*(void *)(v7 + 16))
    {
      Swift::UInt v74 = v6;
      int64_t v46 = 0;
      unint64_t v47 = v7 + 56;
      uint64_t v48 = 1 << *(unsigned char *)(v7 + 32);
      if (v48 < 64) {
        uint64_t v49 = ~(-1 << v48);
      }
      else {
        uint64_t v49 = -1;
      }
      unint64_t v50 = v49 & *(void *)(v7 + 56);
      int64_t v51 = (unint64_t)(v48 + 63) >> 6;
      unint64_t v52 = result + 56;
      while (1)
      {
        if (v50)
        {
          unint64_t v54 = __clz(__rbit64(v50));
          v50 &= v50 - 1;
          unint64_t v55 = v54 | (v46 << 6);
        }
        else
        {
          int64_t v56 = v46 + 1;
          if (__OFADD__(v46, 1)) {
            goto LABEL_118;
          }
          if (v56 >= v51) {
            goto LABEL_114;
          }
          unint64_t v57 = *(void *)(v47 + 8 * v56);
          ++v46;
          if (!v57)
          {
            int64_t v46 = v56 + 1;
            if (v56 + 1 >= v51) {
              goto LABEL_114;
            }
            unint64_t v57 = *(void *)(v47 + 8 * v46);
            if (!v57)
            {
              int64_t v46 = v56 + 2;
              if (v56 + 2 >= v51) {
                goto LABEL_114;
              }
              unint64_t v57 = *(void *)(v47 + 8 * v46);
              if (!v57)
              {
                int64_t v46 = v56 + 3;
                if (v56 + 3 >= v51) {
                  goto LABEL_114;
                }
                unint64_t v57 = *(void *)(v47 + 8 * v46);
                if (!v57)
                {
                  int64_t v58 = v56 + 4;
                  if (v58 >= v51) {
                    goto LABEL_114;
                  }
                  unint64_t v57 = *(void *)(v47 + 8 * v58);
                  if (!v57)
                  {
                    while (1)
                    {
                      int64_t v46 = v58 + 1;
                      if (__OFADD__(v58, 1)) {
                        goto LABEL_122;
                      }
                      if (v46 >= v51) {
                        break;
                      }
                      unint64_t v57 = *(void *)(v47 + 8 * v46);
                      ++v58;
                      if (v57) {
                        goto LABEL_92;
                      }
                    }
LABEL_114:
                    swift_release();
                    uint64_t v4 = v3;
                    Swift::UInt v6 = v74;
LABEL_106:
                    *uint64_t v4 = v10;
                    Hasher.init(_seed:)();
                    Hasher._combine(_:)(v6);
                    uint64_t result = Hasher._finalize()();
                    uint64_t v67 = -1 << *(unsigned char *)(v10 + 32);
                    a2 = result & ~v67;
                    if ((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
                    {
                      uint64_t v68 = *(void *)(v10 + 48);
                      if (*(unsigned __int8 *)(v68 + a2) == v6)
                      {
LABEL_111:
                        uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                        __break(1u);
                      }
                      else
                      {
                        uint64_t v69 = ~v67;
                        while (1)
                        {
                          a2 = (a2 + 1) & v69;
                          if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
                            break;
                          }
                          if (*(unsigned __int8 *)(v68 + a2) == v6) {
                            goto LABEL_111;
                          }
                        }
                      }
                    }
                    goto LABEL_112;
                  }
                  int64_t v46 = v58;
                }
              }
            }
          }
LABEL_92:
          unint64_t v50 = (v57 - 1) & v57;
          unint64_t v55 = __clz(__rbit64(v57)) + (v46 << 6);
        }
        Swift::UInt v59 = *(unsigned __int8 *)(*(void *)(v7 + 48) + v55);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v59);
        uint64_t result = Hasher._finalize()();
        uint64_t v60 = -1 << *(unsigned char *)(v10 + 32);
        unint64_t v61 = result & ~v60;
        unint64_t v62 = v61 >> 6;
        if (((-1 << v61) & ~*(void *)(v52 + 8 * (v61 >> 6))) != 0)
        {
          unint64_t v53 = __clz(__rbit64((-1 << v61) & ~*(void *)(v52 + 8 * (v61 >> 6)))) | v61 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_74;
        }
        char v63 = 0;
        unint64_t v64 = (unint64_t)(63 - v60) >> 6;
        do
        {
          if (++v62 == v64 && (v63 & 1) != 0)
          {
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
            goto LABEL_119;
          }
          BOOL v65 = v62 == v64;
          if (v62 == v64) {
            unint64_t v62 = 0;
          }
          v63 |= v65;
          uint64_t v66 = *(void *)(v52 + 8 * v62);
        }
        while (v66 == -1);
        unint64_t v53 = __clz(__rbit64(~v66)) + (v62 << 6);
LABEL_74:
        *(void *)(v52 + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v53;
        *(unsigned char *)(*(void *)(v10 + 48) + v53) = v59;
        ++*(void *)(v10 + 16);
      }
    }
LABEL_105:
    swift_release();
    goto LABEL_106;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v10 = result;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_105;
  }
  Swift::UInt v73 = v6;
  int64_t v11 = 0;
  int64_t v12 = (void *)(v7 + 56);
  uint64_t v13 = 1 << *(unsigned char *)(v7 + 32);
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & *(void *)(v7 + 56);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  unint64_t v17 = result + 56;
  while (1)
  {
    if (v15)
    {
      unint64_t v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v20 = v19 | (v11 << 6);
      goto LABEL_30;
    }
    int64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_116;
    }
    if (v21 >= v16)
    {
LABEL_66:
      uint64_t v45 = 1 << *(unsigned char *)(v7 + 32);
      if (v45 > 63) {
        bzero((void *)(v7 + 56), ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        *int64_t v12 = -1 << v45;
      }
      uint64_t v4 = v3;
      Swift::UInt v6 = v73;
      *(void *)(v7 + 16) = 0;
      goto LABEL_105;
    }
    unint64_t v22 = v12[v21];
    ++v11;
    if (!v22)
    {
      int64_t v11 = v21 + 1;
      if (v21 + 1 >= v16) {
        goto LABEL_66;
      }
      unint64_t v22 = v12[v11];
      if (!v22)
      {
        int64_t v11 = v21 + 2;
        if (v21 + 2 >= v16) {
          goto LABEL_66;
        }
        unint64_t v22 = v12[v11];
        if (!v22)
        {
          int64_t v11 = v21 + 3;
          if (v21 + 3 >= v16) {
            goto LABEL_66;
          }
          unint64_t v22 = v12[v11];
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_29:
    unint64_t v15 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_30:
    Swift::UInt v24 = *(unsigned __int8 *)(*(void *)(v7 + 48) + v20);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v24);
    uint64_t result = Hasher._finalize()();
    uint64_t v25 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v17 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v26) & ~*(void *)(v17 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_115;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v17 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v18 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(unsigned char *)(*(void *)(v10 + 48) + v18) = v24;
    ++*(void *)(v10 + 16);
  }
  int64_t v23 = v21 + 4;
  if (v23 >= v16) {
    goto LABEL_66;
  }
  unint64_t v22 = v12[v23];
  if (v22)
  {
    int64_t v11 = v23;
    goto LABEL_29;
  }
  while (1)
  {
    int64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v16) {
      goto LABEL_66;
    }
    unint64_t v22 = v12[v11];
    ++v23;
    if (v22) {
      goto LABEL_29;
    }
  }
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int64_t v40;
  unint64_t v41;
  unint64_t v42;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  int64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int64_t v58;
  unint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned char v80[72];

  uint64_t v4 = v3;
  Swift::UInt v6 = result;
  unint64_t v7 = *v3;
  unint64_t v8 = *(void *)(*v3 + 16);
  unint64_t v9 = *(void *)(*v3 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
  {
    unint64_t v10 = *v3;
    goto LABEL_112;
  }
  if ((a3 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<_BPlistEncodingFormat.Reference>);
    if (v9 > v8)
    {
      unint64_t v33 = static _SetStorage.copy(original:)();
      unint64_t v10 = v33;
      if (!*(void *)(v7 + 16)) {
        goto LABEL_102;
      }
      uint64_t result = v33 + 56;
      unint64_t v34 = v7 + 56;
      int64_t v35 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
      if (v10 != v7 || result >= v34 + 8 * v35) {
        uint64_t result = (unint64_t)memmove((void *)result, (const void *)(v7 + 56), 8 * v35);
      }
      uint64_t v36 = 0;
      *(void *)(v10 + 16) = *(void *)(v7 + 16);
      uint64_t v37 = 1 << *(unsigned char *)(v7 + 32);
      unint64_t v38 = -1;
      if (v37 < 64) {
        unint64_t v38 = ~(-1 << v37);
      }
      int64_t v39 = v38 & *(void *)(v7 + 56);
      unint64_t v40 = (unint64_t)(v37 + 63) >> 6;
      while (1)
      {
        if (v39)
        {
          unint64_t v41 = __clz(__rbit64(v39));
          v39 &= v39 - 1;
          int64_t v42 = v41 | (v36 << 6);
        }
        else
        {
          unint64_t v43 = v36 + 1;
          if (__OFADD__(v36, 1)) {
            goto LABEL_117;
          }
          if (v43 >= v40) {
            goto LABEL_102;
          }
          int64_t v44 = *(void *)(v34 + 8 * v43);
          ++v36;
          if (!v44)
          {
            uint64_t v36 = v43 + 1;
            if (v43 + 1 >= v40) {
              goto LABEL_102;
            }
            int64_t v44 = *(void *)(v34 + 8 * v36);
            if (!v44)
            {
              uint64_t v36 = v43 + 2;
              if (v43 + 2 >= v40) {
                goto LABEL_102;
              }
              int64_t v44 = *(void *)(v34 + 8 * v36);
              if (!v44)
              {
                uint64_t v36 = v43 + 3;
                if (v43 + 3 >= v40) {
                  goto LABEL_102;
                }
                int64_t v44 = *(void *)(v34 + 8 * v36);
                if (!v44)
                {
                  uint64_t v45 = v43 + 4;
                  if (v45 >= v40) {
                    goto LABEL_102;
                  }
                  int64_t v44 = *(void *)(v34 + 8 * v45);
                  if (!v44)
                  {
                    while (1)
                    {
                      uint64_t v36 = v45 + 1;
                      if (__OFADD__(v45, 1)) {
                        goto LABEL_121;
                      }
                      if (v36 >= v40) {
                        break;
                      }
                      int64_t v44 = *(void *)(v34 + 8 * v36);
                      ++v45;
                      if (v44) {
                        goto LABEL_65;
                      }
                    }
LABEL_102:
                    uint64_t result = swift_release();
                    *uint64_t v4 = v10;
LABEL_112:
                    *(void *)(v10 + 8 * (a2 >> 6) + 56) |= 1 << a2;
                    *(void *)(*(void *)(v10 + 48) + 8 * a2) = v6;
                    unint64_t v75 = *(void *)(v10 + 16);
                    uint64_t v76 = __OFADD__(v75, 1);
                    uint64_t v77 = v75 + 1;
                    if (!v76)
                    {
                      *(void *)(v10 + 16) = v77;
                      return result;
                    }
LABEL_119:
                    __break(1u);
                    goto LABEL_120;
                  }
                  uint64_t v36 = v45;
                }
              }
            }
          }
LABEL_65:
          int64_t v39 = (v44 - 1) & v44;
          int64_t v42 = __clz(__rbit64(v44)) + (v36 << 6);
        }
        *(void *)(*(void *)(v10 + 48) + 8 * v42) = *(void *)(*(void *)(v7 + 48) + 8 * v42);
        uint64_t result = swift_retain();
      }
    }
    unint64_t v47 = static _SetStorage.resize(original:capacity:move:)();
    unint64_t v10 = v47;
    if (*(void *)(v7 + 16))
    {
      id v79 = v6;
      uint64_t v48 = 1 << *(unsigned char *)(v7 + 32);
      uint64_t v49 = v7 + 56;
      if (v48 < 64) {
        unint64_t v50 = ~(-1 << v48);
      }
      else {
        unint64_t v50 = -1;
      }
      int64_t v51 = v50 & *(void *)(v7 + 56);
      unint64_t v52 = (unint64_t)(v48 + 63) >> 6;
      unint64_t v53 = v47 + 56;
      uint64_t result = swift_retain();
      unint64_t v54 = 0;
      while (1)
      {
        if (v51)
        {
          int64_t v56 = __clz(__rbit64(v51));
          v51 &= v51 - 1;
          unint64_t v57 = v56 | (v54 << 6);
        }
        else
        {
          int64_t v58 = v54 + 1;
          if (__OFADD__(v54, 1)) {
            goto LABEL_118;
          }
          if (v58 >= v52) {
            goto LABEL_114;
          }
          Swift::UInt v59 = *(void *)(v49 + 8 * v58);
          ++v54;
          if (!v59)
          {
            unint64_t v54 = v58 + 1;
            if (v58 + 1 >= v52) {
              goto LABEL_114;
            }
            Swift::UInt v59 = *(void *)(v49 + 8 * v54);
            if (!v59)
            {
              unint64_t v54 = v58 + 2;
              if (v58 + 2 >= v52) {
                goto LABEL_114;
              }
              Swift::UInt v59 = *(void *)(v49 + 8 * v54);
              if (!v59)
              {
                unint64_t v54 = v58 + 3;
                if (v58 + 3 >= v52) {
                  goto LABEL_114;
                }
                Swift::UInt v59 = *(void *)(v49 + 8 * v54);
                if (!v59)
                {
                  uint64_t v60 = v58 + 4;
                  if (v60 >= v52) {
                    goto LABEL_114;
                  }
                  Swift::UInt v59 = *(void *)(v49 + 8 * v60);
                  if (!v59)
                  {
                    while (1)
                    {
                      unint64_t v54 = v60 + 1;
                      if (__OFADD__(v60, 1)) {
                        goto LABEL_122;
                      }
                      if (v54 >= v52) {
                        break;
                      }
                      Swift::UInt v59 = *(void *)(v49 + 8 * v54);
                      ++v60;
                      if (v59) {
                        goto LABEL_92;
                      }
                    }
LABEL_114:
                    swift_release_n();
                    Swift::UInt v6 = v79;
LABEL_106:
                    *char v3 = v10;
                    Hasher.init(_seed:)();
                    _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v80);
                    uint64_t result = Hasher._finalize()();
                    uint64_t v69 = -1 << *(unsigned char *)(v10 + 32);
                    a2 = result & ~v69;
                    if ((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
                    {
                      uint64_t v70 = swift_retain();
                      BOOL v71 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v70, v6);
                      uint64_t result = swift_release();
                      if (v71)
                      {
LABEL_111:
                        type metadata accessor for _BPlistEncodingFormat.Reference();
                        uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                        __break(1u);
                      }
                      else
                      {
                        uint64_t v72 = ~v69;
                        while (1)
                        {
                          a2 = (a2 + 1) & v72;
                          if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
                            break;
                          }
                          Swift::UInt v73 = swift_retain();
                          Swift::UInt v74 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v73, v6);
                          uint64_t result = swift_release();
                          if (v74) {
                            goto LABEL_111;
                          }
                        }
                      }
                    }
                    goto LABEL_112;
                  }
                  unint64_t v54 = v60;
                }
              }
            }
          }
LABEL_92:
          int64_t v51 = (v59 - 1) & v59;
          unint64_t v57 = __clz(__rbit64(v59)) + (v54 << 6);
        }
        unint64_t v61 = *(void *)(*(void *)(v7 + 48) + 8 * v57);
        Hasher.init(_seed:)();
        swift_retain();
        _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v80);
        uint64_t result = Hasher._finalize()();
        unint64_t v62 = -1 << *(unsigned char *)(v10 + 32);
        char v63 = result & ~v62;
        unint64_t v64 = v63 >> 6;
        if (((-1 << v63) & ~*(void *)(v53 + 8 * (v63 >> 6))) != 0)
        {
          unint64_t v55 = __clz(__rbit64((-1 << v63) & ~*(void *)(v53 + 8 * (v63 >> 6)))) | v63 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_74;
        }
        BOOL v65 = 0;
        uint64_t v66 = (unint64_t)(63 - v62) >> 6;
        do
        {
          if (++v64 == v66 && (v65 & 1) != 0)
          {
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
            goto LABEL_119;
          }
          uint64_t v67 = v64 == v66;
          if (v64 == v66) {
            unint64_t v64 = 0;
          }
          v65 |= v67;
          uint64_t v68 = *(void *)(v53 + 8 * v64);
        }
        while (v68 == -1);
        unint64_t v55 = __clz(__rbit64(~v68)) + (v64 << 6);
LABEL_74:
        *(void *)(v53 + ((v55 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v55;
        *(void *)(*(void *)(v10 + 48) + 8 * v55) = v61;
        ++*(void *)(v10 + 16);
      }
    }
LABEL_105:
    swift_release();
    goto LABEL_106;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<_BPlistEncodingFormat.Reference>);
  int64_t v11 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v10 = v11;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_105;
  }
  char v78 = v6;
  int64_t v12 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v13 = (void *)(v7 + 56);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & *(void *)(v7 + 56);
  int64_t v16 = (unint64_t)(v12 + 63) >> 6;
  unint64_t v17 = v11 + 56;
  uint64_t result = swift_retain();
  unint64_t v18 = 0;
  while (1)
  {
    if (v15)
    {
      unint64_t v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      int64_t v21 = v20 | (v18 << 6);
      goto LABEL_30;
    }
    unint64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      goto LABEL_116;
    }
    if (v22 >= v16)
    {
LABEL_66:
      swift_release();
      int64_t v46 = 1 << *(unsigned char *)(v7 + 32);
      Swift::UInt v6 = v78;
      if (v46 > 63) {
        bzero((void *)(v7 + 56), ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        uint64_t *v13 = -1 << v46;
      }
      *(void *)(v7 + 16) = 0;
      goto LABEL_105;
    }
    int64_t v23 = v13[v22];
    ++v18;
    if (!v23)
    {
      unint64_t v18 = v22 + 1;
      if (v22 + 1 >= v16) {
        goto LABEL_66;
      }
      int64_t v23 = v13[v18];
      if (!v23)
      {
        unint64_t v18 = v22 + 2;
        if (v22 + 2 >= v16) {
          goto LABEL_66;
        }
        int64_t v23 = v13[v18];
        if (!v23)
        {
          unint64_t v18 = v22 + 3;
          if (v22 + 3 >= v16) {
            goto LABEL_66;
          }
          int64_t v23 = v13[v18];
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_29:
    unint64_t v15 = (v23 - 1) & v23;
    int64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
LABEL_30:
    uint64_t v25 = *(void *)(*(void *)(v7 + 48) + 8 * v21);
    Hasher.init(_seed:)();
    _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v80);
    uint64_t result = Hasher._finalize()();
    unint64_t v26 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v27 = result & ~v26;
    char v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v17 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v27) & ~*(void *)(v17 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v29 = 0;
      BOOL v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_115;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          char v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v17 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v19 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v17 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(void *)(*(void *)(v10 + 48) + 8 * v19) = v25;
    ++*(void *)(v10 + 16);
  }
  Swift::UInt v24 = v22 + 4;
  if (v24 >= v16) {
    goto LABEL_66;
  }
  int64_t v23 = v13[v24];
  if (v23)
  {
    unint64_t v18 = v24;
    goto LABEL_29;
  }
  while (1)
  {
    unint64_t v18 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v18 >= v16) {
      goto LABEL_66;
    }
    int64_t v23 = v13[v18];
    ++v24;
    if (v23) {
      goto LABEL_29;
    }
  }
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
  return result;
}

{
  unint64_t *v3;
  unint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int64_t v56;
  unint64_t v57;
  int64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;

  uint64_t v4 = v3;
  Swift::UInt v6 = result;
  unint64_t v7 = *v3;
  unint64_t v8 = *(void *)(*v3 + 16);
  unint64_t v9 = *(void *)(*v3 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
  {
    unint64_t v10 = *v3;
    goto LABEL_111;
  }
  if ((a3 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt8>);
    if (v9 > v8)
    {
      uint64_t v32 = static _SetStorage.copy(original:)();
      unint64_t v10 = v32;
      if (!*(void *)(v7 + 16)) {
        goto LABEL_102;
      }
      uint64_t result = v32 + 56;
      unint64_t v33 = v7 + 56;
      unint64_t v34 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
      if (v10 != v7 || result >= v33 + 8 * v34) {
        uint64_t result = (unint64_t)memmove((void *)result, (const void *)(v7 + 56), 8 * v34);
      }
      int64_t v35 = 0;
      *(void *)(v10 + 16) = *(void *)(v7 + 16);
      uint64_t v36 = 1 << *(unsigned char *)(v7 + 32);
      uint64_t v37 = -1;
      if (v36 < 64) {
        uint64_t v37 = ~(-1 << v36);
      }
      unint64_t v38 = v37 & *(void *)(v7 + 56);
      int64_t v39 = (unint64_t)(v36 + 63) >> 6;
      while (1)
      {
        if (v38)
        {
          unint64_t v40 = __clz(__rbit64(v38));
          v38 &= v38 - 1;
          unint64_t v41 = v40 | (v35 << 6);
        }
        else
        {
          int64_t v42 = v35 + 1;
          if (__OFADD__(v35, 1)) {
            goto LABEL_116;
          }
          if (v42 >= v39) {
            goto LABEL_102;
          }
          unint64_t v43 = *(void *)(v33 + 8 * v42);
          ++v35;
          if (!v43)
          {
            int64_t v35 = v42 + 1;
            if (v42 + 1 >= v39) {
              goto LABEL_102;
            }
            unint64_t v43 = *(void *)(v33 + 8 * v35);
            if (!v43)
            {
              int64_t v35 = v42 + 2;
              if (v42 + 2 >= v39) {
                goto LABEL_102;
              }
              unint64_t v43 = *(void *)(v33 + 8 * v35);
              if (!v43)
              {
                int64_t v35 = v42 + 3;
                if (v42 + 3 >= v39) {
                  goto LABEL_102;
                }
                unint64_t v43 = *(void *)(v33 + 8 * v35);
                if (!v43)
                {
                  int64_t v44 = v42 + 4;
                  if (v44 >= v39) {
                    goto LABEL_102;
                  }
                  unint64_t v43 = *(void *)(v33 + 8 * v44);
                  if (!v43)
                  {
                    while (1)
                    {
                      int64_t v35 = v44 + 1;
                      if (__OFADD__(v44, 1)) {
                        goto LABEL_120;
                      }
                      if (v35 >= v39) {
                        break;
                      }
                      unint64_t v43 = *(void *)(v33 + 8 * v35);
                      ++v44;
                      if (v43) {
                        goto LABEL_65;
                      }
                    }
LABEL_102:
                    uint64_t result = swift_release();
                    *uint64_t v4 = v10;
LABEL_111:
                    *(void *)(v10 + 8 * (a2 >> 6) + 56) |= 1 << a2;
                    *(unsigned char *)(*(void *)(v10 + 48) + a2) = v6;
                    uint64_t v70 = *(void *)(v10 + 16);
                    BOOL v71 = __OFADD__(v70, 1);
                    uint64_t v72 = v70 + 1;
                    if (!v71)
                    {
                      *(void *)(v10 + 16) = v72;
                      return result;
                    }
LABEL_118:
                    __break(1u);
                    goto LABEL_119;
                  }
                  int64_t v35 = v44;
                }
              }
            }
          }
LABEL_65:
          unint64_t v38 = (v43 - 1) & v43;
          unint64_t v41 = __clz(__rbit64(v43)) + (v35 << 6);
        }
        *(unsigned char *)(*(void *)(v10 + 48) + v41) = *(unsigned char *)(*(void *)(v7 + 48) + v41);
      }
    }
    uint64_t result = static _SetStorage.resize(original:capacity:move:)();
    unint64_t v10 = result;
    if (!*(void *)(v7 + 16)) {
      goto LABEL_105;
    }
    int64_t v46 = 0;
    unint64_t v47 = v7 + 56;
    uint64_t v48 = 1 << *(unsigned char *)(v7 + 32);
    if (v48 < 64) {
      uint64_t v49 = ~(-1 << v48);
    }
    else {
      uint64_t v49 = -1;
    }
    unint64_t v50 = v49 & *(void *)(v7 + 56);
    int64_t v51 = (unint64_t)(v48 + 63) >> 6;
    unint64_t v52 = result + 56;
    while (1)
    {
      if (v50)
      {
        unint64_t v54 = __clz(__rbit64(v50));
        v50 &= v50 - 1;
        unint64_t v55 = v54 | (v46 << 6);
      }
      else
      {
        int64_t v56 = v46 + 1;
        if (__OFADD__(v46, 1)) {
          goto LABEL_117;
        }
        if (v56 >= v51) {
          goto LABEL_105;
        }
        unint64_t v57 = *(void *)(v47 + 8 * v56);
        ++v46;
        if (!v57)
        {
          int64_t v46 = v56 + 1;
          if (v56 + 1 >= v51) {
            goto LABEL_105;
          }
          unint64_t v57 = *(void *)(v47 + 8 * v46);
          if (!v57)
          {
            int64_t v46 = v56 + 2;
            if (v56 + 2 >= v51) {
              goto LABEL_105;
            }
            unint64_t v57 = *(void *)(v47 + 8 * v46);
            if (!v57)
            {
              int64_t v46 = v56 + 3;
              if (v56 + 3 >= v51) {
                goto LABEL_105;
              }
              unint64_t v57 = *(void *)(v47 + 8 * v46);
              if (!v57)
              {
                int64_t v58 = v56 + 4;
                if (v58 >= v51) {
                  goto LABEL_105;
                }
                unint64_t v57 = *(void *)(v47 + 8 * v58);
                if (!v57)
                {
                  while (1)
                  {
                    int64_t v46 = v58 + 1;
                    if (__OFADD__(v58, 1)) {
                      goto LABEL_121;
                    }
                    if (v46 >= v51) {
                      break;
                    }
                    unint64_t v57 = *(void *)(v47 + 8 * v46);
                    ++v58;
                    if (v57) {
                      goto LABEL_92;
                    }
                  }
LABEL_105:
                  swift_release();
                  *uint64_t v4 = v10;
                  uint64_t result = MEMORY[0x185303FF0](*(void *)(v10 + 40), v6, 1);
                  uint64_t v67 = -1 << *(unsigned char *)(v10 + 32);
                  a2 = result & ~v67;
                  if ((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
                  {
                    uint64_t v68 = *(void *)(v10 + 48);
                    if (*(unsigned __int8 *)(v68 + a2) == v6)
                    {
LABEL_110:
                      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                      __break(1u);
                    }
                    else
                    {
                      uint64_t v69 = ~v67;
                      while (1)
                      {
                        a2 = (a2 + 1) & v69;
                        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
                          break;
                        }
                        if (*(unsigned __int8 *)(v68 + a2) == v6) {
                          goto LABEL_110;
                        }
                      }
                    }
                  }
                  goto LABEL_111;
                }
                int64_t v46 = v58;
              }
            }
          }
        }
LABEL_92:
        unint64_t v50 = (v57 - 1) & v57;
        unint64_t v55 = __clz(__rbit64(v57)) + (v46 << 6);
      }
      Swift::UInt v59 = *(unsigned char *)(*(void *)(v7 + 48) + v55);
      uint64_t result = MEMORY[0x185303FF0](*(void *)(v10 + 40), v59, 1);
      uint64_t v60 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v61 = result & ~v60;
      unint64_t v62 = v61 >> 6;
      if (((-1 << v61) & ~*(void *)(v52 + 8 * (v61 >> 6))) != 0)
      {
        unint64_t v53 = __clz(__rbit64((-1 << v61) & ~*(void *)(v52 + 8 * (v61 >> 6)))) | v61 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_74;
      }
      char v63 = 0;
      unint64_t v64 = (unint64_t)(63 - v60) >> 6;
      do
      {
        if (++v62 == v64 && (v63 & 1) != 0)
        {
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
          goto LABEL_118;
        }
        BOOL v65 = v62 == v64;
        if (v62 == v64) {
          unint64_t v62 = 0;
        }
        v63 |= v65;
        uint64_t v66 = *(void *)(v52 + 8 * v62);
      }
      while (v66 == -1);
      unint64_t v53 = __clz(__rbit64(~v66)) + (v62 << 6);
LABEL_74:
      *(void *)(v52 + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v53;
      *(unsigned char *)(*(void *)(v10 + 48) + v53) = v59;
      ++*(void *)(v10 + 16);
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt8>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v10 = result;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_105;
  }
  int64_t v11 = 0;
  int64_t v12 = (void *)(v7 + 56);
  uint64_t v13 = 1 << *(unsigned char *)(v7 + 32);
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & *(void *)(v7 + 56);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  unint64_t v17 = result + 56;
  while (1)
  {
    if (v15)
    {
      unint64_t v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v20 = v19 | (v11 << 6);
      goto LABEL_30;
    }
    int64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_115;
    }
    if (v21 >= v16)
    {
LABEL_66:
      uint64_t v45 = 1 << *(unsigned char *)(v7 + 32);
      if (v45 > 63) {
        bzero((void *)(v7 + 56), ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        *int64_t v12 = -1 << v45;
      }
      *(void *)(v7 + 16) = 0;
      goto LABEL_105;
    }
    unint64_t v22 = v12[v21];
    ++v11;
    if (!v22)
    {
      int64_t v11 = v21 + 1;
      if (v21 + 1 >= v16) {
        goto LABEL_66;
      }
      unint64_t v22 = v12[v11];
      if (!v22)
      {
        int64_t v11 = v21 + 2;
        if (v21 + 2 >= v16) {
          goto LABEL_66;
        }
        unint64_t v22 = v12[v11];
        if (!v22)
        {
          int64_t v11 = v21 + 3;
          if (v21 + 3 >= v16) {
            goto LABEL_66;
          }
          unint64_t v22 = v12[v11];
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_29:
    unint64_t v15 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_30:
    Swift::UInt v24 = *(unsigned char *)(*(void *)(v7 + 48) + v20);
    uint64_t result = MEMORY[0x185303FF0](*(void *)(v10 + 40), v24, 1);
    uint64_t v25 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v17 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v26) & ~*(void *)(v17 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_114;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v17 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v18 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(unsigned char *)(*(void *)(v10 + 48) + v18) = v24;
    ++*(void *)(v10 + 16);
  }
  int64_t v23 = v21 + 4;
  if (v23 >= v16) {
    goto LABEL_66;
  }
  unint64_t v22 = v12[v23];
  if (v22)
  {
    int64_t v11 = v23;
    goto LABEL_29;
  }
  while (1)
  {
    int64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v16) {
      goto LABEL_66;
    }
    unint64_t v22 = v12[v11];
    ++v23;
    if (v22) {
      goto LABEL_29;
    }
  }
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
  return result;
}

{
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;

  uint64_t v4 = v3;
  Swift::UInt v6 = result;
  unint64_t v7 = *v3;
  unint64_t v8 = *(void *)(*v3 + 16);
  unint64_t v9 = *(void *)(*v3 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
  {
    unint64_t v10 = *v3;
    goto LABEL_111;
  }
  if ((a3 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<Int>);
    if (v9 > v8)
    {
      uint64_t v32 = static _SetStorage.copy(original:)();
      unint64_t v10 = v32;
      if (!*(void *)(v7 + 16)) {
        goto LABEL_102;
      }
      uint64_t result = v32 + 56;
      unint64_t v33 = v7 + 56;
      unint64_t v34 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
      if (v10 != v7 || result >= v33 + 8 * v34) {
        uint64_t result = (unint64_t)memmove((void *)result, (const void *)(v7 + 56), 8 * v34);
      }
      int64_t v35 = 0;
      *(void *)(v10 + 16) = *(void *)(v7 + 16);
      uint64_t v36 = 1 << *(unsigned char *)(v7 + 32);
      uint64_t v37 = -1;
      if (v36 < 64) {
        uint64_t v37 = ~(-1 << v36);
      }
      unint64_t v38 = v37 & *(void *)(v7 + 56);
      int64_t v39 = (unint64_t)(v36 + 63) >> 6;
      while (1)
      {
        if (v38)
        {
          unint64_t v40 = __clz(__rbit64(v38));
          v38 &= v38 - 1;
          unint64_t v41 = v40 | (v35 << 6);
        }
        else
        {
          int64_t v42 = v35 + 1;
          if (__OFADD__(v35, 1)) {
            goto LABEL_116;
          }
          if (v42 >= v39) {
            goto LABEL_102;
          }
          unint64_t v43 = *(void *)(v33 + 8 * v42);
          ++v35;
          if (!v43)
          {
            int64_t v35 = v42 + 1;
            if (v42 + 1 >= v39) {
              goto LABEL_102;
            }
            unint64_t v43 = *(void *)(v33 + 8 * v35);
            if (!v43)
            {
              int64_t v35 = v42 + 2;
              if (v42 + 2 >= v39) {
                goto LABEL_102;
              }
              unint64_t v43 = *(void *)(v33 + 8 * v35);
              if (!v43)
              {
                int64_t v35 = v42 + 3;
                if (v42 + 3 >= v39) {
                  goto LABEL_102;
                }
                unint64_t v43 = *(void *)(v33 + 8 * v35);
                if (!v43)
                {
                  int64_t v44 = v42 + 4;
                  if (v44 >= v39) {
                    goto LABEL_102;
                  }
                  unint64_t v43 = *(void *)(v33 + 8 * v44);
                  if (!v43)
                  {
                    while (1)
                    {
                      int64_t v35 = v44 + 1;
                      if (__OFADD__(v44, 1)) {
                        goto LABEL_120;
                      }
                      if (v35 >= v39) {
                        break;
                      }
                      unint64_t v43 = *(void *)(v33 + 8 * v35);
                      ++v44;
                      if (v43) {
                        goto LABEL_65;
                      }
                    }
LABEL_102:
                    uint64_t result = swift_release();
                    *uint64_t v4 = v10;
LABEL_111:
                    *(void *)(v10 + 8 * (a2 >> 6) + 56) |= 1 << a2;
                    *(void *)(*(void *)(v10 + 48) + 8 * a2) = v6;
                    uint64_t v69 = *(void *)(v10 + 16);
                    uint64_t v70 = __OFADD__(v69, 1);
                    BOOL v71 = v69 + 1;
                    if (!v70)
                    {
                      *(void *)(v10 + 16) = v71;
                      return result;
                    }
LABEL_118:
                    __break(1u);
                    goto LABEL_119;
                  }
                  int64_t v35 = v44;
                }
              }
            }
          }
LABEL_65:
          unint64_t v38 = (v43 - 1) & v43;
          unint64_t v41 = __clz(__rbit64(v43)) + (v35 << 6);
        }
        *(void *)(*(void *)(v10 + 48) + 8 * v41) = *(void *)(*(void *)(v7 + 48) + 8 * v41);
      }
    }
    uint64_t result = static _SetStorage.resize(original:capacity:move:)();
    unint64_t v10 = result;
    if (!*(void *)(v7 + 16)) {
      goto LABEL_105;
    }
    uint64_t v45 = 0;
    int64_t v46 = v7 + 56;
    unint64_t v47 = 1 << *(unsigned char *)(v7 + 32);
    if (v47 < 64) {
      uint64_t v48 = ~(-1 << v47);
    }
    else {
      uint64_t v48 = -1;
    }
    uint64_t v49 = v48 & *(void *)(v7 + 56);
    unint64_t v50 = (unint64_t)(v47 + 63) >> 6;
    int64_t v51 = result + 56;
    while (1)
    {
      if (v49)
      {
        unint64_t v53 = __clz(__rbit64(v49));
        v49 &= v49 - 1;
        unint64_t v54 = v53 | (v45 << 6);
      }
      else
      {
        unint64_t v55 = v45 + 1;
        if (__OFADD__(v45, 1)) {
          goto LABEL_117;
        }
        if (v55 >= v50) {
          goto LABEL_105;
        }
        int64_t v56 = *(void *)(v46 + 8 * v55);
        ++v45;
        if (!v56)
        {
          uint64_t v45 = v55 + 1;
          if (v55 + 1 >= v50) {
            goto LABEL_105;
          }
          int64_t v56 = *(void *)(v46 + 8 * v45);
          if (!v56)
          {
            uint64_t v45 = v55 + 2;
            if (v55 + 2 >= v50) {
              goto LABEL_105;
            }
            int64_t v56 = *(void *)(v46 + 8 * v45);
            if (!v56)
            {
              uint64_t v45 = v55 + 3;
              if (v55 + 3 >= v50) {
                goto LABEL_105;
              }
              int64_t v56 = *(void *)(v46 + 8 * v45);
              if (!v56)
              {
                unint64_t v57 = v55 + 4;
                if (v57 >= v50) {
                  goto LABEL_105;
                }
                int64_t v56 = *(void *)(v46 + 8 * v57);
                if (!v56)
                {
                  while (1)
                  {
                    uint64_t v45 = v57 + 1;
                    if (__OFADD__(v57, 1)) {
                      goto LABEL_121;
                    }
                    if (v45 >= v50) {
                      break;
                    }
                    int64_t v56 = *(void *)(v46 + 8 * v45);
                    ++v57;
                    if (v56) {
                      goto LABEL_92;
                    }
                  }
LABEL_105:
                  swift_release();
                  *uint64_t v4 = v10;
                  uint64_t result = static Hasher._hash(seed:_:)();
                  uint64_t v66 = -1 << *(unsigned char *)(v10 + 32);
                  a2 = result & ~v66;
                  if ((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
                  {
                    uint64_t v67 = *(void *)(v10 + 48);
                    if (*(void *)(v67 + 8 * a2) == v6)
                    {
LABEL_110:
                      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                      __break(1u);
                    }
                    else
                    {
                      uint64_t v68 = ~v66;
                      while (1)
                      {
                        a2 = (a2 + 1) & v68;
                        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
                          break;
                        }
                        if (*(void *)(v67 + 8 * a2) == v6) {
                          goto LABEL_110;
                        }
                      }
                    }
                  }
                  goto LABEL_111;
                }
                uint64_t v45 = v57;
              }
            }
          }
        }
LABEL_92:
        uint64_t v49 = (v56 - 1) & v56;
        unint64_t v54 = __clz(__rbit64(v56)) + (v45 << 6);
      }
      int64_t v58 = *(void *)(*(void *)(v7 + 48) + 8 * v54);
      uint64_t result = static Hasher._hash(seed:_:)();
      Swift::UInt v59 = -1 << *(unsigned char *)(v10 + 32);
      uint64_t v60 = result & ~v59;
      unint64_t v61 = v60 >> 6;
      if (((-1 << v60) & ~*(void *)(v51 + 8 * (v60 >> 6))) != 0)
      {
        unint64_t v52 = __clz(__rbit64((-1 << v60) & ~*(void *)(v51 + 8 * (v60 >> 6)))) | v60 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_74;
      }
      unint64_t v62 = 0;
      char v63 = (unint64_t)(63 - v59) >> 6;
      do
      {
        if (++v61 == v63 && (v62 & 1) != 0)
        {
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
          goto LABEL_118;
        }
        unint64_t v64 = v61 == v63;
        if (v61 == v63) {
          unint64_t v61 = 0;
        }
        v62 |= v64;
        BOOL v65 = *(void *)(v51 + 8 * v61);
      }
      while (v65 == -1);
      unint64_t v52 = __clz(__rbit64(~v65)) + (v61 << 6);
LABEL_74:
      *(void *)(v51 + ((v52 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v52;
      *(void *)(*(void *)(v10 + 48) + 8 * v52) = v58;
      ++*(void *)(v10 + 16);
    }
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<Int>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v10 = result;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_105;
  }
  Swift::UInt v74 = v6;
  int64_t v11 = 0;
  int64_t v12 = (uint64_t *)(v7 + 56);
  uint64_t v13 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v72 = -1 << v13;
  Swift::UInt v73 = v13;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & *(void *)(v7 + 56);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  unint64_t v17 = result + 56;
  while (1)
  {
    if (v15)
    {
      unint64_t v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v20 = v19 | (v11 << 6);
      goto LABEL_30;
    }
    int64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_115;
    }
    if (v21 >= v16)
    {
LABEL_66:
      if (v73 >= 64) {
        bzero((void *)(v7 + 56), 8 * v16);
      }
      else {
        *int64_t v12 = v72;
      }
      Swift::UInt v6 = v74;
      *(void *)(v7 + 16) = 0;
      goto LABEL_105;
    }
    unint64_t v22 = v12[v21];
    ++v11;
    if (!v22)
    {
      int64_t v11 = v21 + 1;
      if (v21 + 1 >= v16) {
        goto LABEL_66;
      }
      unint64_t v22 = v12[v11];
      if (!v22)
      {
        int64_t v11 = v21 + 2;
        if (v21 + 2 >= v16) {
          goto LABEL_66;
        }
        unint64_t v22 = v12[v11];
        if (!v22)
        {
          int64_t v11 = v21 + 3;
          if (v21 + 3 >= v16) {
            goto LABEL_66;
          }
          unint64_t v22 = v12[v11];
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_29:
    unint64_t v15 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_30:
    Swift::UInt v24 = *(void *)(*(void *)(v7 + 48) + 8 * v20);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v25 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v17 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v26) & ~*(void *)(v17 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_114;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v17 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v18 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(void *)(*(void *)(v10 + 48) + 8 * v18) = v24;
    ++*(void *)(v10 + 16);
  }
  int64_t v23 = v21 + 4;
  if (v23 >= v16) {
    goto LABEL_66;
  }
  unint64_t v22 = v12[v23];
  if (v22)
  {
    int64_t v11 = v23;
    goto LABEL_29;
  }
  while (1)
  {
    int64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v16) {
      goto LABEL_66;
    }
    unint64_t v22 = v12[v11];
    ++v23;
    if (v22) {
      goto LABEL_29;
    }
  }
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
  return result;
}

{
  unint64_t *v3;
  unint64_t *v4;
  Swift::UInt32 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  Swift::UInt32 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int64_t v56;
  unint64_t v57;
  int64_t v58;
  Swift::UInt32 v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  Swift::UInt32 v73;
  Swift::UInt32 v74;

  uint64_t v4 = v3;
  Swift::UInt v6 = result;
  unint64_t v7 = *v3;
  unint64_t v8 = *(void *)(*v3 + 16);
  unint64_t v9 = *(void *)(*v3 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
  {
    unint64_t v10 = *v3;
    goto LABEL_112;
  }
  if ((a3 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Unicode.Scalar>);
    if (v9 > v8)
    {
      uint64_t v32 = static _SetStorage.copy(original:)();
      unint64_t v10 = v32;
      if (!*(void *)(v7 + 16)) {
        goto LABEL_102;
      }
      uint64_t result = v32 + 56;
      unint64_t v33 = v7 + 56;
      unint64_t v34 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
      if (v10 != v7 || result >= v33 + 8 * v34) {
        uint64_t result = (unint64_t)memmove((void *)result, (const void *)(v7 + 56), 8 * v34);
      }
      int64_t v35 = 0;
      *(void *)(v10 + 16) = *(void *)(v7 + 16);
      uint64_t v36 = 1 << *(unsigned char *)(v7 + 32);
      uint64_t v37 = -1;
      if (v36 < 64) {
        uint64_t v37 = ~(-1 << v36);
      }
      unint64_t v38 = v37 & *(void *)(v7 + 56);
      int64_t v39 = (unint64_t)(v36 + 63) >> 6;
      while (1)
      {
        if (v38)
        {
          unint64_t v40 = __clz(__rbit64(v38));
          v38 &= v38 - 1;
          unint64_t v41 = v40 | (v35 << 6);
        }
        else
        {
          int64_t v42 = v35 + 1;
          if (__OFADD__(v35, 1)) {
            goto LABEL_117;
          }
          if (v42 >= v39) {
            goto LABEL_102;
          }
          unint64_t v43 = *(void *)(v33 + 8 * v42);
          ++v35;
          if (!v43)
          {
            int64_t v35 = v42 + 1;
            if (v42 + 1 >= v39) {
              goto LABEL_102;
            }
            unint64_t v43 = *(void *)(v33 + 8 * v35);
            if (!v43)
            {
              int64_t v35 = v42 + 2;
              if (v42 + 2 >= v39) {
                goto LABEL_102;
              }
              unint64_t v43 = *(void *)(v33 + 8 * v35);
              if (!v43)
              {
                int64_t v35 = v42 + 3;
                if (v42 + 3 >= v39) {
                  goto LABEL_102;
                }
                unint64_t v43 = *(void *)(v33 + 8 * v35);
                if (!v43)
                {
                  int64_t v44 = v42 + 4;
                  if (v44 >= v39) {
                    goto LABEL_102;
                  }
                  unint64_t v43 = *(void *)(v33 + 8 * v44);
                  if (!v43)
                  {
                    while (1)
                    {
                      int64_t v35 = v44 + 1;
                      if (__OFADD__(v44, 1)) {
                        goto LABEL_121;
                      }
                      if (v35 >= v39) {
                        break;
                      }
                      unint64_t v43 = *(void *)(v33 + 8 * v35);
                      ++v44;
                      if (v43) {
                        goto LABEL_65;
                      }
                    }
LABEL_102:
                    uint64_t result = swift_release();
                    *uint64_t v4 = v10;
LABEL_112:
                    *(void *)(v10 + 8 * (a2 >> 6) + 56) |= 1 << a2;
                    *(_DWORD *)(*(void *)(v10 + 48) + 4 * a2) = v6;
                    uint64_t v70 = *(void *)(v10 + 16);
                    BOOL v71 = __OFADD__(v70, 1);
                    uint64_t v72 = v70 + 1;
                    if (!v71)
                    {
                      *(void *)(v10 + 16) = v72;
                      return result;
                    }
LABEL_119:
                    __break(1u);
                    goto LABEL_120;
                  }
                  int64_t v35 = v44;
                }
              }
            }
          }
LABEL_65:
          unint64_t v38 = (v43 - 1) & v43;
          unint64_t v41 = __clz(__rbit64(v43)) + (v35 << 6);
        }
        *(_DWORD *)(*(void *)(v10 + 48) + 4 * v41) = *(_DWORD *)(*(void *)(v7 + 48) + 4 * v41);
      }
    }
    uint64_t result = static _SetStorage.resize(original:capacity:move:)();
    unint64_t v10 = result;
    if (*(void *)(v7 + 16))
    {
      Swift::UInt v74 = v6;
      int64_t v46 = 0;
      unint64_t v47 = v7 + 56;
      uint64_t v48 = 1 << *(unsigned char *)(v7 + 32);
      if (v48 < 64) {
        uint64_t v49 = ~(-1 << v48);
      }
      else {
        uint64_t v49 = -1;
      }
      unint64_t v50 = v49 & *(void *)(v7 + 56);
      int64_t v51 = (unint64_t)(v48 + 63) >> 6;
      unint64_t v52 = result + 56;
      while (1)
      {
        if (v50)
        {
          unint64_t v54 = __clz(__rbit64(v50));
          v50 &= v50 - 1;
          unint64_t v55 = v54 | (v46 << 6);
        }
        else
        {
          int64_t v56 = v46 + 1;
          if (__OFADD__(v46, 1)) {
            goto LABEL_118;
          }
          if (v56 >= v51) {
            goto LABEL_114;
          }
          unint64_t v57 = *(void *)(v47 + 8 * v56);
          ++v46;
          if (!v57)
          {
            int64_t v46 = v56 + 1;
            if (v56 + 1 >= v51) {
              goto LABEL_114;
            }
            unint64_t v57 = *(void *)(v47 + 8 * v46);
            if (!v57)
            {
              int64_t v46 = v56 + 2;
              if (v56 + 2 >= v51) {
                goto LABEL_114;
              }
              unint64_t v57 = *(void *)(v47 + 8 * v46);
              if (!v57)
              {
                int64_t v46 = v56 + 3;
                if (v56 + 3 >= v51) {
                  goto LABEL_114;
                }
                unint64_t v57 = *(void *)(v47 + 8 * v46);
                if (!v57)
                {
                  int64_t v58 = v56 + 4;
                  if (v58 >= v51) {
                    goto LABEL_114;
                  }
                  unint64_t v57 = *(void *)(v47 + 8 * v58);
                  if (!v57)
                  {
                    while (1)
                    {
                      int64_t v46 = v58 + 1;
                      if (__OFADD__(v58, 1)) {
                        goto LABEL_122;
                      }
                      if (v46 >= v51) {
                        break;
                      }
                      unint64_t v57 = *(void *)(v47 + 8 * v46);
                      ++v58;
                      if (v57) {
                        goto LABEL_92;
                      }
                    }
LABEL_114:
                    swift_release();
                    Swift::UInt v6 = v74;
                    uint64_t v4 = v3;
LABEL_106:
                    *uint64_t v4 = v10;
                    Hasher.init(_seed:)();
                    Hasher._combine(_:)(v6);
                    uint64_t result = Hasher._finalize()();
                    uint64_t v67 = -1 << *(unsigned char *)(v10 + 32);
                    a2 = result & ~v67;
                    if ((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
                    {
                      uint64_t v68 = *(void *)(v10 + 48);
                      if (*(_DWORD *)(v68 + 4 * a2) == v6)
                      {
LABEL_111:
                        uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                        __break(1u);
                      }
                      else
                      {
                        uint64_t v69 = ~v67;
                        while (1)
                        {
                          a2 = (a2 + 1) & v69;
                          if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
                            break;
                          }
                          if (*(_DWORD *)(v68 + 4 * a2) == v6) {
                            goto LABEL_111;
                          }
                        }
                      }
                    }
                    goto LABEL_112;
                  }
                  int64_t v46 = v58;
                }
              }
            }
          }
LABEL_92:
          unint64_t v50 = (v57 - 1) & v57;
          unint64_t v55 = __clz(__rbit64(v57)) + (v46 << 6);
        }
        Swift::UInt v59 = *(_DWORD *)(*(void *)(v7 + 48) + 4 * v55);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v59);
        uint64_t result = Hasher._finalize()();
        uint64_t v60 = -1 << *(unsigned char *)(v10 + 32);
        unint64_t v61 = result & ~v60;
        unint64_t v62 = v61 >> 6;
        if (((-1 << v61) & ~*(void *)(v52 + 8 * (v61 >> 6))) != 0)
        {
          unint64_t v53 = __clz(__rbit64((-1 << v61) & ~*(void *)(v52 + 8 * (v61 >> 6)))) | v61 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_74;
        }
        char v63 = 0;
        unint64_t v64 = (unint64_t)(63 - v60) >> 6;
        do
        {
          if (++v62 == v64 && (v63 & 1) != 0)
          {
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
            goto LABEL_119;
          }
          BOOL v65 = v62 == v64;
          if (v62 == v64) {
            unint64_t v62 = 0;
          }
          v63 |= v65;
          uint64_t v66 = *(void *)(v52 + 8 * v62);
        }
        while (v66 == -1);
        unint64_t v53 = __clz(__rbit64(~v66)) + (v62 << 6);
LABEL_74:
        *(void *)(v52 + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v53;
        *(_DWORD *)(*(void *)(v10 + 48) + 4 * v53) = v59;
        ++*(void *)(v10 + 16);
      }
    }
LABEL_105:
    swift_release();
    goto LABEL_106;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Unicode.Scalar>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v10 = result;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_105;
  }
  Swift::UInt v73 = v6;
  int64_t v11 = 0;
  int64_t v12 = (void *)(v7 + 56);
  uint64_t v13 = 1 << *(unsigned char *)(v7 + 32);
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & *(void *)(v7 + 56);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  unint64_t v17 = result + 56;
  while (1)
  {
    if (v15)
    {
      unint64_t v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v20 = v19 | (v11 << 6);
      goto LABEL_30;
    }
    int64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_116;
    }
    if (v21 >= v16)
    {
LABEL_66:
      uint64_t v45 = 1 << *(unsigned char *)(v7 + 32);
      if (v45 > 63) {
        bzero((void *)(v7 + 56), ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        *int64_t v12 = -1 << v45;
      }
      Swift::UInt v6 = v73;
      uint64_t v4 = v3;
      *(void *)(v7 + 16) = 0;
      goto LABEL_105;
    }
    unint64_t v22 = v12[v21];
    ++v11;
    if (!v22)
    {
      int64_t v11 = v21 + 1;
      if (v21 + 1 >= v16) {
        goto LABEL_66;
      }
      unint64_t v22 = v12[v11];
      if (!v22)
      {
        int64_t v11 = v21 + 2;
        if (v21 + 2 >= v16) {
          goto LABEL_66;
        }
        unint64_t v22 = v12[v11];
        if (!v22)
        {
          int64_t v11 = v21 + 3;
          if (v21 + 3 >= v16) {
            goto LABEL_66;
          }
          unint64_t v22 = v12[v11];
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_29:
    unint64_t v15 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_30:
    Swift::UInt v24 = *(_DWORD *)(*(void *)(v7 + 48) + 4 * v20);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v24);
    uint64_t result = Hasher._finalize()();
    uint64_t v25 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v17 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v26) & ~*(void *)(v17 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_115;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v17 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v18 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_DWORD *)(*(void *)(v10 + 48) + 4 * v18) = v24;
    ++*(void *)(v10 + 16);
  }
  int64_t v23 = v21 + 4;
  if (v23 >= v16) {
    goto LABEL_66;
  }
  unint64_t v22 = v12[v23];
  if (v22)
  {
    int64_t v11 = v23;
    goto LABEL_29;
  }
  while (1)
  {
    int64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v16) {
      goto LABEL_66;
    }
    unint64_t v22 = v12[v11];
    ++v23;
    if (v22) {
      goto LABEL_29;
    }
  }
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
  return result;
}

{
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;

  uint64_t v4 = v3;
  Swift::UInt v6 = result;
  unint64_t v7 = *v3;
  unint64_t v8 = *(void *)(*v3 + 16);
  unint64_t v9 = *(void *)(*v3 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
  {
    unint64_t v10 = *v3;
    goto LABEL_111;
  }
  if ((a3 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ObjectIdentifier>);
    if (v9 > v8)
    {
      uint64_t v32 = static _SetStorage.copy(original:)();
      unint64_t v10 = v32;
      if (!*(void *)(v7 + 16)) {
        goto LABEL_102;
      }
      uint64_t result = v32 + 56;
      unint64_t v33 = v7 + 56;
      unint64_t v34 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
      if (v10 != v7 || result >= v33 + 8 * v34) {
        uint64_t result = (unint64_t)memmove((void *)result, (const void *)(v7 + 56), 8 * v34);
      }
      int64_t v35 = 0;
      *(void *)(v10 + 16) = *(void *)(v7 + 16);
      uint64_t v36 = 1 << *(unsigned char *)(v7 + 32);
      uint64_t v37 = -1;
      if (v36 < 64) {
        uint64_t v37 = ~(-1 << v36);
      }
      unint64_t v38 = v37 & *(void *)(v7 + 56);
      int64_t v39 = (unint64_t)(v36 + 63) >> 6;
      while (1)
      {
        if (v38)
        {
          unint64_t v40 = __clz(__rbit64(v38));
          v38 &= v38 - 1;
          unint64_t v41 = v40 | (v35 << 6);
        }
        else
        {
          int64_t v42 = v35 + 1;
          if (__OFADD__(v35, 1)) {
            goto LABEL_116;
          }
          if (v42 >= v39) {
            goto LABEL_102;
          }
          unint64_t v43 = *(void *)(v33 + 8 * v42);
          ++v35;
          if (!v43)
          {
            int64_t v35 = v42 + 1;
            if (v42 + 1 >= v39) {
              goto LABEL_102;
            }
            unint64_t v43 = *(void *)(v33 + 8 * v35);
            if (!v43)
            {
              int64_t v35 = v42 + 2;
              if (v42 + 2 >= v39) {
                goto LABEL_102;
              }
              unint64_t v43 = *(void *)(v33 + 8 * v35);
              if (!v43)
              {
                int64_t v35 = v42 + 3;
                if (v42 + 3 >= v39) {
                  goto LABEL_102;
                }
                unint64_t v43 = *(void *)(v33 + 8 * v35);
                if (!v43)
                {
                  int64_t v44 = v42 + 4;
                  if (v44 >= v39) {
                    goto LABEL_102;
                  }
                  unint64_t v43 = *(void *)(v33 + 8 * v44);
                  if (!v43)
                  {
                    while (1)
                    {
                      int64_t v35 = v44 + 1;
                      if (__OFADD__(v44, 1)) {
                        goto LABEL_120;
                      }
                      if (v35 >= v39) {
                        break;
                      }
                      unint64_t v43 = *(void *)(v33 + 8 * v35);
                      ++v44;
                      if (v43) {
                        goto LABEL_65;
                      }
                    }
LABEL_102:
                    uint64_t result = swift_release();
                    *uint64_t v4 = v10;
LABEL_111:
                    *(void *)(v10 + 8 * (a2 >> 6) + 56) |= 1 << a2;
                    *(void *)(*(void *)(v10 + 48) + 8 * a2) = v6;
                    uint64_t v69 = *(void *)(v10 + 16);
                    uint64_t v70 = __OFADD__(v69, 1);
                    BOOL v71 = v69 + 1;
                    if (!v70)
                    {
                      *(void *)(v10 + 16) = v71;
                      return result;
                    }
LABEL_118:
                    __break(1u);
                    goto LABEL_119;
                  }
                  int64_t v35 = v44;
                }
              }
            }
          }
LABEL_65:
          unint64_t v38 = (v43 - 1) & v43;
          unint64_t v41 = __clz(__rbit64(v43)) + (v35 << 6);
        }
        *(void *)(*(void *)(v10 + 48) + 8 * v41) = *(void *)(*(void *)(v7 + 48) + 8 * v41);
      }
    }
    uint64_t result = static _SetStorage.resize(original:capacity:move:)();
    unint64_t v10 = result;
    if (!*(void *)(v7 + 16)) {
      goto LABEL_105;
    }
    uint64_t v45 = 0;
    int64_t v46 = v7 + 56;
    unint64_t v47 = 1 << *(unsigned char *)(v7 + 32);
    if (v47 < 64) {
      uint64_t v48 = ~(-1 << v47);
    }
    else {
      uint64_t v48 = -1;
    }
    uint64_t v49 = v48 & *(void *)(v7 + 56);
    unint64_t v50 = (unint64_t)(v47 + 63) >> 6;
    int64_t v51 = result + 56;
    while (1)
    {
      if (v49)
      {
        unint64_t v53 = __clz(__rbit64(v49));
        v49 &= v49 - 1;
        unint64_t v54 = v53 | (v45 << 6);
      }
      else
      {
        unint64_t v55 = v45 + 1;
        if (__OFADD__(v45, 1)) {
          goto LABEL_117;
        }
        if (v55 >= v50) {
          goto LABEL_105;
        }
        int64_t v56 = *(void *)(v46 + 8 * v55);
        ++v45;
        if (!v56)
        {
          uint64_t v45 = v55 + 1;
          if (v55 + 1 >= v50) {
            goto LABEL_105;
          }
          int64_t v56 = *(void *)(v46 + 8 * v45);
          if (!v56)
          {
            uint64_t v45 = v55 + 2;
            if (v55 + 2 >= v50) {
              goto LABEL_105;
            }
            int64_t v56 = *(void *)(v46 + 8 * v45);
            if (!v56)
            {
              uint64_t v45 = v55 + 3;
              if (v55 + 3 >= v50) {
                goto LABEL_105;
              }
              int64_t v56 = *(void *)(v46 + 8 * v45);
              if (!v56)
              {
                unint64_t v57 = v55 + 4;
                if (v57 >= v50) {
                  goto LABEL_105;
                }
                int64_t v56 = *(void *)(v46 + 8 * v57);
                if (!v56)
                {
                  while (1)
                  {
                    uint64_t v45 = v57 + 1;
                    if (__OFADD__(v57, 1)) {
                      goto LABEL_121;
                    }
                    if (v45 >= v50) {
                      break;
                    }
                    int64_t v56 = *(void *)(v46 + 8 * v45);
                    ++v57;
                    if (v56) {
                      goto LABEL_92;
                    }
                  }
LABEL_105:
                  swift_release();
                  *uint64_t v4 = v10;
                  uint64_t result = static Hasher._hash(seed:_:)();
                  uint64_t v66 = -1 << *(unsigned char *)(v10 + 32);
                  a2 = result & ~v66;
                  if ((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
                  {
                    uint64_t v67 = *(void *)(v10 + 48);
                    if (*(void *)(v67 + 8 * a2) == v6)
                    {
LABEL_110:
                      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                      __break(1u);
                    }
                    else
                    {
                      uint64_t v68 = ~v66;
                      while (1)
                      {
                        a2 = (a2 + 1) & v68;
                        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
                          break;
                        }
                        if (*(void *)(v67 + 8 * a2) == v6) {
                          goto LABEL_110;
                        }
                      }
                    }
                  }
                  goto LABEL_111;
                }
                uint64_t v45 = v57;
              }
            }
          }
        }
LABEL_92:
        uint64_t v49 = (v56 - 1) & v56;
        unint64_t v54 = __clz(__rbit64(v56)) + (v45 << 6);
      }
      int64_t v58 = *(void *)(*(void *)(v7 + 48) + 8 * v54);
      uint64_t result = static Hasher._hash(seed:_:)();
      Swift::UInt v59 = -1 << *(unsigned char *)(v10 + 32);
      uint64_t v60 = result & ~v59;
      unint64_t v61 = v60 >> 6;
      if (((-1 << v60) & ~*(void *)(v51 + 8 * (v60 >> 6))) != 0)
      {
        unint64_t v52 = __clz(__rbit64((-1 << v60) & ~*(void *)(v51 + 8 * (v60 >> 6)))) | v60 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_74;
      }
      unint64_t v62 = 0;
      char v63 = (unint64_t)(63 - v59) >> 6;
      do
      {
        if (++v61 == v63 && (v62 & 1) != 0)
        {
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
          goto LABEL_118;
        }
        unint64_t v64 = v61 == v63;
        if (v61 == v63) {
          unint64_t v61 = 0;
        }
        v62 |= v64;
        BOOL v65 = *(void *)(v51 + 8 * v61);
      }
      while (v65 == -1);
      unint64_t v52 = __clz(__rbit64(~v65)) + (v61 << 6);
LABEL_74:
      *(void *)(v51 + ((v52 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v52;
      *(void *)(*(void *)(v10 + 48) + 8 * v52) = v58;
      ++*(void *)(v10 + 16);
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ObjectIdentifier>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v10 = result;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_105;
  }
  Swift::UInt v74 = v6;
  int64_t v11 = 0;
  int64_t v12 = (uint64_t *)(v7 + 56);
  uint64_t v13 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v72 = -1 << v13;
  Swift::UInt v73 = v13;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & *(void *)(v7 + 56);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  unint64_t v17 = result + 56;
  while (1)
  {
    if (v15)
    {
      unint64_t v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v20 = v19 | (v11 << 6);
      goto LABEL_30;
    }
    int64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_115;
    }
    if (v21 >= v16)
    {
LABEL_66:
      if (v73 >= 64) {
        bzero((void *)(v7 + 56), 8 * v16);
      }
      else {
        *int64_t v12 = v72;
      }
      Swift::UInt v6 = v74;
      *(void *)(v7 + 16) = 0;
      goto LABEL_105;
    }
    unint64_t v22 = v12[v21];
    ++v11;
    if (!v22)
    {
      int64_t v11 = v21 + 1;
      if (v21 + 1 >= v16) {
        goto LABEL_66;
      }
      unint64_t v22 = v12[v11];
      if (!v22)
      {
        int64_t v11 = v21 + 2;
        if (v21 + 2 >= v16) {
          goto LABEL_66;
        }
        unint64_t v22 = v12[v11];
        if (!v22)
        {
          int64_t v11 = v21 + 3;
          if (v21 + 3 >= v16) {
            goto LABEL_66;
          }
          unint64_t v22 = v12[v11];
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_29:
    unint64_t v15 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_30:
    Swift::UInt v24 = *(void *)(*(void *)(v7 + 48) + 8 * v20);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v25 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v17 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v26) & ~*(void *)(v17 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_114;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v17 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v18 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(void *)(*(void *)(v10 + 48) + 8 * v18) = v24;
    ++*(void *)(v10 + 16);
  }
  int64_t v23 = v21 + 4;
  if (v23 >= v16) {
    goto LABEL_66;
  }
  unint64_t v22 = v12[v23];
  if (v22)
  {
    int64_t v11 = v23;
    goto LABEL_29;
  }
  while (1)
  {
    int64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v16) {
      goto LABEL_66;
    }
    unint64_t v22 = v12[v11];
    ++v23;
    if (v22) {
      goto LABEL_29;
    }
  }
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
  return result;
}

{
  unint64_t *v3;
  unint64_t *v4;
  Swift::UInt v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  Swift::UInt v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int64_t v56;
  unint64_t v57;
  int64_t v58;
  Swift::UInt v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  Swift::UInt v73;
  Swift::UInt v74;

  uint64_t v4 = v3;
  Swift::UInt v6 = result;
  unint64_t v7 = *v3;
  unint64_t v8 = *(void *)(*v3 + 16);
  unint64_t v9 = *(void *)(*v3 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
  {
    unint64_t v10 = *v3;
    goto LABEL_112;
  }
  if ((a3 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Date.ComponentsFormatStyle.Field>);
    if (v9 > v8)
    {
      uint64_t v32 = static _SetStorage.copy(original:)();
      unint64_t v10 = v32;
      if (!*(void *)(v7 + 16)) {
        goto LABEL_102;
      }
      uint64_t result = v32 + 56;
      unint64_t v33 = v7 + 56;
      unint64_t v34 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
      if (v10 != v7 || result >= v33 + 8 * v34) {
        uint64_t result = (unint64_t)memmove((void *)result, (const void *)(v7 + 56), 8 * v34);
      }
      int64_t v35 = 0;
      *(void *)(v10 + 16) = *(void *)(v7 + 16);
      uint64_t v36 = 1 << *(unsigned char *)(v7 + 32);
      uint64_t v37 = -1;
      if (v36 < 64) {
        uint64_t v37 = ~(-1 << v36);
      }
      unint64_t v38 = v37 & *(void *)(v7 + 56);
      int64_t v39 = (unint64_t)(v36 + 63) >> 6;
      while (1)
      {
        if (v38)
        {
          unint64_t v40 = __clz(__rbit64(v38));
          v38 &= v38 - 1;
          unint64_t v41 = v40 | (v35 << 6);
        }
        else
        {
          int64_t v42 = v35 + 1;
          if (__OFADD__(v35, 1)) {
            goto LABEL_117;
          }
          if (v42 >= v39) {
            goto LABEL_102;
          }
          unint64_t v43 = *(void *)(v33 + 8 * v42);
          ++v35;
          if (!v43)
          {
            int64_t v35 = v42 + 1;
            if (v42 + 1 >= v39) {
              goto LABEL_102;
            }
            unint64_t v43 = *(void *)(v33 + 8 * v35);
            if (!v43)
            {
              int64_t v35 = v42 + 2;
              if (v42 + 2 >= v39) {
                goto LABEL_102;
              }
              unint64_t v43 = *(void *)(v33 + 8 * v35);
              if (!v43)
              {
                int64_t v35 = v42 + 3;
                if (v42 + 3 >= v39) {
                  goto LABEL_102;
                }
                unint64_t v43 = *(void *)(v33 + 8 * v35);
                if (!v43)
                {
                  int64_t v44 = v42 + 4;
                  if (v44 >= v39) {
                    goto LABEL_102;
                  }
                  unint64_t v43 = *(void *)(v33 + 8 * v44);
                  if (!v43)
                  {
                    while (1)
                    {
                      int64_t v35 = v44 + 1;
                      if (__OFADD__(v44, 1)) {
                        goto LABEL_121;
                      }
                      if (v35 >= v39) {
                        break;
                      }
                      unint64_t v43 = *(void *)(v33 + 8 * v35);
                      ++v44;
                      if (v43) {
                        goto LABEL_65;
                      }
                    }
LABEL_102:
                    uint64_t result = swift_release();
                    *uint64_t v4 = v10;
LABEL_112:
                    *(void *)(v10 + 8 * (a2 >> 6) + 56) |= 1 << a2;
                    *(unsigned char *)(*(void *)(v10 + 48) + a2) = v6;
                    uint64_t v70 = *(void *)(v10 + 16);
                    BOOL v71 = __OFADD__(v70, 1);
                    uint64_t v72 = v70 + 1;
                    if (!v71)
                    {
                      *(void *)(v10 + 16) = v72;
                      return result;
                    }
LABEL_119:
                    __break(1u);
                    goto LABEL_120;
                  }
                  int64_t v35 = v44;
                }
              }
            }
          }
LABEL_65:
          unint64_t v38 = (v43 - 1) & v43;
          unint64_t v41 = __clz(__rbit64(v43)) + (v35 << 6);
        }
        *(unsigned char *)(*(void *)(v10 + 48) + v41) = *(unsigned char *)(*(void *)(v7 + 48) + v41);
      }
    }
    uint64_t result = static _SetStorage.resize(original:capacity:move:)();
    unint64_t v10 = result;
    if (*(void *)(v7 + 16))
    {
      Swift::UInt v74 = v6;
      int64_t v46 = 0;
      unint64_t v47 = v7 + 56;
      uint64_t v48 = 1 << *(unsigned char *)(v7 + 32);
      if (v48 < 64) {
        uint64_t v49 = ~(-1 << v48);
      }
      else {
        uint64_t v49 = -1;
      }
      unint64_t v50 = v49 & *(void *)(v7 + 56);
      int64_t v51 = (unint64_t)(v48 + 63) >> 6;
      unint64_t v52 = result + 56;
      while (1)
      {
        if (v50)
        {
          unint64_t v54 = __clz(__rbit64(v50));
          v50 &= v50 - 1;
          unint64_t v55 = v54 | (v46 << 6);
        }
        else
        {
          int64_t v56 = v46 + 1;
          if (__OFADD__(v46, 1)) {
            goto LABEL_118;
          }
          if (v56 >= v51) {
            goto LABEL_114;
          }
          unint64_t v57 = *(void *)(v47 + 8 * v56);
          ++v46;
          if (!v57)
          {
            int64_t v46 = v56 + 1;
            if (v56 + 1 >= v51) {
              goto LABEL_114;
            }
            unint64_t v57 = *(void *)(v47 + 8 * v46);
            if (!v57)
            {
              int64_t v46 = v56 + 2;
              if (v56 + 2 >= v51) {
                goto LABEL_114;
              }
              unint64_t v57 = *(void *)(v47 + 8 * v46);
              if (!v57)
              {
                int64_t v46 = v56 + 3;
                if (v56 + 3 >= v51) {
                  goto LABEL_114;
                }
                unint64_t v57 = *(void *)(v47 + 8 * v46);
                if (!v57)
                {
                  int64_t v58 = v56 + 4;
                  if (v58 >= v51) {
                    goto LABEL_114;
                  }
                  unint64_t v57 = *(void *)(v47 + 8 * v58);
                  if (!v57)
                  {
                    while (1)
                    {
                      int64_t v46 = v58 + 1;
                      if (__OFADD__(v58, 1)) {
                        goto LABEL_122;
                      }
                      if (v46 >= v51) {
                        break;
                      }
                      unint64_t v57 = *(void *)(v47 + 8 * v46);
                      ++v58;
                      if (v57) {
                        goto LABEL_92;
                      }
                    }
LABEL_114:
                    swift_release();
                    uint64_t v4 = v3;
                    Swift::UInt v6 = v74;
LABEL_106:
                    *uint64_t v4 = v10;
                    Hasher.init(_seed:)();
                    Hasher._combine(_:)(v6);
                    uint64_t result = Hasher._finalize()();
                    uint64_t v67 = -1 << *(unsigned char *)(v10 + 32);
                    a2 = result & ~v67;
                    if ((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
                    {
                      uint64_t v68 = *(void *)(v10 + 48);
                      if (*(unsigned __int8 *)(v68 + a2) == v6)
                      {
LABEL_111:
                        uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                        __break(1u);
                      }
                      else
                      {
                        uint64_t v69 = ~v67;
                        while (1)
                        {
                          a2 = (a2 + 1) & v69;
                          if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
                            break;
                          }
                          if (*(unsigned __int8 *)(v68 + a2) == v6) {
                            goto LABEL_111;
                          }
                        }
                      }
                    }
                    goto LABEL_112;
                  }
                  int64_t v46 = v58;
                }
              }
            }
          }
LABEL_92:
          unint64_t v50 = (v57 - 1) & v57;
          unint64_t v55 = __clz(__rbit64(v57)) + (v46 << 6);
        }
        Swift::UInt v59 = *(unsigned __int8 *)(*(void *)(v7 + 48) + v55);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v59);
        uint64_t result = Hasher._finalize()();
        uint64_t v60 = -1 << *(unsigned char *)(v10 + 32);
        unint64_t v61 = result & ~v60;
        unint64_t v62 = v61 >> 6;
        if (((-1 << v61) & ~*(void *)(v52 + 8 * (v61 >> 6))) != 0)
        {
          unint64_t v53 = __clz(__rbit64((-1 << v61) & ~*(void *)(v52 + 8 * (v61 >> 6)))) | v61 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_74;
        }
        char v63 = 0;
        unint64_t v64 = (unint64_t)(63 - v60) >> 6;
        do
        {
          if (++v62 == v64 && (v63 & 1) != 0)
          {
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
            goto LABEL_119;
          }
          BOOL v65 = v62 == v64;
          if (v62 == v64) {
            unint64_t v62 = 0;
          }
          v63 |= v65;
          uint64_t v66 = *(void *)(v52 + 8 * v62);
        }
        while (v66 == -1);
        unint64_t v53 = __clz(__rbit64(~v66)) + (v62 << 6);
LABEL_74:
        *(void *)(v52 + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v53;
        *(unsigned char *)(*(void *)(v10 + 48) + v53) = v59;
        ++*(void *)(v10 + 16);
      }
    }
LABEL_105:
    swift_release();
    goto LABEL_106;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Date.ComponentsFormatStyle.Field>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v10 = result;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_105;
  }
  Swift::UInt v73 = v6;
  int64_t v11 = 0;
  int64_t v12 = (void *)(v7 + 56);
  uint64_t v13 = 1 << *(unsigned char *)(v7 + 32);
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & *(void *)(v7 + 56);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  unint64_t v17 = result + 56;
  while (1)
  {
    if (v15)
    {
      unint64_t v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v20 = v19 | (v11 << 6);
      goto LABEL_30;
    }
    int64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_116;
    }
    if (v21 >= v16)
    {
LABEL_66:
      uint64_t v45 = 1 << *(unsigned char *)(v7 + 32);
      if (v45 > 63) {
        bzero((void *)(v7 + 56), ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        *int64_t v12 = -1 << v45;
      }
      uint64_t v4 = v3;
      Swift::UInt v6 = v73;
      *(void *)(v7 + 16) = 0;
      goto LABEL_105;
    }
    unint64_t v22 = v12[v21];
    ++v11;
    if (!v22)
    {
      int64_t v11 = v21 + 1;
      if (v21 + 1 >= v16) {
        goto LABEL_66;
      }
      unint64_t v22 = v12[v11];
      if (!v22)
      {
        int64_t v11 = v21 + 2;
        if (v21 + 2 >= v16) {
          goto LABEL_66;
        }
        unint64_t v22 = v12[v11];
        if (!v22)
        {
          int64_t v11 = v21 + 3;
          if (v21 + 3 >= v16) {
            goto LABEL_66;
          }
          unint64_t v22 = v12[v11];
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_29:
    unint64_t v15 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_30:
    Swift::UInt v24 = *(unsigned __int8 *)(*(void *)(v7 + 48) + v20);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v24);
    uint64_t result = Hasher._finalize()();
    uint64_t v25 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v17 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v26) & ~*(void *)(v17 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_115;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v17 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v18 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(unsigned char *)(*(void *)(v10 + 48) + v18) = v24;
    ++*(void *)(v10 + 16);
  }
  int64_t v23 = v21 + 4;
  if (v23 >= v16) {
    goto LABEL_66;
  }
  unint64_t v22 = v12[v23];
  if (v22)
  {
    int64_t v11 = v23;
    goto LABEL_29;
  }
  while (1)
  {
    int64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v16) {
      goto LABEL_66;
    }
    unint64_t v22 = v12[v11];
    ++v23;
    if (v22) {
      goto LABEL_29;
    }
  }
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
  return result;
}

uint64_t _NSSwiftCalendar.isEqual(_:)(uint64_t a1)
{
  outlined init with copy of (Hashable & Sendable)?(a1, (uint64_t)&v27, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v28)
  {
    type metadata accessor for _NSSwiftCalendar();
    if (swift_dynamicCast())
    {
      char v3 = *(char **)&v26[0];
      uint64_t v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____NSSwiftCalendar__lock);
      uint64_t v5 = v4 + 4;
      Swift::UInt v6 = v4 + 8;
      os_unfair_lock_lock(v4 + 8);
      closure #1 in _NSSwiftCalendar.calendar.getter(v5, &v27);
      os_unfair_lock_unlock(v6);
      v26[0] = v27;
      unint64_t v7 = *(os_unfair_lock_s **)&v3[OBJC_IVAR____NSSwiftCalendar__lock];
      unint64_t v8 = v7 + 4;
      unint64_t v9 = v7 + 8;
      os_unfair_lock_lock(v7 + 8);
      closure #1 in _NSSwiftCalendar.calendar.getter(v8, &v25);
      os_unfair_lock_unlock(v9);
      long long v24 = v25;
      char v10 = specialized static Calendar.== infix(_:_:)((uint64_t)v26, (uint64_t)&v24);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();

      return v10 & 1;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v27);
  }
  outlined init with copy of (Hashable & Sendable)?(a1, (uint64_t)&v27, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v28)
  {
    outlined destroy of Any?((uint64_t)&v27);
    goto LABEL_10;
  }
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSCalendar);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    char v10 = 0;
    return v10 & 1;
  }
  int64_t v11 = *(void **)&v26[0];
  int64_t v12 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____NSSwiftCalendar__lock);
  uint64_t v13 = v12 + 4;
  uint64_t v14 = v12 + 8;
  os_unfair_lock_lock(v12 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v13, &v27);
  os_unfair_lock_unlock(v14);
  v26[0] = v27;
  type metadata accessor for _NSSwiftCalendar();
  uint64_t v15 = swift_dynamicCastClass();
  if (v15)
  {
    uint64_t v16 = *(void *)(v15 + OBJC_IVAR____NSSwiftCalendar__lock);
    unint64_t v17 = (_OWORD *)(v16 + 16);
    unint64_t v18 = (os_unfair_lock_s *)(v16 + 32);
    id v19 = v11;
    os_unfair_lock_lock(v18);
    closure #1 in _NSSwiftCalendar.calendar.getter(v17, &v25);
    os_unfair_lock_unlock(v18);

    uint64_t v21 = *((void *)&v25 + 1);
    uint64_t v20 = v25;
  }
  else
  {
    type metadata accessor for _CalendarBridged();
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v11;
    uint64_t v21 = _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _CalendarBridged and conformance _CalendarBridged, (void (*)(uint64_t))type metadata accessor for _CalendarBridged);
    id v22 = v11;
  }
  *(void *)&long long v25 = v20;
  *((void *)&v25 + 1) = v21;
  char v10 = specialized static Calendar.== infix(_:_:)((uint64_t)v26, (uint64_t)&v25);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return v10 & 1;
}

NSCalendar __swiftcall _CalendarGregorian.bridgeToNSCalendar()()
{
  uint64_t v1 = lazy protocol witness table accessor for type _CalendarGregorian and conformance _CalendarGregorian(&lazy protocol witness table cache variable for type _CalendarGregorian and conformance _CalendarGregorian);
  uint64_t v2 = (objc_class *)type metadata accessor for _NSSwiftCalendar();
  char v3 = (char *)objc_allocWithZone(v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Calendar, os_unfair_lock_s>);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 32) = 0;
  *(void *)(v4 + 16) = v0;
  *(void *)(v4 + 24) = v1;
  *(void *)&v3[OBJC_IVAR____NSSwiftCalendar__lock] = v4;
  uint64_t v5 = *MEMORY[0x1E4F1C318];
  v7.receiver = v3;
  v7.super_class = v2;
  swift_retain();
  result.super.isa = (Class)objc_msgSendSuper2(&v7, sel_initWithCheckedCalendarIdentifier_, v5);
  if (!result.super.isa) {
    __break(1u);
  }
  return result;
}

id _NSSwiftCalendar.copy(with:)@<X0>(void *a1@<X8>)
{
  char v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____NSSwiftCalendar__lock);
  uint64_t v4 = v3 + 4;
  uint64_t v5 = v3 + 8;
  os_unfair_lock_lock(v3 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v4, &v12);
  os_unfair_lock_unlock(v5);
  Swift::UInt v6 = (objc_class *)type metadata accessor for _NSSwiftCalendar();
  objc_super v7 = (char *)objc_allocWithZone(v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Calendar, os_unfair_lock_s>);
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 16) = v12;
  *(void *)&v7[OBJC_IVAR____NSSwiftCalendar__lock] = v8;
  uint64_t v9 = *MEMORY[0x1E4F1C318];
  v11.receiver = v7;
  v11.super_class = v6;
  id result = objc_msgSendSuper2(&v11, sel_initWithCheckedCalendarIdentifier_, v9);
  if (result)
  {
    a1[3] = v6;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in _NSSwiftCalendar.calendar.getter@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_unknownObjectRetain();
}

uint64_t type metadata accessor for _NSSwiftCalendar()
{
  return self;
}

uint64_t lazy protocol witness table accessor for type _CalendarGregorian and conformance _CalendarGregorian(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _CalendarGregorian();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for _CalendarProtocol.dateComponents(_:from:) in conformance _CalendarAutoupdating(uint64_t *a1, uint64_t *a2)
{
  return _CalendarAutoupdating.dateComponents(_:from:)(a1, a2);
}

uint64_t _CalendarAutoupdating.dateComponents(_:from:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v4 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v4);
  closure #1 in CalendarCache.current.getter(v9);
  os_unfair_lock_unlock(v4);
  swift_release_n();
  uint64_t v5 = v9[1];
  uint64_t ObjectType = swift_getObjectType();
  v9[0] = v2;
  uint64_t v8 = v3;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(v5 + 192))(v9, &v8, ObjectType, v5);

  return swift_unknownObjectRelease();
}

double static Calendar.current.getter@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v2);
  closure #1 in CalendarCache.current.getter((uint64_t *)&v4);
  os_unfair_lock_unlock(v2);
  swift_release_n();
  double result = *(double *)&v4;
  *a1 = v4;
  return result;
}

uint64_t closure #1 in CalendarCache.current.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CalendarCache.State.current()();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t CalendarCache.State.current()()
{
  uint64_t v1 = v0;
  CalendarCache.State.check()();
  if (*v0)
  {
    uint64_t v2 = *v0;
  }
  else
  {
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    v16[0] = static LocaleCache.cache;
    LocaleCache.current.getter();
    uint64_t v4 = v3;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 200))(v16, ObjectType, v4);
    swift_unknownObjectRelease();
    char v6 = v16[0];
    if (LOBYTE(v16[0]))
    {
      uint64_t v7 = type metadata accessor for _CalendarICU();
      uint64_t v8 = (unint64_t *)&lazy protocol witness table cache variable for type _CalendarICU and conformance _CalendarICU;
      uint64_t v9 = type metadata accessor for _CalendarICU;
    }
    else
    {
      uint64_t v7 = type metadata accessor for _CalendarGregorian();
      uint64_t v8 = &lazy protocol witness table cache variable for type _CalendarGregorian and conformance _CalendarGregorian;
      uint64_t v9 = type metadata accessor for _CalendarGregorian;
    }
    uint64_t v10 = lazy protocol witness table accessor for type _CalendarICU and conformance _CalendarICU(v8, (void (*)(uint64_t))v9);
    char v17 = v6;
    v16[0] = 0;
    v16[1] = 0;
    v15[0] = LocaleCache.current.getter();
    v15[1] = v11;
    uint64_t v13 = 0;
    char v14 = 1;
    uint64_t v2 = (*(uint64_t (**)(char *, void *, void *, void, uint64_t, void, uint64_t, uint64_t *, uint64_t, uint64_t))(v10 + 16))(&v17, v16, v15, 0, 1, 0, 1, &v13, v7, v10);
    uint64_t *v1 = v2;
    v1[1] = v10;
    swift_unknownObjectRetain();
  }
  swift_unknownObjectRetain();
  return v2;
}

Swift::Void __swiftcall CalendarCache.State.check()()
{
  uint64_t NoteCount = _CFLocaleGetNoteCount();
  uint64_t v2 = _CFTimeZoneGetNoteCount();
  BOOL v3 = __OFADD__(NoteCount, v2);
  uint64_t v4 = NoteCount + v2;
  if (v3)
  {
    __break(1u);
    goto LABEL_8;
  }
  Midnightuint64_t NoteCount = _CFCalendarGetMidnightNoteCount();
  BOOL v3 = __OFADD__(v4, MidnightNoteCount);
  uint64_t v6 = v4 + MidnightNoteCount;
  if (v3)
  {
LABEL_8:
    __break(1u);
    return;
  }
  if (v6 != *(void *)(v0 + 32) || *(unsigned char *)(v0 + 40) == 1)
  {
    swift_unknownObjectRelease();
    *(void *)uint64_t v0 = 0;
    *(void *)(v0 + 8) = 0;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 24) = MEMORY[0x1E4FBC868];
    *(void *)(v0 + 32) = v6;
    *(unsigned char *)(v0 + 40) = 0;
  }
}

uint64_t protocol witness for _CalendarProtocol.date(byAdding:to:wrappingComponents:) in conformance _CalendarAutoupdating(const void *a1, uint64_t *a2, char a3)
{
  return _CalendarAutoupdating.date(byAdding:to:wrappingComponents:)(a1, a2, a3);
}

uint64_t _CalendarAutoupdating.date(byAdding:to:wrappingComponents:)(const void *a1, uint64_t *a2, char a3)
{
  uint64_t v5 = *a2;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v6 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in CalendarCache.current.getter(__dst);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  uint64_t v7 = __dst[1];
  uint64_t ObjectType = swift_getObjectType();
  memcpy(__dst, a1, 0x11AuLL);
  uint64_t v10 = v5;
  (*(void (**)(uint64_t *, uint64_t *, void, uint64_t, uint64_t))(v7 + 200))(__dst, &v10, a3 & 1, ObjectType, v7);

  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for _CalendarGregorian()
{
  return self;
}

NSTimeZone __swiftcall TimeZone._bridgeToObjectiveC()()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (NSTimeZone)(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 120))(ObjectType, v1);
}

id protocol witness for _TimeZoneProtocol.bridgeToNSTimeZone() in conformance _TimeZoneICU(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
  uint64_t v5 = (char *)objc_allocWithZone(v4);
  uint64_t v6 = &v5[OBJC_IVAR____NSSwiftTimeZone_timeZone];
  *(void *)uint64_t v6 = v2;
  *((void *)v6 + 1) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + 32) = 0;
  *(_OWORD *)(v7 + 16) = xmmword_18218FDB0;
  *(void *)&v5[OBJC_IVAR____NSSwiftTimeZone_lock] = v7;
  v9.receiver = v5;
  v9.super_class = v4;
  swift_retain();
  return objc_msgSendSuper2(&v9, sel_init);
}

uint64_t type metadata accessor for _NSSwiftTimeZone()
{
  return self;
}

double _NSSwiftCalendar.timeZone.getter@<D0>(_OWORD *a1@<X8>)
{
  BOOL v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____NSSwiftCalendar__lock);
  uint64_t v4 = v3 + 4;
  uint64_t v5 = v3 + 8;
  os_unfair_lock_lock(v3 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v4, &v10);
  os_unfair_lock_unlock(v5);
  uint64_t v6 = *((void *)&v10 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(double *__return_ptr, uint64_t, uint64_t))(v6 + 48))(v9, ObjectType, v6);
  swift_unknownObjectRelease();
  double result = v9[0];
  *a1 = *(_OWORD *)v9;
  return result;
}

void partial apply for closure #1 in _NSSwiftCalendar.timeZone.setter(uint64_t a1)
{
  closure #1 in _NSSwiftCalendar.timeZone.setter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void closure #1 in _NSSwiftCalendar.timeZone.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
LABEL_7:
    uint64_t v7 = v4;
    uint64_t v8 = a3;
    swift_unknownObjectRetain();
    Calendar.timeZone.setter(&v7);
    return;
  }
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v5 = (uint64_t *)(static TimeZoneCache.cache + 16);
  uint64_t v6 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in TimeZoneCache.default.getter(v5, &v7);
  if (!v3)
  {
    os_unfair_lock_unlock(v6);
    swift_release_n();
    uint64_t v4 = v7;
    a3 = v8;
    goto LABEL_7;
  }
  os_unfair_lock_unlock(v6);
  __break(1u);
}

uint64_t DateComponents.timeZone.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  v1[2] = *a1;
  v1[3] = v3;
  swift_unknownObjectRetain();
  uint64_t result = swift_unknownObjectRelease();
  if (v2)
  {
    if (*v1)
    {
      v5[0] = v2;
      v5[1] = v3;
      return Calendar.timeZone.setter(v5);
    }
    else
    {
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t Calendar.timeZone.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v13 = *a1;
  uint64_t v14 = v3;
  uint64_t v4 = v1[1];
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v4 + 48))(&v12, ObjectType, v4);
  long long v11 = v12;
  char v6 = specialized static TimeZone.== infix(_:_:)((uint64_t)&v13, (uint64_t)&v11);
  swift_unknownObjectRelease();
  if (v6)
  {
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    *(void *)&long long v12 = v2;
    *((void *)&v12 + 1) = v3;
    uint64_t v8 = (*(uint64_t (**)(uint64_t *, long long *, void, uint64_t, void, uint64_t, uint64_t, uint64_t))(v4 + 112))(&v13, &v12, 0, 1, 0, 1, ObjectType, v4);
    uint64_t v10 = v9;
    swift_unknownObjectRelease();
    uint64_t result = swift_unknownObjectRelease();
    uint64_t *v1 = v8;
    v1[1] = v10;
  }
  return result;
}

uint64_t protocol witness for _CalendarProtocol.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:) in conformance _CalendarGregorian(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  return _CalendarGregorian.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)(a1, a2, a3, a4 & 1, a5, a6 & 1);
}

uint64_t protocol witness for _CalendarProtocol.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:) in conformance _CalendarGregorian(uint64_t a1, uint64_t *a2, long long *a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t *a8)
{
  char v12 = *((unsigned char *)a8 + 8);
  char v13 = a5 & 1;
  char v14 = a7 & 1;
  uint64_t v17 = *a8;
  char v18 = v12;
  uint64_t v15 = swift_allocObject();
  _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)(v15, a2, a3, a4, v13, a6, v14, (uint64_t)&v17);
  return v15;
}

uint64_t _CalendarGregorian.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  if (*a2)
  {
    uint64_t v12 = a2[1];
    uint64_t v13 = *a2;
    uint64_t v14 = *a1;
    if (v10) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v13 = *(void *)(v6 + 104);
    uint64_t v12 = *(void *)(v6 + 112);
    swift_unknownObjectRetain();
    uint64_t v14 = v10;
    if (v10)
    {
LABEL_3:
      if ((a4 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      a3 = *(void *)(v6 + 120);
      char v15 = *(unsigned char *)(v6 + 128);
      if (a6) {
        goto LABEL_5;
      }
LABEL_9:
      char v17 = 0;
      uint64_t v16 = a5;
      goto LABEL_10;
    }
  }
  uint64_t v11 = *(void *)(v6 + 96);
  uint64_t v14 = swift_unknownObjectRetain();
  if (a4) {
    goto LABEL_8;
  }
LABEL_4:
  char v15 = 0;
  if ((a6 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v16 = *(void *)(v6 + 136);
  char v17 = *(unsigned char *)(v6 + 144);
LABEL_10:
  v25[0] = v13;
  v25[1] = v12;
  *(void *)&long long v24 = v14;
  *((void *)&v24 + 1) = v11;
  uint64_t v22 = 0;
  char v23 = 1;
  uint64_t v18 = swift_allocObject();
  swift_unknownObjectRetain();
  uint64_t v19 = swift_unknownObjectRetain();
  _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)(v19, v25, &v24, a3, v15, v16, v17, (uint64_t)&v22);
  lazy protocol witness table accessor for type _CalendarGregorian and conformance _CalendarGregorian(&lazy protocol witness table cache variable for type _CalendarGregorian and conformance _CalendarGregorian);
  return v18;
}

void _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)(uint64_t a1, uint64_t *a2, long long *a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v9 = v8;
  char v10 = a7;
  uint64_t v11 = a6;
  char v12 = a5;
  uint64_t v14 = *a2;
  uint64_t v15 = a2[1];
  long long v16 = *a3;
  double v17 = *(double *)a8;
  uint64_t v18 = 2299161;
  char v19 = *(unsigned char *)(a8 + 8);
  *(void *)(v9 + 88) = 0;
  *(_OWORD *)(v9 + 16) = xmmword_1822051B0;
  *(_OWORD *)(v9 + 32) = xmmword_1822051C0;
  *(void *)(v9 + 48) = 2299161;
  *(void *)(v9 + 80) = 0x4290000000000000;
  *(void *)(v9 + 120) = 0;
  *(void *)(v9 + 96) = 0;
  *(unsigned char *)(v9 + 128) = 1;
  *(void *)(v9 + 136) = 0;
  *(unsigned char *)(v9 + 144) = 1;
  if (v14)
  {
    *(void *)(v9 + 104) = v14;
    *(void *)(v9 + 112) = v15;
    if (v19)
    {
LABEL_3:
      *(_OWORD *)(v9 + 56) = xmmword_1822051D0;
      *(void *)(v9 + 72) = 0xC208951B28000000;
      goto LABEL_18;
    }
  }
  else
  {
    long long v29 = v16;
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    uint64_t v20 = (uint64_t *)(static TimeZoneCache.cache + 16);
    uint64_t v21 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
    swift_retain_n();
    os_unfair_lock_lock(v21);
    closure #1 in TimeZoneCache.default.getter(v20, &v31);
    os_unfair_lock_unlock(v21);
    swift_release_n();
    double v22 = v32;
    uint64_t v11 = a6;
    char v12 = a5;
    char v10 = a7;
    long long v16 = v29;
    *(void *)(v9 + 104) = v31;
    *(double *)(v9 + 112) = v22;
    if (v19) {
      goto LABEL_3;
    }
  }
  *(double *)(v9 + 72) = v17;
  double v23 = floor(v17 / 86400.0 + 2451910.5 + 0.5);
  BOOL v24 = v23 > 2130706430.0 || v23 < -2130706430.0;
  long long v30 = v16;
  if (!v24)
  {
    if ((~*(void *)&v23 & 0x7FF0000000000000) != 0)
    {
      if (v23 > -9.22337204e18)
      {
        if (v23 < 9.22337204e18)
        {
          uint64_t v18 = (uint64_t)v23;
          goto LABEL_17;
        }
LABEL_30:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v31 = 18;
  double v32 = v17;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  char v35 = 1;
  lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
  swift_willThrowTypedImpl();
LABEL_17:
  *(void *)(v9 + 56) = v18;
  *(void *)(v9 + 64) = specialized static _CalendarGregorian.yearMonthDayFromJulianDay(_:useJulianRef:)(v18, 0);
  long long v16 = v30;
LABEL_18:
  *(_OWORD *)(v9 + 88) = v16;
  swift_unknownObjectRelease();
  if ((v12 & 1) == 0 && (unint64_t)(a4 - 8) >= 0xFFFFFFFFFFFFFFF9)
  {
    *(void *)(v9 + 120) = a4;
    *(unsigned char *)(v9 + 128) = 0;
  }
  if ((v10 & 1) == 0)
  {
    uint64_t v25 = 7;
    if (v11 < 7) {
      uint64_t v25 = v11;
    }
    if (v25 <= 1) {
      uint64_t v25 = 1;
    }
    *(void *)(v9 + 136) = v25;
    *(unsigned char *)(v9 + 144) = 0;
  }
}

uint64_t closure #1 in TimeZoneCache.default.getter@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  TimeZoneCache.State.check()();
  uint64_t v4 = a1[3];
  if (v4)
  {
    uint64_t v5 = a1[4];
    *a2 = v4;
    a2[1] = v5;
    return swift_unknownObjectRetain();
  }
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t v7 = a1[1];
    *a2 = result;
    a2[1] = v7;
    swift_unknownObjectRetain();
    return swift_unknownObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for _CalendarAutoupdating()
{
  return self;
}

uint64_t protocol witness for _CalendarProtocol.timeZone.getter in conformance _CalendarICU@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 40);
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for _CalendarProtocol.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:) in conformance _CalendarICU()
{
  return _CalendarICU.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)();
}

uint64_t protocol witness for _CalendarProtocol.dateComponents(_:from:) in conformance _CalendarICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  closure #1 in LockedState<A>.withLock<A>(_:)specialized partial apply();
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

uint64_t closure #1 in LockedState<A>.withLock<A>(_:)specialized partial apply()
{
  return partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)();
}

uint64_t partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void *partial apply for closure #1 in _CalendarICU.dateComponents(_:from:)@<X0>(void *a1@<X8>)
{
  return closure #1 in _CalendarICU.dateComponents(_:from:)(*(void **)(v1 + 24), *(void *)(v1 + 32), a1, *(double *)(v1 + 16));
}

void *closure #1 in _CalendarICU.dateComponents(_:from:)@<X0>(void *a1@<X0>, int a2@<W1>, void *a3@<X8>, double a4@<D0>)
{
  void __src[36] = *MEMORY[0x1E4F143B8];
  if (a4 > 1.59271755e13) {
    a4 = 1.59271755e13;
  }
  double v7 = fmax(a4, -2.11845067e11);
  MEMORY[0x1853098F0](a1[4]);
  double v8 = floor(v7);
  ucal_setMillis();
  long long v15 = 0uLL;
  v14[0] = 0;
  v14[1] = 0;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(&v15, v14, 0, 1, 0, 1, 0, 1, (uint64_t)__src, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  if (a2)
  {
    __src[4] = (int)ucal_get();
    LOBYTE(__src[5]) = 0;
    if ((a2 & 2) == 0)
    {
LABEL_5:
      if ((a2 & 0x200) == 0) {
        goto LABEL_6;
      }
      goto LABEL_21;
    }
  }
  else if ((a2 & 2) == 0)
  {
    goto LABEL_5;
  }
  __src[6] = (int)ucal_get();
  LOBYTE(__src[7]) = 0;
  if ((a2 & 0x200) == 0)
  {
LABEL_6:
    if ((a2 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  __src[26] = 0;
  LOBYTE(__src[27]) = 0;
  if ((a2 & 4) == 0)
  {
LABEL_7:
    if ((a2 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  __src[8] = (int)ucal_get() + 1;
  LOBYTE(__src[9]) = 0;
  if ((a2 & 8) == 0)
  {
LABEL_8:
    if ((a2 & 0x40000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  __src[10] = (int)ucal_get();
  LOBYTE(__src[11]) = 0;
  if ((a2 & 0x40000) == 0)
  {
LABEL_9:
    if ((a2 & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  __src[12] = (int)ucal_get();
  LOBYTE(__src[13]) = 0;
  if ((a2 & 0x800) == 0)
  {
LABEL_10:
    if ((a2 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  __src[32] = (int)ucal_get();
  LOBYTE(__src[33]) = 0;
  if ((a2 & 0x400) == 0)
  {
LABEL_11:
    if ((a2 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  __src[30] = (int)ucal_get();
  LOBYTE(__src[31]) = 0;
  if ((a2 & 0x1000) == 0)
  {
LABEL_12:
    if ((a2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }
LABEL_27:
  __src[34] = (int)ucal_get();
  LOBYTE(__src[35]) = 0;
  if ((a2 & 0x80) == 0)
  {
LABEL_13:
    if ((a2 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }
LABEL_28:
  __src[22] = (int)ucal_get();
  LOBYTE(__src[23]) = 0;
  if ((a2 & 0x100) == 0)
  {
LABEL_14:
    if ((a2 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }
LABEL_29:
  __src[24] = (int)ucal_get();
  LOBYTE(__src[25]) = 0;
  if ((a2 & 0x10) == 0)
  {
LABEL_15:
    if ((a2 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_31;
  }
LABEL_30:
  __src[14] = (int)ucal_get();
  LOBYTE(__src[15]) = 0;
  if ((a2 & 0x20) == 0)
  {
LABEL_16:
    if ((a2 & 0x40) == 0) {
      goto LABEL_17;
    }
LABEL_32:
    _OWORD __src[18] = (int)ucal_get();
    LOBYTE(__src[19]) = 0;
    if ((a2 & 0x2000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_33;
  }
LABEL_31:
  __src[16] = (int)ucal_get();
  LOBYTE(__src[17]) = 0;
  if ((a2 & 0x40) != 0) {
    goto LABEL_32;
  }
LABEL_17:
  if ((a2 & 0x2000) == 0) {
    goto LABEL_39;
  }
LABEL_33:
  double v9 = (v7 - v8) * 1000000000.0;
  if ((~*(void *)&v9 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_47;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
  }
  if (v9 >= 9.22337204e18) {
    goto LABEL_48;
  }
  uint64_t v10 = (uint64_t)v9;
  if ((uint64_t)v9 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v10 = 0;
  }
  __src[20] = v10;
  LOBYTE(__src[21]) = (uint64_t)v9 == 0x7FFFFFFFFFFFFFFFLL;
LABEL_39:
  if ((*(void *)&a2 & 0x10004) != 0) {
    BYTE1(__src[35]) = ucal_get() != 0;
  }
  if ((a2 & 0x8000) != 0)
  {
    uint64_t v12 = a1[5];
    uint64_t v11 = a1[6];
    __src[2] = v12;
    __src[3] = v11;
    swift_unknownObjectRetain_n();
    swift_unknownObjectRelease();
    if (__src[0])
    {
      *(void *)&long long v15 = v12;
      *((void *)&v15 + 1) = v11;
      Calendar.timeZone.setter((uint64_t *)&v15);
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  return memcpy(a3, __src, 0x11AuLL);
}

uint64_t partial apply for closure #1 in _CalendarICU.date(byAdding:to:wrappingComponents:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in _CalendarICU.date(byAdding:to:wrappingComponents:)(*(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned char *)(v1 + 40), a1, *(double *)(v1 + 16));
}

uint64_t closure #1 in _CalendarICU.date(byAdding:to:wrappingComponents:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  double v8 = fmax(a5, -2.11845067e11);
  if (a5 <= 1.59271755e13) {
    double v9 = v8;
  }
  else {
    double v9 = 1.59271755e13;
  }
  MEMORY[0x1853098F0](*(void *)(a1 + 32));
  double v10 = 0.0;
  double v11 = trunc(v9);
  if ((*(void *)&v9 & 0x7FF0000000000000) != 0x7FF0000000000000) {
    double v10 = v9 - v11;
  }
  if (v10 >= 0.0) {
    double v12 = v10;
  }
  else {
    double v12 = v10 + 1.0;
  }
  ucal_setMillis();
  outlined init with take of LocalePreferences?(a2 + 32, (uint64_t)v33, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v33, (uint64_t)&v34, &demangling cache variable for type metadata for Int?);
  if ((v35 & 1) == 0) {
    _CalendarICU._locked_add(_:amount:wrap:status:)(0, v34, a3 & 1);
  }
  outlined init with take of LocalePreferences?(a2 + 48, (uint64_t)v32, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v32, (uint64_t)&v36, &demangling cache variable for type metadata for Int?);
  if ((v37 & 1) == 0) {
    _CalendarICU._locked_add(_:amount:wrap:status:)(1, v36, a3 & 1);
  }
  outlined init with take of LocalePreferences?(a2 + 272, (uint64_t)v31, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v31, (uint64_t)&v38, &demangling cache variable for type metadata for Int?);
  if ((v39 & 1) == 0) {
    _CalendarICU._locked_add(_:amount:wrap:status:)(17, v38, a3 & 1);
  }
  outlined init with take of LocalePreferences?(a2 + 64, (uint64_t)v30, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v30, (uint64_t)&v40, &demangling cache variable for type metadata for Int?);
  if ((v41 & 1) == 0) {
    _CalendarICU._locked_add(_:amount:wrap:status:)(2, v40, a3 & 1);
  }
  outlined init with take of LocalePreferences?(a2 + 256, (uint64_t)v29, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v29, (uint64_t)&v43, &demangling cache variable for type metadata for Int?);
  if ((v44 & 1) == 0) {
    _CalendarICU._locked_add(_:amount:wrap:status:)(3, v43, a3 & 1);
  }
  outlined init with take of LocalePreferences?(a2 + 240, (uint64_t)v28, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v28, (uint64_t)&v45, &demangling cache variable for type metadata for Int?);
  if ((v46 & 1) == 0) {
    _CalendarICU._locked_add(_:amount:wrap:status:)(4, v45, a3 & 1);
  }
  outlined init with take of LocalePreferences?(a2 + 192, (uint64_t)v27, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v27, (uint64_t)&v47, &demangling cache variable for type metadata for Int?);
  if ((v48 & 1) == 0) {
    _CalendarICU._locked_add(_:amount:wrap:status:)(8, v47, a3 & 1);
  }
  outlined init with take of LocalePreferences?(a2 + 224, (uint64_t)v26, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v26, (uint64_t)&v49, &demangling cache variable for type metadata for Int?);
  if ((v50 & 1) == 0)
  {
    uint64_t v13 = v49;
    outlined init with take of LocalePreferences?((uint64_t)v29, (uint64_t)v42, &demangling cache variable for type metadata for Int?);
    if (v42[8] == 1) {
      _CalendarICU._locked_add(_:amount:wrap:status:)(3, v13, a3 & 1);
    }
  }
  outlined init with take of LocalePreferences?(a2 + 80, (uint64_t)v25, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v25, (uint64_t)&v51, &demangling cache variable for type metadata for Int?);
  if ((v52 & 1) == 0) {
    _CalendarICU._locked_add(_:amount:wrap:status:)(5, v51, a3 & 1);
  }
  outlined init with take of LocalePreferences?(a2 + 96, (uint64_t)v24, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v24, (uint64_t)&v53, &demangling cache variable for type metadata for Int?);
  if ((v54 & 1) == 0) {
    _CalendarICU._locked_add(_:amount:wrap:status:)(6, v53, a3 & 1);
  }
  outlined init with take of LocalePreferences?(a2 + 176, (uint64_t)v23, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v23, (uint64_t)&v55, &demangling cache variable for type metadata for Int?);
  if ((v56 & 1) == 0) {
    _CalendarICU._locked_add(_:amount:wrap:status:)(7, v55, a3 & 1);
  }
  outlined init with take of LocalePreferences?(a2 + 112, (uint64_t)v22, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v22, (uint64_t)&v57, &demangling cache variable for type metadata for Int?);
  if ((v58 & 1) == 0) {
    _CalendarICU._locked_add(_:amount:wrap:status:)(11, v57, a3 & 1);
  }
  outlined init with take of LocalePreferences?(a2 + 128, (uint64_t)v21, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v21, (uint64_t)&v59, &demangling cache variable for type metadata for Int?);
  if ((v60 & 1) == 0) {
    _CalendarICU._locked_add(_:amount:wrap:status:)(12, v59, a3 & 1);
  }
  outlined init with take of LocalePreferences?(a2 + 144, (uint64_t)v20, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v20, (uint64_t)&v61, &demangling cache variable for type metadata for Int?);
  if ((v62 & 1) == 0) {
    _CalendarICU._locked_add(_:amount:wrap:status:)(13, v61, a3 & 1);
  }
  outlined init with take of LocalePreferences?(a2 + 160, (uint64_t)v19, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)&v63, &demangling cache variable for type metadata for Int?);
  int v14 = v64;
  uint64_t v15 = v63;
  uint64_t result = ucal_getMillis();
  double v18 = (double)v15 * 0.000000001;
  if (v14) {
    double v18 = 0.0;
  }
  *(double *)a4 = v18 + v12 + v17 / 1000.0 + -978307200.0;
  *(unsigned char *)(a4 + 8) = 0;
  return result;
}

void _CalendarICU._locked_add(_:amount:wrap:status:)(int a1, uint64_t a2, char a3)
{
  if (a1 == 14)
  {
LABEL_2:
    if ((a3 & 1) == 0)
    {
LABEL_25:
      int v17 = 0;
      int v18 = 0;
      int v19 = 0;
      goto LABEL_34;
    }
LABEL_3:
    int v5 = 0;
LABEL_4:
    int Limit = ucal_getLimit();
    int v7 = ucal_getLimit();
    int v8 = v7 - Limit;
    if (__OFSUB__(v7, Limit))
    {
      __break(1u);
    }
    else
    {
      int v9 = v8 + 1;
      if (!__OFADD__(v8, 1))
      {
        int v10 = ucal_get();
        int v11 = v10 + a2;
        if (!__OFADD__(v10, a2))
        {
          BOOL v12 = __OFSUB__(v11, Limit);
          int v13 = v11 - Limit;
          if (!v12)
          {
            if (v9)
            {
              if (v13 == 0x80000000 && v9 == -1) {
                goto LABEL_64;
              }
              int v14 = v13 % v9;
              if (v14 < 0)
              {
                BOOL v12 = __OFADD__(v14, v9);
                v14 += v9;
                if (v12) {
                  goto LABEL_66;
                }
              }
              int v15 = v14 + Limit;
              if (!__OFADD__(v14, Limit))
              {
                if (v15 >= v10 || a2 < 1)
                {
                  if (__OFSUB__(v15, v10))
                  {
LABEL_65:
                    __break(1u);
LABEL_66:
                    __break(1u);
                    return;
                  }
                  if (!v5)
                  {
                    int v17 = 0;
                    int v18 = 0;
                    int v19 = 0;
                    goto LABEL_34;
                  }
                }
                else
                {
                  ucal_getMillis();
                  double v21 = v20 / 1000.0 + -978307200.0;
                  if (a1 == 14 || (a1 - 10) > 3) {
                    LOBYTE(v22) = 6;
                  }
                  else {
                    unsigned int v22 = 0x5040303u >> (8 * (a1 - 10));
                  }
                  _CalendarICU.totalSecondsInSmallUnits(_:status:)(a1);
                  LOBYTE(v29) = v22;
                  double v30 = v21;
                  _CalendarICU._locked_setToFirstInstant(of:at:)((unsigned __int8 *)&v29);
                  if ((v5 & 1) == 0)
                  {
                    int v17 = 0;
                    int v18 = 0;
                    int v19 = 0;
                    goto LABEL_34;
                  }
                }
LABEL_31:
                int v23 = ucal_get();
                int v24 = ucal_get();
                int v18 = v23 + v24;
                if (__OFADD__(v23, v24))
                {
LABEL_63:
                  __break(1u);
LABEL_64:
                  __break(1u);
                  goto LABEL_65;
                }
                int v17 = ucal_get();
                int v19 = 1;
LABEL_34:
                ucal_getMillis();
                ucal_setMillis();
                if (!v19) {
                  return;
                }
                int v25 = ucal_get();
                int v26 = ucal_get();
                int v27 = v25 + v26;
                if (!__OFADD__(v25, v26))
                {
                  if (!__OFSUB__(v18, v27))
                  {
                    if (v18 != v27)
                    {
                      ucal_getMillis();
                      ucal_setMillis();
                      if (ucal_get() != v17) {
LABEL_39:
                      }
                        ucal_setMillis();
                    }
                    return;
                  }
                  goto LABEL_62;
                }
LABEL_61:
                __break(1u);
LABEL_62:
                __break(1u);
                goto LABEL_63;
              }
LABEL_60:
              __break(1u);
              goto LABEL_61;
            }
LABEL_59:
            __break(1u);
            goto LABEL_60;
          }
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
    }
    __break(1u);
    goto LABEL_57;
  }
  switch(a1)
  {
    case 9:
    case 10:
    case 11:
    case 21:
      switch(a1)
      {
        case 9:
          if ((a3 & 1) == 0) {
            goto LABEL_31;
          }
          int v5 = 1;
          break;
        case 10:
        case 11:
          if ((a3 & 1) == 0) {
            goto LABEL_25;
          }
          goto LABEL_3;
        case 21:
          goto LABEL_2;
        default:
          int v5 = 0;
          int v17 = 0;
          int v18 = 0;
          int v19 = 0;
          if ((a3 & 1) == 0) {
            goto LABEL_34;
          }
          goto LABEL_4;
      }
      goto LABEL_4;
    case 12:
      if ((a3 & 1) == 0) {
        goto LABEL_25;
      }
      goto LABEL_3;
    case 13:
      if ((a3 & 1) == 0) {
        goto LABEL_25;
      }
      goto LABEL_3;
    default:
      if (a3) {
        ucal_roll();
      }
      else {
        ucal_add();
      }
      ucal_getMillis();
      if (a2 >= 1)
      {
        double v29 = v28 / 1000.0 + -978307200.0;
        _CalendarICU._locked_timeZoneTransitionInterval(at:)(&v29, (uint64_t)&v30);
        if ((v31 & 1) == 0) {
          goto LABEL_39;
        }
      }
      break;
  }
}

uint64_t protocol witness for _CalendarProtocol.timeZone.getter in conformance _CalendarAutoupdating()
{
  return _CalendarAutoupdating.timeZone.getter();
}

uint64_t _CalendarAutoupdating.timeZone.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in CalendarCache.current.getter(v4);
  os_unfair_lock_unlock(v0);
  swift_release_n();
  uint64_t v1 = v4[1];
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 48))(ObjectType, v1);

  return swift_unknownObjectRelease();
}

uint64_t __NSDateComponentsSetWeek(void *a1, const char *a2)
{
  return [a1 setWeek:a2];
}

ValueMetadata *type metadata accessor for POSIXError()
{
  return &type metadata for POSIXError;
}

void sub_18185BC20(_Unwind_Exception *a1)
{
}

void sub_18185BC40(void *a1)
{
}

id protocol witness for CustomStringConvertible.description.getter in conformance NSObject(uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomStringConvertible.description.getter in conformance NSObject(a1, a2, (SEL *)&selRef_description);
}

BOOL NSEqualRects(NSRect aRect, NSRect bRect)
{
  return aRect.origin.x == bRect.origin.x
      && aRect.origin.y == bRect.origin.y
      && aRect.size.width == bRect.size.width
      && aRect.size.height == bRect.size.height;
}

ValueMetadata *type metadata accessor for Notification()
{
  return &type metadata for Notification;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString.Index(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.< infix(_:_:) in conformance AttributedString.Index(a1, a2, a3, a4, MEMORY[0x1E4F59DE0]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode<A>(_:forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  return _PlistKeyedEncodingContainerBPlist.encode<A>(_:forKey:)(a1, a2, a5, a3, a4);
}

uint64_t _decodeBool(uint64_t a1, const void *a2, BOOL *a3)
{
  unint64_t v3 = atomic_load((unint64_t *)(a1 + 16));
  if (v3 != *(void *)(a1 + 136)) {
    __NSPoisoned();
  }
  unint64_t v7 = atomic_load((unint64_t *)(a1 + 16));
  atomic_store(v7 | 8, (unint64_t *)(a1 + 16));
  unint64_t v8 = atomic_load((unint64_t *)(a1 + 16));
  *(void *)(a1 + 136) = v8;
  CFArrayRef v9 = *(const __CFArray **)(a1 + 80);
  if (!v9)
  {
    uint64_t result = __CFBinaryPlistGetOffsetForValueFromDictionary3();
    if (!result)
    {
      BOOL v16 = 0;
      goto LABEL_18;
    }
    int v15 = **(unsigned __int8 **)(a1 + 104);
    if (v15 == 8)
    {
      BOOL v16 = 0;
      goto LABEL_17;
    }
    if (v15 == 9)
    {
      BOOL v16 = 1;
LABEL_17:
      uint64_t result = 1;
      goto LABEL_18;
    }
    goto LABEL_13;
  }
  CFIndex Count = CFArrayGetCount(v9);
  CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), Count - 1);
  if (CFGetTypeID(ValueAtIndex) == 19)
  {
    Value = (void *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
    id v13 = Value;
    CFArrayRemoveValueAtIndex(ValueAtIndex, 0);
    if (!Value) {
      goto LABEL_14;
    }
LABEL_11:
    if (CFGetTypeID(Value) == 21)
    {
      BOOL v16 = CFBooleanGetValue((CFBooleanRef)Value) != 0;
      goto LABEL_17;
    }
LABEL_13:
    objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", @"NSInvalidUnarchiveOperationException", 4864, @"%@: value for key (%@) is not a BOOLean", _NSMethodExceptionProem((objc_class *)a1, sel_decodeBoolForKey_), a2);
    goto LABEL_14;
  }
  Value = (void *)CFDictionaryGetValue(ValueAtIndex, a2);
  id v17 = Value;
  if (Value) {
    goto LABEL_11;
  }
LABEL_14:
  BOOL v16 = 0;
  uint64_t result = 0;
LABEL_18:
  *a3 = v16;
  return result;
}

uint64_t _decodeInt32(void *a1, const void *a2, _DWORD *a3)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  v8[0] = 0;
  uint64_t result = _decodeInt64((uint64_t)a1, a2, v8);
  int v7 = v8[0];
  if (result)
  {
    if (v8[0] == SLODWORD(v8[0]))
    {
      uint64_t result = 1;
    }
    else
    {
      objc_msgSend(a1, "__failWithExceptionName:errorCode:format:", *MEMORY[0x1E4F1C4A8], 4864, @"%@: value (%lld) for key (%@) too large to fit in a 32-bit integer", _NSMethodExceptionProem((objc_class *)a1, sel_decodeInt32ForKey_), v8[0], a2);
      uint64_t result = 0;
    }
  }
  *a3 = v7;
  return result;
}

uint64_t _decodeInt64(uint64_t a1, const void *a2, unint64_t *a3)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = atomic_load((unint64_t *)(a1 + 16));
  if (v3 != *(void *)(a1 + 136)) {
    __NSPoisoned();
  }
  unint64_t v7 = atomic_load((unint64_t *)(a1 + 16));
  atomic_store(v7 | 8, (unint64_t *)(a1 + 16));
  unint64_t v8 = atomic_load((unint64_t *)(a1 + 16));
  *(void *)(a1 + 136) = v8;
  unint64_t valuePtr = 0;
  CFArrayRef v9 = *(const __CFArray **)(a1 + 80);
  if (v9)
  {
    CFIndex Count = CFArrayGetCount(v9);
    CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), Count - 1);
    if (CFGetTypeID(ValueAtIndex) == 19)
    {
      Value = (void *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
      id v13 = Value;
      CFArrayRemoveValueAtIndex(ValueAtIndex, 0);
      if (!Value) {
        goto LABEL_13;
      }
    }
    else
    {
      Value = (void *)CFDictionaryGetValue(ValueAtIndex, a2);
      id v18 = Value;
      if (!Value)
      {
LABEL_13:
        unint64_t v17 = 0;
        uint64_t result = 0;
        goto LABEL_16;
      }
    }
    if (CFGetTypeID(Value) == 22 && !CFNumberIsFloatType((CFNumberRef)Value))
    {
      uint64_t result = CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt64Type, &valuePtr) != 0;
      unint64_t v17 = valuePtr;
      goto LABEL_16;
    }
LABEL_12:
    objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", @"NSInvalidUnarchiveOperationException", 4864, @"%@: value for key (%@) is not an integer number", _NSMethodExceptionProem((objc_class *)a1, sel_decodeInt64ForKey_), a2);
    goto LABEL_13;
  }
  uint64_t result = __CFBinaryPlistGetOffsetForValueFromDictionary3();
  if (!result)
  {
    unint64_t v17 = 0;
    goto LABEL_16;
  }
  int v15 = *(unsigned char **)(a1 + 104);
  unint64_t v16 = (unint64_t)&v15[*(void *)(a1 + 112) - 1];
  v20[0] = 0;
  if (!_readInt((void *)a1, v15, v16, v20, 0)) {
    goto LABEL_12;
  }
  unint64_t v17 = v20[0];
  uint64_t result = 1;
LABEL_16:
  *a3 = v17;
  return result;
}

uint64_t _readInt(void *a1, unsigned char *a2, unint64_t a3, unint64_t *a4, void *a5)
{
  char v5 = *a2;
  if ((*a2 & 0xF0) != 0x10) {
    return 0;
  }
  unsigned int v6 = v5 & 0xF;
  uint64_t v7 = 1 << (v5 & 0xF);
  unint64_t v8 = &a2[v7 + 1];
  if (__CFADD__(a2, v7 + 1) || (unint64_t)v8 > a3)
  {
    objc_msgSend(a1, "__failWithExceptionName:errorCode:format:", @"NSArchiverArchiveInconsistency", 4864, @"overflow while attempting to read %lu bytes (int)", v7 + 1);
    return 0;
  }
  CFArrayRef v9 = a2 + 1;
  uint64_t v7 = v7;
  switch((char)v7)
  {
    case 1:
      unint64_t v10 = *v9;
      break;
    case 2:
      unint64_t v10 = __rev16(*(unsigned __int16 *)(a2 + 1));
      break;
    case 4:
      unint64_t v10 = bswap32(*(_DWORD *)(a2 + 1));
      break;
    case 8:
      unint64_t v10 = bswap64(*(void *)(a2 + 1));
      break;
    default:
      if (v6 <= 7)
      {
        unint64_t v10 = 0;
        do
        {
          unsigned int v12 = *v9++;
          unint64_t v10 = v12 | (v10 << 8);
          --v7;
        }
        while (v7);
      }
      else
      {
        unint64_t v10 = 0;
      }
      break;
  }
  *a4 = v10;
  if (a5) {
    *a5 = v8;
  }
  return 1;
}

uint64_t _NSXPCSerializationIntegerForObject(void *a1, unint64_t *a2)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *a2;
  if (!*a2) {
    return 0;
  }
  uint64_t v4 = 0;
  if (_getIntAtMarker(a1, &v4, v2, v5)) {
    return v4;
  }
  else {
    return 0;
  }
}

unint64_t type metadata accessor for NSUUID()
{
  unint64_t result = lazy cache variable for type metadata for NSUUID;
  if (!lazy cache variable for type metadata for NSUUID)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSUUID);
  }
  return result;
}

uint64_t __NSPropertyListClasses_ForArchival_ErrorAndException()
{
  if (qword_1EB1ED678 != -1) {
    dispatch_once(&qword_1EB1ED678, &__block_literal_global_40);
  }
  return _MergedGlobals_116;
}

__CFString *_validateKnownUserInfoKeyTypes(void *a1)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if ([a1 objectForKey:@"NSUnderlyingError"])
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      return @"NSUnderlyingError";
    }
  }
  if ([a1 objectForKey:@"NSLocalizedDescription"] && !_NSIsNSString()) {
    return @"NSLocalizedDescription";
  }
  if ([a1 objectForKey:@"NSLocalizedFailureReason"] && !_NSIsNSString()) {
    return @"NSLocalizedFailureReason";
  }
  if ([a1 objectForKey:@"NSLocalizedRecoverySuggestion"] && !_NSIsNSString()) {
    return @"NSLocalizedRecoverySuggestion";
  }
  uint64_t v2 = [a1 objectForKey:@"NSLocalizedRecoveryOptions"];
  if (!v2) {
    goto LABEL_19;
  }
  unint64_t v3 = (void *)v2;
  if (!_NSIsNSArray()) {
    return @"NSLocalizedRecoveryOptions";
  }
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v55 objects:v54 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v56;
    uint64_t v7 = @"NSLocalizedRecoveryOptions";
LABEL_13:
    uint64_t v8 = 0;
    while (1)
    {
      if (*(void *)v56 != v6) {
        objc_enumerationMutation(v3);
      }
      if (!_NSIsNSString()) {
        break;
      }
      if (v5 == ++v8)
      {
        uint64_t v5 = [v3 countByEnumeratingWithState:&v55 objects:v54 count:16];
        if (v5) {
          goto LABEL_13;
        }
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    if ([a1 objectForKey:@"NSHelpAnchor"] && !_NSIsNSString()) {
      return @"NSHelpAnchor";
    }
    if ([a1 objectForKey:@"NSDebugDescription"] && !_NSIsNSString()) {
      return @"NSDebugDescription";
    }
    if ([a1 objectForKey:@"NSStringEncoding"] && !_NSIsNSNumber()) {
      return @"NSStringEncoding";
    }
    if ([a1 objectForKey:@"NSURL"])
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        return @"NSURL";
      }
    }
    if ([a1 objectForKey:@"NSFilePath"] && !_NSIsNSString()) {
      return @"NSFilePath";
    }
    if ([a1 objectForKey:@"NSSourceFilePathErrorKey"] && !_NSIsNSString()) {
      return @"NSSourceFilePathErrorKey";
    }
    if ([a1 objectForKey:@"NSDestinationFilePath"] && !_NSIsNSString()) {
      return @"NSDestinationFilePath";
    }
    uint64_t v9 = [a1 objectForKey:@"NSMultipleUnderlyingErrorsKey"];
    if (!v9) {
      goto LABEL_43;
    }
    unint64_t v10 = (void *)v9;
    if (!_NSIsNSArray()) {
      return @"NSMultipleUnderlyingErrorsKey";
    }
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    uint64_t v11 = [v10 countByEnumeratingWithState:&v50 objects:v49 count:16];
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)v51;
      uint64_t v7 = @"NSMultipleUnderlyingErrorsKey";
LABEL_37:
      uint64_t v14 = 0;
      while (1)
      {
        if (*(void *)v51 != v13) {
          objc_enumerationMutation(v10);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          break;
        }
        if (v12 == ++v14)
        {
          uint64_t v12 = [v10 countByEnumeratingWithState:&v50 objects:v49 count:16];
          if (v12) {
            goto LABEL_37;
          }
          goto LABEL_43;
        }
      }
    }
    else
    {
LABEL_43:
      uint64_t v15 = [a1 objectForKey:@"NSDetailedErrors"];
      if (!v15) {
        goto LABEL_53;
      }
      unint64_t v16 = (void *)v15;
      if (!_NSIsNSArray()) {
        return @"NSDetailedErrors";
      }
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      uint64_t v17 = [v16 countByEnumeratingWithState:&v45 objects:v44 count:16];
      if (v17)
      {
        uint64_t v18 = v17;
        uint64_t v19 = *(void *)v46;
        uint64_t v7 = @"NSDetailedErrors";
LABEL_47:
        uint64_t v20 = 0;
        while (1)
        {
          if (*(void *)v46 != v19) {
            objc_enumerationMutation(v16);
          }
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            break;
          }
          if (v18 == ++v20)
          {
            uint64_t v18 = [v16 countByEnumeratingWithState:&v45 objects:v44 count:16];
            if (v18) {
              goto LABEL_47;
            }
            goto LABEL_53;
          }
        }
      }
      else
      {
LABEL_53:
        uint64_t v21 = [a1 objectForKey:@"NSCallStackReturnAddresses"];
        if (!v21) {
          goto LABEL_63;
        }
        unsigned int v22 = (void *)v21;
        if (!_NSIsNSArray()) {
          return @"NSCallStackReturnAddresses";
        }
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        uint64_t v23 = [v22 countByEnumeratingWithState:&v40 objects:v39 count:16];
        if (!v23)
        {
LABEL_63:
          uint64_t v27 = [a1 objectForKey:@"NSUserStringVariant"];
          if (v27)
          {
            double v28 = (void *)v27;
            if (_NSIsNSArray())
            {
              long long v37 = 0u;
              long long v38 = 0u;
              long long v35 = 0u;
              long long v36 = 0u;
              uint64_t v29 = [v28 countByEnumeratingWithState:&v35 objects:v34 count:16];
              if (v29)
              {
                uint64_t v30 = v29;
                uint64_t v31 = *(void *)v36;
                uint64_t v7 = @"NSUserStringVariant";
LABEL_67:
                uint64_t v32 = 0;
                while (1)
                {
                  if (*(void *)v36 != v31) {
                    objc_enumerationMutation(v28);
                  }
                  if (!_NSIsNSString()) {
                    return v7;
                  }
                  if (v30 == ++v32)
                  {
                    uint64_t v30 = [v28 countByEnumeratingWithState:&v35 objects:v34 count:16];
                    if (v30) {
                      goto LABEL_67;
                    }
                    return 0;
                  }
                }
              }
            }
            else if (!_NSIsNSString())
            {
              return @"NSUserStringVariant";
            }
          }
          return 0;
        }
        uint64_t v24 = v23;
        uint64_t v25 = *(void *)v41;
        uint64_t v7 = @"NSCallStackReturnAddresses";
LABEL_57:
        uint64_t v26 = 0;
        while (1)
        {
          if (*(void *)v41 != v25) {
            objc_enumerationMutation(v22);
          }
          if (!_NSIsNSNumber()) {
            break;
          }
          if (v24 == ++v26)
          {
            uint64_t v24 = [v22 countByEnumeratingWithState:&v40 objects:v39 count:16];
            if (v24) {
              goto LABEL_57;
            }
            goto LABEL_63;
          }
        }
      }
    }
  }
  return v7;
}

uint64_t getEnumTag for PredicateExpressionCodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

ValueMetadata *type metadata accessor for URL.DirectoryHint()
{
  return &type metadata for URL.DirectoryHint;
}

void *__cdecl NSAllocateMemoryPages(NSUInteger bytes)
{
  address[1] = *MEMORY[0x1E4F143B8];
  address[0] = 0;
  if (vm_allocate(*MEMORY[0x1E4F14960], address, bytes, 687865857))
  {
    unint64_t v3 = +[NSString stringWithFormat:@"*** NSAllocateMemoryPages(%lu) failed", bytes];
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:v3 userInfo:0]);
  }
  return (void *)address[0];
}

ValueMetadata *type metadata accessor for Data()
{
  return &type metadata for Data;
}

uint64_t DateComponents.year.getter()
{
  return *(void *)(v0 + 48);
}

NSString *NSHomeDirectory(void)
{
  return NSHomeDirectoryForUser(0);
}

void _NSUnarchiverPointerTableEntryFree(int a1, unsigned char *a2)
{
  int v2 = a2[9];
  a2[9] = v2 - 1;
  if ((_BYTE)v2 == 1)
  {
    free(a2);
  }
  else if (!v2)
  {
    __break(1u);
  }
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{
  swift_bridgeObjectRelease();
  *a2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  a2[1] = v4;
  return 1;
}

uint64_t String.Encoding.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t DateComponents.day.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t type metadata accessor for JSONEncoder()
{
  return self;
}

double DateInterval.start.getter@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

uint64_t DateComponents.minute.getter()
{
  return *(void *)(v0 + 128);
}

ValueMetadata *type metadata accessor for URLRequest()
{
  return &type metadata for URLRequest;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
}

{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
}

void __Block_byref_object_dispose__19(uint64_t a1)
{
}

void __Block_byref_object_dispose__20(uint64_t a1)
{
}

void __Block_byref_object_dispose__21(uint64_t a1)
{
}

void __Block_byref_object_dispose__22(uint64_t a1)
{
}

void __Block_byref_object_dispose__23(uint64_t a1)
{
}

void __Block_byref_object_dispose__24(uint64_t a1)
{
}

void __Block_byref_object_dispose__25(uint64_t a1)
{
}

void __Block_byref_object_dispose__26(uint64_t a1)
{
}

void __Block_byref_object_dispose__27(uint64_t a1)
{
}

void __Block_byref_object_dispose__28(uint64_t a1)
{
}

void __Block_byref_object_dispose__29(uint64_t a1)
{
}

void __Block_byref_object_dispose__30(uint64_t a1)
{
}

void __Block_byref_object_dispose__31(uint64_t a1)
{
}

void __Block_byref_object_dispose__32(uint64_t a1)
{
}

void __Block_byref_object_dispose__33(uint64_t a1)
{
}

void __Block_byref_object_dispose__34(uint64_t a1)
{
}

uint64_t type metadata accessor for JSONDecoder()
{
  uint64_t result = type metadata singleton initialization cache for JSONDecoder;
  if (!type metadata singleton initialization cache for JSONDecoder) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id NSExpression.init<A, B>(forKeyPath:)()
{
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  _bridgeKeyPathToString(_:)();
  uint64_t v1 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v2 = objc_msgSend(ObjCClassFromMetadata, sel_expressionForKeyPath_, v1);
  swift_unknownObjectRelease();
  swift_release();
  return v2;
}

void StringProtocol.addingPercentEncoding(withAllowedCharacters:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v4[2] = a2;
  v4[3] = a3;
  specialized CharacterSet.withUnsafeImmutableStorage<A>(_:)((void (*)(uint64_t *__return_ptr))partial apply for closure #1 in StringProtocol.addingPercentEncoding(withAllowedCharacters:), (uint64_t)v4, v3);
}

void specialized CharacterSet.withUnsafeImmutableStorage<A>(_:)(void (*a1)(uint64_t *__return_ptr), uint64_t a2, uint64_t a3)
{
  id v4 = *(id *)(a3 + 16);
  a1(&v5);
}

void partial apply for closure #1 in StringProtocol.addingPercentEncoding(withAllowedCharacters:)(uint64_t a1@<X0>, void *a2@<X8>)
{
}

void closure #1 in StringProtocol.addingPercentEncoding(withAllowedCharacters:)(uint64_t a1@<X0>, void *a2@<X8>)
{
  StringProtocol._ephemeralString.getter();
  id v4 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v4, sel__stringByAddingPercentEncodingWithAllowedCharacters_, a1);
  swift_unknownObjectRelease();
  id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  *a2 = v6;
  a2[1] = v8;
}

uint64_t storeEnumTagSinglePayload for Locale.Language(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t DateComponents.second.getter()
{
  return *(void *)(v0 + 144);
}

ValueMetadata *type metadata accessor for Date.FormatStyle()
{
  return &type metadata for Date.FormatStyle;
}

uint64_t DateComponents.month.getter()
{
  return *(void *)(v0 + 64);
}

_OWORD *NSDictionary.makeIterator()()
{
  type metadata accessor for NSDictionary.Iterator();
  uint64_t v0 = (_OWORD *)swift_allocObject();
  uint64_t v1 = swift_unknownObjectRetain();
  NSFastEnumerationIterator.init(_:)(v1, (uint64_t)v9);
  long long v2 = v9[11];
  v0[11] = v9[10];
  v0[12] = v2;
  v0[13] = v10[0];
  *(_OWORD *)((char *)v0 + 217) = *(_OWORD *)((char *)v10 + 9);
  long long v3 = v9[7];
  v0[7] = v9[6];
  v0[8] = v3;
  long long v4 = v9[9];
  v0[9] = v9[8];
  v0[10] = v4;
  long long v5 = v9[3];
  v0[3] = v9[2];
  v0[4] = v5;
  long long v6 = v9[5];
  v0[5] = v9[4];
  v0[6] = v6;
  long long v7 = v9[1];
  v0[1] = v9[0];
  v0[2] = v7;
  return v0;
}

double NSFastEnumerationIterator.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  double result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(unsigned char *)(a2 + 216) = 0;
  return result;
}

uint64_t type metadata accessor for NSDictionary.Iterator()
{
  return self;
}

uint64_t type metadata accessor for LockedState._Buffer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SortDescriptor()
{
  return __swift_instantiateGenericMetadata();
}

void NSHashInsert(NSHashTable *table, const void *pointer)
{
  if (!table) {
    NSLog((NSString *)@"%s: hash table argument is NULL", "void NSHashInsert(NSHashTable * _Nonnull, const void * _Nullable)");
  }

  [(NSHashTable *)table insertItem:pointer];
}

void updateDateTemplate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = objc_alloc_init(NSDateFormatter);
  long long v7 = *(void **)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v10 = v6;
  if (!v7)
  {
    long long v7 = (void *)[MEMORY[0x1E4F1CA20] currentLocale];
    long long v6 = v10;
  }
  [(NSDateFormatter *)v6 setLocale:v7];
  if (!v8) {
    uint64_t v8 = [v7 objectForKey:*MEMORY[0x1E4F1C3E0]];
  }
  [(NSDateFormatter *)v10 setCalendar:v8];
  [(NSDateFormatter *)v10 setDateStyle:a2];
  [(NSDateFormatter *)v10 setTimeStyle:a3];
  uint64_t v9 = [(NSDateFormatter *)v10 dateFormat];

  *(void *)(a1 + 40) = v9;
}

CFStringRef _dateFormatFromTemplate(const __CFString *tmplate, CFOptionFlags options, CFLocaleRef locale)
{
  if (tmplate)
  {
    DateFormatFromTemplate = (__CFString *)CFDateFormatterCreateDateFormatFromTemplate((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], tmplate, options, locale);
    return DateFormatFromTemplate;
  }
  return tmplate;
}

void sub_1818618F8(_Unwind_Exception *exception_object)
{
}

uint64_t _NSSetUsingKeyValueSetter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 48);
  if (v3 == 2) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, void, void))(a2 + 32))(a1, *(void *)(a2 + 40), a3, *(void *)(a2 + 56), *(void *)(a2 + 64));
  }
  if (v3 == 1) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, void))(a2 + 32))(a1, *(void *)(a2 + 40), a3, *(void *)(a2 + 56));
  }
  if (v3) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, void, void, void))(a2 + 32))(a1, *(void *)(a2 + 40), a3, *(void *)(a2 + 56), *(void *)(a2 + 64), *(void *)(a2 + 72));
  }
  uint64_t v4 = *(void *)(a2 + 40);
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 32);
  if (v4) {
    return v5(a1, v4);
  }
  else {
    return v5(a1, 0);
  }
}

uint64_t _NSSetFloatValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (a3)
  {
    IMP Implementation = method_getImplementation(m);
    SEL Name = method_getName(m);
    [a3 floatValue];
    return ((uint64_t (*)(void *, SEL))Implementation)(a1, Name);
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
}

void _NSSetObjectSetStrongValueForKeyInIvar(uint64_t a1, int a2, void *a3, int a4, Ivar v)
{
  long long v6 = (id *)(a1 + ivar_getOffset(v));

  objc_storeStrong(v6, a3);
}

uint64_t _NSSetLongLongValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (a3)
  {
    IMP Implementation = method_getImplementation(m);
    SEL Name = method_getName(m);
    uint64_t v9 = [a3 longLongValue];
    return ((uint64_t (*)(void *, SEL, uint64_t))Implementation)(a1, Name, v9);
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
}

uint64_t _NSSetIntValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (a3)
  {
    IMP Implementation = method_getImplementation(m);
    SEL Name = method_getName(m);
    uint64_t v9 = [a3 intValue];
    return ((uint64_t (*)(void *, SEL, uint64_t))Implementation)(a1, Name, v9);
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
}

uint64_t _NSSetUnsignedLongLongValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (a3)
  {
    IMP Implementation = method_getImplementation(m);
    SEL Name = method_getName(m);
    uint64_t v9 = [a3 unsignedLongLongValue];
    return ((uint64_t (*)(void *, SEL, uint64_t))Implementation)(a1, Name, v9);
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
}

void *_NSPathComponents(_WORD *a1, uint64_t a2)
{
  uint64_t v4 = (void *)[MEMORY[0x1E4F1CA48] array];
  if (a2)
  {
    if (a2 >= 1 && *a1 == 47)
    {
      uint64_t v5 = 1;
      objc_msgSend(v4, "addObject:", +[NSString stringWithCharacters:length:](NSString, "stringWithCharacters:length:", a1, 1));
    }
    else
    {
      uint64_t v5 = 0;
    }
    while (v5 < a2)
    {
      if (a1[v5] == 47)
      {
        ++v5;
      }
      else
      {
        if (v5 >= a2)
        {
LABEL_17:
          objc_msgSend(v4, "addObject:", +[NSString stringWithCharacters:length:](NSString, "stringWithCharacters:length:"));
          break;
        }
        uint64_t v6 = 0;
        while (a1[v5 + v6] != 47)
        {
          ++v6;
          if (v5 + v6 >= a2) {
            goto LABEL_17;
          }
        }
        objc_msgSend(v4, "addObject:", +[NSString stringWithCharacters:length:](NSString, "stringWithCharacters:length:"));
        v5 += v6;
      }
    }
    if (a2 >= 2 && a1[a2 - 1] == 47) {
      objc_msgSend(v4, "addObject:", +[NSString stringWithCharacters:length:](NSString, "stringWithCharacters:length:", &a1[a2 - 1], 1));
    }
  }
  return v4;
}

uint64_t _NSSetBoolValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (a3)
  {
    IMP Implementation = method_getImplementation(m);
    SEL Name = method_getName(m);
    uint64_t v9 = [a3 BOOLValue];
    return ((uint64_t (*)(void *, SEL, uint64_t))Implementation)(a1, Name, v9);
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
}

ptrdiff_t _NSSetBoolValueForKeyInIvar(unsigned char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  if (a3)
  {
    char v7 = [a3 BOOLValue];
    ptrdiff_t result = ivar_getOffset(a5);
    a1[result] = v7;
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
  return result;
}

ptrdiff_t _NSSetUnsignedLongLongValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  if (a3)
  {
    uint64_t v7 = [a3 unsignedLongLongValue];
    ptrdiff_t result = ivar_getOffset(a5);
    *(void *)&a1[result] = v7;
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
  return result;
}

ptrdiff_t _NSSetLongLongValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  if (a3)
  {
    uint64_t v7 = [a3 longLongValue];
    ptrdiff_t result = ivar_getOffset(a5);
    *(void *)&a1[result] = v7;
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
  return result;
}

uint64_t _NSSetValueWithMethod(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v7 = (void *)[a1 methodSignatureForSelector:a2];
    uint64_t v8 = [v7 frameLength];
    double v9 = MEMORY[0x1F4188790](v8);
    uint64_t v11 = (char *)v14 - v10;
    objc_msgSend(a3, "getValue:", (char *)v14 - v10, v9);
    uint64_t v12 = (void *)[MEMORY[0x1E4F1CA18] invocationWithMethodSignature:v7];
    [v12 setTarget:a1];
    [v12 setSelector:a2];
    [v12 setArgument:v11 atIndex:2];
    return [v12 invoke];
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
}

ptrdiff_t _NSSetDoubleValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  if (a3)
  {
    [a3 doubleValue];
    uint64_t v8 = v7;
    ptrdiff_t result = ivar_getOffset(a5);
    *(void *)&a1[result] = v8;
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
  return result;
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  if ((v0 & 0xC000000000000001) != 0)
  {
    if (v0 < 0) {
      uint64_t v1 = v0;
    }
    else {
      uint64_t v1 = v0 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    return (NSSet)v1;
  }
  else
  {
    swift_bridgeObjectRetain();
    return (NSSet)_NativeSet.bridged()();
  }
}

void protocol witness for RawRepresentable.rawValue.getter in conformance String._BlockSearchingOptions(void *a1@<X8>)
{
  *a1 = *v1;
}

void URL.hash(into:)()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  id v3 = *(id *)v0;
  NSObject.hash(into:)();

  if (_foundation_swift_url_feature_enabled())
  {
    if (v1)
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v2)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t specialized static RFC3986Parser.parseAuthority(_:into:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = a2;
  uint64_t v8 = a2;
  if (a2 == result) {
    goto LABEL_25;
  }
  uint64_t v9 = result;
  uint64_t v10 = a2 - 1;
  if (*(unsigned char *)(a3 + a2 - 1) != 64)
  {
    if (v10 == result)
    {
LABEL_7:
      uint64_t v8 = result;
      if (result != a2) {
        goto LABEL_17;
      }
LABEL_24:
      if (v8 > v7)
      {
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
LABEL_25:
      ptrdiff_t result = specialized Collection<>.firstIndex(of:)(0x3Au, v8, v7, a3);
      if ((v17 & 1) == 0)
      {
        uint64_t v16 = result + 1;
        if (result + 1 == v7)
        {
          uint64_t v7 = result;
          goto LABEL_30;
        }
        if (result + 1 > v7)
        {
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
LABEL_29:
        *(void *)(a5 + 96) = v16;
        *(void *)(a5 + 104) = v7;
        uint64_t v7 = result;
        *(unsigned char *)(a5 + 112) = 0;
      }
LABEL_30:
      if (v7 >= v8)
      {
        *(void *)(a5 + 72) = v8;
        *(void *)(a5 + 80) = v7;
        *(unsigned char *)(a5 + 88) = 0;
        *(unsigned char *)(a5 + 186) = specialized Sequence<>.contains(_:)(0x25u, v8, v7, a3);
        return 1;
      }
      __break(1u);
      goto LABEL_34;
    }
    uint64_t v11 = a2;
    while (*(unsigned char *)(a3 - 2 + v11) != 64)
    {
      if (result + 1 == --v11) {
        goto LABEL_7;
      }
    }
    uint64_t v10 = v11 - 2;
  }
  if (v10 < result)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  ptrdiff_t result = specialized Collection<>.firstIndex(of:)(0x3Au, result, v10, a3);
  if (v12)
  {
    *(void *)(a5 + 24) = v9;
    *(void *)(a5 + 32) = v10;
    uint64_t v13 = (unsigned char *)(a5 + 40);
  }
  else
  {
    if (result < v9)
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    *(void *)(a5 + 24) = v9;
    *(void *)(a5 + 32) = result;
    *(unsigned char *)(a5 + 40) = 0;
    if (v10 < result + 1)
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    *(void *)(a5 + 48) = result + 1;
    *(void *)(a5 + 56) = v10;
    uint64_t v13 = (unsigned char *)(a5 + 64);
  }
  unsigned char *v13 = 0;
  uint64_t v8 = v10 + 1;
  if (v8 == v7) {
    goto LABEL_24;
  }
LABEL_17:
  if (*(unsigned char *)(a3 + v8) != 91) {
    goto LABEL_24;
  }
  if (v8 <= v7)
  {
    ptrdiff_t result = specialized Collection<>.firstIndex(of:)(0x5Du, v8, v7, a3);
    if ((v14 & 1) == 0)
    {
      uint64_t v15 = result;
      *(unsigned char *)(a5 + 185) = 1;
      if (++result == v7) {
        goto LABEL_30;
      }
      if (*(unsigned char *)(a3 + result) != 58) {
        return 0;
      }
      uint64_t v16 = v15 + 2;
      if (v16 <= v7) {
        goto LABEL_29;
      }
      __break(1u);
    }
    goto LABEL_24;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.firstIndex(of:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3)
  {
    return 0;
  }
  else
  {
    uint64_t v4 = a2;
    if (*(unsigned __int8 *)(a4 + a2) == a1)
    {
      return a2;
    }
    else
    {
      while (a3 - 1 != v4)
      {
        int v6 = *(unsigned __int8 *)(a4 + 1 + v4++);
        if (v6 == a1) {
          return v4;
        }
      }
      return 0;
    }
  }
}

BOOL specialized Sequence<>.contains(_:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return 0;
  }
  int v4 = a1;
  if (*(unsigned __int8 *)(a4 + a2) == a1) {
    return 1;
  }
  if (a2 + 1 == a3) {
    return 0;
  }
  uint64_t v6 = a3 - a2 - 2;
  uint64_t v7 = (unsigned __int8 *)(a4 + a2 + 1);
  do
  {
    int v8 = *v7++;
    BOOL result = v8 == v4;
  }
  while (v8 != v4 && v6-- != 0);
  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int64(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int64(a1, a2, (const char **)&selRef_initWithLongLong_);
}

uint64_t NSAttributedString.init<A>(_:including:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return NSAttributedString.init<A>(_:including:)(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v5;

  uint64_t v5 = *a1;
  id v3 = NSAttributedString.init<A>(_:including:)(&v5, a2, a3);
  swift_release();
  return v3;
}

{
  uint64_t v3;
  long long v4;
  long long v5;
  id v6;
  uint64_t v7;
  long long v8;
  long long v9;
  long long v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  int v33;
  char v34;
  char v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  char v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  id v50;
  void *v51;
  uint64_t v52;
  long long *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62[2];
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72[48];
  char v73[48];
  _OWORD v74[3];
  _OWORD v75[3];
  _OWORD v76[3];
  _OWORD v77[3];
  long long v78[3];
  unsigned char v79[40];
  long long v80[3];
  unsigned char v81[40];
  long long v82[3];
  unsigned char v83[40];
  long long v84[3];
  unsigned char v85[56];
  uint64_t v86;

  id v3 = *a1;
  long long v51 = static AttributeScope.scopeDescription.getter(a3);
  swift_bridgeObjectRelease();
  int v4 = *(_OWORD *)(v3 + 32);
  v77[0] = *(_OWORD *)(v3 + 16);
  v77[1] = v4;
  uint64_t v5 = *(_OWORD *)(v3 + 48);
  v78[1] = v4;
  v78[2] = v5;
  v77[2] = v5;
  v78[0] = v77[0];
  outlined init with take of any PredicateExpression<Self.Output == B1>(v78, (uint64_t)v79);
  outlined retain of Locale((uint64_t)v79);
  MEMORY[0x185302050](v77);
  uint64_t v6 = objc_allocWithZone((Class)NSMutableAttributedString);
  uint64_t v7 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  long long v50 = objc_msgSend(v6, sel_initWithString_, v7);
  swift_unknownObjectRelease();
  int v8 = *(_OWORD *)(v3 + 16);
  uint64_t v9 = *(_OWORD *)(v3 + 48);
  v76[1] = *(_OWORD *)(v3 + 32);
  v76[2] = v9;
  v76[0] = v8;
  uint64_t v10 = *(_OWORD *)(v3 + 16);
  v80[1] = *(_OWORD *)(v3 + 32);
  v80[2] = v9;
  v80[0] = v10;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v80, (uint64_t)v81);
  outlined retain of Locale((uint64_t)v81);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v76);
  BOOL result = *(void *)(v3 + 64);
  long long v52 = *(void *)(v3 + 72);
  long long v55 = *(void *)(v3 + 88);
  long long v56 = *(void *)(v3 + 80);
  if (result)
  {
    char v12 = *(unsigned __int8 *)(result + 18);
    BOOL result = swift_unknownObjectRetain();
  }
  else
  {
    char v12 = 0;
  }
  uint64_t v13 = 0;
  char v14 = 0;
  uint64_t v15 = 0;
  long long v53 = (long long *)(v3 + 16);
  uint64_t v63 = (void *)result;
  unsigned __int8 v64 = v52;
  uint64_t v65 = v56;
  uint64_t v66 = v55;
  uint64_t v67 = v55;
  uint64_t v68 = v12;
  uint64_t v61 = result;
  uint64_t v49 = result + 24;
  uint64_t v70 = 0;
  BOOL v71 = 0;
  uint64_t v69 = 0;
  while (1)
  {
    if (v61)
    {
      if (v15 == v56)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_unknownObjectRelease();
LABEL_42:
        long long v48 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithAttributedString_, v50);

        return (uint64_t)v48;
      }
    }
    else if (!v15)
    {
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_42;
    }
    if (v67 != v55) {
      break;
    }
    long long v58 = v13;
    uint64_t v18 = v69;
    char v60 = v68;
    if (v69)
    {
      uint64_t v19 = (void *)(v69 + 24 * ((v68 >> ((4 * *(unsigned char *)(v69 + 18) + 8) & 0x3C)) & 0xF));
      uint64_t v20 = v19[3];
      uint64_t v21 = v19[4];
      unsigned int v22 = v19[5];
      char v17 = __OFADD__(v14++, 1);
      uint64_t v23 = v17;
      swift_bridgeObjectRetain();
      BOOL result = swift_bridgeObjectRetain();
      uint64_t v24 = v61;
      if (v23) {
        goto LABEL_45;
      }
      uint64_t v70 = v14;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v59 = v22;
    }
    else
    {
      uint64_t v25 = v68;
      uint64_t v24 = v61;
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v25, v61);
      uint64_t v86 = v26;
      double v28 = v27;
      BOOL result = swift_unknownObjectRelease();
      char v17 = __OFADD__(v14++, 1);
      if (v17) {
        goto LABEL_45;
      }
      uint64_t v59 = v28;
      uint64_t v70 = v14;
      swift_unknownObjectRetain();
      uint64_t v20 = specialized Rope._Node.subscript.getter(v25, v61);
      uint64_t v21 = v86;
    }
    swift_bridgeObjectRelease();
    BOOL result = swift_bridgeObjectRelease();
    char v17 = __OFADD__(v15, v20);
    uint64_t v29 = v15 + v20;
    if (v17) {
      goto LABEL_46;
    }
    BOOL v71 = v29;
    if (!v24) {
      goto LABEL_48;
    }
    uint64_t v30 = ((-15 << ((4 * *(unsigned char *)(v24 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v24 + 18) | ((unint64_t)*(unsigned __int16 *)(v24 + 16) << ((4 * *(unsigned char *)(v24 + 18) + 8) & 0x3C));
    BOOL result = swift_unknownObjectRetain();
    if (v60 >= v30) {
      goto LABEL_48;
    }
    long long v57 = v29;
    uint64_t v86 = v21;
    if (v18)
    {
      uint64_t v31 = (4 * *(unsigned char *)(v18 + 18) + 8) & 0x3C;
      uint64_t v32 = ((v60 >> v31) & 0xF) + 1;
      if (v32 < *(unsigned __int16 *)(v18 + 16))
      {
        uint64_t v68 = (v32 << v31) | ((-15 << v31) - 1) & v60;
LABEL_28:
        swift_unknownObjectRelease_n();
        goto LABEL_34;
      }
    }
    uint64_t v33 = *(unsigned __int8 *)(v24 + 18);
    uint64_t v34 = (4 * v33 + 8) & 0x3C;
    v62[0] = (v60 >> v34) & 0xF;
    if (v33)
    {
      swift_unknownObjectRetain();
      long long v35 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v49, v62, (uint64_t)&v67, v24, v33);
      swift_unknownObjectRelease();
      if (v35) {
        goto LABEL_28;
      }
      long long v37 = *(unsigned __int8 *)(v24 + 18);
    }
    else
    {
      long long v36 = ((v60 >> v34) & 0xF) + 1;
      if (v36 < *(unsigned __int16 *)(v24 + 16))
      {
        uint64_t v68 = (v36 << v34) | ((-15 << v34) - 1) & v60;
        swift_unknownObjectRelease_n();
        uint64_t v69 = v24;
        goto LABEL_34;
      }
      long long v37 = 0;
    }
    long long v38 = *(unsigned __int16 *)(v24 + 16);
    char v39 = *(unsigned char *)(v24 + 18);
    swift_unknownObjectRelease_n();
    uint64_t v67 = v55;
    uint64_t v68 = ((-15 << ((4 * v39 + 8) & 0x3C)) - 1) & v37 | (unint64_t)(v38 << ((4 * v39 + 8) & 0x3C));
    uint64_t v69 = 0;
LABEL_34:
    long long v40 = *v53;
    long long v41 = v53[2];
    v75[1] = v53[1];
    v75[2] = v41;
    v75[0] = v40;
    long long v42 = *v53;
    v82[1] = v53[1];
    v82[2] = v41;
    v82[0] = v42;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v82, (uint64_t)v83);
    outlined retain of Locale((uint64_t)v83);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v75);
    BigString.UTF8View.index(_:offsetBy:)();
    outlined release of Locale((uint64_t)v72);
    long long v43 = *v53;
    char v44 = v53[2];
    v74[1] = v53[1];
    v74[2] = v44;
    v74[0] = v43;
    long long v45 = *v53;
    v84[1] = v53[1];
    v84[2] = v44;
    v84[0] = v45;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v84, (uint64_t)v85);
    outlined retain of Locale((uint64_t)v85);
    BigString.utf16.getter();
    outlined release of Locale((uint64_t)v74);
    long long v46 = BigString.UTF16View.distance(from:to:)();
    outlined release of Locale((uint64_t)v73);
    if (!*(void *)(v86 + 16))
    {
      swift_bridgeObjectRelease();
LABEL_39:
      BOOL result = swift_bridgeObjectRelease();
      uint64_t v16 = v58;
      goto LABEL_6;
    }
    v62[0] = v86;
    v62[1] = v59;
    swift_bridgeObjectRetain();
    long long v47 = specialized Dictionary<>.init(_:attributeTable:options:)(v62, (uint64_t)v51, 0);
    if (v54)
    {
      long long v48 = v63;

      swift_bridgeObjectRelease();
      swift_release();
      swift_unknownObjectRelease();
      return (uint64_t)v48;
    }
    if (!*(void *)(v47 + 16)) {
      goto LABEL_39;
    }
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
    uint64_t v16 = v58;
    objc_msgSend(v50, sel_setAttributes_range_, _NativeDictionary.bridged()(), v58, v46);
    BOOL result = swift_unknownObjectRelease();
LABEL_6:
    char v17 = __OFADD__(v16, v46);
    uint64_t v13 = v16 + v46;
    uint64_t v15 = v57;
    if (v17) {
      goto LABEL_47;
    }
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t NSAttributedString.init(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t Default = _loadDefaultAttributes()((uint64_t)a1);
  long long v2 = *(_OWORD *)(v1 + 32);
  v67[0] = *(_OWORD *)(v1 + 16);
  v67[1] = v2;
  long long v68 = *(_OWORD *)(v1 + 48);
  v69[0] = v67[0];
  v69[1] = v2;
  _OWORD v69[2] = v68;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v69, (uint64_t)v70);
  outlined retain of Locale((uint64_t)v70);
  MEMORY[0x185302050](v67);
  id v3 = objc_allocWithZone((Class)NSMutableAttributedString);
  uint64_t v4 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v47 = objc_msgSend(v3, sel_initWithString_, v4);
  swift_unknownObjectRelease();
  long long v5 = *(_OWORD *)(v1 + 16);
  long long v6 = *(_OWORD *)(v1 + 48);
  v66[1] = *(_OWORD *)(v1 + 32);
  v66[2] = v6;
  v66[0] = v5;
  long long v7 = *(_OWORD *)(v1 + 16);
  v71[1] = *(_OWORD *)(v1 + 32);
  v71[2] = v6;
  v71[0] = v7;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v71, (uint64_t)v72);
  outlined retain of Locale((uint64_t)v72);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v66);
  uint64_t v8 = *(void *)(v1 + 64);
  uint64_t v49 = *(void *)(v1 + 72);
  uint64_t v51 = *(void *)(v1 + 88);
  uint64_t v52 = *(void *)(v1 + 80);
  if (v8)
  {
    unint64_t v9 = *(unsigned __int8 *)(v8 + 18);
    swift_unknownObjectRetain();
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  long long v50 = (long long *)(v1 + 16);
  v56[2] = v8;
  v56[3] = v49;
  unsigned char v56[4] = v52;
  v56[5] = v51;
  uint64_t v57 = v51;
  unint64_t v58 = v9;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v59 = 0;
  while (1)
  {
    if (v8)
    {
      if (v12 == v52)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_unknownObjectRelease();
LABEL_41:
        id v45 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithAttributedString_, v47);

        return (uint64_t)v45;
      }
    }
    else if (!v12)
    {
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_41;
    }
    if (v57 != v51) {
      break;
    }
    uint64_t v55 = v10;
    unint64_t v15 = v58;
    uint64_t v16 = v59;
    if (v59)
    {
      char v17 = (void *)(v59 + 24 * ((v58 >> ((4 * *(unsigned char *)(v59 + 18) + 8) & 0x3C)) & 0xF));
      unint64_t v19 = v17[3];
      uint64_t v18 = v17[4];
      uint64_t v20 = v17[5];
      BOOL v14 = __OFADD__(v11, 1);
      uint64_t v21 = v11 + 1;
      char v22 = v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v22) {
        goto LABEL_43;
      }
      uint64_t v54 = v21;
      uint64_t v60 = v21;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v23 = v19;
    }
    else
    {
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v15, v8);
      uint64_t v18 = v24;
      uint64_t v20 = v25;
      swift_unknownObjectRelease();
      BOOL v14 = __OFADD__(v11, 1);
      uint64_t v26 = v11 + 1;
      if (v14) {
        goto LABEL_43;
      }
      uint64_t v54 = v26;
      uint64_t v60 = v26;
      swift_unknownObjectRetain();
      unint64_t v23 = specialized Rope._Node.subscript.getter(v15, v8);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL v14 = __OFADD__(v12, v23);
    uint64_t v27 = v12 + v23;
    if (v14) {
      goto LABEL_44;
    }
    uint64_t v53 = v27;
    uint64_t v61 = v27;
    if (!v8) {
      goto LABEL_46;
    }
    unint64_t v28 = ((-15 << ((4 * *(unsigned char *)(v8 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v8 + 18) | ((unint64_t)*(unsigned __int16 *)(v8 + 16) << ((4 * *(unsigned char *)(v8 + 18) + 8) & 0x3C));
    swift_unknownObjectRetain();
    if (v15 >= v28) {
      goto LABEL_46;
    }
    if (v16)
    {
      char v29 = (4 * *(unsigned char *)(v16 + 18) + 8) & 0x3C;
      unint64_t v30 = ((v15 >> v29) & 0xF) + 1;
      if (v30 < *(unsigned __int16 *)(v16 + 16))
      {
        unint64_t v58 = (v30 << v29) | ((-15 << v29) - 1) & v15;
LABEL_29:
        swift_unknownObjectRelease_n();
        goto LABEL_35;
      }
    }
    int v31 = *(unsigned __int8 *)(v8 + 18);
    char v32 = (4 * v31 + 8) & 0x3C;
    v56[0] = (v15 >> v32) & 0xF;
    if (v31)
    {
      swift_unknownObjectRetain();
      char v33 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v8 + 24, v56, (uint64_t)&v57, v8, v31);
      swift_unknownObjectRelease();
      if (v33) {
        goto LABEL_29;
      }
      int v35 = *(unsigned __int8 *)(v8 + 18);
    }
    else
    {
      unint64_t v34 = ((v15 >> v32) & 0xF) + 1;
      if (v34 < *(unsigned __int16 *)(v8 + 16))
      {
        unint64_t v58 = (v34 << v32) | ((-15 << v32) - 1) & v15;
        swift_unknownObjectRelease_n();
        uint64_t v59 = v8;
        goto LABEL_35;
      }
      int v35 = 0;
    }
    uint64_t v36 = *(unsigned __int16 *)(v8 + 16);
    char v37 = *(unsigned char *)(v8 + 18);
    swift_unknownObjectRelease_n();
    uint64_t v57 = v51;
    unint64_t v58 = ((-15 << ((4 * v37 + 8) & 0x3C)) - 1) & v35 | (unint64_t)(v36 << ((4 * v37 + 8) & 0x3C));
    uint64_t v59 = 0;
LABEL_35:
    long long v38 = *v50;
    long long v39 = v50[2];
    v65[1] = v50[1];
    _OWORD v65[2] = v39;
    v65[0] = v38;
    long long v40 = *v50;
    v73[1] = v50[1];
    v73[2] = v39;
    v73[0] = v40;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v73, (uint64_t)v74);
    outlined retain of Locale((uint64_t)v74);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v65);
    BigString.UTF8View.index(_:offsetBy:)();
    outlined release of Locale((uint64_t)v62);
    long long v41 = *v50;
    long long v42 = v50[2];
    v64[1] = v50[1];
    v64[2] = v42;
    v64[0] = v41;
    long long v43 = *v50;
    v75[1] = v50[1];
    v75[2] = v42;
    v75[0] = v43;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v75, (uint64_t)v76);
    outlined retain of Locale((uint64_t)v76);
    BigString.utf16.getter();
    outlined release of Locale((uint64_t)v64);
    uint64_t v44 = BigString.UTF16View.distance(from:to:)();
    outlined release of Locale((uint64_t)v63);
    if (*(void *)(v18 + 16))
    {
      v56[0] = v18;
      v56[1] = v20;
      swift_bridgeObjectRetain();
      if (*(void *)(specialized Dictionary<>.init(_:attributeTable:options:)(v56, Default, 1) + 16))
      {
        type metadata accessor for NSAttributedStringKey(0);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
        uint64_t v13 = v55;
        objc_msgSend(v47, sel_setAttributes_range_, _NativeDictionary.bridged()(), v55, v44);
        swift_unknownObjectRelease();
        goto LABEL_7;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = v55;
LABEL_7:
    BOOL v14 = __OFADD__(v13, v44);
    uint64_t v10 = v13 + v44;
    uint64_t v12 = v53;
    uint64_t v11 = v54;
    if (v14) {
      goto LABEL_45;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);

  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

void sub_1818660A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
}

void type metadata accessor for NSAttributedStringKey(uint64_t a1)
{
}

unint64_t specialized Rope._Node.subscript.getter(unint64_t result, uint64_t a2)
{
  if (((result >> ((4 * *(unsigned char *)(a2 + 18) + 8) & 0x3C)) & 0xF) >= *(unsigned __int16 *)(a2 + 16))
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2 + 24;
    if (*(unsigned char *)(a2 + 18))
    {
      unint64_t v3 = result;
      uint64_t v4 = (uint64_t *)(v2 + 24 * ((result >> ((4 * *(unsigned char *)(a2 + 18) + 8) & 0x3C)) & 0xF));
      uint64_t v6 = *v4;
      uint64_t v5 = v4[1];
      uint64_t v7 = v4[2];
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      uint64_t v8 = specialized Rope._Node.subscript.getter(v3, v6, v5, v7);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v8 = *(void *)(v2 + 24 * ((result >> ((4 * *(unsigned char *)(a2 + 18) + 8) & 0x3C)) & 0xF));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    return v8;
  }
  return result;
}

uint64_t specialized Dictionary<>.init(_:attributeTable:options:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v56 = a3;
  uint64_t v6 = *a1;
  v55[1] = a1[1];
  uint64_t v76 = MEMORY[0x1E4FBC868];
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  uint64_t v8 = v6 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v57 = v6;
  uint64_t v60 = a2;
  uint64_t v59 = v6 + 64;
  int64_t v58 = v12;
  while (1)
  {
    while (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v7 << 6);
      if (*(void *)(a2 + 16))
      {
LABEL_21:
        uint64_t v18 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v14);
        uint64_t v20 = *v18;
        uint64_t v19 = v18[1];
        swift_bridgeObjectRetain();
        unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v19);
        if (v22)
        {
          uint64_t v63 = v4;
          unint64_t v23 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v21);
          uint64_t v24 = *v23;
          uint64_t v25 = v23[1];
          uint64_t v64 = v19;
          uint64_t v66 = (void *)String._bridgeToObjectiveCImpl()();
          uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
          uint64_t v65 = v55;
          uint64_t v27 = AssociatedTypeWitness;
          uint64_t v67 = *(void *)(AssociatedTypeWitness - 8);
          uint64_t v28 = *(void *)(v67 + 64);
          double v29 = MEMORY[0x1F4188790](AssociatedTypeWitness);
          long long v68 = (void *)((char *)v55 - v30);
          uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, double))(v25 + 24))(v24, v25, v29);
          if (*(void *)(v6 + 16) && (unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32), (v34 & 1) != 0))
          {
            uint64_t v35 = v6;
            outlined init with copy of AttributedString._AttributeValue(*(void *)(v6 + 56) + 72 * v33, (uint64_t)&v70);
          }
          else
          {
            uint64_t v35 = v6;
            uint64_t v74 = 0;
            long long v72 = 0u;
            long long v73 = 0u;
            long long v70 = 0u;
            long long v71 = 0u;
          }
          swift_bridgeObjectRelease();
          if (!*((void *)&v71 + 1)) {
            goto LABEL_54;
          }
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v70, (uint64_t)v69);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
          uint64_t v36 = v68;
          swift_dynamicCast();
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v70);
          uint64_t v37 = swift_conformsToProtocol2();
          if (v37) {
            uint64_t v38 = v37;
          }
          else {
            uint64_t v38 = 0;
          }
          if (v37) {
            uint64_t v39 = v24;
          }
          else {
            uint64_t v39 = 0;
          }
          if (!v39)
          {
            uint64_t isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
            if (isClassOrObjCExistentialType)
            {
              if (v28 != 8) {
                goto LABEL_52;
              }
              long long v48 = v68;
              uint64_t v49 = *v68;
              swift_unknownObjectRetain();
              long long v50 = v63;
              uint64_t v51 = v67;
            }
            else
            {
              double v52 = MEMORY[0x1F4188790](isClassOrObjCExistentialType);
              uint64_t v53 = (char *)v55 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
              uint64_t v51 = v67;
              long long v48 = v68;
              (*(void (**)(char *, uint64_t *, uint64_t, double))(v67 + 16))(v53, v68, v27, v52);
              uint64_t v49 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
              long long v50 = v63;
            }
            uint64_t v6 = v35;
            uint64_t v4 = v50;
            goto LABEL_42;
          }
          char v62 = v55;
          double v40 = MEMORY[0x1F4188790](v37);
          (*(void (**)(char *, uint64_t *, uint64_t, double))(v67 + 16))((char *)v55 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0), v36, v27, v40);
          uint64_t v41 = swift_getAssociatedTypeWitness();
          uint64_t v61 = v55;
          uint64_t v42 = *(void *)(v41 - 8);
          MEMORY[0x1F4188790](v41);
          uint64_t v44 = (char *)v55 - v43;
          swift_dynamicCast();
          id v45 = v63;
          uint64_t v46 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 24))(v44, v39, v38);
          uint64_t v4 = v45;
          if (!v45)
          {
            uint64_t v49 = v46;
            (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v41);
            uint64_t v6 = v57;
            uint64_t v51 = v67;
            long long v48 = v68;
LABEL_42:
            (*(void (**)(uint64_t *, uint64_t))(v51 + 8))(v48, v27);
            long long v75[3] = swift_getObjectType();
            v75[0] = v49;
            specialized Dictionary.subscript.setter((uint64_t)v75, v66);
            swift_bridgeObjectRelease();
            goto LABEL_43;
          }
          (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v41);
          swift_unknownObjectRelease();
          (*(void (**)(uint64_t *, uint64_t))(v67 + 8))(v68, v27);
          swift_bridgeObjectRelease();
          if ((v56 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_willThrow();
            return swift_release();
          }

          uint64_t v4 = 0;
          uint64_t v6 = v57;
LABEL_43:
          a2 = v60;
          uint64_t v8 = v59;
          int64_t v12 = v58;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
    }
    if (__OFADD__(v7++, 1))
    {
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    if (v7 >= v12) {
      goto LABEL_49;
    }
    unint64_t v16 = *(void *)(v8 + 8 * v7);
    if (!v16) {
      break;
    }
LABEL_20:
    unint64_t v11 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v7 << 6);
    if (*(void *)(a2 + 16)) {
      goto LABEL_21;
    }
  }
  int64_t v17 = v7 + 1;
  if (v7 + 1 >= v12) {
    goto LABEL_49;
  }
  unint64_t v16 = *(void *)(v8 + 8 * v17);
  if (v16) {
    goto LABEL_19;
  }
  int64_t v17 = v7 + 2;
  if (v7 + 2 >= v12) {
    goto LABEL_49;
  }
  unint64_t v16 = *(void *)(v8 + 8 * v17);
  if (v16) {
    goto LABEL_19;
  }
  int64_t v17 = v7 + 3;
  if (v7 + 3 >= v12) {
    goto LABEL_49;
  }
  unint64_t v16 = *(void *)(v8 + 8 * v17);
  if (v16) {
    goto LABEL_19;
  }
  int64_t v17 = v7 + 4;
  if (v7 + 4 >= v12)
  {
LABEL_49:
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v76;
  }
  unint64_t v16 = *(void *)(v8 + 8 * v17);
  if (v16)
  {
LABEL_19:
    int64_t v7 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v7 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_49;
    }
    unint64_t v16 = *(void *)(v8 + 8 * v7);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }
LABEL_53:
  __break(1u);
LABEL_54:
  uint64_t result = outlined destroy of AttributedString._AttributeValue?((uint64_t)&v70);
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey()
{
  unint64_t result = lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey;
  if (!lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey)
  {
    type metadata accessor for NSAttributedStringKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey);
  }
  return result;
}

NSMutableAttributedString *_NSStringCreateByParsingMarkdownAndOptionallyInflecting(void *a1, __CFBundle *MainBundle, void *a3, void *a4, int a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (NSMutableAttributedString *)objc_msgSend((id)objc_msgSend(a1, "__baseAttributedString"), "mutableCopy");
  if (v10) {
    return v10;
  }
  id v11 = (id)_NSAttributedStringMarkdownParsingLocalizedStringOptions();
  if (!a3) {
    goto LABEL_14;
  }
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  int64_t v12 = objc_msgSend((id)objc_msgSend(a3, "pathComponents"), "reverseObjectEnumerator");
  uint64_t v13 = [v12 countByEnumeratingWithState:&v31 objects:v30 count:16];
  if (!v13) {
    goto LABEL_14;
  }
  uint64_t v14 = v13;
  id v28 = v11;
  int v29 = a5;
  id v15 = 0;
  uint64_t v16 = *(void *)v32;
  do
  {
    for (uint64_t i = 0; i != v14; ++i)
    {
      if (*(void *)v32 != v16) {
        objc_enumerationMutation(v12);
      }
      uint64_t v18 = *(void **)(*((void *)&v31 + 1) + 8 * i);
      if (objc_msgSend(v18, "hasSuffix:", @".lproj", v28)
        && (unint64_t)[v18 length] >= 7)
      {
        id v15 = (id)objc_msgSend(v18, "substringToIndex:", objc_msgSend(v18, "length") - 6);
      }
    }
    uint64_t v14 = [v12 countByEnumeratingWithState:&v31 objects:v30 count:16];
  }
  while (v14);
  a5 = v29;
  id v11 = v28;
  if (!v15)
  {
LABEL_14:
    if (!MainBundle) {
      MainBundle = CFBundleGetMainBundle();
    }
    CFArrayRef v19 = CFBundleCopyBundleLocalizations(MainBundle);
    CFArrayRef v20 = CFBundleCopyPreferredLocalizationsFromArray(v19);
    CFRelease(v19);
    id v15 = (id)objc_msgSend((id)-[__CFArray firstObject](v20, "firstObject"), "copy");
    CFRelease(v20);
  }
  unint64_t v21 = (void *)[v11 copy];
  [v21 setLanguageCode:v15];

  if (a4) {
    uint64_t v22 = [a4 objectForKeyedSubscript:@"NSStringInflectableLocalizationKey"];
  }
  else {
    uint64_t v22 = 0;
  }
  int v23 = _NSIsNSString();
  uint64_t v24 = [NSMutableAttributedString alloc];
  if (v23)
  {
    uint64_t v10 = [(NSAttributedString *)v24 initWithMarkdownString:v22 options:v21 baseURL:0 error:0];
    uint64_t v25 = objc_alloc_init(NSAttributedStringMarkdownParsingOptions);
    [(NSAttributedStringMarkdownParsingOptions *)v25 setInterpretedSyntax:2];
    uint64_t v26 = [[NSAttributedString alloc] initWithMarkdownString:a1 options:v25 baseURL:0 error:0];

    if (v26)
    {
      [(NSMutableAttributedString *)v10 addAttribute:@"NSInflectionAlternative", v26, 0, [(NSAttributedString *)v10 length] value range];
    }
    if (!a5) {
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v10 = [(NSAttributedString *)v24 initWithMarkdownString:a1 options:v21 baseURL:0 error:0];
    if (!a5) {
      goto LABEL_25;
    }
  }
  [(NSMutableAttributedString *)v10 _inflectWithLocale:0 replacements:MEMORY[0x1E4F1CBF0] concepts:MEMORY[0x1E4F1CBF0] preflight:1];
LABEL_25:
  if (a4) {
    -[NSMutableAttributedString addAttribute:value:range:](v10, "addAttribute:value:range:", 0x1ECA67C88, a4, 0, [(NSAttributedString *)v10 length]);
  }

  return v10;
}

uint64_t _NSAttributedStringMarkdownParsingLocalizedStringOptions()
{
  if (qword_1EB1ED180 != -1) {
    dispatch_once(&qword_1EB1ED180, &__block_literal_global_57);
  }
  return qword_1EB1ED178;
}

id newAttributedStringFromMarkdown(uint64_t a1, uint64_t a2, NSAttributedStringMarkdownParsingOptions *a3, uint64_t a4, NSError **a5)
{
  uint64_t v10 = objc_alloc_init(_NSAttributedStringFromMarkdownCreatorConcrete);
  if (_NSAttributedStringFromMarkdownWithCreator(v10, a1, a2, a3, a4, a5)) {
    id v11 = [(_NSAttributedStringFromMarkdownCreatorConcrete *)v10 result];
  }
  else {
    id v11 = 0;
  }

  return v11;
}

void _NSInflect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (+[NSThread isMainThread]) {
    uint64_t v22 = _NSInflectionObserver;
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v35 = 0;
  uint64_t v36 = &v35;
  uint64_t v37 = 0x3052000000;
  uint64_t v38 = __Block_byref_object_copy__7;
  uint64_t v39 = __Block_byref_object_dispose__7;
  uint64_t v40 = 0;
  v34[0] = MEMORY[0x1E4F143A8];
  v34[1] = 3221225472;
  v34[2] = ___NSInflect_block_invoke;
  v34[3] = &unk_1E51F8678;
  v34[4] = &v35;
  id v23 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(a5 + 16))(a5);
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 3221225472;
  v32[2] = ___NSInflect_block_invoke_2;
  v32[3] = &unk_1E51F8740;
  char v33 = a6;
  v32[15] = a15;
  unsigned char v32[16] = v24;
  v32[4] = a2;
  v32[5] = v22;
  v32[10] = a13;
  v32[11] = a12;
  v32[6] = v23;
  v32[7] = a4;
  v32[8] = a3;
  v32[9] = a11;
  v32[12] = a10;
  v32[13] = v34;
  v32[14] = a14;
  (*(void (**)(uint64_t, void, uint64_t, void *))(a8 + 16))(a8, 0, v24, v32);
  uint64_t v25 = (*(uint64_t (**)(uint64_t))(a5 + 16))(a5);
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 3221225472;
  v31[2] = ___NSInflect_block_invoke_38;
  v31[3] = &unk_1E51F8768;
  v31[4] = v23;
  v31[5] = a2;
  v31[6] = a10;
  v31[7] = a17;
  v31[8] = a15;
  (*(void (**)(uint64_t, __CFString *, void, uint64_t, void *))(a7 + 16))(a7, @"NSInflectionAlternative", 0, v25, v31);
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(a5 + 16))(a5);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___NSInflect_block_invoke_2_40;
  v30[3] = &unk_1E51F8790;
  v30[4] = a1;
  v30[5] = a12;
  v30[6] = a13;
  v30[7] = a16;
  v30[8] = a15;
  (*(void (**)(uint64_t, void, uint64_t, void *))(a9 + 16))(a9, 0, v26, v30);

  _Block_object_dispose(&v35, 8);
}

void sub_181868AE0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_181868CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 72), 8);
  _Unwind_Resume(a1);
}

void sub_181868E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 72), 8);
  _Unwind_Resume(a1);
}

atomic_uint *_NSFileHandlePerformSourceContextRetain(atomic_uint *result)
{
  return result;
}

uint64_t URL.standardized.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v4 = *(void **)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    swift_retain();
    id v6 = v4;
    swift_retain();
    if (!_foundation_swift_url_feature_enabled())
    {
      id v16 = objc_msgSend(v6, sel__parameterString);
      if (v16)
      {
        int64_t v17 = v16;
        id v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
        CFArrayRef v20 = v19;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v21 = objc_msgSend(v6, sel_path)) != 0)
        {
          uint64_t v22 = v21;
          id v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
          id v73 = v6;
          uint64_t v25 = v24;

          *(void *)uint64_t v86 = v23;
          *(void *)&v86[8] = v25;
          swift_bridgeObjectRetain();
          v26._uint64_t countAndFlagsBits = 59;
          v26._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v26);
          id v6 = v73;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v27._uint64_t countAndFlagsBits = (uint64_t)v18;
          v27._unint64_t object = v20;
          String.append(_:)(v27);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          *(void *)uint64_t v86 = 59;
          *(void *)&v86[8] = 0xE100000000000000;
          v39._uint64_t countAndFlagsBits = (uint64_t)v18;
          v39._unint64_t object = v20;
          String.append(_:)(v39);
          swift_release();
          swift_release();
        }
        swift_bridgeObjectRelease();
        unint64_t v36 = *(void *)v86;
        unint64_t v38 = *(void *)&v86[8];
      }
      else
      {
        id v40 = objc_msgSend(v6, sel_path);
        if (v40)
        {
          uint64_t v41 = v40;
          unint64_t v36 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
          unint64_t v38 = v42;
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();

          unint64_t v36 = 0;
          unint64_t v38 = 0xE000000000000000;
        }
      }
      goto LABEL_31;
    }
    long long v72 = a1;
    id v73 = v6;
    *(void *)&v86[16] = v5;
    id v7 = v6;
    swift_retain();
    swift_retain();
    Swift::String v8 = URL.path(percentEncoded:)(1);
    uint64_t countAndFlagsBits = v8._countAndFlagsBits;
    *(Swift::String *)uint64_t v86 = v8;
    swift_bridgeObjectRetain();
    id v71 = v7;
    if (String.count.getter() <= 1)
    {
      unint64_t object = (unint64_t)v8._object;
    }
    else
    {
      unint64_t object = (unint64_t)v8._object;
      if ((specialized BidirectionalCollection.last.getter(v8._countAndFlagsBits, (unint64_t)v8._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = *(void *)v86;
        unint64_t object = *(void *)&v86[8];
      }
    }
    *(void *)&long long v81 = Set.init(minimumCapacity:)();
    uint64_t v29 = specialized Set._Variant.insert(_:)(v76, 0x2FuLL);
    uint64_t v30 = v81;
    uint64_t v31 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0) {
      uint64_t v31 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v31)
    {
      *(void *)&long long v81 = countAndFlagsBits;
      *((void *)&v81 + 1) = object;
      MEMORY[0x1F4188790](v29);
      uint64_t v69 = (uint64_t)&v81;
      uint64_t v70 = v30;
      swift_bridgeObjectRetain();
      long long v32 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)&v68, countAndFlagsBits, object);
      if (v33 == 1)
      {
        unint64_t v35 = *((void *)&v81 + 1);
        Swift::Int v34 = v81;
        swift_bridgeObjectRetain();
        unint64_t v36 = (unint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v34, v35, v30);
        unint64_t v38 = v37;
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v36 = (unint64_t)v32;
        unint64_t v38 = v33;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v43 = v71;
      if (!v38)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v36 = 0;
        unint64_t v38 = 0xE000000000000000;
        goto LABEL_30;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v36 = 0;
      unint64_t v38 = 0xE000000000000000;
      uint64_t v43 = v71;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_30:
    swift_release();
    swift_release();

    a1 = v72;
    id v6 = v73;
LABEL_31:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v44 = HIBYTE(v38) & 0xF;
    if ((v38 & 0x2000000000000000) == 0) {
      uint64_t v44 = v36 & 0xFFFFFFFFFFFFLL;
    }
    if (!v44)
    {
      *a1 = (uint64_t)v6;
      a1[1] = v3;
      a1[2] = v5;
      id v47 = v6;
      swift_retain();
      return swift_retain();
    }
    if (v3)
    {
      char v45 = *(unsigned char *)(v3 + 218);
      char v94 = 1;
      char v106 = 1;
      char v105 = 1;
      char v104 = 1;
      char v103 = 1;
      char v102 = 1;
      char v101 = 1;
      char v100 = 1;
      char v99 = 1;
      char v98 = 1;
      char v97 = 1;
      char v96 = v45;
      char v95 = 0;
      if (*(unsigned char *)(v3 + 168))
      {
        swift_retain();
        uint64_t v46 = MEMORY[0x185302C80](0, 0xE000000000000000);
      }
      else
      {
        swift_retain();
        uint64_t v46 = String.subscript.getter();
      }
      unint64_t v48 = MEMORY[0x185301F50](v46);
      unint64_t v50 = v49;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      unint64_t v51 = String._removingDotSegments.getter(v48, v50);
      unint64_t v53 = v52;
      swift_bridgeObjectRelease_n();
      char v106 = 0;
      char v100 = 0;
      if ((v53 & 0x1000000000000000) != 0)
      {
        id v73 = v6;
        uint64_t v60 = a1;
        *(void *)uint64_t v86 = v51;
        *(void *)&v86[8] = v53;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain_n();
        StringProtocol._ephemeralString.getter();
        uint64_t v61 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        char v62 = (unsigned __int16 *)objc_msgSend(v61, sel__fastCharacterContents);
        id v63 = v61;
        if (v62)
        {
          *(void *)uint64_t v86 = v51;
          *(void *)&v86[8] = v53;
          StringProtocol._ephemeralString.getter();
          uint64_t v64 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v65 = objc_msgSend(v64, sel_length);
          swift_unknownObjectRelease();
          char v66 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v62, (uint64_t)v65, 0x10u, 1);
        }
        else
        {
          char v66 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v51, v53, 0x10u, 1);
        }
        char v67 = v66;
        swift_bridgeObjectRelease_n();
        a1 = v60;
        id v6 = v73;
        if (v67)
        {
LABEL_45:
          swift_bridgeObjectRelease();
          *(void *)&long long v81 = v3;
          BYTE8(v81) = v106;
          BYTE9(v81) = v105;
          BYTE10(v81) = v104;
          BYTE11(v81) = v103;
          BYTE12(v81) = v102;
          BYTE13(v81) = v101;
          BYTE14(v81) = v100;
          HIBYTE(v81) = v99;
          v82[0] = v98;
          memset(&v82[8], 0, 64);
          uint64_t v83 = 0;
          LOBYTE(v84) = v97;
          *((void *)&v84 + 1) = v51;
          *(void *)&v85[0] = v53;
          *(_OWORD *)((char *)v85 + 8) = 0u;
          *(_OWORD *)((char *)&v85[1] + 8) = 0u;
          BYTE8(v85[2]) = v96;
          BYTE9(v85[2]) = v95;
          *(_OWORD *)uint64_t v86 = v81;
          *(_OWORD *)&v86[16] = *(_OWORD *)v82;
          long long v89 = *(_OWORD *)&v82[48];
          long long v90 = 0uLL;
          long long v87 = *(_OWORD *)&v82[16];
          long long v88 = *(_OWORD *)&v82[32];
          *(_OWORD *)((char *)v93 + 10) = *(_OWORD *)((char *)&v85[1] + 10);
          v93[0] = v85[1];
          long long v91 = v84;
          long long v92 = v85[0];
          v76[7] = v85[0];
          v77[0] = v85[1];
          *(_OWORD *)((char *)v77 + 10) = *(_OWORD *)((char *)&v85[1] + 10);
          v76[2] = *(_OWORD *)&v82[16];
          v76[3] = *(_OWORD *)&v82[32];
          v76[4] = *(_OWORD *)&v82[48];
          v76[5] = 0uLL;
          v76[6] = v84;
          v76[0] = v81;
          v76[1] = *(_OWORD *)v82;
          uint64_t v78 = (uint64_t)v6;
          uint64_t v79 = v3;
          uint64_t v80 = v5;
          outlined retain of URLComponents((uint64_t)v86);
          URL.baseURL.getter(v75);
          uint64_t v56 = (void *)v75[0];
          v74[0] = v75[0];
          v74[1] = v75[1];
          v74[2] = v75[2];
          URLComponents.url(relativeTo:)((uint64_t)v74, &v78);
          outlined consume of URL?(v56);
          uint64_t result = outlined release of URLComponents((uint64_t)&v81);
          uint64_t v57 = v78;
          if (v78)
          {
            uint64_t v59 = v79;
            uint64_t v58 = v80;
            uint64_t result = outlined release of URLComponents((uint64_t)&v81);
            *a1 = v57;
            a1[1] = v59;
            a1[2] = v58;
            return result;
          }
          goto LABEL_55;
        }
      }
      else
      {
        if ((v53 & 0x2000000000000000) != 0)
        {
          uint64_t v55 = HIBYTE(v53) & 0xF;
          *(void *)uint64_t v86 = v51;
          *(void *)&v86[8] = v53 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v54 = v86;
        }
        else if ((v51 & 0x1000000000000000) != 0)
        {
          uint64_t v54 = (char *)((v53 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v55 = v51 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v54 = (char *)_StringObject.sharedUTF8.getter();
        }
        if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v54, v55, 0x10u, 1)) {
          goto LABEL_45;
        }
      }
      swift_bridgeObjectRelease();
      LODWORD(v70) = 0;
      uint64_t v69 = 897;
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    __break(1u);
LABEL_55:
    __break(1u);
    return result;
  }
  id v11 = objc_msgSend(v4, sel_standardizedURL);
  if (v11)
  {
    int64_t v12 = v11;
    URL.init(reference:)(v11, v86);

    id v13 = *(id *)v86;
    URL.init(reference:)(v13, v86);

    swift_release();
    uint64_t result = swift_release();
    long long v15 = *(_OWORD *)&v86[8];
    *a1 = *(void *)v86;
    *(_OWORD *)(a1 + 1) = v15;
  }
  else
  {
    *a1 = (uint64_t)v4;
    a1[1] = v3;
    a1[2] = v5;
    swift_retain();
    id v28 = v4;
    return swift_retain();
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance LocalizedStringResource@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return LocalizedStringResource.init(from:)(a1, a2);
}

uint64_t URL.user.getter(uint64_t (*a1)(uint64_t), SEL *a2)
{
  uint64_t v5 = *v2;
  if (_foundation_swift_url_feature_enabled()) {
    return a1(1);
  }
  id v7 = [v5 *a2];
  if (!v7) {
    return 0;
  }
  Swift::String v8 = v7;
  id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

  return (uint64_t)v6;
}

id specialized static NSURLComponents._componentsWith(url:resolvingAgainstBaseURL:)(uint64_t a1, char a2)
{
  *(void *)id v13 = *(void *)a1;
  *(_OWORD *)&v13[8] = *(_OWORD *)(a1 + 8);
  URLComponents.init(url:resolvingAgainstBaseURL:)((uint64_t)v13, a2, (uint64_t)v11);
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v12, &demangling cache variable for type metadata for URLComponents?);
  outlined init with take of LocalePreferences?((uint64_t)v12, (uint64_t)v13, &demangling cache variable for type metadata for URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)v13) == 1) {
    return 0;
  }
  uint64_t v3 = (objc_class *)type metadata accessor for _NSSwiftURLComponents();
  uint64_t v4 = (char *)objc_allocWithZone(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<URLComponents, os_unfair_lock_s>);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 172) = 0;
  long long v6 = v19;
  *(_OWORD *)(v5 + 112) = v18;
  *(_OWORD *)(v5 + 128) = v6;
  *(_OWORD *)(v5 + 144) = v20[0];
  *(_OWORD *)(v5 + 154) = *(_OWORD *)((char *)v20 + 10);
  long long v7 = v15;
  *(_OWORD *)(v5 + 48) = v14;
  *(_OWORD *)(v5 + 64) = v7;
  long long v8 = v17;
  *(_OWORD *)(v5 + 80) = v16;
  *(_OWORD *)(v5 + 96) = v8;
  long long v9 = *(_OWORD *)&v13[16];
  *(_OWORD *)(v5 + 16) = *(_OWORD *)v13;
  *(_OWORD *)(v5 + 32) = v9;
  *(void *)&v4[OBJC_IVAR____NSSwiftURLComponents_lock] = v5;
  v10.receiver = v4;
  v10.super_class = v3;
  return objc_msgSendSuper2(&v10, sel_init);
}

uint64_t URLComponents.init(url:resolvingAgainstBaseURL:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  if (a2)
  {
    *(void *)&long long v18 = *(void *)a1;
    *((void *)&v18 + 1) = v4;
    *(void *)&long long v19 = v6;
    uint64_t v7 = URL.absoluteString.getter();
    unint64_t v9 = v8;
  }
  else
  {
    swift_retain();
    id v10 = v5;
    swift_retain();
    uint64_t result = _foundation_swift_url_feature_enabled();
    if (result)
    {
      if (!v4)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = *(void *)(v4 + 16);
      unint64_t v9 = *(void *)(v4 + 24);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
    }
    else
    {
      id v12 = objc_msgSend(v10, sel_relativeString);
      uint64_t v7 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      unint64_t v9 = v13;
      swift_release();
      swift_release();
    }
  }
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v7, v9, 1, (uint64_t)v17);
  outlined init with take of LocalePreferences?((uint64_t)v17, (uint64_t)&v18, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v18) == 1)
  {
    _s10Foundation13URLComponentsV01_B0VSgWOi0_((uint64_t)v15);
  }
  else
  {
    v15[6] = v24;
    v15[7] = v25;
    v16[0] = v26[0];
    *(_OWORD *)((char *)v16 + 10) = *(_OWORD *)((char *)v26 + 10);
    void v15[2] = v20;
    _OWORD v15[3] = v21;
    v15[4] = v22;
    v15[5] = v23;
    v15[0] = v18;
    v15[1] = v19;
    destructiveProjectEnumData for PredicateCodableError(v15, v14);
  }
  return outlined init with take of LocalePreferences?((uint64_t)v15, a3, &demangling cache variable for type metadata for URLComponents?);
}

uint64_t URL.absoluteString.getter()
{
  uint64_t v7 = *(void **)v0;
  uint64_t v6 = *(void *)(v0 + 8);
  unint64_t v8 = *(unsigned char **)(v0 + 16);
  if (!_foundation_swift_url_feature_enabled())
  {
    id v10 = objc_msgSend(v7, sel_absoluteString);
    if (!v10) {
      return 0;
    }
    id v11 = v10;
    uint64_t v12 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    goto LABEL_12;
  }
  if (!v8)
  {
    swift_retain();
    id v11 = v7;
    if (!_foundation_swift_url_feature_enabled())
    {
      id v14 = objc_msgSend(v11, sel_relativeString);
      uint64_t v12 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      swift_release();

      return v12;
    }
    if (!v6)
    {
      __break(1u);
LABEL_233:
      __break(1u);
      goto LABEL_234;
    }
    uint64_t v12 = *(void *)(v6 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_12:

    return v12;
  }
  if (!v6)
  {
    __break(1u);
    goto LABEL_227;
  }
  uint64_t v5 = &v211;
  char v9 = *(unsigned char *)(v6 + 218);
  unint64_t v4 = (unint64_t)&v208;
  char v207 = 1;
  *(void *)&long long v208 = v6;
  *((void *)&v208 + 1) = 0x101010101010101;
  v209[0] = 1;
  memset(&v209[8], 0, 72);
  v210[0] = 1;
  memset(&v210[8], 0, 48);
  v210[56] = v9;
  v210[57] = 0;
  if ((*(unsigned char *)(v6 + 48) & 1) == 0)
  {
    swift_retain();
    swift_retain();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    if (*(unsigned char *)(v6 + 168)) {
      uint64_t v13 = MEMORY[0x185302C80](0, 0xE000000000000000);
    }
    else {
      uint64_t v13 = String.subscript.getter();
    }
    unint64_t v27 = MEMORY[0x185301F50](v13);
    unint64_t v29 = v28;
    swift_bridgeObjectRelease();
    unint64_t v30 = String._removingDotSegments.getter(v27, v29);
    unint64_t v32 = v31;
    swift_bridgeObjectRelease();
    BYTE8(v208) = 0;
    BYTE14(v208) = 0;
    if ((v32 & 0x1000000000000000) != 0)
    {
      *(void *)&long long v211 = v30;
      *((void *)&v211 + 1) = v32;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      uint64_t v77 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v78 = (unsigned __int16 *)objc_msgSend(v77, sel__fastCharacterContents);
      id v79 = v77;
      if (v78)
      {
        *(void *)&long long v211 = v30;
        *((void *)&v211 + 1) = v32;
        StringProtocol._ephemeralString.getter();
        uint64_t v80 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v81 = objc_msgSend(v80, sel_length);
        swift_unknownObjectRelease();
        char v82 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v78, (uint64_t)v81, 0x10u, 1);
      }
      else
      {
        char v82 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v30, v32, 0x10u, 1);
      }
      char v83 = v82;
      swift_bridgeObjectRelease_n();
      if ((v83 & 1) == 0) {
        goto LABEL_222;
      }
    }
    else if ((v32 & 0x2000000000000000) != 0)
    {
      *(void *)&long long v211 = v30;
      *((void *)&v211 + 1) = v32 & 0xFFFFFFFFFFFFFFLL;
      if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)((char *)&v211, HIBYTE(v32) & 0xF, 0x10u, 1))goto LABEL_222; {
    }
      }
    else
    {
      if ((v30 & 0x1000000000000000) != 0)
      {
        unint64_t v33 = (char *)((v32 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v34 = v30 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        unint64_t v33 = (char *)_StringObject.sharedUTF8.getter();
      }
      if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v33, v34, 0x10u, 1)) {
        goto LABEL_222;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v26 = v208;
    long long v203 = v208;
    LOBYTE(v204[0]) = v209[0];
    *(_OWORD *)((char *)v204 + 8) = *(_OWORD *)&v209[8];
    *(_OWORD *)((char *)&v204[1] + 8) = *(_OWORD *)&v209[24];
    *(_OWORD *)((char *)&v204[2] + 8) = *(_OWORD *)&v209[40];
    *(_OWORD *)((char *)&v204[3] + 8) = *(_OWORD *)&v209[56];
    *((void *)&v204[4] + 1) = *(void *)&v209[72];
    LOBYTE(v205) = v210[0];
    *((void *)&v205 + 1) = v30;
    *(void *)&v206[0] = v32;
    *(_OWORD *)((char *)v206 + 8) = *(_OWORD *)&v210[24];
    *(_OWORD *)((char *)&v206[1] + 8) = *(_OWORD *)&v210[40];
    WORD4(v206[2]) = *(_WORD *)&v210[56];
    long long v213 = v204[1];
    long long v214 = v204[2];
    long long v211 = v208;
    long long v212 = v204[0];
    *(_OWORD *)((char *)v219 + 10) = *(_OWORD *)((char *)&v206[1] + 10);
    long long v218 = v206[0];
    v219[0] = v206[1];
    long long v216 = v204[4];
    long long v217 = v205;
    long long v215 = v204[3];
    if (BYTE8(v208))
    {
      if ((void)v208) {
        goto LABEL_41;
      }
    }
    else
    {
      outlined retain of URLComponents((uint64_t)&v203);
      uint64_t v12 = URLComponents._URLComponents.computedString.getter();
      uint64_t v36 = v35;
      outlined release of URLComponents((uint64_t)&v203);
      if (v36) {
        goto LABEL_46;
      }
    }
    id v37 = v7;
    swift_retain();
    swift_retain();
    if (_foundation_swift_url_feature_enabled())
    {
LABEL_48:
      uint64_t v12 = *(void *)(v6 + 16);
      swift_bridgeObjectRetain();
      swift_release();

      swift_release_n();
      goto LABEL_51;
    }
LABEL_49:
    id v40 = objc_msgSend(v37, sel_relativeString);
    goto LABEL_50;
  }
  unint64_t v1 = 0;
  if (v8[48] != 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v15 = String.subscript.getter();
    uint64_t v16 = MEMORY[0x185301F50](v15);
    long long v18 = v17;
    swift_bridgeObjectRelease();
    v19.value._uint64_t countAndFlagsBits = v16;
    v19.value._unint64_t object = v18;
    URLComponents._URLComponents.setScheme(_:)(v19);
    if (!v1)
    {
      swift_bridgeObjectRelease();
      unint64_t v4 = (unint64_t)&v208;
      goto LABEL_19;
    }
LABEL_234:

    swift_bridgeObjectRelease();
    int v199 = 0;
    uint64_t i = 714;
    goto LABEL_235;
  }
  swift_retain();
  swift_retain();
LABEL_19:
  if (*(unsigned char *)(v6 + 72) != 1
    || *(unsigned char *)(v6 + 96) != 1
    || *(unsigned char *)(v6 + 120) != 1
    || (*(unsigned char *)(v6 + 144) & 1) == 0)
  {
    long long v205 = *(_OWORD *)v210;
    v206[0] = *(_OWORD *)&v210[16];
    v206[1] = *(_OWORD *)&v210[32];
    *(_OWORD *)((char *)&v206[1] + 10) = *(_OWORD *)&v210[42];
    v204[1] = *(_OWORD *)&v209[16];
    v204[2] = *(_OWORD *)&v209[32];
    v204[3] = *(_OWORD *)&v209[48];
    v204[4] = *(_OWORD *)&v209[64];
    long long v203 = v208;
    v204[0] = *(_OWORD *)v209;
    long long v217 = *(_OWORD *)v210;
    long long v218 = *(_OWORD *)&v210[16];
    v219[0] = *(_OWORD *)&v210[32];
    *(_OWORD *)((char *)v219 + 10) = *(_OWORD *)&v210[42];
    long long v213 = *(_OWORD *)&v209[16];
    long long v214 = *(_OWORD *)&v209[32];
    long long v215 = *(_OWORD *)&v209[48];
    long long v216 = *(_OWORD *)&v209[64];
    long long v211 = v208;
    long long v212 = *(_OWORD *)v209;
    if (BYTE8(v208) != 1)
    {
      outlined retain of URLComponents((uint64_t)&v203);
      uint64_t v12 = URLComponents._URLComponents.computedString.getter();
      uint64_t v39 = v38;
      outlined release of URLComponents((uint64_t)&v203);
      if (v39) {
        goto LABEL_46;
      }
LABEL_47:
      id v37 = v7;
      swift_retain();
      swift_retain();
      if (_foundation_swift_url_feature_enabled()) {
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    uint64_t v26 = v203;
    if (!(void)v203) {
      goto LABEL_47;
    }
LABEL_41:
    uint64_t v12 = *(void *)(v26 + 16);
    swift_bridgeObjectRetain();
LABEL_46:
    swift_release();
    outlined release of URLComponents((uint64_t)&v203);
    return v12;
  }
  if (v8[72]) {
    goto LABEL_56;
  }
  uint64_t v20 = String.subscript.getter();
  unint64_t v21 = MEMORY[0x185301F50](v20);
  unint64_t v23 = v22;
  swift_bridgeObjectRelease();
  BYTE8(v208) = 0;
  BYTE10(v208) = 0;
  if ((v23 & 0x1000000000000000) != 0)
  {
    *(void *)&long long v211 = v21;
    *((void *)&v211 + 1) = v23;
    unint64_t v84 = lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    v202 = (long long *)v84;
    StringProtocol._ephemeralString.getter();
    id v85 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v86 = (unsigned __int16 *)objc_msgSend(v85, sel__fastCharacterContents);
    id v87 = v85;
    if (v86)
    {
      *(void *)&long long v211 = v21;
      *((void *)&v211 + 1) = v23;
      StringProtocol._ephemeralString.getter();
      long long v88 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v89 = objc_msgSend(v88, sel_length);
      swift_unknownObjectRelease();
      char v90 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v86, (uint64_t)v89, 2u, 1);
      goto LABEL_201;
    }
    goto LABEL_200;
  }
  if ((v23 & 0x2000000000000000) != 0)
  {
    uint64_t v25 = HIBYTE(v23) & 0xF;
    *(void *)&long long v211 = v21;
    *((void *)&v211 + 1) = v23 & 0xFFFFFFFFFFFFFFLL;
    long long v24 = (char *)&v211;
  }
  else if ((v21 & 0x1000000000000000) != 0)
  {
    long long v24 = (char *)((v23 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v25 = v21 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    long long v24 = (char *)_StringObject.sharedUTF8.getter();
  }
  if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v24, v25, 2u, 1))
  {
LABEL_202:
    swift_bridgeObjectRelease();
    int v199 = 0;
    uint64_t i = 810;
    goto LABEL_235;
  }
  while (1)
  {
    swift_bridgeObjectRelease();
    *(void *)&v209[24] = v21;
    *(void *)&v209[32] = v23;
LABEL_56:
    if ((v8[96] & 1) == 0)
    {
      uint64_t v43 = String.subscript.getter();
      unint64_t v44 = MEMORY[0x185301F50](v43);
      unint64_t v46 = v45;
      swift_bridgeObjectRelease();
      BYTE8(v208) = 0;
      BYTE11(v208) = 0;
      if ((v46 & 0x1000000000000000) != 0)
      {
        *(void *)&long long v211 = v44;
        *((void *)&v211 + 1) = v46;
        unint64_t v91 = lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        v202 = (long long *)v91;
        StringProtocol._ephemeralString.getter();
        long long v92 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v93 = (unsigned __int16 *)objc_msgSend(v92, sel__fastCharacterContents);
        id v94 = v92;
        if (v93)
        {
          *(void *)&long long v211 = v44;
          *((void *)&v211 + 1) = v46;
          StringProtocol._ephemeralString.getter();
          char v95 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v96 = objc_msgSend(v95, sel_length);
          swift_unknownObjectRelease();
          char v97 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v93, (uint64_t)v96, 2u, 1);
        }
        else
        {
          char v97 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v44, v46, 2u, 1);
        }
        char v185 = v97;
        swift_bridgeObjectRelease();
        uint64_t v5 = &v211;
        unint64_t v4 = (unint64_t)&v208;
        if ((v185 & 1) == 0)
        {
LABEL_205:
          swift_bridgeObjectRelease();
          int v199 = 0;
          uint64_t i = 831;
          goto LABEL_235;
        }
      }
      else
      {
        if ((v46 & 0x2000000000000000) != 0)
        {
          uint64_t v48 = HIBYTE(v46) & 0xF;
          *(void *)&long long v211 = v44;
          *((void *)&v211 + 1) = v46 & 0xFFFFFFFFFFFFFFLL;
          id v47 = (char *)&v211;
        }
        else if ((v44 & 0x1000000000000000) != 0)
        {
          id v47 = (char *)((v46 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v48 = v44 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          id v47 = (char *)_StringObject.sharedUTF8.getter();
        }
        if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v47, v48, 2u, 1)) {
          goto LABEL_205;
        }
      }
      swift_bridgeObjectRelease();
      *(void *)&v209[40] = v44;
      *(void *)&v209[48] = v46;
    }
    if (v8[120]) {
      goto LABEL_92;
    }
    uint64_t v49 = String.subscript.getter();
    unint64_t v50 = MEMORY[0x185301F50](v49);
    unint64_t v23 = v51;
    swift_bridgeObjectRelease();
    BYTE8(v208) = 0;
    BYTE12(v208) = 0;
    *(_WORD *)&v210[56] = 0;
    unint64_t v52 = specialized Collection.first.getter(v50, v23);
    if ((v52 & 0x1FF) != 0x5B) {
      goto LABEL_85;
    }
    if ((v23 & 0x1000000000000000) != 0)
    {
      Swift::Int v183 = String.UTF8View._foreignCount()();
      if (__OFSUB__(v183, 1)) {
        goto LABEL_233;
      }
      uint64_t v54 = (v50 >> 59) & 1;
      unint64_t v52 = MEMORY[0x185302230](15, v183 - 1, v50, v23);
LABEL_71:
      if ((v52 & 0xC) != 4 << v54) {
        goto LABEL_72;
      }
      goto LABEL_198;
    }
    uint64_t v53 = HIBYTE(v23) & 0xF;
    if ((v23 & 0x2000000000000000) == 0) {
      uint64_t v53 = v50 & 0xFFFFFFFFFFFFLL;
    }
    if (v53)
    {
      unint64_t v52 = (v53 << 16) - 65532;
      LOBYTE(v54) = 1;
      goto LABEL_71;
    }
    __break(1u);
LABEL_198:
    unint64_t v52 = _StringGuts._slowEnsureMatchingEncoding(_:)(v52, v50, v23);
LABEL_72:
    unint64_t v55 = HIBYTE(v23) & 0xF;
    if ((v23 & 0x2000000000000000) == 0) {
      unint64_t v55 = v50 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v21 = v52 >> 16;
    if (v52 >> 16 < v55) {
      break;
    }
    __break(1u);
LABEL_200:
    char v90 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v21, v23, 2u, 1);
LABEL_201:
    char v184 = v90;
    swift_bridgeObjectRelease();
    uint64_t v5 = &v211;
    unint64_t v4 = (unint64_t)&v208;
    if ((v184 & 1) == 0) {
      goto LABEL_202;
    }
  }
  if ((v23 & 0x1000000000000000) != 0)
  {
    char v57 = String.UTF8View._foreignSubscript(position:)();
  }
  else if ((v23 & 0x2000000000000000) != 0)
  {
    *(void *)&long long v211 = v50;
    *((void *)&v211 + 1) = v23 & 0xFFFFFFFFFFFFFFLL;
    char v57 = *((unsigned char *)&v211 + v21);
  }
  else
  {
    if ((v50 & 0x1000000000000000) != 0) {
      uint64_t v56 = (v23 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v56 = _StringObject.sharedUTF8.getter();
    }
    char v57 = *(unsigned char *)(v56 + v21);
  }
  if (v57 != 93)
  {
LABEL_85:
    if ((v23 & 0x1000000000000000) != 0)
    {
      v202 = (long long *)v50;
      *(void *)&long long v211 = v50;
      *((void *)&v211 + 1) = v23;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      v165 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v166 = (unsigned __int16 *)objc_msgSend(v165, sel__fastCharacterContents);
      id v167 = v165;
      if (v166)
      {
        *(void *)&long long v211 = v202;
        *((void *)&v211 + 1) = v23;
        StringProtocol._ephemeralString.getter();
        unint64_t v50 = (unint64_t)v202;
        v168 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v169 = objc_msgSend(v168, sel_length);
        swift_unknownObjectRelease();
        char v170 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v166, (uint64_t)v169, 4u, 1);
      }
      else
      {
        unint64_t v50 = (unint64_t)v202;
        char v170 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)((unint64_t)v202, v23, 4u, 1);
      }
      char v187 = v170;
      swift_bridgeObjectRelease_n();
      uint64_t v5 = &v211;
      if (v187) {
        goto LABEL_91;
      }
    }
    else
    {
      if ((v23 & 0x2000000000000000) != 0)
      {
        uint64_t v60 = HIBYTE(v23) & 0xF;
        *(void *)&long long v211 = v50;
        *((void *)&v211 + 1) = v23 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v59 = (char *)&v211;
      }
      else if ((v50 & 0x1000000000000000) != 0)
      {
        uint64_t v59 = (char *)((v23 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v60 = v50 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v59 = (char *)_StringObject.sharedUTF8.getter();
      }
      if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v59, v60, 4u, 1)) {
        goto LABEL_91;
      }
    }
LABEL_84:
    swift_bridgeObjectRelease();
    int v199 = 0;
    uint64_t i = 876;
    goto LABEL_235;
  }
  swift_bridgeObjectRetain();
  char v58 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v50, v23);
  swift_bridgeObjectRelease();
  if ((v58 & 1) == 0) {
    goto LABEL_84;
  }
LABEL_91:
  swift_bridgeObjectRetain();
  uint64_t v61 = swift_bridgeObjectRelease();
  *(void *)&v209[56] = v50;
  *(void *)&v209[64] = v23;
  LOBYTE(v211) = 37;
  MEMORY[0x1F4188790](v61);
  uint64_t i = (uint64_t)&v211;
  swift_bridgeObjectRetain();
  char v62 = specialized Sequence.contains(where:)((uint64_t (*)(void *))_sSTsSQ7ElementRpzrlE8containsySbABFSbABXEfU_SS8UTF8ViewV_TG5TA_0, (uint64_t)v197, v50, v23);
  swift_bridgeObjectRelease_n();
  v210[56] = v62 & 1;
  unint64_t v4 = (unint64_t)&v208;
LABEL_92:
  if (v8[144]) {
    goto LABEL_100;
  }
  unint64_t v63 = String.subscript.getter();
  uint64_t v67 = v66;
  if ((v63 ^ v64) >> 14)
  {
    uint64_t v68 = v63;
    uint64_t v69 = v64;
    uint64_t v70 = v65;
    v202 = (long long *)_ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v63, v64, v65, v66, 10);
    if ((v71 & 0x100) != 0)
    {
      uint64_t v73 = specialized _parseInteger<A, B>(ascii:radix:)(v68, v69, v70, v67, 10);
      char v75 = v74;
      swift_bridgeObjectRelease();
      uint64_t v5 = &v211;
      unint64_t v4 = (unint64_t)&v208;
      if ((v75 & 1) == 0)
      {
LABEL_98:
        BYTE8(v208) = 0;
        BYTE13(v208) = 0;
        if (v73 < 0) {
          goto LABEL_236;
        }
        *(void *)&v209[72] = v73;
        v210[0] = 0;
      }
    }
    else
    {
      char v72 = v71;
      swift_bridgeObjectRelease();
      uint64_t v5 = &v211;
      unint64_t v4 = (unint64_t)&v208;
      if ((v72 & 1) == 0)
      {
        uint64_t v73 = (uint64_t)v202;
        goto LABEL_98;
      }
    }
LABEL_100:
    if (*(unsigned char *)(v6 + 168))
    {
LABEL_101:
      uint64_t v76 = MEMORY[0x185302C80](0, 0xE000000000000000);
      goto LABEL_114;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v4 = (unint64_t)&v208;
    if (*(unsigned char *)(v6 + 168)) {
      goto LABEL_101;
    }
  }
  uint64_t v76 = String.subscript.getter();
LABEL_114:
  uint64_t v98 = MEMORY[0x185301F50](v76);
  unint64_t v100 = v99;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v101 = HIBYTE(v100) & 0xF;
  if ((v100 & 0x2000000000000000) == 0) {
    uint64_t v101 = v98 & 0xFFFFFFFFFFFFLL;
  }
  if (!v101)
  {
    uint64_t v3 = &v203;
    if (v8[168]) {
      uint64_t v103 = MEMORY[0x185302C80](0, 0xE000000000000000);
    }
    else {
      uint64_t v103 = String.subscript.getter();
    }
    unint64_t v111 = MEMORY[0x185301F50](v103);
    unint64_t v113 = v112;
    swift_bridgeObjectRelease();
    BYTE8(v208) = 0;
    BYTE14(v208) = 0;
    if ((v113 & 0x1000000000000000) != 0)
    {
      *(void *)&long long v211 = v111;
      *((void *)&v211 + 1) = v113;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      v159 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v160 = (unsigned __int16 *)objc_msgSend(v159, sel__fastCharacterContents);
      id v161 = v159;
      if (v160)
      {
        *(void *)&long long v211 = v111;
        *((void *)&v211 + 1) = v113;
        StringProtocol._ephemeralString.getter();
        v162 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v163 = objc_msgSend(v162, sel_length);
        swift_unknownObjectRelease();
        char v164 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v160, (uint64_t)v163, 0x10u, 1);
      }
      else
      {
        char v164 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v111, v113, 0x10u, 1);
      }
      char v186 = v164;
      swift_bridgeObjectRelease_n();
      uint64_t v5 = &v211;
      unint64_t v4 = (unint64_t)&v208;
      uint64_t v3 = &v203;
      if ((v186 & 1) == 0) {
        goto LABEL_222;
      }
    }
    else
    {
      if ((v113 & 0x2000000000000000) != 0)
      {
        uint64_t v115 = HIBYTE(v113) & 0xF;
        *(void *)&long long v211 = v111;
        *((void *)&v211 + 1) = v113 & 0xFFFFFFFFFFFFFFLL;
        Swift::String v114 = (char *)&v211;
      }
      else if ((v111 & 0x1000000000000000) != 0)
      {
        Swift::String v114 = (char *)((v113 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v115 = v111 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        Swift::String v114 = (char *)_StringObject.sharedUTF8.getter();
      }
      if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v114, v115, 0x10u, 1)) {
        goto LABEL_222;
      }
    }
    swift_bridgeObjectRelease();
    *(void *)&v210[8] = v111;
    *(void *)&v210[16] = v113;
    if ((*(unsigned char *)(v6 + 192) & 1) == 0)
    {
      String.subscript.getter();
      swift_bridgeObjectRelease();
      goto LABEL_179;
    }
    if (v8[192]) {
      goto LABEL_179;
    }
    uint64_t v116 = String.subscript.getter();
    unint64_t v2 = MEMORY[0x185301F50](v116);
    unint64_t v1 = v117;
    swift_bridgeObjectRelease();
    BYTE8(v208) = 0;
    HIBYTE(v208) = 0;
    if ((v1 & 0x1000000000000000) != 0)
    {
      *(void *)&long long v211 = v2;
      *((void *)&v211 + 1) = v1;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      v190 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v191 = (unsigned __int16 *)objc_msgSend(v190, sel__fastCharacterContents);
      id v192 = v190;
      if (v191)
      {
        *(void *)&long long v211 = v2;
        *((void *)&v211 + 1) = v1;
        StringProtocol._ephemeralString.getter();
        v193 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v194 = objc_msgSend(v193, sel_length);
        swift_unknownObjectRelease();
        char v195 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v191, (uint64_t)v194, 0x40u, 1);
      }
      else
      {
        char v195 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v2, v1, 0x40u, 1);
      }
      char v196 = v195;
      swift_bridgeObjectRelease();
      uint64_t v5 = &v211;
      unint64_t v4 = (unint64_t)&v208;
      uint64_t v3 = &v203;
      if (v196) {
        goto LABEL_178;
      }
      goto LABEL_231;
    }
    if ((v1 & 0x2000000000000000) != 0)
    {
      uint64_t v119 = HIBYTE(v1) & 0xF;
      *(void *)&long long v211 = v2;
      *((void *)&v211 + 1) = v1 & 0xFFFFFFFFFFFFFFLL;
      os_log_type_t v118 = (char *)&v211;
      goto LABEL_177;
    }
    if ((v2 & 0x1000000000000000) != 0)
    {
      os_log_type_t v118 = (char *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v119 = v2 & 0xFFFFFFFFFFFFLL;
      goto LABEL_177;
    }
LABEL_228:
    os_log_type_t v118 = (char *)_StringObject.sharedUTF8.getter();
LABEL_177:
    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v118, v119, 0x40u, 1))
    {
LABEL_178:
      swift_bridgeObjectRelease();
      *(void *)&v210[24] = v2;
      *(void *)&v210[32] = v1;
      goto LABEL_179;
    }
LABEL_231:
    swift_bridgeObjectRelease();
    int v199 = 0;
    uint64_t i = 918;
    goto LABEL_235;
  }
  if (*(unsigned char *)(v6 + 168)) {
    uint64_t v102 = MEMORY[0x185302C80](0, 0xE000000000000000);
  }
  else {
    uint64_t v102 = String.subscript.getter();
  }
  uint64_t v104 = MEMORY[0x185301F50](v102);
  unint64_t v106 = v105;
  swift_bridgeObjectRelease();
  __int16 v107 = specialized Collection.first.getter(v104, v106);
  swift_bridgeObjectRelease();
  if ((v107 & 0x1FF) == 0x2F)
  {
    if (*(unsigned char *)(v6 + 168)) {
      uint64_t v108 = MEMORY[0x185302C80](0, 0xE000000000000000);
    }
    else {
      uint64_t v108 = String.subscript.getter();
    }
    unint64_t v120 = MEMORY[0x185301F50](v108);
    unint64_t v122 = v121;
    swift_bridgeObjectRelease();
    unint64_t v2 = String._removingDotSegments.getter(v120, v122);
    unint64_t v1 = v123;
    swift_bridgeObjectRelease();
    BYTE8(v208) = 0;
    BYTE14(v208) = 0;
    if ((v1 & 0x1000000000000000) != 0)
    {
      *(void *)&long long v211 = v2;
      *((void *)&v211 + 1) = v1;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      v171 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v172 = (unsigned __int16 *)objc_msgSend(v171, sel__fastCharacterContents);
      id v173 = v171;
      if (v172)
      {
        *(void *)&long long v211 = v2;
        *((void *)&v211 + 1) = v1;
        StringProtocol._ephemeralString.getter();
        v174 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v175 = objc_msgSend(v174, sel_length);
        swift_unknownObjectRelease();
        char v176 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v172, (uint64_t)v175, 0x10u, 1);
      }
      else
      {
        char v176 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v2, v1, 0x10u, 1);
      }
      char v188 = v176;
      swift_bridgeObjectRelease_n();
      uint64_t v5 = &v211;
      unint64_t v4 = (unint64_t)&v208;
      uint64_t v3 = &v203;
      if (v188) {
        goto LABEL_162;
      }
    }
    else
    {
      uint64_t v3 = &v203;
      if ((v1 & 0x2000000000000000) != 0)
      {
        uint64_t v125 = HIBYTE(v1) & 0xF;
        *(void *)&long long v211 = v2;
        *((void *)&v211 + 1) = v1 & 0xFFFFFFFFFFFFFFLL;
        int v124 = (char *)&v211;
      }
      else
      {
        if ((v2 & 0x1000000000000000) != 0)
        {
          int v124 = (char *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v125 = v2 & 0xFFFFFFFFFFFFLL;
          goto LABEL_161;
        }
LABEL_209:
        int v124 = (char *)_StringObject.sharedUTF8.getter();
      }
LABEL_161:
      if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v124, v125, 0x10u, 1))
      {
LABEL_162:
        swift_bridgeObjectRelease();
        *(void *)&v210[8] = v2;
        *(void *)&v210[16] = v1;
        goto LABEL_179;
      }
    }
LABEL_222:
    swift_bridgeObjectRelease();
    int v199 = 0;
    for (uint64_t i = 897; ; uint64_t i = 764)
    {
LABEL_235:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_236:
      int v199 = 0;
    }
  }
  if (*(unsigned char *)(v6 + 168))
  {
    id v109 = v7;
    swift_retain();
    swift_retain();
    uint64_t v110 = MEMORY[0x185302C80](0, 0xE000000000000000);
  }
  else
  {
    unint64_t v4 = *(void *)(v6 + 24);
    id v126 = v7;
    swift_retain();
    swift_retain();
    uint64_t v110 = String.subscript.getter();
  }
  uint64_t v3 = (long long *)MEMORY[0x185301F50](v110);
  unint64_t v2 = v127;
  swift_bridgeObjectRelease();
  if ((specialized Collection.first.getter((uint64_t)v3, v2) & 0x1FF) == 0x2F)
  {
    __break(1u);
    goto LABEL_209;
  }
  if (v8[168])
  {
    swift_retain();
    uint64_t v128 = MEMORY[0x185302C80](0, 0xE000000000000000);
  }
  else
  {
    v202 = (long long *)v2;
    swift_retain();
    unint64_t v2 = (unint64_t)v202;
    uint64_t v128 = String.subscript.getter();
  }
  unint64_t v129 = MEMORY[0x185301F50](v128);
  unint64_t v4 = v130;
  swift_bridgeObjectRelease();
  if (v8[72] != 1 || (v8[96] & 1) == 0 || v8[120] != 1 || (v8[144] & 1) == 0)
  {
    uint64_t v131 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000) == 0) {
      uint64_t v131 = v129 & 0xFFFFFFFFFFFFLL;
    }
    if (!v131)
    {
      swift_bridgeObjectRelease();
      *(void *)&long long v211 = 47;
      *((void *)&v211 + 1) = 0xE100000000000000;
      v133._uint64_t countAndFlagsBits = (uint64_t)v3;
      v133._unint64_t object = (void *)v2;
      String.append(_:)(v133);
      swift_release();

      swift_bridgeObjectRelease();
      swift_release_n();
      unint64_t v2 = *((void *)&v211 + 1);
      uint64_t v3 = (long long *)v211;
      goto LABEL_167;
    }
  }
  uint64_t v132 = specialized Collection.first.getter((uint64_t)v3, v2);
  if ((v132 & 0x1FF) == 0x2F)
  {
    swift_release();

    swift_release_n();
    swift_bridgeObjectRelease();
    goto LABEL_167;
  }
  v202 = v3;
  LOBYTE(v211) = 47;
  MEMORY[0x1F4188790](v132);
  uint64_t i = (uint64_t)&v211;
  swift_bridgeObjectRetain();
  specialized BidirectionalCollection.lastIndex(where:)((unint64_t)_sSTsSQ7ElementRpzrlE8containsySbABFSbABXEfU_SS8UTF8ViewV_TG5TA_0, (uint64_t)v197, v129, v4);
  if (v134)
  {
    swift_release();

    swift_release_n();
    swift_bridgeObjectRelease_n();
    uint64_t v5 = &v211;
    uint64_t v3 = v202;
    goto LABEL_168;
  }
  swift_bridgeObjectRetain();
  String.index(after:)();
  uint64_t v5 = (long long *)String.subscript.getter();
  unint64_t v1 = v135;
  uint64_t v137 = v136;
  uint64_t v3 = v138;
  swift_bridgeObjectRelease();
  *(void *)&long long v203 = 0;
  *((void *)&v203 + 1) = 0xE000000000000000;
  uint64_t v139 = String.count.getter();
  *((void *)&v200 + 1) = v3;
  uint64_t v201 = v139;
  *(void *)&long long v200 = v137;
  uint64_t v140 = Substring.distance(from:to:)();
  BOOL v141 = __OFADD__(v201, v140);
  uint64_t v142 = v201 + v140;
  if (v141)
  {
LABEL_227:
    __break(1u);
    goto LABEL_228;
  }
  MEMORY[0x185301FA0](v142);
  *(void *)&long long v211 = v5;
  *((void *)&v211 + 1) = v1;
  long long v212 = v200;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  String.append<A>(contentsOf:)();
  *(void *)&long long v211 = v202;
  *((void *)&v211 + 1) = v2;
  String.append<A>(contentsOf:)();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  unint64_t v2 = *((void *)&v203 + 1);
  uint64_t v3 = (long long *)v203;
LABEL_167:
  uint64_t v5 = &v211;
LABEL_168:
  swift_bridgeObjectRetain();
  unint64_t v143 = String._removingDotSegments.getter((unint64_t)v3, v2);
  unint64_t v145 = v144;
  swift_bridgeObjectRelease_n();
  BYTE8(v208) = 0;
  BYTE14(v208) = 0;
  unint64_t v4 = (unint64_t)&v208;
  if ((v145 & 0x1000000000000000) != 0)
  {
    *(void *)&long long v211 = v143;
    *((void *)&v211 + 1) = v145;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    v177 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v178 = (unsigned __int16 *)objc_msgSend(v177, sel__fastCharacterContents);
    id v179 = v177;
    if (v178)
    {
      *(void *)&long long v211 = v143;
      *((void *)&v211 + 1) = v145;
      StringProtocol._ephemeralString.getter();
      v180 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v181 = objc_msgSend(v180, sel_length);
      swift_unknownObjectRelease();
      char v182 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v178, (uint64_t)v181, 0x10u, 1);
    }
    else
    {
      char v182 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v143, v145, 0x10u, 1);
    }
    char v189 = v182;
    swift_bridgeObjectRelease_n();
    uint64_t v5 = &v211;
    unint64_t v4 = (unint64_t)&v208;
    if ((v189 & 1) == 0) {
      goto LABEL_222;
    }
  }
  else
  {
    if ((v145 & 0x2000000000000000) != 0)
    {
      uint64_t v147 = HIBYTE(v145) & 0xF;
      *(void *)&long long v211 = v143;
      *((void *)&v211 + 1) = v145 & 0xFFFFFFFFFFFFFFLL;
      char v146 = (char *)&v211;
    }
    else if ((v143 & 0x1000000000000000) != 0)
    {
      char v146 = (char *)((v145 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v147 = v143 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      char v146 = (char *)_StringObject.sharedUTF8.getter();
    }
    if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v146, v147, 0x10u, 1)) {
      goto LABEL_222;
    }
  }
  swift_bridgeObjectRelease();
  *(void *)&v210[8] = v143;
  *(void *)&v210[16] = v145;
  uint64_t v3 = &v203;
LABEL_179:
  long long v148 = *(_OWORD *)v210;
  long long v149 = *(_OWORD *)&v210[16];
  long long v205 = *(_OWORD *)v210;
  v206[0] = *(_OWORD *)&v210[16];
  long long v150 = *(_OWORD *)&v210[32];
  v206[1] = *(_OWORD *)&v210[32];
  *(long long *)((char *)v3 + 138) = *(_OWORD *)(v4 + 138);
  long long v151 = *(_OWORD *)&v209[16];
  long long v152 = *(_OWORD *)&v209[32];
  v204[1] = *(_OWORD *)&v209[16];
  v204[2] = *(_OWORD *)&v209[32];
  long long v153 = *(_OWORD *)&v209[48];
  long long v154 = *(_OWORD *)&v209[64];
  v204[3] = *(_OWORD *)&v209[48];
  v204[4] = *(_OWORD *)&v209[64];
  long long v155 = v208;
  long long v156 = *(_OWORD *)v209;
  long long v203 = v208;
  v204[0] = *(_OWORD *)v209;
  long long v217 = v148;
  long long v218 = v149;
  v219[0] = v150;
  *(long long *)((char *)v5 + 138) = *(_OWORD *)(v4 + 138);
  long long v213 = v151;
  long long v214 = v152;
  long long v215 = v153;
  long long v216 = v154;
  long long v211 = v155;
  long long v212 = v156;
  if (BYTE8(v203) != 1)
  {
    outlined retain of URLComponents((uint64_t)&v203);
    uint64_t v12 = URLComponents._URLComponents.computedString.getter();
    uint64_t v158 = v157;
    outlined release of URLComponents((uint64_t)&v203);
    if (!v158) {
      goto LABEL_183;
    }
    goto LABEL_46;
  }
  uint64_t v26 = v203;
  if ((void)v203) {
    goto LABEL_41;
  }
LABEL_183:
  id v37 = v7;
  swift_retain();
  swift_retain();
  if (_foundation_swift_url_feature_enabled()) {
    goto LABEL_48;
  }
  id v40 = objc_msgSend(v37, sel_relativeString);
LABEL_50:
  id v41 = v40;
  uint64_t v12 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
  swift_release();

  swift_release_n();
LABEL_51:
  outlined release of URLComponents((uint64_t)&v203);
  swift_bridgeObjectRelease();
  return v12;
}

id localizedDescriptionForError(void *a1, uint64_t a2)
{
  if ([a1 isEqualToString:@"NSURLErrorDomain"])
  {
    unint64_t v4 = (void *)_CFNetworkErrorCopyLocalizedDescriptionWithHostname();
    return v4;
  }
  else
  {
    pthread_once(&initControl, WebNSErrorExtrasInit);
    id result = (id)[(id)descriptions objectForKey:a1];
    if (result)
    {
      uint64_t v6 = result;
      uint64_t v7 = +[NSNumber numberWithInteger:a2];
      return (id)[v6 objectForKey:v7];
    }
  }
  return result;
}

uint64_t LocalizedStringResource.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LocalizedStringResource.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  LOBYTE(v54) = 0;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  char v57 = 1;
  lazy protocol witness table accessor for type String.LocalizationValue and conformance String.LocalizationValue();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v50 = v10;
  uint64_t v53 = v12;
  uint64_t v49 = *((void *)&v54 + 1);
  uint64_t v13 = v54;
  uint64_t v14 = v55;
  LOBYTE(v54) = 2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v52 = v16;
  uint64_t v42 = v15;
  uint64_t v47 = v13;
  uint64_t v48 = v14;
  char v57 = 3;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  swift_bridgeObjectRetain();
  uint64_t v46 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  long long v41 = v54;
  char v57 = 4;
  lazy protocol witness table accessor for type URL and conformance URL();
  uint64_t v18 = v41;
  swift_unknownObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v45 = v18;
  long long v19 = v54;
  uint64_t v20 = v55;
  swift_retain_n();
  id v21 = (id)v19;
  swift_retain_n();
  id v22 = v21;
  int v23 = _foundation_swift_url_feature_enabled();
  id v43 = v22;
  uint64_t v44 = *((void *)&v19 + 1);
  uint64_t v51 = v20;
  if (v23)
  {
    *(void *)&long long v54 = v22;
    *((void *)&v54 + 1) = *((void *)&v19 + 1);
    uint64_t v55 = v20;
    URL.scheme.getter();
    if (!v24)
    {
      swift_unknownObjectRelease();
      swift_release_n();
      swift_release_n();

      goto LABEL_18;
    }
    Swift::String v25 = String.lowercased()();
    swift_bridgeObjectRelease();
    if (v25._countAndFlagsBits == 1701603686 && v25._object == (void *)0xE400000000000000)
    {
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
LABEL_16:
      LOBYTE(v54) = 5;
      uint64_t v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v28 = v27;
      unint64_t v29 = *(void (**)(char *, uint64_t))(v6 + 8);
      uint64_t v46 = v26;
      v29(v8, v5);
      swift_bridgeObjectRetain();
      uint64_t v30 = v53;
      swift_bridgeObjectRetain();
      uint64_t v31 = v47;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v32 = v51;
      *(void *)a2 = v50;
      *(void *)(a2 + 8) = v30;
      uint64_t v33 = v49;
      *(void *)(a2 + 16) = v31;
      *(void *)(a2 + 24) = v33;
      uint64_t v34 = v42;
      id v35 = v43;
      *(void *)(a2 + 32) = v48;
      *(void *)(a2 + 40) = v34;
      *(void *)(a2 + 48) = v52;
      *(_OWORD *)(a2 + 56) = v41;
      uint64_t v36 = v44;
      *(void *)(a2 + 72) = v35;
      *(void *)(a2 + 80) = v36;
      uint64_t v37 = v46;
      *(void *)(a2 + 88) = v32;
      *(void *)(a2 + 96) = v37;
      *(void *)(a2 + 104) = v28;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    unsigned int v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    if (v56) {
      goto LABEL_16;
    }
  }
  else
  {
    unsigned int v56 = objc_msgSend(v22, sel_isFileURL);
    swift_release();
    swift_release();

    if (v56) {
      goto LABEL_16;
    }
  }
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  id v22 = v43;
LABEL_18:

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v38 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v40 = v39;
  KeyedDecodingContainer.codingPath.getter();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v38 - 8) + 104))(v40, *MEMORY[0x1E4FBBA78], v38);
  swift_willThrow();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v17 = v46;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v17) {
    swift_bridgeObjectRelease();
  }
  swift_unknownObjectRelease();

  swift_release();
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type URL and conformance URL()
{
  unint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys;
  if (!lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys;
  if (!lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys;
  if (!lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys;
  if (!lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale and conformance Locale()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale and conformance Locale;
  if (!lazy protocol witness table cache variable for type Locale and conformance Locale)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale and conformance Locale;
  if (!lazy protocol witness table cache variable for type Locale and conformance Locale)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale and conformance Locale;
  if (!lazy protocol witness table cache variable for type Locale and conformance Locale)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale and conformance Locale;
  if (!lazy protocol witness table cache variable for type Locale and conformance Locale)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale and conformance Locale;
  if (!lazy protocol witness table cache variable for type Locale and conformance Locale)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale and conformance Locale;
  if (!lazy protocol witness table cache variable for type Locale and conformance Locale)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale and conformance Locale;
  if (!lazy protocol witness table cache variable for type Locale and conformance Locale)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue and conformance String.LocalizationValue()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for JSONEncoder.DateEncodingStrategy(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)unint64_t result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

uint64_t type metadata accessor for PredicateExpressions.KeyPath.CommonKeyPathKind()
{
  return __swift_instantiateGenericMetadata();
}

char *protocol witness for KeyedEncodingContainerProtocol.encode<A>(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  return _JSONKeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a5, a3, a4);
}

char *_JSONKeyedEncodingContainer.encode(_:forKey:)(unint64_t a1, uint64_t a2, double a3)
{
  uint64_t v7 = *(void *)(a2 + 16);
  unint64_t v8 = (char *)type metadata accessor for Optional();
  int64_t v65 = *((void *)v8 - 1);
  unint64_t v66 = v8;
  v9.n128_f64[0] = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v63 - v10;
  unint64_t v63 = v3;
  unint64_t v64 = a1;
  uint64_t v12 = *v3;
  unint64_t v13 = *(void *)(*v3 + 144);
  uint64_t v14 = *(void *)(v7 - 8);
  uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v14 + 16);
  v15((char *)&v63 - v10, a1, v7, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v7);
  outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy((long long *)(v12 + 72), v69);
  swift_retain();
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v69, (void (*)(void, void, void, void, void, void))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v17 = v67;
  uint64_t v18 = specialized static JSONReference.number<A, B>(from:with:for:_:)(v69, v13, (uint64_t)v11, v7, v16, a3);
  if (v17)
  {
    outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v69, (void (*)(void, void, void, void, void, void))outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy);
    (*(void (**)(char *, char *))(v65 + 8))(v11, v66);
    return (char *)swift_release();
  }
  uint64_t v67 = v18;
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v69, (void (*)(void, void, void, void, void, void))outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy);
  (*(void (**)(char *, char *))(v65 + 8))(v11, v66);
  swift_release();
  uint64_t v20 = *v63;
  uint64_t v19 = v63[1];
  id v21 = (void (*)(uint64_t *, unint64_t, uint64_t))v15;
  unint64_t v22 = v63[2];
  v68[3] = v7;
  v68[4] = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v68);
  v21(boxed_opaque_existential_1, v64, v7);
  uint64_t v24 = _JSONKeyedEncodingContainer._converted(_:)(v68, v20, v19, v22);
  uint64_t v26 = v25;
  unint64_t result = (char *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
  if (*(unsigned char *)(v19 + 32) != 4)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  uint64_t v28 = *(void *)(v19 + 16);
  *(void *)(v19 + 16) = 0;
  *(void *)(v19 + 24) = 0;
  *(unsigned char *)(v19 + 32) = 7;
  swift_bridgeObjectRetain();
  uint64_t v29 = v67;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v68[0] = v28;
  unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v26);
  uint64_t v33 = *(void *)(v28 + 16);
  BOOL v34 = (v32 & 1) == 0;
  BOOL v35 = __OFADD__(v33, v34);
  uint64_t v36 = v33 + v34;
  if (v35)
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v21) = v32;
    if (*(void *)(v28 + 24) < v36)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, isUniquelyReferenced_nonNull_native);
      uint64_t v37 = v68[0];
      unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v26);
      if ((v21 & 1) == (v38 & 1)) {
        goto LABEL_10;
      }
      unint64_t v31 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v37 = v28;
LABEL_10:
      if (v21)
      {
LABEL_11:
        uint64_t v39 = *(void *)(v37 + 56);
        uint64_t v40 = 8 * v31;
        swift_release();
        *(void *)(v39 + v40) = v67;
LABEL_49:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v60 = *(void *)(v19 + 16);
        uint64_t v61 = *(void *)(v19 + 24);
        *(void *)(v19 + 16) = v37;
        *(void *)(v19 + 24) = 0;
        char v62 = *(unsigned char *)(v19 + 32);
        *(unsigned char *)(v19 + 32) = 4;
        outlined consume of JSONReference.Backing(v60, v61, v62);
        swift_bridgeObjectRelease();
        return (char *)swift_release();
      }
LABEL_48:
      specialized _NativeDictionary._insert(at:key:value:)(v31, v24, v26, v29, v37);
      swift_bridgeObjectRetain();
      goto LABEL_49;
    }
  }
  unint64_t v64 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  uint64_t v41 = static _DictionaryStorage.copy(original:)();
  uint64_t v37 = v41;
  uint64_t v42 = *(void *)(v28 + 16);
  if (!v42)
  {
LABEL_47:
    swift_bridgeObjectRelease();
    unint64_t v31 = v64;
    if (v21) {
      goto LABEL_11;
    }
    goto LABEL_48;
  }
  unint64_t result = (char *)(v41 + 64);
  uint64_t v43 = 1 << *(unsigned char *)(v37 + 32);
  unint64_t v66 = (char *)(v28 + 64);
  unint64_t v44 = (unint64_t)(v43 + 63) >> 6;
  if (v37 != v28 || result >= &v66[8 * v44])
  {
    unint64_t result = (char *)memmove(result, v66, 8 * v44);
    uint64_t v42 = *(void *)(v28 + 16);
  }
  int64_t v45 = 0;
  *(void *)(v37 + 16) = v42;
  uint64_t v46 = 1 << *(unsigned char *)(v28 + 32);
  uint64_t v47 = -1;
  if (v46 < 64) {
    uint64_t v47 = ~(-1 << v46);
  }
  unint64_t v48 = v47 & *(void *)(v28 + 64);
  int64_t v65 = (unint64_t)(v46 + 63) >> 6;
  while (1)
  {
    if (v48)
    {
      unint64_t v49 = __clz(__rbit64(v48));
      v48 &= v48 - 1;
      unint64_t v50 = v49 | (v45 << 6);
      goto LABEL_21;
    }
    int64_t v57 = v45 + 1;
    if (__OFADD__(v45, 1))
    {
      __break(1u);
      goto LABEL_52;
    }
    uint64_t v29 = v67;
    if (v57 >= v65) {
      goto LABEL_47;
    }
    unint64_t v58 = *(void *)&v66[8 * v57];
    ++v45;
    if (!v58)
    {
      int64_t v45 = v57 + 1;
      if (v57 + 1 >= v65) {
        goto LABEL_47;
      }
      unint64_t v58 = *(void *)&v66[8 * v45];
      if (!v58)
      {
        int64_t v45 = v57 + 2;
        if (v57 + 2 >= v65) {
          goto LABEL_47;
        }
        unint64_t v58 = *(void *)&v66[8 * v45];
        if (!v58)
        {
          int64_t v45 = v57 + 3;
          if (v57 + 3 >= v65) {
            goto LABEL_47;
          }
          unint64_t v58 = *(void *)&v66[8 * v45];
          if (!v58)
          {
            int64_t v45 = v57 + 4;
            if (v57 + 4 >= v65) {
              goto LABEL_47;
            }
            unint64_t v58 = *(void *)&v66[8 * v45];
            if (!v58)
            {
              int64_t v45 = v57 + 5;
              if (v57 + 5 >= v65) {
                goto LABEL_47;
              }
              unint64_t v58 = *(void *)&v66[8 * v45];
              if (!v58)
              {
                int64_t v45 = v57 + 6;
                if (v57 + 6 >= v65) {
                  goto LABEL_47;
                }
                unint64_t v58 = *(void *)&v66[8 * v45];
                if (!v58)
                {
                  int64_t v45 = v57 + 7;
                  if (v57 + 7 >= v65) {
                    goto LABEL_47;
                  }
                  unint64_t v58 = *(void *)&v66[8 * v45];
                  if (!v58) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_46:
    unint64_t v48 = (v58 - 1) & v58;
    unint64_t v50 = __clz(__rbit64(v58)) + (v45 << 6);
LABEL_21:
    uint64_t v51 = 16 * v50;
    uint64_t v52 = (void *)(*(void *)(v28 + 48) + 16 * v50);
    uint64_t v53 = v52[1];
    uint64_t v54 = 8 * v50;
    uint64_t v55 = *(void *)(*(void *)(v28 + 56) + v54);
    unsigned int v56 = (void *)(*(void *)(v37 + 48) + v51);
    void *v56 = *v52;
    v56[1] = v53;
    *(void *)(*(void *)(v37 + 56) + v54) = v55;
    swift_bridgeObjectRetain();
    unint64_t result = (char *)swift_retain();
  }
  int64_t v59 = v57 + 8;
  if (v59 >= v65) {
    goto LABEL_47;
  }
  unint64_t v58 = *(void *)&v66[8 * v59];
  if (v58)
  {
    int64_t v45 = v59;
    goto LABEL_46;
  }
  while (1)
  {
    int64_t v45 = v59 + 1;
    if (__OFADD__(v59, 1)) {
      break;
    }
    uint64_t v29 = v67;
    if (v45 >= v65) {
      goto LABEL_47;
    }
    unint64_t v58 = *(void *)&v66[8 * v45];
    ++v59;
    if (v58) {
      goto LABEL_46;
    }
  }
LABEL_53:
  __break(1u);
  return result;
}

void *outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(void *a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

uint64_t outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = v4[1];
  type metadata accessor for JSONReference();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(unsigned char *)(v10 + 32) = 0;
  uint64_t v11 = *v4;
  unint64_t v12 = v4[2];
  uint64_t v14 = *(void *)(a4 + 16);
  uint64_t v13 = *(void *)(a4 + 24);
  v56[3] = v14;
  unsigned char v56[4] = v13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v56);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(boxed_opaque_existential_1, a3, v14);
  swift_bridgeObjectRetain();
  uint64_t v16 = _JSONKeyedEncodingContainer._converted(_:)(v56, v11, v9, v12);
  uint64_t v18 = v17;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
  if (*(unsigned char *)(v9 + 32) != 4)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v19 = *(void *)(v9 + 16);
  *(void *)(v9 + 16) = 0;
  *(void *)(v9 + 24) = 0;
  *(unsigned char *)(v9 + 32) = 7;
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v56[0] = v19;
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v18);
  uint64_t v23 = *(void *)(v19 + 16);
  BOOL v24 = (v21 & 1) == 0;
  uint64_t v25 = v23 + v24;
  if (__OFADD__(v23, v24))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v11) = v21;
    if (*(void *)(v19 + 24) < v25)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, isUniquelyReferenced_nonNull_native);
      uint64_t v26 = v56[0];
      unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v18);
      if ((v11 & 1) != (v28 & 1)) {
        goto LABEL_51;
      }
      unint64_t v22 = v27;
      if ((v11 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      uint64_t v29 = *(void *)(v26 + 56);
      swift_release();
      *(void *)(v29 + 8 * v22) = v10;
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v49 = *(void *)(v9 + 16);
      uint64_t v50 = *(void *)(v9 + 24);
      *(void *)(v9 + 16) = v26;
      *(void *)(v9 + 24) = 0;
      char v51 = *(unsigned char *)(v9 + 32);
      *(unsigned char *)(v9 + 32) = 4;
      outlined consume of JSONReference.Backing(v49, v50, v51);
      swift_release();
      return swift_bridgeObjectRelease();
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v26 = v19;
      if (v21) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v22, v16, v18, v10, v26);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  uint64_t v30 = static _DictionaryStorage.copy(original:)();
  uint64_t v26 = v30;
  if (!*(void *)(v19 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }
  unint64_t v31 = (void *)(v30 + 64);
  unint64_t v32 = (unint64_t)((1 << *(unsigned char *)(v26 + 32)) + 63) >> 6;
  if (v26 != v19 || (unint64_t)v31 >= v19 + 64 + 8 * v32) {
    memmove(v31, (const void *)(v19 + 64), 8 * v32);
  }
  uint64_t v53 = v19 + 64;
  int64_t v33 = 0;
  *(void *)(v26 + 16) = *(void *)(v19 + 16);
  uint64_t v34 = 1 << *(unsigned char *)(v19 + 32);
  uint64_t v35 = -1;
  if (v34 < 64) {
    uint64_t v35 = ~(-1 << v34);
  }
  unint64_t v36 = v35 & *(void *)(v19 + 64);
  int64_t v54 = (unint64_t)(v34 + 63) >> 6;
  while (1)
  {
    if (v36)
    {
      unint64_t v37 = __clz(__rbit64(v36));
      v36 &= v36 - 1;
      int64_t v55 = v33;
      unint64_t v38 = v37 | (v33 << 6);
      goto LABEL_19;
    }
    int64_t v45 = v33 + 1;
    if (__OFADD__(v33, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v45 >= v54) {
      goto LABEL_45;
    }
    unint64_t v46 = *(void *)(v53 + 8 * v45);
    int64_t v47 = v33 + 1;
    if (!v46)
    {
      int64_t v47 = v33 + 2;
      if (v33 + 2 >= v54) {
        goto LABEL_45;
      }
      unint64_t v46 = *(void *)(v53 + 8 * v47);
      if (!v46)
      {
        int64_t v47 = v33 + 3;
        if (v33 + 3 >= v54) {
          goto LABEL_45;
        }
        unint64_t v46 = *(void *)(v53 + 8 * v47);
        if (!v46)
        {
          int64_t v47 = v33 + 4;
          if (v33 + 4 >= v54) {
            goto LABEL_45;
          }
          unint64_t v46 = *(void *)(v53 + 8 * v47);
          if (!v46)
          {
            int64_t v47 = v33 + 5;
            if (v33 + 5 >= v54) {
              goto LABEL_45;
            }
            unint64_t v46 = *(void *)(v53 + 8 * v47);
            if (!v46)
            {
              int64_t v47 = v33 + 6;
              if (v33 + 6 >= v54) {
                goto LABEL_45;
              }
              unint64_t v46 = *(void *)(v53 + 8 * v47);
              if (!v46)
              {
                int64_t v47 = v33 + 7;
                if (v33 + 7 >= v54) {
                  goto LABEL_45;
                }
                unint64_t v46 = *(void *)(v53 + 8 * v47);
                if (!v46)
                {
                  int64_t v47 = v33 + 8;
                  if (v33 + 8 >= v54) {
                    goto LABEL_45;
                  }
                  unint64_t v46 = *(void *)(v53 + 8 * v47);
                  if (!v46) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    unint64_t v36 = (v46 - 1) & v46;
    int64_t v55 = v47;
    unint64_t v38 = __clz(__rbit64(v46)) + (v47 << 6);
LABEL_19:
    uint64_t v39 = 16 * v38;
    uint64_t v40 = (void *)(*(void *)(v19 + 48) + 16 * v38);
    uint64_t v41 = v40[1];
    uint64_t v42 = 8 * v38;
    uint64_t v43 = *(void *)(*(void *)(v19 + 56) + v42);
    unint64_t v44 = (void *)(*(void *)(v26 + 48) + v39);
    void *v44 = *v40;
    v44[1] = v41;
    *(void *)(*(void *)(v26 + 56) + v42) = v43;
    swift_bridgeObjectRetain();
    swift_retain();
    int64_t v33 = v55;
  }
  uint64_t v48 = v33 + 9;
  if (v33 + 9 >= v54) {
    goto LABEL_45;
  }
  unint64_t v46 = *(void *)(v53 + 8 * v48);
  if (v46)
  {
    int64_t v47 = v33 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    int64_t v47 = v48 + 1;
    if (__OFADD__(v48, 1)) {
      break;
    }
    if (v47 >= v54) {
      goto LABEL_45;
    }
    unint64_t v46 = *(void *)(v53 + 8 * v47);
    ++v48;
    if (v46) {
      goto LABEL_44;
    }
  }
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  char v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  int64_t v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t result;
  uint64_t v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58[6];

  uint64_t v5 = v4;
  unint64_t v8 = v4[1];
  v58[0] = a1;
  v58[1] = a2;
  uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v11 = v10;
  type metadata accessor for JSONReference();
  unint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v9;
  *(void *)(v12 + 24) = v11;
  *(unsigned char *)(v12 + 32) = 1;
  uint64_t v13 = *v5;
  uint64_t v14 = v5[2];
  uint64_t v16 = *(void *)(a4 + 16);
  uint64_t v15 = *(void *)(a4 + 24);
  v58[3] = v16;
  v58[4] = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v58);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(boxed_opaque_existential_1, a3, v16);
  uint64_t v18 = _JSONKeyedEncodingContainer._converted(_:)(v58, v13, v8, v14);
  uint64_t v20 = v19;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
  if (*(unsigned char *)(v8 + 32) != 4)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  char v21 = *(void *)(v8 + 16);
  *(void *)(v8 + 16) = 0;
  *(void *)(v8 + 24) = 0;
  *(unsigned char *)(v8 + 32) = 7;
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v58[0] = v21;
  BOOL v24 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v20);
  uint64_t v25 = *(void *)(v21 + 16);
  uint64_t v26 = (v23 & 1) == 0;
  unint64_t v27 = v25 + v26;
  if (__OFADD__(v25, v26))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v16) = v23;
    if (*(void *)(v21 + 24) < v27)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v27, isUniquelyReferenced_nonNull_native);
      char v28 = v58[0];
      uint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v20);
      if ((v16 & 1) != (v30 & 1)) {
        goto LABEL_51;
      }
      BOOL v24 = v29;
      if ((v16 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      unint64_t v31 = *(void *)(v28 + 56);
      swift_release();
      *(void *)(v31 + 8 * v24) = v12;
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v51 = *(void *)(v8 + 16);
      uint64_t v52 = *(void *)(v8 + 24);
      *(void *)(v8 + 16) = v28;
      *(void *)(v8 + 24) = 0;
      uint64_t v53 = *(unsigned char *)(v8 + 32);
      *(unsigned char *)(v8 + 32) = 4;
      outlined consume of JSONReference.Backing(v51, v52, v53);
      swift_release();
      return swift_bridgeObjectRelease();
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      char v28 = v21;
      if (v23) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v24, v18, v20, v12, v28);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  unint64_t v32 = static _DictionaryStorage.copy(original:)();
  char v28 = v32;
  if (!*(void *)(v21 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }
  int64_t v33 = (void *)(v32 + 64);
  uint64_t v34 = (unint64_t)((1 << *(unsigned char *)(v28 + 32)) + 63) >> 6;
  if (v28 != v21 || (unint64_t)v33 >= v21 + 64 + 8 * v34) {
    memmove(v33, (const void *)(v21 + 64), 8 * v34);
  }
  int64_t v55 = v21 + 64;
  uint64_t v35 = 0;
  *(void *)(v28 + 16) = *(void *)(v21 + 16);
  unint64_t v36 = 1 << *(unsigned char *)(v21 + 32);
  unint64_t v37 = -1;
  if (v36 < 64) {
    unint64_t v37 = ~(-1 << v36);
  }
  unint64_t v38 = v37 & *(void *)(v21 + 64);
  unsigned int v56 = (unint64_t)(v36 + 63) >> 6;
  while (1)
  {
    if (v38)
    {
      uint64_t v39 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      int64_t v57 = v35;
      uint64_t v40 = v39 | (v35 << 6);
      goto LABEL_19;
    }
    int64_t v47 = v35 + 1;
    if (__OFADD__(v35, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v47 >= v56) {
      goto LABEL_45;
    }
    uint64_t v48 = *(void *)(v55 + 8 * v47);
    uint64_t v49 = v35 + 1;
    if (!v48)
    {
      uint64_t v49 = v35 + 2;
      if (v35 + 2 >= v56) {
        goto LABEL_45;
      }
      uint64_t v48 = *(void *)(v55 + 8 * v49);
      if (!v48)
      {
        uint64_t v49 = v35 + 3;
        if (v35 + 3 >= v56) {
          goto LABEL_45;
        }
        uint64_t v48 = *(void *)(v55 + 8 * v49);
        if (!v48)
        {
          uint64_t v49 = v35 + 4;
          if (v35 + 4 >= v56) {
            goto LABEL_45;
          }
          uint64_t v48 = *(void *)(v55 + 8 * v49);
          if (!v48)
          {
            uint64_t v49 = v35 + 5;
            if (v35 + 5 >= v56) {
              goto LABEL_45;
            }
            uint64_t v48 = *(void *)(v55 + 8 * v49);
            if (!v48)
            {
              uint64_t v49 = v35 + 6;
              if (v35 + 6 >= v56) {
                goto LABEL_45;
              }
              uint64_t v48 = *(void *)(v55 + 8 * v49);
              if (!v48)
              {
                uint64_t v49 = v35 + 7;
                if (v35 + 7 >= v56) {
                  goto LABEL_45;
                }
                uint64_t v48 = *(void *)(v55 + 8 * v49);
                if (!v48)
                {
                  uint64_t v49 = v35 + 8;
                  if (v35 + 8 >= v56) {
                    goto LABEL_45;
                  }
                  uint64_t v48 = *(void *)(v55 + 8 * v49);
                  if (!v48) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    unint64_t v38 = (v48 - 1) & v48;
    int64_t v57 = v49;
    uint64_t v40 = __clz(__rbit64(v48)) + (v49 << 6);
LABEL_19:
    uint64_t v41 = 16 * v40;
    uint64_t v42 = (void *)(*(void *)(v21 + 48) + 16 * v40);
    uint64_t v43 = v42[1];
    unint64_t v44 = 8 * v40;
    int64_t v45 = *(void *)(*(void *)(v21 + 56) + v44);
    unint64_t v46 = (void *)(*(void *)(v28 + 48) + v41);
    uint64_t *v46 = *v42;
    v46[1] = v43;
    *(void *)(*(void *)(v28 + 56) + v44) = v45;
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v35 = v57;
  }
  uint64_t v50 = v35 + 9;
  if (v35 + 9 >= v56) {
    goto LABEL_45;
  }
  uint64_t v48 = *(void *)(v55 + 8 * v50);
  if (v48)
  {
    uint64_t v49 = v35 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    uint64_t v49 = v50 + 1;
    if (__OFADD__(v50, 1)) {
      break;
    }
    if (v49 >= v56) {
      goto LABEL_45;
    }
    uint64_t v48 = *(void *)(v55 + 8 * v49);
    ++v50;
    if (v48) {
      goto LABEL_44;
    }
  }
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    uint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  void *v37;
  long long v38;

  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v7 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (*(void *)(v6 + 16))
  {
    uint64_t v10 = 1 << *(unsigned char *)(v6 + 32);
    char v37 = (void *)(v6 + 64);
    if (v10 < 64) {
      unint64_t v11 = ~(-1 << v10);
    }
    else {
      unint64_t v11 = -1;
    }
    uint64_t v12 = v11 & *(void *)(v6 + 64);
    uint64_t v36 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = v8 + 64;
    uint64_t result = swift_retain();
    uint64_t v15 = 0;
    while (1)
    {
      if (v12)
      {
        int64_t v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        uint64_t v23 = v22 | (v15 << 6);
      }
      else
      {
        unint64_t v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v24 >= v36) {
          goto LABEL_33;
        }
        int64_t v25 = v37[v24];
        ++v15;
        if (!v25)
        {
          uint64_t v15 = v24 + 1;
          if (v24 + 1 >= v36) {
            goto LABEL_33;
          }
          int64_t v25 = v37[v15];
          if (!v25)
          {
            char v26 = v24 + 2;
            if (v26 >= v36)
            {
LABEL_33:
              swift_release();
              unint64_t v4 = v3;
              if (v7)
              {
                int64_t v35 = 1 << *(unsigned char *)(v6 + 32);
                if (v35 >= 64) {
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v37 = -1 << v35;
                }
                *(void *)(v6 + 16) = 0;
              }
              break;
            }
            int64_t v25 = v37[v26];
            if (!v25)
            {
              while (1)
              {
                uint64_t v15 = v26 + 1;
                if (__OFADD__(v26, 1)) {
                  goto LABEL_40;
                }
                if (v15 >= v36) {
                  goto LABEL_33;
                }
                int64_t v25 = v37[v15];
                ++v26;
                if (v25) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v15 = v26;
          }
        }
LABEL_30:
        uint64_t v12 = (v25 - 1) & v25;
        uint64_t v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      uint64_t v31 = 16 * v23;
      uint64_t v32 = (uint64_t *)(*(void *)(v6 + 48) + v31);
      uint64_t v34 = *v32;
      uint64_t v33 = v32[1];
      unint64_t v38 = *(_OWORD *)(*(void *)(v6 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      unint64_t v16 = -1 << *(unsigned char *)(v9 + 32);
      unint64_t v17 = result & ~v16;
      unint64_t v18 = v17 >> 6;
      if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        uint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v27 = 0;
        BOOL v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v29 = v18 == v28;
          if (v18 == v28) {
            unint64_t v18 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        uint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      unint64_t v20 = 16 * v19;
      unint64_t v21 = (void *)(*(void *)(v9 + 48) + v20);
      *unint64_t v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(void *)(v9 + 56) + v20) = v38;
      ++*(void *)(v9 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v4 = v9;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;

  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  unint64_t v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v36 = v3;
  char v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    uint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          unint64_t v4 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v37) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void **)(*(void *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v34 = v33;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v4 = v36;
  uint64_t v23 = (void *)(v6 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  int64_t v35 = 1 << *(unsigned char *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v35;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  void *v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  _OWORD *v23;
  id v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;
  _OWORD v37[2];

  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v36 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_41;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  int64_t v35 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v34 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_22;
    }
    unint64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v34) {
      break;
    }
    uint64_t v19 = (void *)(v6 + 64);
    unint64_t v20 = *(void *)(v35 + 8 * v18);
    ++v14;
    if (!v20)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v34) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v35 + 8 * v14);
      if (!v20)
      {
        unint64_t v21 = v18 + 2;
        if (v21 >= v34)
        {
LABEL_34:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v35 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v14 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v34) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v35 + 8 * v14);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v21;
      }
    }
LABEL_21:
    unint64_t v11 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_22:
    int64_t v22 = *(void **)(*(void *)(v6 + 48) + 8 * v17);
    uint64_t v23 = (_OWORD *)(*(void *)(v6 + 56) + 32 * v17);
    if (v36)
    {
      outlined init with take of Any(v23, v37);
    }
    else
    {
      outlined init with copy of Any((uint64_t)v23, (uint64_t)v37);
      unint64_t v24 = v22;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    Hasher.init(_seed:)();
    String.hash(into:)();
    int64_t v25 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    char v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = v25 & ~v26;
    BOOL v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          BOOL v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v12 + 8 * v28);
      }
      while (v32 == -1);
      uint64_t v15 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(*(void *)(v8 + 48) + 8 * v15) = v22;
    uint64_t result = (uint64_t)outlined init with take of Any(v37, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v19 = (void *)(v6 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v6 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v19 = -1 << v33;
  }
  *(void *)(v6 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char v39;
  long long v40;

  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  char v37 = v3;
  unint64_t v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain();
  uint64_t v15 = 0;
  while (1)
  {
    if (v11)
    {
      int64_t v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      uint64_t v23 = v22 | (v15 << 6);
      goto LABEL_31;
    }
    unint64_t v24 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v24 >= v12) {
      break;
    }
    int64_t v25 = (void *)(v6 + 64);
    char v26 = *(void *)(v38 + 8 * v24);
    ++v15;
    if (!v26)
    {
      uint64_t v15 = v24 + 1;
      if (v24 + 1 >= v12) {
        goto LABEL_33;
      }
      char v26 = *(void *)(v38 + 8 * v15);
      if (!v26)
      {
        unint64_t v27 = v24 + 2;
        if (v27 >= v12)
        {
LABEL_33:
          swift_release();
          unint64_t v4 = v37;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        char v26 = *(void *)(v38 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            uint64_t v15 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_42;
            }
            if (v15 >= v12) {
              goto LABEL_33;
            }
            char v26 = *(void *)(v38 + 8 * v15);
            ++v27;
            if (v26) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v15 = v27;
      }
    }
LABEL_30:
    unint64_t v11 = (v26 - 1) & v26;
    uint64_t v23 = __clz(__rbit64(v26)) + (v15 << 6);
LABEL_31:
    uint64_t v32 = 16 * v23;
    uint64_t v33 = (uint64_t *)(*(void *)(v6 + 48) + v32);
    int64_t v35 = *v33;
    uint64_t v34 = v33[1];
    uint64_t v40 = *(_OWORD *)(*(void *)(v6 + 56) + v32);
    if ((v39 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v16 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v17 = result & ~v16;
    unint64_t v18 = v17 >> 6;
    if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v30 = v18 == v29;
        if (v18 == v29) {
          unint64_t v18 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v13 + 8 * v18);
      }
      while (v31 == -1);
      uint64_t v19 = __clz(__rbit64(~v31)) + (v18 << 6);
    }
    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    unint64_t v20 = 16 * v19;
    unint64_t v21 = (void *)(*(void *)(v8 + 48) + v20);
    *unint64_t v21 = v35;
    v21[1] = v34;
    *(_OWORD *)(*(void *)(v8 + 56) + v20) = v40;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v4 = v37;
  int64_t v25 = (void *)(v6 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v36 = 1 << *(unsigned char *)(v6 + 32);
  if (v36 >= 64) {
    bzero(v25, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v25 = -1 << v36;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

char *_JSONKeyedEncodingContainer.encode<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v71 = a4;
  char v72 = a5;
  uint64_t v70 = a1;
  unint64_t v8 = *(void *)(a3 + 16);
  uint64_t v69 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v69 - 8);
  v10.n128_f64[0] = MEMORY[0x1F4188790](v69);
  uint64_t v12 = (char *)&v66 - v11;
  uint64_t v67 = a2;
  uint64_t v68 = v5;
  unint64_t v13 = *(void *)(*v5 + 144);
  uint64_t v14 = *(void *)(v8 - 8);
  uint64_t v15 = *(void (**)(char *, uint64_t, unint64_t, __n128))(v14 + 16);
  v15((char *)&v66 - v11, a2, v8, v10);
  (*(void (**)(char *, void, uint64_t, unint64_t))(v14 + 56))(v12, 0, 1, v8);
  unint64_t v16 = *(long long **)(a3 + 24);
  swift_retain();
  uint64_t v17 = v74;
  uint64_t v18 = __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(v70, v13, (uint64_t)v12, v71, v8, (uint64_t)v72, v16);
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v69);
    return (char *)swift_release();
  }
  uint64_t v20 = v9;
  uint64_t v71 = 0;
  char v72 = (char *)v15;
  uint64_t v21 = v69;
  uint64_t v22 = v67;
  uint64_t v74 = v18;
  if (!v18)
  {
    type metadata accessor for JSONReference();
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = MEMORY[0x1E4FBC868];
    *(void *)(v23 + 24) = 0;
    uint64_t v74 = v23;
    *(unsigned char *)(v23 + 32) = 4;
  }
  (*(void (**)(char *, uint64_t))(v20 + 8))(v12, v21);
  swift_release();
  uint64_t v24 = *v68;
  uint64_t v25 = v68[1];
  unint64_t v26 = v68[2];
  long long v73[3] = v8;
  v73[4] = (uint64_t)v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v73);
  ((void (*)(uint64_t *, uint64_t, unint64_t))v72)(boxed_opaque_existential_1, v22, v8);
  uint64_t v28 = _JSONKeyedEncodingContainer._converted(_:)(v73, v24, v25, v26);
  uint64_t v30 = v29;
  uint64_t result = (char *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
  if (*(unsigned char *)(v25 + 32) != 4)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v31 = *(void *)(v25 + 16);
  *(void *)(v25 + 16) = 0;
  *(void *)(v25 + 24) = 0;
  *(unsigned char *)(v25 + 32) = 7;
  swift_bridgeObjectRetain();
  uint64_t v32 = v74;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v73[0] = v31;
  unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v30);
  uint64_t v36 = *(void *)(v31 + 16);
  BOOL v37 = (v35 & 1) == 0;
  BOOL v38 = __OFADD__(v36, v37);
  uint64_t v39 = v36 + v37;
  if (v38)
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v22) = v35;
    if (*(void *)(v31 + 24) < v39)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, isUniquelyReferenced_nonNull_native);
      uint64_t v40 = v73[0];
      unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v30);
      if ((v22 & 1) == (v41 & 1)) {
        goto LABEL_12;
      }
      unint64_t v34 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v40 = v31;
LABEL_12:
      if (v22)
      {
LABEL_13:
        uint64_t v42 = *(void *)(v40 + 56);
        uint64_t v43 = 8 * v34;
        swift_release();
        *(void *)(v42 + v43) = v32;
LABEL_51:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v63 = *(void *)(v25 + 16);
        uint64_t v64 = *(void *)(v25 + 24);
        *(void *)(v25 + 16) = v40;
        *(void *)(v25 + 24) = 0;
        char v65 = *(unsigned char *)(v25 + 32);
        *(unsigned char *)(v25 + 32) = 4;
        outlined consume of JSONReference.Backing(v63, v64, v65);
        swift_bridgeObjectRelease();
        return (char *)swift_release();
      }
LABEL_50:
      specialized _NativeDictionary._insert(at:key:value:)(v34, v28, v30, v32, v40);
      swift_bridgeObjectRetain();
      goto LABEL_51;
    }
  }
  uint64_t v69 = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  uint64_t v44 = static _DictionaryStorage.copy(original:)();
  uint64_t v40 = v44;
  uint64_t v45 = *(void *)(v31 + 16);
  if (!v45)
  {
LABEL_49:
    swift_bridgeObjectRelease();
    unint64_t v34 = v69;
    if (v22) {
      goto LABEL_13;
    }
    goto LABEL_50;
  }
  uint64_t result = (char *)(v44 + 64);
  uint64_t v46 = 1 << *(unsigned char *)(v40 + 32);
  char v72 = (char *)(v31 + 64);
  unint64_t v47 = (unint64_t)(v46 + 63) >> 6;
  if (v40 != v31 || result >= &v72[8 * v47])
  {
    uint64_t result = (char *)memmove(result, v72, 8 * v47);
    uint64_t v45 = *(void *)(v31 + 16);
  }
  uint64_t v48 = 0;
  *(void *)(v40 + 16) = v45;
  uint64_t v49 = 1 << *(unsigned char *)(v31 + 32);
  uint64_t v50 = -1;
  if (v49 < 64) {
    uint64_t v50 = ~(-1 << v49);
  }
  unint64_t v51 = v50 & *(void *)(v31 + 64);
  uint64_t v70 = (unint64_t)(v49 + 63) >> 6;
  uint64_t v32 = v74;
  while (1)
  {
    if (v51)
    {
      unint64_t v52 = __clz(__rbit64(v51));
      v51 &= v51 - 1;
      unint64_t v53 = v52 | (v48 << 6);
      goto LABEL_23;
    }
    uint64_t v60 = v48 + 1;
    if (__OFADD__(v48, 1))
    {
      __break(1u);
      goto LABEL_54;
    }
    if (v60 >= v70) {
      goto LABEL_49;
    }
    unint64_t v61 = *(void *)&v72[8 * v60];
    ++v48;
    if (!v61)
    {
      uint64_t v48 = v60 + 1;
      if (v60 + 1 >= v70) {
        goto LABEL_49;
      }
      unint64_t v61 = *(void *)&v72[8 * v48];
      if (!v61)
      {
        uint64_t v48 = v60 + 2;
        if (v60 + 2 >= v70) {
          goto LABEL_49;
        }
        unint64_t v61 = *(void *)&v72[8 * v48];
        if (!v61)
        {
          uint64_t v48 = v60 + 3;
          if (v60 + 3 >= v70) {
            goto LABEL_49;
          }
          unint64_t v61 = *(void *)&v72[8 * v48];
          if (!v61)
          {
            uint64_t v48 = v60 + 4;
            if (v60 + 4 >= v70) {
              goto LABEL_49;
            }
            unint64_t v61 = *(void *)&v72[8 * v48];
            if (!v61)
            {
              uint64_t v48 = v60 + 5;
              if (v60 + 5 >= v70) {
                goto LABEL_49;
              }
              unint64_t v61 = *(void *)&v72[8 * v48];
              if (!v61)
              {
                uint64_t v48 = v60 + 6;
                if (v60 + 6 >= v70) {
                  goto LABEL_49;
                }
                unint64_t v61 = *(void *)&v72[8 * v48];
                if (!v61)
                {
                  uint64_t v48 = v60 + 7;
                  if (v60 + 7 >= v70) {
                    goto LABEL_49;
                  }
                  unint64_t v61 = *(void *)&v72[8 * v48];
                  if (!v61) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_48:
    unint64_t v51 = (v61 - 1) & v61;
    unint64_t v53 = __clz(__rbit64(v61)) + (v48 << 6);
LABEL_23:
    uint64_t v54 = 16 * v53;
    int64_t v55 = (void *)(*(void *)(v31 + 48) + 16 * v53);
    uint64_t v56 = v55[1];
    uint64_t v57 = 8 * v53;
    uint64_t v58 = *(void *)(*(void *)(v31 + 56) + v57);
    int64_t v59 = (void *)(*(void *)(v40 + 48) + v54);
    void *v59 = *v55;
    v59[1] = v56;
    *(void *)(*(void *)(v40 + 56) + v57) = v58;
    swift_bridgeObjectRetain();
    uint64_t result = (char *)swift_retain();
  }
  uint64_t v62 = v60 + 8;
  if (v62 >= v70) {
    goto LABEL_49;
  }
  unint64_t v61 = *(void *)&v72[8 * v62];
  if (v61)
  {
    uint64_t v48 = v62;
    uint64_t v32 = v74;
    goto LABEL_48;
  }
  while (1)
  {
    uint64_t v48 = v62 + 1;
    if (__OFADD__(v62, 1)) {
      break;
    }
    uint64_t v32 = v74;
    if (v48 >= v70) {
      goto LABEL_49;
    }
    unint64_t v61 = *(void *)&v72[8 * v48];
    ++v62;
    if (v61) {
      goto LABEL_48;
    }
  }
LABEL_55:
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

{
  void *v5;
  uint64_t v6;
  long long v7;
  long long v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  uint64_t v6 = a5[7] + 72 * result;
  *(void *)(v6 + 64) = *(void *)(a4 + 64);
  BOOL v7 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v6 + 48) = v7;
  uint64_t v8 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)a4;
  *(_OWORD *)(v6 + 16) = v8;
  uint64_t v9 = a5[2];
  __n128 v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a5[2] = v11;
  }
  return result;
}

{
  void *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(void *)(a5[6] + 8 * result) = a2;
  uint64_t v5 = (void *)(a5[7] + 16 * result);
  *uint64_t v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t _JSONKeyedEncodingContainer._converted(_:)(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  void (*v4)(void *__return_ptr, uint64_t);
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, void *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v28;
  void v29[2];
  long long v30;
  void *v31;
  unint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void v36[7];

  v36[5] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void (**)(void *__return_ptr, uint64_t))(a2 + 120);
  if (v4)
  {
    if (v4 == (void (*)(void *__return_ptr, uint64_t))1)
    {
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      uint64_t v5 = dispatch thunk of CodingKey.stringValue.getter();
      BOOL v7 = specialized static JSONEncoder.KeyEncodingStrategy._convertToSnakeCase(_:)(v5, v6);
      swift_bridgeObjectRelease();
      return v7;
    }
    else
    {
      uint64_t v32 = a4;
      char v35 = *(void *)(a2 + 128);
      uint64_t v30 = *(_OWORD *)(a1 + 3);
      uint64_t v9 = v30;
      uint64_t v33 = __swift_project_boxed_opaque_existential_1(a1, v30);
      __n128 v10 = type metadata accessor for Optional();
      unint64_t v34 = v29;
      uint64_t v11 = *(void *)(v10 - 8);
      uint64_t v12 = *(void *)(v11 + 64);
      MEMORY[0x1F4188790](v10);
      unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v14 = (char *)v29 - v13;
      uint64_t v15 = *(void *)(v9 - 8);
      unint64_t v16 = *(void (**)(char *, void *, uint64_t))(v15 + 16);
      v29[1] = v15 + 16;
      v29[0] = v16;
      v16((char *)v29 - v13, v33, v9);
      uint64_t v17 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v15 + 56))((char *)v29 - v13, 0, 1, v9);
      uint64_t v31 = v29;
      uint64_t v18 = v10;
      uint64_t v19 = MEMORY[0x1F4188790](v17);
      uint64_t v21 = (char *)v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
      MEMORY[0x1F4188790](v19);
      uint64_t v22 = (char *)v29 - v13;
      uint64_t v33 = (void *)v11;
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))((char *)v29 - v13, (char *)v29 - v13, v18);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))((char *)v29 - v13, 1, v9) == 1)
      {
        uint64_t v23 = (void (*)(char *, uint64_t))v33[1];
        swift_retain();
        v23(v22, v18);
        uint64_t v24 = _CodingPathNode.path.getter(v32);
        v23(v14, v18);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v21, (char *)v29 - v13, v9);
        swift_retain();
        uint64_t v25 = _CodingPathNode.path.getter(v32);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        *(_OWORD *)(inited + 56) = v30;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        ((void (*)(uint64_t *, char *, uint64_t))v29[0])(boxed_opaque_existential_1, v21, v9);
        v36[0] = v25;
        specialized Array.append<A>(contentsOf:)(inited);
        uint64_t v24 = v36[0];
        ((void (*)(char *, uint64_t))v33[1])(v14, v18);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v21, v9);
      }
      v4(v36, v24);
      swift_bridgeObjectRelease();
      __swift_project_boxed_opaque_existential_1(v36, v36[3]);
      uint64_t v28 = dispatch thunk of CodingKey.stringValue.getter();
      outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
      return v28;
    }
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    return dispatch thunk of CodingKey.stringValue.getter();
  }
}

uint64_t __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, long long *a7)
{
  uint64_t v132 = a7;
  uint64_t v130 = a6;
  unint64_t v131 = a5;
  uint64_t v7 = a4;
  uint64_t v10 = a1;
  uint64_t v11 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v13 = (char *)&v121 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  unint64_t v16 = (char *)&v121 - v15;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v121 - v18;
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v121 - v21;
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v22, v10, v7);
    swift_dynamicCast();
    *(void *)long long v148 = *(void *)v135;
    uint64_t v23 = v151;
    uint64_t v24 = __JSONEncoder.wrap<A>(_:for:_:)((double *)v148, a2, a3, v131, (uint64_t)v132);
    if (!v23) {
      return v24;
    }
    return a2;
  }
  unint64_t v127 = v13;
  unint64_t v128 = a2;
  uint64_t v129 = a3;
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v19, v10, v7);
    swift_dynamicCast();
    long long v25 = *(_OWORD *)v135;
    __JSONEncoder.wrap<A>(_:for:_:)(*(uint64_t *)v135, *(unint64_t *)&v135[8], v128, v129, v131, (uint64_t)v132);
    a2 = v26;
    outlined consume of Data._Representation(v25, *((unint64_t *)&v25 + 1));
    return a2;
  }
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, v10, v7);
    swift_dynamicCast();
    uint64_t v28 = *(void **)v135;
    uint64_t v29 = URL.absoluteString.getter();
    uint64_t v31 = v30;

    swift_release();
    swift_release();
    type metadata accessor for JSONReference();
    a2 = swift_allocObject();
    *(void *)(a2 + 16) = v29;
    *(void *)(a2 + 24) = v31;
    *(unsigned char *)(a2 + 32) = 0;
    return a2;
  }
  type metadata accessor for NSDecimal(0);
  if (!swift_dynamicCastMetatype())
  {
    if (swift_conformsToProtocol2()) {
      uint64_t v66 = v7;
    }
    else {
      uint64_t v66 = 0;
    }
    if (v66)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v127, v10, v7);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Encodable]);
      swift_dynamicCast();
      a2 = __JSONEncoder.wrap<A>(_:for:_:)(*(uint64_t *)v135, v128, v129, v131, v132);
      swift_bridgeObjectRelease();
      return a2;
    }
LABEL_42:
    uint64_t v69 = swift_conformsToProtocol2();
    if (v69) {
      uint64_t v70 = v7;
    }
    else {
      uint64_t v70 = 0;
    }
    if (v70)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, unint64_t, long long *))(v11 + 16))(v16, v10, v7, v129, v131, v132);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _JSONDirectArrayEncodable);
      swift_dynamicCast();
      uint64_t v71 = v133;
      uint64_t v72 = *(void *)(v133 + 24);
      uint64_t v73 = v150;
      uint64_t v130 = v149;
      uint64_t v129 = (uint64_t)__swift_project_boxed_opaque_existential_1(v148, v149);
      char v75 = *(void **)(v71 + 32);
      uint64_t v74 = *(void *)(v71 + 40);
      int v76 = *(unsigned __int8 *)(v71 + 48);
      unint64_t v78 = *(void *)(v71 + 56);
      uint64_t v77 = *(void *)(v71 + 64);
      unint64_t v80 = *(void *)(v71 + 72);
      uint64_t v79 = *(void *)(v71 + 80);
      uint64_t v82 = *(void *)(v71 + 88);
      uint64_t v81 = *(void *)(v71 + 96);
      uint64_t v84 = *(void *)(v71 + 104);
      uint64_t v83 = *(void *)(v71 + 112);
      unint64_t v86 = *(void *)(v71 + 120);
      id v85 = *(long long **)(v71 + 128);
      uint64_t v87 = *(void *)(v71 + 136);
      uint64_t v133 = v87;
      unint64_t v131 = v80;
      uint64_t v132 = v85;
      unint64_t v128 = v74;
      unint64_t v127 = v73;
      *(void *)unint64_t v135 = v72;
      *(void *)&v135[8] = v75;
      *(void *)&unsigned char v135[16] = v74;
      char v136 = v76;
      if (v72)
      {
        unint64_t v137 = v78;
        uint64_t v138 = v77;
        uint64_t v124 = v77;
        unint64_t v139 = v80;
        uint64_t v140 = v79;
        uint64_t v141 = v82;
        uint64_t v142 = v81;
        uint64_t v143 = v84;
        uint64_t v144 = v83;
        unint64_t v145 = v86;
        char v146 = v85;
        uint64_t v147 = v87;
        unint64_t v111 = (uint64_t (*)(unsigned char *, uint64_t, char *))*((void *)v73 + 2);
        unint64_t v122 = v73 + 16;
        unint64_t v123 = v111;
        uint64_t v112 = v79;
        LODWORD(v125) = v76;
        outlined copy of JSONEncoder.DateEncodingStrategy(v75, v74, v76);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v78);
        outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v131, v112);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v86);
        swift_bridgeObjectRetain();
        uint64_t v113 = v123(v135, v130, v127);
        outlined consume of JSONEncoder.DateEncodingStrategy(v75, v128, (char)v125);
        outlined consume of JSONEncoder.KeyEncodingStrategy(v78);
        outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v131, v112);
        outlined consume of JSONEncoder.KeyEncodingStrategy(v86);
        swift_bridgeObjectRelease();
        type metadata accessor for JSONReference();
        uint64_t v93 = swift_allocObject();
        a2 = v93;
        *(void *)(v93 + 16) = v113;
        *(void *)(v93 + 24) = 0;
        char v95 = 6;
      }
      else
      {
        unint64_t v126 = v78;
        unint64_t v137 = v78;
        uint64_t v138 = v77;
        uint64_t v88 = v80;
        unint64_t v139 = v80;
        uint64_t v140 = v79;
        uint64_t v141 = v82;
        uint64_t v142 = v81;
        uint64_t v143 = v84;
        uint64_t v144 = v83;
        unint64_t v145 = v86;
        char v146 = v85;
        uint64_t v147 = v87;
        id v89 = (uint64_t (*)(unsigned char *, uint64_t, char *))*((void *)v73 + 1);
        unint64_t v122 = v73 + 8;
        uint64_t v125 = v89;
        uint64_t v90 = v79;
        unint64_t v123 = (uint64_t (*)(unsigned char *, uint64_t, char *))v75;
        outlined copy of JSONEncoder.DateEncodingStrategy(v75, v74, v76);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v126);
        outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v88, v90);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v86);
        swift_bridgeObjectRetain();
        uint64_t v91 = v125(v135, v130, v127);
        uint64_t v130 = v92;
        outlined consume of JSONEncoder.DateEncodingStrategy(v123, v128, v76);
        outlined consume of JSONEncoder.KeyEncodingStrategy(v126);
        outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v131, v90);
        outlined consume of JSONEncoder.KeyEncodingStrategy(v86);
        swift_bridgeObjectRelease();
        type metadata accessor for JSONReference();
        uint64_t v93 = swift_allocObject();
        a2 = v93;
        uint64_t v94 = v130;
        *(void *)(v93 + 16) = v91;
        *(void *)(v93 + 24) = v94;
        char v95 = 5;
      }
      *(unsigned char *)(v93 + 32) = v95;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v148);
      return a2;
    }
    MEMORY[0x1F4188790](v69);
    *(&v121 - 6) = v7;
    *(&v121 - 5) = v106;
    uint64_t v118 = v130;
    uint64_t v119 = v107;
    uint64_t v120 = v10;
    uint64_t v108 = v151;
    __JSONEncoder._wrapGeneric<A>(_:for:_:)((void (*)(void *))partial apply for closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:for:_:), (uint64_t)(&v121 - 8), v109, v110, v106, v107);
    if (!v108) {
      return v24;
    }
    return a2;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, v10, v7);
  swift_dynamicCast();
  int v32 = *(_DWORD *)v135;
  int v33 = *(unsigned __int16 *)&v135[4];
  int v34 = *(unsigned __int16 *)&v135[6];
  __int16 v35 = *(_WORD *)&v135[8];
  __int16 v36 = *(_WORD *)&v135[10];
  __int16 v37 = *(_WORD *)&v135[12];
  __int16 v38 = *(_WORD *)&v135[14];
  __int16 v39 = *(_WORD *)&v135[16];
  LODWORD(v40) = *(unsigned __int16 *)&v135[18];
  if (!_So9NSDecimala__length_getter(v135))
  {
    *(_DWORD *)unint64_t v135 = v32;
    *(_WORD *)&v135[4] = v33;
    *(_WORD *)&v135[6] = v34;
    *(_WORD *)&v135[8] = v35;
    *(_WORD *)&v135[10] = v36;
    *(_WORD *)&v135[12] = v37;
    *(_WORD *)&v135[14] = v38;
    *(_WORD *)&unsigned char v135[16] = v39;
    *(_WORD *)&v135[18] = v40;
    if (_So9NSDecimala__isNegative_getter(v135))
    {
      unint64_t v67 = 0xE300000000000000;
      uint64_t v68 = 5136718;
LABEL_63:
      type metadata accessor for JSONReference();
      a2 = swift_allocObject();
      *(void *)(a2 + 16) = v68;
      *(void *)(a2 + 24) = v67;
      *(unsigned char *)(a2 + 32) = 1;
      return a2;
    }
  }
  *(_DWORD *)unint64_t v135 = v32;
  *(_WORD *)&v135[4] = v33;
  *(_WORD *)&v135[6] = v34;
  *(_WORD *)&v135[8] = v35;
  *(_WORD *)&v135[10] = v36;
  *(_WORD *)&v135[12] = v37;
  *(_WORD *)&v135[14] = v38;
  *(_WORD *)&unsigned char v135[16] = v39;
  *(_WORD *)&v135[18] = v40;
  if (!_So9NSDecimala__length_getter(v135))
  {
    unint64_t v67 = 0xE100000000000000;
    uint64_t v68 = 48;
    goto LABEL_63;
  }
  *(void *)&long long v134 = 0;
  *((void *)&v134 + 1) = 0xE000000000000000;
  *(_DWORD *)unint64_t v135 = v32;
  *(_WORD *)&v135[4] = v33;
  *(_WORD *)&v135[6] = v34;
  *(_WORD *)&v135[8] = v35;
  *(_WORD *)&v135[10] = v36;
  *(_WORD *)&v135[12] = v37;
  *(_WORD *)&v135[14] = v38;
  *(_WORD *)&unsigned char v135[16] = v39;
  *(_WORD *)&v135[18] = v40;
  *(_DWORD *)long long v148 = v32;
  *(_WORD *)&v148[4] = v33;
  *(_WORD *)&v148[6] = v34;
  *(_WORD *)&v148[8] = v35;
  *(_WORD *)&v148[10] = v36;
  *(_WORD *)&v148[12] = v37;
  *(_WORD *)&v148[14] = v38;
  *(_WORD *)&v148[16] = v39;
  *(_WORD *)&v148[18] = v40;
  if ((int)_So9NSDecimala__exponent_getter(v148) >= 1)
  {
    do
    {
      LODWORD(v133) = v40;
      v41._uint64_t countAndFlagsBits = 48;
      v41._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v41);
      *(_DWORD *)long long v148 = v32;
      *(_WORD *)&v148[4] = v33;
      *(_WORD *)&v148[6] = v34;
      *(_WORD *)&v148[8] = v35;
      *(_WORD *)&v148[10] = v36;
      *(_WORD *)&v148[12] = v37;
      *(_WORD *)&v148[14] = v38;
      *(_WORD *)&v148[16] = v39;
      *(_WORD *)&v148[18] = v133;
      int v42 = _So9NSDecimala__exponent_getter(v148);
      _So9NSDecimala__exponent_setter((v42 - 1), v135);
      int v32 = *(_DWORD *)v135;
      int v33 = *(unsigned __int16 *)&v135[4];
      int v34 = *(unsigned __int16 *)&v135[6];
      __int16 v35 = *(_WORD *)&v135[8];
      __int16 v36 = *(_WORD *)&v135[10];
      __int16 v37 = *(_WORD *)&v135[12];
      __int16 v38 = *(_WORD *)&v135[14];
      __int16 v39 = *(_WORD *)&v135[16];
      LODWORD(v40) = *(unsigned __int16 *)&v135[18];
      *(_OWORD *)long long v148 = *(_OWORD *)v135;
      *(_DWORD *)&v148[16] = *(_DWORD *)&v135[16];
    }
    while ((int)_So9NSDecimala__exponent_getter(v148) > 0);
  }
  *(_DWORD *)long long v148 = v32;
  *(_WORD *)&v148[4] = v33;
  *(_WORD *)&v148[6] = v34;
  *(_WORD *)&v148[8] = v35;
  *(_WORD *)&v148[10] = v36;
  *(_WORD *)&v148[12] = v37;
  *(_WORD *)&v148[14] = v38;
  *(_WORD *)&v148[16] = v39;
  *(_WORD *)&v148[18] = v40;
  if (!_So9NSDecimala__exponent_getter(v148))
  {
    _So9NSDecimala__exponent_setter(1, v135);
    int v32 = *(_DWORD *)v135;
    int v33 = *(unsigned __int16 *)&v135[4];
    int v34 = *(unsigned __int16 *)&v135[6];
    __int16 v35 = *(_WORD *)&v135[8];
    __int16 v36 = *(_WORD *)&v135[10];
    __int16 v37 = *(_WORD *)&v135[12];
    __int16 v38 = *(_WORD *)&v135[14];
    __int16 v39 = *(_WORD *)&v135[16];
    LOWORD(v40) = *(_WORD *)&v135[18];
  }
  LODWORD(v133) = v32;
  *(_DWORD *)long long v148 = v32;
  int v43 = v34;
  int v44 = v33;
  *(_WORD *)&v148[4] = v33;
  LODWORD(v131) = v43;
  *(_WORD *)&v148[6] = v43;
  *(_WORD *)&v148[8] = v35;
  *(_WORD *)&v148[10] = v36;
  *(_WORD *)&v148[12] = v37;
  *(_WORD *)&v148[14] = v38;
  *(_WORD *)&v148[16] = v39;
  *(_WORD *)&v148[18] = v40;
  if (!_So9NSDecimala__length_getter(v148))
  {
    int v45 = v133;
    int v46 = v33;
    LOWORD(v47) = v131;
LABEL_49:
    *(_DWORD *)long long v148 = v45;
    *(_WORD *)&v148[4] = v46;
    *(_WORD *)&v148[6] = v47;
    *(_WORD *)&v148[8] = v35;
    *(_WORD *)&v148[10] = v36;
    *(_WORD *)&v148[12] = v37;
    *(_WORD *)&v148[14] = v38;
    *(_WORD *)&v148[16] = v39;
    *(_WORD *)&v148[18] = v40;
    int v96 = v45;
    int v97 = v46;
    int v98 = _So9NSDecimala__exponent_getter(v148);
    int v99 = v96;
    __int16 v100 = v97;
    if (v98 <= 0)
    {
      *(_DWORD *)long long v148 = v96;
      LODWORD(v132) = v97;
      *(_WORD *)&v148[4] = v97;
      *(_WORD *)&v148[6] = v47;
      *(_WORD *)&v148[8] = v35;
      *(_WORD *)&v148[10] = v36;
      *(_WORD *)&v148[12] = v37;
      *(_WORD *)&v148[14] = v38;
      *(_WORD *)&v148[16] = v39;
      *(_WORD *)&v148[18] = v40;
      int v101 = _So9NSDecimala__exponent_getter(v148);
      LODWORD(v133) = v96;
      __int16 v102 = v47;
      if (v101)
      {
        __int16 v103 = (__int16)v132;
        do
        {
          v104._uint64_t countAndFlagsBits = 48;
          v104._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v104);
          *(_DWORD *)long long v148 = v133;
          *(_WORD *)&v148[4] = v103;
          *(_WORD *)&v148[6] = v102;
          *(_WORD *)&v148[8] = v35;
          *(_WORD *)&v148[10] = v36;
          *(_WORD *)&v148[12] = v37;
          *(_WORD *)&v148[14] = v38;
          *(_WORD *)&v148[16] = v39;
          *(_WORD *)&v148[18] = v40;
          int v105 = _So9NSDecimala__exponent_getter(v148);
          _So9NSDecimala__exponent_setter((v105 + 1), v135);
          __int16 v103 = *(_WORD *)&v135[4];
          __int16 v102 = *(_WORD *)&v135[6];
          __int16 v35 = *(_WORD *)&v135[8];
          __int16 v36 = *(_WORD *)&v135[10];
          __int16 v37 = *(_WORD *)&v135[12];
          __int16 v38 = *(_WORD *)&v135[14];
          __int16 v39 = *(_WORD *)&v135[16];
          LOWORD(v40) = *(_WORD *)&v135[18];
          LODWORD(v133) = *(_DWORD *)v135;
          *(_OWORD *)long long v148 = *(_OWORD *)v135;
          *(_DWORD *)&v148[16] = *(_DWORD *)&v135[16];
        }
        while (_So9NSDecimala__exponent_getter(v148));
      }
      else
      {
        __int16 v103 = (__int16)v132;
      }
      v114._uint64_t countAndFlagsBits = 46;
      v114._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v114);
      v115._uint64_t countAndFlagsBits = 48;
      v115._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v115);
      LOWORD(v47) = v102;
      int v99 = v133;
      __int16 v100 = v103;
    }
    *(_DWORD *)long long v148 = v99;
    *(_WORD *)&v148[4] = v100;
    *(_WORD *)&v148[6] = v47;
    *(_WORD *)&v148[8] = v35;
    *(_WORD *)&v148[10] = v36;
    *(_WORD *)&v148[12] = v37;
    *(_WORD *)&v148[14] = v38;
    *(_WORD *)&v148[16] = v39;
    *(_WORD *)&v148[18] = v40;
    if (_So9NSDecimala__isNegative_getter(v148))
    {
      v116._uint64_t countAndFlagsBits = 45;
      v116._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v116);
    }
    *(_OWORD *)long long v148 = v134;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>, (uint64_t *)&demangling cache variable for type metadata for ReversedCollection<String>);
    uint64_t v68 = String.init<A>(_:)();
    unint64_t v67 = v117;
    goto LABEL_63;
  }
  uint64_t v11 = 3435973837;
  uint64_t v10 = 10;
  int v45 = v133;
  int v46 = v44;
  int v47 = v131;
  while (1)
  {
    LODWORD(v133) = v45;
    LODWORD(v132) = v46;
    *(_DWORD *)long long v148 = v45;
    *(_WORD *)&v148[4] = v46;
    *(_WORD *)&v148[6] = v47;
    *(_WORD *)&v148[8] = v35;
    *(_WORD *)&v148[10] = v36;
    *(_WORD *)&v148[12] = v37;
    *(_WORD *)&v148[14] = v38;
    *(_WORD *)&v148[16] = v39;
    *(_WORD *)&v148[18] = v40;
    if (!_So9NSDecimala__exponent_getter(v148))
    {
      LODWORD(v131) = v47;
      v48._uint64_t countAndFlagsBits = 46;
      v48._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v48);
      LOWORD(v47) = v131;
    }
    *(_DWORD *)long long v148 = v133;
    *(_WORD *)&v148[4] = (_WORD)v132;
    *(_WORD *)&v148[6] = v47;
    *(_WORD *)&v148[8] = v35;
    *(_WORD *)&v148[10] = v36;
    *(_WORD *)&v148[12] = v37;
    *(_WORD *)&v148[14] = v38;
    *(_WORD *)&v148[16] = v39;
    *(_WORD *)&v148[18] = v40;
    int v49 = _So9NSDecimala__exponent_getter(v148);
    _So9NSDecimala__exponent_setter((v49 + 1), v135);
    uint64_t v50 = *(unsigned int *)v135;
    unint64_t v51 = (long long *)*(unsigned __int16 *)&v135[4];
    __int16 v52 = *(_WORD *)&v135[6];
    unint64_t v53 = *(unsigned __int16 *)&v135[8];
    uint64_t v130 = *(unsigned __int16 *)&v135[10];
    uint64_t v129 = *(unsigned __int16 *)&v135[12];
    __int16 v54 = *(_WORD *)&v135[18];
    unint64_t v127 = (char *)*(unsigned __int16 *)&v135[14];
    LODWORD(v128) = *(unsigned __int16 *)&v135[16];
    NSDecimal.asVariableLengthInteger()(*(unsigned int *)v135 | ((unint64_t)*(unsigned __int16 *)&v135[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v135[6] << 48), *(unsigned __int16 *)&v135[8] | ((unint64_t)*(unsigned __int16 *)&v135[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v135[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v135[14] << 48), *(unsigned __int16 *)&v135[16] | (*(unsigned __int16 *)&v135[18] << 16));
    a2 = v55;
    uint64_t v56 = *(void *)(v55 + 16);
    uint64_t v133 = v50;
    uint64_t v132 = v51;
    unint64_t v131 = v53;
    if (v56)
    {
      uint64_t v57 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      unint64_t v16 = (char *)(v57 + 30);
      *(void *)(v57 + 16) = v56;
      bzero((void *)(v57 + 32), 2 * v56);
      unsigned int v58 = *(unsigned __int16 *)(2 * v56 + a2 + 30);
      unsigned int v59 = v58 / 0xA;
      while (1)
      {
        *(_WORD *)&v16[2 * v56] = v59;
        uint64_t v7 = v58 % 0xA;
        if (v56 == 1) {
          break;
        }
        unsigned int v58 = *(unsigned __int16 *)(a2 + 28 + 2 * v56) | (v7 << 16);
        unsigned int v59 = v58 / 0xA;
        unint64_t v60 = v56 - 2;
        --v56;
        if (v60 >= *(void *)(v57 + 16))
        {
          __break(1u);
          goto LABEL_42;
        }
      }
    }
    else
    {
      LODWORD(v7) = 0;
      uint64_t v57 = MEMORY[0x1E4FBC860];
    }
    uint64_t v61 = *(void *)(v57 + 16);
    if (v61 && !*(_WORD *)(v57 + 2 * v61 + 30))
    {
      do
      {
        *(void *)(v57 + 16) = v61 - 1;
        if (v61 == 1) {
          break;
        }
      }
      while (!*(unsigned __int16 *)(v57 + 28 + 2 * v61--));
    }
    swift_bridgeObjectRelease();
    *(_DWORD *)long long v148 = v133;
    *(_WORD *)&v148[4] = (_WORD)v132;
    *(_WORD *)&v148[6] = v52;
    *(_WORD *)&v148[8] = v131;
    *(_WORD *)&v148[10] = v130;
    *(_WORD *)&v148[12] = v129;
    *(_WORD *)&v148[14] = (_WORD)v127;
    *(_WORD *)&v148[16] = v128;
    *(_WORD *)&v148[18] = v54;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v57);
    if (v63) {
      break;
    }
    uint64_t v151 = 0;
    unint64_t v40 = *(void *)(v57 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v40)) {
      goto LABEL_65;
    }
    _So9NSDecimala__length_setter(v40, v148);
    *(_DWORD *)unint64_t v135 = *(_DWORD *)v148;
    *(_OWORD *)&v135[4] = *(_OWORD *)&v148[4];
    *(void *)long long v148 = v7 | 0x30;
    v64._uint64_t countAndFlagsBits = MEMORY[0x185302020](v148, 1);
    String.append(_:)(v64);
    swift_bridgeObjectRelease();
    LODWORD(v133) = *(_DWORD *)v135;
    LODWORD(v132) = *(unsigned __int16 *)&v135[4];
    int v47 = *(unsigned __int16 *)&v135[6];
    __int16 v35 = *(_WORD *)&v135[8];
    __int16 v36 = *(_WORD *)&v135[10];
    __int16 v37 = *(_WORD *)&v135[12];
    __int16 v38 = *(_WORD *)&v135[14];
    __int16 v39 = *(_WORD *)&v135[16];
    LOWORD(v40) = *(_WORD *)&v135[18];
    *(_OWORD *)long long v148 = *(_OWORD *)v135;
    *(_DWORD *)&v148[16] = *(_DWORD *)&v135[16];
    int v65 = _So9NSDecimala__length_getter(v148);
    int v46 = (int)v132;
    int v45 = v133;
    if (!v65) {
      goto LABEL_49;
    }
  }
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_65:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t __JSONEncoder.container<A>(keyedBy:)()
{
  unint64_t v1 = v0 + 2;
  if ((*(uint64_t (**)(void))(*v0 + 208))())
  {
    type metadata accessor for JSONReference();
    uint64_t v2 = swift_allocObject();
    *(void *)(v2 + 16) = MEMORY[0x1E4FBC868];
    *(void *)(v2 + 24) = 0;
    *(unsigned char *)(v2 + 32) = 4;
    uint64_t v3 = swift_retain();
    MEMORY[0x185302590](v3);
    if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    goto LABEL_13;
  }
  uint64_t v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5) {
      goto LABEL_7;
    }
LABEL_15:
    unint64_t v6 = swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  if (!v5) {
    goto LABEL_15;
  }
LABEL_7:
  unint64_t v6 = v5 - 1;
  if (__OFSUB__(v5, 1))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if ((v4 & 0xC000000000000001) == 0)
  {
    if ((v6 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v6 < *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v7 = *(void *)(v4 + 8 * v6 + 32);
      swift_retain();
      goto LABEL_12;
    }
    __break(1u);
    goto LABEL_20;
  }
LABEL_17:
  uint64_t v7 = MEMORY[0x185303120](v6, v4);
LABEL_12:
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v7 + 32) == 4)
  {
LABEL_13:
    type metadata accessor for _JSONKeyedEncodingContainer();
    swift_retain();
    swift_retain();
    swift_getWitnessTable();
    return KeyedEncodingContainer.init<A>(_:)();
  }
LABEL_20:
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for JSONReference()
{
  return self;
}

BOOL __JSONEncoder.canEncodeNewValue.getter()
{
  unint64_t v1 = *(void *)(v0 + 16);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  return v2 == *(void *)(v0 + 152);
}

uint64_t type metadata accessor for _JSONKeyedEncodingContainer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void __JSONEncoder._wrapGeneric<A>(_:for:_:)(void (*a1)(void *), uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v46 = a1;
  uint64_t v7 = v6;
  uint64_t v51 = a4;
  uint64_t v49 = a2;
  unint64_t v50 = a3;
  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  int v43 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (uint64_t *)((char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17.n128_f64[0] = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v43 - v18;
  unint64_t v20 = v7[2];
  uint64_t v44 = a6;
  int v45 = v7 + 2;
  if (v20 >> 62) {
    goto LABEL_34;
  }
  uint64_t v48 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16);
    v21(v19, v51, v12, v17);
    ((void (*)(uint64_t *, char *, uint64_t))v21)(v15, v19, v12);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v10 + 48))(v15, 1, a5) == 1) {
      break;
    }
    uint64_t v29 = *(void (**)(char *, uint64_t *, uint64_t))(v10 + 32);
    uint64_t v30 = v43;
    v29(v43, v15, a5);
    uint64_t v15 = (uint64_t *)swift_allocObject();
    uint64_t v31 = v44;
    v15[5] = a5;
    v15[6] = v31;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15 + 2);
    v29((char *)boxed_opaque_existential_1, (uint64_t *)v30, a5);
    int v33 = *(void (**)(char *, uint64_t))(v13 + 8);
    v13 += 8;
    v33(v19, v12);
    unint64_t v34 = v50;
    v15[7] = v50;
    if (v34 >> 62)
    {
      if (v34 >> 62 != 1)
      {
        uint64_t v10 = 1;
LABEL_14:
        _OWORD v15[8] = v10;
        uint64_t v24 = v7[18];
        uint64_t v23 = v7[19];
        v7[18] = v15;
LABEL_15:
        unint64_t v27 = v46;
        uint64_t v28 = v47;
        goto LABEL_16;
      }
      __int16 v35 = (uint64_t *)((v34 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      __int16 v35 = (uint64_t *)(v34 + 64);
    }
    uint64_t v36 = *v35;
    swift_retain();
    uint64_t v10 = v36 + 1;
    if (!__OFADD__(v36, 1)) {
      goto LABEL_14;
    }
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v22 = *(void (**)(char *, uint64_t))(v13 + 8);
  v22(v19, v12);
  v22((char *)v15, v12);
  uint64_t v24 = v7[18];
  uint64_t v23 = v7[19];
  unint64_t v25 = v50;
  unint64_t v26 = v50 >> 62;
  v7[18] = v50;
  if (!(v25 >> 62))
  {
    uint64_t v10 = *(void *)(v25 + 64);
    swift_retain();
    goto LABEL_15;
  }
  unint64_t v27 = v46;
  uint64_t v28 = v47;
  if (v26 != 1)
  {
    uint64_t v10 = 0;
    goto LABEL_17;
  }
  uint64_t v10 = *(void *)((v25 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  swift_retain();
LABEL_16:
  swift_retain();
LABEL_17:
  v7[19] = v10;
  v27(v7);
  if (v28)
  {
    v7[18] = v24;
    swift_retain();
    swift_release();
    v7[19] = v23;
    swift_release();
    swift_release();
    unint64_t v37 = v7[2];
    if (v37 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v38 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v48 >= v38) {
      goto LABEL_24;
    }
    if (*v45 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v41) {
        goto LABEL_23;
      }
    }
    else if (*(void *)((*v45 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_23:
      specialized RangeReplaceableCollection<>.popLast()();
      swift_release();
LABEL_24:
      swift_willThrow();
      return;
    }
    __break(1u);
    goto LABEL_39;
  }
  v7[18] = v24;
  swift_retain();
  swift_release();
  v7[19] = v23;
  swift_release();
  swift_release();
  unint64_t v39 = v7[2];
  if (v39 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v40 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v48 < v40)
  {
    if (!(*v45 >> 62))
    {
      if (!*(void *)((*v45 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_40:
        __break(1u);
        return;
      }
LABEL_30:
      specialized RangeReplaceableCollection<>.popLast()();
      return;
    }
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v42) {
      goto LABEL_40;
    }
    goto LABEL_30;
  }
}

uint64_t partial apply for closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  return closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(a1);
}

_OWORD *outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t getEnumTagSinglePayload for PredicateExpressionCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t specialized static JSONReference.number<A, B>(from:with:for:_:)(long long *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  unint64_t v50 = a2;
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v51 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v49 - v18;
  if ((~*(void *)&a6 & 0x7FF0000000000000) != 0)
  {
    uint64_t v28 = Double.description.getter();
    unint64_t v30 = v29;
    unint64_t v52 = v28;
    unint64_t v53 = v29;
    swift_bridgeObjectRetain();
    v31._uint64_t countAndFlagsBits = 12334;
    v31._unint64_t object = (void *)0xE200000000000000;
    Swift::Bool v32 = String.hasSuffix(_:)(v31);
    swift_bridgeObjectRelease();
    if (v32)
    {
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
      uint64_t v28 = v52;
      unint64_t v30 = v53;
    }
    type metadata accessor for JSONReference();
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = v28;
    *(void *)(v27 + 24) = v30;
    *(unsigned char *)(v27 + 32) = 1;
  }
  else
  {
    uint64_t v49 = a5;
    uint64_t v20 = v17;
    outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy(a1, &v54);
    uint64_t v21 = *((void *)&v54 + 1);
    if (*((void *)&v54 + 1))
    {
      uint64_t v23 = v55;
      uint64_t v22 = v56;
      uint64_t v25 = v57;
      uint64_t v24 = v58;
      type metadata accessor for JSONReference();
      if (a6 == INFINITY)
      {
        uint64_t v26 = v54;
        uint64_t v27 = swift_allocObject();
        *(void *)(v27 + 16) = v26;
        *(void *)(v27 + 24) = v21;
        *(unsigned char *)(v27 + 32) = 0;
      }
      else
      {
        uint64_t v36 = swift_allocObject();
        uint64_t v27 = v36;
        if (a6 == -INFINITY)
        {
          *(void *)(v36 + 16) = v23;
          *(void *)(v36 + 24) = v22;
        }
        else
        {
          *(void *)(v36 + 16) = v25;
          *(void *)(v36 + 24) = v24;
        }
        *(unsigned char *)(v36 + 32) = 0;
      }
      swift_bridgeObjectRetain();
    }
    else
    {
      int v33 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
      v33(v19, a3, v13);
      v33(v15, (uint64_t)v19, v13);
      uint64_t v34 = v51;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v15, 1, a4) == 1)
      {
        __int16 v35 = *(void (**)(char *, uint64_t))(v20 + 8);
        v35(v15, v13);
        _CodingPathNode.path.getter(v50);
        v35(v19, v13);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v12, v15, a4);
        uint64_t v37 = _CodingPathNode.path.getter(v50);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v38 = v20;
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        uint64_t v40 = v49;
        *(void *)(inited + 56) = a4;
        *(void *)(inited + 64) = v40;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v12, a4);
        unint64_t v52 = v37;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v19, v13);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v12, a4);
      }
      uint64_t v42 = type metadata accessor for EncodingError();
      uint64_t v43 = swift_allocError();
      uint64_t v45 = v44;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
      *(void *)(v45 + 24) = MEMORY[0x1E4FBB3D0];
      *(double *)uint64_t v45 = a6;
      unint64_t v52 = 0;
      unint64_t v53 = 0xE000000000000000;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      unint64_t v52 = 0xD000000000000018;
      unint64_t v53 = 0x80000001823AB7A0;
      v46._uint64_t countAndFlagsBits = Double.description.getter();
      String.append(_:)(v46);
      swift_bridgeObjectRelease();
      v47._unint64_t object = (void *)0x80000001823AB780;
      v47._uint64_t countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v47);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v42 - 8) + 104))(v45, *MEMORY[0x1E4FBBAA0], v42);
      uint64_t v27 = v43;
      swift_willThrow();
    }
  }
  return v27;
}

unint64_t specialized RangeReplaceableCollection<>.removeLast(_:)(unint64_t result)
{
  if (!result) {
    return result;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v2 = v1[1];
  if ((v2 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(v2) & 0xF;
  }
  else {
    uint64_t v3 = *v1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t result = String.index(_:offsetBy:limitedBy:)();
  if (v4) {
    goto LABEL_14;
  }
  if (4 * v3 < result >> 14)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }

  return String.removeSubrange(_:)();
}

{
  uint64_t v1;
  unint64_t v2;
  BOOL v3;

  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t v2 = *(void *)(*(void *)v1 + 16);
      uint64_t v3 = v2 >= result;
      uint64_t result = v2 - result;
      if (v3) {
        return (unint64_t)specialized Array.replaceSubrange<A>(_:with:)(result, v2);
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t JSONDecoder.dateDecodingStrategy.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t v5 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v5 + 4);
  swift_release();
  uint64_t v6 = v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  BOOL v7 = *(void **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options);
  uint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 8);
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = v3;
  char v9 = *(unsigned char *)(v6 + 16);
  *(unsigned char *)(v6 + 16) = v4;
  outlined consume of JSONEncoder.DateEncodingStrategy(v7, v8, v9);
  swift_retain();
  os_unfair_lock_unlock(v5 + 4);

  return swift_release();
}

uint64_t JSONEncoder.dateEncodingStrategy.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t v5 = *(os_unfair_lock_s **)(v1 + 136);
  swift_retain();
  os_unfair_lock_lock(v5 + 4);
  swift_release();
  uint64_t v6 = *(void **)(v1 + 24);
  uint64_t v7 = *(void *)(v1 + 32);
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v3;
  char v8 = *(unsigned char *)(v1 + 40);
  *(unsigned char *)(v1 + 40) = v4;
  outlined consume of JSONEncoder.DateEncodingStrategy(v6, v7, v8);
  swift_retain();
  os_unfair_lock_unlock(v5 + 4);

  return swift_release();
}

uint64_t __JSONEncoder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  unint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 80);
  unint64_t v4 = *(void *)(v0 + 120);
  outlined consume of JSONEncoder.DateEncodingStrategy(*(void **)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
  outlined consume of JSONEncoder.KeyEncodingStrategy(v1);
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v2, v3);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v4);
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t JSONEncoder.__deallocating_deinit()
{
  unint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  unint64_t v4 = *(void *)(v0 + 112);
  outlined consume of JSONEncoder.DateEncodingStrategy(*(void **)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  outlined consume of JSONEncoder.KeyEncodingStrategy(v1);
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v2, v3);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v4);
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t JSONDecoder.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_assumesTopLevelDictionaryKey;
  uint64_t v2 = type metadata accessor for CodingUserInfoKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  unint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 24);
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 40);
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 48);
  unint64_t v6 = *(void *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 88);
  outlined consume of JSONEncoder.DateEncodingStrategy(*(void **)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options), *(void *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 8), *(unsigned char *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 16));
  outlined consume of JSONEncoder.KeyEncodingStrategy(v3);
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v4, v5);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v6);
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t JSONDecoderImpl.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  unint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 88);
  unint64_t v4 = *(void *)(v0 + 128);
  outlined consume of JSONEncoder.DateEncodingStrategy(*(void **)(v0 + 40), *(void *)(v0 + 48), *(unsigned char *)(v0 + 56));
  outlined consume of JSONEncoder.KeyEncodingStrategy(v1);
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v2, v3);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v4);
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

void outlined consume of JSONEncoder.DateEncodingStrategy(void *a1, uint64_t a2, char a3)
{
  if (a3 == 1)
  {
    swift_release();
  }
  else if (!a3)
  {
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ExpressionStructure.CodingKeys()
{
  if (*v0) {
    return 1936159329;
  }
  else {
    return 0x696669746E656469;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TimeZone.CodingKeys()
{
  if (*v0) {
    return 0x616470756F747561;
  }
  else {
    return 0x696669746E656469;
  }
}

uint64_t protocol witness for _JSONDirectArrayEncodable.nonPrettyJSONRepresentation(options:) in conformance <A> [A](uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Array<A>.nonPrettyJSONRepresentation(options:)(a1, *v3, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PredicateExpressionCodingKeys()
{
  uint64_t v1 = 0x6973736572707865;
  if (*v0 != 1) {
    uint64_t v1 = 0x7275746375727473;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656C626169726176;
  }
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PredicateExpressions.Variable<A>.CodingKeys()
{
  return 7955819;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance DateComponents.CodingKeys()
{
  return DateComponents.CodingKeys.stringValue.getter(*v0);
}

uint64_t DateComponents.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x7261646E656C6163;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x656E6F5A656D6974;
      break;
    case 2:
      uint64_t result = 6386277;
      break;
    case 3:
      uint64_t result = 1918985593;
      break;
    case 4:
      uint64_t result = 0x68746E6F6DLL;
      break;
    case 5:
      uint64_t result = 7954788;
      break;
    case 6:
      uint64_t result = 1920298856;
      break;
    case 7:
      uint64_t result = 0x6574756E696DLL;
      break;
    case 8:
      uint64_t result = 0x646E6F636573;
      break;
    case 9:
      uint64_t result = 0x6F6365736F6E616ELL;
      break;
    case 10:
      uint64_t result = 0x7961646B656577;
      break;
    case 11:
      uint64_t result = 0x4F7961646B656577;
      break;
    case 12:
      uint64_t result = 0x72657472617571;
      break;
    case 13:
      uint64_t v3 = 0x664F6B656577;
      goto LABEL_18;
    case 14:
      uint64_t result = 0x6559664F6B656577;
      break;
    case 15:
      uint64_t result = 0xD000000000000011;
      break;
    case 16:
      uint64_t v3 = 0x7061654C7369;
LABEL_18:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x6F4D000000000000;
      break;
    case 17:
      uint64_t result = 0x616559664F796164;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for _JSONDirectArrayEncodable.individualElementRepresentation(options:) in conformance <A> [A](uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Array<A>.individualElementRepresentation(options:)(a1, *v3, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t Array<A>.individualElementRepresentation(options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v48 = *(void *)(a3 - 8);
  uint64_t v49 = a4;
  uint64_t v6 = *(void *)(v48 + 64);
  double v7 = MEMORY[0x1F4188790](a1);
  char v8 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v9;
  uint64_t v46 = v9[1];
  uint64_t v47 = v10;
  uint64_t v45 = v9[2];
  int v44 = *((unsigned __int8 *)v9 + 24);
  uint64_t v43 = v9[4];
  uint64_t v42 = v9[5];
  uint64_t v41 = v9[6];
  uint64_t v40 = v9[7];
  uint64_t v39 = v9[8];
  uint64_t v38 = v9[9];
  uint64_t v37 = v9[10];
  uint64_t v36 = v9[11];
  uint64_t v35 = v9[12];
  uint64_t v34 = v9[13];
  uint64_t v33 = v9[14];
  uint64_t v13 = MEMORY[0x185302610](v11, v12, v7);
  uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13 & ~(v13 >> 63), 0, MEMORY[0x1E4FBC860]);
  uint64_t v15 = swift_bridgeObjectRetain();
  uint64_t result = MEMORY[0x185302620](v15, a3);
  if (!result)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (uint64_t)v14;
  }
  uint64_t v17 = result;
  if (result >= 1)
  {
    uint64_t v27 = v6;
    uint64_t v18 = 0;
    Swift::String v31 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v49 + 16);
    uint64_t v32 = v49 + 16;
    unint64_t v28 = a2 & 0xC000000000000001;
    unint64_t v29 = (void (**)(char *, void *, uint64_t))(v48 + 16);
    unint64_t v30 = (void (**)(char *, uint64_t))(v48 + 8);
    do
    {
      if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && v28)
      {
        uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
        if (v27 != 8) {
          goto LABEL_15;
        }
        uint64_t v19 = a2;
        v50[0] = result;
        (*v29)(v8, v50, a3);
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v19 = a2;
        (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v8, a2+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(void *)(v48 + 72) * v18, a3);
      }
      v50[0] = v47;
      v50[1] = v46;
      v50[2] = v45;
      char v51 = v44;
      uint64_t v52 = v43;
      uint64_t v53 = v42;
      uint64_t v54 = v41;
      uint64_t v55 = v40;
      uint64_t v56 = v39;
      uint64_t v57 = v38;
      uint64_t v58 = v37;
      uint64_t v59 = v36;
      uint64_t v60 = v35;
      uint64_t v61 = v34;
      uint64_t v62 = v33;
      uint64_t v20 = v31(v50, a3, v49);
      uint64_t v22 = v21;
      unint64_t v24 = v14[2];
      unint64_t v23 = v14[3];
      if (v24 >= v23 >> 1) {
        uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v14);
      }
      ++v18;
      void v14[2] = v24 + 1;
      uint64_t v25 = &v14[2 * v24];
      v25[4] = v20;
      v25[5] = v22;
      (*v30)(v8, a3);
      a2 = v19;
    }
    while (v17 != v18);
    goto LABEL_13;
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized static Date.FormatStyle.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 56);
  char v4 = *(unsigned char *)(a1 + 64);
  long long v5 = *(_OWORD *)(a1 + 72);
  long long v6 = *(_OWORD *)(a1 + 88);
  long long v7 = *(_OWORD *)(a1 + 104);
  int v8 = *(unsigned __int8 *)(a1 + 120);
  int v9 = *(unsigned __int8 *)(a1 + 121);
  uint64_t v10 = a2[4];
  uint64_t v11 = a2[7];
  int v12 = *((unsigned __int8 *)a2 + 64);
  long long v13 = *(_OWORD *)(a2 + 9);
  long long v14 = *(_OWORD *)(a2 + 11);
  long long v15 = *(_OWORD *)(a2 + 13);
  int v16 = *((unsigned __int8 *)a2 + 120);
  uint64_t v17 = v10 & 0xFF000000000000;
  int v18 = *((unsigned __int8 *)a2 + 121);
  if ((v2 & 0xFF000000000000) == 0x3000000000000)
  {
    if (v17 != 0x3000000000000) {
      return 0;
    }
  }
  else
  {
    if (v17 == 0x3000000000000) {
      return 0;
    }
    uint64_t v19 = *(void *)(a1 + 8);
    v44[0] = *(void *)a1;
    uint64_t v20 = *(void *)(a1 + 16);
    uint64_t v21 = *(void *)(a1 + 24);
    uint64_t v45 = v19;
    char v47 = BYTE2(v20);
    __int16 v46 = v20;
    char v48 = BYTE3(v20);
    uint64_t v49 = v21;
    __int16 v50 = v2 & 0x1FF;
    char v51 = BYTE2(v2);
    char v52 = BYTE3(v2);
    char v53 = BYTE4(v2);
    char v54 = BYTE5(v2);
    char v55 = BYTE6(v2);
    uint64_t v22 = *(void *)(a1 + 40);
    LOWORD(v19) = *(_WORD *)(a1 + 48);
    char v56 = HIBYTE(v2);
    uint64_t v57 = v22;
    uint64_t v23 = *a2;
    uint64_t v24 = a2[1];
    __int16 v58 = v19;
    v59[0] = v23;
    uint64_t v25 = a2[2];
    uint64_t v26 = a2[3];
    uint64_t v60 = v24;
    char v62 = BYTE2(v25);
    __int16 v61 = v25;
    char v63 = BYTE3(v25);
    uint64_t v64 = v26;
    __int16 v65 = v10 & 0x1FF;
    char v66 = BYTE2(v10);
    char v67 = BYTE3(v10);
    char v68 = BYTE4(v10);
    char v69 = BYTE5(v10);
    char v70 = BYTE6(v10);
    char v71 = HIBYTE(v10);
    uint64_t v72 = a2[5];
    __int16 v27 = *((_WORD *)a2 + 24);
    __int16 v73 = v27;
    long long v34 = v15;
    long long v36 = v7;
    long long v38 = v14;
    long long v40 = v6;
    long long v32 = v13;
    long long v33 = v5;
    BOOL v28 = specialized static Date.FormatStyle.DateFieldCollection.== infix(_:_:)(v44, v59);
    long long v13 = v32;
    long long v5 = v33;
    long long v14 = v38;
    long long v6 = v40;
    long long v15 = v34;
    long long v7 = v36;
    if (!v28) {
      return 0;
    }
  }
  if (v4)
  {
    if (!v12) {
      return 0;
    }
  }
  else
  {
    if (v3 == v11) {
      char v29 = v12;
    }
    else {
      char v29 = 1;
    }
    if (v29) {
      return 0;
    }
  }
  long long v39 = v14;
  long long v41 = v6;
  long long v35 = v15;
  long long v37 = v7;
  long long v42 = v13;
  long long v43 = v5;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v43, (uint64_t)&v42) & 1) == 0) {
    return 0;
  }
  long long v42 = v39;
  long long v43 = v41;
  if ((specialized static TimeZone.== infix(_:_:)((uint64_t)&v43, (uint64_t)&v42) & 1) == 0) {
    return 0;
  }
  long long v42 = v35;
  long long v43 = v37;
  char v30 = specialized static Calendar.== infix(_:_:)((uint64_t)&v43, (uint64_t)&v42);
  uint64_t result = 0;
  if ((v30 & 1) != 0 && v8 == v16) {
    return v9 ^ v18 ^ 1u;
  }
  return result;
}

uint64_t Calendar.firstWeekday.setter(uint64_t a1)
{
  uint64_t v3 = v1[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 56))(ObjectType, v3);
  if (result != a1)
  {
    v10[0] = 0;
    v10[1] = 0;
    v9[0] = 0;
    v9[1] = 0;
    uint64_t v6 = (*(uint64_t (**)(void *, void *, uint64_t, void, void, uint64_t, uint64_t, uint64_t))(v3 + 112))(v10, v9, a1, 0, 0, 1, ObjectType, v3);
    uint64_t v8 = v7;
    uint64_t result = swift_unknownObjectRelease();
    uint64_t *v1 = v6;
    v1[1] = v8;
  }
  return result;
}

uint64_t partial apply for closure #1 in _NSSwiftCalendar.firstWeekday.setter(uint64_t *a1)
{
  return closure #1 in _NSSwiftCalendar.firstWeekday.setter(a1, *(void *)(v1 + 16));
}

uint64_t closure #1 in _NSSwiftCalendar.firstWeekday.setter(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 56))(ObjectType, v4);
  if (result != a2)
  {
    v11[0] = 0;
    v11[1] = 0;
    v10[0] = 0;
    v10[1] = 0;
    uint64_t v7 = (*(uint64_t (**)(void *, void *, uint64_t, void, void, uint64_t, uint64_t, uint64_t))(v4 + 112))(v11, v10, a2, 0, 0, 1, ObjectType, v4);
    uint64_t v9 = v8;
    uint64_t result = swift_unknownObjectRelease();
    *a1 = v7;
    a1[1] = v9;
  }
  return result;
}

uint64_t TimeZone.identifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 32))(ObjectType, v1);
}

uint64_t Calendar.timeZone.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 48))(ObjectType, v1);
}

void Calendar._adjustedDateForMismatches(start:searchingDate:matchDate:matchingComponents:compsToMatch:direction:matchingPolicy:repeatedTimePolicy:isForwardDST:isExactMatch:isLeapDay:)(void *__src@<X3>, double *a2@<X0>, double *a3@<X1>, double *a4@<X2>, long long *a5@<X4>, char *a6@<X5>, unsigned __int8 *a7@<X6>, unsigned __int8 *a8@<X7>, uint64_t a9@<X8>, unsigned char *a10, unsigned char *a11, unsigned char *a12)
{
  void (*v51)(_OWORD *__return_ptr, uint64_t, void);
  char v52;
  int v53;
  unsigned char *v54;
  double v55;
  double v56;
  void (*v57)(double *__return_ptr, uint64_t *, double *, uint64_t, void);
  double v58;
  double v59;
  double v60;
  double v61;
  unsigned char *v62;
  unsigned char *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unsigned __int8 v70;
  char v71;
  int v73;
  int v75;
  unsigned __int8 v77;
  double v78;
  void v79[36];
  double v80;
  char v81;
  double v82[36];
  double v83[36];
  double v84[36];
  uint64_t v85;
  unsigned __int8 v86;
  _OWORD __srca[18];
  long long __dst[18];
  long long v89;
  long long v90;
  long long v91;
  long long v92;
  long long v93;
  long long v94;
  long long v95;
  long long v96;
  long long v97;
  long long v98;
  long long v99;
  long long v100;
  char v101;
  _DWORD v102[2];
  long long v103;
  long long v104;
  long long v105;
  long long v106;
  unsigned char *v107;

  uint64_t v107 = a11;
  double v15 = *a2;
  double v16 = *a3;
  double v17 = *a4;
  memcpy(__dst, __src, 0x11AuLL);
  long long v18 = a5[1];
  __int16 v103 = *a5;
  long long v19 = *a5;
  Swift::String v104 = a5[1];
  int v105 = a5[2];
  long long v20 = a5[2];
  uint64_t v106 = a5[3];
  uint64_t v21 = *((void *)a5 + 8);
  int v22 = *((unsigned __int8 *)a5 + 72);
  v102[0] = *(_DWORD *)((char *)a5 + 73);
  *(_DWORD *)((char *)v102 + 3) = *((_DWORD *)a5 + 19);
  uint64_t v23 = *((void *)a5 + 10);
  int v24 = *((unsigned __int8 *)a5 + 88);
  long long v25 = *(long long *)((char *)a5 + 233);
  long long v26 = *(long long *)((char *)a5 + 265);
  int v99 = *(long long *)((char *)a5 + 249);
  __int16 v100 = v26;
  int v101 = *((unsigned char *)a5 + 281);
  long long v27 = *(long long *)((char *)a5 + 169);
  long long v28 = *(long long *)((char *)a5 + 201);
  char v95 = *(long long *)((char *)a5 + 185);
  int v96 = v28;
  int v97 = *(long long *)((char *)a5 + 217);
  int v98 = v25;
  long long v29 = *(long long *)((char *)a5 + 105);
  long long v30 = *(long long *)((char *)a5 + 137);
  uint64_t v91 = *(long long *)((char *)a5 + 121);
  uint64_t v92 = v30;
  uint64_t v93 = *(long long *)((char *)a5 + 153);
  uint64_t v94 = v27;
  id v89 = *(long long *)((char *)a5 + 89);
  uint64_t v90 = v29;
  char v71 = *a6;
  __int16 v73 = *a7;
  char v70 = *a8;
  double v31 = *v12;
  double v32 = v12[1];
  *a10 = 0;
  void *v107 = 1;
  *a12 = 0;
  v84[0] = v31;
  v84[1] = v32;
  v82[0] = v17;
  __srca[0] = v19;
  __srca[1] = v18;
  long long v33 = a5[3];
  __srca[2] = v20;
  __srca[3] = v33;
  char v69 = v21;
  *(void *)&__srca[4] = v21;
  BYTE8(__srca[4]) = v22;
  *(_DWORD *)((char *)&__srca[4] + 9) = *(_DWORD *)((char *)a5 + 73);
  HIDWORD(__srca[4]) = *((_DWORD *)a5 + 19);
  *(void *)&__srca[5] = v23;
  BYTE8(__srca[5]) = v24;
  long long v34 = *(long long *)((char *)a5 + 233);
  long long v35 = *(long long *)((char *)a5 + 249);
  char v36 = *((unsigned char *)a5 + 281);
  *(_OWORD *)((char *)&__srca[16] + 9) = *(long long *)((char *)a5 + 265);
  *(_OWORD *)((char *)&__srca[5] + 9) = *(long long *)((char *)a5 + 89);
  long long v37 = *(long long *)((char *)a5 + 105);
  long long v38 = *(long long *)((char *)a5 + 121);
  long long v39 = *(long long *)((char *)a5 + 137);
  *(_OWORD *)((char *)&__srca[9] + 9) = *(long long *)((char *)a5 + 153);
  *(_OWORD *)((char *)&__srca[8] + 9) = v39;
  *(_OWORD *)((char *)&__srca[7] + 9) = v38;
  *(_OWORD *)((char *)&__srca[6] + 9) = v37;
  long long v40 = *(long long *)((char *)a5 + 169);
  long long v41 = *(long long *)((char *)a5 + 185);
  long long v42 = *(long long *)((char *)a5 + 201);
  *(_OWORD *)((char *)&__srca[13] + 9) = *(long long *)((char *)a5 + 217);
  *(_OWORD *)((char *)&__srca[12] + 9) = v42;
  *(_OWORD *)((char *)&__srca[11] + 9) = v41;
  *(_OWORD *)((char *)&__srca[10] + 9) = v40;
  BYTE9(__srca[17]) = v36;
  *(_OWORD *)((char *)&__srca[15] + 9) = v35;
  *(_OWORD *)((char *)&__srca[14] + 9) = v34;
  BOOL v43 = Calendar.date(_:containsMatchingComponents:)(v83, v82, (uint64_t *)__srca);
  double v44 = v83[0];
  if ((LOWORD(v83[0]) & 0x2200) != 0) {
    goto LABEL_2;
  }
  BOOL v45 = v43;
  char v68 = v24;
  char v67 = v23;
  uint8x8_t v46 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v83[0]);
  v46.i16[0] = vaddlv_u8(v46);
  if (v46.u32[0] == 1 && (LOBYTE(v83[0]) & 0x10) != 0)
  {
    *(double *)__srca = v31;
    *((double *)__srca + 1) = v32;
    v83[0] = v17;
    LOBYTE(v82[0]) = v73;
    Calendar._adjustedDateForMismatchedHour(matchDate:compsToMatch:matchingPolicy:repeatedTimePolicy:isExactMatch:)(v83, (unsigned __int8 *)v82, v107, (uint64_t)v84);
    if ((LOBYTE(v84[1]) & 1) == 0)
    {
      double v49 = v84[0];
      *a10 = 1;
      *(double *)a9 = v49;
      *(unsigned char *)(a9 + 8) = 0;
      return;
    }
  }
  if (v45) {
    goto LABEL_2;
  }
  *(double *)__srca = v44;
  Calendar.ComponentSet.highestSetUnit.getter((char *)v84);
  int v47 = LOBYTE(v84[0]);
  if (LOBYTE(v84[0]) == 18) {
    goto LABEL_2;
  }
  LOBYTE(__srca[0]) = LOBYTE(v84[0]);
  Calendar.Component.nextHigherUnit.getter(&v86);
  int v48 = v86;
  if ((LODWORD(v44) & 0x10000) == 0 && v86 == 18) {
    goto LABEL_2;
  }
  if (v47)
  {
    if (v47 == 1 || v47 == 12) {
      int v48 = v47;
    }
  }
  else
  {
    int v48 = 1;
  }
  char v75 = v48;
  uint64_t ObjectType = swift_getObjectType();
  char v51 = *(void (**)(_OWORD *__return_ptr, uint64_t, void))(*(void *)&v32 + 24);
  swift_unknownObjectRetain();
  v51(__srca, ObjectType, *(void *)&v32);
  swift_unknownObjectRelease();
  char v66 = LOBYTE(__srca[0]);
  swift_unknownObjectRetain();
  __int16 v65 = ObjectType;
  v51(__srca, ObjectType, *(void *)&v32);
  swift_unknownObjectRelease();
  char v52 = v75;
  char v53 = LOBYTE(__srca[0]);
  if (v75 == 18)
  {
    char v54 = v107;
    if ((LODWORD(v44) & 0x10000) != 0) {
      goto LABEL_41;
    }
    __break(1u);
  }
  char v54 = v107;
  if ((LODWORD(v44) & 0x10000) != 0 || v75 == 1)
  {
LABEL_41:
    if (((v22 | v68) & 1) == 0)
    {
      if (v53 == 2)
      {
        if ((LODWORD(v44) & 0x10000) != 0)
        {
          v84[0] = v31;
          v84[1] = v32;
          v83[0] = v15;
          v82[0] = v16;
          *(double *)uint64_t v79 = v17;
          __srca[0] = v103;
          __srca[1] = v104;
          __srca[2] = v105;
          __srca[3] = v106;
          *(void *)&__srca[4] = v69;
          BYTE8(__srca[4]) = v22;
          *(_DWORD *)((char *)&__srca[4] + 9) = v102[0];
          HIDWORD(__srca[4]) = *(_DWORD *)((char *)v102 + 3);
          *(void *)&__srca[5] = v67;
          BYTE8(__srca[5]) = v68;
          *(_OWORD *)((char *)&__srca[16] + 9) = v100;
          *(_OWORD *)((char *)&__srca[5] + 9) = v89;
          *(_OWORD *)((char *)&__srca[9] + 9) = v93;
          *(_OWORD *)((char *)&__srca[8] + 9) = v92;
          *(_OWORD *)((char *)&__srca[7] + 9) = v91;
          *(_OWORD *)((char *)&__srca[6] + 9) = v90;
          *(_OWORD *)((char *)&__srca[13] + 9) = v97;
          *(_OWORD *)((char *)&__srca[12] + 9) = v96;
          *(_OWORD *)((char *)&__srca[11] + 9) = v95;
          *(_OWORD *)((char *)&__srca[10] + 9) = v94;
          BYTE9(__srca[17]) = v101;
          *(_OWORD *)((char *)&__srca[15] + 9) = v99;
          *(_OWORD *)((char *)&__srca[14] + 9) = v98;
          LOBYTE(v80) = v71;
          LOBYTE(v85) = v73;
          LOBYTE(v78) = v70;
          Calendar._adjustedDateForMismatchedChineseLeapMonth(start:searchingDate:matchDate:matchingComponents:compsToMatch:direction:matchingPolicy:repeatedTimePolicy:isExactMatch:isLeapDay:)((uint64_t)v83, (uint64_t)v82, (uint64_t)v79, (uint64_t)__dst, (uint64_t)__srca, (uint64_t)&v80, (uint64_t)&v85, (uint64_t)&v78, v54, a12);
          return;
        }
      }
      else if ((LOBYTE(v44) & 0xC) != 0)
      {
        v84[0] = v31;
        v84[1] = v32;
        v83[0] = v15;
        v82[0] = v16;
        *(double *)uint64_t v79 = v17;
        __srca[0] = v103;
        __srca[1] = v104;
        __srca[2] = v105;
        __srca[3] = v106;
        *(void *)&__srca[4] = v69;
        BYTE8(__srca[4]) = v22;
        *(_DWORD *)((char *)&__srca[4] + 9) = v102[0];
        HIDWORD(__srca[4]) = *(_DWORD *)((char *)v102 + 3);
        *(void *)&__srca[5] = v67;
        BYTE8(__srca[5]) = v68;
        *(_OWORD *)((char *)&__srca[16] + 9) = v100;
        *(_OWORD *)((char *)&__srca[5] + 9) = v89;
        *(_OWORD *)((char *)&__srca[9] + 9) = v93;
        *(_OWORD *)((char *)&__srca[8] + 9) = v92;
        *(_OWORD *)((char *)&__srca[7] + 9) = v91;
        *(_OWORD *)((char *)&__srca[6] + 9) = v90;
        *(_OWORD *)((char *)&__srca[13] + 9) = v97;
        *(_OWORD *)((char *)&__srca[12] + 9) = v96;
        *(_OWORD *)((char *)&__srca[11] + 9) = v95;
        *(_OWORD *)((char *)&__srca[10] + 9) = v94;
        BYTE9(__srca[17]) = v101;
        *(_OWORD *)((char *)&__srca[15] + 9) = v99;
        *(_OWORD *)((char *)&__srca[14] + 9) = v98;
        if (v75 == 18)
        {
          __break(1u);
        }
        else
        {
          LOBYTE(v80) = v75;
          LOBYTE(v85) = v71;
          LOBYTE(v78) = v73;
          uint64_t v77 = v70;
          Calendar._adjustedDateForMismatchedLeapMonthOrDay(start:searchingDate:matchDate:matchingComponents:compsToMatch:nextHighestUnit:direction:matchingPolicy:repeatedTimePolicy:isExactMatch:isLeapDay:)((uint64_t)v83, (uint64_t)v82, (uint64_t)v79, (uint64_t)__dst, (uint64_t)__srca, (uint64_t)&v80, (uint64_t)&v85, (uint64_t)&v78, &v77, v54, a12);
        }
        return;
      }
    }
LABEL_2:
    *(double *)a9 = v17;
    *(unsigned char *)(a9 + 8) = 0;
    return;
  }
  if (v75 != 2 || v66) {
    goto LABEL_49;
  }
  id v85 = 4;
  if (v17 <= 1.59271755e13) {
    char v55 = v17;
  }
  else {
    char v55 = 1.59271755e13;
  }
  char v56 = fmax(v55, -2.11845067e11);
  v83[0] = v56;
  uint64_t v57 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, void))(*(void *)&v32 + 192);
  v57((double *)__srca, &v85, v83, v65, *(void *)&v32);
  memcpy(v84, __srca, 0x11AuLL);
  outlined release of DateComponents((uint64_t)v84);
  if ((LOBYTE(v84[9]) & 1) != 0 || *(void *)&v84[8] != 2)
  {
    char v52 = v75;
LABEL_49:
    *(double *)__srca = v31;
    *((double *)__srca + 1) = v32;
    v84[0] = v16;
    LOBYTE(v83[0]) = v52;
    LOBYTE(v82[0]) = v71;
    LOBYTE(v79[0]) = v73;
    LOBYTE(v80) = v70;
    Calendar._matchingDate(after:matching:inNextHighestUnit:direction:matchingPolicy:repeatedTimePolicy:)(v84, __dst, v83, (unsigned __int8 *)v82, (unsigned __int8 *)v79, (unsigned __int8 *)&v80, (double *)a9);
    return;
  }
  LOBYTE(v79[0]) = 2;
  v82[0] = v56;
  (*(void (**)(double *__return_ptr, void *, double *, uint64_t, double))(*(void *)&v32 + 160))(v83, v79, v82, v65, COERCE_DOUBLE(*(void *)&v32));
  if (LOBYTE(v83[2])) {
    goto LABEL_2;
  }
  __int16 v58 = v83[1] + v83[0];
  if (v73 == 1)
  {
    *(void *)&uint64_t v59 = qword_18218B7E8[byte_1ECA4BA99] | qword_18218B7E8[byte_1ECA4BA98] | qword_18218B7E8[byte_1ECA4BA9A];
    v82[0] = v59;
    if (v15 <= 1.59271755e13) {
      uint64_t v60 = v15;
    }
    else {
      uint64_t v60 = 1.59271755e13;
    }
    v79[0] = fmax(v60, -2.11845067e11);
    v57(v83, (uint64_t *)v82, (double *)v79, v65, *(void *)&v32);
    if ((LOWORD(v59) & 0x4000) != 0)
    {
      v83[0] = v31;
      v83[1] = v32;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if (*(void *)&v83[2])
      {
        v82[0] = v83[2];
        v82[1] = v83[3];
        swift_unknownObjectRetain();
        Calendar.timeZone.setter((uint64_t *)v82);
      }
    }
    memcpy(v82, v83, 0x11AuLL);
    memcpy(v79, v83, 0x11AuLL);
    if (v58 <= 1.59271755e13) {
      __int16 v61 = v58;
    }
    else {
      __int16 v61 = 1.59271755e13;
    }
    unint64_t v78 = fmax(v61, -2.11845067e11);
    (*(void (**)(double *__return_ptr, void *, double *, void, uint64_t, double))(*(void *)&v32 + 200))(&v80, v79, &v78, 0, v65, COERCE_DOUBLE(*(void *)&v32));
    outlined release of DateComponents((uint64_t)v82);
    char v62 = v107;
    char v63 = a12;
    if (v81)
    {
      *(double *)a9 = v80;
      *(unsigned char *)(a9 + 8) = 1;
      return;
    }
    __int16 v58 = v80;
    uint64_t v64 = a9;
  }
  else
  {
    uint64_t v64 = a9;
    char v62 = v107;
    char v63 = a12;
  }
  *char v63 = 1;
  *char v62 = 0;
  *(double *)uint64_t v64 = v58;
  *(unsigned char *)(v64 + 8) = 0;
}

BOOL Calendar.date(_:containsMatchingComponents:)(void *a1, double *a2, uint64_t *a3)
{
  long long v4 = *((_OWORD *)a3 + 15);
  long long v5 = *((_OWORD *)a3 + 13);
  long long v92 = *((_OWORD *)a3 + 14);
  long long v93 = v4;
  long long v6 = *((_OWORD *)a3 + 15);
  v94[0] = *((_OWORD *)a3 + 16);
  long long v7 = *((_OWORD *)a3 + 11);
  long long v8 = *((_OWORD *)a3 + 9);
  long long v88 = *((_OWORD *)a3 + 10);
  long long v89 = v7;
  long long v9 = *((_OWORD *)a3 + 11);
  long long v10 = *((_OWORD *)a3 + 13);
  long long v90 = *((_OWORD *)a3 + 12);
  long long v91 = v10;
  long long v11 = *((_OWORD *)a3 + 7);
  long long v12 = *((_OWORD *)a3 + 5);
  long long v84 = *((_OWORD *)a3 + 6);
  long long v85 = v11;
  long long v13 = *((_OWORD *)a3 + 7);
  long long v14 = *((_OWORD *)a3 + 9);
  long long v86 = *((_OWORD *)a3 + 8);
  long long v87 = v14;
  long long v15 = *((_OWORD *)a3 + 3);
  long long v80 = *((_OWORD *)a3 + 2);
  long long v81 = v15;
  long long v16 = *((_OWORD *)a3 + 5);
  long long v18 = *((_OWORD *)a3 + 2);
  long long v17 = *((_OWORD *)a3 + 3);
  long long v82 = *((_OWORD *)a3 + 4);
  long long v83 = v16;
  *(_OWORD *)((char *)v94 + 9) = *(_OWORD *)((char *)a3 + 265);
  *(_OWORD *)((char *)&__src[16] + 9) = *(_OWORD *)((char *)a3 + 265);
  __src[14] = v92;
  __src[15] = v6;
  __src[16] = *((_OWORD *)a3 + 16);
  __src[10] = v88;
  __src[11] = v9;
  __src[12] = v90;
  __src[13] = v5;
  __src[6] = v84;
  __src[7] = v13;
  __src[8] = v86;
  __src[9] = v8;
  __src[2] = v18;
  __src[3] = v17;
  double v19 = *a2;
  uint64_t v20 = *a3;
  uint64_t v21 = a3[1];
  uint64_t v22 = a3[2];
  uint64_t v23 = a3[3];
  int v24 = *((unsigned __int8 *)a3 + 281);
  uint64_t v25 = *v3;
  uint64_t v26 = v3[1];
  *(void *)&__src[0] = *a3;
  *((void *)&__src[0] + 1) = v21;
  *(void *)&__src[1] = v22;
  *((void *)&__src[1] + 1) = v23;
  __src[4] = v82;
  __src[5] = v12;
  int v37 = v24;
  BYTE9(__src[17]) = v24;
  DateComponents.setUnits.getter(&v78);
  __int16 v27 = v78;
  *(void *)&__src[0] = v78;
  double v28 = 1.59271755e13;
  if (v19 <= 1.59271755e13) {
    double v28 = v19;
  }
  double v29 = fmax(v28, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  *(double *)__dst = v29;
  (*(void (**)(uint64_t *__return_ptr, _OWORD *, _OWORD *, uint64_t, uint64_t))(v26 + 192))(&v60, __src, __dst, ObjectType, v26);
  uint64_t v31 = v60;
  if ((v27 & 0x4000) != 0)
  {
    uint64_t v60 = v25;
    uint64_t v61 = v26;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if ((void)v62)
    {
      __src[0] = v62;
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)__src);
      uint64_t v31 = v60;
    }
    else
    {
      uint64_t v31 = v25;
    }
  }
  long long v32 = v62;
  *(_OWORD *)((char *)&__src[16] + 10) = *(_OWORD *)((char *)v77 + 10);
  __src[14] = v75;
  __src[15] = v76;
  __src[16] = v77[0];
  __src[10] = v71;
  __src[11] = v72;
  __src[12] = v73;
  __src[13] = v74;
  __src[6] = v67;
  __src[7] = v68;
  __src[8] = v69;
  __src[9] = v70;
  __src[2] = v63;
  __src[3] = v64;
  __src[4] = v65;
  __src[5] = v66;
  *(void *)&__src[0] = v31;
  *((void *)&__src[0] + 1) = v61;
  __src[1] = v62;
  if (v20)
  {
    *(void *)&__src[0] = v20;
    *((void *)&__src[0] + 1) = v21;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if ((void)v32)
    {
      __dst[0] = v32;
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)__dst);
    }
  }
  if (v22)
  {
    *(void *)&__src[1] = v22;
    *((void *)&__src[1] + 1) = v23;
    swift_unknownObjectRetain_n();
    swift_unknownObjectRelease();
    if (*(void *)&__src[0])
    {
      *(void *)&__dst[0] = v22;
      *((void *)&__dst[0] + 1) = v23;
      Calendar.timeZone.setter((uint64_t *)__dst);
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  memcpy(__dst, __src, 0x11AuLL);
  memcpy(v58, __src, 0x11AuLL);
  *(void *)&long long v39 = v20;
  *((void *)&v39 + 1) = v21;
  uint64_t v40 = v22;
  uint64_t v41 = v23;
  *(_OWORD *)&v56[9] = *(_OWORD *)((char *)v94 + 9);
  long long v54 = v92;
  long long v55 = v93;
  *(_OWORD *)char v56 = v94[0];
  long long v50 = v88;
  long long v51 = v89;
  long long v52 = v90;
  long long v53 = v91;
  long long v46 = v84;
  long long v47 = v85;
  long long v48 = v86;
  long long v49 = v87;
  long long v42 = v80;
  long long v43 = v81;
  long long v44 = v82;
  long long v45 = v83;
  char v57 = v37;
  BOOL v33 = specialized static DateComponents.== infix(_:_:)((uint64_t)v58, &v39);
  if (v33)
  {
    outlined release of DateComponents((uint64_t)__dst);
    *a1 = 0;
  }
  else
  {
    *(void *)&v58[0] = v20;
    *((void *)&v58[0] + 1) = v21;
    *(void *)&v58[1] = v22;
    *((void *)&v58[1] + 1) = v23;
    *(_OWORD *)((char *)&v58[16] + 9) = *(_OWORD *)((char *)v94 + 9);
    v58[14] = v92;
    v58[15] = v93;
    v58[16] = v94[0];
    v58[10] = v88;
    v58[11] = v89;
    v58[12] = v90;
    v58[13] = v91;
    v58[6] = v84;
    v58[7] = v85;
    v58[8] = v86;
    v58[9] = v87;
    v58[2] = v80;
    v58[3] = v81;
    v58[4] = v82;
    v58[5] = v83;
    BYTE9(v58[17]) = v37;
    DateComponents.mismatchedUnits(comparedTo:)((uint64_t)v58, (uint64_t *)&v39);
    outlined release of DateComponents((uint64_t)__dst);
    uint64_t v34 = v39;
    if ((v39 & 0x10000) != 0 && v37 == 2) {
      uint64_t v34 = v39 & 0xFFFFFFFFFFFEFFFFLL;
    }
    *a1 = v34;
  }
  return v33;
}

BOOL specialized static DateComponents.== infix(_:_:)(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  int v23 = *(unsigned __int8 *)(a1 + 281);
  char v3 = *((unsigned char *)a2 + 40);
  char v4 = *((unsigned char *)a2 + 56);
  char v5 = *((unsigned char *)a2 + 72);
  char v6 = *((unsigned char *)a2 + 216);
  if (*(unsigned char *)(a1 + 40))
  {
    if (!*((unsigned char *)a2 + 40)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(a1 + 32) != *((void *)a2 + 4)) {
      char v3 = 1;
    }
    if (v3) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 56))
  {
    if (!*((unsigned char *)a2 + 56)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(a1 + 48) != *((void *)a2 + 6)) {
      char v4 = 1;
    }
    if (v4) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 216))
  {
    if (!*((unsigned char *)a2 + 216)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(a1 + 208) != *((void *)a2 + 26)) {
      char v6 = 1;
    }
    if (v6) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 72))
  {
    if (!*((unsigned char *)a2 + 72)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(a1 + 64) != *((void *)a2 + 8)) {
      char v5 = 1;
    }
    if (v5) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 88))
  {
    if (!*((unsigned char *)a2 + 88)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(a1 + 80) == *((void *)a2 + 10)) {
      char v7 = *((unsigned char *)a2 + 88);
    }
    else {
      char v7 = 1;
    }
    if (v7) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 120))
  {
    if (!*((unsigned char *)a2 + 120)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(a1 + 112) == *((void *)a2 + 14)) {
      char v8 = *((unsigned char *)a2 + 120);
    }
    else {
      char v8 = 1;
    }
    if (v8) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 136))
  {
    if (!*((unsigned char *)a2 + 136)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(a1 + 128) == *((void *)a2 + 16)) {
      char v9 = *((unsigned char *)a2 + 136);
    }
    else {
      char v9 = 1;
    }
    if (v9) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 152))
  {
    if (!*((unsigned char *)a2 + 152)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(a1 + 144) == *((void *)a2 + 18)) {
      char v10 = *((unsigned char *)a2 + 152);
    }
    else {
      char v10 = 1;
    }
    if (v10) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 184))
  {
    if (!*((unsigned char *)a2 + 184)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(a1 + 176) == *((void *)a2 + 22)) {
      char v11 = *((unsigned char *)a2 + 184);
    }
    else {
      char v11 = 1;
    }
    if (v11) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 200))
  {
    if (!*((unsigned char *)a2 + 200)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(a1 + 192) == *((void *)a2 + 24)) {
      char v12 = *((unsigned char *)a2 + 200);
    }
    else {
      char v12 = 1;
    }
    if (v12) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 248))
  {
    if (!*((unsigned char *)a2 + 248)) {
      return 0;
    }
  }
  else
  {
    char v13 = *((unsigned char *)a2 + 248);
    if (*(void *)(a1 + 240) != *((void *)a2 + 30)) {
      char v13 = 1;
    }
    if (v13) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 264))
  {
    if (!*((unsigned char *)a2 + 264)) {
      return 0;
    }
  }
  else
  {
    char v14 = *((unsigned char *)a2 + 264);
    if (*(void *)(a1 + 256) != *((void *)a2 + 32)) {
      char v14 = 1;
    }
    if (v14) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 280))
  {
    if (!*((unsigned char *)a2 + 280)) {
      return 0;
    }
  }
  else
  {
    char v15 = *((unsigned char *)a2 + 280);
    if (*(void *)(a1 + 272) != *((void *)a2 + 34)) {
      char v15 = 1;
    }
    if (v15) {
      return 0;
    }
  }
  long long v21 = a2[1];
  long long v22 = *(_OWORD *)(a1 + 16);
  if (*(unsigned char *)(a1 + 168))
  {
    if (!*((unsigned char *)a2 + 168)) {
      return 0;
    }
  }
  else
  {
    char v16 = *((unsigned char *)a2 + 168);
    if (*(void *)(a1 + 160) != *((void *)a2 + 20)) {
      char v16 = 1;
    }
    if (v16) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 104))
  {
    if (!*((unsigned char *)a2 + 104)) {
      return 0;
    }
  }
  else
  {
    char v17 = *((unsigned char *)a2 + 104);
    if (*(void *)(a1 + 96) != *((void *)a2 + 12)) {
      char v17 = 1;
    }
    if (v17) {
      return 0;
    }
  }
  if (v23 != 2 && (v23 & 1) != 0)
  {
    if ((*((unsigned char *)a2 + 281) & 1) == 0) {
      return 0;
    }
  }
  else if (*((unsigned char *)a2 + 281))
  {
    return 0;
  }
  if (*(void *)a1)
  {
    v25[0] = *(_OWORD *)a1;
    if (!(void)v2)
    {
LABEL_111:
      swift_unknownObjectRetain();
      goto LABEL_113;
    }
    long long v24 = v2;
    swift_unknownObjectRetain_n();
    char v18 = specialized static Calendar.== infix(_:_:)((uint64_t)v25, (uint64_t)&v24);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if ((v18 & 1) == 0) {
      return 0;
    }
  }
  else if ((void)v2)
  {
LABEL_113:
    swift_unknownObjectRelease();
    return 0;
  }
  if ((void)v22)
  {
    v25[0] = v22;
    if ((void)v21)
    {
      long long v24 = v21;
      swift_unknownObjectRetain_n();
      char v19 = specialized static TimeZone.== infix(_:_:)((uint64_t)v25, (uint64_t)&v24);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return (v19 & 1) != 0;
    }
    goto LABEL_111;
  }
  if ((void)v21) {
    goto LABEL_113;
  }
  return 1;
}

uint64_t DateComponents.setUnits.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = v1[168];
  if (v1[56]) {
    uint64_t v3 = (v1[40] & 1) == 0;
  }
  else {
    uint64_t v3 = ((v1[40] & 1) == 0) | 2;
  }
  if (!v1[216]) {
    v3 |= 0x200uLL;
  }
  if (!v1[72]) {
    v3 |= 4uLL;
  }
  if (!v1[88]) {
    v3 |= 8uLL;
  }
  if (!v1[120]) {
    v3 |= 0x10uLL;
  }
  if (!v1[136]) {
    v3 |= 0x20uLL;
  }
  if (!v1[152]) {
    v3 |= 0x40uLL;
  }
  if (!v1[184]) {
    v3 |= 0x80uLL;
  }
  if (!v1[200]) {
    v3 |= 0x100uLL;
  }
  if (!v1[248]) {
    v3 |= 0x400uLL;
  }
  if (!v1[264]) {
    v3 |= 0x800uLL;
  }
  if (v1[280]) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = v3 | 0x1000;
  }
  if (!v1[104]) {
    v4 |= 0x40000uLL;
  }
  if (!v1[168]) {
    v4 |= 0x2000uLL;
  }
  *a1 = v4;
  return result;
}

uint64_t Calendar.identifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 24))(ObjectType, v1);
}

uint64_t specialized _NSSwiftCalendar.calendarIdentifier.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____NSSwiftCalendar__lock);
  long long v2 = v1 + 4;
  uint64_t v3 = v1 + 8;
  os_unfair_lock_lock(v1 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v2, &v8);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = *((void *)&v8 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(v4 + 24))(v7, ObjectType, v4);
  swift_unknownObjectRelease();
  return specialized static Calendar._toNSCalendarIdentifier(_:)(v7);
}

uint64_t specialized static Calendar._toNSCalendarIdentifier(_:)(char *a1)
{
  return **((void **)&unk_1E51F5AE8 + *a1);
}

uint64_t specialized static Calendar.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void (*v12)(long long *__return_ptr, uint64_t, uint64_t);
  int v13;
  void (*v14)(long long *__return_ptr, uint64_t, uint64_t);
  void (*v15)(long long *__return_ptr, uint64_t, uint64_t);
  void (*v16)(long long *__return_ptr, uint64_t, uint64_t);
  char v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;

  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96);
  if ((v5(ObjectType, v2) & 1) != 0
    || (uint64_t v6 = swift_getObjectType(),
        long long v47 = ObjectType,
        char v7 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 96),
        swift_unknownObjectRetain(),
        char v8 = v7(v6, v3),
        swift_unknownObjectRelease(),
        (v8 & 1) != 0))
  {
    char v9 = v5(ObjectType, v2);
    uint64_t v10 = swift_getObjectType();
    char v11 = v9 ^ (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 96))(v10, v3) ^ 1;
    return v11 & 1;
  }
  char v12 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v2 + 24);
  swift_unknownObjectRetain();
  v12(&v51, ObjectType, v2);
  swift_unknownObjectRelease();
  char v13 = v51;
  char v14 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v3 + 24);
  swift_unknownObjectRetain();
  v14(&v50, v6, v3);
  swift_unknownObjectRelease();
  if (v13 != v50) {
    goto LABEL_17;
  }
  char v15 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v2 + 48);
  swift_unknownObjectRetain();
  v15(&v51, ObjectType, v2);
  swift_unknownObjectRelease();
  long long v50 = v51;
  char v16 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  v16(&v49, v6, v3);
  swift_unknownObjectRelease();
  long long v48 = v49;
  char v17 = specialized static TimeZone.== infix(_:_:)((uint64_t)&v50, (uint64_t)&v48);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if ((v17 & 1) == 0) {
    goto LABEL_17;
  }
  char v18 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 56);
  swift_unknownObjectRetain();
  char v19 = v18(ObjectType, v2);
  swift_unknownObjectRelease();
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 56);
  swift_unknownObjectRetain();
  long long v21 = v20(v6, v3);
  swift_unknownObjectRelease();
  if (v19 != v21) {
    goto LABEL_17;
  }
  long long v22 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 72);
  swift_unknownObjectRetain();
  int v23 = v22(ObjectType, v2);
  swift_unknownObjectRelease();
  long long v24 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 72);
  swift_unknownObjectRetain();
  uint64_t v25 = v24(v6, v3);
  swift_unknownObjectRelease();
  if (v23 != v25) {
    goto LABEL_17;
  }
  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(ObjectType, v2);
  double v28 = v27;
  if (v26 == (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 40))(v6, v3) && v28 == v29)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    long long v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v11 = 0;
    if ((v30 & 1) == 0) {
      return v11 & 1;
    }
  }
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(ObjectType, v2);
  BOOL v33 = v32;
  uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 64);
  swift_unknownObjectRetain();
  long long v35 = v34(v6, v3);
  int v37 = v36;
  swift_unknownObjectRelease();
  if ((v33 & 1) == 0)
  {
    char v11 = 0;
    if ((v37 & 1) != 0 || v31 != v35) {
      return v11 & 1;
    }
    goto LABEL_19;
  }
  if ((v37 & 1) == 0)
  {
LABEL_17:
    char v11 = 0;
    return v11 & 1;
  }
LABEL_19:
  long long v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 80))(v47, v2);
  uint64_t v41 = v40;
  long long v42 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 80);
  swift_unknownObjectRetain();
  long long v43 = v42(v6, v3);
  long long v45 = v44;
  swift_unknownObjectRelease();
  if (v41) {
    char v11 = v45 & 1;
  }
  else {
    char v11 = (v45 & 1) == 0 && v39 == v43;
  }
  return v11 & 1;
}

void protocol witness for _LocaleProtocol.calendarIdentifier.getter in conformance _LocaleUnlocalized(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance ExpressionStructure.CodingKeys()
{
  return 0;
}

uint64_t protocol witness for _CalendarProtocol.timeZone.getter in conformance _CalendarGregorian@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 104);
  return swift_unknownObjectRetain();
}

uint64_t specialized static TimeZone.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void **)(a2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  char v5 = (uint64_t (*)(uint64_t, void *))v2[13];
  if (v5(ObjectType, v2))
  {
    uint64_t v6 = swift_getObjectType();
    char v7 = (uint64_t (*)(uint64_t, void *))v3[13];
    swift_unknownObjectRetain();
    char v8 = v7(v6, v3);
    swift_unknownObjectRelease();
    if (v8) {
      return 1;
    }
  }
  if (v5(ObjectType, v2)) {
    return 0;
  }
  uint64_t v10 = swift_getObjectType();
  char v11 = (uint64_t (*)(uint64_t, void *))v3[13];
  swift_unknownObjectRetain();
  char v12 = v11(v10, v3);
  swift_unknownObjectRelease();
  if (v12) {
    return 0;
  }
  char v13 = (uint64_t (*)(uint64_t, void *))v2[12];
  swift_unknownObjectRetain();
  uint64_t v14 = v13(ObjectType, v2);
  unint64_t v16 = v15;
  swift_unknownObjectRelease();
  if (v16 >> 60 == 15) {
    goto LABEL_10;
  }
  uint64_t v43 = v14;
  char v17 = v3;
  char v18 = (uint64_t (*)(uint64_t, void *))v3[12];
  swift_unknownObjectRetain();
  uint64_t v19 = v18(v10, v17);
  unint64_t v21 = v20;
  swift_unknownObjectRelease();
  if (v21 >> 60 == 15)
  {
    outlined consume of Data?(v43, v16);
    uint64_t v3 = v17;
LABEL_10:
    long long v22 = (uint64_t (*)(uint64_t, void *))v2[4];
    swift_unknownObjectRetain();
    uint64_t v23 = v22(ObjectType, v2);
    uint64_t v25 = v24;
    swift_unknownObjectRelease();
    uint64_t v26 = (uint64_t (*)(uint64_t, void *))v3[4];
    swift_unknownObjectRetain();
    uint64_t v27 = v26(v10, v3);
    uint64_t v29 = v28;
    swift_unknownObjectRelease();
    if (v23 == v27 && v25 == v29)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v30 & 1;
  }
  uint64_t v41 = v19;
  unint64_t v42 = v21;
  uint64_t v31 = (uint64_t (*)(uint64_t, void *))v2[4];
  swift_unknownObjectRetain();
  uint64_t v32 = v31(ObjectType, v2);
  uint64_t v34 = v33;
  swift_unknownObjectRelease();
  long long v35 = (uint64_t (*)(uint64_t, void *))v17[4];
  swift_unknownObjectRetain();
  uint64_t v36 = v35(v10, v17);
  uint64_t v38 = v37;
  swift_unknownObjectRelease();
  if (v32 == v36 && v34 == v38)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v39 = v41;
LABEL_18:
    char v30 = specialized static Data.== infix(_:_:)(v43, v16, v39, v42);
    outlined consume of Data?(v39, v42);
    outlined consume of Data?(v43, v16);
    return v30 & 1;
  }
  char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v39 = v41;
  if (v40) {
    goto LABEL_18;
  }
  outlined consume of Data?(v41, v42);
  outlined consume of Data?(v43, v16);
  return 0;
}

uint64_t getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
{
  return 0;
}

uint64_t protocol witness for _TimeZoneProtocol.identifier.getter in conformance _TimeZoneICU()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for _TimeZoneProtocol.data.getter in conformance _TimeZoneICU()
{
  return 0;
}

void Locale.hash(into:)(uint64_t a1)
{
  void (*v6)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned char *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  Swift::UInt v34;
  Swift::UInt v35;
  Swift::UInt8 v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  unsigned char v39[144];
  unsigned char v40[8];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  char v56;
  char v57;
  void v58[18];
  unsigned char v59[144];
  unsigned char v60[144];

  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v3 + 48))(ObjectType, v3))
  {
    Swift::UInt8 v5 = 1;
LABEL_5:
    Hasher._combine(_:)(v5);
    return;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 464);
  swift_unknownObjectRetain();
  v6(v58, ObjectType, v3);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v58, (uint64_t)v59);
  outlined init with take of LocalePreferences?((uint64_t)v59, (uint64_t)v60);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v60) == 1)
  {
    Swift::UInt8 v5 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v59, (uint64_t)v40);
  Hasher._combine(_:)(1u);
  if (v40[0] == 2)
  {
    char v7 = 0;
  }
  else
  {
    char v7 = v40[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v7);
  char v8 = v41;
  if (!v41)
  {
    Hasher._combine(_:)(0);
    char v13 = v40;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v8 + 16));
  char v9 = *(void *)(v8 + 16);
  if (!v9)
  {
    outlined init with take of LocalePreferences?((uint64_t)v59, (uint64_t)v39);
    char v13 = v39;
LABEL_20:
    outlined retain of LocalePreferences(v13);
    if (!v42) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  outlined release of LocalePreferences?((uint64_t)v59, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v10 = v8 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v10 += 16;
    --v9;
  }
  while (v9);
  swift_bridgeObjectRelease();
  if (!v42)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v43) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v43)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    char v11 = v44;
    if (!v44) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v11);
    swift_bridgeObjectRelease();
    char v12 = v45;
    if (!v45) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  char v11 = v44;
  if (v44) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  char v12 = v45;
  if (!v45)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v12);
  swift_bridgeObjectRelease();
LABEL_25:
  unint64_t v15 = v46;
  uint64_t v14 = v47;
  char v17 = v48;
  unint64_t v16 = v49;
  char v18 = v50;
  if (v46)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v19 = v14;
    unint64_t v20 = v17;
    unint64_t v21 = v16;
    long long v22 = v18;
    uint64_t v23 = v15;
    _CFObject.hash(into:)();
    if (v14) {
      goto LABEL_27;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v28 = v18;
    uint64_t v29 = v14;
    char v30 = v17;
    uint64_t v31 = v16;
    if (v14)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v24 = v14;
      _CFObject.hash(into:)();

      if (v17) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v17)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v25 = v17;
    _CFObject.hash(into:)();

    if (v16) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v18) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v16) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v26 = v16;
  _CFObject.hash(into:)();

  if (v18)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v27 = v18;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  uint64_t v27 = 0;
LABEL_36:

  uint64_t v32 = v51;
  if (v32)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v32);
    swift_bridgeObjectRelease();
    uint64_t v33 = v52;
    if (v52) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v53) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  uint64_t v33 = v52;
  if (!v52) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v33);
  swift_bridgeObjectRelease();
  if (!v53) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v54 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v34 = v54 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v34);
  }
  if (v55 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    long long v35 = v55 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v35);
  }
  if (v56 == 2)
  {
    uint64_t v36 = 0;
  }
  else
  {
    uint64_t v36 = v56 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v36);
  if (v57 == 2)
  {
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v38 = v57 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v37 = v38;
  }
  Hasher._combine(_:)(v37);
  outlined release of LocalePreferences?((uint64_t)v59, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined release of LocalePreferences?((uint64_t)v59, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
}

uint64_t specialized static Locale.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void (*v23)(void *__return_ptr, uint64_t, void *);
  void (*v24)(void *__return_ptr, uint64_t, uint64_t);
  char v25;
  uint64_t v26;
  long long v27;
  long long v28;
  long long v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  int v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  id v50;
  char v51;
  char v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  void *v66;
  long long v67;
  long long v68;
  long long v69;
  long long v70;
  long long v71;
  long long v72;
  long long v73;
  unsigned char v74[28];
  uint64_t v75;
  void *v76;
  long long v77;
  long long v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  long long v94;
  long long v95;
  long long v96;
  long long v97;
  long long v98;
  long long v99;
  long long v100;
  unsigned char v101[28];
  unsigned char v102[144];
  uint64_t v103;
  void v104[18];
  void v105[18];
  unsigned char v106[144];
  unsigned char v107[144];
  unsigned char v108[152];

  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  Swift::UInt8 v5 = (uint64_t (*)(uint64_t, void *))v2[6];
  if ((v5(ObjectType, v2) & 1) != 0
    || (uint64_t v6 = swift_getObjectType(),
        long long v65 = v3,
        char v7 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48),
        swift_unknownObjectRetain(),
        char v8 = v7(v6, v3),
        swift_unknownObjectRelease(),
        (v8 & 1) != 0))
  {
    if (v5(ObjectType, v2))
    {
      uint64_t v9 = swift_getObjectType();
      uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
      swift_unknownObjectRetain();
      char v11 = v10(v9, v3);
      swift_unknownObjectRelease();
      return v11 & 1;
    }
    return 0;
  }
  char v13 = (uint64_t (*)(uint64_t, void *))v2[8];
  swift_unknownObjectRetain();
  long long v63 = v13(ObjectType, v2);
  uint64_t v15 = v14;
  swift_unknownObjectRelease();
  unint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 64);
  swift_unknownObjectRetain();
  uint64_t v17 = v16(v6, v3);
  uint64_t v19 = v18;
  swift_unknownObjectRelease();
  if (v63 == v17 && v15 == v19)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v22 = 0;
    if ((v21 & 1) == 0) {
      return v22;
    }
  }
  uint64_t v23 = (void (*)(void *__return_ptr, uint64_t, void *))v2[58];
  swift_unknownObjectRetain();
  v23(v105, ObjectType, v2);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v106);
  uint64_t v24 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v65 + 464);
  swift_unknownObjectRetain();
  v24(v104, v6, v65);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v104, (uint64_t)v107);
  outlined init with take of LocalePreferences?((uint64_t)v106, (uint64_t)v108);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v108) != 1)
  {
    outlined init with take of LocalePreferences?((uint64_t)v106, (uint64_t)&v94);
    outlined init with take of LocalePreferences?((uint64_t)v107, (uint64_t)v102);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v102) == 1)
    {
      long long v73 = v100;
      *(_OWORD *)long long v74 = *(_OWORD *)v101;
      *(_OWORD *)&v74[12] = *(_OWORD *)&v101[12];
      long long v69 = v96;
      long long v70 = v97;
      long long v71 = v98;
      long long v72 = v99;
      long long v67 = v94;
      long long v68 = v95;
      outlined init with take of LocalePreferences?((uint64_t)v106, (uint64_t)&v75);
      outlined retain of LocalePreferences(&v75);
      outlined release of LocalePreferences(&v67);
      goto LABEL_17;
    }
    outlined init with take of LocalePreferences?((uint64_t)v107, (uint64_t)&v75);
    uint64_t v25 = v94;
    uint64_t v26 = *((void *)&v94 + 1);
    uint64_t v27 = v95;
    uint64_t v28 = v96;
    uint64_t v29 = v97;
    long long v64 = (void *)*((void *)&v98 + 1);
    long long v66 = (void *)v98;
    uint64_t v61 = (void *)*((void *)&v99 + 1);
    long long v62 = (void *)v99;
    uint64_t v59 = *((void *)&v100 + 1);
    uint64_t v60 = (void *)v100;
    char v57 = *(void *)&v101[8];
    __int16 v58 = *(void *)v101;
    char v30 = *(void *)&v101[16];
    long long v55 = v101[25];
    char v56 = v101[24];
    long long v53 = v101[27];
    long long v54 = v101[26];
    if (v94 == 2)
    {
      if (v75 != 2) {
        goto LABEL_57;
      }
    }
    else if (v75 == 2 || ((((v94 & 1) == 0) ^ v75) & 1) == 0)
    {
      goto LABEL_57;
    }
    if (*((void *)&v94 + 1))
    {
      if (!v76 || (specialized static Array<A>.== infix(_:_:)(*((void **)&v94 + 1), v76) & 1) == 0) {
        goto LABEL_57;
      }
    }
    else if (v76)
    {
      goto LABEL_57;
    }
    if (*((void *)&v27 + 1))
    {
      if (!*((void *)&v77 + 1) || v27 != v77 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_57;
      }
    }
    else if (*((void *)&v77 + 1))
    {
      goto LABEL_57;
    }
    if (*((void *)&v28 + 1))
    {
      if (!*((void *)&v78 + 1) || v28 != v78 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_57;
      }
    }
    else if (*((void *)&v78 + 1))
    {
      goto LABEL_57;
    }
    if ((void)v29)
    {
      if (!v79 || (specialized static Dictionary<>.== infix(_:_:)(v29, v79) & 1) == 0) {
        goto LABEL_57;
      }
    }
    else if (v79)
    {
      goto LABEL_57;
    }
    if (*((void *)&v29 + 1))
    {
      if (!v80 || (specialized static Dictionary<>.== infix(_:_:)(*((uint64_t *)&v29 + 1), v80) & 1) == 0) {
        goto LABEL_57;
      }
    }
    else if (v80)
    {
      goto LABEL_57;
    }
    uint64_t v22 = v81;
    long long v47 = v83;
    long long v49 = v82;
    unint64_t v42 = v85;
    long long v44 = v84;
    if (v66)
    {
      if (!v81)
      {
        outlined release of LocalePreferences?((uint64_t)v106, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        goto LABEL_62;
      }
      type metadata accessor for CFDictionaryRef(0);
      outlined release of LocalePreferences?((uint64_t)v106, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v38 = (id)v22;
      uint64_t v37 = v66;
      uint64_t v31 = static _CFObject.== infix(_:_:)();

      if ((v31 & 1) == 0)
      {
LABEL_58:
        outlined release of LocalePreferences?((uint64_t)v107, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
        uint64_t v22 = 0;
LABEL_60:
        LOBYTE(v67) = v25;
        *((void *)&v67 + 1) = v26;
        long long v68 = v27;
        long long v69 = v28;
        long long v70 = v29;
        *(void *)&long long v71 = v66;
        *((void *)&v71 + 1) = v64;
        *(void *)&long long v72 = v62;
        *((void *)&v72 + 1) = v61;
        *(void *)&long long v73 = v60;
        *((void *)&v73 + 1) = v59;
        *(void *)long long v74 = v58;
        *(void *)&v74[8] = v57;
        *(void *)&v74[16] = v30;
        v74[24] = v56;
        v74[25] = v55;
        v74[26] = v54;
        v74[27] = v53;
        outlined release of LocalePreferences(&v67);
        outlined release of LocalePreferences?((uint64_t)v106, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
        return v22;
      }
LABEL_64:
      if (v64)
      {
        if (!v49) {
          goto LABEL_58;
        }
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        long long v50 = v49;
        uint64_t v39 = v64;
        uint64_t v32 = static _CFObject.== infix(_:_:)();

        if ((v32 & 1) == 0) {
          goto LABEL_58;
        }
      }
      else if (v49)
      {
        goto LABEL_58;
      }
      if (v62)
      {
        if (!v47) {
          goto LABEL_58;
        }
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        long long v48 = v47;
        char v40 = v62;
        uint64_t v33 = static _CFObject.== infix(_:_:)();

        if ((v33 & 1) == 0) {
          goto LABEL_58;
        }
      }
      else if (v47)
      {
        goto LABEL_58;
      }
      if (v61)
      {
        if (!v44) {
          goto LABEL_58;
        }
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        long long v45 = v44;
        uint64_t v41 = v61;
        uint64_t v34 = static _CFObject.== infix(_:_:)();

        if ((v34 & 1) == 0) {
          goto LABEL_58;
        }
      }
      else if (v44)
      {
        goto LABEL_58;
      }
      if (v60)
      {
        if (!v42) {
          goto LABEL_58;
        }
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        long long v46 = v42;
        uint64_t v43 = v60;
        long long v35 = static _CFObject.== infix(_:_:)();

        if ((v35 & 1) == 0) {
          goto LABEL_58;
        }
      }
      else if (v42)
      {
        goto LABEL_58;
      }
      uint64_t v22 = v86;
      if (v59)
      {
        if (!v86) {
          goto LABEL_62;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        long long v51 = specialized static Dictionary<>.== infix(_:_:)(v59, v22);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v51 & 1) == 0) {
          goto LABEL_58;
        }
      }
      else if (v86)
      {
        goto LABEL_58;
      }
      uint64_t v22 = v87;
      if (!v58)
      {
        if (v87) {
          goto LABEL_58;
        }
        goto LABEL_94;
      }
      if (v87)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        long long v52 = specialized static Dictionary<>.== infix(_:_:)(v58, v22);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v52 & 1) == 0) {
          goto LABEL_58;
        }
LABEL_94:
        if (v30)
        {
          if (!v89 || (v57 != v88 || v30 != v89) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            goto LABEL_58;
          }
        }
        else if (v89)
        {
          goto LABEL_58;
        }
        if (v56 == 2)
        {
          if (v90 != 2) {
            goto LABEL_58;
          }
        }
        else if (v90 == 2 || ((v90 ^ v56) & 1) != 0)
        {
          goto LABEL_58;
        }
        uint64_t v36 = v91;
        if (v55 == 2)
        {
          outlined release of LocalePreferences?((uint64_t)v107, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
          if (v36 != 2) {
            goto LABEL_59;
          }
        }
        else
        {
          outlined release of LocalePreferences?((uint64_t)v107, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
          if (v36 == 2 || ((v36 ^ v55) & 1) != 0) {
            goto LABEL_59;
          }
        }
        if (v54 == 2)
        {
          if (v92 != 2) {
            goto LABEL_59;
          }
        }
        else
        {
          uint64_t v22 = 0;
          if (v92 == 2 || ((((v54 & 1) == 0) ^ v92) & 1) == 0) {
            goto LABEL_60;
          }
        }
        if (v53 == 2)
        {
          if (v93 != 2) {
            goto LABEL_59;
          }
        }
        else if (v93 == 2 || ((((v53 & 1) == 0) ^ v93) & 1) == 0)
        {
          goto LABEL_59;
        }
        uint64_t v22 = 1;
        goto LABEL_60;
      }
LABEL_62:
      outlined release of LocalePreferences?((uint64_t)v107, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
      goto LABEL_60;
    }
    if (!v81)
    {
      outlined init with take of LocalePreferences?((uint64_t)v106, (uint64_t)&v67);
      outlined retain of LocalePreferences(&v67);
      goto LABEL_64;
    }
LABEL_57:
    outlined release of LocalePreferences?((uint64_t)v106, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    goto LABEL_58;
  }
  outlined init with take of LocalePreferences?((uint64_t)v107, (uint64_t)v102);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v102) != 1)
  {
LABEL_17:
    outlined init with take of LocalePreferences?((uint64_t)v106, (uint64_t)v102);
    outlined init with take of LocalePreferences?((uint64_t)v107, (uint64_t)&v103);
    outlined release of (LocalePreferences?, LocalePreferences?)((uint64_t)v102);
    return 0;
  }
  return 1;
}

uint64_t default argument 1 of _typeName(_:qualified:)()
{
  return 1;
}

uint64_t outlined release of LocalePreferences?(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))
{
  return a1;
}

void *outlined retain of LocalePreferences(void *a1)
{
  uint64_t v2 = (void *)a1[8];
  uint64_t v4 = (void *)a1[9];
  uint64_t v3 = (void *)a1[10];
  Swift::UInt8 v5 = (void *)a1[11];
  char v12 = (void *)a1[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v2;
  id v7 = v4;
  id v8 = v3;
  id v9 = v5;
  id v10 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    id v9 = a2 + 7;
    for (uint64_t i = a1 + 7; ; i += 2)
    {
      BOOL v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t outlined release of (LocalePreferences?, LocalePreferences?)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 152);
  uint64_t v13 = *(void *)(a1 + 144);
  uint64_t v3 = *(void *)(a1 + 160);
  uint64_t v4 = *(void *)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 176);
  uint64_t v6 = *(void *)(a1 + 184);
  uint64_t v7 = *(void *)(a1 + 192);
  uint64_t v8 = *(void *)(a1 + 200);
  long long v12 = *(_OWORD *)(a1 + 208);
  long long v10 = *(_OWORD *)(a1 + 240);
  long long v11 = *(_OWORD *)(a1 + 224);
  outlined consume of LocalePreferences?(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void **)(a1 + 64), *(void **)(a1 + 72), *(void **)(a1 + 80), *(void **)(a1 + 88), *(void **)(a1 + 96));
  outlined consume of LocalePreferences?(v13, v2, v3, v4, v5, v6, v7, v8, (void *)v12, *((void **)&v12 + 1), (void *)v11, *((void **)&v11 + 1), (void *)v10);
  return a1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NSFileAttributeKey(void *a1, id *a2)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v4 = String._bridgeToObjectiveCImpl()();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = (id)v4;
  return result;
}

ValueMetadata *type metadata accessor for NSNotificationCenter.Publisher()
{
  return &type metadata for NSNotificationCenter.Publisher;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UInt32(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int32(a1, a2, (const char **)&selRef_initWithUnsignedInt_);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, void *a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, _PlistKeyedDecodingContainer.decode(_:forKey:)) & 1;
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, _PlistKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, _PlistKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, _PlistKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, _PlistKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, _PlistKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, _PlistKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, _PlistKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, _PlistKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, _PlistKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, _PlistKeyedDecodingContainer.decode(_:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, void *a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, _PlistKeyedDecodingContainer.decodeNil(forKey:)) & 1;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void, void, void))
{
  return a4(a1, *v4, v4[1], v4[2], a2[2], a2[3], a2[4], a2[5]) & 1;
}

uint64_t _PlistKeyedDecodingContainer.decodeNil(forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v47 = a4;
  uint64_t v53 = a3;
  uint64_t v52 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v50 = a8;
  uint64_t v51 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v40 = *(void *)(v15 - 8);
  uint64_t v41 = v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v37 - v16;
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v43 = (char *)&v37 - v20;
  uint64_t v44 = AssociatedConformanceWitness;
  uint64_t v21 = swift_getAssociatedTypeWitness();
  uint64_t v38 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  unint64_t v42 = (char *)&v37 - v22;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v45 = a1;
  uint64_t v48 = a5;
  uint64_t v49 = a7;
  uint64_t v23 = v53;
  uint64_t v24 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v23 + 16) && (unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25), (v27 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v17, *(void *)(v23 + 56) + *(void *)(v18 + 72) * v26, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v17, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v17, 1, 1, AssociatedTypeWitness);
  }
  uint64_t v28 = v52;
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v17, v41);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v45, v47, v48, v49, v29, v50, &demangling cache variable for type metadata for Any?.Type, &demangling cache variable for type metadata for Any?.Type.Type);
    swift_willThrow();
  }
  else
  {
    char v30 = v43;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v43, v17, AssociatedTypeWitness);
    uint64_t v28 = *(void *)(v28 + 24);
    uint64_t v31 = v44;
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 80);
    swift_unknownObjectRetain();
    uint64_t v33 = swift_checkMetadataState();
    uint64_t v34 = v42;
    uint64_t v35 = v46;
    v32(v30, v33, v31);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v30, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v35)
    {
      LOBYTE(v28) = (*(uint64_t (**)(char *))(v50 + 40))(v34);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v34, v21);
    }
  }
  return v28 & 1;
}

uint64_t _PlistKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v51 = a4;
  uint64_t v57 = a3;
  uint64_t v56 = a2;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v43 = *(void *)(v13 - 8);
  uint64_t v44 = v13;
  MEMORY[0x1F4188790](v13);
  unint64_t v42 = (char *)&v39 - v14;
  swift_getAssociatedTypeWitness();
  uint64_t v52 = a8;
  uint64_t v54 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v17 - 8);
  uint64_t v46 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v39 - v18;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v21);
  unint64_t v47 = (char *)&v39 - v22;
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v40 = *(void *)(v23 - 8);
  uint64_t v41 = v23;
  MEMORY[0x1F4188790](v23);
  uint64_t v48 = (char *)&v39 - v24;
  uint64_t v50 = a1;
  uint64_t v53 = a5;
  uint64_t v25 = v57;
  uint64_t v55 = a7;
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v25 + 16) && (unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v19, *(void *)(v25 + 56) + *(void *)(v20 + 72) * v28, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v19, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, 1, 1, AssociatedTypeWitness);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v19, v46);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v50, v51, v53, v55, v30, v52, &demangling cache variable for type metadata for Bool.Type, &demangling cache variable for type metadata for Bool.Type.Type);
    swift_willThrow();
  }
  else
  {
    uint64_t v31 = v47;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v47, v19, AssociatedTypeWitness);
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v33 = swift_checkMetadataState();
    uint64_t v35 = (uint64_t)v48;
    uint64_t v34 = v49;
    v32(v31, v33, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v31, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v34)
    {
      uint64_t v36 = v53;
      uint64_t AssociatedTypeWitness = *(void *)(v53 - 8);
      uint64_t v37 = (uint64_t)v42;
      (*(void (**)(char *, uint64_t, uint64_t))(AssociatedTypeWitness + 16))(v42, v50, v53);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(AssociatedTypeWitness + 56))(v37, 0, 1, v36);
      LOBYTE(AssociatedTypeWitness) = specialized _PlistDecoder.unwrapBool<A>(from:for:_:)(v35, v51, v37, v54, v36, v52, v55);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v37, v44);
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v35, v41);
    }
  }
  return AssociatedTypeWitness & 1;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t *v30;
  char *v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  uint64_t v54 = a4;
  __int16 v58 = a3;
  uint64_t v57 = a2;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v44 = *(void *)(v13 - 8);
  uint64_t v45 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v43 = (char *)&v40 - v14;
  swift_getAssociatedTypeWitness();
  unint64_t v51 = a8;
  uint64_t v52 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v17 - 8);
  unint64_t v47 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v40 - v18;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v48 = (char *)&v40 - v22;
  uint64_t v23 = v58;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v41 = *(void *)(v24 - 8);
  unint64_t v42 = v24;
  MEMORY[0x1F4188790](v24);
  uint64_t v49 = (char *)&v40 - v25;
  uint64_t v53 = a1;
  uint64_t v55 = a5;
  uint64_t v56 = a7;
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v23 + 16) && (unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v19, *(void *)(v23 + 56) + *(void *)(v20 + 72) * v28, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v19, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, 1, 1, AssociatedTypeWitness);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v19, v47);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v53, v54, v55, v56, v30, v51, &demangling cache variable for type metadata for Int.Type, &demangling cache variable for type metadata for Int.Type.Type);
    swift_willThrow();
  }
  else
  {
    uint64_t v31 = v48;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v48, v19, AssociatedTypeWitness);
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v33 = swift_checkMetadataState();
    uint64_t v35 = (uint64_t)v49;
    uint64_t v34 = v50;
    v32(v31, v33, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v31, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v34)
    {
      uint64_t v36 = v55;
      uint64_t v37 = *(void *)(v55 - 8);
      uint64_t v38 = v43;
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v43, v53, v55);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v38, 0, 1, v36);
      uint64_t AssociatedTypeWitness = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v35, v54, v38, v36, v56);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v38, v45);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v35, v42);
    }
  }
  return AssociatedTypeWitness;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t *v30;
  char *v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  uint64_t v54 = a4;
  __int16 v58 = a3;
  uint64_t v57 = a2;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v44 = *(void *)(v13 - 8);
  uint64_t v45 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v43 = (char *)&v40 - v14;
  swift_getAssociatedTypeWitness();
  unint64_t v51 = a8;
  uint64_t v52 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v17 - 8);
  unint64_t v47 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v40 - v18;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v48 = (char *)&v40 - v22;
  uint64_t v23 = v58;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v41 = *(void *)(v24 - 8);
  unint64_t v42 = v24;
  MEMORY[0x1F4188790](v24);
  uint64_t v49 = (char *)&v40 - v25;
  uint64_t v53 = a1;
  uint64_t v55 = a5;
  uint64_t v56 = a7;
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v23 + 16) && (unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v19, *(void *)(v23 + 56) + *(void *)(v20 + 72) * v28, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v19, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, 1, 1, AssociatedTypeWitness);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v19, v47);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v53, v54, v55, v56, v30, v51, &demangling cache variable for type metadata for Int64.Type, &demangling cache variable for type metadata for Int64.Type.Type);
    swift_willThrow();
  }
  else
  {
    uint64_t v31 = v48;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v48, v19, AssociatedTypeWitness);
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v33 = swift_checkMetadataState();
    uint64_t v35 = (uint64_t)v49;
    uint64_t v34 = v50;
    v32(v31, v33, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v31, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v34)
    {
      uint64_t v36 = v55;
      uint64_t v37 = *(void *)(v55 - 8);
      uint64_t v38 = v43;
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v43, v53, v55);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v38, 0, 1, v36);
      uint64_t AssociatedTypeWitness = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v35, v54, v38, v36, v56);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v38, v45);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v35, v42);
    }
  }
  return AssociatedTypeWitness;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t *v30;
  char *v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  uint64_t v54 = a4;
  __int16 v58 = a3;
  uint64_t v57 = a2;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v44 = *(void *)(v13 - 8);
  uint64_t v45 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v43 = (char *)&v40 - v14;
  swift_getAssociatedTypeWitness();
  unint64_t v51 = a8;
  uint64_t v52 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v17 - 8);
  unint64_t v47 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v40 - v18;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v48 = (char *)&v40 - v22;
  uint64_t v23 = v58;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v41 = *(void *)(v24 - 8);
  unint64_t v42 = v24;
  MEMORY[0x1F4188790](v24);
  uint64_t v49 = (char *)&v40 - v25;
  uint64_t v53 = a1;
  uint64_t v55 = a5;
  uint64_t v56 = a7;
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v23 + 16) && (unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v19, *(void *)(v23 + 56) + *(void *)(v20 + 72) * v28, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v19, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, 1, 1, AssociatedTypeWitness);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v19, v47);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v53, v54, v55, v56, v30, v51, &demangling cache variable for type metadata for UInt64.Type, &demangling cache variable for type metadata for UInt64.Type.Type);
    swift_willThrow();
  }
  else
  {
    uint64_t v31 = v48;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v48, v19, AssociatedTypeWitness);
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v33 = swift_checkMetadataState();
    uint64_t v35 = (uint64_t)v49;
    uint64_t v34 = v50;
    v32(v31, v33, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v31, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v34)
    {
      uint64_t v36 = v55;
      uint64_t v37 = *(void *)(v55 - 8);
      uint64_t v38 = v43;
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v43, v53, v55);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v38, 0, 1, v36);
      uint64_t AssociatedTypeWitness = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v35, v54, v38, v36, v56);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v38, v45);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v35, v42);
    }
  }
  return AssociatedTypeWitness;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t *v30;
  char *v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  uint64_t v54 = a4;
  __int16 v58 = a3;
  uint64_t v57 = a2;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v44 = *(void *)(v13 - 8);
  uint64_t v45 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v43 = (char *)&v40 - v14;
  swift_getAssociatedTypeWitness();
  unint64_t v51 = a8;
  uint64_t v52 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v17 - 8);
  unint64_t v47 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v40 - v18;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v48 = (char *)&v40 - v22;
  uint64_t v23 = v58;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v41 = *(void *)(v24 - 8);
  unint64_t v42 = v24;
  MEMORY[0x1F4188790](v24);
  uint64_t v49 = (char *)&v40 - v25;
  uint64_t v53 = a1;
  uint64_t v55 = a5;
  uint64_t v56 = a7;
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v23 + 16) && (unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v19, *(void *)(v23 + 56) + *(void *)(v20 + 72) * v28, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v19, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, 1, 1, AssociatedTypeWitness);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v19, v47);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v53, v54, v55, v56, v30, v51, &demangling cache variable for type metadata for Int32.Type, &demangling cache variable for type metadata for Int32.Type.Type);
    swift_willThrow();
  }
  else
  {
    uint64_t v31 = v48;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v48, v19, AssociatedTypeWitness);
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v33 = swift_checkMetadataState();
    uint64_t v35 = (uint64_t)v49;
    uint64_t v34 = v50;
    v32(v31, v33, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v31, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v34)
    {
      uint64_t v36 = v55;
      uint64_t v37 = *(void *)(v55 - 8);
      uint64_t v38 = v43;
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v43, v53, v55);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v38, 0, 1, v36);
      uint64_t AssociatedTypeWitness = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v35, v54, v38, v36, v56);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v38, v45);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v35, v42);
    }
  }
  return AssociatedTypeWitness;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t *v30;
  char *v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  uint64_t v54 = a4;
  __int16 v58 = a3;
  uint64_t v57 = a2;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v44 = *(void *)(v13 - 8);
  uint64_t v45 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v43 = (char *)&v40 - v14;
  swift_getAssociatedTypeWitness();
  unint64_t v51 = a8;
  uint64_t v52 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v17 - 8);
  unint64_t v47 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v40 - v18;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v48 = (char *)&v40 - v22;
  uint64_t v23 = v58;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v41 = *(void *)(v24 - 8);
  unint64_t v42 = v24;
  MEMORY[0x1F4188790](v24);
  uint64_t v49 = (char *)&v40 - v25;
  uint64_t v53 = a1;
  uint64_t v55 = a5;
  uint64_t v56 = a7;
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v23 + 16) && (unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v19, *(void *)(v23 + 56) + *(void *)(v20 + 72) * v28, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v19, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, 1, 1, AssociatedTypeWitness);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v19, v47);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v53, v54, v55, v56, v30, v51, &demangling cache variable for type metadata for Int8.Type, &demangling cache variable for type metadata for Int8.Type.Type);
    swift_willThrow();
  }
  else
  {
    uint64_t v31 = v48;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v48, v19, AssociatedTypeWitness);
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v33 = swift_checkMetadataState();
    uint64_t v35 = (uint64_t)v49;
    uint64_t v34 = v50;
    v32(v31, v33, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v31, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v34)
    {
      uint64_t v36 = v55;
      uint64_t v37 = *(void *)(v55 - 8);
      uint64_t v38 = v43;
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v43, v53, v55);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v38, 0, 1, v36);
      uint64_t AssociatedTypeWitness = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v35, v54, v38, v36, v56);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v38, v45);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v35, v42);
    }
  }
  return AssociatedTypeWitness;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t *v30;
  char *v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  uint64_t v54 = a4;
  __int16 v58 = a3;
  uint64_t v57 = a2;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v44 = *(void *)(v13 - 8);
  uint64_t v45 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v43 = (char *)&v40 - v14;
  swift_getAssociatedTypeWitness();
  unint64_t v51 = a8;
  uint64_t v52 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v17 - 8);
  unint64_t v47 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v40 - v18;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v48 = (char *)&v40 - v22;
  uint64_t v23 = v58;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v41 = *(void *)(v24 - 8);
  unint64_t v42 = v24;
  MEMORY[0x1F4188790](v24);
  uint64_t v49 = (char *)&v40 - v25;
  uint64_t v53 = a1;
  uint64_t v55 = a5;
  uint64_t v56 = a7;
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v23 + 16) && (unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v19, *(void *)(v23 + 56) + *(void *)(v20 + 72) * v28, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v19, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, 1, 1, AssociatedTypeWitness);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v19, v47);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v53, v54, v55, v56, v30, v51, &demangling cache variable for type metadata for UInt32.Type, &demangling cache variable for type metadata for UInt32.Type.Type);
    swift_willThrow();
  }
  else
  {
    uint64_t v31 = v48;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v48, v19, AssociatedTypeWitness);
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v33 = swift_checkMetadataState();
    uint64_t v35 = (uint64_t)v49;
    uint64_t v34 = v50;
    v32(v31, v33, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v31, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v34)
    {
      uint64_t v36 = v55;
      uint64_t v37 = *(void *)(v55 - 8);
      uint64_t v38 = v43;
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v43, v53, v55);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v38, 0, 1, v36);
      uint64_t AssociatedTypeWitness = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v35, v54, v38, v36, v56);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v38, v45);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v35, v42);
    }
  }
  return AssociatedTypeWitness;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t *v30;
  char *v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  uint64_t v54 = a4;
  __int16 v58 = a3;
  uint64_t v57 = a2;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v44 = *(void *)(v13 - 8);
  uint64_t v45 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v43 = (char *)&v40 - v14;
  swift_getAssociatedTypeWitness();
  unint64_t v51 = a8;
  uint64_t v52 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v17 - 8);
  unint64_t v47 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v40 - v18;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v48 = (char *)&v40 - v22;
  uint64_t v23 = v58;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v41 = *(void *)(v24 - 8);
  unint64_t v42 = v24;
  MEMORY[0x1F4188790](v24);
  uint64_t v49 = (char *)&v40 - v25;
  uint64_t v53 = a1;
  uint64_t v55 = a5;
  uint64_t v56 = a7;
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v23 + 16) && (unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v19, *(void *)(v23 + 56) + *(void *)(v20 + 72) * v28, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v19, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, 1, 1, AssociatedTypeWitness);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v19, v47);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v53, v54, v55, v56, v30, v51, &demangling cache variable for type metadata for Int16.Type, &demangling cache variable for type metadata for Int16.Type.Type);
    swift_willThrow();
  }
  else
  {
    uint64_t v31 = v48;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v48, v19, AssociatedTypeWitness);
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v33 = swift_checkMetadataState();
    uint64_t v35 = (uint64_t)v49;
    uint64_t v34 = v50;
    v32(v31, v33, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v31, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v34)
    {
      uint64_t v36 = v55;
      uint64_t v37 = *(void *)(v55 - 8);
      uint64_t v38 = v43;
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v43, v53, v55);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v38, 0, 1, v36);
      uint64_t AssociatedTypeWitness = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v35, v54, v38, v36, v56);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v38, v45);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v35, v42);
    }
  }
  return AssociatedTypeWitness;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t *v30;
  char *v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  uint64_t v54 = a4;
  __int16 v58 = a3;
  uint64_t v57 = a2;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v44 = *(void *)(v13 - 8);
  uint64_t v45 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v43 = (char *)&v40 - v14;
  swift_getAssociatedTypeWitness();
  unint64_t v51 = a8;
  uint64_t v52 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v17 - 8);
  unint64_t v47 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v40 - v18;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v48 = (char *)&v40 - v22;
  uint64_t v23 = v58;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v41 = *(void *)(v24 - 8);
  unint64_t v42 = v24;
  MEMORY[0x1F4188790](v24);
  uint64_t v49 = (char *)&v40 - v25;
  uint64_t v53 = a1;
  uint64_t v55 = a5;
  uint64_t v56 = a7;
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v23 + 16) && (unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v19, *(void *)(v23 + 56) + *(void *)(v20 + 72) * v28, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v19, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, 1, 1, AssociatedTypeWitness);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v19, v47);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v53, v54, v55, v56, v30, v51, &demangling cache variable for type metadata for UInt.Type, &demangling cache variable for type metadata for UInt.Type.Type);
    swift_willThrow();
  }
  else
  {
    uint64_t v31 = v48;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v48, v19, AssociatedTypeWitness);
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v33 = swift_checkMetadataState();
    uint64_t v35 = (uint64_t)v49;
    uint64_t v34 = v50;
    v32(v31, v33, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v31, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v34)
    {
      uint64_t v36 = v55;
      uint64_t v37 = *(void *)(v55 - 8);
      uint64_t v38 = v43;
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v43, v53, v55);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v38, 0, 1, v36);
      uint64_t AssociatedTypeWitness = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v35, v54, v38, v36, v56);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v38, v45);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v35, v42);
    }
  }
  return AssociatedTypeWitness;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t *v30;
  char *v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  uint64_t v54 = a4;
  __int16 v58 = a3;
  uint64_t v57 = a2;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v44 = *(void *)(v13 - 8);
  uint64_t v45 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v43 = (char *)&v40 - v14;
  swift_getAssociatedTypeWitness();
  unint64_t v51 = a8;
  uint64_t v52 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v17 - 8);
  unint64_t v47 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v40 - v18;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v48 = (char *)&v40 - v22;
  uint64_t v23 = v58;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v41 = *(void *)(v24 - 8);
  unint64_t v42 = v24;
  MEMORY[0x1F4188790](v24);
  uint64_t v49 = (char *)&v40 - v25;
  uint64_t v53 = a1;
  uint64_t v55 = a5;
  uint64_t v56 = a7;
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v23 + 16) && (unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v19, *(void *)(v23 + 56) + *(void *)(v20 + 72) * v28, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v19, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, 1, 1, AssociatedTypeWitness);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v19, v47);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v53, v54, v55, v56, v30, v51, &demangling cache variable for type metadata for UInt8.Type, &demangling cache variable for type metadata for UInt8.Type.Type);
    swift_willThrow();
  }
  else
  {
    uint64_t v31 = v48;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v48, v19, AssociatedTypeWitness);
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v33 = swift_checkMetadataState();
    uint64_t v35 = (uint64_t)v49;
    uint64_t v34 = v50;
    v32(v31, v33, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v31, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v34)
    {
      uint64_t v36 = v55;
      uint64_t v37 = *(void *)(v55 - 8);
      uint64_t v38 = v43;
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v43, v53, v55);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v38, 0, 1, v36);
      uint64_t AssociatedTypeWitness = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v35, v54, v38, v36, v56);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v38, v45);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v35, v42);
    }
  }
  return AssociatedTypeWitness;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t *v30;
  char *v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  uint64_t v54 = a4;
  __int16 v58 = a3;
  uint64_t v57 = a2;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v44 = *(void *)(v13 - 8);
  uint64_t v45 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v43 = (char *)&v40 - v14;
  swift_getAssociatedTypeWitness();
  unint64_t v51 = a8;
  uint64_t v52 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v17 - 8);
  unint64_t v47 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v40 - v18;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v48 = (char *)&v40 - v22;
  uint64_t v23 = v58;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v41 = *(void *)(v24 - 8);
  unint64_t v42 = v24;
  MEMORY[0x1F4188790](v24);
  uint64_t v49 = (char *)&v40 - v25;
  uint64_t v53 = a1;
  uint64_t v55 = a5;
  uint64_t v56 = a7;
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v23 + 16) && (unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v19, *(void *)(v23 + 56) + *(void *)(v20 + 72) * v28, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v19, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, 1, 1, AssociatedTypeWitness);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v19, v47);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v53, v54, v55, v56, v30, v51, &demangling cache variable for type metadata for UInt16.Type, &demangling cache variable for type metadata for UInt16.Type.Type);
    swift_willThrow();
  }
  else
  {
    uint64_t v31 = v48;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v48, v19, AssociatedTypeWitness);
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v33 = swift_checkMetadataState();
    uint64_t v35 = (uint64_t)v49;
    uint64_t v34 = v50;
    v32(v31, v33, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v31, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v34)
    {
      uint64_t v36 = v55;
      uint64_t v37 = *(void *)(v55 - 8);
      uint64_t v38 = v43;
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v43, v53, v55);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v38, 0, 1, v36);
      uint64_t AssociatedTypeWitness = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v35, v54, v38, v36, v56);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v38, v45);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v35, v42);
    }
  }
  return AssociatedTypeWitness;
}

uint64_t specialized _PlistDecoder.unwrapBool<A>(from:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v41 = a3;
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v40 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v39 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v38 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v34 - v19;
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(a6 + 40))(a1, a4, a6, v18))
  {
    uint64_t v34 = a7;
    unint64_t v35 = a2;
    uint64_t v37 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v36 = v21;
    *uint64_t v21 = MEMORY[0x1E4FBB390];
    uint64_t v22 = v38;
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 16);
    v23(v20, v41, v14);
    v23(v16, (uint64_t)v20, v14);
    uint64_t v24 = v40;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v16, 1, a5) == 1)
    {
      uint64_t v25 = *(void (**)(char *, uint64_t))(v22 + 8);
      v25(v16, v14);
      _CodingPathNode.path.getter(v35);
      v25(v20, v14);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v39, v16, a5);
      uint64_t v27 = _CodingPathNode.path.getter(v35);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v29 = v34;
      *(void *)(inited + 56) = a5;
      *(void *)(inited + 64) = v29;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      uint64_t v31 = v39;
      (*(void (**)(uint64_t *, char *, uint64_t))(v24 + 16))(boxed_opaque_existential_1, v39, a5);
      uint64_t v42 = v27;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v20, v14);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v31, a5);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v32 = v36;
    uint64_t v42 = 0;
    unint64_t v43 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void))(*(void *)(v37 - 8) + 104))(v32, *MEMORY[0x1E4FBBA80]);
    char v26 = swift_willThrow();
  }
  else
  {
    char v26 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 48))(a1, a2, v41, a5, a7, a4, a6);
  }
  return v26 & 1;
}

BOOL _PlistKeyedDecodingContainer.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a3 + 16) && (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10), (v12 & 1) != 0))
  {
    uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v8, *(void *)(a3 + 56) + *(void *)(v13 + 72) * v11, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v8, 1, 1, AssociatedTypeWitness);
  }
  swift_bridgeObjectRelease();
  BOOL v14 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v8, 1, AssociatedTypeWitness) != 1;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v14;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, JSONDecoderImpl.KeyedContainer.decode(_:forKey:)) & 1;
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, JSONDecoderImpl.KeyedContainer.decodeNil(forKey:)) & 1;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void))
{
  return a4(a1, *v4, v4[1], v4[2], *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1;
}

uint64_t JSONDecoderImpl.KeyedContainer.decodeNil(forKey:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a4 + 16) && (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12), (v14 & 1) != 0))
  {
    uint64_t v15 = *(void *)(a4 + 56) + 24 * v13;
    uint64_t v16 = *(void *)v15;
    uint64_t v17 = *(void *)(v15 + 8);
    int v18 = *(unsigned __int8 *)(v15 + 16);
    swift_bridgeObjectRelease();
    if (v17 | v16) {
      BOOL v19 = 0;
    }
    else {
      BOOL v19 = v18 == 160;
    }
    char v20 = v19;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context));
    v23[3] = a5;
    void v23[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v23);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
    _CodingPathNode.path.getter(a3);
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v25._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._uint64_t countAndFlagsBits = 2238496;
    v26._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v26);
    v27._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._uint64_t countAndFlagsBits = 3025186;
    v28._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v28);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v23, *MEMORY[0x1E4FBBA68], v21);
    swift_willThrow();
  }
  return v20 & 1;
}

uint64_t JSONDecoderImpl.KeyedContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(void *)(a4 + 16) || (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12), (v14 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context));
    v21[3] = a5;
    v21[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v21);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
    _CodingPathNode.path.getter(a3);
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = 2238496;
    v24._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v24);
    v25._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._uint64_t countAndFlagsBits = 3025186;
    v26._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v26);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, *MEMORY[0x1E4FBBA68], v19);
LABEL_6:
    swift_willThrow();
    return v18 & 1;
  }
  uint64_t v15 = *(void *)(a4 + 56) + 24 * v13;
  uint64_t v16 = *(void *)v15;
  int v17 = *(unsigned __int8 *)(v15 + 16);
  swift_bridgeObjectRelease();
  if ((v17 & 0xE0) != 0x40)
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    JSONDecoderImpl.KeyedContainer.createTypeMismatchError(type:forKey:value:)(MEMORY[0x1E4FBB390], a1, v17, a3, v28, a5, a6);
    goto LABEL_6;
  }
  char v18 = v16 & 1;
  return v18 & 1;
}

uint64_t JSONDecoderImpl.KeyedContainer.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_bridgeObjectRetain();
  uint64_t v5 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a4 + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    char v8 = v7;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v8 = 0;
  }
  return v8 & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Locale.CodingKeys()
{
  if (*v0) {
    return 0x746E6572727563;
  }
  else {
    return 0x696669746E656469;
  }
}

uint64_t specialized _PlistDecoder.unwrapBool<A>(from:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  unsigned __int8 v28 = a6;
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a8 + 40))(a1, a7, a8))
  {
    uint64_t v12 = type metadata accessor for DecodingError();
    swift_allocError();
    char v14 = v13;
    void *v13 = MEMORY[0x1E4FBB390];
    char v15 = v28;
    if (v28 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      uint64_t v17 = v26;
      uint64_t v16 = v27;
      uint64_t v18 = v25;
      outlined copy of _CodingKey(v25, v26, v27, v28);
      outlined copy of _CodingKey(v25, v26, v27, v28);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v20 = swift_allocObject();
      *(void *)(inited + 32) = v20;
      *(void *)(v20 + 16) = v18;
      *(void *)(v20 + 24) = v17;
      *(void *)(v20 + 32) = v16;
      *(unsigned char *)(v20 + 40) = v15;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v18, v17, v16, v15);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v14, *MEMORY[0x1E4FBBA80], v12);
    char v23 = swift_willThrow();
  }
  else
  {
    uint64_t v21 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a8 + 48);
    unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    char v23 = v21(a1, a2, &v25, &type metadata for _CodingKey, v22, a7, a8);
  }
  return v23 & 1;
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapBool<A>(from:for:_:) in conformance _BPlistDecodingFormat(unint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static _BPlistDecodingFormat.unwrapBool<A>(from:for:_:)(*a1, a2, a3, a4, a5) & 1;
}

uint64_t static _BPlistDecodingFormat.unwrapBool<A>(from:for:_:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v30 = a5;
  unint64_t v31 = a2;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v32 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  unint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v28 - v15;
  if (a1 >> 60 == 6)
  {
    char v18 = *(unsigned char *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
  }
  else
  {
    unint64_t v29 = a1;
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16);
    v19((char *)&v28 - v15, a3, v10, v16);
    ((void (*)(char *, char *, uint64_t))v19)(v13, v17, v10);
    uint64_t v20 = v32;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v13, 1, a4) == 1)
    {
      uint64_t v21 = *(void (**)(char *, uint64_t))(v11 + 8);
      v21(v13, v10);
      _CodingPathNode.path.getter(v31);
      v21(v17, v10);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v9, v13, a4);
      uint64_t v22 = _CodingPathNode.path.getter(v31);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v24 = v30;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v24;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v20 + 16))(boxed_opaque_existential_1, v9, a4);
      uint64_t v33 = v22;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v9, a4);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(MEMORY[0x1E4FBB390], v29, (uint64_t (*)(uint64_t))BPlistMap.Value.debugDataTypeDescription.getter, v26);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  return v18 & 1;
}

uint64_t PredicateExpressions.KeyPath.keyPath.getter()
{
  return swift_retain();
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__6(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__7(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__8(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__9(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__11(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__12(uint64_t a1, uint64_t a2)
{
}

{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void __Block_byref_object_copy__13(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__14(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__15(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__16(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__17(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__18(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__19(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__20(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__21(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__22(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__23(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__24(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__25(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__26(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__27(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__28(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__29(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__30(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__31(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__32(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__33(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__34(uint64_t a1, uint64_t a2)
{
}

void protocol witness for Hashable.hash(into:) in conformance ExpressionStructure.CodingKeys()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Calendar()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v1 + 120))(v4, ObjectType, v1);
  return Hasher._finalize()();
}

void _CalendarGregorian.hash(into:)(uint64_t a1)
{
  Hasher._combine(_:)(0);
  uint64_t v3 = *(void *)(v1 + 112);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 112);
  swift_unknownObjectRetain();
  v5(a1, ObjectType, v3);
  swift_unknownObjectRelease();
  Swift::UInt v6 = _CalendarGregorian.firstWeekday.getter();
  Hasher._combine(_:)(v6);
  if (*(unsigned char *)(v1 + 144) == 1)
  {
    if (*(void *)(v1 + 88))
    {
      uint64_t v7 = *(void *)(v1 + 96);
      uint64_t v8 = swift_getObjectType();
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 344);
      swift_unknownObjectRetain();
      Swift::UInt v10 = v9(v8, v7);
      swift_unknownObjectRelease();
    }
    else
    {
      Swift::UInt v10 = 1;
    }
  }
  else
  {
    Swift::UInt v10 = *(void *)(v1 + 136);
  }
  Hasher._combine(_:)(v10);
  if (*(void *)(v1 + 88))
  {
    uint64_t v11 = *(void *)(v1 + 96);
    uint64_t v12 = swift_getObjectType();
    unint64_t v13 = *(void (**)(uint64_t, uint64_t))(v11 + 64);
    swift_unknownObjectRetain();
    v13(v12, v11);
    swift_unknownObjectRelease();
  }
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TimeZone(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 112))(a1, ObjectType, v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TimeZone()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v1 + 112))(v4, ObjectType, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for _TimeZoneProtocol.hash(into:) in conformance _TimeZoneICU()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

double NSOrderedSet.makeIterator()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = swift_unknownObjectRetain();

  return NSFastEnumerationIterator.init(_:)(v2, a1);
}

Foundation::DateInterval __swiftcall DateInterval.init(start:end:)(Foundation::Date start, Foundation::Date end)
{
  double v5 = *v2;
  double v6 = *v3;
  if (*v3 < *v2)
  {
    __break(1u);
  }
  else
  {
    double v6 = v6 - v5;
    *uint64_t v4 = v5;
    v4[1] = v6;
  }
  result.duration = v6;
  result.start = *(Foundation::Date *)&v5;
  return result;
}

Swift::Void __swiftcall URLComponents._URLComponents.setQueryItems(_:)(Swift::OpaquePointer_optional a1)
{
  *(unsigned char *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 15) = 0;
  if (!a1.value._rawValue)
  {
    swift_bridgeObjectRelease();
    *(void *)(v1 + 120) = 0;
    *(void *)(v1 + 128) = 0;
    return;
  }
  rawValue = (char *)a1.value._rawValue;
  int64_t v3 = *((void *)a1.value._rawValue + 2);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    *(_OWORD *)(v1 + 120) = xmmword_182107DC0;
    return;
  }
  uint64_t v103 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  uint64_t v4 = 0;
  double v5 = rawValue + 32;
  int v97 = (char *)&v99 + 1;
  int v98 = rawValue + 32;
  while (1)
  {
    double v6 = (uint64_t *)&v5[32 * v4];
    uint64_t v8 = *v6;
    unint64_t v7 = v6[1];
    unint64_t v10 = v6[2];
    unint64_t v9 = v6[3];
    uint64_t v101 = 0;
    unint64_t v102 = 0xE000000000000000;
    if ((v7 & 0x1000000000000000) == 0)
    {
      if ((v7 & 0x2000000000000000) == 0)
      {
        if ((v8 & 0x1000000000000000) != 0)
        {
          uint64_t v11 = (char *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v12 = v8 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v11 = (char *)_StringObject.sharedUTF8.getter();
          if (!v11)
          {
LABEL_77:
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_78;
          }
        }
        if (!v12) {
          goto LABEL_77;
        }
        if ((*v11 & 0x80000000) == 0)
        {
          int v13 = *v11;
          uint64_t v14 = v12 - 1;
          uint64_t v15 = v11 + 1;
          while (1)
          {
            if ((v13 - 39) >= 9 && v13 != 33 && v13 != 36)
            {
              if (v13 == 38) {
                goto LABEL_45;
              }
              unsigned int v17 = v13 - 58;
              if ((v13 - 58) <= 0xFFFFFFF5)
              {
                if (v17 > 6) {
                  goto LABEL_22;
                }
                if (((1 << v17) & 0x63) == 0) {
                  break;
                }
              }
            }
LABEL_12:
            if (!v14) {
              goto LABEL_77;
            }
            int v16 = *v15++;
            int v13 = v16;
            --v14;
            if (v16 < 0) {
              goto LABEL_45;
            }
          }
          if (v13 == 61) {
            goto LABEL_45;
          }
LABEL_22:
          if (v13 != 95 && (v13 - 65) >= 0x1A && v13 != 126 && (v13 - 97) >= 0x1A) {
            goto LABEL_45;
          }
          goto LABEL_12;
        }
        goto LABEL_45;
      }
      uint64_t v18 = HIBYTE(v7) & 0xF;
      unint64_t v99 = v8;
      uint64_t v100 = v7 & 0xFFFFFFFFFFFFFFLL;
      if (!v18) {
        goto LABEL_77;
      }
      if ((v8 & 0x80) != 0)
      {
LABEL_45:
        swift_bridgeObjectRetain();
        uint64_t v24 = swift_bridgeObjectRetain();
        goto LABEL_46;
      }
      int v19 = v8;
      uint64_t v20 = v18 - 1;
      uint64_t v21 = v97;
      while (1)
      {
        if ((v19 - 39) >= 9 && v19 != 33 && v19 != 36)
        {
          if (v19 == 38) {
            goto LABEL_45;
          }
          unsigned int v23 = v19 - 58;
          if ((v19 - 58) <= 0xFFFFFFF5)
          {
            if (v23 > 6) {
              goto LABEL_41;
            }
            if (((1 << v23) & 0x63) == 0) {
              break;
            }
          }
        }
LABEL_31:
        if (!v20) {
          goto LABEL_77;
        }
        int v22 = *v21++;
        int v19 = v22;
        --v20;
        if (v22 < 0) {
          goto LABEL_45;
        }
      }
      if (v19 == 61) {
        goto LABEL_45;
      }
LABEL_41:
      if (v19 != 95 && (v19 - 65) >= 0x1A && v19 != 126 && (v19 - 97) >= 0x1A) {
        goto LABEL_45;
      }
      goto LABEL_31;
    }
    unint64_t v99 = v8;
    uint64_t v100 = v7;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    uint64_t v34 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    unint64_t v35 = (unsigned __int16 *)objc_msgSend(v34, sel__fastCharacterContents);
    id v36 = v34;
    if (!v35) {
      break;
    }
    uint64_t v37 = v35;
    unint64_t v99 = v8;
    uint64_t v100 = v7;
    StringProtocol._ephemeralString.getter();
    uint64_t v38 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v39 = objc_msgSend(v38, sel_length);
    swift_unknownObjectRelease();
    if (!v39)
    {
LABEL_137:
      swift_bridgeObjectRelease_n();
      double v5 = v98;
      goto LABEL_78;
    }
    uint64_t v40 = v37;
    unsigned int v41 = *v37;
    double v5 = v98;
    if (v41 >= 0x80)
    {
LABEL_75:
      uint64_t v24 = swift_bridgeObjectRelease_n();
LABEL_46:
      uint64_t v25 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0) {
        uint64_t v25 = v8 & 0xFFFFFFFFFFFFLL;
      }
      if (v25)
      {
        unint64_t v99 = v8;
        uint64_t v100 = v7;
        MEMORY[0x1F4188790](v24);
        long long v92 = &v99;
        char v93 = 0x80;
        swift_bridgeObjectRetain();
        uint64_t v26 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)v91, v8, v7);
        if (v27)
        {
          unint64_t v28 = (unint64_t)v26;
          unint64_t v29 = v27;
        }
        else
        {
          unint64_t v30 = v99;
          unint64_t v31 = v100;
          swift_bridgeObjectRetain();
          unint64_t v28 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v30, v31, 0x80u);
          unint64_t v29 = v32;
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v28 = 0;
        unint64_t v29 = (void *)0xE000000000000000;
      }
      v33._uint64_t countAndFlagsBits = v28;
      v33._unint64_t object = v29;
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      double v5 = v98;
      if (v9) {
        goto LABEL_79;
      }
LABEL_55:
      swift_bridgeObjectRelease();
      goto LABEL_151;
    }
    uint64_t v42 = 2 * (void)v39 - 2;
    unint64_t v43 = v40 + 1;
    while (1)
    {
      if (v41 - 39 >= 9 && v41 != 33 && v41 != 36)
      {
        if (v41 == 38) {
          goto LABEL_75;
        }
        if ((v41 - 58) <= 0xF5u)
        {
          if (v41 - 58 <= 6)
          {
            if (((1 << (v41 - 58)) & 0x63) != 0) {
              goto LABEL_61;
            }
            if (v41 == 61) {
              goto LABEL_75;
            }
          }
          if (v41 != 95
            && (v41 - 65) >= 0x1Au
            && v41 != 126
            && (v41 - 97) >= 0x1Au)
          {
            goto LABEL_75;
          }
        }
      }
LABEL_61:
      if (!v42) {
        break;
      }
      unsigned int v44 = *v43++;
      LOBYTE(v41) = v44;
      v42 -= 2;
      if (v44 >= 0x80) {
        goto LABEL_75;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_78:
    v45._uint64_t countAndFlagsBits = v8;
    v45._unint64_t object = (void *)v7;
    String.append(_:)(v45);
    if (!v9) {
      goto LABEL_55;
    }
LABEL_79:
    swift_bridgeObjectRetain();
    v46._uint64_t countAndFlagsBits = 61;
    v46._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v46);
    if ((v9 & 0x1000000000000000) != 0)
    {
      unint64_t v99 = v10;
      uint64_t v100 = v9;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      uint64_t v60 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v61 = (unsigned __int16 *)objc_msgSend(v60, sel__fastCharacterContents);
      id v62 = v60;
      if (v61)
      {
        unint64_t v99 = v10;
        uint64_t v100 = v9;
        StringProtocol._ephemeralString.getter();
        long long v63 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v64 = objc_msgSend(v63, sel_length);
        swift_unknownObjectRelease();
        char v65 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v61, (uint64_t)v64, 0x80u, 0);
      }
      else
      {
        char v65 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v10, v9, 0x80u, 0);
      }
      char v70 = v65;
      unint64_t v47 = (char *)swift_bridgeObjectRelease_n();
      double v5 = v98;
      if (v70) {
        goto LABEL_142;
      }
      goto LABEL_143;
    }
    if ((v9 & 0x2000000000000000) != 0)
    {
      uint64_t v54 = HIBYTE(v9) & 0xF;
      unint64_t v99 = v10;
      uint64_t v100 = v9 & 0xFFFFFFFFFFFFFFLL;
      if (!v54) {
        goto LABEL_142;
      }
      if ((v10 & 0x80) != 0) {
        goto LABEL_143;
      }
      int v55 = v10;
      uint64_t v56 = v54 - 1;
      uint64_t v57 = v97;
      while (2)
      {
        if ((v55 - 39) >= 9 && v55 != 33 && v55 != 36)
        {
          if (v55 == 38) {
            goto LABEL_143;
          }
          unsigned int v59 = v55 - 58;
          if ((v55 - 58) <= 0xFFFFFFF5)
          {
            if (v59 > 6)
            {
LABEL_116:
              if (v55 != 95 && (v55 - 65) >= 0x1A && v55 != 126 && (v55 - 97) >= 0x1A) {
                goto LABEL_143;
              }
            }
            else if (((1 << v59) & 0x63) == 0)
            {
              if (v55 == 61) {
                goto LABEL_143;
              }
              goto LABEL_116;
            }
          }
        }
        if (!v56) {
          goto LABEL_142;
        }
        int v58 = *v57++;
        int v55 = v58;
        --v56;
        if (v58 < 0) {
          goto LABEL_143;
        }
        continue;
      }
    }
    if ((v10 & 0x1000000000000000) != 0)
    {
      unint64_t v47 = (char *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v48 = v10 & 0xFFFFFFFFFFFFLL;
      goto LABEL_83;
    }
    unint64_t v47 = (char *)_StringObject.sharedUTF8.getter();
    if (!v47)
    {
LABEL_142:
      v71._uint64_t countAndFlagsBits = v10;
      v71._unint64_t object = (void *)v9;
      String.append(_:)(v71);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_152;
    }
LABEL_83:
    if (!v48) {
      goto LABEL_142;
    }
    if ((*v47 & 0x80000000) == 0)
    {
      int v49 = *v47;
      uint64_t v50 = v48 - 1;
      unint64_t v51 = v47 + 1;
      while (1)
      {
        if ((v49 - 39) >= 9 && v49 != 33 && v49 != 36)
        {
          if (v49 == 38) {
            goto LABEL_143;
          }
          unsigned int v53 = v49 - 58;
          if ((v49 - 58) <= 0xFFFFFFF5)
          {
            if (v53 > 6) {
              goto LABEL_97;
            }
            if (((1 << v53) & 0x63) == 0) {
              break;
            }
          }
        }
LABEL_87:
        if (!v50) {
          goto LABEL_142;
        }
        int v52 = *v51++;
        int v49 = v52;
        --v50;
        if (v52 < 0) {
          goto LABEL_143;
        }
      }
      if (v49 == 61) {
        goto LABEL_143;
      }
LABEL_97:
      if (v49 != 95 && (v49 - 65) >= 0x1A && v49 != 126 && (v49 - 97) >= 0x1A) {
        goto LABEL_143;
      }
      goto LABEL_87;
    }
LABEL_143:
    uint64_t v72 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0) {
      uint64_t v72 = v10 & 0xFFFFFFFFFFFFLL;
    }
    if (v72)
    {
      unint64_t v99 = v10;
      uint64_t v100 = v9;
      MEMORY[0x1F4188790](v47);
      long long v92 = &v99;
      char v93 = 0x80;
      swift_bridgeObjectRetain();
      long long v73 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)v91, v10, v9);
      if (v74)
      {
        unint64_t v75 = (unint64_t)v73;
        long long v76 = v74;
        swift_bridgeObjectRelease_n();
      }
      else
      {
        unint64_t v77 = v99;
        unint64_t v78 = v100;
        swift_bridgeObjectRetain();
        unint64_t v75 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v77, v78, 0x80u);
        long long v76 = v79;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v75 = 0;
      long long v76 = (void *)0xE000000000000000;
    }
    v80._uint64_t countAndFlagsBits = v75;
    v80._unint64_t object = v76;
    String.append(_:)(v80);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_151:
    swift_bridgeObjectRelease();
LABEL_152:
    uint64_t v82 = v101;
    unint64_t v81 = v102;
    uint64_t v83 = v103;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v83 + 16) + 1, 1);
      uint64_t v83 = v103;
    }
    unint64_t v85 = *(void *)(v83 + 16);
    unint64_t v84 = *(void *)(v83 + 24);
    if (v85 >= v84 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v84 > 1, v85 + 1, 1);
      uint64_t v83 = v103;
    }
    ++v4;
    *(void *)(v83 + 16) = v85 + 1;
    uint64_t v86 = v83 + 16 * v85;
    *(void *)(v86 + 32) = v82;
    *(void *)(v86 + 40) = v81;
    if (v4 == v3)
    {
      uint64_t v101 = v83;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
      uint64_t v87 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v89 = v88;
      swift_release();
      uint64_t v90 = v96;
      swift_bridgeObjectRelease();
      *(void *)(v90 + 120) = v87;
      *(void *)(v90 + 128) = v89;
      return;
    }
  }
  if ((v7 & 0x2000000000000000) != 0) {
    unint64_t v66 = HIBYTE(v7) & 0xF;
  }
  else {
    unint64_t v66 = v8 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v94 = 4 << ((v8 & 0x800000000000000) != 0);
  uint64_t v95 = 4 * v66;
  unint64_t v67 = 15;
  while (1)
  {
    if (v95 == v67 >> 14) {
      goto LABEL_137;
    }
    if ((v67 & 0xC) == v94) {
      break;
    }
    if (v66 <= v67 >> 16) {
      goto LABEL_161;
    }
    char v68 = String.UTF8View._foreignSubscript(position:)();
LABEL_131:
    uint64_t v69 = String.UTF8View._foreignIndex(after:)();
    if ((v68 & 0x80) == 0)
    {
      unint64_t v67 = v69;
      if ((UInt8.allowedURLComponents.getter(v68) & 0x80) != 0) {
        continue;
      }
    }
    goto LABEL_75;
  }
  if (v66 > (unint64_t)_StringGuts._slowEnsureMatchingEncoding(_:)(v67, v8, v7) >> 16)
  {
    char v68 = String.UTF8View._foreignSubscript(position:)();
    if (v66 <= (unint64_t)_StringGuts._slowEnsureMatchingEncoding(_:)(v67, v8, v7) >> 16) {
      goto LABEL_162;
    }
    goto LABEL_131;
  }
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
}

unint64_t URL.pathComponents.getter()
{
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v125 = v2;
    Swift::String v3 = URL.path(percentEncoded:)(1);
    unint64_t object = v3._object;
    unint64_t v5 = 0xE100000000000000;
    uint64_t v123 = 47;
    uint64_t v124 = 0xE100000000000000;
    Swift::String v122 = v3;
    uint64_t countAndFlagsBits = v3._countAndFlagsBits;
    if (((uint64_t)v3._object & 0x1000000000000000) != 0)
    {
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      uint64_t v42 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      StringProtocol._ephemeralString.getter();
      uint64_t v43 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v44 = objc_msgSend(v42, sel_componentsSeparatedByString_, v43);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if (!v44)
      {
        unsigned int v17 = (void *)MEMORY[0x1E4FBC860];
        goto LABEL_47;
      }
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v45 = swift_dynamicCastClass();
      if (v45)
      {
        unsigned int v17 = (void *)v45;

        goto LABEL_47;
      }
      swift_unknownObjectRelease();
      objc_msgSend(v44, sel_copy);
      unint64_t v47 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      unsigned int v17 = (void *)specialized _arrayForceCast<A, B>(_:)(v47);
    }
    else
    {
      swift_bridgeObjectRetain();
      unint64_t v109 = v3._object;
      unint64_t v6 = String.subscript.getter();
      unint64_t v8 = v7;
      uint64_t v118 = v9;
      uint64_t v119 = v10;
      int v115 = _stringCompareInternal(_:_:_:_:expecting:)();
      uint64_t v120 = 47;
      unint64_t v121 = 0xE100000000000000;
      uint64_t v11 = Substring.init<A>(_:)();
      unint64_t v114 = v13;
      unint64_t v116 = v14;
      unint64_t v117 = v8;
      unint64_t v15 = v8 >> 14;
      unint64_t v16 = v6 >> 14;
      if (v6 >> 14 >= v8 >> 14)
      {
        unsigned int v17 = (void *)MEMORY[0x1E4FBC860];
        goto LABEL_41;
      }
      unint64_t v111 = v12;
      unint64_t v112 = v11;
      unint64_t v113 = v11 ^ v12;
      unsigned int v17 = (void *)MEMORY[0x1E4FBC860];
      unint64_t v108 = v6 >> 14;
      unint64_t v18 = v6 >> 14;
      while (1)
      {
        if (v15 < v18) {
          goto LABEL_125;
        }
        swift_bridgeObjectRetain();
        unint64_t v19 = v6;
        unint64_t v5 = Substring.subscript.getter();
        unint64_t v21 = v20;
        unint64_t v23 = v22;
        unint64_t v25 = v24;
        swift_bridgeObjectRelease();
        if ((v5 ^ v21) < 0x4000 || v113 < 0x4000) {
          break;
        }
        if (v115)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v5 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v112, v111, v114, v116, 0, 0, 0, 0, 0, v5, v21, v23, v25);
          unint64_t v27 = v26;
          char v29 = v28;
          swift_bridgeObjectRelease_n();
        }
        else
        {
          unint64_t v5 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v112, v111, v114, v116, 0, 0, 0, 0, 0, v5, v21, v23, v25);
          unint64_t v27 = v30;
          char v29 = v31;
        }
        swift_bridgeObjectRelease();
        if (v29)
        {
          unint64_t v16 = v18;
          goto LABEL_41;
        }
        unint64_t v16 = v27 >> 14;
        if (v5 >> 14 == v27 >> 14)
        {
          unint64_t v16 = v18;
          goto LABEL_41;
        }
        if (v5 >> 14 < v18) {
          goto LABEL_126;
        }
        uint64_t v32 = Substring.subscript.getter();
        uint64_t v33 = MEMORY[0x185301F50](v32);
        unint64_t v5 = v34;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unsigned int v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
        }
        unint64_t v36 = v17[2];
        unint64_t v35 = v17[3];
        if (v36 >= v35 >> 1) {
          unsigned int v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v35 > 1), v36 + 1, 1, v17);
        }
        _OWORD v17[2] = v36 + 1;
        uint64_t v37 = &v17[2 * v36];
        v37[4] = v33;
        v37[5] = v5;
        swift_bridgeObjectRelease();
        unint64_t v18 = v27 >> 14;
        unint64_t v6 = v19;
        if (v16 >= v15) {
          goto LABEL_41;
        }
      }
      if ((v5 ^ v21) < 0x4000)
      {
        unint64_t v16 = v18;
      }
      else
      {
        unsigned int v17 = (void *)MEMORY[0x1E4FBC860];
        unint64_t v16 = v108;
      }
      swift_bridgeObjectRelease();
LABEL_41:
      if (v15 < v16) {
        goto LABEL_127;
      }
      uint64_t v48 = Substring.subscript.getter();
      unint64_t v5 = MEMORY[0x185301F50](v48);
      unint64_t v15 = v49;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_128:
      }
        unsigned int v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
      unint64_t object = v109;
      unint64_t v51 = v17[2];
      unint64_t v50 = v17[3];
      if (v51 >= v50 >> 1) {
        unsigned int v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v50 > 1), v51 + 1, 1, v17);
      }
      _OWORD v17[2] = v51 + 1;
      int v52 = &v17[2 * v51];
      v52[4] = v5;
      v52[5] = v15;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
LABEL_47:
    uint64_t v53 = v17[2];
    uint64_t v54 = MEMORY[0x1E4FBC860];
    if (v53)
    {
      int v55 = v17 + 5;
      uint64_t v56 = MEMORY[0x1E4FBC860];
      do
      {
        uint64_t v61 = *(v55 - 1);
        uint64_t v60 = *v55;
        uint64_t v62 = HIBYTE(*v55) & 0xF;
        if ((*v55 & 0x2000000000000000) == 0) {
          uint64_t v62 = v61 & 0xFFFFFFFFFFFFLL;
        }
        if (v62)
        {
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v123 = v56;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v56 + 16) + 1, 1);
            uint64_t v56 = v123;
          }
          unint64_t v58 = *(void *)(v56 + 16);
          unint64_t v57 = *(void *)(v56 + 24);
          if (v58 >= v57 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1);
            uint64_t v56 = v123;
          }
          *(void *)(v56 + 16) = v58 + 1;
          unint64_t v59 = v56 + 16 * v58;
          *(void *)(v59 + 32) = v61;
          *(void *)(v59 + 40) = v60;
        }
        v55 += 2;
        --v53;
      }
      while (v53);
    }
    else
    {
      uint64_t v56 = MEMORY[0x1E4FBC860];
    }
    swift_bridgeObjectRelease();
    uint64_t v123 = v56;
    swift_bridgeObjectRetain();
    uint64_t v64 = countAndFlagsBits;
    uint64_t v65 = specialized Collection.first.getter(countAndFlagsBits, (unint64_t)object);
    uint64_t v67 = v66;
    swift_bridgeObjectRelease();
    if (v67)
    {
      if (v65 == 47 && v67 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v68 & 1) == 0) {
          goto LABEL_65;
        }
      }
      specialized Array.replaceSubrange<A>(_:with:)(0, 0, 47, 0xE100000000000000);
    }
LABEL_65:
    swift_bridgeObjectRetain();
    uint64_t v69 = specialized BidirectionalCollection.last.getter(v64, (unint64_t)object);
    uint64_t v71 = v70;
    swift_bridgeObjectRelease();
    if (v71)
    {
      if (v69 == 47 && v71 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v72 & 1) == 0) {
          goto LABEL_75;
        }
      }
      if (String.count.getter() > 1)
      {
        unint64_t v41 = v123;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_131;
        }
        while (1)
        {
          unint64_t v74 = *(void *)(v41 + 16);
          unint64_t v73 = *(void *)(v41 + 24);
          if (v74 >= v73 >> 1) {
            unint64_t v41 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v73 > 1), v74 + 1, 1, (void *)v41);
          }
          *(void *)(v41 + 16) = v74 + 1;
          unint64_t v75 = v41 + 16 * v74;
          *(void *)(v75 + 32) = 47;
          *(void *)(v75 + 40) = 0xE100000000000000;
          swift_bridgeObjectRelease_n();
          uint64_t v123 = v41;
LABEL_76:
          uint64_t v76 = v123;
          unsigned int v17 = *(void **)(v123 + 16);
          if (v17) {
            break;
          }
          swift_bridgeObjectRelease();
          unint64_t v41 = MEMORY[0x1E4FBC860];
LABEL_113:
          unint64_t v103 = *(void *)(v41 + 16);
          if (v103 < 2) {
            return v41;
          }
          unint64_t v104 = v41 + 16 * v103;
          BOOL v105 = *(void *)(v104 + 16) == 47 && *(void *)(v104 + 24) == 0xE100000000000000;
          if (!v105 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            return v41;
          }
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v106 = *(void *)(v41 + 16);
            if (v106) {
              goto LABEL_121;
            }
          }
          else
          {
            unint64_t v41 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v41);
            uint64_t v106 = *(void *)(v41 + 16);
            if (v106)
            {
LABEL_121:
              *(void *)(v41 + 16) = v106 - 1;
LABEL_122:
              swift_bridgeObjectRelease();
              return v41;
            }
          }
          __break(1u);
LABEL_131:
          unint64_t v41 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v41 + 16) + 1, 1, (void *)v41);
        }
        v122._uint64_t countAndFlagsBits = v54;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)v17, 0);
        unint64_t v5 = 0;
        uint64_t v119 = v76;
        unint64_t v77 = (unint64_t *)(v76 + 40);
        uint64_t v54 = MEMORY[0x1E4FBC870];
        while (1)
        {
          unint64_t v15 = *(v77 - 1);
          unint64_t v41 = *v77;
          uint64_t v78 = HIBYTE(*v77) & 0xF;
          uint64_t v79 = v15 & 0xFFFFFFFFFFFFLL;
          if ((*v77 & 0x2000000000000000) != 0) {
            uint64_t v80 = HIBYTE(*v77) & 0xF;
          }
          else {
            uint64_t v80 = v15 & 0xFFFFFFFFFFFFLL;
          }
          if (!v80)
          {
LABEL_98:
            uint64_t v89 = 0;
            unint64_t v91 = 0xE000000000000000;
            goto LABEL_99;
          }
          if ((v41 & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRetain();
            uint64_t v80 = String.UTF8View._foreignCount()();
            if (v80 < 0)
            {
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
              goto LABEL_128;
            }
            goto LABEL_92;
          }
          if ((v41 & 0x2000000000000000) != 0)
          {
            uint64_t v123 = *(v77 - 1);
            uint64_t v124 = v41 & 0xFFFFFFFFFFFFFFLL;
            uint64_t v87 = swift_bridgeObjectRetain();
            MEMORY[0x1F4188790](v87);
            unint64_t v84 = (char *)&v108 - v88;
            unint64_t v85 = (unsigned __int8 *)&v123;
            uint64_t v86 = v78;
          }
          else
          {
            if ((v15 & 0x1000000000000000) != 0)
            {
              unint64_t v81 = (unsigned __int8 *)((v41 & 0xFFFFFFFFFFFFFFFLL) + 32);
            }
            else
            {
              unint64_t v81 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
              uint64_t v79 = v102;
              if (v102 < 0)
              {
                __break(1u);
LABEL_111:
                swift_bridgeObjectRelease();
                goto LABEL_113;
              }
            }
            uint64_t isStackAllocationSafe = swift_bridgeObjectRetain();
            if (v79 >= 1025)
            {
              uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
              if ((isStackAllocationSafe & 1) == 0)
              {
                uint64_t v100 = swift_slowAlloc();
                uint64_t v89 = specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v100, v81, v79, v54, (uint64_t (*)(void))specialized StringProtocol.hexToAscii(_:));
                unint64_t v91 = v101;
                MEMORY[0x185309510](v100, -1, -1);
                if (v91 != 1) {
                  goto LABEL_97;
                }
                goto LABEL_91;
              }
            }
            MEMORY[0x1F4188790](isStackAllocationSafe);
            unint64_t v84 = (char *)&v108 - v83;
            unint64_t v85 = v81;
            uint64_t v86 = v79;
          }
          uint64_t v89 = specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)((uint64_t)v84, v85, v86, v54, (uint64_t (*)(void))specialized StringProtocol.hexToAscii(_:));
          unint64_t v91 = v90;
          if (v90 != 1) {
            goto LABEL_97;
          }
LABEL_91:
          if (v80 < 0) {
            goto LABEL_124;
          }
LABEL_92:
          uint64_t v92 = swift_bridgeObjectRetain();
          if (v80 < 1025 || (uint64_t v92 = swift_stdlib_isStackAllocationSafe(), (v92 & 1) != 0))
          {
            MEMORY[0x1F4188790](v92);
            uint64_t v89 = specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)((uint64_t)&v108 - v93, v15, v41, v54);
            unint64_t v91 = v94;
          }
          else
          {
            uint64_t v95 = swift_slowAlloc();
            uint64_t v89 = specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v95, v15, v41, v54);
            unint64_t v91 = v96;
            MEMORY[0x185309510](v95, -1, -1);
          }
          swift_bridgeObjectRelease();
LABEL_97:
          swift_bridgeObjectRelease();
          if (!v91) {
            goto LABEL_98;
          }
LABEL_99:
          unint64_t v41 = v122._countAndFlagsBits;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v41 + 16) + 1, 1);
            unint64_t v41 = v122._countAndFlagsBits;
          }
          unint64_t v98 = *(void *)(v41 + 16);
          unint64_t v97 = *(void *)(v41 + 24);
          if (v98 >= v97 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v97 > 1, v98 + 1, 1);
            unint64_t v41 = v122._countAndFlagsBits;
          }
          v77 += 2;
          *(void *)(v41 + 16) = v98 + 1;
          unint64_t v99 = v41 + 16 * v98;
          *(void *)(v99 + 32) = v89;
          *(void *)(v99 + 40) = v91;
          unsigned int v17 = (void *)((char *)v17 - 1);
          if (!v17) {
            goto LABEL_111;
          }
        }
      }
    }
LABEL_75:
    swift_bridgeObjectRelease_n();
    goto LABEL_76;
  }
  id v38 = objc_msgSend(v1, sel_pathComponents);
  if (!v38) {
    return MEMORY[0x1E4FBC860];
  }
  id v39 = v38;
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v40 = swift_dynamicCastClass();
  if (!v40)
  {
    swift_unknownObjectRelease();
    objc_msgSend(v39, sel_copy);
    unint64_t v46 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    unint64_t v41 = specialized _arrayForceCast<A, B>(_:)(v46);

    goto LABEL_122;
  }
  unint64_t v41 = v40;

  return v41;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (!v2) {
    return v3;
  }
  uint64_t v15 = MEMORY[0x1E4FBC860];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = 0;
      uint64_t v3 = v15;
      do
      {
        MEMORY[0x185303120](v5, a1);
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
          uint64_t v3 = v15;
        }
        unint64_t v7 = *(void *)(v3 + 16);
        unint64_t v6 = *(void *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
          uint64_t v3 = v15;
        }
        ++v5;
        *(void *)(v3 + 16) = v7 + 1;
        uint64_t v8 = v3 + 16 * v7;
        *(void *)(v8 + 32) = v13;
        *(void *)(v8 + 40) = v14;
      }
      while (v2 != v5);
    }
    else
    {
      unint64_t v9 = a1 + 32;
      uint64_t v3 = v15;
      do
      {
        swift_unknownObjectRetain();
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
          uint64_t v3 = v15;
        }
        unint64_t v11 = *(void *)(v3 + 16);
        unint64_t v10 = *(void *)(v3 + 24);
        if (v11 >= v10 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
          uint64_t v3 = v15;
        }
        *(void *)(v3 + 16) = v11 + 1;
        uint64_t v12 = v3 + 16 * v11;
        *(void *)(v12 + 32) = v13;
        *(void *)(v12 + 40) = v14;
        v9 += 8;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (!v2) {
    return v3;
  }
  uint64_t v12 = MEMORY[0x1E4FBC860];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = 0;
      uint64_t v3 = v12;
      do
      {
        MEMORY[0x185303120](v5, a1);
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
          uint64_t v3 = v12;
        }
        unint64_t v7 = *(void *)(v3 + 16);
        unint64_t v6 = *(void *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
          uint64_t v3 = v12;
        }
        ++v5;
        *(void *)(v3 + 16) = v7 + 1;
        outlined init with take of Any(v11, (_OWORD *)(v3 + 32 * v7 + 32));
      }
      while (v2 != v5);
    }
    else
    {
      uint64_t v8 = a1 + 32;
      uint64_t v3 = v12;
      do
      {
        swift_unknownObjectRetain();
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
          uint64_t v3 = v12;
        }
        unint64_t v10 = *(void *)(v3 + 16);
        unint64_t v9 = *(void *)(v3 + 24);
        if (v10 >= v9 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
          uint64_t v3 = v12;
        }
        *(void *)(v3 + 16) = v10 + 1;
        outlined init with take of Any(v11, (_OWORD *)(v3 + 32 * v10 + 32));
        v8 += 8;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  long long v15;
  uint64_t v16;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (!v2) {
    return v3;
  }
  unint64_t v16 = MEMORY[0x1E4FBC860];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = 0;
      uint64_t v3 = v16;
      do
      {
        MEMORY[0x185303120](v5, a1);
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
          uint64_t v3 = v16;
        }
        unint64_t v7 = *(void *)(v3 + 16);
        unint64_t v6 = *(void *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
          uint64_t v3 = v16;
        }
        ++v5;
        uint64_t v8 = v3 + 32 * v7;
        *(void *)(v3 + 16) = v7 + 1;
        *(void *)(v8 + 32) = v13;
        *(void *)(v8 + 40) = v14;
        *(_OWORD *)(v8 + 48) = v15;
      }
      while (v2 != v5);
    }
    else
    {
      unint64_t v9 = a1 + 32;
      uint64_t v3 = v16;
      do
      {
        swift_unknownObjectRetain();
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
          uint64_t v3 = v16;
        }
        unint64_t v11 = *(void *)(v3 + 16);
        unint64_t v10 = *(void *)(v3 + 24);
        if (v11 >= v10 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
          uint64_t v3 = v16;
        }
        uint64_t v12 = v3 + 32 * v11;
        *(void *)(v3 + 16) = v11 + 1;
        *(void *)(v12 + 32) = v13;
        *(void *)(v12 + 40) = v14;
        *(_OWORD *)(v12 + 48) = v15;
        v9 += 8;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  long long v13;
  long long v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (!v2) {
    return v3;
  }
  unint64_t v16 = MEMORY[0x1E4FBC860];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = 0;
      uint64_t v3 = v16;
      do
      {
        MEMORY[0x185303120](v5, a1);
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
          uint64_t v3 = v16;
        }
        unint64_t v7 = *(void *)(v3 + 16);
        unint64_t v6 = *(void *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
          uint64_t v3 = v16;
        }
        ++v5;
        *(void *)(v3 + 16) = v7 + 1;
        uint64_t v8 = v3 + 40 * v7;
        *(void *)(v8 + 64) = v15;
        *(_OWORD *)(v8 + 32) = v13;
        *(_OWORD *)(v8 + 48) = v14;
      }
      while (v2 != v5);
    }
    else
    {
      unint64_t v9 = a1 + 32;
      uint64_t v3 = v16;
      do
      {
        swift_unknownObjectRetain();
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
          uint64_t v3 = v16;
        }
        unint64_t v11 = *(void *)(v3 + 16);
        unint64_t v10 = *(void *)(v3 + 24);
        if (v11 >= v10 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
          uint64_t v3 = v16;
        }
        *(void *)(v3 + 16) = v11 + 1;
        uint64_t v12 = v3 + 40 * v11;
        *(void *)(v12 + 64) = v15;
        *(_OWORD *)(v12 + 32) = v13;
        *(_OWORD *)(v12 + 48) = v14;
        v9 += 8;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  long long v14;
  uint64_t v15;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (!v2) {
    return v3;
  }
  uint64_t v15 = MEMORY[0x1E4FBC860];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = 0;
      uint64_t v3 = v15;
      do
      {
        MEMORY[0x185303120](v5, a1);
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
          uint64_t v3 = v15;
        }
        unint64_t v7 = *(void *)(v3 + 16);
        unint64_t v6 = *(void *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
          uint64_t v3 = v15;
        }
        ++v5;
        uint64_t v8 = v3 + 24 * v7;
        *(void *)(v3 + 16) = v7 + 1;
        *(void *)(v8 + 32) = v13;
        *(_OWORD *)(v8 + 40) = v14;
      }
      while (v2 != v5);
    }
    else
    {
      unint64_t v9 = a1 + 32;
      uint64_t v3 = v15;
      do
      {
        swift_unknownObjectRetain();
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
          uint64_t v3 = v15;
        }
        unint64_t v11 = *(void *)(v3 + 16);
        unint64_t v10 = *(void *)(v3 + 24);
        if (v11 >= v10 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
          uint64_t v3 = v15;
        }
        uint64_t v12 = v3 + 24 * v11;
        *(void *)(v3 + 16) = v11 + 1;
        *(void *)(v12 + 32) = v13;
        *(_OWORD *)(v12 + 40) = v14;
        v9 += 8;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

unint64_t specialized static JSONEncoder.KeyEncodingStrategy._convertToSnakeCase(_:)(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = a2;
  uint64_t v4 = a1;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    unint64_t v6 = String.index(after:)();
    uint64_t v7 = 7;
    if (((v3 >> 60) & ((v4 & 0x800000000000000) == 0)) != 0) {
      uint64_t v7 = 11;
    }
    unint64_t v57 = 4 * v5;
    if (4 * v5 < v6 >> 14) {
      goto LABEL_93;
    }
    unint64_t v58 = 15;
    unint64_t v59 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v56 = v7 | (v5 << 16);
    while (1)
    {
      unint64_t v8 = String.subscript.getter();
      unint64_t v11 = v10;
      unint64_t v12 = v8 >> 14;
      unint64_t v14 = v13 >> 14;
      if (v8 >> 14 == v13 >> 14) {
        break;
      }
      unint64_t v3 = v8;
      unint64_t v15 = v9;
      swift_bridgeObjectRetain();
      uint64_t v16 = Substring.UnicodeScalarView.index(before:)();
      uint64_t v17 = (v15 >> 59) & 1;
      if ((v11 & 0x1000000000000000) == 0) {
        LOBYTE(v17) = 1;
      }
      uint64_t v18 = 4 << v17;
      for (unint64_t i = v3; ; unint64_t i = Substring.UnicodeScalarView.index(_:offsetBy:)())
      {
        if ((i & 0xC) == v18 || (i & 1) == 0)
        {
          unint64_t v20 = i;
          if ((i & 0xC) == v18) {
            unint64_t v20 = _StringGuts._slowEnsureMatchingEncoding(_:)(i, v15, v11);
          }
          if (v20 >> 14 < v12 || v20 >> 14 >= v14)
          {
            __break(1u);
LABEL_90:
            __break(1u);
LABEL_91:
            __break(1u);
LABEL_92:
            __break(1u);
LABEL_93:
            __break(1u);
LABEL_94:
            __break(1u);
            goto LABEL_95;
          }
          if ((v20 & 1) == 0) {
            _StringGuts.scalarAlignSlow(_:)(v20, v15, v11);
          }
        }
        else if (i >> 14 < v12 || i >> 14 >= v14)
        {
          goto LABEL_90;
        }
        if ((v11 & 0x1000000000000000) != 0)
        {
          uint64_t v21 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v11 & 0x2000000000000000) == 0 && (v15 & 0x1000000000000000) == 0) {
            _StringObject.sharedUTF8.getter();
          }
          uint64_t v21 = _decodeScalar(_:startingAt:)();
        }
        unsigned __int16 v22 = v21;
        uint64_t v23 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v21), 1);
        if (BuiltInUnicodeScalarSet._isMemberOfBitmap(_:_:)(v22, v23, 0x700030001)) {
          break;
        }
        if ((i ^ v16) < 0x4000)
        {
          unint64_t v3 = v58;
LABEL_79:
          swift_bridgeObjectRelease();
          goto LABEL_80;
        }
      }
      unint64_t v24 = Substring.UnicodeScalarView.index(after:)();
      unint64_t result = swift_bridgeObjectRelease_n();
      unint64_t v26 = i >> 14;
      if (i >> 14 < v58 >> 14 || v24 >> 14 < v26)
      {
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
        return result;
      }
      unint64_t v27 = v59;
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59[2] + 1, 1, v59);
        unint64_t v27 = (void *)result;
      }
      unint64_t v29 = v27[2];
      unint64_t v28 = v27[3];
      if (v29 >= v28 >> 1)
      {
        unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v27);
        unint64_t v27 = (void *)result;
      }
      _OWORD v27[2] = v29 + 1;
      unint64_t v30 = &v27[2 * v29];
      v30[4] = v58;
      v30[5] = i;
      if (v57 < v26) {
        goto LABEL_97;
      }
      unint64_t v59 = v27;
      unint64_t v31 = String.subscript.getter();
      unint64_t v34 = v33;
      unint64_t v36 = v35 >> 14;
      unint64_t v61 = v31 >> 14;
      if (v31 >> 14 == v35 >> 14)
      {
        unint64_t v3 = i;
LABEL_80:
        unint64_t i = (unint64_t)v59;
        goto LABEL_81;
      }
      unint64_t v3 = v31;
      unint64_t v37 = v32;
      swift_bridgeObjectRetain();
      uint64_t v38 = Substring.UnicodeScalarView.index(before:)();
      uint64_t v39 = (v37 >> 59) & 1;
      if ((v34 & 0x1000000000000000) == 0) {
        LOBYTE(v39) = 1;
      }
      uint64_t v40 = 4 << v39;
      uint64_t v60 = v38;
      for (unint64_t j = v3; ; unint64_t j = Substring.UnicodeScalarView.index(_:offsetBy:)())
      {
        if ((j & 0xC) == v40 || (j & 1) == 0)
        {
          unint64_t v43 = j;
          if ((j & 0xC) == v40) {
            unint64_t v43 = _StringGuts._slowEnsureMatchingEncoding(_:)(j, v37, v34);
          }
          if (v43 >> 14 < v61 || v43 >> 14 >= v36) {
            goto LABEL_91;
          }
          if ((v43 & 1) == 0) {
            _StringGuts.scalarAlignSlow(_:)(v43, v37, v34);
          }
        }
        else if (j >> 14 < v61 || j >> 14 >= v36)
        {
          goto LABEL_92;
        }
        if ((v34 & 0x1000000000000000) != 0)
        {
          uint64_t v44 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v34 & 0x2000000000000000) == 0 && (v37 & 0x1000000000000000) == 0) {
            _StringObject.sharedUTF8.getter();
          }
          uint64_t v44 = _decodeScalar(_:startingAt:)();
        }
        unsigned __int16 v45 = v44;
        uint64_t v46 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v44), 0);
        if (BuiltInUnicodeScalarSet._isMemberOfBitmap(_:_:)(v45, v46, 0x700030000)) {
          break;
        }
        if ((j ^ v60) < 0x4000)
        {
          unint64_t v3 = i;
          goto LABEL_79;
        }
      }
      unint64_t v47 = Substring.UnicodeScalarView.index(after:)();
      unint64_t result = swift_bridgeObjectRelease_n();
      if (v47 >> 14 < j >> 14) {
        goto LABEL_98;
      }
      unint64_t result = String.index(after:)();
      if (j >> 14 != result >> 14)
      {
        unint64_t result = String.index(before:)();
        if (i >> 14 > result >> 14) {
          goto LABEL_100;
        }
        unint64_t v48 = result;
        unint64_t v50 = v59[2];
        unint64_t v49 = v59[3];
        if (v50 >= v49 >> 1)
        {
          unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v49 > 1), v50 + 1, 1, v59);
          unint64_t v59 = (void *)result;
        }
        v59[2] = v50 + 1;
        unint64_t v51 = &v59[2 * v50];
        v51[4] = i;
        v51[5] = v48;
        unint64_t i = v48;
      }
      unint64_t v58 = i;
      if (v57 < v47 >> 14) {
        goto LABEL_99;
      }
    }
    unint64_t v3 = v58;
    unint64_t i = (unint64_t)v59;
LABEL_81:
    swift_bridgeObjectRelease();
    if (v57 < v3 >> 14) {
      goto LABEL_94;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_95:
    }
      unint64_t i = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(i + 16) + 1, 1, (void *)i);
    unint64_t v53 = *(void *)(i + 16);
    unint64_t v52 = *(void *)(i + 24);
    if (v53 >= v52 >> 1) {
      unint64_t i = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v52 > 1), v53 + 1, 1, (void *)i);
    }
    *(void *)(i + 16) = v53 + 1;
    unint64_t v54 = i + 16 * v53;
    *(void *)(v54 + 32) = v3;
    *(void *)(v54 + 40) = v56;
    swift_bridgeObjectRetain();
    uint64_t v55 = swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySnySS5IndexVGG_SSs5NeverOTg50122_s10Foundation11JSONEncoderC19KeyEncodingStrategyO19_convertToSnakeCase33_12768CA107A31EF2DCE034FD75B541C9LLyS2SFZSSSnySS5D7VGXEfU_SSTf1cn_nTf4ng_n(v55);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    uint64_t v4 = BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(uint64_t result, char a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_18217FF20[a2];
  int v6 = 15;
  uint64_t v7 = &__CFUniCharLetterCharacterSetBitmap;
  int v8 = 2;
  unint64_t v9 = &__CFUniCharLowercaseLetterCharacterSetBitmap;
  int v10 = 2;
  unint64_t v11 = &__CFUniCharUppercaseLetterCharacterSetBitmap;
  int v12 = 15;
  unint64_t v13 = &__CFUniCharNonBaseCharacterSetBitmap;
  int v14 = 3;
  unint64_t v15 = &__CFUniCharCanonicalDecomposableCharacterSetBitmap;
  int v16 = 15;
  uint64_t v17 = &__CFUniCharAlphanumericCharacterSetBitmap;
  int v18 = 2;
  unint64_t v19 = &__CFUniCharPunctuationCharacterSetBitmap;
  int v20 = 15;
  uint64_t v21 = &__CFUniCharLegalCharacterSetBitmap;
  int v22 = 1;
  uint64_t v23 = &__CFUniCharTitlecaseLetterCharacterSetBitmap;
  int v24 = 2;
  unint64_t v25 = &__CFUniCharSymbolAndOperatorCharacterSetBitmap;
  int v26 = 2;
  unint64_t v27 = &__CFUniCharCompatibilityDecomposableCharacterSetBitmap;
  int v28 = 2;
  unint64_t v29 = &__CFUniCharHfsPlusDecomposableCharacterSetBitmap;
  int v30 = 2;
  unint64_t v31 = &__CFUniCharStrongRightToLeftCharacterSetBitmap;
  int v32 = 2;
  unint64_t v33 = &__CFUniCharHasNonSelfLowercaseMappingBitmap;
  int v34 = 2;
  unint64_t v35 = &__CFUniCharHasNonSelfUppercaseMappingBitmap;
  int v36 = 2;
  unint64_t v37 = &__CFUniCharHasNonSelfTitlecaseMappingBitmap;
  int v38 = 1;
  uint64_t v39 = &__CFUniCharHasNonSelfCaseFoldingMappingBitmap;
  int v40 = 2;
  unint64_t v41 = &__CFUniCharHasMirroredMappingBitmap;
  int v42 = 15;
  unint64_t v43 = &__CFUniCharControlAndFormatterBitmap;
  int v44 = 15;
  unsigned __int16 v45 = &__CFUniCharCaseIgnorableCharacterSetBitmap;
  int v46 = 15;
  unint64_t v47 = &__CFUniCharGraphemeExtendCharacterSetBitmap;
  unint64_t v3 = (unsigned int *)&v5[16 * v2];
  if (*v3 <= result) {
    return 0;
  }
  uint64_t v4 = *((void *)v3 + 1);
  if (v4) {
    return *(void *)(v4 + 8 * result);
  }
  __break(1u);
  return result;
}

BOOL BuiltInUnicodeScalarSet._isMemberOfBitmap(_:_:)(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = a1 >> (BYTE2(a3) & 0xF);
  if ((a3 & 0xFFF00000) != 0) {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + v3);
  if ((unsigned __int16)(WORD2(a3) & a1) >= 0x20u) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = (1 << (BYTE4(a3) & a1));
  }
  return (v5 & v4) != 0;
}

uint64_t lazy protocol witness table accessor for type [String] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySnySS5IndexVGG_SSs5NeverOTg50122_s10Foundation11JSONEncoderC19KeyEncodingStrategyO19_convertToSnakeCase33_12768CA107A31EF2DCE034FD75B541C9LLyS2SFZSSSnySS5D7VGXEfU_SSTf1cn_nTf4ng_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v9;
    uint64_t v4 = a1 + 40;
    do
    {
      String.subscript.getter();
      Swift::String v5 = Substring.lowercased()();
      swift_bridgeObjectRelease();
      unint64_t v7 = *(void *)(v9 + 16);
      unint64_t v6 = *(void *)(v9 + 24);
      if (v7 >= v6 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      }
      v4 += 16;
      *(void *)(v9 + 16) = v7 + 1;
      *(Swift::String *)(v9 + 16 * v7 + 32) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Scalar>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Duration.UnitsFormatStyle.Unit._Unit>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int8>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.LanguageCode>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.Region>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.Collation>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.Currency>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.NumberingSystem>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UDateFormatField>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Duration.UnitsFormatStyle.Unit>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field.Option>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ExpressionStructure.Argument>);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  unint64_t v15 = 32 * v8;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URLQueryItem>);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GenericArgument>);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  unint64_t v15 = 16 * v8;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_XMLPlistEncodingFormat.Reference>);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  int v14 = 24 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PresentationIntent.TableColumn>);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DateComponents>);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 288);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  int v14 = 288 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Date>);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.RecurrenceRule.Month>);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  unint64_t v15 = 16 * v8;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String.LocalizationValue.FormatArgument>);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 120);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  int v14 = 120 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ICUDateFormatter.AttributePosition>);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    memcpy(v12, v13, 24 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSCalendarUnit>);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Duration.UnitsFormatStyle.Unit>);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString>);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ExpressionStructure>);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Type>);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.Language>);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8]) {
      memmove(v12, v13, 96 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[96 * v8] || v12 >= &v13[96 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<iovec>);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyHashable>);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(component: Calendar.Component, multitude: Int)>);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Substring>);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field.Option>);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LocalizedStringResource>);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 112);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[112 * v8]) {
      memmove(v12, v13, 112 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[112 * v8] || v12 >= &v13[112 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<String.Index>>);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    int v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t URL.lastPathComponent.getter()
{
  int64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v26 = v2;
    swift_retain();
    id v3 = v1;
    swift_retain();
    Swift::String v4 = URL.path(percentEncoded:)(1);
    uint64_t countAndFlagsBits = v4._countAndFlagsBits;
    Swift::String v25 = v4;
    swift_bridgeObjectRetain();
    if (String.count.getter() < 2)
    {
      unint64_t object = (unint64_t)v4._object;
    }
    else
    {
      unint64_t object = (unint64_t)v4._object;
      if ((specialized BidirectionalCollection.last.getter(v4._countAndFlagsBits, (unint64_t)v4._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = v25._countAndFlagsBits;
        unint64_t object = (unint64_t)v25._object;
      }
    }
    uint64_t v22 = Set.init(minimumCapacity:)();
    uint64_t v10 = specialized Set._Variant.insert(_:)(&v24, 0x2FuLL);
    uint64_t v11 = v22;
    uint64_t v12 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0) {
      uint64_t v12 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v12)
    {
      uint64_t v22 = countAndFlagsBits;
      unint64_t v23 = object;
      MEMORY[0x1F4188790](v10);
      _OWORD v21[2] = &v22;
      v21[3] = v11;
      swift_bridgeObjectRetain();
      unint64_t v13 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)v21, countAndFlagsBits, object);
      if (v14 == 1)
      {
        Swift::Int v15 = v22;
        unint64_t v16 = v23;
        swift_bridgeObjectRetain();
        uint64_t v17 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v15, v16, v11);
        unint64_t v19 = v18;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!v19) {
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t v17 = (void (*)(char *, void))v13;
        unint64_t v19 = v14;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!v19)
        {
LABEL_18:
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v17 = 0;
          unint64_t v19 = 0xE000000000000000;
          goto LABEL_19;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v17 = 0;
      unint64_t v19 = 0xE000000000000000;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_19:
    swift_bridgeObjectRetain();
    unint64_t Path = String._lastPathComponent.getter((uint64_t)v17, v19);
    swift_bridgeObjectRelease_n();
    return Path;
  }
  id v7 = objc_msgSend(v1, sel_lastPathComponent);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v7;
  unint64_t Path = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

  return Path;
}

Swift::String __swiftcall NSLocalizedString(_:tableName:bundle:value:comment:)(Swift::String _, Swift::String_optional tableName, NSBundle *bundle, Swift::String value, Swift::String comment)
{
  unint64_t object = tableName.value._object;
  uint64_t v7 = String._bridgeToObjectiveCImpl()();
  uint64_t v8 = String._bridgeToObjectiveCImpl()();
  if (object) {
    unint64_t object = (void *)String._bridgeToObjectiveCImpl()();
  }
  uint64_t v9 = [(NSBundle *)bundle localizedStringForKey:v7 value:v8 table:object];
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  uint64_t v13 = (uint64_t)v10;
  unint64_t v14 = v12;
  result._unint64_t object = v14;
  result._uint64_t countAndFlagsBits = v13;
  return result;
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents.path.setter(uint64_t a1)
{
  return closure #1 in _NSSwiftURLComponents.path.setter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t closure #1 in _NSSwiftURLComponents.path.setter(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = 0;
  }
  if (a3) {
    unint64_t v5 = a3;
  }
  else {
    unint64_t v5 = 0xE000000000000000;
  }
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 14) = 0;
  if ((v5 & 0x2000000000000000) != 0) {
    unint64_t v6 = HIBYTE(v5) & 0xF;
  }
  else {
    unint64_t v6 = v4 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain();
  if (v6)
  {
    unint64_t v6 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v4, v5);
    unint64_t v8 = v7;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v8 = 0xE000000000000000;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = v6;
  *(void *)(a1 + 112) = v8;
  return result;
}

unint64_t specialized static RFC3986Parser.percentEncodePath<A>(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0;
  }
  unint64_t v5 = specialized Collection<>.firstIndex(of:)(0x2Fu, a1, a2);
  if (v6)
  {
    unint64_t v59 = a1;
    unint64_t v60 = a2;
    MEMORY[0x1F4188790](v5);
    unint64_t v57 = &v59;
    char v58 = 32;
    swift_bridgeObjectRetain();
    unint64_t v8 = (unint64_t)specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v56, a1, a2);
    uint64_t v17 = v16;
    swift_bridgeObjectRelease();
    if (!v17)
    {
      unint64_t v18 = v59;
      unint64_t v19 = v60;
      swift_bridgeObjectRetain();
      unint64_t v13 = v18;
      unint64_t v14 = v19;
      unsigned __int8 v15 = 32;
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v7 = v5;
    if (v5 >= 0x4000)
    {
      uint64_t v20 = String.subscript.getter();
      unint64_t v22 = v21;
      unint64_t v59 = v20;
      unint64_t v60 = v23;
      unint64_t v61 = v24;
      unint64_t v62 = v21;
      MEMORY[0x1F4188790](v20);
      unint64_t v57 = &v59;
      char v58 = 32;
      int v28 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((void *(*)(void *__return_ptr, void, void))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v56, v26, v27, v25, v22);
      if (v29)
      {
        uint64_t v30 = (uint64_t)v28;
        unint64_t v31 = v29;
      }
      else
      {
        unint64_t v32 = v59;
        unint64_t v33 = v60;
        unint64_t v34 = v61;
        unint64_t v35 = v62;
        swift_bridgeObjectRetain();
        uint64_t v30 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v32, v33, v34, v35, 0x20u);
        unint64_t v31 = v36;
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      unint64_t v37 = specialized Collection.suffix(from:)(v7, a1, a2);
      unint64_t v39 = v38;
      unint64_t v59 = v37;
      unint64_t v60 = v40;
      unint64_t v61 = v41;
      unint64_t v62 = v38;
      MEMORY[0x1F4188790](v37);
      unint64_t v57 = &v59;
      char v58 = 16;
      unsigned __int16 v45 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((void *(*)(void *__return_ptr, void, void))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v56, v43, v44, v42, v39);
      if (v46)
      {
        uint64_t v47 = (uint64_t)v45;
        uint64_t v48 = v46;
      }
      else
      {
        unint64_t v49 = v59;
        unint64_t v50 = v60;
        unint64_t v51 = v61;
        unint64_t v52 = v62;
        swift_bridgeObjectRetain();
        uint64_t v47 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v49, v50, v51, v52, 0x10u);
        uint64_t v48 = v53;
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      unint64_t v59 = v30;
      unint64_t v60 = v31;
      swift_bridgeObjectRetain();
      v54._uint64_t countAndFlagsBits = v47;
      v54._unint64_t object = v48;
      String.append(_:)(v54);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v59;
    }
    else
    {
      unint64_t v59 = a1;
      unint64_t v60 = a2;
      MEMORY[0x1F4188790](v5);
      unint64_t v57 = &v59;
      char v58 = 16;
      swift_bridgeObjectRetain();
      unint64_t v8 = (unint64_t)specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v56, a1, a2);
      uint64_t v10 = v9;
      swift_bridgeObjectRelease();
      if (!v10)
      {
        unint64_t v11 = v59;
        unint64_t v12 = v60;
        swift_bridgeObjectRetain();
        unint64_t v13 = v11;
        unint64_t v14 = v12;
        unsigned __int8 v15 = 16;
LABEL_11:
        unint64_t v8 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v13, v14, v15);
        swift_bridgeObjectRelease();
      }
    }
  }
  return v8;
}

void *specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)(void *(*a1)(void *__return_ptr, void *, uint64_t), uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    v10[0] = 0;
    v10[1] = 0;
    return (void *)v10[0];
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    uint64_t v7 = HIBYTE(a4) & 0xF;
    v9[0] = a3;
    v9[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    char v6 = v9;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    char v6 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v7 = a3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    char v6 = (void *)_StringObject.sharedUTF8.getter();
  }
  uint64_t result = a1(v10, v6, v7);
  if (!v4) {
    return (void *)v10[0];
  }
  return result;
}

unint64_t specialized Collection<>.firstIndex(of:)(unsigned __int8 a1, unint64_t a2, unint64_t a3)
{
  if ((a3 & 0x2000000000000000) != 0) {
    unint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    unint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v7 = 4 * v3;
  uint64_t v8 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  uint64_t v15 = a3 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v10 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
  unint64_t v11 = 15;
  while (1)
  {
    unint64_t result = v11;
    if ((v11 & 0xC) == v9) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a2, a3);
    }
    unint64_t v13 = result >> 16;
    if (result >> 16 >= v3) {
      break;
    }
    if ((a3 & 0x1000000000000000) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((a3 & 0x2000000000000000) != 0)
    {
      v16[0] = a2;
      v16[1] = v15;
      unint64_t result = *((unsigned __int8 *)v16 + v13);
    }
    else
    {
      uint64_t v14 = v10;
      if ((a2 & 0x1000000000000000) == 0) {
        uint64_t v14 = _StringObject.sharedUTF8.getter();
      }
      unint64_t result = *(unsigned __int8 *)(v14 + v13);
    }
    if (result == a1) {
      return v11;
    }
    if ((v11 & 0xC) == v9)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a2, a3);
      unint64_t v11 = result;
      if ((a3 & 0x1000000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_21:
      if (v3 <= v11 >> 16) {
        goto LABEL_31;
      }
      unint64_t v11 = String.UTF8View._foreignIndex(after:)();
      if (v7 == v11 >> 14) {
        return 0;
      }
    }
    else
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_21;
      }
LABEL_8:
      unint64_t v11 = (v11 & 0xFFFFFFFFFFFF0000) + 65540;
      if (v7 == v11 >> 14) {
        return 0;
      }
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

unint64_t specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(unint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }
  else
  {
    Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v7 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_14:
    __break(1u);
  }
  if (v7 < -1) {
    goto LABEL_14;
  }
  uint64_t v8 = v7 + 1;
  if (v7 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    return specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)((unint64_t)v13 - v9, v8, a1, a2, a3);
  }
  else
  {
    unint64_t v11 = swift_slowAlloc();
    unint64_t v10 = specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v11, v8, a1, a2, a3);
    MEMORY[0x185309510](v11, -1, -1);
  }
  return v10;
}

unint64_t specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(unint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, unsigned __int8 a5)
{
  if (!result) {
    goto LABEL_60;
  }
  unint64_t v7 = result;
  if ((a4 & 0x2000000000000000) != 0) {
    unint64_t v8 = HIBYTE(a4) & 0xF;
  }
  else {
    unint64_t v8 = a3 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = 0;
  if (!v8)
  {
LABEL_51:
    unint64_t result = swift_bridgeObjectRelease();
    if (v10 >= a2) {
      goto LABEL_59;
    }
    *(unsigned char *)(v7 + v10) = 0;
    return String.init(cString:)();
  }
  uint64_t v23 = 4 * v8;
  uint64_t v11 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v11) = 1;
  }
  uint64_t v12 = 4 << v11;
  unint64_t v13 = 15;
  uint64_t v14 = a3;
  while (1)
  {
    unint64_t v17 = v13 & 0xC;
    unint64_t result = v13;
    if (v17 == v12)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v13, v14, a4);
      uint64_t v14 = a3;
    }
    unint64_t v18 = result >> 16;
    if (result >> 16 >= v8) {
      break;
    }
    if ((a4 & 0x1000000000000000) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      uint64_t v14 = a3;
      unsigned __int8 v19 = result;
      if (v17 != v12) {
        goto LABEL_23;
      }
    }
    else if ((a4 & 0x2000000000000000) != 0)
    {
      v22[0] = v14;
      v22[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      unsigned __int8 v19 = *((unsigned char *)v22 + v18);
      if (v17 != v12) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v14 & 0x1000000000000000) == 0)
      {
        unint64_t result = _StringObject.sharedUTF8.getter();
        uint64_t v14 = a3;
      }
      unsigned __int8 v19 = *(unsigned char *)(result + v18);
      if (v17 != v12)
      {
LABEL_23:
        if ((a4 & 0x1000000000000000) != 0) {
          goto LABEL_27;
        }
        goto LABEL_24;
      }
    }
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v13, v14, a4);
    uint64_t v14 = a3;
    unint64_t v13 = result;
    if ((a4 & 0x1000000000000000) != 0)
    {
LABEL_27:
      if (v8 <= v13 >> 16) {
        goto LABEL_55;
      }
      unint64_t result = String.UTF8View._foreignIndex(after:)();
      uint64_t v14 = a3;
      unint64_t v13 = result;
      goto LABEL_29;
    }
LABEL_24:
    unint64_t v13 = (v13 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_29:
    switch(v19)
    {
      case '!':
      case '$':
      case '\'':
      case '(':
      case ')':
      case '*':
      case ',':
LABEL_30:
        char v20 = a5 & 0xF6;
        goto LABEL_44;
      case '&':
LABEL_9:
        if ((a5 & 0x76) != 0) {
          goto LABEL_10;
        }
        goto LABEL_45;
      case '+':
        char v20 = a5 & 0xF7;
        goto LABEL_44;
      case '-':
      case '.':
        goto LABEL_43;
      case '/':
LABEL_34:
        if (a5 < 0x10u) {
          goto LABEL_45;
        }
        goto LABEL_10;
      default:
        if ((v19 - 58) <= 0xF5u)
        {
          switch(v19)
          {
            case ':':
              char v20 = a5 & 0xD2;
              goto LABEL_44;
            case ';':
              goto LABEL_30;
            case '=':
              goto LABEL_9;
            case '?':
              if (a5 < 0x40u) {
                goto LABEL_45;
              }
              goto LABEL_10;
            case '@':
              goto LABEL_34;
            default:
              if ((v19 - 91) > 0xE5u) {
                break;
              }
              if (v19 == 95) {
                goto LABEL_41;
              }
              if ((v19 - 123) > 0xE5u) {
                break;
              }
              if (v19 != 126) {
                goto LABEL_45;
              }
LABEL_41:
              if (a5 < 2u) {
                goto LABEL_45;
              }
              goto LABEL_10;
          }
        }
LABEL_43:
        char v20 = a5;
LABEL_44:
        if (v20)
        {
LABEL_10:
          if (v10 >= a2) {
            goto LABEL_54;
          }
          uint64_t v15 = v10;
          uint64_t v16 = 1;
        }
        else
        {
LABEL_45:
          if (v10 >= a2) {
            goto LABEL_56;
          }
          *(unsigned char *)(v7 + v10) = 37;
          unint64_t result = specialized StringProtocol.hexToAscii(_:)(v19 >> 4);
          if (v10 + 1 >= a2) {
            goto LABEL_57;
          }
          *(unsigned char *)(v7 + v10 + 1) = result;
          uint64_t v15 = v10 + 2;
          unint64_t result = specialized StringProtocol.hexToAscii(_:)(v19 & 0xF);
          if (v10 + 2 >= a2) {
            goto LABEL_58;
          }
          unsigned __int8 v19 = result;
          uint64_t v16 = 3;
          uint64_t v14 = a3;
        }
        *(unsigned char *)(v7 + v15) = v19;
        v10 += v16;
        if (v23 == v13 >> 14) {
          goto LABEL_51;
        }
        break;
    }
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
  return result;
}

uint64_t partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)(a1, a2, (uint64_t (*)(void))specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:), a3);
}

{
  return partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)(a1, a2, (uint64_t (*)(void))specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:), a3);
}

uint64_t _sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)(a1, a2, *(unsigned __int8 *)(v3 + 24), a3);
}

uint64_t closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return _sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0(a1, a2, a3);
}

{
  return _sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0(a1, a2, a3);
}

uint64_t specialized StringProtocol.hexToAscii(_:)(unsigned __int8 a1)
{
  if (a1 <= 0xFu) {
    return byte_182107E70[(char)a1];
  }
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance CFErrorRef()
{
  return swift_unknownObjectRetain();
}

uint64_t IndexPath.subscript.getter(unint64_t a1)
{
  uint64_t result = *(void *)v1;
  switch(*(unsigned char *)(v1 + 16))
  {
    case 1:
      if (a1 > 1) {
        goto LABEL_12;
      }
      if (a1) {
        return *(void *)(v1 + 8);
      }
      return result;
    case 2:
      goto LABEL_4;
    case 3:
      goto LABEL_14;
    default:
      if (!a1) {
        return result;
      }
      __break(1u);
LABEL_4:
      if ((a1 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_12:
        __break(1u);
      }
      else if (*(void *)(result + 16) > a1)
      {
        return *(void *)(result + 8 * a1 + 32);
      }
      __break(1u);
LABEL_14:
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      v5._unint64_t object = (void *)0x80000001823AB180;
      v5._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v5);
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Locale.Current()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Current()
{
  return RawRepresentable<>.init(from:)();
}

unint64_t lazy protocol witness table accessor for type Locale.Current and conformance Locale.Current()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current;
  if (!lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current;
  if (!lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current;
  if (!lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current;
  if (!lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current);
  }
  return result;
}

uint64_t URLComponents.fragment.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  *(unsigned char *)(v2 + 8) = 0;
  *(unsigned char *)(v2 + 16) = 0;
  if (!a2)
  {
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 136) = a1;
    *(void *)(v3 + 144) = a2;
    return result;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t v27 = a1;
    uint64_t v28 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    uint64_t v10 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v11 = (unsigned __int16 *)objc_msgSend(v10, sel__fastCharacterContents);
    id v12 = v10;
    if (v11)
    {
      unint64_t v27 = a1;
      uint64_t v28 = a2;
      StringProtocol._ephemeralString.getter();
      unint64_t v13 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v14 = objc_msgSend(v13, sel_length);
      swift_unknownObjectRelease();
      char v15 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v11, (uint64_t)v14, 0x40u, 0);
    }
    else
    {
      char v15 = specialized Sequence.allSatisfy(_:)(a1, a2, 64);
    }
    char v16 = v15;
    uint64_t v8 = swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_8;
    }
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v7 = HIBYTE(a2) & 0xF;
      unint64_t v27 = a1;
      uint64_t v28 = a2 & 0xFFFFFFFFFFFFFFLL;
      char v6 = (char *)&v27;
    }
    else if ((a1 & 0x1000000000000000) != 0)
    {
      char v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      char v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v8 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x40u, 0);
    if (v8) {
      goto LABEL_8;
    }
  }
  uint64_t v17 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v17 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v17)
  {
    unint64_t v27 = a1;
    uint64_t v28 = a2;
    MEMORY[0x1F4188790](v8);
    _OWORD v25[2] = &v27;
    char v26 = 64;
    swift_bridgeObjectRetain();
    unint64_t v18 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)v25, a1, a2);
    if (v19)
    {
      unint64_t v20 = (unint64_t)v18;
      unint64_t v21 = v19;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      unint64_t v22 = v27;
      unint64_t v23 = v28;
      swift_bridgeObjectRetain();
      unint64_t v20 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 0x40u);
      unint64_t v21 = v24;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v20 = 0;
    unint64_t v21 = 0xE000000000000000;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v3 + 136) = v20;
  *(void *)(v3 + 144) = v21;
  return result;
}

Swift::Int specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = 0;
  Swift::String v5 = (unsigned char *)specialized static RFC3986Parser.parse(urlString:)(a1, a2);
  if (!v5) {
    return v4;
  }
  char v6 = v5;
  if ((a3 & 1) == 0)
  {
    if ((specialized static RFC3986Parser.validate(parseInfo:)(v5) & 1) == 0)
    {
      swift_release();
      return 0;
    }
    return (Swift::Int)v6;
  }
  char v7 = specialized static RFC3986Parser.invalidComponents(of:)(v5);
  if (v7)
  {
    char v8 = v7;
    uint64_t v206 = 0;
    unint64_t v207 = 0xE000000000000000;
    if ((v6[48] & 1) == 0)
    {
      uint64_t v9 = String.subscript.getter();
      uint64_t v10 = MEMORY[0x185301F50](v9);
      id v12 = v11;
      swift_bridgeObjectRelease();
      v203._unint64_t countAndFlagsBits = v10;
      v203._unint64_t object = v12;
      v13._unint64_t countAndFlagsBits = 58;
      v13._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v13);
      v14._unint64_t countAndFlagsBits = v10;
      v14._unint64_t object = v12;
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
    }
    int v15 = v8;
    if (v6[72] == 1)
    {
      if (v6[96] == 1 && v6[120] == 1 && (v6[144] & 1) != 0) {
        goto LABEL_35;
      }
      uint64_t v16 = 12079;
      unint64_t v17 = 0xE200000000000000;
    }
    else
    {
      v18._unint64_t countAndFlagsBits = 12079;
      v18._unint64_t object = (void *)0xE200000000000000;
      String.append(_:)(v18);
      uint64_t v19 = String.subscript.getter();
      unint64_t v23 = v22;
      if ((v15 & 2) != 0)
      {
        if ((v19 ^ v20) >> 14)
        {
          v203._unint64_t countAndFlagsBits = v19;
          v203._unint64_t object = (void *)v20;
          unint64_t v204 = v21;
          unint64_t v205 = v22;
          MEMORY[0x1F4188790](v19);
          id v194 = &v203;
          char v195 = 2;
          unint64_t v29 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((void *(*)(void *__return_ptr, void, void))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v193, v28, v27, v26, v23);
          if (v30)
          {
            uint64_t v24 = (uint64_t)v29;
            unint64_t v25 = v30;
          }
          else
          {
            unint64_t countAndFlagsBits = v203._countAndFlagsBits;
            unint64_t object = v203._object;
            unint64_t v33 = v204;
            unint64_t v34 = v205;
            swift_bridgeObjectRetain();
            uint64_t v24 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(countAndFlagsBits, (unint64_t)object, v33, v34, 2u);
            unint64_t v25 = v35;
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v24 = 0;
          unint64_t v25 = (void *)0xE000000000000000;
        }
        v36._unint64_t countAndFlagsBits = v24;
        v36._unint64_t object = v25;
        String.append(_:)(v36);
      }
      else
      {
        v203._unint64_t countAndFlagsBits = v19;
        v203._unint64_t object = (void *)v20;
        unint64_t v204 = v21;
        unint64_t v205 = v22;
        lazy protocol witness table accessor for type Substring and conformance Substring();
        String.append<A>(contentsOf:)();
      }
      swift_bridgeObjectRelease();
      if ((v6[96] & 1) == 0)
      {
        uint64_t v37 = String.subscript.getter();
        unint64_t v41 = v40;
        if ((v15 & 4) != 0)
        {
          uint64_t v201 = 58;
          unint64_t v202 = 0xE100000000000000;
          if ((v37 ^ v38) >> 14)
          {
            v203._unint64_t countAndFlagsBits = v37;
            v203._unint64_t object = (void *)v38;
            unint64_t v204 = v39;
            unint64_t v205 = v40;
            MEMORY[0x1F4188790](v37);
            id v194 = &v203;
            char v195 = 2;
            unint64_t v50 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((void *(*)(void *__return_ptr, void, void))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v193, v49, v48, v47, v41);
            if (v51)
            {
              uint64_t v45 = (uint64_t)v50;
              int v46 = v51;
            }
            else
            {
              unint64_t v52 = v203._countAndFlagsBits;
              unint64_t v53 = v203._object;
              unint64_t v54 = v204;
              unint64_t v55 = v205;
              swift_bridgeObjectRetain();
              uint64_t v45 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v52, (unint64_t)v53, v54, v55, 2u);
              int v46 = v56;
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            uint64_t v45 = 0;
            int v46 = (void *)0xE000000000000000;
          }
          v57._unint64_t countAndFlagsBits = v45;
          v57._unint64_t object = v46;
          String.append(_:)(v57);
          swift_bridgeObjectRelease();
          uint64_t v43 = v201;
          unint64_t v44 = v202;
        }
        else
        {
          v203._unint64_t countAndFlagsBits = 58;
          v203._unint64_t object = (void *)0xE100000000000000;
          v42._unint64_t countAndFlagsBits = MEMORY[0x185301F50](v37, v38, v39, v40);
          String.append(_:)(v42);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v43 = v203._countAndFlagsBits;
          unint64_t v44 = (unint64_t)v203._object;
        }
        unint64_t v58 = v44;
        String.append(_:)(*(Swift::String *)&v43);
        swift_bridgeObjectRelease();
      }
      uint64_t v16 = 64;
      unint64_t v17 = 0xE100000000000000;
    }
    String.append(_:)(*(Swift::String *)&v16);
LABEL_35:
    if (v6[120]) {
      goto LABEL_39;
    }
    uint64_t v59 = String.subscript.getter();
    unint64_t v63 = v59;
    unint64_t v64 = v60;
    unint64_t v65 = v61;
    unint64_t v66 = v62;
    if ((v15 & 8) == 0)
    {
      v203._unint64_t countAndFlagsBits = v59;
      v203._unint64_t object = (void *)v60;
      unint64_t v204 = v61;
      unint64_t v205 = v62;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      String.append<A>(contentsOf:)();
      goto LABEL_38;
    }
    int v79 = v6[217];
    int v198 = v15;
    if (v79 == 1)
    {
      unint64_t v80 = v59 ^ v60;
      goto LABEL_62;
    }
    if (v6[48])
    {
      uint64_t v196 = 0;
      uint64_t v197 = 0;
      uint64_t v84 = 0;
    }
    else
    {
      uint64_t v85 = String.subscript.getter();
      uint64_t v196 = v86;
      uint64_t v197 = v85;
      uint64_t v84 = v87;
    }
    unint64_t v80 = v63 ^ v64;
    if ((v63 ^ v64) >= 0x4000)
    {
      swift_bridgeObjectRetain();
      if (Substring.UTF8View.subscript.getter() == 91)
      {
        if (__OFSUB__(specialized Collection.count.getter(v63, v64, v65, v66), 1))
        {
          __break(1u);
          goto LABEL_153;
        }
        Substring.UTF8View.index(_:offsetBy:)();
        int v88 = Substring.UTF8View.subscript.getter();
        swift_bridgeObjectRelease();
        if (v88 == 93)
        {
          swift_bridgeObjectRelease();
          goto LABEL_64;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    if (v84)
    {
      uint64_t v89 = one-time initialization token for schemesToPercentEncodeHost;
      swift_bridgeObjectRetain();
      if (v89 != -1) {
        swift_once();
      }
      uint64_t v90 = static RFC3986Parser.schemesToPercentEncodeHost;
      Swift::String v91 = Substring.lowercased()();
      LOBYTE(v90) = specialized Set.contains(_:)(v91._countAndFlagsBits, (uint64_t)v91._object, v90);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      if (v90)
      {
LABEL_62:
        if (!(v80 >> 14))
        {
          swift_bridgeObjectRelease();
          uint64_t v92 = 0;
          uint64_t v93 = (void *)0xE000000000000000;
          goto LABEL_65;
        }
LABEL_64:
        swift_bridgeObjectRetain();
        uint64_t v92 = specialized static RFC3986Parser.percentEncodeHost<A>(_:)(v63, v64, v65, v66);
        uint64_t v93 = v94;
        swift_bridgeObjectRelease_n();
        if (!v93)
        {
LABEL_114:
          swift_release();
LABEL_141:
          swift_bridgeObjectRelease();
          return 0;
        }
LABEL_65:
        v95._unint64_t countAndFlagsBits = v92;
        v95._unint64_t object = v93;
        String.append(_:)(v95);
        swift_bridgeObjectRelease();
        int v15 = v198;
        if ((v6[144] & 1) == 0) {
          goto LABEL_40;
        }
        goto LABEL_66;
      }
    }
    uint64_t v84 = MEMORY[0x185301F50](v63, v64, v65, v66);
    unint64_t v63 = v123;
    swift_bridgeObjectRelease();
    uint64_t v124 = v84 & 0xFFFFFFFFFFFFLL;
    if ((v63 & 0x2000000000000000) != 0) {
      uint64_t v125 = HIBYTE(v63) & 0xF;
    }
    else {
      uint64_t v125 = v84 & 0xFFFFFFFFFFFFLL;
    }
    if (!v125)
    {
      swift_bridgeObjectRelease();
      unint64_t v64 = 0;
      unint64_t v66 = 0xE000000000000000;
      int v15 = v198;
      goto LABEL_116;
    }
    if ((v63 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      int v15 = v198;
      goto LABEL_112;
    }
    if ((v63 & 0x2000000000000000) != 0)
    {
      v203._unint64_t countAndFlagsBits = v84;
      v203._unint64_t object = (void *)(v63 & 0xFFFFFFFFFFFFFFLL);
      uint64_t v201 = (uint64_t)@nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
      unint64_t v202 = 0;
      swift_bridgeObjectRetain_n();
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v203, HIBYTE(v63) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v201, 1, (unsigned __int8 *)&v203, HIBYTE(v63) & 0xF, (uint64_t *)&v199);
      unint64_t v64 = v199;
      unint64_t v66 = v200;
      swift_release();
      int v15 = v198;
      goto LABEL_111;
    }
    if ((v84 & 0x1000000000000000) == 0) {
      goto LABEL_158;
    }
    uint64_t v126 = (unsigned __int8 *)((v63 & 0xFFFFFFFFFFFFFFFLL) + 32);
    while (1)
    {
      int v15 = v198;
      v203._unint64_t countAndFlagsBits = (uint64_t)@nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
      v203._unint64_t object = 0;
      swift_bridgeObjectRetain_n();
      unint64_t v64 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v126, v124, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v203, 1, v126, v124);
      unint64_t v66 = v127;
LABEL_111:
      swift_bridgeObjectRelease();
      if (v66 != 1)
      {
        swift_bridgeObjectRelease_n();
        if (!v66) {
          goto LABEL_114;
        }
        goto LABEL_116;
      }
LABEL_112:
      v203._unint64_t countAndFlagsBits = v84;
      v203._unint64_t object = (void *)v63;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol._ephemeralString.getter();
      uint64_t v158 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v159 = objc_msgSend(v158, sel__fastCharacterContents, v196, v197);
      id v160 = v158;
      if (v159)
      {
        v203._unint64_t countAndFlagsBits = v84;
        v203._unint64_t object = (void *)v63;
        StringProtocol._ephemeralString.getter();
        id v161 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v162 = objc_msgSend(v161, sel_length);
        uint64_t v163 = swift_unknownObjectRelease();
        uint64_t v84 = (uint64_t)&v196;
        uint64_t v164 = MEMORY[0x1F4188790](v163);
        LOBYTE(v194) = 1;
        MEMORY[0x1F4188790](v164);
        v192[2] = v159;
        v192[3] = v162;
        unint64_t v64 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v159, (uint64_t)v162, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToASCII(_:_:_:_:_:_:_:), 0, (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), v165, partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), (uint64_t)v192);
        unint64_t v66 = v166;
        swift_bridgeObjectRelease_n();
        if (!v66) {
          goto LABEL_114;
        }
        goto LABEL_116;
      }
      v203._unint64_t countAndFlagsBits = v84;
      v203._unint64_t object = (void *)v63;
      swift_bridgeObjectRetain();
      uint64_t v175 = String.init<A>(_:)();
      unint64_t v176 = v174;
      if ((v174 & 0x1000000000000000) != 0)
      {
        uint64_t v175 = static String._copying(_:)();
        unint64_t v191 = v190;
        swift_bridgeObjectRelease();
        unint64_t v176 = v191;
        if ((v191 & 0x2000000000000000) != 0)
        {
LABEL_164:
          v203._unint64_t countAndFlagsBits = v175;
          v203._unint64_t object = (void *)(v176 & 0xFFFFFFFFFFFFFFLL);
          uint64_t v201 = (uint64_t)@nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
          unint64_t v202 = 0;
          closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v203, HIBYTE(v176) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v201, 1, (unsigned __int8 *)&v203, HIBYTE(v176) & 0xF, (uint64_t *)&v199);
          unint64_t v64 = v199;
          unint64_t v66 = v200;
          swift_release();
          goto LABEL_165;
        }
      }
      else if ((v174 & 0x2000000000000000) != 0)
      {
        goto LABEL_164;
      }
      if ((v175 & 0x1000000000000000) != 0)
      {
        v177 = (unsigned __int8 *)((v176 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v178 = v175 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v177 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      v203._unint64_t countAndFlagsBits = (uint64_t)@nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
      v203._unint64_t object = 0;
      unint64_t v64 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v177, v178, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v203, 1, v177, v178);
      unint64_t v66 = v179;
LABEL_165:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      if (!v66) {
        goto LABEL_114;
      }
LABEL_116:
      unint64_t v167 = specialized Collection.first.getter(v64, v66);
      if ((v167 & 0x1FF) != 0x5B) {
        goto LABEL_142;
      }
      if ((v66 & 0x1000000000000000) != 0)
      {
LABEL_153:
        Swift::Int result = String.UTF8View._foreignCount()();
        if (__OFSUB__(result, 1))
        {
          __break(1u);
          return result;
        }
        uint64_t v169 = (v64 >> 59) & 1;
        unint64_t v167 = MEMORY[0x185302230](15, result - 1, v64, v66);
        int v15 = v198;
LABEL_122:
        if ((v167 & 0xC) != 4 << v169) {
          goto LABEL_123;
        }
        goto LABEL_156;
      }
      uint64_t v168 = HIBYTE(v66) & 0xF;
      if ((v66 & 0x2000000000000000) == 0) {
        uint64_t v168 = v64 & 0xFFFFFFFFFFFFLL;
      }
      if (v168)
      {
        unint64_t v167 = (v168 << 16) - 65532;
        LOBYTE(v169) = 1;
        goto LABEL_122;
      }
      __break(1u);
LABEL_156:
      unint64_t v167 = _StringGuts._slowEnsureMatchingEncoding(_:)(v167, v64, v66);
LABEL_123:
      unint64_t v170 = HIBYTE(v66) & 0xF;
      if ((v66 & 0x2000000000000000) == 0) {
        unint64_t v170 = v64 & 0xFFFFFFFFFFFFLL;
      }
      unint64_t v171 = v167 >> 16;
      if (v167 >> 16 < v170)
      {
        if ((v66 & 0x1000000000000000) != 0)
        {
          char v173 = String.UTF8View._foreignSubscript(position:)();
        }
        else if ((v66 & 0x2000000000000000) != 0)
        {
          v203._unint64_t countAndFlagsBits = v64;
          v203._unint64_t object = (void *)(v66 & 0xFFFFFFFFFFFFFFLL);
          char v173 = *((unsigned char *)&v203._countAndFlagsBits + v171);
        }
        else
        {
          if ((v64 & 0x1000000000000000) != 0) {
            uint64_t v172 = (v66 & 0xFFFFFFFFFFFFFFFLL) + 32;
          }
          else {
            uint64_t v172 = _StringObject.sharedUTF8.getter();
          }
          char v173 = *(unsigned char *)(v172 + v171);
        }
        if (v173 == 93)
        {
          if ((specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v64, v66) & 1) == 0)
          {
LABEL_140:
            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_141;
          }
        }
        else
        {
LABEL_142:
          if ((v66 & 0x1000000000000000) != 0)
          {
            v203._unint64_t countAndFlagsBits = v64;
            v203._unint64_t object = (void *)v66;
            lazy protocol witness table accessor for type String and conformance String();
            StringProtocol._ephemeralString.getter();
            Swift::Int v183 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            char v184 = (unsigned __int16 *)objc_msgSend(v183, sel__fastCharacterContents);
            id v185 = v183;
            if (v184)
            {
              v203._unint64_t countAndFlagsBits = v64;
              v203._unint64_t object = (void *)v66;
              StringProtocol._ephemeralString.getter();
              char v186 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              id v187 = objc_msgSend(v186, sel_length);
              swift_unknownObjectRelease();
              char v188 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v184, (uint64_t)v187, 4u, 1);
            }
            else
            {
              char v188 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v64, v66, 4u, 1);
            }
            int v15 = v198;
            if ((v188 & 1) == 0) {
              goto LABEL_140;
            }
          }
          else
          {
            if ((v66 & 0x2000000000000000) != 0)
            {
              uint64_t v181 = HIBYTE(v66) & 0xF;
              v203._unint64_t countAndFlagsBits = v64;
              v203._unint64_t object = (void *)(v66 & 0xFFFFFFFFFFFFFFLL);
              v180 = (char *)&v203;
            }
            else if ((v64 & 0x1000000000000000) != 0)
            {
              v180 = (char *)((v66 & 0xFFFFFFFFFFFFFFFLL) + 32);
              uint64_t v181 = v64 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              v180 = (char *)_StringObject.sharedUTF8.getter();
            }
            if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v180, v181, 4u, 1))goto LABEL_140; {
          }
            }
        }
        v182._unint64_t countAndFlagsBits = v64;
        v182._unint64_t object = (void *)v66;
        String.append(_:)(v182);
LABEL_38:
        swift_bridgeObjectRelease();
LABEL_39:
        if ((v6[144] & 1) == 0)
        {
LABEL_40:
          unint64_t v67 = String.subscript.getter();
          uint64_t v71 = v70;
          if ((v67 ^ v68) >= 0x4000)
          {
            uint64_t v72 = v67;
            uint64_t v73 = v68;
            uint64_t v74 = v69;
            uint64_t v75 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v67, v68, v69, v70, 10);
            if ((v76 & 0x100) != 0)
            {
              unint64_t v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized _parseInteger<A, B>(ascii:radix:)(v72, v73, v74, v71, 10);
              char v82 = v81;
              swift_bridgeObjectRelease();
              if (v82) {
                goto LABEL_66;
              }
            }
            else
            {
              unint64_t v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v75;
              char v78 = v76;
              swift_bridgeObjectRelease();
              if (v78) {
                goto LABEL_66;
              }
            }
            v203._unint64_t countAndFlagsBits = 58;
            v203._unint64_t object = (void *)0xE100000000000000;
            uint64_t v201 = (uint64_t)v77;
            v83._unint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v83);
            swift_bridgeObjectRelease();
            String.append(_:)(v203);
          }
          swift_bridgeObjectRelease();
        }
LABEL_66:
        if (v6[168]) {
          uint64_t v96 = MEMORY[0x185302C80](0, 0xE000000000000000);
        }
        else {
          uint64_t v96 = String.subscript.getter();
        }
        unint64_t v100 = v96;
        unint64_t v101 = v97;
        unint64_t v102 = v98;
        unint64_t v103 = v99;
        if ((v15 & 0x20) != 0)
        {
          if ((v96 ^ v97) >> 14)
          {
            swift_bridgeObjectRetain();
            uint64_t v104 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v100, v101, v102, v103);
            BOOL v105 = v106;
            swift_bridgeObjectRelease_n();
          }
          else
          {
            swift_bridgeObjectRelease();
            uint64_t v104 = 0;
            BOOL v105 = (void *)0xE000000000000000;
          }
          v107._unint64_t countAndFlagsBits = v104;
          v107._unint64_t object = v105;
          String.append(_:)(v107);
        }
        else
        {
          v203._unint64_t countAndFlagsBits = v96;
          v203._unint64_t object = (void *)v97;
          unint64_t v204 = v98;
          unint64_t v205 = v99;
          lazy protocol witness table accessor for type Substring and conformance Substring();
          String.append<A>(contentsOf:)();
        }
        swift_bridgeObjectRelease();
        if ((v6[192] & 1) == 0)
        {
          uint64_t v108 = String.subscript.getter();
          unint64_t v112 = v111;
          if ((v15 & 0x40) != 0)
          {
            uint64_t v201 = 63;
            unint64_t v202 = 0xE100000000000000;
            if ((v108 ^ v109) >> 14)
            {
              v203._unint64_t countAndFlagsBits = v108;
              v203._unint64_t object = (void *)v109;
              unint64_t v204 = v110;
              unint64_t v205 = v111;
              MEMORY[0x1F4188790](v108);
              id v194 = &v203;
              char v195 = 64;
              unint64_t v121 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((void *(*)(void *__return_ptr, void, void))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v193, v120, v119, v118, v112);
              if (v122)
              {
                uint64_t v116 = (uint64_t)v121;
                unint64_t v117 = v122;
              }
              else
              {
                unint64_t v128 = v203._countAndFlagsBits;
                uint64_t v129 = v203._object;
                unint64_t v130 = v204;
                unint64_t v131 = v205;
                swift_bridgeObjectRetain();
                uint64_t v116 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v128, (unint64_t)v129, v130, v131, 0x40u);
                unint64_t v117 = v132;
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
              uint64_t v116 = 0;
              unint64_t v117 = (void *)0xE000000000000000;
            }
            v133._unint64_t countAndFlagsBits = v116;
            v133._unint64_t object = v117;
            String.append(_:)(v133);
            swift_bridgeObjectRelease();
            uint64_t v114 = v201;
            unint64_t v115 = v202;
          }
          else
          {
            v203._unint64_t countAndFlagsBits = 63;
            v203._unint64_t object = (void *)0xE100000000000000;
            v113._unint64_t countAndFlagsBits = MEMORY[0x185301F50](v108, v109, v110, v111);
            String.append(_:)(v113);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v114 = v203._countAndFlagsBits;
            unint64_t v115 = (unint64_t)v203._object;
          }
          unint64_t v134 = v115;
          String.append(_:)(*(Swift::String *)&v114);
          swift_bridgeObjectRelease();
        }
        if ((v6[216] & 1) == 0)
        {
          uint64_t v135 = String.subscript.getter();
          unint64_t v139 = v138;
          if (v15 < 0)
          {
            uint64_t v201 = 35;
            unint64_t v202 = 0xE100000000000000;
            if ((v135 ^ v136) >> 14)
            {
              v203._unint64_t countAndFlagsBits = v135;
              v203._unint64_t object = (void *)v136;
              unint64_t v204 = v137;
              unint64_t v205 = v138;
              MEMORY[0x1F4188790](v135);
              id v194 = &v203;
              char v195 = 64;
              long long v148 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t)v193, v147, v146, v145, v139);
              if (v149)
              {
                uint64_t v143 = (uint64_t)v148;
                uint64_t v144 = v149;
              }
              else
              {
                unint64_t v150 = v203._countAndFlagsBits;
                uint64_t v151 = v203._object;
                unint64_t v152 = v204;
                unint64_t v153 = v205;
                swift_bridgeObjectRetain();
                uint64_t v143 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v150, (unint64_t)v151, v152, v153, 0x40u);
                uint64_t v144 = v154;
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
              uint64_t v143 = 0;
              uint64_t v144 = (void *)0xE000000000000000;
            }
            v155._unint64_t countAndFlagsBits = v143;
            v155._unint64_t object = v144;
            String.append(_:)(v155);
            swift_bridgeObjectRelease();
            uint64_t v141 = v201;
            unint64_t v142 = v202;
          }
          else
          {
            v203._unint64_t countAndFlagsBits = 35;
            v203._unint64_t object = (void *)0xE100000000000000;
            v140._unint64_t countAndFlagsBits = MEMORY[0x185301F50](v135, v136, v137, v138);
            String.append(_:)(v140);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v141 = v203._countAndFlagsBits;
            unint64_t v142 = (unint64_t)v203._object;
          }
          unint64_t v156 = v142;
          String.append(_:)(*(Swift::String *)&v141);
          swift_bridgeObjectRelease();
        }
        uint64_t v4 = specialized static RFC3986Parser.parse(urlString:)(v206, v207);
        swift_bridgeObjectRelease();
        swift_release();
        return v4;
      }
      __break(1u);
LABEL_158:
      uint64_t v126 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      uint64_t v124 = v189;
    }
  }
  return (Swift::Int)v6;
}

uint64_t specialized static RFC3986Parser.parse(urlString:)(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  swift_bridgeObjectRetain();
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_75;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    goto LABEL_76;
  }
LABEL_3:
  uint64_t v11 = &v195;
  if ((a1 & 0x1000000000000000) != 0)
  {
    id v12 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v13 = a1 & 0xFFFFFFFFFFFFLL;
    goto LABEL_5;
  }
  while (1)
  {
    uint64_t v103 = _StringObject.sharedUTF8.getter();
    uint64_t v11 = &v195;
    id v12 = (unsigned __int8 *)v103;
    uint64_t v13 = v104;
LABEL_5:
    char v14 = 1;
    LOBYTE(v169) = 1;
    LOBYTE(v140) = 1;
    LOBYTE(v193) = 1;
    char v224 = 1;
    char v223 = 1;
    char v222 = 1;
    char v221 = 1;
    char v220 = 1;
    uint64_t v196 = 0;
    unint64_t v195 = 0;
    char v197 = 1;
    long long v198 = 0uLL;
    char v199 = 1;
    long long v200 = 0uLL;
    char v201 = 1;
    long long v202 = 0uLL;
    char v203 = 1;
    unint64_t v205 = 0;
    unint64_t v204 = 0;
    char v206 = 1;
    uint64_t v208 = 0;
    uint64_t v207 = 0;
    char v209 = 1;
    long long v210 = 0uLL;
    char v211 = 1;
    unint64_t v213 = 0;
    unint64_t v212 = 0;
    char v214 = 1;
    __int16 v215 = 0;
    char v216 = 0;
    if (!v13)
    {
      char v128 = 0;
      char v138 = 0;
      char v139 = 0;
      char v21 = 0;
      unint64_t v22 = 0;
      unint64_t v23 = 0;
      unint64_t v20 = 0;
      unint64_t v24 = 0;
      int64_t v19 = 0;
      uint64_t v4 = 0;
      unint64_t v134 = 0;
      unint64_t v135 = 0;
      char v219 = 1;
      char v218 = 1;
      char v217 = 1;
      char v168 = 1;
      char v167 = 1;
      char v166 = 0;
      long long v25 = 0uLL;
      long long v136 = 0u;
      char v165 = 1;
      char v26 = 1;
      char v18 = 1;
      char v164 = 1;
      char v27 = 1;
      char v28 = 1;
      char v29 = 1;
      char v30 = 1;
LABEL_15:
      long long v130 = v25;
      long long v132 = v25;
      long long v129 = v25;
      goto LABEL_129;
    }
    unsigned int v15 = *v12;
    if (v15 - 35 <= 0x3A
      && (uint64_t v16 = 0x500000030801001, ((1 << (v15 - 35)) & 0x500000030801001) != 0))
    {
LABEL_8:
      uint64_t v17 = 0;
    }
    else
    {
      unint64_t v34 = 1;
      uint64_t v16 = 0x500000030001001;
      uint64_t v17 = 1;
      while (1)
      {
        if (v13 == v17)
        {
          uint64_t v17 = v13;
          goto LABEL_9;
        }
        int v40 = v12[v17++];
        uint64_t v9 = (v40 - 35);
        if (v9 <= 0x3A)
        {
          if (((1 << v9) & 0x500000030001001) != 0) {
            goto LABEL_8;
          }
          if (v9 == 23) {
            break;
          }
        }
      }
      uint64_t v41 = v17 - 1;
      if (v17 - 1 < 0) {
        goto LABEL_153;
      }
      unint64_t v195 = 0;
      uint64_t v196 = v17 - 1;
      char v197 = 0;
      if (v13 == v17)
      {
        if (v15 >= 0x41)
        {
          char v14 = 1;
          if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(0, v41, (uint64_t)v12, 1u, 0))
          {
            unint64_t v23 = v41;
            char v128 = 0;
            char v138 = 0;
            char v139 = 0;
            char v21 = 0;
            char v30 = 0;
            unint64_t v22 = 0;
            unint64_t v20 = 0;
            unint64_t v24 = 0;
            unint64_t v134 = 0;
            unint64_t v135 = 0;
            char v219 = 0;
            char v218 = 1;
            char v217 = 1;
            char v168 = 1;
            char v167 = 1;
            long long v25 = 0uLL;
            long long v136 = 0u;
            char v166 = 0;
            char v26 = 1;
            char v18 = 1;
            char v165 = 1;
            char v27 = 1;
            char v28 = 1;
            char v164 = 1;
            char v29 = 1;
            int64_t v19 = v13;
            uint64_t v4 = v13;
            goto LABEL_15;
          }
        }
        goto LABEL_141;
      }
      if (v15 < 0x41) {
        goto LABEL_141;
      }
      BOOL v48 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(0, v17 - 1, (uint64_t)v12, 1u, 0);
      uint64_t v11 = &v195;
      if (!v48) {
        goto LABEL_141;
      }
    }
LABEL_9:
    char v18 = 1;
    if (v17 == v13) {
      int64_t v19 = 0;
    }
    else {
      int64_t v19 = v17;
    }
    if (v19 + 1 == v13)
    {
      unint64_t v20 = 0;
      unint64_t v126 = 0;
      goto LABEL_25;
    }
    uint64_t v16 = v12[v19];
    if (v16 != 47 || v12[v19 + 1] != 47)
    {
      unint64_t v126 = 0;
      unint64_t v20 = 0;
      goto LABEL_25;
    }
    uint64_t v31 = v19 + 2;
    uint64_t v16 = v13;
    if (v19 + 2 == v13) {
      goto LABEL_23;
    }
    unsigned int v32 = v12[v31];
    BOOL v33 = v32 > 0x3F || ((1 << v32) & 0x8000800800000000) == 0;
    uint64_t v16 = v19 + 2;
    if (!v33) {
      goto LABEL_23;
    }
    int64_t v42 = v19 + 3;
    while (v13 != v42)
    {
      unsigned int v43 = v12[v42++];
      BOOL v44 = v43 > 0x3F;
      unint64_t v45 = (1 << v43) & 0x8000800800000000;
      if (!v44 && v45 != 0)
      {
        uint64_t v47 = v42 - 1;
        goto LABEL_73;
      }
    }
    uint64_t v47 = v13;
LABEL_73:
    if (v47 >= v31)
    {
      uint64_t v16 = v19 + 2;
      if (v31 == v47)
      {
LABEL_23:
        unint64_t v126 = 0;
        unint64_t v20 = 0;
        *(void *)&long long v202 = v19 + 2;
        *((void *)&v202 + 1) = v16;
        int64_t v19 = v16;
        char v203 = 0;
        goto LABEL_25;
      }
      int64_t v19 = v47;
      if ((specialized static RFC3986Parser.parseAuthority(_:into:)(v31, v47, (uint64_t)v12, v13, (uint64_t)&v195) & 1) == 0) {
        goto LABEL_141;
      }
      unint64_t v20 = v204;
      unint64_t v126 = v205;
      if (v206)
      {
        char v18 = 1;
        uint64_t v11 = &v195;
        goto LABEL_25;
      }
      if (v204 == v205)
      {
        char v18 = 0;
        unint64_t v126 = v204;
        uint64_t v11 = &v195;
        goto LABEL_25;
      }
      uint64_t v16 = v196;
      if (v12[v204] - 58 < 0xFFFFFFF6)
      {
LABEL_188:
        if (v196 - v195 == 11) {
          char v106 = v197;
        }
        else {
          char v106 = 1;
        }
        if ((v106 & 1) == 0
          && (((0x3FFE000000000uLL >> ((*v12 - 1) >> 1)) & 0x20) + *v12) == 97
          && (((0x3FFE000000000uLL >> ((v12[1] - 1) >> 1)) & 0x20) + v12[1]) == 100
          && (((0x3FFE000000000uLL >> ((v12[2] - 1) >> 1)) & 0x20) + v12[2]) == 100
          && (((0x3FFE000000000uLL >> ((v12[3] - 1) >> 1)) & 0x20) + v12[3]) == 114
          && (((0x3FFE000000000uLL >> ((v12[4] - 1) >> 1)) & 0x20) + v12[4]) == 101
          && (((0x3FFE000000000uLL >> ((v12[5] - 1) >> 1)) & 0x20) + v12[5]) == 115
          && (((0x3FFE000000000uLL >> ((v12[6] - 1) >> 1)) & 0x20) + v12[6]) == 115
          && (((0x3FFE000000000uLL >> ((v12[7] - 1) >> 1)) & 0x20) + v12[7]) == 98
          && (((0x3FFE000000000uLL >> ((v12[8] - 1) >> 1)) & 0x20) + v12[8]) == 111
          && (((0x3FFE000000000uLL >> ((v12[9] - 1) >> 1)) & 0x20) + v12[9]) == 111)
        {
          uint64_t v16 = 0x3FFE000000000;
          if ((((0x3FFE000000000uLL >> ((v12[10] - 1) >> 1)) & 0x20) + v12[10]) == 107) {
            goto LABEL_212;
          }
        }
        goto LABEL_141;
      }
      unint64_t v109 = v204 + 1;
      if (v204 + 1 != v205)
      {
        while (v12[v109] - 58 >= 0xFFFFFFF6)
        {
          if (v205 == ++v109) {
            goto LABEL_212;
          }
        }
        goto LABEL_188;
      }
LABEL_212:
      char v18 = 0;
      uint64_t v11 = &v195;
LABEL_25:
      if (v19 == v13)
      {
        LOBYTE(v2) = 0;
        uint64_t v207 = v13;
        uint64_t v208 = v13;
        uint64_t v4 = v13;
LABEL_27:
        char v128 = v2;
        char v21 = 0;
        unint64_t v22 = v195;
        unint64_t v23 = v196;
        char v30 = v197;
        long long v136 = v198;
        char v29 = v199;
        char v28 = v201;
        long long v130 = v202;
        long long v132 = v200;
        char v27 = v203;
        long long v129 = v210;
        char v26 = v211;
        unint64_t v135 = v212;
        unint64_t v134 = v213;
        char v14 = v214;
        char v139 = v215;
        char v138 = HIBYTE(v215);
        char v219 = v197;
        char v218 = v199;
        char v217 = v201;
        char v168 = v203;
        char v167 = v18;
        char v166 = 0;
        char v165 = v211;
        char v164 = v214;
        unint64_t v24 = v126;
LABEL_129:
        char v121 = v14 & 1;
        char v116 = v26 & 1;
        char v65 = v21 & 1;
        char v66 = v18 & 1;
        char v67 = v27 & 1;
        char v68 = v28 & 1;
        char v69 = v29 & 1;
        uint64_t v125 = *(void *)(v7 + 24);
        uint64_t v127 = *(void *)(v7 + 16);
        unint64_t v70 = convert #1 (_:) in static RFC3986Parser.parse(urlString:)(v22, v23, v30 & 1, v7);
        uint64_t v123 = v71;
        unint64_t v124 = v70;
        char v122 = v72;
        unint64_t v137 = convert #1 (_:) in static RFC3986Parser.parse(urlString:)(v136, *((unint64_t *)&v136 + 1), v69, v7);
        uint64_t v120 = v73;
        char v119 = v74;
        unint64_t v133 = convert #1 (_:) in static RFC3986Parser.parse(urlString:)(v132, *((unint64_t *)&v132 + 1), v68, v7);
        uint64_t v118 = v75;
        char v117 = v76;
        unint64_t v131 = convert #1 (_:) in static RFC3986Parser.parse(urlString:)(v130, *((unint64_t *)&v130 + 1), v67, v7);
        uint64_t v115 = v77;
        char v114 = v78;
        unint64_t v79 = convert #1 (_:) in static RFC3986Parser.parse(urlString:)(v20, v24, v66, v7);
        uint64_t v112 = v80;
        unint64_t v113 = v79;
        char v111 = v81;
        unint64_t v82 = convert #1 (_:) in static RFC3986Parser.parse(urlString:)(v19, v4, v65, v7);
        uint64_t v84 = v83;
        char v110 = v85;
        unint64_t v86 = convert #1 (_:) in static RFC3986Parser.parse(urlString:)(v129, *((unint64_t *)&v129 + 1), v116, v7);
        uint64_t v88 = v87;
        char v90 = v89;
        unint64_t v91 = convert #1 (_:) in static RFC3986Parser.parse(urlString:)(v135, v134, v121, v7);
        uint64_t v93 = v92;
        char v95 = v94;
        type metadata accessor for URLParseInfo();
        uint64_t v96 = swift_allocObject();
        *(void *)(v96 + 16) = v127;
        *(void *)(v96 + 24) = v125;
        *(void *)(v96 + 32) = v124;
        *(void *)(v96 + 40) = v123;
        *(unsigned char *)(v96 + 48) = v122 & 1;
        *(void *)(v96 + 56) = v137;
        *(void *)(v96 + 64) = v120;
        *(unsigned char *)(v96 + 72) = v119 & 1;
        *(void *)(v96 + 80) = v133;
        *(void *)(v96 + 88) = v118;
        *(unsigned char *)(v96 + 96) = v117 & 1;
        *(void *)(v96 + 104) = v131;
        *(void *)(v96 + 112) = v115;
        *(unsigned char *)(v96 + 120) = v114 & 1;
        *(void *)(v96 + 128) = v113;
        *(void *)(v96 + 136) = v112;
        *(unsigned char *)(v96 + 144) = v111 & 1;
        *(void *)(v96 + 152) = v82;
        *(void *)(v96 + 160) = v84;
        *(unsigned char *)(v96 + 168) = v110 & 1;
        *(void *)(v96 + 176) = v86;
        *(void *)(v96 + 184) = v88;
        *(unsigned char *)(v96 + 192) = v90 & 1;
        *(void *)(v96 + 200) = v91;
        *(void *)(v96 + 208) = v93;
        *(unsigned char *)(v96 + 216) = v95 & 1;
        *(unsigned char *)(v96 + 217) = v139;
        *(unsigned char *)(v96 + 218) = v138;
        *(unsigned char *)(v96 + 219) = v128 & 1;
        swift_bridgeObjectRetain();
        swift_release();
        return v96;
      }
      uint64_t v9 = v12[v19];
      if (v9 == 35 || v9 == 63)
      {
        unint64_t v2 = 0;
        uint64_t v207 = v19;
        uint64_t v208 = v19;
        char v209 = 0;
        uint64_t v4 = v19;
        char v216 = 0;
      }
      else
      {
        LODWORD(v10) = 0;
        uint64_t v39 = v13 - 1;
        uint64_t v4 = v19;
        while (1)
        {
          uint64_t v16 = v4;
          uint64_t v10 = (void *)((v9 == 37) | v10);
          if (v39 == v4) {
            break;
          }
          LODWORD(v9) = v12[++v4];
          if (v9 == 35 || v9 == 63) {
            goto LABEL_56;
          }
        }
        uint64_t v4 = v13;
LABEL_56:
        if (v4 < v19)
        {
          __break(1u);
          goto LABEL_58;
        }
        uint64_t v207 = v19;
        uint64_t v208 = v4;
        char v209 = 0;
        unint64_t v2 = (unint64_t)v10;
        uint64_t v9 = v10 & 1;
        char v216 = v10 & 1;
        if (v39 == v16) {
          goto LABEL_27;
        }
      }
      uint64_t v3 = &v195;
      unint64_t v34 = (unint64_t)&v213;
      unint64_t v35 = &v214;
      int v36 = v12[v4];
      if (v36 == 35)
      {
        if (v13 >= v4 + 1)
        {
          unint64_t v212 = v4 + 1;
          goto LABEL_59;
        }
      }
      else
      {
        if (v36 != 63)
        {
LABEL_60:
          unint64_t v22 = v195;
          unint64_t v23 = v196;
          char v30 = v197;
          long long v136 = v198;
          char v29 = v199;
          char v28 = v201;
          long long v130 = v202;
          long long v132 = v200;
          char v27 = v203;
          char v18 = v206;
          char v21 = v209;
          long long v129 = v210;
          char v26 = v211;
          unint64_t v135 = v212;
          unint64_t v134 = v213;
          char v139 = v215 & 1;
          char v138 = HIBYTE(v215) & 1;
          char v14 = v214;
          unint64_t v24 = v126;
          char v128 = v2;
          goto LABEL_129;
        }
        uint64_t v17 = v4 + 1;
        if (v13 >= v4 + 1)
        {
          uint64_t v37 = specialized Collection<>.firstIndex(of:)(0x23u, v4 + 1, v13, (uint64_t)v12);
          if ((v38 & 1) == 0)
          {
            if (v37 >= v17)
            {
              *(void *)&long long v210 = v4 + 1;
              *((void *)&v210 + 1) = v37;
              char v211 = 0;
              uint64_t v11 = &v195;
              if (v13 >= v37 + 1)
              {
                unint64_t v212 = v37 + 1;
                unint64_t v34 = (unint64_t)&v213;
LABEL_59:
                *(void *)unint64_t v34 = v13;
                *unint64_t v35 = 0;
                goto LABEL_60;
              }
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
              while (1)
              {
                Swift::Int v183 = v11;
                char v184 = (void *)v16;
                char v185 = 0;
                char v192 = v10 & 1;
                if (v34 == v9) {
                  break;
                }
                LODWORD(v58) = *((unsigned __int8 *)&v193 + v16);
                uint64_t v11 = (unint64_t *)v16;
LABEL_100:
                uint64_t v3 = &v169;
                uint64_t v59 = (uint64_t *)&v189;
                unint64_t v60 = &v190;
                if (v58 == 35)
                {
                  unint64_t v58 = (char *)v11 + 1;
                  if (v4 >= (uint64_t)v11 + 1)
                  {
LABEL_122:
                    unint64_t v188 = (unint64_t)v58;
                    goto LABEL_127;
                  }
                  goto LABEL_147;
                }
                if (v58 != 63) {
                  goto LABEL_128;
                }
                a2 = (unint64_t)v11 + 1;
                if (v4 < (uint64_t)v11 + 1)
                {
                  __break(1u);
LABEL_147:
                  __break(1u);
                  goto LABEL_148;
                }
                uint64_t v61 = specialized Collection<>.firstIndex(of:)(0x23u, (uint64_t)v11 + 1, v4, (uint64_t)&v193);
                if (v62) {
                  goto LABEL_126;
                }
                if (v61 < (uint64_t)a2) {
                  goto LABEL_150;
                }
                *(void *)&long long v186 = a2;
                *((void *)&v186 + 1) = v61;
                char v187 = 0;
                unint64_t v58 = (char *)(v61 + 1);
                if (v4 >= v61 + 1) {
                  goto LABEL_122;
                }
                __break(1u);
LABEL_107:
                LOBYTE(v10) = 0;
                unint64_t v34 = v4 - 1;
                uint64_t v16 = (uint64_t)v11;
                while (1)
                {
                  uint64_t v9 = v16;
                  LOBYTE(v10) = (v58 == 37) | v10;
                  if (v34 == v16) {
                    break;
                  }
                  LODWORD(v58) = *((unsigned __int8 *)&v193 + ++v16);
                  if (v58 == 35 || v58 == 63) {
                    goto LABEL_124;
                  }
                }
                uint64_t v16 = v4;
LABEL_124:
                if (v16 < (uint64_t)v11)
                {
                  __break(1u);
LABEL_126:
                  uint64_t v59 = (uint64_t *)(v3 + 19);
                  unint64_t v60 = (char *)(v3 + 20);
                  *(void *)&long long v186 = a2;
LABEL_127:
                  uint64_t *v59 = v4;
                  *unint64_t v60 = 0;
LABEL_128:
                  unint64_t v22 = v169;
                  unint64_t v23 = v170;
                  char v30 = v171;
                  long long v136 = *(_OWORD *)(v2 + 24);
                  char v29 = v174;
                  char v28 = v176;
                  long long v130 = *(_OWORD *)(v2 + 72);
                  long long v132 = v175;
                  char v27 = v179;
                  unint64_t v20 = v180;
                  unint64_t v24 = v181;
                  char v18 = v182;
                  int64_t v19 = (int64_t)v183;
                  uint64_t v4 = (uint64_t)v184;
                  char v21 = v185;
                  long long v129 = v186;
                  char v26 = v187;
                  unint64_t v135 = v188;
                  unint64_t v134 = v189;
                  char v139 = v191 & 1;
                  char v138 = HIBYTE(v191) & 1;
                  char v128 = v192 & 1;
                  char v14 = v190;
                  goto LABEL_129;
                }
              }
              int64_t v19 = (int64_t)v11;
              char v57 = (char)v10;
              uint64_t v4 = v16;
              goto LABEL_94;
            }
LABEL_151:
            __break(1u);
            goto LABEL_152;
          }
LABEL_58:
          unint64_t v34 = (unint64_t)(v3 + 19);
          unint64_t v35 = (char *)(v3 + 20);
          *(void *)&long long v210 = v17;
          goto LABEL_59;
        }
LABEL_148:
        __break(1u);
      }
      __break(1u);
LABEL_150:
      __break(1u);
      goto LABEL_151;
    }
    __break(1u);
LABEL_75:
    a1 = static String._copying(_:)();
    unint64_t v2 = (unint64_t)v49;
    swift_bridgeObjectRelease();
    *(void *)(v7 + 16) = a1;
    *(void *)(v7 + 24) = v2;
    a2 = v2;
    if ((v2 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_76:
    unint64_t v2 = (unint64_t)&v169;
    uint64_t v193 = a1;
    uint64_t v194 = a2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v4 = HIBYTE(a2) & 0xF;
    char v224 = 1;
    char v223 = 1;
    char v222 = 1;
    char v221 = 1;
    char v220 = 1;
    char v219 = 1;
    char v218 = 1;
    char v217 = 1;
    unint64_t v169 = 0;
    uint64_t v170 = 0;
    unsigned __int8 v171 = 1;
    uint64_t v173 = 0;
    uint64_t v172 = 0;
    char v174 = 1;
    long long v175 = 0uLL;
    char v176 = 1;
    uint64_t v178 = 0;
    v177 = 0;
    char v179 = 1;
    unint64_t v181 = 0;
    unint64_t v180 = 0;
    char v182 = 1;
    char v184 = 0;
    Swift::Int v183 = 0;
    char v185 = 1;
    long long v186 = 0uLL;
    char v187 = 1;
    unint64_t v189 = 0;
    unint64_t v188 = 0;
    char v190 = 1;
    __int16 v191 = 0;
    char v192 = 0;
    if (!v4)
    {
      char v168 = 1;
      char v167 = 1;
      char v166 = 1;
      char v165 = 1;
      char v164 = 1;
      char v163 = 0;
      char v162 = 1;
      unint64_t v140 = 0;
      unint64_t v141 = 0;
      char v142 = 1;
      long long v143 = 0uLL;
      char v144 = 1;
      long long v145 = 0uLL;
      char v146 = 1;
      long long v147 = 0uLL;
      char v148 = 1;
      unint64_t v149 = 0;
      unint64_t v150 = 0;
      char v151 = 1;
      int64_t v152 = 0;
      uint64_t v153 = 0;
LABEL_96:
      char v154 = v163;
      long long v155 = 0uLL;
      char v156 = v162;
      unint64_t v157 = 0;
      unint64_t v158 = 0;
      char v159 = 1;
      __int16 v160 = 0;
      char v161 = 0;
      destructiveProjectEnumData for PredicateCodableError(&v140, v8);
      outlined init with take of URLBufferParseInfo?((uint64_t)&v140, (uint64_t)&v195);
      outlined init with take of URLBufferParseInfo?((uint64_t)&v195, (uint64_t)&v140);
      unint64_t v22 = v140;
      unint64_t v23 = v141;
      char v30 = v142;
      long long v136 = v143;
      char v29 = v144;
      char v28 = v146;
      long long v130 = v147;
      long long v132 = v145;
      char v27 = v148;
      unint64_t v20 = v149;
      unint64_t v24 = v150;
      char v18 = v151;
      int64_t v19 = v152;
      uint64_t v4 = v153;
      char v21 = v154;
      long long v129 = v155;
      char v26 = v156;
      unint64_t v135 = v157;
      unint64_t v134 = v158;
      char v139 = v160 & 1;
      char v138 = HIBYTE(v160) & 1;
      char v128 = v161 & 1;
      char v14 = v159;
      goto LABEL_129;
    }
    unsigned int v50 = a1;
    if (a1 - 35 <= 0x3A
      && (v34 = 1 << (a1 - 35), uint64_t v16 = 0x500000030801001, (v34 & 0x500000030801001) != 0))
    {
LABEL_79:
      uint64_t v51 = 0;
    }
    else
    {
      unint64_t v34 = 1;
      uint64_t v16 = (uint64_t)&v193;
      uint64_t v9 = 0x500000030001001;
      uint64_t v51 = 1;
      while (1)
      {
        if (v4 == v51)
        {
          uint64_t v51 = HIBYTE(a2) & 0xF;
          goto LABEL_80;
        }
        int v63 = *((unsigned __int8 *)&v193 + v51++);
        uint64_t v64 = (v63 - 35);
        if (v64 <= 0x3A)
        {
          if (((1 << v64) & 0x500000030001001) != 0) {
            goto LABEL_79;
          }
          if (v64 == 23) {
            break;
          }
        }
      }
      a2 = v51 - 1;
      unint64_t v169 = 0;
      uint64_t v170 = v51 - 1;
      unsigned __int8 v171 = 0;
      if (v4 == v51)
      {
        if (v50 >= 0x41
          && specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(0, a2, (uint64_t)&v193, 1u, 0))
        {
          char v168 = 0;
          char v167 = 1;
          char v166 = 1;
          char v165 = 1;
          char v164 = 1;
          char v163 = 0;
          char v162 = 1;
          unint64_t v140 = 0;
          unint64_t v141 = v51 - 1;
          char v142 = 0;
          long long v143 = 0uLL;
          char v144 = 1;
          long long v145 = 0uLL;
          char v146 = 1;
          long long v147 = 0uLL;
          char v148 = 1;
          unint64_t v149 = 0;
          unint64_t v150 = 0;
          char v151 = 1;
          int64_t v152 = v4;
          uint64_t v153 = v4;
          goto LABEL_96;
        }
        goto LABEL_141;
      }
      if (v50 < 0x41
        || !specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(0, v51 - 1, (uint64_t)&v193, 1u, 0))
      {
        goto LABEL_141;
      }
    }
LABEL_80:
    if (v51 == v4) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = (unint64_t *)v51;
    }
    if ((unint64_t *)((char *)v11 + 1) == (unint64_t *)v4) {
      goto LABEL_92;
    }
    unint64_t v34 = (unint64_t)&v193;
    uint64_t v16 = *((unsigned __int8 *)&v193 + (void)v11);
    if (v16 != 47 || *((unsigned char *)&v193 + (void)v11 + 1) != 47) {
      goto LABEL_92;
    }
    uint64_t v52 = (uint64_t)v11 + 2;
    uint64_t v16 = v4;
    if ((unint64_t *)((char *)v11 + 2) == (unint64_t *)v4) {
      goto LABEL_91;
    }
    unsigned int v53 = *((unsigned __int8 *)&v193 + v52);
    BOOL v44 = v53 > 0x3F;
    uint64_t v54 = 1 << v53;
    unint64_t v34 = 0x8000800800000000;
    unint64_t v55 = v54 & 0x8000800800000000;
    BOOL v56 = v44 || v55 == 0;
    uint64_t v16 = (uint64_t)v11 + 2;
    if (!v56) {
      goto LABEL_91;
    }
    unint64_t v98 = (char *)v11 + 3;
    uint64_t v9 = 1;
    while ((char *)v4 != v98)
    {
      unsigned int v99 = *((unsigned __int8 *)&v193 + (void)v98++);
      BOOL v44 = v99 > 0x3F;
      unint64_t v100 = (1 << v99) & 0x8000800800000000;
      if (!v44 && v100 != 0)
      {
        uint64_t v102 = (uint64_t)(v98 - 1);
        goto LABEL_143;
      }
    }
    uint64_t v102 = v4;
LABEL_143:
    if (v102 >= v52) {
      break;
    }
    __break(1u);
  }
  uint64_t v16 = (uint64_t)v11 + 2;
  if (v52 == v102)
  {
LABEL_91:
    v177 = (char *)v11 + 2;
    uint64_t v178 = v16;
    uint64_t v11 = (unint64_t *)v16;
    char v179 = 0;
    goto LABEL_92;
  }
  a2 = v102;
  if (specialized static RFC3986Parser.parseAuthority(_:into:)(v52, v102, (uint64_t)&v193, v4, (uint64_t)&v169))
  {
    if ((v182 & 1) != 0 || (uint64_t v9 = v180, v180 == v181))
    {
LABEL_167:
      uint64_t v11 = (unint64_t *)a2;
      goto LABEL_92;
    }
    uint64_t v16 = v170;
    unint64_t v34 = v171;
    if (*((unsigned __int8 *)&v193 + v180) - 58 >= 0xFFFFFFF6)
    {
      if (v180 + 1 == v181) {
        goto LABEL_167;
      }
      uint64_t v9 = ~v180 + v181;
      Swift::String v107 = (unsigned __int8 *)&v193 + v180 + 1;
      while (1)
      {
        int v108 = *v107++;
        if ((v108 - 58) < 0xFFFFFFF6) {
          break;
        }
        if (!--v9) {
          goto LABEL_167;
        }
      }
    }
    char v105 = v170 - v169 == 11 ? v171 : 1;
    if ((v105 & 1) == 0
      && (((0x3FFE000000000uLL >> ((v193 - 1) >> 1)) & 0x20) + v193) == 97)
    {
      uint64_t v11 = (unint64_t *)a2;
      if ((((0x3FFE000000000uLL >> ((BYTE1(v193) - 1) >> 1)) & 0x20) + BYTE1(v193)) == 100
        && (((0x3FFE000000000uLL >> ((BYTE2(v193) - 1) >> 1)) & 0x20) + BYTE2(v193)) == 100
        && (((0x3FFE000000000uLL >> ((BYTE3(v193) - 1) >> 1)) & 0x20) + BYTE3(v193)) == 114
        && (((0x3FFE000000000uLL >> ((BYTE4(v193) - 1) >> 1)) & 0x20) + BYTE4(v193)) == 101
        && (((0x3FFE000000000uLL >> ((BYTE5(v193) - 1) >> 1)) & 0x20) + BYTE5(v193)) == 115
        && (((0x3FFE000000000uLL >> ((BYTE6(v193) - 1) >> 1)) & 0x20) + BYTE6(v193)) == 115
        && (((0x3FFE000000000uLL >> ((HIBYTE(v193) - 1) >> 1)) & 0x20) + HIBYTE(v193)) == 98
        && (((0x3FFE000000000uLL >> ((v194 - 1) >> 1)) & 0x20) + v194) == 111
        && (((0x3FFE000000000uLL >> ((BYTE1(v194) - 1) >> 1)) & 0x20) + BYTE1(v194)) == 111)
      {
        uint64_t v16 = 0x3FFE000000000;
        unint64_t v34 = (0x3FFE000000000uLL >> ((BYTE2(v194) - 1) >> 1)) & 0x20;
        if ((v34 + BYTE2(v194)) == 107)
        {
LABEL_92:
          if (v11 != (unint64_t *)v4)
          {
            LODWORD(v58) = *((unsigned __int8 *)&v193 + (void)v11);
            if (v58 != 35 && v58 != 63) {
              goto LABEL_107;
            }
            Swift::Int v183 = v11;
            char v184 = v11;
            char v185 = 0;
            char v192 = 0;
            goto LABEL_100;
          }
          int64_t v19 = (int64_t)v11;
          char v57 = 0;
          Swift::Int v183 = (void *)v4;
          char v184 = (void *)v4;
LABEL_94:
          char v128 = v57;
          char v21 = 0;
          unint64_t v22 = v169;
          unint64_t v23 = v170;
          char v30 = v171;
          long long v136 = *(_OWORD *)(v2 + 24);
          char v29 = v174;
          char v28 = v176;
          long long v130 = *(_OWORD *)(v2 + 72);
          long long v132 = v175;
          char v27 = v179;
          unint64_t v20 = v180;
          unint64_t v24 = v181;
          char v18 = v182;
          long long v129 = v186;
          char v26 = v187;
          unint64_t v134 = v189;
          unint64_t v135 = v188;
          char v14 = v190;
          char v138 = HIBYTE(v191);
          char v139 = v191;
          LOBYTE(v140) = v171;
          char v168 = v174;
          char v167 = v176;
          char v166 = v179;
          char v165 = v182;
          char v164 = 0;
          char v163 = v187;
          char v162 = v190;
          goto LABEL_129;
        }
      }
    }
  }
LABEL_141:
  swift_release();
  return 0;
}

unint64_t convert #1 (_:) in static RFC3986Parser.parse(urlString:)(unint64_t result, unint64_t a2, char a3, uint64_t a4)
{
  if (a3) {
    return 0;
  }
  uint64_t v6 = *(void *)(a4 + 16);
  unint64_t v7 = *(void *)(a4 + 24);
  if ((v7 & 0x1000000000000000) == 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t v8 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0) {
        unint64_t v8 = v6 & 0xFFFFFFFFFFFFLL;
      }
      if (v8 >= result)
      {
        unint64_t v9 = (result << 16) | 4;
        if ((v7 & 0x1000000000000000) == 0) {
          goto LABEL_8;
        }
LABEL_18:
        unint64_t v11 = MEMORY[0x185302230](15, a2, v6);
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  Swift::Int result = MEMORY[0x185302230](15, result, v6);
  unint64_t v9 = result;
  uint64_t v6 = *(void *)(a4 + 16);
  unint64_t v7 = *(void *)(a4 + 24);
  if ((v7 & 0x1000000000000000) != 0) {
    goto LABEL_18;
  }
LABEL_8:
  if ((a2 & 0x8000000000000000) != 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v10 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    unint64_t v10 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 >= a2)
  {
    unint64_t v11 = (a2 << 16) | 4;
LABEL_13:
    if (v11 >> 14 >= v9 >> 14) {
      return v9;
    }
    __break(1u);
    return 0;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for URLParseInfo()
{
  return self;
}

uint64_t specialized static RFC3986Parser.invalidComponents(of:)(unsigned char *a1)
{
  if (a1[72])
  {
    uint64_t v2 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = String.subscript.getter();
  unint64_t v5 = v4;
  unint64_t v7 = v6;
  unint64_t v9 = v8;
  char v10 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v3, v4, v6, v8, 2u, 1);
  if (v10 == 2)
  {
    lazy protocol witness table accessor for type Substring and conformance Substring();
    StringProtocol._ephemeralString.getter();
    unint64_t v11 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v12 = (unsigned __int16 *)objc_msgSend(v11, sel__fastCharacterContents);
    id v13 = v11;
    if (v12)
    {
      StringProtocol._ephemeralString.getter();
      char v14 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v15 = (uint64_t)objc_msgSend(v14, sel_length);
      swift_unknownObjectRelease();
      LOBYTE(v15) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v12, v15, 2u, 1);
      swift_bridgeObjectRelease();
      if (v15) {
        uint64_t v2 = 0;
      }
      else {
        uint64_t v2 = 2;
      }
      goto LABEL_13;
    }
    swift_bridgeObjectRetain();
    char v17 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v3, v5, v7, v9, 2u, 1);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v16 = v10;
    swift_bridgeObjectRelease();
    char v17 = v16 & 1;
  }
  if (v17) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = 2;
  }
LABEL_13:
  if ((a1[96] & 1) == 0)
  {
    unint64_t v18 = String.subscript.getter();
    unint64_t v20 = v19;
    unint64_t v22 = v21;
    unint64_t v24 = v23;
    char v25 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v18, v19, v21, v23, 2u, 1);
    if (v25 == 2)
    {
      uint64_t v26 = v2;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      StringProtocol._ephemeralString.getter();
      char v27 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      char v28 = (unsigned __int16 *)objc_msgSend(v27, sel__fastCharacterContents);
      id v29 = v27;
      if (v28)
      {
        StringProtocol._ephemeralString.getter();
        char v30 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v31 = objc_msgSend(v30, sel_length);
        swift_unknownObjectRelease();
        BOOL v32 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v28, (uint64_t)v31, 2u, 1);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        BOOL v32 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v18, v20, v22, v24, 2u, 1);
        swift_bridgeObjectRelease_n();
      }
      uint64_t v2 = v26;
      if (v32) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
    char v33 = v25;
    swift_bridgeObjectRelease();
    if ((v33 & 1) == 0) {
LABEL_18:
    }
      uint64_t v2 = v2 | 4;
  }
LABEL_19:
  if (a1[120]) {
    goto LABEL_47;
  }
  uint64_t v34 = String.subscript.getter();
  unint64_t v36 = v34;
  unint64_t v37 = v35;
  unint64_t v39 = v38;
  unint64_t v41 = v40;
  if (a1[217]) {
    goto LABEL_21;
  }
  if ((v34 ^ v35) < 0x4000) {
    goto LABEL_77;
  }
  swift_bridgeObjectRetain();
  if (Substring.UTF8View.subscript.getter() != 91)
  {
    swift_bridgeObjectRelease();
    goto LABEL_77;
  }
  if (__OFSUB__(specialized Collection.count.getter(v36, v37, v39, v41), 1))
  {
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }
  Substring.UTF8View.index(_:offsetBy:)();
  int v53 = Substring.UTF8View.subscript.getter();
  swift_bridgeObjectRelease();
  if (v53 != 93)
  {
LABEL_77:
    char v112 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v36, v37, v39, v41, 4u, 1);
    if (v112 == 2)
    {
      lazy protocol witness table accessor for type Substring and conformance Substring();
      StringProtocol._ephemeralString.getter();
      unint64_t v113 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      char v114 = (unsigned __int16 *)objc_msgSend(v113, sel__fastCharacterContents);
      id v115 = v113;
      if (v114)
      {
        StringProtocol._ephemeralString.getter();
        char v116 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v117 = objc_msgSend(v116, sel_length);
        swift_unknownObjectRelease();
        BOOL v118 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v114, (uint64_t)v117, 4u, 1);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        BOOL v118 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v36, v37, v39, v41, 4u, 1);
        swift_bridgeObjectRelease_n();
      }
      if (!v118) {
        goto LABEL_46;
      }
    }
    else
    {
      char v119 = v112;
      swift_bridgeObjectRelease();
      if ((v119 & 1) == 0) {
        goto LABEL_46;
      }
    }
LABEL_47:
    if (a1[168]) {
      unint64_t v63 = MEMORY[0x185302C80](0, 0xE000000000000000);
    }
    else {
      unint64_t v63 = String.subscript.getter();
    }
    unint64_t v67 = v63;
    unint64_t v68 = v64;
    unint64_t v69 = v65;
    unint64_t v70 = v66;
    char v71 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v63, v64, v65, v66, 0x10u, 1);
    if (v71 == 2)
    {
      uint64_t v72 = v2;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      StringProtocol._ephemeralString.getter();
      uint64_t v73 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      char v74 = (unsigned __int16 *)objc_msgSend(v73, sel__fastCharacterContents);
      id v75 = v73;
      if (v74)
      {
        StringProtocol._ephemeralString.getter();
        char v76 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v77 = objc_msgSend(v76, sel_length);
        swift_unknownObjectRelease();
        BOOL v78 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v74, (uint64_t)v77, 0x10u, 1);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        BOOL v78 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v67, v68, v69, v70, 0x10u, 1);
        swift_bridgeObjectRelease_n();
      }
      uint64_t v2 = v72;
      if (v78)
      {
LABEL_55:
        if (a1[192]) {
          goto LABEL_61;
        }
        unint64_t v80 = String.subscript.getter();
        unint64_t v82 = v81;
        unint64_t v84 = v83;
        unint64_t v86 = v85;
        char v87 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v80, v81, v83, v85, 0x40u, 1);
        if (v87 == 2)
        {
          uint64_t v88 = v2;
          lazy protocol witness table accessor for type Substring and conformance Substring();
          StringProtocol._ephemeralString.getter();
          char v89 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          char v90 = (unsigned __int16 *)objc_msgSend(v89, sel__fastCharacterContents);
          id v91 = v89;
          if (v90)
          {
            StringProtocol._ephemeralString.getter();
            uint64_t v92 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v93 = objc_msgSend(v92, sel_length);
            swift_unknownObjectRelease();
            BOOL v94 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v90, (uint64_t)v93, 0x40u, 1);
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRetain();
            BOOL v94 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v80, v82, v84, v86, 0x40u, 1);
            swift_bridgeObjectRelease_n();
          }
          uint64_t v2 = v88;
          if (v94)
          {
LABEL_61:
            if ((a1[216] & 1) == 0)
            {
              unint64_t v96 = String.subscript.getter();
              unint64_t v98 = v97;
              unint64_t v100 = v99;
              unint64_t v102 = v101;
              char v103 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v96, v97, v99, v101, 0x40u, 1);
              if (v103 == 2)
              {
                lazy protocol witness table accessor for type Substring and conformance Substring();
                StringProtocol._ephemeralString.getter();
                uint64_t v104 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                char v105 = (unsigned __int16 *)objc_msgSend(v104, sel__fastCharacterContents);
                id v106 = v104;
                if (!v105)
                {
                  swift_bridgeObjectRetain();
                  BOOL v111 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v96, v98, v100, v102, 0x40u, 1);
                  swift_bridgeObjectRelease_n();
                  if (v111) {
                    return v2;
                  }
                  return v2 | 0xFFFFFF80;
                }
                StringProtocol._ephemeralString.getter();
                Swift::String v107 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                id v108 = objc_msgSend(v107, sel_length);
                swift_unknownObjectRelease();
                char v103 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v105, (uint64_t)v108, 0x40u, 1);
              }
              char v109 = v103;
              swift_bridgeObjectRelease();
              if ((v109 & 1) == 0) {
                return v2 | 0xFFFFFF80;
              }
            }
            return v2;
          }
        }
        else
        {
          char v95 = v87;
          swift_bridgeObjectRelease();
          if (v95) {
            goto LABEL_61;
          }
        }
        uint64_t v2 = v2 | 0x40;
        goto LABEL_61;
      }
    }
    else
    {
      char v79 = v71;
      swift_bridgeObjectRelease();
      if (v79) {
        goto LABEL_55;
      }
    }
    uint64_t v2 = v2 | 0x20;
    goto LABEL_55;
  }
LABEL_21:
  unint64_t v153 = v37 >> 14;
  if (v37 >> 14 == v36 >> 14)
  {
    __break(1u);
    goto LABEL_104;
  }
  swift_bridgeObjectRetain();
  if (Substring.UTF8View.subscript.getter() == 91)
  {
    if (!__OFSUB__(specialized Collection.count.getter(v36, v37, v39, v41), 1))
    {
      Substring.UTF8View.index(_:offsetBy:)();
      int v42 = Substring.UTF8View.subscript.getter();
      swift_bridgeObjectRelease();
      if (v42 == 93)
      {
        swift_bridgeObjectRetain();
        unint64_t v43 = Substring.UTF8View.index(after:)();
        if (!__OFSUB__(specialized Collection.count.getter(v36, v37, v39, v41), 1))
        {
          if ((unint64_t)Substring.UTF8View.index(_:offsetBy:)() >> 14 >= v43 >> 14)
          {
            unsigned int v154 = v2;
            unint64_t v44 = Substring.subscript.getter();
            unint64_t v46 = v45;
            unint64_t v48 = v47;
            unint64_t v155 = v49;
            uint64_t v50 = specialized Collection<>.firstIndex(of:)(0x25u, v36, v37, v39, v41);
            if (v51)
            {
              char v54 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v44, v46, v48, v155, 2u, 0);
              if (v54 != 2)
              {
                BOOL v62 = v54;
LABEL_44:
                swift_bridgeObjectRelease_n();
LABEL_45:
                swift_bridgeObjectRelease();
                uint64_t v2 = v154;
                if (v62) {
                  goto LABEL_47;
                }
                goto LABEL_46;
              }
              unint64_t v55 = v48;
              lazy protocol witness table accessor for type Substring and conformance Substring();
              StringProtocol._ephemeralString.getter();
              unint64_t v56 = v46;
              char v57 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              unint64_t v58 = (unsigned __int16 *)objc_msgSend(v57, sel__fastCharacterContents);
              id v59 = v57;
              if (v58)
              {
                StringProtocol._ephemeralString.getter();
                unint64_t v60 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                id v61 = objc_msgSend(v60, sel_length);
                swift_unknownObjectRelease();
                BOOL v62 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v58, (uint64_t)v61, 2u, 0);
                swift_bridgeObjectRelease_n();
                goto LABEL_45;
              }
              swift_bridgeObjectRetain();
              char v120 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v44, v56, v55, v155, 2u, 0);
              swift_bridgeObjectRelease_n();
              goto LABEL_86;
            }
            unint64_t v52 = v50;
            if (v153 == (unint64_t)Substring.UTF8View.index(after:)() >> 14
              || Substring.UTF8View.subscript.getter() != 50
              || v153 == (unint64_t)Substring.UTF8View.index(after:)() >> 14
              || Substring.UTF8View.subscript.getter() != 53)
            {
              goto LABEL_31;
            }
            if (v52 >> 14 >= v44 >> 14)
            {
              unint64_t v121 = v46;
              unint64_t v122 = Substring.subscript.getter();
              unint64_t v124 = v123;
              unint64_t v126 = v125;
              unint64_t v128 = v127;
              char v129 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v122, v123, v125, v127, 2u, 0);
              if (v129 == 2)
              {
                lazy protocol witness table accessor for type Substring and conformance Substring();
                StringProtocol._ephemeralString.getter();
                long long v130 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                unint64_t v131 = (unsigned __int16 *)objc_msgSend(v130, sel__fastCharacterContents);
                long long v132 = v130;
                unint64_t v133 = v131;
                id v134 = v132;
                if (v133)
                {
                  StringProtocol._ephemeralString.getter();
                  unint64_t v135 = (void *)String._bridgeToObjectiveCImpl()();
                  swift_bridgeObjectRelease();
                  uint64_t v136 = (uint64_t)objc_msgSend(v135, sel_length);
                  swift_unknownObjectRelease();
                  LOBYTE(v136) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v133, v136, 2u, 0);
                  swift_bridgeObjectRelease();
                  unint64_t v121 = v46;
                  if ((v136 & 1) == 0)
                  {
LABEL_31:
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease_n();
                    LODWORD(v2) = v154;
LABEL_46:
                    uint64_t v2 = v2 | 8;
                    goto LABEL_47;
                  }
                }
                else
                {
                  swift_bridgeObjectRetain();
                  BOOL v152 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v122, v124, v126, v128, 2u, 0);
                  swift_bridgeObjectRelease_n();
                  unint64_t v121 = v46;
                  if (!v152) {
                    goto LABEL_31;
                  }
                }
              }
              else
              {
                char v137 = v129;
                swift_bridgeObjectRelease();
                if ((v137 & 1) == 0) {
                  goto LABEL_31;
                }
              }
              swift_bridgeObjectRetain();
              if (v121 >> 14 >= (unint64_t)Substring.index(after:)() >> 14)
              {
                unint64_t v138 = Substring.subscript.getter();
                unint64_t v140 = v139;
                unint64_t v142 = v141;
                unint64_t v144 = v143;
                char v145 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v138, v139, v141, v143, 8u, 1);
                if (v145 == 2)
                {
                  lazy protocol witness table accessor for type Substring and conformance Substring();
                  StringProtocol._ephemeralString.getter();
                  char v146 = (void *)String._bridgeToObjectiveCImpl()();
                  swift_bridgeObjectRelease();
                  long long v147 = (unsigned __int16 *)objc_msgSend(v146, sel__fastCharacterContents);
                  id v148 = v146;
                  if (v147)
                  {
                    StringProtocol._ephemeralString.getter();
                    unint64_t v149 = (void *)String._bridgeToObjectiveCImpl()();
                    swift_bridgeObjectRelease();
                    id v150 = objc_msgSend(v149, sel_length);
                    swift_unknownObjectRelease();
                    BOOL v62 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v147, (uint64_t)v150, 8u, 1);
                    swift_bridgeObjectRelease_n();
                    goto LABEL_44;
                  }
                  swift_bridgeObjectRetain();
                  char v120 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v138, v140, v142, v144, 8u, 1);
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease_n();
                }
                else
                {
                  char v151 = v145;
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease();
                  char v120 = v151 & 1;
                }
LABEL_86:
                swift_bridgeObjectRelease_n();
                uint64_t v2 = v154;
                if ((v120 & 1) == 0) {
                  goto LABEL_46;
                }
                goto LABEL_47;
              }
              goto LABEL_110;
            }
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
            goto LABEL_111;
          }
          goto LABEL_107;
        }
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
        goto LABEL_108;
      }
LABEL_105:
      __break(1u);
      goto LABEL_106;
    }
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }
LABEL_111:
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unsigned __int8 a5, char a6)
{
  if ((a4 & 0x1000000000000000) != 0) {
    return 2;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v16[0] = a3;
    v16[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    char v14 = a6 & 1;
    id v13 = v16;
  }
  else
  {
    if ((a3 & 0x1000000000000000) != 0) {
      id v13 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      id v13 = (void *)_StringObject.sharedUTF8.getter();
    }
    char v14 = a6 & 1;
  }
  uint64_t result = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5H7VGXEfU_10Foundation0nO0VXMtAQ15URLComponentSet01_qrstuvW0LLVSbTf1nnc_nTf4xndnn_n((uint64_t)v13, a1, a2, a3, a4, a5, v14);
  if (!v6) {
    return result & 1;
  }
  return result;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5H7VGXEfU_10Foundation0nO0VXMtAQ15URLComponentSet01_qrstuvW0LLVSbTf1nnc_nTf4xndnn_n(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned __int8 a6, char a7)
{
  unint64_t v11 = a2;
  uint64_t v12 = result;
  uint64_t v13 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v13) = 1;
  }
  uint64_t v14 = 4 << v13;
  unint64_t v15 = a2 & 0xC;
  if (v15 == 4 << v13)
  {
    unsigned __int8 v17 = a6;
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a4, a5);
    a6 = v17;
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v16 = a2 >> 16;
      if (v15 != v14) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unsigned __int8 v25 = a6;
  unint64_t v18 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v18 = HIBYTE(a5) & 0xF;
  }
  if (v18 < a2 >> 16) {
    goto LABEL_31;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v16 = result;
  a6 = v25;
  if (v15 == v14)
  {
LABEL_14:
    unsigned __int8 v19 = a6;
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a4, a5);
    a6 = v19;
    unint64_t v11 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v14)
  {
    unsigned __int8 v20 = a6;
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a4, a5);
    a6 = v20;
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    uint64_t result = (a3 >> 16) - (v11 >> 16);
    goto LABEL_21;
  }
  unint64_t v21 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v21 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v21 < v11 >> 16) {
    goto LABEL_29;
  }
  if (v21 < a3 >> 16)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    return result;
  }
  unsigned __int8 v22 = a6;
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
  a6 = v22;
LABEL_21:
  if (__OFADD__(v16, result))
  {
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v23 = result;
  if (v16 + result < v16)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v12) {
    unint64_t v24 = (char *)(v12 + v16);
  }
  else {
    unint64_t v24 = 0;
  }
  return specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v24, v23, a6, a7 & 1);
}

BOOL specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(char *a1, uint64_t a2, unsigned __int8 a3, char a4)
{
  unsigned int v4 = a3;
  if ((a4 & 1) == 0)
  {
    if (!a1 || !a2) {
      return 1;
    }
    if ((*a1 & 0x80000000) == 0)
    {
      int v12 = *a1;
      uint64_t v13 = a2 - 1;
      uint64_t v14 = a1 + 1;
      while (2)
      {
        switch(v12)
        {
          case '!':
          case '$':
          case '\'':
          case '(':
          case ')':
          case '*':
          case ',':
LABEL_46:
            if ((a3 & 0xF6) == 0) {
              return 0;
            }
            goto LABEL_69;
          case '&':
LABEL_52:
            if ((a3 & 0x76) == 0) {
              return 0;
            }
            goto LABEL_69;
          case '+':
            if ((a3 & 0xF7) == 0) {
              return 0;
            }
            goto LABEL_69;
          case '-':
          case '.':
            goto LABEL_68;
          case '/':
LABEL_54:
            if (a3 < 0x10u) {
              return 0;
            }
            goto LABEL_69;
          default:
            if ((v12 - 58) > 0xFFFFFFF5) {
              goto LABEL_68;
            }
            break;
        }
        switch(v12)
        {
          case ':':
            if ((a3 & 0xD2) == 0) {
              return 0;
            }
            goto LABEL_69;
          case ';':
            goto LABEL_46;
          case '=':
            goto LABEL_52;
          case '?':
            if (a3 < 0x40u) {
              return 0;
            }
            goto LABEL_69;
          case '@':
            goto LABEL_54;
          default:
            if ((v12 - 91) > 0xFFFFFFE5) {
              goto LABEL_68;
            }
            if (v12 == 95)
            {
              if (a3 < 2u) {
                return 0;
              }
            }
            else if ((v12 - 123) > 0xFFFFFFE5)
            {
LABEL_68:
              if (!a3) {
                return 0;
              }
            }
            else
            {
              BOOL result = 0;
              if (v12 != 126 || a3 < 2u) {
                return result;
              }
            }
LABEL_69:
            if (!v13) {
              return 1;
            }
            int v15 = *v14++;
            int v12 = v15;
            --v13;
            if (v15 < 0) {
              return 0;
            }
            continue;
        }
      }
    }
    return 0;
  }
  if (a1 && a2)
  {
    if ((*a1 & 0x80000000) == 0)
    {
      uint64_t v5 = 0;
      int v6 = *a1;
      uint64_t v7 = a2 - 1;
      unint64_t v8 = a1 + 1;
      while (2)
      {
        switch(v6)
        {
          case '!':
          case '$':
          case '\'':
          case '(':
          case ')':
          case '*':
          case ',':
LABEL_7:
            if ((v4 & 0xF6) == 0) {
              return 0;
            }
            goto LABEL_32;
          case '%':
            if (v5) {
              return 0;
            }
            uint64_t v5 = 2;
            goto LABEL_38;
          case '&':
LABEL_13:
            if ((v4 & 0x76) == 0) {
              return 0;
            }
            goto LABEL_32;
          case '+':
            if ((v4 & 0xFFFFFFF7) == 0) {
              return 0;
            }
            goto LABEL_32;
          case '-':
          case '.':
            goto LABEL_31;
          case '/':
LABEL_15:
            if (v4 < 0x10) {
              return 0;
            }
            goto LABEL_32;
          default:
            if ((v6 - 58) > 0xFFFFFFF5) {
              goto LABEL_31;
            }
            break;
        }
        switch(v6)
        {
          case ':':
            if ((v4 & 0xD2) == 0) {
              return 0;
            }
            goto LABEL_32;
          case ';':
            goto LABEL_7;
          case '=':
            goto LABEL_13;
          case '?':
            if (v4 < 0x40) {
              return 0;
            }
            goto LABEL_32;
          case '@':
            goto LABEL_15;
          default:
            if ((v6 - 91) > 0xFFFFFFE5) {
              goto LABEL_31;
            }
            if (v6 == 95)
            {
              if (v4 < 2) {
                return 0;
              }
            }
            else if ((v6 - 123) > 0xFFFFFFE5)
            {
LABEL_31:
              if (!v4) {
                return 0;
              }
            }
            else
            {
              BOOL result = 0;
              if (v6 != 126 || v4 < 2) {
                return result;
              }
            }
LABEL_32:
            if (v5-- < 1)
            {
              uint64_t v5 = 0;
            }
            else if ((v6 - 58) <= 0xFFFFFFF5)
            {
              BOOL result = 0;
              if ((v6 - 65) > 0x25 || ((1 << (v6 - 65)) & 0x3F0000003FLL) == 0) {
                return result;
              }
            }
LABEL_38:
            if (!v7) {
              return v5 == 0;
            }
            int v11 = *v8++;
            int v6 = v11;
            --v7;
            if (v11 < 0) {
              return 0;
            }
            continue;
        }
      }
    }
    return 0;
  }
  uint64_t v5 = 0;
  return v5 == 0;
}

BOOL specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, char a5)
{
  unsigned int v5 = a4;
  if ((a5 & 1) == 0)
  {
    if (a1 == a2) {
      return 1;
    }
    if ((*(char *)(a3 + a1) & 0x80000000) == 0)
    {
      int v13 = *(unsigned __int8 *)(a3 + a1);
      uint64_t v14 = ~a1 + a2;
      int v15 = (char *)(a1 + a3 + 1);
      while (2)
      {
        switch(v13)
        {
          case '!':
          case '$':
          case '\'':
          case '(':
          case ')':
          case '*':
          case ',':
LABEL_47:
            if ((a4 & 0xF6) == 0) {
              return 0;
            }
            goto LABEL_70;
          case '&':
LABEL_53:
            if ((a4 & 0x76) == 0) {
              return 0;
            }
            goto LABEL_70;
          case '+':
            if ((a4 & 0xF7) == 0) {
              return 0;
            }
            goto LABEL_70;
          case '-':
          case '.':
            goto LABEL_69;
          case '/':
LABEL_55:
            if (a4 < 0x10u) {
              return 0;
            }
            goto LABEL_70;
          default:
            if ((v13 - 58) > 0xFFFFFFF5) {
              goto LABEL_69;
            }
            break;
        }
        switch(v13)
        {
          case ':':
            if ((a4 & 0xD2) == 0) {
              return 0;
            }
            goto LABEL_70;
          case ';':
            goto LABEL_47;
          case '=':
            goto LABEL_53;
          case '?':
            if (a4 < 0x40u) {
              return 0;
            }
            goto LABEL_70;
          case '@':
            goto LABEL_55;
          default:
            if ((v13 - 91) > 0xFFFFFFE5) {
              goto LABEL_69;
            }
            if (v13 == 95)
            {
              if (a4 < 2u) {
                return 0;
              }
            }
            else if ((v13 - 123) > 0xFFFFFFE5)
            {
LABEL_69:
              if (!a4) {
                return 0;
              }
            }
            else
            {
              BOOL result = 0;
              if (v13 != 126 || a4 < 2u) {
                return result;
              }
            }
LABEL_70:
            if (!v14) {
              return 1;
            }
            int v16 = *v15++;
            int v13 = v16;
            --v14;
            if (v16 < 0) {
              return 0;
            }
            continue;
        }
      }
    }
    return 0;
  }
  if (a1 != a2)
  {
    if ((*(char *)(a3 + a1) & 0x80000000) == 0)
    {
      uint64_t v6 = 0;
      int v8 = *(unsigned __int8 *)(a3 + a1);
      uint64_t v9 = ~a1 + a2;
      char v10 = (char *)(a1 + a3 + 1);
      while (2)
      {
        switch(v8)
        {
          case '!':
          case '$':
          case '\'':
          case '(':
          case ')':
          case '*':
          case ',':
LABEL_10:
            if ((v5 & 0xF6) == 0) {
              return 0;
            }
            goto LABEL_35;
          case '%':
            if (v6) {
              return 0;
            }
            uint64_t v6 = 2;
            goto LABEL_41;
          case '&':
LABEL_16:
            if ((v5 & 0x76) == 0) {
              return 0;
            }
            goto LABEL_35;
          case '+':
            if ((v5 & 0xFFFFFFF7) == 0) {
              return 0;
            }
            goto LABEL_35;
          case '-':
          case '.':
            goto LABEL_34;
          case '/':
LABEL_18:
            if (v5 < 0x10) {
              return 0;
            }
            goto LABEL_35;
          default:
            if ((v8 - 58) > 0xFFFFFFF5) {
              goto LABEL_34;
            }
            break;
        }
        switch(v8)
        {
          case ':':
            if ((v5 & 0xD2) == 0) {
              return 0;
            }
            goto LABEL_35;
          case ';':
            goto LABEL_10;
          case '=':
            goto LABEL_16;
          case '?':
            if (v5 < 0x40) {
              return 0;
            }
            goto LABEL_35;
          case '@':
            goto LABEL_18;
          default:
            if ((v8 - 91) > 0xFFFFFFE5) {
              goto LABEL_34;
            }
            if (v8 == 95)
            {
              if (v5 < 2) {
                return 0;
              }
            }
            else if ((v8 - 123) > 0xFFFFFFE5)
            {
LABEL_34:
              if (!v5) {
                return 0;
              }
            }
            else
            {
              BOOL result = 0;
              if (v8 != 126 || v5 < 2) {
                return result;
              }
            }
LABEL_35:
            if (v6-- < 1)
            {
              uint64_t v6 = 0;
            }
            else if ((v8 - 58) <= 0xFFFFFFF5)
            {
              BOOL result = 0;
              if ((v8 - 65) > 0x25 || ((1 << (v8 - 65)) & 0x3F0000003FLL) == 0) {
                return result;
              }
            }
LABEL_41:
            if (!v9) {
              return v6 == 0;
            }
            int v12 = *v10++;
            int v8 = v12;
            --v9;
            if (v12 < 0) {
              return 0;
            }
            continue;
        }
      }
    }
    return 0;
  }
  uint64_t v6 = 0;
  return v6 == 0;
}

uint64_t outlined init with take of URLBufferParseInfo?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLBufferParseInfo?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date()
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, *v0);
  id v2 = objc_msgSend(v1, sel_description);

  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  return v3;
}

double static Date.now.getter@<D0>(double *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  double result = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  *a1 = result;
  return result;
}

void URLRequest.url.getter(uint64_t a1@<X8>)
{
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance URLQueryItem()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  unsigned int v5 = (objc_class *)type metadata accessor for _NSSwiftURLQueryItem();
  uint64_t v6 = (char *)objc_allocWithZone(v5);
  uint64_t v7 = &v6[OBJC_IVAR____NSSwiftURLQueryItem_queryItem];
  *(void *)uint64_t v7 = v1;
  *((void *)v7 + 1) = v2;
  *((void *)v7 + 2) = v4;
  *((void *)v7 + 3) = v3;
  uint64_t v8 = String._bridgeToObjectiveCImpl()();
  if (v3) {
    uint64_t v9 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    uint64_t v9 = 0;
  }
  v12.receiver = v6;
  v12.super_class = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v10 = objc_msgSendSuper2(&v12, sel_initWithName_value_, v8, v9);
  swift_unknownObjectRelease();

  return v10;
}

uint64_t type metadata accessor for _NSSwiftURLQueryItem()
{
  return self;
}

ValueMetadata *type metadata accessor for AttributedString.AttributeMergePolicy()
{
  return &type metadata for AttributedString.AttributeMergePolicy;
}

ValueMetadata *type metadata accessor for JSONEncoder.DateEncodingStrategy()
{
  return &type metadata for JSONEncoder.DateEncodingStrategy;
}

ValueMetadata *type metadata accessor for Locale.Region()
{
  return &type metadata for Locale.Region;
}

NSRect NSIntegralRectWithOptions(NSRect aRect, NSAlignmentOptions opts)
{
  if (opts & (BYTE1(opts) | BYTE2(opts)) | (BYTE2(opts) & BYTE1(opts)))
  {
    unint64_t v35 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v36 = *MEMORY[0x1E4F1C3C8];
    unint64_t v37 = @"The options parameter is invalid. Only one of {in, out, nearest} may be set for a given rect attribute.";
    goto LABEL_21;
  }
  double x = aRect.origin.x;
  *(int8x8_t *)&aRect.origin.double x = vcnt_s8((int8x8_t)(opts & 0x151515));
  LOWORD(aRect.origin.x) = vaddlv_u8(*(uint8x8_t *)&aRect.origin.x);
  if (LODWORD(aRect.origin.x) != 2)
  {
    unint64_t v35 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v36 = *MEMORY[0x1E4F1C3C8];
    unint64_t v37 = @"The options parameter is invalid. There should be specifiers for exactly two out of {minX, maxX, width}.";
    goto LABEL_21;
  }
  *(int8x8_t *)&aRect.origin.double x = vcnt_s8((int8x8_t)(opts & 0x2A2A2A));
  LOWORD(aRect.origin.x) = vaddlv_u8(*(uint8x8_t *)&aRect.origin.x);
  if (LODWORD(aRect.origin.x) != 2)
  {
    unint64_t v35 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v36 = *MEMORY[0x1E4F1C3C8];
    unint64_t v37 = @"The options parameter is invalid. There should be specifiers for exactly two out of {minY, maxY, height}.";
LABEL_21:
    objc_exception_throw((id)objc_msgSend(v35, "exceptionWithName:reason:userInfo:", v36, v37, 0, aRect.origin.x, aRect.origin.y, aRect.size.width, aRect.size.height));
  }
  double height = aRect.size.height;
  double width = aRect.size.width;
  double y = aRect.origin.y;
  if ((opts & 0x8000000000000000) != 0) {
    uint64_t v7 = (uint64_t (*)(__n128))roundTowardsMinusInfinity;
  }
  else {
    uint64_t v7 = (uint64_t (*)(__n128))roundTowardsPlusInfinity;
  }
  NSAlignmentOptions v8 = opts & 0x40404;
  NSAlignmentOptions v9 = (opts >> 62) & 1;
  NSAlignmentOptions v10 = opts & 0x10101;
  if ((opts & 0x10101) != 0)
  {
    aRect.origin.double x = x;
    integralizeRectAttribute(v10, (opts & 0x4000000000000000) != 0, MEMORY[0x1E4F14730], MEMORY[0x1E4F14828], (uint64_t (*)(__n128))roundTowardsPlusInfinity, (__n128)aRect.origin);
    double v12 = v11.n128_f64[0];
    if (v8)
    {
      v11.n128_f64[0] = x + width;
      integralizeRectAttribute(opts & 0x40404, (opts & 0x4000000000000000) != 0, MEMORY[0x1E4F14828], MEMORY[0x1E4F14730], (uint64_t (*)(__n128))roundTowardsPlusInfinity, v11);
      double v14 = v13.n128_f64[0] - v12;
    }
    else
    {
      v11.n128_f64[0] = width;
      integralizeRectAttribute(opts & 0x101010, (opts & 0x4000000000000000) != 0, MEMORY[0x1E4F14828], MEMORY[0x1E4F14730], (uint64_t (*)(__n128))roundTowardsPlusInfinity, v11);
      double v14 = v13.n128_f64[0];
    }
  }
  else
  {
    int v15 = (uint64_t (*)(void))MEMORY[0x1E4F14828];
    int v16 = (uint64_t (*)(void))MEMORY[0x1E4F14730];
    aRect.origin.double x = aRect.size.width;
    integralizeRectAttribute(opts & 0x101010, (opts & 0x4000000000000000) != 0, MEMORY[0x1E4F14828], MEMORY[0x1E4F14730], (uint64_t (*)(__n128))roundTowardsPlusInfinity, (__n128)aRect.origin);
    double v14 = v17;
    v18.n128_f64[0] = x + width;
    integralizeRectAttribute(opts & 0x40404, (opts & 0x4000000000000000) != 0, v15, v16, (uint64_t (*)(__n128))roundTowardsPlusInfinity, v18);
    double v12 = v13.n128_f64[0] - v14;
  }
  NSAlignmentOptions v19 = opts & 0x80808;
  NSAlignmentOptions v20 = opts & 0x202020;
  if ((opts & 0x20202) != 0)
  {
    v13.n128_f64[0] = y;
    integralizeRectAttribute(opts & 0x20202, (opts & 0x4000000000000000) != 0, MEMORY[0x1E4F14730], MEMORY[0x1E4F14828], v7, v13);
    double v22 = v21.n128_f64[0];
    if (v19)
    {
      v21.n128_f64[0] = y + height;
      integralizeRectAttribute(opts & 0x80808, (opts & 0x4000000000000000) != 0, MEMORY[0x1E4F14828], MEMORY[0x1E4F14730], v7, v21);
      double v24 = v23 - v22;
    }
    else
    {
      v21.n128_f64[0] = height;
      integralizeRectAttribute(opts & 0x202020, (opts & 0x4000000000000000) != 0, MEMORY[0x1E4F14828], MEMORY[0x1E4F14730], (uint64_t (*)(__n128))roundTowardsPlusInfinity, v21);
      double v24 = v30;
    }
  }
  else
  {
    unsigned __int8 v25 = (uint64_t (*)(void))MEMORY[0x1E4F14828];
    uint64_t v26 = (uint64_t (*)(void))MEMORY[0x1E4F14730];
    v13.n128_f64[0] = height;
    integralizeRectAttribute(v20, v9, MEMORY[0x1E4F14828], MEMORY[0x1E4F14730], (uint64_t (*)(__n128))roundTowardsPlusInfinity, v13);
    double v24 = v27;
    v28.n128_f64[0] = y + height;
    integralizeRectAttribute(v19, v9, v25, v26, v7, v28);
    double v22 = v29 - v24;
  }
  double v31 = fmax(v14, 0.0);
  double v32 = fmax(v24, 0.0);
  double v33 = v12;
  double v34 = v22;
  result.size.double height = v32;
  result.size.double width = v31;
  result.origin.double y = v34;
  result.origin.double x = v33;
  return result;
}

uint64_t integralizeRectAttribute(uint64_t result, int a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(__n128), __n128 a6)
{
  double v6 = 0.0;
  if (!a2) {
    double v6 = 0.00390625;
  }
  if ((result & 0xFF0000) != 0)
  {
    double v7 = floor(a6.n128_f64[0] + a6.n128_f64[0] + 0.5);
    if (vabdd_f64(a6.n128_f64[0] + a6.n128_f64[0], v7) < v6 + v6) {
      a6.n128_f64[0] = v7 * 0.5;
    }
    return a5(a6);
  }
  else if (vabdd_f64(a6.n128_f64[0], floor(a6.n128_f64[0] + 0.5)) >= v6)
  {
    if ((_BYTE)result) {
      return a3();
    }
    else {
      return a4();
    }
  }
  return result;
}

void _NSXPCInterfaceMethodInfoDealloc(uint64_t a1, id *a2)
{
  if (a2)
  {

    free(a2);
  }
}

uint64_t type metadata completion function for PredicateExpressions.CollectionContainsCollection()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for String.LocalizationValue(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

id protocol witness for _BridgedStoredNSError._nsError.getter in conformance MachError()
{
  return *v0;
}

uint64_t Predicate.expression.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v1, a1);
}

_OWORD *protocol witness for IteratorProtocol.next() in conformance NSDictionary.Iterator@<X0>(_OWORD *a1@<X8>)
{
  return NSDictionary.Iterator.next()(a1);
}

_OWORD *NSDictionary.Iterator.next()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = (void *)(v1 + 16);
  NSFastEnumerationIterator.next()((uint64_t)&v7);
  if (v8)
  {
    outlined init with take of Any(&v7, &v9);
    uint64_t result = (_OWORD *)outlined init with copy of Any((uint64_t)&v9, (uint64_t)a1);
    if (*v3)
    {
      self;
      unsigned int v5 = (void *)swift_dynamicCastObjCClassUnconditional();
      __swift_project_boxed_opaque_existential_1(&v9, v10);
      swift_unknownObjectRetain();
      id v6 = objc_msgSend(v5, sel_objectForKey_, _bridgeAnythingToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      uint64_t result = (_OWORD *)swift_unknownObjectRelease();
      if (v6)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
        return outlined init with take of Any(&v7, a1 + 2);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    uint64_t result = (_OWORD *)outlined destroy of Any?((uint64_t)&v7, (uint64_t *)&demangling cache variable for type metadata for Any?);
    a1[2] = 0u;
    a1[3] = 0u;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

void NSFastEnumerationIterator.next()(uint64_t a1@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(v1 + 200);
  id v4 = (id)(v3 + 1);
  if (__OFADD__(v3, 1)) {
    __break(1u);
  }
  if (*(void *)(v1 + 208) < (uint64_t)v4)
  {
    *(void *)(v1 + 200) = 0;
    if (!*(void *)v1) {
      goto LABEL_18;
    }
    uint64_t v5 = *(void *)(v1 + 192);
    long long v31 = *(_OWORD *)(v1 + 136);
    long long v6 = *(_OWORD *)(v1 + 176);
    *(_OWORD *)&v32[8] = *(_OWORD *)(v1 + 160);
    *(_OWORD *)&v32[24] = v6;
    long long v7 = *(_OWORD *)(v1 + 24);
    long long v23 = *(_OWORD *)(v1 + 8);
    long long v24 = v7;
    long long v8 = *(_OWORD *)(v1 + 56);
    long long v25 = *(_OWORD *)(v1 + 40);
    long long v26 = v8;
    long long v9 = *(_OWORD *)(v1 + 88);
    long long v27 = *(_OWORD *)(v1 + 72);
    long long v28 = v9;
    long long v10 = *(_OWORD *)(v1 + 120);
    long long v29 = *(_OWORD *)(v1 + 104);
    long long v30 = v10;
    uint64_t v22 = 0;
    *(void *)&v32[40] = v5;
    *(void *)double v32 = &v22;
    id v4 = objc_msgSend((id)swift_unknownObjectRetain(), sel_countByEnumeratingWithState_objects_count_, &v31, &v23, 16);
    __n128 v11 = (long long *)*((void *)&v31 + 1);
    swift_unknownObjectRelease();
    long long v12 = *(_OWORD *)&v32[16];
    *(_OWORD *)(v1 + 152) = *(_OWORD *)v32;
    *(_OWORD *)(v1 + 168) = v12;
    *(_OWORD *)(v1 + 184) = *(_OWORD *)&v32[32];
    long long v13 = v23;
    *(_OWORD *)(v1 + 24) = v24;
    long long v14 = v26;
    *(_OWORD *)(v1 + 40) = v25;
    *(_OWORD *)(v1 + 56) = v14;
    long long v15 = v28;
    *(_OWORD *)(v1 + 72) = v27;
    *(_OWORD *)(v1 + 88) = v15;
    long long v16 = v30;
    *(_OWORD *)(v1 + 104) = v29;
    BOOL v17 = v11 && &v23 == v11;
    BOOL v18 = v17;
    *(void *)(v1 + 208) = v4;
    *(unsigned char *)(v1 + 216) = v18;
    *(void *)(v1 + 136) = v31;
    *(void *)(v1 + 144) = v11;
    *(_OWORD *)(v1 + 8) = v13;
    *(_OWORD *)(v1 + 120) = v16;
    if (!v4)
    {
LABEL_18:
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      return;
    }
    uint64_t v19 = v13;
    if (v18)
    {
      if ((void)v13)
      {
LABEL_13:
        swift_unknownObjectRetain();
        *(void *)(a1 + 24) = swift_getObjectType();
        *(void *)a1 = v19;
        *(void *)(v1 + 200) = 1;
        return;
      }
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
    uint64_t v3 = 0;
    if (!v11) {
      goto LABEL_25;
    }
LABEL_20:
    uint64_t v20 = *((void *)v11 + v3);
    if (v20)
    {
      swift_unknownObjectRetain();
      *(void *)(a1 + 24) = swift_getObjectType();
      *(void *)a1 = v20;
    }
    else
    {
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
    }
    *(void *)(v1 + 200) = v3 + 1;
    return;
  }
  if (*(unsigned char *)(v1 + 216))
  {
    switch(v3)
    {
      case 0:
        uint64_t v19 = *(void *)(v1 + 8);
        if (!v19) {
          goto LABEL_17;
        }
        goto LABEL_13;
      case 1:
        goto LABEL_38;
      case 2:
        goto LABEL_32;
      case 3:
        goto LABEL_40;
      case 4:
        goto LABEL_28;
      case 5:
        goto LABEL_46;
      case 6:
        goto LABEL_48;
      case 7:
        goto LABEL_42;
      case 8:
        goto LABEL_50;
      case 9:
        goto LABEL_34;
      case 10:
        goto LABEL_52;
      case 11:
        goto LABEL_30;
      case 12:
        goto LABEL_36;
      case 13:
        goto LABEL_54;
      case 14:
        goto LABEL_26;
      case 15:
        goto LABEL_44;
      default:
        goto LABEL_59;
    }
  }
  __n128 v11 = *(long long **)(v1 + 144);
  if (v11) {
    goto LABEL_20;
  }
LABEL_25:
  __break(1u);
LABEL_26:
  uint64_t v21 = *(void *)(v1 + 120);
  if (v21) {
    goto LABEL_55;
  }
  __break(1u);
LABEL_28:
  uint64_t v21 = *(void *)(v1 + 40);
  if (v21) {
    goto LABEL_55;
  }
  __break(1u);
LABEL_30:
  uint64_t v21 = *(void *)(v1 + 96);
  if (v21) {
    goto LABEL_55;
  }
  __break(1u);
LABEL_32:
  uint64_t v21 = *(void *)(v1 + 24);
  if (v21) {
    goto LABEL_55;
  }
  __break(1u);
LABEL_34:
  uint64_t v21 = *(void *)(v1 + 80);
  if (v21) {
    goto LABEL_55;
  }
  __break(1u);
LABEL_36:
  uint64_t v21 = *(void *)(v1 + 104);
  if (v21) {
    goto LABEL_55;
  }
  __break(1u);
LABEL_38:
  uint64_t v21 = *(void *)(v1 + 16);
  if (v21) {
    goto LABEL_55;
  }
  __break(1u);
LABEL_40:
  uint64_t v21 = *(void *)(v1 + 32);
  if (v21) {
    goto LABEL_55;
  }
  __break(1u);
LABEL_42:
  uint64_t v21 = *(void *)(v1 + 64);
  if (v21) {
    goto LABEL_55;
  }
  __break(1u);
LABEL_44:
  uint64_t v21 = *(void *)(v1 + 128);
  if (v21) {
    goto LABEL_55;
  }
  __break(1u);
LABEL_46:
  uint64_t v21 = *(void *)(v1 + 48);
  if (v21) {
    goto LABEL_55;
  }
  __break(1u);
LABEL_48:
  uint64_t v21 = *(void *)(v1 + 56);
  if (v21) {
    goto LABEL_55;
  }
  __break(1u);
LABEL_50:
  uint64_t v21 = *(void *)(v1 + 72);
  if (v21) {
    goto LABEL_55;
  }
  __break(1u);
LABEL_52:
  uint64_t v21 = *(void *)(v1 + 88);
  if (v21) {
    goto LABEL_55;
  }
  __break(1u);
LABEL_54:
  uint64_t v21 = *(void *)(v1 + 112);
  if (v21)
  {
LABEL_55:
    swift_unknownObjectRetain();
    *(void *)(a1 + 24) = swift_getObjectType();
    *(void *)a1 = v21;
    *(void *)(v1 + 200) = v4;
  }
  else
  {
    __break(1u);
LABEL_59:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t static UInt64._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return static Int64._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, (SEL *)&selRef_unsignedLongLongValue, (SEL *)&selRef_initWithUnsignedLongLong_);
}

ValueMetadata *type metadata accessor for JSONDecoder.DateDecodingStrategy()
{
  return &type metadata for JSONDecoder.DateDecodingStrategy;
}

uint64_t closure #1 in NSURLSession.upload(for:from:delegate:)()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in NSURLSession.upload(for:from:delegate:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  long long v8;
  uint64_t v9;

  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 64);
  long long v8 = *(_OWORD *)(v0 + 40);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 72) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v3 + 32) = v8;
  *(void *)(v3 + 48) = v2;
  *(void *)(v3 + 56) = v1;
  id v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Data, NSURLResponse));
  *id v4 = v0;
  v4[1] = closure #1 in NSURLSession.upload(for:from:delegate:);
  long long v6 = *(void *)(v0 + 16);
  return MEMORY[0x1F4188160](v6, 0, 0, 0xD00000000000001ALL, 0x80000001823ADBD0, partial apply for closure #1 in closure #1 in NSURLSession.upload(for:from:delegate:), v3, v5);
}

void URL.init(fileURLWithFileSystemRepresentation:isDirectory:relativeTo:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v7 = *(void **)a3;
  uint64_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = *(void *)(a3 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v10 = String.init(cString:)();
    unint64_t v12 = v11;
    BOOL v17 = (a2 & 1) == 0;
    v16[0] = v7;
    v16[1] = v8;
    void v16[2] = v9;
    outlined copy of URL?((uint64_t)v7);
    URL.init(filePath:directoryHint:relativeTo:)(v10, v12, (unsigned __int8 *)&v17, (uint64_t)v16, &v18);
    long long v13 = v18;
    long long v14 = v19;
  }
  else
  {
    if (v7)
    {
      outlined copy of URL?((uint64_t)v7);
      swift_release();
      swift_release();
    }
    id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CB10]), sel_initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL_, a1, a2 & 1, v7);

    long long v13 = static URL._converted(from:)(v15);
    long long v14 = 0uLL;
  }
  *(void *)a4 = v13;
  *(_OWORD *)(a4 + 8) = v14;
}

uint64_t URL.resourceValues(forKeys:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return URL.resourceValues(forKeys:)(a1, (SEL *)&selRef_resourceValuesForKeys_error_, a2);
}

void _FileManagerImpl.url(for:in:appropriateFor:create:)(uint64_t a1@<X0>, uint64_t a2@<X1>, id *a3@<X2>, char a4@<W3>, Swift::String *a5@<X8>)
{
  uint64_t v7 = a2;
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  id v10 = *a3;
  if (!*a3)
  {
    if (a2 != 8) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (a1 == 102)
  {
    uint64_t v11 = MEMORY[0x185309640](v5);
    if (v11)
    {
      unint64_t v12 = (void *)v11;
      v99._unint64_t countAndFlagsBits = 0;
      swift_retain();
      id v13 = v10;
      swift_retain();
      id v14 = objc_msgSend(v12, sel__URLForTrashingItemAtURL_create_error_, v13, a4 & 1, &v99);
      goto LABEL_5;
    }
    goto LABEL_78;
  }
  if (a2 == 8)
  {
LABEL_14:
    uint64_t v7 = 1032;
    goto LABEL_15;
  }
  if (a2 == 1)
  {
    if (a1 == 99)
    {
      uint64_t v19 = MEMORY[0x185309640](v5);
      if (v19)
      {
        unint64_t v12 = (void *)v19;
        v99._unint64_t countAndFlagsBits = 0;
        swift_retain();
        id v20 = v10;
        swift_retain();
        id v14 = objc_msgSend(v12, sel__URLForReplacingItemAtURL_error_, v20, &v99);
LABEL_5:
        id v15 = v14;

        unint64_t countAndFlagsBits = (void *)v99._countAndFlagsBits;
        if (v15)
        {
          URL.init(reference:)(v15, &v99);
          Swift::String v94 = v99;
          uint64_t v17 = v100;
          id v18 = countAndFlagsBits;
          outlined consume of URL?(v10);

          *a5 = v94;
          a5[1]._unint64_t countAndFlagsBits = v17;
          return;
        }
        goto LABEL_32;
      }
LABEL_78:
      LODWORD(v88) = 0;
      uint64_t v87 = 48;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    uint64_t v7 = 1;
  }
LABEL_15:
  v94._unint64_t countAndFlagsBits = v5;
  *(unsigned char *)(swift_allocObject() + 16) = 1;
  uint64_t v21 = specialized _copySequenceToContiguousArray<A>(_:)(a1, v7 & 0xC0F, (void (*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in _SearchPathURLs(for:in:expandTilde:));
  swift_release();
  uint64_t v22 = v21[2];
  if (v7 == 1032)
  {
    if (v22)
    {
      long long v23 = &v21[3 * v22];
      long long v24 = (void **)(v23 + 1);
      long long v25 = (void **)(v23 + 2);
      long long v26 = v23 + 3;
      goto LABEL_20;
    }
LABEL_26:
    swift_release();
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v38 = objc_allocWithZone((Class)NSError);
    uint64_t v39 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v40 = objc_msgSend(v38, sel_initWithDomain_code_userInfo_, v39, 256, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v10 = objc_msgSend(v40, sel_domain);
    id v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    unint64_t countAndFlagsBits = v42;

    if (v41 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain")
      && countAndFlagsBits == v43)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v45 & 1) == 0)
      {
        __break(1u);
LABEL_32:
        if (countAndFlagsBits)
        {
          countAndFlagsBits;
        }
        else
        {
          if (one-time initialization token for _nilObjCError != -1) {
            swift_once();
          }
          id v58 = (id)_nilObjCError;
        }
        swift_willThrow();
        outlined consume of URL?(v10);
        return;
      }
    }
    swift_willThrow();
    return;
  }
  if (!v22) {
    goto LABEL_26;
  }
  long long v24 = (void **)(v21 + 4);
  long long v25 = (void **)(v21 + 5);
  long long v26 = v21 + 6;
LABEL_20:
  uint64_t v27 = *v26;
  long long v28 = *v25;
  long long v29 = *v24;
  swift_retain();
  id v30 = v29;
  swift_retain();
  swift_release();
  if ((a4 & 1) == 0)
  {
LABEL_70:
    a5->_unint64_t countAndFlagsBits = (uint64_t)v30;
    a5->_unint64_t object = v28;
    a5[1]._unint64_t countAndFlagsBits = v27;
    return;
  }
  uint64_t v31 = MEMORY[0x185309640](v94._countAndFlagsBits);
  if (!v31) {
    goto LABEL_78;
  }
  double v32 = (objc_class *)v31;
  swift_retain();
  id v33 = v30;
  swift_retain();
  id v93 = v33;
  id v91 = v30;
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v92 = v32;
    char v90 = a5;
    uint64_t v100 = v27;
    id v34 = v33;
    swift_retain();
    swift_retain();
    Swift::String v35 = URL.path(percentEncoded:)(1);
    uint64_t v36 = v35._countAndFlagsBits;
    Swift::String v99 = v35;
    swift_bridgeObjectRetain();
    if (String.count.getter() <= 1)
    {
      unint64_t object = (unint64_t)v35._object;
    }
    else
    {
      unint64_t object = (unint64_t)v35._object;
      if ((specialized BidirectionalCollection.last.getter(v35._countAndFlagsBits, (unint64_t)v35._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        unint64_t object = (unint64_t)v99._object;
        uint64_t v36 = v99._countAndFlagsBits;
      }
    }
    uint64_t v96 = Set.init(minimumCapacity:)();
    uint64_t v59 = specialized Set._Variant.insert(_:)(&v98, 0x2FuLL);
    uint64_t v60 = v96;
    uint64_t v61 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0) {
      uint64_t v61 = v36 & 0xFFFFFFFFFFFFLL;
    }
    if (v61)
    {
      id v89 = v34;
      uint64_t v96 = v36;
      unint64_t v97 = object;
      MEMORY[0x1F4188790](v59);
      uint64_t v87 = (uint64_t)&v96;
      uint64_t v88 = v60;
      swift_bridgeObjectRetain();
      uint64_t v62 = v95;
      unint64_t v63 = (NSFileManagerDelegate *)specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)&v86, v36, object);
      uint64_t v95 = v62;
      if (v64 == (NSValue *)1)
      {
        Swift::Int v65 = v96;
        unint64_t v66 = v97;
        swift_bridgeObjectRetain();
        unint64_t v67 = (NSFileManagerDelegate *)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v65, v66, v60);
        unint64_t v69 = v68;
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v67 = v63;
        unint64_t v69 = v64;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v34 = v89;
      if (!v69)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v67 = 0;
        unint64_t v69 = (NSValue *)0xE000000000000000;
        goto LABEL_60;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v67 = 0;
      unint64_t v69 = (NSValue *)0xE000000000000000;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_60:
    swift_release();
    swift_release();

    a5 = v90;
LABEL_61:
    double v32 = v92;
    goto LABEL_62;
  }
  id v46 = objc_msgSend(v33, sel__parameterString);
  if (v46)
  {
    unint64_t v47 = v46;
    uint64_t v92 = v32;
    id v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
    uint64_t v50 = v49;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (id v51 = objc_msgSend(v33, sel_path)) != 0)
    {
      unint64_t v52 = v51;
      id v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      unint64_t v55 = v54;

      v99._unint64_t countAndFlagsBits = (uint64_t)v53;
      v99._unint64_t object = v55;
      swift_bridgeObjectRetain();
      v56._unint64_t countAndFlagsBits = 59;
      v56._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v56);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v57._unint64_t countAndFlagsBits = (uint64_t)v48;
      v57._unint64_t object = v50;
      String.append(_:)(v57);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
    }
    else
    {
      v99._unint64_t countAndFlagsBits = 59;
      v99._unint64_t object = (void *)0xE100000000000000;
      v70._unint64_t countAndFlagsBits = (uint64_t)v48;
      v70._unint64_t object = v50;
      String.append(_:)(v70);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    unint64_t v69 = (NSValue *)v99._object;
    unint64_t v67 = (NSFileManagerDelegate *)v99._countAndFlagsBits;
    goto LABEL_61;
  }
  id v74 = objc_msgSend(v33, sel_path);
  if (v74)
  {
    id v75 = v74;
    unint64_t v67 = (NSFileManagerDelegate *)static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
    unint64_t v69 = v76;
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();

    unint64_t v67 = 0;
    unint64_t v69 = (NSValue *)0xE000000000000000;
  }
LABEL_62:
  v71.super.isa = v32;
  v71._delegate = v67;
  v71._weakDelegateValue = v69;
  _LogSpecialFolderRecreation(_:_:)(v71, *(Swift::String *)&v72);

  swift_bridgeObjectRelease();
  uint64_t v96 = MEMORY[0x1E4FBC868];
  if (v7 == 1)
  {
    uint64_t v101 = MEMORY[0x1E4FBB550];
    v99._unint64_t countAndFlagsBits = 448;
    id v77 = @"NSFilePosixPermissions";
  }
  else
  {
    if (v7 != 1032) {
      goto LABEL_67;
    }
    uint64_t v78 = MEMORY[0x1E4FBB550];
    uint64_t v101 = MEMORY[0x1E4FBB550];
    v99._unint64_t countAndFlagsBits = 493;
    specialized Dictionary.subscript.setter((uint64_t)&v99, @"NSFilePosixPermissions");
    uint64_t v101 = v78;
    v99._unint64_t countAndFlagsBits = 0;
    specialized Dictionary.subscript.setter((uint64_t)&v99, @"NSFileOwnerAccountID");
    uint64_t v101 = v78;
    v99._unint64_t countAndFlagsBits = 80;
    id v77 = @"NSFileGroupOwnerAccountID";
  }
  specialized Dictionary.subscript.setter((uint64_t)&v99, v77);
LABEL_67:
  uint64_t v79 = MEMORY[0x185309640](v94._countAndFlagsBits);
  if (!v79) {
    goto LABEL_78;
  }
  unint64_t v80 = (void *)v79;
  type metadata accessor for NSFileAttributeKey(0);
  lazy protocol witness table accessor for type NSFileAttributeKey and conformance NSFileAttributeKey();
  id v81 = v93;
  uint64_t v82 = _NativeDictionary.bridged()();
  v99._unint64_t countAndFlagsBits = 0;
  unsigned __int8 v83 = objc_msgSend(v80, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v81, 1, v82, &v99);

  swift_unknownObjectRelease();
  if (v83)
  {
    id v84 = (id)v99._countAndFlagsBits;
    id v30 = v91;
    goto LABEL_70;
  }
  if (v99._countAndFlagsBits)
  {
    (id)v99._countAndFlagsBits;
  }
  else
  {
    if (one-time initialization token for _nilObjCError != -1) {
      swift_once();
    }
    id v85 = (id)_nilObjCError;
  }
  swift_willThrow();
  swift_release();
  swift_release();
}

unint64_t lazy protocol witness table accessor for type NSFileAttributeKey and conformance NSFileAttributeKey()
{
  unint64_t result = lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey;
  if (!lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey)
  {
    type metadata accessor for NSFileAttributeKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey);
  }
  return result;
}

uint64_t URL.resourceValues(forKeys:)@<X0>(uint64_t a1@<X0>, SEL *a2@<X1>, uint64_t *a3@<X8>)
{
  v15[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v7 = *v3;
  uint64_t v8 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v8);
  swift_bridgeObjectRelease();
  type metadata accessor for NSURLResourceKey(0);
  v15[0] = 0;
  id v9 = objc_msgSend(v7, *a2, _ContiguousArrayBuffer._asCocoaArray()(), v15);
  swift_unknownObjectRelease();
  id v10 = v15[0];
  if (v9)
  {
    uint64_t v11 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v9);
    id v12 = v10;

    *a3 = v11;
    a3[1] = a1;
    return swift_bridgeObjectRetain();
  }
  else
  {
    if (v15[0])
    {
      v15[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v14 = (id)_nilObjCError;
    }
    return swift_willThrow();
  }
}

uint64_t specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  if (!a1) {
    return MEMORY[0x1E4FBC868];
  }
  type metadata accessor for NSFileAttributeKey(0);
  if (v2 == MEMORY[0x1E4FBB1A0])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    uint64_t v3 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v3) {
      return v3;
    }
    id v31 = objc_msgSend(a1, sel_count);
    if (!v31) {
      return MEMORY[0x1E4FBC868];
    }
    uint64_t v32 = (uint64_t)v31;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v3 = static _DictionaryStorage.allocate(capacity:)();
    id v33 = *(void **)(v3 + 48);
    uint64_t v34 = *(void *)(v3 + 56);
    swift_retain();
    uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v33, v34, a1, v32);
    if (result < 0 || v32 < result) {
      goto LABEL_46;
    }
    *(void *)(v3 + 16) = result;
    if (!result)
    {
LABEL_42:
      swift_release();
      return v3;
    }
    uint64_t v35 = result - 1;
    uint64_t v36 = v3 + 64;
    while (1)
    {
      while (1)
      {
        if ((*(void *)(v36 + (((unint64_t)v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v35)) {
          goto LABEL_34;
        }
        id v41 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v35);
        uint64_t v42 = *v41;
        uint64_t v43 = v41[1];
        swift_bridgeObjectRetain();
        unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v42, v43);
        char v46 = v45;
        swift_bridgeObjectRelease();
        if ((v46 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        uint64_t v47 = *(void *)(v3 + 16);
        BOOL v48 = __OFSUB__(v47, 1);
        uint64_t v49 = v47 - 1;
        if (v48)
        {
LABEL_44:
          __break(1u);
          goto LABEL_45;
        }
        *(void *)(v3 + 16) = v49;
LABEL_34:
        if (--v35 < 0) {
          goto LABEL_42;
        }
      }
      *(void *)(v36 + ((v44 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v44;
      if (v35 < (uint64_t)v44)
      {
        *(_OWORD *)(*(void *)(v3 + 48) + 16 * v44) = *(_OWORD *)(*(void *)(v3 + 48) + 16 * v35);
        uint64_t v37 = *(void *)(v3 + 56);
        id v38 = (_OWORD *)(v37 + 32 * v35);
        long long v39 = v38[1];
        id v40 = (_OWORD *)(v37 + 32 * v44);
        _OWORD *v40 = *v38;
        v40[1] = v39;
        goto LABEL_34;
      }
      if (v44 == v35) {
        goto LABEL_34;
      }
      uint64_t v50 = *(void *)(v3 + 48);
      id v51 = (uint64_t *)(v50 + 16 * v44);
      unint64_t v52 = (uint64_t *)(v50 + 16 * v35);
      uint64_t v53 = *v51;
      uint64_t v54 = v51[1];
      uint64_t v55 = v52[1];
      *id v51 = *v52;
      v51[1] = v55;
      *unint64_t v52 = v53;
      v52[1] = v54;
      uint64_t v56 = *(void *)(v3 + 56);
      Swift::String v57 = (_OWORD *)(v56 + 32 * v44);
      id v58 = (_OWORD *)(v56 + 32 * v35);
      outlined init with take of Any(v57, v59);
      outlined init with take of Any(v58, v57);
      outlined init with take of Any(v59, v58);
      if (v35 < 0) {
        goto LABEL_42;
      }
    }
  }
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey, type metadata accessor for NSFileAttributeKey);
  swift_unknownObjectRetain();
  uint64_t v3 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v3) {
    return v3;
  }
  id v4 = objc_msgSend(a1, sel_count);
  if (!v4) {
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v5 = (uint64_t)v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSFileAttributeKey, Any>);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)();
  long long v6 = *(char **)(v3 + 48);
  uint64_t v7 = *(void *)(v3 + 56);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v6, v7, a1, v5);
  if ((result & 0x8000000000000000) == 0 && v5 >= result)
  {
    *(void *)(v3 + 16) = result;
    if (result)
    {
      uint64_t v9 = result - 1;
      uint64_t v10 = v3 + 64;
      while (1)
      {
        if ((*(void *)(v10 + (((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9)) {
          goto LABEL_10;
        }
        id v15 = *(void **)(*(void *)(v3 + 48) + 8 * v9);
        static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        Hasher.init(_seed:)();
        id v16 = v15;
        String.hash(into:)();
        Swift::Int v17 = Hasher._finalize()();

        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v18 = -1 << *(unsigned char *)(v3 + 32);
        unint64_t v19 = v17 & ~v18;
        unint64_t v20 = v19 >> 6;
        if (((-1 << v19) & ~*(void *)(v10 + 8 * (v19 >> 6))) != 0)
        {
          unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v10 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v22 = 0;
          unint64_t v23 = (unint64_t)(63 - v18) >> 6;
          do
          {
            if (++v20 == v23 && (v22 & 1) != 0)
            {
              __break(1u);
              goto LABEL_44;
            }
            BOOL v24 = v20 == v23;
            if (v20 == v23) {
              unint64_t v20 = 0;
            }
            v22 |= v24;
            uint64_t v25 = *(void *)(v10 + 8 * v20);
          }
          while (v25 == -1);
          unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
        }
        *(void *)(v10 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
        if (v9 < (uint64_t)v21)
        {
          *(void *)(*(void *)(v3 + 48) + 8 * v21) = *(void *)(*(void *)(v3 + 48) + 8 * v9);
          uint64_t v11 = *(void *)(v3 + 56);
          id v12 = (_OWORD *)(v11 + 32 * v9);
          long long v13 = v12[1];
          id v14 = (_OWORD *)(v11 + 32 * v21);
          _OWORD *v14 = *v12;
          v14[1] = v13;
LABEL_10:
          if (--v9 < 0) {
            goto LABEL_42;
          }
        }
        else
        {
          if (v21 == v9) {
            goto LABEL_10;
          }
          uint64_t v26 = *(void *)(v3 + 48);
          uint64_t v27 = *(void *)(v26 + 8 * v21);
          *(void *)(v26 + 8 * v21) = *(void *)(v26 + 8 * v9);
          *(void *)(v26 + 8 * v9) = v27;
          uint64_t v28 = *(void *)(v3 + 56);
          long long v29 = (_OWORD *)(v28 + 32 * v21);
          id v30 = (_OWORD *)(v28 + 32 * v9);
          outlined init with take of Any(v29, v59);
          outlined init with take of Any(v30, v29);
          outlined init with take of Any(v59, v30);
          if (v9 < 0) {
            goto LABEL_42;
          }
        }
      }
    }
    goto LABEL_42;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  long long v13;
  _OWORD *v14;
  void *v15;
  id v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  id v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  long long v39;
  _OWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  _OWORD *v58;
  _OWORD v59[4];

  if (!a1) {
    return MEMORY[0x1E4FBC868];
  }
  type metadata accessor for NSURLResourceKey(0);
  if (v2 == MEMORY[0x1E4FBB1A0])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    uint64_t v3 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v3) {
      return v3;
    }
    id v31 = objc_msgSend(a1, sel_count);
    if (!v31) {
      return MEMORY[0x1E4FBC868];
    }
    uint64_t v32 = (uint64_t)v31;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v3 = static _DictionaryStorage.allocate(capacity:)();
    id v33 = *(void **)(v3 + 48);
    uint64_t v34 = *(void *)(v3 + 56);
    swift_retain();
    uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v33, v34, a1, v32);
    if (result < 0 || v32 < result) {
      goto LABEL_46;
    }
    *(void *)(v3 + 16) = result;
    if (!result)
    {
LABEL_42:
      swift_release();
      return v3;
    }
    uint64_t v35 = result - 1;
    uint64_t v36 = v3 + 64;
    while (1)
    {
      while (1)
      {
        if ((*(void *)(v36 + (((unint64_t)v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v35)) {
          goto LABEL_34;
        }
        id v41 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v35);
        uint64_t v42 = *v41;
        uint64_t v43 = v41[1];
        swift_bridgeObjectRetain();
        unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v42, v43);
        char v46 = v45;
        swift_bridgeObjectRelease();
        if ((v46 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        uint64_t v47 = *(void *)(v3 + 16);
        BOOL v48 = __OFSUB__(v47, 1);
        uint64_t v49 = v47 - 1;
        if (v48)
        {
LABEL_44:
          __break(1u);
          goto LABEL_45;
        }
        *(void *)(v3 + 16) = v49;
LABEL_34:
        if (--v35 < 0) {
          goto LABEL_42;
        }
      }
      *(void *)(v36 + ((v44 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v44;
      if (v35 < (uint64_t)v44)
      {
        *(_OWORD *)(*(void *)(v3 + 48) + 16 * v44) = *(_OWORD *)(*(void *)(v3 + 48) + 16 * v35);
        uint64_t v37 = *(void *)(v3 + 56);
        id v38 = (_OWORD *)(v37 + 32 * v35);
        long long v39 = v38[1];
        id v40 = (_OWORD *)(v37 + 32 * v44);
        _OWORD *v40 = *v38;
        v40[1] = v39;
        goto LABEL_34;
      }
      if (v44 == v35) {
        goto LABEL_34;
      }
      uint64_t v50 = *(void *)(v3 + 48);
      id v51 = (uint64_t *)(v50 + 16 * v44);
      unint64_t v52 = (uint64_t *)(v50 + 16 * v35);
      uint64_t v53 = *v51;
      uint64_t v54 = v51[1];
      uint64_t v55 = v52[1];
      *id v51 = *v52;
      v51[1] = v55;
      *unint64_t v52 = v53;
      v52[1] = v54;
      uint64_t v56 = *(void *)(v3 + 56);
      Swift::String v57 = (_OWORD *)(v56 + 32 * v44);
      id v58 = (_OWORD *)(v56 + 32 * v35);
      outlined init with take of Any(v57, v59);
      outlined init with take of Any(v58, v57);
      outlined init with take of Any(v59, v58);
      if (v35 < 0) {
        goto LABEL_42;
      }
    }
  }
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
  swift_unknownObjectRetain();
  uint64_t v3 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v3) {
    return v3;
  }
  id v4 = objc_msgSend(a1, sel_count);
  if (!v4) {
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v5 = (uint64_t)v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSURLResourceKey, Any>);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)();
  long long v6 = *(char **)(v3 + 48);
  uint64_t v7 = *(void *)(v3 + 56);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v6, v7, a1, v5);
  if ((result & 0x8000000000000000) == 0 && v5 >= result)
  {
    *(void *)(v3 + 16) = result;
    if (result)
    {
      uint64_t v9 = result - 1;
      uint64_t v10 = v3 + 64;
      while (1)
      {
        if ((*(void *)(v10 + (((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9)) {
          goto LABEL_10;
        }
        id v15 = *(void **)(*(void *)(v3 + 48) + 8 * v9);
        static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        Hasher.init(_seed:)();
        id v16 = v15;
        String.hash(into:)();
        Swift::Int v17 = Hasher._finalize()();

        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v18 = -1 << *(unsigned char *)(v3 + 32);
        unint64_t v19 = v17 & ~v18;
        unint64_t v20 = v19 >> 6;
        if (((-1 << v19) & ~*(void *)(v10 + 8 * (v19 >> 6))) != 0)
        {
          unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v10 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v22 = 0;
          unint64_t v23 = (unint64_t)(63 - v18) >> 6;
          do
          {
            if (++v20 == v23 && (v22 & 1) != 0)
            {
              __break(1u);
              goto LABEL_44;
            }
            BOOL v24 = v20 == v23;
            if (v20 == v23) {
              unint64_t v20 = 0;
            }
            v22 |= v24;
            uint64_t v25 = *(void *)(v10 + 8 * v20);
          }
          while (v25 == -1);
          unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
        }
        *(void *)(v10 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
        if (v9 < (uint64_t)v21)
        {
          *(void *)(*(void *)(v3 + 48) + 8 * v21) = *(void *)(*(void *)(v3 + 48) + 8 * v9);
          uint64_t v11 = *(void *)(v3 + 56);
          id v12 = (_OWORD *)(v11 + 32 * v9);
          long long v13 = v12[1];
          id v14 = (_OWORD *)(v11 + 32 * v21);
          _OWORD *v14 = *v12;
          v14[1] = v13;
LABEL_10:
          if (--v9 < 0) {
            goto LABEL_42;
          }
        }
        else
        {
          if (v21 == v9) {
            goto LABEL_10;
          }
          uint64_t v26 = *(void *)(v3 + 48);
          uint64_t v27 = *(void *)(v26 + 8 * v21);
          *(void *)(v26 + 8 * v21) = *(void *)(v26 + 8 * v9);
          *(void *)(v26 + 8 * v9) = v27;
          uint64_t v28 = *(void *)(v3 + 56);
          long long v29 = (_OWORD *)(v28 + 32 * v21);
          id v30 = (_OWORD *)(v28 + 32 * v9);
          outlined init with take of Any(v29, v59);
          outlined init with take of Any(v30, v29);
          outlined init with take of Any(v59, v30);
          if (v9 < 0) {
            goto LABEL_42;
          }
        }
      }
    }
    goto LABEL_42;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _OWORD *v12;
  long long v13;
  _OWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  _OWORD v33[2];

  if (!a1) {
    return MEMORY[0x1E4FBC868];
  }
  swift_unknownObjectRetain();
  uint64_t v2 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v2) {
    return v2;
  }
  id v4 = objc_msgSend(a1, sel_count);
  if (!v4) {
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v5 = (uint64_t)v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  long long v6 = (void *)v3[6];
  uint64_t v7 = v3[7];
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v6, v7, a1, v5);
  if ((result & 0x8000000000000000) == 0 && v5 >= result)
  {
    v3[2] = result;
    if (!result)
    {
LABEL_19:
      swift_release();
      return (uint64_t)v3;
    }
    uint64_t v9 = result - 1;
    uint64_t v10 = v3 + 8;
    while (1)
    {
      while (1)
      {
        if ((*(void *)((char *)v10 + (((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9)) {
          goto LABEL_11;
        }
        id v15 = (uint64_t *)(v3[6] + 16 * v9);
        id v16 = *v15;
        Swift::Int v17 = v15[1];
        swift_bridgeObjectRetain();
        uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
        unint64_t v20 = v19;
        swift_bridgeObjectRelease();
        if ((v20 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        unint64_t v21 = v3[2];
        char v22 = __OFSUB__(v21, 1);
        unint64_t v23 = v21 - 1;
        if (v22)
        {
          __break(1u);
          goto LABEL_22;
        }
        v3[2] = v23;
LABEL_11:
        if (--v9 < 0) {
          goto LABEL_19;
        }
      }
      *(void *)((char *)v10 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      if (v9 < (uint64_t)v18)
      {
        *(_OWORD *)(v3[6] + 16 * v18) = *(_OWORD *)(v3[6] + 16 * v9);
        uint64_t v11 = v3[7];
        id v12 = (_OWORD *)(v11 + 32 * v9);
        long long v13 = v12[1];
        id v14 = (_OWORD *)(v11 + 32 * v18);
        _OWORD *v14 = *v12;
        v14[1] = v13;
        goto LABEL_11;
      }
      if (v18 == v9) {
        goto LABEL_11;
      }
      BOOL v24 = v3[6];
      uint64_t v25 = (uint64_t *)(v24 + 16 * v18);
      uint64_t v26 = (uint64_t *)(v24 + 16 * v9);
      uint64_t v27 = *v25;
      uint64_t v28 = v25[1];
      long long v29 = v26[1];
      *uint64_t v25 = *v26;
      v25[1] = v29;
      *uint64_t v26 = v27;
      v26[1] = v28;
      id v30 = v3[7];
      id v31 = (_OWORD *)(v30 + 32 * v18);
      uint64_t v32 = (_OWORD *)(v30 + 32 * v9);
      outlined init with take of Any(v31, v33);
      outlined init with take of Any(v32, v31);
      outlined init with take of Any(v33, v32);
      if (v9 < 0) {
        goto LABEL_19;
      }
    }
  }
LABEL_22:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  id v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  long long *v12;
  long long v13;
  long long v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  long long v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  long long *v29;
  long long *v30;
  long long v31;
  long long v32;
  uint64_t v33;
  uint64_t v34;
  long long v35;
  uint64_t v36;
  _OWORD *v37;
  _OWORD *v38;
  _OWORD v39[2];

  if (!a1) {
    return MEMORY[0x1E4FBC868];
  }
  swift_unknownObjectRetain();
  uint64_t v2 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v2) {
    return v2;
  }
  uint64_t v3 = objc_msgSend(a1, sel_count);
  if (!v3) {
    return MEMORY[0x1E4FBC868];
  }
  id v4 = (uint64_t)v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v5 = *(char **)(v2 + 48);
  long long v6 = *(void *)(v2 + 56);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v5, v6, a1, v4);
  if ((result & 0x8000000000000000) == 0 && v4 >= result)
  {
    *(void *)(v2 + 16) = result;
    if (result)
    {
      uint64_t v8 = result - 1;
      uint64_t v9 = v2 + 64;
      while (1)
      {
        if ((*(void *)(v9 + (((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8)) {
          goto LABEL_9;
        }
        outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v8, (uint64_t)v39);
        unint64_t v19 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t result = outlined destroy of AnyHashable((uint64_t)v39);
        unint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v21 = v19 & ~v20;
        char v22 = v21 >> 6;
        if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) != 0)
        {
          unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          BOOL v24 = 0;
          uint64_t v25 = (unint64_t)(63 - v20) >> 6;
          do
          {
            if (++v22 == v25 && (v24 & 1) != 0)
            {
              __break(1u);
              goto LABEL_27;
            }
            uint64_t v26 = v22 == v25;
            if (v22 == v25) {
              char v22 = 0;
            }
            v24 |= v26;
            uint64_t v27 = *(void *)(v9 + 8 * v22);
          }
          while (v27 == -1);
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
        }
        *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
        if (v8 < (uint64_t)v23)
        {
          uint64_t v10 = *(void *)(v2 + 48);
          uint64_t v11 = v10 + 40 * v23;
          id v12 = (long long *)(v10 + 40 * v8);
          long long v13 = *v12;
          id v14 = v12[1];
          *(void *)(v11 + 32) = *((void *)v12 + 4);
          *(_OWORD *)uint64_t v11 = v13;
          *(_OWORD *)(v11 + 16) = v14;
          id v15 = *(void *)(v2 + 56);
          id v16 = (_OWORD *)(v15 + 32 * v23);
          Swift::Int v17 = (_OWORD *)(v15 + 32 * v8);
          uint64_t v18 = v17[1];
          char *v16 = *v17;
          v16[1] = v18;
LABEL_9:
          if (--v8 < 0) {
            break;
          }
        }
        else
        {
          if (v23 == v8) {
            goto LABEL_9;
          }
          uint64_t v28 = *(void *)(v2 + 48);
          long long v29 = (long long *)(v28 + 40 * v23);
          id v30 = (long long *)(v28 + 40 * v8);
          id v31 = *v29;
          uint64_t v32 = v29[1];
          id v33 = *((void *)v29 + 4);
          uint64_t v34 = *((void *)v30 + 4);
          uint64_t v35 = v30[1];
          *long long v29 = *v30;
          v29[1] = v35;
          *((void *)v29 + 4) = v34;
          *((void *)v30 + 4) = v33;
          *id v30 = v31;
          v30[1] = v32;
          uint64_t v36 = *(void *)(v2 + 56);
          uint64_t v37 = (_OWORD *)(v36 + 32 * v23);
          id v38 = (_OWORD *)(v36 + 32 * v8);
          outlined init with take of Any(v37, v39);
          outlined init with take of Any(v38, v37);
          outlined init with take of Any(v39, v38);
          if (v8 < 0) {
            break;
          }
        }
      }
    }
    swift_release();
    return v2;
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  id v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (!a1) {
    return MEMORY[0x1E4FBC868];
  }
  swift_unknownObjectRetain();
  uint64_t v2 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v2) {
    return v2;
  }
  uint64_t v3 = objc_msgSend(a1, sel_count);
  if (!v3) {
    return MEMORY[0x1E4FBC868];
  }
  id v4 = (uint64_t)v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v5 = *(char **)(v2 + 48);
  long long v6 = *(void *)(v2 + 56);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v5, v6, a1, v4);
  if ((result & 0x8000000000000000) == 0 && v4 >= result)
  {
    *(void *)(v2 + 16) = result;
    if (result)
    {
      uint64_t v8 = result - 1;
      uint64_t v9 = v2 + 64;
      while (1)
      {
        if ((*(void *)(v9 + (((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8)) {
          goto LABEL_9;
        }
        uint64_t result = static Hasher._hash(seed:_:)();
        uint64_t v10 = -1 << *(unsigned char *)(v2 + 32);
        uint64_t v11 = result & ~v10;
        id v12 = v11 >> 6;
        if (((-1 << v11) & ~*(void *)(v9 + 8 * (v11 >> 6))) != 0)
        {
          long long v13 = __clz(__rbit64((-1 << v11) & ~*(void *)(v9 + 8 * (v11 >> 6)))) | v11 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          id v14 = 0;
          id v15 = (unint64_t)(63 - v10) >> 6;
          do
          {
            if (++v12 == v15 && (v14 & 1) != 0)
            {
              __break(1u);
              goto LABEL_27;
            }
            id v16 = v12 == v15;
            if (v12 == v15) {
              id v12 = 0;
            }
            v14 |= v16;
            Swift::Int v17 = *(void *)(v9 + 8 * v12);
          }
          while (v17 == -1);
          long long v13 = __clz(__rbit64(~v17)) + (v12 << 6);
        }
        *(void *)(v9 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
        if (v8 < (uint64_t)v13)
        {
          *(void *)(*(void *)(v2 + 48) + 8 * v13) = *(void *)(*(void *)(v2 + 48) + 8 * v8);
          *(_OWORD *)(*(void *)(v2 + 56) + 16 * v13) = *(_OWORD *)(*(void *)(v2 + 56) + 16 * v8);
LABEL_9:
          if (--v8 < 0) {
            break;
          }
        }
        else
        {
          if (v13 == v8) {
            goto LABEL_9;
          }
          uint64_t v18 = *(void *)(v2 + 48);
          unint64_t v19 = *(void *)(v18 + 8 * v13);
          *(void *)(v18 + 8 * v13) = *(void *)(v18 + 8 * v8);
          *(void *)(v18 + 8 * v8) = v19;
          unint64_t v20 = *(void *)(v2 + 56);
          unint64_t v21 = (uint64_t *)(v20 + 16 * v13);
          char v22 = (uint64_t *)(v20 + 16 * v8);
          unint64_t v23 = *v21;
          BOOL v24 = v21[1];
          uint64_t v25 = v22[1];
          *unint64_t v21 = *v22;
          v21[1] = v25;
          *char v22 = v23;
          v22[1] = v24;
          if (v8 < 0) {
            break;
          }
        }
      }
    }
    swift_release();
    return v2;
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _OWORD *v17;
  long long v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  _OWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD v59[2];

  if (!a1) {
    return MEMORY[0x1E4FBC868];
  }
  if (MEMORY[0x1E4FBC840] + 8 != MEMORY[0x1E4FBB1A0])
  {
    swift_unknownObjectRetain();
    uint64_t v2 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v2) {
      return (uint64_t)v2;
    }
    uint64_t v10 = objc_msgSend(a1, sel_count);
    if (!v10) {
      return MEMORY[0x1E4FBC868];
    }
    uint64_t v11 = (uint64_t)v10;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
    id v12 = (char *)v2[6];
    long long v13 = v2[7];
    swift_retain();
    uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v12, v13, a1, v11);
    if (result < 0 || v11 < result) {
      goto LABEL_40;
    }
    v2[2] = result;
    if (!result) {
      goto LABEL_35;
    }
    id v14 = result - 1;
    id v15 = v2 + 8;
    while (1)
    {
      if ((*(void *)((char *)v15 + (((unint64_t)v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14)) {
        goto LABEL_27;
      }
      long long v39 = (uint64_t *)(v2[6] + 16 * v14);
      id v40 = *v39;
      id v41 = v39[1];
      swift_bridgeObjectRetain();
      uint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v41);
      unint64_t v44 = v43;
      swift_bridgeObjectRelease();
      if (v44)
      {
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        char v45 = v2[2];
        uint64_t v27 = __OFSUB__(v45, 1);
        char v46 = v45 - 1;
        if (v27) {
          goto LABEL_38;
        }
        v2[2] = v46;
        goto LABEL_27;
      }
      *(void *)((char *)v15 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v42;
      if (v14 < (uint64_t)v42)
      {
        id v38 = 16 * v42;
        *(_OWORD *)(v2[6] + v38) = *(_OWORD *)(v2[6] + 16 * v14);
        *(_OWORD *)(v2[7] + v38) = *(_OWORD *)(v2[7] + 16 * v14);
LABEL_27:
        if (--v14 < 0) {
          goto LABEL_35;
        }
      }
      else
      {
        if (v42 == v14) {
          goto LABEL_27;
        }
        uint64_t v47 = v2[6];
        BOOL v48 = (uint64_t *)(v47 + 16 * v42);
        uint64_t v49 = (uint64_t *)(v47 + 16 * v14);
        uint64_t v50 = *v48;
        id v51 = v48[1];
        unint64_t v52 = v49[1];
        *BOOL v48 = *v49;
        v48[1] = v52;
        *uint64_t v49 = v50;
        v49[1] = v51;
        uint64_t v53 = v2[7];
        uint64_t v54 = (uint64_t *)(v53 + 16 * v42);
        uint64_t v55 = (uint64_t *)(v53 + 16 * v14);
        uint64_t v56 = *v54;
        Swift::String v57 = v54[1];
        id v58 = v55[1];
        *uint64_t v54 = *v55;
        v54[1] = v58;
        *uint64_t v55 = v56;
        v55[1] = v57;
        if (v14 < 0) {
          goto LABEL_35;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  uint64_t v2 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v2) {
    return (uint64_t)v2;
  }
  uint64_t v3 = objc_msgSend(a1, sel_count);
  if (!v3) {
    return MEMORY[0x1E4FBC868];
  }
  id v4 = (uint64_t)v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v5 = (void *)v2[6];
  long long v6 = v2[7];
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v5, v6, a1, v4);
  if (result < 0 || v4 < result) {
    goto LABEL_39;
  }
  v2[2] = result;
  if (!result)
  {
LABEL_35:
    swift_release();
    return (uint64_t)v2;
  }
  uint64_t v8 = result - 1;
  uint64_t v9 = v2 + 8;
  while (1)
  {
    if ((*(void *)((char *)v9 + (((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8)) {
      goto LABEL_17;
    }
    unint64_t v20 = (uint64_t *)(v2[6] + 16 * v8);
    unint64_t v21 = *v20;
    char v22 = v20[1];
    swift_bridgeObjectRetain();
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22);
    uint64_t v25 = v24;
    swift_bridgeObjectRelease();
    if (v25) {
      break;
    }
    *(void *)((char *)v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    if (v8 < (uint64_t)v23)
    {
      *(_OWORD *)(v2[6] + 16 * v23) = *(_OWORD *)(v2[6] + 16 * v8);
      id v16 = v2[7];
      Swift::Int v17 = (_OWORD *)(v16 + 32 * v8);
      uint64_t v18 = v17[1];
      unint64_t v19 = (_OWORD *)(v16 + 32 * v23);
      *unint64_t v19 = *v17;
      v19[1] = v18;
LABEL_17:
      if (--v8 < 0) {
        goto LABEL_35;
      }
    }
    else
    {
      if (v23 == v8) {
        goto LABEL_17;
      }
      long long v29 = v2[6];
      id v30 = (uint64_t *)(v29 + 16 * v23);
      id v31 = (uint64_t *)(v29 + 16 * v8);
      uint64_t v32 = *v30;
      id v33 = v30[1];
      uint64_t v34 = v31[1];
      *id v30 = *v31;
      v30[1] = v34;
      *id v31 = v32;
      v31[1] = v33;
      uint64_t v35 = v2[7];
      uint64_t v36 = (_OWORD *)(v35 + 32 * v23);
      uint64_t v37 = (_OWORD *)(v35 + 32 * v8);
      outlined init with take of Any(v36, v59);
      outlined init with take of Any(v37, v36);
      outlined init with take of Any(v59, v37);
      if (v8 < 0) {
        goto LABEL_35;
      }
    }
  }
  swift_arrayDestroy();
  uint64_t result = swift_arrayDestroy();
  uint64_t v26 = v2[2];
  uint64_t v27 = __OFSUB__(v26, 1);
  uint64_t v28 = v26 - 1;
  if (!v27)
  {
    v2[2] = v28;
    goto LABEL_17;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

void type metadata accessor for NSFileAttributeKey(uint64_t a1)
{
}

void type metadata accessor for NSURLResourceKey(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

char *specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(char *result, uint64_t a2, id a3, uint64_t a4, uint64_t (*a5)(void))
{
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (a2)
  {
    uint64_t v8 = result;
    uint64_t result = (char *)objc_msgSend(a3, sel__getObjects_andKeys_count_, a2, result, a4);
    if ((a4 & 0x8000000000000000) == 0)
    {
      if (!a4) {
        return (char *)a4;
      }
      uint64_t result = (char *)a5(0);
      uint64_t v9 = v8 - 8;
      uint64_t v10 = a4;
      do
      {
        if (v10 > a4)
        {
          __break(1u);
          goto LABEL_13;
        }
        uint64_t v11 = v10 - 1;
        uint64_t v12 = 8 * v10;
        uint64_t v18 = *(void *)&v9[8 * v10];
        swift_unknownObjectRetain();
        uint64_t result = (char *)swift_dynamicCast();
        *(void *)&v9[v12] = v17;
        uint64_t v10 = v11;
      }
      while (v11);
      uint64_t v13 = a2 - 32;
      uint64_t v14 = 32 * a4;
      uint64_t v15 = a4;
      while (v15 <= a4)
      {
        uint64_t v16 = v15 - 1;
        uint64_t v18 = *(void *)(v13 + 8 * v15 + 24);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t result = (char *)outlined init with take of Any(&v17, (_OWORD *)(v13 + v14));
        v14 -= 32;
        uint64_t v15 = v16;
        if (!v16) {
          return (char *)a4;
        }
      }
LABEL_13:
      __break(1u);
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_16:
  __break(1u);
  return result;
}

char *specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(char *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for NSURLResourceKey);
}

{
  return specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for NSFileAttributeKey);
}

void sub_181884340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t closure #1 in _ProcessInfo.processName.getter@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4 = a1[1];
  if (v4)
  {
    unint64_t Process = *a1;
    unint64_t v6 = v4;
  }
  else
  {
    unint64_t Process = specialized static _ProcessInfo._getProcessName()();
    unint64_t v6 = v7;
    *a1 = Process;
    a1[1] = v7;
    swift_bridgeObjectRetain();
  }
  *a2 = Process;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

void sub_181884A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

unint64_t specialized static _ProcessInfo._getProcessName()()
{
  uint64_t v0 = (void *)static CommandLine.arguments.getter();
  if (!v0[2])
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v2 = v0[4];
  unint64_t v1 = v0[5];
  swift_bridgeObjectRetain();
  uint64_t v3 = swift_bridgeObjectRelease();
  v15[0] = 47;
  v15[1] = 0xE100000000000000;
  MEMORY[0x1F4188790](v3);
  void v14[2] = v15;
  specialized BidirectionalCollection.lastIndex(where:)(partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:), (uint64_t)v14, v2, v1);
  if (v4) {
    return v2;
  }
  unint64_t result = String.index(after:)();
  uint64_t v6 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0) {
    uint64_t v6 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v6 >= result >> 14)
  {
    uint64_t v7 = String.subscript.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    swift_bridgeObjectRelease();
    uint64_t v2 = MEMORY[0x185301F50](v7, v9, v11, v13);
    swift_bridgeObjectRelease();
    return v2;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall _LogSpecialFolderRecreation(_:_:)(NSFileManager a1, Swift::String a2)
{
  weakDelegateValue = a1._weakDelegateValue;
  delegate = a1._delegate;
  Class isa = a1.super.isa;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = objc_msgSend(self, sel_standardUserDefaults);
  unsigned int v10 = objc_msgSend(v9, sel_BOOLForKey_, String._bridgeToObjectiveCImpl()());

  swift_unknownObjectRelease();
  if (v10)
  {
    unsigned __int8 v11 = [(objc_class *)isa fileExistsAtPath:String._bridgeToObjectiveCImpl()()];
    swift_unknownObjectRelease();
    if ((v11 & 1) == 0)
    {
      Logger.init()();
      swift_bridgeObjectRetain_n();
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = swift_slowAlloc();
        uint64_t v21 = swift_slowAlloc();
        uint64_t v24 = v21;
        *(_DWORD *)uint64_t v14 = 136315394;
        id v15 = objc_msgSend(self, sel_mainBundle);
        id v16 = objc_msgSend(v15, sel_bundleIdentifier);

        uint64_t v22 = v6;
        if (v16)
        {
          uint64_t v17 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
          unint64_t v19 = v18;
        }
        else
        {
          unint64_t v19 = 0xE600000000000000;
          uint64_t v17 = 0x296C6C756E28;
        }
        uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v14 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)delegate, (unint64_t)weakDelegateValue, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_181795000, v12, v13, "*** Application: %s just recreated special folder: %s", (uint8_t *)v14, 0x16u);
        uint64_t v20 = v21;
        swift_arrayDestroy();
        MEMORY[0x185309510](v20, -1, -1);
        MEMORY[0x185309510](v14, -1, -1);

        (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v5);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      }
    }
  }
}

uint64_t NSFileWrapperChildNameHash_CFDictionary(void *a1)
{
  unint64_t v1 = (void *)[a1 lowercaseString];

  return [v1 hash];
}

uint64_t NSFileWrapperChildNameIsEqual_CFDictionary(void *a1, void *a2)
{
  return objc_msgSend((id)objc_msgSend(a1, "lowercaseString"), "isEqualToString:", objc_msgSend(a2, "lowercaseString"));
}

void _NSKVONotifyingEnableForInfoAndKey(uint64_t a1, const void *a2)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  os_unfair_recursive_lock_lock_with_options();
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 16), a2);
  os_unfair_recursive_lock_unlock();
  id v4 = _NSKeyValueSetterForClassAndKey(*(const void *(__cdecl **)(CFAllocatorRef, const void *))a1, a2, *(void **)a1);
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    goto LABEL_43;
  }
  uint64_t v5 = (objc_method *)[v4 method];
  if (*method_getTypeEncoding(v5) == 118)
  {
    uint64_t v6 = method_copyArgumentType(v5, 2u);
    uint64_t v7 = v6;
    int v8 = *v6;
    if (v8 > 82)
    {
      switch(*v6)
      {
        case 'c':
          unsigned int v10 = (void (*)(void))_NSSetCharValueAndNotify;
          goto LABEL_40;
        case 'd':
          unsigned int v10 = (void (*)(void))_NSSetDoubleValueAndNotify;
          goto LABEL_40;
        case 'e':
        case 'g':
        case 'h':
        case 'j':
        case 'k':
        case 'm':
        case 'n':
        case 'o':
        case 'p':
        case 'r':
          goto LABEL_28;
        case 'f':
          unsigned int v10 = (void (*)(void))_NSSetFloatValueAndNotify;
          goto LABEL_40;
        case 'i':
          unsigned int v10 = (void (*)(void))_NSSetIntValueAndNotify;
          goto LABEL_40;
        case 'l':
          unsigned int v10 = (void (*)(void))_NSSetLongValueAndNotify;
          goto LABEL_40;
        case 'q':
          unsigned int v10 = (void (*)(void))_NSSetLongLongValueAndNotify;
          goto LABEL_40;
        case 's':
          unsigned int v10 = (void (*)(void))_NSSetShortValueAndNotify;
          goto LABEL_40;
        default:
          if (v8 == 83)
          {
            unsigned int v10 = (void (*)(void))_NSSetUnsignedShortValueAndNotify;
            goto LABEL_40;
          }
          if (v8 != 123) {
            goto LABEL_28;
          }
          int v14 = strcmp(v6, "{CGPoint=dd}");
          unsigned int v10 = (void (*)(void))_NSSetPointValueAndNotify;
          if (!v14) {
            goto LABEL_40;
          }
          int v15 = strcmp(v7, "{_NSPoint=ff}");
          unsigned int v10 = (void (*)(void))_NSSetPointValueAndNotify;
          if (!v15) {
            goto LABEL_40;
          }
          int v16 = strcmp(v7, "{_NSRange=QQ}");
          unsigned int v10 = (void (*)(void))_NSSetRangeValueAndNotify;
          if (!v16) {
            goto LABEL_40;
          }
          int v17 = strcmp(v7, "{CGRect={CGPoint=dd}{CGSize=dd}}");
          unsigned int v10 = (void (*)(void))_NSSetRectValueAndNotify;
          if (!v17) {
            goto LABEL_40;
          }
          int v18 = strcmp(v7, "{_NSRect={_NSPoint=ff}{_NSSize=ff}}");
          unsigned int v10 = (void (*)(void))_NSSetRectValueAndNotify;
          if (!v18) {
            goto LABEL_40;
          }
          int v19 = strcmp(v7, "{CGSize=dd}");
          unsigned int v10 = (void (*)(void))_NSSetSizeValueAndNotify;
          if (!v19) {
            goto LABEL_40;
          }
          if (!strcmp(v7, "{_NSSize=ff}")) {
            id v9 = (void (*)(void))_NSSetSizeValueAndNotify;
          }
          else {
            id v9 = (void (*)(void))MEMORY[0x1E4F1CB90];
          }
          break;
      }
    }
    else
    {
      if (v8 <= 75)
      {
        id v9 = (void (*)(void))_NSSetObjectValueAndNotify;
        switch(*v6)
        {
          case '@':
            goto LABEL_41;
          case 'A':
          case 'D':
          case 'E':
          case 'F':
          case 'G':
          case 'H':
            goto LABEL_28;
          case 'B':
            unsigned int v10 = (void (*)(void))_NSSetBoolValueAndNotify;
            goto LABEL_40;
          case 'C':
            unsigned int v10 = (void (*)(void))_NSSetUnsignedCharValueAndNotify;
            goto LABEL_40;
          case 'I':
            unsigned int v10 = (void (*)(void))_NSSetUnsignedIntValueAndNotify;
            goto LABEL_40;
          default:
            if (v8 != 35) {
              goto LABEL_28;
            }
            goto LABEL_41;
        }
      }
      if (v8 == 76)
      {
        unsigned int v10 = (void (*)(void))_NSSetUnsignedLongValueAndNotify;
      }
      else
      {
        if (v8 != 81)
        {
LABEL_28:
          if (*(void *)a1) {
            SEL Name = class_getName(*(Class *)a1);
          }
          else {
            SEL Name = "nil";
          }
          id v74 = method_getName(v5);
          id v75 = sel_getName(v74);
          NSLog((NSString *)@"KVO autonotifying only supports -set<Key>: methods that take id, NSNumber-supported scalar types, and some NSValue-supported structure types. Autonotifying will not be done for invocations of -[%s %s].", Name, v75);
          free(v7);
          goto LABEL_43;
        }
        unsigned int v10 = (void (*)(void))_NSSetUnsignedLongLongValueAndNotify;
      }
LABEL_40:
      id v9 = v10;
    }
LABEL_41:
    free(v7);
    uint64_t v21 = method_getName(v5);
    NSKVONotifyingSetMethodImplementation((Class *)a1, v21, v9, a2);
    if (v9 == (void (*)(void))MEMORY[0x1E4F1CB90])
    {
      NSKVONotifyingSetMethodImplementation((Class *)a1, sel_forwardInvocation_, (void (*)(void))NSKVOForwardInvocation, 0);
      uint64_t v22 = *(objc_class **)(a1 + 8);
      strcpy(__source, "_original_");
      uint64_t v23 = sel_getName(v21);
      size_t v24 = strlen(v23);
      size_t v25 = v24 + 11;
      MEMORY[0x1F4188790](v24);
      uint64_t v27 = &__source[-((v26 + 26) & 0xFFFFFFFFFFFFFFF0) - 8];
      strlcpy(v27, __source, v25);
      strlcat(v27, v23, v25);
      uint64_t v28 = sel_registerName(v27);
      IMP Implementation = method_getImplementation(v5);
      TypeEncoding = method_getTypeEncoding(v5);
      class_addMethod(v22, v28, Implementation, TypeEncoding);
    }
  }
  else
  {
    if (*(void *)a1) {
      unsigned __int8 v11 = class_getName(*(Class *)a1);
    }
    else {
      unsigned __int8 v11 = "nil";
    }
    uint64_t v12 = method_getName(v5);
    os_log_type_t v13 = sel_getName(v12);
    NSLog((NSString *)@"KVO autonotifying only supports -set<Key>: methods that return void. Autonotifying will not be done for invocations of -[%s %s].", v11, v13);
  }
LABEL_43:
  id v31 = _NSKeyValueMutableArrayGetterForIsaAndKey(*(const void *(__cdecl **)(CFAllocatorRef, const void *))a1, a2);
  if (objc_opt_respondsToSelector())
  {
    uint64_t v32 = [v31 mutatingMethods];
    if (v32)
    {
      id v33 = (void *)v32;
      uint64_t v34 = *(objc_method **)(v32 + 8);
      if (v34)
      {
        uint64_t v35 = method_getName(v34);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v35, (void (*)(void))NSKVOInsertObjectAtIndexAndNotify, a2);
      }
      uint64_t v36 = (objc_method *)v33[4];
      if (v36)
      {
        uint64_t v37 = method_getName(v36);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v37, (void (*)(void))NSKVOInsertObjectsAtIndexesAndNotify, a2);
      }
      id v38 = (objc_method *)v33[2];
      if (v38)
      {
        long long v39 = method_getName(v38);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v39, (void (*)(void))NSKVORemoveObjectAtIndexAndNotify, a2);
      }
      id v40 = (objc_method *)v33[5];
      if (v40)
      {
        id v41 = method_getName(v40);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v41, (void (*)(void))NSKVORemoveObjectsAtIndexesAndNotify, a2);
      }
      uint64_t v42 = (objc_method *)v33[3];
      if (v42)
      {
        uint64_t v43 = method_getName(v42);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v43, (void (*)(void))NSKVOReplaceObjectAtIndexAndNotify, a2);
      }
      unint64_t v44 = (objc_method *)v33[6];
      if (v44)
      {
        char v45 = method_getName(v44);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v45, (void (*)(void))NSKVOReplaceObjectsAtIndexesAndNotify, a2);
      }
    }
  }
  id v46 = _NSKeyValueMutableOrderedSetGetterForIsaAndKey(*(const void *(__cdecl **)(CFAllocatorRef, const void *))a1, a2);
  if (objc_opt_respondsToSelector())
  {
    uint64_t v47 = [v46 mutatingMethods];
    if (v47)
    {
      BOOL v48 = (void *)v47;
      uint64_t v49 = *(objc_method **)(v47 + 8);
      if (v49)
      {
        uint64_t v50 = method_getName(v49);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v50, (void (*)(void))NSKVOInsertObjectAtIndexAndNotify, a2);
      }
      id v51 = (objc_method *)v48[4];
      if (v51)
      {
        unint64_t v52 = method_getName(v51);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v52, (void (*)(void))NSKVOInsertObjectsAtIndexesAndNotify, a2);
      }
      uint64_t v53 = (objc_method *)v48[2];
      if (v53)
      {
        uint64_t v54 = method_getName(v53);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v54, (void (*)(void))NSKVORemoveObjectAtIndexAndNotify, a2);
      }
      uint64_t v55 = (objc_method *)v48[5];
      if (v55)
      {
        uint64_t v56 = method_getName(v55);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v56, (void (*)(void))NSKVORemoveObjectsAtIndexesAndNotify, a2);
      }
      Swift::String v57 = (objc_method *)v48[3];
      if (v57)
      {
        id v58 = method_getName(v57);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v58, (void (*)(void))NSKVOReplaceObjectAtIndexAndNotify, a2);
      }
      uint64_t v59 = (objc_method *)v48[6];
      if (v59)
      {
        uint64_t v60 = method_getName(v59);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v60, (void (*)(void))NSKVOReplaceObjectsAtIndexesAndNotify, a2);
      }
    }
  }
  id v61 = _NSKeyValueMutableSetGetterForClassAndKey(*(const void *(__cdecl **)(CFAllocatorRef, const void *))a1, a2, *(void **)a1);
  if (objc_opt_respondsToSelector())
  {
    uint64_t v62 = [v61 mutatingMethods];
    if (v62)
    {
      unint64_t v63 = (void *)v62;
      unint64_t v64 = *(objc_method **)(v62 + 8);
      if (v64)
      {
        Swift::Int v65 = method_getName(v64);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v65, (void (*)(void))NSKVOAddObjectAndNotify, a2);
      }
      unint64_t v66 = (objc_method *)v63[3];
      if (v66)
      {
        unint64_t v67 = method_getName(v66);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v67, (void (*)(void))NSKVOIntersectSetAndNotify, a2);
      }
      unint64_t v68 = (objc_method *)v63[4];
      if (v68)
      {
        unint64_t v69 = method_getName(v68);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v69, (void (*)(void))NSKVOMinusSetAndNotify, a2);
      }
      Swift::String v70 = (objc_method *)v63[2];
      if (v70)
      {
        NSFileManager v71 = method_getName(v70);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v71, (void (*)(void))NSKVORemoveObjectAndNotify, a2);
      }
      uint64_t v72 = (objc_method *)v63[5];
      if (v72)
      {
        uint64_t v73 = method_getName(v72);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v73, (void (*)(void))NSKVOUnionSetAndNotify, a2);
      }
    }
  }
  _NSKeyValueInvalidateCachedMutatorsForIsaAndKey(*(void *)(a1 + 8), a2);
}

id _NSKeyValueMutableSetGetterForClassAndKey(const void *(__cdecl *a1)(CFAllocatorRef, const void *), const void *a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  CFSetRef v6 = (const __CFSet *)NSKeyValueCachedMutableSetGetters;
  if (!NSKeyValueCachedMutableSetGetters)
  {
    long long v7 = *(_OWORD *)(MEMORY[0x1E4F1D548] + 16);
    *(_OWORD *)&v11.version = *MEMORY[0x1E4F1D548];
    *(_OWORD *)&v11.release = v7;
    v11.equal = (CFSetEqualCallBack)NSKeyValueAccessorIsEqual;
    v11.hash = (CFSetHashCallBack)NSKeyValueAccessorHash;
    CFSetRef v6 = CFSetCreateMutable(0, 0, &v11);
    NSKeyValueCachedMutableSetGetters = (uint64_t)v6;
  }
  v11.version = 0;
  v11.retain = a1;
  *(_OWORD *)&v11.release = (unint64_t)a2;
  if (a2)
  {
    CFHashCode v8 = CFHash(a2);
    CFSetRef v6 = (const __CFSet *)NSKeyValueCachedMutableSetGetters;
  }
  else
  {
    CFHashCode v8 = 0;
  }
  v11.copyDescription = (CFSetCopyDescriptionCallBack)(v8 ^ (unint64_t)a1);
  id Value = (id)CFSetGetValue(v6, &v11);
  if (!Value)
  {
    id Value = objc_msgSend(a3, sel__createMutableSetValueGetterWithContainerClassID_key_, a1, a2, *(_OWORD *)&v11.version, v11.release);
    CFSetAddValue((CFMutableSetRef)NSKeyValueCachedMutableSetGetters, Value);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  return Value;
}

void sub_1818863D4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

id _NSKeyValueMutableOrderedSetGetterForIsaAndKey(const void *(__cdecl *a1)(CFAllocatorRef, const void *), const void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  CFSetRef v4 = (const __CFSet *)NSKeyValueCachedMutableOrderedSetGetters;
  if (!NSKeyValueCachedMutableOrderedSetGetters)
  {
    long long v5 = *(_OWORD *)(MEMORY[0x1E4F1D548] + 16);
    *(_OWORD *)&v9.version = *MEMORY[0x1E4F1D548];
    *(_OWORD *)&v9.release = v5;
    v9.equal = (CFSetEqualCallBack)NSKeyValueAccessorIsEqual;
    v9.hash = (CFSetHashCallBack)NSKeyValueAccessorHash;
    CFSetRef v4 = CFSetCreateMutable(0, 0, &v9);
    NSKeyValueCachedMutableOrderedSetGetters = (uint64_t)v4;
  }
  v9.version = 0;
  v9.retain = a1;
  *(_OWORD *)&v9.release = (unint64_t)a2;
  if (a2)
  {
    CFHashCode v6 = CFHash(a2);
    CFSetRef v4 = (const __CFSet *)NSKeyValueCachedMutableOrderedSetGetters;
  }
  else
  {
    CFHashCode v6 = 0;
  }
  v9.copyDescription = (CFSetCopyDescriptionCallBack)(v6 ^ (unint64_t)a1);
  id Value = (id)CFSetGetValue(v4, &v9);
  if (!Value)
  {
    id Value = objc_msgSend(a1, sel__createMutableOrderedSetValueGetterWithContainerClassID_key_, a1, a2, *(_OWORD *)&v9.version, v9.release);
    CFSetAddValue((CFMutableSetRef)NSKeyValueCachedMutableOrderedSetGetters, Value);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  return Value;
}

void sub_18188654C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void _NSKeyValueInvalidateCachedMutatorsForIsaAndKey(uint64_t a1, const void *a2)
{
  value[4] = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  value[0] = 0;
  value[1] = a1;
  value[2] = a2;
  if (a2) {
    CFHashCode v4 = CFHash(a2);
  }
  else {
    CFHashCode v4 = 0;
  }
  value[3] = v4 ^ a1;
  if (NSKeyValueCachedSetters)
  {
    long long v5 = CFSetGetValue((CFSetRef)NSKeyValueCachedSetters, value);
    if (v5) {
      CFSetRemoveValue((CFMutableSetRef)NSKeyValueCachedSetters, v5);
    }
  }
  if (NSKeyValueCachedMutableArrayGetters)
  {
    CFHashCode v6 = CFSetGetValue((CFSetRef)NSKeyValueCachedMutableArrayGetters, value);
    if (v6) {
      CFSetRemoveValue((CFMutableSetRef)NSKeyValueCachedMutableArrayGetters, v6);
    }
  }
  if (NSKeyValueCachedMutableOrderedSetGetters)
  {
    long long v7 = CFSetGetValue((CFSetRef)NSKeyValueCachedMutableOrderedSetGetters, value);
    if (v7) {
      CFSetRemoveValue((CFMutableSetRef)NSKeyValueCachedMutableOrderedSetGetters, v7);
    }
  }
  if (NSKeyValueCachedMutableSetGetters)
  {
    CFHashCode v8 = CFSetGetValue((CFSetRef)NSKeyValueCachedMutableSetGetters, value);
    if (v8) {
      CFSetRemoveValue((CFMutableSetRef)NSKeyValueCachedMutableSetGetters, v8);
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
}

id _NSKeyValueSetterForClassAndKey(const void *(__cdecl *a1)(CFAllocatorRef, const void *), const void *a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  CFSetRef v6 = (const __CFSet *)NSKeyValueCachedSetters;
  if (!NSKeyValueCachedSetters)
  {
    long long v7 = *(_OWORD *)(MEMORY[0x1E4F1D548] + 16);
    *(_OWORD *)&v11.version = *MEMORY[0x1E4F1D548];
    *(_OWORD *)&v11.release = v7;
    v11.equal = (CFSetEqualCallBack)NSKeyValueAccessorIsEqual;
    v11.hash = (CFSetHashCallBack)NSKeyValueAccessorHash;
    CFSetRef v6 = CFSetCreateMutable(0, 0, &v11);
    NSKeyValueCachedSetters = (uint64_t)v6;
  }
  v11.version = 0;
  v11.retain = a1;
  *(_OWORD *)&v11.release = (unint64_t)a2;
  if (a2)
  {
    CFHashCode v8 = CFHash(a2);
    CFSetRef v6 = (const __CFSet *)NSKeyValueCachedSetters;
  }
  else
  {
    CFHashCode v8 = 0;
  }
  v11.copyDescription = (CFSetCopyDescriptionCallBack)(v8 ^ (unint64_t)a1);
  id Value = (id)CFSetGetValue(v6, &v11);
  if (!Value)
  {
    id Value = objc_msgSend(a3, sel__createValueSetterWithContainerClassID_key_, a1, a2, *(_OWORD *)&v11.version, v11.release);
    CFSetAddValue((CFMutableSetRef)NSKeyValueCachedSetters, Value);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  return Value;
}

void sub_1818867F4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

id _NSKeyValueMutableArrayGetterForIsaAndKey(const void *(__cdecl *a1)(CFAllocatorRef, const void *), const void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  CFSetRef v4 = (const __CFSet *)NSKeyValueCachedMutableArrayGetters;
  if (!NSKeyValueCachedMutableArrayGetters)
  {
    long long v5 = *(_OWORD *)(MEMORY[0x1E4F1D548] + 16);
    *(_OWORD *)&v9.version = *MEMORY[0x1E4F1D548];
    *(_OWORD *)&v9.release = v5;
    v9.equal = (CFSetEqualCallBack)NSKeyValueAccessorIsEqual;
    v9.hash = (CFSetHashCallBack)NSKeyValueAccessorHash;
    CFSetRef v4 = CFSetCreateMutable(0, 0, &v9);
    NSKeyValueCachedMutableArrayGetters = (uint64_t)v4;
  }
  v9.version = 0;
  v9.retain = a1;
  *(_OWORD *)&v9.release = (unint64_t)a2;
  if (a2)
  {
    CFHashCode v6 = CFHash(a2);
    CFSetRef v4 = (const __CFSet *)NSKeyValueCachedMutableArrayGetters;
  }
  else
  {
    CFHashCode v6 = 0;
  }
  v9.copyDescription = (CFSetCopyDescriptionCallBack)(v6 ^ (unint64_t)a1);
  id Value = (id)CFSetGetValue(v4, &v9);
  if (!Value)
  {
    id Value = objc_msgSend(a1, sel__createMutableArrayValueGetterWithContainerClassID_key_, a1, a2, *(_OWORD *)&v9.version, v9.release);
    CFSetAddValue((CFMutableSetRef)NSKeyValueCachedMutableArrayGetters, Value);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  return Value;
}

void sub_18188696C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

Ivar NSKeyValueIvarForPattern(objc_class *a1, char *__format, ...)
{
  va_start(va, __format);
  v9[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = vsnprintf(0, 0, __format, va);
  MEMORY[0x1F4188790](v4);
  CFHashCode v6 = (char *)v9 - v5;
  va_copy((va_list)v9, va);
  vsnprintf((char *)v9 - v5, v7, __format, va);
  return class_getInstanceVariable(a1, v6);
}

Method NSKeyValueMethodForPattern(void *a1, char *__format, ...)
{
  va_start(va, __format);
  v10[1] = *MEMORY[0x1E4F143B8];
  va_copy((va_list)v10, va);
  uint64_t v4 = vsnprintf(0, 0, __format, va);
  size_t v5 = (int)v4 + 1;
  if ((v4 + 1) < 0x81)
  {
    if (v4 == -1)
    {
      CFHashCode v6 = 0;
    }
    else
    {
      MEMORY[0x1F4188790](v4);
      CFHashCode v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v6, v5);
    }
  }
  else
  {
    CFHashCode v6 = (char *)malloc_type_malloc((int)v4 + 1, 0x100004077774924uLL);
  }
  va_copy((va_list)v10, va);
  vsnprintf(v6, v5, __format, va);
  size_t v7 = NSResolvedSelectorForName(a1, v6);
  if (v7) {
    Method InstanceMethod = class_getInstanceMethod((Class)a1, v7);
  }
  else {
    Method InstanceMethod = 0;
  }
  if (v5 >= 0x81) {
    free(v6);
  }
  return InstanceMethod;
}

SEL NSResolvedSelectorForName(void *a1, char *str)
{
  if (a1 && object_isClass(a1) && !class_isMetaClass((Class)a1) && !sel_lookUpByName())
  {
    if (objc_opt_respondsToSelector())
    {
      if ([a1 _classShouldAlwaysRegisterSelectorNamed:str]) {
        goto LABEL_5;
      }
    }
    else
    {
      if ([a1 isProxy]) {
        goto LABEL_5;
      }
      if (_MergedGlobals_108 != -1) {
        dispatch_once(&_MergedGlobals_108, &__block_literal_global_29);
      }
      if (class_getMethodImplementation((Class)a1, sel_forwardInvocation_) != (IMP)qword_1EB1ED3E8) {
        goto LABEL_5;
      }
      if (class_getMethodImplementation((Class)a1, sel_forwardingTargetForSelector_) != (IMP)qword_1EB1ED3F0) {
        goto LABEL_5;
      }
      ClassMethod = class_getClassMethod((Class)a1, sel_resolveInstanceMethod_);
      if (method_getImplementation(ClassMethod) != (IMP)qword_1EB1ED3E0) {
        goto LABEL_5;
      }
    }
    return 0;
  }
LABEL_5:

  return sel_registerName(str);
}

BOOL _NSKVONotifyingMutatorsShouldNotifyForIsaAndKey(objc_class *a1, const void *a2)
{
  if ((char *)class_getMethodImplementation(a1, sel__isKVOA) != (char *)NSKVOIsAutonotifying) {
    return 0;
  }
  IndexedIvars = (CFSetRef *)object_getIndexedIvars(a1);
  os_unfair_recursive_lock_lock_with_options();
  BOOL v4 = CFSetContainsValue(IndexedIvars[2], a2) != 0;
  os_unfair_recursive_lock_unlock();
  return v4;
}

void AttributeContainer.init()(void *a1@<X8>)
{
  uint64_t v1 = MEMORY[0x1E4FBC870];
  *a1 = MEMORY[0x1E4FBC868];
  a1[1] = v1;
}

uint64_t IntegerFormatStyle.sign(strategy:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int16 v6 = *a1;
  int v7 = a1[1];
  int v8 = a1[2];
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  if (v7) {
    __int16 v10 = 256;
  }
  else {
    __int16 v10 = 0;
  }
  uint64_t v11 = a3 + *(int *)(a2 + 36);
  *(unsigned char *)(v11 + 76) = v8 != 0;
  *(_WORD *)(v11 + 74) = v10 | v6;
  return result;
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __JSONEncoder(uint64_t a1, uint64_t a2)
{
  return __JSONEncoder.encode(_:)(a1, a2);
}

uint64_t __JSONEncoder.encode(_:)(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(void))(*v2 + 208))() & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  type metadata accessor for JSONReference();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  *(unsigned char *)(v5 + 32) = 0;
  swift_bridgeObjectRetain();
  uint64_t v6 = swift_retain();
  MEMORY[0x185302590](v6);
  if (*(void *)((v2[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v2[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
LABEL_5:
  }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_release();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>(unint64_t a1, unint64_t a2)
{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1, a2);
}

ValueMetadata *type metadata accessor for JSONDecoder.NonConformingFloatDecodingStrategy()
{
  return &type metadata for JSONDecoder.NonConformingFloatDecodingStrategy;
}

ValueMetadata *type metadata accessor for JSONDecoder.DataDecodingStrategy()
{
  return &type metadata for JSONDecoder.DataDecodingStrategy;
}

void (*AttributeContainer.subscript.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = MEMORY[0x1E4FBC870];
  *uint64_t v3 = MEMORY[0x1E4FBC868];
  v3[1] = v4;
  v3[2] = 0;
  v3[3] = 0;
  return AttributeContainer.subscript.modify;
}

uint64_t Locale.Language.languageCode.getter@<X0>(uint64_t *a1@<X8>)
{
  long long v3 = v1[1];
  long long v14 = *v1;
  long long v15 = v3;
  long long v4 = v1[3];
  long long v16 = v1[2];
  long long v17 = v4;
  long long v5 = v1[5];
  long long v18 = v1[4];
  long long v19 = v5;
  long long v6 = v14;
  uint64_t v8 = *((void *)&v14 + 1);
  uint64_t v7 = v14;
  unint64_t object = (void *)*((void *)&v15 + 1);
  uint64_t countAndFlagsBits = v15;
  if (!*((void *)&v14 + 1))
  {
    outlined retain of Locale.Language((uint64_t *)&v14, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    uint64_t v7 = specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)&v14);
    uint64_t v8 = v11;
    outlined retain of Locale.Language((uint64_t *)&v14, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    if (v8)
    {
      Swift::String v12 = String.lowercased()();
      unint64_t object = v12._object;
      uint64_t countAndFlagsBits = v12._countAndFlagsBits;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t countAndFlagsBits = 0;
      unint64_t object = 0;
    }
  }
  *a1 = v7;
  a1[1] = v8;
  a1[2] = countAndFlagsBits;
  a1[3] = (uint64_t)object;
  return outlined copy of Locale.LanguageCode?(v6, *((uint64_t *)&v6 + 1));
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void type metadata accessor for CFErrorRef(uint64_t a1)
{
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NSFileAttributeKey(void *a1, id *a2)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v4 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  *a2 = (id)v4;
  return 1;
}

void *Locale.Components.init(locale:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t ObjectType = swift_getObjectType();
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 64);
  swift_unknownObjectRetain();
  uint64_t v7 = v6(ObjectType, v4);
  uint64_t v9 = v8;
  swift_unknownObjectRelease();
  Locale.Components.init(identifier:)(v7, v9, __src);
  v11[0] = v3;
  v11[1] = v4;
  Locale.Components.applyPreferencesOverride(_:)(v11);
  swift_unknownObjectRelease();
  return memcpy(a2, __src, 0x160uLL);
}

double Locale.init(identifier:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  if (one-time initialization token for cache != -1) {
    a1 = swift_once();
  }
  uint64_t v3 = (os_unfair_lock_s *)static LocaleCache.cache;
  MEMORY[0x1F4188790](a1);
  swift_retain_n();
  os_unfair_lock_lock(v3 + 31);
  partial apply for closure #1 in LocaleCache.fixed(_:)((uint64_t)&v3[4], &v5);
  os_unfair_lock_unlock(v3 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  double result = *(double *)&v5;
  *a2 = v5;
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance Locale(void *a1)
{
}

void LocalizedStringResource.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedEncodingContainer<LocalizedStringResource.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  long long v6 = (char *)&v118 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  uint64_t v8 = v1[1];
  uint64_t v9 = v1[2];
  uint64_t v132 = v1[3];
  uint64_t v133 = v9;
  uint64_t v134 = v1[4];
  uint64_t v135 = v7;
  uint64_t v10 = v1[5];
  uint64_t v11 = v1[6];
  uint64_t v12 = v1[7];
  uint64_t v130 = v1[8];
  *(void *)&long long v131 = v10;
  uint64_t v13 = v1[9];
  *((void *)&v126 + 1) = v1[10];
  uint64_t v127 = v12;
  uint64_t v128 = v1[11];
  uint64_t v129 = v11;
  id v124 = (id)v1[12];
  os_log_t object = (os_log_t)v1[13];
  *(void *)&long long v126 = v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys();
  uint64_t v14 = v3;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v140[0]) = 0;
  uint64_t v15 = v142;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return;
  }
  uint64_t v16 = v130;
  uint64_t v135 = v8;
  uint64_t v142 = v4;
  v140[0] = v133;
  v140[1] = v132;
  v140[2] = v134;
  LOBYTE(v139[0]) = 1;
  lazy protocol witness table accessor for type String.LocalizationValue and conformance String.LocalizationValue();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  char v141 = 2;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  uint64_t v132 = 0;
  uint64_t v17 = v127;
  uint64_t ObjectType = swift_getObjectType();
  long long v19 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 64);
  swift_unknownObjectRetain();
  uint64_t v20 = v19(ObjectType, v16);
  Locale.Components.init(identifier:)(v20, v21, v139);
  *(void *)&long long v138 = v17;
  *((void *)&v138 + 1) = v16;
  Locale.Components.applyPreferencesOverride(_:)(&v138);
  swift_unknownObjectRelease();
  memcpy(v140, v139, sizeof(v140));
  memcpy(v139, v140, sizeof(v139));
  uint64_t v22 = Locale.Components.icuIdentifier.getter();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if (one-time initialization token for cache != -1) {
    uint64_t v22 = swift_once();
  }
  uint64_t v26 = (os_unfair_lock_s *)static LocaleCache.cache;
  MEMORY[0x1F4188790](v22);
  *(&v118 - 2) = v23;
  *(&v118 - 1) = v25;
  swift_retain_n();
  os_unfair_lock_lock(v26 + 31);
  partial apply for closure #1 in LocaleCache.fixed(_:)((uint64_t)&v26[4], v139);
  os_unfair_lock_unlock(v26 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  long long v131 = v139[0];
  LOBYTE(v138) = 3;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  uint64_t v27 = v132;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  uint64_t v28 = v128;
  long long v29 = v126;
  v139[0] = v126;
  *(void *)&v139[1] = v128;
  LOBYTE(v138) = 4;
  lazy protocol witness table accessor for type URL and conformance URL();
  id v30 = (id)v29;
  swift_retain();
  swift_retain();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  swift_release();
  swift_release();

  if (object)
  {
    LOBYTE(v139[0]) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(v142 + 8))(v27, v14);
    outlined release of Locale.Components(v140);
    swift_unknownObjectRelease();
    return;
  }
  uint64_t v130 = *MEMORY[0x1E4F14000];
  id v31 = v30;
  swift_retain();
  swift_retain();
  int v32 = _foundation_swift_url_feature_enabled();
  uint64_t v123 = v14;
  if (v32)
  {
    *(void *)&v139[0] = v31;
    *((void *)&v139[0] + 1) = *((void *)&v29 + 1);
    *(void *)&v139[1] = v28;
    *(void *)&long long v126 = v31;
    id v33 = v31;
    swift_retain();
    swift_retain();
    Swift::String v34 = URL.path(percentEncoded:)(1);
    v139[0] = v34;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v34._countAndFlagsBits, (unint64_t)v34._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    os_log_t object = (os_log_t)v34._object;
    *(void *)&long long v138 = Set.init(minimumCapacity:)();
    uint64_t v35 = specialized Set._Variant.insert(_:)(&v137, 0x2FuLL);
    uint64_t v36 = v138;
    long long v37 = v139[0];
    uint64_t v38 = HIBYTE(*((void *)&v139[0] + 1)) & 0xFLL;
    if ((*((void *)&v139[0] + 1) & 0x2000000000000000) == 0) {
      uint64_t v38 = *(void *)&v139[0] & 0xFFFFFFFFFFFFLL;
    }
    id v124 = v33;
    if (v38)
    {
      long long v138 = v139[0];
      MEMORY[0x1F4188790](v35);
      *(&v118 - 2) = (uint64_t)&v138;
      *(&v118 - 1) = v36;
      swift_bridgeObjectRetain();
      long long v39 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)(&v118 - 4), v37, *((unint64_t *)&v37 + 1));
      if (v40 == 1)
      {
        long long v41 = v138;
        swift_bridgeObjectRetain();
        uint64_t v42 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v41, *((unint64_t *)&v41 + 1), v36);
        uint64_t v44 = v43;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v42 = (void (*)(char *, void))v39;
        uint64_t v44 = v40;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v27 = v132;
      if (!v44)
      {
        swift_release();
        swift_release();
        id v60 = v124;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v122 = 0;
        goto LABEL_30;
      }
      id v122 = v42;
    }
    else
    {
      swift_bridgeObjectRelease();
      id v122 = 0;
    }
    swift_release();
    swift_release();
    id v60 = v124;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_30:
    swift_release();
    swift_release();

    id v31 = (id)v126;
    goto LABEL_33;
  }
  id v45 = objc_msgSend(v31, sel__parameterString);
  if (v45)
  {
    id v46 = v45;
    id v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    uint64_t v49 = v48;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (id v50 = objc_msgSend(v31, sel_path)) != 0)
    {
      id v51 = v50;
      id v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      uint64_t v54 = v53;

      *(void *)&v139[0] = v52;
      *((void *)&v139[0] + 1) = v54;
      swift_bridgeObjectRetain();
      v55._uint64_t countAndFlagsBits = 59;
      v55._os_log_t object = (void *)0xE100000000000000;
      String.append(_:)(v55);
      uint64_t v27 = v132;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v56._uint64_t countAndFlagsBits = (uint64_t)v47;
      v56._os_log_t object = v49;
      String.append(_:)(v56);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
    }
    else
    {
      *(void *)&v139[0] = 59;
      *((void *)&v139[0] + 1) = 0xE100000000000000;
      v57._uint64_t countAndFlagsBits = (uint64_t)v47;
      v57._os_log_t object = v49;
      String.append(_:)(v57);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    id v58 = objc_msgSend(v31, sel_path);
    uint64_t v59 = v31;
    if (v58)
    {
      id v31 = v58;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
    }

    id v31 = v59;
  }
LABEL_33:
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v61 = sandbox_extension_issue_file();
  swift_release();
  if (!v61)
  {
    if (one-time initialization token for localizedStringLogger != -1) {
      swift_once();
    }
    uint64_t v63 = type metadata accessor for Logger();
    __swift_project_value_buffer(v63, (uint64_t)localizedStringLogger);
    swift_bridgeObjectRetain_n();
    swift_unknownObjectRetain_n();
    id v64 = v31;
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    id v65 = v64;
    unint64_t v66 = Logger.logObject.getter();
    LODWORD(v130) = static os_log_type_t.error.getter();
    BOOL v67 = os_log_type_enabled(v66, (os_log_type_t)v130);
    uint64_t v68 = v123;
    if (!v67)
    {
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_release_n();

      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      goto LABEL_52;
    }
    os_log_t object = v66;
    uint64_t v69 = swift_slowAlloc();
    Swift::String v70 = (void *)swift_slowAlloc();
    char v137 = v70;
    *(_DWORD *)uint64_t v69 = 136315394;
    id v71 = v65;
    uint64_t v72 = *((void *)&v126 + 1);
    swift_retain();
    uint64_t v73 = v128;
    swift_retain();
    int v74 = _foundation_swift_url_feature_enabled();
    id v124 = v70;
    id v122 = v71;
    if (v74)
    {
      *(void *)&v139[0] = v71;
      *((void *)&v139[0] + 1) = v72;
      *(void *)&v139[1] = v73;
      id v75 = v71;
      swift_retain();
      swift_retain();
      Swift::String v76 = URL.path(percentEncoded:)(1);
      v139[0] = v76;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v76._countAndFlagsBits, (unint64_t)v76._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }
      *(void *)&long long v138 = Set.init(minimumCapacity:)();
      uint64_t v77 = specialized Set._Variant.insert(_:)(&v136, 0x2FuLL);
      uint64_t v78 = v138;
      long long v79 = v139[0];
      uint64_t v80 = HIBYTE(*((void *)&v139[0] + 1)) & 0xFLL;
      if ((*((void *)&v139[0] + 1) & 0x2000000000000000) == 0) {
        uint64_t v80 = *(void *)&v139[0] & 0xFFFFFFFFFFFFLL;
      }
      id v120 = v75;
      if (v80)
      {
        uint64_t v119 = v69;
        long long v138 = v139[0];
        MEMORY[0x1F4188790](v77);
        *(&v118 - 2) = (uint64_t)&v138;
        *(&v118 - 1) = v78;
        swift_bridgeObjectRetain();
        unint64_t v121 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:), (uint64_t)(&v118 - 4), v79, *((unint64_t *)&v79 + 1));
        *(void *)&long long v126 = v81;
        if (v81 == 1)
        {
          long long v82 = v138;
          swift_bridgeObjectRetain();
          unint64_t v121 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v82, *((unint64_t *)&v82 + 1), v78);
          *(void *)&long long v126 = v83;
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v69 = v119;
        if (!(void)v126)
        {
          swift_release();
          swift_release();
          id v113 = v120;

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v121 = 0;
          *(void *)&long long v126 = 0xE000000000000000;
          goto LABEL_68;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v121 = 0;
        *(void *)&long long v126 = 0xE000000000000000;
      }
      swift_release();
      swift_release();
      id v113 = v120;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_68:
      swift_release();
      swift_release();

      uint64_t v112 = v142;
      uint64_t v106 = (uint64_t)v121;
      goto LABEL_69;
    }
    id v86 = objc_msgSend(v71, sel__parameterString);
    if (v86)
    {
      uint64_t v87 = v86;
      id v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
      char v90 = v89;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (id v91 = objc_msgSend(v71, sel_path)) != 0)
      {
        uint64_t v92 = v91;
        id v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
        Swift::String v94 = v71;
        uint64_t v95 = v69;
        uint64_t v97 = v96;

        *(void *)&v139[0] = v93;
        *((void *)&v139[0] + 1) = v97;
        swift_bridgeObjectRetain();
        v98._uint64_t countAndFlagsBits = 59;
        v98._os_log_t object = (void *)0xE100000000000000;
        String.append(_:)(v98);
        uint64_t v69 = v95;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v99._uint64_t countAndFlagsBits = (uint64_t)v88;
        v99._os_log_t object = v90;
        String.append(_:)(v99);
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
      }
      else
      {
        *(void *)&v139[0] = 59;
        *((void *)&v139[0] + 1) = 0xE100000000000000;
        v105._uint64_t countAndFlagsBits = (uint64_t)v88;
        v105._os_log_t object = v90;
        String.append(_:)(v105);
        swift_release();
        swift_release();
      }
      swift_bridgeObjectRelease();
      unint64_t v107 = *((void *)&v139[0] + 1);
      uint64_t v106 = *(void *)&v139[0];
    }
    else
    {
      id v108 = objc_msgSend(v71, sel_path);
      if (v108)
      {
        char v109 = v108;
        id v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
        *(void *)&long long v126 = v111;
        swift_release();
        swift_release();

        uint64_t v106 = (uint64_t)v110;
        goto LABEL_64;
      }
      swift_release();
      swift_release();

      uint64_t v106 = 0;
      unint64_t v107 = 0xE000000000000000;
    }
    *(void *)&long long v126 = v107;
LABEL_64:
    uint64_t v112 = v142;
LABEL_69:
    *(void *)&v139[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v106, v126, (uint64_t *)&v137);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    id v114 = v122;

    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v115 = swift_bridgeObjectRelease();
    *(_WORD *)(v69 + 12) = 1026;
    LODWORD(v139[0]) = MEMORY[0x185301870](v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_t v116 = object;
    _os_log_impl(&dword_181795000, object, (os_log_type_t)v130, "Unable to issue sandbox extension for path '%s' (errno: %{public}d)", (uint8_t *)v69, 0x12u);
    id v117 = v124;
    swift_arrayDestroy();
    MEMORY[0x185309510](v117, -1, -1);
    MEMORY[0x185309510](v69, -1, -1);

    swift_unknownObjectRelease();
    outlined release of Locale.Components(v140);
    (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v132, v123);
    return;
  }
  MEMORY[0x185301F80](v61);
  if (v62) {
    goto LABEL_50;
  }
  id v84 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithCString_encoding_, v61, 4);
  if (v84)
  {
    id v85 = v84;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v84);

LABEL_50:
    LOBYTE(v139[0]) = 5;
    uint64_t v68 = v123;
    KeyedEncodingContainer.encode(_:forKey:)();
    swift_bridgeObjectRelease();
    MEMORY[0x185309510](v61, -1, -1);
LABEL_52:
    swift_unknownObjectRelease();
    outlined release of Locale.Components(v140);
    (*(void (**)(uint64_t, uint64_t))(v142 + 8))(v27, v68);
    return;
  }
  uint64_t v100 = type metadata accessor for EncodingError();
  swift_allocError();
  uint64_t v101 = v27;
  char v103 = v102;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
  v103[3] = MEMORY[0x1E4FBB1A0];
  *char v103 = 0;
  v103[1] = 0xE000000000000000;
  uint64_t v104 = v123;
  KeyedEncodingContainer.codingPath.getter();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v100 - 8) + 104))(v103, *MEMORY[0x1E4FBBAA0], v100);
  swift_willThrow();
  MEMORY[0x185309510](v61, -1, -1);
  swift_unknownObjectRelease();
  outlined release of Locale.Components(v140);
  (*(void (**)(uint64_t, uint64_t))(v142 + 8))(v101, v104);
}

void Locale.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Locale.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  long long v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  uint64_t v8 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Locale.CodingKeys and conformance Locale.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v8 + 64);
  swift_unknownObjectRetain();
  v10(ObjectType, v8);
  swift_unknownObjectRelease();
  LOBYTE(v28) = 0;
  uint64_t v11 = v30;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v24 = v6;
    uint64_t v25 = v4;
    uint64_t v30 = v3;
    swift_bridgeObjectRelease();
    uint64_t v28 = v7;
    uint64_t v29 = v8;
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    uint64_t v12 = static LocaleCache.cache + 16;
    uint64_t v13 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
    swift_retain_n();
    os_unfair_lock_lock(v13);
    closure #1 in LocaleCache.autoupdatingCurrent.getter(v12, &v26);
    os_unfair_lock_unlock(v13);
    swift_release_n();
    uint64_t v14 = v26;
    uint64_t v15 = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
    uint64_t v26 = v14;
    uint64_t v27 = v15;
    char v16 = specialized static Locale.== infix(_:_:)((uint64_t)&v28, (uint64_t)&v26);
    swift_release();
    if (v16)
    {
      LOBYTE(v28) = 2;
      LOBYTE(v26) = 1;
      lazy protocol witness table accessor for type Locale.Current and conformance Locale.Current();
      uint64_t v17 = v30;
      long long v18 = v24;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v18, v17);
    }
    else
    {
      uint64_t v28 = v7;
      uint64_t v29 = v8;
      uint64_t v26 = static LocaleCache.cache;
      uint64_t v26 = LocaleCache.current.getter();
      uint64_t v27 = v19;
      char v20 = specialized static Locale.== infix(_:_:)((uint64_t)&v28, (uint64_t)&v26);
      swift_unknownObjectRelease();
      uint64_t v21 = (void (**)(char *, uint64_t))(v25 + 8);
      LOBYTE(v28) = (v20 & 1) != 0;
      LOBYTE(v26) = 1;
      lazy protocol witness table accessor for type Locale.Current and conformance Locale.Current();
      uint64_t v22 = v30;
      uint64_t v23 = v24;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*v21)(v23, v22);
    }
  }
}

void protocol witness for Decodable.init(from:) in conformance Locale(void *a1@<X0>, uint64_t *a2@<X8>)
{
}

void Locale.init(from:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Locale.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Locale.CodingKeys and conformance Locale.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v25 = 1;
    lazy protocol witness table accessor for type Locale.Current and conformance Locale.Current();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    switch((char)v24)
    {
      case 1:
        if (one-time initialization token for cache != -1) {
          swift_once();
        }
        *(void *)&long long v24 = static LocaleCache.cache;
        uint64_t v14 = LocaleCache.current.getter();
        uint64_t v15 = v16;
        break;
      case 2:
        if (one-time initialization token for cache != -1) {
          swift_once();
        }
        uint64_t v17 = static LocaleCache.cache + 16;
        long long v18 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
        swift_retain_n();
        os_unfair_lock_lock(v18);
        closure #1 in LocaleCache.autoupdatingCurrent.getter(v17, (uint64_t *)&v24);
        os_unfair_lock_unlock(v18);
        swift_release_n();
        uint64_t v14 = v24;
        uint64_t v15 = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
        break;
      default:
        LOBYTE(v24) = 0;
        uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
        uint64_t v11 = v9;
        if (one-time initialization token for cache != -1)
        {
          uint64_t v19 = v10;
          uint64_t v9 = swift_once();
          uint64_t v10 = v19;
        }
        uint64_t v22 = v10;
        uint64_t v23 = &v20;
        uint64_t v12 = (os_unfair_lock_s *)static LocaleCache.cache;
        MEMORY[0x1F4188790](v9);
        *(&v20 - 2) = v11;
        *(&v20 - 1) = v13;
        uint64_t v21 = v12 + 4;
        swift_retain_n();
        os_unfair_lock_lock(v12 + 31);
        closure #1 in LocaleCache.fixed(_:)partial apply((uint64_t)v21, &v24);
        os_unfair_lock_unlock(v12 + 31);
        swift_bridgeObjectRelease();
        swift_release_n();
        uint64_t v15 = *((void *)&v24 + 1);
        uint64_t v14 = v24;
        break;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v14;
    a2[1] = v15;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type Locale.CodingKeys and conformance Locale.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys);
  }
  return result;
}

uint64_t closure #1 in LocaleCache.fixed(_:)partial apply@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return partial apply for closure #1 in LocaleCache.fixed(_:)(a1, a2);
}

uint64_t partial apply for closure #1 in LocaleCache.fixed(_:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return closure #1 in LocaleCache.fixed(_:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t closure #1 in LocaleCache.fixed(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v10 = *(void *)(a1 + 32);
  if (*(void *)(v10 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v12)
    {
      long long v54 = *(_OWORD *)(*(void *)(v10 + 56) + 16 * v11);
      swift_unknownObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
      long long v14 = v54;
LABEL_52:
      *a4 = v14;
      return result;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v53 = a4;
  uint64_t v58 = v4;
  type metadata accessor for _LocaleICU();
  uint64_t v55 = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating(&lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU, (void (*)(uint64_t))type metadata accessor for _LocaleICU);
  _s10Foundation17LocalePreferencesVSgWOi0_(v57);
  outlined init with take of LocalePreferences?((uint64_t)v57, (uint64_t)v56);
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v15 = specialized _LocaleICU.init(identifier:prefs:)(a2, a3, (uint64_t)v56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v56[0] = *(void *)(a1 + 32);
  uint64_t v17 = v56[0];
  *(void *)(a1 + 32) = 0x8000000000000000;
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v20 = *(void *)(v17 + 16);
  BOOL v21 = (v18 & 1) == 0;
  uint64_t v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v5 = v18;
  if (*(void *)(v17 + 24) >= v22)
  {
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v23 = v17;
      uint64_t v26 = v55;
      if ((v18 & 1) == 0) {
        goto LABEL_49;
      }
LABEL_12:
      uint64_t v27 = (void *)(*(void *)(v23 + 56) + 16 * v19);
      swift_unknownObjectRelease();
      *uint64_t v27 = v15;
      v27[1] = v26;
LABEL_51:
      *(void *)(a1 + 32) = v23;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)&long long v14 = v15;
      *((void *)&v14 + 1) = v26;
      a4 = v53;
      goto LABEL_52;
    }
LABEL_14:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, _LocaleProtocol>);
    uint64_t v28 = static _DictionaryStorage.copy(original:)();
    uint64_t v23 = v28;
    if (*(void *)(v17 + 16))
    {
      uint64_t v29 = (void *)(v28 + 64);
      unint64_t v30 = (unint64_t)((1 << *(unsigned char *)(v23 + 32)) + 63) >> 6;
      __src = (void *)(v17 + 64);
      if (v23 != v17 || (unint64_t)v29 >= v17 + 64 + 8 * v30) {
        memmove(v29, __src, 8 * v30);
      }
      int64_t v31 = 0;
      *(void *)(v23 + 16) = *(void *)(v17 + 16);
      uint64_t v32 = 1 << *(unsigned char *)(v17 + 32);
      uint64_t v33 = -1;
      if (v32 < 64) {
        uint64_t v33 = ~(-1 << v32);
      }
      unint64_t v34 = v33 & *(void *)(v17 + 64);
      int64_t v52 = (unint64_t)(v32 + 63) >> 6;
      while (1)
      {
        if (v34)
        {
          unint64_t v35 = __clz(__rbit64(v34));
          v34 &= v34 - 1;
          unint64_t v36 = v35 | (v31 << 6);
        }
        else
        {
          int64_t v43 = v31 + 1;
          if (__OFADD__(v31, 1)) {
            goto LABEL_54;
          }
          if (v43 >= v52) {
            break;
          }
          unint64_t v44 = *((void *)__src + v43);
          ++v31;
          if (!v44)
          {
            int64_t v31 = v43 + 1;
            if (v43 + 1 >= v52) {
              break;
            }
            unint64_t v44 = *((void *)__src + v31);
            if (!v44)
            {
              int64_t v31 = v43 + 2;
              if (v43 + 2 >= v52) {
                break;
              }
              unint64_t v44 = *((void *)__src + v31);
              if (!v44)
              {
                int64_t v31 = v43 + 3;
                if (v43 + 3 >= v52) {
                  break;
                }
                unint64_t v44 = *((void *)__src + v31);
                if (!v44)
                {
                  int64_t v31 = v43 + 4;
                  if (v43 + 4 >= v52) {
                    break;
                  }
                  unint64_t v44 = *((void *)__src + v31);
                  if (!v44)
                  {
                    int64_t v31 = v43 + 5;
                    if (v43 + 5 >= v52) {
                      break;
                    }
                    unint64_t v44 = *((void *)__src + v31);
                    if (!v44)
                    {
                      int64_t v31 = v43 + 6;
                      if (v43 + 6 >= v52) {
                        break;
                      }
                      unint64_t v44 = *((void *)__src + v31);
                      if (!v44)
                      {
                        int64_t v31 = v43 + 7;
                        if (v43 + 7 >= v52) {
                          break;
                        }
                        unint64_t v44 = *((void *)__src + v31);
                        if (!v44)
                        {
                          int64_t v45 = v43 + 8;
                          if (v45 >= v52) {
                            break;
                          }
                          unint64_t v44 = *((void *)__src + v45);
                          if (!v44)
                          {
                            while (1)
                            {
                              int64_t v31 = v45 + 1;
                              if (__OFADD__(v45, 1)) {
                                goto LABEL_55;
                              }
                              if (v31 >= v52) {
                                goto LABEL_48;
                              }
                              unint64_t v44 = *((void *)__src + v31);
                              ++v45;
                              if (v44) {
                                goto LABEL_47;
                              }
                            }
                          }
                          int64_t v31 = v45;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_47:
          unint64_t v34 = (v44 - 1) & v44;
          unint64_t v36 = __clz(__rbit64(v44)) + (v31 << 6);
        }
        uint64_t v37 = 16 * v36;
        uint64_t v38 = (uint64_t *)(*(void *)(v17 + 48) + v37);
        uint64_t v40 = *v38;
        uint64_t v39 = v38[1];
        long long v41 = *(_OWORD *)(*(void *)(v17 + 56) + v37);
        uint64_t v42 = (void *)(*(void *)(v23 + 48) + v37);
        *uint64_t v42 = v40;
        v42[1] = v39;
        *(_OWORD *)(*(void *)(v23 + 56) + v37) = v41;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
      }
    }
LABEL_48:
    swift_bridgeObjectRelease();
    uint64_t v26 = v55;
    if ((v5 & 1) == 0) {
      goto LABEL_49;
    }
    goto LABEL_12;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, isUniquelyReferenced_nonNull_native);
  uint64_t v23 = v56[0];
  unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v5 & 1) != (v25 & 1)) {
    goto LABEL_56;
  }
  unint64_t v19 = v24;
  uint64_t v26 = v55;
  if (v5) {
    goto LABEL_12;
  }
LABEL_49:
  *(void *)(v23 + 8 * (v19 >> 6) + 64) |= 1 << v19;
  id v46 = (uint64_t *)(*(void *)(v23 + 48) + 16 * v19);
  uint64_t *v46 = a2;
  v46[1] = a3;
  id v47 = (void *)(*(void *)(v23 + 56) + 16 * v19);
  *id v47 = v15;
  v47[1] = v26;
  uint64_t v48 = *(void *)(v23 + 16);
  BOOL v49 = __OFADD__(v48, 1);
  uint64_t v50 = v48 + 1;
  if (!v49)
  {
    *(void *)(v23 + 16) = v50;
    swift_bridgeObjectRetain();
    goto LABEL_51;
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for Encoder.container<A>(keyedBy:) in conformance __PlistEncoderBPlist()
{
  return __PlistEncoderBPlist.container<A>(keyedBy:)();
}

uint64_t protocol witness for _LocaleProtocol.forceMeasurementSystem.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 448))(ObjectType, v1);

  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.forceFirstWeekday(_:) in conformance _LocaleAutoupdating(char *a1)
{
  char v1 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v7 = static LocaleCache.cache;
  LocaleCache.current.getter();
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  char v6 = v1;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 432))(&v6, ObjectType, v3);

  return swift_unknownObjectRelease();
}

void *Locale.Components.applyPreferencesOverride(_:)(void *result)
{
  void (*v4)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v5;
  void (*v6)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v7;
  long long v8;
  uint64_t v9;
  void (*v10)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;

  uint64_t v2 = result[1];
  if (*(unsigned char *)(v1 + 201) == 4)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v4 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 424);
    swift_unknownObjectRetain();
    v4(&v11, ObjectType, v2);
    uint64_t result = (void *)swift_unknownObjectRelease();
    if (v11 != 4) {
      *(unsigned char *)(v1 + 201) = v11;
    }
  }
  if (!*(void *)(v1 + 216))
  {
    char v5 = swift_getObjectType();
    char v6 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 448);
    swift_unknownObjectRetain();
    v6(&v11, v5, v2);
    uint64_t result = (void *)swift_unknownObjectRelease();
    uint64_t v7 = v12;
    if (v12)
    {
      uint64_t v8 = v13;
      *(void *)(v1 + 208) = v11;
      *(void *)(v1 + 216) = v7;
      *(_OWORD *)(v1 + 224) = v8;
    }
  }
  if (*(unsigned char *)(v1 + 200) == 7)
  {
    uint64_t v9 = swift_getObjectType();
    uint64_t v10 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 200);
    swift_unknownObjectRetain();
    v10(&v14, v9, v2);
    swift_unknownObjectRelease();
    uint64_t result = (*(void *(**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t))(v2 + 432))(&v11, &v14, v9, v2);
    if (v11 != 7) {
      *(unsigned char *)(v1 + 200) = v11;
    }
  }
  return result;
}

uint64_t _LocaleICU.forceFirstWeekday(_:)@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = *a1;
  outlined init with take of LocalePreferences?(v2 + 32, (uint64_t)v8);
  outlined init with take of LocalePreferences?((uint64_t)v8, (uint64_t)v9);
  uint64_t result = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)v9);
  if (result != 1
    && (uint64_t v6 = v10) != 0
    && *(void *)(v10 + 16)
    && (uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4), (v7 & 1) != 0))
  {
    uint64_t result = *(void *)(*(void *)(v6 + 56) + 8 * result);
    if (result < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (result <= 0x7FFFFFFF)
    {
      return Locale.Weekday.init(_:)(result, a2);
    }
    __break(1u);
  }
  else
  {
    *a2 = 7;
  }
  return result;
}

uint64_t _LocaleICU.forceMeasurementSystem.getter@<X0>(uint64_t a1@<X8>)
{
  outlined init with take of LocalePreferences?(v1 + 32, (uint64_t)v9);
  outlined init with take of LocalePreferences?((uint64_t)v9, (uint64_t)v10);
  uint64_t result = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)v10);
  if (result == 1) {
    goto LABEL_11;
  }
  if (v10[0] != 2)
  {
    if ((v10[0] & 1) == 0)
    {
      outlined init with take of LocalePreferences?((uint64_t)v9, (uint64_t)v8);
      outlined retain of LocalePreferences(v8);
      if (one-time initialization token for us != -1) {
        swift_once();
      }
      uint64_t v4 = &static Locale.MeasurementSystem.us;
      goto LABEL_19;
    }
    if (v11 != 2)
    {
      if (v11)
      {
        outlined init with take of LocalePreferences?((uint64_t)v9, (uint64_t)v8);
        outlined retain of LocalePreferences(v8);
        if (one-time initialization token for uk != -1) {
          swift_once();
        }
        uint64_t v4 = &static Locale.MeasurementSystem.uk;
        goto LABEL_19;
      }
      goto LABEL_13;
    }
LABEL_11:
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return result;
  }
  if (v11 == 2 || (v11 & 1) != 0) {
    goto LABEL_11;
  }
LABEL_13:
  outlined init with take of LocalePreferences?((uint64_t)v9, (uint64_t)v8);
  outlined retain of LocalePreferences(v8);
  if (one-time initialization token for metric != -1) {
    swift_once();
  }
  uint64_t v4 = &static Locale.MeasurementSystem.metric;
LABEL_19:
  uint64_t v5 = v4[1];
  uint64_t v6 = v4[2];
  uint64_t v7 = v4[3];
  *(void *)a1 = *v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return outlined retain of LocalePreferences?((uint64_t)v9, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
}

uint64_t _LocaleICU.forceHourCycle.getter@<X0>(char *a1@<X8>)
{
  outlined init with take of LocalePreferences?(v1 + 32, (uint64_t)v5);
  outlined init with take of LocalePreferences?((uint64_t)v5, (uint64_t)v6);
  uint64_t result = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)v6);
  if (result == 1)
  {
    char v4 = 4;
  }
  else if (v6[138])
  {
    char v4 = 2;
  }
  else if (v6[139])
  {
    char v4 = 1;
  }
  else
  {
    char v4 = 4;
  }
  *a1 = v4;
  return result;
}

uint64_t _LocaleICU.__deallocating_deinit()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  closure #1 in _LocaleICU.deinit();
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v0 + 32, (uint64_t)v3);
  outlined retain of LocalePreferences?((uint64_t)v3, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_release();
  return swift_deallocClassInstance();
}

void closure #1 in _LocaleICU.deinit()
{
}

Swift::Void __swiftcall _LocaleICU.State.NumberFormattersBox.cleanup()()
{
  uint64_t v1 = *(void *)v0 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(*(void *)v0 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  uint64_t v4 = v3 & *(void *)(*(void *)v0 + 64);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  while (1)
  {
    if (v4)
    {
      v4 &= v4 - 1;
      goto LABEL_5;
    }
    int64_t v7 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v7 >= v5) {
      goto LABEL_23;
    }
    uint64_t v8 = *(void *)(v1 + 8 * v7);
    ++v6;
    if (!v8)
    {
      int64_t v6 = v7 + 1;
      if (v7 + 1 >= v5) {
        goto LABEL_23;
      }
      uint64_t v8 = *(void *)(v1 + 8 * v6);
      if (!v8)
      {
        int64_t v6 = v7 + 2;
        if (v7 + 2 >= v5) {
          goto LABEL_23;
        }
        uint64_t v8 = *(void *)(v1 + 8 * v6);
        if (!v8)
        {
          int64_t v6 = v7 + 3;
          if (v7 + 3 >= v5) {
            goto LABEL_23;
          }
          uint64_t v8 = *(void *)(v1 + 8 * v6);
          if (!v8) {
            break;
          }
        }
      }
    }
LABEL_22:
    uint64_t v4 = (v8 - 1) & v8;
LABEL_5:
    unum_close();
  }
  int64_t v9 = v7 + 4;
  if (v9 >= v5)
  {
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    *(void *)uint64_t v0 = MEMORY[0x1E4FBC868];
    return;
  }
  uint64_t v8 = *(void *)(v1 + 8 * v9);
  if (v8)
  {
    int64_t v6 = v9;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v6 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      break;
    }
    if (v6 >= v5) {
      goto LABEL_23;
    }
    uint64_t v8 = *(void *)(v1 + 8 * v6);
    ++v9;
    if (v8) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
}

unint64_t _LocaleICU.pref(for:)@<X0>(unint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X8>)
{
  outlined init with take of LocalePreferences?(v3 + 32, (uint64_t)v114);
  outlined init with take of LocalePreferences?((uint64_t)v114, (uint64_t)v115);
  unint64_t result = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)v115);
  if (result == 1) {
    goto LABEL_7;
  }
  unint64_t v9 = 0xD000000000000017;
  unint64_t v10 = 0xD000000000000010;
  if (a1 == 0xD000000000000010 && a2 == 0x80000001823B04C0
    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    int v11 = v115[0];
    goto LABEL_6;
  }
  uint64_t v12 = 0xD000000000000015;
  if (a1 == 0xD000000000000015 && a2 == 0x80000001823B04E0
    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    if (v123 == 2) {
      goto LABEL_7;
    }
    BOOL v13 = (v123 & 1) == 0;
    uint64_t v14 = 0x736568636E49;
    if ((v123 & 1) == 0) {
      uint64_t v14 = 0x74656D69746E6543;
    }
    unint64_t v15 = 0xE600000000000000;
    unint64_t v16 = 0xEB00000000737265;
LABEL_16:
    *(void *)(a3 + 24) = MEMORY[0x1E4FBB1A0];
    if (v13) {
      unint64_t v15 = v16;
    }
    *(void *)a3 = v14;
    *(void *)(a3 + 8) = v15;
    return result;
  }
  unint64_t result = 0xD000000000000014;
  if (a1 == 0xD000000000000014 && a2 == 0x80000001823B0500
    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    if (v124 == 2) {
      goto LABEL_7;
    }
    BOOL v13 = (v124 & 1) == 0;
    uint64_t v14 = 0x737569736C6543;
    if ((v124 & 1) == 0) {
      uint64_t v14 = 0x65686E6572686146;
    }
    unint64_t v15 = 0xE700000000000000;
    unint64_t v16 = 0xEA00000000007469;
    goto LABEL_16;
  }
  unint64_t result = 0xD000000000000011;
  if (a1 != 0xD000000000000011 || a2 != 0x80000001823B0520)
  {
    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) == 0)
    {
      if (a1 != 0xD000000000000017 || a2 != 0x80000001823B0540)
      {
        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
        {
          if (a1 == 0xD000000000000017 && a2 == 0x80000001823B0560
            || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            unint64_t result = (unint64_t)v118;
            if (!v118) {
              goto LABEL_7;
            }
            id v113 = v118;
            goto LABEL_204;
          }
          if (a1 == 0xD000000000000017 && a2 == 0x80000001823B0580
            || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            int v11 = v125;
LABEL_6:
            if (v11 != 2)
            {
              *(void *)(a3 + 24) = MEMORY[0x1E4FBB390];
              *(unsigned char *)a3 = v11 & 1;
              return result;
            }
            goto LABEL_7;
          }
LABEL_214:
          unint64_t v10 = a1;
          uint64_t v4 = 0xD000000000000017;
          if (a1 != v9 || a2 != 0x80000001823B05A0)
          {
            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              goto LABEL_222;
            }
          }
          int v11 = v126;
          goto LABEL_6;
        }
      }
      uint64_t v56 = v117;
      if (!v117) {
        goto LABEL_7;
      }
      uint64_t v106 = v117 + 64;
      uint64_t v12 = 1 << *(unsigned char *)(v117 + 32);
      if (v12 < 64) {
        uint64_t v57 = ~(-1 << v12);
      }
      else {
        uint64_t v57 = -1;
      }
      unint64_t v58 = v57 & *(void *)(v117 + 64);
      outlined retain of LocalePreferences?((uint64_t)v114, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      int64_t v108 = (unint64_t)(v12 + 63) >> 6;
      swift_bridgeObjectRetain();
      a2 = 0;
      unint64_t v9 = MEMORY[0x1E4FBC868];
      uint64_t v110 = v56;
LABEL_122:
      if (v58)
      {
        unint64_t v59 = __clz(__rbit64(v58));
        v58 &= v58 - 1;
        unint64_t v60 = v59 | (a2 << 6);
      }
      else
      {
        int64_t v61 = a2 + 1;
        if (__OFADD__(a2, 1)) {
          goto LABEL_221;
        }
        if (v61 >= v108) {
          goto LABEL_198;
        }
        unint64_t v62 = *(void *)(v106 + 8 * v61);
        ++a2;
        if (!v62)
        {
          a2 = v61 + 1;
          if (v61 + 1 >= v108) {
            goto LABEL_198;
          }
          unint64_t v62 = *(void *)(v106 + 8 * a2);
          if (!v62)
          {
            a2 = v61 + 2;
            if (v61 + 2 >= v108) {
              goto LABEL_198;
            }
            unint64_t v62 = *(void *)(v106 + 8 * a2);
            if (!v62)
            {
              int64_t v63 = v61 + 3;
              if (v63 >= v108) {
                goto LABEL_198;
              }
              unint64_t v62 = *(void *)(v106 + 8 * v63);
              if (!v62)
              {
                while (1)
                {
                  a2 = v63 + 1;
                  if (__OFADD__(v63, 1))
                  {
                    __break(1u);
                    goto LABEL_229;
                  }
                  if (a2 >= v108) {
                    break;
                  }
                  unint64_t v62 = *(void *)(v106 + 8 * a2);
                  ++v63;
                  if (v62) {
                    goto LABEL_137;
                  }
                }
LABEL_198:
                swift_release();
                *(void *)(a3 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Int]);
                unint64_t result = outlined retain of LocalePreferences?((uint64_t)v114, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                *(void *)a3 = v9;
                return result;
              }
              a2 = v63;
            }
          }
        }
LABEL_137:
        unint64_t v58 = (v62 - 1) & v62;
        unint64_t v60 = __clz(__rbit64(v62)) + (a2 << 6);
      }
      uint64_t v64 = *(unsigned __int8 *)(*(void *)(v56 + 48) + v60);
      id v112 = *(id *)(*(void *)(v56 + 56) + 8 * v60);
      uint64_t v4 = 0xE90000000000006ELL;
      uint64_t v65 = 0x6169726F67657267;
      switch(v64)
      {
        case 1:
          uint64_t v4 = 0xE800000000000000;
          uint64_t v65 = 0x7473696864647562;
          break;
        case 2:
          uint64_t v4 = 0xE700000000000000;
          uint64_t v65 = 0x6573656E696863;
          break;
        case 3:
          uint64_t v4 = 0xE600000000000000;
          uint64_t v65 = 0x636974706F63;
          break;
        case 4:
          uint64_t v4 = 0xE800000000000000;
          uint64_t v65 = 0x6369706F69687465;
          break;
        case 5:
          uint64_t v65 = 0xD000000000000013;
          uint64_t v4 = 0x80000001823ADD30;
          break;
        case 6:
          uint64_t v4 = 0xE600000000000000;
          uint64_t v65 = 0x776572626568;
          break;
        case 7:
          uint64_t v4 = 0xE700000000000000;
          uint64_t v65 = 0x313036386F7369;
          break;
        case 8:
          uint64_t v4 = 0xE600000000000000;
          uint64_t v65 = 0x6E6169646E69;
          break;
        case 9:
          uint64_t v4 = 0xE700000000000000;
          uint64_t v65 = 0x63696D616C7369;
          break;
        case 10:
          uint64_t v65 = 0x2D63696D616C7369;
          uint64_t v4 = 0xED00006C69766963;
          break;
        case 11:
          uint64_t v4 = 0xE800000000000000;
          uint64_t v65 = 0x6573656E6170616ALL;
          break;
        case 12:
          uint64_t v4 = 0xE700000000000000;
          uint64_t v65 = 0x6E616973726570;
          break;
        case 13:
          uint64_t v4 = 0xE300000000000000;
          uint64_t v65 = 6516594;
          break;
        case 14:
          uint64_t v65 = 0x2D63696D616C7369;
          uint64_t v4 = 0xEC000000616C6274;
          break;
        case 15:
          uint64_t v4 = 0x80000001823ADD50;
          uint64_t v65 = 0xD000000000000010;
          break;
        default:
          break;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v12 = v9;
      unint64_t v67 = specialized __RawDictionaryStorage.find<A>(_:)(v65, v4);
      uint64_t v69 = *(void *)(v9 + 16);
      BOOL v70 = (v68 & 1) == 0;
      BOOL v30 = __OFADD__(v69, v70);
      uint64_t v71 = v69 + v70;
      if (v30)
      {
        __break(1u);
LABEL_219:
        __break(1u);
        goto LABEL_220;
      }
      char v72 = v68;
      if (*(void *)(v9 + 24) < v71)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v71, isUniquelyReferenced_nonNull_native);
        uint64_t v12 = v9;
        unint64_t v67 = specialized __RawDictionaryStorage.find<A>(_:)(v65, v4);
        if ((v72 & 1) != (v73 & 1)) {
          goto LABEL_245;
        }
LABEL_160:
        if ((v72 & 1) == 0) {
          goto LABEL_161;
        }
LABEL_120:
        *(void *)(*(void *)(v12 + 56) + 8 * v67) = v112;
        goto LABEL_121;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v12 = v9;
        goto LABEL_160;
      }
      unint64_t v98 = v67;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
      uint64_t v77 = static _DictionaryStorage.copy(original:)();
      uint64_t v12 = v77;
      if (!*(void *)(v9 + 16)) {
        goto LABEL_196;
      }
      uint64_t v78 = (char *)(v77 + 64);
      __srca = (char *)(v9 + 64);
      unint64_t v79 = (unint64_t)((1 << *(unsigned char *)(v12 + 32)) + 63) >> 6;
      if (v12 != v9 || v78 >= &__srca[8 * v79]) {
        memmove(v78, __srca, 8 * v79);
      }
      int64_t v104 = 0;
      *(void *)(v12 + 16) = *(void *)(v9 + 16);
      uint64_t v80 = 1 << *(unsigned char *)(v9 + 32);
      if (v80 < 64) {
        uint64_t v81 = ~(-1 << v80);
      }
      else {
        uint64_t v81 = -1;
      }
      unint64_t v82 = v81 & *(void *)(v9 + 64);
      int64_t v100 = (unint64_t)(v80 + 63) >> 6;
      while (1)
      {
        if (v82)
        {
          unint64_t v83 = __clz(__rbit64(v82));
          v82 &= v82 - 1;
          unint64_t v84 = v83 | (v104 << 6);
        }
        else
        {
          int64_t v92 = v104 + 1;
          if (__OFADD__(v104, 1))
          {
            __break(1u);
            goto LABEL_243;
          }
          if (v92 >= v100) {
            goto LABEL_196;
          }
          unint64_t v93 = *(void *)&__srca[8 * v92];
          int64_t v94 = v104 + 1;
          if (!v93)
          {
            int64_t v94 = v104 + 2;
            if (v104 + 2 >= v100) {
              goto LABEL_196;
            }
            unint64_t v93 = *(void *)&__srca[8 * v94];
            if (!v93)
            {
              int64_t v94 = v104 + 3;
              if (v104 + 3 >= v100) {
                goto LABEL_196;
              }
              unint64_t v93 = *(void *)&__srca[8 * v94];
              if (!v93)
              {
                int64_t v94 = v104 + 4;
                if (v104 + 4 >= v100) {
                  goto LABEL_196;
                }
                unint64_t v93 = *(void *)&__srca[8 * v94];
                if (!v93)
                {
                  int64_t v94 = v104 + 5;
                  if (v104 + 5 >= v100) {
                    goto LABEL_196;
                  }
                  unint64_t v93 = *(void *)&__srca[8 * v94];
                  if (!v93)
                  {
                    int64_t v94 = v104 + 6;
                    if (v104 + 6 >= v100) {
                      goto LABEL_196;
                    }
                    unint64_t v93 = *(void *)&__srca[8 * v94];
                    if (!v93)
                    {
                      int64_t v94 = v104 + 7;
                      if (v104 + 7 >= v100) {
                        goto LABEL_196;
                      }
                      unint64_t v93 = *(void *)&__srca[8 * v94];
                      if (!v93)
                      {
                        int64_t v95 = v104 + 8;
                        if (v104 + 8 >= v100) {
                          goto LABEL_196;
                        }
                        unint64_t v93 = *(void *)&__srca[8 * v95];
                        if (!v93)
                        {
                          while (1)
                          {
                            int64_t v94 = v95 + 1;
                            if (__OFADD__(v95, 1)) {
                              goto LABEL_244;
                            }
                            if (v94 >= v100) {
                              break;
                            }
                            unint64_t v93 = *(void *)&__srca[8 * v94];
                            ++v95;
                            if (v93) {
                              goto LABEL_195;
                            }
                          }
LABEL_196:
                          swift_bridgeObjectRelease();
                          unint64_t v67 = v98;
                          if (v72) {
                            goto LABEL_120;
                          }
LABEL_161:
                          *(void *)(v12 + 8 * (v67 >> 6) + 64) |= 1 << v67;
                          int v74 = (uint64_t *)(*(void *)(v12 + 48) + 16 * v67);
                          *int v74 = v65;
                          v74[1] = v4;
                          *(void *)(*(void *)(v12 + 56) + 8 * v67) = v112;
                          uint64_t v75 = *(void *)(v12 + 16);
                          BOOL v30 = __OFADD__(v75, 1);
                          uint64_t v76 = v75 + 1;
                          if (v30) {
                            goto LABEL_219;
                          }
                          *(void *)(v12 + 16) = v76;
                          swift_bridgeObjectRetain();
LABEL_121:
                          uint64_t v56 = v110;
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          unint64_t v9 = v12;
                          goto LABEL_122;
                        }
                        int64_t v94 = v104 + 8;
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_195:
          unint64_t v82 = (v93 - 1) & v93;
          int64_t v104 = v94;
          unint64_t v84 = __clz(__rbit64(v93)) + (v94 << 6);
        }
        uint64_t v85 = 16 * v84;
        id v86 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v84);
        uint64_t v88 = *v86;
        uint64_t v87 = v86[1];
        uint64_t v89 = 8 * v84;
        uint64_t v90 = *(void *)(*(void *)(v9 + 56) + v89);
        id v91 = (void *)(*(void *)(v12 + 48) + v85);
        *id v91 = v88;
        v91[1] = v87;
        *(void *)(*(void *)(v12 + 56) + v89) = v90;
        swift_bridgeObjectRetain();
      }
    }
  }
  uint64_t v17 = v116;
  if (!v116) {
    goto LABEL_7;
  }
  uint64_t v105 = v116 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(v116 + 32);
  if (v12 < 64) {
    uint64_t v18 = ~(-1 << v12);
  }
  else {
    uint64_t v18 = -1;
  }
  a1 = v18 & *(void *)(v116 + 64);
  outlined retain of LocalePreferences?((uint64_t)v114, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  int64_t v107 = (unint64_t)(v12 + 63) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  a2 = 0;
  unint64_t v9 = MEMORY[0x1E4FBC868];
  uint64_t v109 = v17;
  while (1)
  {
    if (a1)
    {
      unint64_t v19 = __clz(__rbit64(a1));
      a1 &= a1 - 1;
      unint64_t v20 = v19 | (a2 << 6);
    }
    else
    {
      int64_t v21 = a2 + 1;
      if (__OFADD__(a2, 1)) {
        goto LABEL_213;
      }
      if (v21 >= v107) {
        goto LABEL_198;
      }
      unint64_t v22 = *(void *)(v105 + 8 * v21);
      ++a2;
      if (!v22)
      {
        a2 = v21 + 1;
        if (v21 + 1 >= v107) {
          goto LABEL_198;
        }
        unint64_t v22 = *(void *)(v105 + 8 * a2);
        if (!v22)
        {
          a2 = v21 + 2;
          if (v21 + 2 >= v107) {
            goto LABEL_198;
          }
          unint64_t v22 = *(void *)(v105 + 8 * a2);
          if (!v22)
          {
            int64_t v23 = v21 + 3;
            if (v23 >= v107) {
              goto LABEL_198;
            }
            unint64_t v22 = *(void *)(v105 + 8 * v23);
            if (!v22)
            {
              while (1)
              {
                a2 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  break;
                }
                if (a2 >= v107) {
                  goto LABEL_198;
                }
                unint64_t v22 = *(void *)(v105 + 8 * a2);
                ++v23;
                if (v22) {
                  goto LABEL_51;
                }
              }
LABEL_220:
              __break(1u);
LABEL_221:
              __break(1u);
LABEL_222:
              unint64_t v58 = v4 + 2;
              if (v10 == v4 + 2 && a2 == 0x80000001823B05C0
                || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                unint64_t result = v119;
                goto LABEL_226;
              }
LABEL_229:
              if (v10 == v58 && a2 == 0x80000001823B05E0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                unint64_t result = v120;
                goto LABEL_226;
              }
              if (v10 == v4 + 4 && a2 == 0x80000001823B0600
                || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                unint64_t result = v121;
                goto LABEL_226;
              }
LABEL_238:
              if (v10 != v12 || a2 != 0x80000001823B0620)
              {
                unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                if ((result & 1) == 0) {
                  goto LABEL_7;
                }
              }
              unint64_t result = v122;
LABEL_226:
              id v113 = (id)result;
              if (!result)
              {
LABEL_7:
                *(_OWORD *)a3 = 0u;
                *(_OWORD *)(a3 + 16) = 0u;
                return result;
              }
LABEL_204:
              type metadata accessor for CFDictionaryRef(0);
              *(void *)(a3 + 24) = v96;
              *(void *)a3 = v113;
              return (unint64_t)v113;
            }
            a2 = v23;
          }
        }
      }
LABEL_51:
      a1 = (v22 - 1) & v22;
      unint64_t v20 = __clz(__rbit64(v22)) + (a2 << 6);
    }
    uint64_t v24 = *(unsigned __int8 *)(*(void *)(v17 + 48) + v20);
    id v111 = *(id *)(*(void *)(v17 + 56) + 8 * v20);
    uint64_t v4 = 0xE90000000000006ELL;
    uint64_t v25 = 0x6169726F67657267;
    switch(v24)
    {
      case 1:
        uint64_t v4 = 0xE800000000000000;
        uint64_t v25 = 0x7473696864647562;
        break;
      case 2:
        uint64_t v4 = 0xE700000000000000;
        uint64_t v25 = 0x6573656E696863;
        break;
      case 3:
        uint64_t v4 = 0xE600000000000000;
        uint64_t v25 = 0x636974706F63;
        break;
      case 4:
        uint64_t v4 = 0xE800000000000000;
        uint64_t v25 = 0x6369706F69687465;
        break;
      case 5:
        uint64_t v25 = 0xD000000000000013;
        uint64_t v4 = 0x80000001823ADD30;
        break;
      case 6:
        uint64_t v4 = 0xE600000000000000;
        uint64_t v25 = 0x776572626568;
        break;
      case 7:
        uint64_t v4 = 0xE700000000000000;
        uint64_t v25 = 0x313036386F7369;
        break;
      case 8:
        uint64_t v4 = 0xE600000000000000;
        uint64_t v25 = 0x6E6169646E69;
        break;
      case 9:
        uint64_t v4 = 0xE700000000000000;
        uint64_t v25 = 0x63696D616C7369;
        break;
      case 10:
        uint64_t v25 = 0x2D63696D616C7369;
        uint64_t v4 = 0xED00006C69766963;
        break;
      case 11:
        uint64_t v4 = 0xE800000000000000;
        uint64_t v25 = 0x6573656E6170616ALL;
        break;
      case 12:
        uint64_t v4 = 0xE700000000000000;
        uint64_t v25 = 0x6E616973726570;
        break;
      case 13:
        uint64_t v4 = 0xE300000000000000;
        uint64_t v25 = 6516594;
        break;
      case 14:
        uint64_t v25 = 0x2D63696D616C7369;
        uint64_t v4 = 0xEC000000616C6274;
        break;
      case 15:
        uint64_t v4 = 0x80000001823ADD50;
        uint64_t v25 = 0xD000000000000010;
        break;
      default:
        break;
    }
    char v26 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = v9;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v25, v4);
    uint64_t v28 = *(void *)(v9 + 16);
    BOOL v29 = (v27 & 1) == 0;
    BOOL v30 = __OFADD__(v28, v29);
    uint64_t v31 = v28 + v29;
    if (v30)
    {
      __break(1u);
LABEL_212:
      __break(1u);
LABEL_213:
      __break(1u);
      goto LABEL_214;
    }
    char v32 = v27;
    if (*(void *)(v9 + 24) < v31)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v31, v26);
      uint64_t v12 = v9;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v25, v4);
      if ((v32 & 1) != (v33 & 1)) {
        goto LABEL_245;
      }
LABEL_74:
      if (v32) {
        goto LABEL_34;
      }
      goto LABEL_75;
    }
    if (v26)
    {
      uint64_t v12 = v9;
      goto LABEL_74;
    }
    unint64_t v97 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
    uint64_t v37 = static _DictionaryStorage.copy(original:)();
    uint64_t v12 = v37;
    if (*(void *)(v9 + 16)) {
      break;
    }
LABEL_110:
    swift_bridgeObjectRelease();
    unint64_t result = v97;
    if (v32)
    {
LABEL_34:
      *(void *)(*(void *)(v12 + 56) + 8 * result) = v111;
      goto LABEL_35;
    }
LABEL_75:
    *(void *)(v12 + 8 * (result >> 6) + 64) |= 1 << result;
    unint64_t v34 = (uint64_t *)(*(void *)(v12 + 48) + 16 * result);
    *unint64_t v34 = v25;
    v34[1] = v4;
    *(void *)(*(void *)(v12 + 56) + 8 * result) = v111;
    uint64_t v35 = *(void *)(v12 + 16);
    BOOL v30 = __OFADD__(v35, 1);
    uint64_t v36 = v35 + 1;
    if (v30) {
      goto LABEL_212;
    }
    *(void *)(v12 + 16) = v36;
    swift_bridgeObjectRetain();
LABEL_35:
    uint64_t v17 = v109;
    swift_bridgeObjectRelease();
    unint64_t result = swift_bridgeObjectRelease();
    unint64_t v9 = v12;
  }
  uint64_t v38 = (char *)(v37 + 64);
  __src = (char *)(v9 + 64);
  unint64_t v39 = (unint64_t)((1 << *(unsigned char *)(v12 + 32)) + 63) >> 6;
  if (v12 != v9 || v38 >= &__src[8 * v39]) {
    memmove(v38, __src, 8 * v39);
  }
  int64_t v103 = 0;
  *(void *)(v12 + 16) = *(void *)(v9 + 16);
  uint64_t v40 = 1 << *(unsigned char *)(v9 + 32);
  if (v40 < 64) {
    uint64_t v41 = ~(-1 << v40);
  }
  else {
    uint64_t v41 = -1;
  }
  unint64_t v42 = v41 & *(void *)(v9 + 64);
  int64_t v99 = (unint64_t)(v40 + 63) >> 6;
  while (2)
  {
    if (v42)
    {
      unint64_t v43 = __clz(__rbit64(v42));
      v42 &= v42 - 1;
      unint64_t v44 = v43 | (v103 << 6);
LABEL_86:
      uint64_t v45 = 16 * v44;
      id v46 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v44);
      uint64_t v48 = *v46;
      uint64_t v47 = v46[1];
      uint64_t v49 = 8 * v44;
      uint64_t v50 = *(void *)(*(void *)(v9 + 56) + v49);
      id v51 = (void *)(*(void *)(v12 + 48) + v45);
      *id v51 = v48;
      v51[1] = v47;
      *(void *)(*(void *)(v12 + 56) + v49) = v50;
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  int64_t v52 = v103 + 1;
  if (__OFADD__(v103, 1))
  {
    __break(1u);
    goto LABEL_238;
  }
  if (v52 >= v99) {
    goto LABEL_110;
  }
  unint64_t v53 = *(void *)&__src[8 * v52];
  int64_t v54 = v103 + 1;
  if (v53) {
    goto LABEL_109;
  }
  int64_t v54 = v103 + 2;
  if (v103 + 2 >= v99) {
    goto LABEL_110;
  }
  unint64_t v53 = *(void *)&__src[8 * v54];
  if (v53) {
    goto LABEL_109;
  }
  int64_t v54 = v103 + 3;
  if (v103 + 3 >= v99) {
    goto LABEL_110;
  }
  unint64_t v53 = *(void *)&__src[8 * v54];
  if (v53) {
    goto LABEL_109;
  }
  int64_t v54 = v103 + 4;
  if (v103 + 4 >= v99) {
    goto LABEL_110;
  }
  unint64_t v53 = *(void *)&__src[8 * v54];
  if (v53) {
    goto LABEL_109;
  }
  int64_t v54 = v103 + 5;
  if (v103 + 5 >= v99) {
    goto LABEL_110;
  }
  unint64_t v53 = *(void *)&__src[8 * v54];
  if (v53) {
    goto LABEL_109;
  }
  int64_t v54 = v103 + 6;
  if (v103 + 6 >= v99) {
    goto LABEL_110;
  }
  unint64_t v53 = *(void *)&__src[8 * v54];
  if (v53) {
    goto LABEL_109;
  }
  int64_t v54 = v103 + 7;
  if (v103 + 7 >= v99) {
    goto LABEL_110;
  }
  unint64_t v53 = *(void *)&__src[8 * v54];
  if (v53)
  {
LABEL_109:
    unint64_t v42 = (v53 - 1) & v53;
    int64_t v103 = v54;
    unint64_t v44 = __clz(__rbit64(v53)) + (v54 << 6);
    goto LABEL_86;
  }
  int64_t v55 = v103 + 8;
  if (v103 + 8 >= v99) {
    goto LABEL_110;
  }
  unint64_t v53 = *(void *)&__src[8 * v55];
  if (v53)
  {
    int64_t v54 = v103 + 8;
    goto LABEL_109;
  }
  while (1)
  {
    int64_t v54 = v55 + 1;
    if (__OFADD__(v55, 1)) {
      break;
    }
    if (v54 >= v99) {
      goto LABEL_110;
    }
    unint64_t v53 = *(void *)&__src[8 * v54];
    ++v55;
    if (v53) {
      goto LABEL_109;
    }
  }
LABEL_243:
  __break(1u);
LABEL_244:
  __break(1u);
LABEL_245:
  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined init with take of LocalePreferences?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalePreferences?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s10Foundation17LocalePreferencesVSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t protocol witness for _LocaleProtocol.pref(for:) in conformance _LocaleAutoupdating(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 480))(a1, a2, ObjectType, v5);

  return swift_unknownObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IndexPath()
{
  return Hasher._finalize()();
}

void IndexPath.hash(into:)()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt v2 = 1;
  Swift::UInt v3 = 0;
  switch(*(unsigned char *)(v0 + 16))
  {
    case 1:
      Swift::UInt v4 = *(void *)(v0 + 8);
      Hasher._combine(_:)(2uLL);
      Swift::UInt v2 = v1;
      Swift::UInt v1 = v4;
      goto LABEL_3;
    case 2:
      Hasher._combine(_:)(*(void *)(v1 + 16));
      uint64_t v5 = *(void *)(v1 + 16);
      if (v5)
      {
        int64_t v6 = (Swift::UInt *)(v1 + 32);
        do
        {
          Swift::UInt v7 = *v6++;
          Hasher._combine(_:)(v7);
          --v5;
        }
        while (v5);
      }
      return;
    case 3:
      goto LABEL_4;
    default:
LABEL_3:
      Hasher._combine(_:)(v2);
      Swift::UInt v3 = v1;
LABEL_4:
      Hasher._combine(_:)(v3);
      return;
  }
}

uint64_t destroy for NSNotificationCenter.Publisher(id *a1)
{
  return swift_unknownObjectRelease();
}

uint64_t PropertyListDecoder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t partial apply for closure #2 in String.serializedForJSON(withoutEscapingSlashes:)(void *a1, int64_t a2)
{
  return closure #2 in String.serializedForJSON(withoutEscapingSlashes:)(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t closure #2 in String.serializedForJSON(withoutEscapingSlashes:)(void *a1, int64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  int64_t v5 = *(void *)(*a3 + 16);
  if (!v5) {
    return 0;
  }
  if (a1)
  {
    if (v5 <= a2)
    {
      if (v4 + 32 >= (unint64_t)a1 + v5 || v4 + 32 + v5 <= (unint64_t)a1)
      {
        memcpy(a1, (const void *)(v4 + 32), v5);
        return *(void *)(*a3 + 16);
      }
      goto LABEL_12;
    }
    __break(1u);
  }
  __break(1u);
LABEL_12:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void static MeasurementFormatUnitUsage<>.weather.getter(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v5 = *(void (**)(void *, uint64_t))(a1 + 32);
  _OWORD v7[3] = swift_getObjectType();
  v7[0] = a2;
  swift_unknownObjectRetain();
  v5(v7, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2)
{
  return thunk for @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t _sypSpy10ObjectiveC8ObjCBoolVGIgny_ypADIegny_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for closure #2 in static Set._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2)
{
  return closure #2 in static Set._forceBridgeFromObjectiveC(_:result:)(a1, a2, *(void **)(v2 + 32), *(void *)(v2 + 16));
}

uint64_t closure #2 in static Set._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v9);
  int v11 = &v14[-v10];
  outlined init with copy of Any(v12, (uint64_t)v14);
  uint64_t result = swift_dynamicCast();
  if (*(void *)(*a3 + 16) >= a3[1])
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v6 + 16))(v8, v11, a4);
    _NativeSet._unsafeInsertNew(_:)();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v11, a4);
  }
  return result;
}

uint64_t closure #1 in static Set._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = &v11[-v7];
  outlined init with copy of Any(v9, (uint64_t)v11);
  swift_dynamicCast();
  type metadata accessor for Set._Variant();
  Set._Variant.insert(_:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, a4);
}

uint64_t partial apply for closure #1 in static Set._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static Set._forceBridgeFromObjectiveC(_:result:)(a1, a2, *(void *)(v2 + 32), *(void *)(v2 + 16));
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t partial apply for specialized closure #1 in static Set._forceBridgeFromObjectiveC(_:result:)(uint64_t a1)
{
  return specialized closure #1 in static Set._forceBridgeFromObjectiveC(_:result:)(a1);
}

uint64_t specialized closure #1 in static Set._forceBridgeFromObjectiveC(_:result:)(uint64_t a1)
{
  outlined init with copy of Any(a1, (uint64_t)v4);
  swift_dynamicCast();
  specialized Set._Variant.insert(_:)(&v5, v2, v3);
  return swift_bridgeObjectRelease();
}

uint64_t specialized Set._Variant.insert(_:)(unint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (unint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
      unint64_t v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *unint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *unint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

unint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(unint64_t result, unint64_t a2, unint64_t a3, char a4)
{
  unint64_t v5 = v4;
  unint64_t v8 = result;
  uint64_t v9 = *v4;
  unint64_t v10 = *(void *)(*v4 + 16);
  unint64_t v11 = *(void *)(*v4 + 24);
  if (v11 > v10 && (a4 & 1) != 0)
  {
    uint64_t v12 = *v4;
    goto LABEL_116;
  }
  if ((a4 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
    if (v11 > v10)
    {
      uint64_t v37 = static _SetStorage.copy(original:)();
      uint64_t v12 = v37;
      if (!*(void *)(v9 + 16)) {
        goto LABEL_98;
      }
      uint64_t result = v37 + 56;
      uint64_t v38 = v9 + 56;
      unint64_t v39 = (unint64_t)((1 << *(unsigned char *)(v12 + 32)) + 63) >> 6;
      if (v12 != v9 || result >= v38 + 8 * v39) {
        uint64_t result = (unint64_t)memmove((void *)result, (const void *)(v9 + 56), 8 * v39);
      }
      int64_t v40 = 0;
      *(void *)(v12 + 16) = *(void *)(v9 + 16);
      uint64_t v41 = 1 << *(unsigned char *)(v9 + 32);
      uint64_t v42 = -1;
      if (v41 < 64) {
        uint64_t v42 = ~(-1 << v41);
      }
      unint64_t v43 = v42 & *(void *)(v9 + 56);
      int64_t v44 = (unint64_t)(v41 + 63) >> 6;
      while (1)
      {
        if (v43)
        {
          unint64_t v45 = __clz(__rbit64(v43));
          v43 &= v43 - 1;
          unint64_t v46 = v45 | (v40 << 6);
        }
        else
        {
          int64_t v51 = v40 + 1;
          if (__OFADD__(v40, 1)) {
            goto LABEL_121;
          }
          if (v51 >= v44) {
            goto LABEL_98;
          }
          unint64_t v52 = *(void *)(v38 + 8 * v51);
          ++v40;
          if (!v52)
          {
            int64_t v40 = v51 + 1;
            if (v51 + 1 >= v44) {
              goto LABEL_98;
            }
            unint64_t v52 = *(void *)(v38 + 8 * v40);
            if (!v52)
            {
              int64_t v40 = v51 + 2;
              if (v51 + 2 >= v44) {
                goto LABEL_98;
              }
              unint64_t v52 = *(void *)(v38 + 8 * v40);
              if (!v52)
              {
                int64_t v40 = v51 + 3;
                if (v51 + 3 >= v44) {
                  goto LABEL_98;
                }
                unint64_t v52 = *(void *)(v38 + 8 * v40);
                if (!v52)
                {
                  int64_t v53 = v51 + 4;
                  if (v53 >= v44) {
                    goto LABEL_98;
                  }
                  unint64_t v52 = *(void *)(v38 + 8 * v53);
                  if (!v52)
                  {
                    while (1)
                    {
                      int64_t v40 = v53 + 1;
                      if (__OFADD__(v53, 1)) {
                        goto LABEL_126;
                      }
                      if (v40 >= v44) {
                        break;
                      }
                      unint64_t v52 = *(void *)(v38 + 8 * v40);
                      ++v53;
                      if (v52) {
                        goto LABEL_63;
                      }
                    }
LABEL_98:
                    uint64_t result = swift_release();
                    *unint64_t v5 = v12;
LABEL_116:
                    *(void *)(v12 + 8 * (a3 >> 6) + 56) |= 1 << a3;
                    id v86 = (unint64_t *)(*(void *)(v12 + 48) + 16 * a3);
                    *id v86 = v8;
                    v86[1] = a2;
                    uint64_t v87 = *(void *)(v12 + 16);
                    BOOL v88 = __OFADD__(v87, 1);
                    uint64_t v89 = v87 + 1;
                    if (!v88)
                    {
                      *(void *)(v12 + 16) = v89;
                      return result;
                    }
LABEL_123:
                    __break(1u);
                    goto LABEL_124;
                  }
                  int64_t v40 = v53;
                }
              }
            }
          }
LABEL_63:
          unint64_t v43 = (v52 - 1) & v52;
          unint64_t v46 = __clz(__rbit64(v52)) + (v40 << 6);
        }
        uint64_t v47 = 16 * v46;
        uint64_t v48 = (void *)(*(void *)(v9 + 48) + v47);
        uint64_t v49 = v48[1];
        uint64_t v50 = (void *)(*(void *)(v12 + 48) + v47);
        *uint64_t v50 = *v48;
        v50[1] = v49;
        uint64_t result = swift_bridgeObjectRetain();
      }
    }
    uint64_t v55 = static _SetStorage.resize(original:capacity:move:)();
    uint64_t v12 = v55;
    if (*(void *)(v9 + 16))
    {
      unint64_t v91 = v8;
      uint64_t v56 = 1 << *(unsigned char *)(v9 + 32);
      uint64_t v57 = v9 + 56;
      if (v56 < 64) {
        uint64_t v58 = ~(-1 << v56);
      }
      else {
        uint64_t v58 = -1;
      }
      unint64_t v59 = v58 & *(void *)(v9 + 56);
      unint64_t v93 = a2;
      int64_t v95 = (void *)((unint64_t)(v56 + 63) >> 6);
      uint64_t v60 = v55 + 56;
      uint64_t result = swift_retain_n();
      uint64_t v61 = 0;
      while (1)
      {
        if (v59)
        {
          unint64_t v64 = __clz(__rbit64(v59));
          v59 &= v59 - 1;
          unint64_t v65 = v64 | (v61 << 6);
        }
        else
        {
          uint64_t v66 = v61 + 1;
          if (__OFADD__(v61, 1)) {
            goto LABEL_122;
          }
          if (v66 >= (uint64_t)v95) {
            goto LABEL_118;
          }
          unint64_t v67 = *(void *)(v57 + 8 * v66);
          ++v61;
          if (!v67)
          {
            uint64_t v61 = v66 + 1;
            if (v66 + 1 >= (uint64_t)v95) {
              goto LABEL_118;
            }
            unint64_t v67 = *(void *)(v57 + 8 * v61);
            if (!v67)
            {
              uint64_t v61 = v66 + 2;
              if (v66 + 2 >= (uint64_t)v95) {
                goto LABEL_118;
              }
              unint64_t v67 = *(void *)(v57 + 8 * v61);
              if (!v67)
              {
                uint64_t v68 = v66 + 3;
                if (v68 >= (uint64_t)v95) {
                  goto LABEL_118;
                }
                unint64_t v67 = *(void *)(v57 + 8 * v68);
                if (!v67)
                {
                  while (1)
                  {
                    uint64_t v61 = v68 + 1;
                    if (__OFADD__(v68, 1)) {
                      goto LABEL_125;
                    }
                    if (v61 >= (uint64_t)v95) {
                      break;
                    }
                    unint64_t v67 = *(void *)(v57 + 8 * v61);
                    ++v68;
                    if (v67) {
                      goto LABEL_88;
                    }
                  }
LABEL_118:
                  swift_release_n();
                  unint64_t v8 = v91;
                  a2 = v93;
                  unint64_t v5 = v4;
LABEL_102:
                  *unint64_t v5 = v12;
                  Hasher.init(_seed:)();
                  String.hash(into:)();
                  uint64_t result = Hasher._finalize()();
                  uint64_t v79 = -1 << *(unsigned char *)(v12 + 32);
                  a3 = result & ~v79;
                  if ((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
                  {
                    uint64_t v80 = *(void *)(v12 + 48);
                    uint64_t v81 = (void *)(v80 + 16 * a3);
                    BOOL v82 = *v81 == v8 && v81[1] == a2;
                    if (v82 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                    {
LABEL_115:
                      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                      __break(1u);
                    }
                    else
                    {
                      uint64_t v83 = ~v79;
                      while (1)
                      {
                        a3 = (a3 + 1) & v83;
                        if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
                          break;
                        }
                        unint64_t v84 = (void *)(v80 + 16 * a3);
                        if (*v84 != v8 || v84[1] != a2)
                        {
                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          if ((result & 1) == 0) {
                            continue;
                          }
                        }
                        goto LABEL_115;
                      }
                    }
                  }
                  goto LABEL_116;
                }
                uint64_t v61 = v68;
              }
            }
          }
LABEL_88:
          unint64_t v59 = (v67 - 1) & v67;
          unint64_t v65 = __clz(__rbit64(v67)) + (v61 << 6);
        }
        uint64_t v69 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v65);
        uint64_t v70 = *v69;
        uint64_t v71 = v69[1];
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        uint64_t result = Hasher._finalize()();
        uint64_t v72 = -1 << *(unsigned char *)(v12 + 32);
        unint64_t v73 = result & ~v72;
        unint64_t v74 = v73 >> 6;
        if (((-1 << v73) & ~*(void *)(v60 + 8 * (v73 >> 6))) != 0)
        {
          unint64_t v62 = __clz(__rbit64((-1 << v73) & ~*(void *)(v60 + 8 * (v73 >> 6)))) | v73 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_72;
        }
        char v75 = 0;
        unint64_t v76 = (unint64_t)(63 - v72) >> 6;
        do
        {
          if (++v74 == v76 && (v75 & 1) != 0)
          {
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
            goto LABEL_123;
          }
          BOOL v77 = v74 == v76;
          if (v74 == v76) {
            unint64_t v74 = 0;
          }
          v75 |= v77;
          uint64_t v78 = *(void *)(v60 + 8 * v74);
        }
        while (v78 == -1);
        unint64_t v62 = __clz(__rbit64(~v78)) + (v74 << 6);
LABEL_72:
        *(void *)(v60 + ((v62 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v62;
        int64_t v63 = (void *)(*(void *)(v12 + 48) + 16 * v62);
        *int64_t v63 = v70;
        v63[1] = v71;
        ++*(void *)(v12 + 16);
      }
    }
LABEL_101:
    swift_release();
    goto LABEL_102;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v13 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v12 = v13;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_101;
  }
  unint64_t v90 = v8;
  uint64_t v14 = 1 << *(unsigned char *)(v9 + 32);
  unint64_t v92 = a2;
  int64_t v94 = (void *)(v9 + 56);
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & *(void *)(v9 + 56);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v18 = v13 + 56;
  uint64_t result = swift_retain();
  int64_t v19 = 0;
  while (1)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v19 << 6);
      goto LABEL_28;
    }
    int64_t v24 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      goto LABEL_120;
    }
    if (v24 >= v17)
    {
LABEL_64:
      swift_release();
      uint64_t v54 = 1 << *(unsigned char *)(v9 + 32);
      unint64_t v8 = v90;
      a2 = v92;
      if (v54 > 63) {
        bzero(v94, ((unint64_t)(v54 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        void *v94 = -1 << v54;
      }
      *(void *)(v9 + 16) = 0;
      goto LABEL_101;
    }
    unint64_t v25 = v94[v24];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v24 + 1;
      if (v24 + 1 >= v17) {
        goto LABEL_64;
      }
      unint64_t v25 = v94[v19];
      if (!v25)
      {
        int64_t v19 = v24 + 2;
        if (v24 + 2 >= v17) {
          goto LABEL_64;
        }
        unint64_t v25 = v94[v19];
        if (!v25) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v16 = (v25 - 1) & v25;
    unint64_t v23 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_28:
    char v27 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v23);
    uint64_t v28 = *v27;
    uint64_t v29 = v27[1];
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v30 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v18 + 8 * (v31 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1 << v31) & ~*(void *)(v18 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_119;
        }
        BOOL v35 = v32 == v34;
        if (v32 == v34) {
          unint64_t v32 = 0;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v18 + 8 * v32);
      }
      while (v36 == -1);
      unint64_t v20 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(void *)(v18 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    uint64_t v21 = (void *)(*(void *)(v12 + 48) + 16 * v20);
    *uint64_t v21 = v28;
    v21[1] = v29;
    ++*(void *)(v12 + 16);
  }
  int64_t v26 = v24 + 3;
  if (v26 >= v17) {
    goto LABEL_64;
  }
  unint64_t v25 = v94[v26];
  if (v25)
  {
    int64_t v19 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v19 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v19 >= v17) {
      goto LABEL_64;
    }
    unint64_t v25 = v94[v19];
    ++v26;
    if (v25) {
      goto LABEL_27;
    }
  }
LABEL_124:
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
  return result;
}

uint64_t UUID.uuid.getter()
{
  return *(void *)v0;
}

uint64_t getEnumTagSinglePayload for NSNotificationCenter.Notifications.State(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

unsigned char *storeEnumTagSinglePayload for Locale.IdentifierType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CocoaError()
{
  return &type metadata for CocoaError;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UInt(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int64(a1, a2, a3, a4, (SEL *)&selRef_unsignedIntegerValue, (SEL *)&selRef_initWithUnsignedInteger_);
}

void _NSFileHandlePerformSourceContextRelease(void *a1)
{
  if (atomic_fetch_add((atomic_uint *volatile)a1, 0xFFFFFFFF) == 1) {
    free(a1);
  }
}

uint64_t IndexPath.init(arrayLiteral:)@<X0>(uint64_t result@<X0>, __n128 *a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v4 = *(void *)(result + 16);
  if (v4 == 2)
  {
    __n128 v7 = *(__n128 *)(result + 32);
    uint64_t result = swift_bridgeObjectRelease();
    __n128 v5 = v7;
    char v6 = 1;
  }
  else if (v4 == 1)
  {
    a3.n128_u64[0] = *(void *)(result + 32);
    __n128 v8 = a3;
    uint64_t result = swift_bridgeObjectRelease();
    __n128 v5 = v8;
    char v6 = 0;
  }
  else if (v4)
  {
    __n128 v5 = (__n128)(unint64_t)result;
    char v6 = 2;
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    __n128 v5 = 0uLL;
    char v6 = 3;
  }
  *a2 = v5;
  a2[1].n128_u8[0] = v6;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance IndexPath(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 16);
  unint64_t v7 = *(void *)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  int v9 = *(unsigned __int8 *)(a2 + 16);
  switch(v6)
  {
    case 1:
      if (v9 != 1) {
        goto LABEL_17;
      }
      BOOL result = v4 == (void *)v7 && v5 == v8;
      break;
    case 2:
      if (v9 != 2) {
        goto LABEL_17;
      }
      BOOL result = specialized static Array<A>.== infix(_:_:)(v4, (void *)v7);
      break;
    case 3:
      unint64_t v12 = v8 | v7;
      if (v9 != 3 || v12 != 0) {
        goto LABEL_17;
      }
      BOOL result = 1;
      break;
    default:
      if (v9) {
LABEL_17:
      }
        BOOL result = 0;
      else {
        BOOL result = v4 == (void *)v7;
      }
      break;
  }
  return result;
}

uint64_t MatchesBaseLanguageInLanguageIDs(void *a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  BaseLanguageIdentifierFromIdentifier = (void *)GetBaseLanguageIdentifierFromIdentifier(a1);
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t result = [a2 countByEnumeratingWithState:&v9 objects:v8 count:16];
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)v10;
    while (2)
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(a2);
        }
        if ([BaseLanguageIdentifierFromIdentifier isEqualToString:GetBaseLanguageIdentifierFromIdentifier(*(void **)(*((void *)&v9 + 1) + 8 * v7))])return 1; {
        ++v7;
        }
      }
      while (v5 != v7);
      uint64_t result = [a2 countByEnumeratingWithState:&v9 objects:v8 count:16];
      uint64_t v5 = result;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t GetBaseLanguageIdentifierFromIdentifier(void *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (![a1 length]) {
    return 0;
  }
  [a1 UTF8String];
  uint64_t v2 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CA20], "componentsFromLocaleIdentifier:", -[NSString initWithBytes:length:encoding:]([NSString alloc], "initWithBytes:length:encoding:", v5, (int)uloc_addLikelySubtags(), 4)), "mutableCopy");
  [v2 removeObjectForKey:*MEMORY[0x1E4F1C400]];
  uint64_t v3 = objc_msgSend(MEMORY[0x1E4F1CA20], "canonicalLanguageIdentifierFromString:", objc_msgSend(MEMORY[0x1E4F1CA20], "localeIdentifierFromComponents:", v2));

  return v3;
}

id @objc static NSLocale._localeIdentifier(fromComponents:)(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v3 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a3);
  specialized static Locale.identifier(fromAnyComponents:)(v3);
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();

  return v4;
}

void *specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(void *result, uint64_t a2, id a3, uint64_t a4)
{
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (a2)
  {
    uint64_t v6 = result;
    uint64_t result = objc_msgSend(a3, sel__getObjects_andKeys_count_, a2, result, a4);
    if ((a4 & 0x8000000000000000) == 0)
    {
      if (!a4) {
        return (void *)a4;
      }
      uint64_t v7 = 0;
      uint64_t v8 = &v6[2 * a4 - 1];
      do
      {
        if (a4 + v7 > a4)
        {
          __break(1u);
          goto LABEL_13;
        }
        uint64_t v15 = v6[a4 - 1 + v7];
        swift_unknownObjectRetain();
        uint64_t result = (void *)swift_dynamicCast();
        uint64_t v9 = *((void *)&v14 + 1);
        *(v8 - 1) = v14;
        *uint64_t v8 = v9;
        --v7;
        v8 -= 2;
      }
      while (a4 + v7);
      uint64_t v10 = a2 - 32;
      uint64_t v11 = 32 * a4;
      uint64_t v12 = a4;
      while (v12 <= a4)
      {
        uint64_t v13 = v12 - 1;
        uint64_t v15 = *(void *)(v10 + 8 * v12 + 24);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t result = outlined init with take of Any(&v14, (_OWORD *)(v10 + v11));
        v11 -= 32;
        uint64_t v12 = v13;
        if (!v13) {
          return (void *)a4;
        }
      }
LABEL_13:
      __break(1u);
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_16:
  __break(1u);
  return result;
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;

  if (!result)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (a2)
  {
    uint64_t v6 = result;
    uint64_t result = objc_msgSend(a3, sel__getObjects_andKeys_count_, a2, result, a4);
    if ((a4 & 0x8000000000000000) == 0)
    {
      if (!a4) {
        return (void *)a4;
      }
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
      uint64_t v7 = a4;
      do
      {
        *(void *)&uint64_t v12 = *v6;
        swift_unknownObjectRetain();
        uint64_t result = (void *)swift_dynamicCast();
        *v6++ = v13;
        --v7;
      }
      while (v7);
      uint64_t v8 = a2 - 32;
      uint64_t v9 = 32 * a4;
      uint64_t v10 = a4;
      while (1)
      {
        uint64_t v11 = v10 - 1;
        if (v10 < 1) {
          break;
        }
        uint64_t v13 = *(void *)(v8 + 8 * v10 + 24);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t result = outlined init with take of Any(&v12, (_OWORD *)(v8 + v9));
        v9 -= 32;
        uint64_t v10 = v11;
        if (!v11) {
          return (void *)a4;
        }
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_13;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t specialized static Locale.identifier(fromAnyComponents:)(unint64_t a1)
{
  void (*v6)(long long *__return_ptr, uint64_t);
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  BOOL v26;
  BOOL v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  void *v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  int64_t v53;
  unint64_t v54;
  int64_t v55;
  void *v56;
  id v57;
  Swift::String v58;
  Swift::String v59;
  unint64_t v60;
  uint64_t v61;
  id v62;
  void *v63;
  long long v64;
  long long v65;
  unint64_t v66;

  unint64_t v1 = a1;
  uint64_t v66 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x80000001823AB360);
    if (v4)
    {
      outlined init with copy of Any(*(void *)(v1 + 56) + 32 * v3, (uint64_t)&v64);
      if (swift_dynamicCast())
      {
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v6 = *(void (**)(long long *__return_ptr, uint64_t))(v61 + 24);
        swift_unknownObjectRetain();
        v6(&v64, ObjectType);
        swift_unknownObjectRelease();
        uint64_t v7 = Calendar.Identifier.cfCalendarIdentifier.getter();
        *((void *)&v65 + 1) = MEMORY[0x1E4FBB1A0];
        *(void *)&unint64_t v64 = v7;
        *((void *)&v64 + 1) = v8;
        specialized Dictionary.subscript.setter((uint64_t)&v64, 0x7261646E656C6163, 0xE800000000000000);
        swift_unknownObjectRelease();
        unint64_t v1 = v66;
      }
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x80000001823AB360);
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  if ((v11 & 1) == 0)
  {
    unint64_t v64 = 0u;
    unint64_t v65 = 0u;
    goto LABEL_10;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v66 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_26;
  }
  uint64_t v13 = v1;
  while (1)
  {
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(void *)(v13 + 56) + 32 * v9), &v64);
    specialized _NativeDictionary._delete(at:)(v9, v13);
    uint64_t v66 = v13;
    swift_bridgeObjectRelease();
LABEL_10:
    outlined destroy of Any?((uint64_t)&v64, (uint64_t *)&demangling cache variable for type metadata for Any?);
    long long v14 = swift_bridgeObjectRetain();
    uint64_t v15 = specialized Sequence.compactMap<A>(_:)(v14);
    swift_bridgeObjectRelease_n();
    unint64_t v1 = *(void *)(v15 + 16);
    if (!v1)
    {
      unint64_t v16 = (void *)MEMORY[0x1E4FBC868];
      goto LABEL_22;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    unint64_t v16 = (void *)static _DictionaryStorage.allocate(capacity:)();
    int64_t v17 = *(void *)(v15 + 16);
    int64_t v63 = v16;
    if (!v17)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      BOOL v35 = specialized static Locale.identifier(fromComponents:)((uint64_t)v16);
      swift_release();
      return v35;
    }
    swift_bridgeObjectRetain_n();
    uint64_t v18 = 0;
    int64_t v19 = (unint64_t *)(v15 + 56);
    while (1)
    {
      uint64_t v9 = v18 + 1;
      if (__OFADD__(v18, 1)) {
        break;
      }
      uint64_t v21 = *(v19 - 2);
      unint64_t v22 = *(v19 - 1);
      unint64_t v1 = *v19;
      *(void *)&unint64_t v64 = *(v19 - 3);
      unint64_t v20 = v64;
      *((void *)&v64 + 1) = v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
      unint64_t v25 = v16[2];
      int64_t v26 = (v24 & 1) == 0;
      char v27 = __OFADD__(v25, v26);
      uint64_t v28 = v25 + v26;
      if (v27) {
        goto LABEL_24;
      }
      uint64_t v29 = v24;
      if (v16[3] < v28)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, 1);
        unint64_t v16 = v63;
        unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
        if ((v29 & 1) != (v30 & 1))
        {
LABEL_61:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          goto LABEL_62;
        }
      }
      if (v29) {
        goto LABEL_59;
      }
      v16[(v23 >> 6) + 8] |= 1 << v23;
      unint64_t v31 = (uint64_t *)(v16[6] + 16 * v23);
      *unint64_t v31 = v20;
      v31[1] = v21;
      unint64_t v32 = (void *)(v16[7] + 16 * v23);
      *unint64_t v32 = v22;
      v32[1] = v1;
      char v33 = v16[2];
      char v27 = __OFADD__(v33, 1);
      unint64_t v34 = v33 + 1;
      if (v27) {
        goto LABEL_25;
      }
      v19 += 4;
      void v16[2] = v34;
      ++v18;
      if (v9 == v17)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v37 = static _DictionaryStorage.copy(original:)();
    uint64_t v13 = v37;
    if (*(void *)(v1 + 16)) {
      break;
    }
LABEL_56:
    swift_bridgeObjectRelease();
  }
  uint64_t v38 = (void *)(v37 + 64);
  unint64_t v39 = (unint64_t)((1 << *(unsigned char *)(v13 + 32)) + 63) >> 6;
  if (v13 != v1 || (unint64_t)v38 >= v1 + 64 + 8 * v39) {
    memmove(v38, (const void *)(v1 + 64), 8 * v39);
  }
  uint64_t v60 = v1 + 64;
  int64_t v40 = 0;
  *(void *)(v13 + 16) = *(void *)(v1 + 16);
  uint64_t v41 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v42 = -1;
  if (v41 < 64) {
    uint64_t v42 = ~(-1 << v41);
  }
  unint64_t v43 = v42 & *(void *)(v1 + 64);
  int64_t v44 = (unint64_t)(v41 + 63) >> 6;
  while (1)
  {
    if (v43)
    {
      unint64_t v45 = __clz(__rbit64(v43));
      v43 &= v43 - 1;
      unint64_t v46 = v45 | (v40 << 6);
      goto LABEL_34;
    }
    int64_t v53 = v40 + 1;
    if (__OFADD__(v40, 1))
    {
      __break(1u);
      goto LABEL_58;
    }
    if (v53 >= v44) {
      goto LABEL_56;
    }
    uint64_t v54 = *(void *)(v60 + 8 * v53);
    ++v40;
    if (!v54)
    {
      int64_t v40 = v53 + 1;
      if (v53 + 1 >= v44) {
        goto LABEL_56;
      }
      uint64_t v54 = *(void *)(v60 + 8 * v40);
      if (!v54)
      {
        int64_t v40 = v53 + 2;
        if (v53 + 2 >= v44) {
          goto LABEL_56;
        }
        uint64_t v54 = *(void *)(v60 + 8 * v40);
        if (!v54)
        {
          int64_t v40 = v53 + 3;
          if (v53 + 3 >= v44) {
            goto LABEL_56;
          }
          uint64_t v54 = *(void *)(v60 + 8 * v40);
          if (!v54)
          {
            int64_t v40 = v53 + 4;
            if (v53 + 4 >= v44) {
              goto LABEL_56;
            }
            uint64_t v54 = *(void *)(v60 + 8 * v40);
            if (!v54)
            {
              int64_t v40 = v53 + 5;
              if (v53 + 5 >= v44) {
                goto LABEL_56;
              }
              uint64_t v54 = *(void *)(v60 + 8 * v40);
              if (!v54) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_55:
    unint64_t v43 = (v54 - 1) & v54;
    unint64_t v46 = __clz(__rbit64(v54)) + (v40 << 6);
LABEL_34:
    uint64_t v47 = 16 * v46;
    uint64_t v48 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v46);
    uint64_t v50 = *v48;
    uint64_t v49 = v48[1];
    int64_t v51 = 32 * v46;
    outlined init with copy of Any(*(void *)(v1 + 56) + 32 * v46, (uint64_t)&v64);
    unint64_t v52 = (void *)(*(void *)(v13 + 48) + v47);
    *unint64_t v52 = v50;
    v52[1] = v49;
    outlined init with take of Any(&v64, (_OWORD *)(*(void *)(v13 + 56) + v51));
    swift_bridgeObjectRetain();
  }
  uint64_t v55 = v53 + 6;
  if (v55 >= v44) {
    goto LABEL_56;
  }
  uint64_t v54 = *(void *)(v60 + 8 * v55);
  if (v54)
  {
    int64_t v40 = v55;
    goto LABEL_55;
  }
  while (1)
  {
    int64_t v40 = v55 + 1;
    if (__OFADD__(v55, 1)) {
      break;
    }
    if (v40 >= v44) {
      goto LABEL_56;
    }
    uint64_t v54 = *(void *)(v60 + 8 * v40);
    ++v55;
    if (v54) {
      goto LABEL_55;
    }
  }
LABEL_58:
  __break(1u);
LABEL_59:
  uint64_t v56 = (void *)swift_allocError();
  swift_willThrow();
  unint64_t v62 = v56;
  uint64_t v57 = v56;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    _StringGuts.grow(_:)(30);
    v58._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    v58._os_log_t object = (void *)0x80000001823A92C0;
    String.append(_:)(v58);
    _print_unlocked<A, B>(_:_:)();
    v59._uint64_t countAndFlagsBits = 39;
    v59._os_log_t object = (void *)0xE100000000000000;
    String.append(_:)(v59);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_61;
  }
LABEL_62:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t specialized static Locale.identifier(fromComponents:)(uint64_t a1)
{
  uint64_t v2 = a1;
  uint64_t v185 = 0;
  unint64_t v186 = 0xE000000000000000;
  uint64_t v3 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_32;
  }
  uint64_t v1 = 0xD000000000000017;
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000018, 0x80000001823AB380);
  uint64_t v5 = v2;
  if (v6)
  {
    uint64_t v7 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v4);
    uint64_t v8 = *v7;
    uint64_t v9 = (void *)v7[1];
    swift_bridgeObjectRetain();
    v10._uint64_t countAndFlagsBits = v8;
    v10._os_log_t object = v9;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v11 = (void *)specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000018, 0x80000001823AB380);
    char v13 = v12;
    swift_bridgeObjectRelease();
    uint64_t v5 = v2;
    if (v13)
    {
      uint64_t v5 = v2;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_62;
      }
LABEL_5:
      swift_bridgeObjectRelease();
      specialized _NativeDictionary._delete(at:)((unint64_t)v11, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  if (!*(void *)(v2 + 16)) {
    goto LABEL_31;
  }
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v1 - 1, 0x80000001823AB3A0);
  if ((v15 & 1) == 0) {
    goto LABEL_12;
  }
  Swift::String v16 = *(Swift::String *)(*(void *)(v2 + 56) + 16 * v14);
  v183._uint64_t countAndFlagsBits = 95;
  v183._os_log_t object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  String.append(_:)(v183);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v1 - 1, 0x80000001823AB3A0);
  char v19 = v18;
  swift_bridgeObjectRelease();
  if ((v19 & 1) == 0) {
    goto LABEL_12;
  }
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    uint64_t v20 = v5;
    goto LABEL_11;
  }
  uint64_t v107 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v108 = static _DictionaryStorage.copy(original:)();
  uint64_t v20 = v108;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_123;
  }
  uint64_t v109 = (void *)(v108 + 64);
  uint64_t v110 = v5 + 64;
  unint64_t v111 = (unint64_t)((1 << *(unsigned char *)(v20 + 32)) + 63) >> 6;
  uint64_t v1 = v20;
  if (v20 != v5 || (unint64_t)v109 >= v110 + 8 * v111) {
    memmove(v109, (const void *)(v5 + 64), 8 * v111);
  }
  int64_t v112 = 0;
  *(void *)(v20 + 16) = *(void *)(v5 + 16);
  uint64_t v113 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v114 = -1;
  if (v113 < 64) {
    uint64_t v114 = ~(-1 << v113);
  }
  unint64_t v115 = v114 & *(void *)(v5 + 64);
  int64_t v116 = (unint64_t)(v113 + 63) >> 6;
  while (1)
  {
    if (v115)
    {
      unint64_t v117 = __clz(__rbit64(v115));
      v115 &= v115 - 1;
      unint64_t v118 = v117 | (v112 << 6);
      goto LABEL_101;
    }
    int64_t v128 = v112 + 1;
    if (__OFADD__(v112, 1))
    {
LABEL_187:
      __break(1u);
LABEL_188:
      __break(1u);
LABEL_189:
      __break(1u);
      goto LABEL_190;
    }
    if (v128 >= v116) {
      goto LABEL_123;
    }
    unint64_t v129 = *(void *)(v110 + 8 * v128);
    ++v112;
    if (!v129)
    {
      int64_t v112 = v128 + 1;
      if (v128 + 1 >= v116) {
        goto LABEL_123;
      }
      unint64_t v129 = *(void *)(v110 + 8 * v112);
      if (!v129)
      {
        int64_t v112 = v128 + 2;
        if (v128 + 2 >= v116) {
          goto LABEL_123;
        }
        unint64_t v129 = *(void *)(v110 + 8 * v112);
        if (!v129)
        {
          int64_t v112 = v128 + 3;
          if (v128 + 3 >= v116) {
            goto LABEL_123;
          }
          unint64_t v129 = *(void *)(v110 + 8 * v112);
          if (!v129)
          {
            int64_t v112 = v128 + 4;
            if (v128 + 4 >= v116) {
              goto LABEL_123;
            }
            unint64_t v129 = *(void *)(v110 + 8 * v112);
            if (!v129)
            {
              int64_t v112 = v128 + 5;
              if (v128 + 5 >= v116) {
                goto LABEL_123;
              }
              unint64_t v129 = *(void *)(v110 + 8 * v112);
              if (!v129) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_122:
    unint64_t v115 = (v129 - 1) & v129;
    unint64_t v118 = __clz(__rbit64(v129)) + (v112 << 6);
LABEL_101:
    uint64_t v119 = 16 * v118;
    unint64_t v120 = (uint64_t *)(*(void *)(v5 + 48) + v119);
    uint64_t v122 = *v120;
    uint64_t v121 = v120[1];
    char v123 = (uint64_t *)(*(void *)(v5 + 56) + v119);
    uint64_t v124 = *v123;
    uint64_t v125 = v123[1];
    unsigned __int8 v126 = (void *)(*(void *)(v20 + 48) + v119);
    *unsigned __int8 v126 = v122;
    v126[1] = v121;
    uint64_t v127 = (void *)(*(void *)(v20 + 56) + v119);
    *uint64_t v127 = v124;
    v127[1] = v125;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  int64_t v130 = v128 + 6;
  if (v130 >= v116) {
    goto LABEL_123;
  }
  unint64_t v129 = *(void *)(v110 + 8 * v130);
  if (v129)
  {
    int64_t v112 = v130;
    uint64_t v20 = v1;
    goto LABEL_122;
  }
  while (1)
  {
    int64_t v112 = v130 + 1;
    if (__OFADD__(v130, 1)) {
      goto LABEL_193;
    }
    uint64_t v20 = v1;
    if (v112 >= v116) {
      break;
    }
    unint64_t v129 = *(void *)(v110 + 8 * v112);
    ++v130;
    if (v129) {
      goto LABEL_122;
    }
  }
LABEL_123:
  swift_bridgeObjectRelease();
  uint64_t v5 = v20;
  uint64_t v2 = v107;
LABEL_11:
  swift_bridgeObjectRelease();
  specialized _NativeDictionary._delete(at:)(v17, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_12:
  if (!*(void *)(v2 + 16))
  {
LABEL_31:
    uint64_t v2 = v5;
    goto LABEL_32;
  }
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000017, 0x80000001823AB3C0);
  if (v22)
  {
    unint64_t v23 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v21);
    uint64_t v1 = *v23;
    int64_t v24 = (void *)v23[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v1 = 0;
    int64_t v24 = 0;
  }
  if (*(void *)(v2 + 16)
    && (unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000017, 0x80000001823AB3E0), (v26 & 1) != 0))
  {
    char v27 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v25);
    uint64_t v28 = *v27;
    uint64_t v29 = (void *)v27[1];
    swift_bridgeObjectRetain();
    if (!v24)
    {
LABEL_19:
      if (v29)
      {
        v30._uint64_t countAndFlagsBits = 95;
        v30._os_log_t object = (void *)0xE100000000000000;
        String.append(_:)(v30);
        goto LABEL_27;
      }
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    if (!v24) {
      goto LABEL_19;
    }
  }
  v31._uint64_t countAndFlagsBits = 95;
  v31._os_log_t object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  v32._uint64_t countAndFlagsBits = v1;
  v32._os_log_t object = v24;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000017, 0x80000001823AB3C0);
  char v35 = v34;
  swift_bridgeObjectRelease();
  if ((v35 & 1) == 0) {
    goto LABEL_26;
  }
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    uint64_t v36 = v5;
    goto LABEL_25;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v131 = static _DictionaryStorage.copy(original:)();
  uint64_t v36 = v131;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_184;
  }
  uint64_t v132 = (char *)(v131 + 64);
  __srcb = (char *)(v5 + 64);
  unint64_t v133 = (unint64_t)((1 << *(unsigned char *)(v36 + 32)) + 63) >> 6;
  if (v36 != v5 || v132 >= &__srcb[8 * v133]) {
    memmove(v132, __srcb, 8 * v133);
  }
  int64_t v134 = 0;
  *(void *)(v36 + 16) = *(void *)(v5 + 16);
  uint64_t v135 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v136 = -1;
  if (v135 < 64) {
    uint64_t v136 = ~(-1 << v135);
  }
  unint64_t v137 = v136 & *(void *)(v5 + 64);
  int64_t v138 = (unint64_t)(v135 + 63) >> 6;
  while (2)
  {
    if (v137)
    {
      unint64_t v139 = __clz(__rbit64(v137));
      v137 &= v137 - 1;
      unint64_t v140 = v139 | (v134 << 6);
LABEL_132:
      uint64_t v141 = 16 * v140;
      uint64_t v142 = (uint64_t *)(*(void *)(v5 + 48) + v141);
      uint64_t v144 = *v142;
      uint64_t v143 = v142[1];
      char v145 = (uint64_t *)(*(void *)(v5 + 56) + v141);
      uint64_t v146 = *v145;
      uint64_t v1 = v145[1];
      long long v147 = (void *)(*(void *)(v36 + 48) + v141);
      *long long v147 = v144;
      v147[1] = v143;
      id v148 = (void *)(*(void *)(v36 + 56) + v141);
      *id v148 = v146;
      v148[1] = v1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  int64_t v149 = v134 + 1;
  if (__OFADD__(v134, 1)) {
    goto LABEL_188;
  }
  if (v149 >= v138) {
    goto LABEL_184;
  }
  unint64_t v150 = *(void *)&__srcb[8 * v149];
  ++v134;
  if (v150) {
    goto LABEL_153;
  }
  int64_t v134 = v149 + 1;
  if (v149 + 1 >= v138) {
    goto LABEL_184;
  }
  unint64_t v150 = *(void *)&__srcb[8 * v134];
  if (v150) {
    goto LABEL_153;
  }
  int64_t v134 = v149 + 2;
  if (v149 + 2 >= v138) {
    goto LABEL_184;
  }
  unint64_t v150 = *(void *)&__srcb[8 * v134];
  if (v150) {
    goto LABEL_153;
  }
  int64_t v134 = v149 + 3;
  if (v149 + 3 >= v138) {
    goto LABEL_184;
  }
  unint64_t v150 = *(void *)&__srcb[8 * v134];
  if (v150) {
    goto LABEL_153;
  }
  int64_t v134 = v149 + 4;
  if (v149 + 4 >= v138) {
    goto LABEL_184;
  }
  unint64_t v150 = *(void *)&__srcb[8 * v134];
  if (v150) {
    goto LABEL_153;
  }
  int64_t v134 = v149 + 5;
  if (v149 + 5 >= v138) {
    goto LABEL_184;
  }
  unint64_t v150 = *(void *)&__srcb[8 * v134];
  if (v150)
  {
LABEL_153:
    unint64_t v137 = (v150 - 1) & v150;
    unint64_t v140 = __clz(__rbit64(v150)) + (v134 << 6);
    goto LABEL_132;
  }
  int64_t v151 = v149 + 6;
  if (v151 >= v138) {
    goto LABEL_184;
  }
  unint64_t v150 = *(void *)&__srcb[8 * v151];
  if (v150)
  {
    int64_t v134 = v151;
    goto LABEL_153;
  }
  while (1)
  {
    int64_t v134 = v151 + 1;
    if (__OFADD__(v151, 1)) {
      goto LABEL_194;
    }
    if (v134 >= v138) {
      break;
    }
    unint64_t v150 = *(void *)&__srcb[8 * v134];
    ++v151;
    if (v150) {
      goto LABEL_153;
    }
  }
LABEL_184:
  swift_bridgeObjectRelease();
  uint64_t v5 = v36;
LABEL_25:
  swift_bridgeObjectRelease();
  specialized _NativeDictionary._delete(at:)(v33, v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_26:
  uint64_t v2 = v5;
  if (!v29) {
    goto LABEL_32;
  }
LABEL_27:
  v183._uint64_t countAndFlagsBits = 95;
  v183._os_log_t object = (void *)0xE100000000000000;
  v37._uint64_t countAndFlagsBits = v28;
  v37._os_log_t object = v29;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  String.append(_:)(v183);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000017, 0x80000001823AB3E0);
  char v40 = v39;
  swift_bridgeObjectRelease();
  if ((v40 & 1) == 0) {
    goto LABEL_31;
  }
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    uint64_t v2 = v5;
    goto LABEL_30;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v152 = static _DictionaryStorage.copy(original:)();
  uint64_t v2 = v152;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_185;
  }
  unint64_t v153 = (void *)(v152 + 64);
  uint64_t v154 = v5 + 64;
  unint64_t v155 = (unint64_t)((1 << *(unsigned char *)(v2 + 32)) + 63) >> 6;
  uint64_t v156 = v2;
  if (v2 != v5 || (unint64_t)v153 >= v154 + 8 * v155) {
    memmove(v153, (const void *)(v5 + 64), 8 * v155);
  }
  uint64_t v1 = 0;
  *(void *)(v2 + 16) = *(void *)(v5 + 16);
  uint64_t v157 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v158 = -1;
  if (v157 < 64) {
    uint64_t v158 = ~(-1 << v157);
  }
  unint64_t v159 = v158 & *(void *)(v5 + 64);
  int64_t v160 = (unint64_t)(v157 + 63) >> 6;
  while (2)
  {
    if (v159)
    {
      unint64_t v161 = __clz(__rbit64(v159));
      v159 &= v159 - 1;
      unint64_t v162 = v161 | (v1 << 6);
LABEL_162:
      uint64_t v163 = 16 * v162;
      char v164 = (uint64_t *)(*(void *)(v5 + 48) + v163);
      uint64_t v166 = *v164;
      uint64_t v165 = v164[1];
      char v167 = (uint64_t *)(*(void *)(v5 + 56) + v163);
      uint64_t v168 = *v167;
      uint64_t v169 = v167[1];
      uint64_t v170 = (void *)(*(void *)(v2 + 48) + v163);
      *uint64_t v170 = v166;
      v170[1] = v165;
      unsigned __int8 v171 = (void *)(*(void *)(v2 + 56) + v163);
      void *v171 = v168;
      v171[1] = v169;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  int64_t v172 = v1 + 1;
  if (__OFADD__(v1, 1)) {
    goto LABEL_189;
  }
  if (v172 >= v160) {
    goto LABEL_185;
  }
  unint64_t v173 = *(void *)(v154 + 8 * v172);
  ++v1;
  if (v173) {
    goto LABEL_183;
  }
  uint64_t v1 = v172 + 1;
  if (v172 + 1 >= v160) {
    goto LABEL_185;
  }
  unint64_t v173 = *(void *)(v154 + 8 * v1);
  if (v173) {
    goto LABEL_183;
  }
  uint64_t v1 = v172 + 2;
  if (v172 + 2 >= v160) {
    goto LABEL_185;
  }
  unint64_t v173 = *(void *)(v154 + 8 * v1);
  if (v173) {
    goto LABEL_183;
  }
  uint64_t v1 = v172 + 3;
  if (v172 + 3 >= v160) {
    goto LABEL_185;
  }
  unint64_t v173 = *(void *)(v154 + 8 * v1);
  if (v173) {
    goto LABEL_183;
  }
  uint64_t v1 = v172 + 4;
  if (v172 + 4 >= v160) {
    goto LABEL_185;
  }
  unint64_t v173 = *(void *)(v154 + 8 * v1);
  if (v173) {
    goto LABEL_183;
  }
  uint64_t v1 = v172 + 5;
  if (v172 + 5 >= v160) {
    goto LABEL_185;
  }
  unint64_t v173 = *(void *)(v154 + 8 * v1);
  if (v173)
  {
LABEL_183:
    unint64_t v159 = (v173 - 1) & v173;
    unint64_t v162 = __clz(__rbit64(v173)) + (v1 << 6);
    goto LABEL_162;
  }
  int64_t v174 = v172 + 6;
  if (v174 >= v160) {
    goto LABEL_185;
  }
  unint64_t v173 = *(void *)(v154 + 8 * v174);
  if (v173)
  {
    uint64_t v1 = v174;
    uint64_t v2 = v156;
    goto LABEL_183;
  }
  while (1)
  {
    uint64_t v1 = v174 + 1;
    if (__OFADD__(v174, 1)) {
      goto LABEL_195;
    }
    uint64_t v2 = v156;
    if (v1 >= v160) {
      break;
    }
    unint64_t v173 = *(void *)(v154 + 8 * v1);
    ++v174;
    if (v173) {
      goto LABEL_183;
    }
  }
LABEL_185:
  swift_bridgeObjectRelease();
LABEL_30:
  swift_bridgeObjectRelease();
  specialized _NativeDictionary._delete(at:)(v38, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_32:
  uint64_t v41 = swift_bridgeObjectRetain();
  uint64_t v42 = specialized Sequence.compactMap<A>(_:)(v41);
  swift_bridgeObjectRelease();
  if (!*(void *)(v42 + 16))
  {
    uint64_t v11 = (void *)MEMORY[0x1E4FBC868];
LABEL_44:
    swift_bridgeObjectRelease();
    if (v11[2])
    {
      v61._uint64_t countAndFlagsBits = 64;
      v61._os_log_t object = (void *)0xE100000000000000;
      String.append(_:)(v61);
      swift_retain();
      uint64_t v62 = swift_bridgeObjectRetain();
      int64_t v63 = specialized _copyCollectionToContiguousArray<A>(_:)(v62);
      swift_release();
      v183._uint64_t countAndFlagsBits = (uint64_t)v63;
      specialized MutableCollection<>.sort(by:)(&v183._countAndFlagsBits);
      swift_release();
      __srca = (char *)v183._countAndFlagsBits;
      uint64_t v64 = *(void *)(v183._countAndFlagsBits + 16);
      if (v64)
      {
        uint64_t v66 = *(void *)(v183._countAndFlagsBits + 32);
        unint64_t v65 = *(void **)(v183._countAndFlagsBits + 40);
        v183._uint64_t countAndFlagsBits = v66;
        v183._os_log_t object = v65;
        swift_bridgeObjectRetain_n();
        v67._uint64_t countAndFlagsBits = 61;
        v67._os_log_t object = (void *)0xE100000000000000;
        String.append(_:)(v67);
        if (v11[2]
          && (uint64_t countAndFlagsBits = v183._countAndFlagsBits,
              os_log_t object = v183._object,
              unint64_t v70 = specialized __RawDictionaryStorage.find<A>(_:)(v66, (uint64_t)v65),
              (v71 & 1) != 0))
        {
          uint64_t v2 = 0;
          uint64_t v72 = (void **)(__srca + 56);
          uint64_t v73 = v64 - 1;
          while (1)
          {
            unint64_t v74 = (uint64_t *)(v11[7] + 16 * v70);
            uint64_t v1 = *v74;
            char v75 = (void *)v74[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v183._uint64_t countAndFlagsBits = countAndFlagsBits;
            v183._os_log_t object = object;
            swift_bridgeObjectRetain();
            v76._uint64_t countAndFlagsBits = v1;
            v76._os_log_t object = v75;
            String.append(_:)(v76);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            v77._uint64_t countAndFlagsBits = 59;
            v77._os_log_t object = (void *)0xE100000000000000;
            String.append(_:)(v77);
            swift_bridgeObjectRelease();
            String.append(_:)(v183);
            swift_bridgeObjectRelease();
            if (v73 == v2) {
              break;
            }
            if ((unint64_t)++v2 >= *((void *)__srca + 2)) {
              goto LABEL_61;
            }
            uint64_t v79 = (uint64_t)*(v72 - 1);
            uint64_t v78 = *v72;
            v183._uint64_t countAndFlagsBits = v79;
            v183._os_log_t object = v78;
            swift_bridgeObjectRetain_n();
            v80._uint64_t countAndFlagsBits = 61;
            v80._os_log_t object = (void *)0xE100000000000000;
            String.append(_:)(v80);
            if (v11[2])
            {
              v72 += 2;
              uint64_t countAndFlagsBits = v183._countAndFlagsBits;
              os_log_t object = v183._object;
              unint64_t v70 = specialized __RawDictionaryStorage.find<A>(_:)(v79, (uint64_t)v78);
              if (v81) {
                continue;
              }
            }
            goto LABEL_54;
          }
        }
        else
        {
LABEL_54:
          swift_bridgeObjectRelease();
          __break(1u);
        }
      }
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      specialized RangeReplaceableCollection<>.popLast()();
    }
    else
    {
      swift_release();
    }
    swift_bridgeObjectRelease();
    return v185;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v11 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unint64_t v43 = *(void **)(v42 + 16);
  char v184 = v11;
  __src = v43;
  if (!v43) {
    goto LABEL_44;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v44 = 0;
  unint64_t v45 = (uint64_t *)(v42 + 56);
  while (1)
  {
    unint64_t v46 = (void *)(v44 + 1);
    if (__OFADD__(v44, 1)) {
      break;
    }
    uint64_t v1 = *(v45 - 2);
    uint64_t v48 = *(v45 - 1);
    uint64_t v49 = *v45;
    v183._uint64_t countAndFlagsBits = *(v45 - 3);
    uint64_t v47 = v183._countAndFlagsBits;
    v183._os_log_t object = (void *)v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(v47, v1);
    uint64_t v52 = v11[2];
    BOOL v53 = (v51 & 1) == 0;
    BOOL v54 = __OFADD__(v52, v53);
    uint64_t v55 = v52 + v53;
    if (v54) {
      goto LABEL_59;
    }
    uint64_t v2 = v51;
    if (v11[3] < v55)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v55, 1);
      uint64_t v11 = v184;
      unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(v47, v1);
      if ((v2 & 1) != (v56 & 1)) {
        goto LABEL_196;
      }
    }
    if (v2) {
      goto LABEL_191;
    }
    v11[(v50 >> 6) + 8] |= 1 << v50;
    uint64_t v57 = (uint64_t *)(v11[6] + 16 * v50);
    *uint64_t v57 = v47;
    v57[1] = v1;
    uint64_t v58 = (void *)(v11[7] + 16 * v50);
    *uint64_t v58 = v48;
    v58[1] = v49;
    uint64_t v59 = v11[2];
    BOOL v54 = __OFADD__(v59, 1);
    uint64_t v60 = v59 + 1;
    if (v54) {
      goto LABEL_60;
    }
    v45 += 4;
    void v11[2] = v60;
    ++v44;
    if (v46 == __src)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_44;
    }
  }
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v83 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v83;
  if (!*(void *)(v2 + 16))
  {
LABEL_92:
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  unint64_t v84 = (void *)(v83 + 64);
  uint64_t v85 = v2 + 64;
  unint64_t v86 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  uint64_t v87 = v2;
  if (v5 != v2 || (unint64_t)v84 >= v85 + 8 * v86) {
    memmove(v84, (const void *)(v2 + 64), 8 * v86);
  }
  int64_t v88 = 0;
  *(void *)(v5 + 16) = *(void *)(v2 + 16);
  uint64_t v89 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v90 = -1;
  if (v89 < 64) {
    uint64_t v90 = ~(-1 << v89);
  }
  unint64_t v91 = v90 & *(void *)(v2 + 64);
  int64_t v92 = (unint64_t)(v89 + 63) >> 6;
  while (2)
  {
    if (v91)
    {
      unint64_t v93 = __clz(__rbit64(v91));
      v91 &= v91 - 1;
      unint64_t v94 = v93 | (v88 << 6);
LABEL_70:
      uint64_t v95 = 16 * v94;
      uint64_t v96 = (uint64_t *)(*(void *)(v2 + 48) + v95);
      uint64_t v98 = *v96;
      uint64_t v97 = v96[1];
      int64_t v99 = (uint64_t *)(*(void *)(v2 + 56) + v95);
      uint64_t v100 = *v99;
      uint64_t v101 = v99[1];
      uint64_t v102 = (void *)(*(void *)(v5 + 48) + v95);
      *uint64_t v102 = v98;
      v102[1] = v97;
      int64_t v103 = (void *)(*(void *)(v5 + 56) + v95);
      *int64_t v103 = v100;
      v103[1] = v101;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  int64_t v104 = v88 + 1;
  if (__OFADD__(v88, 1))
  {
    __break(1u);
    goto LABEL_187;
  }
  if (v104 >= v92) {
    goto LABEL_92;
  }
  unint64_t v105 = *(void *)(v85 + 8 * v104);
  ++v88;
  if (v105) {
    goto LABEL_91;
  }
  int64_t v88 = v104 + 1;
  if (v104 + 1 >= v92) {
    goto LABEL_92;
  }
  unint64_t v105 = *(void *)(v85 + 8 * v88);
  if (v105) {
    goto LABEL_91;
  }
  int64_t v88 = v104 + 2;
  if (v104 + 2 >= v92) {
    goto LABEL_92;
  }
  unint64_t v105 = *(void *)(v85 + 8 * v88);
  if (v105) {
    goto LABEL_91;
  }
  int64_t v88 = v104 + 3;
  if (v104 + 3 >= v92) {
    goto LABEL_92;
  }
  unint64_t v105 = *(void *)(v85 + 8 * v88);
  if (v105) {
    goto LABEL_91;
  }
  int64_t v88 = v104 + 4;
  if (v104 + 4 >= v92) {
    goto LABEL_92;
  }
  unint64_t v105 = *(void *)(v85 + 8 * v88);
  if (v105) {
    goto LABEL_91;
  }
  int64_t v88 = v104 + 5;
  if (v104 + 5 >= v92) {
    goto LABEL_92;
  }
  unint64_t v105 = *(void *)(v85 + 8 * v88);
  if (v105)
  {
LABEL_91:
    unint64_t v91 = (v105 - 1) & v105;
    unint64_t v94 = __clz(__rbit64(v105)) + (v88 << 6);
    goto LABEL_70;
  }
  int64_t v106 = v104 + 6;
  if (v106 >= v92) {
    goto LABEL_92;
  }
  unint64_t v105 = *(void *)(v85 + 8 * v106);
  if (v105)
  {
    int64_t v88 = v106;
    uint64_t v2 = v87;
    goto LABEL_91;
  }
  while (1)
  {
    int64_t v88 = v106 + 1;
    if (__OFADD__(v106, 1)) {
      break;
    }
    uint64_t v2 = v87;
    if (v88 >= v92) {
      goto LABEL_92;
    }
    unint64_t v105 = *(void *)(v85 + 8 * v88);
    ++v106;
    if (v105) {
      goto LABEL_91;
    }
  }
LABEL_190:
  __break(1u);
LABEL_191:
  long long v175 = (void *)swift_allocError();
  swift_willThrow();
  id v182 = v175;
  id v176 = v175;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    _StringGuts.grow(_:)(30);
    v177._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    v177._os_log_t object = (void *)0x80000001823A92C0;
    String.append(_:)(v177);
    _print_unlocked<A, B>(_:_:)();
    v178._uint64_t countAndFlagsBits = 39;
    v178._os_log_t object = (void *)0xE100000000000000;
    String.append(_:)(v178);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_193:
    __break(1u);
LABEL_194:
    __break(1u);
LABEL_195:
    __break(1u);
LABEL_196:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();

  swift_unexpectedError();
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          char v12 = (_OWORD *)(v11 + 16 * v3);
          char v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *char v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          char v15 = (_OWORD *)(v14 + 16 * v3);
          Swift::String v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *char v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *unint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        unint64_t v10 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          char v12 = *(void *)(a2 + 48);
          char v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            _OWORD *v13 = *v14;
          }
          char v15 = *(void *)(a2 + 56);
          Swift::String v16 = (_OWORD *)(v15 + 32 * v3);
          unint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            Swift::Int v9 = v17[1];
            _OWORD *v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  BOOL v21 = *(void *)(a2 + 16);
  uint64_t v22 = __OFSUB__(v21, 1);
  unint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  const void *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          char v12 = (_OWORD *)(v11 + 16 * v3);
          char v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *char v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t result = v14 + 72 * v3;
          char v15 = (const void *)(v14 + 72 * v6);
          if (v3 != v6 || (int64_t v3 = v6, result >= (unint64_t)v15 + 72))
          {
            uint64_t result = (unint64_t)memmove((void *)result, v15, 0x48uLL);
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    Swift::String v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v17 = *v16;
    uint64_t v18 = (-1 << v3) - 1;
  }
  else
  {
    Swift::String v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v18 = *v16;
    unint64_t v17 = (-1 << result) - 1;
  }
  _OWORD *v16 = v18 & v17;
  uint64_t v19 = *(void *)(a2 + 16);
  uint64_t v20 = __OFSUB__(v19, 1);
  BOOL v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  void *v10;
  id v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        unint64_t v10 = *(void **)(*(void *)(a2 + 48) + 8 * v6);
        static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        Hasher.init(_seed:)();
        uint64_t v11 = v10;
        String.hash(into:)();
        char v12 = Hasher._finalize()();

        uint64_t result = swift_bridgeObjectRelease();
        char v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          char v15 = (void *)(v14 + 8 * v3);
          Swift::String v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *char v15 = *v16;
          }
          unint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (_OWORD *)(v17 + 32 * v3);
          uint64_t v19 = (_OWORD *)(v17 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 2))
          {
            Swift::Int v9 = v19[1];
            *uint64_t v18 = *v19;
            v18[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    BOOL v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    BOOL v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  unint64_t v23 = *(void *)(a2 + 16);
  int64_t v24 = __OFSUB__(v23, 1);
  unint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          char v12 = (_OWORD *)(v11 + 16 * v3);
          char v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *char v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          char v15 = (_OWORD *)(v14 + 16 * v3);
          Swift::String v16 = (_OWORD *)(v14 + 16 * v6);
          if (16 * v3 != 16 * v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *char v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *unint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::Int v9 = *(void *)(a2 + 48);
        unint64_t v10 = (void *)(v9 + 8 * v6);
        uint64_t result = static Hasher._hash(seed:_:)();
        uint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              unint64_t *v14 = *v10;
            }
            char v15 = *(void *)(a2 + 56);
            Swift::String v16 = (void *)(v15 + 8 * v3);
            unint64_t v17 = (void *)(v15 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              _OWORD *v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  BOOL v21 = *(void *)(a2 + 16);
  uint64_t v22 = __OFSUB__(v21, 1);
  unint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  unsigned char *v12;
  unsigned char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::Int v9 = *(unsigned __int8 *)(*(void *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        uint64_t result = Hasher._finalize()();
        unint64_t v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          char v12 = (unsigned char *)(v11 + v3);
          char v13 = (unsigned char *)(v11 + v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *char v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          char v15 = (void *)(v14 + 8 * v3);
          Swift::String v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *char v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *unint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  long long v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  long long *v17;
  long long *v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        uint64_t v11 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        char v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          char v13 = *(void *)(a2 + 48);
          uint64_t v14 = (_OWORD *)(v13 + 16 * v3);
          char v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            unint64_t *v14 = *v15;
          }
          Swift::String v16 = *(void *)(a2 + 56);
          unint64_t v17 = (long long *)(v16 + 48 * v3);
          uint64_t v18 = (long long *)(v16 + 48 * v6);
          if (48 * v3 < (uint64_t)(48 * v6) || v17 >= v18 + 3 || (uint64_t v19 = v3 == v6, v3 = v6, !v19))
          {
            Swift::Int v9 = *v18;
            unint64_t v10 = v18[2];
            v17[1] = v18[1];
            _OWORD v17[2] = v10;
            *unint64_t v17 = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    BOOL v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    BOOL v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  unint64_t v23 = *(void *)(a2 + 16);
  int64_t v24 = __OFSUB__(v23, 1);
  unint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  void *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::Int v9 = *(void *)(a2 + 48);
        unint64_t v10 = (void *)(v9 + 8 * v6);
        uint64_t result = static Hasher._hash(seed:_:)();
        uint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              unint64_t *v14 = *v10;
            }
            char v15 = *(void *)(a2 + 56);
            Swift::String v16 = (_OWORD *)(v15 + 16 * v3);
            unint64_t v17 = (_OWORD *)(v15 + 16 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              _OWORD *v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  BOOL v21 = *(void *)(a2 + 16);
  uint64_t v22 = __OFSUB__(v21, 1);
  unint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  const void *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          char v12 = (_OWORD *)(v11 + 16 * v3);
          char v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *char v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t result = v14 + 80 * v3;
          char v15 = (const void *)(v14 + 80 * v6);
          if (v3 != v6 || (int64_t v3 = v6, result >= (unint64_t)v15 + 80))
          {
            uint64_t result = (unint64_t)memmove((void *)result, v15, 0x50uLL);
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    Swift::String v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v17 = *v16;
    uint64_t v18 = (-1 << v3) - 1;
  }
  else
  {
    Swift::String v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v18 = *v16;
    unint64_t v17 = (-1 << result) - 1;
  }
  _OWORD *v16 = v18 & v17;
  uint64_t v19 = *(void *)(a2 + 16);
  uint64_t v20 = __OFSUB__(v19, 1);
  BOOL v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::Int v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        uint64_t result = Hasher._finalize()();
        unint64_t v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          char v12 = (void *)(v11 + 8 * v3);
          char v13 = (void *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *char v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          char v15 = (void *)(v14 + 8 * v3);
          Swift::String v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *char v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *unint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::UInt8 v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  long long *v15;
  long long v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        Swift::Int v9 = 24 * v6;
        unint64_t v10 = *(unsigned char *)(*(void *)(a2 + 48) + 24 * v6 + 16);
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Hasher._combine(_:)(v10);
        uint64_t v11 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        char v12 = v11 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v12 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        char v13 = *(void *)(a2 + 48);
        uint64_t v14 = v13 + 24 * v3;
        char v15 = (long long *)(v13 + v9);
        if (24 * v3 < v9 || v14 >= (unint64_t)v15 + 24 || v3 != v6)
        {
          Swift::String v16 = *v15;
          *(void *)(v14 + 16) = *((void *)v15 + 2);
          *(_OWORD *)uint64_t v14 = v16;
        }
        unint64_t v17 = *(void *)(a2 + 56);
        uint64_t v18 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>)
                                    - 8)
                        + 72);
        uint64_t v19 = v18 * v3;
        uint64_t result = v17 + v18 * v3;
        uint64_t v20 = v18 * v6;
        BOOL v21 = v17 + v18 * v6 + v18;
        if (v19 < v20 || result >= v21)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v19 == v20) {
            goto LABEL_6;
          }
          uint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_22;
        }
      }
      if (v12 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v12) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_22:
    unint64_t v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    int64_t v24 = *v23;
    unint64_t v25 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    unint64_t v25 = *v23;
    int64_t v24 = (-1 << result) - 1;
  }
  *unint64_t v23 = v25 & v24;
  char v26 = *(void *)(a2 + 16);
  char v27 = __OFSUB__(v26, 1);
  uint64_t v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

id @objc static NSLocale._components(fromLocaleIdentifier:)(uint64_t a1, uint64_t a2, void *a3)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  specialized static Locale.components(fromIdentifier:)();
  swift_bridgeObjectRelease();
  int64_t v3 = (void *)_NativeDictionary.bridged()();

  return v3;
}

uint64_t specialized static Locale.components(fromIdentifier:)()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
  CFStringRef v1 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  CFDictionaryRef ComponentsFromLocaleIdentifier = CFLocaleCreateComponentsFromLocaleIdentifier(v0, v1);
  swift_unknownObjectRelease();
  if (ComponentsFromLocaleIdentifier
    && (uint64_t v6 = 0,
        CFDictionaryRef v3 = ComponentsFromLocaleIdentifier,
        specialized static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(v3, &v6),
        v3,
        (uint64_t v4 = v6) != 0))
  {
  }
  else
  {

    return MEMORY[0x1E4FBC868];
  }
  return v4;
}

id specialized static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, void *a2)
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  if (MEMORY[0x1E4FBC840] + 8 == MEMORY[0x1E4FBB1A0])
  {
    uint64_t v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (!v4)
    {
      uint64_t v5 = (uint64_t)objc_msgSend(a1, sel_count);
      if (v5)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        uint64_t v6 = (void *)static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        uint64_t v6 = (void *)MEMORY[0x1E4FBC868];
      }
      uint64_t v8 = v6[6];
      uint64_t v9 = v6[7];
      swift_retain();
      id result = objc_msgSend(a1, sel__getObjects_andKeys_count_, v9, v8, v5);
      if (v5 < 1)
      {
        uint64_t v11 = v5;
        if (!v5)
        {
          uint64_t v7 = 1;
LABEL_21:
          if (v5 >= 0)
          {
            v6[2] = 0;
            swift_release();
            if (!v7)
            {
LABEL_23:
              swift_release();
              uint64_t v6 = 0;
            }
LABEL_24:
            *a2 = v6;
            return (id)v7;
          }
          __break(1u);
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v11 = v5;
        swift_unknownObjectRetain();
        _bridgeNonVerbatimFromObjectiveCConditional<A>(_:_:_:)();
        id result = (id)swift_unknownObjectRelease();
      }
      if (__OFSUB__(v5, v11))
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      id result = (id)swift_arrayDestroy();
      uint64_t v7 = 0;
      goto LABEL_21;
    }
LABEL_6:
    uint64_t v6 = (void *)v4;
    uint64_t v7 = 1;
    goto LABEL_24;
  }
  uint64_t v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v4) {
    goto LABEL_6;
  }
  uint64_t v5 = (uint64_t)objc_msgSend(a1, sel_count);
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    uint64_t v6 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v6 = (void *)MEMORY[0x1E4FBC868];
  }
  uint64_t v12 = v6[6];
  uint64_t v13 = v6[7];
  swift_retain();
  id result = objc_msgSend(a1, sel__getObjects_andKeys_count_, v13, v12, v5);
  if (v5 < 1)
  {
    uint64_t v14 = v5;
    if (!v5)
    {
LABEL_30:
      uint64_t v7 = 1;
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v14 = v5;
    swift_unknownObjectRetain();
    _bridgeNonVerbatimFromObjectiveCConditional<A>(_:_:_:)();
    id result = (id)swift_unknownObjectRelease();
  }
  if (!__OFSUB__(v5, v14))
  {
    id result = (id)swift_arrayDestroy();
    uint64_t v7 = 0;
LABEL_25:
    if (v5 >= 0)
    {
      v6[2] = 0;
      swift_release();
      if (v7) {
        goto LABEL_24;
      }
      goto LABEL_23;
    }
    __break(1u);
    __break(1u);
    __break(1u);
    goto LABEL_32;
  }
LABEL_33:
  __break(1u);
  __break(1u);
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  if (MEMORY[0x1E4FBC840] + 8 == MEMORY[0x1E4FBB550])
  {
    uint64_t v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (!v4)
    {
      uint64_t v5 = (uint64_t)objc_msgSend(a1, sel_count);
      if (v5)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        uint64_t v6 = (void *)static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        uint64_t v6 = (void *)MEMORY[0x1E4FBC868];
      }
      uint64_t v8 = v6[6];
      uint64_t v9 = v6[7];
      swift_retain();
      id result = objc_msgSend(a1, sel__getObjects_andKeys_count_, v9, v8, v5);
      if (v5 < 1)
      {
        uint64_t v11 = v5;
        if (!v5)
        {
          uint64_t v7 = 1;
LABEL_21:
          if (v5 >= 0)
          {
            v6[2] = 0;
            swift_release();
            if (v7) {
              goto LABEL_27;
            }
            goto LABEL_26;
          }
          __break(1u);
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v11 = v5;
        swift_unknownObjectRetain();
        _bridgeNonVerbatimFromObjectiveCConditional<A>(_:_:_:)();
        id result = (id)swift_unknownObjectRelease();
      }
      if (__OFSUB__(v5, v11))
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      id result = (id)swift_arrayDestroy();
      uint64_t v7 = 0;
      goto LABEL_21;
    }
LABEL_6:
    uint64_t v6 = (void *)v4;
    uint64_t v7 = 1;
    goto LABEL_27;
  }
  uint64_t v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v4) {
    goto LABEL_6;
  }
  uint64_t v5 = (uint64_t)objc_msgSend(a1, sel_count);
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
    uint64_t v6 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v6 = (void *)MEMORY[0x1E4FBC868];
  }
  uint64_t v12 = v6[6];
  uint64_t v13 = v6[7];
  swift_retain();
  id result = objc_msgSend(a1, sel__getObjects_andKeys_count_, v13, v12, v5);
  if (v5 < 1)
  {
    uint64_t v14 = v5;
    if (!v5)
    {
LABEL_30:
      uint64_t v7 = 1;
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v14 = v5;
    swift_unknownObjectRetain();
    _bridgeNonVerbatimFromObjectiveCConditional<A>(_:_:_:)();
    id result = (id)swift_unknownObjectRelease();
  }
  if (!__OFSUB__(v5, v14))
  {
    id result = (id)swift_arrayDestroy();
    uint64_t v7 = 0;
LABEL_24:
    if (v5 >= 0)
    {
      v6[2] = 0;
      swift_release();
      if ((v7 & 1) == 0)
      {
LABEL_26:
        swift_release();
        uint64_t v6 = 0;
      }
LABEL_27:
      *a2 = v6;
      return (id)v7;
    }
    __break(1u);
    __break(1u);
    __break(1u);
    goto LABEL_32;
  }
LABEL_33:
  __break(1u);
  __break(1u);
  return result;
}

id @objc static NSLocale._canonicalLanguageIdentifier(from:)(uint64_t a1, uint64_t a2, void *a3)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
  CFStringRef v4 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v3, v4);
  swift_unknownObjectRelease();
  if (CanonicalLanguageIdentifierFromString)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();

  return v6;
}

uint64_t copyFromStringToStorage(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    unint64_t v8 = a3;
    unint64_t v10 = (void *)result;
    do
    {
      uint64_t v19 = 0;
      unint64_t v20 = 0;
      uint64_t ValueAtIndex = CFStorageGetValueAtIndex();
      unint64_t v12 = v19 - a5 + v20;
      if (v12 >= v8) {
        unint64_t v12 = v8;
      }
      unint64_t v20 = v12;
      if (a6)
      {
        id result = objc_msgSend(v10, "getCharacters:range:", ValueAtIndex, a2, v12);
        unint64_t v13 = v20;
        unint64_t v14 = v20;
      }
      else
      {
        uint64_t v17 = 0;
        unint64_t v18 = 0;
        uint64_t v16 = 0;
        id result = objc_msgSend(v10, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", ValueAtIndex, v12, &v18, _NSCStringEncoding, 0, a2, v12, &v16);
        if ((result & 1) == 0)
        {
          char v15 = +[NSString stringWithFormat:@"Unable to convert bytes in string %p to _NSCStringEncoding", v10];
          objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v15 userInfo:0]);
        }
        unint64_t v13 = v18;
        unint64_t v14 = v20 - v17;
      }
      a2 += v14;
      a5 += v13;
      v8 -= v14;
    }
    while (v8);
  }
  return result;
}

uint64_t _compatDecodeValueOfObjCType(uint64_t a1, NSString *a2, BOOL *a3, const char *a4)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if ((int)a2 <= 80)
  {
    if ((int)a2 > 57)
    {
      switch((int)a2)
      {
        case ':':
          uint64_t v7 = (void *)[@"$" mutableCopy];
          uint64_t v8 = *(int *)(a1 + 64);
          *(_DWORD *)(a1 + 64) = v8 + 1;
          if (v8 > 0x27) {
            uint64_t v9 = +[NSString stringWithFormat:@"$%ld", v8];
          }
          else {
            uint64_t v9 = (NSString *)generic_keys[v8];
          }
          [v7 appendString:v9];
          uint64_t v44 = (NSString *)[(id)a1 decodeObjectOfClass:objc_opt_class() forKey:v7];

          if (_NSIsNSString())
          {
            uint64_t v41 = NSSelectorFromString(v44);
            goto LABEL_62;
          }
          *(void *)a3 = 0;
          if (!v44) {
            return 0;
          }
          uint64_t v49 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObject);
          unint64_t v50 = v44;
          uint64_t v22 = @"NSInvalidUnarchiveOperationException";
          unint64_t v20 = @"%@: Found non-string object (%@) where expecting SEL name";
          break;
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case 'A':
          goto LABEL_27;
        case '@':
          uint64_t v23 = *(int *)(a1 + 64);
          *(_DWORD *)(a1 + 64) = v23 + 1;
          if (v23 > 0x27) {
            int64_t v24 = +[NSString stringWithFormat:@"$%ld", v23];
          }
          else {
            int64_t v24 = (NSString *)generic_keys[v23];
          }
          uint64_t result = _decodeObject((unint64_t *)a1, v24, a3);
          if (!result) {
            return result;
          }
          id v45 = *(id *)a3;
          return 1;
        case 'B':
          uint64_t v25 = *(int *)(a1 + 64);
          *(_DWORD *)(a1 + 64) = v25 + 1;
          if (v25 > 0x27) {
            char v26 = +[NSString stringWithFormat:@"$%ld", v25];
          }
          else {
            char v26 = (NSString *)generic_keys[v25];
          }
          return _decodeBool(a1, v26, a3);
        case 'C':
          goto LABEL_7;
        default:
          if (a2 == 73 || a2 == 76) {
            goto LABEL_19;
          }
          goto LABEL_27;
      }
      goto LABEL_89;
    }
    if (a2 == 35)
    {
      unint64_t v33 = (void *)[@"$" mutableCopy];
      uint64_t v34 = *(int *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = v34 + 1;
      if (v34 > 0x27) {
        char v35 = +[NSString stringWithFormat:@"$%ld", v34];
      }
      else {
        char v35 = (NSString *)generic_keys[v34];
      }
      [v33 appendString:v35];
      unint64_t v46 = (NSString *)[(id)a1 decodeObjectOfClass:objc_opt_class() forKey:v33];

      if (_NSIsNSString())
      {
        uint64_t v47 = *(void **)(a1 + 120);
        Class v48 = NSClassFromString(v46);
        if (![v47 classNameAllowed:v48])
        {
          uint64_t v19 = (__CFString *)*MEMORY[0x1E4F1C3C8];
          uint64_t v49 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObject);
          unint64_t v50 = v46;
          unint64_t v20 = @"%@: data to unarchive contains class (%@) which has not been allowed";
          goto LABEL_28;
        }
        _NSCoderCheckPotentiallyMangledClassNameAndWarn((uint64_t)v48, 0);
        *(void *)a3 = v48;
        return 1;
      }
      *(void *)a3 = 0;
      if (v46)
      {
        uint64_t v49 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObject);
        unint64_t v50 = v46;
        uint64_t v22 = @"NSInvalidUnarchiveOperationException";
        unint64_t v20 = @"%@: Found non-string object (%@) where expecting class name";
        goto LABEL_89;
      }
    }
    else
    {
      if (a2 == 37)
      {
        uint64_t v36 = _NSMethodExceptionProem((objc_class *)a1, a4);
        NSLog((NSString *)@"%@: warning: NXAtom being decoded -- will not be uniqued", v36);
      }
      else if (a2 != 42)
      {
LABEL_27:
        uint64_t v19 = (__CFString *)*MEMORY[0x1E4F1C3C8];
        uint64_t v49 = _NSMethodExceptionProem((objc_class *)a1, a4);
        unint64_t v50 = a2;
        unint64_t v20 = @"%@: unknown type encoding ('%c')";
LABEL_28:
        uint64_t v21 = (void *)a1;
        uint64_t v22 = v19;
LABEL_90:
        objc_msgSend(v21, "__failWithExceptionName:errorCode:format:", v22, 4864, v20, v49, v50);
        return 0;
      }
      Swift::String v37 = (void *)[@"$" mutableCopy];
      uint64_t v38 = *(int *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = v38 + 1;
      if (v38 > 0x27) {
        char v39 = +[NSString stringWithFormat:@"$%ld", v38];
      }
      else {
        char v39 = (NSString *)generic_keys[v38];
      }
      [v37 appendString:v39];
      char v40 = (NSString *)[(id)a1 decodeObjectOfClass:objc_opt_class() forKey:v37];

      if (_NSIsNSString())
      {
        uint64_t v41 = strdup([(NSString *)v40 cString]);
LABEL_62:
        *(void *)a3 = v41;
        return 1;
      }
      *(void *)a3 = 0;
      if (v40)
      {
        uint64_t v49 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObject);
        unint64_t v50 = v40;
        uint64_t v22 = @"NSInvalidUnarchiveOperationException";
        unint64_t v20 = @"%@: Found non-string object (%@) where expecting C string";
LABEL_89:
        uint64_t v21 = (void *)a1;
        goto LABEL_90;
      }
    }
    return 0;
  }
  switch((int)a2)
  {
    case 'c':
LABEL_7:
      uint64_t v10 = *(int *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = v10 + 1;
      if (v10 > 0x27) {
        uint64_t v11 = +[NSString stringWithFormat:@"$%ld", v10];
      }
      else {
        uint64_t v11 = (NSString *)generic_keys[v10];
      }
      unsigned int v51 = 0;
      int v27 = _decodeInt32((void *)a1, v11, &v51);
      uint64_t result = 0;
      BOOL v28 = v51;
      if (v27)
      {
        if (v51 == (char)v51)
        {
          uint64_t result = 1;
        }
        else
        {
          objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", *MEMORY[0x1E4F1C4A8], 4864, @"%@: value (%d) for key (%@) too large to fit in a char", _NSMethodExceptionProem((objc_class *)a1, sel_decodeInt32ForKey_), v51, v11);
          uint64_t result = 0;
        }
      }
      *a3 = v28;
      return result;
    case 'd':
      uint64_t v29 = *(int *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = v29 + 1;
      if (v29 > 0x27) {
        Swift::String v30 = +[NSString stringWithFormat:@"$%ld", v29];
      }
      else {
        Swift::String v30 = (NSString *)generic_keys[v29];
      }
      return _decodeDouble(a1, v30, (double *)a3);
    case 'e':
    case 'g':
    case 'h':
    case 'j':
    case 'k':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'r':
      goto LABEL_27;
    case 'f':
      uint64_t v31 = *(int *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = v31 + 1;
      if (v31 > 0x27) {
        Swift::String v32 = +[NSString stringWithFormat:@"$%ld", v31];
      }
      else {
        Swift::String v32 = (NSString *)generic_keys[v31];
      }
      return _decodeFloat((void *)a1, v32, (float *)a3);
    case 'i':
    case 'l':
LABEL_19:
      uint64_t v14 = *(int *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = v14 + 1;
      if (v14 > 0x27) {
        char v15 = +[NSString stringWithFormat:@"$%ld", v14];
      }
      else {
        char v15 = (NSString *)generic_keys[v14];
      }
      return _decodeInt32((void *)a1, v15, a3);
    case 'q':
      goto LABEL_25;
    case 's':
      goto LABEL_15;
    default:
      if (a2 == 81)
      {
LABEL_25:
        uint64_t v17 = *(int *)(a1 + 64);
        *(_DWORD *)(a1 + 64) = v17 + 1;
        if (v17 > 0x27) {
          unint64_t v18 = +[NSString stringWithFormat:@"$%ld", v17];
        }
        else {
          unint64_t v18 = (NSString *)generic_keys[v17];
        }
        uint64_t result = _decodeInt64(a1, v18, (unint64_t *)a3);
      }
      else
      {
        if (a2 != 83) {
          goto LABEL_27;
        }
LABEL_15:
        uint64_t v12 = *(int *)(a1 + 64);
        *(_DWORD *)(a1 + 64) = v12 + 1;
        if (v12 > 0x27) {
          unint64_t v13 = +[NSString stringWithFormat:@"$%ld", v12];
        }
        else {
          unint64_t v13 = (NSString *)generic_keys[v12];
        }
        unsigned int v51 = 0;
        int v42 = _decodeInt32((void *)a1, v13, &v51);
        uint64_t result = 0;
        __int16 v43 = v51;
        if (v42)
        {
          if (v51 == (__int16)v51)
          {
            uint64_t result = 1;
          }
          else
          {
            objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", *MEMORY[0x1E4F1C4A8], 4864, @"%@: value (%d) for key (%@) too large to fit in a short", _NSMethodExceptionProem((objc_class *)a1, sel_decodeInt32ForKey_), v51, v13);
            uint64_t result = 0;
          }
        }
        *(_WORD *)a3 = v43;
      }
      break;
  }
  return result;
}

uint64_t _decodeObject_old(uint64_t a1)
{
  v25[1] = *MEMORY[0x1E4F143B8];
  uint64_t v24 = 0;
  v25[0] = 0;
  if (!_decodeNewPtr(*(void *)(a1 + 8), v25, &v24, *(const __CFDictionary **)(a1 + 48), (uint64_t *)(a1 + 72), (void *)(a1 + 16), *(unsigned char *)(a1 + 41) != 0))
  {
    if (!v25[0]) {
      return 0;
    }
    if (*(unsigned char *)(v25[0] + 8) != 2)
    {
      uint64_t v19 = (void *)MEMORY[0x1E4F1CA00];
      unint64_t v20 = @"NSArchiverArchiveInconsistency";
      uint64_t v21 = (NSString *)@"*** reuse label points to invalid type";
LABEL_25:
      objc_exception_throw((id)[v19 exceptionWithName:v20 reason:v21 userInfo:0]);
    }
    return *(void *)v25[0];
  }
  Class v2 = _decodeClass(a1);
  if (*(unsigned char *)(a1 + 40) == 3)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    BOOL v4 = *(unsigned char *)(a1 + 41) != 0;
    uint64_t v5 = _decodeCharAtCursor(*(void *)(v3 + 8), *(void *)(v3 + 16), (void *)(a1 + 16));
    _decodeIntStartingWithChar(v3, v5, (void *)(a1 + 16), v4);
  }
  if (!v2)
  {
    uint64_t v17 = +[NSString stringWithFormat:@"*** class error for '%@': %@", @"NULL", @"found null class"];
    goto LABEL_22;
  }
  uint64_t v6 = [(objc_class *)v2 allocWithZone:*(void *)(a1 + 24)];
  uint64_t v7 = malloc_type_calloc(1uLL, 0x10uLL, 0x108004022EE8E53uLL);
  if (!v7) {
    goto LABEL_20;
  }
  *(void *)uint64_t v7 = v6;
  unsigned char v7[8] = 2;
  uint64_t v8 = (const void *)(v24 + 110);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), (const void *)(v24 + 110), v7);
  uint64_t v9 = [[(objc_class *)v6 initWithCoder:a1] awakeAfterUsingCoder:a1];
  uint64_t v10 = malloc_type_calloc(1uLL, 0x10uLL, 0x108004022EE8E53uLL);
  if (!v10) {
    goto LABEL_20;
  }
  *(void *)uint64_t v10 = v9;
  v10[8] = 2;
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), v8, v10);
  if (!v9) {
    goto LABEL_13;
  }
  uint64_t v11 = *(unint64_t **)(a1 + 88);
  unint64_t v13 = *v11;
  unint64_t v12 = v11[1];
  uint64_t v14 = (char *)v11[2];
  if (v12 <= *v11)
  {
    unint64_t v15 = v12 + 512;
    if ((v12 + 512) >> 60)
    {
      uint64_t v21 = +[NSString stringWithFormat:@"*** value %lu too large (may have wrapped)", v12 + 512];
      uint64_t v19 = (void *)MEMORY[0x1E4F1CA00];
      uint64_t v22 = (const NSExceptionName *)MEMORY[0x1E4F1C3A8];
      goto LABEL_23;
    }
    uint64_t v14 = NSReallocateObjectArray(v14, v12 + 512);
    if (v14)
    {
      uint64_t v16 = *(void *)(a1 + 88);
      *(void *)(v16 + 8) = v15;
      *(void *)(v16 + 16) = v14;
      goto LABEL_12;
    }
LABEL_20:
    uint64_t v19 = (void *)MEMORY[0x1E4F1CA00];
    unint64_t v20 = (__CFString *)*MEMORY[0x1E4F1C4A0];
    uint64_t v21 = (NSString *)@"*** memory allocation failed";
    goto LABEL_25;
  }
LABEL_12:
  *(void *)&v14[8 * v13] = v9;
  ++**(void **)(a1 + 88);
LABEL_13:
  if (_decodeCharAtCursor(*(void *)(*(void *)(a1 + 8) + 8), *(void *)(*(void *)(a1 + 8) + 16), (void *)(a1 + 16)) != -122)
  {
    uint64_t v17 = +[NSString stringWithFormat:@"*** NSUnarchiver: inconsistency between written and read data for object %p", v9, v23];
LABEL_22:
    uint64_t v21 = v17;
    uint64_t v19 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v22 = &NSInconsistentArchiveException;
LABEL_23:
    unint64_t v20 = (__CFString *)*v22;
    goto LABEL_25;
  }
  return v9;
}

uint64_t checkExpected(uint64_t __s, char *__s2)
{
  if ((char *)__s != __s2)
  {
    uint64_t v3 = (const char *)__s;
    if (!__s)
    {
      uint64_t v11 = +[NSString stringWithFormat:@"*** file inconsistency: read type is null, expecting '%s'", __s2, v12];
      goto LABEL_31;
    }
    int v4 = *(unsigned __int8 *)__s;
    int v5 = *__s2;
    if (v4 != v5 || strlen((const char *)__s) != 1 || (__s = strlen(__s2), __s != 1))
    {
      __s = strcmp(v3, __s2);
      if (__s)
      {
        if (!v4)
        {
LABEL_28:
          if (!v5) {
            return __s;
          }
LABEL_30:
          uint64_t v11 = +[NSString stringWithFormat:@"*** file inconsistency: read '%s', expecting '%s'", v3, __s2];
LABEL_31:
          objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSArchiverArchiveInconsistency" reason:v11 userInfo:0]);
        }
        if (v4 != 108 || v5 != 105)
        {
          uint64_t v6 = __s2;
          uint64_t v7 = v3;
          do
          {
            int v8 = *v6;
            if (!*v6) {
              goto LABEL_30;
            }
            if (v4 == v8 || v4 == 108 && v8 == 105)
            {
              ++v7;
              ++v6;
            }
            else if (v4 == 63)
            {
              ++v7;
              if (*v6)
              {
                do
                {
                  if (v8 == 61) {
                    break;
                  }
                  int v9 = *++v6;
                  int v8 = v9;
                }
                while (v9);
              }
            }
            else
            {
              if (v8 != 63) {
                goto LABEL_30;
              }
              ++v6;
              if (v4)
              {
                do
                {
                  if (v4 == 61) {
                    break;
                  }
                  int v10 = *(unsigned __int8 *)++v7;
                  int v4 = v10;
                }
                while (v10);
              }
            }
            int v4 = *(unsigned __int8 *)v7;
          }
          while (*v7);
          int v5 = *v6;
          goto LABEL_28;
        }
      }
    }
  }
  return __s;
}

const char *_decodeValueOfObjCType(uint64_t a1, char *a2, NSUInteger *a3)
{
  sizep[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a2 + 1;
  int v6 = *a2;
  char v8 = *a2;
  if (v6 <= 80)
  {
    if (v6 > 57)
    {
      switch(*a2)
      {
        case ':':
          int v9 = _decodeReusedCStringUsingTable(*(void *)(a1 + 8), *(unint64_t **)(a1 + 56), (void *)(a1 + 16), *(unsigned char *)(a1 + 41) != 0);
          SEL Name = (void *)sel_registerName(v9);
          goto LABEL_83;
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case 'A':
          goto LABEL_90;
        case '@':
          Swift::String v37 = (void *)_decodeObject_old(a1);
          NSUInteger v38 = (NSUInteger)v37;
          if (v37) {
            id v39 = v37;
          }
          *a3 = v38;
          return v7;
        case 'B':
          *(unsigned char *)a3 = _decodeCharAtCursor(*(void *)(*(void *)(a1 + 8) + 8), *(void *)(*(void *)(a1 + 8) + 16), (void *)(a1 + 16)) != 0;
          return v7;
        case 'C':
          goto LABEL_7;
        default:
          if (v6 == 73 || v6 == 76) {
            goto LABEL_24;
          }
          goto LABEL_90;
      }
    }
    switch(*a2)
    {
      case '!':
        return v7;
      case '#':
        SEL Name = _decodeClass(a1);
        goto LABEL_83;
      case '%':
        uint64_t v52 = _decodeReusedCStringUsingTable(*(void *)(a1 + 8), *(unint64_t **)(a1 + 56), (void *)(a1 + 16), *(unsigned char *)(a1 + 41) != 0);
        BOOL v53 = sel_registerName(v52);
        SEL Name = (void *)sel_getName(v53);
        goto LABEL_83;
      case '(':
        sizep[0] = 0;
        BOOL v54 = skipAggregateName(a2 + 1);
        uint64_t v7 = NSGetSizeAndAlignment(v54 - 1, sizep, 0);
        if (sizep[0])
        {
          NSUInteger v55 = 0;
          do
            _decodeValueOfObjCType(a1, "C", (char *)a3 + v55++);
          while (v55 < sizep[0]);
        }
        return v7;
      case '*':
        NSUInteger alignp = 0;
        sizep[0] = 0;
        if (_decodeNewPtr(*(void *)(a1 + 8), &alignp, (uint64_t *)sizep, *(const __CFDictionary **)(a1 + 48), (uint64_t *)(a1 + 72), (void *)(a1 + 16), *(unsigned char *)(a1 + 41) != 0))
        {
          char v56 = _decodeReusedCStringUsingTable(*(void *)(a1 + 8), *(unint64_t **)(a1 + 56), (void *)(a1 + 16), *(unsigned char *)(a1 + 41) != 0);
          uint64_t v57 = malloc_type_calloc(1uLL, 0x10uLL, 0x108004022EE8E53uLL);
          if (v57)
          {
            *(void *)uint64_t v57 = v56;
            v57[8] = 0;
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), (const void *)(sizep[0] + 110), v57);
LABEL_79:
            if (((unint64_t)v56 & 0x8000000000000000) == 0)
            {
              if (v56)
              {
                SEL Name = strdup(v56);
LABEL_83:
                *a3 = (NSUInteger)Name;
                return v7;
              }
LABEL_82:
              SEL Name = 0;
              goto LABEL_83;
            }
            int v66 = v8;
            Swift::String v67 = "invalid string";
LABEL_92:
            typeDescriptorError(v66, (uint64_t)a2, (uint64_t)v67);
          }
          uint64_t v64 = (void *)MEMORY[0x1E4F1CA00];
          unint64_t v65 = (__CFString *)*MEMORY[0x1E4F1C4A0];
          int64_t v63 = @"*** memory allocation failed";
        }
        else
        {
          if (!alignp) {
            goto LABEL_82;
          }
          if (!*(unsigned char *)(alignp + 8))
          {
            char v56 = *(const char **)alignp;
            goto LABEL_79;
          }
          uint64_t v64 = (void *)MEMORY[0x1E4F1CA00];
          unint64_t v65 = @"NSArchiverArchiveInconsistency";
          int64_t v63 = @"*** reuse label points to invalid type";
        }
        break;
      default:
        goto LABEL_90;
    }
LABEL_88:
    objc_exception_throw((id)[v64 exceptionWithName:v65 reason:v63 userInfo:0]);
  }
  if (v6 <= 98)
  {
    switch(v6)
    {
      case 'Q':
LABEL_25:
        uint64_t v23 = *(void *)(a1 + 8);
        uint64_t v24 = (void *)(a1 + 16);
        int v25 = *(unsigned __int8 *)(a1 + 41);
        int v26 = _decodeCharAtCursor(*(void *)(v23 + 8), *(void *)(v23 + 16), (void *)(a1 + 16));
        switch(v26)
        {
          case -121:
            sizep[0] = 0;
            _deserializeBytes(sizep, *(void *)(v23 + 8), *(void *)(v23 + 16), v24, 8);
            NSUInteger v27 = sizep[0];
            unint64_t v59 = bswap64(sizep[0]);
            if (v25) {
              NSUInteger v27 = v59;
            }
            break;
          case -126:
            LODWORD(sizep[0]) = 0;
            _deserializeBytes(sizep, *(void *)(v23 + 8), *(void *)(v23 + 16), v24, 4);
            LODWORD(v27) = sizep[0];
            unsigned int v60 = bswap32(sizep[0]);
            if (v25) {
              LODWORD(v27) = v60;
            }
            NSUInteger v27 = (int)v27;
            break;
          case -127:
            LOWORD(sizep[0]) = 0;
            _deserializeBytes(sizep, *(void *)(v23 + 8), *(void *)(v23 + 16), v24, 2);
            LOWORD(v27) = sizep[0];
            unsigned int v28 = bswap32(LOWORD(sizep[0])) >> 16;
            if (v25) {
              LOWORD(v27) = v28;
            }
            NSUInteger v27 = (__int16)v27;
            break;
          default:
            NSUInteger v27 = v26;
            break;
        }
        *a3 = v27;
        break;
      case 'S':
LABEL_31:
        uint64_t v29 = *(void *)(a1 + 8);
        Swift::String v30 = (void *)(a1 + 16);
        int v31 = *(unsigned __int8 *)(a1 + 41);
        int v32 = _decodeCharAtCursor(*(void *)(v29 + 8), *(void *)(v29 + 16), (void *)(a1 + 16));
        if (v32 == -127)
        {
          LOWORD(sizep[0]) = 0;
          _deserializeBytes(sizep, *(void *)(v29 + 8), *(void *)(v29 + 16), v30, 2);
          unsigned int v33 = bswap32(LOWORD(sizep[0])) >> 16;
          if (v31) {
            LOWORD(v32) = v33;
          }
          else {
            LOWORD(v32) = sizep[0];
          }
        }
        *(_WORD *)a3 = v32;
        break;
      case '[':
        sizep[0] = 0;
        unsigned int v11 = *(unsigned __int8 *)v7;
        if (v11 - 48 > 9)
        {
          uint64_t v16 = NSGetSizeAndAlignment(v7, sizep, 0);
        }
        else
        {
          unint64_t v12 = 0;
          do
          {
            unint64_t v13 = v12;
            if (v12 >= 0xCCCCCCCCCCCCCCDLL)
            {
              uint64_t v62 = +[NSString stringWithFormat:@"*** value %lu too large (may have wrapped)", v12];
              goto LABEL_87;
            }
            unsigned int v14 = v11;
            unsigned int v15 = *(unsigned __int8 *)++v7;
            unsigned int v11 = v15;
            unint64_t v12 = 10 * v12 + v14 - 48;
          }
          while (v15 - 48 < 0xA);
          uint64_t v16 = NSGetSizeAndAlignment(v7, sizep, 0);
          if (v12)
          {
            NSUInteger v17 = 0;
            uint64_t v18 = 10 * v13 + v14 - 48;
            while (v17 <= 0x7FFFFFFFFFFFFFFFLL / sizep[0])
            {
              _decodeValueOfObjCType(a1, v7, (char *)a3 + sizep[0] * v17++);
              if (v18 == v17) {
                goto LABEL_62;
              }
            }
            uint64_t v62 = +[NSString stringWithFormat:@"*** value %lu too large (may have wrapped)", v17];
LABEL_87:
            int64_t v63 = (__CFString *)v62;
            uint64_t v64 = (void *)MEMORY[0x1E4F1CA00];
            unint64_t v65 = (__CFString *)*MEMORY[0x1E4F1C3A8];
            goto LABEL_88;
          }
        }
LABEL_62:
        int v58 = *(unsigned __int8 *)v16;
        if (v58 != 93)
        {
          int v66 = (char)v58;
          Swift::String v67 = "missing ']' in type descriptor";
          goto LABEL_92;
        }
        return v16 + 1;
      default:
LABEL_90:
        int v66 = v8;
        Swift::String v67 = "unknown type descriptor";
        goto LABEL_92;
    }
  }
  else
  {
    switch(*a2)
    {
      case 'c':
LABEL_7:
        *(unsigned char *)a3 = _decodeCharAtCursor(*(void *)(*(void *)(a1 + 8) + 8), *(void *)(*(void *)(a1 + 8) + 16), (void *)(a1 + 16));
        return v7;
      case 'd':
        uint64_t v40 = *(void *)(a1 + 8);
        uint64_t v41 = (void *)(a1 + 16);
        int v42 = *(unsigned __int8 *)(a1 + 41);
        uint64_t v43 = _decodeCharAtCursor(*(void *)(v40 + 8), *(void *)(v40 + 16), (void *)(a1 + 16));
        if (v43 == -125)
        {
          sizep[0] = 0;
          _deserializeBytes(sizep, *(void *)(v40 + 8), *(void *)(v40 + 16), v41, 8);
          double v44 = *(double *)sizep;
          double v45 = COERCE_DOUBLE(bswap64(sizep[0]));
          if (v42) {
            double v44 = v45;
          }
        }
        else
        {
          double v44 = (double)(int)_decodeIntStartingWithChar(v40, v43, v41, v42 != 0);
        }
        *(double *)a3 = v44;
        return v7;
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'r':
        goto LABEL_90;
      case 'f':
        uint64_t v46 = *(void *)(a1 + 8);
        uint64_t v47 = (void *)(a1 + 16);
        int v48 = *(unsigned __int8 *)(a1 + 41);
        uint64_t v49 = _decodeCharAtCursor(*(void *)(v46 + 8), *(void *)(v46 + 16), (void *)(a1 + 16));
        if (v49 == -125)
        {
          LODWORD(sizep[0]) = 0;
          _deserializeBytes(sizep, *(void *)(v46 + 8), *(void *)(v46 + 16), v47, 4);
          float v50 = *(float *)sizep;
          float v51 = COERCE_FLOAT(bswap32(sizep[0]));
          if (v48) {
            float v50 = v51;
          }
        }
        else
        {
          float v50 = (float)(int)_decodeIntStartingWithChar(v46, v49, v47, v48 != 0);
        }
        *(float *)a3 = v50;
        return v7;
      case 'i':
      case 'l':
LABEL_24:
        uint64_t v19 = *(void *)(a1 + 8);
        unint64_t v20 = (void *)(a1 + 16);
        BOOL v21 = *(unsigned char *)(a1 + 41) != 0;
        uint64_t v22 = _decodeCharAtCursor(*(void *)(v19 + 8), *(void *)(v19 + 16), (void *)(a1 + 16));
        *(_DWORD *)a3 = _decodeIntStartingWithChar(v19, v22, v20, v21);
        return v7;
      case 'q':
        goto LABEL_25;
      case 's':
        goto LABEL_31;
      default:
        if (v6 != 123) {
          goto LABEL_90;
        }
        uint64_t v34 = skipAggregateName(a2 + 1);
        if (*v34 != 125)
        {
          unint64_t v35 = 0;
          do
          {
            NSUInteger alignp = 0;
            sizep[0] = 0;
            NSGetSizeAndAlignment(v34, sizep, &alignp);
            unint64_t v36 = roundUp(v35, alignp);
            uint64_t v34 = (char *)_decodeValueOfObjCType(a1, v34, (char *)a3 + v36);
            unint64_t v35 = sizep[0] + v36;
          }
          while (*v34 != 125);
        }
        uint64_t v7 = v34 + 1;
        break;
    }
  }
  return v7;
}

Class _decodeClass(uint64_t a1)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  uint64_t v22 = 0;
  v23[0] = 0;
  if (!_decodeNewPtr(*(void *)(a1 + 8), v23, &v22, *(const __CFDictionary **)(a1 + 48), (uint64_t *)(a1 + 72), (void *)(a1 + 16), *(unsigned char *)(a1 + 41) != 0))
  {
    if (!v23[0]) {
      return 0;
    }
    if (*(unsigned char *)(v23[0] + 8) == 1) {
      return *(Class *)v23[0];
    }
    uint64_t v18 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v19 = @"NSArchiverArchiveInconsistency";
    unint64_t v20 = (NSString *)@"*** reuse label points to invalid type";
LABEL_30:
    objc_exception_throw((id)[v18 exceptionWithName:v19 reason:v20 userInfo:0]);
  }
  Class v2 = _decodeReusedCStringUsingTable(*(void *)(a1 + 8), *(unint64_t **)(a1 + 56), (void *)(a1 + 16), *(unsigned char *)(a1 + 41) != 0);
  if (!v2)
  {
    uint64_t v18 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v19 = @"NSArchiverArchiveInconsistency";
    unint64_t v20 = (NSString *)@"*** class name is null";
    goto LABEL_30;
  }
  if (*v2 == 37) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = v2;
  }
  int v4 = [[NSString alloc] initWithCString:v3 encoding:CFStringConvertEncodingToNSStringEncoding(0x600u)];
  if (!v4) {
    goto LABEL_24;
  }
  int v5 = v4;
  uint64_t v6 = *(void *)(a1 + 8);
  BOOL v7 = *(unsigned char *)(a1 + 41) != 0;
  uint64_t v8 = _decodeCharAtCursor(*(void *)(v6 + 8), *(void *)(v6 + 16), (void *)(a1 + 16));
  int v9 = _decodeIntStartingWithChar(v6, v8, (void *)(a1 + 16), v7);
  CFDictionaryRef v10 = *(const __CFDictionary **)(a1 + 80);
  if (!v10 || (id Value = (NSString *)CFDictionaryGetValue(v10, v5)) == 0)
  {
    id Value = (NSString *)decodingMap;
    if (decodingMap) {
      id Value = (NSString *)CFDictionaryGetValue((CFDictionaryRef)decodingMap, v5);
    }
  }
  if (Value) {
    unint64_t v12 = Value;
  }
  else {
    unint64_t v12 = v5;
  }
  unint64_t v13 = *(void **)(a1 + 96);
  if (v13 && ([v13 containsObject:v12] & 1) == 0)
  {
    unint64_t v20 = +[NSString stringWithFormat:@"*** data to unarchive contains class (%@) which has not been allowed", v12];
    uint64_t v18 = (void *)MEMORY[0x1E4F1CA00];
    BOOL v21 = (const NSExceptionName *)MEMORY[0x1E4F1C3C8];
    goto LABEL_28;
  }
  Class v14 = NSClassFromString(v12);
  if (!v14)
  {
    unint64_t v20 = +[NSString stringWithFormat:@"*** class error for '%@': %@", v12, @"class not loaded"];
    uint64_t v18 = (void *)MEMORY[0x1E4F1CA00];
    BOOL v21 = &NSInconsistentArchiveException;
LABEL_28:
    uint64_t v19 = (__CFString *)*v21;
    goto LABEL_30;
  }
  Class v15 = v14;
  _NSCoderCheckPotentiallyMangledClassNameAndWarn((uint64_t)v14, 0);
  self;
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 64), v12, (const void *)v9);
  uint64_t v16 = malloc_type_calloc(1uLL, 0x10uLL, 0x108004022EE8E53uLL);
  if (!v16)
  {
LABEL_24:
    uint64_t v18 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v19 = (__CFString *)*MEMORY[0x1E4F1C4A0];
    unint64_t v20 = (NSString *)@"*** memory allocation failed";
    goto LABEL_30;
  }
  *(void *)uint64_t v16 = v15;
  v16[8] = 1;
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), (const void *)(v22 + 110), v16);
  _decodeClass(a1);

  return v15;
}

uint64_t _decodeNewPtr(uint64_t a1, void *a2, uint64_t *a3, const __CFDictionary *a4, uint64_t *a5, void *a6, int a7)
{
  uint64_t v14 = _decodeCharAtCursor(*(void *)(a1 + 8), *(void *)(a1 + 16), a6);
  if (v14 == -124)
  {
    uint64_t v16 = *a5 + 1;
    *a5 = v16;
    *a3 = v16;
    return 1;
  }
  else if (v14 == 133)
  {
    uint64_t result = 0;
    *a2 = 0;
  }
  else
  {
    int v17 = _decodeIntStartingWithChar(a1, v14, a6, a7);
    *a3 = v17;
    id Value = CFDictionaryGetValue(a4, (const void *)(v17 + 110));
    uint64_t result = 0;
    *a2 = Value;
  }
  return result;
}

unsigned char *_decodeReusedCStringUsingTable(uint64_t a1, unint64_t *a2, void *a3, int a4)
{
  uint64_t v8 = _decodeCharAtCursor(*(void *)(a1 + 8), *(void *)(a1 + 16), a3);
  if (v8 == -123) {
    return 0;
  }
  if (v8 == 132)
  {
    int v9 = _decodeCStringAtCursor(a1, a3, a4);
    unint64_t v10 = *a2;
    if (*a2 != a2[2])
    {
      uint64_t v12 = a2[3];
      goto LABEL_12;
    }
    unint64_t v11 = a2[1] + v10;
    a2[1] = v10;
    a2[2] = v11;
    if (!(v11 >> 60))
    {
      uint64_t v12 = MEMORY[0x185306D80](a2[3], 8 * v11, 0x10040436913F5, &__block_literal_global_0);
      a2[3] = v12;
      unint64_t v10 = *a2;
LABEL_12:
      *a2 = v10 + 1;
      *(void *)(v12 + 8 * v10) = v9;
      return v9;
    }
    int v17 = +[NSString stringWithFormat:@"*** value %lu too large (may have wrapped)", v11];
    Class v15 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v16 = (__CFString *)*MEMORY[0x1E4F1C3A8];
LABEL_16:
    objc_exception_throw((id)[v15 exceptionWithName:v16 reason:v17 userInfo:0]);
  }
  int v13 = _decodeIntStartingWithChar(a1, v8, a3, a4);
  if (v13 <= -111)
  {
    Class v15 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v16 = @"NSArchiverArchiveInconsistency";
    int v17 = (NSString *)@"*** Incorrect archive: invalid length";
    goto LABEL_16;
  }
  unint64_t v14 = (v13 + 110);
  if (*a2 <= v14 || (int v9 = *(unsigned char **)(a2[3] + 8 * v14)) == 0)
  {
    Class v15 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v16 = @"NSArchiverArchiveInconsistency";
    int v17 = (NSString *)@"*** Incorrect archive: unexpected byte";
    goto LABEL_16;
  }
  return v9;
}

uint64_t _decodeCharAtCursor(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *a3;
  BOOL v5 = __CFADD__(*a3, a1) && v3 > 0;
  if (v3 == 0x8000000000000000
    || v5
    || v3 < 0 && a1 < -v3
    || !a2
    || -a2 < a1 && a2 != 1
    || (uint64_t v6 = (char *)(v3 + a1), v3 + a1 < a1)
    || a2 - 1 + a1 < (unint64_t)v6)
  {
    uint64_t v8 = +[NSString stringWithFormat:@"*** End of archive encountered prematurely at %ld", *a3];
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSArchiverArchiveInconsistency" reason:v8 userInfo:0]);
  }
  uint64_t result = *v6;
  *a3 = v3 + 1;
  return result;
}

uint64_t _decodeIntStartingWithChar(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  switch(a2)
  {
    case 0xFFFFFF81:
      unsigned __int16 v10 = 0;
      _deserializeBytes(&v10, *(void *)(a1 + 8), *(void *)(a1 + 16), a3, 2);
      unsigned __int16 v5 = v10;
      unsigned int v6 = bswap32(v10) >> 16;
      if (a4) {
        unsigned __int16 v5 = v6;
      }
      return (__int16)v5;
    case 0xFFFFFF82:
      unsigned int v9 = 0;
      _deserializeBytes(&v9, *(void *)(a1 + 8), *(void *)(a1 + 16), a3, 4);
      unsigned int v7 = bswap32(v9);
      if (a4) {
        return v7;
      }
      else {
        return v9;
      }
    case 0xFFFFFF87:
      objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C4A8] reason:@"more data than room" userInfo:0]);
  }
  return a2;
}

unsigned char *_decodeCStringAtCursor(uint64_t a1, void *a2, int a3)
{
  uint64_t v6 = _decodeCharAtCursor(*(void *)(a1 + 8), *(void *)(a1 + 16), a2);
  if (v6 != -123)
  {
    unsigned int v8 = _decodeIntStartingWithChar(a1, v6, a2, a3);
    if ((v8 & 0x80000000) != 0)
    {
      uint64_t v12 = (void *)MEMORY[0x1E4F1CA00];
      int v13 = @"NSArchiverArchiveInconsistency";
      unint64_t v14 = @"*** Incorrect archive: invalid length";
    }
    else
    {
      unsigned int v9 = v8;
      unsigned __int16 v10 = malloc_type_malloc(v8 + 1, 0x4645BE22uLL);
      if (v10)
      {
        unsigned int v7 = v10;
        _deserializeBytes(v10, *(void *)(a1 + 8), *(void *)(a1 + 16), a2, v9);
        v7[v9] = 0;
        return v7;
      }
      uint64_t v12 = (void *)MEMORY[0x1E4F1CA00];
      int v13 = (__CFString *)*MEMORY[0x1E4F1C4A0];
      unint64_t v14 = @"*** memory allocation failed";
    }
    objc_exception_throw((id)[v12 exceptionWithName:v13 reason:v14 userInfo:0]);
  }
  return 0;
}

void *_deserializeBytes(void *a1, size_t a2, uint64_t a3, void *a4, int64_t __len)
{
  uint64_t v5 = *a4;
  BOOL v7 = __CFADD__(*a4, a2) && v5 > 0;
  if (v5 == 0x8000000000000000
    || v7
    || v5 < 0 && a2 < -v5
    || !a3
    || -a3 < a2 && a3 != 1
    || (unint64_t v10 = v5 + a2, v5 + a2 < a2)
    || (unint64_t v11 = a3 - 1 + a2, v11 < v10)
    || __len && (__len != 1 && v10 > -__len || (size_t v12 = __len + v10 - 1, v12 < a2) || v11 < v12))
  {
    unint64_t v14 = +[NSString stringWithFormat:@"*** End of archive encountered prematurely at %ld", *a4];
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSArchiverArchiveInconsistency" reason:v14 userInfo:0]);
  }
  uint64_t result = memmove(a1, (const void *)(v5 + a2), __len);
  *a4 += __len;
  return result;
}

NSPlaceholderNumber *newDecodedNumber(void *a1)
{
  sizep[128] = *MEMORY[0x1E4F143B8];
  typePtr = 0;
  [a1 decodeValueOfObjCType:"*" at:&typePtr size:8];
  Class v2 = typePtr;
  if (!typePtr) {
    return 0;
  }
  int v3 = *typePtr;
  if (!*typePtr || typePtr[1]) {
    goto LABEL_17;
  }
  if (v3 == 108)
  {
    char v4 = 105;
  }
  else
  {
    if (v3 != 76) {
      goto LABEL_9;
    }
    char v4 = 73;
  }
  char *typePtr = v4;
  Class v2 = typePtr;
LABEL_9:
  sizep[0] = 0;
  NSGetSizeAndAlignment(v2, sizep, 0);
  NSUInteger v5 = sizep[0];
  if (sizep[0] < 0x401)
  {
    uint64_t v6 = (unsigned __int8 *)sizep;
LABEL_13:
    [a1 decodeValueOfObjCType:typePtr at:v6 size:v5];
    BOOL v7 = newNumber(*typePtr, v6, v8);
    if (v6 != (unsigned __int8 *)sizep) {
      free(v6);
    }
    if (v7) {
      goto LABEL_16;
    }
LABEL_17:
    unsigned int v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"*** -[NSNumber initWithCoder:] bad objCType: \"%@\"", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
    free(typePtr);
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v9 userInfo:0]);
  }
  uint64_t v6 = (unsigned __int8 *)malloc_type_malloc(sizep[0], 0x50DA473AuLL);
  if (v6) {
    goto LABEL_13;
  }
  BOOL v7 = 0;
LABEL_16:
  free(typePtr);
  return v7;
}

NSPlaceholderNumber *newNumber(char a1, unsigned __int8 *a2, double a3)
{
  if (a1 <= 80)
  {
    if (a1 > 72)
    {
      if (a1 == 73) {
        return [(NSPlaceholderNumber *)&__placeholderNumber initWithUnsignedInt:*(unsigned int *)a2];
      }
      if (a1 == 76) {
        return [(NSPlaceholderNumber *)&__placeholderNumber initWithUnsignedLong:*(void *)a2];
      }
    }
    else
    {
      if (a1 == 66) {
        return [(NSPlaceholderNumber *)&__placeholderNumber initWithBool:*a2];
      }
      if (a1 == 67) {
        return [(NSPlaceholderNumber *)&__placeholderNumber initWithUnsignedChar:*a2];
      }
    }
    return 0;
  }
  else
  {
    switch(a1)
    {
      case 'c':
        return [(NSPlaceholderNumber *)&__placeholderNumber initWithChar:(char)*a2];
      case 'd':
        return [(NSPlaceholderNumber *)&__placeholderNumber initWithDouble:*(double *)a2];
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'r':
        return 0;
      case 'f':
        LODWORD(a3) = *(_DWORD *)a2;
        return [(NSPlaceholderNumber *)&__placeholderNumber initWithFloat:a3];
      case 'i':
        return [(NSPlaceholderNumber *)&__placeholderNumber initWithInt:*(unsigned int *)a2];
      case 'l':
        return [(NSPlaceholderNumber *)&__placeholderNumber initWithLong:*(void *)a2];
      case 'q':
        return [(NSPlaceholderNumber *)&__placeholderNumber initWithLongLong:*(void *)a2];
      case 's':
        return [(NSPlaceholderNumber *)&__placeholderNumber initWithShort:*(__int16 *)a2];
      default:
        if (a1 == 81)
        {
          uint64_t result = [(NSPlaceholderNumber *)&__placeholderNumber initWithUnsignedLongLong:*(void *)a2];
        }
        else
        {
          if (a1 != 83) {
            return 0;
          }
          uint64_t result = [(NSPlaceholderNumber *)&__placeholderNumber initWithUnsignedShort:*(unsigned __int16 *)a2];
        }
        break;
    }
  }
  return result;
}

uint64_t _NSReadMutableAttributedStringWithCoder(void *a1, void *a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  int v4 = [a1 allowsKeyedCoding];
  char v5 = v4;
  if (v4) {
    uint64_t v6 = [a1 decodeObjectOfClass:objc_opt_class() forKey:@"NSString"];
  }
  else {
    uint64_t v6 = [a1 decodeObject];
  }
  if (v6) {
    BOOL v7 = (__CFString *)v6;
  }
  else {
    BOOL v7 = &stru_1ECA5C228;
  }
  unint64_t v8 = [(__CFString *)v7 length];
  objc_msgSend(a2, "replaceCharactersInRange:withString:", 0, 0, v7);
  if (!v8) {
    return 1;
  }
  if ((v5 & 1) == 0)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 20;
    size_t v12 = (char *)__src;
    memset(__src, 0, sizeof(__src));
    while (1)
    {
      uint64_t v44 = 0;
      objc_msgSend(a1, "decodeValuesOfObjCTypes:", "iI", (char *)&v44 + 4, &v44);
      if (SHIDWORD(v44) < 1)
      {
LABEL_30:
        BOOL v17 = v10 >= v8;
        if (v12 && v12 != (char *)__src) {
          free(v12);
        }
        return v17;
      }
      if (v11 <= HIDWORD(v44)) {
        break;
      }
      uint64_t v13 = *(void *)&v12[8 * HIDWORD(v44)];
      if (!v13) {
        goto LABEL_28;
      }
LABEL_29:
      objc_msgSend(a2, "setAttributes:range:", v13, v10, v44);
      v10 += v44;
      if (v10 >= v8) {
        goto LABEL_30;
      }
    }
    if (2 * v11 <= (unint64_t)HIDWORD(v44)) {
      unint64_t v14 = (HIDWORD(v44) + 1);
    }
    else {
      unint64_t v14 = 2 * v11;
    }
    if (v12 == (char *)__src)
    {
      uint64_t v16 = (char *)NSAllocateObjectArray(v14);
      size_t v12 = v16;
      if (!v16) {
        goto LABEL_30;
      }
      memmove(v16, __src, 8 * v11);
    }
    else
    {
      Class v15 = NSReallocateObjectArray(v12, v14);
      size_t v12 = v15;
      if (!v15) {
        goto LABEL_30;
      }
      bzero(&v15[8 * v11], 8 * (v14 - v11));
    }
    uint64_t v11 = v14;
LABEL_28:
    uint64_t v13 = [a1 decodeObject];
    *(void *)&v12[8 * SHIDWORD(v44)] = v13;
    goto LABEL_29;
  }
  if (qword_1EB1EC980 != -1) {
    dispatch_once(&qword_1EB1EC980, &__block_literal_global_220);
  }
  if (objc_opt_isKindOfClass() & 1) != 0 && ([a1 _strictSecureDecodingEnabled]) {
    unsigned int v9 = &qword_1EB1EC970;
  }
  else {
    unsigned int v9 = &qword_1EB1EC978;
  }
  uint64_t v18 = objc_msgSend(a1, "decodeObjectOfClasses:forKey:", objc_msgSend((id)objc_msgSend(a1, "allowedClasses"), "setByAddingObjectsFromSet:", *v9), @"NSAttributes");
  uint64_t v19 = [a1 decodeObjectOfClass:objc_opt_class() forKey:@"NSAttributeInfo"];
  if (!v18) {
    return 1;
  }
  unint64_t v20 = (void *)v19;
  if (!v19 && _NSIsNSDictionary())
  {
    objc_msgSend(a2, "setAttributes:range:", v18, 0, v8);
    return 1;
  }
  uint64_t v21 = [v20 bytes];
  uint64_t v22 = [v20 length];
  unint64_t v23 = 0;
  uint64_t v24 = (unsigned __int8 *)(v21 + v22);
LABEL_40:
  if ((unsigned __int8 *)v21 != v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 1;
    NSUInteger v27 = (unsigned __int8 *)v21;
    do
    {
      int v29 = *v27++;
      int v28 = v29;
      int v30 = (char)v29;
      int v31 = v29 - 128;
      if ((v29 & 0x80u) != 0) {
        int v28 = v31;
      }
      uint64_t v32 = v26 * v28;
      BOOL v33 = __CFADD__(v32, v25);
      v25 += v32;
      if (v33) {
        break;
      }
      if ((v30 & 0x80000000) == 0)
      {
        uint64_t v34 = (unsigned __int8 *)(v21 + 1);
        if (v34 != v24)
        {
          uint64_t v35 = 0;
          uint64_t v36 = 1;
          Swift::String v37 = v34;
          while (1)
          {
            int v39 = *v37++;
            int v38 = v39;
            int v40 = (char)v39;
            int v41 = v39 - 128;
            if ((v39 & 0x80u) != 0) {
              int v38 = v41;
            }
            uint64_t v42 = v36 * v38;
            BOOL v33 = __CFADD__(v42, v35);
            v35 += v42;
            if (v33) {
              break;
            }
            if ((v40 & 0x80000000) == 0)
            {
              objc_msgSend(a2, "setAttributes:range:", objc_msgSend(v18, "objectAtIndex:", v35), v23, v25);
              v23 += v25;
              uint64_t v21 = (uint64_t)(v34 + 1);
              BOOL v17 = 1;
              if (v23 < v8) {
                goto LABEL_40;
              }
              return v17;
            }
            BOOL v17 = 0;
            v36 <<= 7;
            uint64_t v34 = v37;
            if (v37 == v24) {
              return v17;
            }
          }
        }
        return 0;
      }
      v26 <<= 7;
      uint64_t v21 = (uint64_t)v27;
    }
    while (v27 != v24);
  }
  return 0;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance Data@<X0>(void (*a1)(uint64_t, uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return Data.withContiguousStorageIfAvailable<A>(_:)(a1, *(void *)v3, *(void *)(v3 + 8), a2, a3);
}

uint64_t Data.withContiguousStorageIfAvailable<A>(_:)@<X0>(void (*a1)(uint64_t, uint64_t)@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  v31[2] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = v5;
  switch(a3 >> 62)
  {
    case 1uLL:
      if (a2 >> 32 >= (int)a2)
      {
        uint64_t v13 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (!v13)
        {
          outlined copy of Data._Representation(a2, a3);
          uint64_t v17 = 0;
          uint64_t v18 = 0;
LABEL_26:
          a1(v17, v18);
          if (!v5) {
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(a5, 0, 1, a4);
          }
          return outlined consume of Data._Representation(a2, a3);
        }
        uint64_t v14 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        if (!__OFSUB__((int)a2, v14))
        {
          uint64_t v15 = v13 + (int)a2 - v14;
          if (*(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= (a2 >> 32) - (int)a2) {
            uint64_t v16 = (a2 >> 32) - (int)a2;
          }
          else {
            uint64_t v16 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
          }
          outlined copy of Data._Representation(a2, a3);
          uint64_t v17 = v15;
          uint64_t v18 = v16;
          goto LABEL_26;
        }
        goto LABEL_32;
      }
      __break(1u);
      goto LABEL_31;
    case 2uLL:
      uint64_t v19 = *(void *)(a2 + 16);
      uint64_t v20 = *(void *)(a2 + 24);
      uint64_t v21 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (v21)
      {
        uint64_t v22 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        BOOL v23 = __OFSUB__(v19, v22);
        uint64_t v24 = v19 - v22;
        if (v23) {
          goto LABEL_33;
        }
        BOOL v23 = __OFSUB__(v20, v19);
        uint64_t v25 = v20 - v19;
        if (!v23)
        {
          uint64_t v26 = v21 + v24;
          if (*(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= v25) {
            uint64_t v27 = v25;
          }
          else {
            uint64_t v27 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
          }
          swift_retain();
          swift_retain();
          uint64_t v28 = v26;
          uint64_t v29 = v27;
          goto LABEL_22;
        }
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
      }
      if (__OFSUB__(v20, v19)) {
        goto LABEL_31;
      }
      swift_retain();
      swift_retain();
      uint64_t v28 = 0;
      uint64_t v29 = 0;
LABEL_22:
      a1(v28, v29);
      if (!v7) {
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(a5, 0, 1, a4);
      }
      swift_release();
      return swift_release();
    case 3uLL:
      memset(v31, 0, 14);
      uint64_t v12 = 0;
      goto LABEL_18;
    default:
      v31[0] = a2;
      LOWORD(v31[1]) = a3;
      BYTE2(v31[1]) = BYTE2(a3);
      BYTE3(v31[1]) = BYTE3(a3);
      BYTE4(v31[1]) = BYTE4(a3);
      uint64_t v12 = BYTE6(a3);
      BYTE5(v31[1]) = BYTE5(a3);
LABEL_18:
      uint64_t result = ((uint64_t (*)(void *, uint64_t))a1)(v31, v12);
      if (!v5) {
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(a5, 0, 1, a4);
      }
      return result;
  }
}

uint64_t specialized thunk for @callee_guaranteed (@unowned UnsafeBufferPointer<UInt8>) -> (@owned String?, @error @owned Error)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = static String._tryFromUTF8(_:)();
  if (!v7) {
    uint64_t result = (uint64_t)specialized String.init<A, B>(_validating:as:)(a1, a2);
  }
  *a3 = result;
  a3[1] = v7;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance [A](void *a1, uint64_t *a2, uint64_t a3)
{
  return static Array._forceBridgeFromObjectiveC(_:result:)(a1, a2, *(void *)(a3 + 16));
}

void static Date.distantPast.getter(void *a1@<X8>)
{
  *a1 = 0xC22D63C8C5000000;
}

ValueMetadata *type metadata accessor for AttributedString.Runs()
{
  return &type metadata for AttributedString.Runs;
}

uint64_t destroy for PredicateCodableConfiguration()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for NSNotificationCenter.Publisher(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  int v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  a1[2] = *(void *)(a2 + 16);
  id v5 = v3;
  id v6 = v4;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t _NSSortFunctionOne(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  id v6 = *(uint64_t (**)(void, char *, void, void))(*a3 + 16);
  if (v6) {
    return v6(*(void *)(v5 + 8), sel_compareObject_toObject_, *(void *)(a3[1] + 8 * v3), *(void *)(a3[1] + 8 * v4));
  }
  unint64_t v8 = (uint64_t *)(*(void *)v5 + 16 * v3);
  unsigned int v9 = (uint64_t *)(v5 + 40);
  if ((uint64_t (*)(uint64_t, uint64_t, uint64_t))*v8 == _NSNullCompare) {
    unsigned int v9 = (uint64_t *)&selRef_compare_;
  }
  return _NSCompareObject(v8[1], *(void *)(*(void *)v5 + 16 * v4 + 8), *v8, *v9, *(unsigned __int8 *)(v5 + 32), *(unsigned __int8 *)(v5 + 33));
}

ValueMetadata *type metadata accessor for AttributedSubstring()
{
  return &type metadata for AttributedSubstring;
}

ValueMetadata *type metadata accessor for AttributedString.CharacterView()
{
  return &type metadata for AttributedString.CharacterView;
}

ValueMetadata *type metadata accessor for AttributedString.Runs.Index()
{
  return &type metadata for AttributedString.Runs.Index;
}

id static DateInterval._unconditionallyBridgeFromObjectiveC(_:)@<X0>(id result@<X0>, uint64_t a2@<X8>)
{
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  Class v2 = result;
  uint64_t result = objc_msgSend(result, sel_startDate);
  if (result)
  {
    uint64_t v4 = result;
    objc_msgSend(result, sel_timeIntervalSinceReferenceDate);
    uint64_t v6 = v5;

    uint64_t result = objc_msgSend(v2, sel_duration);
    if (v7 >= 0.0)
    {
      *(void *)a2 = v6;
      *(double *)(a2 + 8) = v7;
      return result;
    }
    __break(1u);
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for AttributedString.Runs.Run()
{
  return &type metadata for AttributedString.Runs.Run;
}

ValueMetadata *type metadata accessor for CocoaError.Code()
{
  return &type metadata for CocoaError.Code;
}

Swift::Void __swiftcall String.LocalizationValue.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  CFStringRef v1 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v2 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v3 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v1, sel_stringByReplacingOccurrencesOfString_withString_, v2, v3, a1._countAndFlagsBits, a1._object, 9509, 0xE200000000000000, 37, 0xE100000000000000);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  double v7 = v6;

  v8._uint64_t countAndFlagsBits = (uint64_t)v5;
  v8._os_log_t object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v32 = a6;
  v27[1] = a5;
  _OWORD v27[2] = a4;
  uint64_t v31 = a3;
  uint64_t v29 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v28 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  uint64_t v30 = a10;
  uint64_t v13 = v10;
  StringProtocol._ephemeralString.getter();
  uint64_t v14 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v15 = String._bridgeToObjectiveCImpl()();
  uint64_t v16 = v31;
  swift_bridgeObjectRelease();
  uint64_t v17 = String._bridgeToObjectiveCImpl()();
  char v18 = v32;
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0 && !v16)
  {
    id v19 = objc_msgSend(v14, sel_stringByReplacingOccurrencesOfString_withString_, v15, v17);
LABEL_10:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);

    return (uint64_t)v26;
  }
  v27[0] = v14;
  uint64_t v21 = v28;
  uint64_t v20 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v28, v13, a7);
  if (v18)
  {
    dispatch thunk of Collection.startIndex.getter();
    unint64_t v22 = v34;
    dispatch thunk of Collection.endIndex.getter();
    BOOL v23 = *(void (**)(char *, uint64_t))(v20 + 8);
    v20 += 8;
    v23(v21, a7);
    if (v33 >> 14 >= v22 >> 14) {
      goto LABEL_8;
    }
    __break(1u);
  }
  (*(void (**)(char *, uint64_t))(v20 + 8))(v21, a7);
LABEL_8:
  uint64_t result = StringProtocol._toUTF16Offsets(_:)();
  if (!__OFSUB__(v25, result))
  {
    id v19 = objc_msgSend(v27[0], sel_stringByReplacingOccurrencesOfString_withString_options_range_, v15, v17, v16, result, v25 - result);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t NSOrthographyScriptIndexForCharacters(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    while (1)
    {
      unsigned int v5 = *(unsigned __int16 *)(a1 + 2 * v4);
      if ((unsigned __int16)((v5 & 0xFFDF) - 65) >= 0x1Au)
      {
        uint64_t v6 = 0;
        BOOL v7 = v5 > 0x2E || ((1 << v5) & 0x708000000000) == 0;
        if (!v7 || v5 == 173) {
          goto LABEL_9;
        }
        if (v5 - 48 < 0xA
          || (unsigned __int16)(v5 - 188) < 3u
          || v5 < 0x20
          || (unsigned __int16)(v5 - 127) < 0x21u
          || v5 < 0xC0
          || (v5 & 0xFFDF) == 0xD7)
        {
          goto LABEL_69;
        }
        if (v5 >= 0x2B0)
        {
          if (v5 < 0x370) {
            goto LABEL_30;
          }
          if (v5 < 0x400) {
            goto LABEL_32;
          }
          if (v5 < 0x530 || v5 == 7467)
          {
            uint64_t v6 = 8;
            goto LABEL_9;
          }
          if (v5 < 0x590 || (unsigned __int16)(v5 + 1261) < 5u)
          {
            uint64_t v6 = 9;
            goto LABEL_9;
          }
          if (v5 < 0x600 || (unsigned __int16)(v5 + 1251) < 0x33u)
          {
            uint64_t v6 = 10;
            goto LABEL_9;
          }
          if ((unsigned __int16)(v5 + 400) < 0x8Fu || v5 < 0x700 || (unsigned __int16)(v5 + 1200) < 0x2B0u)
          {
            uint64_t v6 = 11;
            goto LABEL_9;
          }
          if (v5 - 2304 <= 0x5FF)
          {
            if ((v5 & 0xFFFE) != 0x964)
            {
              uint64_t v6 = ((v5 - 2304) >> 7) + 12;
              goto LABEL_9;
            }
LABEL_30:
            uint64_t v6 = 0;
            goto LABEL_9;
          }
          int16x4_t v10 = vdup_n_s16(v5);
          if ((vmaxv_u16(vcgt_u16((uint16x4_t)0x40005000602C00, (uint16x4_t)vadd_s16(v10, (int16x4_t)0x602850CED05400))) & 1) != 0|| (int v11 = v5 & 0xFF00, v11 == 4352)|| (v5 & 0xFFE0) == 0xA960)
          {
            uint64_t v6 = 3;
            goto LABEL_9;
          }
          if (vmaxv_u16(vcgt_u16((uint16x4_t)0xFC006071800200, (uint16x4_t)vadd_s16(v10, (int16x4_t)0x10001F0D1800700))))
          {
            uint64_t v6 = 2;
            goto LABEL_9;
          }
          int v17 = v5 & 0xFFE0;
          uint64_t v6 = 0;
          if (v5 - 8204 < 6) {
            goto LABEL_9;
          }
          if (v5 == 8217) {
            goto LABEL_9;
          }
          uint64_t v6 = 0;
          if (v5 - 8234 < 5) {
            goto LABEL_9;
          }
          if ((v5 & 0xFFF0) == 0x2060) {
            goto LABEL_9;
          }
          uint64_t v6 = 0;
          if (v5 == 65279 || (v5 & 0xFFF0) == 0xFE00) {
            goto LABEL_9;
          }
          if ((vmaxv_u16(vcgt_u16((uint16x4_t)0x700E000260030, (uint16x4_t)vadd_s16(v10, (int16x4_t)0x50058E0E300E295))) & 1) == 0&& v11 != 7680&& v17 != 11360)
          {
            if (v5 - 7462 >= 5 && v11 != 7936)
            {
              uint64_t v6 = 0;
              if ((vmaxv_u16(vcgt_u16((uint16x4_t)0x300030003F0065, (uint16x4_t)vadd_s16(v10, (int16x4_t)0xDF30DF90E2D4E265))) & 1) != 0|| v17 == 42752)
              {
                goto LABEL_9;
              }
              if (v5 - 0x2000 >= 0xC00 && v5 <= 0xFFFB && (v5 & 0xFF80) != 0x2E00)
              {
                if (v11 == 3840)
                {
                  uint64_t v6 = 24;
                  goto LABEL_9;
                }
                if (v5 - 4096 < 0xA0)
                {
                  uint64_t v6 = 25;
                  goto LABEL_9;
                }
                if (v5 - 4256 < 0x60)
                {
                  uint64_t v6 = 26;
                  goto LABEL_9;
                }
                if (v5 - 4608 < 0x1A0)
                {
                  uint64_t v6 = 27;
                  goto LABEL_9;
                }
                if (v5 - 5024 < 0x60)
                {
                  uint64_t v6 = 28;
                  goto LABEL_9;
                }
                if (v5 - 5120 < 0x280)
                {
                  uint64_t v6 = 29;
                  goto LABEL_9;
                }
                if ((v5 & 0xFF80) == 0x1780)
                {
                  uint64_t v6 = 30;
                  goto LABEL_9;
                }
                if (v5 - 6144 < 0xB0)
                {
                  uint64_t v6 = 31;
                  goto LABEL_9;
                }
                if (v5 >> 10 == 54)
                {
                  uint64_t v12 = v4 + 1;
                  if (v4 + 1 < a2 && (*(_WORD *)(a1 + 2 * v12) & 0xFC00) == 0xDC00)
                  {
                    unsigned int v13 = 1025 * v5 - 56744960;
                    unsigned int v14 = (1025 * v5 - 56613888) & 0xFFFF0000;
                    if (v13 >= 0x10000 || v14 == 0x10000) {
                      uint64_t v6 = 1;
                    }
                    else {
                      uint64_t v6 = 2;
                    }
                    uint64_t v4 = v12;
                    goto LABEL_9;
                  }
                }
              }
LABEL_69:
              uint64_t v6 = 1;
              goto LABEL_9;
            }
LABEL_32:
            uint64_t v6 = 7;
            goto LABEL_9;
          }
        }
      }
      uint64_t v6 = 6;
LABEL_9:
      if (a3) {
        ++*(void *)(a3 + 8 * v6);
      }
      if (v3 == v6 || v3 == 0) {
        uint64_t v9 = v6;
      }
      else {
        uint64_t v9 = 1;
      }
      if (v6) {
        unint64_t v3 = v9;
      }
      if (++v4 >= a2) {
        goto LABEL_99;
      }
    }
  }
  unint64_t v3 = 0;
LABEL_99:
  if (v3 <= 1) {
    return 1;
  }
  else {
    return v3;
  }
}

void sub_18189BE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void append4Bytes(void *a1, unsigned __int8 *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *a2;
  if (v3 >= 0xA0) {
    char v4 = 87;
  }
  else {
    char v4 = 48;
  }
  bytes[0] = v4 + (*a2 >> 4);
  unsigned int v5 = v3 & 0xF;
  if (v5 >= 0xA) {
    char v6 = 87;
  }
  else {
    char v6 = 48;
  }
  bytes[1] = v6 + v5;
  unsigned int v7 = a2[1];
  if (v7 >= 0xA0) {
    char v8 = 87;
  }
  else {
    char v8 = 48;
  }
  bytes[2] = v8 + (a2[1] >> 4);
  unsigned int v9 = v7 & 0xF;
  if (v9 >= 0xA) {
    char v10 = 87;
  }
  else {
    char v10 = 48;
  }
  bytes[3] = v10 + v9;
  unsigned int v11 = a2[2];
  if (v11 >= 0xA0) {
    char v12 = 87;
  }
  else {
    char v12 = 48;
  }
  bytes[4] = v12 + (a2[2] >> 4);
  unsigned int v13 = v11 & 0xF;
  if (v13 >= 0xA) {
    char v14 = 87;
  }
  else {
    char v14 = 48;
  }
  bytes[5] = v14 + v13;
  unsigned int v15 = a2[3];
  if (v15 >= 0xA0) {
    char v16 = 87;
  }
  else {
    char v16 = 48;
  }
  bytes[6] = v16 + (a2[3] >> 4);
  unsigned int v17 = v15 & 0xF;
  if (v17 >= 0xA) {
    char v18 = 87;
  }
  else {
    char v18 = 48;
  }
  bytes[7] = v18 + v17;
  bytes[8] = 32;
  CFStringRef v19 = CFStringCreateWithBytes(0, bytes, 9, 0x600u, 0);
  [a1 appendString:v19];
  CFRelease(v19);
}

BOOL NSMapMember(NSMapTable *table, const void *key, void **originalKey, void **value)
{
  if (!table) {
    NSLog((NSString *)@"%s: map table argument is NULL", "BOOL NSMapMember(NSMapTable * _Nonnull, const void * _Nonnull, void ** _Nullable, void ** _Nullable)");
  }

  return [(NSMapTable *)table mapMember:key originalKey:originalKey value:value];
}

ValueMetadata *type metadata accessor for IndexSet.Index()
{
  return &type metadata for IndexSet.Index;
}

uint64_t _PlistDecoder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t DateComponents.hour.getter()
{
  return *(void *)(v0 + 112);
}

NSObject __swiftcall AnyHashable._bridgeToObjectiveC()()
{
  AnyHashable.base.getter();
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  uint64_t v0 = _bridgeAnythingToObjectiveC<A>(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  return (NSObject)v0;
}

id NSSortDescriptor.init<A, B>(keyPath:ascending:)(void *a1, char a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  _bridgeKeyPathToString(_:)();
  uint64_t v5 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithKey_ascending_, v5, a2 & 1);
  swift_unknownObjectRelease();
  id v7 = v6;
  objc_setAssociatedObject(v7, v7, a1, (void *)0x301);

  swift_release();
  return v7;
}

BOOL IndexSet.isEmpty.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_count) == 0;
}

void protocol witness for Cancellable.cancel() in conformance Notification.Subscription<A>()
{
}

void Notification.Subscription.cancel()()
{
  CFStringRef v1 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v1);
  uint64_t v2 = (void *)v0[5];
  if (v2 && (uint64_t v3 = v0[8]) != 0)
  {
    v0[5] = 0;
    v0[7] = 0;
    v0[8] = 0;
    swift_unknownObjectRelease();
    os_unfair_lock_unlock(v1);
    objc_msgSend(v2, sel_removeObserver_, v3);

    swift_unknownObjectRelease();
  }
  else
  {
    os_unfair_lock_unlock(v1);
  }
}

void _NSSwiftLocale.object(forKey:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  void (*v79)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  void **v82;
  id v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t *__return_ptr, uint64_t, uint64_t);
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  id v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149[4];

  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C430]);
  uint64_t v7 = v6;
  if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v7 == v8)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v10)
  {
LABEL_15:
    id v21 = objc_msgSend(v2, sel_localeIdentifier);
    goto LABEL_16;
  }
  id v11 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C438]);
  uint64_t v13 = v12;
  if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v13 == v14)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_19;
  }
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v16)
  {
LABEL_19:
    id v21 = objc_msgSend(v2, sel_languageCode);
    goto LABEL_16;
  }
  id v17 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C400]);
  uint64_t v19 = v18;
  if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v19 == v20)
  {
    swift_bridgeObjectRelease_n();
LABEL_21:
    id v28 = objc_msgSend(v2, sel_countryCode);
    goto LABEL_22;
  }
  char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v27) {
    goto LABEL_21;
  }
  id v29 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C470]);
  uint64_t v31 = v30;
  if (v29 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v31 == v32)
  {
    swift_bridgeObjectRelease_n();
LABEL_28:
    id v28 = objc_msgSend(v2, sel_scriptCode);
    goto LABEL_22;
  }
  char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v33) {
    goto LABEL_28;
  }
  id v34 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C498]);
  uint64_t v36 = v35;
  if (v34 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v36 == v37)
  {
    swift_bridgeObjectRelease_n();
LABEL_33:
    id v28 = objc_msgSend(v2, sel_variantCode);
    goto LABEL_22;
  }
  char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v38) {
    goto LABEL_33;
  }
  id v39 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C420]);
  uint64_t v41 = v40;
  if (v39 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v41 == v42)
  {
    swift_bridgeObjectRelease_n();
LABEL_38:
    id v44 = objc_msgSend(v2, sel_exemplarCharacterSet);
    objc_msgSend(v44, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for CFCharacterSetRef(0);
    swift_dynamicCast();
    type metadata accessor for __CharacterSetStorage();
    uint64_t v45 = swift_allocObject();
    *(void *)(v45 + 16) = v148;
    *(unsigned char *)(v45 + 24) = 0;

    *(void *)(a2 + 24) = &type metadata for CharacterSet;
    *(void *)a2 = v45;
    return;
  }
  char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v43) {
    goto LABEL_38;
  }
  id v46 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C3E8]);
  uint64_t v48 = v47;
  if (v46 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v48 == v49)
  {
    swift_bridgeObjectRelease_n();
LABEL_43:
    id v21 = objc_msgSend(v2, sel_calendarIdentifier);
    goto LABEL_16;
  }
  char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v50) {
    goto LABEL_43;
  }
  id v51 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C3E0]);
  uint64_t v53 = v52;
  if (v51 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v53 == v54)
  {
    swift_bridgeObjectRelease_n();
LABEL_48:
    char v56 = &v2[OBJC_IVAR____NSSwiftLocale_locale];
    uint64_t v57 = *(void *)&v2[OBJC_IVAR____NSSwiftLocale_locale];
    uint64_t v58 = *((void *)v56 + 1);
    *(void *)(a2 + 24) = &type metadata for Calendar;
    uint64_t ObjectType = swift_getObjectType();
    unsigned int v60 = *(void (**)(uint64_t, uint64_t))(v58 + 192);
    swift_unknownObjectRetain();
    v60(ObjectType, v58);
    v149[0] = v57;
    v149[1] = v58;
    Calendar.locale.setter(v149);
    return;
  }
  char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v55) {
    goto LABEL_48;
  }
  id v61 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C3F0]);
  uint64_t v63 = v62;
  if (v61 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v63 == v64)
  {
    swift_bridgeObjectRelease_n();
LABEL_53:
    id v28 = objc_msgSend(v2, sel_collationIdentifier);
    goto LABEL_22;
  }
  char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v65) {
    goto LABEL_53;
  }
  id v66 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C490]);
  uint64_t v68 = v67;
  if (v66 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v68 == v69)
  {
    swift_bridgeObjectRelease_n();
LABEL_58:
    unsigned __int8 v71 = objc_msgSend(v2, sel_usesMetricSystem);
    *(void *)(a2 + 24) = MEMORY[0x1E4FBB390];
    *(unsigned char *)a2 = v71;
    return;
  }
  char v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v70) {
    goto LABEL_58;
  }
  id v72 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C440]);
  uint64_t v74 = v73;
  if (v72 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v74 == v75)
  {
    swift_bridgeObjectRelease_n();
LABEL_63:
    uint64_t v77 = *(void *)&v2[OBJC_IVAR____NSSwiftLocale_locale + 8];
    uint64_t v78 = swift_getObjectType();
    uint64_t v79 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v77 + 296);
    swift_unknownObjectRetain();
    v79(v149, v78, v77);
    swift_unknownObjectRelease();
    Swift::String v80 = v149[2];
    char v81 = v149[3];
    if (one-time initialization token for us != -1) {
      swift_once();
    }
    if (xmmword_1E8ED61C0 == __PAIR128__(v81, v80) || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL v82 = (void **)MEMORY[0x1E4F1C458];
    }
    else
    {
      if (one-time initialization token for uk != -1) {
        swift_once();
      }
      if (xmmword_1E8ED2BA8 == __PAIR128__(v81, v80) || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        BOOL v82 = (void **)MEMORY[0x1E4F1C450];
      }
      else
      {
        if (one-time initialization token for metric != -1) {
          swift_once();
        }
        if (xmmword_1E8ED3190 != __PAIR128__(v81, v80)) {
          _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        BOOL v82 = (void **)MEMORY[0x1E4F1C448];
      }
    }
    goto LABEL_68;
  }
  char v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v76) {
    goto LABEL_63;
  }
  uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C478]);
  uint64_t v87 = v86;
  if (v85 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v87 == v88)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_78;
  }
  uint64_t v89 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v89 & 1) == 0)
  {
    unint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C418]);
    uint64_t v95 = v94;
    if (v93 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v95 == v96)
    {
      swift_bridgeObjectRelease_n();
LABEL_90:
      id v21 = objc_msgSend(v2, sel_decimalSeparator);
      goto LABEL_16;
    }
    uint64_t v97 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v97) {
      goto LABEL_90;
    }
    uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C428]);
    uint64_t v100 = v99;
    if (v98 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v100 == v101)
    {
      swift_bridgeObjectRelease_n();
LABEL_95:
      id v21 = objc_msgSend(v2, sel_groupingSeparator);
      goto LABEL_16;
    }
    uint64_t v102 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v102) {
      goto LABEL_95;
    }
    int64_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C410]);
    unint64_t v105 = v104;
    if (v103 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v105 == v106)
    {
      swift_bridgeObjectRelease_n();
LABEL_100:
      id v21 = objc_msgSend(v2, sel_currencySymbol);
      goto LABEL_16;
    }
    uint64_t v107 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v107) {
      goto LABEL_100;
    }
    uint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C408]);
    uint64_t v110 = v109;
    if (v108 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v110 == v111)
    {
      swift_bridgeObjectRelease_n();
LABEL_105:
      id v28 = objc_msgSend(v2, sel_currencyCode);
LABEL_22:
      id v22 = v28;
      if (!v22)
      {
LABEL_23:
        *(_OWORD *)a2 = 0u;
        *(_OWORD *)(a2 + 16) = 0u;
        return;
      }
LABEL_17:
      BOOL v23 = v22;
      id v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      uint64_t v26 = v25;

      *(void *)(a2 + 24) = MEMORY[0x1E4FBB1A0];
      *(void *)a2 = v24;
      *(void *)(a2 + 8) = v26;
      return;
    }
    int64_t v112 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v112) {
      goto LABEL_105;
    }
    uint64_t v113 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C3F8]);
    unint64_t v115 = v114;
    if (v113 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v115 == v116) {
      goto LABEL_113;
    }
    unint64_t v117 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v117)
    {
LABEL_114:
      id v21 = objc_msgSend(v2, sel_collatorIdentifier);
      goto LABEL_16;
    }
    if (one-time initialization token for cfLocaleCollatorID != -1) {
      swift_once();
    }
    unint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)static NSLocaleKey.cfLocaleCollatorID);
    unint64_t v120 = v119;
    if (v118 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v120 == v121)
    {
LABEL_113:
      swift_bridgeObjectRelease_n();
      goto LABEL_114;
    }
    uint64_t v122 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v122) {
      goto LABEL_114;
    }
    char v123 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C460]);
    uint64_t v125 = v124;
    if (v123 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v125 == v126)
    {
      swift_bridgeObjectRelease_n();
LABEL_120:
      id v21 = objc_msgSend(v2, sel_quotationBeginDelimiter);
      goto LABEL_16;
    }
    uint64_t v127 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v127) {
      goto LABEL_120;
    }
    int64_t v128 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C468]);
    int64_t v130 = v129;
    if (v128 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v130 == v131)
    {
      swift_bridgeObjectRelease_n();
LABEL_125:
      id v21 = objc_msgSend(v2, sel_quotationEndDelimiter);
      goto LABEL_16;
    }
    uint64_t v132 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v132) {
      goto LABEL_125;
    }
    unint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C3D0]);
    uint64_t v135 = v134;
    if (v133 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v135 == v136)
    {
      swift_bridgeObjectRelease_n();
LABEL_130:
      id v21 = objc_msgSend(v2, sel_alternateQuotationBeginDelimiter);
      goto LABEL_16;
    }
    unint64_t v137 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v137) {
      goto LABEL_130;
    }
    int64_t v138 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C3D8]);
    unint64_t v140 = v139;
    if (v138 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v140 == v141)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      uint64_t v142 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v142 & 1) == 0)
      {
        if (one-time initialization token for languageIdentifier != -1) {
          swift_once();
        }
        uint64_t v143 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)static NSLocaleKey.languageIdentifier);
        char v145 = v144;
        if (v143 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v145 == v146)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          long long v147 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v147 & 1) == 0) {
            goto LABEL_23;
          }
        }
        id v21 = objc_msgSend(v2, sel_languageIdentifier);
        goto LABEL_16;
      }
    }
    id v21 = objc_msgSend(v2, sel_alternateQuotationEndDelimiter);
LABEL_16:
    id v22 = v21;
    goto LABEL_17;
  }
LABEL_78:
  uint64_t v90 = *(void *)&v2[OBJC_IVAR____NSSwiftLocale_locale + 8];
  unint64_t v91 = swift_getObjectType();
  int64_t v92 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v90 + 408);
  swift_unknownObjectRetain();
  v92(v149, v91, v90);
  swift_unknownObjectRelease();
  if (LOBYTE(v149[0]) == 1) {
    BOOL v82 = (void **)MEMORY[0x1E4F1C480];
  }
  else {
    BOOL v82 = (void **)MEMORY[0x1E4F1C488];
  }
LABEL_68:
  uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v82);
  *(void *)(a2 + 24) = MEMORY[0x1E4FBB1A0];
  *(void *)a2 = v83;
  *(void *)(a2 + 8) = v84;
}

uint64_t protocol witness for _LocaleProtocol.calendarIdentifier.getter in conformance _LocaleICU@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 176);
  swift_retain();
  os_unfair_lock_lock(v3 + 140);
  partial apply for closure #1 in _LocaleICU.calendarIdentifier.getter((uint64_t)&v3[4], a1);
  os_unfair_lock_unlock(v3 + 140);

  return swift_release();
}

uint64_t partial apply for closure #1 in _LocaleICU.calendarIdentifier.getter@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return _LocaleICU._lockedCalendarIdentifier(_:)(a1, a2);
}

char _LocaleICU._lockedCalendarIdentifier(_:)@<W0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *(unsigned __int8 *)(a1 + 96);
  if (v3 != 16) {
    goto LABEL_10;
  }
  uint64_t v4 = a1;
  uint64_t v5 = specialized static Locale.keywordValue(identifier:key:)();
  if (v6)
  {
    uint64_t v7 = v5;
    uint64_t v8 = v6;
  }
  else
  {
    char v13 = 0;
    String.utf8CString.getter();
    uint64_t KeywordValuesForLocale = ucal_getKeywordValuesForLocale();
    swift_release();
    if (!KeywordValuesForLocale || !uenum_next())
    {
      *(unsigned char *)(v4 + 96) = 0;
      *a2 = 0;
      LOBYTE(a1) = uenum_close();
      return a1;
    }
    uint64_t v7 = String.init(cString:)();
    uint64_t v8 = v11;
    uenum_close();
  }
  v9._uint64_t countAndFlagsBits = v7;
  v9._os_log_t object = v8;
  LOBYTE(a1) = Calendar.Identifier.init(identifierString:)(v9);
  LOBYTE(v3) = v13;
  if (v13 != 16)
  {
    *(unsigned char *)(v4 + 96) = v13;
LABEL_10:
    *a2 = v3;
    return a1;
  }
  *(unsigned char *)(v4 + 96) = 0;
  *a2 = 0;
  return a1;
}

unint64_t Calendar.Identifier.cfCalendarIdentifier.getter()
{
  unint64_t result = 0x6169726F67657267;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x7473696864647562;
      break;
    case 2:
      unint64_t result = 0x6573656E696863;
      break;
    case 3:
      unint64_t result = 0x636974706F63;
      break;
    case 4:
      unint64_t result = 0x6369706F69687465;
      break;
    case 5:
      unint64_t result = 0xD000000000000013;
      break;
    case 6:
      unint64_t result = 0x776572626568;
      break;
    case 7:
      unint64_t result = 0x313036386F7369;
      break;
    case 8:
      unint64_t result = 0x6E6169646E69;
      break;
    case 9:
      unint64_t result = 0x63696D616C7369;
      break;
    case 0xA:
    case 0xE:
      unint64_t result = 0x2D63696D616C7369;
      break;
    case 0xB:
      unint64_t result = 0x6573656E6170616ALL;
      break;
    case 0xC:
      unint64_t result = 0x6E616973726570;
      break;
    case 0xD:
      unint64_t result = 6516594;
      break;
    case 0xF:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for _LocaleProtocol.languageCode.getter in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.languageCode.getter((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t partial apply for closure #1 in _LocaleICU.languageCode.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _LocaleICU.languageCode.getter(a1, a2);
}

uint64_t closure #1 in _LocaleICU.languageCode.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t result = *(void *)(a1 + 8);
  if (!result)
  {
    *a2 = 0;
    a2[1] = 0;
    return result;
  }
  if (result != 1)
  {
    *a2 = *(void *)a1;
    a2[1] = result;
    return swift_bridgeObjectRetain();
  }
  char v56 = a2;
  uint64_t v4 = swift_bridgeObjectRetain();
  MEMORY[0x1F4188790](v4);
  LODWORD(v64) = 0;
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  swift_release();
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  if (Language > 0)
  {
    v40[Language] = 0;
    uint64_t v6 = MEMORY[0x185301F80](v40, 0);
  }
  uint64_t v8 = v6;
  uint64_t v55 = v7;
  MEMORY[0x1F4188790](v6);
  LODWORD(v64) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  uint64_t v10 = swift_release();
  uint64_t v11 = 0;
  if ((int)v64 > 0)
  {
    uint64_t v63 = 0;
  }
  else
  {
    uint64_t v63 = 0;
    if (Script > 0)
    {
      v40[Script] = 0;
      uint64_t v10 = MEMORY[0x185301F80](v40);
      uint64_t v11 = v10;
      uint64_t v63 = v12;
    }
  }
  MEMORY[0x1F4188790](v10);
  LODWORD(v64) = 0;
  String.utf8CString.getter();
  Countrdouble y = uloc_getCountry();
  swift_release();
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  if ((int)v64 <= 0 && Country > 0)
  {
    v40[Country] = 0;
    uint64_t v14 = MEMORY[0x185301F80](v40);
    uint64_t v15 = v16;
  }
  swift_bridgeObjectRelease();
  uint64_t v17 = v55;
  if (v55)
  {
    uint64_t v18 = v8;
    Swift::String v20 = String.lowercased()();
    os_log_t object = v20._object;
    uint64_t countAndFlagsBits = v20._countAndFlagsBits;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t countAndFlagsBits = 0;
    os_log_t object = 0;
  }
  unsigned int v60 = object;
  if (v63)
  {
    uint64_t v64 = v11;
    uint64_t v65 = v63;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    Swift::String v22 = String._capitalized()();
    id v61 = v22._object;
    uint64_t v62 = v22._countAndFlagsBits;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v15)
    {
LABEL_19:
      uint64_t v59 = v14;
      Swift::String v23 = String.uppercased()();
      uint64_t v57 = v23._object;
      uint64_t v58 = v23._countAndFlagsBits;
      uint64_t v24 = v15;
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v11 = 0;
    id v61 = 0;
    uint64_t v62 = 0;
    if (v15) {
      goto LABEL_19;
    }
  }
  uint64_t v24 = v15;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v57 = 0;
LABEL_22:
  uint64_t v25 = *(void *)a1;
  uint64_t v50 = *(void *)(a1 + 8);
  uint64_t v51 = v25;
  uint64_t v26 = *(void *)(a1 + 16);
  uint64_t v48 = *(void *)(a1 + 24);
  uint64_t v49 = v26;
  uint64_t v47 = *(void *)(a1 + 32);
  uint64_t v46 = *(void *)(a1 + 40);
  uint64_t v45 = *(void *)(a1 + 48);
  uint64_t v44 = *(void *)(a1 + 56);
  long long v43 = *(_OWORD *)(a1 + 64);
  uint64_t v42 = *(void *)(a1 + 80);
  uint64_t v41 = *(void *)(a1 + 88);
  uint64_t v27 = v18;
  *(void *)a1 = v18;
  *(void *)(a1 + 8) = v17;
  uint64_t v28 = countAndFlagsBits;
  id v29 = v60;
  uint64_t v30 = v61;
  *(void *)(a1 + 16) = countAndFlagsBits;
  *(void *)(a1 + 24) = v29;
  uint64_t v32 = v62;
  uint64_t v31 = v63;
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v31;
  *(void *)(a1 + 48) = v32;
  *(void *)(a1 + 56) = v30;
  uint64_t v33 = v58;
  uint64_t v34 = v59;
  *(void *)(a1 + 64) = v59;
  *(void *)(a1 + 72) = v24;
  uint64_t v35 = v57;
  *(void *)(a1 + 80) = v33;
  *(void *)(a1 + 88) = v35;
  uint64_t v53 = v27;
  uint64_t v54 = v28;
  uint64_t v36 = v24;
  outlined copy of Locale.LanguageCode?(v27, v17);
  uint64_t v52 = v11;
  uint64_t v62 = v32;
  uint64_t v63 = v31;
  id v61 = v30;
  outlined copy of Locale.LanguageCode?(v11, v31);
  outlined copy of Locale.LanguageCode?(v34, v36);
  outlined consume of Locale.Language.Components?(v51, v50, v49, v48, v47, v46, v45, v44, v43, *((uint64_t *)&v43 + 1), v42, v41, (void (*)(void))outlined consume of Locale.LanguageCode?);
  if (v17)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v37 = v53;
    outlined consume of Locale.LanguageCode?(v53, v17);
    outlined consume of Locale.LanguageCode?(v52, v63);
    outlined consume of Locale.LanguageCode?(v59, v36);
    swift_bridgeObjectRetain();
    uint64_t result = outlined consume of Locale.LanguageCode?(v37, v17);
    char v38 = v56;
    uint64_t *v56 = v37;
    v38[1] = v17;
  }
  else
  {
    outlined consume of Locale.LanguageCode?(v53, 0);
    outlined consume of Locale.LanguageCode?(v52, v63);
    uint64_t result = outlined consume of Locale.LanguageCode?(v59, v36);
    id v39 = v56;
    uint64_t *v56 = 0;
    v39[1] = 0;
  }
  return result;
}

Foundation::Calendar::Identifier_optional __swiftcall Calendar.Identifier.init(identifierString:)(Swift::String identifierString)
{
  uint64_t v2 = v1;
  BOOL v3 = identifierString._countAndFlagsBits == 0x6169726F67657267
    && identifierString._object == (void *)0xE90000000000006ELL;
  if (v3
    || (os_log_t object = identifierString._object,
        uint64_t countAndFlagsBits = identifierString._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else if (countAndFlagsBits == 0x7473696864647562 && object == (void *)0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 1;
  }
  else if (countAndFlagsBits == 0x6573656E696863 && object == (void *)0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 2;
  }
  else if (countAndFlagsBits == 0x636974706F63 && object == (void *)0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 3;
  }
  else if (countAndFlagsBits == 0x6369706F69687465 && object == (void *)0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 4;
  }
  else if (countAndFlagsBits == 0x61616F69687465 && object == (void *)0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
  }
         || countAndFlagsBits == 0xD000000000000013 && object == (void *)0x80000001823ADD30
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 5;
  }
  else if (countAndFlagsBits == 0x776572626568 && object == (void *)0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 6;
  }
  else if (countAndFlagsBits == 0x313036386F7369 && object == (void *)0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 7;
  }
  else if (countAndFlagsBits == 0x6E6169646E69 && object == (void *)0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 8;
  }
  else if (countAndFlagsBits == 0x63696D616C7369 && object == (void *)0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 9;
  }
  else if (countAndFlagsBits == 0x2D63696D616C7369 && object == (void *)0xED00006C69766963 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 10;
  }
  else if (countAndFlagsBits == 0x6573656E6170616ALL && object == (void *)0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 11;
  }
  else if (countAndFlagsBits == 0x6E616973726570 && object == (void *)0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 12;
  }
  else if (countAndFlagsBits == 6516594 && object == (void *)0xE300000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 13;
  }
  else if (countAndFlagsBits == 0x2D63696D616C7369 && object == (void *)0xEC000000616C6274 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 14;
  }
  else if (countAndFlagsBits == 0xD000000000000010 && object == (void *)0x80000001823ADD50)
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 15;
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result.value = swift_bridgeObjectRelease();
    if (v8) {
      char v7 = 15;
    }
    else {
      char v7 = 16;
    }
  }
  *uint64_t v2 = v7;
  return result;
}

uint64_t *Locale.Components.init(identifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v113 = a3;
  uint64_t v204 = *MEMORY[0x1E4F143B8];
  swift_bridgeObjectRetain();
  LODWORD(v161._countAndFlagsBits) = 0;
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  uint64_t v6 = swift_release();
  uint64_t v7 = 0;
  char v8 = 0;
  if (Language > 0)
  {
    v159[Language] = 0;
    uint64_t v6 = MEMORY[0x185301F80](v159, 0);
    uint64_t v7 = v6;
  }
  uint64_t v156 = v8;
  MEMORY[0x1F4188790](v6);
  LODWORD(v161._countAndFlagsBits) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  uint64_t v10 = swift_release();
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if (SLODWORD(v161._countAndFlagsBits) <= 0 && Script > 0)
  {
    v104[Script] = 0;
    uint64_t v10 = MEMORY[0x185301F80](v104);
    uint64_t v11 = v10;
    uint64_t v12 = v13;
  }
  MEMORY[0x1F4188790](v10);
  LODWORD(v161._countAndFlagsBits) = 0;
  String.utf8CString.getter();
  Countrdouble y = uloc_getCountry();
  swift_release();
  uint64_t v15 = 0;
  if (SLODWORD(v161._countAndFlagsBits) > 0)
  {
    uint64_t v157 = 0;
  }
  else
  {
    uint64_t v157 = 0;
    if (Country > 0)
    {
      v104[Country] = 0;
      uint64_t v15 = MEMORY[0x185301F80](v104);
      uint64_t v157 = v16;
    }
  }
  swift_bridgeObjectRelease();
  if (v156)
  {
    Swift::String v17 = String.lowercased()();
    uint64_t countAndFlagsBits = v17._countAndFlagsBits;
    os_log_t object = v17._object;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t countAndFlagsBits = 0;
    os_log_t object = 0;
  }
  uint64_t v18 = v157;
  uint64_t v19 = v7;
  if (v12)
  {
    uint64_t v20 = v11;
    v161._uint64_t countAndFlagsBits = v11;
    v161._os_log_t object = v12;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    Swift::String v21 = String._capitalized()();
    uint64_t v154 = v21._countAndFlagsBits;
    uint64_t v146 = v21._object;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v154 = 0;
    uint64_t v146 = 0;
  }
  uint64_t v120 = a2;
  uint64_t v121 = a1;
  uint64_t v157 = v18;
  if (v18)
  {
    Swift::String v22 = String.uppercased()();
    uint64_t v150 = v22._countAndFlagsBits;
    uint64_t v152 = v22._object;
    uint64_t v23 = v15;
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v150 = 0;
    uint64_t v152 = 0;
  }
  uint64_t v24 = v19;
  uint64_t v25 = v19;
  uint64_t v26 = (uint64_t)v156;
  outlined copy of Locale.LanguageCode?(v25, (uint64_t)v156);
  outlined copy of Locale.LanguageCode?(v20, (uint64_t)v12);
  uint64_t v27 = (uint64_t)v157;
  outlined copy of Locale.LanguageCode?(v23, (uint64_t)v157);
  outlined consume of Locale.LanguageCode?(v24, v26);
  outlined consume of Locale.LanguageCode?(v20, (uint64_t)v12);
  uint64_t v28 = v152;
  outlined consume of Locale.LanguageCode?(v23, v27);
  uint64_t v126 = v24;
  outlined copy of Locale.LanguageCode?(v24, (uint64_t)v156);
  uint64_t v114 = v20;
  char v145 = v12;
  outlined copy of Locale.LanguageCode?(v20, (uint64_t)v12);
  uint64_t v112 = v23;
  uint64_t v29 = outlined copy of Locale.LanguageCode?(v23, v27);
  MEMORY[0x1F4188790](v29);
  LODWORD(v161._countAndFlagsBits) = 0;
  String.utf8CString.getter();
  int Variant = uloc_getVariant();
  swift_release();
  if (SLODWORD(v161._countAndFlagsBits) <= 0
    && Variant > 0
    && (v104[Variant] = 0, uint64_t v31 = MEMORY[0x185301F80](v104), v32))
  {
    uint64_t v33 = v31;
    uint64_t v125 = v32;
    Swift::String v34 = String.lowercased()();
    char v123 = v34._object;
    uint64_t v124 = v34._countAndFlagsBits;
    outlined consume of Locale.LanguageCode?(0, 0);
  }
  else
  {
    uint64_t v33 = 0;
    uint64_t v124 = 0;
    uint64_t v125 = 0;
    char v123 = 0;
  }
  uint64_t v35 = v114;
  uint64_t v36 = v145;
  int v158 = 0;
  String.utf8CString.getter();
  uint64_t v37 = uloc_openKeywords();
  swift_release();
  uint64_t v122 = v33;
  if (v158 > 0 || !v37)
  {
    char v38 = v28;
    swift_bridgeObjectRelease();
    id v39 = 0;
    uint64_t v142 = 0;
    uint64_t v143 = 0;
    uint64_t v144 = 0;
    uint64_t v40 = 0;
    unint64_t v139 = 0;
    uint64_t v140 = 0;
    uint64_t v141 = 0;
    uint64_t v41 = 0;
    uint64_t v135 = 0;
    uint64_t v136 = 0;
    unint64_t v137 = 0;
    id v148 = 0;
    uint64_t v149 = 0;
    uint64_t v147 = 0;
    unint64_t v133 = 0;
    int64_t v134 = 0;
    uint64_t v130 = 0;
    uint64_t v131 = 0;
    uint64_t v132 = 0;
    uint64_t v42 = 0;
    long long v43 = 0;
    v129._uint64_t countAndFlagsBits = 0;
    v129._os_log_t object = 0;
    uint64_t v127 = 0;
    uint64_t v128 = 0;
    int v153 = 4;
    uint64_t v44 = 7;
    int v45 = 16;
    goto LABEL_31;
  }
  type metadata accessor for ICU.Enumerator();
  uint64_t v118 = 7;
  uint64_t v46 = swift_allocObject();
  *(void *)(v46 + 16) = v37;
  swift_retain();
  LODWORD(v161._countAndFlagsBits) = 0;
  LODWORD(v160[0]._countAndFlagsBits) = 0;
  uint64_t v47 = uenum_next();
  if (SLODWORD(v161._countAndFlagsBits) <= 0)
  {
    uint64_t v127 = 0;
    uint64_t v128 = 0;
    v129._uint64_t countAndFlagsBits = 0;
    v129._os_log_t object = 0;
    unint64_t v115 = 0;
    int64_t v116 = 0;
    unint64_t v137 = 0;
    uint64_t v138 = 0;
    uint64_t v132 = 0;
    unint64_t v133 = 0;
    uint64_t v130 = 0;
    uint64_t v131 = 0;
    int64_t v134 = 0;
    uint64_t v135 = 0;
    uint64_t v50 = 0;
    uint64_t v49 = 0;
    uint64_t v48 = 0;
    uint64_t v136 = 0;
    uint64_t v140 = 0;
    uint64_t v141 = 0;
    unint64_t v139 = 0;
    uint64_t v143 = 0;
    uint64_t v144 = 0;
    uint64_t v142 = 0;
    uint64_t v119 = 0;
    uint64_t v108 = 0;
    int countAndFlagsBits_low = 16;
    unint64_t v117 = 0;
    uint64_t v118 = 7;
    int v51 = 4;
    uint64_t v111 = v46;
    while (1)
    {
      int v153 = v51;
      if (!v47) {
        goto LABEL_30;
      }
      uint64_t v67 = String.init(cString:)();
      static Locale.legacyKey(forKey:)(v67, v68, &v161._countAndFlagsBits);
      uint64_t v69 = swift_bridgeObjectRelease();
      char v70 = v161._object;
      if (v161._object)
      {
        id v148 = v49;
        uint64_t v149 = v48;
        uint64_t v147 = v50;
        uint64_t v71 = v161._countAndFlagsBits;
        MEMORY[0x1F4188790](v69);
        LODWORD(v161._countAndFlagsBits) = 0;
        String.utf8CString.getter();
        String.utf8CString.getter();
        Keywordid Value = uloc_getKeywordValue();
        swift_release();
        swift_release();
        if (SLODWORD(v161._countAndFlagsBits) > 0 || KeywordValue <= 0) {
          goto LABEL_49;
        }
        v105[KeywordValue] = 0;
        uint64_t v73 = MEMORY[0x185301F80](v105);
        uint64_t v48 = v149;
        if (!v74)
        {
          swift_bridgeObjectRelease();
          uint64_t v50 = v147;
          uint64_t v49 = v148;
          goto LABEL_52;
        }
        uint64_t v109 = v74;
        uint64_t v110 = v73;
        if (v71 == 0x7261646E656C6163 && v70 == (void *)0xE800000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v66._os_log_t object = v109;
          v66._uint64_t countAndFlagsBits = v110;
          Calendar.Identifier.init(identifierString:)(v66);
          int countAndFlagsBits_low = LOBYTE(v161._countAndFlagsBits);
        }
        else if (v71 == 0x6F6974616C6C6F63 && v70 == (void *)0xE90000000000006ELL {
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        }
        {
          swift_bridgeObjectRelease();
          uint64_t v75 = (uint64_t)v109;
          uint64_t v76 = v110;
          Swift::String v77 = String.lowercased()();
          outlined consume of Locale.LanguageCode?((uint64_t)v119, v143);
          uint64_t v119 = (void *)v76;
          uint64_t v142 = (void *)v77._countAndFlagsBits;
          uint64_t v143 = v75;
          uint64_t v144 = v77._object;
        }
        else if (v71 == 0x79636E6572727563 && v70 == (void *)0xE800000000000000 {
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        }
        {
          swift_bridgeObjectRelease();
          uint64_t v78 = (uint64_t)v109;
          uint64_t v79 = v110;
          Swift::String v80 = String.lowercased()();
          outlined consume of Locale.LanguageCode?((uint64_t)v117, v140);
          unint64_t v117 = (void *)v79;
          unint64_t v139 = (void *)v80._countAndFlagsBits;
          uint64_t v140 = v78;
          uint64_t v141 = v80._object;
        }
        else if (v71 == 0x737265626D756ELL && v70 == (void *)0xE700000000000000 {
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        }
        {
          swift_bridgeObjectRelease();
          uint64_t v81 = (uint64_t)v109;
          uint64_t v82 = v110;
          Swift::String v83 = String.lowercased()();
          outlined consume of Locale.LanguageCode?((uint64_t)v116, v136);
          int64_t v116 = (void *)v82;
          uint64_t v135 = (void *)v83._countAndFlagsBits;
          uint64_t v136 = v81;
          unint64_t v137 = v83._object;
        }
        else
        {
          if ((v71 != 30566 || v70 != (void *)0xE200000000000000)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            if (v71 == 0x7372756F68 && v70 == (void *)0xE500000000000000
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              v84._uint64_t countAndFlagsBits = v110;
              v84._os_log_t object = v109;
              _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Locale.Components.init(identifier:), v84);
              swift_bridgeObjectRelease();
              uint64_t v50 = v147;
              uint64_t v49 = v148;
              int v51 = 0;
              goto LABEL_36;
            }
            if (v71 == 0x6572757361656DLL && v70 == (void *)0xE700000000000000
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              uint64_t v85 = v109;
              if (v110 == 0x6C61697265706D69 && v109 == (void *)0xE800000000000000
                || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                if (one-time initialization token for uk != -1) {
                  swift_once();
                }
                uint64_t v48 = static Locale.MeasurementSystem.uk;
                unint64_t v86 = (void *)unk_1E8ED2BA0;
                uint64_t v87 = (void *)*((void *)&xmmword_1E8ED2BA8 + 1);
                uint64_t v50 = xmmword_1E8ED2BA8;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined consume of Locale.LanguageCode?(v149, (uint64_t)v148);
                int64_t v134 = v87;
                uint64_t v49 = v86;
              }
              else
              {
                uint64_t v48 = v110;
                Swift::String v93 = String.lowercased()();
                uint64_t v50 = v93._countAndFlagsBits;
                outlined consume of Locale.LanguageCode?(v149, (uint64_t)v148);
                int64_t v134 = v93._object;
                uint64_t v49 = v85;
              }
              goto LABEL_52;
            }
            if (v71 == 26482 && v70 == (void *)0xE200000000000000
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              if (String.count.getter() >= 3)
              {
                specialized Collection.prefix(_:)(2);
                swift_bridgeObjectRelease();
                Swift::String v88 = Substring.uppercased()();
                swift_bridgeObjectRelease();
                Swift::String v161 = v88;
                uint64_t v89 = String.init<A>(_:)();
                unint64_t v91 = v90;
                Swift::String v92 = String.uppercased()();
                outlined consume of Locale.LanguageCode?(v130, (uint64_t)v132);
                uint64_t v130 = v89;
                uint64_t v131 = v92._countAndFlagsBits;
                uint64_t v132 = v91;
                unint64_t v133 = v92._object;
                goto LABEL_50;
              }
LABEL_49:
              swift_bridgeObjectRelease();
LABEL_50:
              uint64_t v50 = v147;
              uint64_t v49 = v148;
              uint64_t v48 = v149;
LABEL_52:
              int v51 = v153;
              goto LABEL_36;
            }
            if (v71 == 25715 && v70 == (void *)0xE200000000000000
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              uint64_t v94 = (uint64_t)v109;
              uint64_t v95 = v110;
              Swift::String v96 = String.lowercased()();
              outlined consume of Locale.LanguageCode?(v138, (uint64_t)v115);
              uint64_t v138 = v95;
              unint64_t v115 = (void *)v94;
              Swift::String v129 = v96;
              goto LABEL_50;
            }
            if (v71 == 0x656E6F7A656D6974 && v70 == (void *)0xE800000000000000)
            {
              uint64_t v97 = swift_bridgeObjectRelease();
            }
            else
            {
              char v98 = _stringCompareWithSmolCheck(_:_:expecting:)();
              uint64_t v97 = swift_bridgeObjectRelease();
              if ((v98 & 1) == 0) {
                goto LABEL_49;
              }
            }
            if (one-time initialization token for cache != -1) {
              uint64_t v97 = swift_once();
            }
            int64_t v99 = (os_unfair_lock_s *)static TimeZoneCache.cache;
            MEMORY[0x1F4188790](v97);
            uint64_t v106 = v110;
            uint64_t v107 = v109;
            swift_retain_n();
            os_unfair_lock_lock(v99 + 36);
            uint64_t v100 = v108;
            partial apply for closure #1 in TimeZoneCache.fixed(_:)(&v161._countAndFlagsBits);
            uint64_t v108 = v100;
            os_unfair_lock_unlock(v99 + 36);
            swift_release_n();
            uint64_t v101 = v161._countAndFlagsBits;
            uint64_t v102 = v161._object;
            swift_bridgeObjectRelease();
            if (v101) {
              int64_t v103 = v102;
            }
            else {
              int64_t v103 = 0;
            }
            uint64_t v127 = v103;
            swift_unknownObjectRelease();
            uint64_t v128 = v101;
            goto LABEL_50;
          }
          swift_bridgeObjectRelease();
          v205._os_log_t object = v109;
          v205._uint64_t countAndFlagsBits = v110;
          Locale.Weekday.init(rawValue:)(v205, (char *)&v161);
          uint64_t v118 = LOBYTE(v161._countAndFlagsBits);
        }
        uint64_t v50 = v147;
        uint64_t v49 = v148;
      }
      int v51 = v153;
LABEL_36:
      LODWORD(v161._countAndFlagsBits) = 0;
      LODWORD(v160[0]._countAndFlagsBits) = 0;
      uint64_t v47 = uenum_next();
      if (SLODWORD(v161._countAndFlagsBits) > 0) {
        goto LABEL_29;
      }
    }
  }
  uint64_t v119 = 0;
  uint64_t v142 = 0;
  uint64_t v143 = 0;
  uint64_t v144 = 0;
  int64_t v116 = 0;
  unint64_t v117 = 0;
  unint64_t v139 = 0;
  uint64_t v140 = 0;
  uint64_t v141 = 0;
  uint64_t v135 = 0;
  uint64_t v136 = 0;
  unint64_t v137 = 0;
  uint64_t v138 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  unint64_t v133 = 0;
  int64_t v134 = 0;
  uint64_t v130 = 0;
  uint64_t v131 = 0;
  uint64_t v132 = 0;
  unint64_t v115 = 0;
  v129._uint64_t countAndFlagsBits = 0;
  v129._os_log_t object = 0;
  uint64_t v127 = 0;
  uint64_t v128 = 0;
  int v51 = 4;
  int countAndFlagsBits_low = 16;
LABEL_29:
  int v153 = v51;
LABEL_30:
  swift_bridgeObjectRelease();
  swift_release();
  id v148 = v49;
  uint64_t v149 = v48;
  uint64_t v147 = v50;
  char v38 = v152;
  swift_setDeallocating();
  uenum_close();
  swift_deallocClassInstance();
  uint64_t v44 = v118;
  id v39 = v119;
  uint64_t v41 = v116;
  uint64_t v40 = v117;
  int v45 = countAndFlagsBits_low;
  uint64_t v36 = v145;
  uint64_t v35 = v114;
  long long v43 = v115;
  uint64_t v42 = v138;
LABEL_31:
  uint64_t v118 = v44;
  uint64_t v119 = v39;
  int64_t v116 = v41;
  unint64_t v117 = v40;
  unint64_t v115 = v43;
  uint64_t v138 = v42;
  v160[0]._uint64_t countAndFlagsBits = v126;
  uint64_t v53 = (uint64_t)v157;
  v160[0]._os_log_t object = v156;
  v160[1]._uint64_t countAndFlagsBits = countAndFlagsBits;
  v160[1]._os_log_t object = object;
  v160[2]._uint64_t countAndFlagsBits = v35;
  v160[2]._os_log_t object = v36;
  v160[3]._uint64_t countAndFlagsBits = v154;
  uint64_t v54 = v35;
  uint64_t v55 = v146;
  v160[3]._os_log_t object = v146;
  v160[4]._uint64_t countAndFlagsBits = v112;
  uint64_t v56 = v112;
  v160[4]._os_log_t object = v157;
  v160[5]._uint64_t countAndFlagsBits = v150;
  v160[5]._os_log_t object = v38;
  uint64_t v152 = v38;
  LODWORD(v121) = v45;
  LOBYTE(v160[6]._countAndFlagsBits) = v45;
  v160[6]._os_log_t object = v39;
  v160[7]._uint64_t countAndFlagsBits = v143;
  v160[7]._os_log_t object = v142;
  v160[8]._uint64_t countAndFlagsBits = (uint64_t)v144;
  v160[8]._os_log_t object = v40;
  v160[9]._uint64_t countAndFlagsBits = v140;
  v160[9]._os_log_t object = v139;
  v160[10]._uint64_t countAndFlagsBits = (uint64_t)v141;
  v160[10]._os_log_t object = v41;
  v160[11]._uint64_t countAndFlagsBits = v136;
  v160[11]._os_log_t object = v135;
  v160[12]._uint64_t countAndFlagsBits = (uint64_t)v137;
  LOBYTE(v160[12]._object) = v44;
  BYTE1(v160[12]._object) = v153;
  v160[13]._uint64_t countAndFlagsBits = v149;
  v160[13]._os_log_t object = v148;
  v160[14]._uint64_t countAndFlagsBits = v147;
  v160[14]._os_log_t object = v134;
  v160[15]._uint64_t countAndFlagsBits = v130;
  v160[15]._os_log_t object = v132;
  v160[16]._uint64_t countAndFlagsBits = v131;
  v160[16]._os_log_t object = v133;
  v160[17]._uint64_t countAndFlagsBits = v42;
  v160[17]._os_log_t object = v43;
  v160[18] = v129;
  v160[19]._uint64_t countAndFlagsBits = v128;
  v160[19]._os_log_t object = v127;
  v160[20]._uint64_t countAndFlagsBits = v122;
  v160[20]._os_log_t object = v125;
  v160[21]._uint64_t countAndFlagsBits = v124;
  v160[21]._os_log_t object = v123;
  outlined retain of Locale.Components(&v160[0]._countAndFlagsBits);
  uint64_t v57 = v56;
  outlined consume of Locale.LanguageCode?(v56, v53);
  uint64_t v58 = v54;
  uint64_t v59 = (uint64_t)v145;
  uint64_t v60 = v154;
  outlined consume of Locale.LanguageCode?(v54, (uint64_t)v145);
  uint64_t v61 = v126;
  uint64_t v62 = countAndFlagsBits;
  uint64_t v63 = v156;
  uint64_t v64 = object;
  outlined consume of Locale.LanguageCode?(v126, (uint64_t)v156);
  memcpy(v113, v160, 0x160uLL);
  v161._uint64_t countAndFlagsBits = v61;
  v161._os_log_t object = v63;
  uint64_t v162 = v62;
  uint64_t v163 = v64;
  uint64_t v164 = v58;
  uint64_t v165 = v59;
  uint64_t v166 = v60;
  char v167 = v55;
  uint64_t v168 = v57;
  uint64_t v169 = v157;
  uint64_t v170 = v150;
  unsigned __int8 v171 = v152;
  char v172 = v121;
  uint64_t v173 = (uint64_t)v119;
  uint64_t v174 = v143;
  long long v175 = v142;
  id v176 = v144;
  uint64_t v177 = (uint64_t)v117;
  uint64_t v178 = v140;
  char v179 = v139;
  unint64_t v180 = v141;
  uint64_t v181 = (uint64_t)v116;
  uint64_t v182 = v136;
  Swift::String v183 = v135;
  char v184 = v137;
  char v185 = v118;
  char v186 = v153;
  uint64_t v187 = v149;
  unint64_t v188 = v148;
  uint64_t v189 = v147;
  char v190 = v134;
  uint64_t v191 = v130;
  char v192 = v132;
  uint64_t v193 = v131;
  uint64_t v194 = v133;
  uint64_t v195 = v138;
  uint64_t v196 = (uint64_t)v115;
  Swift::String v197 = v129;
  uint64_t v198 = v128;
  char v199 = v127;
  uint64_t v200 = v122;
  char v201 = v125;
  uint64_t v202 = v124;
  char v203 = v123;
  return outlined release of Locale.Components(&v161._countAndFlagsBits);
}

uint64_t *outlined release of Locale.Components(uint64_t *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[9];
  uint64_t v6 = a1[13];
  uint64_t v8 = a1[14];
  uint64_t v9 = a1[18];
  uint64_t v10 = a1[17];
  uint64_t v11 = a1[22];
  uint64_t v12 = a1[21];
  uint64_t v13 = a1[27];
  uint64_t v14 = a1[26];
  uint64_t v15 = a1[31];
  uint64_t v16 = a1[30];
  uint64_t v17 = a1[35];
  uint64_t v18 = a1[34];
  uint64_t v19 = a1[41];
  uint64_t v20 = a1[40];
  outlined consume of Locale.LanguageCode?(*a1, a1[1]);
  outlined consume of Locale.LanguageCode?(v2, v3);
  outlined consume of Locale.LanguageCode?(v4, v5);
  outlined consume of Locale.LanguageCode?(v6, v8);
  outlined consume of Locale.LanguageCode?(v10, v9);
  outlined consume of Locale.LanguageCode?(v12, v11);
  outlined consume of Locale.LanguageCode?(v14, v13);
  outlined consume of Locale.LanguageCode?(v16, v15);
  outlined consume of Locale.LanguageCode?(v18, v17);
  swift_unknownObjectRelease();
  outlined consume of Locale.LanguageCode?(v20, v19);
  return a1;
}

uint64_t outlined consume of Locale.LanguageCode?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *outlined retain of Locale.Components(uint64_t *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[9];
  uint64_t v6 = a1[13];
  uint64_t v8 = a1[14];
  uint64_t v9 = a1[18];
  uint64_t v10 = a1[17];
  uint64_t v11 = a1[22];
  uint64_t v12 = a1[21];
  uint64_t v13 = a1[27];
  uint64_t v14 = a1[26];
  uint64_t v15 = a1[31];
  uint64_t v16 = a1[30];
  uint64_t v17 = a1[35];
  uint64_t v18 = a1[34];
  uint64_t v19 = a1[41];
  uint64_t v20 = a1[40];
  outlined copy of Locale.LanguageCode?(*a1, a1[1]);
  outlined copy of Locale.LanguageCode?(v2, v3);
  outlined copy of Locale.LanguageCode?(v4, v5);
  outlined copy of Locale.LanguageCode?(v6, v8);
  outlined copy of Locale.LanguageCode?(v10, v9);
  outlined copy of Locale.LanguageCode?(v12, v11);
  outlined copy of Locale.LanguageCode?(v14, v13);
  outlined copy of Locale.LanguageCode?(v16, v15);
  outlined copy of Locale.LanguageCode?(v18, v17);
  swift_unknownObjectRetain();
  outlined copy of Locale.LanguageCode?(v20, v19);
  return a1;
}

uint64_t outlined copy of Locale.LanguageCode?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t specialized static Locale.keywordValue(identifier:key:)()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  String.utf8CString.getter();
  String.utf8CString.getter();
  Keywordid Value = uloc_getKeywordValue();
  swift_release();
  swift_release();
  if (KeywordValue < 1) {
    return 0;
  }
  v2[KeywordValue] = 0;
  return MEMORY[0x185301F80](v2);
}

uint64_t static Locale.legacyKey(forKey:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000) {
    goto LABEL_35;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    goto LABEL_35;
  }
  unint64_t v7 = 0xEC0000006574616ELL;
  uint64_t v8 = 0x7265746C616C6F63;
  if (a1 == 0x7265746C616C6F63 && a2 == 0xEC0000006574616ELL) {
    goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x776B6361626C6F63 && a2 == 0xEC00000073647261)
  {
    goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x66657361636C6F63 && a2 == 0xEC00000074737269)
  {
    goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x6C657361636C6F63 && a2 == 0xEC0000006C657665)
  {
    goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000015 && a2 == 0x80000001823B0670)
  {
    goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x6F6974616C6C6F63 && a2 == 0xE90000000000006ELL)
  {
    goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000010 && a2 == 0x80000001823B0690)
  {
    goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x72656D756E6C6F63 && a2 == 0xEA00000000006369)
  {
    goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x64726F65726C6F63 && a2 == 0xEA00000000007265)
  {
    goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x6E657274736C6F63 && a2 == 0xEB00000000687467)
  {
    goto LABEL_35;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v11 = a1 == 0x79636E6572727563 && a2 == 0xE800000000000000;
  BOOL v12 = v11;
  if ((v10 & 1) != 0
    || v12
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x7372756F68 && a2 == 0xE500000000000000)
  {
    goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x6572757361656DLL && a2 == 0xE700000000000000)
  {
    goto LABEL_35;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v14 = a1 == 0x737265626D756ELL && a2 == 0xE700000000000000;
  BOOL v15 = v14;
  if ((v13 & 1) != 0 || v15) {
    goto LABEL_35;
  }
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v17 = a1 == 0x656E6F7A656D6974 && a2 == 0xE800000000000000;
  BOOL v18 = v17;
  if ((v16 & 1) != 0
    || v18
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x656C626169726176 && a2 == 0xEB00000000706F74)
  {
    goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 || a1 == 26211 && a2 == 0xE200000000000000) {
    goto LABEL_35;
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v20 = a1 == 12388 && a2 == 0xE200000000000000;
  BOOL v21 = v20;
  if ((v19 & 1) != 0 || v21) {
    goto LABEL_35;
  }
  char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v23 = a1 == 30820 && a2 == 0xE200000000000000;
  BOOL v24 = v23;
  if ((v22 & 1) != 0 || v24) {
    goto LABEL_35;
  }
  char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v26 = a1 == 28005 && a2 == 0xE200000000000000;
  BOOL v27 = v26;
  if ((v25 & 1) != 0 || v27) {
    goto LABEL_35;
  }
  char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v29 = a1 == 30566 && a2 == 0xE200000000000000;
  BOOL v30 = v29;
  if ((v28 & 1) != 0 || v30) {
    goto LABEL_35;
  }
  char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v32 = a1 == 12392 && a2 == 0xE200000000000000;
  BOOL v33 = v32;
  if ((v31 & 1) != 0 || v33) {
    goto LABEL_35;
  }
  char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v35 = a1 == 12393 && a2 == 0xE200000000000000;
  BOOL v36 = v35;
  if ((v34 & 1) != 0 || v36) {
    goto LABEL_35;
  }
  char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v38 = a1 == 12395 && a2 == 0xE200000000000000;
  BOOL v39 = v38;
  if ((v37 & 1) != 0 || v39) {
    goto LABEL_35;
  }
  char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v41 = a1 == 30315 && a2 == 0xE200000000000000;
  BOOL v42 = v41;
  if ((v40 & 1) != 0 || v42) {
    goto LABEL_35;
  }
  char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v44 = a1 == 25196 && a2 == 0xE200000000000000;
  BOOL v45 = v44;
  if ((v43 & 1) != 0 || v45) {
    goto LABEL_35;
  }
  char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v47 = a1 == 30572 && a2 == 0xE200000000000000;
  BOOL v48 = v47;
  if ((v46 & 1) != 0 || v48) {
    goto LABEL_35;
  }
  char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v50 = a1 == 12397 && a2 == 0xE200000000000000;
  BOOL v51 = v50;
  if ((v49 & 1) != 0 || v51) {
    goto LABEL_35;
  }
  char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v53 = a1 == 26482 && a2 == 0xE200000000000000;
  BOOL v54 = v53;
  if ((v52 & 1) != 0 || v54) {
    goto LABEL_35;
  }
  char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v56 = a1 == 12403 && a2 == 0xE200000000000000;
  BOOL v57 = v56;
  if ((v55 & 1) != 0 || v57) {
    goto LABEL_35;
  }
  char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v59 = a1 == 25715 && a2 == 0xE200000000000000;
  BOOL v60 = v59;
  if ((v58 & 1) != 0 || v60) {
    goto LABEL_35;
  }
  char v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v62 = a1 == 29555 && a2 == 0xE200000000000000;
  BOOL v63 = v62;
  if ((v61 & 1) != 0 || v63) {
    goto LABEL_35;
  }
  char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v65 = a1 == 12404 && a2 == 0xE200000000000000;
  BOOL v66 = v65;
  if ((v64 & 1) != 0
    || v66
    || ((char v67 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 24950)
      ? (BOOL v68 = a2 == 0xE200000000000000)
      : (BOOL v68 = 0),
        !v68 ? (char v69 = 0) : (char v69 = 1),
        (v67 & 1) != 0
     || (v69 & 1) != 0
     || ((char v70 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 12408)
       ? (BOOL v71 = a2 == 0xE200000000000000)
       : (BOOL v71 = 0),
         !v71 ? (char v72 = 0) : (char v72 = 1),
         (v70 & 1) != 0 || (v72 & 1) != 0 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))))
  {
LABEL_35:
    uint64_t result = swift_bridgeObjectRetain();
LABEL_36:
    uint64_t v8 = a1;
    unint64_t v7 = a2;
LABEL_37:
    *a3 = v8;
    a3[1] = v7;
    return result;
  }
  if (a1 == 24931 && a2 == 0xE200000000000000
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    unint64_t v7 = 0xE800000000000000;
    uint64_t v8 = 0x7261646E656C6163;
    goto LABEL_37;
  }
  if (a1 == 24939 && a2 == 0xE200000000000000) {
    goto LABEL_37;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    goto LABEL_37;
  }
  if (a1 == 25195 && a2 == 0xE200000000000000)
  {
    uint64_t v8 = 0x776B6361626C6F63;
    unint64_t v7 = 0xEC00000073647261;
    goto LABEL_37;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v8 = 0x776B6361626C6F63;
  unint64_t v7 = 0xEC00000073647261;
  if (result) {
    goto LABEL_37;
  }
  if (a1 == 26219 && a2 == 0xE200000000000000)
  {
    uint64_t v8 = 0x66657361636C6F63;
    unint64_t v7 = 0xEC00000074737269;
    goto LABEL_37;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v8 = 0x66657361636C6F63;
  unint64_t v7 = 0xEC00000074737269;
  if (result) {
    goto LABEL_37;
  }
  if (a1 == 25451 && a2 == 0xE200000000000000)
  {
    uint64_t v8 = 0x6C657361636C6F63;
    unint64_t v7 = 0xEC0000006C657665;
    goto LABEL_37;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v8 = 0x6C657361636C6F63;
  unint64_t v7 = 0xEC0000006C657665;
  if (result) {
    goto LABEL_37;
  }
  uint64_t v8 = 0xD000000000000015;
  unint64_t v7 = 0x80000001823B0670;
  if (a1 == 26731 && a2 == 0xE200000000000000) {
    goto LABEL_37;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    goto LABEL_37;
  }
  if (a1 == 28515 && a2 == 0xE200000000000000)
  {
    uint64_t v8 = 0x6F6974616C6C6F63;
    unint64_t v7 = 0xE90000000000006ELL;
    goto LABEL_37;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v8 = 0x6F6974616C6C6F63;
  unint64_t v7 = 0xE90000000000006ELL;
  if (result) {
    goto LABEL_37;
  }
  unint64_t v7 = 0x80000001823B0690;
  if (a1 == 27499 && a2 == 0xE200000000000000)
  {
    uint64_t v8 = 0xD000000000000010;
    goto LABEL_37;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v8 = 0xD000000000000010;
  if (result) {
    goto LABEL_37;
  }
  if (a1 == 28267 && a2 == 0xE200000000000000)
  {
    uint64_t v8 = 0x72656D756E6C6F63;
    unint64_t v7 = 0xEA00000000006369;
    goto LABEL_37;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v8 = 0x72656D756E6C6F63;
  unint64_t v7 = 0xEA00000000006369;
  if (result) {
    goto LABEL_37;
  }
  unint64_t v7 = 0xEA00000000007265;
  if (a1 == 29291 && a2 == 0xE200000000000000)
  {
    uint64_t v8 = 0x64726F65726C6F63;
    goto LABEL_37;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v8 = 0x64726F65726C6F63;
  if (result) {
    goto LABEL_37;
  }
  if (a1 == 29547 && a2 == 0xE200000000000000)
  {
    uint64_t v8 = 0x6E657274736C6F63;
    unint64_t v7 = 0xEB00000000687467;
    goto LABEL_37;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v8 = 0x6E657274736C6F63;
  unint64_t v7 = 0xEB00000000687467;
  if (result) {
    goto LABEL_37;
  }
  if (a1 == 30051 && a2 == 0xE200000000000000
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    unint64_t v7 = 0xE800000000000000;
    uint64_t v8 = 0x79636E6572727563;
    goto LABEL_37;
  }
  if (a1 == 25448 && a2 == 0xE200000000000000
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    unint64_t v7 = 0xE500000000000000;
    uint64_t v8 = 0x7372756F68;
    goto LABEL_37;
  }
  if (a1 == 29549 && a2 == 0xE200000000000000
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    unint64_t v7 = 0xE700000000000000;
    uint64_t v8 = 0x6572757361656DLL;
    goto LABEL_37;
  }
  if (a1 == 30062 && a2 == 0xE200000000000000
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    unint64_t v7 = 0xE700000000000000;
    uint64_t v8 = 0x737265626D756ELL;
    goto LABEL_37;
  }
  if (a1 == 31348 && a2 == 0xE200000000000000
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    unint64_t v7 = 0xE800000000000000;
    uint64_t v8 = 0x656E6F7A656D6974;
    goto LABEL_37;
  }
  if (a1 == 29814 && a2 == 0xE200000000000000)
  {
    uint64_t v8 = 0x656C626169726176;
    unint64_t v7 = 0xEB00000000706F74;
    goto LABEL_37;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v8 = 0x656C626169726176;
  unint64_t v7 = 0xEB00000000706F74;
  if (result) {
    goto LABEL_37;
  }
  uint64_t v73 = String.utf8CString.getter() + 32;
  uint64_t v74 = uloc_toLegacyKey();
  if (v74)
  {
    if (v74 != v73)
    {
      uint64_t v8 = String.init(cString:)();
      unint64_t v7 = v75;
      uint64_t result = swift_release();
      goto LABEL_37;
    }
    swift_bridgeObjectRetain();
    uint64_t result = swift_release();
    goto LABEL_36;
  }
  uint64_t result = swift_release();
  *a3 = 0;
  a3[1] = 0;
  return result;
}

uint64_t type metadata accessor for ICU.Enumerator()
{
  return self;
}

uint64_t protocol witness for _LocaleProtocol.calendarIdentifier.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 200))(ObjectType, v1);

  return swift_unknownObjectRelease();
}

id _LocaleICU.collatorIdentifier.getter()
{
  outlined init with take of LocalePreferences?(v0 + 32, (uint64_t)v9);
  outlined init with take of LocalePreferences?((uint64_t)v9, (uint64_t)v10);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v10) == 1) {
    goto LABEL_2;
  }
  if (v12)
  {
    CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
    CFStringRef v3 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    outlined retain of LocalePreferences?((uint64_t)v9, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    swift_bridgeObjectRetain();
    CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v2, v3);
    swift_unknownObjectRelease();
    if (CanonicalLanguageIdentifierFromString)
    {
      id v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
      swift_bridgeObjectRelease();

      outlined retain of LocalePreferences?((uint64_t)v9, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
      return v1;
    }
    swift_bridgeObjectRelease();
    outlined retain of LocalePreferences?((uint64_t)v9, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
    return 0;
  }
  if (v11 && *(void *)(v11 + 16))
  {
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
    CFStringRef v6 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    outlined retain of LocalePreferences?((uint64_t)v9, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    swift_bridgeObjectRetain();
    unint64_t v7 = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v5, v6);
    swift_unknownObjectRelease();
    if (v7)
    {
      id v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

      outlined retain of LocalePreferences?((uint64_t)v9, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
      swift_bridgeObjectRelease();
      return v1;
    }
    outlined retain of LocalePreferences?((uint64_t)v9, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_2:
  id v1 = *(id *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for _LocaleProtocol.scriptCode.getter in conformance _LocaleICU()
{
  id v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.scriptCode.getter((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t partial apply for closure #1 in _LocaleICU.scriptCode.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _LocaleICU.scriptCode.getter(a1, a2);
}

uint64_t protocol witness for _LocaleProtocol.currencySymbol.getter in conformance _LocaleICU()
{
  id v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.currencySymbol.getter(&v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t JSONEncoder.init()()
{
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = 0;
  *(unsigned char *)(v0 + 40) = 2;
  *(void *)(v0 + 48) = 1;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  uint64_t v1 = MEMORY[0x1E4FBC868];
  *(void *)(v0 + 120) = 0;
  *(void *)(v0 + 128) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = 0;
  *(void *)(v0 + 136) = v2;
  return v0;
}

void __message_handler_error_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x185308110]();
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t Notification.description.getter()
{
  v7[0] = 0;
  v7[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  uint64_t v8 = 0x203D20656D616ELL;
  unint64_t v9 = 0xE700000000000000;
  v1._uint64_t countAndFlagsBits = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)v0);
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x7463656A626F202CLL;
  v2._os_log_t object = (void *)0xEB00000000203D20;
  String.append(_:)(v2);
  outlined init with copy of Any?(v0 + 8, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  v3._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x6E4972657375202CLL;
  v4._os_log_t object = (void *)0xED0000203D206F66;
  String.append(_:)(v4);
  v7[0] = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]?);
  v5._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return v8;
}

NSNotification __swiftcall Notification._bridgeToObjectiveC()()
{
  Swift::String v1 = *(void **)v0;
  outlined init with copy of Any?(v0 + 8, (uint64_t)v14);
  Swift::String v2 = *(void **)(v0 + 40);
  uint64_t v3 = v15;
  if (!v15)
  {
    swift_bridgeObjectRetain();
    id v13 = v1;
    uint64_t v10 = 0;
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  Swift::String v4 = __swift_project_boxed_opaque_existential_1(v14, v15);
  uint64_t v5 = *(void *)(v3 - 8);
  double v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v5 + 16))(v8, v6);
  swift_bridgeObjectRetain();
  id v9 = v1;
  uint64_t v10 = _bridgeAnythingToObjectiveC<A>(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  if (v2) {
LABEL_3:
  }
    Swift::String v2 = (void *)_NativeDictionary.bridged()();
LABEL_4:
  id v11 = objc_msgSend(objc_allocWithZone((Class)NSNotification), sel_initWithName_object_userInfo_, v1, v10, v2);
  swift_unknownObjectRelease();

  return (NSNotification)v11;
}

uint64_t dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return MEMORY[0x1E4FBC868];
  }
  if (a2 == MEMORY[0x1E4FBB1A0] && a3 == MEMORY[0x1E4FBC840] + 8)
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    id v9 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v9) {
      return (uint64_t)v9;
    }
    id v11 = objc_msgSend(a1, sel_count);
    if (v11)
    {
      uint64_t v12 = (uint64_t)v11;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      id v9 = (void *)static _DictionaryStorage.allocate(capacity:)();
      id v13 = (void *)v9[6];
      uint64_t v14 = v9[7];
      swift_retain();
      uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v13, v14, a1, v12);
      if (result < 0 || v12 < result)
      {
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      void v9[2] = result;
      if (!result)
      {
LABEL_28:
        uint64_t result = swift_release();
        if (v9) {
          return (uint64_t)v9;
        }
        goto LABEL_46;
      }
      uint64_t v15 = result - 1;
      char v16 = v9 + 8;
      while (1)
      {
        while (1)
        {
          if ((*(void *)((char *)v16 + (((unint64_t)v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15)) {
            goto LABEL_20;
          }
          BOOL v21 = (uint64_t *)(v9[6] + 16 * v15);
          uint64_t v22 = *v21;
          uint64_t v23 = v21[1];
          swift_bridgeObjectRetain();
          unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v23);
          char v26 = v25;
          swift_bridgeObjectRelease();
          if ((v26 & 1) == 0) {
            break;
          }
          swift_arrayDestroy();
          uint64_t result = swift_arrayDestroy();
          uint64_t v27 = v9[2];
          BOOL v28 = __OFSUB__(v27, 1);
          uint64_t v29 = v27 - 1;
          if (v28) {
            goto LABEL_47;
          }
          void v9[2] = v29;
LABEL_20:
          if (--v15 < 0) {
            goto LABEL_28;
          }
        }
        *(void *)((char *)v16 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
        if (v15 < (uint64_t)v24)
        {
          *(_OWORD *)(v9[6] + 16 * v24) = *(_OWORD *)(v9[6] + 16 * v15);
          uint64_t v17 = v9[7];
          BOOL v18 = (_OWORD *)(v17 + 32 * v15);
          long long v19 = v18[1];
          BOOL v20 = (_OWORD *)(v17 + 32 * v24);
          *BOOL v20 = *v18;
          v20[1] = v19;
          goto LABEL_20;
        }
        if (v24 == v15) {
          goto LABEL_20;
        }
        uint64_t v30 = v9[6];
        char v31 = (uint64_t *)(v30 + 16 * v24);
        BOOL v32 = (uint64_t *)(v30 + 16 * v15);
        uint64_t v33 = *v31;
        uint64_t v34 = v31[1];
        uint64_t v35 = v32[1];
        *char v31 = *v32;
        v31[1] = v35;
        *BOOL v32 = v33;
        v32[1] = v34;
        uint64_t v36 = v9[7];
        char v37 = (_OWORD *)(v36 + 32 * v24);
        BOOL v38 = (_OWORD *)(v36 + 32 * v15);
        outlined init with take of Any(v37, &aBlock);
        outlined init with take of Any(v38, v37);
        outlined init with take of Any(&aBlock, v38);
        if (v15 < 0) {
          goto LABEL_28;
        }
      }
    }
    return MEMORY[0x1E4FBC868];
  }
  swift_unknownObjectRetain();
  id v9 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v9) {
    return (uint64_t)v9;
  }
  if (_swift_isClassOrObjCExistentialType() & 1) != 0 && (_swift_isClassOrObjCExistentialType())
  {
    uint64_t result = (uint64_t)objc_msgSend(a1, sel_copyWithZone_, 0);
    id v9 = (void *)(~((unint64_t)result >> 1) & 0x4000000000000000 | result);
    if (!v9) {
      goto LABEL_46;
    }
    return (uint64_t)v9;
  }
  if (*(uint64_t *)(*(void *)(a2 - 8) + 72) >= 8 && *(void *)(*(void *)(a3 - 8) + 72) > 7)
  {
    id v42 = objc_msgSend(a1, sel_count);
    if (!v42)
    {
      uint64_t result = Dictionary.init(dictionaryLiteral:)();
      id v9 = (void *)result;
      if (!result) {
        goto LABEL_46;
      }
      return (uint64_t)v9;
    }
    MEMORY[0x1F4188790](v42);
    v49[2] = a2;
    v49[3] = a3;
    v49[4] = a4;
    v49[5] = a1;
    v49[6] = v43;
    uint64_t result = _NativeDictionary.init(_unsafeUninitializedCapacity:allowingDuplicates:initializingWith:)(v43, v44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))partial apply for closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:), (uint64_t)v49, a2, a3, a4);
    id v9 = (void *)result;
    if (result) {
      return (uint64_t)v9;
    }
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  id v40 = objc_msgSend(a1, sel_count);
  if (v40)
  {
    type metadata accessor for _DictionaryStorage();
    uint64_t v41 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v41 = MEMORY[0x1E4FBC868];
  }
  char v55 = (void *)v41;
  id v56 = v40;
  BOOL v45 = (void *)swift_allocObject();
  v45[2] = a2;
  v45[3] = a3;
  v45[4] = a4;
  v45[5] = &v55;
  uint64_t v46 = swift_allocObject();
  *(void *)(v46 + 16) = partial apply for closure #1 in static Dictionary._forceBridgeFromObjectiveC(_:result:);
  *(void *)(v46 + 24) = v45;
  BOOL v53 = partial apply for thunk for @callee_guaranteed (@in_guaranteed Any, @in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  uint64_t v54 = v46;
  *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
  *((void *)&aBlock + 1) = 1107296256;
  BOOL v51 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  char v52 = &block_descriptor_16;
  BOOL v47 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_enumerateKeysAndObjectsUsingBlock_, v47);
  _Block_release(v47);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    goto LABEL_49;
  }
  id v9 = v55;
  if ((id)v55[2] == v56)
  {
    uint64_t result = swift_release();
    if (v9) {
      return (uint64_t)v9;
    }
    goto LABEL_46;
  }
LABEL_50:
  __break(1u);
  return result;
}

uint64_t _NativeDictionary.init(_unsafeUninitializedCapacity:allowingDuplicates:initializingWith:)(uint64_t a1, int a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v76 = a2;
  uint64_t v72 = *(void *)(a6 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](a1);
  char v69 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  char v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = v17;
  if (v14)
  {
    type metadata accessor for _DictionaryStorage();
    uint64_t v18 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v18 = MEMORY[0x1E4FBC868];
  }
  uint64_t v19 = *(void *)(v18 + 48);
  uint64_t v20 = *(void *)(v18 + 56);
  swift_retain();
  uint64_t result = a3(v19, a1, v20, a1);
  if (result < 0 || result > a1)
  {
LABEL_49:
    __break(1u);
  }
  else
  {
    *(void *)(v18 + 16) = result;
    if (result)
    {
      uint64_t v74 = a7;
      uint64_t v22 = result - 1;
      uint64_t v23 = v18 + 64;
      uint64_t v24 = v70;
      uint64_t v75 = v70 + 16;
      uint64_t v73 = (void (**)(char *, uint64_t))(v70 + 8);
      uint64_t v67 = v72 + 32;
      BOOL v68 = (void (**)(char *, uint64_t, uint64_t))(v70 + 32);
      uint64_t v66 = a5;
      while (1)
      {
        if ((*(void *)(v23 + (((unint64_t)v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v22)) {
          goto LABEL_9;
        }
        uint64_t v25 = *(void *)(v24 + 72);
        int64_t v26 = v25 * v22;
        (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v16, *(void *)(v18 + 48) + v25 * v22, a5);
        if (v76)
        {
          unint64_t v27 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v16, a5, v74);
          char v29 = v28;
          (*v73)(v16, a5);
          if (v29)
          {
            swift_arrayDestroy();
            uint64_t result = swift_arrayDestroy();
            uint64_t v30 = *(void *)(v18 + 16);
            BOOL v31 = __OFSUB__(v30, 1);
            uint64_t v32 = v30 - 1;
            if (v31)
            {
LABEL_48:
              __break(1u);
              goto LABEL_49;
            }
            *(void *)(v18 + 16) = v32;
            goto LABEL_9;
          }
          char v37 = (uint64_t *)(v23 + 8 * (v27 >> 6));
          uint64_t v38 = 1 << v27;
          uint64_t v39 = *v37;
        }
        else
        {
          uint64_t v33 = dispatch thunk of Hashable._rawHashValue(seed:)();
          uint64_t result = ((uint64_t (*)(char *, uint64_t))*v73)(v16, a5);
          uint64_t v34 = -1 << *(unsigned char *)(v18 + 32);
          unint64_t v35 = v33 & ~v34;
          unint64_t v36 = v35 >> 6;
          if (((-1 << v35) & ~*(void *)(v23 + 8 * (v35 >> 6))) != 0)
          {
            unint64_t v27 = __clz(__rbit64((-1 << v35) & ~*(void *)(v23 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            char v40 = 0;
            unint64_t v41 = (unint64_t)(63 - v34) >> 6;
            do
            {
              if (++v36 == v41 && (v40 & 1) != 0)
              {
                __break(1u);
                goto LABEL_48;
              }
              BOOL v42 = v36 == v41;
              if (v36 == v41) {
                unint64_t v36 = 0;
              }
              v40 |= v42;
              uint64_t v43 = *(void *)(v23 + 8 * v36);
            }
            while (v43 == -1);
            unint64_t v27 = __clz(__rbit64(~v43)) + (v36 << 6);
          }
          char v37 = (uint64_t *)(v23 + 8 * (v27 >> 6));
          uint64_t v39 = 1 << v27;
          uint64_t v38 = *v37;
        }
        *char v37 = v39 | v38;
        if (v22 < (uint64_t)v27)
        {
          uint64_t v44 = *(void *)(v18 + 48);
          unint64_t v45 = v44 + v25 * v27;
          unint64_t v46 = v44 + v26 + v25;
          if ((uint64_t)(v25 * v27) < v26 || v45 >= v46)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v25 * v27 != v26)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          uint64_t v60 = *(void *)(v18 + 56);
          uint64_t v61 = *(void *)(v72 + 72);
          unint64_t v62 = v60 + v61 * v27;
          unint64_t v63 = v60 + v61 * v22 + v61;
          if ((uint64_t)(v61 * v27) < v61 * v22 || v62 >= v63)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v61 * v27 != v61 * v22)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          goto LABEL_9;
        }
        if (v27 == v22)
        {
LABEL_9:
          if (--v22 < 0) {
            break;
          }
        }
        else
        {
          uint64_t v48 = *(void *)(v18 + 48);
          char v49 = (char *)(v48 + v25 * v27);
          BOOL v50 = (char *)(v48 + v26);
          BOOL v51 = *v68;
          (*v68)(v16, (uint64_t)v49, a5);
          v51(v49, (uint64_t)v50, a5);
          v51(v50, (uint64_t)v16, a5);
          uint64_t v52 = *(void *)(v18 + 56);
          uint64_t v53 = v71;
          uint64_t v54 = *(void *)(v72 + 72);
          char v55 = (char *)(v52 + v54 * v27);
          id v56 = (char *)(v52 + v54 * v22);
          BOOL v57 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 32);
          char v58 = v69;
          v57(v69, (uint64_t)v55, v71);
          v57(v55, (uint64_t)v56, v53);
          BOOL v59 = v58;
          uint64_t v24 = v70;
          v57(v56, (uint64_t)v59, v53);
          a5 = v66;
          if (v22 < 0) {
            break;
          }
        }
      }
    }
    swift_release();
    return v18;
  }
  return result;
}

unint64_t __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[1] = a1;
  _OWORD v21[2] = a4;
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v4;
  uint64_t v9 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v11 = v10 & ~v9;
  v21[0] = v4 + 64;
  if ((*(void *)(v4 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
  {
    uint64_t v12 = ~v9;
    uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v13 = v6 + 16;
    uint64_t v14 = v15;
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v13 - 8);
    do
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v22 + 48) + v16 * v11, a3);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v17)(v8, a3);
      if (v19) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v12;
      uint64_t v13 = v18;
    }
    while (((*(void *)(v21[0] + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  return v11;
}

unint64_t __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v6, a2, a3);
}

void partial apply for closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(a1, a2, a3, a4, v4[5], v4[6], v4[2], v4[3]);
}

void closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = *(void *)(a8 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v15 - 8);
  double v20 = MEMORY[0x1F4188790](v17);
  uint64_t v22 = (char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v23) {
    goto LABEL_32;
  }
  if (!a3)
  {
LABEL_33:
    __break(1u);
    return;
  }
  uint64_t v38 = v19;
  objc_msgSend(v18, sel__getObjects_andKeys_count_, a3, a1, a6, v20);
  char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  uint64_t v36 = v12;
  uint64_t v37 = a3;
  if (isClassOrObjCExistentialType)
  {
    if (a6 < 0)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    if (a6)
    {
      uint64_t v25 = 0;
      do
      {
        uint64_t v39 = *(void *)(a1 + 8 * v25);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a1 + *(void *)(v16 + 72) * v25++, v22, a7);
      }
      while (a6 != v25);
    }
  }
  else
  {
    if (a6 < 0)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    if (a6)
    {
      uint64_t v26 = a6;
      while (v26 <= a6)
      {
        uint64_t v27 = v26 - 1;
        uint64_t v39 = *(void *)(a1 - 8 + 8 * v26);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a1 + *(void *)(v16 + 72) * v27, v22, a7);
        uint64_t v26 = v27;
        if (!v27) {
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
  }
LABEL_14:
  uint64_t v28 = v38;
  if ((_swift_isClassOrObjCExistentialType() & 1) == 0)
  {
    uint64_t v33 = v36;
    uint64_t v32 = v37;
    if (a6 < 0)
    {
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    if (!a6) {
      return;
    }
    uint64_t v34 = a6;
    while (v34 <= a6)
    {
      uint64_t v35 = v34 - 1;
      uint64_t v39 = *(void *)(v32 - 8 + 8 * v34);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v32 + *(void *)(v33 + 72) * v35, v14, v28);
      uint64_t v34 = v35;
      if (!v35) {
        return;
      }
    }
    goto LABEL_27;
  }
  uint64_t v30 = v36;
  uint64_t v29 = v37;
  if (a6 < 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (a6)
  {
    uint64_t v31 = 0;
    do
    {
      uint64_t v39 = *(void *)(v29 + 8 * v31);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v29 + *(void *)(v30 + 72) * v31++, v14, v28);
    }
    while (a6 != v31);
  }
}

uint64_t partial apply for closure #1 in static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, a3, a4, *(void **)(v4 + 40), *(void *)(v4 + 48), *(unsigned char **)(v4 + 56), *(void *)(v4 + 16), *(void *)(v4 + 24));
}

uint64_t closure #1 in static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, unsigned char *a7, uint64_t a8, uint64_t a9)
{
  id v90 = a5;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v78 = v14;
  uint64_t v79 = v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  Swift::String v77 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v75 = (char *)&v74 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v87 = (char *)&v74 - v21;
  uint64_t v82 = a9;
  uint64_t v89 = *(void *)(a9 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v85 = (char *)&v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  unint64_t v86 = (char *)&v74 - v24;
  uint64_t v25 = type metadata accessor for Optional();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v80 = v25;
  uint64_t v81 = v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v29 = (char *)&v74 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x1F4188790](v27);
  int v76 = (char *)&v74 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v34 = (char *)&v74 - v33;
  uint64_t v35 = *(void *)(a8 - 8);
  uint64_t v36 = MEMORY[0x1F4188790](v32);
  uint64_t v38 = (char *)&v74 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v36);
  unint64_t v41 = (char *)&v74 - v40;
  uint64_t v91 = a1;
  if (!a1) {
    goto LABEL_47;
  }
  if (a3)
  {
    objc_msgSend(v90, sel__getObjects_andKeys_count_, a3, v91, a6);
    uint64_t result = _swift_isClassOrObjCExistentialType();
    Swift::String v83 = a7;
    uint64_t v84 = a6;
    if (result)
    {
      if (a6 >= 1)
      {
        uint64_t v88 = a3;
        uint64_t v42 = v91 - 8;
        uint64_t v43 = a6;
        while (1)
        {
          uint64_t v92 = *(void *)(v42 + 8 * v43);
          swift_unknownObjectRetain();
          int v44 = swift_dynamicCast();
          unint64_t v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56);
          if (!v44) {
            break;
          }
          --v43;
          v45(v29, 0, 1, a8);
          unint64_t v46 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
          v46(v38, v29, a8);
          v46((char *)(v91 + *(void *)(v35 + 72) * v43), v38, a8);
          if ((unint64_t)(v43 + 1) <= 1) {
            goto LABEL_8;
          }
        }
        v45(v29, 1, 1, a8);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v29, v80);
LABEL_26:
        a7 = v83;
        a6 = v84;
        goto LABEL_27;
      }
      goto LABEL_22;
    }
    if (a6 < 1)
    {
LABEL_22:
      uint64_t v43 = a6;
      if (a6)
      {
LABEL_27:
        if (!__OFSUB__(a6, v43))
        {
          swift_arrayDestroy();
          uint64_t v61 = 0;
          *a7 = 0;
          return v61;
        }
        __break(1u);
        goto LABEL_46;
      }
      *a7 = 1;
      _swift_isClassOrObjCExistentialType();
LABEL_38:
      uint64_t v61 = v84;
      *Swift::String v83 = 1;
      return v61;
    }
    uint64_t v88 = a3;
    uint64_t v43 = a6;
    BOOL v57 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56);
    uint64_t v74 = (void (**)(char *, char *, uint64_t))(v81 + 32);
    id v90 = (id)(v91 - 8);
    do
    {
      uint64_t v58 = *((void *)v90 + v43);
      swift_unknownObjectRetain();
      if (_swift_isClassOrObjCExistentialType())
      {
        uint64_t v92 = v58;
        swift_unknownObjectRetain();
        int v59 = swift_dynamicCast();
        (*v57)(v34, v59 ^ 1u, 1, a8);
      }
      else
      {
        (*v57)(v76, 1, 1, a8);
        _bridgeNonVerbatimFromObjectiveCConditional<A>(_:_:_:)();
        (*v74)(v34, v76, v80);
      }
      swift_unknownObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v34, 1, a8) == 1)
      {
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v34, v80);
        goto LABEL_26;
      }
      --v43;
      uint64_t v60 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
      v60(v41, v34, a8);
      v60((char *)(v91 + *(void *)(v35 + 72) * v43), v41, a8);
    }
    while ((unint64_t)(v43 + 1) > 1);
LABEL_8:
    *Swift::String v83 = 1;
    uint64_t result = _swift_isClassOrObjCExistentialType();
    if (result)
    {
      uint64_t v47 = v84;
      if (v84 >= 1)
      {
        uint64_t v48 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v89 + 56);
        uint64_t v49 = v89;
        id v90 = (id)(v88 - 8);
        uint64_t v50 = v84;
        uint64_t v51 = v82;
        uint64_t v52 = v77;
        uint64_t v53 = v85;
        while (1)
        {
          uint64_t v92 = *((void *)v90 + v50);
          swift_unknownObjectRetain();
          int v54 = swift_dynamicCast();
          char v55 = *v48;
          if (!v54) {
            break;
          }
          --v50;
          v55(v52, 0, 1, v51);
          id v56 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
          v56(v53, v52, v51);
          v56((char *)(v88 + *(void *)(v49 + 72) * v50), v53, v51);
          if ((unint64_t)(v50 + 1) <= 1) {
            goto LABEL_38;
          }
        }
        v55(v52, 1, 1, v51);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v79 + 8))(v52, v78);
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v47 = v84;
      if (v84 >= 1)
      {
        unint64_t v62 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v89 + 56);
        unint64_t v63 = (void (**)(void))(v79 + 32);
        char v64 = (unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48);
        id v90 = (id)(v88 - 8);
        uint64_t v85 = (char *)(MEMORY[0x1E4FBC838] + 8);
        uint64_t v50 = v84;
        uint64_t v65 = v82;
        uint64_t v66 = v86;
        while (1)
        {
          uint64_t v67 = *((void *)v90 + v50);
          swift_unknownObjectRetain();
          if (_swift_isClassOrObjCExistentialType())
          {
            uint64_t v92 = v67;
            swift_unknownObjectRetain();
            BOOL v68 = v87;
            int v69 = swift_dynamicCast();
            (*v62)(v68, v69 ^ 1u, 1, v65);
          }
          else
          {
            (*v62)(v75, 1, 1, v65);
            _bridgeNonVerbatimFromObjectiveCConditional<A>(_:_:_:)();
            BOOL v68 = v87;
            (*v63)();
          }
          swift_unknownObjectRelease();
          if ((*v64)(v68, 1, v65) == 1) {
            break;
          }
          --v50;
          uint64_t v70 = v68;
          uint64_t v71 = v89;
          uint64_t v72 = *(void (**)(char *, char *, uint64_t))(v89 + 32);
          v72(v66, v70, v65);
          v72((char *)(v88 + *(void *)(v71 + 72) * v50), v66, v65);
          if ((unint64_t)(v50 + 1) <= 1) {
            goto LABEL_38;
          }
        }
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v79 + 8))(v68, v78);
        goto LABEL_41;
      }
    }
    uint64_t v50 = v47;
    if (!v47) {
      goto LABEL_38;
    }
LABEL_41:
    uint64_t v61 = v84;
    if (!__OFSUB__(v84, v50))
    {
      swift_arrayDestroy();
      uint64_t v73 = v83;
      *Swift::String v83 = 0;
      swift_arrayDestroy();
      if (!*v73) {
        return 0;
      }
      return v61;
    }
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
  }
  __break(1u);
  return result;
}

void DataProtocol.copyBytes<A>(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v53 = a5;
  uint64_t v54 = a7;
  uint64_t v48 = a3;
  uint64_t v56 = a2;
  uint64_t v59 = a1;
  uint64_t v50 = *(char **)(a6 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v55 = AssociatedConformanceWitness;
  uint64_t v8 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v49 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v60 = (char *)&v41 - v10;
  uint64_t v11 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v41 - v12;
  uint64_t v14 = swift_checkMetadataState();
  MEMORY[0x1F4188790](v14);
  unint64_t v45 = (char *)&v41 - v15;
  uint64_t v46 = v16;
  uint64_t v47 = v8;
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v58 = (char *)&v41 - v19;
  uint64_t v57 = swift_checkMetadataState();
  uint64_t v51 = *(void *)(v57 - 8);
  MEMORY[0x1F4188790](v57);
  uint64_t v21 = (char *)&v41 - v20;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v22 = type metadata accessor for Range();
  MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v41 - v25;
  if (v59)
  {
    uint64_t v43 = v24;
    uint64_t v44 = v18;
    uint64_t v27 = v17;
    uint64_t v28 = v23;
    dispatch thunk of RangeExpression.relative<A>(to:)();
    dispatch thunk of Collection.subscript.getter();
    uint64_t v62 = 0;
    uint64_t v48 = v28;
    uint64_t v42 = v26;
    uint64_t v29 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
    uint64_t v30 = v56 - v59;
    if (v29 < v56 - v59) {
      uint64_t v30 = v29;
    }
    uint64_t v61 = v30;
    uint64_t v31 = *(void (**)(uint64_t))(v55 + 64);
    uint64_t v50 = v21;
    v31(v57);
    dispatch thunk of Sequence.makeIterator()();
    uint64_t v53 = swift_getAssociatedConformanceWitness();
    uint64_t v54 = v27;
    dispatch thunk of IteratorProtocol.next()();
    uint64_t v32 = v49;
    uint64_t v52 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
    int v33 = v52(v13, 1, AssociatedTypeWitness);
    uint64_t v34 = v60;
    if (v33 != 1)
    {
      uint64_t v35 = *(uint64_t (**)(char *, char *, uint64_t))(v32 + 32);
      uint64_t v36 = (void (**)(char *, uint64_t))(v32 + 8);
      uint64_t v37 = MEMORY[0x1E4FBC848] + 8;
      while (1)
      {
        uint64_t v38 = v35(v34, v13, AssociatedTypeWitness);
        if (v61 < 1) {
          break;
        }
        MEMORY[0x1F4188790](v38);
        uint64_t v39 = v56;
        *(&v41 - 4) = v59;
        *(&v41 - 3) = v39;
        *(&v41 - 2) = (uint64_t)&v62;
        *(&v41 - 1) = (uint64_t)&v61;
        uint64_t v40 = swift_getAssociatedConformanceWitness();
        (*(void (**)(uint64_t (*)(uint64_t, uint64_t), uint64_t *, uint64_t, uint64_t, uint64_t))(v40 + 8))(partial apply for closure #1 in DataProtocol.copyBytes<A>(to:from:), &v41 - 6, v37, AssociatedTypeWitness, v40);
        uint64_t v34 = v60;
        (*v36)(v60, AssociatedTypeWitness);
        dispatch thunk of IteratorProtocol.next()();
        if (v52(v13, 1, AssociatedTypeWitness) == 1) {
          goto LABEL_10;
        }
      }
      (*v36)(v34, AssociatedTypeWitness);
    }
LABEL_10:
    (*(void (**)(char *, uint64_t))(v44 + 8))(v58, v54);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v57);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v42, v48);
  }
  else
  {
    __break(1u);
  }
}

{
  DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, a6, a4, a7, a5);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Data(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Data(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)__n128 result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance Data(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return Data.withUnsafeBytes<A>(_:)(a1, a2, *(void *)v2, *(void *)(v2 + 8));
}

uint64_t protocol witness for DataProtocol.regions.getter in conformance Data@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return outlined copy of Data._Representation(v2, v3);
}

uint64_t protocol witness for Collection.subscript.getter in conformance Data@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = Data._Representation.subscript.getter(*a1, a1[1], *(void *)v2, *(void *)(v2 + 8));
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance Data(uint64_t *a1, uint64_t *a2)
{
  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2, *(void *)v2, *(void *)(v2 + 8));
}

void specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  if (!a1) {
    return;
  }
  if (type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString) == MEMORY[0x1E4FBB1A0])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    if (static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)()) {
      return;
    }
    id v30 = objc_msgSend(a1, sel_count);
    if (!v30) {
      return;
    }
    uint64_t v31 = (uint64_t)v30;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v32 = (void *)static _DictionaryStorage.allocate(capacity:)();
    int v33 = (void *)v32[6];
    uint64_t v34 = v32[7];
    swift_retain();
    uint64_t v35 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v33, v34, a1, v31);
    if (v35 < 0 || v31 < v35) {
      goto LABEL_46;
    }
    v32[2] = v35;
    if (!v35)
    {
LABEL_42:
      swift_release();
      return;
    }
    int64_t v36 = v35 - 1;
    uint64_t v37 = v32 + 8;
    while (1)
    {
      while (1)
      {
        if ((*(void *)((char *)v37 + (((unint64_t)v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v36)) {
          goto LABEL_34;
        }
        uint64_t v42 = (uint64_t *)(v32[6] + 16 * v36);
        uint64_t v43 = *v42;
        uint64_t v44 = v42[1];
        swift_bridgeObjectRetain();
        unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(v43, v44);
        char v47 = v46;
        swift_bridgeObjectRelease();
        if ((v47 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        swift_arrayDestroy();
        uint64_t v48 = v32[2];
        BOOL v49 = __OFSUB__(v48, 1);
        uint64_t v50 = v48 - 1;
        if (v49)
        {
LABEL_44:
          __break(1u);
          goto LABEL_45;
        }
        v32[2] = v50;
LABEL_34:
        if (--v36 < 0) {
          goto LABEL_42;
        }
      }
      *(void *)((char *)v37 + ((v45 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v45;
      if (v36 < (uint64_t)v45)
      {
        *(_OWORD *)(v32[6] + 16 * v45) = *(_OWORD *)(v32[6] + 16 * v36);
        uint64_t v38 = v32[7];
        uint64_t v39 = (_OWORD *)(v38 + 32 * v36);
        long long v40 = v39[1];
        uint64_t v41 = (_OWORD *)(v38 + 32 * v45);
        *uint64_t v41 = *v39;
        v41[1] = v40;
        goto LABEL_34;
      }
      if (v45 == v36) {
        goto LABEL_34;
      }
      uint64_t v51 = v32[6];
      uint64_t v52 = (uint64_t *)(v51 + 16 * v45);
      uint64_t v53 = (uint64_t *)(v51 + 16 * v36);
      uint64_t v54 = *v52;
      uint64_t v55 = v52[1];
      uint64_t v56 = v53[1];
      *uint64_t v52 = *v53;
      v52[1] = v56;
      *uint64_t v53 = v54;
      v53[1] = v55;
      uint64_t v57 = v32[7];
      uint64_t v58 = (_OWORD *)(v57 + 32 * v45);
      uint64_t v59 = (_OWORD *)(v57 + 32 * v36);
      outlined init with take of Any(v58, v60);
      outlined init with take of Any(v59, v58);
      outlined init with take of Any(v60, v59);
      if (v36 < 0) {
        goto LABEL_42;
      }
    }
  }
  lazy protocol witness table accessor for type NSString and conformance NSObject();
  swift_unknownObjectRetain();
  if (!static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)())
  {
    id v2 = objc_msgSend(a1, sel_count);
    if (v2)
    {
      uint64_t v3 = (uint64_t)v2;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<NSString, Any>);
      uint64_t v4 = static _DictionaryStorage.allocate(capacity:)();
      uint64_t v5 = *(void **)(v4 + 48);
      uint64_t v6 = *(void *)(v4 + 56);
      swift_retain();
      uint64_t v7 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v5, v6, a1, v3);
      if ((v7 & 0x8000000000000000) == 0 && v3 >= v7)
      {
        *(void *)(v4 + 16) = v7;
        if (v7)
        {
          int64_t v8 = v7 - 1;
          uint64_t v9 = v4 + 64;
          while (1)
          {
            if ((*(void *)(v9 + (((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8)) {
              goto LABEL_10;
            }
            Swift::Int v14 = *(void *)(v4 + 40);
            id v15 = *(id *)(*(void *)(v4 + 48) + 8 * v8);
            Swift::Int v16 = NSObject._rawHashValue(seed:)(v14);

            uint64_t v17 = -1 << *(unsigned char *)(v4 + 32);
            unint64_t v18 = v16 & ~v17;
            unint64_t v19 = v18 >> 6;
            if (((-1 << v18) & ~*(void *)(v9 + 8 * (v18 >> 6))) != 0)
            {
              unint64_t v20 = __clz(__rbit64((-1 << v18) & ~*(void *)(v9 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
            }
            else
            {
              char v21 = 0;
              unint64_t v22 = (unint64_t)(63 - v17) >> 6;
              do
              {
                if (++v19 == v22 && (v21 & 1) != 0)
                {
                  __break(1u);
                  goto LABEL_44;
                }
                BOOL v23 = v19 == v22;
                if (v19 == v22) {
                  unint64_t v19 = 0;
                }
                v21 |= v23;
                uint64_t v24 = *(void *)(v9 + 8 * v19);
              }
              while (v24 == -1);
              unint64_t v20 = __clz(__rbit64(~v24)) + (v19 << 6);
            }
            *(void *)(v9 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
            if (v8 < (uint64_t)v20)
            {
              *(void *)(*(void *)(v4 + 48) + 8 * v20) = *(void *)(*(void *)(v4 + 48) + 8 * v8);
              uint64_t v10 = *(void *)(v4 + 56);
              uint64_t v11 = (_OWORD *)(v10 + 32 * v8);
              long long v12 = v11[1];
              uint64_t v13 = (_OWORD *)(v10 + 32 * v20);
              _OWORD *v13 = *v11;
              v13[1] = v12;
LABEL_10:
              if (--v8 < 0) {
                goto LABEL_42;
              }
            }
            else
            {
              if (v20 == v8) {
                goto LABEL_10;
              }
              uint64_t v25 = *(void *)(v4 + 48);
              uint64_t v26 = *(void *)(v25 + 8 * v20);
              *(void *)(v25 + 8 * v20) = *(void *)(v25 + 8 * v8);
              *(void *)(v25 + 8 * v8) = v26;
              uint64_t v27 = *(void *)(v4 + 56);
              uint64_t v28 = (_OWORD *)(v27 + 32 * v20);
              uint64_t v29 = (_OWORD *)(v27 + 32 * v8);
              outlined init with take of Any(v28, v60);
              outlined init with take of Any(v29, v28);
              outlined init with take of Any(v60, v29);
              if (v8 < 0) {
                goto LABEL_42;
              }
            }
          }
        }
        goto LABEL_42;
      }
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
    }
  }
}

{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  long long v13;
  _OWORD *v14;
  void *v15;
  id v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  void *v38;
  uint64_t v39;
  _OWORD *v40;
  long long v41;
  _OWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  _OWORD *v60;
  _OWORD v61[4];

  if (!a1) {
    return;
  }
  type metadata accessor for NSAttributedStringKey(0);
  if (v2 == MEMORY[0x1E4FBB1A0])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    if (static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)()) {
      return;
    }
    uint64_t v31 = objc_msgSend(a1, sel_count);
    if (!v31) {
      return;
    }
    uint64_t v32 = (uint64_t)v31;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    int v33 = (void *)static _DictionaryStorage.allocate(capacity:)();
    uint64_t v34 = (void *)v33[6];
    uint64_t v35 = v33[7];
    swift_retain();
    int64_t v36 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v34, v35, a1, v32);
    if (v36 < 0 || v32 < v36) {
      goto LABEL_46;
    }
    v33[2] = v36;
    if (!v36)
    {
LABEL_42:
      swift_release();
      return;
    }
    uint64_t v37 = v36 - 1;
    uint64_t v38 = v33 + 8;
    while (1)
    {
      while (1)
      {
        if ((*(void *)((char *)v38 + (((unint64_t)v37 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v37)) {
          goto LABEL_34;
        }
        uint64_t v43 = (uint64_t *)(v33[6] + 16 * v37);
        uint64_t v44 = *v43;
        unint64_t v45 = v43[1];
        swift_bridgeObjectRetain();
        char v46 = specialized __RawDictionaryStorage.find<A>(_:)(v44, v45);
        uint64_t v48 = v47;
        swift_bridgeObjectRelease();
        if ((v48 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        swift_arrayDestroy();
        BOOL v49 = v33[2];
        uint64_t v50 = __OFSUB__(v49, 1);
        uint64_t v51 = v49 - 1;
        if (v50)
        {
LABEL_44:
          __break(1u);
          goto LABEL_45;
        }
        v33[2] = v51;
LABEL_34:
        if (--v37 < 0) {
          goto LABEL_42;
        }
      }
      *(void *)((char *)v38 + ((v46 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v46;
      if (v37 < (uint64_t)v46)
      {
        *(_OWORD *)(v33[6] + 16 * v46) = *(_OWORD *)(v33[6] + 16 * v37);
        uint64_t v39 = v33[7];
        long long v40 = (_OWORD *)(v39 + 32 * v37);
        uint64_t v41 = v40[1];
        uint64_t v42 = (_OWORD *)(v39 + 32 * v46);
        *uint64_t v42 = *v40;
        v42[1] = v41;
        goto LABEL_34;
      }
      if (v46 == v37) {
        goto LABEL_34;
      }
      uint64_t v52 = v33[6];
      uint64_t v53 = (uint64_t *)(v52 + 16 * v46);
      uint64_t v54 = (uint64_t *)(v52 + 16 * v37);
      uint64_t v55 = *v53;
      uint64_t v56 = v53[1];
      uint64_t v57 = v54[1];
      *uint64_t v53 = *v54;
      v53[1] = v57;
      *uint64_t v54 = v55;
      v54[1] = v56;
      uint64_t v58 = v33[7];
      uint64_t v59 = (_OWORD *)(v58 + 32 * v46);
      uint64_t v60 = (_OWORD *)(v58 + 32 * v37);
      outlined init with take of Any(v59, v61);
      outlined init with take of Any(v60, v59);
      outlined init with take of Any(v61, v60);
      if (v37 < 0) {
        goto LABEL_42;
      }
    }
  }
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  swift_unknownObjectRetain();
  if (!static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)())
  {
    uint64_t v3 = objc_msgSend(a1, sel_count);
    if (v3)
    {
      uint64_t v4 = (uint64_t)v3;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>);
      uint64_t v5 = static _DictionaryStorage.allocate(capacity:)();
      uint64_t v6 = *(void *)(v5 + 48);
      uint64_t v7 = *(void *)(v5 + 56);
      swift_retain();
      specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v6, v7, a1, v4);
      if ((v8 & 0x8000000000000000) == 0 && v4 >= v8)
      {
        *(void *)(v5 + 16) = v8;
        if (v8)
        {
          uint64_t v9 = v8 - 1;
          uint64_t v10 = v5 + 64;
          while (1)
          {
            if ((*(void *)(v10 + (((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9)) {
              goto LABEL_10;
            }
            id v15 = *(void **)(*(void *)(v5 + 48) + 8 * v9);
            static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
            Hasher.init(_seed:)();
            Swift::Int v16 = v15;
            String.hash(into:)();
            uint64_t v17 = Hasher._finalize()();

            swift_bridgeObjectRelease();
            unint64_t v18 = -1 << *(unsigned char *)(v5 + 32);
            unint64_t v19 = v17 & ~v18;
            unint64_t v20 = v19 >> 6;
            if (((-1 << v19) & ~*(void *)(v10 + 8 * (v19 >> 6))) != 0)
            {
              char v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v10 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
            }
            else
            {
              unint64_t v22 = 0;
              BOOL v23 = (unint64_t)(63 - v18) >> 6;
              do
              {
                if (++v20 == v23 && (v22 & 1) != 0)
                {
                  __break(1u);
                  goto LABEL_44;
                }
                uint64_t v24 = v20 == v23;
                if (v20 == v23) {
                  unint64_t v20 = 0;
                }
                v22 |= v24;
                uint64_t v25 = *(void *)(v10 + 8 * v20);
              }
              while (v25 == -1);
              char v21 = __clz(__rbit64(~v25)) + (v20 << 6);
            }
            *(void *)(v10 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
            if (v9 < (uint64_t)v21)
            {
              *(void *)(*(void *)(v5 + 48) + 8 * v21) = *(void *)(*(void *)(v5 + 48) + 8 * v9);
              uint64_t v11 = *(void *)(v5 + 56);
              long long v12 = (_OWORD *)(v11 + 32 * v9);
              uint64_t v13 = v12[1];
              Swift::Int v14 = (_OWORD *)(v11 + 32 * v21);
              char *v14 = *v12;
              v14[1] = v13;
LABEL_10:
              if (--v9 < 0) {
                goto LABEL_42;
              }
            }
            else
            {
              if (v21 == v9) {
                goto LABEL_10;
              }
              uint64_t v26 = *(void *)(v5 + 48);
              uint64_t v27 = *(void *)(v26 + 8 * v21);
              *(void *)(v26 + 8 * v21) = *(void *)(v26 + 8 * v9);
              *(void *)(v26 + 8 * v9) = v27;
              uint64_t v28 = *(void *)(v5 + 56);
              uint64_t v29 = (_OWORD *)(v28 + 32 * v21);
              id v30 = (_OWORD *)(v28 + 32 * v9);
              outlined init with take of Any(v29, v61);
              outlined init with take of Any(v30, v29);
              outlined init with take of Any(v61, v30);
              if (v9 < 0) {
                goto LABEL_42;
              }
            }
          }
        }
        goto LABEL_42;
      }
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
    }
  }
}

unint64_t lazy protocol witness table accessor for type NSString and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type NSString and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSString and conformance NSObject)
  {
    type metadata accessor for NSMorphologyPronoun(255, (unint64_t *)&lazy cache variable for type metadata for NSString);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSString and conformance NSObject);
  }
  return result;
}

void specialized NSKeyValueObservation.Helper._swizzle_me_observeValue(forKeyPath:of:change:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(os_unfair_lock_s **)(v3
                            + OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_lock);
  os_unfair_lock_lock(v6);
  outlined init with copy of Any?(a1, (uint64_t)&v33);
  if (*((void *)&v34 + 1))
  {
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    if (swift_dynamicCast())
    {
      id v7 = (id)v37;
      int64_t v8 = *(void **)(v3
                    + OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_unsafeUnretainedObject);
      if (v8)
      {
        id v9 = v8;
      }
      else
      {
        id v9 = (id)MEMORY[0x185309640](v3+ OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_weakObject);
        if (!v9) {
          goto LABEL_30;
        }
      }
      if (v7 != v9)
      {

        goto LABEL_31;
      }
      if (a2)
      {
        id v10 = v7;
        os_unfair_lock_unlock(v6);
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"kind");
        uint64_t v11 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        if (*(void *)(a2 + 16) && (unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v11), (v13 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v12, (uint64_t)&v37);
        }
        else
        {
          long long v37 = 0u;
          long long v38 = 0u;
        }
        swift_unknownObjectRelease();
        if (!*((void *)&v38 + 1))
        {
          __break(1u);
          return;
        }
        outlined init with take of Any(&v37, &v33);
        swift_dynamicCast();
        uint64_t v14 = *(void *)&v32[0];
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"new");
        uint64_t v15 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        if (*(void *)(a2 + 16) && (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v15), (v17 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v16, (uint64_t)&v37);
        }
        else
        {
          long long v37 = 0u;
          long long v38 = 0u;
        }
        swift_unknownObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"old");
        uint64_t v18 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        if (*(void *)(a2 + 16) && (unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v18), (v20 & 1) != 0)) {
          outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v19, (uint64_t)v32);
        }
        else {
          memset(v32, 0, sizeof(v32));
        }
        swift_unknownObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"indexes");
        uint64_t v21 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        if (*(void *)(a2 + 16) && (unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v21), (v23 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v22, (uint64_t)&v30);
        }
        else
        {
          long long v30 = 0u;
          long long v31 = 0u;
        }
        swift_unknownObjectRelease();
        if (*((void *)&v31 + 1))
        {
          outlined init with take of Any(&v30, &v33);
          swift_dynamicCast();
          uint64_t v24 = v29;
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v30, (uint64_t *)&demangling cache variable for type metadata for Any?);
          uint64_t v24 = 0;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"notificationIsPrior");
        uint64_t v25 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        if (*(void *)(a2 + 16) && (unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v25), (v27 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v26, (uint64_t)&v33);
        }
        else
        {
          long long v33 = 0u;
          long long v34 = 0u;
        }
        swift_unknownObjectRelease();
        if (*((void *)&v34 + 1))
        {
          if (swift_dynamicCast())
          {
            char v28 = v30;
LABEL_43:
            *(void *)&long long v33 = v14;
            outlined init with take of Any?((uint64_t)&v37, (uint64_t)&v33 + 8);
            outlined init with take of Any?((uint64_t)v32, (uint64_t)v35);
            v35[4] = v24;
            char v36 = v28;
            (*(void (**)(id, long long *))(v3
                                                   + OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_callback))(v10, &v33);

            outlined destroy of Any?((uint64_t)&v33, &demangling cache variable for type metadata for NSKeyValueObservedChange<Any>);
            return;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v33, (uint64_t *)&demangling cache variable for type metadata for Any?);
        }
        char v28 = 0;
        goto LABEL_43;
      }

LABEL_30:
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v33, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
LABEL_31:
  os_unfair_lock_unlock(v6);
}

uint64_t partial apply for closure #1 in _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(uint64_t a1, uint64_t *a2)
{
  return closure #1 in _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(a1, a2, *(void (**)(char *, void *))(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t closure #1 in _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(uint64_t a1, uint64_t *a2, void (*a3)(char *, void *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  v22[1] = a4;
  char v23 = a3;
  v22[0] = a1;
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (int *)type metadata accessor for NSKeyValueObservedChange();
  uint64_t v13 = *((void *)v12 - 1);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (void *)((char *)v22 - v14);
  uint64_t v16 = *a2;
  closure #1 in closure #1 in _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)((uint64_t)(a2 + 1), a6, (uint64_t)v22 + v12[7] - v14);
  closure #1 in closure #1 in _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)((uint64_t)(a2 + 5), a6, (uint64_t)v15 + v12[8]);
  uint64_t v17 = a2[9];
  char v18 = *((unsigned char *)a2 + 80);
  *uint64_t v15 = v16;
  *(void *)((char *)v15 + v12[9]) = v17;
  *((unsigned char *)v15 + v12[10]) = v18;
  unint64_t v19 = (void *)v22[0];
  uint64_t v24 = v22[0];
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  swift_retain();
  id v20 = v19;
  swift_dynamicCast();
  v23(v11, v15);
  (*(void (**)(void *, int *))(v13 + 8))(v15, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a5);
}

uint64_t closure #1 in closure #1 in _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = swift_conformsToProtocol2();
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v6) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8)
  {
    outlined init with copy of Any?(a1, (uint64_t)&v15);
    if (v16)
    {
      outlined init with take of Any(&v15, v17);
      uint64_t v9 = *(void (**)(_OWORD *, uint64_t, uint64_t))(v7 + 8);
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
      *(void *)&long long v15 = swift_allocObject();
      v9(v17, v8, v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
      outlined init with copy of Any((uint64_t)&v15, (uint64_t)v14);
      outlined init with take of Any?((uint64_t)v14, (uint64_t)&v13);
      int v10 = swift_dynamicCast();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, v10 ^ 1u, 1, a2);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
    }
    outlined destroy of Any?((uint64_t)&v15, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  outlined init with copy of Any?(a1, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  int v12 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, v12 ^ 1u, 1, a2);
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t destroy for NSKeyValueObservedChange(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = a1 + v4 + 8;
  uint64_t v6 = ~v4;
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (!v7(v5 & ~v4, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5 & ~v4, v2);
  }
  if (*(_DWORD *)(v3 + 84)) {
    uint64_t v8 = *(void *)(v3 + 64);
  }
  else {
    uint64_t v8 = *(void *)(v3 + 64) + 1;
  }
  if (!v7(((v5 | v4) + v8) & v6, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(((v5 | v4) + v8) & v6, v2);
  }

  return swift_release();
}

uint64_t type metadata accessor for NSKeyValueObservedChange()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in NSObject.KVOSubscription.init(_:_:_:_:)()
{
  return closure #1 in NSObject.KVOSubscription.init(_:_:_:_:)();
}

uint64_t closure #1 in NSObject.KVOSubscription.init(_:_:_:_:)()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    NSObject.KVOSubscription.changes()();
    return swift_release();
  }
  return result;
}

uint64_t NSObject.KVOSubscription.changes()()
{
  Swift::String v1 = v0;
  uint64_t v35 = *v0;
  uint64_t v2 = v35;
  uint64_t v3 = *(void *)(v35 + 96);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v32 - v6;
  uint64_t v36 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v8);
  int v10 = (char *)&v32 - v9;
  uint64_t v11 = *(void *)(v2 + 88);
  uint64_t v12 = *(void *)(v11 - 8);
  double v14 = MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v32 - v15;
  uint64_t result = MEMORY[0x185309640]((char *)v1 + *(void *)(v2 + 152), v14);
  if (result)
  {
    uint64_t v33 = v12;
    uint64_t v34 = v11;
    uint64_t v37 = result;
    id v18 = (id)result;
    swift_getAtKeyPath();

    unint64_t v19 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 176));
    os_unfair_lock_lock(v19);
    uint64_t v20 = v1[3];
    static Subscribers.Demand.unlimited.getter();
    uint64_t result = static Subscribers.Demand.== infix(_:_:)();
    if ((result & 1) == 0)
    {
      if (v20 < 0)
      {
        __break(1u);
        goto LABEL_31;
      }
      if (!v20)
      {
LABEL_7:
        uint64_t v23 = v33;
        uint64_t v22 = v34;
        if ((v1[4] & 1) == 0 && (*((unsigned char *)v1 + *(void *)(*v1 + 160)) & 4) != 0)
        {
          uint64_t v24 = (char *)v1 + *(void *)(*v1 + 136);
          uint64_t v25 = type metadata accessor for Optional();
          (*(void (**)(char *, uint64_t))(*(void *)(v25 - 8) + 8))(v24, v25);
          (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v24, v16, v22);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v24, 0, 1, v22);
          *((unsigned char *)v1 + 32) = 1;
        }
        os_unfair_lock_unlock(v19);

        return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v16, v22);
      }
    }
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, (char *)v1 + *(void *)(*v1 + 144), v4);
    uint64_t v21 = v36;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v7, 1, v3) == 1)
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      goto LABEL_7;
    }
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v10, v7, v3);
    uint64_t v26 = v1[3];
    static Subscribers.Demand.unlimited.getter();
    if (static Subscribers.Demand.== infix(_:_:)()) {
      goto LABEL_18;
    }
    static Subscribers.Demand.unlimited.getter();
    uint64_t result = static Subscribers.Demand.== infix(_:_:)();
    if (result)
    {
      uint64_t v27 = static Subscribers.Demand.unlimited.getter();
LABEL_17:
      v1[3] = v27;
LABEL_18:
      os_unfair_lock_unlock(v19);
      os_unfair_recursive_lock_lock_with_options();
      uint64_t v28 = dispatch thunk of Subscriber.receive(_:)();
      os_unfair_recursive_lock_unlock();
      os_unfair_lock_lock(v19);
      uint64_t v29 = v1[3];
      static Subscribers.Demand.unlimited.getter();
      if (static Subscribers.Demand.== infix(_:_:)())
      {
LABEL_27:
        os_unfair_lock_unlock(v19);

        (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v3);
        uint64_t v23 = v33;
        uint64_t v22 = v34;
        return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v16, v22);
      }
      static Subscribers.Demand.unlimited.getter();
      char v30 = static Subscribers.Demand.== infix(_:_:)();
      uint64_t v31 = static Subscribers.Demand.unlimited.getter();
      if (v30)
      {
LABEL_26:
        v1[3] = v31;
        goto LABEL_27;
      }
      uint64_t result = static Subscribers.Demand.== infix(_:_:)();
      if (result)
      {
LABEL_24:
        uint64_t v31 = static Subscribers.Demand.unlimited.getter();
        goto LABEL_26;
      }
      if (((v29 | v28) & 0x8000000000000000) == 0)
      {
        uint64_t v31 = v29 + v28;
        if (!__OFADD__(v29, v28))
        {
          if ((v31 & 0x8000000000000000) == 0) {
            goto LABEL_26;
          }
LABEL_34:
          __break(1u);
          return result;
        }
        goto LABEL_24;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if ((v26 & 0x8000000000000000) == 0)
    {
      if (v26)
      {
        uint64_t v27 = v26 - 1;
        goto LABEL_17;
      }
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  return result;
}

double protocol witness for static _OptionalForKVO._castForKVO(_:) in conformance A?@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static Optional._castForKVO(_:)(a1, *(void *)(a2 + 16), a3);
}

double static Optional._castForKVO(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v15[-v8];
  outlined init with copy of Any(a1, (uint64_t)v15);
  int v10 = swift_dynamicCast();
  uint64_t v11 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56);
  if (v10)
  {
    uint64_t v12 = *(void *)(a2 - 8);
    v11(v9, 0, 1, a2);
    *(void *)(a3 + 24) = a2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a3);
    (*(void (**)(uint64_t *, unsigned char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v9, a2);
  }
  else
  {
    v11(v9, 1, 1, a2);
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t StringProtocol.enumerateSubstrings<A>(in:options:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v29 = a4;
  uint64_t v30 = a2;
  uint64_t v27 = a3;
  uint64_t v14 = *(void *)(a5 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  StringProtocol._ephemeralString.getter();
  id v28 = (id)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t result = StringProtocol._toUTF16Offsets(_:)();
  uint64_t v19 = v18 - result;
  if (__OFSUB__(v18, result))
  {
    __break(1u);
  }
  else
  {
    uint64_t v20 = result;
    uint64_t v21 = v9;
    uint64_t v22 = v19;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v21, a5);
    unint64_t v23 = (*(unsigned __int8 *)(v14 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    uint64_t v24 = (char *)swift_allocObject();
    *((void *)v24 + 2) = a5;
    *((void *)v24 + 3) = a6;
    *((void *)v24 + 4) = a7;
    *((void *)v24 + 5) = a8;
    uint64_t v25 = v29;
    *((void *)v24 + 6) = v27;
    *((void *)v24 + 7) = v25;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v24[v23], v16, a5);
    aBlock[4] = partial apply for closure #1 in StringProtocol.enumerateSubstrings<A>(in:options:_:);
    aBlock[5] = v24;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    aBlock[3] = &block_descriptor_15_0;
    uint64_t v26 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v28, sel_enumerateSubstringsInRange_options_usingBlock_, v20, v22, v30, v26);
    _Block_release(v26);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t ___writeJSONObject_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 8 * a2);
  uint64_t v5 = *(void *)(v3 + 8 * a3);
  uint64_t v6 = [v4 length];
  uint64_t v7 = [MEMORY[0x1E4F1CA20] systemLocale];

  return objc_msgSend(v4, "compare:options:range:locale:", v5, 577, 0, v6, v7);
}

id @objc static NSLocale._system.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)(static LocaleCache.cache + 16);
  Swift::String v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.systemNSLocale()(v0, &v4);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  id v2 = v4;

  return v2;
}

id closure #1 in LocaleCache.systemNSLocale()@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)a1[8];
  if (v3)
  {
    id v4 = (id)a1[8];
  }
  else
  {
    if (a1[2])
    {
      uint64_t v6 = a1[3];
      uint64_t v7 = (void *)a1[2];
    }
    else
    {
      type metadata accessor for _LocaleICU();
      uint64_t v6 = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating(&lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU, (void (*)(uint64_t))type metadata accessor for _LocaleICU);
      _s10Foundation17LocalePreferencesVSgWOi0_(v17);
      outlined init with take of LocalePreferences?((uint64_t)v17, (uint64_t)v16);
      swift_allocObject();
      uint64_t v7 = specialized _LocaleICU.init(identifier:prefs:)(0, 0xE000000000000000, (uint64_t)v16);
      a1[2] = v7;
      a1[3] = v6;
      swift_retain();
    }
    uint64_t v8 = (objc_class *)type metadata accessor for _NSSwiftLocale();
    uint64_t v9 = objc_allocWithZone(v8);
    uint64_t v10 = OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling;
    uint64_t v11 = &v9[OBJC_IVAR____NSSwiftLocale_locale];
    void *v11 = v7;
    v11[1] = v6;
    v9[v10] = 2;
    uint64_t v12 = String._bridgeToObjectiveCImpl()();
    v15.receiver = v9;
    v15.super_class = v8;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    id v13 = objc_msgSendSuper2(&v15, sel_initWithLocaleIdentifier_, v12);
    swift_unknownObjectRelease();
    a1[8] = v13;
    id v4 = v13;
    swift_unknownObjectRelease();
    uint64_t v3 = 0;
  }
  *a2 = v4;
  return v3;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = *(void (**)(id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  if (a2)
  {
    id v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
    uint64_t v15 = v14;
  }
  else
  {
    id v13 = 0;
    uint64_t v15 = 0;
  }
  swift_retain();
  v12(v13, v15, a3, a4, a5, a6, a7);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in StringProtocol.enumerateSubstrings<A>(in:options:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  return closure #1 in StringProtocol.enumerateSubstrings<A>(in:options:_:)(a1, a2, a3, a4, a5, a6, a7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(v7 + 48));
}

uint64_t closure #1 in StringProtocol.enumerateSubstrings<A>(in:options:_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))
{
  char v19 = 0;
  if (a3 == 0x7FFFFFFFFFFFFFFFLL)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (__OFADD__(a3, a4))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v12 = result;
  uint64_t result = StringProtocol._toUTF16Indices(_:)();
  if (a5 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v14 = v13;
  if (__OFADD__(a5, a6))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v15 = result;
  uint64_t v16 = StringProtocol._toUTF16Indices(_:)();
  uint64_t result = a8(v12, a2, v15, v14, v16, v17, &v19);
  if (v19 == 1) {
    *a7 = v19;
  }
  return result;
}

uint64_t TimeZone.debugDescription.getter()
{
  return dispatch thunk of CustomDebugStringConvertible.debugDescription.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _TimeZoneICU()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _TimeZoneGMTICU()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 41;
  v1._os_log_t object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0x2820544D47;
}

uint64_t dispatch thunk of JSONDecoder.userInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t type metadata completion function for LockedState._Buffer()
{
  return swift_initClassMetadata2();
}

unint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return MEMORY[0x1E4FBC870];
  }
  unint64_t v4 = 0;
  static Set._forceBridgeFromObjectiveC(_:result:)(a1, &v4, a2, a3);
  unint64_t result = v4;
  if (!v4) {
    __break(1u);
  }
  return result;
}

unint64_t static Set._forceBridgeFromObjectiveC(_:result:)(void *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  unint64_t result = static Set._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (result)
  {
    *a2 = result;
    return result;
  }
  if (_swift_isClassOrObjCExistentialType())
  {
    unint64_t result = (unint64_t)objc_msgSend(a1, sel_copyWithZone_, 0);
    *a2 = ~(result >> 1) & 0x4000000000000000 | result;
    return result;
  }
  uint64_t v9 = MEMORY[0x1E4FBB1A0];
  if (a3 != MEMORY[0x1E4FBB1A0])
  {
    id v10 = objc_msgSend(a1, sel_count);
    if (v10)
    {
      type metadata accessor for _SetStorage();
      uint64_t v11 = static _SetStorage.allocate(capacity:)();
    }
    else
    {
      uint64_t v11 = MEMORY[0x1E4FBC870];
    }
    uint64_t v29 = v11;
    id v30 = v10;
    uint64_t v17 = (void *)swift_allocObject();
    _OWORD v17[2] = a3;
    v17[3] = a4;
    v17[4] = &v29;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = partial apply for closure #2 in static Set._forceBridgeFromObjectiveC(_:result:);
    *(void *)(v18 + 24) = v17;
    uint64_t v27 = _sypSpy10ObjectiveC8ObjCBoolVGIgny_ypADIegny_TRTA_0;
    uint64_t v28 = v18;
    uint64_t v23 = MEMORY[0x1E4F143A8];
    uint64_t v24 = 1107296256;
    uint64_t v25 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    uint64_t v26 = &block_descriptor_4;
    char v19 = _Block_copy(&v23);
    swift_retain();
    swift_release();
    objc_msgSend(a1, sel_enumerateObjectsUsingBlock_, v19);
    _Block_release(v19);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    unint64_t result = swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
    }
    else
    {
      uint64_t v16 = v29;
      id v21 = v30;
      id v22 = *(id *)(v29 + 16);
      unint64_t result = swift_release();
      if (v22 == v21) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  objc_msgSend(a1, sel_count);
  uint64_t v29 = Set.init(minimumCapacity:)();
  uint64_t v12 = (void *)swift_allocObject();
  uint64_t v12[2] = v9;
  v12[3] = a4;
  void v12[4] = &v29;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = partial apply for closure #1 in static Set._forceBridgeFromObjectiveC(_:result:);
  *(void *)(v13 + 24) = v12;
  uint64_t v27 = thunk for @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  uint64_t v28 = v13;
  uint64_t v23 = MEMORY[0x1E4F143A8];
  uint64_t v24 = 1107296256;
  uint64_t v25 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  uint64_t v26 = &block_descriptor_13;
  uint64_t v14 = _Block_copy(&v23);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_enumerateObjectsUsingBlock_, v14);
  _Block_release(v14);
  char v15 = swift_isEscapingClosureAtFileLocation();
  unint64_t result = swift_release();
  if (v15) {
    goto LABEL_17;
  }
  uint64_t v16 = v29;
  unint64_t result = swift_release();
LABEL_13:
  *a2 = v16;
  return result;
}

ValueMetadata *type metadata accessor for AttributeDynamicLookup()
{
  return &type metadata for AttributeDynamicLookup;
}

unint64_t instantiation function for generic protocol witness table for _TimeZoneICU(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _TimeZoneICU and conformance _TimeZoneICU();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _TimeZoneICU and conformance _TimeZoneICU()
{
  unint64_t result = lazy protocol witness table cache variable for type _TimeZoneICU and conformance _TimeZoneICU;
  if (!lazy protocol witness table cache variable for type _TimeZoneICU and conformance _TimeZoneICU)
  {
    type metadata accessor for _TimeZoneICU();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TimeZoneICU and conformance _TimeZoneICU);
  }
  return result;
}

uint64_t static Data._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  outlined consume of Data?(*(void *)a2, *(void *)(a2 + 8));
  *(void *)a2 = specialized Data.init(referencing:)(a1);
  *(void *)(a2 + 8) = v4;
  return 1;
}

void protocol witness for Decodable.init(from:) in conformance TimeZone(void *a1@<X0>, uint64_t *a2@<X8>)
{
}

void TimeZone.init(from:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TimeZone.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v23[0]) = 1;
    if (KeyedDecodingContainer.decodeIfPresent(_:forKey:)())
    {
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      uint64_t v19 = static TimeZoneCache.cache + 16;
      uint64_t v20 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
      swift_retain_n();
      os_unfair_lock_lock(v20);
      closure #1 in TimeZoneCache.autoupdatingCurrent()(v19, v23);
      os_unfair_lock_unlock(v20);
      swift_release_n();
      uint64_t v15 = v23[0];
      uint64_t v14 = _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_1(&lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating, (void (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating);
    }
    else
    {
      LOBYTE(v23[0]) = 0;
      uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v11 = v10;
      if (one-time initialization token for cache != -1)
      {
        uint64_t v21 = v9;
        swift_once();
        uint64_t v9 = v21;
      }
      uint64_t v24 = v22;
      uint64_t v12 = (os_unfair_lock_s *)static TimeZoneCache.cache;
      MEMORY[0x1F4188790](v9);
      v22[-2] = v13;
      v22[-1] = v11;
      v22[0] = v12 + 4;
      v22[1] = v11;
      swift_retain_n();
      os_unfair_lock_lock(v12 + 36);
      closure #1 in TimeZoneCache.fixed(_:)partial apply(v23);
      os_unfair_lock_unlock(v12 + 36);
      swift_release_n();
      uint64_t v15 = v23[0];
      uint64_t v14 = v23[1];
      swift_bridgeObjectRelease();
      if (!v15)
      {
        uint64_t v16 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v24 = v17;
        __swift_project_boxed_opaque_existential_1(a1, a1[3]);
        dispatch thunk of Decoder.codingPath.getter();
        uint64_t v18 = v24;
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, *MEMORY[0x1E4FBBA78], v16);
        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        goto LABEL_11;
      }
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v15;
    a2[1] = v14;
  }
LABEL_11:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t TimeZone.init(identifier:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (one-time initialization token for cache != -1) {
    a1 = swift_once();
  }
  uint64_t v3 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](a1);
  swift_retain_n();
  os_unfair_lock_lock(v3 + 36);
  partial apply for closure #1 in TimeZoneCache.fixed(_:)(v6);
  os_unfair_lock_unlock(v3 + 36);
  uint64_t result = swift_release_n();
  uint64_t v5 = v6[1];
  if (!v6[0]) {
    uint64_t v5 = 0;
  }
  *a2 = v6[0];
  a2[1] = v5;
  return result;
}

uint64_t __NSThread__start__(void *a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  _CFSetTSD();
  _CFSetTSD();
  atomic_store(0xEu, (unsigned __int8 *)(a1[1] + 63));
  objc_sync_enter(a1);
  Current = CFRunLoopGetCurrent();
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  obuint64_t j = *(id *)(a1[1] + 64);
  uint64_t v3 = [obj countByEnumeratingWithState:&v25 objects:v24 count:16];
  if (v3)
  {
    uint64_t v16 = *(void *)v26;
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
    do
    {
      uint64_t v17 = v3;
      for (uint64_t i = 0; i != v17; ++i)
      {
        if (*(void *)v26 != v16) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void *)(*((void *)&v25 + 1) + 8 * i);
        if (!*(void *)(a1[1] + 72)) {
          *(void *)(a1[1] + 72) = objc_opt_new();
        }
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        if (v6) {
          uint64_t v7 = *(void **)(v6 + 40);
        }
        else {
          uint64_t v7 = 0;
        }
        uint64_t v8 = [v7 countByEnumeratingWithState:&v20 objects:v19 count:16];
        if (v8)
        {
          uint64_t v9 = *(void *)v21;
          do
          {
            for (uint64_t j = 0; j != v8; ++j)
            {
              if (*(void *)v21 != v9) {
                objc_enumerationMutation(v7);
              }
              CFStringRef v11 = *(const __CFString **)(*((void *)&v20 + 1) + 8 * j);
              uint64_t v12 = (__CFRunLoopSource *)[*(id *)(a1[1] + 72) objectForKey:v11];
              if (!v12)
              {
                memset(&context, 0, 72);
                context.perform = (void (__cdecl *)(void *))__NSThreadPerformPerform;
                context.info = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
                uint64_t v12 = CFRunLoopSourceCreate(v4, 0, &context);
                *(void *)context.info = v12;
                CFRunLoopAddSource(Current, v12, v11);
                [*(id *)(a1[1] + 72) setObject:v12 forKey:v11];
                CFRelease(v12);
              }
              CFRunLoopSourceSignal(v12);
            }
            uint64_t v8 = [v7 countByEnumeratingWithState:&v20 objects:v19 count:16];
          }
          while (v8);
        }
      }
      uint64_t v3 = [obj countByEnumeratingWithState:&v25 objects:v24 count:16];
    }
    while (v3);
  }
  objc_sync_exit(a1);
  _CFAutoreleasePoolPush();
  uint64_t v13 = (void *)[a1 name];
  if (v13) {
    pthread_setname_np((const char *)[v13 UTF8String]);
  }
  [+[NSNotificationCenter defaultCenter] postNotificationName:@"_NSThreadDidStartNotification" object:a1 userInfo:0];
  _CFAutoreleasePoolPop();
  if (!*(unsigned char *)(a1[1] + 62)) {
    [a1 main];
  }
  return +[NSThread exit];
}

void sub_1818AAA9C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ()(uint64_t a1, id a2, void *a3, void *a4)
{
  uint64_t v7 = *(void (**)(id, unint64_t, void *, void *))(a1 + 32);
  swift_retain();
  if (a2)
  {
    id v8 = a2;
    a2 = specialized Data.init(referencing:)(v8);
    unint64_t v10 = v9;
  }
  else
  {
    unint64_t v10 = 0xF000000000000000;
  }
  id v11 = a3;
  id v12 = a4;
  v7(a2, v10, a3, a4);

  outlined consume of Data?((uint64_t)a2, v10);

  return swift_release();
}

id @objc static NSTimeZone._timeZoneWith(name:data:)(uint64_t a1, uint64_t a2, void *a3, id a4)
{
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v7 = v6;
  if (a4)
  {
    id v8 = a4;
    a4 = specialized Data.init(referencing:)(v8);
    unint64_t v10 = v9;
  }
  else
  {
    unint64_t v10 = 0xF000000000000000;
  }
  id v11 = specialized static NSTimeZone._timeZoneWith(name:data:)((uint64_t)v5, v7, (uint64_t)a4, v10);
  outlined consume of Data?((uint64_t)a4, v10);
  swift_bridgeObjectRelease();

  return v11;
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance Data(void *a1, uint64_t a2)
{
  outlined consume of Data?(*(void *)a2, *(void *)(a2 + 8));
  id result = specialized Data.init(referencing:)(a1);
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Data(void *a1, uint64_t a2)
{
  outlined consume of Data?(*(void *)a2, *(void *)(a2 + 8));
  *(void *)a2 = specialized Data.init(referencing:)(a1);
  *(void *)(a2 + 8) = v4;
  return 1;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

id specialized static NSTimeZone._timeZoneWith(name:data:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4 >> 60 == 15)
  {
    if (one-time initialization token for cache != -1) {
      a1 = swift_once();
    }
    uint64_t v4 = (os_unfair_lock_s *)static TimeZoneCache.cache;
    MEMORY[0x1F4188790](a1);
    swift_retain_n();
    os_unfair_lock_lock(v4 + 36);
    closure #1 in TimeZoneCache.bridgedFixed(_:)partial apply((char **)v16);
    os_unfair_lock_unlock(v4 + 36);
    swift_release_n();
    return *(id *)&v16[0];
  }
  else
  {
    outlined copy of Data?(a3, a4);
    uint64_t v8 = one-time initialization token for cache;
    uint64_t v9 = swift_bridgeObjectRetain();
    if (v8 != -1) {
      uint64_t v9 = swift_once();
    }
    unint64_t v10 = (os_unfair_lock_s *)static TimeZoneCache.cache;
    MEMORY[0x1F4188790](v9);
    swift_retain_n();
    os_unfair_lock_lock(v10 + 36);
    partial apply for closure #1 in TimeZoneCache.fixed(_:)((uint64_t *)v16);
    os_unfair_lock_unlock(v10 + 36);
    swift_bridgeObjectRelease();
    swift_release_n();
    if (*(void *)&v16[0])
    {
      long long v14 = v16[0];
      id v11 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
      id v12 = (char *)objc_allocWithZone(v11);
      *(_OWORD *)&v12[OBJC_IVAR____NSSwiftTimeZone_timeZone] = v14;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
      uint64_t v13 = swift_allocObject();
      *(_DWORD *)(v13 + 32) = 0;
      *(void *)(v13 + 16) = a3;
      *(void *)(v13 + 24) = a4;
      *(void *)&v12[OBJC_IVAR____NSSwiftTimeZone_lock] = v13;
      v15.receiver = v12;
      v15.super_class = v11;
      return objc_msgSendSuper2(&v15, sel_init);
    }
    else
    {
      outlined consume of Data?(a3, a4);
      return 0;
    }
  }
}

uint64_t TimeZone.init(abbreviation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized static TimeZone.identifierForAbbreviation(_:)(a1, a2);
  if (!v5) {
    goto LABEL_6;
  }
  if (one-time initialization token for cache != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v6 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](result);
  swift_retain_n();
  os_unfair_lock_lock(v6 + 36);
  closure #1 in TimeZoneCache.fixed(_:)partial apply(v9);
  os_unfair_lock_unlock(v6 + 36);
  swift_release_n();
  uint64_t v7 = v9[0];
  uint64_t v8 = v9[1];
  uint64_t result = swift_bridgeObjectRelease();
  if (v7)
  {
    *a3 = v7;
    a3[1] = v8;
  }
  else
  {
LABEL_6:
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t closure #1 in TimeZoneCache.fixed(_:)partial apply@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in TimeZoneCache.fixed(_:)(a1);
}

uint64_t partial apply for closure #1 in TimeZoneCache.fixed(_:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in TimeZoneCache.fixed(_:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t closure #1 in TimeZoneCache.fixed(_:)@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = TimeZoneCache.State.fixed(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t TimeZoneCache.State.fixed(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  BOOL v5 = a1 == 5524807 && a2 == 0xE300000000000000;
  if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v27 = *(void *)(v2 + 40);
    if (*(void *)(v27 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
      if (v29)
      {
        id v11 = *(void **)(*(void *)(v27 + 56) + 16 * v28);
        swift_unknownObjectRetain();
LABEL_37:
        swift_bridgeObjectRelease();
        return (uint64_t)v11;
      }
      swift_bridgeObjectRelease();
    }
    type metadata accessor for _TimeZoneICU();
    swift_allocObject();
    swift_bridgeObjectRetain();
    id v11 = _TimeZoneICU.init(identifier:)(a1, a2);
    if (!v11) {
      return (uint64_t)v11;
    }
    uint64_t v34 = lazy protocol witness table accessor for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU(&lazy protocol witness table cache variable for type _TimeZoneICU and conformance _TimeZoneICU, (void (*)(uint64_t))type metadata accessor for _TimeZoneICU);
    swift_bridgeObjectRetain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v89 = *(void *)(v4 + 40);
    *(void *)(v4 + 40) = 0x8000000000000000;
    unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    uint64_t v38 = *(void *)(v89 + 16);
    BOOL v39 = (v37 & 1) == 0;
    BOOL v32 = __OFADD__(v38, v39);
    uint64_t v40 = v38 + v39;
    if (v32)
    {
      __break(1u);
    }
    else
    {
      char v3 = v37;
      if (*(void *)(v89 + 24) < v40)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v40, isUniquelyReferenced_nonNull_native);
        uint64_t v41 = v89;
        unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
        if ((v3 & 1) != (v42 & 1)) {
          goto LABEL_118;
        }
        if ((v3 & 1) == 0)
        {
LABEL_34:
          while (1)
          {
            *(void *)(v41 + 8 * (v36 >> 6) + 64) |= 1 << v36;
            uint64_t v44 = (uint64_t *)(*(void *)(v41 + 48) + 16 * v36);
            uint64_t *v44 = a1;
            v44[1] = a2;
            unint64_t v45 = (void *)(*(void *)(v41 + 56) + 16 * v36);
            *unint64_t v45 = v11;
            v45[1] = v34;
            uint64_t v46 = *(void *)(v41 + 16);
            BOOL v32 = __OFADD__(v46, 1);
            uint64_t v47 = v46 + 1;
            if (!v32) {
              break;
            }
            __break(1u);
LABEL_111:
            swift_bridgeObjectRelease();
            unint64_t v36 = v84;
            if (v3) {
              goto LABEL_30;
            }
          }
          *(void *)(v41 + 16) = v47;
          swift_bridgeObjectRetain();
          goto LABEL_36;
        }
LABEL_30:
        uint64_t v43 = (void *)(*(void *)(v41 + 56) + 16 * v36);
        swift_unknownObjectRelease();
        *uint64_t v43 = v11;
        v43[1] = v34;
LABEL_36:
        *(void *)(v4 + 40) = v41;
        swift_bridgeObjectRelease();
        goto LABEL_37;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v41 = v89;
        if ((v37 & 1) == 0) {
          goto LABEL_34;
        }
        goto LABEL_30;
      }
    }
    unint64_t v84 = v36;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, _TimeZoneProtocol>);
    uint64_t v66 = static _DictionaryStorage.copy(original:)();
    uint64_t v41 = v66;
    if (!*(void *)(v89 + 16)) {
      goto LABEL_111;
    }
    uint64_t v67 = (char *)(v66 + 64);
    unint64_t v86 = (char *)(v89 + 64);
    unint64_t v68 = (unint64_t)((1 << *(unsigned char *)(v41 + 32)) + 63) >> 6;
    if (v41 != v89 || v67 >= &v86[8 * v68]) {
      memmove(v67, v86, 8 * v68);
    }
    int64_t v69 = 0;
    *(void *)(v41 + 16) = *(void *)(v89 + 16);
    uint64_t v70 = 1 << *(unsigned char *)(v89 + 32);
    uint64_t v71 = -1;
    if (v70 < 64) {
      uint64_t v71 = ~(-1 << v70);
    }
    unint64_t v72 = v71 & *(void *)(v89 + 64);
    int64_t v85 = (unint64_t)(v70 + 63) >> 6;
    while (1)
    {
      if (v72)
      {
        unint64_t v73 = __clz(__rbit64(v72));
        v72 &= v72 - 1;
        unint64_t v74 = v73 | (v69 << 6);
      }
      else
      {
        int64_t v81 = v69 + 1;
        if (__OFADD__(v69, 1))
        {
LABEL_114:
          __break(1u);
          goto LABEL_115;
        }
        if (v81 >= v85) {
          goto LABEL_111;
        }
        unint64_t v82 = *(void *)&v86[8 * v81];
        ++v69;
        if (!v82)
        {
          int64_t v69 = v81 + 1;
          if (v81 + 1 >= v85) {
            goto LABEL_111;
          }
          unint64_t v82 = *(void *)&v86[8 * v69];
          if (!v82)
          {
            int64_t v69 = v81 + 2;
            if (v81 + 2 >= v85) {
              goto LABEL_111;
            }
            unint64_t v82 = *(void *)&v86[8 * v69];
            if (!v82)
            {
              int64_t v69 = v81 + 3;
              if (v81 + 3 >= v85) {
                goto LABEL_111;
              }
              unint64_t v82 = *(void *)&v86[8 * v69];
              if (!v82)
              {
                int64_t v69 = v81 + 4;
                if (v81 + 4 >= v85) {
                  goto LABEL_111;
                }
                unint64_t v82 = *(void *)&v86[8 * v69];
                if (!v82)
                {
                  int64_t v69 = v81 + 5;
                  if (v81 + 5 >= v85) {
                    goto LABEL_111;
                  }
                  unint64_t v82 = *(void *)&v86[8 * v69];
                  if (!v82)
                  {
                    int64_t v69 = v81 + 6;
                    if (v81 + 6 >= v85) {
                      goto LABEL_111;
                    }
                    unint64_t v82 = *(void *)&v86[8 * v69];
                    if (!v82)
                    {
                      int64_t v83 = v81 + 7;
                      if (v83 >= v85) {
                        goto LABEL_111;
                      }
                      unint64_t v82 = *(void *)&v86[8 * v83];
                      if (v82)
                      {
                        int64_t v69 = v83;
                      }
                      else
                      {
                        do
                        {
                          int64_t v69 = v83 + 1;
                          if (__OFADD__(v83, 1)) {
                            goto LABEL_116;
                          }
                          if (v69 >= v85) {
                            goto LABEL_111;
                          }
                          unint64_t v82 = *(void *)&v86[8 * v69];
                          ++v83;
                        }
                        while (!v82);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        unint64_t v72 = (v82 - 1) & v82;
        unint64_t v74 = __clz(__rbit64(v82)) + (v69 << 6);
      }
      uint64_t v75 = 16 * v74;
      int v76 = (uint64_t *)(*(void *)(v89 + 48) + v75);
      uint64_t v78 = *v76;
      uint64_t v77 = v76[1];
      long long v79 = *(_OWORD *)(*(void *)(v89 + 56) + v75);
      uint64_t v80 = (void *)(*(void *)(v41 + 48) + v75);
      *uint64_t v80 = v78;
      v80[1] = v77;
      *(_OWORD *)(*(void *)(v41 + 56) + v75) = v79;
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
    }
  }
  uint64_t v8 = *(void *)(v2 + 48);
  if (*(void *)(v8 + 16))
  {
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(0);
    if (v10)
    {
      id v11 = *(void **)(*(void *)(v8 + 56) + 16 * v9);
      swift_unknownObjectRetain();
      return (uint64_t)v11;
    }
  }
  type metadata accessor for _TimeZoneGMTICU();
  id v11 = (void *)swift_allocObject();
  uint64_t v12 = specialized static TimeZone.nameForSecondsFromGMT(_:)(0);
  if (!v13)
  {
    swift_deallocPartialClassInstance();
    return 0;
  }
  uint64_t v14 = v12;
  uint64_t v15 = v13;
  uint64_t v16 = lazy protocol witness table accessor for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU(&lazy protocol witness table cache variable for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU, (void (*)(uint64_t))type metadata accessor for _TimeZoneGMTICU);
  v11[3] = v14;
  v11[4] = v15;
  void v11[2] = 0;
  swift_retain();
  char v17 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v88 = *(void *)(v4 + 48);
  *(void *)(v4 + 48) = 0x8000000000000000;
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(0);
  uint64_t v20 = *(void *)(v88 + 16);
  BOOL v21 = (v18 & 1) == 0;
  uint64_t v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v15) = v18;
    if (*(void *)(v88 + 24) < v22)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, v17);
      uint64_t v23 = v88;
      unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(0);
      if ((v15 & 1) != (v25 & 1)) {
        goto LABEL_117;
      }
      unint64_t v19 = v24;
      if ((v15 & 1) == 0) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }
    if (v17)
    {
      uint64_t v23 = v88;
      if ((v18 & 1) == 0)
      {
LABEL_21:
        while (1)
        {
          *(void *)(v23 + 8 * (v19 >> 6) + 64) |= 1 << v19;
          *(void *)(*(void *)(v23 + 48) + 8 * v19) = 0;
          id v30 = (void *)(*(void *)(v23 + 56) + 16 * v19);
          *id v30 = v11;
          v30[1] = v16;
          uint64_t v31 = *(void *)(v23 + 16);
          BOOL v32 = __OFADD__(v31, 1);
          uint64_t v33 = v31 + 1;
          if (!v32) {
            break;
          }
          __break(1u);
LABEL_75:
          swift_bridgeObjectRelease();
          if (v15) {
            goto LABEL_14;
          }
        }
        *(void *)(v23 + 16) = v33;
        goto LABEL_23;
      }
LABEL_14:
      long long v26 = (void *)(*(void *)(v23 + 56) + 16 * v19);
      swift_unknownObjectRelease();
      *long long v26 = v11;
      v26[1] = v16;
LABEL_23:
      *(void *)(v4 + 48) = v23;
      goto LABEL_37;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, _TimeZoneProtocol>);
  uint64_t v49 = static _DictionaryStorage.copy(original:)();
  uint64_t v23 = v49;
  if (!*(void *)(v88 + 16)) {
    goto LABEL_75;
  }
  uint64_t v50 = (char *)(v49 + 64);
  __src = (char *)(v88 + 64);
  unint64_t v51 = (unint64_t)((1 << *(unsigned char *)(v23 + 32)) + 63) >> 6;
  if (v23 != v88 || v50 >= &__src[8 * v51]) {
    memmove(v50, __src, 8 * v51);
  }
  int64_t v52 = 0;
  *(void *)(v23 + 16) = *(void *)(v88 + 16);
  uint64_t v53 = 1 << *(unsigned char *)(v88 + 32);
  uint64_t v54 = -1;
  if (v53 < 64) {
    uint64_t v54 = ~(-1 << v53);
  }
  unint64_t v55 = v54 & *(void *)(v88 + 64);
  int64_t v56 = (unint64_t)(v53 + 63) >> 6;
  while (1)
  {
    if (v55)
    {
      unint64_t v57 = __clz(__rbit64(v55));
      v55 &= v55 - 1;
      unint64_t v58 = v57 | (v52 << 6);
      goto LABEL_48;
    }
    int64_t v63 = v52 + 1;
    if (__OFADD__(v52, 1))
    {
      __break(1u);
      goto LABEL_114;
    }
    if (v63 >= v56) {
      goto LABEL_75;
    }
    unint64_t v64 = *(void *)&__src[8 * v63];
    ++v52;
    if (!v64)
    {
      int64_t v52 = v63 + 1;
      if (v63 + 1 >= v56) {
        goto LABEL_75;
      }
      unint64_t v64 = *(void *)&__src[8 * v52];
      if (!v64)
      {
        int64_t v52 = v63 + 2;
        if (v63 + 2 >= v56) {
          goto LABEL_75;
        }
        unint64_t v64 = *(void *)&__src[8 * v52];
        if (!v64)
        {
          int64_t v52 = v63 + 3;
          if (v63 + 3 >= v56) {
            goto LABEL_75;
          }
          unint64_t v64 = *(void *)&__src[8 * v52];
          if (!v64)
          {
            int64_t v52 = v63 + 4;
            if (v63 + 4 >= v56) {
              goto LABEL_75;
            }
            unint64_t v64 = *(void *)&__src[8 * v52];
            if (!v64)
            {
              int64_t v52 = v63 + 5;
              if (v63 + 5 >= v56) {
                goto LABEL_75;
              }
              unint64_t v64 = *(void *)&__src[8 * v52];
              if (!v64)
              {
                int64_t v52 = v63 + 6;
                if (v63 + 6 >= v56) {
                  goto LABEL_75;
                }
                unint64_t v64 = *(void *)&__src[8 * v52];
                if (!v64)
                {
                  int64_t v52 = v63 + 7;
                  if (v63 + 7 >= v56) {
                    goto LABEL_75;
                  }
                  unint64_t v64 = *(void *)&__src[8 * v52];
                  if (!v64) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_73:
    unint64_t v55 = (v64 - 1) & v64;
    unint64_t v58 = __clz(__rbit64(v64)) + (v52 << 6);
LABEL_48:
    uint64_t v59 = 8 * v58;
    uint64_t v60 = *(void *)(*(void *)(v88 + 48) + 8 * v58);
    uint64_t v61 = 16 * v58;
    long long v62 = *(_OWORD *)(*(void *)(v88 + 56) + v61);
    *(void *)(*(void *)(v23 + 48) + v59) = v60;
    *(_OWORD *)(*(void *)(v23 + 56) + v61) = v62;
    swift_unknownObjectRetain();
  }
  int64_t v65 = v63 + 8;
  if (v65 >= v56) {
    goto LABEL_75;
  }
  unint64_t v64 = *(void *)&__src[8 * v65];
  if (v64)
  {
    int64_t v52 = v65;
    goto LABEL_73;
  }
  while (1)
  {
    int64_t v52 = v65 + 1;
    if (__OFADD__(v65, 1)) {
      break;
    }
    if (v52 >= v56) {
      goto LABEL_75;
    }
    unint64_t v64 = *(void *)&__src[8 * v52];
    ++v65;
    if (v64) {
      goto LABEL_73;
    }
  }
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_118:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for _TimeZoneICU()
{
  return self;
}

uint64_t specialized static TimeZone.identifierForAbbreviation(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = one-time initialization token for cache;
  swift_bridgeObjectRetain();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v5 = static TimeZoneCache.cache + 16;
  uint64_t v6 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in TimeZoneCache.timeZoneAbbreviations()(v5, &v16);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  uint64_t v7 = v16;
  if (*(void *)(v16 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v9 & 1) != 0))
  {
    uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 16 * v8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = specialized static TimeZone.tryParseGMTName(_:)();
    if (v12)
    {
      return 0;
    }
    else
    {
      uint64_t v13 = specialized static TimeZone.nameForSecondsFromGMT(_:)(v11);
      if (v14) {
        return v13;
      }
      else {
        return 0;
      }
    }
  }
  return v10;
}

uint64_t closure #1 in TimeZoneCache.timeZoneAbbreviations()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 72);
  if (!v4)
  {
    *(void *)(a1 + 72) = *(void *)(a1 + 120);
    uint64_t v4 = swift_bridgeObjectRetain();
  }
  *a2 = v4;
  return swift_bridgeObjectRetain();
}

uint64_t _NSSwiftTimeZone.data.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
  uint64_t ObjectType = swift_getObjectType();
  char v3 = *(void (**)(uint64_t, uint64_t))(v1 + 32);
  swift_unknownObjectRetain();
  v3(ObjectType, v1);
  swift_unknownObjectRelease();
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR____NSSwiftTimeZone_lock);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 32));
  partial apply for closure #1 in _NSSwiftTimeZone.data.getter((uint64_t *)(v4 + 16), &v6);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 32));
  swift_bridgeObjectRelease();
  swift_release();
  return v6;
}

NSData __swiftcall Data._Representation.bridgedReference()()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = v1;
  uint64_t v3 = v0;
  switch(v1 >> 62)
  {
    case 1uLL:
      if (v0 >> 32 < (int)v0) {
        __break(1u);
      }
      swift_retain();
      uint64_t v5 = __DataStorage.bridgedReference(_:)((int)v3, v3 >> 32);
      outlined consume of Data._Representation(v3, v2);
      goto LABEL_6;
    case 2uLL:
      uint64_t v6 = *(void *)(v0 + 16);
      uint64_t v7 = *(void *)(v0 + 24);
      swift_retain();
      swift_retain();
      uint64_t v5 = __DataStorage.bridgedReference(_:)(v6, v7);
      swift_release();
      swift_release();
LABEL_6:
      result.super.Class isa = (Class)v5;
      break;
    case 3uLL:
      id v8 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
      result.super.Class isa = (Class)objc_msgSend(v8, sel_init);
      break;
    default:
      uint64_t v9 = v0;
      __int16 v10 = v1;
      char v11 = BYTE2(v1);
      char v12 = BYTE3(v1);
      char v13 = BYTE4(v1);
      char v14 = BYTE5(v1);
      result.super.Class isa = (Class)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, &v9, BYTE6(v1));
      break;
  }
  return result;
}

uint64_t partial apply for closure #1 in _NSSwiftTimeZone.data.getter@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _NSSwiftTimeZone.data.getter(v2[1], a1, a2);
}

uint64_t closure #1 in _NSSwiftTimeZone.data.getter@<X0>(Swift::String a1@<0:X1, 8:X2>, uint64_t *a2@<X0>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a2;
  unint64_t v4 = a2[1];
  if (v4 >> 60 != 15)
  {
    *a3 = v5;
    a3[1] = v4;
    return outlined copy of Data?(v5, v4);
  }
  char v37 = a3;
  uint64_t v32 = v5;
  String.append(_:)(a1);
  *(void *)&long long v33 = 11822;
  *((void *)&v33 + 1) = 0xE200000000000000;
  v36[0] = 0xD00000000000001ALL;
  v36[1] = 0x80000001823AF2A0;
  if ((0x80000001823AF2A0 & 0x1000000000000000) == 0)
  {
    swift_bridgeObjectRetain();
    unint64_t v7 = String.subscript.getter();
    unint64_t v9 = v8;
    uint64_t v30 = v10;
    uint64_t v31 = v11;
    swift_bridgeObjectRelease();
    unint64_t v12 = Substring.init<A>(_:)();
    if ((v7 ^ v9) < 0x4000 || (v12 ^ v13) >> 14 == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v12, v13, v14, v15, 0, 0, 0, 0, 0, v7, v9, v30, v31);
      char v24 = v23;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v24 & 1) == 0) {
        goto LABEL_14;
      }
    }
LABEL_15:
    v36[0] = MEMORY[0x1E4FBC868];
    *(void *)&long long v33 = 0xD00000000000001ALL;
    *((void *)&v33 + 1) = 0x80000001823AF2A0;
    uint64_t v34 = 0;
    char v35 = 0;
    uint64_t v26 = readDataFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)(&v33, 1, 0, 1, 0, MEMORY[0x1E4FBC860], v36);
    if (!v3)
    {
      uint64_t v25 = v26;
      unint64_t v28 = v27;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v25 = 0;
LABEL_17:
    unint64_t v28 = 0xC000000000000000;
LABEL_19:
    uint64_t v5 = v32;
    *a2 = v25;
    a2[1] = v28;
    char v29 = v37;
    *char v37 = v25;
    v29[1] = v28;
    outlined copy of Data._Representation(v25, v28);
    return outlined copy of Data?(v5, v4);
  }
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  char v17 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v18 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v19 = objc_msgSend(v17, sel_rangeOfString_, v18);
  uint64_t v21 = v20;
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  if (v19 == (id)0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_15;
  }
  if (!__OFADD__(v19, v21))
  {
    StringProtocol._toUTF16Indices(_:)();
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v25 = 0;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t (*Data.Deallocator._deallocator.getter())()
{
  unint64_t v1 = *v0;
  if (*v0 >= 4) {
    unint64_t v2 = (uint64_t (*)())*v0;
  }
  else {
    unint64_t v2 = off_1ECA5B2C8[v1];
  }
  outlined copy of Data.Deallocator(v1);
  return v2;
}

id Data.init(contentsOf:options:)(uint64_t a1, void *a2)
{
  return specialized Data.init(contentsOf:options:)(a1, a2);
}

id specialized Data.init(contentsOf:options:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  swift_retain();
  id v8 = v5;
  swift_retain();
  if (_foundation_swift_url_feature_enabled())
  {
    *(void *)&long long v20 = v8;
    *((void *)&v20 + 1) = v6;
    uint64_t v21 = v7;
    URL.scheme.getter();
    if (v9)
    {
      Swift::String v10 = String.lowercased()();
      swift_bridgeObjectRelease();
      if (v10._countAndFlagsBits == 1701603686 && v10._object == (void *)0xE400000000000000)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      if (v12)
      {
LABEL_10:
        uint64_t v23 = MEMORY[0x1E4FBC868];
        *(void *)&long long v20 = v8;
        *((void *)&v20 + 1) = v6;
        uint64_t v21 = v7;
        char v22 = 1;
        id v13 = v8;
        swift_retain();
        swift_retain();
        id v14 = (id)readDataFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)(&v20, 1, 0, 1, a2, MEMORY[0x1E4FBC860], &v23);
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        if (!v3) {
          return v14;
        }
        return v14;
      }
    }
    else
    {
      swift_release();
      swift_release();
    }
  }
  else
  {
    unsigned __int8 v11 = objc_msgSend(v8, sel_isFileURL);
    swift_release();
    swift_release();

    if (v11) {
      goto LABEL_10;
    }
  }
  *(void *)&long long v20 = v8;
  *((void *)&v20 + 1) = v6;
  uint64_t v21 = v7;
  id v14 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
  id v16 = v8;
  swift_retain();
  swift_retain();
  id v17 = @nonobjc NSData.init(contentsOf:options:)((void **)&v20, (uint64_t)a2);
  if (v3) {
    return v14;
  }
  uint64_t v18 = v17;
  id v19 = specialized Data.init(referencing:)(v17);

  return v19;
}

uint64_t readDataFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)(long long *a1, int a2, off_t a3, char a4, void *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v9 = *((void *)a1 + 2);
  char v10 = *((unsigned char *)a1 + 24);
  long long v19 = *a1;
  uint64_t v20 = v9;
  char v21 = v10;
  uint64_t result = readBytesFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)((uint64_t)&v19, a2, a3, a4 & 1, a5, a6, a7, &v22);
  if (v8) {
    return v7;
  }
  uint64_t v13 = v23;
  unint64_t v12 = (unint64_t)v24;
  if (!v23)
  {
    uint64_t v7 = 0;
LABEL_12:
    outlined consume of Data.Deallocator?(v12);
    return v7;
  }
  id v14 = v22;
  if (v22)
  {
    uint64_t v15 = closure #1 in Data.Deallocator._deallocator.getter;
    uint64_t v16 = 0;
    switch((unint64_t)v24)
    {
      case 0uLL:
        uint64_t v16 = 0;
        id v17 = (void (__cdecl *)(void *))closure #4 in Data.Deallocator._deallocator.getter;
        goto LABEL_10;
      case 1uLL:
        break;
      case 2uLL:
        uint64_t v16 = 0;
        id v17 = closure #2 in Data.Deallocator._deallocator.getter;
        goto LABEL_10;
      case 3uLL:
        uint64_t v16 = 0;
        id v17 = (void (__cdecl *)(void *))destructiveProjectEnumData for PredicateCodableError;
LABEL_10:
        uint64_t v15 = (int (__cdecl *)(void *, size_t))v17;
        break;
      case 4uLL:
        goto LABEL_15;
      default:
        uint64_t v15 = v24;
        uint64_t v16 = v25;
        break;
    }
    type metadata accessor for __DataStorage();
    swift_allocObject();
    outlined copy of Data.Deallocator?(v12);
    swift_retain();
    uint64_t v18 = (void *)__DataStorage.init(bytes:length:copy:deallocator:offset:)((unint64_t)v14, v13, 0, (void (*)(unint64_t, uint64_t))v15, v16, 0);
    uint64_t v7 = specialized Data._Representation.init(_:count:)(v18, v13);
    swift_release();
    goto LABEL_12;
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

vm_address_t __DataStorage.init(bytes:length:copy:deallocator:offset:)(unint64_t a1, uint64_t a2, char a3, void (*a4)(unint64_t, uint64_t), uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 16) = 0;
  char v10 = (void *)(v6 + 16);
  *(void *)(v6 + 48) = 0;
  *(void *)(v6 + 56) = 0;
  if (a2 > 0x3FFFFFFFFFFFFFFELL)
  {
    __break(1u);
LABEL_21:
    swift_once();
    goto LABEL_5;
  }
  uint64_t v7 = a4;
  uint64_t v9 = a2;
  unint64_t v8 = a1;
  *(void *)(v6 + 40) = a6;
  if (!a2) {
    goto LABEL_10;
  }
  if ((a3 & 1) == 0)
  {
    *(void *)(v6 + 24) = a2;
    *(void *)(v6 + 32) = a2;
    *(unsigned char *)(v6 + 64) = 0;
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 48) = a4;
    *(void *)(v6 + 56) = a5;
    return v6;
  }
  if (one-time initialization token for vmOpsThreshold != -1) {
    goto LABEL_21;
  }
LABEL_5:
  if (static __DataStorage.vmOpsThreshold > v9)
  {
    *(void *)(v6 + 24) = v9;
    unsigned int v14 = 0;
    _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v14 + 1);
    unsigned __int8 v11 = malloc_type_malloc(v9, (unint64_t)v14 << 32);
    if (v11)
    {
      *(void *)(v6 + 16) = v11;
      *(void *)(v6 + 32) = v9;
      *(unsigned char *)(v6 + 64) = 1;
      specialized static __DataStorage.move(_:_:_:)((vm_address_t)v11, v8, v9);
      if (!v7) {
        return v6;
      }
      if (!v8)
      {
        __break(1u);
LABEL_10:
        *(unsigned char *)(v6 + 64) = 0;
        *(void *)(v6 + 24) = 0;
        *(void *)(v6 + 32) = 0;
        *char v10 = 0;
        if (v7)
        {
          if (v8) {
            v7(v8, 0);
          }
          goto LABEL_18;
        }
        return v6;
      }
LABEL_17:
      swift_retain();
      v7(v8, v9);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v7);
LABEL_18:
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v7);
      return v6;
    }
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v7);
    __break(1u);
    goto LABEL_23;
  }
  *(void *)(v6 + 24) = v9;
  *(void *)(v6 + 32) = v9;
  *(unsigned char *)(v6 + 64) = 1;
  unsigned int v15 = 0;
  _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v15 + 1);
  unint64_t v12 = malloc_type_malloc(v9, (unint64_t)v15 << 32);
  if (!v12)
  {
LABEL_23:
    vm_address_t result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v7);
    __break(1u);
    goto LABEL_24;
  }
  *char v10 = v12;
  vm_address_t result = specialized static __DataStorage.move(_:_:_:)((vm_address_t)v12, v8, v9);
  if (!v7) {
    return v6;
  }
  if (v8) {
    goto LABEL_17;
  }
LABEL_24:
  __break(1u);
  return result;
}

unint64_t outlined copy of Data.Deallocator(unint64_t result)
{
  if (result >= 4) {
    return swift_retain();
  }
  return result;
}

unint64_t outlined copy of Data.Deallocator?(unint64_t result)
{
  if (result != 4) {
    return outlined copy of Data.Deallocator(result);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in NSURLSession.upload(for:from:delegate:)(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  return closure #1 in closure #1 in closure #1 in NSURLSession.data(for:delegate:)(a1, a2, a3, a4);
}

uint64_t closure #1 in closure #1 in closure #1 in NSURLSession.data(for:delegate:)(uint64_t result, unint64_t a2, void *a3, id a4)
{
  if (a4)
  {
    id v4 = a4;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  if (a2 >> 60 == 15)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!a3)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  outlined copy of Data?(result, a2);
  id v6 = a3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
  return CheckedContinuation.resume(returning:)();
}

_NSBPlistMappedData *__NSCreateBPlistMappedDataFromURL(uint64_t a1, uint64_t a2, void *a3)
{
  v10[1] = *(id *)MEMORY[0x1E4F143B8];
  id v6 = (void *)MEMORY[0x185308110]();
  v10[0] = 0;
  uint64_t v7 = [[_NSBPlistMappedData alloc] initWithFileURL:a1 error:v10];
  if (v7)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t, _NSBPlistMappedData *))(a2 + 16))(a2, v7);
    -[_NSBPlistMappedData setMappingIndex:](v7, "setMappingIndex:", v8, v10[0]);
  }
  else if (a3)
  {
    *a3 = v10[0];
  }
  return v7;
}

void NSDataDeallocatorFree_block_invoke(int a1, void *a2)
{
}

uint64_t @objc static NSData._readBytes(fromPath:maxLength:bytes:length:didMap:options:reportProgress:)(uint64_t a1, uint64_t a2, void *a3, off_t a4, char **a5, char **a6, BOOL *a7, void *a8, unsigned __int8 a9)
{
  id v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  specialized static NSData._readBytes(fromPath:maxLength:bytes:length:didMap:options:reportProgress:)((uint64_t)v14, v15, a4, a5, a6, a7, a8, a9);
  swift_bridgeObjectRelease();
  return 1;
}

unint64_t specialized static NSData._readBytes(fromPath:maxLength:bytes:length:didMap:options:reportProgress:)(uint64_t a1, uint64_t a2, off_t a3, char **a4, char **a5, BOOL *a6, void *a7, int a8)
{
  uint64_t v22 = MEMORY[0x1E4FBC868];
  v19[0] = a1;
  v19[1] = a2;
  v19[2] = 0;
  char v20 = 0;
  BOOL v14 = a3 == 0x7FFFFFFFFFFFFFFFLL;
  if (a3 == 0x7FFFFFFFFFFFFFFFLL) {
    off_t v15 = 0;
  }
  else {
    off_t v15 = a3;
  }
  swift_bridgeObjectRetain();
  readBytesFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)((uint64_t)v19, a8, v15, v14, a7, MEMORY[0x1E4FBC860], &v22, v21);
  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease();
  if (!v8)
  {
    id v17 = v21[1];
    uint64_t v18 = v21[2];
    *a4 = v21[0];
    *a5 = v17;
    *a6 = v18 == (char *)1;
    return outlined consume of Data.Deallocator?((unint64_t)v18);
  }
  return result;
}

uint64_t pathifiedNSURL(void *a1, NSError **a2)
{
  if (!_NSIsNSURL() || ([a1 isFileURL] & 1) == 0 && objc_msgSend(a1, "scheme")) {
    return (uint64_t)a1;
  }
  uint64_t result = [a1 path];
  if (!result)
  {
    if (a2)
    {
      uint64_t v5 = _NSErrorWithFilePath(258, (uint64_t)a1);
      uint64_t result = 0;
      *a2 = v5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t outlined consume of Data.Deallocator(unint64_t result)
{
  if (result >= 4) {
    return swift_release();
  }
  return result;
}

unint64_t outlined consume of Data.Deallocator?(unint64_t result)
{
  if (result != 4) {
    return outlined consume of Data.Deallocator(result);
  }
  return result;
}

uint64_t LocalizedStringResource.nsLocalizedStringResource.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v6 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v17 = v1[3];
  uint64_t v18 = (void *)v1[9];
  uint64_t v8 = v1[11];
  uint64_t v9 = v1[13];
  uint64_t v19 = v1[10];
  uint64_t v20 = v1[12];
  char v10 = (objc_class *)type metadata accessor for _NSLocalizedStringResourceSwiftWrapper();
  long long v22 = *(_OWORD *)(v1 + 7);
  unsigned __int8 v11 = (char *)objc_allocWithZone(v10);
  unint64_t v12 = &v11[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped];
  *(void *)unint64_t v12 = v2;
  *((void *)v12 + 1) = v3;
  *((void *)v12 + 2) = v4;
  *((void *)v12 + 3) = v17;
  *((void *)v12 + 4) = v6;
  *((void *)v12 + 5) = v5;
  *((void *)v12 + 6) = v7;
  *(_OWORD *)(v12 + 56) = v22;
  *((void *)v12 + 9) = v18;
  *((void *)v12 + 10) = v19;
  *((void *)v12 + 11) = v8;
  *((void *)v12 + 12) = v20;
  *((void *)v12 + 13) = v9;
  v23.receiver = v11;
  v23.super_class = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  id v13 = v18;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v14 = objc_msgSendSuper2(&v23, sel_init);
  id v15 = objc_msgSend(objc_allocWithZone((Class)_NSLocalizedStringResource), sel_initWithResource_, v14);

  uint64_t result = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for _NSLocalizedStringResource);
  a1[3] = result;
  *a1 = v15;
  return result;
}

uint64_t type metadata accessor for _NSLocalizedStringResourceSwiftWrapper()
{
  return self;
}

ValueMetadata *type metadata accessor for FormatStyleCapitalizationContext()
{
  return &type metadata for FormatStyleCapitalizationContext;
}

uint64_t _endElementNs(uint64_t result, void *key, char *__s, void *a4)
{
  uint64_t v7 = result;
  if (result && *(unsigned char *)(result + 120)) {
    return result;
  }
  uint64_t v8 = *(void **)(result + 8);
  uint64_t v9 = *(void *)(result + 40);
  if (__s)
  {
    int v10 = strlen(__s);
    if (v10)
    {
      id Value = 0;
      if (key)
      {
        if ((v9 & 4) != 0)
        {
          id Value = (__CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(v7 + 64), key);
          if (!Value) {
            id Value = (__CFString *)__SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v7 + 64), (char *)key);
          }
        }
      }
      size_t v12 = strlen((const char *)key);
      id v13 = (__CFString *)_cachedColonSeparatedStringFromPrefixAndSuffix(__s, v10, key, v12, v7);
LABEL_13:
      id v14 = v13;
      goto LABEL_15;
    }
  }
  if (key)
  {
    id Value = (__CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(v7 + 64), key);
    id v14 = Value;
    if (Value) {
      goto LABEL_15;
    }
    id v13 = (__CFString *)__SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v7 + 64), (char *)key);
    id Value = v13;
    goto LABEL_13;
  }
  id Value = 0;
  id v14 = 0;
LABEL_15:
  id v15 = 0;
  if (a4)
  {
    if ((v9 & 4) != 0)
    {
      id v15 = (__CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(v7 + 64), a4);
      if (!v15) {
        id v15 = (__CFString *)__SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v7 + 64), (char *)a4);
      }
    }
  }
  if ((*(unsigned char *)(v7 + 43) & 0x40) != 0)
  {
    if ((v9 & 4) != 0)
    {
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = &stru_1ECA5C228;
      }
      if (v14) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = &stru_1ECA5C228;
      }
      uint64_t v18 = v8;
      uint64_t v19 = v7;
      uint64_t v20 = Value;
    }
    else
    {
      uint64_t v18 = v8;
      uint64_t v19 = v7;
      uint64_t v20 = v14;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
    }
    [v18 parser:v19 didEndElement:v20 namespaceURI:v16 qualifiedName:v17];
  }

  return [(id)v7 _popNamespaces];
}

void _startElementNs(uint64_t a1, void *key, char *__s, void *a4, int a5, uint64_t a6, int a7, int a8, uint64_t a9)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  if (a1 && *(unsigned char *)(a1 + 120)) {
    return;
  }
  id v70 = *(id *)(a1 + 8);
  uint64_t v74 = *(void *)(a1 + 40);
  if (__s)
  {
    size_t v16 = strlen(__s);
    if (v16)
    {
      size_t v17 = v16;
      id Value = 0;
      if (key)
      {
        if ((v74 & 4) != 0)
        {
          id Value = (__CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), key);
          if (!Value) {
            id Value = (__CFString *)__SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), (char *)key);
          }
        }
      }
      size_t v18 = strlen((const char *)key);
      uint64_t v19 = (__CFString *)_cachedColonSeparatedStringFromPrefixAndSuffix(__s, v17, key, v18, a1);
      goto LABEL_14;
    }
  }
  if (!key)
  {
    id Value = 0;
    uint64_t v19 = 0;
LABEL_14:
    char v20 = v74;
    goto LABEL_15;
  }
  uint64_t v19 = (__CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), key);
  char v20 = v74;
  id Value = v19;
  if (!v19)
  {
    uint64_t v19 = (__CFString *)__SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), (char *)key);
    id Value = v19;
  }
LABEL_15:
  int64_t v69 = v19;
  char v21 = 0;
  if (a4)
  {
    if ((v20 & 4) != 0)
    {
      char v21 = (__CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a4);
      if (!v21) {
        char v21 = (__CFString *)__SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), (char *)a4);
      }
    }
  }
  unint64_t v68 = v21;
  int v22 = a7 + a5;
  if (a7 + a5 < 0)
  {
    CFStringRef v66 = CFStringCreateWithFormat(0, 0, @"*** attempt to create a temporary id buffer which is too large or with a negative count (%lu) -- possibly data is corrupt", 2 * v22);
    uint64_t v67 = (void *)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3A8] reason:v66 userInfo:0];
    CFRelease(v66);
    objc_exception_throw(v67);
  }
  unint64_t v72 = &v68;
  if (v22) {
    uint64_t v23 = 2 * v22;
  }
  else {
    uint64_t v23 = 1;
  }
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v68 - v24;
  uint64_t v78 = 0;
  if (v26 >= 0x101)
  {
    uint64_t v25 = (char *)_CFCreateArrayStorage();
    unint64_t v73 = v25;
  }
  else
  {
    unint64_t v73 = 0;
  }
  int v76 = &v25[8 * v22];
  uint64_t v77 = v25;
  if (!v22)
  {
    id v75 = 0;
    goto LABEL_55;
  }
  if ((v20 & 8) != 0) {
    id v75 = (id)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:a5];
  }
  else {
    id v75 = 0;
  }
  if (!a5)
  {
LABEL_55:
    uint64_t v28 = 0;
    if ((v20 & 8) == 0) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  unint64_t v27 = 0;
  uint64_t v28 = 0;
  unint64_t v29 = 2 * a5;
  do
  {
    uint64_t v30 = *(char **)(a6 + 8 * v27);
    if (v30)
    {
      if ((v20 & 8) != 0)
      {
        uint64_t v31 = (__CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), *(const void **)(a6 + 8 * v27));
        if (!v31) {
          uint64_t v31 = (__CFString *)__SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), v30);
        }
      }
      else
      {
        uint64_t v31 = 0;
      }
      size_t v33 = strlen(*(const char **)(a6 + 8 * v27));
      uint64_t v32 = (__CFString *)_cachedColonSeparatedStringFromPrefixAndSuffix("xmlns", 5uLL, *(const void **)(a6 + 8 * v27), v33, a1);
    }
    else
    {
      uint64_t v31 = &stru_1ECA5C228;
      uint64_t v32 = @"xmlns";
    }
    uint64_t v34 = a6 + 8 * v27;
    char v35 = *(char **)(v34 + 8);
    if (!v35)
    {
      char v37 = &stru_1ECA5C228;
      if ((v20 & 8) == 0) {
        goto LABEL_50;
      }
LABEL_49:
      objc_msgSend(v75, "setObject:forKey:", v37, v31, v68);
      goto LABEL_50;
    }
    unint64_t v36 = (__CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), *(const void **)(v34 + 8));
    if (!v36) {
      unint64_t v36 = (__CFString *)__SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), v35);
    }
    if (v36) {
      char v37 = v36;
    }
    else {
      char v37 = &stru_1ECA5C228;
    }
    if ((v20 & 8) != 0) {
      goto LABEL_49;
    }
LABEL_50:
    if ((v20 & 4) == 0)
    {
      *(void *)&v77[8 * v28] = v32;
      *(void *)&v76[8 * v28++] = v37;
    }
    v27 += 2;
  }
  while (v27 < v29);
  if ((v20 & 8) != 0) {
LABEL_56:
  }
    objc_msgSend((id)a1, "_pushNamespaces:", v75, v68);
LABEL_57:

  if (a7)
  {
    unint64_t v38 = 0;
    unint64_t v39 = 5 * a7;
    while (1)
    {
      uint64_t v40 = *(char **)(a9 + 8 * v38);
      if (v40) {
        break;
      }
LABEL_81:
      v38 += 5;
      if (v38 >= v39) {
        goto LABEL_82;
      }
    }
    uint64_t v41 = a9 + 8 * v38;
    char v42 = *(const void **)(v41 + 8);
    if (v42)
    {
      size_t v43 = strlen(*(const char **)(v41 + 8));
      if (v43)
      {
        size_t v44 = v43;
        size_t v45 = strlen(v40);
        uint64_t v46 = _cachedColonSeparatedStringFromPrefixAndSuffix(v42, v44, v40, v45, a1);
        goto LABEL_65;
      }
    }
    uint64_t v47 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), v40);
    if (!v47)
    {
      uint64_t v46 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), v40);
LABEL_65:
      uint64_t v47 = v46;
    }
    uint64_t v48 = a9 + 8 * v38;
    uint64_t v49 = *(void *)(v48 + 24);
    if (v49 && (uint64_t v50 = *(void *)(v48 + 32)) != 0 && (v51 = v50 - v49, v50 != v49))
    {
      MEMORY[0x1F4188790](v51 + 1);
      uint64_t v54 = (char *)&v68 - v53;
      if (v51 >= 128) {
        uint64_t v54 = (char *)malloc_type_malloc(v52, 0x14204A73uLL);
      }
      strncpy(v54, *(const char **)(v48 + 24), v51);
      v54[v51] = 0;
      unint64_t v55 = (__CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), v54);
      if (!v55) {
        unint64_t v55 = (__CFString *)__SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), v54);
      }
      if (v55) {
        int64_t v56 = v55;
      }
      else {
        int64_t v56 = &stru_1ECA5C228;
      }
      if (v51 >= 128) {
        free(v54);
      }
      char v20 = v74;
    }
    else
    {
      int64_t v56 = &stru_1ECA5C228;
    }
    *(void *)&v77[8 * v28] = v47;
    *(void *)&v76[8 * v28++] = v56;
    goto LABEL_81;
  }
LABEL_82:
  if (v28)
  {
    id v57 = objc_alloc(MEMORY[0x1E4F1C9E8]);
    unint64_t v58 = (void *)[v57 initWithObjects:v76 forKeys:v77 count:v28];
  }
  else
  {
    unint64_t v58 = 0;
  }
  if ((*(unsigned char *)(a1 + 43) & 0x20) != 0)
  {
    if (qword_1EB1ED8E0 != -1) {
      dispatch_once(&qword_1EB1ED8E0, &__block_literal_global_185);
    }
    if (_MergedGlobals_130)
    {
      if (v58)
      {
        id v59 = v58;
        id v60 = (id)[v58 mutableCopy];
      }
      else
      {
        id v60 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      }
      unint64_t v58 = v60;
    }
    if ((v20 & 4) != 0)
    {
      if (Value) {
        uint64_t v61 = Value;
      }
      else {
        uint64_t v61 = &stru_1ECA5C228;
      }
      if (v68) {
        long long v62 = v68;
      }
      else {
        long long v62 = &stru_1ECA5C228;
      }
      if (v69) {
        int64_t v63 = v69;
      }
      else {
        int64_t v63 = &stru_1ECA5C228;
      }
      uint64_t v64 = (uint64_t)v58;
      if (!v58) {
        uint64_t v64 = [MEMORY[0x1E4F1C9E8] dictionary];
      }
      objc_msgSend(v70, "parser:didStartElement:namespaceURI:qualifiedName:attributes:", a1, v61, v62, v63, v64, v68);
    }
    else
    {
      uint64_t v65 = (uint64_t)v58;
      if (!v58) {
        uint64_t v65 = [MEMORY[0x1E4F1C9E8] dictionary];
      }
      objc_msgSend(v70, "parser:didStartElement:namespaceURI:qualifiedName:attributes:", a1, v69, 0, 0, v65, v68);
    }
  }

  free(v73);
}

void sub_1818AE6A4(_Unwind_Exception *exception_object)
{
}

NSString *__SlowPathNSXMLParserNSStringFromBytes(__CFDictionary *a1, char *__s)
{
  uint64_t v4 = [[NSString alloc] initWithBytes:__s length:strlen(__s) encoding:4];
  uint64_t v5 = v4;
  if (((unint64_t)v4 & 0x8000000000000000) != 0) {
    return v5;
  }
  CStringPtr = CFStringGetCStringPtr((CFStringRef)v4, 0x8000100u);
  if (CStringPtr)
  {
    uint64_t v7 = CStringPtr;
    if (!strcmp(__s, CStringPtr))
    {
      CFDictionaryAddValue(a1, v7, v5);

      return v5;
    }
  }

  return v5;
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance Date(void *a1, uint64_t a2)
{
  id result = objc_msgSend(a1, sel_timeIntervalSinceReferenceDate);
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t @objc static NSLocale._characterDirection(forLanguage:)(uint64_t a1, uint64_t a2, void *a3)
{
  return @objc static NSLocale._characterDirection(forLanguage:)(a1, a2, a3, Locale.Language.characterDirection.getter);
}

uint64_t Data.InlineData.init(_:)(unsigned char *a1, unsigned char *a2)
{
  return specialized Data.InlineData.init(_:)(a1, a2);
}

void sub_1818AEFB4(void *a1)
{
}

void sub_1818AEFC0(_Unwind_Exception *a1)
{
}

id _replacedWithDistantObject(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (!a2) {
    return (id)a2;
  }
  uint64_t v8 = [a3 _interfaceForArgument:a5 ofSelector:a4 reply:1];
  if (objc_opt_isKindOfClass())
  {
    if (!v8)
    {
      uint64_t v9 = +[NSString stringWithFormat:@"[NSXPCConnection sendInvocation]: A proxy object was passed as an argument to a reply block (argument %ld) but the interface does not specify a proxy object there.", a5];
      objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:v9 userInfo:0]);
    }
    return (id)a2;
  }
  if (!v8) {
    return (id)a2;
  }
  id v10 = [[_NSXPCDistantObject alloc] _initWithConnection:a1 exportedObject:a2 interface:v8];

  return v10;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UInt(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int64(a1, a2, (const char **)&selRef_initWithUnsignedInteger_);
}

id NSData.endIndex.getter()
{
  return objc_msgSend(v0, sel_length);
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

id @objc static NSCalendar._current.getter()
{
  id v0 = specialized static NSCalendar._current.getter();

  return v0;
}

id specialized static NSCalendar._current.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  id v0 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in CalendarCache.current.getter((uint64_t *)&v8);
  os_unfair_lock_unlock(v0);
  swift_release_n();
  unint64_t v1 = (objc_class *)type metadata accessor for _NSSwiftCalendar();
  long long v6 = v8;
  uint64_t v2 = (char *)objc_allocWithZone(v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Calendar, os_unfair_lock_s>);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 32) = 0;
  *(_OWORD *)(v3 + 16) = v6;
  *(void *)&v2[OBJC_IVAR____NSSwiftCalendar__lock] = v3;
  uint64_t v4 = *MEMORY[0x1E4F1C318];
  v7.receiver = v2;
  v7.super_class = v1;
  id result = objc_msgSendSuper2(&v7, sel_initWithCheckedCalendarIdentifier_, v4);
  if (!result) {
    __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for FloatingPointFormatStyle()
{
  uint64_t result = type metadata accessor for NumberFormatStyleConfiguration.Collection(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 24);
  uint64_t v4 = *MEMORY[0x1E4FBBE98];
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104))(v3, v4, v5);
  objc_super v7 = (char *)a1 + *(int *)(v2 + 28);
  *a1 = 0;
  a1[1] = 0;
  *(void *)objc_super v7 = 0;
  unsigned char v7[8] = 1;
  return result;
}

uint64_t static RegexComponent<>.localizedDecimal(locale:)@<X0>(long long *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = (char *)a2 + *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
  *(void *)uint64_t v4 = 0;
  v4[8] = 1;
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 3) = 0;
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 5) = 0x1FFFFFFFELL;
  *((void *)v4 + 7) = 0;
  *((void *)v4 + 8) = 0;
  *((void *)v4 + 6) = 0;
  *((_DWORD *)v4 + 18) = 131584;
  *((_WORD *)v4 + 38) = 512;
  uint64_t v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  long long v6 = &v4[v5[9]];
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  long long v10 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  long long v8 = &v4[v5[10]];
  *(void *)long long v8 = 0;
  v8[8] = -1;
  v4[v5[11]] = 3;
  *a2 = v10;

  return swift_unknownObjectRetain();
}

__n128 FloatingPointFormatStyle.Percent.init(locale:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4 = (char *)a2 + *(int *)(type metadata accessor for FloatingPointFormatStyle.Percent() + 36);
  uint64_t v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  long long v6 = &v4[v5[9]];
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  __n128 v10 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(void *)uint64_t v4 = 0x4059000000000000;
  v4[8] = 0;
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 3) = 0;
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 5) = 0x1FFFFFFFELL;
  *((void *)v4 + 7) = 0;
  *((void *)v4 + 8) = 0;
  *((void *)v4 + 6) = 0;
  *((_DWORD *)v4 + 18) = 131584;
  *((_WORD *)v4 + 38) = 512;
  long long v8 = &v4[v5[10]];
  *(void *)long long v8 = 0;
  v8[8] = -1;
  v4[v5[11]] = 3;
  __n128 result = v10;
  *a2 = v10;
  return result;
}

uint64_t BinaryInteger.init(_:format:lenient:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return BinaryInteger.init(_:format:lenient:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for IntegerFormatStyle, a7, 0);
}

{
  return BinaryInteger.init(_:format:lenient:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for IntegerFormatStyle.Percent, a7, 1);
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long *v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  void (*v26)(long long *, uint64_t, uint64_t, double);
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(long long *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  long long v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  uint64_t v48 = a1;
  LODWORD(v46) = a4;
  uint64_t v50 = a3;
  size_t v45 = a2;
  uint64_t v40 = a7;
  uint64_t v47 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1F4188790](v47);
  size_t v43 = (uint64_t)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v10 = type metadata accessor for IntegerFormatStyle.Currency();
  unsigned __int8 v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  id v13 = (long long *)((char *)&v38 - v12);
  swift_getWitnessTable();
  uint64_t v41 = a6;
  id v14 = (int *)type metadata accessor for IntegerParseStrategy();
  size_t v44 = *((void *)v14 - 1);
  MEMORY[0x1F4188790](v14);
  size_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v38 - v18;
  char v42 = a5;
  unint64_t v39 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v20);
  unint64_t v38 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v38 - v24;
  unsigned int v26 = *(void (**)(long long *, uint64_t, uint64_t, double))(v11 + 16);
  v26(v13, v50, v10, v23);
  ((void (*)(char *, long long *, uint64_t))v26)(v16, v13, v10);
  unint64_t v27 = v11;
  uint64_t v28 = v45;
  v16[v14[11]] = v46;
  unint64_t v29 = v14[13];
  uint64_t v46 = *v13;
  *(_OWORD *)&v16[v29] = v46;
  uint64_t v30 = v43;
  outlined init with copy of CurrencyFormatStyleConfiguration.Collection((uint64_t)v13 + *(int *)(v10 + 40), v43);
  uint64_t v31 = *(void (**)(long long *, uint64_t))(v27 + 8);
  swift_unknownObjectRetain();
  *(void *)&uint64_t v46 = v31;
  v31(v13, v10);
  swift_storeEnumTagMultiPayload();
  uint64_t v32 = v30;
  size_t v33 = v44;
  outlined init with take of NumberFormatStyleConfiguration.Collection(v32, (uint64_t)&v16[v14[12]], type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  (*(void (**)(char *, char *, int *))(v33 + 32))(v19, v16, v14);
  uint64_t v34 = v49;
  IntegerParseStrategy.parse(_:)(v48, v28, (uint64_t)v14, (uint64_t)v25);
  if (v34)
  {
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v46)(v50, v10);
    return (*(uint64_t (**)(char *, int *))(v33 + 8))(v19, v14);
  }
  else
  {
    (*(void (**)(char *, int *))(v33 + 8))(v19, v14);
    swift_bridgeObjectRelease();
    unint64_t v36 = v39;
    char v37 = v42;
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v38, v25, v42);
    dispatch thunk of BinaryInteger.init<A>(_:)();
    ((void (*)(uint64_t, uint64_t))v46)(v50, v10);
    return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v25, v37);
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue(void *a1)
{
  return String.LocalizationValue.encode(to:)(a1);
}

uint64_t String.LocalizationValue.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.CodingKeys>);
  uint64_t v13 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[1] = *v1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v16 = static LocaleCache.cache;
  uint64_t v6 = LocaleCache.current.getter();
  v12[0] = v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v16) = 0;
  uint64_t v8 = v14;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v5, v3);
    return swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRetain();
    uint64_t v10 = swift_bridgeObjectRetain();
    uint64_t v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJ14CodableStorageOs5NeverOTg506_sSS10d3E17ef90V6encode33_6BD3BCCACE0AF34AB8D7E61AF16B41642to14fallbackLocaleys7Encoder_p_AA0O0VtKFAC14gh3V14iJ8OALXEfU_AF6LocaleVTf1cn_nTf4ng_n(v10, v6, v12[0]);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v16 = v11;
    char v15 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String.LocalizationValue.FormatArgument.CodableStorage]);
    lazy protocol witness table accessor for type [String.LocalizationValue.FormatArgument.CodableStorage] and conformance <A> [A](&lazy protocol witness table cache variable for type [String.LocalizationValue.FormatArgument.CodableStorage] and conformance <A> [A], (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage and conformance String.LocalizationValue.FormatArgument.CodableStorage);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v5, v3);
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJ14CodableStorageOs5NeverOTg506_sSS10d3E17ef90V6encode33_6BD3BCCACE0AF34AB8D7E61AF16B4164LL2to14fallbackLocaleys7Encoder_p_AA0O0VtKFAC14gh3V14iJ8OALXEfU_AF6LocaleVTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (_DWORD *)((char *)&v18[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  int64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = MEMORY[0x1E4FBC860];
  if (v11)
  {
    uint64_t v17 = v3;
    uint64_t v20 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    uint64_t v12 = v20;
    uint64_t v13 = a1 + 32;
    do
    {
      outlined init with copy of String.LocalizationValue.FormatArgument.Storage(v13, (uint64_t)v19);
      v18[0] = a2;
      v18[1] = a3;
      swift_unknownObjectRetain();
      String.LocalizationValue.FormatArgument.CodableStorage.init(_:fallbackLocale:)((uint64_t)v19, v18, v10);
      uint64_t v20 = v12;
      unint64_t v15 = *(void *)(v12 + 16);
      unint64_t v14 = *(void *)(v12 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        uint64_t v12 = v20;
      }
      *(void *)(v12 + 16) = v15 + 1;
      _sSS10FoundationE17LocalizationValueV14FormatArgumentV07DecimaleD5StyleVWObTm_0((uint64_t)v10, v12+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v15, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      v13 += 120;
      --v11;
    }
    while (v11);
  }
  return v12;
}

__n128 IntegerFormatStyle.init(locale:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4 = (char *)a2 + *(int *)(type metadata accessor for IntegerFormatStyle() + 36);
  *(void *)uint64_t v4 = 0;
  v4[8] = 1;
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 3) = 0;
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 5) = 0x1FFFFFFFELL;
  *((void *)v4 + 7) = 0;
  *((void *)v4 + 8) = 0;
  *((void *)v4 + 6) = 0;
  *((_DWORD *)v4 + 18) = 131584;
  *((_WORD *)v4 + 38) = 512;
  uint64_t v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v6 = &v4[v5[9]];
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  __n128 v10 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = &v4[v5[10]];
  *(void *)uint64_t v8 = 0;
  v8[8] = -1;
  v4[v5[11]] = 3;
  __n128 result = v10;
  *a2 = v10;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return String.LocalizationValue.init(from:)(a1, a2);
}

uint64_t BinaryInteger.init(_:format:lenient:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(void, uint64_t, uint64_t)@<X6>, uint64_t a8@<X8>, int a9)
{
  uint64_t v40 = a1;
  char v37 = a2;
  uint64_t v34 = a8;
  int v38 = a4;
  int v39 = a9;
  uint64_t v12 = a7(0, a5, a6);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  unint64_t v15 = (_OWORD *)((char *)&v32 - v14);
  swift_getWitnessTable();
  uint64_t v35 = a6;
  uint64_t v16 = (int *)type metadata accessor for IntegerParseStrategy();
  uint64_t v17 = *((void *)v16 - 1);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v32 - v18;
  uint64_t v36 = a5;
  uint64_t v33 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v32 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v23 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v32 - v24;
  uint64_t v42 = v13;
  unsigned int v26 = *(void (**)(_OWORD *, uint64_t, uint64_t, double))(v13 + 16);
  uint64_t v43 = a3;
  v26(v15, a3, v12, v23);
  ((void (*)(char *, _OWORD *, uint64_t))v26)(v19, v15, v12);
  unint64_t v27 = v37;
  v19[v16[11]] = v38;
  *(_OWORD *)&v19[v16[13]] = *v15;
  outlined init with take of NumberFormatStyleConfiguration.Collection((uint64_t)v15 + *(int *)(v12 + 36), (uint64_t)&v19[v16[12]], type metadata accessor for NumberFormatStyleConfiguration.Collection);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v28 = v41;
  IntegerParseStrategy.parse(_:)(v40, v27, (uint64_t)v16, (uint64_t)v25);
  if (v28)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v12);
    return (*(uint64_t (**)(char *, int *))(v17 + 8))(v19, v16);
  }
  else
  {
    (*(void (**)(char *, int *))(v17 + 8))(v19, v16);
    swift_bridgeObjectRelease();
    uint64_t v30 = v33;
    uint64_t v31 = v36;
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v32, v25, v36);
    dispatch thunk of BinaryInteger.init<A>(_:)();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v12);
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v25, v31);
  }
}

uint64_t destroy for IntegerFormatStyle(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for NumberFormatStyleConfiguration.Collection(0) + 36);
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v9 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v5, 1, v6);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v8(v5, v6);
  }
  return result;
}

uint64_t specialized closure #1 in FormatterCache.formatter(for:creator:)(uint64_t a1, uint64_t a2)
{
  return specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, a2, (void (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  return specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, a2, (void (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  return specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, a2, (void (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  char v2;

  if (*(void *)(*(void *)a1 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a2), (v2 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

{
  return specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, a2, (void (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

uint64_t specialized closure #1 in FormatterCache.formatter(for:creator:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  if (*(void *)(*(void *)a1 + 16) && (a3(a2), (v3 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 1;
  }
}

{
  char v3;

  if (*(void *)(*(void *)a1 + 16) && (a3(a2), (v3 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 1;
  }
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v67 = a3;
  unint64_t v68 = a4;
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  __n128 v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = v4;
  Hasher.init(_seed:)();
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v14 = *(void *)a1;
    Hasher._combine(_:)(1u);
    if ((v14 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v15 = v14;
    }
    else {
      Swift::UInt64 v15 = 0;
    }
    Hasher._combine(_:)(v15);
  }
  outlined init with take of LocalePreferences?(a1 + 16, (uint64_t)v91, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  int v16 = *(unsigned __int8 *)(a1 + 73);
  if (v16 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v17 = v16 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v17);
  }
  int v18 = *(unsigned __int16 *)(a1 + 74);
  unsigned int v19 = v18 | (*(unsigned __int8 *)(a1 + 76) << 16);
  if (v18 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v19 & 1);
    Hasher._combine(_:)((v19 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v19) & 1);
  }
  int v20 = *(unsigned __int8 *)(a1 + 77);
  if (v20 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v21 = v20 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v21);
  }
  uint64_t v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  outlined init with copy of FloatingPointRoundingRule?(a1 + v22[9], (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v7);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  uint64_t v23 = a1 + v22[10];
  int v24 = *(unsigned __int8 *)(v23 + 8);
  if (v24 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v25 = *(void *)v23;
    Hasher._combine(_:)(1u);
    if (v24)
    {
      Hasher._combine(_:)(1uLL);
      if ((v25 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v26 = v25;
      }
      else {
        Swift::UInt64 v26 = 0;
      }
      Hasher._combine(_:)(v26);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v25);
    }
  }
  Swift::UInt v27 = *(unsigned __int8 *)(a1 + v22[11]);
  if (v27 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v27);
  }
  uint64_t v28 = a2(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(a1 + *(int *)(v28 + 24), (uint64_t)v88, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v88, (uint64_t)v89, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v89) == 1)
  {
    Hasher._combine(_:)(0);
    uint64_t v30 = v67;
    unint64_t v29 = v68;
    goto LABEL_82;
  }
  outlined init with take of LocalePreferences?((uint64_t)v88, (uint64_t)&v70, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v70 == 2)
  {
    Swift::UInt8 v31 = 0;
  }
  else
  {
    Swift::UInt8 v31 = v70 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v31);
  uint64_t v32 = v71;
  if (!v71)
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v70);
    char v37 = &v70;
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v32 + 16));
  uint64_t v33 = *(void *)(v32 + 16);
  if (!v33)
  {
    outlined init with take of LocalePreferences?((uint64_t)v88, (uint64_t)v69, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v88, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    char v37 = (uint64_t *)v69;
LABEL_46:
    outlined retain of LocalePreferences(v37);
    if (!v72) {
      goto LABEL_40;
    }
    goto LABEL_47;
  }
  outlined retain of LocalePreferences?((uint64_t)v88, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v88, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v34 = v32 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v34 += 16;
    --v33;
  }
  while (v33);
  swift_bridgeObjectRelease();
  if (!v72)
  {
LABEL_40:
    Hasher._combine(_:)(0);
    if (!v73) {
      goto LABEL_41;
    }
    goto LABEL_48;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v73)
  {
LABEL_41:
    Hasher._combine(_:)(0);
    uint64_t v35 = v74;
    if (!v74) {
      goto LABEL_42;
    }
LABEL_49:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v90, v35);
    swift_bridgeObjectRelease();
    uint64_t v36 = v75;
    if (!v75) {
      goto LABEL_43;
    }
    goto LABEL_50;
  }
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v35 = v74;
  if (v74) {
    goto LABEL_49;
  }
LABEL_42:
  Hasher._combine(_:)(0);
  uint64_t v36 = v75;
  if (!v75)
  {
LABEL_43:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }
LABEL_50:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v90, v36);
  swift_bridgeObjectRelease();
LABEL_51:
  int v38 = v76;
  int v39 = v77;
  uint64_t v41 = v78;
  uint64_t v40 = v79;
  uint64_t v42 = v80;
  if (v76)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v43 = v39;
    id v44 = v41;
    id v45 = v40;
    id v46 = v42;
    id v47 = v38;
    _CFObject.hash(into:)();
    if (v39) {
      goto LABEL_53;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    id v52 = v42;
    id v53 = v39;
    id v54 = v41;
    id v55 = v40;
    if (v39)
    {
LABEL_53:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v48 = v39;
      _CFObject.hash(into:)();

      if (v41) {
        goto LABEL_54;
      }
      goto LABEL_59;
    }
  }
  Hasher._combine(_:)(0);
  if (v41)
  {
LABEL_54:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v49 = v41;
    _CFObject.hash(into:)();

    if (v40) {
      goto LABEL_55;
    }
LABEL_60:
    Hasher._combine(_:)(0);
    if (v42) {
      goto LABEL_56;
    }
    goto LABEL_61;
  }
LABEL_59:
  Hasher._combine(_:)(0);
  if (!v40) {
    goto LABEL_60;
  }
LABEL_55:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  id v50 = v40;
  _CFObject.hash(into:)();

  if (v42)
  {
LABEL_56:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    id v51 = v42;
    _CFObject.hash(into:)();

    goto LABEL_62;
  }
LABEL_61:
  Hasher._combine(_:)(0);
  id v51 = 0;
LABEL_62:

  uint64_t v56 = v81;
  if (v56)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v90, v56);
    swift_bridgeObjectRelease();
    uint64_t v57 = v82;
    if (v82) {
      goto LABEL_64;
    }
LABEL_67:
    Hasher._combine(_:)(0);
    if (v83) {
      goto LABEL_65;
    }
LABEL_68:
    Hasher._combine(_:)(0);
    goto LABEL_69;
  }
  Hasher._combine(_:)(0);
  uint64_t v57 = v82;
  if (!v82) {
    goto LABEL_67;
  }
LABEL_64:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v90, v57);
  swift_bridgeObjectRelease();
  if (!v83) {
    goto LABEL_68;
  }
LABEL_65:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_69:
  uint64_t v30 = v67;
  unint64_t v29 = v68;
  if (v84 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v58 = v84 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v58);
  }
  if (v85 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v59 = v85 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v59);
  }
  if (v86 == 2)
  {
    Swift::UInt8 v60 = 0;
  }
  else
  {
    Swift::UInt8 v60 = v86 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v60);
  if (v87 == 2)
  {
    Swift::UInt8 v61 = 0;
  }
  else
  {
    Swift::UInt8 v62 = v87 & 1;
    Hasher._combine(_:)(1u);
    Swift::UInt8 v61 = v62;
  }
  Hasher._combine(_:)(v61);
  outlined retain of LocalePreferences?((uint64_t)v88, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v88, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_82:
  Swift::Int v63 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v63, v30, v29);
}

double specialized static NumberFormatStyleConfiguration.Collection.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (FloatingPointRoundingRule?, FloatingPointRoundingRule?));
  MEMORY[0x1F4188790](v8);
  __n128 v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v11 - 8);
  MEMORY[0x1F4188790](v12);
  *(double *)&long long v16 = MEMORY[0x1F4188790](v13);
  int v18 = (char *)&v60 - v17;
  char v19 = *(unsigned char *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if (!*(unsigned char *)(a2 + 8)) {
      return *(double *)&v16;
    }
  }
  else
  {
    *(void *)&long long v16 = *(void *)a2;
    if (*(double *)a1 != *(double *)a2) {
      char v19 = 1;
    }
    if (v19) {
      return *(double *)&v16;
    }
  }
  uint64_t v64 = v8;
  Swift::Int v63 = v7;
  uint64_t v66 = v5;
  uint64_t v67 = v10;
  uint64_t v65 = v4;
  unint64_t v20 = *(void *)(a1 + 40);
  unint64_t v21 = *(void *)(a1 + 56);
  unsigned int v22 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v23 = *(void *)(a2 + 16);
  uint64_t v24 = *(void *)(a2 + 24);
  uint64_t v26 = *(void *)(a2 + 32);
  unint64_t v25 = *(void *)(a2 + 40);
  uint64_t v27 = *(void *)(a2 + 48);
  unint64_t v28 = *(void *)(a2 + 56);
  uint64_t v29 = *(void *)(a2 + 64);
  unsigned int v30 = *(unsigned __int8 *)(a2 + 72);
  if (v20 >> 1 == 0xFFFFFFFF && v21 <= 1 && v22 < 2)
  {
    if (v25 >> 1 != 0xFFFFFFFF || v28 > 1 || v30 >= 2) {
      return *(double *)&v16;
    }
LABEL_18:
    int v35 = *(unsigned __int8 *)(a1 + 73);
    int v36 = *(unsigned __int8 *)(a2 + 73);
    if (v35 == 2)
    {
      uint64_t v37 = (uint64_t)v67;
      if (v36 != 2) {
        return *(double *)&v16;
      }
    }
    else
    {
      uint64_t v37 = (uint64_t)v67;
      if (v36 == 2 || ((((v36 & 1) == 0) ^ v35) & 1) == 0) {
        return *(double *)&v16;
      }
    }
    int v38 = *(unsigned __int16 *)(a1 + 74) | (*(unsigned __int8 *)(a1 + 76) << 16);
    int v39 = *(_WORD *)(a2 + 74);
    if (*(_WORD *)(a1 + 74) == 2)
    {
      if (v39 != 2) {
        return *(double *)&v16;
      }
    }
    else if (v39 == 2 {
           || ((((*(_WORD *)(a2 + 74) & 1) == 0) ^ v38) & 1) == 0
    }
           || ((*(_WORD *)(a2 + 74) & 0x100) == 0) == (unsigned __int16)(*(_WORD *)(a1 + 74) & 0x100) >> 8
           || (((*(unsigned __int16 *)(a2 + 74) | (*(unsigned __int8 *)(a2 + 76) << 16)) & 0x10000) == 0) == (v38 & 0x10000u) >> 16)
    {
      return *(double *)&v16;
    }
    int v40 = *(unsigned __int8 *)(a1 + 77);
    int v41 = *(unsigned __int8 *)(a2 + 77);
    if (v40 == 2)
    {
      if (v41 != 2) {
        return *(double *)&v16;
      }
    }
    else if (v41 == 2 || ((((v41 & 1) == 0) ^ v40) & 1) == 0)
    {
      return *(double *)&v16;
    }
    uint64_t v42 = v15;
    uint64_t v43 = (uint64_t)v18;
    uint64_t v44 = v14;
    uint64_t v45 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    outlined init with copy of FloatingPointRoundingRule?(a1 + *(int *)(v45 + 36), v43);
    uint64_t v67 = (char *)v45;
    outlined init with copy of FloatingPointRoundingRule?(a2 + *(int *)(v45 + 36), v44);
    uint64_t v46 = v37 + *(int *)(v64 + 48);
    outlined init with copy of FloatingPointRoundingRule?(v43, v37);
    outlined init with copy of FloatingPointRoundingRule?(v44, v46);
    id v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48);
    uint64_t v48 = v65;
    if (v47(v37, 1, v65) == 1)
    {
      outlined destroy of Any?(v44, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      outlined destroy of Any?(v43, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      if (v47(v46, 1, v48) == 1)
      {
        outlined destroy of Any?(v37, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
LABEL_42:
        uint64_t v54 = *((int *)v67 + 10);
        id v55 = (uint64_t *)(a1 + v54);
        int v56 = *(unsigned __int8 *)(a1 + v54 + 8);
        int v57 = *(unsigned __int8 *)(a2 + v54 + 8);
        if (v56 != 255 && v57 != 255)
        {
          uint64_t v58 = *v55;
          if (v56 & 1) != 0 && (v57) {
            *(void *)&long long v16 = v58;
          }
        }
        return *(double *)&v16;
      }
    }
    else
    {
      uint64_t v62 = v44;
      uint64_t v49 = v42;
      outlined init with copy of FloatingPointRoundingRule?(v37, v42);
      if (v47(v46, 1, v48) != 1)
      {
        uint64_t v50 = v66;
        id v51 = v63;
        (*(void (**)(char *, uint64_t, uint64_t))(v66 + 32))(v63, v46, v48);
        char v52 = dispatch thunk of static Equatable.== infix(_:_:)();
        id v53 = *(void (**)(char *, uint64_t))(v50 + 8);
        v53(v51, v48);
        outlined destroy of Any?(v62, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
        outlined destroy of Any?(v43, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
        v53((char *)v49, v48);
        outlined destroy of Any?(v37, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
        if ((v52 & 1) == 0) {
          return *(double *)&v16;
        }
        goto LABEL_42;
      }
      outlined destroy of Any?(v62, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      outlined destroy of Any?(v43, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v42, v48);
    }
    outlined destroy of Any?(v37, &demangling cache variable for type metadata for (FloatingPointRoundingRule?, FloatingPointRoundingRule?));
    return *(double *)&v16;
  }
  uint64_t v31 = *(void *)(a1 + 64);
  uint64_t v32 = *(void *)(a1 + 48);
  uint64_t v33 = *(void *)(a1 + 32);
  long long v16 = *(_OWORD *)(a1 + 16);
  long long v68 = v16;
  uint64_t v69 = v33;
  unint64_t v70 = v20;
  uint64_t v71 = v32;
  unint64_t v72 = v21;
  uint64_t v73 = v31;
  char v74 = v22;
  if (v25 >> 1 != 0xFFFFFFFF || v28 > 1 || v30 >= 2)
  {
    uint64_t v61 = v15;
    Swift::UInt8 v60 = v18;
    uint64_t v62 = v14;
    outlined init with take of NumberFormatStyleConfiguration.Precision.Option(&v68, v75);
    *(void *)&long long v76 = v23;
    *((void *)&v76 + 1) = v24;
    uint64_t v77 = v26;
    unint64_t v78 = v25;
    uint64_t v79 = v27;
    unint64_t v80 = v28;
    uint64_t v81 = v29;
    char v82 = v30;
    BOOL v34 = specialized static NumberFormatStyleConfiguration.Precision.Option.== infix(_:_:)(v75, &v76);
    uint64_t v14 = v62;
    int v18 = v60;
    uint64_t v15 = v61;
    if (v34) {
      goto LABEL_18;
    }
  }
  return *(double *)&v16;
}

uint64_t outlined init with copy of FloatingPointRoundingRule?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

BOOL specialized static NumberFormatStyleConfiguration.Precision.Option.== infix(_:_:)(long long *a1, long long *a2)
{
  outlined init with take of NumberFormatStyleConfiguration.Precision.Option(a1, &v25);
  char v3 = v31;
  if ((v31 & 0x80) == 0)
  {
    long long v4 = v25;
    char v5 = v26;
    outlined init with take of NumberFormatStyleConfiguration.Precision.Option(a2, &v18);
    if (v24 < 0 || (void)v4 != (void)v18) {
      return 0;
    }
    char v6 = v19;
    if (v5) {
      return (v6 & 1) != 0;
    }
    if (*((void *)&v4 + 1) != *((void *)&v18 + 1)) {
      char v6 = 1;
    }
    return (v6 & 1) == 0;
  }
  v31 &= ~0x80u;
  uint64_t v7 = v25;
  char v8 = BYTE8(v25);
  uint64_t v9 = v26;
  char v10 = v27;
  uint64_t v11 = v28;
  char v12 = v29;
  uint64_t v13 = v30;
  outlined init with take of NumberFormatStyleConfiguration.Precision.Option(a2, &v18);
  char v6 = v24;
  if ((v24 & 0x80) == 0) {
    return 0;
  }
  char v15 = BYTE8(v18);
  char v16 = v20;
  char v17 = v22;
  if (v8)
  {
    if (!BYTE8(v18)) {
      return 0;
    }
  }
  else
  {
    if (v7 != (void)v18) {
      char v15 = 1;
    }
    if (v15) {
      return 0;
    }
  }
  if (v10)
  {
    if (!v20) {
      return 0;
    }
  }
  else
  {
    if (v9 != v19) {
      char v16 = 1;
    }
    if (v16) {
      return 0;
    }
  }
  if (v12)
  {
    if (!v22) {
      return 0;
    }
  }
  else
  {
    if (v11 != v21) {
      char v17 = 1;
    }
    if (v17) {
      return 0;
    }
  }
  if ((v3 & 1) == 0) {
    return (v24 & 1) == 0 && v13 == v23;
  }
  return (v6 & 1) != 0;
}

_OWORD *outlined init with take of NumberFormatStyleConfiguration.Precision.Option(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  long long v4 = a1[2];
  *(_OWORD *)((char *)a2 + 41) = *(long long *)((char *)a1 + 41);
  a2[1] = v3;
  a2[2] = v4;
  *a2 = v2;
  return a2;
}

void specialized Optional<A>.hash(into:)()
{
  outlined init with take of LocalePreferences?(v0, (uint64_t)v10, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  Swift::UInt v2 = v10[0];
  Swift::UInt v1 = v10[1];
  Swift::UInt v4 = v10[2];
  char v3 = v11;
  Swift::UInt v5 = v12;
  char v6 = v13;
  Swift::UInt v9 = v14;
  char v7 = v15;
  outlined init with take of LocalePreferences?(v0, (uint64_t)v16, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  if (v17 >> 1 == 0xFFFFFFFF && v18 <= 1 && v19 <= 1u) {
    goto LABEL_11;
  }
  Hasher._combine(_:)(1u);
  if (v7 < 0)
  {
    Hasher._combine(_:)(1uLL);
    if (v1)
    {
      Hasher._combine(_:)(0);
      if (v3)
      {
LABEL_9:
        Hasher._combine(_:)(0);
        if (v6) {
          goto LABEL_10;
        }
        goto LABEL_14;
      }
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v2);
      if (v3) {
        goto LABEL_9;
      }
    }
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
    if (v6)
    {
LABEL_10:
      Hasher._combine(_:)(0);
      if (v7) {
        goto LABEL_11;
      }
LABEL_15:
      Hasher._combine(_:)(1u);
      Swift::UInt v8 = v9;
      goto LABEL_16;
    }
LABEL_14:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
    if (v7) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v2);
  if (v4)
  {
LABEL_11:
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(1u);
  Swift::UInt v8 = v1;
LABEL_16:
  Hasher._combine(_:)(v8);
}

{
  uint64_t v0;
  Swift::UInt64 v1;
  char v2;
  Swift::UInt64 v3;
  char v4;
  Swift::UInt v5;
  Swift::UInt v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  uint64_t v10;
  Swift::UInt64 v11;
  uint64_t v12;
  Swift::UInt v13;
  Swift::UInt v14;
  unsigned char v15[56];

  outlined init with take of LocalePreferences?(v0, (uint64_t)&v9, &demangling cache variable for type metadata for WeekendRange?);
  Swift::UInt v1 = v9;
  Swift::UInt v2 = v10;
  char v3 = v11;
  Swift::UInt v4 = v12;
  char v6 = v13;
  Swift::UInt v5 = v14;
  outlined init with take of LocalePreferences?(v0, (uint64_t)v15, &demangling cache variable for type metadata for WeekendRange?);
  if (v15[48] == 1)
  {
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(1u);
  if ((v2 & 1) == 0)
  {
    Hasher._combine(_:)(1u);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      char v7 = v1;
    }
    else {
      char v7 = 0;
    }
    Hasher._combine(_:)(v7);
    if (v4) {
      goto LABEL_8;
    }
LABEL_10:
    Hasher._combine(_:)(1u);
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt v8 = v3;
    }
    else {
      Swift::UInt v8 = 0;
    }
    Hasher._combine(_:)(v8);
    goto LABEL_14;
  }
  Hasher._combine(_:)(0);
  if ((v4 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_8:
  Hasher._combine(_:)(0);
LABEL_14:
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v5);
}

uint64_t String.LocalizationValue.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  v250 = a2;
  uint64_t v243 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0);
  uint64_t v259 = *(void *)(v243 - 8);
  MEMORY[0x1F4188790](v243);
  v258 = (char *)&v199 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v253 = (uint64_t)&v199 - v5;
  MEMORY[0x1F4188790](v6);
  uint64_t v249 = (uint64_t)&v199 - v7;
  uint64_t v238 = v8;
  MEMORY[0x1F4188790](v9);
  uint64_t v248 = (uint64_t)&v199 - v10;
  uint64_t v242 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0);
  uint64_t v255 = *(void *)(v242 - 8);
  uint64_t v11 = *(uint64_t (**)(uint64_t))(v255 + 64);
  MEMORY[0x1F4188790](v242);
  uint64_t v241 = (uint64_t)&v199 - (((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v252 = (uint64_t)&v199 - v13;
  MEMORY[0x1F4188790](v14);
  uint64_t v247 = (uint64_t)&v199 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v246 = (uint64_t)&v199 - v17;
  uint64_t v240 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0);
  v257 = *(ValueMetadata **)(v240 - 8);
  unint64_t Kind = v257[4].Kind;
  MEMORY[0x1F4188790](v240);
  uint64_t v239 = (uint64_t)&v199 - ((Kind + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v251 = (uint64_t)&v199 - v20;
  MEMORY[0x1F4188790](v21);
  uint64_t v245 = (uint64_t)&v199 - v22;
  MEMORY[0x1F4188790](v23);
  uint64_t v244 = (uint64_t)&v199 - v24;
  uint64_t v254 = type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
  uint64_t v237 = *(void *)(v254 - 8);
  MEMORY[0x1F4188790](v254);
  v256 = (char *)&v199 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v260 = (uint64_t)&v199 - v27;
  MEMORY[0x1F4188790](v28);
  uint64_t v262 = (uint64_t)&v199 - v29;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.CodingKeys>);
  uint64_t v261 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  uint64_t v32 = (char *)&v199 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys();
  int64_t v33 = v280;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v33) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  unint64_t v234 = Kind;
  v235 = v11;
  v236 = a1;
  LOBYTE(v266) = 0;
  uint64_t v35 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v37 = v36;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String.LocalizationValue.FormatArgument.CodableStorage]);
  LOBYTE(v272) = 1;
  lazy protocol witness table accessor for type [String.LocalizationValue.FormatArgument.CodableStorage] and conformance <A> [A](&lazy protocol witness table cache variable for type [String.LocalizationValue.FormatArgument.CodableStorage] and conformance <A> [A], &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage and conformance String.LocalizationValue.FormatArgument.CodableStorage);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (!*(void *)(v266 + 16))
  {
    uint64_t v47 = MEMORY[0x1E4FBC860];
    uint64_t v48 = v261;
LABEL_49:
    (*(void (**)(char *, uint64_t))(v48 + 8))(v32, v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v198 = v250;
    void *v250 = v47;
    v198[1] = v35;
    v198[2] = v37;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v236);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v223 = v35;
  char v224 = v32;
  uint64_t v222 = v266;
  uint64_t v38 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOG_SSs5NeverOTg506_sSS10d3E17ef31V4fromACs7Decoder_p_tKcfcSSAC14gh3V14iJ54Ocfu_33_3c0eda9a63dc724d562b3e4a722c2209AISSTf3nnnpk_nTf1cn_n(v266);
  int64_t v280 = 0;
  uint64_t v39 = *(void *)(v38 + 16);
  uint64_t v221 = v37;
  if (v39)
  {
    uint64_t v219 = v30;
    swift_bridgeObjectRetain();
    uint64_t v40 = 0;
    int v41 = (void **)(v38 + 40);
    unint64_t v42 = 0xE000000000000000;
    uint64_t v43 = v257;
    do
    {
      uint64_t v44 = (uint64_t)*(v41 - 1);
      uint64_t v45 = *v41;
      *(void *)&long long v266 = v40;
      *((void *)&v266 + 1) = v42;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v46._uint64_t countAndFlagsBits = v44;
      v46._os_log_t object = v45;
      String.append(_:)(v46);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v42 = *((void *)&v266 + 1);
      uint64_t v40 = v266;
      v41 += 2;
      --v39;
    }
    while (v39);
    swift_bridgeObjectRelease();
    uint64_t v30 = v219;
  }
  else
  {
    uint64_t v43 = v257;
  }
  swift_bridgeObjectRelease();
  uint64_t v49 = v224;
  KeyedDecodingContainer.codingPath.getter();
  int64_t v50 = v280;
  _assertValidDecodedFormat(_:validFormatSpecifiers:codingPath:)();
  uint64_t v52 = (uint64_t)v258;
  uint64_t v51 = v259;
  int64_t v220 = v50;
  if (!v50)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v53 = v222;
    int64_t v54 = *(void *)(v222 + 16);
    uint64_t v47 = MEMORY[0x1E4FBC860];
    if (v54)
    {
      uint64_t v219 = v30;
      uint64_t v279 = MEMORY[0x1E4FBC860];
      int64_t v280 = v54;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v54, 0);
      uint64_t v55 = v53 + ((*(unsigned __int8 *)(v237 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v237 + 80));
      uint64_t v56 = (uint64_t)v256;
      uint64_t v202 = v238 + 3;
      char v203 = v256 + 8;
      char v218 = (uint64_t *)&v269[1];
      unint64_t v200 = v234 + 7;
      char v201 = (char *)v235 + 7;
      uint64_t v225 = *(void *)(v237 + 72);
      *(void *)&long long v57 = &type metadata for Date;
      long long v199 = v57;
      do
      {
        uint64_t v238 = v55;
        uint64_t v58 = v262;
        _sSS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOWOcTm_0(v55, v262, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
        uint64_t v59 = v260;
        _sSS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOWOcTm_0(v58, v260, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
        _sSS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOWOcTm_0(v59, v56, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        uint64_t v61 = v255;
        switch(EnumCaseMultiPayload)
        {
          case 1:
            int v68 = *(_DWORD *)v56;
            uint64_t v69 = MEMORY[0x1E4FBC150];
            uint64_t v264 = MEMORY[0x1E4FBC150];
            unint64_t v70 = MEMORY[0x1E4FBC1C0];
            goto LABEL_20;
          case 2:
            uint64_t v71 = *(void *)v56;
            unint64_t v265 = MEMORY[0x1E4FBC240];
            uint64_t v69 = MEMORY[0x1E4FBC1C8];
            goto LABEL_22;
          case 3:
            int v68 = *(_DWORD *)v56;
            uint64_t v69 = MEMORY[0x1E4FBC4C0];
            uint64_t v264 = MEMORY[0x1E4FBC4C0];
            unint64_t v70 = MEMORY[0x1E4FBC530];
LABEL_20:
            unint64_t v265 = v70;
            LODWORD(v263[0]) = v68;
            goto LABEL_28;
          case 4:
            uint64_t v71 = *(void *)v56;
            unint64_t v265 = MEMORY[0x1E4FBC598];
            uint64_t v69 = MEMORY[0x1E4FBC538];
LABEL_22:
            uint64_t v264 = v69;
            v263[0] = v71;
            goto LABEL_28;
          case 5:
            int v72 = *(_DWORD *)v56;
            uint64_t v69 = MEMORY[0x1E4FBB470];
            uint64_t v264 = MEMORY[0x1E4FBB470];
            unint64_t v265 = MEMORY[0x1E4FBB4D0];
            LODWORD(v263[0]) = v72;
            goto LABEL_28;
          case 6:
            uint64_t v73 = *(void *)v56;
            uint64_t v69 = MEMORY[0x1E4FBB3D0];
            uint64_t v264 = MEMORY[0x1E4FBB3D0];
            unint64_t v265 = MEMORY[0x1E4FBB460];
            v263[0] = v73;
            goto LABEL_28;
          case 7:
            uint64_t v74 = *(void *)v56;
            uint64_t v69 = MEMORY[0x1E4FBC958];
            uint64_t v264 = MEMORY[0x1E4FBC958];
            unint64_t v265 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
            v263[0] = v74;
            goto LABEL_28;
          case 8:
            uint64_t v75 = *(void *)v56;
            uint64_t v76 = *(void *)(v56 + 8);
            uint64_t v77 = MEMORY[0x1E4FBB1A0];
            uint64_t v264 = MEMORY[0x1E4FBB1A0];
            unint64_t v265 = lazy protocol witness table accessor for type String and conformance String();
            v263[0] = v75;
            v263[1] = v76;
            unint64_t v78 = __swift_project_boxed_opaque_existential_1(v263, v77);
            *((void *)&v273 + 1) = v77;
            boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v272);
            (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v77 - 8) + 16))(boxed_opaque_existential_1, v78, v77);
            goto LABEL_29;
          case 9:
            id v80 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, *(double *)v56);
            uint64_t v69 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSDate);
            uint64_t v264 = v69;
            unint64_t v265 = lazy protocol witness table accessor for type NSNumber and conformance NSObject(&lazy protocol witness table cache variable for type NSDate and conformance NSObject, &lazy cache variable for type metadata for NSDate);
            v263[0] = v80;
LABEL_28:
            uint64_t v81 = __swift_project_boxed_opaque_existential_1(v263, v69);
            *((void *)&v273 + 1) = v69;
            char v82 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v272);
            (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v69 - 8) + 16))(v82, v81, v69);
LABEL_29:
            char v278 = 0;
            outlined init with take of String.LocalizationValue.FormatArgument.Storage(&v272, (uint64_t)&v266);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v263);
            uint64_t v83 = type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage;
            uint64_t v84 = v59;
            goto LABEL_38;
          case 10:
            uint64_t v85 = v59;
            uint64_t v59 = *(void *)v56;
            unint64_t v86 = *(void *)(v56 + 8);
            outlined destroy of String.LocalizationValue.FormatArgument.CodableStorage(v85, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
            uint64_t v237 = v86;
            unint64_t v234 = v59 & 0xFFFFFFFFFFFFFF00;
            v235 = (uint64_t (*)(uint64_t))(v86 >> 8);
            unint64_t v233 = v86 & 0xFFFFFFFFFFFF0000;
            char v67 = 1;
            break;
          case 11:
            char v87 = *(uint64_t (**)(uint64_t))v56;
            uint64_t v88 = v203;
            long long v89 = v203[5];
            v269[1] = v203[4];
            long long v270 = v89;
            v271[0] = v203[6];
            *(_OWORD *)((char *)v271 + 10) = *(_OWORD *)((char *)v203 + 106);
            long long v90 = v203[1];
            long long v266 = *v203;
            long long v267 = v90;
            long long v91 = v203[3];
            long long v268 = v203[2];
            v269[0] = v91;
            unint64_t v92 = swift_allocObject();
            long long v93 = v88[5];
            *(_OWORD *)(v92 + 80) = v88[4];
            *(_OWORD *)(v92 + 96) = v93;
            *(_OWORD *)(v92 + 112) = v88[6];
            *(_OWORD *)(v92 + 122) = *(_OWORD *)((char *)v88 + 106);
            long long v94 = v88[1];
            *(_OWORD *)(v92 + 16) = *v88;
            *(_OWORD *)(v92 + 32) = v94;
            long long v95 = v88[3];
            *(_OWORD *)(v92 + 48) = v88[2];
            *(_OWORD *)(v92 + 64) = v95;
            *(void *)(v92 + 144) = v87;
            uint64_t v96 = swift_allocObject();
            long long v97 = v88[5];
            *(_OWORD *)(v96 + 80) = v88[4];
            *(_OWORD *)(v96 + 96) = v97;
            *(_OWORD *)(v96 + 112) = v88[6];
            *(_OWORD *)(v96 + 122) = *(_OWORD *)((char *)v88 + 106);
            long long v98 = v88[1];
            *(_OWORD *)(v96 + 16) = *v88;
            *(_OWORD *)(v96 + 32) = v98;
            long long v99 = v88[3];
            *(_OWORD *)(v96 + 48) = v88[2];
            *(_OWORD *)(v96 + 64) = v99;
            *((void *)&v232 + 1) = v96;
            *(void *)(v96 + 144) = v87;
            uint64_t v100 = (_OWORD *)swift_allocObject();
            long long v101 = v88[5];
            v100[5] = v88[4];
            v100[6] = v101;
            v100[7] = v88[6];
            *(_OWORD *)((char *)v100 + 122) = *(_OWORD *)((char *)v88 + 106);
            long long v102 = v88[1];
            v100[1] = *v88;
            v100[2] = v102;
            long long v103 = v88[3];
            v100[3] = v88[2];
            v100[4] = v103;
            outlined retain of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)&v266, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
            outlined retain of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)&v266, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
            outlined destroy of String.LocalizationValue.FormatArgument.CodableStorage(v59, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
            uint64_t v237 = v92;
            unint64_t v233 = v92 & 0xFFFFFFFFFFFF0000;
            v231 = v87;
            *(void *)&long long v104 = v199;
            *((void *)&v104 + 1) = v100;
            long long v230 = v104;
            unint64_t v105 = partial apply for specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:);
            unint64_t v234 = (unint64_t)partial apply for specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:) & 0xFFFFFFFFFFFFFF00;
            v235 = (uint64_t (*)(uint64_t))(v92 >> 8);
            char v67 = 2;
            *(void *)&long long v232 = partial apply for specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:);
            uint64_t v43 = &type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle;
            goto LABEL_33;
          case 12:
            uint64_t v107 = *(uint64_t (**)(uint64_t))v56;
            uint64_t v106 = *(void *)(v56 + 8);
            uint64_t v108 = *(void *)(v56 + 16);
            uint64_t v229 = *(void *)(v56 + 24);
            uint64_t v109 = v229;
            uint64_t v111 = *(void *)(v56 + 40);
            uint64_t v207 = *(void *)(v56 + 32);
            uint64_t v110 = v207;
            uint64_t v227 = v108;
            uint64_t v228 = v111;
            uint64_t v237 = *(void *)(v56 + 48);
            uint64_t v112 = *(void *)(v56 + 56);
            unsigned __int8 v113 = *(unsigned char *)(v56 + 64);
            LODWORD(v231) = v113;
            uint64_t v211 = *(void *)(v56 + 72);
            uint64_t v212 = v112;
            LODWORD(v112) = *(unsigned __int8 *)(v56 + 80);
            int v209 = *(unsigned __int8 *)(v56 + 81);
            int v210 = v112;
            int v208 = *(unsigned __int8 *)(v56 + 82);
            LODWORD(v234) = *(unsigned __int8 *)(v56 + 83);
            *(void *)&long long v230 = *(void *)(v56 + 88);
            uint64_t v114 = v230;
            LODWORD(v233) = *(unsigned __int8 *)(v56 + 96);
            LODWORD(v232) = *(unsigned __int8 *)(v56 + 97);
            unsigned int v115 = *(unsigned __int8 *)(v56 + 98);
            int v215 = *(unsigned __int8 *)(v56 + 99);
            unsigned int v216 = v115;
            int v116 = *(unsigned __int8 *)(v56 + 100);
            int v206 = *(unsigned __int8 *)(v56 + 101);
            LODWORD(v226) = *(unsigned __int8 *)(v56 + 102);
            int v213 = *(unsigned __int8 *)(v56 + 103);
            int v214 = v116;
            uint64_t v205 = *(void *)(v56 + 104);
            int v217 = *(unsigned __int8 *)(v56 + 112);
            LODWORD(v235) = *(unsigned __int8 *)(v56 + 113);
            LOBYTE(v266) = v232;
            unint64_t v117 = swift_allocObject();
            *(void *)(v117 + 16) = v108;
            *(void *)(v117 + 24) = v109;
            *(void *)(v117 + 32) = v110;
            *(void *)(v117 + 40) = v111;
            uint64_t v118 = v211;
            uint64_t v119 = v212;
            *(void *)(v117 + 48) = v237;
            *(void *)(v117 + 56) = v119;
            *(unsigned char *)(v117 + 64) = v113;
            *(void *)(v117 + 72) = v118;
            LOBYTE(v109) = v209;
            LOBYTE(v108) = v210;
            *(unsigned char *)(v117 + 80) = v210;
            *(unsigned char *)(v117 + 81) = v109;
            char v120 = v208;
            *(unsigned char *)(v117 + 82) = v208;
            *(unsigned char *)(v117 + 83) = v234;
            *(void *)(v117 + 88) = v114;
            *(unsigned char *)(v117 + 96) = v233;
            *(unsigned char *)(v117 + 97) = v266;
            *(unsigned char *)(v117 + 98) = v216;
            *(unsigned char *)(v117 + 99) = v215;
            *(unsigned char *)(v117 + 100) = v214;
            LOBYTE(v110) = v206;
            *(unsigned char *)(v117 + 101) = v206;
            *(unsigned char *)(v117 + 102) = v226;
            *(unsigned char *)(v117 + 103) = v213;
            uint64_t v121 = v205;
            *(void *)(v117 + 104) = v205;
            *(unsigned char *)(v117 + 112) = v217;
            *(unsigned char *)(v117 + 113) = (_BYTE)v235;
            *(void *)(v117 + 120) = v107;
            *(void *)(v117 + 128) = v106;
            LOBYTE(v266) = v232;
            uint64_t v122 = swift_allocObject();
            uint64_t v123 = v229;
            *(void *)(v122 + 16) = v227;
            *(void *)(v122 + 24) = v123;
            uint64_t v124 = v228;
            *(void *)(v122 + 32) = v207;
            *(void *)(v122 + 40) = v124;
            *(void *)(v122 + 48) = v237;
            *(void *)(v122 + 56) = v119;
            *(unsigned char *)(v122 + 64) = (_BYTE)v231;
            *(void *)(v122 + 72) = v118;
            *(unsigned char *)(v122 + 80) = v108;
            *(unsigned char *)(v122 + 81) = v109;
            *(unsigned char *)(v122 + 82) = v120;
            *(unsigned char *)(v122 + 83) = v234;
            *(void *)(v122 + 88) = v230;
            *(unsigned char *)(v122 + 96) = v233;
            *(unsigned char *)(v122 + 97) = v266;
            LOBYTE(v108) = v215;
            uint64_t v58 = v216;
            *(unsigned char *)(v122 + 98) = v216;
            *(unsigned char *)(v122 + 99) = v108;
            char v125 = v214;
            *(unsigned char *)(v122 + 100) = v214;
            *(unsigned char *)(v122 + 101) = v110;
            LOBYTE(v118) = v226;
            *(unsigned char *)(v122 + 102) = v226;
            LOBYTE(v110) = v213;
            *(unsigned char *)(v122 + 103) = v213;
            *(void *)(v122 + 104) = v121;
            LOBYTE(v121) = v217;
            *(unsigned char *)(v122 + 112) = v217;
            *(unsigned char *)(v122 + 113) = (_BYTE)v235;
            *(void *)(v122 + 120) = v107;
            *(void *)(v122 + 128) = v106;
            *((void *)&v232 + 1) = v122;
            uint64_t v204 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Date>);
            uint64_t v56 = swift_allocObject();
            uint64_t v126 = v229;
            *(void *)(v56 + 16) = v227;
            *(void *)(v56 + 24) = v126;
            uint64_t v127 = v228;
            *(void *)(v56 + 32) = v207;
            *(void *)(v56 + 40) = v127;
            uint64_t v128 = v212;
            *(void *)(v56 + 48) = v237;
            *(void *)(v56 + 56) = v128;
            *(unsigned char *)(v56 + 64) = (_BYTE)v231;
            *(void *)(v56 + 72) = v211;
            *(unsigned char *)(v56 + 80) = v210;
            *(unsigned char *)(v56 + 81) = v209;
            *(unsigned char *)(v56 + 82) = v208;
            *(unsigned char *)(v56 + 83) = v234;
            *(void *)(v56 + 88) = v230;
            *(unsigned char *)(v56 + 96) = v233;
            *(unsigned char *)(v56 + 97) = v232;
            *(unsigned char *)(v56 + 98) = v58;
            *(unsigned char *)(v56 + 99) = v108;
            *(unsigned char *)(v56 + 100) = v125;
            *(unsigned char *)(v56 + 101) = v206;
            *(unsigned char *)(v56 + 102) = v118;
            *(unsigned char *)(v56 + 103) = v110;
            *(void *)(v56 + 104) = v205;
            *(unsigned char *)(v56 + 112) = v121;
            *(unsigned char *)(v56 + 113) = (_BYTE)v235;
            char v67 = 2;
            swift_unknownObjectRetain_n();
            swift_unknownObjectRetain_n();
            swift_unknownObjectRetain_n();
            outlined destroy of String.LocalizationValue.FormatArgument.CodableStorage(v260, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
            uint64_t v237 = v117;
            unint64_t v233 = v117 & 0xFFFFFFFFFFFF0000;
            v231 = v107;
            uint64_t v229 = v106;
            *(void *)&long long v129 = v204;
            *((void *)&v129 + 1) = v56;
            long long v230 = v129;
            unint64_t v105 = partial apply for specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:);
            unint64_t v234 = (unint64_t)partial apply for specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:) & 0xFFFFFFFFFFFFFF00;
            v235 = (uint64_t (*)(uint64_t))(v117 >> 8);
            *(void *)&long long v232 = partial apply for specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:);
            uint64_t v43 = &type metadata for Date.IntervalFormatStyle;
LABEL_33:
            LOBYTE(v59) = (_BYTE)v105;
            break;
          case 13:
            uint64_t v237 = *(void *)v56;
            uint64_t v130 = v56
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle))
                          + 48);
            uint64_t v131 = v244;
            v235 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle;
            _sSS10FoundationE17LocalizationValueV14FormatArgumentV07DecimaleD5StyleVWObTm_0(v130, v244, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
            uint64_t v132 = v131;
            uint64_t v133 = v245;
            _sSS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOWOcTm_0(v132, v245, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
            uint64_t v134 = v133;
            uint64_t v135 = v251;
            _sSS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOWOcTm_0(v134, v251, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
            uint64_t v136 = v135;
            uint64_t v137 = v239;
            _sSS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOWOcTm_0(v136, v239, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
            unint64_t v138 = (LOBYTE(v43[5].Kind) + 16) & ~(unint64_t)LOBYTE(v43[5].Kind);
            unint64_t v139 = (v200 + v138) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v140 = swift_allocObject();
            _sSS10FoundationE17LocalizationValueV14FormatArgumentV07DecimaleD5StyleVWObTm_0(v137, v140 + v138, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
            uint64_t v141 = v237;
            *(void *)(v140 + v139) = v237;
            *(void *)&long long v266 = partial apply for specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:);
            *((void *)&v266 + 1) = v140;
            _sSS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOWOcTm_0(v251, v137, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
            uint64_t v142 = swift_allocObject();
            uint64_t v143 = v137;
            uint64_t v144 = v235;
            _sSS10FoundationE17LocalizationValueV14FormatArgumentV07DecimaleD5StyleVWObTm_0(v143, v142 + v138, v235);
            *(void *)(v142 + v139) = v141;
            *(void *)&long long v267 = partial apply for specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:);
            *((void *)&v267 + 1) = v142;
            *((void *)&v269[0] + 1) = MEMORY[0x1E4FBB550];
            *(void *)&long long v268 = v141;
            *((void *)&v270 + 1) = v240;
            char v145 = __swift_allocate_boxed_opaque_existential_1(v218);
            _sSS10FoundationE17LocalizationValueV14FormatArgumentV07DecimaleD5StyleVWObTm_0(v251, (uint64_t)v145, v144);
            long long v274 = v268;
            long long v275 = v269[0];
            long long v276 = v269[1];
            long long v277 = v270;
            long long v272 = v266;
            long long v273 = v267;
            uint64_t v146 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle;
            outlined destroy of String.LocalizationValue.FormatArgument.CodableStorage(v245, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
            char v278 = 2;
            outlined init with take of String.LocalizationValue.FormatArgument.Storage(&v272, (uint64_t)&v266);
            outlined destroy of String.LocalizationValue.FormatArgument.CodableStorage(v260, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
            uint64_t v84 = v244;
            goto LABEL_37;
          case 14:
            uint64_t v147 = *(void *)v56;
            uint64_t v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle));
            uint64_t v149 = v246;
            _sSS10FoundationE17LocalizationValueV14FormatArgumentV07DecimaleD5StyleVWObTm_0(v56 + *(int *)(v148 + 48), v246, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
            uint64_t v150 = v149;
            uint64_t v151 = v247;
            _sSS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOWOcTm_0(v150, v247, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
            uint64_t v152 = v151;
            uint64_t v153 = v252;
            _sSS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOWOcTm_0(v152, v252, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
            uint64_t v154 = v153;
            uint64_t v155 = v241;
            _sSS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOWOcTm_0(v154, v241, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
            unint64_t v156 = (*(unsigned __int8 *)(v61 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
            unint64_t v157 = (unint64_t)&v201[v156] & 0xFFFFFFFFFFFFFFF8;
            uint64_t v158 = swift_allocObject();
            _sSS10FoundationE17LocalizationValueV14FormatArgumentV07DecimaleD5StyleVWObTm_0(v155, v158 + v156, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
            *(void *)(v158 + v157) = v147;
            *(void *)&long long v266 = partial apply for specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:);
            *((void *)&v266 + 1) = v158;
            _sSS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOWOcTm_0(v252, v155, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
            uint64_t v159 = swift_allocObject();
            _sSS10FoundationE17LocalizationValueV14FormatArgumentV07DecimaleD5StyleVWObTm_0(v155, v159 + v156, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
            *(void *)(v159 + v157) = v147;
            *(void *)&long long v267 = partial apply for specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:);
            *((void *)&v267 + 1) = v159;
            *(void *)&long long v268 = v147;
            *((void *)&v269[0] + 1) = MEMORY[0x1E4FBB3D0];
            *((void *)&v270 + 1) = v242;
            int64_t v160 = __swift_allocate_boxed_opaque_existential_1(v218);
            _sSS10FoundationE17LocalizationValueV14FormatArgumentV07DecimaleD5StyleVWObTm_0(v252, (uint64_t)v160, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
            long long v274 = v268;
            long long v275 = v269[0];
            long long v276 = v269[1];
            long long v277 = v270;
            long long v272 = v266;
            long long v273 = v267;
            uint64_t v146 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle;
            outlined destroy of String.LocalizationValue.FormatArgument.CodableStorage(v247, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
            char v278 = 2;
            outlined init with take of String.LocalizationValue.FormatArgument.Storage(&v272, (uint64_t)&v266);
            outlined destroy of String.LocalizationValue.FormatArgument.CodableStorage(v260, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
            uint64_t v84 = v246;
            goto LABEL_37;
          case 15:
            LODWORD(v237) = *(_DWORD *)v56;
            unsigned __int16 v161 = *(_WORD *)(v56 + 4);
            LODWORD(v227) = v161;
            LODWORD(v229) = *(unsigned __int16 *)(v56 + 6);
            LODWORD(v234) = *(unsigned __int16 *)(v56 + 8);
            LODWORD(v233) = *(unsigned __int16 *)(v56 + 10);
            DWORD2(v232) = *(unsigned __int16 *)(v56 + 12);
            LODWORD(v230) = *(unsigned __int16 *)(v56 + 14);
            LODWORD(v235) = *(unsigned __int16 *)(v56 + 16);
            LODWORD(v232) = *(unsigned __int16 *)(v56 + 18);
            uint64_t v162 = v56
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle))
                          + 48);
            uint64_t v163 = v248;
            v231 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle;
            _sSS10FoundationE17LocalizationValueV14FormatArgumentV07DecimaleD5StyleVWObTm_0(v162, v248, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
            uint64_t v164 = v163;
            uint64_t v165 = v249;
            _sSS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOWOcTm_0(v164, v249, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
            uint64_t v166 = v165;
            uint64_t v167 = v253;
            _sSS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOWOcTm_0(v166, v253, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
            _sSS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOWOcTm_0(v167, v52, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
            uint64_t v168 = *(unsigned __int8 *)(v51 + 80);
            uint64_t v169 = v52;
            uint64_t v170 = (v168 + 16) & ~v168;
            uint64_t v228 = v168 | 7;
            unint64_t v171 = (v202 + v170) & 0xFFFFFFFFFFFFFFFCLL;
            uint64_t v172 = swift_allocObject();
            _sSS10FoundationE17LocalizationValueV14FormatArgumentV07DecimaleD5StyleVWObTm_0(v169, v172 + v170, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
            unint64_t v173 = v172 + v171;
            *(_DWORD *)unint64_t v173 = v237;
            *(_WORD *)(v173 + 4) = v161;
            __int16 v174 = v229;
            *(_WORD *)(v173 + 6) = v229;
            *(_WORD *)(v173 + 8) = v234;
            *(_WORD *)(v173 + 10) = v233;
            *(_WORD *)(v173 + 12) = WORD4(v232);
            __int16 v175 = v230;
            *(_WORD *)(v173 + 14) = v230;
            *(_WORD *)(v173 + 16) = (_WORD)v235;
            *(_WORD *)(v173 + 18) = v232;
            *(void *)&long long v266 = partial apply for specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:);
            *((void *)&v266 + 1) = v172;
            _sSS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOWOcTm_0(v253, v169, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
            uint64_t v176 = swift_allocObject();
            _sSS10FoundationE17LocalizationValueV14FormatArgumentV07DecimaleD5StyleVWObTm_0(v169, v176 + v170, v231);
            unint64_t v177 = v176 + v171;
            *(_DWORD *)unint64_t v177 = v237;
            __int16 v178 = v227;
            *(_WORD *)(v177 + 4) = v227;
            *(_WORD *)(v177 + 6) = v174;
            LOWORD(v172) = v234;
            *(_WORD *)(v177 + 8) = v234;
            LOWORD(v170) = v233;
            *(_WORD *)(v177 + 10) = v233;
            LOWORD(v171) = WORD4(v232);
            *(_WORD *)(v177 + 12) = WORD4(v232);
            *(_WORD *)(v177 + 14) = v175;
            LOWORD(v169) = (_WORD)v235;
            *(_WORD *)(v177 + 16) = (_WORD)v235;
            __int16 v179 = v232;
            *(_WORD *)(v177 + 18) = v232;
            *(void *)&long long v267 = partial apply for specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:);
            *((void *)&v267 + 1) = v176;
            type metadata accessor for NSDecimal(0);
            LODWORD(v268) = v237;
            WORD2(v268) = v178;
            WORD3(v268) = v174;
            WORD4(v268) = v172;
            WORD5(v268) = v170;
            WORD6(v268) = v171;
            HIWORD(v268) = v230;
            LOWORD(v269[0]) = v169;
            WORD1(v269[0]) = v179;
            *((void *)&v269[0] + 1) = v180;
            *((void *)&v270 + 1) = v243;
            uint64_t v181 = __swift_allocate_boxed_opaque_existential_1(v218);
            _sSS10FoundationE17LocalizationValueV14FormatArgumentV07DecimaleD5StyleVWObTm_0(v253, (uint64_t)v181, v231);
            long long v274 = v268;
            long long v275 = v269[0];
            long long v276 = v269[1];
            long long v277 = v270;
            long long v272 = v266;
            long long v273 = v267;
            uint64_t v146 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle;
            outlined destroy of String.LocalizationValue.FormatArgument.CodableStorage(v249, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
            char v278 = 2;
            outlined init with take of String.LocalizationValue.FormatArgument.Storage(&v272, (uint64_t)&v266);
            outlined destroy of String.LocalizationValue.FormatArgument.CodableStorage(v260, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
            uint64_t v84 = v248;
LABEL_37:
            uint64_t v83 = v146;
LABEL_38:
            outlined destroy of String.LocalizationValue.FormatArgument.CodableStorage(v84, v83);
            LOBYTE(v59) = v266;
            uint64_t v237 = BYTE8(v266);
            unint64_t v234 = v266 & 0xFFFFFFFFFFFFFF00;
            v235 = (uint64_t (*)(uint64_t))(*((void *)&v266 + 1) >> 8);
            unint64_t v233 = *((void *)&v266 + 1) & 0xFFFFFFFFFFFF0000;
            v231 = (uint64_t (*)(uint64_t))v268;
            long long v232 = v267;
            uint64_t v228 = *(void *)&v269[0];
            uint64_t v229 = *((void *)&v268 + 1);
            long long v230 = *(_OWORD *)((char *)v269 + 8);
            uint64_t v226 = v270;
            uint64_t v227 = *((void *)&v269[1] + 1);
            uint64_t v43 = (ValueMetadata *)*((void *)&v270 + 1);
            uint64_t v56 = *((void *)&v271[0] + 1);
            uint64_t v58 = *(void *)&v271[0];
            char v67 = v271[1];
            break;
          case 16:
            uint64_t v195 = v59;
            uint64_t v59 = *(void *)v56;
            uint64_t v237 = *(unsigned __int8 *)(v56 + 8);
            v235 = (uint64_t (*)(uint64_t))*(unsigned __int8 *)(v56 + 9);
            uint64_t v196 = *(void *)(v56 + 24);
            *(void *)&long long v232 = *(void *)(v56 + 16);
            *((void *)&v232 + 1) = v196;
            outlined destroy of String.LocalizationValue.FormatArgument.CodableStorage(v195, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
            unint64_t v233 = 0;
            unint64_t v234 = v59 & 0xFFFFFFFFFFFFFF00;
            char v67 = 5;
            break;
          case 17:
            uint64_t v197 = v59;
            LOBYTE(v59) = *(unsigned char *)v56;
            outlined destroy of String.LocalizationValue.FormatArgument.CodableStorage(v197, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
            uint64_t v237 = 0;
            unint64_t v234 = 0;
            v235 = 0;
            unint64_t v233 = 0;
            char v67 = 6;
            break;
          default:
            uint64_t v62 = v59;
            uint64_t v59 = *(void *)v56;
            unint64_t v63 = *(void *)(v56 + 8);
            uint64_t v64 = *(void *)(v56 + 24);
            *(void *)&long long v232 = *(void *)(v56 + 16);
            *((void *)&v232 + 1) = v64;
            v231 = *(uint64_t (**)(uint64_t))(v56 + 32);
            uint64_t v65 = *(void *)(v56 + 40);
            uint64_t v228 = *(void *)(v56 + 48);
            uint64_t v229 = v65;
            long long v230 = *(_OWORD *)(v56 + 56);
            uint64_t v66 = *(void *)(v56 + 72);
            uint64_t v43 = *(ValueMetadata **)(v56 + 88);
            uint64_t v226 = *(void *)(v56 + 80);
            uint64_t v227 = v66;
            uint64_t v58 = *(void *)(v56 + 96);
            uint64_t v56 = *(void *)(v56 + 104);
            outlined destroy of String.LocalizationValue.FormatArgument.CodableStorage(v62, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
            uint64_t v237 = v63;
            unint64_t v234 = v59 & 0xFFFFFFFFFFFFFF00;
            v235 = (uint64_t (*)(uint64_t))(v63 >> 8);
            unint64_t v233 = v63 & 0xFFFFFFFFFFFF0000;
            char v67 = 4;
            break;
        }
        outlined destroy of String.LocalizationValue.FormatArgument.CodableStorage(v262, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
        uint64_t v47 = v279;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v47 + 16) + 1, 1);
          uint64_t v47 = v279;
        }
        unint64_t v183 = *(void *)(v47 + 16);
        unint64_t v182 = *(void *)(v47 + 24);
        uint64_t v184 = *((void *)&v232 + 1);
        uint64_t v185 = v232;
        char v186 = v231;
        uint64_t v188 = v228;
        uint64_t v187 = v229;
        long long v189 = v230;
        uint64_t v191 = v226;
        uint64_t v190 = v227;
        uint64_t v192 = v58;
        if (v183 >= v182 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v182 > 1, v183 + 1, 1);
          uint64_t v192 = v58;
          uint64_t v191 = v226;
          uint64_t v190 = v227;
          long long v189 = v230;
          uint64_t v188 = v228;
          uint64_t v187 = v229;
          char v186 = v231;
          uint64_t v184 = *((void *)&v232 + 1);
          uint64_t v185 = v232;
          uint64_t v47 = v279;
        }
        *(void *)(v47 + 16) = v183 + 1;
        unint64_t v193 = v233 | v237 | ((unint64_t)v235 << 8);
        uint64_t v194 = v47 + 120 * v183;
        *(void *)(v194 + 32) = v234 | v59;
        *(void *)(v194 + 40) = v193;
        *(void *)(v194 + 48) = v185;
        *(void *)(v194 + 56) = v184;
        *(void *)(v194 + 64) = v186;
        *(void *)(v194 + 72) = v187;
        *(void *)(v194 + 80) = v188;
        *(_OWORD *)(v194 + 88) = v189;
        *(void *)(v194 + 104) = v190;
        *(void *)(v194 + 112) = v191;
        *(void *)(v194 + 120) = v43;
        *(void *)(v194 + 128) = v192;
        *(void *)(v194 + 136) = v56;
        uint64_t v55 = v238 + v225;
        *(unsigned char *)(v194 + 144) = v67;
        --v280;
        uint64_t v52 = (uint64_t)v258;
        uint64_t v51 = v259;
        uint64_t v56 = (uint64_t)v256;
        uint64_t v43 = v257;
      }
      while (v280);
      uint64_t v30 = v219;
      uint64_t v48 = v261;
      uint64_t v37 = v221;
    }
    else
    {
      uint64_t v48 = v261;
      uint64_t v37 = v221;
    }
    uint64_t v35 = v223;
    uint64_t v32 = v224;
    goto LABEL_49;
  }
  (*(void (**)(char *, uint64_t))(v261 + 8))(v49, v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v236);
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for String.LocalizationValue.FormatArgument.CodableStorage);
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [String.LocalizationValue.FormatArgument.CodableStorage] and conformance <A> [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String.LocalizationValue.FormatArgument.CodableStorage]);
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage and conformance String.LocalizationValue.FormatArgument.CodableStorage(a2, (void (*)(uint64_t))type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
}

uint64_t type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, type metadata singleton initialization cache for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
}

uint64_t type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, type metadata accessor for ICUNumberFormatter.Signature, type metadata accessor for ICUNumberFormatter.Signature, type metadata accessor for ICUNumberFormatter.Signature);
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, type metadata accessor for ICUPercentNumberFormatter.Signature, type metadata accessor for ICUPercentNumberFormatter.Signature, type metadata accessor for ICUPercentNumberFormatter.Signature);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::UInt64 v11;
  Swift::UInt64 v12;
  int v13;
  Swift::UInt v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  Swift::UInt v18;
  int *v19;
  uint64_t v20;
  int v21;
  Swift::UInt v22;
  Swift::UInt64 v23;
  Swift::UInt v24;
  uint64_t v25;
  Swift::UInt8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  Swift::UInt v53;
  Swift::UInt v54;
  Swift::UInt8 v55;
  Swift::UInt8 v56;
  Swift::UInt8 v57;
  Swift::Int v58;
  void v60[2];
  unsigned char v61[144];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  char v78;
  char v79;
  unsigned char v80[144];
  unsigned char v81[144];
  unsigned char v82[72];
  unsigned char v83[72];

  Swift::UInt v2 = v1;
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v11 = *(void *)a1;
    Hasher._combine(_:)(1u);
    if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    Hasher._combine(_:)(v12);
  }
  outlined init with take of LocalePreferences?(a1 + 16, (uint64_t)v83, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  uint64_t v13 = *(unsigned __int8 *)(a1 + 73);
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v14 = v13 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }
  uint64_t v15 = *(unsigned int *)(a1 + 74);
  if (*(_DWORD *)(a1 + 74) == 2)
  {
    LOBYTE(v16) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15 & 1);
    Hasher._combine(_:)((v15 >> 8) & 1);
    Hasher._combine(_:)(WORD1(v15) & 1);
    uint64_t v16 = BYTE3(v15) & 1;
  }
  Hasher._combine(_:)(v16);
  uint64_t v17 = *(unsigned __int8 *)(a1 + 78);
  if (v17 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    unint64_t v18 = v17 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
  }
  uint64_t v19 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  outlined init with copy of FloatingPointRoundingRule?(a1 + v19[9], (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v20 = a1 + v19[10];
  uint64_t v21 = *(unsigned __int8 *)(v20 + 8);
  if (v21 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v22 = *(void *)v20;
    Hasher._combine(_:)(1u);
    if (v21)
    {
      Hasher._combine(_:)(1uLL);
      if ((v22 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      Hasher._combine(_:)(v23);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v22);
    }
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(a1 + v19[11]));
  uint64_t v24 = *(unsigned __int8 *)(a1 + v19[12]);
  if (v24 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v24);
  }
  uint64_t v25 = type metadata accessor for ICUCurrencyNumberFormatter.Signature(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(a1 + *(int *)(v25 + 28), (uint64_t)v80, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v80, (uint64_t)v81, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v81) == 1)
  {
    Hasher._combine(_:)(0);
    goto LABEL_84;
  }
  outlined init with take of LocalePreferences?((uint64_t)v80, (uint64_t)&v62, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v62 == 2)
  {
    uint64_t v26 = 0;
  }
  else
  {
    uint64_t v26 = v62 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v26);
  uint64_t v27 = v63;
  if (!v63)
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v62);
    uint64_t v31 = &v62;
    goto LABEL_45;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v27 + 16));
  uint64_t v28 = *(void *)(v27 + 16);
  if (!v28)
  {
    outlined init with take of LocalePreferences?((uint64_t)v80, (uint64_t)v61, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v80, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    uint64_t v31 = (uint64_t *)v61;
LABEL_45:
    outlined retain of LocalePreferences(v31);
    if (!v64) {
      goto LABEL_40;
    }
    goto LABEL_46;
  }
  outlined retain of LocalePreferences?((uint64_t)v80, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v80, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v29 = v27 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v29 += 16;
    --v28;
  }
  while (v28);
  swift_bridgeObjectRelease();
  if (!v64)
  {
LABEL_40:
    Hasher._combine(_:)(0);
    if (!v65) {
      goto LABEL_41;
    }
LABEL_47:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v30 = v66;
    if (!v66) {
      goto LABEL_42;
    }
    goto LABEL_48;
  }
LABEL_46:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v65) {
    goto LABEL_47;
  }
LABEL_41:
  Hasher._combine(_:)(0);
  uint64_t v30 = v66;
  if (!v66)
  {
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_49;
  }
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v82, v30);
  swift_bridgeObjectRelease();
LABEL_49:
  uint64_t v32 = v67;
  v60[1] = v2;
  if (v67)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v82, v32);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  BOOL v34 = v68;
  int64_t v33 = v69;
  uint64_t v36 = v70;
  uint64_t v35 = v71;
  uint64_t v37 = v72;
  if (v68)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v38 = v33;
    uint64_t v39 = v36;
    uint64_t v40 = v35;
    int v41 = v37;
    unint64_t v42 = v34;
    _CFObject.hash(into:)();
    if (v33) {
      goto LABEL_54;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v47 = v37;
    uint64_t v48 = v33;
    uint64_t v49 = v36;
    int64_t v50 = v35;
    if (v33)
    {
LABEL_54:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v43 = v33;
      _CFObject.hash(into:)();

      if (v36) {
        goto LABEL_55;
      }
      goto LABEL_60;
    }
  }
  Hasher._combine(_:)(0);
  if (v36)
  {
LABEL_55:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v44 = v36;
    _CFObject.hash(into:)();

    if (v35) {
      goto LABEL_56;
    }
LABEL_61:
    Hasher._combine(_:)(0);
    if (v37) {
      goto LABEL_57;
    }
    goto LABEL_62;
  }
LABEL_60:
  Hasher._combine(_:)(0);
  if (!v35) {
    goto LABEL_61;
  }
LABEL_56:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v45 = v35;
  _CFObject.hash(into:)();

  if (v37)
  {
LABEL_57:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    Swift::String v46 = v37;
    _CFObject.hash(into:)();

    goto LABEL_63;
  }
LABEL_62:
  Hasher._combine(_:)(0);
  Swift::String v46 = 0;
LABEL_63:

  uint64_t v51 = v73;
  if (v51)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v82, v51);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v52 = v74;
  if (!v74)
  {
    Hasher._combine(_:)(0);
    if (v75) {
      goto LABEL_68;
    }
LABEL_70:
    Hasher._combine(_:)(0);
    goto LABEL_71;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v82, v52);
  swift_bridgeObjectRelease();
  if (!v75) {
    goto LABEL_70;
  }
LABEL_68:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_71:
  if (v76 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v53 = v76 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v53);
  }
  if (v77 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    int64_t v54 = v77 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v54);
  }
  if (v78 == 2)
  {
    uint64_t v55 = 0;
  }
  else
  {
    uint64_t v55 = v78 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v55);
  if (v79 == 2)
  {
    uint64_t v56 = 0;
  }
  else
  {
    long long v57 = v79 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v56 = v57;
  }
  Hasher._combine(_:)(v56);
  outlined retain of LocalePreferences?((uint64_t)v80, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v80, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_84:
  uint64_t v58 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v58);
}

uint64_t type metadata accessor for IntegerFormatStyle()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for IntegerParseStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (unsigned __int16 *)((a1 + (v7 | 7) + v4 + 1) & ~(v7 | 7));
  uint64_t v9 = (v7 + 78) & ~v7;
  if (*(_DWORD *)(v6 + 84)) {
    uint64_t v10 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v10 = *(void *)(v6 + 64) + 1;
  }
  unint64_t v11 = ((v10 + 7 + v9) & 0xFFFFFFFFFFFFFFF8) + 10;
  unint64_t v12 = ((v10 + 7 + ((v7 + 79) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 11;
  if (v12 <= v11) {
    unint64_t v13 = ((v10 + 7 + v9) & 0xFFFFFFFFFFFFFFF8) + 10;
  }
  else {
    unint64_t v13 = ((v10 + 7 + ((v7 + 79) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 11;
  }
  unsigned int v14 = *((unsigned __int8 *)v8 + v13);
  unsigned int v15 = v14 - 4;
  if (v14 >= 4)
  {
    if (v13 <= 3) {
      int v16 = v13;
    }
    else {
      int v16 = 4;
    }
    switch(v16)
    {
      case 2:
        int v17 = *v8;
        break;
      case 3:
        int v17 = *v8 | (*((unsigned __int8 *)v8 + 2) << 16);
        break;
      case 4:
        int v17 = *(_DWORD *)v8;
        break;
      default:
        int v17 = *(unsigned __int8 *)v8;
        break;
    }
    int v18 = (v17 | (v15 << (8 * v13))) + 4;
    unsigned int v14 = v17 + 4;
    if (v13 < 4) {
      unsigned int v14 = v18;
    }
  }
  uint64_t v19 = ~v7;
  switch(v14)
  {
    case 2u:
      uint64_t v20 = (uint64_t)v8 + v7 + 79;
      goto LABEL_21;
    case 3u:
      break;
    default:
      uint64_t v20 = (uint64_t)v8 + v7 + 78;
LABEL_21:
      uint64_t v21 = v20 & v19;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v20 & v19, 1, v5)) {
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v21, v5);
      }
      break;
  }

  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for IntegerParseStrategy()
{
  return __swift_instantiateGenericMetadata();
}

double _NSXPCSerializationFloatForObject(void *a1, unint64_t *a2)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *a2;
  if (!*a2) {
    return 0.0;
  }
  int v5 = 0;
  int FloatAtMarker = _getFloatAtMarker(a1, &v5, v2, v6);
  LODWORD(result) = v5;
  if (!FloatAtMarker) {
    *(float *)&double result = 0.0;
  }
  return result;
}

uint64_t _getFloatAtMarker(void *a1, _DWORD *a2, unint64_t a3, void *a4)
{
  if (a1[1] <= a3 || *(unsigned char *)(*a1 + a3) != 34) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = a3 >= 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v6 = v5 << 63 >> 63;
  *a4 = a3 + 4;
  if (v6 == v5 && (v6 & 0x8000000000000000) == 0)
  {
    if (a1[1] > a3 + 4)
    {
      *a2 = *(_DWORD *)(a3 + *a1 + 1);
      return 1;
    }
    return 0;
  }
  return v4;
}

uint64_t NSData.startIndex.getter()
{
  return 0;
}

uint64_t dispatch thunk of JSONEncoder.dateEncodingStrategy.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of JSONEncoder.userInfo.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t PredicateExpressions.Equal<>.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t Predicate.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  char v120 = (uint64_t *)(8 * v4);
  uint64_t v121 = a2;
  if (v4 == 1)
  {
    uint64_t v5 = a2;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    if (v4)
    {
      unint64_t v8 = *(void *)(v121 + 24) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v9 = (uint64_t *)((char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v10 = v4;
      do
      {
        v8 += 8;
        *v9++ = swift_getMetatypeMetadata();
        --v10;
      }
      while (v10);
    }
    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v5 = v121;
  }
  uint64_t v109 = &v99;
  uint64_t v101 = MetatypeMetadata;
  MEMORY[0x1F4188790](MetatypeMetadata);
  unint64_t v12 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressionCodingKeys>);
  uint64_t v108 = &v99;
  uint64_t v115 = v13;
  uint64_t v107 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v119 = (char *)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = v2;
  if (v4 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
  }
  else
  {
    MEMORY[0x1F4188790](v14);
    if (v4)
    {
      unint64_t v18 = *(void *)(v121 + 24) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v19 = (uint64_t *)((char *)&v99 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v20 = v4;
      do
      {
        v18 += 8;
        *v19++ = type metadata accessor for PredicateExpressions.Variable();
        --v20;
      }
      while (v20);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v5 = v121;
  }
  uint64_t v106 = &v99;
  uint64_t v118 = (void *)TupleTypeMetadata;
  uint64_t v110 = *(void *)(TupleTypeMetadata - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata);
  uint64_t v22 = (char *)&v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v105 = &v99;
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v99 - v24;
  long long v104 = &v99;
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v99 - v27;
  if (one-time initialization token for predicateArchivingState != -1) {
    swift_once();
  }
  uint64_t v29 = pthread_getspecific(static _ThreadLocal.Key<A>.predicateArchivingState);
  if (v29)
  {
    LODWORD(v111) = 0;
    uint64_t v30 = (uint64_t *)(*v29 + 16);
    uint64_t v31 = (uint64_t *)(*v29 + 24);
  }
  else
  {
    if (one-time initialization token for standardConfiguration != -1) {
      swift_once();
    }
    uint64_t v30 = &static PredicateCodableConfiguration.standardConfiguration;
    uint64_t v31 = &qword_1E8ED4730;
    LODWORD(v111) = byte_1E8ED4738;
  }
  uint64_t v32 = *v31;
  uint64_t v117 = *v30;
  swift_bridgeObjectRetain();
  uint64_t v116 = v32;
  swift_bridgeObjectRetain();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  uint64_t v33 = v112;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v112, (uint64_t)&v129);
  uint64_t v100 = v131;
  uint64_t v113 = v130;
  uint64_t v114 = __swift_project_boxed_opaque_existential_1(&v129, v130);
  long long v103 = &v99;
  double v34 = MEMORY[0x1F4188790](v114);
  unint64_t v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v37 = (void **)((char *)&v99 - v36);
  (*(void (**)(char *, uint64_t, void *, double))(v110 + 16))(v25, v33 + *(int *)(v5 + 36), v118, v34);
  if (v4)
  {
    uint64_t v38 = (int *)(v118 + 4);
    uint64_t v39 = (char **)((char *)&v99 - v36);
    uint64_t v40 = v4;
    do
    {
      if (v4 == 1)
      {
        LODWORD(v41) = 0;
        unint64_t v42 = v28;
      }
      else
      {
        uint64_t v41 = *v38;
        unint64_t v42 = &v28[v41];
      }
      *(void *)unint64_t v42 = *(void *)&v25[(int)v41];
      *v39++ = v42;
      v38 += 4;
      --v40;
    }
    while (v40);
  }
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v132, v133);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  uint64_t v43 = dispatch thunk of UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)();
  MEMORY[0x1F4188790](v43);
  uint64_t v44 = (uint64_t **)((char *)&v99 - v36);
  uint64_t v45 = v117;
  unint64_t v46 = v116;
  if (v4)
  {
    uint64_t v47 = (int *)(v118 + 4);
    uint64_t v48 = v44;
    uint64_t v49 = v4;
    do
    {
      if (v4 == 1) {
        int v50 = 0;
      }
      else {
        int v50 = *v47;
      }
      uint64_t v51 = *v37++;
      *(void *)&v22[v50] = *v51;
      *v48++ = (uint64_t *)&v22[v50];
      v47 += 4;
      --v49;
    }
    while (v49);
  }
  uint64_t v126 = v45;
  unint64_t v127 = v46;
  unsigned __int8 v128 = v111;
  MEMORY[0x1F4188790](v45);
  uint64_t v53 = (char *)&v99 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = v121;
  if (v4)
  {
    uint64_t v55 = (uint64_t *)(*(void *)(v121 + 24) & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v56 = (int *)(v101 + 32);
    long long v57 = v53;
    uint64_t v58 = v4;
    do
    {
      if (v4 == 1) {
        int v59 = 0;
      }
      else {
        int v59 = *v56;
      }
      uint64_t v60 = *v55++;
      *(void *)&v12[v59] = v60;
      *v57++ = &v12[v59];
      v56 += 4;
      --v58;
    }
    while (v58);
  }
  uint64_t v61 = *(void *)(v54 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v53, v4, v61);
  uint64_t v62 = v113;
  uint64_t v125 = v113;
  unint64_t v63 = __swift_allocate_boxed_opaque_existential_1(&v122);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v62 - 8) + 16))(v63, v114, v62);
  __swift_project_boxed_opaque_existential_1(&v122, v125);
  DynamicType = (uint64_t *)swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v122);
  uint64_t v65 = v126;
  uint64_t v66 = v127;
  uint64_t v122 = v126;
  unint64_t v123 = v127;
  LODWORD(v121) = v128;
  unsigned __int8 v124 = v128;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v67 = PredicateCodableConfiguration._identifier(for:)(DynamicType);
  uint64_t v118 = &v99;
  if (!v68)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v81 = _typeName(_:qualified:)();
    uint64_t v83 = v82;
    uint64_t v122 = 47;
    unint64_t v123 = 0xE100000000000000;
    uint64_t v134 = MEMORY[0x1E4FBC860];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    v84._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v84);
    swift_bridgeObjectRelease();
    uint64_t v85 = v122;
    unint64_t v86 = v123;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(void *)uint64_t v87 = v81;
    *(void *)(v87 + 8) = v83;
    *(void *)(v87 + 16) = v85;
    *(void *)(v87 + 24) = v86;
    *(unsigned char *)(v87 + 32) = 0;
    swift_willThrow();
    goto LABEL_43;
  }
  uint64_t v70 = v68;
  char v120 = v67;
  if (v69)
  {
    uint64_t v110 = v68;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v101 = MEMORY[0x1E4FBC860];
    uint64_t v80 = v102;
  }
  else
  {
    uint64_t v71 = Type.genericArguments2.getter();
    uint64_t v73 = v72;
    uint64_t v75 = v74;
    swift_bridgeObjectRetain();
    LOBYTE(v98) = 0;
    uint64_t v76 = v71;
    uint64_t v77 = v102;
    uint64_t v78 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n(v76, v73, v75, v65, v66, v121, MEMORY[0x1E4FBC860], (uint64_t)v120, v70);
    uint64_t v79 = v70;
    uint64_t v80 = v77;
    if (v77)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_43:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_44:
      uint64_t v88 = v107;
      long long v89 = v119;
LABEL_53:
      (*(void (**)(char *, uint64_t))(v88 + 8))(v89, v115);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v129);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v132);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    uint64_t v101 = v78;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v110 = v79;
    swift_bridgeObjectRelease();
  }
  uint64_t v111 = v66;
  uint64_t v112 = v65;
  LOBYTE(v134) = 0;
  uint64_t v90 = KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  uint64_t v99 = v61;
  if (v4)
  {
    unint64_t v91 = v61 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v92 = v4;
    while (1)
    {
      uint64_t v134 = **v44;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v122, v125);
      type metadata accessor for PredicateExpressions.Variable();
      swift_getWitnessTable();
      uint64_t v90 = dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (v80) {
        break;
      }
      ++v44;
      v91 += 8;
      if (!--v92) {
        goto LABEL_51;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v122);
    goto LABEL_44;
  }
LABEL_51:
  MEMORY[0x1F4188790](v90);
  uint64_t v93 = v113;
  *(&v99 - 10) = v4;
  *(&v99 - 9) = v93;
  *(&v99 - 8) = v99;
  uint64_t v94 = v100;
  *(&v99 - 7) = *(void *)(v100 + 8);
  long long v89 = v119;
  *(&v99 - 6) = *(void *)(v94 + 24);
  *(&v99 - 5) = (uint64_t)v89;
  uint64_t v95 = v110;
  *(&v99 - 4) = (uint64_t)v120;
  *(&v99 - 3) = v95;
  uint64_t v97 = v101;
  long long v98 = v114;
  specialized _withPredicateArchivingState<A>(_:_:)(v112, v111, v121, (void (*)(uint64_t))partial apply for closure #1 in KeyedEncodingContainer<>._encode<A, B>(_:variable:predicateConfiguration:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v122);
  if (v80)
  {
    uint64_t v88 = v107;
    goto LABEL_53;
  }
  (*(void (**)(char *, uint64_t))(v107 + 8))(v89, v115);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v129);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v132);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t destroy for _JSONKeyedEncodingContainer()
{
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t protocol witness for Encoder.unkeyedContainer() in conformance __JSONEncoder@<X0>(void *a1@<X8>)
{
  return __JSONEncoder.unkeyedContainer()(a1);
}

uint64_t __JSONEncoder.unkeyedContainer()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + 2;
  if ((*(uint64_t (**)(void))(*v1 + 208))())
  {
    type metadata accessor for JSONReference();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = MEMORY[0x1E4FBC860];
    *(void *)(v5 + 24) = 0;
    *(unsigned char *)(v5 + 32) = 3;
    uint64_t v6 = swift_retain();
    MEMORY[0x185302590](v6);
    if (*(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    goto LABEL_13;
  }
  uint64_t v7 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_7;
    }
LABEL_17:
    unint64_t v9 = swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  if (!v8) {
    goto LABEL_17;
  }
LABEL_7:
  unint64_t v9 = v8 - 1;
  if (__OFSUB__(v8, 1))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if ((v7 & 0xC000000000000001) == 0)
  {
    if ((v9 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v9 < *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v5 = *(void *)(v7 + 8 * v9 + 32);
      swift_retain();
      goto LABEL_12;
    }
    __break(1u);
    goto LABEL_22;
  }
LABEL_19:
  uint64_t v5 = MEMORY[0x185303120](v9, v7);
LABEL_12:
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v5 + 32) != 3)
  {
LABEL_22:
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
LABEL_13:
  uint64_t v10 = v2[18];
  a1[3] = &unk_1ECA41F28;
  a1[4] = lazy protocol witness table accessor for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer();
  *a1 = v2;
  a1[1] = v5;
  a1[2] = v10;
  swift_retain();

  return swift_retain();
}

unint64_t lazy protocol witness table accessor for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer()
{
  unint64_t result = lazy protocol witness table cache variable for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer;
  if (!lazy protocol witness table cache variable for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ExpressionStructure.Argument(void *a1)
{
  return ExpressionStructure.Argument.encode(to:)(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t ExpressionStructure.Argument.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ExpressionStructure]);
    lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A](&lazy protocol witness table cache variable for type [ExpressionStructure] and conformance <A> [A], &demangling cache variable for type metadata for [ExpressionStructure], (void (*)(void))lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
  }
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

unint64_t lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure()
{
  unint64_t result = lazy protocol witness table cache variable for type ExpressionStructure and conformance ExpressionStructure;
  if (!lazy protocol witness table cache variable for type ExpressionStructure and conformance ExpressionStructure)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpressionStructure and conformance ExpressionStructure);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExpressionStructure and conformance ExpressionStructure;
  if (!lazy protocol witness table cache variable for type ExpressionStructure and conformance ExpressionStructure)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpressionStructure and conformance ExpressionStructure);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance UUID(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  UUID.uuidString.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Encoder.singleValueContainer() in conformance __PlistEncoderBPlist@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3] = type metadata accessor for __PlistEncoderBPlist();
  a1[4] = lazy protocol witness table accessor for type _BPlistEncodingFormat.Reference and conformance _BPlistEncodingFormat.Reference(&lazy protocol witness table cache variable for type __PlistEncoderBPlist and conformance __PlistEncoderBPlist, v4, (void (*)(uint64_t))type metadata accessor for __PlistEncoderBPlist);
  *a1 = v3;

  return swift_retain();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance UUID()
{
  return UUID.uuidString.getter();
}

uint64_t UUID.uuidString.getter()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  memset(out, 0, 37);
  long long v2 = *v0;
  _foundation_uuid_unparse_upper((const unsigned __int8 *)&v2, out);
  return String.init(cString:)();
}

uint64_t specialized __JSONEncoder.wrap<A>(_:for:_:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, double a6)
{
  uint64_t v8 = v7;
  unint64_t v9 = (void *)v6;
  uint64_t v11 = *(uint64_t **)(v6 + 32);
  uint64_t v12 = *(void *)(v6 + 40);
  int v13 = *(unsigned __int8 *)(v6 + 48);
  if (!*(unsigned char *)(v6 + 48))
  {
    id v23 = objc_allocWithZone(MEMORY[0x1E4F1C9C8]);
    uint64_t v24 = v11;
    id v25 = objc_msgSend(v23, sel_initWithTimeIntervalSinceReferenceDate_, a6);
    id v26 = objc_msgSend(v24, sel_stringFromDate_, v25);

    id v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    uint64_t v29 = v28;
    outlined consume of JSONEncoder.DateEncodingStrategy(v11, v12, 0);

    type metadata accessor for JSONReference();
    unint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v27;
    *(void *)(v14 + 24) = v29;
    *(unsigned char *)(v14 + 32) = 0;
    return v14;
  }
  unint64_t v14 = a5;
  if (v13 == 1)
  {
    uint64_t v67 = a4;
    unint64_t v18 = v9[2];
    uint64_t v64 = v9 + 2;
    if (v18 >> 62)
    {
      outlined copy of JSONEncoder.DateEncodingStrategy(v11, v12, 1);
      swift_bridgeObjectRetain();
      uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v65 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
    }
    uint64_t v66 = v7;
    uint64_t v68 = v12;
    if ((_BYTE)v14 == 0xFF)
    {
      uint64_t v35 = v9[18];
      uint64_t v34 = v9[19];
      v9[18] = a1;
      if (a1 >> 62)
      {
        if (a1 >> 62 != 1)
        {
          uint64_t v36 = 0;
          uint64_t v43 = v65;
          goto LABEL_28;
        }
        uint64_t v36 = *(void *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
        swift_retain();
LABEL_27:
        uint64_t v43 = v65;
        swift_retain();
LABEL_28:
        v9[19] = v36;
        *(double *)char v69 = a6;
        *(void *)&long long v72 = type metadata accessor for __JSONEncoder();
        *((void *)&v72 + 1) = lazy protocol witness table accessor for type __JSONEncoder and conformance __JSONEncoder(&lazy protocol witness table cache variable for type __JSONEncoder and conformance __JSONEncoder, (void (*)(uint64_t))type metadata accessor for __JSONEncoder);
        v71[0] = v9;
        swift_retain();
        ((void (*)(void *, void *))v11)(v69, v71);
        if (v66)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
          v9[18] = v35;
          swift_retain();
          swift_release();
          v9[19] = v34;
          swift_release();
          swift_release();
          unint64_t v14 = v9[2];
          if (v14 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v44 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          uint64_t v19 = (void *)v68;
          if (v43 >= v44) {
            goto LABEL_35;
          }
          if (*v64 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v62) {
              goto LABEL_34;
            }
          }
          else if (*(void *)((*v64 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_34:
            unint64_t v14 = (unint64_t)v64;
            specialized RangeReplaceableCollection<>.popLast()();
            swift_release();
LABEL_35:
            swift_willThrow();
            outlined consume of JSONEncoder.DateEncodingStrategy(v11, v68, 1);
            return v14;
          }
          __break(1u);
          goto LABEL_72;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
        v9[18] = v35;
        swift_retain();
        swift_release();
        v9[19] = v34;
        swift_release();
        swift_release();
        unint64_t v46 = v9[2];
        if (v46 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v47 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        uint64_t v19 = (void *)v68;
        if (v43 < v47)
        {
          if (!(*v64 >> 62))
          {
            unint64_t v9 = *(void **)((*v64 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (!v9) {
              goto LABEL_74;
            }
            goto LABEL_42;
          }
LABEL_73:
          swift_bridgeObjectRetain();
          unint64_t v9 = (void *)_CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v9)
          {
LABEL_74:
            __break(1u);
LABEL_75:
            __break(1u);
LABEL_76:
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            goto LABEL_62;
          }
LABEL_42:
          specialized RangeReplaceableCollection<>.popLast()();
          unint64_t v14 = v48;
          outlined consume of JSONEncoder.DateEncodingStrategy(v11, (uint64_t)v19, 1);
          return v14;
        }
LABEL_45:
        outlined consume of JSONEncoder.DateEncodingStrategy(v11, (uint64_t)v19, 1);
        type metadata accessor for JSONReference();
        unint64_t v14 = swift_allocObject();
        *(void *)(v14 + 16) = MEMORY[0x1E4FBC868];
        *(void *)(v14 + 24) = 0;
        *(unsigned char *)(v14 + 32) = 4;
        return v14;
      }
      uint64_t v36 = *(void *)(a1 + 64);
      swift_retain();
      uint64_t v21 = v67;
LABEL_26:
      outlined copy of _CodingKey?(a2, a3, v21, v14);
      goto LABEL_27;
    }
    uint64_t v19 = (void *)swift_allocObject();
    v19[5] = &type metadata for _CodingKey;
    v19[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v20 = swift_allocObject();
    v19[2] = v20;
    *(void *)(v20 + 16) = a2;
    *(void *)(v20 + 24) = a3;
    uint64_t v21 = v67;
    *(void *)(v20 + 32) = v67;
    *(unsigned char *)(v20 + 40) = v14;
    v19[7] = a1;
    if (a1 >> 62)
    {
      if (a1 >> 62 != 1)
      {
        uint64_t v36 = 1;
LABEL_25:
        v19[8] = v36;
        uint64_t v35 = v9[18];
        uint64_t v42 = v9[19];
        v9[18] = v19;
        uint64_t v34 = v42;
        goto LABEL_26;
      }
      uint64_t v22 = (uint64_t *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      uint64_t v22 = (uint64_t *)(a1 + 64);
    }
    uint64_t v41 = *v22;
    swift_retain();
    uint64_t v21 = v67;
    uint64_t v36 = v41 + 1;
    if (__OFADD__(v41, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    goto LABEL_25;
  }
  switch((unint64_t)v11)
  {
    case 1uLL:
      double v37 = a6 + 978307200.0;
      memset(v74, 0, sizeof(v74));
      uint64_t v38 = (long long *)v74;
      goto LABEL_20;
    case 2uLL:
      double v37 = (a6 + 978307200.0) * 1000.0;
      memset(v75, 0, 48);
      uint64_t v38 = (long long *)v75;
LABEL_20:
      uint64_t v39 = specialized static JSONReference.number<A, B>(from:with:for:_:)(v38, a1, a2, a3, a4, a5, v37);
      if (!v7) {
        return v39;
      }
      return v14;
    case 3uLL:
      static FormatStyle<>.iso8601.getter(a1, (uint64_t)v71);
      LODWORD(v69[0]) = v71[0];
      BYTE4(v69[0]) = BYTE4(v71[0]);
      v69[1] = v71[1];
      _OWORD v69[2] = v71[2];
      long long v70 = v72;
      Swift::String v40 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)v72);
      swift_release();
      swift_unknownObjectRelease();
      type metadata accessor for JSONReference();
      unint64_t v14 = swift_allocObject();
      *(Swift::String *)(v14 + 16) = v40;
      *(unsigned char *)(v14 + 32) = 0;
      return v14;
    default:
      if ((_BYTE)a5 != 0xFF)
      {
        uint64_t v31 = (void *)swift_allocObject();
        v31[5] = &type metadata for _CodingKey;
        v31[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v32 = swift_allocObject();
        v31[2] = v32;
        *(void *)(v32 + 16) = a2;
        *(void *)(v32 + 24) = a3;
        *(void *)(v32 + 32) = a4;
        *(unsigned char *)(v32 + 40) = v14;
        v31[7] = a1;
        if (a1 >> 62)
        {
          if (a1 >> 62 != 1)
          {
            uint64_t v53 = a4;
            uint64_t v52 = 0;
            goto LABEL_54;
          }
          uint64_t v33 = (uint64_t *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          uint64_t v33 = (uint64_t *)(a1 + 64);
        }
        uint64_t v52 = *v33;
        swift_retain();
        uint64_t v53 = a4;
LABEL_54:
        uint64_t v51 = v52 + 1;
        if (__OFADD__(v52, 1)) {
          goto LABEL_75;
        }
        v31[8] = v51;
        uint64_t v67 = v9[18];
        uint64_t v68 = v9[19];
        v9[18] = v31;
        goto LABEL_56;
      }
      uint64_t v50 = v9[18];
      uint64_t v49 = v9[19];
      v9[18] = a1;
      uint64_t v67 = v50;
      uint64_t v68 = v49;
      if (!(a1 >> 62))
      {
        uint64_t v51 = *(void *)(a1 + 64);
        swift_retain();
        uint64_t v53 = a4;
LABEL_56:
        outlined copy of _CodingKey?(a2, a3, v53, v14);
        goto LABEL_57;
      }
      if (a1 >> 62 == 1)
      {
        uint64_t v51 = *(void *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
        swift_retain();
LABEL_57:
        swift_retain();
        goto LABEL_58;
      }
      uint64_t v51 = 0;
LABEL_58:
      v9[19] = v51;
      *(void *)&long long v72 = type metadata accessor for __JSONEncoder();
      *((void *)&v72 + 1) = lazy protocol witness table accessor for type __JSONEncoder and conformance __JSONEncoder(&lazy protocol witness table cache variable for type __JSONEncoder and conformance __JSONEncoder, (void (*)(uint64_t))type metadata accessor for __JSONEncoder);
      v71[0] = v9;
      uint64_t v54 = (uint64_t **)__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v71, v72);
      uint64_t v11 = *v54;
      uint64_t v55 = **v54;
      uint64_t v56 = *(uint64_t (**)(uint64_t))(v55 + 208);
      uint64_t v19 = (void *)(v55 + 208);
      uint64_t v57 = swift_retain();
      if ((v56(v57) & 1) == 0)
      {
LABEL_72:
        __break(1u);
        goto LABEL_73;
      }
      unint64_t v14 = v11[18];
      outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy((long long *)(v11 + 9), v73);
      swift_retain();
      outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v73, (void (*)(void, void, void, void, void, void))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
      specialized static JSONReference.number<A, B>(from:with:for:_:)(v73, v14, 0, 0, 0, 255, a6);
      outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v73, (void (*)(void, void, void, void, void, void))outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy);
      uint64_t v58 = swift_release();
      if (v8)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
        v9[18] = v67;
        swift_retain();
        swift_release();
        v9[19] = v68;
        swift_release();
        swift_release();
        return v14;
      }
      MEMORY[0x185302590](v58);
      if (*(void *)((v11[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v11[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_76;
      }
LABEL_62:
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
      v9[18] = v67;
      swift_retain();
      swift_release();
      v9[19] = v68;
      swift_release();
      uint64_t result = swift_release();
      unint64_t v59 = v9[2];
      if (v59 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v63 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if (v63) {
          goto LABEL_64;
        }
      }
      else if (*(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_64:
        specialized RangeReplaceableCollection<>.popLast()();
        return v60;
      }
      __break(1u);
      return result;
  }
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __JSONEncoder(double a1)
{
  uint64_t v4 = *v1;
  if (((*(uint64_t (**)(void))(*(void *)*v1 + 208))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_4;
  }
  unint64_t v5 = *(void *)(v4 + 144);
  outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy((long long *)(v4 + 72), v7);
  swift_retain();
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v7, (void (*)(void, void, void, void, void, void))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
  specialized static JSONReference.number<A, B>(from:with:for:_:)(v7, v5, 0, 0, 0, 255, a1);
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v7, (void (*)(void, void, void, void, void, void))outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy);
  uint64_t result = swift_release();
  if (v2) {
    return result;
  }
  MEMORY[0x185302590](result);
  if (*(void *)((*(void *)(v4 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v4 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    goto LABEL_7;
LABEL_4:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

uint64_t __JSONEncoder.wrap<A>(_:for:_:)(double *a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v101 = a5;
  unint64_t v6 = a4;
  uint64_t v103 = a3;
  unint64_t v104 = a2;
  uint64_t v102 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v100 = (char *)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (uint64_t *)((char *)&v98 - v10);
  uint64_t v12 = (void *)type metadata accessor for Optional();
  uint64_t v13 = *(v12 - 1);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  unint64_t v18 = (char *)&v98 - v17;
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v98 - v20;
  double v24 = MEMORY[0x1F4188790](v22);
  id v25 = (unint64_t **)((char *)&v98 - v23);
  double v26 = *a1;
  uint64_t v27 = *(void *)(v5 + 40);
  *(void *)&long long v106 = *(void *)(v5 + 32);
  if (!*(unsigned char *)(v5 + 48))
  {
    uint64_t v39 = v27;
    id v40 = objc_allocWithZone(MEMORY[0x1E4F1C9C8]);
    uint64_t v41 = (void *)v106;
    id v42 = (id)v106;
    id v43 = objc_msgSend(v40, sel_initWithTimeIntervalSinceReferenceDate_, v26);
    id v44 = objc_msgSend(v42, sel_stringFromDate_, v43);

    id v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    uint64_t v47 = v46;
    outlined consume of JSONEncoder.DateEncodingStrategy(v41, v39, 0);

    type metadata accessor for JSONReference();
    uint64_t v48 = swift_allocObject();
    unint64_t v6 = v48;
    *(void *)(v48 + 16) = v45;
    *(void *)(v48 + 24) = v47;
LABEL_11:
    *(unsigned char *)(v48 + 32) = 0;
    return v6;
  }
  uint64_t v28 = (void *)v5;
  if (*(unsigned char *)(v5 + 48) != 1)
  {
    switch((uint64_t)v106)
    {
      case 1:
        double v61 = v26 + 978307200.0;
        memset(v113, 0, sizeof(v113));
        uint64_t v62 = (long long *)v113;
        goto LABEL_24;
      case 2:
        double v61 = (v26 + 978307200.0) * 1000.0;
        memset(v114, 0, sizeof(v114));
        uint64_t v62 = (long long *)v114;
LABEL_24:
        uint64_t v63 = v105;
        uint64_t v64 = specialized static JSONReference.number<A, B>(from:with:for:_:)(v62, v104, v103, v6, v101, v61);
        if (!v63) {
          return v64;
        }
        return v6;
      case 3:
        static FormatStyle<>.iso8601.getter(v27, (uint64_t)v110);
        LODWORD(v108[0]) = v110[0];
        BYTE4(v108[0]) = BYTE4(v110[0]);
        v108[1] = v110[1];
        v108[2] = v110[2];
        long long v106 = v111;
        long long v109 = v111;
        double v107 = v26;
        Swift::String v65 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)v111);
        swift_release();
        swift_unknownObjectRelease();
        type metadata accessor for JSONReference();
        uint64_t v48 = swift_allocObject();
        unint64_t v6 = v48;
        *(Swift::String *)(v48 + 16) = v65;
        goto LABEL_11;
      default:
        uint64_t v49 = *(void (**)(char *, uint64_t, void *, double))(v13 + 16);
        uint64_t v38 = v13;
        v49((char *)&v98 - v23, v103, v12, v24);
        ((void (*)(char *, char *, void *))v49)(v21, (char *)v25, v12);
        uint64_t v50 = (void (*)(char *, char *, unint64_t))v102;
        if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v102 + 48))(v21, 1, v6) != 1) {
          goto LABEL_46;
        }
        uint64_t v51 = *(void (**)(char *, void *))(v13 + 8);
        v51((char *)v25, v12);
        v51(v21, v12);
        uint64_t v12 = (void *)v5;
        uint64_t v38 = *(void *)(v5 + 144);
        unint64_t v36 = *(void *)(v5 + 152);
        unint64_t v52 = v104;
        unint64_t v53 = v104 >> 62;
        *(void *)(v5 + 144) = v104;
        if (!(v52 >> 62))
        {
          uint64_t v82 = *(void *)(v104 + 64);
          uint64_t v81 = swift_retain();
          uint64_t v54 = v105;
          goto LABEL_55;
        }
        uint64_t v54 = v105;
        if (v53 != 1)
        {
          uint64_t v82 = 0;
          goto LABEL_57;
        }
        uint64_t v82 = *(void *)((v104 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
        swift_retain();
        break;
    }
    goto LABEL_56;
  }
  id v25 = (void *)v5;
  unint64_t v29 = *(void *)(v5 + 16);
  long long v98 = (unint64_t *)(v5 + 16);
  uint64_t v99 = v27;
  if (v29 >> 62)
  {
    outlined copy of JSONEncoder.DateEncodingStrategy((id)v106, v27, 1);
    swift_bridgeObjectRetain();
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
  }
  uint64_t v31 = *(void (**)(char *, uint64_t, void *))(v13 + 16);
  v31(v18, v103, v12);
  v31(v15, (uint64_t)v18, v12);
  uint64_t v32 = v102;
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v102 + 48))(v15, 1, v6) == 1)
  {
    uint64_t v33 = *(void (**)(char *, void *))(v13 + 8);
    v33(v18, v12);
    v33(v15, v12);
    uint64_t v34 = v25[18];
    uint64_t v35 = v25[19];
    unint64_t v36 = v104;
    unint64_t v37 = v104 >> 62;
    v25[18] = v104;
    if (v36 >> 62)
    {
      uint64_t v38 = v106;
      if (v37 != 1)
      {
        uint64_t v66 = v30;
        uint64_t v67 = 0;
        goto LABEL_32;
      }
      uint64_t v67 = *(void *)((v36 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
      swift_retain();
    }
    else
    {
      uint64_t v67 = *(void *)(v36 + 64);
      swift_retain();
      uint64_t v38 = v106;
    }
LABEL_31:
    uint64_t v66 = v30;
    swift_retain();
LABEL_32:
    v25[19] = v67;
    *(double *)uint64_t v108 = v26;
    *(void *)&long long v111 = type metadata accessor for __JSONEncoder();
    *((void *)&v111 + 1) = lazy protocol witness table accessor for type __JSONEncoder and conformance __JSONEncoder(&lazy protocol witness table cache variable for type __JSONEncoder and conformance __JSONEncoder, (void (*)(uint64_t))type metadata accessor for __JSONEncoder);
    v110[0] = v25;
    swift_retain();
    uint64_t v70 = v105;
    ((void (*)(void *, void *))v38)(v108, v110);
    if (v70)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v110);
      v25[18] = v34;
      swift_retain();
      swift_release();
      v25[19] = v35;
      swift_release();
      swift_release();
      unint64_t v6 = v25[2];
      if (v6 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v93 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v66 >= v93) {
          goto LABEL_38;
        }
      }
      else if (v66 >= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_38:
        swift_willThrow();
        outlined consume of JSONEncoder.DateEncodingStrategy((void *)v38, v99, 1);
        return v6;
      }
      unint64_t v6 = *v98;
      if (*v98 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v95 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v95) {
          goto LABEL_37;
        }
      }
      else if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_37:
        specialized RangeReplaceableCollection<>.popLast()();
        swift_release();
        goto LABEL_38;
      }
      __break(1u);
      goto LABEL_71;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v110);
    v25[18] = v34;
    swift_retain();
    swift_release();
    v25[19] = v35;
    swift_release();
    swift_release();
    unint64_t v72 = v25[2];
    if (v72 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v94 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v66 < v94)
      {
LABEL_42:
        if (!(*v98 >> 62))
        {
          if (!*(void *)((*v98 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_73:
            __break(1u);
            goto LABEL_74;
          }
LABEL_44:
          specialized RangeReplaceableCollection<>.popLast()();
          unint64_t v6 = v73;
          outlined consume of JSONEncoder.DateEncodingStrategy((void *)v38, v99, 1);
          return v6;
        }
LABEL_72:
        swift_bridgeObjectRetain();
        uint64_t v96 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v96) {
          goto LABEL_73;
        }
        goto LABEL_44;
      }
    }
    else if (v66 < *(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_42;
    }
    outlined consume of JSONEncoder.DateEncodingStrategy((void *)v38, v99, 1);
    type metadata accessor for JSONReference();
    unint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = MEMORY[0x1E4FBC868];
    *(void *)(v6 + 24) = 0;
    *(unsigned char *)(v6 + 32) = 4;
    return v6;
  }
  uint64_t v103 = v30;
  uint64_t v55 = *(void (**)(char *, char *, unint64_t))(v32 + 32);
  uint64_t v28 = (void *)(v32 + 32);
  uint64_t v56 = v100;
  v55(v100, v15, v6);
  uint64_t v50 = v55;
  uint64_t v11 = (uint64_t *)swift_allocObject();
  uint64_t v57 = v101;
  v11[5] = v6;
  void v11[6] = v57;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11 + 2);
  v55((char *)boxed_opaque_existential_1, v56, v6);
  uint64_t v21 = (char *)(v13 + 8);
  (*(void (**)(char *, void *))(v13 + 8))(v18, v12);
  unint64_t v59 = v104;
  v11[7] = v104;
  if (v59 >> 62)
  {
    uint64_t v38 = v106;
    if (v59 >> 62 != 1)
    {
      uint64_t v30 = v103;
      uint64_t v67 = 1;
LABEL_30:
      v11[8] = v67;
      uint64_t v34 = v25[18];
      uint64_t v35 = v25[19];
      unint64_t v36 = (unint64_t)v11;
      v25[18] = v11;
      goto LABEL_31;
    }
    uint64_t v60 = (uint64_t *)((v59 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v60 = (uint64_t *)(v59 + 64);
    uint64_t v38 = v106;
  }
  uint64_t v30 = v103;
  uint64_t v68 = *v60;
  swift_retain();
  BOOL v69 = __OFADD__(v68, 1);
  uint64_t v67 = v68 + 1;
  if (!v69) {
    goto LABEL_30;
  }
  __break(1u);
LABEL_46:
  uint64_t v74 = (void (*)(uint64_t *, char *, unint64_t))*((void *)v50 + 4);
  unint64_t v36 = (unint64_t)v50 + 32;
  v74(v11, v21, v6);
  uint64_t v75 = (uint64_t *)swift_allocObject();
  uint64_t v76 = v101;
  v75[5] = v6;
  v75[6] = v76;
  uint64_t v77 = __swift_allocate_boxed_opaque_existential_1(v75 + 2);
  v74(v77, (char *)v11, v6);
  uint64_t v78 = *(void (**)(void *, void *))(v38 + 8);
  v38 += 8;
  v78((char *)v25, v12);
  unint64_t v79 = v104;
  v75[7] = v104;
  if (!(v79 >> 62))
  {
    uint64_t v80 = (uint64_t *)(v79 + 64);
    uint64_t v54 = v105;
    uint64_t v12 = v28;
    goto LABEL_52;
  }
  uint64_t v54 = v105;
  uint64_t v12 = v28;
  if (v79 >> 62 == 1)
  {
    uint64_t v80 = (uint64_t *)((v104 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_52:
    uint64_t v83 = *v80;
    swift_retain();
    goto LABEL_53;
  }
  uint64_t v83 = 0;
LABEL_53:
  BOOL v69 = __OFADD__(v83, 1);
  uint64_t v82 = v83 + 1;
  if (v69)
  {
LABEL_74:
    __break(1u);
LABEL_75:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_61;
  }
  v75[8] = v82;
  uint64_t v38 = v12[18];
  unint64_t v36 = v12[19];
  uint64_t v81 = (uint64_t)v75;
  v12[18] = v75;
LABEL_55:
  unint64_t v104 = v81;
LABEL_56:
  swift_retain();
LABEL_57:
  v12[19] = v82;
  uint64_t v84 = type metadata accessor for __JSONEncoder();
  *(void *)&long long v111 = v84;
  *((void *)&v111 + 1) = lazy protocol witness table accessor for type __JSONEncoder and conformance __JSONEncoder(&lazy protocol witness table cache variable for type __JSONEncoder and conformance __JSONEncoder, (void (*)(uint64_t))type metadata accessor for __JSONEncoder);
  v110[0] = v12;
  uint64_t v85 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v110, v84);
  uint64_t v86 = *(void *)v85;
  uint64_t v87 = *(uint64_t (**)(uint64_t))(**(void **)v85 + 208);
  uint64_t v88 = swift_retain();
  if ((v87(v88) & 1) == 0)
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  unint64_t v89 = *(void *)(v86 + 144);
  outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy((long long *)(v86 + 72), v112);
  swift_retain();
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v112, (void (*)(void, void, void, void, void, void))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
  specialized static JSONReference.number<A, B>(from:with:for:_:)(v112, v89, 0, 0, 0, 255, v26);
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v112, (void (*)(void, void, void, void, void, void))outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy);
  uint64_t v90 = swift_release();
  if (v54)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v110);
    v12[18] = v38;
    unint64_t v6 = v38 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain();
    swift_release();
    v12[19] = v36;
    swift_release();
    swift_release();
    return v6;
  }
  MEMORY[0x185302590](v90);
  if (*(void *)((*(void *)(v86 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v86 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
    goto LABEL_75;
LABEL_61:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v110);
  v12[18] = v38;
  swift_retain();
  swift_release();
  v12[19] = v36;
  swift_release();
  uint64_t result = swift_release();
  unint64_t v91 = v12[2];
  if (v91 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v97 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v97) {
      goto LABEL_63;
    }
  }
  else if (*(void *)((v91 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_63:
    specialized RangeReplaceableCollection<>.popLast()();
    return v92;
  }
  __break(1u);
  return result;
}

uint64_t specialized static JSONReference.number<A, B>(from:with:for:_:)(long long *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, double a7)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if ((~*(void *)&a7 & 0x7FF0000000000000) != 0)
  {
    uint64_t v20 = Double.description.getter();
    uint64_t v22 = v21;
    uint64_t v35 = v21;
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = 12334;
    v23._os_log_t object = (void *)0xE200000000000000;
    Swift::Bool v24 = String.hasSuffix(_:)(v23);
    swift_bridgeObjectRelease();
    if (v24)
    {
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
      uint64_t v22 = v35;
    }
    type metadata accessor for JSONReference();
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v20;
    *(void *)(v19 + 24) = v22;
    *(unsigned char *)(v19 + 32) = 1;
  }
  else
  {
    outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy(a1, &v36);
    uint64_t v13 = *((void *)&v36 + 1);
    if (*((void *)&v36 + 1))
    {
      uint64_t v15 = v37;
      uint64_t v14 = v38;
      uint64_t v17 = v39;
      uint64_t v16 = v40;
      type metadata accessor for JSONReference();
      if (a7 == INFINITY)
      {
        uint64_t v18 = v36;
        uint64_t v19 = swift_allocObject();
        *(void *)(v19 + 16) = v18;
        *(void *)(v19 + 24) = v13;
        *(unsigned char *)(v19 + 32) = 0;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v27 = swift_allocObject();
        uint64_t v19 = v27;
        if (a7 == -INFINITY)
        {
          *(void *)(v27 + 16) = v15;
          *(void *)(v27 + 24) = v14;
        }
        else
        {
          *(void *)(v27 + 16) = v17;
          *(void *)(v27 + 24) = v16;
        }
        *(unsigned char *)(v27 + 32) = 0;
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      if (a6 == -1)
      {
        _CodingPathNode.path.getter(a2);
      }
      else
      {
        outlined copy of _CodingKey(a3, a4, a5, a6);
        _CodingPathNode.path.getter(a2);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v26 = swift_allocObject();
        *(void *)(inited + 32) = v26;
        *(void *)(v26 + 16) = a3;
        *(void *)(v26 + 24) = a4;
        *(void *)(v26 + 32) = a5;
        *(unsigned char *)(v26 + 40) = a6;
        specialized Array.append<A>(contentsOf:)(inited);
      }
      uint64_t v28 = type metadata accessor for EncodingError();
      uint64_t v29 = swift_allocError();
      uint64_t v31 = v30;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
      *(void *)(v31 + 24) = MEMORY[0x1E4FBB3D0];
      *(double *)uint64_t v31 = a7;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      v32._uint64_t countAndFlagsBits = Double.description.getter();
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      v33._os_log_t object = (void *)0x80000001823AB780;
      v33._uint64_t countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v33);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v28 - 8) + 104))(v31, *MEMORY[0x1E4FBBAA0], v28);
      uint64_t v19 = v29;
      swift_willThrow();
    }
  }
  return v19;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, void *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = MEMORY[0x1E4FBC860];
  if (!a3) {
    return v9;
  }
  uint64_t v94 = MEMORY[0x1E4FBC860];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, a3 & ~(a3 >> 63), 0);
  if (a3 < 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v15 = 0;
  uint64_t v16 = a9;
  uint64_t v9 = v94;
  uint64_t v87 = a4;
  uint64_t v85 = a7;
  uint64_t v81 = a3;
  while (1)
  {
    uint64_t v17 = GenericArguments2.subscript.getter();
    uint64_t v18 = (uint64_t *)v17;
    char v84 = v19;
    if ((v19 & 1) == 0)
    {
      uint64_t v83 = v15;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v43 = a7;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a7[2] + 1, 1, a7);
      }
      unint64_t v45 = v43[2];
      unint64_t v44 = v43[3];
      if (v45 >= v44 >> 1) {
        id v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v44 > 1), v45 + 1, 1, v43);
      }
      uint64_t v43[2] = v45 + 1;
      uint64_t v46 = &v43[2 * v45];
      v46[4] = a8;
      v46[5] = v16;
      swift_bridgeObjectRelease();
      uint64_t v47 = PredicateCodableConfiguration._identifier(for:)(v18);
      if (!v48)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v70 = _typeName(_:qualified:)();
        uint64_t v72 = v71;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
        uint64_t v73 = BidirectionalCollection<>.joined(separator:)();
        uint64_t v75 = v74;
        swift_bridgeObjectRelease();
        v76._uint64_t countAndFlagsBits = v73;
        v76._os_log_t object = v75;
        String.append(_:)(v76);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
        swift_allocError();
        *(void *)uint64_t v77 = v70;
        *(void *)(v77 + 8) = v72;
        *(void *)(v77 + 16) = 47;
        *(void *)(v77 + 24) = 0xE100000000000000;
        *(unsigned char *)(v77 + 32) = 0;
        swift_willThrow();
        goto LABEL_39;
      }
      uint64_t v50 = v48;
      uint64_t v51 = v47;
      if (v49)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v58 = MEMORY[0x1E4FBC860];
        a7 = v85;
      }
      else
      {
        swift_bridgeObjectRetain_n();
        uint64_t v52 = Type.genericArguments2.getter();
        uint64_t v54 = v53;
        uint64_t v56 = v55;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        LOBYTE(v78) = 0;
        uint64_t v57 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n(v52, v54, v56, a4, a5, a6 & 1, v43, v51, v50, v78);
        a7 = v85;
        if (v89)
        {
          swift_release();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          return v9;
        }
        uint64_t v58 = v57;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      uint64_t v15 = v83;
      unint64_t v59 = v51;
      goto LABEL_32;
    }
    int64_t v20 = *(void *)(v17 + 16);
    if (v20) {
      break;
    }
    outlined consume of GenericArgument(v17, 1);
    unint64_t v59 = (uint64_t *)MEMORY[0x1E4FBC860];
LABEL_31:
    uint64_t v50 = 0;
    uint64_t v58 = 0;
LABEL_32:
    unint64_t v61 = *(void *)(v9 + 16);
    unint64_t v60 = *(void *)(v9 + 24);
    if (v61 >= v60 >> 1)
    {
      uint64_t v92 = v59;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v60 > 1, v61 + 1, 1);
      unint64_t v59 = v92;
    }
    ++v15;
    *(void *)(v9 + 16) = v61 + 1;
    uint64_t v62 = v9 + 32 * v61;
    *(void *)(v62 + 32) = v59;
    *(void *)(v62 + 40) = v50;
    *(void *)(v62 + 48) = v58;
    *(unsigned char *)(v62 + 56) = v84 & 1;
    uint64_t v16 = a9;
    if (v15 == v81) {
      return v9;
    }
  }
  uint64_t v82 = v15;
  uint64_t v80 = v9;
  uint64_t v93 = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
  uint64_t v91 = v93;
  uint64_t v79 = (uint64_t)v18;
  uint64_t v21 = (uint64_t **)(v18 + 4);
  while (1)
  {
    int64_t v90 = v20;
    uint64_t v22 = *v21;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Swift::String v23 = a7;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::String v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a7[2] + 1, 1, a7);
    }
    unint64_t v25 = v23[2];
    unint64_t v24 = v23[3];
    if (v25 >= v24 >> 1) {
      Swift::String v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v23);
    }
    uint64_t v23[2] = v25 + 1;
    uint64_t v26 = &v23[2 * v25];
    v26[4] = a8;
    v26[5] = v16;
    swift_bridgeObjectRelease();
    uint64_t v27 = a5;
    uint64_t v28 = PredicateCodableConfiguration._identifier(for:)(v22);
    if (!v29)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v63 = _typeName(_:qualified:)();
      uint64_t v9 = v64;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
      uint64_t v65 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v67 = v66;
      swift_bridgeObjectRelease();
      v68._uint64_t countAndFlagsBits = v65;
      v68._os_log_t object = v67;
      String.append(_:)(v68);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
      swift_allocError();
      *(void *)uint64_t v69 = v63;
      *(void *)(v69 + 8) = v9;
      *(void *)(v69 + 16) = 47;
      *(void *)(v69 + 24) = 0xE100000000000000;
      *(unsigned char *)(v69 + 32) = 0;
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_38;
    }
    uint64_t v31 = v28;
    uint64_t v32 = v29;
    if (v30)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v38 = MEMORY[0x1E4FBC860];
      goto LABEL_16;
    }
    swift_bridgeObjectRetain_n();
    uint64_t v33 = Type.genericArguments2.getter();
    uint64_t v35 = v34;
    uint64_t v9 = v36;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    LOBYTE(v78) = 0;
    uint64_t v37 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n(v33, v35, v9, a4, v27, a6 & 1, v23, v31, v32, v78);
    if (v89) {
      break;
    }
    uint64_t v38 = v37;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    a7 = v85;
LABEL_16:
    uint64_t v39 = v91;
    unint64_t v41 = *(void *)(v91 + 16);
    unint64_t v40 = *(void *)(v91 + 24);
    if (v41 >= v40 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
      uint64_t v39 = v91;
    }
    *(void *)(v39 + 16) = v41 + 1;
    uint64_t v91 = v39;
    id v42 = (void *)(v39 + 24 * v41);
    v42[4] = v31;
    v42[5] = v32;
    v42[6] = v38;
    ++v21;
    int64_t v20 = v90 - 1;
    a4 = v87;
    a5 = v27;
    uint64_t v16 = a9;
    if (v90 == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of GenericArgument(v79, 1);
      uint64_t v9 = v80;
      uint64_t v15 = v82;
      unint64_t v59 = (uint64_t *)v91;
      goto LABEL_31;
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
LABEL_38:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of GenericArgument(v79, 1);
LABEL_39:
  swift_release();
  return v9;
}

uint64_t *PredicateCodableConfiguration._identifier(for:)(uint64_t *result)
{
  int64_t v2 = 0;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  uint64_t v6 = v3 + 64;
  unint64_t v7 = v5 & *(void *)(v3 + 64);
  int64_t v8 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v2 << 6);
      goto LABEL_24;
    }
    int64_t v11 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
    if (v11 >= v8) {
      goto LABEL_27;
    }
    unint64_t v12 = *(void *)(v6 + 8 * v11);
    ++v2;
    if (!v12)
    {
      int64_t v2 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_27;
      }
      unint64_t v12 = *(void *)(v6 + 8 * v2);
      if (!v12)
      {
        int64_t v2 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_27;
        }
        unint64_t v12 = *(void *)(v6 + 8 * v2);
        if (!v12)
        {
          int64_t v2 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_27;
          }
          unint64_t v12 = *(void *)(v6 + 8 * v2);
          if (!v12)
          {
            int64_t v2 = v11 + 4;
            if (v11 + 4 >= v8) {
              goto LABEL_27;
            }
            unint64_t v12 = *(void *)(v6 + 8 * v2);
            if (!v12) {
              break;
            }
          }
        }
      }
    }
LABEL_23:
    unint64_t v14 = __clz(__rbit64(v12));
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = v14 + (v2 << 6);
LABEL_24:
    uint64_t v15 = *(void *)(v3 + 56) + 16 * v10;
    if ((*(unsigned char *)(v15 + 8) & 1) == 0 && *(uint64_t **)v15 == result)
    {
LABEL_60:
      uint64_t v30 = *(void *)(*(void *)(v3 + 48) + 16 * v10);
      swift_bridgeObjectRetain();
      return (uint64_t *)v30;
    }
  }
  int64_t v13 = v11 + 5;
  if (v13 < v8)
  {
    unint64_t v12 = *(void *)(v6 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v2 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          break;
        }
        if (v2 >= v8) {
          goto LABEL_27;
        }
        unint64_t v12 = *(void *)(v6 + 8 * v2);
        ++v13;
        if (v12) {
          goto LABEL_23;
        }
      }
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    int64_t v2 = v13;
    goto LABEL_23;
  }
LABEL_27:
  uint64_t v16 = *result;
  if ((unint64_t)*result <= 0x7FF && (unint64_t)(v16 - 512) >= 3 && v16 != 0) {
    return 0;
  }
  uint64_t result = (uint64_t *)TypeMetadata.descriptor.getter();
  int64_t v18 = 0;
  uint64_t v19 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & *(void *)(v3 + 64);
  int64_t v22 = (unint64_t)(v19 + 63) >> 6;
  while (2)
  {
    if (v21)
    {
      unint64_t v23 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v10 = v23 | (v18 << 6);
      goto LABEL_37;
    }
    int64_t v26 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      goto LABEL_64;
    }
    if (v26 >= v22) {
      return 0;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v26);
    ++v18;
    if (v27) {
      goto LABEL_59;
    }
    int64_t v18 = v26 + 1;
    if (v26 + 1 >= v22) {
      return 0;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v18);
    if (v27) {
      goto LABEL_59;
    }
    int64_t v18 = v26 + 2;
    if (v26 + 2 >= v22) {
      return 0;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v18);
    if (v27) {
      goto LABEL_59;
    }
    int64_t v18 = v26 + 3;
    if (v26 + 3 >= v22) {
      return 0;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v18);
    if (v27) {
      goto LABEL_59;
    }
    int64_t v18 = v26 + 4;
    if (v26 + 4 >= v22) {
      return 0;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v18);
    if (v27)
    {
LABEL_59:
      unint64_t v29 = __clz(__rbit64(v27));
      unint64_t v21 = (v27 - 1) & v27;
      unint64_t v10 = v29 + (v18 << 6);
LABEL_37:
      uint64_t v24 = *(void *)(v3 + 56) + 16 * v10;
      if (*(unsigned char *)(v24 + 8) == 1 && result == *(uint64_t **)v24) {
        goto LABEL_60;
      }
      continue;
    }
    break;
  }
  int64_t v28 = v26 + 5;
  if (v28 >= v22) {
    return 0;
  }
  unint64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    int64_t v18 = v28;
    goto LABEL_59;
  }
  while (1)
  {
    int64_t v18 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v18 >= v22) {
      return 0;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v18);
    ++v28;
    if (v27) {
      goto LABEL_59;
    }
  }
LABEL_66:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys);
  }
  return result;
}

void _JSONUnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)()
{
  uint64_t v1 = v0;
  unint64_t v2 = v0[1];
  unint64_t v4 = v2 + 16;
  unint64_t v3 = *(void *)(v2 + 16);
  int v5 = *(unsigned __int8 *)(v2 + 32);
  if (v5 == 4)
  {
    uint64_t v6 = *(void *)(v3 + 16);
    goto LABEL_6;
  }
  if (v5 != 3) {
    goto LABEL_19;
  }
  if (v3 >> 62) {
    goto LABEL_17;
  }
  uint64_t v6 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_6:
  while (1)
  {
    type metadata accessor for JSONReference();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = MEMORY[0x1E4FBC868];
    *(void *)(v7 + 24) = 0;
    *(unsigned char *)(v7 + 32) = 4;
    if (*(unsigned char *)(v2 + 32) != 3) {
      break;
    }
    uint64_t v16 = *(void *)(v2 + 16);
    *(void *)unint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(v2 + 32) = 7;
    uint64_t v8 = swift_retain();
    MEMORY[0x185302590](v8);
    if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v9 = *(void *)(v2 + 16);
    uint64_t v10 = *(void *)(v2 + 24);
    *(void *)(v2 + 16) = v16;
    *(void *)(v2 + 24) = 0;
    char v11 = *(unsigned char *)(v2 + 32);
    *(unsigned char *)(v2 + 32) = 3;
    outlined consume of JSONReference.Backing(v9, v10, v11);
    unint64_t v3 = *v1;
    unint64_t v4 = v1[2];
    uint64_t v1 = (unint64_t *)swift_allocObject();
    v1[5] = (unint64_t)&type metadata for _CodingKey;
    v1[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v12 = swift_allocObject();
    v1[2] = v12;
    *(void *)(v12 + 24) = 0;
    *(void *)(v12 + 32) = 0;
    *(void *)(v12 + 16) = v6;
    *(unsigned char *)(v12 + 40) = 2;
    v1[7] = v4;
    if (v4 >> 62)
    {
      uint64_t v13 = 0;
      if (v4 >> 62 != 1) {
        goto LABEL_14;
      }
      unint64_t v14 = (uint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      unint64_t v14 = (uint64_t *)(v4 + 64);
    }
    uint64_t v13 = *v14;
    swift_retain();
LABEL_14:
    if (!__OFADD__(v13, 1))
    {
      v1[8] = v13 + 1;
      type metadata accessor for _JSONKeyedEncodingContainer();
      swift_retain();
      swift_getWitnessTable();
      KeyedEncodingContainer.init<A>(_:)();
      return;
    }
    __break(1u);
LABEL_17:
    uint64_t v15 = *(void *)(v2 + 24);
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    outlined consume of JSONReference.Backing(v3, v15, 3);
  }
  __break(1u);
LABEL_19:
  __break(1u);
}

uint64_t SortDescriptor.order.getter()
{
  return *v0;
}

double static Date.+ infix(_:_:)@<D0>(double *a1@<X0>, double *a2@<X8>, double a3@<D0>)
{
  double result = *a1 + a3;
  *a2 = result;
  return result;
}

void sub_1818B7CA4(_Unwind_Exception *a1)
{
}

ValueMetadata *type metadata accessor for URLError.Code()
{
  return &type metadata for URLError.Code;
}

uint64_t dispatch thunk of JSONDecoder.dateDecodingStrategy.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

ValueMetadata *type metadata accessor for URLError()
{
  return &type metadata for URLError;
}

uint64_t dispatch thunk of JSONDecoder.userInfo.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t __dictionaryThatCanCode_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = [a3 conformsToProtocol:&unk_1ECABCCC8];
  if ((result & 1) == 0)
  {
    uint64_t v6 = *(void **)(a1 + 32);
    return [v6 removeObjectForKey:a2];
  }
  return result;
}

uint64_t URLQueryItem.value.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

ValueMetadata *type metadata accessor for URLResourceValues()
{
  return &type metadata for URLResourceValues;
}

uint64_t dispatch thunk of JSONDecoder.nonConformingFloatDecodingStrategy.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of JSONDecoder.dataDecodingStrategy.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.allKeys.getter in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _PlistKeyedDecodingContainer.allKeys.getter(a1, *(void *)(v5 + 8), a3, *(void *)(a1 + 16), a5, *(void *)(a1 + 32));
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int32(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int32(a1, a2, (const char **)&selRef_initWithInt_);
}

double NSArray.makeIterator()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = swift_unknownObjectRetain();

  return NSFastEnumerationIterator.init(_:)(v2, a1);
}

ValueMetadata *type metadata accessor for Data.Deallocator()
{
  return &type metadata for Data.Deallocator;
}

uint64_t _convertErrorToNSError(_:)(void *a1)
{
  id v1 = a1;

  return _swift_stdlib_bridgeErrorToNSError();
}

void static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!a1)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    char v11 = 3;
LABEL_11:
    *(unsigned char *)(a2 + 16) = v11;
    return;
  }
  id v3 = a1;
  unint64_t v4 = (unint64_t)objc_msgSend(v3, sel_length);
  if (v4 == 2)
  {
    id v13 = objc_msgSend(v3, sel_indexAtPosition_, 0);
    id v14 = objc_msgSend(v3, sel_indexAtPosition_, 1);

    *(void *)a2 = v13;
    *(void *)(a2 + 8) = v14;
    *(unsigned char *)(a2 + 16) = 1;
    return;
  }
  unint64_t v5 = v4;
  if (v4 == 1)
  {
    id v12 = objc_msgSend(v3, sel_indexAtPosition_, 0);

    *(void *)a2 = v12;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return;
  }
  if (!v4)
  {
    uint64_t v6 = specialized IndexPath.Storage.init(arrayLiteral:)(MEMORY[0x1E4FBC860]);
    uint64_t v8 = v7;
    char v10 = v9;

    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = v10;
    return;
  }
  if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v15 + 16) = v5;
    objc_msgSend(v3, sel_getIndexes_range_, v15 + 32, 0, v5);
    *(void *)(v15 + 16) = v5;

    *(void *)a2 = v15;
    *(void *)(a2 + 8) = 0;
    char v11 = 2;
    goto LABEL_11;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void NSMapRemove(NSMapTable *table, const void *key)
{
  if (!table) {
    NSLog((NSString *)@"%s: map table argument is NULL", "void NSMapRemove(NSMapTable * _Nonnull, const void * _Nullable)");
  }

  [(NSMapTable *)table removeObjectForKey:key];
}

NSDateInterval __swiftcall DateInterval._bridgeToObjectiveC()()
{
  double v1 = *v0;
  double v2 = v0[1];
  id v3 = objc_allocWithZone((Class)NSDateInterval);
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v1);
  id v5 = objc_msgSend(v3, sel_initWithStartDate_duration_, v4, v2);

  return (NSDateInterval)v5;
}

uint64_t destroy for IndexSet.RangeView()
{
  return swift_release();
}

uint64_t NSNotificationCenter.notifications(named:object:)(void *a1)
{
  type metadata accessor for NSNotificationCenter.Notifications();
  uint64_t v3 = swift_allocObject();
  swift_unknownObjectRetain();
  NSNotificationCenter.Notifications.init(center:name:object:)(v1, a1);
  return v3;
}

uint64_t type metadata accessor for NSNotificationCenter.Notifications()
{
  return self;
}

uint64_t NSNotificationCenter.Notifications.init(center:name:object:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v9 = MEMORY[0x1E4FBC860];
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSNotificationCenter.Notifications.State, os_unfair_lock_s>);
  uint64_t v6 = (os_unfair_lock_s *)swift_allocObject();
  v6[16]._os_unfair_lock_opaque = 0;
  outlined init with copy of NSNotificationCenter.Notifications.State(&v9, (uint64_t)&v6[4]);
  outlined destroy of NSNotificationCenter.Notifications.State((uint64_t)&v9);
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v6;
  id v7 = a1;
  swift_retain();
  os_unfair_lock_lock(v6 + 16);
  partial apply for closure #1 in NSNotificationCenter.Notifications.init(center:name:object:)((uint64_t)&v6[4]);
  os_unfair_lock_unlock(v6 + 16);
  swift_release();

  swift_unknownObjectRelease();
  return v3;
}

uint64_t partial apply for closure #1 in NSNotificationCenter.Notifications.init(center:name:object:)(uint64_t a1)
{
  return closure #1 in NSNotificationCenter.Notifications.init(center:name:object:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t closure #1 in NSNotificationCenter.Notifications.init(center:name:object:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  id v14 = partial apply for closure #1 in closure #1 in NSNotificationCenter.Notifications.init(center:name:object:);
  uint64_t v15 = v8;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1107296256;
  uint64_t v12[2] = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  uint64_t ObjectType = &block_descriptor_11;
  uint64_t v9 = _Block_copy(v12);
  swift_release();
  id v10 = objc_msgSend(a2, sel__addObserverForName_object_queue_usingBlock_, a3, a4, 0, v9);
  _Block_release(v9);
  uint64_t ObjectType = (void *)swift_getObjectType();
  v12[0] = v10;
  return outlined assign with take of NSNotificationCenter.Notifications.NotificationWrapper?((uint64_t)v12, a1 + 8, &demangling cache variable for type metadata for Sendable?);
}

uint64_t outlined destroy of NSNotificationCenter.Notifications.State(uint64_t a1)
{
  return a1;
}

uint64_t destroy for NSNotificationCenter.Notifications.State(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 32)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  }

  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of NSNotificationCenter.Notifications.State(void *a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for NSNotificationCenter.Notifications.State(uint64_t a1, void *a2)
{
  *(void *)a1 = *a2;
  id v4 = (_OWORD *)(a1 + 8);
  id v5 = a2 + 1;
  uint64_t v6 = a2[4];
  swift_bridgeObjectRetain();
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v6 - 8))(a1 + 8, v5, v6);
  }
  else
  {
    long long v7 = v5[1];
    *id v4 = *v5;
    *(_OWORD *)(a1 + 24) = v7;
  }
  *(void *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined assign with take of NSNotificationCenter.Notifications.NotificationWrapper?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t NSNotificationCenter.Publisher.receive<A>(subscriber:)(uint64_t a1)
{
  uint64_t v3 = *(void **)v1;
  id v4 = *(void **)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = type metadata accessor for Notification.Subscription();
  swift_allocObject();
  swift_unknownObjectRetain();
  long long v7 = specialized Notification.Subscription.init(_:_:_:_:)(v3, v4, v5, a1);
  v9[3] = v6;
  double v9[4] = swift_getWitnessTable();
  v9[0] = v7;
  dispatch thunk of Subscriber.receive(subscription:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
}

uint64_t *specialized Notification.Subscription.init(_:_:_:_:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = a4;
  uint64_t v32 = *v4;
  uint64_t v8 = *(void *)(v32 + 80);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](a1);
  long long v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  int64_t v28 = (char *)&v27 - v13;
  id v14 = (_DWORD *)swift_slowAlloc();
  _DWORD *v14 = 0;
  uint64_t v4[2] = (uint64_t)v14;
  uint64_t v15 = (void *)swift_slowAlloc();
  *uint64_t v15 = 0;
  v4[3] = (uint64_t)v15;
  void v4[4] = 0;
  v4[5] = (uint64_t)a1;
  v4[6] = (uint64_t)a2;
  v4[7] = a3;
  v4[8] = 0;
  uint64_t v31 = a3;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  id v17 = a1;
  id v30 = a2;
  swift_unknownObjectRetain();
  int64_t v18 = v28;
  v16(v28, v29, v8);
  uint64_t v19 = swift_allocObject();
  swift_weakInit();
  v16(v11, (uint64_t)v18, v8);
  unint64_t v20 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v21 = (char *)swift_allocObject();
  uint64_t v22 = v32;
  *((void *)v21 + 2) = v8;
  *((void *)v21 + 3) = *(void *)(v22 + 88);
  *((void *)v21 + 4) = v19;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v21[v20], v11, v8);
  aBlock[4] = partial apply for closure #1 in Notification.Subscription.init(_:_:_:_:);
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  aBlock[3] = &block_descriptor_13;
  unint64_t v23 = _Block_copy(aBlock);
  id v24 = v30;
  swift_release();
  id v25 = objc_msgSend(v17, sel_addObserverForName_object_queue_usingBlock_, v24, v31, 0, v23);
  _Block_release(v23);

  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
  v4[8] = (uint64_t)v25;
  swift_unknownObjectRelease();
  return v4;
}

uint64_t type metadata accessor for Notification.Subscription()
{
  return __swift_instantiateGenericMetadata();
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Date()
{
  double v1 = *v0;
  id v2 = objc_allocWithZone(MEMORY[0x1E4F1C9C8]);

  return objc_msgSend(v2, sel_initWithTimeIntervalSinceReferenceDate_, v1);
}

uint64_t Locale.identifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 64))(ObjectType, v1);
}

uint64_t destroy for ExpressionStructure()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void _encodeInt32(uint64_t a1, const void *a2, int a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  addValueToTopContainerE(a1, a2, v5);
  CFRelease(v5);
}

uint64_t _BPlistEncodingFormat.Reference.__deallocating_deinit()
{
  outlined consume of _BPlistEncodingFormat.Reference.Backing(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));

  return swift_deallocClassInstance();
}

uint64_t _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  a4();
  uint64_t v7 = dispatch thunk of CodingKey.stringValue.getter();
  unint64_t v30 = v8;
  if (specialized Sequence.allSatisfy(_:)(v7, v8))
  {
    swift_bridgeObjectRetain();
    id v9 = (id)String.hashValue.getter();
    unsigned __int8 v10 = 1;
  }
  else
  {
    long long v11 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    id v9 = objc_msgSend(v11, sel_hash);
    swift_unknownObjectRelease();
    unsigned __int8 v10 = 0;
  }
  uint64_t v12 = *(void *)(v6 + 88);
  uint64_t v13 = v6;
  uint64_t v14 = *(void *)(v12 + 16);
  unint64_t v15 = *(void *)(v12 + 24);
  uint64_t v16 = *(void *)(v12 + 32);
  unint64_t v17 = v30;
  *(void *)(v12 + 16) = v7;
  *(void *)(v12 + 24) = v17;
  *(void *)(v12 + 32) = v9;
  unsigned __int8 v18 = *(unsigned char *)(v12 + 40);
  *(unsigned char *)(v12 + 40) = v10;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v7, v17, (uint64_t)v9, v10);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v14, v15, v16, v18);
  swift_retain();
  char v19 = specialized Set._Variant.insert(_:)(&v28, v12);
  uint64_t v20 = v28;
  if (v19)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 24) = 0;
    *(void *)(v21 + 32) = 0;
    *(void *)(v21 + 16) = 2;
    *(unsigned char *)(v21 + 40) = -112;
    *(void *)(v21 + 48) = -1;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v13 + 88) = v21;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_bridgeObjectRelease();
  if ((*(unsigned char *)(v5 + 40) & 0xF0) == 0x60)
  {
    uint64_t v28 = *(void *)(v5 + 16);
    long long v29 = *(_OWORD *)(v5 + 24);
    *(void *)(v5 + 16) = 2;
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 32) = 0;
    *(unsigned char *)(v5 + 40) = -112;
    swift_retain();
    uint64_t v23 = swift_retain();
    specialized OrderedDictionary.subscript.setter(v23, v20);
    uint64_t v24 = *(void *)(v5 + 16);
    unint64_t v25 = *(void *)(v5 + 24);
    uint64_t v26 = *(void *)(v5 + 32);
    *(void *)(v5 + 16) = v28;
    *(_OWORD *)(v5 + 24) = v29;
    unsigned __int8 v27 = *(unsigned char *)(v5 + 40);
    *(unsigned char *)(v5 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v24, v25, v26, v27);
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  unsigned __int8 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  long long v29;
  unint64_t v30;

  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  a4();
  uint64_t v7 = dispatch thunk of CodingKey.stringValue.getter();
  unint64_t v30 = v8;
  if (specialized Sequence.allSatisfy(_:)(v7, v8))
  {
    swift_bridgeObjectRetain();
    id v9 = (id)String.hashValue.getter();
    unsigned __int8 v10 = 1;
  }
  else
  {
    long long v11 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    id v9 = objc_msgSend(v11, sel_hash);
    swift_unknownObjectRelease();
    unsigned __int8 v10 = 0;
  }
  uint64_t v12 = *(void *)(v6 + 88);
  uint64_t v13 = v6;
  uint64_t v14 = *(void *)(v12 + 16);
  unint64_t v15 = *(void *)(v12 + 24);
  uint64_t v16 = *(void *)(v12 + 32);
  unint64_t v17 = v30;
  *(void *)(v12 + 16) = v7;
  *(void *)(v12 + 24) = v17;
  *(void *)(v12 + 32) = v9;
  unsigned __int8 v18 = *(unsigned char *)(v12 + 40);
  *(unsigned char *)(v12 + 40) = v10;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v7, v17, (uint64_t)v9, v10);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v14, v15, v16, v18);
  swift_retain();
  char v19 = specialized Set._Variant.insert(_:)(&v28, v12);
  uint64_t v20 = v28;
  if (v19)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 24) = 0;
    *(void *)(v21 + 32) = 0;
    *(void *)(v21 + 16) = 2;
    *(unsigned char *)(v21 + 40) = -112;
    *(void *)(v21 + 48) = -1;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v13 + 88) = v21;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_bridgeObjectRelease();
  if ((*(unsigned char *)(v5 + 40) & 0xF0) == 0x60)
  {
    uint64_t v28 = *(void *)(v5 + 16);
    long long v29 = *(_OWORD *)(v5 + 24);
    *(void *)(v5 + 16) = 2;
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 32) = 0;
    *(unsigned char *)(v5 + 40) = -112;
    swift_retain();
    uint64_t v23 = swift_retain();
    specialized OrderedDictionary.subscript.setter(v23, v20);
    uint64_t v24 = *(void *)(v5 + 16);
    unint64_t v25 = *(void *)(v5 + 24);
    uint64_t v26 = *(void *)(v5 + 32);
    *(void *)(v5 + 16) = v28;
    *(_OWORD *)(v5 + 24) = v29;
    unsigned __int8 v27 = *(unsigned char *)(v5 + 40);
    *(unsigned char *)(v5 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v24, v25, v26, v27);
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  unsigned __int8 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  long long v29;
  unint64_t v30;

  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  a4();
  uint64_t v7 = dispatch thunk of CodingKey.stringValue.getter();
  unint64_t v30 = v8;
  if (specialized Sequence.allSatisfy(_:)(v7, v8))
  {
    swift_bridgeObjectRetain();
    id v9 = (id)String.hashValue.getter();
    unsigned __int8 v10 = 1;
  }
  else
  {
    long long v11 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    id v9 = objc_msgSend(v11, sel_hash);
    swift_unknownObjectRelease();
    unsigned __int8 v10 = 0;
  }
  uint64_t v12 = *(void *)(v6 + 88);
  uint64_t v13 = v6;
  uint64_t v14 = *(void *)(v12 + 16);
  unint64_t v15 = *(void *)(v12 + 24);
  uint64_t v16 = *(void *)(v12 + 32);
  unint64_t v17 = v30;
  *(void *)(v12 + 16) = v7;
  *(void *)(v12 + 24) = v17;
  *(void *)(v12 + 32) = v9;
  unsigned __int8 v18 = *(unsigned char *)(v12 + 40);
  *(unsigned char *)(v12 + 40) = v10;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v7, v17, (uint64_t)v9, v10);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v14, v15, v16, v18);
  swift_retain();
  char v19 = specialized Set._Variant.insert(_:)(&v28, v12);
  uint64_t v20 = v28;
  if (v19)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 24) = 0;
    *(void *)(v21 + 32) = 0;
    *(void *)(v21 + 16) = 2;
    *(unsigned char *)(v21 + 40) = -112;
    *(void *)(v21 + 48) = -1;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v13 + 88) = v21;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_bridgeObjectRelease();
  if ((*(unsigned char *)(v5 + 40) & 0xF0) == 0x60)
  {
    uint64_t v28 = *(void *)(v5 + 16);
    long long v29 = *(_OWORD *)(v5 + 24);
    *(void *)(v5 + 16) = 2;
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 32) = 0;
    *(unsigned char *)(v5 + 40) = -112;
    swift_retain();
    uint64_t v23 = swift_retain();
    specialized OrderedDictionary.subscript.setter(v23, v20);
    uint64_t v24 = *(void *)(v5 + 16);
    unint64_t v25 = *(void *)(v5 + 24);
    uint64_t v26 = *(void *)(v5 + 32);
    *(void *)(v5 + 16) = v28;
    *(_OWORD *)(v5 + 24) = v29;
    unsigned __int8 v27 = *(unsigned char *)(v5 + 40);
    *(unsigned char *)(v5 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v24, v25, v26, v27);
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  unsigned __int8 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  long long v29;
  unint64_t v30;

  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  a4();
  uint64_t v7 = dispatch thunk of CodingKey.stringValue.getter();
  unint64_t v30 = v8;
  if (specialized Sequence.allSatisfy(_:)(v7, v8))
  {
    swift_bridgeObjectRetain();
    id v9 = (id)String.hashValue.getter();
    unsigned __int8 v10 = 1;
  }
  else
  {
    long long v11 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    id v9 = objc_msgSend(v11, sel_hash);
    swift_unknownObjectRelease();
    unsigned __int8 v10 = 0;
  }
  uint64_t v12 = *(void *)(v6 + 88);
  uint64_t v13 = v6;
  uint64_t v14 = *(void *)(v12 + 16);
  unint64_t v15 = *(void *)(v12 + 24);
  uint64_t v16 = *(void *)(v12 + 32);
  unint64_t v17 = v30;
  *(void *)(v12 + 16) = v7;
  *(void *)(v12 + 24) = v17;
  *(void *)(v12 + 32) = v9;
  unsigned __int8 v18 = *(unsigned char *)(v12 + 40);
  *(unsigned char *)(v12 + 40) = v10;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v7, v17, (uint64_t)v9, v10);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v14, v15, v16, v18);
  swift_retain();
  char v19 = specialized Set._Variant.insert(_:)(&v28, v12);
  uint64_t v20 = v28;
  if (v19)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 24) = 0;
    *(void *)(v21 + 32) = 0;
    *(void *)(v21 + 16) = 2;
    *(unsigned char *)(v21 + 40) = -112;
    *(void *)(v21 + 48) = -1;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v13 + 88) = v21;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_bridgeObjectRelease();
  if ((*(unsigned char *)(v5 + 40) & 0xF0) == 0x60)
  {
    uint64_t v28 = *(void *)(v5 + 16);
    long long v29 = *(_OWORD *)(v5 + 24);
    *(void *)(v5 + 16) = 2;
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 32) = 0;
    *(unsigned char *)(v5 + 40) = -112;
    swift_retain();
    uint64_t v23 = swift_retain();
    specialized OrderedDictionary.subscript.setter(v23, v20);
    uint64_t v24 = *(void *)(v5 + 16);
    unint64_t v25 = *(void *)(v5 + 24);
    uint64_t v26 = *(void *)(v5 + 32);
    *(void *)(v5 + 16) = v28;
    *(_OWORD *)(v5 + 24) = v29;
    unsigned __int8 v27 = *(unsigned char *)(v5 + 40);
    *(unsigned char *)(v5 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v24, v25, v26, v27);
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized _BPlistEncodingFormat.number<A>(from:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v3 + 16);
  unint64_t v4 = *(void *)(v3 + 24);
  uint64_t v6 = *(void *)(v3 + 32);
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  unsigned __int8 v7 = *(unsigned char *)(v3 + 40);
  *(unsigned char *)(v3 + 40) = 32;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v4, v6, v7);
  swift_retain();
  char v8 = specialized Set._Variant.insert(_:)(&v12, v3);
  uint64_t v9 = v12;
  if (v8)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 16) = 2;
    *(unsigned char *)(v10 + 40) = -112;
    *(void *)(v10 + 48) = -1;
    swift_release();
    *(void *)(v2 + 32) = v10;
  }
  return v9;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v3 + 16);
  unint64_t v4 = *(void *)(v3 + 24);
  uint64_t v6 = *(void *)(v3 + 32);
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  unsigned __int8 v7 = *(unsigned char *)(v3 + 40);
  *(unsigned char *)(v3 + 40) = 16;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v4, v6, v7);
  swift_retain();
  char v8 = specialized Set._Variant.insert(_:)(&v12, v3);
  uint64_t v9 = v12;
  if (v8)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 16) = 2;
    *(unsigned char *)(v10 + 40) = -112;
    *(void *)(v10 + 48) = -1;
    swift_release();
    *(void *)(v2 + 32) = v10;
  }
  return v9;
}

uint64_t _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(unint64_t a1, unint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v40 = v2[1];
  if (specialized Sequence.allSatisfy(_:)(a1, a2))
  {
    swift_bridgeObjectRetain();
    id v6 = (id)String.hashValue.getter();
    unsigned __int8 v7 = 1;
  }
  else
  {
    char v8 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    id v6 = objc_msgSend(v8, sel_hash);
    swift_unknownObjectRelease();
    unsigned __int8 v7 = 0;
  }
  uint64_t v9 = *(void *)(v5 + 88);
  uint64_t v10 = *(void *)(v9 + 16);
  unint64_t v11 = *(void *)(v9 + 24);
  uint64_t v12 = *(void *)(v9 + 32);
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  *(void *)(v9 + 32) = v6;
  unsigned __int8 v13 = *(unsigned char *)(v9 + 40);
  *(unsigned char *)(v9 + 40) = v7;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(a1, a2, (uint64_t)v6, v7);
  uint64_t v14 = v5;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v10, v11, v12, v13);
  swift_retain();
  if (specialized Set._Variant.insert(_:)(&v38, v9))
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 24) = 0;
    *(void *)(v15 + 32) = 0;
    *(void *)(v15 + 16) = 2;
    *(unsigned char *)(v15 + 40) = -112;
    *(void *)(v15 + 48) = -1;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v5 + 88) = v15;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v16 = dispatch thunk of CodingKey.stringValue.getter();
  unint64_t v18 = v17;
  if (specialized Sequence.allSatisfy(_:)(v16, v17))
  {
    swift_bridgeObjectRetain();
    id v19 = (id)String.hashValue.getter();
    unsigned __int8 v20 = 1;
  }
  else
  {
    uint64_t v21 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    id v19 = objc_msgSend(v21, sel_hash);
    swift_unknownObjectRelease();
    unsigned __int8 v20 = 0;
  }
  uint64_t v22 = *(void *)(v14 + 88);
  uint64_t v23 = *(void *)(v22 + 16);
  unint64_t v24 = *(void *)(v22 + 24);
  uint64_t v37 = v14;
  uint64_t v25 = *(void *)(v22 + 32);
  *(void *)(v22 + 16) = v16;
  *(void *)(v22 + 24) = v18;
  *(void *)(v22 + 32) = v19;
  unsigned __int8 v26 = *(unsigned char *)(v22 + 40);
  *(unsigned char *)(v22 + 40) = v20;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v16, v18, (uint64_t)v19, v20);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v23, v24, v25, v26);
  swift_retain();
  char v27 = specialized Set._Variant.insert(_:)(&v38, v22);
  uint64_t v28 = v38;
  if (v27)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 24) = 0;
    *(void *)(v29 + 32) = 0;
    *(void *)(v29 + 16) = 2;
    *(unsigned char *)(v29 + 40) = -112;
    *(void *)(v29 + 48) = -1;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v37 + 88) = v29;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v30 = v40;
  uint64_t result = swift_bridgeObjectRelease();
  if ((*(unsigned char *)(v30 + 40) & 0xF0) == 0x60)
  {
    uint64_t v38 = *(void *)(v30 + 16);
    long long v39 = *(_OWORD *)(v30 + 24);
    *(void *)(v30 + 16) = 2;
    *(void *)(v30 + 24) = 0;
    *(void *)(v30 + 32) = 0;
    *(unsigned char *)(v30 + 40) = -112;
    swift_retain();
    uint64_t v32 = swift_retain();
    specialized OrderedDictionary.subscript.setter(v32, v28);
    uint64_t v33 = *(void *)(v30 + 16);
    unint64_t v34 = *(void *)(v30 + 24);
    uint64_t v35 = *(void *)(v30 + 32);
    *(void *)(v30 + 16) = v38;
    *(_OWORD *)(v30 + 24) = v39;
    unsigned __int8 v36 = *(unsigned char *)(v30 + 40);
    *(unsigned char *)(v30 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v33, v34, v35, v36);
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _PlistKeyedEncodingContainerBPlist.encode<A>(_:forKey:)(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v52 = a4;
  unint64_t v53 = a5;
  unint64_t v51 = a1;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  v11.n128_f64[0] = MEMORY[0x1F4188790](v9);
  unsigned __int8 v13 = (char *)&v49 - v12;
  uint64_t v49 = a2;
  uint64_t v50 = v5;
  unint64_t v14 = *(void *)(*v5 + 40);
  uint64_t v15 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))((char *)&v49 - v12, a2, v8, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v8);
  uint64_t v16 = *(void *)(a3 + 24);
  swift_retain();
  uint64_t v17 = v56;
  uint64_t v18 = __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(v51, v14, (uint64_t)v13, v52, v8, v53, v16);
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    return swift_release();
  }
  id v19 = v50;
  if (v18)
  {
    unint64_t v52 = v18;
  }
  else
  {
    uint64_t v56 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x1E4FBC860]);
    unint64_t v52 = v21;
    unint64_t v53 = v20;
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v22 = swift_allocObject();
    unint64_t v23 = v53;
    *(void *)(v22 + 16) = v56;
    *(void *)(v22 + 24) = v23;
    *(void *)(v22 + 32) = v52;
    *(unsigned char *)(v22 + 40) = 96;
    unint64_t v52 = v22;
    *(void *)(v22 + 48) = -1;
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  swift_release();
  unsigned __int8 v26 = v19;
  uint64_t v25 = *v19;
  uint64_t v24 = v26[1];
  uint64_t v27 = dispatch thunk of CodingKey.stringValue.getter();
  unint64_t v29 = v28;
  char v30 = specialized Sequence.allSatisfy(_:)(v27, v28);
  uint64_t v56 = 0;
  if (v30)
  {
    swift_bridgeObjectRetain();
    id v31 = (id)String.hashValue.getter();
    unsigned __int8 v32 = 1;
  }
  else
  {
    uint64_t v33 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    id v31 = objc_msgSend(v33, sel_hash, v49);
    swift_unknownObjectRelease();
    unsigned __int8 v32 = 0;
  }
  uint64_t v34 = *(void *)(v25 + 88);
  uint64_t v35 = *(void *)(v34 + 16);
  unint64_t v36 = *(void *)(v34 + 24);
  uint64_t v37 = *(void *)(v34 + 32);
  *(void *)(v34 + 16) = v27;
  *(void *)(v34 + 24) = v29;
  *(void *)(v34 + 32) = v31;
  unint64_t v38 = v29;
  unsigned __int8 v39 = *(unsigned char *)(v34 + 40);
  *(unsigned char *)(v34 + 40) = v32;
  unint64_t v53 = v38;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v27, v38, (uint64_t)v31, v32);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v35, v36, v37, v39);
  swift_retain();
  char v40 = specialized Set._Variant.insert(_:)(&v54, v34);
  uint64_t v41 = v54;
  if (v40)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v42 = swift_allocObject();
    *(void *)(v42 + 24) = 0;
    *(void *)(v42 + 32) = 0;
    *(void *)(v42 + 16) = 2;
    *(unsigned char *)(v42 + 40) = -112;
    *(void *)(v42 + 48) = -1;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v25 + 88) = v42;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_bridgeObjectRelease();
  if ((*(unsigned char *)(v24 + 40) & 0xF0) == 0x60)
  {
    uint64_t v54 = *(void *)(v24 + 16);
    long long v55 = *(_OWORD *)(v24 + 24);
    *(void *)(v24 + 16) = 2;
    *(void *)(v24 + 24) = 0;
    *(void *)(v24 + 32) = 0;
    *(unsigned char *)(v24 + 40) = -112;
    swift_retain();
    uint64_t v44 = swift_retain();
    specialized OrderedDictionary.subscript.setter(v44, v41);
    uint64_t v45 = *(void *)(v24 + 16);
    unint64_t v46 = *(void *)(v24 + 24);
    uint64_t v47 = *(void *)(v24 + 32);
    *(void *)(v24 + 16) = v54;
    *(_OWORD *)(v24 + 24) = v55;
    unsigned __int8 v48 = *(unsigned char *)(v24 + 40);
    *(unsigned char *)(v24 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v45, v46, v47, v48);
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v47);
    Swift::Int v10 = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v12 = v10 & ~v11;
    if ((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
    {
      uint64_t v13 = swift_retain();
      char v14 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v13, a2);
      swift_release();
      if (v14)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
        swift_retain();
        return 0;
      }
      uint64_t v15 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v15;
        if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
          break;
        }
        uint64_t v16 = swift_retain();
        char v17 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v16, a2);
        swift_release();
        if (v17) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v47[0] = *v2;
    *uint64_t v2 = 0x8000000000000000;
    unint64_t v21 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v21, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v47[0];
LABEL_58:
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  if (v6 < 0) {
    uint64_t v7 = *v2;
  }
  else {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v8 = __CocoaSet.member(for:)();
  swift_release();
  if (v8)
  {
    swift_bridgeObjectRelease();
    swift_release();
    type metadata accessor for _BPlistEncodingFormat.Reference();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    *a1 = v47[0];
    swift_unknownObjectRelease();
    return 0;
  }
  uint64_t result = __CocoaSet.count.getter();
  if (__OFADD__(result, 1))
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  uint64_t v18 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
  if (*(void *)(v18 + 24) > *(void *)(v18 + 16))
  {
    swift_retain();
    uint64_t v19 = v18;
LABEL_57:
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v19);
    *uint64_t v3 = v19;
    goto LABEL_58;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<_BPlistEncodingFormat.Reference>);
  uint64_t v22 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v19 = v22;
  if (!*(void *)(v18 + 16))
  {
    swift_retain();
LABEL_56:
    swift_release();
    goto LABEL_57;
  }
  uint64_t v44 = v3;
  uint64_t v45 = a1;
  unint64_t v46 = (void *)(v18 + 56);
  uint64_t v23 = 1 << *(unsigned char *)(v18 + 32);
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  else {
    uint64_t v24 = -1;
  }
  unint64_t v25 = v24 & *(void *)(v18 + 56);
  int64_t v26 = (unint64_t)(v23 + 63) >> 6;
  uint64_t v27 = v22 + 56;
  uint64_t result = swift_retain();
  int64_t v28 = 0;
  while (1)
  {
    if (v25)
    {
      unint64_t v30 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      unint64_t v31 = v30 | (v28 << 6);
      goto LABEL_42;
    }
    int64_t v32 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    if (v32 >= v26)
    {
LABEL_51:
      uint64_t v43 = 1 << *(unsigned char *)(v18 + 32);
      if (v43 > 63) {
        bzero(v46, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        void *v46 = -1 << v43;
      }
      uint64_t v3 = v44;
      a1 = v45;
      *(void *)(v18 + 16) = 0;
      goto LABEL_56;
    }
    unint64_t v33 = v46[v32];
    ++v28;
    if (!v33)
    {
      int64_t v28 = v32 + 1;
      if (v32 + 1 >= v26) {
        goto LABEL_51;
      }
      unint64_t v33 = v46[v28];
      if (!v33)
      {
        int64_t v28 = v32 + 2;
        if (v32 + 2 >= v26) {
          goto LABEL_51;
        }
        unint64_t v33 = v46[v28];
        if (!v33)
        {
          int64_t v28 = v32 + 3;
          if (v32 + 3 >= v26) {
            goto LABEL_51;
          }
          unint64_t v33 = v46[v28];
          if (!v33) {
            break;
          }
        }
      }
    }
LABEL_41:
    unint64_t v25 = (v33 - 1) & v33;
    unint64_t v31 = __clz(__rbit64(v33)) + (v28 << 6);
LABEL_42:
    uint64_t v35 = *(void *)(*(void *)(v18 + 48) + 8 * v31);
    Hasher.init(_seed:)();
    _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v47);
    uint64_t result = Hasher._finalize()();
    uint64_t v36 = -1 << *(unsigned char *)(v19 + 32);
    unint64_t v37 = result & ~v36;
    unint64_t v38 = v37 >> 6;
    if (((-1 << v37) & ~*(void *)(v27 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v29 = __clz(__rbit64((-1 << v37) & ~*(void *)(v27 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v39 = 0;
      unint64_t v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_59;
        }
        BOOL v41 = v38 == v40;
        if (v38 == v40) {
          unint64_t v38 = 0;
        }
        v39 |= v41;
        uint64_t v42 = *(void *)(v27 + 8 * v38);
      }
      while (v42 == -1);
      unint64_t v29 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(void *)(v27 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    *(void *)(*(void *)(v19 + 48) + 8 * v29) = v35;
    ++*(void *)(v19 + 16);
  }
  int64_t v34 = v32 + 4;
  if (v34 >= v26) {
    goto LABEL_51;
  }
  unint64_t v33 = v46[v34];
  if (v33)
  {
    int64_t v28 = v34;
    goto LABEL_41;
  }
  while (1)
  {
    int64_t v28 = v34 + 1;
    if (__OFADD__(v34, 1)) {
      break;
    }
    if (v28 >= v26) {
      goto LABEL_51;
    }
    unint64_t v33 = v46[v28];
    ++v34;
    if (v33) {
      goto LABEL_41;
    }
  }
LABEL_61:
  __break(1u);
  return result;
}

uint64_t specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  v62[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t *)(result + 16);
  unint64_t v5 = *(void *)(result + 24);
  uint64_t v6 = *(void *)(result + 32);
  unsigned int v7 = *(unsigned __int8 *)(result + 40);
  uint64_t v8 = *(uint64_t *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  unsigned int v11 = *(unsigned __int8 *)(a2 + 40);
  switch(v7 >> 4)
  {
    case 0u:
      if (v11 >= 0x10) {
        goto LABEL_31;
      }
      if (v7)
      {
        if (v11)
        {
          if (v4 == v8 && v5 == v9) {
            char v12 = 1;
          }
          else {
            char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          outlined copy of _BPlistEncodingFormat.Reference.Backing(v4, v5, v6, v7);
          outlined copy of _BPlistEncodingFormat.Reference.Backing(v8, v9, v10, v11);
          goto LABEL_68;
        }
      }
      else if ((v11 & 1) == 0)
      {
        type metadata accessor for NSObject();
        String._bridgeToObjectiveCImpl()();
        String._bridgeToObjectiveCImpl()();
        outlined copy of _BPlistEncodingFormat.Reference.Backing(v4, v5, v6, v7);
        outlined copy of _BPlistEncodingFormat.Reference.Backing(v8, v9, v10, v11);
        char v12 = static NSObject.== infix(_:_:)();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
LABEL_68:
        outlined consume of _BPlistEncodingFormat.Reference.Backing(v4, v5, v6, v7);
        outlined consume of _BPlistEncodingFormat.Reference.Backing(v8, v9, v10, v11);
        return v12 & 1;
      }
LABEL_31:
      outlined copy of _BPlistEncodingFormat.Reference.Backing(*(void *)(result + 16), v5, v6, v7);
      outlined copy of _BPlistEncodingFormat.Reference.Backing(v8, v9, v10, v11);
      goto LABEL_32;
    case 1u:
      if ((v11 & 0xF0) != 0x10) {
        goto LABEL_31;
      }
      goto LABEL_7;
    case 2u:
      if ((v11 & 0xF0) == 0x20) {
        goto LABEL_7;
      }
      goto LABEL_31;
    case 3u:
      if ((v11 & 0xF0) != 0x30) {
        goto LABEL_31;
      }
      outlined consume of _BPlistEncodingFormat.Reference.Backing(*(void *)(result + 16), v5, v6, v7);
      outlined consume of _BPlistEncodingFormat.Reference.Backing(v8, v9, v10, v11);
      if (*(double *)&v4 == *(double *)&v8)
      {
        char v12 = 1;
        return v12 & 1;
      }
      if ((~v4 & 0x7FF0000000000000) != 0) {
        goto LABEL_33;
      }
      BOOL v18 = (~v8 & 0x7FF0000000000000) == 0;
      if ((v8 & 0xFFFFFFFFFFFFFLL) == 0) {
        BOOL v18 = 0;
      }
      char v12 = (v4 & 0xFFFFFFFFFFFFFLL) != 0 && v18;
      return v12 & 1;
    case 4u:
      if ((v11 & 0xF0) != 0x40) {
        goto LABEL_31;
      }
      outlined consume of _BPlistEncodingFormat.Reference.Backing(*(void *)(result + 16), v5, v6, v7);
      outlined consume of _BPlistEncodingFormat.Reference.Backing(v8, v9, v10, v11);
      BOOL v15 = (~v8 & 0x7F800000) == 0;
      if ((v8 & 0x7FFFFF) == 0) {
        BOOL v15 = 0;
      }
      char v17 = (~v4 & 0x7F800000) == 0 && (v4 & 0x7FFFFF) != 0 && v15;
      if (*(float *)&v4 == *(float *)&v8) {
        char v12 = 1;
      }
      else {
        char v12 = v17;
      }
      return v12 & 1;
    case 7u:
      if ((v11 & 0xF0) != 0x70) {
        goto LABEL_31;
      }
LABEL_7:
      outlined consume of _BPlistEncodingFormat.Reference.Backing(*(void *)(result + 16), v5, v6, v7);
      outlined consume of _BPlistEncodingFormat.Reference.Backing(v8, v9, v10, v11);
      char v12 = *(double *)&v4 == *(double *)&v8;
      return v12 & 1;
    case 8u:
      if ((v11 & 0xF0) != 0x80) {
        goto LABEL_31;
      }
      break;
    default:
      goto LABEL_31;
  }
  uint64_t v13 = (void *)(v5 >> 62);
  uint64_t v14 = 0;
  switch(v5 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v4), v4))
      {
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
        goto LABEL_140;
      }
      uint64_t v14 = HIDWORD(v4) - (int)v4;
LABEL_44:
      uint64_t result = outlined copy of Data._Representation(*(void *)(result + 16), v5);
LABEL_45:
      unint64_t v21 = v9 >> 62;
      switch(v9 >> 62)
      {
        case 1uLL:
          LODWORD(v22) = HIDWORD(v8) - v8;
          if (__OFSUB__(HIDWORD(v8), v8)) {
            goto LABEL_136;
          }
          uint64_t v22 = (int)v22;
LABEL_53:
          if (v14 != v22)
          {
LABEL_64:
            outlined copy of Data._Representation(v8, v9);
LABEL_32:
            outlined consume of _BPlistEncodingFormat.Reference.Backing(v4, v5, v6, v7);
            outlined consume of _BPlistEncodingFormat.Reference.Backing(v8, v9, v10, v11);
LABEL_33:
            char v12 = 0;
            return v12 & 1;
          }
          if (v14 < 1)
          {
LABEL_65:
            outlined copy of Data._Representation(v8, v9);
            outlined consume of _BPlistEncodingFormat.Reference.Backing(v4, v5, v6, v7);
            outlined consume of _BPlistEncodingFormat.Reference.Backing(v8, v9, v10, v11);
            char v12 = 1;
            return v12 & 1;
          }
          break;
        case 2uLL:
          uint64_t v2 = *(void *)(v8 + 16);
          uint64_t v23 = *(void *)(v8 + 24);
          BOOL v24 = __OFSUB__(v23, v2);
          uint64_t v22 = v23 - v2;
          if (!v24) {
            goto LABEL_53;
          }
          goto LABEL_137;
        case 3uLL:
LABEL_63:
          if (v14) {
            goto LABEL_64;
          }
          goto LABEL_65;
        default:
          uint64_t v22 = BYTE6(v9);
          goto LABEL_53;
      }
      break;
    case 2uLL:
      uint64_t v20 = *(void *)(v4 + 16);
      uint64_t v19 = *(void *)(v4 + 24);
      uint64_t v14 = v19 - v20;
      if (!__OFSUB__(v19, v20)) {
        goto LABEL_44;
      }
      goto LABEL_135;
    case 3uLL:
      goto LABEL_45;
    default:
      uint64_t v14 = BYTE6(v5);
      goto LABEL_45;
  }
  switch((int)v13)
  {
    case 1:
      if ((int)v4 > v4 >> 32) {
        goto LABEL_138;
      }
      uint64_t v3 = v5 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v2 = *(void *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (v2)
      {
        uint64_t v3 = *(void *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        if (!__OFSUB__((int)v4, v3))
        {
          uint64_t v13 = (void *)(v2 + (int)v4 - v3);
          goto LABEL_94;
        }
LABEL_140:
        __break(1u);
      }
      uint64_t v13 = 0;
LABEL_94:
      if (v21)
      {
        if (v21 == 1)
        {
          uint64_t v2 = (int)v8;
          uint64_t v37 = (v8 >> 32) - (int)v8;
          if (v8 >> 32 < (int)v8) {
            goto LABEL_149;
          }
          uint64_t v38 = v9 & 0x3FFFFFFFFFFFFFFFLL;
          uint64_t v3 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
          if (!v3) {
            goto LABEL_156;
          }
          uint64_t v40 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
          uint64_t v2 = (int)v8 - v40;
          if (__OFSUB__((int)v8, v40)) {
            goto LABEL_151;
          }
          if (v13)
          {
LABEL_100:
            __s2 = (uint64_t *)(v3 + v2);
            uint64_t v41 = *(void *)(v38 + 24);
            if (v41 >= v37) {
              size_t v33 = v37;
            }
            else {
              size_t v33 = v41;
            }
LABEL_131:
            outlined copy of Data._Representation(v8, v9);
            int64_t v34 = v13;
            uint64_t v35 = __s2;
LABEL_132:
            size_t v36 = v33;
LABEL_133:
            int v54 = memcmp(v34, v35, v36);
            outlined consume of _BPlistEncodingFormat.Reference.Backing(v4, v5, v6, v7);
            outlined consume of _BPlistEncodingFormat.Reference.Backing(v8, v9, v10, v11);
            char v12 = v54 == 0;
            return v12 & 1;
          }
          while (1)
          {
            __break(1u);
LABEL_158:
            if (!__OFSUB__(v3, v2))
            {
              __break(1u);
LABEL_160:
              if (!__OFSUB__(v3, v2)) {
                __break(1u);
              }
              goto LABEL_162;
            }
LABEL_107:
            __break(1u);
LABEL_108:
            uint64_t v42 = v9 & 0x3FFFFFFFFFFFFFFFLL;
            uint64_t v2 = *(void *)(v8 + 16);
            uint64_t v3 = *(void *)(v8 + 24);
            uint64_t v43 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
            if (!v43) {
              goto LABEL_160;
            }
            uint64_t v46 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
            BOOL v24 = __OFSUB__(v2, v46);
            uint64_t v45 = v2 - v46;
            if (!v24) {
              break;
            }
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            if (v13) {
              goto LABEL_172;
            }
LABEL_155:
            __break(1u);
LABEL_156:
            if (v13) {
              goto LABEL_173;
            }
          }
          BOOL v24 = __OFSUB__(v3, v2);
          uint64_t v2 = v3 - v2;
          if (!v24) {
            goto LABEL_111;
          }
LABEL_162:
          __break(1u);
          goto LABEL_163;
        }
        uint64_t v48 = v9 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v2 = *(void *)(v8 + 16);
        uint64_t v3 = *(void *)(v8 + 24);
        uint64_t v49 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (!v49) {
          goto LABEL_168;
        }
        uint64_t v52 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        BOOL v24 = __OFSUB__(v2, v52);
        uint64_t v51 = v2 - v52;
        if (v24) {
          goto LABEL_150;
        }
        BOOL v24 = __OFSUB__(v3, v2);
        uint64_t v2 = v3 - v2;
        if (v24)
        {
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
          goto LABEL_174;
        }
        if (!v13)
        {
LABEL_170:
          __break(1u);
          goto LABEL_171;
        }
        goto LABEL_128;
      }
      v62[0] = v8;
      LOWORD(v62[1]) = v9;
      BYTE2(v62[1]) = BYTE2(v9);
      BYTE3(v62[1]) = BYTE3(v9);
      BYTE4(v62[1]) = BYTE4(v9);
      BYTE5(v62[1]) = BYTE5(v9);
      if (v13)
      {
LABEL_123:
        size_t v33 = BYTE6(v9);
        outlined copy of Data._Representation(v8, v9);
        uint64_t v35 = v62;
        int64_t v34 = v13;
        goto LABEL_132;
      }
LABEL_167:
      __break(1u);
LABEL_168:
      if (__OFSUB__(v3, v2)) {
        goto LABEL_171;
      }
      if (!v13) {
        goto LABEL_170;
      }
LABEL_175:
      __break(1u);
      return result;
    case 2:
      uint64_t v28 = *(void *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (!v28)
      {
        uint64_t v13 = 0;
LABEL_86:
        if (v21)
        {
          if (v21 == 1)
          {
            uint64_t v2 = (int)v8;
            uint64_t v37 = (v8 >> 32) - (int)v8;
            if (v8 >> 32 < (int)v8) {
              goto LABEL_145;
            }
            uint64_t v38 = v9 & 0x3FFFFFFFFFFFFFFFLL;
            uint64_t v3 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
            if (!v3) {
              goto LABEL_154;
            }
            uint64_t v39 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
            uint64_t v2 = (int)v8 - v39;
            if (__OFSUB__((int)v8, v39)) {
              goto LABEL_148;
            }
            if (!v13) {
              goto LABEL_155;
            }
            goto LABEL_100;
          }
        }
        else
        {
          v62[0] = v8;
          LOWORD(v62[1]) = v9;
          BYTE2(v62[1]) = BYTE2(v9);
          BYTE3(v62[1]) = BYTE3(v9);
          BYTE4(v62[1]) = BYTE4(v9);
          BYTE5(v62[1]) = BYTE5(v9);
          if (v13) {
            goto LABEL_123;
          }
          __break(1u);
        }
        uint64_t v48 = v9 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v2 = *(void *)(v8 + 16);
        uint64_t v3 = *(void *)(v8 + 24);
        uint64_t v49 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (!v49)
        {
LABEL_163:
          if (__OFSUB__(v3, v2))
          {
LABEL_166:
            __break(1u);
            goto LABEL_167;
          }
          if (v13)
          {
LABEL_174:
            __break(1u);
            goto LABEL_175;
          }
LABEL_165:
          __break(1u);
          goto LABEL_166;
        }
        uint64_t v50 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        BOOL v24 = __OFSUB__(v2, v50);
        uint64_t v51 = v2 - v50;
        if (v24) {
          goto LABEL_146;
        }
        BOOL v24 = __OFSUB__(v3, v2);
        uint64_t v2 = v3 - v2;
        if (v24) {
          goto LABEL_166;
        }
        if (!v13) {
          goto LABEL_165;
        }
LABEL_128:
        __s2 = (uint64_t *)(v49 + v51);
        uint64_t v53 = *(void *)(v48 + 24);
        if (v53 >= v2) {
          size_t v33 = v2;
        }
        else {
          size_t v33 = v53;
        }
        goto LABEL_131;
      }
      uint64_t v3 = *(void *)(v4 + 16);
      uint64_t v29 = *(void *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
      BOOL v24 = __OFSUB__(v3, v29);
      uint64_t v30 = v3 - v29;
      if (!v24)
      {
        uint64_t v13 = (void *)(v28 + v30);
        goto LABEL_86;
      }
      goto LABEL_139;
    case 3:
      memset(v62, 0, 14);
      if (!v21) {
        goto LABEL_84;
      }
      if (v21 != 1) {
        goto LABEL_108;
      }
      uint64_t v25 = (v8 >> 32) - (int)v8;
      if (v8 >> 32 < (int)v8) {
        goto LABEL_142;
      }
      uint64_t v2 = v9 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v3 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (!v3) {
        goto LABEL_153;
      }
      uint64_t v31 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
      uint64_t v27 = (int)v8 - v31;
      if (!__OFSUB__((int)v8, v31)) {
        goto LABEL_81;
      }
      goto LABEL_147;
    default:
      v62[0] = v4;
      LOWORD(v62[1]) = v5;
      BYTE2(v62[1]) = BYTE2(v5);
      uint64_t v2 = HIDWORD(v5);
      BYTE3(v62[1]) = BYTE3(v5);
      BYTE4(v62[1]) = BYTE4(v5);
      BYTE5(v62[1]) = BYTE5(v5);
      if (!v21)
      {
LABEL_84:
        uint64_t v56 = v8;
        __int16 v57 = v9;
        char v58 = BYTE2(v9);
        char v59 = BYTE3(v9);
        char v60 = BYTE4(v9);
        char v61 = BYTE5(v9);
        outlined copy of Data._Representation(v8, v9);
        int64_t v34 = v62;
        uint64_t v35 = &v56;
        size_t v36 = BYTE6(v9);
        goto LABEL_133;
      }
      if (v21 == 1)
      {
        uint64_t v25 = (v8 >> 32) - (int)v8;
        if (v8 >> 32 >= (int)v8)
        {
          uint64_t v2 = v9 & 0x3FFFFFFFFFFFFFFFLL;
          uint64_t v3 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
          if (!v3) {
            goto LABEL_152;
          }
          uint64_t v26 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
          uint64_t v27 = (int)v8 - v26;
          if (__OFSUB__((int)v8, v26))
          {
            __break(1u);
            goto LABEL_63;
          }
LABEL_81:
          int64_t v32 = (uint64_t *)(v3 + v27);
          if (*(void *)(v2 + 24) >= v25) {
            size_t v33 = v25;
          }
          else {
            size_t v33 = *(void *)(v2 + 24);
          }
LABEL_114:
          outlined copy of Data._Representation(v8, v9);
          int64_t v34 = v62;
          uint64_t v35 = v32;
          goto LABEL_132;
        }
        __break(1u);
LABEL_142:
        __break(1u);
      }
      else
      {
        uint64_t v42 = v9 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v2 = *(void *)(v8 + 16);
        uint64_t v3 = *(void *)(v8 + 24);
        uint64_t v43 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (!v43) {
          goto LABEL_158;
        }
        uint64_t v44 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        BOOL v24 = __OFSUB__(v2, v44);
        uint64_t v45 = v2 - v44;
        if (!v24)
        {
          BOOL v24 = __OFSUB__(v3, v2);
          uint64_t v2 = v3 - v2;
          if (v24) {
            goto LABEL_107;
          }
LABEL_111:
          int64_t v32 = (uint64_t *)(v43 + v45);
          uint64_t v47 = *(void *)(v42 + 24);
          if (v47 >= v2) {
            size_t v33 = v2;
          }
          else {
            size_t v33 = v47;
          }
          goto LABEL_114;
        }
      }
      __break(1u);
      goto LABEL_144;
  }
}

uint64_t outlined consume of _BPlistEncodingFormat.Reference.Backing(uint64_t result, unint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  switch(a4 >> 4)
  {
    case 0:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 5:
      goto LABEL_6;
    case 6:
      swift_release();
      swift_release();
LABEL_6:
      uint64_t result = swift_release();
      break;
    case 8:
      uint64_t result = outlined consume of Data._Representation(result, a2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined copy of _BPlistEncodingFormat.Reference.Backing(uint64_t result, unint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  switch(a4 >> 4)
  {
    case 0:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    case 5:
      goto LABEL_6;
    case 6:
      swift_retain();
      swift_retain();
LABEL_6:
      uint64_t result = swift_retain();
      break;
    case 8:
      uint64_t result = outlined copy of Data._Representation(result, a2);
      break;
    default:
      return result;
  }
  return result;
}

void _BPlistEncodingFormat.Reference.hash(into:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  unsigned int v4 = *(unsigned __int8 *)(v1 + 40);
  switch(v4 >> 4)
  {
    case 0u:
      Hasher._combine(_:)(*(void *)(v1 + 32));
      break;
    case 1u:
    case 2u:
      Swift::UInt64 v5 = *(void *)(v1 + 16);
      goto LABEL_6;
    case 3u:
    case 7u:
      if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v5 = *(void *)(v1 + 16);
      }
      else {
        Swift::UInt64 v5 = 0;
      }
LABEL_6:
      Hasher._combine(_:)(v5);
      break;
    case 4u:
      if ((v2 & 0x7FFFFF) == 0 && (*(void *)(v1 + 16) & 0x7F800000) == 0) {
        Swift::UInt32 v7 = 0;
      }
      else {
        Swift::UInt32 v7 = *(void *)(v1 + 16);
      }
      Hasher._combine(_:)(v7);
      break;
    case 8u:
      Data.hash(into:)(a1, v2, v3);
      break;
    default:
      outlined copy of _BPlistEncodingFormat.Reference.Backing(v2, v3, *(void *)(v1 + 32), v4);
      _StringGuts.grow(_:)(79);
      v8._os_log_t object = (void *)0x80000001823AEEA0;
      v8._uint64_t countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v8);
      _print_unlocked<A, B>(_:_:)();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
  }
}

unint64_t specialized Sequence.allSatisfy(_:)(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v5 = 4 * v4;
  uint64_t v6 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0) {
    LOBYTE(v6) = 1;
  }
  uint64_t v7 = 4 << v6;
  uint64_t v16 = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v14 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  unint64_t v8 = 15;
  while (1)
  {
    unint64_t v9 = v8 >> 14;
    if (v8 >> 14 == v5) {
      return v9 == v5;
    }
    unint64_t v10 = v8 & 0xC;
    unint64_t result = v8;
    if (v10 == v7) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v8, a1, a2);
    }
    unint64_t v12 = result >> 16;
    if (result >> 16 >= v4) {
      break;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v13 = result;
      if (v10 == v7) {
        goto LABEL_24;
      }
LABEL_19:
      if ((a2 & 0x1000000000000000) == 0) {
        goto LABEL_7;
      }
LABEL_20:
      if (v4 <= v8 >> 16) {
        goto LABEL_28;
      }
      unint64_t v8 = String.UTF8View._foreignIndex(after:)();
      if (v13 < 0) {
        return v9 == v5;
      }
    }
    else
    {
      if ((a2 & 0x2000000000000000) != 0)
      {
        v15[0] = a1;
        v15[1] = v16;
        char v13 = *((unsigned char *)v15 + v12);
        if (v10 == v7) {
          goto LABEL_24;
        }
        goto LABEL_19;
      }
      unint64_t result = v14;
      if ((a1 & 0x1000000000000000) == 0) {
        unint64_t result = _StringObject.sharedUTF8.getter();
      }
      char v13 = *(unsigned char *)(result + v12);
      if (v10 != v7) {
        goto LABEL_19;
      }
LABEL_24:
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v8, a1, a2);
      unint64_t v8 = result;
      if ((a2 & 0x1000000000000000) != 0) {
        goto LABEL_20;
      }
LABEL_7:
      unint64_t v8 = (v8 & 0xFFFFFFFFFFFF0000) + 65540;
      if (v13 < 0) {
        return v9 == v5;
      }
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t result;
  unint64_t v11;
  unsigned __int8 v12;
  void v13[2];
  uint64_t v14;

  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 1;
  }
  uint64_t v5 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  uint64_t v6 = 4 << v5;
  uint64_t v14 = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v7 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  unint64_t v8 = 15;
  while (1)
  {
    unint64_t v9 = v8 & 0xC;
    unint64_t result = v8;
    if (v9 == v6) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v8, a1, a2);
    }
    unsigned int v11 = result >> 16;
    if (result >> 16 >= v2) {
      break;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      unint64_t v12 = result;
      if (v9 != v6) {
        goto LABEL_19;
      }
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v13[0] = a1;
      v13[1] = v14;
      unint64_t v12 = *((unsigned char *)v13 + v11);
      if (v9 != v6) {
        goto LABEL_19;
      }
    }
    else
    {
      unint64_t result = v7;
      if ((a1 & 0x1000000000000000) == 0) {
        unint64_t result = _StringObject.sharedUTF8.getter();
      }
      unint64_t v12 = *(unsigned char *)(result + v11);
      if (v9 != v6)
      {
LABEL_19:
        if ((a2 & 0x1000000000000000) == 0) {
          goto LABEL_20;
        }
        goto LABEL_23;
      }
    }
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v8, a1, a2);
    unint64_t v8 = result;
    if ((a2 & 0x1000000000000000) == 0)
    {
LABEL_20:
      unint64_t v8 = (v8 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_25;
    }
LABEL_23:
    if (v2 <= v8 >> 16) {
      goto LABEL_33;
    }
    unint64_t v8 = String.UTF8View._foreignIndex(after:)();
LABEL_25:
    if (((v12 & 0xDF) - 91) <= 0xE5u && (v12 - 58) <= 0xF5u)
    {
      unint64_t result = 0;
      if (v12 - 43 > 0x34 || ((1 << (v12 - 43)) & 0x10000000000015) == 0) {
        return result;
      }
    }
    if (4 * v2 == v8 >> 14) {
      return 1;
    }
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t result;
  unint64_t v12;
  char v13;
  uint64_t v14;
  void v15[2];
  uint64_t v16;

  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v5 = 4 * v4;
  uint64_t v6 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0) {
    LOBYTE(v6) = 1;
  }
  uint64_t v7 = 4 << v6;
  uint64_t v16 = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v14 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  unint64_t v8 = 15;
  while (1)
  {
    unint64_t v9 = v8 >> 14;
    if (v8 >> 14 == v5) {
      return v9 == v5;
    }
    unint64_t v10 = v8 & 0xC;
    unint64_t result = v8;
    if (v10 == v7) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v8, a1, a2);
    }
    unint64_t v12 = result >> 16;
    if (result >> 16 >= v4) {
      break;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v13 = result;
      if (v10 != v7) {
        goto LABEL_20;
      }
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v15[0] = a1;
      v15[1] = v16;
      char v13 = *((unsigned char *)v15 + v12);
      if (v10 != v7) {
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t result = v14;
      if ((a1 & 0x1000000000000000) == 0) {
        unint64_t result = _StringObject.sharedUTF8.getter();
      }
      char v13 = *(unsigned char *)(result + v12);
      if (v10 != v7)
      {
LABEL_20:
        if ((a2 & 0x1000000000000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_21;
      }
    }
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v8, a1, a2);
    unint64_t v8 = result;
    if ((a2 & 0x1000000000000000) == 0)
    {
LABEL_7:
      unint64_t v8 = (v8 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_8;
    }
LABEL_21:
    if (v4 <= v8 >> 16) {
      goto LABEL_28;
    }
    unint64_t v8 = String.UTF8View._foreignIndex(after:)();
LABEL_8:
    if ((v13 - 58) < 0xF6u) {
      return v9 == v5;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized OrderedDictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v7 = *v2;
  uint64_t v6 = v2[1];
  uint64_t v8 = *(void *)(v6 + 16);
  swift_retain();
  if (v7)
  {
    swift_retain();
    unint64_t v9 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a2, v6 + 32, v8, (void *)(v7 + 16));
    char v11 = v10;
    uint64_t v13 = v12;
  }
  else
  {
    unint64_t v9 = specialized Collection<>.firstIndex(of:)(a2, v6 + 32, v8);
    char v11 = v14;
    uint64_t v13 = 0;
  }
  swift_release();
  swift_release();
  if ((v11 & 1) == 0)
  {
    if (!a1)
    {
      specialized OrderedSet._removeExistingMember(at:in:)(v9, v13);
      swift_release();
      specialized ContiguousArray.remove(at:)(v9, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
      swift_release();
      goto LABEL_15;
    }
    uint64_t v15 = v3[2];
    swift_retain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    v3[2] = v15;
    if ((result & 1) == 0) {
      specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    }
    if ((v9 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v9 < *(void *)(v15 + 16))
    {
      swift_retain();
      swift_release();
      *(void *)(v15 + 8 * v9 + 32) = a1;
LABEL_13:
      specialized ContiguousArray._endMutation()();
      swift_release_n();
      goto LABEL_15;
    }
    __break(1u);
    return result;
  }
  if (a1)
  {
    swift_retain();
    specialized OrderedSet._appendNew(_:in:)();
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    goto LABEL_13;
  }
LABEL_15:

  return swift_release();
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v5 = swift_retain();
  char v6 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v5, a1);
  swift_release();
  uint64_t v7 = 0;
  if ((v6 & 1) == 0)
  {
    while (a3 - 1 != v7)
    {
      uint64_t v8 = swift_retain();
      char v9 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v8, a1);
      swift_release();
      ++v7;
      if (v9) {
        return v7;
      }
    }
    return 0;
  }
  return v7;
}

uint64_t specialized OrderedSet._appendNew(_:in:)()
{
  swift_retain();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  uint64_t v1 = *(void *)(v0[1] + 16);
  if (*v0)
  {
    if (MEMORY[0x1853011C0](*(void *)(*v0 + 16) & 0x3FLL) >= v1)
    {
      uint64_t result = swift_isUniquelyReferenced_native();
      uint64_t v3 = *v0;
      if ((result & 1) == 0)
      {
        if (!v3) {
          goto LABEL_16;
        }
        uint64_t v3 = _HashTable.copy()();
        uint64_t result = swift_release();
        *uint64_t v0 = v3;
      }
      if (v3)
      {
        return _HashTable.UnsafeHandle.subscript.setter();
      }
      __break(1u);
LABEL_16:
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t result = static _HashTable.maximumUnhashedCount.getter();
    if (result >= v1) {
      return result;
    }
  }

  return specialized OrderedSet._regenerateHashTable()();
}

uint64_t __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v45 = a7;
  uint64_t v8 = v7;
  unint64_t v43 = a6;
  uint64_t v44 = a5;
  uint64_t v13 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  BOOL v18 = (char *)&v41 - v17;
  MEMORY[0x1F4188790](v19);
  unint64_t v21 = (char *)&v41 - v20;
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, unint64_t, unint64_t))(v13 + 16))(v21, a1, a4);
    swift_dynamicCast();
    uint64_t v22 = *(void *)(v8 + 88);
    uint64_t v23 = *(void *)(v22 + 16);
    unint64_t v24 = *(void *)(v22 + 24);
    uint64_t v25 = *(void *)(v22 + 32);
    *(void *)(v22 + 16) = v47;
    *(void *)(v22 + 24) = 0;
    *(void *)(v22 + 32) = 0;
    unsigned __int8 v26 = *(unsigned char *)(v22 + 40);
    *(unsigned char *)(v22 + 40) = 112;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v23, v24, v25, v26);
    swift_retain();
    char v27 = specialized Set._Variant.insert(_:)(&v49, v22);
    uint64_t v28 = v49;
    if (v27)
    {
      type metadata accessor for _BPlistEncodingFormat.Reference();
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 24) = 0;
      *(void *)(v29 + 32) = 0;
      *(void *)(v29 + 16) = 2;
      *(unsigned char *)(v29 + 40) = -112;
      *(void *)(v29 + 48) = -1;
      swift_release();
      *(void *)(v8 + 88) = v29;
    }
  }
  else
  {
    unint64_t v30 = a1;
    unint64_t v41 = a2;
    uint64_t v42 = a3;
    uint64_t v32 = v44;
    uint64_t v31 = v45;
    if (swift_dynamicCastMetatype())
    {
      (*(void (**)(char *, unint64_t, unint64_t))(v13 + 16))(v18, v30, a4);
      swift_dynamicCast();
      uint64_t v33 = v47;
      unint64_t v34 = v48;
      uint64_t v28 = _BPlistEncodingFormat.data(_:)(v47, v48);
      outlined consume of Data._Representation(v33, v34);
    }
    else
    {
      uint64_t v35 = swift_conformsToProtocol2();
      if (v35) {
        unint64_t v36 = a4;
      }
      else {
        unint64_t v36 = 0;
      }
      if (v36)
      {
        (*(void (**)(char *, unint64_t, unint64_t))(v13 + 16))(v15, v30, a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Encodable]);
        swift_dynamicCast();
        uint64_t v28 = __PlistEncoderBPlist.wrap<A>(_:for:_:)(v47, v41, v42, v32, v31);
        swift_bridgeObjectRelease();
      }
      else
      {
        MEMORY[0x1F4188790](v35);
        *(&v41 - 6) = a4;
        *(&v41 - 5) = v32;
        uint64_t v37 = v42;
        *(&v41 - 4) = v43;
        *(&v41 - 3) = v31;
        *(&v41 - 2) = v30;
        uint64_t v28 = v8;
        uint64_t v38 = v46;
        uint64_t v39 = __PlistEncoderBPlist._wrapGeneric<A>(_:for:_:)((void (*)(void *))partial apply for closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:), (uint64_t)(&v41 - 8), v41, v37, v32, v31);
        if (!v38) {
          return v39;
        }
      }
    }
  }
  return v28;
}

uint64_t __PlistEncoderBPlist._wrapGeneric<A>(_:for:_:)(void (*a1)(void *), uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v48 = a4;
  uint64_t v7 = v6;
  uint64_t v43 = a6;
  uint64_t v44 = a2;
  unint64_t v49 = a3;
  uint64_t v45 = a1;
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v42 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  BOOL v18 = (char *)&v41 - v17;
  uint64_t v19 = v7[2];
  unint64_t v41 = v7 + 2;
  unint64_t v46 = *(void *)(v19 + 16);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16);
  v20((char *)&v41 - v17, v48, v11, v16);
  ((void (*)(char *, char *, uint64_t))v20)(v14, v18, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, a5) != 1)
  {
    char v27 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    uint64_t v28 = v42;
    v27(v42, v14, a5);
    uint64_t v29 = (uint64_t *)swift_allocObject();
    uint64_t v30 = v43;
    v29[5] = a5;
    v29[6] = v30;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29 + 2);
    v27((char *)boxed_opaque_existential_1, v28, a5);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v18, v11);
    unint64_t v33 = v49;
    v29[7] = v49;
    unint64_t v34 = v33 >> 62;
    if (v33 >> 62)
    {
      if (v34 != 1)
      {
        uint64_t v26 = 1;
        if (!__OFSUB__(v34, 1)) {
          goto LABEL_12;
        }
        goto LABEL_27;
      }
      uint64_t v35 = (uint64_t *)((v33 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      uint64_t v35 = (uint64_t *)(v33 + 64);
    }
    uint64_t v36 = *v35;
    uint64_t result = swift_retain();
    BOOL v37 = __OFADD__(v36, 1);
    uint64_t v26 = v36 + 1;
    if (!v37)
    {
LABEL_12:
      v29[8] = v26;
      uint64_t v23 = v7[5];
      uint64_t v22 = v7[6];
      v7[5] = v29;
      goto LABEL_13;
    }
LABEL_27:
    __break(1u);
    return result;
  }
  unint64_t v21 = *(void (**)(char *, uint64_t))(v12 + 8);
  v21(v18, v11);
  v21(v14, v11);
  uint64_t v23 = v7[5];
  uint64_t v22 = v7[6];
  unint64_t v24 = v49;
  unint64_t v25 = v49 >> 62;
  v7[5] = v49;
  if (v24 >> 62)
  {
    if (v25 != 1)
    {
      uint64_t v26 = 0;
      goto LABEL_14;
    }
    uint64_t v26 = *(void *)((v24 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
    swift_retain();
  }
  else
  {
    uint64_t v26 = *(void *)(v24 + 64);
    swift_retain();
  }
LABEL_13:
  swift_retain();
LABEL_14:
  v7[6] = v26;
  uint64_t v38 = v47;
  v45(v7);
  if (v38)
  {
    v7[5] = v23;
    swift_retain();
    swift_release();
    v7[6] = v22;
    swift_release();
    swift_release();
    if (v46 < *(void *)(v7[2] + 16))
    {
      uint64_t v39 = v41;
      if (!specialized ContiguousArray._customRemoveLast()((uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew())) {
        specialized ContiguousArray.remove(at:)(*(void *)(*v39 + 16) - 1, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
      }
      swift_release();
    }
    return swift_willThrow();
  }
  else
  {
    v7[5] = v23;
    swift_retain();
    swift_release();
    v7[6] = v22;
    swift_release();
    swift_release();
    if (v46 >= *(void *)(v7[2] + 16))
    {
      return 0;
    }
    else
    {
      uint64_t v40 = v41;
      uint64_t result = specialized ContiguousArray._customRemoveLast()((uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
      if (!result) {
        return specialized ContiguousArray.remove(at:)(*(void *)(*v40 + 16) - 1, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
      }
    }
  }
  return result;
}

uint64_t specialized ContiguousArray._customRemoveLast()(uint64_t (*a1)(uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v1 = v3;
  if ((result & 1) == 0)
  {
    uint64_t result = a1(v3);
    uint64_t v3 = result;
    uint64_t *v1 = result;
  }
  uint64_t v5 = *(void *)(v3 + 16);
  if (v5)
  {
    uint64_t v6 = v5 - 1;
    uint64_t v7 = *(void *)(v3 + 8 * v6 + 32);
    *(void *)(v3 + 16) = v6;
    specialized ContiguousArray._endMutation()();
    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  return closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(a1);
}

uint64_t closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  v4[3] = type metadata accessor for __PlistEncoderBPlist();
  void v4[4] = lazy protocol witness table accessor for type _BPlistEncodingFormat.Reference and conformance _BPlistEncodingFormat.Reference(&lazy protocol witness table cache variable for type __PlistEncoderBPlist and conformance __PlistEncoderBPlist, v2, (void (*)(uint64_t))type metadata accessor for __PlistEncoderBPlist);
  v4[0] = a1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t type metadata accessor for __PlistEncoderBPlist()
{
  return self;
}

uint64_t lazy protocol witness table accessor for type _BPlistEncodingFormat.Reference and conformance _BPlistEncodingFormat.Reference(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t __PlistEncoderBPlist.container<A>(keyedBy:)()
{
  if ((*(uint64_t (**)(void))(*v0 + 240))())
  {
    uint64_t v1 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x1E4FBC860]);
    uint64_t v3 = v2;
    uint64_t v5 = v4;
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v1;
    *(void *)(v6 + 24) = v3;
    *(void *)(v6 + 32) = v5;
    *(unsigned char *)(v6 + 40) = 96;
    *(void *)(v6 + 48) = -1;
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_5:
    type metadata accessor for _PlistKeyedEncodingContainerBPlist();
    swift_retain();
    swift_retain();
    swift_getWitnessTable();
    return KeyedEncodingContainer.init<A>(_:)();
  }
  uint64_t result = specialized BidirectionalCollection.last.getter(v0[2]);
  if (result)
  {
    if ((*(unsigned char *)(result + 40) & 0xF0) == 0x60) {
      goto LABEL_5;
    }
    uint64_t result = swift_release();
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for _BPlistEncodingFormat.Reference()
{
  return self;
}

BOOL __PlistEncoderBPlist.canEncodeNewValue.getter()
{
  return *(void *)(*(void *)(v0 + 16) + 16) == *(void *)(v0 + 48);
}

uint64_t specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1E4FBC860];
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0)
  {
    unint64_t v26 = MEMORY[0x1E4FBC860];
    uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(MEMORY[0x1E4FBC860]);
    specialized _copyCollectionToContiguousArray<A>(_:)(v26);
  }
  uint64_t v27 = 0;
  Swift::Int v28 = (Swift::Int)v2;
  uint64_t v3 = *(void *)(a1 + 16);
  specialized OrderedSet._reserveCapacity(_:persistent:)(v3, 0);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v3) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = 0;
  while (1)
  {
    uint64_t v6 = *(void *)(a1 + 32 + 16 * v4);
    uint64_t v7 = *(void *)(v28 + 16);
    if (v27)
    {
      swift_retain();
      swift_retain();
      swift_retain();
      specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v6, v28 + 32, v7, (void *)(v27 + 16));
      char v9 = v8;
      uint64_t result = swift_release();
      if ((v9 & 1) == 0) {
        goto LABEL_36;
      }
      goto LABEL_19;
    }
    if (!v7)
    {
      swift_retain();
      swift_retain();
      goto LABEL_19;
    }
    swift_retain();
    swift_retain();
    uint64_t v11 = swift_retain();
    char v12 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v11, v6);
    uint64_t result = swift_release();
    if (v12) {
      goto LABEL_36;
    }
    if (v7 != 1) {
      break;
    }
LABEL_19:
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    uint64_t v19 = v27;
    uint64_t v20 = *(void *)(v28 + 16);
    if (v27)
    {
      if (MEMORY[0x1853011C0](*(void *)(v27 + 16) & 0x3FLL) < v20)
      {
        uint64_t v21 = *(void *)(v27 + 24) & 0x3FLL;
LABEL_23:
        uint64_t v22 = static _HashTable.maximumUnhashedCount.getter();
        if (v21 || v22 < v20)
        {
          uint64_t v24 = MEMORY[0x185301200](v20);
          if (v21 <= v24) {
            uint64_t v25 = v24;
          }
          else {
            uint64_t v25 = v21;
          }
          uint64_t v5 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v28, v25, 0, v21);
          swift_release();
          uint64_t v27 = v5;
        }
        else
        {
          swift_release();
          uint64_t v5 = 0;
          uint64_t v27 = 0;
        }
        goto LABEL_6;
      }
      if ((swift_isUniquelyReferenced_native() & 1) == 0)
      {
        uint64_t v23 = _HashTable.copy()();
        uint64_t result = swift_release();
        uint64_t v27 = v23;
        uint64_t v19 = v23;
        if (!v23) {
          goto LABEL_37;
        }
      }
      _HashTable.UnsafeHandle.subscript.setter();
      uint64_t v5 = v19;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v5 = 0;
      if (static _HashTable.maximumUnhashedCount.getter() < v20) {
        goto LABEL_23;
      }
    }
LABEL_6:
    ++v4;
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    swift_release();
    swift_release();
    if (v4 == v3)
    {
      swift_bridgeObjectRelease();
      return v5;
    }
  }
  uint64_t v13 = swift_retain();
  char v14 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v13, v6);
  uint64_t result = swift_release();
  if ((v14 & 1) == 0)
  {
    uint64_t v15 = v7 - 2;
    Swift::Int v16 = v28 + 48;
    while (v15)
    {
      v16 += 8;
      uint64_t v17 = swift_retain();
      char v18 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v17, v6);
      uint64_t result = swift_release();
      --v15;
      if (v18) {
        goto LABEL_36;
      }
    }
    goto LABEL_19;
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized OrderedSet._reserveCapacity(_:persistent:)(uint64_t result, char a2)
{
  if (result < 0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v3 = v2;
  uint64_t v5 = result;
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v7 = *v2;
  Swift::Int v6 = v2[1];
  if (*v2)
  {
    uint64_t v8 = *(void *)(v7 + 16) & 0x3FLL;
    uint64_t v9 = MEMORY[0x185301200](v5);
    if (a2)
    {
      uint64_t v10 = v9;
      if (v8 >= v9) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v10 = *(void *)(v7 + 24) & 0x3FLL;
      if (v8 >= v9) {
        goto LABEL_14;
      }
    }
LABEL_10:
    if (v10 <= v9) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = v10;
    }
    goto LABEL_24;
  }
  uint64_t v9 = MEMORY[0x185301200](v5);
  uint64_t v8 = 0;
  if (a2) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v9 > 0) {
    goto LABEL_10;
  }
LABEL_14:
  if (v10 <= v9) {
    uint64_t v12 = v9;
  }
  else {
    uint64_t v12 = v10;
  }
  uint64_t result = MEMORY[0x185301200](*(void *)(v6 + 16));
  if (result <= v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = result;
  }
  if (v13 < v8)
  {
    if (v10 <= v13) {
      uint64_t v11 = v13;
    }
    else {
      uint64_t v11 = v10;
    }
LABEL_24:
    uint64_t v14 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v6, v11, 0, v10);
    uint64_t result = swift_release();
    *uint64_t v3 = v14;
    return result;
  }
  if (!v7 || (uint64_t result = swift_isUniquelyReferenced_native(), result))
  {
    uint64_t v15 = *v3;
    if (*v3) {
      goto LABEL_29;
    }
LABEL_33:
    if (!v10) {
      return result;
    }
    __break(1u);
    goto LABEL_35;
  }
  uint64_t result = *v3;
  if (!*v3)
  {
LABEL_36:
    __break(1u);
    return result;
  }
  uint64_t v15 = _HashTable.copy()();
  uint64_t result = swift_release();
  *uint64_t v3 = v15;
  if (!v15) {
    goto LABEL_33;
  }
LABEL_29:
  if ((*(void *)(v15 + 24) & 0x3FLL) != v10) {
    *(void *)(v15 + 24) = *(void *)(v15 + 24) & 0xFFFFFFFFFFFFFFC0 | v10 & 0x3F;
  }
  return result;
}

uint64_t type metadata accessor for _PlistKeyedEncodingContainerBPlist()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance Calendar.CodingKeys()
{
  unint64_t result = 0x696669746E656469;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x656C61636F6CLL;
      break;
    case 2:
      unint64_t result = 0x656E6F5A656D6974;
      break;
    case 3:
      unint64_t result = 0x6565577473726966;
      break;
    case 4:
      unint64_t result = 0xD000000000000016;
      break;
    case 5:
      unint64_t result = 0x746E6572727563;
      break;
    default:
      return result;
  }
  return result;
}

void Data.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  switch(a3 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a2), a2))
      {
        __break(1u);
LABEL_24:
        __break(1u);
      }
      else
      {
        Hasher._combine(_:)(HIDWORD(a2) - (int)a2);
        uint64_t v5 = (int)a2 + 80;
        if (a2 >> 32 < v5) {
          uint64_t v5 = a2 >> 32;
        }
        if (v5 >= (int)a2)
        {
          if (!*(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x10)
            || !__OFSUB__((int)a2, *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x28)))
          {
            goto LABEL_21;
          }
          goto LABEL_29;
        }
      }
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    case 2uLL:
      uint64_t v7 = *(void *)(a2 + 16);
      uint64_t v6 = *(void *)(a2 + 24);
      if (__OFSUB__(v6, v7)) {
        goto LABEL_24;
      }
      Hasher._combine(_:)(v6 - v7);
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = v8 + 80;
      if (__OFADD__(v8, 80)) {
        goto LABEL_26;
      }
      if (*(void *)(a2 + 24) < v9) {
        uint64_t v9 = *(void *)(a2 + 24);
      }
      if (v9 < v8) {
        goto LABEL_27;
      }
      if (!*(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x10))
      {
        if (!__OFSUB__(v9, v8)) {
          goto LABEL_21;
        }
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
      }
      if (__OFSUB__(v8, *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x28))) {
        goto LABEL_30;
      }
      if (__OFSUB__(v9, v8)) {
        goto LABEL_28;
      }
LABEL_21:
      Hasher.combine(bytes:)();
      return;
    case 3uLL:
      Hasher._combine(_:)(0);
      return;
    default:
      Hasher._combine(_:)(BYTE6(a3));
      goto LABEL_21;
  }
}

unsigned char *storeEnumTagSinglePayload for Calendar.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

uint64_t _BPlistEncodingFormat.data(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 + 32);
  uint64_t v5 = *(void *)(v4 + 16);
  unint64_t v6 = *(void *)(v4 + 24);
  uint64_t v7 = *(void *)(v4 + 32);
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = 0;
  unsigned __int8 v8 = *(unsigned char *)(v4 + 40);
  *(unsigned char *)(v4 + 40) = 0x80;
  outlined copy of Data._Representation(a1, a2);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v6, v7, v8);
  swift_retain();
  char v9 = specialized Set._Variant.insert(_:)(&v13, v4);
  uint64_t v10 = v13;
  if (v9)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 24) = 0;
    *(void *)(v11 + 32) = 0;
    *(void *)(v11 + 16) = 2;
    *(unsigned char *)(v11 + 40) = -112;
    *(void *)(v11 + 48) = -1;
    swift_release();
    *(void *)(v3 + 32) = v11;
  }
  return v10;
}

Swift::UInt8_optional protocol witness for IteratorProtocol.next() in conformance Data.Iterator@<W0>(Swift::UInt8 *a1@<X8>)
{
  Swift::UInt8_optional result = Data.Iterator.next()();
  *a1 = result.value;
  a1[1] = result.is_nil;
  return result;
}

Swift::UInt8_optional __swiftcall Data.Iterator.next()()
{
  uint64_t v23[2] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  if (v1 < v2)
  {
    *(void *)(v0 + 48) = v1 + 1;
    uint64_t v4 = *(void *)v0;
    unint64_t v5 = *(void *)(v0 + 8);
    switch(v5 >> 62)
    {
      case 1uLL:
        uint64_t v6 = (int)v4;
        break;
      case 2uLL:
        uint64_t v6 = *(void *)(v4 + 16);
        break;
      default:
        uint64_t v4 = outlined consume of Data._Representation(v4, v5);
        uint64_t v6 = 0;
        break;
    }
    BOOL v7 = __OFSUB__(v1, v6);
    uint64_t v8 = v1 - v6;
    if (v7)
    {
      __break(1u);
    }
    else
    {
      BOOL v9 = -v8 < 0;
      uint64_t v10 = -v8 & 0x1F;
      uint64_t v11 = v8 & 0x1F;
      if (v9) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = -v10;
      }
      if (v12) {
        goto LABEL_17;
      }
      long long v13 = *(_OWORD *)(v0 + 32);
      long long v21 = *(_OWORD *)(v0 + 16);
      long long v22 = v13;
      uint64_t v14 = *(void *)(v0 + 56);
      if (!__OFSUB__(v14, v1))
      {
        uint64_t v15 = *(void *)v0;
        unint64_t v16 = *(void *)(v0 + 8);
        if (v14 - v1 >= 33)
        {
          uint64_t v14 = v1 + 32;
          if (__OFADD__(v1, 32)) {
LABEL_22:
          }
            __break(1u);
        }
        if (v14 >= v1)
        {
          v23[0] = *(void *)v0;
          v23[1] = v16;
          v20[0] = v1;
          v20[1] = v14;
          MEMORY[0x1F4188790](v4);
          v19[2] = v23;
          void v19[3] = v20;
          v19[4] = &v21;
          v19[5] = 32;
          outlined copy of Data._Representation(v15, v16);
          specialized Data._Representation.withUnsafeBytes<A>(_:)((uint64_t (*)(uint64_t, uint64_t))partial apply for specialized closure #1 in DataProtocol<>.copyBytes<A, B>(to:from:), (uint64_t)v19, v15, v16);
          outlined consume of Data._Representation(v15, v16);
          long long v17 = v22;
          *(_OWORD *)(v0 + 16) = v21;
          *(_OWORD *)(v0 + 32) = v17;
LABEL_17:
          __int16 v3 = *(unsigned __int8 *)(v0 + v12 + 16);
          return (Swift::UInt8_optional)(v3 | ((v1 >= v2) << 8));
        }
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  __int16 v3 = 0;
  return (Swift::UInt8_optional)(v3 | ((v1 >= v2) << 8));
}

uint64_t specialized Data._Representation.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, unint64_t a4)
{
  void v11[2] = *MEMORY[0x1E4F143B8];
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3) {
        __break(1u);
      }
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a3, a3 >> 32, a1);
      uint64_t result = outlined consume of Data._Representation(a3, a4);
      break;
    case 2uLL:
      uint64_t v9 = *(void *)(a3 + 16);
      uint64_t v10 = *(void *)(a3 + 24);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v9, v10, a1);
      swift_release();
      uint64_t result = swift_release();
      break;
    case 3uLL:
      memset(v11, 0, 14);
      BOOL v7 = (char *)v11;
      goto LABEL_7;
    default:
      v11[0] = a3;
      LOWORD(v11[1]) = a4;
      BYTE2(v11[1]) = BYTE2(a4);
      BYTE3(v11[1]) = BYTE3(a4);
      BYTE4(v11[1]) = BYTE4(a4);
      BYTE5(v11[1]) = BYTE5(a4);
      BOOL v7 = (char *)v11 + BYTE6(a4);
LABEL_7:
      uint64_t result = a1((uint64_t)v11, (uint64_t)v7);
      break;
  }
  return result;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v4 = v3[2];
  if (!v4)
  {
    if (!__OFSUB__(a2, result))
    {
      uint64_t v9 = 0;
      uint64_t v11 = 0;
      return a3(v9, v11);
    }
    goto LABEL_10;
  }
  uint64_t v5 = v3[5];
  BOOL v6 = __OFSUB__(result, v5);
  uint64_t v7 = result - v5;
  if (!v6)
  {
    uint64_t v8 = a2 - result;
    if (!__OFSUB__(a2, result))
    {
      uint64_t v9 = v4 + v7;
      uint64_t v10 = v3[3];
      if (v10 >= v8) {
        uint64_t v10 = v8;
      }
      uint64_t v11 = v9 + v10;
      return a3(v9, v11);
    }
LABEL_10:
    __break(1u);
  }
  __break(1u);
  return result;
}

void *partial apply for specialized closure #1 in DataProtocol<>.copyBytes<A, B>(to:from:)(uint64_t a1, uint64_t a2)
{
  return partial apply for specialized closure #1 in DataProtocol<>.copyBytes<A, B>(to:from:)(a1, a2);
}

{
  uint64_t v2;

  return specialized closure #1 in DataProtocol<>.copyBytes<A, B>(to:from:)(a1, a2, **(void **)(v2 + 16), *(void *)(*(void *)(v2 + 16) + 8), **(void **)(v2 + 24), *(void *)(*(void *)(v2 + 24) + 8), *(void **)(v2 + 32));
}

void *specialized closure #1 in DataProtocol<>.copyBytes<A, B>(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v13 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v13 = (int)a3;
      break;
    case 2uLL:
      uint64_t v13 = *(void *)(a3 + 16);
      break;
    default:
      break;
  }
  uint64_t v14 = specialized RandomAccessCollection<>.distance(from:to:)(v13, a5, a3, a4);
  uint64_t result = (void *)specialized RandomAccessCollection<>.distance(from:to:)(a5, a6, a3, a4);
  if (!a7)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (!a1)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  return memcpy(a7, (const void *)(a1 + v14), (size_t)result);
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (int)a3;
      uint64_t v4 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a3 + 16);
      uint64_t v4 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = 0;
      uint64_t v4 = BYTE6(a4);
      break;
  }
  if (v4 < result || v5 > result)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < a2 || v7 > a2) {
    goto LABEL_16;
  }
  BOOL v8 = __OFSUB__(a2, result);
  uint64_t result = a2 - result;
  if (v8) {
LABEL_17:
  }
    __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in writeToFile(path:data:options:attributes:reportProgress:)(void *a1, unint64_t a2)
{
  return closure #1 in writeToFile(path:data:options:attributes:reportProgress:)(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), *(unsigned char *)(v2 + 40), *(void *)(v2 + 48), *(void **)(v2 + 56), *(unsigned char *)(v2 + 64));
}

uint64_t _s10Foundation11writeToFile4path4data7options10attributes14reportProgressyAA9PathOrURLO_AA4DataVSo20NSDataWritingOptionsVSDySSAKGSbtKFySWKXEfU_TA_0(void *a1, unint64_t a2)
{
  return partial apply for closure #1 in writeToFile(path:data:options:attributes:reportProgress:)(a1, a2);
}

uint64_t closure #1 in writeToFile(path:data:options:attributes:reportProgress:)(void *a1, unint64_t a2, void *a3, unint64_t a4, void *a5, char a6, uint64_t a7, void *a8, unsigned __int8 a9)
{
  uint64_t v10 = a8;
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  LODWORD(v14) = a6 & 1;
  if ((a7 & 1) == 0)
  {
    v89._uint64_t countAndFlagsBits = (uint64_t)a3;
    v89._unint64_t object = (void *)a4;
    int64_t v90 = a5;
    BOOL v91 = v14 != 0;
    return writeToFileNoAux(path:buffer:options:attributes:reportProgress:)((uint64_t)&v89, (uint64_t)a1, a2, a7, a8, a9 & 1);
  }
  int v80 = a9;
  unint64_t v81 = a2;
  uint64_t v82 = a1;
  int v85 = a6 & 1;
  uint64_t v83 = (void *)a7;
  char v84 = v9;
  if ((a6 & 1) == 0)
  {
    outlined copy of PathOrURL(a3, a4, (uint64_t)a5, 0);
    outlined copy of PathOrURL(a3, a4, (uint64_t)a5, 0);
    swift_bridgeObjectRetain();
    uint64_t v20 = (uint64_t)a3;
    unint64_t v21 = a4;
    if ((a4 & 0x1000000000000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_58;
  }
  outlined copy of PathOrURL(a3, a4, (uint64_t)a5, 1);
  swift_retain();
  id v14 = a3;
  swift_retain();
  outlined copy of PathOrURL(a3, a4, (uint64_t)a5, 1);
  outlined copy of PathOrURL(a3, a4, (uint64_t)a5, 1);
  swift_bridgeObjectRetain();
  if (_foundation_swift_url_feature_enabled())
  {
    int64_t v90 = a5;
    unint64_t v16 = v14;
    swift_retain();
    swift_retain();
    Swift::String v17 = URL.path(percentEncoded:)(1);
    uint64_t countAndFlagsBits = v17._countAndFlagsBits;
    Swift::String v89 = v17;
    swift_bridgeObjectRetain();
    uint64_t v79 = v16;
    if (String.count.getter() <= 1)
    {
      unint64_t object = (unint64_t)v17._object;
    }
    else
    {
      unint64_t object = (unint64_t)v17._object;
      if ((specialized BidirectionalCollection.last.getter(v17._countAndFlagsBits, (unint64_t)v17._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = v89._countAndFlagsBits;
        unint64_t object = (unint64_t)v89._object;
      }
    }
    uint64_t v86 = Set.init(minimumCapacity:)();
    uint64_t v34 = specialized Set._Variant.insert(_:)(&v88, 0x2FuLL);
    uint64_t v35 = v86;
    uint64_t v36 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0) {
      uint64_t v36 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v36)
    {
      int v78 = v10;
      uint64_t v86 = countAndFlagsBits;
      unint64_t v87 = object;
      MEMORY[0x1F4188790](v34);
      _OWORD v77[2] = &v86;
      v77[3] = v35;
      swift_bridgeObjectRetain();
      BOOL v37 = v84;
      uint64_t v38 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v77, countAndFlagsBits, object);
      char v84 = v37;
      if (v39 == 1)
      {
        Swift::Int v40 = v86;
        unint64_t v41 = v87;
        swift_bridgeObjectRetain();
        uint64_t v20 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v40, v41, v35);
        unint64_t v21 = v42;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v20 = (uint64_t)v38;
        unint64_t v21 = v39;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v10 = v78;
      uint64_t v47 = v79;
      if (!v21)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of PathOrURL(a3, a4, (uint64_t)a5, 1);
        outlined consume of PathOrURL(a3, a4, (uint64_t)a5, 1);
        swift_release();
        swift_release();

        uint64_t v20 = 0;
        unint64_t v21 = 0xE000000000000000;
LABEL_31:
        swift_release();
        swift_release();

        LOBYTE(v14) = v85;
        if ((v21 & 0x1000000000000000) == 0) {
          goto LABEL_32;
        }
LABEL_58:
        Swift::Int v48 = String.UTF8View._foreignCount()();
        goto LABEL_35;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v20 = 0;
      unint64_t v21 = 0xE000000000000000;
      uint64_t v47 = v79;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of PathOrURL(a3, a4, (uint64_t)a5, 1);
    outlined consume of PathOrURL(a3, a4, (uint64_t)a5, 1);
    swift_release();
    swift_release();

    goto LABEL_31;
  }
  id v22 = objc_msgSend(v14, sel__parameterString);
  if (v22)
  {
    uint64_t v23 = v22;
    id v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    unint64_t v26 = v25;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (id v27 = objc_msgSend(v14, sel_path)) != 0)
    {
      Swift::Int v28 = v27;
      id v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      int v78 = v10;
      uint64_t v31 = v30;

      v89._uint64_t countAndFlagsBits = (uint64_t)v29;
      v89._unint64_t object = v31;
      swift_bridgeObjectRetain();
      v32._uint64_t countAndFlagsBits = 59;
      v32._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v32);
      uint64_t v10 = v78;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v33._uint64_t countAndFlagsBits = (uint64_t)v24;
      v33._unint64_t object = v26;
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
    }
    else
    {
      v89._uint64_t countAndFlagsBits = 59;
      v89._unint64_t object = (void *)0xE100000000000000;
      v43._uint64_t countAndFlagsBits = (uint64_t)v24;
      v43._unint64_t object = v26;
      String.append(_:)(v43);
    }
    swift_bridgeObjectRelease();
    outlined consume of PathOrURL(a3, a4, (uint64_t)a5, 1);
    outlined consume of PathOrURL(a3, a4, (uint64_t)a5, 1);
    swift_release();
    swift_release();

    uint64_t v20 = v89._countAndFlagsBits;
    unint64_t v21 = (unint64_t)v89._object;
    LOBYTE(v14) = v85;
    if (((uint64_t)v89._object & 0x1000000000000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_58;
  }
  id v44 = objc_msgSend(v14, sel_path);
  if (v44)
  {
    uint64_t v45 = v44;
    uint64_t v20 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    unint64_t v21 = v46;

    outlined consume of PathOrURL(a3, a4, (uint64_t)a5, 1);
    outlined consume of PathOrURL(a3, a4, (uint64_t)a5, 1);
    swift_release();
    swift_release();

    LOBYTE(v14) = v85;
    if ((v21 & 0x1000000000000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_58;
  }
  outlined consume of PathOrURL(a3, a4, (uint64_t)a5, 1);
  outlined consume of PathOrURL(a3, a4, (uint64_t)a5, 1);
  swift_release();
  swift_release();

  uint64_t v20 = 0;
  unint64_t v21 = 0xE000000000000000;
  LOBYTE(v14) = v85;
LABEL_32:
  if ((v21 & 0x2000000000000000) != 0) {
    Swift::Int v48 = HIBYTE(v21) & 0xF;
  }
  else {
    Swift::Int v48 = v20 & 0xFFFFFFFFFFFFLL;
  }
LABEL_35:
  uint64_t v49 = 3 * v48;
  if ((unsigned __int128)(v48 * (__int128)3) >> 64 != (3 * v48) >> 63)
  {
    __break(1u);
    goto LABEL_60;
  }
  if (v49 < -1)
  {
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
  }
  uint64_t v50 = v49 + 1;
  outlined copy of PathOrURL(a3, a4, (uint64_t)a5, (char)v14);
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain();
  if (v49 >= 1024)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      id v14 = (id)swift_slowAlloc();
      swift_bridgeObjectRetain();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v14, v49 + 1, 1, v20, v21);
      char v66 = v65;
      swift_bridgeObjectRelease();
      if (v66)
      {
        int v78 = v10;
        char v84 = @"NSCocoaErrorDomain";
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v68 = objc_allocWithZone((Class)NSError);
        uint64_t v69 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v70 = objc_msgSend(v68, sel_initWithDomain_code_userInfo_, v69, 514, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v71 = objc_msgSend(v70, sel_domain);
        id v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
        uint64_t v74 = v73;

        if (v72 == static String._unconditionallyBridgeFromObjectiveC(_:)(v84) && v74 == v75)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v76 & 1) == 0) {
            goto LABEL_62;
          }
        }
        swift_willThrow();
      }
      else
      {
        closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)((const char *)v14, a3, a4, a5, v85, v83, v80 & 1, v82, v81, v10);
      }
      MEMORY[0x185309510](v14, -1, -1);
      LOBYTE(v14) = v85;
      goto LABEL_56;
    }
  }
  uint64_t v79 = &v78;
  MEMORY[0x1F4188790](isStackAllocationSafe);
  uint64_t v53 = (char *)&v78 - v52;
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v53, v50, 1, v20, v21);
  char v55 = v54;
  swift_bridgeObjectRelease();
  if ((v55 & 1) == 0)
  {
    uint64_t v56 = v84;
    closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(v53, a3, a4, a5, (char)v14, v83, v80 & 1, v82, v81, v10);
    if (!v56) {
      goto LABEL_56;
    }
    goto LABEL_49;
  }
  int v78 = v10;
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v57 = objc_allocWithZone((Class)NSError);
  uint64_t v58 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v59 = objc_msgSend(v57, sel_initWithDomain_code_userInfo_, v58, 514, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v60 = objc_msgSend(v59, sel_domain);
  id v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
  uint64_t v63 = v62;

  if (v61 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") || v63 != v64)
  {
    char v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v67) {
      goto LABEL_48;
    }
    goto LABEL_61;
  }
  swift_bridgeObjectRelease_n();
LABEL_48:
  swift_willThrow();
  LOBYTE(v14) = v85;
LABEL_49:
  swift_willThrow();
LABEL_56:
  outlined consume of PathOrURL(a3, a4, (uint64_t)a5, (char)v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of PathOrURL(a3, a4, (uint64_t)a5, (char)v14);
  return swift_bridgeObjectRelease();
}

uint64_t writeToFileNoAux(path:buffer:options:attributes:reportProgress:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, int a6)
{
  v429 = a5;
  unint64_t v423 = a3;
  v425 = (void *)a2;
  uint64_t v436 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  char v9 = *(unsigned char *)(a1 + 24);
  LODWORD(v424) = a6;
  uint64_t v428 = a4;
  if (v9)
  {
    swift_retain_n();
    id v10 = v6;
    swift_retain_n();
    id v11 = v10;
    if (_foundation_swift_url_feature_enabled())
    {
      v420 = v6;
      uint64_t v434 = v8;
      id v11 = v11;
      swift_retain();
      uint64_t v422 = v8;
      swift_retain();
      Swift::String v12 = URL.path(percentEncoded:)(1);
      uint64_t countAndFlagsBits = v12._countAndFlagsBits;
      Swift::String v433 = v12;
      swift_bridgeObjectRetain();
      if (String.count.getter() <= 1)
      {
        unint64_t object = (unint64_t)v12._object;
      }
      else
      {
        unint64_t object = (unint64_t)v12._object;
        if ((specialized BidirectionalCollection.last.getter(v12._countAndFlagsBits, (unint64_t)v12._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          uint64_t countAndFlagsBits = v433._countAndFlagsBits;
          unint64_t object = (unint64_t)v433._object;
        }
      }
      v430._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v75 = specialized Set._Variant.insert(_:)(&v432, 0x2FuLL);
      uint64_t v76 = v430._countAndFlagsBits;
      uint64_t v77 = HIBYTE(object) & 0xF;
      if ((object & 0x2000000000000000) == 0) {
        uint64_t v77 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (!v77)
      {
        swift_bridgeObjectRelease();
        uint64_t v15 = 0;
        unint64_t v16 = 0xE000000000000000;
        uint64_t v6 = v420;
        uint64_t v8 = v422;
LABEL_107:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of PathOrURL(v6, v7, v8, 1);
        outlined consume of PathOrURL(v6, v7, v8, 1);
        swift_release();
        swift_release();

        goto LABEL_114;
      }
      id v427 = v11;
      v430._uint64_t countAndFlagsBits = countAndFlagsBits;
      v430._unint64_t object = (void *)object;
      MEMORY[0x1F4188790](v75);
      uint64_t v416 = (uint64_t)&v430;
      uint64_t v417 = v76;
      swift_bridgeObjectRetain();
      int64_t v78 = v426;
      uint64_t v79 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)&v415, countAndFlagsBits, object);
      int64_t v426 = v78;
      if (v80 == 1)
      {
        unint64_t v82 = (unint64_t)v430._object;
        Swift::Int v81 = v430._countAndFlagsBits;
        swift_bridgeObjectRetain();
        uint64_t v15 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v81, v82, v76);
        unint64_t v84 = v83;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v15 = (uint64_t)v79;
        unint64_t v84 = v80;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = v420;
      uint64_t v8 = v422;
      if (v84)
      {
        unint64_t v16 = v84;
        id v11 = v427;
        goto LABEL_107;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of PathOrURL(v6, v7, v8, 1);
      outlined consume of PathOrURL(v6, v7, v8, 1);
      swift_release();
      swift_release();
      id v11 = v427;

      uint64_t v15 = 0;
      unint64_t v16 = 0xE000000000000000;
    }
    else
    {
      id v38 = objc_msgSend(v11, sel__parameterString);
      if (v38)
      {
        unint64_t v39 = v38;
        id v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
        unint64_t v42 = v41;

        if (!getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          || (id v43 = objc_msgSend(v11, sel_path)) == 0)
        {
          v433._uint64_t countAndFlagsBits = 59;
          v433._unint64_t object = (void *)0xE100000000000000;
          v96._uint64_t countAndFlagsBits = (uint64_t)v40;
          v96._unint64_t object = v42;
          String.append(_:)(v96);
          swift_bridgeObjectRelease();
          outlined consume of PathOrURL(v6, v7, v8, 1);
          outlined consume of PathOrURL(v6, v7, v8, 1);
          uint64_t v15 = 59;
          unint64_t v16 = 0xE100000000000000;
          goto LABEL_114;
        }
        id v44 = v43;
        uint64_t v422 = v8;
        uint64_t v45 = v6;
        id v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
        unint64_t v16 = v47;

        v433._uint64_t countAndFlagsBits = (uint64_t)v46;
        v433._unint64_t object = (void *)v16;
        swift_bridgeObjectRetain();
        v48._uint64_t countAndFlagsBits = 59;
        v48._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v49._uint64_t countAndFlagsBits = (uint64_t)v40;
        v49._unint64_t object = v42;
        String.append(_:)(v49);
        swift_bridgeObjectRelease();
        uint64_t v6 = v45;
        uint64_t v8 = v422;
        swift_bridgeObjectRelease();
        outlined consume of PathOrURL(v6, v7, v422, 1);
        uint64_t v15 = v433._countAndFlagsBits;
      }
      else
      {
        id v97 = objc_msgSend(v11, sel_path);
        if (!v97)
        {
          outlined consume of PathOrURL(v6, v7, v8, 1);
          outlined consume of PathOrURL(v6, v7, v8, 1);
          swift_release();
          swift_release();

          uint64_t v15 = 0;
          unint64_t v16 = 0xE000000000000000;
          goto LABEL_7;
        }
        long long v98 = v97;
        uint64_t v15 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
        unint64_t v16 = v99;

        outlined consume of PathOrURL(v6, v7, v8, 1);
      }
      outlined consume of PathOrURL(v6, v7, v8, 1);
    }
LABEL_114:
    swift_release();
    swift_release();

    if ((v16 & 0x1000000000000000) != 0) {
      goto LABEL_115;
    }
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = (uint64_t)v6;
  unint64_t v16 = v7;
  if ((v7 & 0x1000000000000000) != 0)
  {
LABEL_115:
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
    goto LABEL_10;
  }
LABEL_7:
  if ((v16 & 0x2000000000000000) != 0) {
    Swift::Int isStackAllocationSafe = HIBYTE(v16) & 0xF;
  }
  else {
    Swift::Int isStackAllocationSafe = v15 & 0xFFFFFFFFFFFFLL;
  }
LABEL_10:
  uint64_t v18 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
LABEL_362:
    __break(1u);
LABEL_363:
    __break(1u);
LABEL_364:
    __break(1u);
LABEL_365:
    __break(1u);
    goto LABEL_366;
  }
  if (v18 < -1) {
    goto LABEL_365;
  }
  uint64_t v19 = v18 + 1;
  id v427 = (id)v16;
  if (v18 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    v421 = &v418;
    MEMORY[0x1F4188790](isStackAllocationSafe);
    unint64_t v21 = (char *)&v418 - v20;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v21, v19, 1, v15, v16);
    char v23 = v22;
    swift_bridgeObjectRelease();
    if (v23)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
      id v30 = objc_allocWithZone((Class)NSError);
      uint64_t v31 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v32 = objc_msgSend(v30, sel_initWithDomain_code_userInfo_, v31, 514, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v33 = objc_msgSend(v32, sel_domain);
      id v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      uint64_t v36 = v35;

      if (v34 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v36 == v37)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v59 & 1) == 0) {
          goto LABEL_367;
        }
      }
LABEL_44:
      swift_willThrow();
      goto LABEL_45;
    }
    if ((v428 & 2) != 0) {
      int v24 = 3585;
    }
    else {
      int v24 = 1537;
    }
    LODWORD(v428) = _NSOpenFileDescriptor_Protected(v21, v24, v428, 438);
    if ((v428 & 0x80000000) == 0)
    {
      if ((v424 & 1) != 0
        && (uint64_t v25 = self,
            id v26 = objc_msgSend(v25, sel_currentProgress),
            v26,
            v26))
      {
        uint64_t v27 = v423;
        if (v425) {
          unint64_t v28 = v423 - (void)v425;
        }
        else {
          unint64_t v28 = 0;
        }
        id v29 = objc_msgSend(v25, sel_progressWithTotalUnitCount_, v28);
      }
      else
      {
        id v29 = 0;
        uint64_t v27 = v423;
      }
      v433._uint64_t countAndFlagsBits = (uint64_t)v6;
      v433._unint64_t object = (void *)v7;
      uint64_t v434 = v8;
      char v435 = v9;
      id v60 = (void *)v426;
      id v61 = write(buffer:toFileDescriptor:path:parentProgress:)((uint64_t)v425, v27, v428, (uint64_t)&v433, v29);
      v424 = v60;
      if (!v60)
      {
        id v419 = v29;
        uint64_t v100 = v429[8];
        v425 = v429 + 8;
        uint64_t v101 = 1 << *((unsigned char *)v429 + 32);
        uint64_t v102 = -1;
        if (v101 < 64) {
          uint64_t v102 = ~(-1 << v101);
        }
        uint64_t v62 = v102 & v100;
        int64_t v426 = (unint64_t)(v101 + 63) >> 6;
        swift_bridgeObjectRetain();
        int64_t v103 = 0;
        unint64_t v104 = v424;
        while (1)
        {
          if (v62)
          {
            unint64_t v107 = __clz(__rbit64(v62));
            v62 &= v62 - 1;
            unint64_t v108 = v107 | (v103 << 6);
          }
          else
          {
            BOOL v109 = __OFADD__(v103++, 1);
            if (v109)
            {
              __break(1u);
              goto LABEL_362;
            }
            if (v103 >= v426) {
              goto LABEL_103;
            }
            unint64_t v110 = v425[v103];
            if (!v110)
            {
              int64_t v111 = v103 + 1;
              if (v103 + 1 >= v426) {
                goto LABEL_103;
              }
              unint64_t v110 = v425[v111];
              if (!v110)
              {
                int64_t v111 = v103 + 2;
                if (v103 + 2 >= v426) {
                  goto LABEL_103;
                }
                unint64_t v110 = v425[v111];
                if (!v110)
                {
                  int64_t v111 = v103 + 3;
                  if (v103 + 3 >= v426)
                  {
LABEL_103:
                    id v118 = v419;
                    swift_release();

                    close(v428);
                    return swift_bridgeObjectRelease();
                  }
                  unint64_t v110 = v425[v111];
                  if (!v110)
                  {
                    while (1)
                    {
                      int64_t v103 = v111 + 1;
                      if (__OFADD__(v111, 1)) {
                        break;
                      }
                      if (v103 >= v426) {
                        goto LABEL_103;
                      }
                      unint64_t v110 = v425[v103];
                      ++v111;
                      if (v110) {
                        goto LABEL_91;
                      }
                    }
LABEL_366:
                    __break(1u);
LABEL_367:
                    __break(1u);
LABEL_368:
                    __break(1u);
LABEL_369:
                    __break(1u);
LABEL_370:
                    __break(1u);
LABEL_371:
                    __break(1u);
LABEL_372:
                    __break(1u);
LABEL_373:
                    __break(1u);
LABEL_374:
                    __break(1u);
LABEL_375:
                    __break(1u);
LABEL_376:
                    __break(1u);
LABEL_377:
                    __break(1u);
LABEL_378:
                    __break(1u);
LABEL_379:
                    __break(1u);
                  }
                }
              }
              int64_t v103 = v111;
            }
LABEL_91:
            uint64_t v62 = (v110 - 1) & v110;
            unint64_t v108 = __clz(__rbit64(v110)) + (v103 << 6);
          }
          uint64_t v112 = (uint64_t *)(v429[7] + 16 * v108);
          uint64_t v113 = *v112;
          unint64_t v114 = v112[1];
          swift_bridgeObjectRetain_n();
          switch(v114 >> 62)
          {
            case 1uLL:
              if (v113 >> 32 < (int)v113) {
                goto LABEL_363;
              }
              v424 = (void *)(v114 & 0x3FFFFFFFFFFFFFFFLL);
              swift_bridgeObjectRetain_n();
              outlined copy of Data._Representation(v113, v114);
              swift_bridgeObjectRetain();
              outlined copy of Data._Representation(v113, v114);
              specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v113, v113 >> 32, v424, v428);
              if (v104) {
                goto LABEL_382;
              }
              unint64_t v104 = 0;
              outlined consume of Data._Representation(v113, v114);
              goto LABEL_78;
            case 2uLL:
              v424 = v104;
              uint64_t v116 = *(void *)(v113 + 16);
              uint64_t v115 = *(void *)(v113 + 24);
              swift_bridgeObjectRetain_n();
              outlined copy of Data._Representation(v113, v114);
              swift_retain();
              swift_retain();
              uint64_t v117 = v424;
              specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v116, v115, (void *)(v114 & 0x3FFFFFFFFFFFFFFFLL), v428);
              if (v117)
              {
                swift_release();
                swift_release();
LABEL_381:
                swift_bridgeObjectRelease_n();
                __break(1u);
LABEL_382:
                swift_bridgeObjectRelease_n();
                outlined consume of Data._Representation(v113, v114);
                __break(1u);
                goto LABEL_383;
              }
              unint64_t v104 = 0;
              swift_release();
              swift_release();
LABEL_78:
              outlined consume of Data._Representation(v113, v114);
              swift_bridgeObjectRelease_n();
              break;
            case 3uLL:
              unint64_t v105 = v423 & 0xFF00000000000000;
              swift_bridgeObjectRetain_n();
              uint64_t v106 = 0;
              unint64_t v423 = v105;
              goto LABEL_77;
            default:
              unint64_t v105 = v422 & 0xFF00000000000000 | v114 & 0xFFFFFFFFFFFFFFLL;
              swift_bridgeObjectRetain_n();
              uint64_t v106 = v113;
              uint64_t v422 = v105;
LABEL_77:
              specialized Data.InlineData.withUnsafeBytes<A>(_:)(v106, v105, v428);
              if (!v104) {
                goto LABEL_78;
              }
              goto LABEL_381;
          }
        }
      }
      LODWORD(v62) = MEMORY[0x185301870](v61);
      if (v29 && objc_msgSend(v29, sel_isCancelled))
      {
        uint64_t v63 = v29;
        unlink(v21);
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v64 = objc_allocWithZone((Class)NSError);
        uint64_t v65 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v66 = objc_msgSend(v64, sel_initWithDomain_code_userInfo_, v65, 3072, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v67 = objc_msgSend(v66, sel_domain);
        id v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
        uint64_t v70 = v69;

        if (v68 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v70 == v71)
        {
          swift_bridgeObjectRelease_n();
          id v72 = v424;
        }
        else
        {
          char v148 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id v72 = v424;
          if ((v148 & 1) == 0) {
            goto LABEL_372;
          }
        }
        swift_willThrow();

        close(v428);
        goto LABEL_45;
      }
      id v419 = v29;
      if (v9)
      {
        CocoaError.Code.init(fileErrno:reading:)(v62, 0);
        v429 = v432;
        swift_retain_n();
        v420 = v6;
        id v93 = v6;
        swift_retain_n();
        id v94 = v93;
        if (v62 == 102)
        {
          id v95 = 0;
        }
        else
        {
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
            goto LABEL_383;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v129 = (int)POSIXErrorCode.rawValue.getter();
          id v130 = objc_allocWithZone((Class)NSError);
          uint64_t v131 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v95 = objc_msgSend(v130, sel_initWithDomain_code_userInfo_, v131, v129, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v132 = objc_msgSend(v95, sel_domain);
          id v133 = static String._unconditionallyBridgeFromObjectiveC(_:)(v132);
          uint64_t v135 = v134;

          if (v133 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
            && v135 == v136)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            char v179 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v179 & 1) == 0) {
              goto LABEL_373;
            }
          }
        }
        id v180 = v94;
        swift_retain();
        swift_retain();
        if (!_foundation_swift_url_feature_enabled())
        {
          id v193 = objc_msgSend(v180, sel__parameterString);
          if (v193)
          {
            uint64_t v194 = v193;
            id v195 = static String._unconditionallyBridgeFromObjectiveC(_:)(v193);
            uint64_t v197 = v196;

            if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
              && (id v198 = objc_msgSend(v180, sel_path)) != 0)
            {
              long long v199 = v198;
              id v200 = static String._unconditionallyBridgeFromObjectiveC(_:)(v198);
              uint64_t v202 = v201;

              v433._uint64_t countAndFlagsBits = (uint64_t)v200;
              v433._unint64_t object = v202;
              swift_bridgeObjectRetain();
              v203._uint64_t countAndFlagsBits = 59;
              v203._unint64_t object = (void *)0xE100000000000000;
              String.append(_:)(v203);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              v204._uint64_t countAndFlagsBits = (uint64_t)v195;
              v204._unint64_t object = v197;
              String.append(_:)(v204);
              swift_bridgeObjectRelease();
            }
            else
            {
              v433._uint64_t countAndFlagsBits = 59;
              v433._unint64_t object = (void *)0xE100000000000000;
              v229._uint64_t countAndFlagsBits = (uint64_t)v195;
              v229._unint64_t object = v197;
              String.append(_:)(v229);
            }
            swift_bridgeObjectRelease();
            long long v230 = v420;
            outlined consume of PathOrURL(v420, v7, v8, 1);
          }
          else
          {
            id v231 = objc_msgSend(v180, sel_path);
            if (v231)
            {
              long long v232 = v231;
              static String._unconditionallyBridgeFromObjectiveC(_:)(v231);
            }
            long long v230 = v420;
            outlined consume of PathOrURL(v420, v7, v8, 1);
          }
          goto LABEL_273;
        }
        v433._uint64_t countAndFlagsBits = (uint64_t)v180;
        v433._unint64_t object = (void *)v7;
        uint64_t v434 = v8;
        id v181 = v180;
        uint64_t v418 = v7;
        swift_retain();
        swift_retain();
        Swift::String v182 = URL.path(percentEncoded:)(1);
        Swift::String v433 = v182;
        swift_bridgeObjectRetain();
        if (String.count.getter() > 1
          && (specialized BidirectionalCollection.last.getter(v182._countAndFlagsBits, (unint64_t)v182._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
        }
        v430._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
        uint64_t v183 = specialized Set._Variant.insert(_:)(&v431, 0x2FuLL);
        uint64_t v184 = v430._countAndFlagsBits;
        uint64_t v185 = v433._countAndFlagsBits;
        char v186 = v433._object;
        unint64_t v187 = ((unint64_t)v433._object >> 56) & 0xF;
        if (((uint64_t)v433._object & 0x2000000000000000) == 0) {
          unint64_t v187 = v433._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        }
        if (v187)
        {
          uint64_t v422 = v8;
          Swift::String v430 = v433;
          MEMORY[0x1F4188790](v183);
          uint64_t v416 = (uint64_t)&v430;
          uint64_t v417 = v184;
          swift_bridgeObjectRetain();
          specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)&v415, v185, (unint64_t)v186);
          if (v188 == 1)
          {
            unint64_t v190 = (unint64_t)v430._object;
            Swift::Int v189 = v430._countAndFlagsBits;
            swift_bridgeObjectRetain();
            specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v189, v190, v184);
            uint64_t v192 = v191;
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v192 = v188;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v8 = v422;
          uint64_t v7 = v418;
          if (!v192)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v313 = v420;
            outlined consume of PathOrURL(v420, v7, v8, 1);
            outlined consume of PathOrURL(v313, v7, v8, 1);
            goto LABEL_272;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v7 = v418;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v251 = v420;
        outlined consume of PathOrURL(v420, v7, v8, 1);
        outlined consume of PathOrURL(v251, v7, v8, 1);
LABEL_272:
        long long v230 = v420;
LABEL_273:
        uint64_t v314 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v315 = v180;
        outlined consume of PathOrURL(v230, v7, v8, 1);
        if (v95)
        {
          v433._uint64_t countAndFlagsBits = (uint64_t)v95;
          lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
          id v95 = v95;
          if (_getErrorEmbeddedNSError<A>(_:)())
          {
          }
          else
          {
            swift_allocError();
            void *v318 = v95;
          }
          v317 = v429;
          v316 = (void *)_swift_stdlib_bridgeErrorToNSError();
        }
        else
        {
          v316 = 0;
          v317 = v429;
        }
        objc_msgSend(self, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, v317, v314, v315, v316, 0, 0, 0);

        swift_unknownObjectRelease();
        outlined consume of PathOrURL(v420, v7, v8, 1);
        unint64_t v123 = v424;
        goto LABEL_280;
      }
      CocoaError.Code.init(fileErrno:reading:)(v62, 0);
      uint64_t v122 = (uint64_t (*)(void))v430._countAndFlagsBits;
      unint64_t v123 = v424;
      if (v62 == 102)
      {
        id v124 = 0;
LABEL_187:
        swift_bridgeObjectRetain();
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)(v122, (uint64_t)v6, v7, v124, 0, 0, 0, 0, &v433, 0, 0, (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError, (uint64_t)&type metadata for POSIXError, (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0, (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),
          (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,
          (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,
          (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
LABEL_280:
        swift_willThrow();

        close(v428);
LABEL_45:
        swift_willThrow();
        return swift_bridgeObjectRelease();
      }
      uint64_t v137 = v6;
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v138 = (int)POSIXErrorCode.rawValue.getter();
        id v139 = objc_allocWithZone((Class)NSError);
        uint64_t v140 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v124 = objc_msgSend(v139, sel_initWithDomain_code_userInfo_, v140, v138, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v141 = objc_msgSend(v124, sel_domain);
        id v142 = static String._unconditionallyBridgeFromObjectiveC(_:)(v141);
        uint64_t v144 = v143;

        if (v142 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v144 == v145)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v205 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v205 & 1) == 0) {
            goto LABEL_374;
          }
        }
        uint64_t v6 = v137;
        goto LABEL_187;
      }
      goto LABEL_384;
    }
    int v73 = MEMORY[0x185301870]();
    LODWORD(v62) = v73;
    if (v9)
    {
      uint64_t v74 = 4;
      switch(v73)
      {
        case 1:
        case 13:
          uint64_t v74 = 513;
          goto LABEL_226;
        case 2:
          goto LABEL_226;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
          goto LABEL_206;
        case 17:
          uint64_t v74 = 516;
          goto LABEL_226;
        case 28:
        case 69:
          uint64_t v74 = 640;
          goto LABEL_226;
        case 30:
          uint64_t v74 = 642;
          goto LABEL_226;
        case 63:
          uint64_t v74 = 514;
          goto LABEL_226;
        default:
          if (v73 == 102)
          {
            uint64_t v224 = v8;
            swift_retain_n();
            id v225 = v6;
            swift_retain_n();
            id v226 = v225;
            id v227 = 0;
            uint64_t v74 = 512;
            goto LABEL_232;
          }
LABEL_206:
          uint64_t v74 = 512;
LABEL_226:
          swift_retain_n();
          id v253 = v6;
          swift_retain_n();
          id v254 = v253;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
            uint64_t v255 = (int)POSIXErrorCode.rawValue.getter();
            id v256 = objc_allocWithZone((Class)NSError);
            uint64_t v257 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v227 = objc_msgSend(v256, sel_initWithDomain_code_userInfo_, v257, v255, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            id v258 = objc_msgSend(v227, sel_domain);
            id v259 = static String._unconditionallyBridgeFromObjectiveC(_:)(v258);
            uint64_t v261 = v260;

            if (v259 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
              && v261 == v262)
            {
              swift_bridgeObjectRelease_n();
            }
            else
            {
              char v263 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v263 & 1) == 0) {
                goto LABEL_370;
              }
            }
            uint64_t v224 = v8;
LABEL_232:
            id v264 = v6;
            swift_retain();
            swift_retain();
            int v265 = _foundation_swift_url_feature_enabled();
            v429 = (void *)v74;
            if (!v265)
            {
              uint64_t v278 = v224;
              id v279 = objc_msgSend(v264, sel__parameterString);
              if (v279)
              {
                int64_t v280 = v279;
                id v281 = static String._unconditionallyBridgeFromObjectiveC(_:)(v279);
                v283 = v282;

                if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
                  && (id v284 = objc_msgSend(v264, sel_path)) != 0)
                {
                  v285 = v284;
                  id v286 = static String._unconditionallyBridgeFromObjectiveC(_:)(v284);
                  v420 = v6;
                  uint64_t v287 = v7;
                  v289 = v288;

                  v433._uint64_t countAndFlagsBits = (uint64_t)v286;
                  v433._unint64_t object = v289;
                  swift_bridgeObjectRetain();
                  v290._uint64_t countAndFlagsBits = 59;
                  v290._unint64_t object = (void *)0xE100000000000000;
                  String.append(_:)(v290);
                  uint64_t v7 = v287;
                  uint64_t v6 = v420;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRetain();
                  v291._uint64_t countAndFlagsBits = (uint64_t)v281;
                  v291._unint64_t object = v283;
                  String.append(_:)(v291);
                  swift_bridgeObjectRelease();
                }
                else
                {
                  v433._uint64_t countAndFlagsBits = 59;
                  v433._unint64_t object = (void *)0xE100000000000000;
                  v292._uint64_t countAndFlagsBits = (uint64_t)v281;
                  v292._unint64_t object = v283;
                  String.append(_:)(v292);
                }
                swift_bridgeObjectRelease();
                uint64_t v293 = v278;
                outlined consume of PathOrURL(v6, v7, v278, 1);
                v294 = v429;
              }
              else
              {
                id v295 = objc_msgSend(v264, sel_path);
                if (v295)
                {
                  v296 = v295;
                  static String._unconditionallyBridgeFromObjectiveC(_:)(v295);
                }
                uint64_t v293 = v224;
                outlined consume of PathOrURL(v6, v7, v224, 1);
                v294 = v429;
              }
              goto LABEL_256;
            }
            v433._uint64_t countAndFlagsBits = (uint64_t)v264;
            v433._unint64_t object = (void *)v7;
            uint64_t v434 = v224;
            id v266 = v264;
            uint64_t v418 = v7;
            swift_retain();
            uint64_t v422 = v224;
            swift_retain();
            Swift::String v267 = URL.path(percentEncoded:)(1);
            Swift::String v433 = v267;
            swift_bridgeObjectRetain();
            if (String.count.getter() > 1
              && (specialized BidirectionalCollection.last.getter(v267._countAndFlagsBits, (unint64_t)v267._object) & 0x1FF) == 0x2F)
            {
              specialized RangeReplaceableCollection<>.popLast()();
              swift_bridgeObjectRelease();
            }
            v430._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
            uint64_t v268 = specialized Set._Variant.insert(_:)(&v432, 0x2FuLL);
            uint64_t v269 = v430._countAndFlagsBits;
            uint64_t v270 = v433._countAndFlagsBits;
            v271 = v433._object;
            unint64_t v272 = ((unint64_t)v433._object >> 56) & 0xF;
            if (((uint64_t)v433._object & 0x2000000000000000) == 0) {
              unint64_t v272 = v433._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            }
            if (v272)
            {
              v420 = v6;
              Swift::String v430 = v433;
              MEMORY[0x1F4188790](v268);
              uint64_t v416 = (uint64_t)&v430;
              uint64_t v417 = v269;
              swift_bridgeObjectRetain();
              specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)&v415, v270, (unint64_t)v271);
              if (v273 == 1)
              {
                unint64_t v275 = (unint64_t)v430._object;
                Swift::Int v274 = v430._countAndFlagsBits;
                swift_bridgeObjectRetain();
                specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v274, v275, v269);
                uint64_t v277 = v276;
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v277 = v273;
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v6 = v420;
              v294 = v429;
              uint64_t v7 = v418;
              if (!v277)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v298 = v422;
                outlined consume of PathOrURL(v6, v7, v422, 1);
                outlined consume of PathOrURL(v6, v7, v298, 1);
                goto LABEL_255;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              uint64_t v7 = v418;
              v294 = v429;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v297 = v422;
            outlined consume of PathOrURL(v6, v7, v422, 1);
            outlined consume of PathOrURL(v6, v7, v297, 1);
LABEL_255:
            uint64_t v293 = v422;
LABEL_256:
            uint64_t v299 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v300 = v264;
            outlined consume of PathOrURL(v6, v7, v293, 1);
            if (v227)
            {
              v433._uint64_t countAndFlagsBits = (uint64_t)v227;
              lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
              id v227 = v227;
              if (_getErrorEmbeddedNSError<A>(_:)())
              {
              }
              else
              {
                swift_allocError();
                void *v302 = v227;
              }
              v301 = (void *)_swift_stdlib_bridgeErrorToNSError();
            }
            else
            {
              v301 = 0;
            }
            objc_msgSend(self, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, v294, v299, v300, v301, 0, 0, 0);

            swift_unknownObjectRelease();
            outlined consume of PathOrURL(v6, v7, v293, 1);
            goto LABEL_44;
          }
          break;
      }
LABEL_383:
      v433._uint64_t countAndFlagsBits = 0;
      v433._unint64_t object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      v433._uint64_t countAndFlagsBits = 0xD000000000000014;
      v433._unint64_t object = (void *)0x80000001823A9780;
      LODWORD(v430._countAndFlagsBits) = v62;
LABEL_385:
      v414._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v414);
      swift_bridgeObjectRelease();
      LODWORD(v417) = 0;
      uint64_t v416 = 73;
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    uint64_t v119 = 4;
    switch(v73)
    {
      case 1:
      case 13:
        uint64_t v119 = 513;
        goto LABEL_264;
      case 2:
        goto LABEL_264;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        goto LABEL_207;
      case 17:
        uint64_t v119 = 516;
        goto LABEL_264;
      case 28:
      case 69:
        uint64_t v119 = 640;
        goto LABEL_264;
      case 30:
        uint64_t v119 = 642;
        goto LABEL_264;
      case 63:
        uint64_t v119 = 514;
        goto LABEL_264;
      default:
        if (v73 == 102)
        {
          id v228 = 0;
          uint64_t v119 = 512;
        }
        else
        {
LABEL_207:
          uint64_t v119 = 512;
LABEL_264:
          v303 = v6;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
            goto LABEL_383;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v304 = (int)POSIXErrorCode.rawValue.getter();
          id v305 = objc_allocWithZone((Class)NSError);
          uint64_t v306 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v228 = objc_msgSend(v305, sel_initWithDomain_code_userInfo_, v306, v304, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v307 = objc_msgSend(v228, sel_domain);
          id v308 = static String._unconditionallyBridgeFromObjectiveC(_:)(v307);
          uint64_t v310 = v309;

          if (v308 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
            && v310 == v311)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            char v312 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v312 & 1) == 0) {
              goto LABEL_371;
            }
          }
          uint64_t v6 = v303;
        }
        swift_bridgeObjectRetain();
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v119, (uint64_t)v6, v7, v228, 0, 0, 0, 0, &v433, 0, 0, (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError, (uint64_t)&type metadata for POSIXError, (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0, (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),
          (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,
          (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,
          (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
        goto LABEL_44;
    }
  }
  uint64_t v50 = (char *)swift_slowAlloc();
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v50, v19, 1, v15, v16);
  char v52 = v51;
  swift_bridgeObjectRelease();
  if (v52)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v85 = objc_allocWithZone((Class)NSError);
    uint64_t v86 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v87 = objc_msgSend(v85, sel_initWithDomain_code_userInfo_, v86, 514, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v88 = objc_msgSend(v87, sel_domain);
    id v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
    uint64_t v91 = v90;

    if (v89 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v91 == v92)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v120 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v120 & 1) == 0) {
        goto LABEL_369;
      }
    }
    swift_willThrow();
    uint64_t v121 = v50;
LABEL_112:
    MEMORY[0x185309510](v121, -1, -1);
    return swift_bridgeObjectRelease();
  }
  uint64_t v422 = v8;
  if ((v428 & 2) != 0) {
    int v53 = 3585;
  }
  else {
    int v53 = 1537;
  }
  LODWORD(v428) = _NSOpenFileDescriptor_Protected(v50, v53, v428, 438);
  if ((v428 & 0x80000000) != 0)
  {
    Swift::Int32 v125 = MEMORY[0x185301870]();
    LODWORD(v62) = v125;
    if ((v9 & 1) == 0)
    {
      CocoaError.Code.init(fileErrno:reading:)(v125, 0);
      uint64_t v146 = (uint64_t (*)(void))v430._countAndFlagsBits;
      if (v62 == 102)
      {
        id v147 = 0;
      }
      else
      {
        int v214 = v50;
        int v215 = v6;
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
          goto LABEL_384;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v216 = (int)POSIXErrorCode.rawValue.getter();
        id v217 = objc_allocWithZone((Class)NSError);
        uint64_t v218 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v147 = objc_msgSend(v217, sel_initWithDomain_code_userInfo_, v218, v216, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v219 = objc_msgSend(v147, sel_domain);
        id v220 = static String._unconditionallyBridgeFromObjectiveC(_:)(v219);
        uint64_t v222 = v221;

        if (v220 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v222 == v223)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v349 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v349 & 1) == 0) {
            goto LABEL_377;
          }
        }
        uint64_t v6 = v215;
        uint64_t v50 = v214;
      }
      swift_bridgeObjectRetain();
      specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)(v146, (uint64_t)v6, v7, v147, 0, 0, 0, 0, &v433, 0, 0, (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError, (uint64_t)&type metadata for POSIXError, (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0, (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),
        (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,
        (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,
        (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
LABEL_343:
      swift_willThrow();
LABEL_357:
      MEMORY[0x185309510](v50, -1, -1);
      return swift_bridgeObjectRelease();
    }
    CocoaError.Code.init(fileErrno:reading:)(v125, 0);
    v429 = v432;
    swift_retain_n();
    id v126 = v6;
    swift_retain_n();
    id v127 = v126;
    v421 = (uint64_t *)v50;
    if (v62 == 102)
    {
      id v128 = 0;
    }
    else
    {
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
        goto LABEL_383;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
      uint64_t v206 = (int)POSIXErrorCode.rawValue.getter();
      id v207 = objc_allocWithZone((Class)NSError);
      uint64_t v208 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v128 = objc_msgSend(v207, sel_initWithDomain_code_userInfo_, v208, v206, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v209 = objc_msgSend(v128, sel_domain);
      id v210 = static String._unconditionallyBridgeFromObjectiveC(_:)(v209);
      uint64_t v212 = v211;

      if (v210 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v212 == v213)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v319 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v319 & 1) == 0) {
          goto LABEL_376;
        }
      }
      uint64_t v50 = (char *)v421;
    }
    id v320 = v127;
    swift_retain();
    uint64_t v321 = v422;
    swift_retain();
    if (!_foundation_swift_url_feature_enabled())
    {
      id v334 = objc_msgSend(v320, sel__parameterString);
      if (v334)
      {
        v335 = v334;
        id v336 = static String._unconditionallyBridgeFromObjectiveC(_:)(v334);
        v338 = v337;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v339 = objc_msgSend(v320, sel_path)) != 0)
        {
          v340 = v339;
          id v341 = static String._unconditionallyBridgeFromObjectiveC(_:)(v339);
          v342 = v6;
          uint64_t v343 = v7;
          v345 = v344;

          v433._uint64_t countAndFlagsBits = (uint64_t)v341;
          v433._unint64_t object = v345;
          swift_bridgeObjectRetain();
          v346._uint64_t countAndFlagsBits = 59;
          v346._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v346);
          uint64_t v7 = v343;
          uint64_t v6 = v342;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v347._uint64_t countAndFlagsBits = (uint64_t)v336;
          v347._unint64_t object = v338;
          String.append(_:)(v347);
          swift_bridgeObjectRelease();
          uint64_t v50 = (char *)v421;
          swift_bridgeObjectRelease();
          v348 = v342;
        }
        else
        {
          v433._uint64_t countAndFlagsBits = 59;
          v433._unint64_t object = (void *)0xE100000000000000;
          v350._uint64_t countAndFlagsBits = (uint64_t)v336;
          v350._unint64_t object = v338;
          String.append(_:)(v350);
          swift_bridgeObjectRelease();
          v348 = v6;
        }
        uint64_t v351 = v422;
        outlined consume of PathOrURL(v348, v7, v422, 1);
      }
      else
      {
        id v352 = objc_msgSend(v320, sel_path);
        if (v352)
        {
          v353 = v352;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v352);
        }
        uint64_t v351 = v422;
        outlined consume of PathOrURL(v6, v7, v422, 1);
      }
      goto LABEL_336;
    }
    v433._uint64_t countAndFlagsBits = (uint64_t)v320;
    v433._unint64_t object = (void *)v7;
    uint64_t v434 = v321;
    id v322 = v320;
    uint64_t v418 = v7;
    swift_retain();
    swift_retain();
    Swift::String v323 = URL.path(percentEncoded:)(1);
    Swift::String v433 = v323;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v323._countAndFlagsBits, (unint64_t)v323._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    v430._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v324 = specialized Set._Variant.insert(_:)(&v431, 0x2FuLL);
    uint64_t v325 = v430._countAndFlagsBits;
    uint64_t v326 = v433._countAndFlagsBits;
    v327 = v433._object;
    unint64_t v328 = ((unint64_t)v433._object >> 56) & 0xF;
    if (((uint64_t)v433._object & 0x2000000000000000) == 0) {
      unint64_t v328 = v433._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v328)
    {
      v420 = v6;
      Swift::String v430 = v433;
      MEMORY[0x1F4188790](v324);
      uint64_t v416 = (uint64_t)&v430;
      uint64_t v417 = v325;
      swift_bridgeObjectRetain();
      specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)&v415, v326, (unint64_t)v327);
      if (v329 == 1)
      {
        unint64_t v331 = (unint64_t)v430._object;
        Swift::Int v330 = v430._countAndFlagsBits;
        swift_bridgeObjectRetain();
        specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v330, v331, v325);
        uint64_t v333 = v332;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v333 = v329;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = v420;
      uint64_t v7 = v418;
      if (!v333)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v393 = v422;
        outlined consume of PathOrURL(v6, v7, v422, 1);
        outlined consume of PathOrURL(v6, v7, v393, 1);
        goto LABEL_335;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v7 = v418;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v387 = v422;
    outlined consume of PathOrURL(v6, v7, v422, 1);
    outlined consume of PathOrURL(v6, v7, v387, 1);
LABEL_335:
    uint64_t v50 = (char *)v421;
    uint64_t v351 = v422;
LABEL_336:
    v394 = v50;
    uint64_t v395 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v396 = v320;
    outlined consume of PathOrURL(v6, v7, v351, 1);
    uint64_t v397 = v351;
    if (v128)
    {
      v433._uint64_t countAndFlagsBits = (uint64_t)v128;
      lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
      id v128 = v128;
      if (_getErrorEmbeddedNSError<A>(_:)())
      {
      }
      else
      {
        swift_allocError();
        void *v400 = v128;
      }
      v399 = v429;
      v398 = (void *)_swift_stdlib_bridgeErrorToNSError();
    }
    else
    {
      v398 = 0;
      v399 = v429;
    }
    objc_msgSend(self, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, v399, v395, v396, v398, 0, 0, 0);

    swift_unknownObjectRelease();
    outlined consume of PathOrURL(v6, v7, v397, 1);
    uint64_t v50 = v394;
    goto LABEL_343;
  }
  if (v424)
  {
    char v54 = self;
    id v55 = objc_msgSend(v54, sel_currentProgress);

    uint64_t v56 = v423;
    if (v55)
    {
      if (v425) {
        unint64_t v57 = v423 - (void)v425;
      }
      else {
        unint64_t v57 = 0;
      }
      id v58 = objc_msgSend(v54, sel_progressWithTotalUnitCount_, v57);
    }
    else
    {
      id v58 = 0;
    }
  }
  else
  {
    id v58 = 0;
    uint64_t v56 = v423;
  }
  v433._uint64_t countAndFlagsBits = (uint64_t)v6;
  v433._unint64_t object = (void *)v7;
  uint64_t v434 = v422;
  char v435 = v9;
  uint64_t v149 = (void *)v426;
  id v150 = write(buffer:toFileDescriptor:path:parentProgress:)((uint64_t)v425, v56, v428, (uint64_t)&v433, v58);
  uint64_t v151 = v149;
  v424 = v58;
  if (v149)
  {
    LODWORD(v62) = MEMORY[0x185301870](v150);
    if (v58 && objc_msgSend(v58, sel_isCancelled))
    {
      uint64_t v152 = v50;
      unlink(v50);
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
      id v153 = objc_allocWithZone((Class)NSError);
      uint64_t v154 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v155 = objc_msgSend(v153, sel_initWithDomain_code_userInfo_, v154, 3072, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v156 = objc_msgSend(v155, sel_domain);
      id v157 = static String._unconditionallyBridgeFromObjectiveC(_:)(v156);
      uint64_t v159 = v158;

      if (v157 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v159 == v160)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v252 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v252 & 1) == 0) {
          goto LABEL_375;
        }
      }
      swift_willThrow();

      close(v428);
      uint64_t v121 = v152;
      goto LABEL_112;
    }
    if (v9)
    {
      CocoaError.Code.init(fileErrno:reading:)(v62, 0);
      int64_t v426 = (int64_t)v432;
      swift_retain_n();
      id v161 = v6;
      swift_retain_n();
      id v162 = v161;
      v421 = (uint64_t *)v50;
      if (v62 == 102)
      {
        uint64_t v163 = 0;
      }
      else
      {
        v420 = v6;
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
          goto LABEL_383;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v233 = (int)POSIXErrorCode.rawValue.getter();
        id v234 = objc_allocWithZone((Class)NSError);
        uint64_t v235 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v236 = objc_msgSend(v234, sel_initWithDomain_code_userInfo_, v235, v233, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v163 = (uint64_t)v236;
        id v237 = objc_msgSend(v236, sel_domain);
        id v238 = static String._unconditionallyBridgeFromObjectiveC(_:)(v237);
        uint64_t v240 = v239;

        if (v238 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v240 == v241)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v354 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v354 & 1) == 0) {
            goto LABEL_378;
          }
        }
        uint64_t v6 = v420;
      }
      v355 = v162;
      v356 = (void *)v7;
      swift_retain();
      uint64_t v357 = v422;
      swift_retain();
      int v358 = _foundation_swift_url_feature_enabled();
      uint64_t v418 = v7;
      v425 = (void *)v163;
      v429 = v355;
      if (!v358)
      {
        id v372 = objc_msgSend(v355, sel__parameterString);
        if (v372)
        {
          v373 = v372;
          id v374 = static String._unconditionallyBridgeFromObjectiveC(_:)(v372);
          v376 = v375;

          if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
            && (id v377 = objc_msgSend(v429, sel_path)) != 0)
          {
            v378 = v377;
            v379 = v6;
            id v380 = static String._unconditionallyBridgeFromObjectiveC(_:)(v377);
            v382 = v381;

            v433._uint64_t countAndFlagsBits = (uint64_t)v380;
            v433._unint64_t object = v382;
            swift_bridgeObjectRetain();
            v383._uint64_t countAndFlagsBits = 59;
            v383._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v383);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            v384._uint64_t countAndFlagsBits = (uint64_t)v374;
            v384._unint64_t object = v376;
            String.append(_:)(v384);
            swift_bridgeObjectRelease();
            uint64_t v6 = v379;
            swift_bridgeObjectRelease();
            v385 = v379;
          }
          else
          {
            v433._uint64_t countAndFlagsBits = 59;
            v433._unint64_t object = (void *)0xE100000000000000;
            v388._uint64_t countAndFlagsBits = (uint64_t)v374;
            v388._unint64_t object = v376;
            String.append(_:)(v388);
            swift_bridgeObjectRelease();
            v385 = v6;
          }
          uint64_t v389 = v418;
          uint64_t v390 = v422;
          outlined consume of PathOrURL(v385, v418, v422, 1);
        }
        else
        {
          id v391 = objc_msgSend(v355, sel_path);
          if (v391)
          {
            v392 = v391;
            static String._unconditionallyBridgeFromObjectiveC(_:)(v391);
          }
          uint64_t v389 = v418;
          uint64_t v390 = v422;
          outlined consume of PathOrURL(v6, v418, v422, 1);
        }
        goto LABEL_349;
      }
      v359 = v6;
      v433._uint64_t countAndFlagsBits = (uint64_t)v355;
      v433._unint64_t object = v356;
      uint64_t v434 = v357;
      v360 = v355;
      swift_retain();
      swift_retain();
      Swift::String v361 = URL.path(percentEncoded:)(1);
      Swift::String v433 = v361;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v361._countAndFlagsBits, (unint64_t)v361._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }
      v430._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v362 = specialized Set._Variant.insert(_:)(&v431, 0x2FuLL);
      uint64_t v363 = v430._countAndFlagsBits;
      uint64_t v364 = v433._countAndFlagsBits;
      v365 = v433._object;
      unint64_t v366 = ((unint64_t)v433._object >> 56) & 0xF;
      if (((uint64_t)v433._object & 0x2000000000000000) == 0) {
        unint64_t v366 = v433._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v366)
      {
        Swift::String v430 = v433;
        MEMORY[0x1F4188790](v362);
        uint64_t v416 = (uint64_t)&v430;
        uint64_t v417 = v363;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)&v415, v364, (unint64_t)v365);
        if (v367 == 1)
        {
          unint64_t v369 = (unint64_t)v430._object;
          Swift::Int v368 = v430._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v368, v369, v363);
          uint64_t v371 = v370;
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v371 = v367;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v6 = v359;
        if (!v371)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v403 = v418;
          uint64_t v404 = v422;
          outlined consume of PathOrURL(v359, v418, v422, 1);
          outlined consume of PathOrURL(v359, v403, v404, 1);
          goto LABEL_348;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v6 = v359;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v401 = v418;
      uint64_t v402 = v422;
      outlined consume of PathOrURL(v6, v418, v422, 1);
      outlined consume of PathOrURL(v6, v401, v402, 1);
LABEL_348:
      uint64_t v389 = v418;
      uint64_t v390 = v422;
LABEL_349:
      uint64_t v405 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v406 = v429;
      v407 = v6;
      uint64_t v408 = v389;
      outlined consume of PathOrURL(v6, v389, v390, 1);
      id v409 = v425;
      if (v425)
      {
        v433._uint64_t countAndFlagsBits = (uint64_t)v425;
        lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
        id v409 = v409;
        if (_getErrorEmbeddedNSError<A>(_:)())
        {
        }
        else
        {
          swift_allocError();
          void *v412 = v409;
        }
        int64_t v411 = v426;
        v410 = (void *)_swift_stdlib_bridgeErrorToNSError();
      }
      else
      {
        v410 = 0;
        int64_t v411 = v426;
      }
      objc_msgSend(self, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, v411, v405, v406, v410, 0, 0, 0);

      swift_unknownObjectRelease();
      outlined consume of PathOrURL(v407, v408, v422, 1);
      uint64_t v50 = (char *)v421;
      goto LABEL_356;
    }
    CocoaError.Code.init(fileErrno:reading:)(v62, 0);
    unint64_t v177 = (uint64_t (*)(void))v430._countAndFlagsBits;
    if (v62 == 102)
    {
      id v178 = 0;
LABEL_323:
      swift_bridgeObjectRetain();
      specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)(v177, (uint64_t)v6, v7, v178, 0, 0, 0, 0, &v433, 0, 0, (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError, (uint64_t)&type metadata for POSIXError, (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0, (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),
        (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,
        (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,
        (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
LABEL_356:
      swift_willThrow();

      close(v428);
      goto LABEL_357;
    }
    v421 = (uint64_t *)v50;
    uint64_t v242 = v6;
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
      uint64_t v243 = (int)POSIXErrorCode.rawValue.getter();
      id v244 = objc_allocWithZone((Class)NSError);
      uint64_t v245 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v178 = objc_msgSend(v244, sel_initWithDomain_code_userInfo_, v245, v243, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v246 = objc_msgSend(v178, sel_domain);
      id v247 = static String._unconditionallyBridgeFromObjectiveC(_:)(v246);
      uint64_t v249 = v248;

      if (v247 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v249 == v250)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v386 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v386 & 1) == 0) {
          goto LABEL_379;
        }
      }
      uint64_t v6 = v242;
      uint64_t v50 = (char *)v421;
      goto LABEL_323;
    }
LABEL_384:
    v433._uint64_t countAndFlagsBits = 0;
    v433._unint64_t object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    v433._uint64_t countAndFlagsBits = 0xD000000000000014;
    v433._unint64_t object = (void *)0x80000001823A9780;
    LODWORD(v432) = v62;
    goto LABEL_385;
  }
  v421 = (uint64_t *)v50;
  uint64_t v164 = (char *)(v429 + 8);
  uint64_t v165 = 1 << *((unsigned char *)v429 + 32);
  uint64_t v166 = -1;
  if (v165 < 64) {
    uint64_t v166 = ~(-1 << v165);
  }
  unint64_t v167 = v166 & v429[8];
  int64_t v168 = (unint64_t)(v165 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v169 = 0;
  while (1)
  {
    if (v167)
    {
      unint64_t v170 = __clz(__rbit64(v167));
      v167 &= v167 - 1;
      unint64_t v171 = v170 | (v169 << 6);
      goto LABEL_149;
    }
    BOOL v109 = __OFADD__(v169++, 1);
    if (v109) {
      goto LABEL_364;
    }
    if (v169 >= v168) {
      goto LABEL_168;
    }
    unint64_t v175 = *(void *)&v164[8 * v169];
    if (!v175) {
      break;
    }
LABEL_161:
    unint64_t v167 = (v175 - 1) & v175;
    unint64_t v171 = __clz(__rbit64(v175)) + (v169 << 6);
LABEL_149:
    uint64_t v172 = (uint64_t *)(v429[7] + 16 * v171);
    uint64_t v173 = *v172;
    unint64_t v174 = v172[1];
    swift_bridgeObjectRetain_n();
    outlined copy of Data._Representation(v173, v174);
    specialized Data._Representation.withUnsafeBytes<A>(_:)(v173, v174, v428);
    outlined consume of Data._Representation(v173, v174);
    swift_bridgeObjectRelease();
  }
  int64_t v176 = v169 + 1;
  if (v169 + 1 >= v168) {
    goto LABEL_168;
  }
  unint64_t v175 = *(void *)&v164[8 * v176];
  if (v175) {
    goto LABEL_160;
  }
  int64_t v176 = v169 + 2;
  if (v169 + 2 >= v168) {
    goto LABEL_168;
  }
  unint64_t v175 = *(void *)&v164[8 * v176];
  if (v175) {
    goto LABEL_160;
  }
  int64_t v176 = v169 + 3;
  if (v169 + 3 >= v168) {
    goto LABEL_168;
  }
  unint64_t v175 = *(void *)&v164[8 * v176];
  if (v175)
  {
LABEL_160:
    int64_t v169 = v176;
    goto LABEL_161;
  }
  while (1)
  {
    int64_t v169 = v176 + 1;
    if (__OFADD__(v176, 1)) {
      goto LABEL_368;
    }
    if (v169 >= v168) {
      break;
    }
    unint64_t v175 = *(void *)&v164[8 * v169];
    ++v176;
    if (v175) {
      goto LABEL_161;
    }
  }
LABEL_168:
  swift_release();

  close(v428);
  MEMORY[0x185309510](v421, -1, -1);
  return swift_bridgeObjectRelease();
}

id @objc static NSLocale._preferredLanguagesForCurrentUser(_:)(uint64_t a1, uint64_t a2, char a3)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.preferredLanguages(forCurrentUser:)(a3);
  uint64_t v4 = (void *)_ContiguousArrayBuffer._asCocoaArray()();

  return v4;
}

void *static Locale.preferredLanguages.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  return LocaleCache.preferredLanguages(forCurrentUser:)(0);
}

uint64_t StringProtocol.range<A>(of:options:range:locale:)(void *a1, unint64_t a2, unint64_t a3, unint64_t a4, int a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  id v113 = a1;
  LODWORD(v115) = a5;
  unint64_t v107 = a4;
  unint64_t v108 = a3;
  uint64_t v109 = *(void *)(a7 - 8);
  unint64_t v110 = a2;
  uint64_t v111 = a10;
  uint64_t v114 = a9;
  MEMORY[0x1F4188790](a1);
  unint64_t v13 = (unint64_t)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match?);
  MEMORY[0x1F4188790](v14 - 8);
  unint64_t v16 = (char *)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v91 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match);
  uint64_t v106 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  char v22 = (char *)&v91 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v91 - v24;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
  MEMORY[0x1F4188790](v26 - 8);
  unint64_t v28 = (char *)&v91 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  MEMORY[0x1F4188790](v29);
  MEMORY[0x1F4188790](v30);
  id v38 = (char *)&v91 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a6)
  {
    uint64_t v39 = *(void *)(v36 + 8);
    StringProtocol._ephemeralString.getter();
    uint64_t v40 = v114;
    unint64_t v41 = v112;
    StringProtocol._ephemeralString.getter();
    id v113 = (id)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v111 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v42 = v109;
    id v38 = v41;
    (*(void (**)(unint64_t, char *, uint64_t))(v109 + 16))(v13, v41, a7);
    if (v115)
    {
      unint64_t v16 = *(char **)(*(void *)(v40 + 8) + 8);
      id v44 = (id)v13;
      dispatch thunk of Collection.startIndex.getter();
      unint64_t v47 = v116;
      dispatch thunk of Collection.endIndex.getter();
      (*(void (**)(unint64_t, uint64_t))(v42 + 8))(v13, a7);
      if (v120 >> 14 < v47 >> 14)
      {
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
    }
    else
    {
      (*(void (**)(unint64_t, uint64_t))(v42 + 8))(v13, a7);
    }
    id v44 = v41;
    uint64_t v48 = StringProtocol._toUTF16Offsets(_:)();
    unint64_t v16 = (char *)(v49 - v48);
    if (__OFSUB__(v49, v48))
    {
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    uint64_t v50 = v48;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 488))(ObjectType, v39);
    id v38 = (char *)v111;
    id v44 = objc_msgSend(v113, sel_rangeOfString_options_range_locale_, v111, v110, v50, v16, v39);
    unint64_t v13 = v52;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

LABEL_28:
    if (v44 == (id)0x7FFFFFFFFFFFFFFFLL) {
      return 0;
    }
    if (!__OFADD__(v44, v13)) {
      return StringProtocol._toUTF16Indices(_:)();
    }
    goto LABEL_46;
  }
  unint64_t v105 = v32;
  int64_t v103 = v28;
  id v95 = v25;
  uint64_t v109 = v35;
  Swift::String v96 = v22;
  id v97 = v19;
  long long v98 = v16;
  uint64_t v100 = v34;
  uint64_t v101 = v31;
  uint64_t v102 = v33;
  uint64_t v99 = v20;
  uint64_t v39 = v115;
  if (v115)
  {
    dispatch thunk of Collection.startIndex.getter();
    unint64_t v13 = v116;
    dispatch thunk of Collection.endIndex.getter();
    id v44 = (id)v120;
    if (v120 >> 14 < v13 >> 14)
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    id v45 = v113;
  }
  else
  {
    unint64_t v13 = BidirectionalCollection<>._checkRange(_:)(v108, v107);
    id v44 = v43;
    id v45 = v113;
    if (v46) {
      return v13;
    }
  }
  uint64_t v53 = StringProtocol._asContiguousUTF8Substring(from:)(v13, (uint64_t)v44, a7);
  uint64_t v104 = v56;
  if (v56)
  {
    unint64_t v57 = v53;
    unint64_t v93 = v55;
    unint64_t v94 = v54;
    ((void (*)(char *, id, uint64_t))v105[2])(v38, v45, v109);
    unint64_t v58 = Substring.init<A>(_:)();
    id v38 = (char *)v58;
    unint64_t v13 = v59;
    id v44 = (id)v60;
    uint64_t v39 = v61;
    LOBYTE(v16) = v110;
    if ((v110 & 0x400) == 0)
    {
      if ((v57 ^ v94) >= 0x4000 && (v58 ^ v59) >> 14)
      {
        if ((v110 & 2) != 0)
        {
          unint64_t v80 = v104;
          unsigned int v81 = (v110 >> 2) & 1;
          uint64_t v115 = (v110 >> 3) & 1;
          LODWORD(v114) = v110 & 1;
          unint64_t v82 = v61;
          uint64_t v83 = (v110 >> 7) & 1;
          uint64_t v84 = (v110 >> 8) & 1;
          unint64_t v85 = v94;
          swift_bridgeObjectRetain();
          unint64_t v13 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)((unint64_t)v38, v13, (unint64_t)v44, v82, v84, v83, v114, v115, v81, v57, v85, v93, v80);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
        }
        else
        {
          unint64_t v13 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v58, v59, v60, v61, (v110 >> 8) & 1, (v110 >> 7) & 1, v110 & 1, (v110 >> 3) & 1, (v110 & 4) != 0, v57, v94, v93, v104);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        return v13;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    unint64_t v92 = v57;
    if (one-time initialization token for cache == -1)
    {
LABEL_18:
      uint64_t v62 = static RegexPatternCache.cache;
      swift_retain();
      uint64_t v63 = MEMORY[0x185301F50](v38, v13, v44, v39);
      unint64_t v105 = &v91;
      MEMORY[0x1F4188790](v63);
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v62 + 24));
      id v64 = v103;
      partial apply for closure #1 in RegexPatternCache.regex(for:caseInsensitive:)((void *)(v62 + 16), v103);
      os_unfair_lock_unlock((os_unfair_lock_t)(v62 + 24));
      swift_bridgeObjectRelease();
      swift_release_n();
      uint64_t v72 = v101;
      uint64_t v71 = v102;
      int v73 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v102 + 48))(v64, 1, v101);
      if (v73 == 1)
      {
        uint64_t v74 = &demangling cache variable for type metadata for Regex<AnyRegexOutput>?;
        uint64_t v75 = (uint64_t)v64;
LABEL_41:
        outlined destroy of Any?(v75, v74);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 0;
      }
      uint64_t v76 = v100;
      (*(void (**)(uint64_t, char *, uint64_t))(v71 + 32))(v100, v64, v72);
      if ((v16 & 8) != 0)
      {
        unint64_t v116 = v92;
        unint64_t v117 = v94;
        unint64_t v118 = v93;
        uint64_t v119 = v104;
        lazy protocol witness table accessor for type Substring and conformance Substring();
        lazy protocol witness table accessor for type Regex<AnyRegexOutput> and conformance Regex<A>();
        uint64_t v86 = (uint64_t)v97;
        BidirectionalCollection<>.prefixMatch<A>(of:)();
        uint64_t v87 = v106;
        uint64_t v88 = v99;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v86, 1, v99) == 1)
        {
          (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v76, v72);
          uint64_t v74 = &demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match?;
          uint64_t v75 = v86;
          goto LABEL_41;
        }
        uint64_t v90 = v95;
        (*(void (**)(char *, uint64_t, uint64_t))(v87 + 32))(v95, v86, v88);
        unint64_t v13 = Regex.Match.range.getter();
        (*(void (**)(char *, uint64_t))(v87 + 8))(v90, v88);
      }
      else
      {
        unint64_t v116 = v92;
        unint64_t v117 = v94;
        unint64_t v118 = v93;
        uint64_t v119 = v104;
        type metadata accessor for AnyRegexOutput();
        lazy protocol witness table accessor for type Substring and conformance Substring();
        lazy protocol witness table accessor for type Regex<AnyRegexOutput> and conformance Regex<A>();
        uint64_t v77 = (uint64_t)v98;
        BidirectionalCollection<>.firstMatch<A, B>(of:)();
        uint64_t v78 = v106;
        uint64_t v79 = v99;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v77, 1, v99) == 1)
        {
          (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v76, v72);
          uint64_t v74 = &demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match?;
          uint64_t v75 = v77;
          goto LABEL_41;
        }
        id v89 = v96;
        (*(void (**)(char *, uint64_t, uint64_t))(v78 + 32))(v96, v77, v79);
        unint64_t v13 = Regex.Match.range.getter();
        (*(void (**)(char *, uint64_t))(v78 + 8))(v89, v79);
      }
      (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v76, v72);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v13;
    }
LABEL_49:
    swift_once();
    goto LABEL_18;
  }
  StringProtocol._ephemeralString.getter();
  if (v39)
  {
    StringProtocol._ephemeralString.getter();
    uint64_t v39 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v70 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    if (v110) {
      id v68 = objc_msgSend((id)v39, sel_rangeOfString_options_, v70);
    }
    else {
      id v68 = objc_msgSend((id)v39, sel_rangeOfString_, v70);
    }
    goto LABEL_27;
  }
  StringProtocol._ephemeralString.getter();
  uint64_t v39 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v65 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t result = StringProtocol._toUTF16Offsets(_:)();
  if (!__OFSUB__(v67, result))
  {
    id v68 = objc_msgSend((id)v39, sel_rangeOfString_options_range_, v65, v110, result, v67 - result);
LABEL_27:
    id v44 = v68;
    unint64_t v13 = v69;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_28;
  }
  __break(1u);
  return result;
}

id @objc static NSLocale._preferredLanguages.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.preferredLanguages(forCurrentUser:)(0);
  uint64_t v0 = (void *)_ContiguousArrayBuffer._asCocoaArray()();

  return v0;
}

void *LocaleCache.preferredLanguages(forCurrentUser:)(char a1)
{
  CFStringRef v2 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  if (a1) {
    CFPropertyListRef v3 = CFPreferencesCopyValue(v2, (CFStringRef)*MEMORY[0x1E4F1D3B8], (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  }
  else {
    CFPropertyListRef v3 = CFPreferencesCopyAppValue(v2, (CFStringRef)*MEMORY[0x1E4F1D3D8]);
  }
  CFPropertyListRef v4 = v3;
  swift_unknownObjectRelease();
  if (v4
    && (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]),
        swift_dynamicCast()))
  {
    uint64_t v5 = v19;
    uint64_t v6 = *(void *)(v19 + 16);
    if (!v6)
    {
LABEL_7:
      uint64_t v7 = (void *)MEMORY[0x1E4FBC860];
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v5 = MEMORY[0x1E4FBC860];
    uint64_t v6 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (!v6) {
      goto LABEL_7;
    }
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
  swift_bridgeObjectRetain();
  uint64_t v9 = v5 + 40;
  uint64_t v7 = (void *)MEMORY[0x1E4FBC860];
  do
  {
    CFStringRef v10 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v8, v10);
    swift_unknownObjectRelease();
    if (CanonicalLanguageIdentifierFromString)
    {
      id v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
      unint64_t v14 = v13;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      id v12 = 0;
      unint64_t v14 = 0xE000000000000000;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    }
    unint64_t v16 = v7[2];
    unint64_t v15 = v7[3];
    if (v16 >= v15 >> 1) {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v7);
    }
    v9 += 16;
    v7[2] = v16 + 1;
    uint64_t v17 = &v7[2 * v16];
    v17[4] = v12;
    v17[5] = v14;
    --v6;
  }
  while (v6);
  swift_bridgeObjectRelease();
LABEL_19:
  swift_bridgeObjectRelease();
  return v7;
}

void *StringProtocol.components<A>(separatedBy:)(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*(void *)(v10 + 8) + 8);
  dispatch thunk of Collection.startIndex.getter();
  unint64_t v12 = v71;
  dispatch thunk of Collection.endIndex.getter();
  if (v70 >> 14 < v12 >> 14) {
    goto LABEL_46;
  }
  uint64_t v67 = a1;
  uint64_t v13 = StringProtocol._asContiguousUTF8Substring(from:)(v12, v70, a2);
  uint64_t v68 = v15;
  uint64_t v69 = v16;
  if (v16)
  {
    unint64_t v11 = v13;
    unint64_t v17 = v14;
    uint64_t v18 = v67;
    int v66 = specialized static StringProtocol.== infix<A>(_:_:)(v67, 10, 0xE100000000000000, a3);
    (*(void (**)(char *, uint64_t *, uint64_t))(v7 + 16))(v9, v18, a3);
    uint64_t v19 = Substring.init<A>(_:)();
    unint64_t v65 = v21;
    uint64_t v67 = v22;
    unint64_t v23 = v17 >> 14;
    a2 = v11;
    unint64_t v24 = v17;
    if (v11 >> 14 >= v17 >> 14)
    {
      CFPropertyListRef v3 = (void *)MEMORY[0x1E4FBC860];
      if (v23 >= v11 >> 14)
      {
LABEL_36:
        uint64_t v54 = Substring.subscript.getter();
        unint64_t v11 = MEMORY[0x185301F50](v54);
        a2 = v55;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
LABEL_37:
          unint64_t v57 = v3[2];
          unint64_t v56 = v3[3];
          if (v57 >= v56 >> 1) {
            CFPropertyListRef v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v56 > 1), v57 + 1, 1, v3);
          }
          v3[2] = v57 + 1;
          unint64_t v58 = &v3[2 * v57];
          v58[4] = v11;
          v58[5] = a2;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_40;
        }
LABEL_47:
        CFPropertyListRef v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        goto LABEL_37;
      }
    }
    else
    {
      unint64_t v61 = v20;
      unint64_t v62 = v19;
      unint64_t v63 = v19 ^ v20;
      CFPropertyListRef v3 = (void *)MEMORY[0x1E4FBC860];
      unint64_t v60 = v11 >> 14;
      unint64_t v25 = v11 >> 14;
      unint64_t v64 = v17 >> 14;
      while (1)
      {
        if (v23 < v25) {
          goto LABEL_44;
        }
        swift_bridgeObjectRetain();
        unint64_t v11 = a2;
        unint64_t v26 = v24;
        unint64_t v27 = Substring.subscript.getter();
        unint64_t v29 = v28;
        unint64_t v31 = v30;
        unint64_t v33 = v32;
        swift_bridgeObjectRelease();
        if ((v27 ^ v29) < 0x4000 || v63 < 0x4000)
        {
          if ((v27 ^ v29) < 0x4000)
          {
            unint64_t v41 = v25;
          }
          else
          {
            CFPropertyListRef v3 = (void *)MEMORY[0x1E4FBC860];
            unint64_t v41 = v60;
          }
          a2 = v11;
          swift_bridgeObjectRelease();
          goto LABEL_34;
        }
        if (v66)
        {
          swift_bridgeObjectRetain();
          uint64_t v34 = v67;
          swift_bridgeObjectRetain();
          a2 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v62, v61, v65, (unint64_t)v34, 0, 0, 0, 0, 0, v27, v29, v31, v33);
          unint64_t v36 = v35;
          char v38 = v37;
          swift_bridgeObjectRelease_n();
        }
        else
        {
          a2 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v62, v61, v65, (uint64_t)v67, 0, 0, 0, 0, 0, v27, v29, v31, v33);
          unint64_t v36 = v39;
          char v38 = v40;
        }
        swift_bridgeObjectRelease();
        if (v38)
        {
          unint64_t v41 = v25;
          a2 = v11;
LABEL_34:
          unint64_t v23 = v64;
LABEL_35:
          if (v23 < v41) {
            goto LABEL_43;
          }
          goto LABEL_36;
        }
        unint64_t v41 = v36 >> 14;
        if (a2 >> 14 == v36 >> 14) {
          break;
        }
        if (a2 >> 14 < v25) {
          goto LABEL_45;
        }
        uint64_t v42 = Substring.subscript.getter();
        uint64_t v43 = MEMORY[0x185301F50](v42);
        uint64_t v45 = v44;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          CFPropertyListRef v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        }
        unint64_t v47 = v3[2];
        unint64_t v46 = v3[3];
        if (v47 >= v46 >> 1) {
          CFPropertyListRef v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v46 > 1), v47 + 1, 1, v3);
        }
        v3[2] = v47 + 1;
        uint64_t v48 = &v3[2 * v47];
        _OWORD v48[4] = v43;
        v48[5] = v45;
        swift_bridgeObjectRelease();
        unint64_t v25 = v36 >> 14;
        unint64_t v23 = v64;
        a2 = v11;
        unint64_t v24 = v26;
        if (v41 >= v64) {
          goto LABEL_35;
        }
      }
      a2 = v11;
      if (v64 >= v25) {
        goto LABEL_36;
      }
    }
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  StringProtocol._ephemeralString.getter();
  uint64_t v49 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  StringProtocol._ephemeralString.getter();
  uint64_t v50 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v51 = objc_msgSend(v49, sel_componentsSeparatedByString_, v50);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (!v51) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v52 = swift_dynamicCastClass();
  if (!v52)
  {
    swift_unknownObjectRelease();
    objc_msgSend(v51, sel_copy);
    unint64_t v53 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    CFPropertyListRef v3 = (void *)specialized _arrayForceCast<A, B>(_:)(v53);

LABEL_40:
    swift_bridgeObjectRelease();
    return v3;
  }
  CFPropertyListRef v3 = (void *)v52;

  return v3;
}

unint64_t specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, char a9, unint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13)
{
  int v151 = a8;
  int v184 = a7;
  uint64_t v160 = a4;
  uint64_t v159 = a3;
  unint64_t v161 = a2;
  unint64_t v163 = a1;
  uint64_t v167 = a12;
  uint64_t v15 = a10;
  unint64_t v16 = a11;
  v191[1] = *MEMORY[0x1E4F143B8];
  uint64_t v182 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v17 = *(void *)(v182 - 8);
  MEMORY[0x1F4188790](v182);
  id v181 = (char *)&v150 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v157 = a10;
  uint64_t v158 = a13;
  int v183 = a6;
  int v185 = a5;
  if ((a5 & 1) == 0 && (a6 & 1) == 0)
  {
    if ((v184 & 1) == 0)
    {
      uint64_t v149 = a13;
      uint64_t v148 = v167;
      return specialized BidirectionalCollection._range<A>(of:anchored:backwards:)(v163, v161, v159, v160, v151 & 1, a9 & 1, a10, a11);
    }
LABEL_6:
    if ((a9 & 1) == 0)
    {
      if ((v151 & 1) == 0) {
        goto LABEL_22;
      }
LABEL_13:
      int v150 = 1;
      unint64_t v21 = a10;
LABEL_23:
      unint64_t v20 = a10;
      goto LABEL_24;
    }
    goto LABEL_11;
  }
  if (v184) {
    goto LABEL_6;
  }
  if (a9)
  {
    if ((a6 & 1) == 0)
    {
      unint64_t v22 = v163 >> 14;
      unint64_t v23 = a11;
      if (v163 >> 14 < v161 >> 14)
      {
        unint64_t v24 = a10 >> 14;
        if (a10 >> 14 >= a11 >> 14) {
          return 0;
        }
        unint64_t v25 = Substring.index(before:)();
        unint64_t v26 = Substring.index(before:)();
        unint64_t v16 = v26;
        if (v22 < v25 >> 14)
        {
          if (v24 >= v26 >> 14) {
            return 0;
          }
          while (1)
          {
            unint64_t v27 = Substring.index(before:)();
            unint64_t v16 = Substring.index(before:)();
            if (v22 >= v27 >> 14) {
              break;
            }
            unint64_t result = 0;
            if (v24 >= v16 >> 14) {
              return result;
            }
          }
        }
        uint64_t v15 = v157;
      }
      int v150 = 0;
      if (v151) {
        unint64_t v21 = v16;
      }
      else {
        unint64_t v21 = v15;
      }
      unint64_t v20 = v16;
      goto LABEL_25;
    }
LABEL_11:
    unint64_t v20 = Substring.index(_:offsetBy:)();
    int v150 = 0;
    unint64_t v21 = a10;
    goto LABEL_24;
  }
  if (v151) {
    goto LABEL_13;
  }
  if (a6)
  {
LABEL_22:
    unint64_t v21 = Substring.index(_:offsetBy:)();
    int v150 = 1;
    goto LABEL_23;
  }
  unint64_t v143 = v163 >> 14;
  if (v163 >> 14 < v161 >> 14)
  {
    unint64_t v144 = a10 >> 14;
    if (a10 >> 14 >= a11 >> 14) {
      return 0;
    }
    unint64_t v16 = Substring.index(before:)();
    unint64_t v23 = a11;
    unint64_t v145 = Substring.index(before:)();
    unint64_t v21 = v145;
    if (v143 >= v16 >> 14)
    {
      int v150 = 1;
      unint64_t v20 = a10;
      uint64_t v15 = a10;
    }
    else
    {
      if (v144 >= v145 >> 14) {
        return 0;
      }
      while (1)
      {
        unint64_t v16 = Substring.index(before:)();
        unint64_t v21 = Substring.index(before:)();
        if (v143 >= v16 >> 14) {
          break;
        }
        unint64_t result = 0;
        if (v144 >= v21 >> 14) {
          return result;
        }
      }
      int v150 = 1;
      uint64_t v15 = v157;
      unint64_t v20 = v157;
    }
    goto LABEL_25;
  }
  int v150 = 1;
  unint64_t v21 = a11;
  unint64_t v20 = a10;
LABEL_24:
  unint64_t v23 = a11;
LABEL_25:
  unint64_t v154 = v21 >> 14;
  uint64_t v28 = -1;
  if (v21 >> 14 >= v20 >> 14) {
    uint64_t v28 = 1;
  }
  uint64_t v153 = v28;
  unint64_t v166 = v161 >> 14;
  unint64_t v156 = v163 >> 14;
  id v180 = (void (**)(char *, uint64_t))(v17 + 8);
  unint64_t v168 = v23;
  unint64_t v29 = v20;
  while (2)
  {
    unint64_t v190 = 15;
    v191[0] = v29;
    unint64_t result = v29;
    if (v156 >= v166)
    {
      if (v156 == v166) {
        goto LABEL_269;
      }
      if (v154 == v29 >> 14) {
        return 0;
      }
      char v30 = 0;
      goto LABEL_238;
    }
    unint64_t v152 = v29;
    char v30 = 0;
    int v31 = 0;
    uint64_t v174 = 0;
    uint64_t v32 = 0;
    unint64_t v33 = 0xE000000000000000;
    uint64_t v172 = 15;
    unint64_t v34 = 0xE000000000000000;
    unint64_t v35 = v163;
    unint64_t v36 = v156;
    unint64_t v37 = v179;
LABEL_30:
    BOOL v171 = 0;
    unint64_t v162 = v35;
    unint64_t v164 = v35 >> 14;
    uint64_t v170 = v32;
    uint64_t v175 = v34;
    unint64_t v38 = v16;
    unint64_t v39 = v168;
    while (1)
    {
      unint64_t v165 = v36;
      int v169 = v31;
      if (v31)
      {
        uint64_t v42 = String.subscript.getter();
        unint64_t v16 = v43;
        if (v30) {
          swift_bridgeObjectRelease();
        }
        unint64_t v190 = String.index(after:)();
        if (v171) {
          goto LABEL_36;
        }
      }
      else
      {
        if ((v191[0] ^ v39) < 0x4000)
        {
          if (v36 == v166) {
            goto LABEL_284;
          }
          if (v154 == v152 >> 14)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v30)
            {
LABEL_302:
              swift_bridgeObjectRelease();
              goto LABEL_303;
            }
            return 0;
          }
          goto LABEL_237;
        }
        uint64_t v42 = Substring.subscript.getter();
        unint64_t v16 = v47;
        if (v30) {
          swift_bridgeObjectRelease();
        }
        if (v171)
        {
LABEL_36:
          uint64_t v178 = String.subscript.getter();
          unint64_t v45 = v44;
          if (v30) {
            swift_bridgeObjectRelease();
          }
          unint64_t v46 = String.index(after:)();
          goto LABEL_46;
        }
      }
      uint64_t v178 = Substring.subscript.getter();
      unint64_t v45 = v48;
      if (v30) {
        swift_bridgeObjectRelease();
      }
      unint64_t v46 = v172;
LABEL_46:
      uint64_t countAndFlagsBits = v178;
      char v50 = v183;
      if (v42 == v178 && v16 == v45)
      {
        unint64_t v37 = v16;
        goto LABEL_51;
      }
      uint64_t v172 = v46;
      unint64_t v179 = v45;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
LABEL_50:
      unint64_t v37 = v179;
      unint64_t v46 = v172;
LABEL_51:
      unint64_t v173 = v175;
      uint64_t v51 = v170;
      if (v169) {
        goto LABEL_52;
      }
LABEL_194:
      if (!v171)
      {
        uint64_t v136 = v51;
        uint64_t v172 = v46;
        unint64_t v179 = v37;
        goto LABEL_209;
      }
LABEL_195:
      int v31 = 0;
      if ((v33 & 0x2000000000000000) == 0)
      {
LABEL_196:
        uint64_t v92 = v174 & 0xFFFFFFFFFFFFLL;
        goto LABEL_197;
      }
LABEL_121:
      uint64_t v92 = HIBYTE(v33) & 0xF;
LABEL_197:
      uint64_t v170 = v51;
      uint64_t v175 = v173;
      unint64_t v38 = v16;
      unint64_t v39 = v168;
      uint64_t v172 = v46;
      if (v46 >> 14 == 4 * v92)
      {
        if (v31)
        {
          int v135 = 1;
          uint64_t v136 = v170;
          unint64_t v173 = v175;
          unint64_t v179 = v37;
          goto LABEL_210;
        }
        uint64_t v136 = v170;
        unint64_t v173 = v175;
        unint64_t v179 = v37;
        goto LABEL_209;
      }
      if (v31)
      {
        char v30 = 1;
        BOOL v171 = 1;
        unint64_t v36 = v164;
        if (v164 >= v166)
        {
          if (v164 != v166) {
            goto LABEL_236;
          }
          if ((v183 & 1) == 0)
          {
            char v137 = 0;
            unint64_t v139 = v175;
            unint64_t v179 = v37;
            uint64_t v32 = v170;
            unint64_t v138 = v152;
            if ((v175 & 0x2000000000000000) != 0) {
              goto LABEL_220;
            }
            goto LABEL_232;
          }
          uint64_t v32 = v170;
          unint64_t v173 = v175;
          unint64_t v179 = v37;
          goto LABEL_231;
        }
      }
      else
      {
        int v40 = v31;
        uint64_t v41 = Substring.index(after:)();
        int v31 = v40;
        v191[0] = v41;
        char v30 = 1;
        BOOL v171 = 1;
        unint64_t v36 = v164;
        if (v164 >= v166)
        {
          if (v164 == v166)
          {
LABEL_284:
            if (v183)
            {
LABEL_272:
              if (v191[0] >> 14 < v39 >> 14) {
                specialized _StringCompareOptionsIterable._consumeExtendCharacters(from:)((unint64_t)v191, v15, v39);
              }
              goto LABEL_285;
            }
            goto LABEL_285;
          }
LABEL_236:
          if (v154 == v152 >> 14) {
            goto LABEL_301;
          }
LABEL_237:
          unint64_t v179 = v37;
          unint64_t v16 = v38;
          goto LABEL_238;
        }
      }
    }
    if (v169)
    {
      if (v171)
      {
        uint64_t v51 = v170;
        unint64_t v52 = v175;
        unint64_t v46 = v172;
        goto LABEL_111;
      }
      unint64_t v52 = v175;
      unint64_t v59 = v179;
      if (v42 != countAndFlagsBits)
      {
LABEL_135:
        char v101 = _stringCompareWithSmolCheck(_:_:expecting:)();
        unint64_t v100 = v179;
        if (v101)
        {
LABEL_136:
          char v53 = 0;
          unint64_t v46 = v172;
          uint64_t v51 = v170;
          if ((v52 & 0x2000000000000000) == 0) {
            goto LABEL_115;
          }
LABEL_58:
          uint64_t v54 = HIBYTE(v52) & 0xF;
LABEL_116:
          unint64_t v173 = v52;
          if (v190 >> 14 == 4 * v54)
          {
            unint64_t v37 = v179;
            if ((v53 & 1) == 0)
            {
              uint64_t v136 = v51;
              uint64_t v172 = v46;
LABEL_209:
              int v135 = 0;
              v191[0] = Substring.index(after:)();
              goto LABEL_210;
            }
            goto LABEL_195;
          }
          unint64_t v37 = v179;
          if (v53)
          {
            int v31 = 1;
            if ((v33 & 0x2000000000000000) == 0) {
              goto LABEL_196;
            }
            goto LABEL_121;
          }
          uint64_t v136 = v51;
          uint64_t v172 = v46;
          int v135 = 1;
LABEL_210:
          unint64_t v35 = Substring.index(after:)();
          unint64_t v36 = v35 >> 14;
          char v30 = 1;
          unint64_t v37 = v179;
          unint64_t v34 = v173;
          uint64_t v32 = v136;
          int v31 = v135;
          if (v35 >> 14 >= v166)
          {
            if (v35 >> 14 == v166)
            {
              unint64_t v138 = v152;
              if (v135)
              {
                if ((v183 & 1) == 0)
                {
                  char v137 = 0;
                  goto LABEL_219;
                }
                goto LABEL_231;
              }
              if (v183)
              {
                uint64_t v175 = v173;
                goto LABEL_271;
              }
LABEL_285:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              char v146 = v150 | ~(_BYTE)v151;
              goto LABEL_286;
            }
            if (v154 == v152 >> 14)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_303:
              swift_bridgeObjectRelease();
              return 0;
            }
LABEL_238:
            unint64_t v29 = Substring.index(_:offsetBy:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v30)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            continue;
          }
          goto LABEL_30;
        }
        unint64_t v173 = v52;
        int v169 = 1;
LABEL_139:
        unint64_t v102 = v100;
        if ((Character.asciiValue.getter() & 0x100) == 0)
        {
          if (v184)
          {
            Swift::String v103 = String.lowercased()();
            uint64_t countAndFlagsBits = v103._countAndFlagsBits;
            unint64_t object = (unint64_t)v103._object;
          }
          else
          {
            unint64_t object = v179;
            swift_bridgeObjectRetain();
          }
          goto LABEL_186;
        }
        unint64_t v105 = 0xE000000000000000;
        uint64_t v188 = 0;
        unint64_t v189 = 0xE000000000000000;
        uint64_t v176 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        uint64_t v177 = HIBYTE(v102) & 0xF;
        if ((v102 & 0x2000000000000000) != 0) {
          uint64_t v15 = HIBYTE(v102) & 0xF;
        }
        else {
          uint64_t v15 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        }
        if (v15)
        {
          unint64_t v155 = v33;
          uint64_t v175 = v102 & 0xFFFFFFFFFFFFFFLL;
          swift_bridgeObjectRetain();
          uint64_t v106 = 0;
          while (1)
          {
            if ((v179 & 0x1000000000000000) != 0)
            {
              unsigned int v113 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            }
            else
            {
              if ((v179 & 0x2000000000000000) != 0)
              {
                uint64_t v186 = countAndFlagsBits;
                uint64_t v187 = v175;
              }
              else if ((countAndFlagsBits & 0x1000000000000000) == 0)
              {
                _StringObject.sharedUTF8.getter();
              }
              unsigned int v113 = _decodeScalar(_:startingAt:)();
            }
            unsigned int v115 = v113;
            uint64_t v116 = v114;
            if ((v185 & 1) != 0 && v113 >> 8 >= 0xFF && v113 < 0xFFEF)
            {
              LODWORD(v186) = v113;
              unint64_t result = CFUniCharCompatibilityDecompose();
              unsigned int v117 = v186;
              if (v186 >> 11 == 27) {
                goto LABEL_268;
              }
              if (v186 > 0x10FFFF) {
                goto LABEL_267;
              }
              if ((v50 & 1) == 0) {
                goto LABEL_174;
              }
            }
            else
            {
              unsigned int v117 = v113;
              if ((v50 & 1) == 0) {
                goto LABEL_174;
              }
            }
            uint64_t v118 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v115), 5);
            if (!v118 || ((*(unsigned __int8 *)(v118 + ((unsigned __int16)v115 >> 3)) >> (v115 & 7)) & 1) == 0)
            {
              uint64_t v119 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v117), 2);
              if (v119 && ((*(unsigned __int8 *)(v119 + ((unsigned __int16)v117 >> 3)) >> (v117 & 7)) & 1) != 0)
              {
                MEMORY[0x1F4188790](v119);
                uint64_t v120 = CFUniCharDecomposeCharacter();
                char v50 = v183;
                if (*(&v150 - 64) < 0x510 && v120 > 0) {
                  unsigned int v117 = *(&v150 - 64);
                }
              }
LABEL_174:
              if (v184)
              {
                unint64_t v107 = v181;
                Unicode.Scalar.properties.getter();
                uint64_t v108 = Unicode.Scalar.Properties._caseFolded.getter();
                uint64_t v110 = v109;
                (*v180)(v107, v182);
                uint64_t v111 = v108;
                char v50 = v183;
                uint64_t v112 = v110;
              }
              else
              {
                if (v117 >= 0x80)
                {
                  int v123 = (v117 & 0x3F) << 8;
                  if (v117 >= 0x800)
                  {
                    int v124 = (v123 | (v117 >> 6) & 0x3F) << 8;
                    int v125 = (((v124 | (v117 >> 12) & 0x3F) << 8) | (v117 >> 18)) - 2122219023;
                    unsigned int v122 = (v124 | (v117 >> 12)) + 8487393;
                    if (HIWORD(v117)) {
                      unsigned int v122 = v125;
                    }
                  }
                  else
                  {
                    unsigned int v122 = (v123 | (v117 >> 6)) + 33217;
                  }
                }
                else
                {
                  unsigned int v122 = v117 + 1;
                }
                uint64_t v186 = (v122 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v122) >> 3))));
                uint64_t v111 = MEMORY[0x185302020](&v186);
              }
              String.append(_:)(*(Swift::String *)&v111);
              swift_bridgeObjectRelease();
            }
            v106 += v116;
            uint64_t countAndFlagsBits = v178;
            if (v106 >= v15)
            {
              swift_bridgeObjectRelease();
              uint64_t v126 = v188;
              unint64_t v105 = v189;
              unint64_t v33 = v155;
              goto LABEL_184;
            }
          }
        }
        uint64_t v126 = 0;
LABEL_184:
        uint64_t v186 = v126;
        uint64_t v187 = v105;
        uint64_t countAndFlagsBits = String.init<A>(_:)();
        unint64_t object = v127;
        uint64_t v15 = v157;
LABEL_186:
        unint64_t v128 = v33;
        uint64_t v129 = HIBYTE(object) & 0xF;
        if ((object & 0x2000000000000000) == 0) {
          uint64_t v129 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        }
        BOOL v171 = v129 != 0;
        if (v129)
        {
          String.subscript.getter();
          unint64_t v131 = v130;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v172 = String.index(after:)();
          swift_bridgeObjectRelease();
          uint64_t v174 = countAndFlagsBits;
          unint64_t v128 = object;
          unint64_t v179 = v131;
        }
        swift_bridgeObjectRetain();
        uint64_t v132 = specialized Collection.first.getter(countAndFlagsBits, object);
        if (v133)
        {
          if (v42 == v132 && v133 == v16)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v33 = v128;
            unint64_t v37 = v179;
            unint64_t v46 = v172;
            uint64_t v51 = v170;
            if ((v169 & 1) == 0) {
              goto LABEL_194;
            }
LABEL_52:
            unint64_t v179 = v37;
            if (v171)
            {
              unint64_t v52 = v173;
              goto LABEL_111;
            }
            char v53 = 0;
            unint64_t v52 = v173;
            if ((v173 & 0x2000000000000000) != 0) {
              goto LABEL_58;
            }
LABEL_115:
            uint64_t v54 = v51 & 0xFFFFFFFFFFFFLL;
            goto LABEL_116;
          }
          char v134 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v134)
          {
            uint64_t v175 = v173;
            unint64_t v33 = v128;
            goto LABEL_50;
          }
          unint64_t v138 = v152;
          uint64_t v32 = v170;
          if (v165 == v166)
          {
            if (v169)
            {
              if ((v50 & 1) == 0)
              {
                char v137 = 0;
LABEL_219:
                unint64_t v139 = v173;
                if ((v173 & 0x2000000000000000) != 0)
                {
LABEL_220:
                  unint64_t v140 = v139;
                  uint64_t v141 = HIBYTE(v139) & 0xF;
LABEL_233:
                  if (v190 >> 14 != 4 * v141)
                  {
                    if (v154 == v138 >> 14) {
                      goto LABEL_301;
                    }
                    char v30 = 1;
                    goto LABEL_238;
                  }
                  v191[0] = Substring.index(after:)();
                  if ((v137 & 1) == 0)
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    char v30 = 1;
                    unint64_t result = v152;
                    if (v150 & 1 | ((v151 & 1) == 0)) {
                      goto LABEL_288;
                    }
                    goto LABEL_287;
                  }
                  char v30 = 1;
                  uint64_t v175 = v140;
                  goto LABEL_271;
                }
LABEL_232:
                unint64_t v140 = v139;
                uint64_t v141 = v32 & 0xFFFFFFFFFFFFLL;
                goto LABEL_233;
              }
LABEL_231:
              unint64_t v139 = v173;
              uint64_t v142 = v32;
              specialized _StringCompareOptionsIterable._consumeExtendCharacters(from:)((unint64_t)&v190, v32, v173);
              uint64_t v32 = v142;
              char v137 = 1;
              unint64_t v138 = v152;
              if ((v139 & 0x2000000000000000) != 0) {
                goto LABEL_220;
              }
              goto LABEL_232;
            }
LABEL_315:
            if (v50)
            {
              char v30 = 1;
              uint64_t v175 = v173;
              goto LABEL_271;
            }
            goto LABEL_320;
          }
          if (v154 == v152 >> 14)
          {
LABEL_301:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_302;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v165 == v166)
          {
            if (!v169) {
              goto LABEL_315;
            }
            if ((v50 & 1) == 0)
            {
              char v137 = 0;
              unint64_t v138 = v152;
              unint64_t v139 = v173;
              uint64_t v32 = v170;
              if ((v173 & 0x2000000000000000) != 0) {
                goto LABEL_220;
              }
              goto LABEL_232;
            }
            uint64_t v32 = v170;
            goto LABEL_231;
          }
          if (v154 == v152 >> 14) {
            goto LABEL_301;
          }
        }
LABEL_225:
        char v30 = 1;
        goto LABEL_238;
      }
      goto LABEL_134;
    }
    break;
  }
  __int16 v55 = Character.asciiValue.getter();
  unint64_t v155 = v33;
  if ((v55 & 0x100) == 0)
  {
    if (v184)
    {
      Swift::String v57 = String.lowercased()();
      uint64_t v56 = v57._countAndFlagsBits;
      unint64_t v58 = (unint64_t)v57._object;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v56 = v42;
      unint64_t v58 = v16;
    }
    goto LABEL_108;
  }
  unint64_t v60 = 0xE000000000000000;
  uint64_t v188 = 0;
  unint64_t v189 = 0xE000000000000000;
  uint64_t v176 = v42 & 0xFFFFFFFFFFFFLL;
  uint64_t v177 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) != 0) {
    uint64_t v61 = HIBYTE(v16) & 0xF;
  }
  else {
    uint64_t v61 = v42 & 0xFFFFFFFFFFFFLL;
  }
  if (!v61)
  {
    uint64_t v82 = 0;
    goto LABEL_106;
  }
  uint64_t v15 = (v16 & 0xFFFFFFFFFFFFFFFLL) + 32;
  swift_bridgeObjectRetain();
  uint64_t v62 = 0;
  while (2)
  {
    if ((v16 & 0x1000000000000000) != 0)
    {
      unsigned int v69 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((v16 & 0x2000000000000000) != 0)
      {
        uint64_t v186 = v42;
        uint64_t v187 = v16 & 0xFFFFFFFFFFFFFFLL;
      }
      else if ((v42 & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      unsigned int v69 = _decodeScalar(_:startingAt:)();
    }
    unsigned int v71 = v69;
    uint64_t v72 = v70;
    if ((v185 & 1) == 0 || v69 >> 8 < 0xFF || v69 >= 0xFFEF)
    {
      unsigned int v73 = v69;
      if ((v50 & 1) == 0) {
        goto LABEL_96;
      }
      goto LABEL_87;
    }
    LODWORD(v186) = v69;
    unint64_t result = CFUniCharCompatibilityDecompose();
    unsigned int v73 = v186;
    if (v186 >> 11 == 27) {
      goto LABEL_266;
    }
    if (v186 <= 0x10FFFF)
    {
      if ((v50 & 1) == 0) {
        goto LABEL_96;
      }
LABEL_87:
      uint64_t v74 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v71), 5);
      if (!v74 || ((*(unsigned __int8 *)(v74 + ((unsigned __int16)v71 >> 3)) >> (v71 & 7)) & 1) == 0)
      {
        uint64_t v75 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v73), 2);
        if (v75 && ((*(unsigned __int8 *)(v75 + ((unsigned __int16)v73 >> 3)) >> (v73 & 7)) & 1) != 0)
        {
          MEMORY[0x1F4188790](v75);
          uint64_t v76 = CFUniCharDecomposeCharacter();
          char v50 = v183;
          if (*(&v150 - 64) < 0x510 && v76 > 0) {
            unsigned int v73 = *(&v150 - 64);
          }
        }
LABEL_96:
        if (v184)
        {
          unint64_t v63 = v181;
          Unicode.Scalar.properties.getter();
          uint64_t v64 = Unicode.Scalar.Properties._caseFolded.getter();
          uint64_t v66 = v65;
          (*v180)(v63, v182);
          uint64_t v67 = v64;
          char v50 = v183;
          uint64_t v68 = v66;
        }
        else
        {
          if (v73 >= 0x80)
          {
            int v79 = (v73 & 0x3F) << 8;
            if (v73 >= 0x800)
            {
              int v80 = (v79 | (v73 >> 6) & 0x3F) << 8;
              int v81 = (((v80 | (v73 >> 12) & 0x3F) << 8) | (v73 >> 18)) - 2122219023;
              unsigned int v78 = (v80 | (v73 >> 12)) + 8487393;
              if (HIWORD(v73)) {
                unsigned int v78 = v81;
              }
            }
            else
            {
              unsigned int v78 = (v79 | (v73 >> 6)) + 33217;
            }
          }
          else
          {
            unsigned int v78 = v73 + 1;
          }
          uint64_t v186 = (v78 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v78) >> 3))));
          uint64_t v67 = MEMORY[0x185302020](&v186);
        }
        String.append(_:)(*(Swift::String *)&v67);
        swift_bridgeObjectRelease();
      }
      v62 += v72;
      if (v62 >= v61)
      {
        swift_bridgeObjectRelease();
        uint64_t v82 = v188;
        unint64_t v60 = v189;
        uint64_t v15 = v157;
LABEL_106:
        uint64_t v186 = v82;
        uint64_t v187 = v60;
        uint64_t v56 = String.init<A>(_:)();
        unint64_t v58 = v83;
LABEL_108:
        uint64_t v84 = v56;
        uint64_t v85 = specialized Collection.first.getter(v56, v58);
        if (!v86)
        {
          swift_bridgeObjectRelease();
          unint64_t v33 = v155;
          if (!v171)
          {
            int v169 = 0;
            unint64_t v173 = v175;
            uint64_t countAndFlagsBits = v178;
            unint64_t v100 = v179;
            goto LABEL_139;
          }
          if (v165 != v166)
          {
            if (v154 == v152 >> 14) {
              goto LABEL_301;
            }
            char v30 = 1;
            goto LABEL_238;
          }
          if (v50)
          {
            char v30 = 1;
LABEL_271:
            unint64_t v39 = v168;
            goto LABEL_272;
          }
LABEL_320:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          char v146 = v150 | ~(_BYTE)v151;
          char v30 = 1;
LABEL_286:
          unint64_t result = v152;
          if (v146) {
            goto LABEL_288;
          }
          goto LABEL_287;
        }
        uint64_t v87 = v85;
        unint64_t v88 = v86;
        swift_bridgeObjectRelease();
        unint64_t v16 = v88;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        unint64_t v190 = 15;
        uint64_t v170 = v84;
        uint64_t v89 = String.index(after:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v190 = v89;
        if (v171)
        {
          unint64_t v33 = v155;
          unint64_t v46 = v172;
          unint64_t v52 = v58;
          uint64_t v51 = v170;
LABEL_111:
          uint64_t v90 = HIBYTE(v52) & 0xF;
          if ((v52 & 0x2000000000000000) == 0) {
            uint64_t v90 = v51 & 0xFFFFFFFFFFFFLL;
          }
          uint64_t v91 = 4 * v90;
          if (4 * v90 != v190 >> 14)
          {
            uint64_t v93 = HIBYTE(v33) & 0xF;
            if ((v33 & 0x2000000000000000) == 0) {
              uint64_t v93 = v174 & 0xFFFFFFFFFFFFLL;
            }
            uint64_t v178 = 4 * v93;
            unint64_t v173 = v52;
            while (v178 != v46 >> 14)
            {
              uint64_t v95 = v51;
              uint64_t v96 = String.subscript.getter();
              uint64_t v98 = v97;
              if (v96 == String.subscript.getter() && v98 == v99)
              {
                swift_bridgeObjectRelease_n();
              }
              else
              {
                char v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v94 & 1) == 0)
                {
                  if (v165 == v166)
                  {
                    uint64_t v32 = v95;
                    uint64_t v15 = v157;
                    if (v50) {
                      goto LABEL_231;
                    }
                    char v137 = 0;
                    unint64_t v138 = v152;
                    goto LABEL_219;
                  }
                  uint64_t v15 = v157;
                  if (v154 == v152 >> 14) {
                    goto LABEL_301;
                  }
                  goto LABEL_225;
                }
              }
              unint64_t v52 = v173;
              unint64_t v190 = String.index(after:)();
              unint64_t v46 = String.index(after:)();
              uint64_t v51 = v95;
              if (v91 == v190 >> 14) {
                break;
              }
            }
          }
          char v53 = 1;
          uint64_t v15 = v157;
          if ((v52 & 0x2000000000000000) != 0) {
            goto LABEL_58;
          }
          goto LABEL_115;
        }
        uint64_t v42 = v87;
        unint64_t v33 = v155;
        unint64_t v52 = v58;
        uint64_t countAndFlagsBits = v178;
        unint64_t v59 = v179;
        if (v42 != v178) {
          goto LABEL_135;
        }
LABEL_134:
        if (v16 == v59) {
          goto LABEL_136;
        }
        goto LABEL_135;
      }
      continue;
    }
    break;
  }
  __break(1u);
LABEL_266:
  __break(1u);
LABEL_267:
  __break(1u);
LABEL_268:
  __break(1u);
LABEL_269:
  if (v183)
  {
    unint64_t v152 = result;
    char v30 = 0;
    uint64_t v175 = 0xE000000000000000;
    goto LABEL_271;
  }
  char v30 = 0;
  if (v150 & 1 | ((v151 & 1) == 0))
  {
LABEL_288:
    if (v191[0] >> 14 < result >> 14) {
      __break(1u);
    }
    if ((v30 & 1) == 0) {
      return result;
    }
LABEL_292:
    unint64_t v147 = result;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v147;
  }
LABEL_287:
  if (!((v191[0] ^ v168) >> 14)) {
    goto LABEL_288;
  }
  unint64_t result = 0;
  if (v30) {
    goto LABEL_292;
  }
  return result;
}

unint64_t specialized BidirectionalCollection._range<A>(of:anchored:backwards:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, unint64_t a7, unint64_t a8)
{
  if (a6)
  {
    unint64_t v9 = a8;
    unint64_t v33 = a1 >> 14;
    unint64_t v38 = a2 >> 14;
    if (a1 >> 14 >= a2 >> 14)
    {
LABEL_9:
      if (a5) {
        unint64_t v12 = v9;
      }
      else {
        unint64_t v12 = a7;
      }
      goto LABEL_12;
    }
    if (a7 >> 14 < a8 >> 14)
    {
      while (1)
      {
        unint64_t v10 = Substring.index(before:)();
        unint64_t v11 = Substring.index(before:)();
        unint64_t v9 = v11;
        if (v33 >= v10 >> 14) {
          break;
        }
        if (a7 >> 14 >= v11 >> 14) {
          return 0;
        }
      }
      goto LABEL_9;
    }
    return 0;
  }
  if ((a5 & 1) == 0)
  {
    unint64_t v33 = a1 >> 14;
    unint64_t v38 = a2 >> 14;
    if (a1 >> 14 >= a2 >> 14)
    {
      unint64_t v13 = a8;
      unint64_t v12 = a8;
      unint64_t v9 = a7;
      goto LABEL_13;
    }
    if (a7 >> 14 < a8 >> 14)
    {
      while (1)
      {
        unint64_t v30 = Substring.index(before:)();
        unint64_t v31 = Substring.index(before:)();
        unint64_t v12 = v31;
        if (v33 >= v30 >> 14) {
          break;
        }
        if (a7 >> 14 >= v31 >> 14) {
          return 0;
        }
      }
      unint64_t v9 = a7;
      goto LABEL_12;
    }
    return 0;
  }
  unint64_t v38 = a2 >> 14;
  unint64_t v33 = a1 >> 14;
  unint64_t v12 = a7;
  unint64_t v9 = a7;
LABEL_12:
  unint64_t v13 = a8;
LABEL_13:
  unint64_t v32 = v12 >> 14;
  unint64_t v36 = v13 >> 14;
  while (1)
  {
    unint64_t v34 = v9 >> 14;
    unint64_t v14 = v9;
    unint64_t v15 = v33;
    if (v33 < v38)
    {
      unint64_t v14 = v9;
      unint64_t v15 = v33;
      if (v34 < v36)
      {
        uint64_t v16 = Substring.subscript.getter();
        uint64_t v18 = v17;
        if (v16 != Substring.subscript.getter() || v18 != v19)
        {
          char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v14 = v9;
          unint64_t v15 = v33;
          if ((v20 & 1) == 0) {
            goto LABEL_29;
          }
          goto LABEL_22;
        }
LABEL_20:
        swift_bridgeObjectRelease_n();
LABEL_22:
        do
        {
          uint64_t v22 = Substring.index(after:)();
          unint64_t v23 = Substring.index(after:)();
          unint64_t v14 = v22;
          unint64_t v15 = v23 >> 14;
          if (v23 >> 14 >= v38 || v14 >> 14 >= v36) {
            break;
          }
          unint64_t v39 = v14;
          uint64_t v25 = Substring.subscript.getter();
          uint64_t v27 = v26;
          if (v25 == Substring.subscript.getter() && v27 == v28) {
            goto LABEL_20;
          }
          char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v14 = v39;
        }
        while ((v21 & 1) != 0);
      }
    }
LABEL_29:
    if (v15 == v38) {
      break;
    }
    if (v34 == v32) {
      return 0;
    }
    unint64_t v9 = Substring.index(_:offsetBy:)();
  }
  unint64_t result = v9;
  if (v34 > v14 >> 14) {
    __break(1u);
  }
  return result;
}

uint64_t StringProtocol.contains<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v32[1] = a5;
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of Collection.startIndex.getter();
  unint64_t v11 = v34;
  uint64_t result = dispatch thunk of Collection.endIndex.getter();
  if (v33 >> 14 < v11 >> 14)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  uint64_t v13 = StringProtocol._asContiguousUTF8Substring(from:)(v11, v33, a2);
  if (v16)
  {
    unint64_t v17 = v13;
    unint64_t v18 = v14;
    uint64_t v19 = v16;
    uint64_t v20 = v15;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
    unint64_t v21 = Substring.init<A>(_:)();
    if ((v17 ^ v18) < 0x4000 || (v21 ^ v22) < 0x4000)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v21, v22, v23, v24, 0, 0, 0, 0, 0, v17, v18, v20, v19);
      char v26 = v25;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v26 & 1) == 0) {
        return 1;
      }
    }
    return 0;
  }
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  uint64_t v27 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v28 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v29 = objc_msgSend(v27, sel_rangeOfString_, v28);
  uint64_t v31 = v30;
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  if (v29 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    if (!__OFADD__(v29, v31))
    {
      StringProtocol._toUTF16Indices(_:)();
      return 1;
    }
    goto LABEL_14;
  }
  return 0;
}

uint64_t StringProtocol._asContiguousUTF8Substring(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v7 = MEMORY[0x1F4188790](a1);
  if (v8 != MEMORY[0x1E4FBB1A0])
  {
    uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16);
    if (a3 == MEMORY[0x1E4FBB7A8])
    {
      v9((char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v4, MEMORY[0x1E4FBB7A8], v7);
      swift_dynamicCast();
      if ((v14[3] & 0x1000000000000000) == 0)
      {
LABEL_8:
        uint64_t v11 = Substring.subscript.getter();
        goto LABEL_9;
      }
    }
    else
    {
      v9((char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v4, a3, v7);
      Substring.init<A>(_:)();
      if ((v10 & 0x1000000000000000) == 0) {
        goto LABEL_8;
      }
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  (*(void (**)(char *, uint64_t, void, double))(v6 + 16))((char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v4, MEMORY[0x1E4FBB1A0], v7);
  swift_dynamicCast();
  if ((v14[1] & 0x1000000000000000) != 0) {
    goto LABEL_11;
  }
  uint64_t v11 = String.subscript.getter();
LABEL_9:
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t specialized static StringProtocol.== infix<A>(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v6 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v6 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (a1 == a3 && a2 == a4 && v5 == v6) {
    return 1;
  }
  else {
    return _stringCompareInternal(_:_:_:_:expecting:)() & 1;
  }
}

uint64_t specialized static StringProtocol.== infix<A>(_:_:)(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v32 - v12;
  double v16 = MEMORY[0x1F4188790](v14);
  if (v17 == MEMORY[0x1E4FBB1A0])
  {
    uint64_t v21 = *a1;
    unint64_t v22 = a1[1];
    return specialized static StringProtocol.== infix<A>(_:_:)(v21, v22, a2, a3);
  }
  else if (a4 == MEMORY[0x1E4FBB7A8])
  {
    unint64_t v24 = *a1;
    unint64_t v25 = a1[1];
    uint64_t v26 = a1[2];
    uint64_t v27 = a1[3];
    return specialized static StringProtocol.== infix<A>(_:_:)(v24, v25, v26, v27, a2, a3);
  }
  else
  {
    unint64_t v18 = *(void (**)(char *, uint64_t *, uint64_t, double))(v8 + 16);
    v18((char *)v32 - v15, a1, a4, v16);
    if (swift_dynamicCast())
    {
      uint64_t v20 = v32[0];
      uint64_t v19 = v32[1];
    }
    else
    {
      ((void (*)(char *, uint64_t *, uint64_t))v18)(v13, a1, a4);
      if (swift_dynamicCast())
      {
        uint64_t v20 = v32[2];
        uint64_t v19 = v32[3];
      }
      else
      {
        ((void (*)(char *, uint64_t *, uint64_t))v18)(v10, a1, a4);
        uint64_t v20 = String.init<A>(_:)();
        uint64_t v19 = v28;
      }
    }
    dispatch thunk of Collection.startIndex.getter();
    unint64_t v29 = v32[0];
    dispatch thunk of Collection.endIndex.getter();
    if ((a3 & 0x2000000000000000) != 0) {
      uint64_t v30 = HIBYTE(a3) & 0xF;
    }
    else {
      uint64_t v30 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v20 == a2 && v19 == a3 && !(v29 >> 16) && v32[0] >> 16 == v30)
    {
      swift_bridgeObjectRelease();
      char v31 = 1;
    }
    else
    {
      char v31 = _stringCompareInternal(_:_:_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
    return v31 & 1;
  }
}

void destroy for NSURLSession.CancelState.State(uint64_t a1)
{
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString(_OWORD **a1, _OWORD **a2)
{
  return specialized static AttributedString.Guts.characterwiseIsEqual(_:to:)(*a1, *a2);
}

uint64_t (*protocol witness for SingleValueDecodingContainer.decode(_:) in conformance JSONDecoderImpl())(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t)
{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

uint64_t removeNotificationsFromQueue(void *a1, void *a2, int a3, uint64_t a4)
{
  uint64_t v4 = 0;
  if (!a1) {
    return v4;
  }
  char v5 = a4;
  if (!a4) {
    return v4;
  }
  if (![a1 count]) {
    return 0;
  }
  if (v5)
  {
    uint64_t v9 = (void *)[a2 name];
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v9 = 0;
    if ((v5 & 2) == 0)
    {
LABEL_6:
      uint64_t v10 = 0;
      goto LABEL_9;
    }
  }
  uint64_t v10 = [a2 object];
LABEL_9:
  uint64_t v11 = [a1 count];
  if (v11 < 1) {
    return 0;
  }
  uint64_t v12 = v11;
  uint64_t v4 = 0;
  uint64_t v13 = 0;
  int v14 = 0;
  int v15 = a3 ^ 1;
  do
  {
    double v16 = (void *)[a1 objectAtIndex:v13];
    uint64_t v17 = v16;
    if (((v5 & 2) == 0 || v10 == [v16 object])
      && ((v5 & 1) == 0 || objc_msgSend(v9, "isEqual:", objc_msgSend(v17, "name"))))
    {
      if ((v15 | v14))
      {
        [a1 removeObjectAtIndex:v13 + 1];
        [a1 removeObjectAtIndex:v13];
        v13 -= 2;
        v12 -= 2;
      }
      else
      {
        int v14 = 1;
      }
      ++v4;
    }
    v13 += 2;
  }
  while (v13 < v12);
  return v4;
}

unint64_t NSCoder.decodeDictionary<A, B>(withKeyClass:objectClass:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v7 = v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1821037E0;
  *(void *)(v12 + 32) = a1;
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1821037E0;
  *(void *)(inited + 32) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  uint64_t v14 = _ContiguousArrayBuffer._asCocoaArray()();
  specialized _arrayForceCast<A, B>(_:)(inited);
  uint64_t v15 = _ContiguousArrayBuffer._asCocoaArray()();
  uint64_t v16 = String._bridgeToObjectiveCImpl()();
  id v17 = (id)__NSCoderDecodeDictionaryWithKeysOfClassesObjectsOfClassesForKey(v7, v14, v15, v16);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (v17)
  {
    uint64_t v18 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v17);

    swift_setDeallocating();
    swift_bridgeObjectRelease();
    uint64_t WitnessTable = swift_getWitnessTable();
    unint64_t v20 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v18, a5, a6, WitnessTable);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v20;
}

uint64_t NSCoder.decodeArrayOfObjects<A>(ofClass:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1821037E0;
  *(void *)(v7 + 32) = a1;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  uint64_t v8 = _ContiguousArrayBuffer._asCocoaArray()();
  uint64_t v9 = String._bridgeToObjectiveCImpl()();
  id v10 = (id)__NSCoderDecodeArrayOfObjectsOfClassesForKey(v4, v8, v9);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (v10)
  {
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v11 = swift_dynamicCastClass();
    if (v11)
    {
      uint64_t v12 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
      objc_msgSend(v10, sel_copy);
      uint64_t v14 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      uint64_t v12 = specialized _arrayForceCast<A, B>(_:)(v14);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
    uint64_t v15 = specialized _arrayConditionalCast<A, B>(_:)(v12, a4);
    swift_bridgeObjectRelease();
    return v15;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

void sub_1818C6644(void *a1)
{
  objc_begin_catch(a1);
  *(void *)(v1 + v2) = 0;
  objc_exception_rethrow();
}

void sub_1818C6654(_Unwind_Exception *a1)
{
}

void sub_1818C68D4(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x1818C6830);
  }
  _Unwind_Resume(exc_buf);
}

uint64_t __NSCoderDecodeArrayOfObjectsOfClassesForKey(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = [MEMORY[0x1E4F1CAD0] setWithArray:a2];

  return [a1 decodeArrayOfObjectsOfClasses:v5 forKey:a3];
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v26 - v6;
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  unint64_t v32 = (char *)&v26 - v13;
  Swift::Int v14 = *(void *)(a1 + 16);
  uint64_t v34 = MEMORY[0x1E4FBC860];
  uint64_t v28 = type metadata accessor for ContiguousArray();
  ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
  uint64_t v15 = v34;
  if (v14)
  {
    uint64_t v26 = v5;
    uint64_t v27 = v4;
    uint64_t v16 = a1 + 32;
    id v17 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    uint64_t v18 = (void (**)(char *, char *, uint64_t))(v8 + 32);
    uint64_t v30 = v8;
    uint64_t v31 = MEMORY[0x1E4FBC840] + 8;
    unint64_t v29 = v11;
    while (1)
    {
      outlined init with copy of Any(v16, (uint64_t)v33);
      int v19 = swift_dynamicCast();
      unint64_t v20 = *v17;
      if (!v19) {
        break;
      }
      v20(v7, 0, 1, a2);
      uint64_t v21 = *v18;
      unint64_t v22 = v32;
      (*v18)(v32, v7, a2);
      v21(v11, v22, a2);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1);
        uint64_t v15 = v34;
      }
      unint64_t v24 = *(void *)(v15 + 16);
      unint64_t v23 = *(void *)(v15 + 24);
      if (v24 >= v23 >> 1)
      {
        ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        uint64_t v15 = v34;
      }
      *(void *)(v15 + 16) = v24 + 1;
      uint64_t v11 = v29;
      v21((char *)(v15+ ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(void *)(v30 + 72) * v24), v29, a2);
      v16 += 32;
      if (!--v14) {
        return v15;
      }
    }
    v20(v7, 1, 1, a2);
    swift_release();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v27);
    return 0;
  }
  return v15;
}

uint64_t __NSCoderDecodeDictionaryWithKeysOfClassesObjectsOfClassesForKey(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = [MEMORY[0x1E4F1CAD0] setWithArray:a2];
  uint64_t v8 = [MEMORY[0x1E4F1CAD0] setWithArray:a3];

  return [a1 decodeDictionaryWithKeysOfClasses:v7 objectsOfClasses:v8 forKey:a4];
}

unint64_t specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v137 = type metadata accessor for Optional();
  uint64_t v136 = *(void *)(v137 - 8);
  MEMORY[0x1F4188790](v137);
  int v169 = (char *)&v136 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  unint64_t v166 = (char *)&v136 - v10;
  uint64_t v139 = type metadata accessor for Optional();
  uint64_t v138 = *(void *)(v139 - 8);
  MEMORY[0x1F4188790](v139);
  uint64_t v12 = (char *)&v136 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v136 - v14;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v153 = (char *)&v136 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  unint64_t v164 = (char *)&v136 - v18;
  uint64_t v157 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](v157);
  unint64_t v152 = (char *)&v136 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  unint64_t v163 = (char *)&v136 - v21;
  uint64_t v172 = a3;
  uint64_t v160 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v22);
  unint64_t v168 = (char *)&v136 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  int v151 = (char *)&v136 - v25;
  MEMORY[0x1F4188790](v26);
  int v150 = (char *)&v136 - v27;
  MEMORY[0x1F4188790](v28);
  unint64_t v155 = (char *)&v136 - v29;
  MEMORY[0x1F4188790](v30);
  uint64_t v154 = (uint64_t)&v136 - v31;
  MEMORY[0x1F4188790](v32);
  uint64_t v148 = (char *)&v136 - v33;
  uint64_t v171 = a2;
  uint64_t v162 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v34);
  uint64_t v167 = (char *)&v136 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v36);
  unint64_t v38 = (char *)&v136 - v37;
  MEMORY[0x1F4188790](v39);
  uint64_t v149 = (char *)&v136 - v40;
  MEMORY[0x1F4188790](v41);
  unint64_t v147 = (char *)&v136 - v42;
  MEMORY[0x1F4188790](v43);
  unint64_t v165 = (char *)&v136 - v44;
  MEMORY[0x1F4188790](v45);
  char v146 = (char *)&v136 - v46;
  if (*(void *)(a1 + 16))
  {
    type metadata accessor for _DictionaryStorage();
    uint64_t v47 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v47 = MEMORY[0x1E4FBC868];
  }
  uint64_t v159 = a4;
  uint64_t v48 = *(void *)(a1 + 64);
  uint64_t v156 = a1 + 64;
  uint64_t v49 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v140 = ~v49;
  if (-v49 < 64) {
    uint64_t v50 = ~(-1 << -(char)v49);
  }
  else {
    uint64_t v50 = -1;
  }
  unint64_t v51 = v50 & v48;
  uint64_t v161 = a1;
  uint64_t v170 = (void *)v47;
  if (v171 == MEMORY[0x1E4FBB1A0])
  {
    uint64_t v153 = v15;
    int64_t v144 = (unint64_t)(63 - v49) >> 6;
    unint64_t v152 = (char *)&v181 + 8;
    int v150 = (char *)&v176 + 8;
    uint64_t v92 = (void (**)(char *, char *, uint64_t))(v162 + 56);
    unint64_t v168 = (char *)(v162 + 32);
    int v151 = (char *)(v160 + 56);
    uint64_t v167 = (char *)(v160 + 32);
    int64_t v141 = v47 + 64;
    uint64_t v143 = v162 + 40;
    uint64_t v142 = (char *)(v160 + 40);
    unint64_t result = swift_bridgeObjectRetain();
    int64_t v93 = 0;
    uint64_t v149 = (char *)(MEMORY[0x1E4FBC840] + 8);
    for (uint64_t i = v92; ; v92 = i)
    {
      char v94 = v166;
      uint64_t v95 = v165;
      if (v51)
      {
        uint64_t v171 = (v51 - 1) & v51;
        unint64_t v96 = __clz(__rbit64(v51)) | (v93 << 6);
        int64_t v97 = v93;
      }
      else
      {
        int64_t v98 = v93 + 1;
        if (__OFADD__(v93, 1)) {
          goto LABEL_80;
        }
        if (v98 >= v144) {
          goto LABEL_76;
        }
        unint64_t v99 = *(void *)(v156 + 8 * v98);
        int64_t v97 = v93 + 1;
        if (!v99)
        {
          int64_t v97 = v93 + 2;
          if (v93 + 2 >= v144) {
            goto LABEL_76;
          }
          unint64_t v99 = *(void *)(v156 + 8 * v97);
          if (!v99)
          {
            int64_t v97 = v93 + 3;
            if (v93 + 3 >= v144) {
              goto LABEL_76;
            }
            unint64_t v99 = *(void *)(v156 + 8 * v97);
            if (!v99)
            {
              int64_t v97 = v93 + 4;
              if (v93 + 4 >= v144) {
                goto LABEL_76;
              }
              unint64_t v99 = *(void *)(v156 + 8 * v97);
              if (!v99)
              {
                unint64_t v100 = (char *)(v93 + 5);
                if (v93 + 5 >= v144) {
                  goto LABEL_76;
                }
                unint64_t v99 = *(void *)(v156 + 8 * (void)v100);
                if (!v99)
                {
                  while (1)
                  {
                    int64_t v97 = (int64_t)(v100 + 1);
                    if (__OFADD__(v100, 1)) {
                      goto LABEL_82;
                    }
                    if (v97 >= v144) {
                      break;
                    }
                    unint64_t v99 = *(void *)(v156 + 8 * v97);
                    ++v100;
                    if (v99) {
                      goto LABEL_60;
                    }
                  }
LABEL_76:
                  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
                  return (unint64_t)v170;
                }
                int64_t v97 = v93 + 5;
              }
            }
          }
        }
LABEL_60:
        uint64_t v171 = (v99 - 1) & v99;
        unint64_t v96 = __clz(__rbit64(v99)) + (v97 << 6);
      }
      outlined init with copy of AnyHashable(*(void *)(a1 + 48) + 40 * v96, (uint64_t)&v179);
      outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v96, (uint64_t)v152);
      long long v176 = v181;
      long long v177 = v182;
      uint64_t v178 = v183;
      long long v174 = v179;
      long long v175 = v180;
      outlined init with copy of AnyHashable((uint64_t)&v174, (uint64_t)v173);
      char v101 = v153;
      uint64_t v102 = MEMORY[0x1E4FBB1A0];
      int v103 = swift_dynamicCast();
      uint64_t v104 = *v92;
      if (!v103) {
        break;
      }
      ((void (*)(char *, void, uint64_t, uint64_t))v104)(v101, 0, 1, v102);
      uint64_t v105 = v102;
      uint64_t v106 = *(void (**)(char *, char *, uint64_t))v168;
      uint64_t v107 = v105;
      (*(void (**)(char *, char *))v168)(v95, v101);
      outlined init with copy of Any((uint64_t)v150, (uint64_t)v173);
      outlined destroy of Any?((uint64_t)&v174, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
      char v108 = swift_dynamicCast();
      uint64_t v109 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v151;
      if ((v108 & 1) == 0)
      {
        v109(v94, 1, 1, v172);
        (*(void (**)(char *, void))(v162 + 8))(v95, MEMORY[0x1E4FBB1A0]);
        (*(void (**)(char *, uint64_t))(v136 + 8))(v94, v137);
LABEL_73:
        outlined consume of Set<A1>.Iterator._Variant<A><A1>();
LABEL_74:
        swift_release();
        return 0;
      }
      int v169 = (char *)v97;
      uint64_t v110 = v172;
      v109(v94, 0, 1, v172);
      uint64_t v111 = *(void (**)(char *, uint64_t, uint64_t))v167;
      uint64_t v112 = v154;
      (*(void (**)(uint64_t, char *, uint64_t))v167)(v154, v94, v110);
      unsigned int v113 = v164;
      uint64_t v114 = &v164[*(int *)(TupleTypeMetadata2 + 48)];
      v106(v164, v95, v107);
      v111(v114, v112, v110);
      uint64_t v115 = v157;
      uint64_t v116 = v163;
      unsigned int v117 = &v163[*(int *)(v157 + 48)];
      v106(v163, v113, MEMORY[0x1E4FBB1A0]);
      v111(v117, (uint64_t)v114, v110);
      uint64_t v118 = &v116[*(int *)(v115 + 48)];
      uint64_t v119 = (uint64_t)v146;
      uint64_t v120 = v116;
      uint64_t v121 = (uint64_t)v147;
      uint64_t v122 = MEMORY[0x1E4FBB1A0];
      v106(v146, v120, MEMORY[0x1E4FBB1A0]);
      int v123 = v148;
      v111(v148, (uint64_t)v118, v110);
      uint64_t v124 = v119;
      uint64_t v125 = v122;
      v106((char *)v121, (char *)v124, v122);
      uint64_t v126 = v155;
      v111(v155, (uint64_t)v123, v110);
      unint64_t v127 = v170;
      unint64_t result = __RawDictionaryStorage.find<A>(_:)(v121, v122, v159);
      unint64_t v128 = result;
      if (v129)
      {
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v162 + 40))(v127[6] + *(void *)(v162 + 72) * result, v121, v125);
        unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v160 + 40))(v127[7] + *(void *)(v160 + 72) * v128, v126, v172);
        int64_t v93 = (int64_t)v169;
      }
      else
      {
        unint64_t v130 = v169;
        if (v127[2] >= v127[3])
        {
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
          goto LABEL_81;
        }
        *(void *)(v141 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
        v106((char *)(v127[6] + *(void *)(v162 + 72) * result), (char *)v121, v125);
        unint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v111)(v127[7] + *(void *)(v160 + 72) * v128, v126, v172);
        uint64_t v131 = v127[2];
        BOOL v132 = __OFADD__(v131, 1);
        uint64_t v133 = v131 + 1;
        if (v132) {
          goto LABEL_79;
        }
        v127[2] = v133;
        int64_t v93 = (int64_t)v130;
      }
      unint64_t v51 = v171;
      a1 = v161;
    }
    ((void (*)(char *, uint64_t, uint64_t, void))v104)(v101, 1, 1, MEMORY[0x1E4FBB1A0]);
    outlined destroy of Any?((uint64_t)&v174, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
    (*(void (**)(char *, uint64_t))(v138 + 8))(v101, v139);
    goto LABEL_73;
  }
  uint64_t v148 = v38;
  int64_t v141 = (unint64_t)(63 - v49) >> 6;
  uint64_t v154 = (uint64_t)&v181 + 8;
  char v146 = (char *)&v176 + 8;
  unint64_t v155 = (char *)(v162 + 56);
  uint64_t i = (void (**)(char *, char *, uint64_t))(v162 + 32);
  unint64_t v147 = (char *)(v160 + 56);
  unint64_t v166 = (char *)(v160 + 32);
  uint64_t v143 = v47 + 64;
  swift_bridgeObjectRetain();
  unint64_t result = swift_retain();
  int64_t v53 = 0;
  int64_t v144 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v142 = v12;
  while (1)
  {
    if (v51)
    {
      uint64_t v56 = (v51 - 1) & v51;
      unint64_t v57 = __clz(__rbit64(v51)) | (v53 << 6);
      int64_t v58 = v53;
      goto LABEL_29;
    }
    int64_t v59 = v53 + 1;
    if (__OFADD__(v53, 1))
    {
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }
    if (v59 >= v141) {
      goto LABEL_70;
    }
    unint64_t v60 = *(void *)(v156 + 8 * v59);
    int64_t v58 = v53 + 1;
    if (!v60)
    {
      int64_t v58 = v53 + 2;
      if (v53 + 2 >= v141) {
        goto LABEL_70;
      }
      unint64_t v60 = *(void *)(v156 + 8 * v58);
      if (!v60)
      {
        int64_t v58 = v53 + 3;
        if (v53 + 3 >= v141) {
          goto LABEL_70;
        }
        unint64_t v60 = *(void *)(v156 + 8 * v58);
        if (!v60)
        {
          int64_t v58 = v53 + 4;
          if (v53 + 4 >= v141) {
            goto LABEL_70;
          }
          unint64_t v60 = *(void *)(v156 + 8 * v58);
          if (!v60) {
            break;
          }
        }
      }
    }
LABEL_28:
    uint64_t v56 = (v60 - 1) & v60;
    unint64_t v57 = __clz(__rbit64(v60)) + (v58 << 6);
LABEL_29:
    uint64_t v62 = v161;
    outlined init with copy of AnyHashable(*(void *)(v161 + 48) + 40 * v57, (uint64_t)&v179);
    outlined init with copy of Any(*(void *)(v62 + 56) + 32 * v57, v154);
    long long v176 = v181;
    long long v177 = v182;
    uint64_t v178 = v183;
    long long v174 = v179;
    long long v175 = v180;
    outlined init with copy of AnyHashable((uint64_t)&v174, (uint64_t)v173);
    int v63 = swift_dynamicCast();
    uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v155;
    if (!v63)
    {
      v64(v12, 1, 1, v171);
      outlined destroy of Any?((uint64_t)&v174, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
      (*(void (**)(char *, uint64_t))(v138 + 8))(v12, v139);
LABEL_69:
      swift_release();
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      goto LABEL_74;
    }
    unint64_t v165 = (char *)v56;
    uint64_t v65 = v171;
    v64(v12, 0, 1, v171);
    uint64_t v66 = *i;
    uint64_t v67 = v148;
    (*i)(v148, v12, v65);
    outlined init with copy of Any((uint64_t)v146, (uint64_t)v173);
    outlined destroy of Any?((uint64_t)&v174, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
    char v68 = swift_dynamicCast();
    unsigned int v69 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v147;
    if ((v68 & 1) == 0)
    {
      char v134 = v169;
      v69(v169, 1, 1, v172);
      (*(void (**)(char *, uint64_t))(v162 + 8))(v67, v171);
      (*(void (**)(char *, uint64_t))(v136 + 8))(v134, v137);
      goto LABEL_69;
    }
    unint64_t v163 = (char *)v58;
    uint64_t v70 = v169;
    uint64_t v71 = v172;
    v69(v169, 0, 1, v172);
    uint64_t v72 = *(void (**)(char *, char *, uint64_t))v166;
    unsigned int v73 = v151;
    (*(void (**)(char *, char *, uint64_t))v166)(v151, v70, v71);
    uint64_t v74 = v153;
    uint64_t v75 = &v153[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v76 = v67;
    uint64_t v77 = v171;
    v66(v153, v76, v171);
    v72(v75, v73, v71);
    uint64_t v78 = v157;
    uint64_t v79 = (uint64_t)v152;
    unint64_t v164 = &v152[*(int *)(v157 + 48)];
    v66(v152, v74, v77);
    v72(v164, v75, v71);
    uint64_t v80 = v79 + *(int *)(v78 + 48);
    int v81 = v149;
    v66(v149, (char *)v79, v77);
    uint64_t v82 = (uint64_t)v150;
    v72(v150, (char *)v80, v71);
    unint64_t v83 = v66;
    v66(v167, v81, v77);
    v72(v168, (char *)v82, v71);
    uint64_t v84 = v170;
    unint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v85 = -1 << *((unsigned char *)v84 + 32);
    unint64_t v86 = result & ~v85;
    unint64_t v87 = v86 >> 6;
    if (((-1 << v86) & ~*(void *)(v143 + 8 * (v86 >> 6))) != 0)
    {
      unint64_t v54 = __clz(__rbit64((-1 << v86) & ~*(void *)(v143 + 8 * (v86 >> 6)))) | v86 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v12 = v142;
      int64_t v53 = (int64_t)v163;
    }
    else
    {
      char v88 = 0;
      unint64_t v89 = (unint64_t)(63 - v85) >> 6;
      uint64_t v12 = v142;
      int64_t v53 = (int64_t)v163;
      do
      {
        if (++v87 == v89 && (v88 & 1) != 0)
        {
          __break(1u);
          goto LABEL_77;
        }
        BOOL v90 = v87 == v89;
        if (v87 == v89) {
          unint64_t v87 = 0;
        }
        v88 |= v90;
        uint64_t v91 = *(void *)(v143 + 8 * v87);
      }
      while (v91 == -1);
      unint64_t v54 = __clz(__rbit64(~v91)) + (v87 << 6);
    }
    *(void *)(v143 + ((v54 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v54;
    __int16 v55 = v170;
    v83((char *)(v170[6] + *(void *)(v162 + 72) * v54), v167, v171);
    unint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v72)(v55[7] + *(void *)(v160 + 72) * v54, v168, v172);
    ++v55[2];
    unint64_t v51 = (unint64_t)v165;
  }
  uint64_t v61 = (char *)(v53 + 5);
  if (v53 + 5 >= v141)
  {
LABEL_70:
    int v135 = v170;
    swift_release();
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    return (unint64_t)v135;
  }
  unint64_t v60 = *(void *)(v156 + 8 * (void)v61);
  if (v60)
  {
    int64_t v58 = v53 + 5;
    goto LABEL_28;
  }
  while (1)
  {
    int64_t v58 = (int64_t)(v61 + 1);
    if (__OFADD__(v61, 1)) {
      break;
    }
    if (v58 >= v141) {
      goto LABEL_70;
    }
    unint64_t v60 = *(void *)(v156 + 8 * v58);
    ++v61;
    if (v60) {
      goto LABEL_28;
    }
  }
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
  return result;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v4 = a1 + 32;
    uint64_t v2 = v9;
    do
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v9;
      }
      unint64_t v6 = *(void *)(v2 + 16);
      unint64_t v5 = *(void *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v9;
      }
      *(void *)(v2 + 16) = v6 + 1;
      outlined init with take of Any(&v8, (_OWORD *)(v2 + 32 * v6 + 32));
      v4 += 8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t Notification.init(name:object:userInfo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 40) = 0;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 8) = 0u;
  *(void *)a4 = a1;
  outlined assign with take of Any?(a2, a4 + 8);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a4 + 40) = a3;
  return result;
}

uint64_t NSNotificationCenter.Notifications.next()()
{
  outlined init with take of LocalePreferences?((uint64_t)(v0 + 17), (uint64_t)(v0 + 10), &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
  int64_t v1 = (_OWORD *)v0[35];
  if (v0[10])
  {
    outlined init with copy of Notification((uint64_t)(v0 + 10), v0[35]);
    outlined destroy of NSNotificationCenter.Notifications.NotificationWrapper((uint64_t)(v0 + 10));
  }
  else
  {
    outlined destroy of Any?((uint64_t)(v0 + 10), &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
    _OWORD *v1 = 0u;
    v1[1] = 0u;
    v1[2] = 0u;
  }
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  int64_t v1 = v0;
  uint64_t v2 = v0;
  CFPropertyListRef v3 = v0 + 2;
  uint64_t v4 = (uint64_t)(v1 + 10);
  unint64_t v5 = v1[36];
  v1[2] = v2;
  v1[7] = v1 + 23;
  v1[3] = NSNotificationCenter.Notifications.next();
  unint64_t v6 = swift_continuation_init();
  uint64_t v7 = *(os_unfair_lock_s **)(v5 + 24);
  *(void *)(swift_task_alloc() + 16) = v6;
  long long v8 = v7 + 4;
  v7 += 16;
  os_unfair_lock_lock(v7);
  partial apply for closure #1 in closure #1 in NSNotificationCenter.Notifications.next()(v8, (uint64_t)(v1 + 10));
  os_unfair_lock_unlock(v7);
  swift_task_dealloc();
  uint64_t v9 = v1[10];
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    uint64_t v11 = (uint64_t)(v1 + 29);
    uint64_t v12 = (uint64_t)(v1 + 11);
    swift_bridgeObjectRetain();
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = *(void *)(v9 + 8 * v13++ + 32);
      outlined init with copy of (Hashable & Sendable)?(v12, v11, &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
      outlined init with take of LocalePreferences?(v11, *(void *)(*(void *)(v14 + 64) + 40), &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
      swift_continuation_resume();
    }
    while (v10 != v13);
    swift_bridgeObjectRelease();
  }
  outlined destroy of NSNotificationCenter.Notifications.Resumption(v4);
  return MEMORY[0x1F41881E8](v3);
}

{
  void *v0;
  uint64_t v2;

  outlined init with take of LocalePreferences?(*v0 + 184, *v0 + 136, &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
  return MEMORY[0x1F4188298](NSNotificationCenter.Notifications.next(), 0, 0);
}

uint64_t outlined destroy of NSNotificationCenter.Notifications.NotificationWrapper(uint64_t a1)
{
  return a1;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ()(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void (**)(_OWORD *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2, v4);
  swift_retain();
  v2(v4);
  swift_release();
  return outlined destroy of Notification((uint64_t)v4);
}

void static Notification._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (a1)
  {
    id v3 = a1;
    id v4 = objc_msgSend(v3, sel_name);
    if (objc_msgSend(v3, sel_object))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v11 = 0u;
      long long v12 = 0u;
    }
    id v6 = objc_msgSend(v3, sel_userInfo);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v6);
    }
    else
    {
      uint64_t v8 = 0;
    }
    memset(&v10[8], 0, 40);
    *(void *)uint64_t v10 = v4;
    outlined assign with take of Any?((uint64_t)&v11, (uint64_t)&v10[8]);
    swift_bridgeObjectRelease();
    *(void *)&v10[40] = v8;
    long long v9 = *(_OWORD *)&v10[16];
    *a2 = *(_OWORD *)v10;
    a2[1] = v9;
    a2[2] = *(_OWORD *)&v10[32];
  }
  else
  {
    long long v11 = 0u;
    long long v12 = 0u;
    memset(&v10[8], 0, 40);
    *(void *)uint64_t v10 = String._bridgeToObjectiveCImpl()();
    outlined assign with take of Any?((uint64_t)&v11, (uint64_t)&v10[8]);
    swift_bridgeObjectRelease();
    *(void *)&v10[40] = 0;
    long long v5 = *(_OWORD *)&v10[16];
    *a2 = *(_OWORD *)v10;
    a2[1] = v5;
    a2[2] = *(_OWORD *)&v10[32];
  }
}

uint64_t outlined assign with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

char *specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(char *result, uint64_t a2, id a3, uint64_t a4)
{
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (a2)
  {
    id v6 = result;
    uint64_t result = (char *)objc_msgSend(a3, sel__getObjects_andKeys_count_, a2, result, a4);
    if ((a4 & 0x8000000000000000) == 0)
    {
      if (!a4) {
        return (char *)a4;
      }
      uint64_t v7 = 40 * a4;
      uint64_t v8 = a4;
      do
      {
        if (v8 > a4)
        {
          __break(1u);
          goto LABEL_13;
        }
        uint64_t v9 = v8 - 1;
        swift_unknownObjectRetain();
        uint64_t result = (char *)swift_dynamicCast();
        uint64_t v10 = &v6[v7 - 40];
        long long v11 = v16[0];
        long long v12 = v16[1];
        *((void *)v10 + 4) = v17;
        *(_OWORD *)uint64_t v10 = v11;
        *((_OWORD *)v10 + 1) = v12;
        v7 -= 40;
        uint64_t v8 = v9;
      }
      while (v9);
      uint64_t v13 = 32 * a4;
      uint64_t v14 = a4;
      while (v14 <= a4)
      {
        uint64_t v15 = v14 - 1;
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t result = (char *)outlined init with take of Any(v16, (_OWORD *)(a2 - 32 + v13));
        v13 -= 32;
        uint64_t v14 = v15;
        if (!v15) {
          return (char *)a4;
        }
      }
LABEL_13:
      __break(1u);
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_16:
  __break(1u);
  return result;
}

{
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (a2)
  {
    id v6 = result;
    uint64_t result = (char *)objc_msgSend(a3, sel__getObjects_andKeys_count_, a2, result, a4);
    if ((a4 & 0x8000000000000000) == 0)
    {
      if (!a4) {
        return (char *)a4;
      }
      uint64_t v7 = 0;
      uint64_t v8 = &v6[16 * a4 - 8];
      do
      {
        if (a4 + v7 > a4)
        {
          __break(1u);
          goto LABEL_13;
        }
        swift_unknownObjectRetain();
        uint64_t result = (char *)swift_dynamicCast();
        *((void *)v8 - 1) = v13;
        *(void *)uint64_t v8 = v14;
        --v7;
        v8 -= 16;
      }
      while (a4 + v7);
      uint64_t v9 = 16 * a4;
      uint64_t v10 = a4;
      while (v10 <= a4)
      {
        long long v11 = v10 - 1;
        swift_unknownObjectRetain();
        uint64_t result = (char *)swift_dynamicCast();
        long long v12 = a2 + v9;
        *(void *)(v12 - 16) = v13;
        *(void *)(v12 - 8) = v14;
        v9 -= 16;
        uint64_t v10 = v11;
        if (!v11) {
          return (char *)a4;
        }
      }
LABEL_13:
      __break(1u);
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_16:
  __break(1u);
  return result;
}

{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (a2)
  {
    id v6 = result;
    uint64_t result = (char *)objc_msgSend(a3, sel__getObjects_andKeys_count_, a2, result, a4);
    if ((a4 & 0x8000000000000000) == 0)
    {
      if (!a4) {
        return (char *)a4;
      }
      uint64_t v7 = &v6[8 * a4 - 8];
      uint64_t v8 = a4;
      do
      {
        if (v8 > a4)
        {
          __break(1u);
          goto LABEL_13;
        }
        --v8;
        swift_unknownObjectRetain();
        uint64_t result = (char *)swift_dynamicCast();
        *(void *)uint64_t v7 = v13;
        v7 -= 8;
      }
      while (v8);
      uint64_t v9 = 16 * a4;
      uint64_t v10 = a4;
      while (v10 <= a4)
      {
        long long v11 = v10 - 1;
        swift_unknownObjectRetain();
        uint64_t result = (char *)swift_dynamicCast();
        long long v12 = a2 + v9;
        *(void *)(v12 - 16) = v13;
        *(void *)(v12 - 8) = v14;
        v9 -= 16;
        uint64_t v10 = v11;
        if (!v11) {
          return (char *)a4;
        }
      }
LABEL_13:
      __break(1u);
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_16:
  __break(1u);
  return result;
}

{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  long long v15;
  long long v16;
  uint64_t v17;

  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (a2)
  {
    id v6 = result;
    uint64_t result = (char *)objc_msgSend(a3, sel__getObjects_andKeys_count_, a2, result, a4);
    if ((a4 & 0x8000000000000000) == 0)
    {
      if (!a4) {
        return (char *)a4;
      }
      uint64_t v7 = 40 * a4;
      uint64_t v8 = a4;
      do
      {
        if (v8 > a4)
        {
          __break(1u);
          goto LABEL_13;
        }
        uint64_t v9 = v8 - 1;
        swift_unknownObjectRetain();
        uint64_t result = (char *)swift_dynamicCast();
        uint64_t v10 = &v6[v7 - 40];
        *((void *)v10 + 4) = v17;
        *(_OWORD *)uint64_t v10 = v15;
        *((_OWORD *)v10 + 1) = v16;
        v7 -= 40;
        uint64_t v8 = v9;
      }
      while (v9);
      long long v11 = 40 * a4;
      long long v12 = a4;
      while (v12 <= a4)
      {
        uint64_t v13 = v12 - 1;
        swift_unknownObjectRetain();
        uint64_t result = (char *)swift_dynamicCast();
        uint64_t v14 = a2 - 40 + v11;
        *(void *)(v14 + 32) = v17;
        *(_OWORD *)uint64_t v14 = v15;
        *(_OWORD *)(v14 + 16) = v16;
        v11 -= 40;
        long long v12 = v13;
        if (!v13) {
          return (char *)a4;
        }
      }
LABEL_13:
      __break(1u);
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t outlined destroy of Notification(uint64_t a1)
{
  return a1;
}

uint64_t destroy for NSNotificationCenter.Notifications.NotificationWrapper(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  }

  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in Notification.Subscription.init(_:_:_:_:)()
{
  return closure #1 in Notification.Subscription.init(_:_:_:_:)();
}

uint64_t closure #1 in Notification.Subscription.init(_:_:_:_:)()
{
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  uint64_t v2 = *(os_unfair_lock_s **)(result + 16);
  os_unfair_lock_lock(v2);
  if (!*(void *)(v1 + 64)) {
    goto LABEL_29;
  }
  uint64_t v3 = *(void *)(v1 + 32);
  static Subscribers.Demand.unlimited.getter();
  uint64_t result = static Subscribers.Demand.== infix(_:_:)();
  if (result) {
    goto LABEL_6;
  }
  if (v3 < 0)
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v3)
  {
LABEL_6:
    uint64_t v4 = *(void *)(v1 + 32);
    static Subscribers.Demand.unlimited.getter();
    if ((static Subscribers.Demand.== infix(_:_:)() & 1) == 0)
    {
      static Subscribers.Demand.unlimited.getter();
      uint64_t result = static Subscribers.Demand.== infix(_:_:)();
      if (result)
      {
        uint64_t v5 = static Subscribers.Demand.unlimited.getter();
      }
      else
      {
        if (v4 < 0)
        {
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
        if (!v4)
        {
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }
        uint64_t v5 = v4 - 1;
      }
      *(void *)(v1 + 32) = v5;
    }
  }
  os_unfair_lock_unlock(v2);
  static Subscribers.Demand.unlimited.getter();
  uint64_t result = static Subscribers.Demand.== infix(_:_:)();
  if (result) {
    goto LABEL_17;
  }
  if (v3 < 0)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (!v3) {
    goto LABEL_30;
  }
LABEL_17:
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v6 = dispatch thunk of Subscriber.receive(_:)();
  os_unfair_recursive_lock_unlock();
  static Subscribers.Demand.unlimited.getter();
  uint64_t result = static Subscribers.Demand.== infix(_:_:)();
  if (result)
  {
LABEL_20:
    os_unfair_lock_lock(v2);
    uint64_t v7 = *(void *)(v1 + 32);
    static Subscribers.Demand.unlimited.getter();
    if (static Subscribers.Demand.== infix(_:_:)())
    {
LABEL_29:
      os_unfair_lock_unlock(v2);
      goto LABEL_30;
    }
    static Subscribers.Demand.unlimited.getter();
    char v8 = static Subscribers.Demand.== infix(_:_:)();
    uint64_t v9 = static Subscribers.Demand.unlimited.getter();
    if (v8)
    {
LABEL_28:
      *(void *)(v1 + 32) = v9;
      goto LABEL_29;
    }
    uint64_t result = static Subscribers.Demand.== infix(_:_:)();
    if (result)
    {
LABEL_26:
      uint64_t v9 = static Subscribers.Demand.unlimited.getter();
      goto LABEL_28;
    }
    if (((v7 | v6) & 0x8000000000000000) == 0)
    {
      uint64_t v9 = v7 + v6;
      if (!__OFADD__(v7, v6))
      {
        if ((v9 & 0x8000000000000000) == 0) {
          goto LABEL_28;
        }
LABEL_39:
        __break(1u);
        return result;
      }
      goto LABEL_26;
    }
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v6 < 0) {
    goto LABEL_35;
  }
  if (v6) {
    goto LABEL_20;
  }
LABEL_30:

  return swift_release();
}

uint64_t outlined init with copy of Notification(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *initializeWithCopy for NSNotificationCenter.Notifications.NotificationWrapper(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  *a1 = *(void *)a2;
  uint64_t v5 = a1 + 1;
  uint64_t v6 = (_OWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 32);
  id v8 = v4;
  if (v7)
  {
    a1[4] = v7;
    (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v7 - 8))(v5, v6, v7);
  }
  else
  {
    long long v9 = v6[1];
    *uint64_t v5 = *v6;
    v5[1] = v9;
  }
  a1[5] = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t partial apply for closure #1 in closure #1 in NSNotificationCenter.Notifications.init(center:name:object:)(uint64_t a1)
{
  return closure #1 in closure #1 in NSNotificationCenter.Notifications.init(center:name:object:)(a1);
}

uint64_t closure #1 in closure #1 in NSNotificationCenter.Notifications.init(center:name:object:)(uint64_t a1)
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    outlined init with copy of Notification(a1, (uint64_t)v3);
    NSNotificationCenter.Notifications.send(_:)();
    swift_release();
    return outlined destroy of NSNotificationCenter.Notifications.NotificationWrapper((uint64_t)v3);
  }
  return result;
}

uint64_t NSNotificationCenter.Notifications.send(_:)()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 24);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 16;
  os_unfair_lock_lock(v1 + 16);
  partial apply for closure #1 in NSNotificationCenter.Notifications.send(_:)(v2, (uint64_t)v11);
  os_unfair_lock_unlock(v3);
  outlined init with copy of (Hashable & Sendable)?((uint64_t)v11, (uint64_t)&v7, &demangling cache variable for type metadata for (UnsafeContinuation<NSNotificationCenter.Notifications.NotificationWrapper?, Never>, NSNotificationCenter.Notifications.NotificationWrapper?)?);
  uint64_t v4 = v7;
  if (v7)
  {
    uint64_t v9 = v7;
    outlined init with take of LocalePreferences?((uint64_t)v8, (uint64_t)v10, &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
    uint64_t v7 = v4;
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v10, (uint64_t)v8, &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
    outlined init with take of LocalePreferences?((uint64_t)v8, *(void *)(*(void *)(v4 + 64) + 40), &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
    swift_continuation_resume();
    outlined destroy of Any?((uint64_t)&v9, &demangling cache variable for type metadata for (UnsafeContinuation<NSNotificationCenter.Notifications.NotificationWrapper?, Never>, NSNotificationCenter.Notifications.NotificationWrapper?));
    uint64_t v5 = (uint64_t *)v11;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for (UnsafeContinuation<NSNotificationCenter.Notifications.NotificationWrapper?, Never>, NSNotificationCenter.Notifications.NotificationWrapper?)?);
    uint64_t v5 = &v7;
  }
  return outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for (UnsafeContinuation<NSNotificationCenter.Notifications.NotificationWrapper?, Never>, NSNotificationCenter.Notifications.NotificationWrapper?)?);
}

double partial apply for closure #1 in NSNotificationCenter.Notifications.send(_:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in NSNotificationCenter.Notifications.send(_:)(a1, *(void *)(v2 + 16), a2);
}

double closure #1 in NSNotificationCenter.Notifications.send(_:)@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  outlined init with copy of (Hashable & Sendable)?((uint64_t)(a1 + 1), (uint64_t)&v25, &demangling cache variable for type metadata for Sendable?);
  uint64_t v6 = *((void *)&v26 + 1);
  outlined destroy of Any?((uint64_t)&v25, &demangling cache variable for type metadata for Sendable?);
  if (v6)
  {
    uint64_t v7 = (void *)*a1;
    unint64_t v8 = *(void *)(*a1 + 16);
    if (v8)
    {
      if (v8 >= 7) {
        specialized Array.replaceSubrange<A>(_:with:)(0, 1);
      }
      outlined init with copy of NSNotificationCenter.Notifications.NotificationWrapper(a2, &v25);
      uint64_t v9 = (void *)*a1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      }
      unint64_t v11 = v9[2];
      unint64_t v10 = v9[3];
      if (v11 >= v10 >> 1) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v9);
      }
      uint64_t v9[2] = v11 + 1;
      uint64_t v7 = v9 + 4;
      long long v12 = &v9[6 * v11 + 4];
      long long v13 = v25;
      long long v14 = v27;
      v12[1] = v26;
      uint64_t v12[2] = v14;
      *long long v12 = v13;
      *a1 = v9;
      uint64_t v15 = a1[5];
      if (!*(void *)(v15 + 16)) {
        goto LABEL_18;
      }
      uint64_t v16 = *(void *)(v15 + 32);
      specialized Array.replaceSubrange<A>(_:with:)(0, 1);
      *(void *)a3 = v16;
      if (v9[2])
      {
        outlined init with copy of NSNotificationCenter.Notifications.NotificationWrapper((uint64_t)(v9 + 4), (void *)(a3 + 8));
        specialized Array.replaceSubrange<A>(_:with:)(0, 1);
        return result;
      }
      __break(1u);
    }
    else
    {
      uint64_t v18 = a1[5];
      if (*(void *)(v18 + 16))
      {
        uint64_t v19 = *(void *)(v18 + 32);
        specialized Array.replaceSubrange<A>(_:with:)(0, 1);
        *(void *)a3 = v19;
        outlined init with copy of NSNotificationCenter.Notifications.NotificationWrapper(a2, (void *)(a3 + 8));
        return result;
      }
      outlined init with copy of NSNotificationCenter.Notifications.NotificationWrapper(a2, &v25);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_15;
      }
    }
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, v7);
LABEL_15:
    unint64_t v21 = v7[2];
    unint64_t v20 = v7[3];
    if (v21 >= v20 >> 1) {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v7);
    }
    v7[2] = v21 + 1;
    uint64_t v22 = &v7[6 * v21];
    long long v23 = v25;
    long long v24 = v27;
    v22[3] = v26;
    v22[4] = v24;
    void v22[2] = v23;
    *a1 = v7;
  }
LABEL_18:
  *(void *)(a3 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  return result;
}

void *outlined init with copy of NSNotificationCenter.Notifications.NotificationWrapper(uint64_t a1, void *a2)
{
  return a2;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v5 = *v3;
  uint64_t v6 = *((void *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v9 = a1 - a2;
  if (__OFSUB__(0, v8))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = v6 - v8;
  if (__OFADD__(v6, v9))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  double result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v10 <= *((void *)v5 + 3) >> 1)
  {
    if (!v9) {
      goto LABEL_18;
    }
  }
  else
  {
    double result = (char *)a3();
    uint64_t v5 = result;
    if (!v9)
    {
LABEL_18:
      *uint64_t v3 = v5;
      return result;
    }
  }
  uint64_t v13 = *((void *)v5 + 2);
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_24;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    double result = &v5[8 * a1 + 32];
    uint64_t v16 = &v5[8 * a2 + 32];
    if (a1 != a2 || result >= &v16[8 * v15]) {
      double result = (char *)memmove(result, v16, 8 * v15);
    }
    uint64_t v17 = *((void *)v5 + 2);
    BOOL v14 = __OFADD__(v17, v9);
    uint64_t v18 = v17 + v9;
    if (!v14)
    {
      *((void *)v5 + 2) = v18;
      goto LABEL_18;
    }
    goto LABEL_25;
  }
LABEL_26:
  double result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t JSONDecoder.init()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingUserInfoKey?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  CodingUserInfoKey.init(rawValue:)();
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_assumesTopLevelDictionaryKey, v3, v4);
    uint64_t v7 = v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
    *(void *)uint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    *(unsigned char *)(v7 + 16) = 2;
    *(void *)(v7 + 24) = 1;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    uint64_t v8 = MEMORY[0x1E4FBC868];
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(void *)(v7 + 96) = 0;
    *(void *)(v7 + 104) = v8;
    *(unsigned char *)(v7 + 112) = 0;
    uint64_t v9 = OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
    uint64_t v10 = swift_allocObject();
    *(_DWORD *)(v10 + 16) = 0;
    *(void *)(v0 + v9) = v10;
    return v0;
  }
  return result;
}

uint64_t AttributedString.Guts.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __JSONEncoder()
{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

uint64_t __JSONEncoder.encode(_:)()
{
  uint64_t v1 = v0;
  if (((*(uint64_t (**)(void))(*(void *)v0 + 208))() & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v4 = v3;
  type metadata accessor for JSONReference();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v4;
  *(unsigned char *)(v5 + 32) = 1;
  uint64_t v6 = swift_retain();
  MEMORY[0x185302590](v6);
  if (*(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
LABEL_5:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_release();
}

{
  void *v0;
  uint64_t v1;

  if (((*(uint64_t (**)(void))(*v0 + 208))() & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  type metadata accessor for JSONReference();
  swift_initStaticObject();
  uint64_t v1 = swift_retain_n();
  MEMORY[0x185302590](v1);
  if (*(void *)((v0[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v0[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
LABEL_5:
  }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v1 = v0;
  if (((*(uint64_t (**)(void))(*(void *)v0 + 208))() & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v4 = v3;
  type metadata accessor for JSONReference();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v4;
  *(unsigned char *)(v5 + 32) = 1;
  uint64_t v6 = swift_retain();
  MEMORY[0x185302590](v6);
  if (*(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
LABEL_5:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v1 = v0;
  if (((*(uint64_t (**)(void))(*(void *)v0 + 208))() & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v4 = v3;
  type metadata accessor for JSONReference();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v4;
  *(unsigned char *)(v5 + 32) = 1;
  uint64_t v6 = swift_retain();
  MEMORY[0x185302590](v6);
  if (*(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
LABEL_5:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v1 = v0;
  if (((*(uint64_t (**)(void))(*(void *)v0 + 208))() & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v4 = v3;
  type metadata accessor for JSONReference();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v4;
  *(unsigned char *)(v5 + 32) = 1;
  uint64_t v6 = swift_retain();
  MEMORY[0x185302590](v6);
  if (*(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
LABEL_5:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v1 = v0;
  if (((*(uint64_t (**)(void))(*(void *)v0 + 208))() & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v4 = v3;
  type metadata accessor for JSONReference();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v4;
  *(unsigned char *)(v5 + 32) = 1;
  uint64_t v6 = swift_retain();
  MEMORY[0x185302590](v6);
  if (*(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
LABEL_5:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_release();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance DateInterval(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

__n128 Measurement<>.FormatStyle.locale(_:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  __n128 v7 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v7;
  *(__n128 *)(a3 + 8) = v7;
  return result;
}

uint64_t Measurement<>.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4[1];
  v7[0] = *v4;
  v7[1] = v5;
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(a4 + 48))(v7, a3, a4);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Measurement<A><>.FormatStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = Measurement<>.FormatStyle.format(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t Measurement<>.FormatStyle.format(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  __n128 v7 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 + 8);
  uint64_t v37 = *(void **)v9;
  uint64_t v8 = v37;
  uint64_t v38 = v10;
  type metadata accessor for Measurement();
  id v11 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  if (swift_dynamicCast())
  {
    long long v12 = (void *)v36[0];
    uint64_t v37 = (void *)v36[0];
    uint64_t v38 = v36[1];
    uint64_t v13 = Measurement<>.FormatStyle.skeletonForUsage(_:)((uint64_t)&v37, a2);
    if (v14)
    {
      uint64_t v15 = Measurement<>.FormatStyle._format(_:withSkeleton:)(v13, v14);
      uint64_t v17 = v16;
      swift_bridgeObjectRelease();

      if (!v17) {
        goto LABEL_13;
      }
      goto LABEL_17;
    }

    uint64_t v15 = 0;
LABEL_13:
    if ((Measurement<>.FormatStyle.shouldConvertToBestUnit.getter(a2) & 1) != 0
      && (v37 = v11, v38 = v10, uint64_t v30 = Measurement<>.FormatStyle.skeletonForBaseUnit(_:)((uint64_t)&v37, a2), v31))
    {
      uint64_t v32 = v30;
      unint64_t v33 = v31;
      swift_bridgeObjectRelease();
      uint64_t v15 = Measurement<>.FormatStyle._format(_:withSkeleton:)(v32, v33);
      uint64_t v17 = v34;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v17 = 0;
    }
    goto LABEL_17;
  }
  id v18 = NSDimension.skeleton.getter();
  if (v19)
  {
    LOBYTE(v37) = *v2;
    uint64_t v20 = *(int *)(a2 + 32);
    LOBYTE(v36[0]) = v2[*(int *)(a2 + 36)];
    uint64_t v21 = static Measurement<>.FormatStyle.skeleton(_:width:usage:numberFormatStyle:)((uint64_t)v18, v19, (unsigned __int8 *)&v37, (unsigned __int8 *)v36, (uint64_t)&v2[v20]);
    unint64_t v23 = v22;
    swift_bridgeObjectRelease();
    uint64_t v15 = Measurement<>.FormatStyle._format(_:withSkeleton:)(v21, v23);
    uint64_t v17 = v24;
    swift_bridgeObjectRelease();
    if (v17) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  if ((Measurement<>.FormatStyle.shouldConvertToBestUnit.getter(a2) & 1) == 0) {
    goto LABEL_13;
  }
  uint64_t v37 = v11;
  uint64_t v38 = v10;
  uint64_t v25 = Measurement<>.FormatStyle.skeletonForUsage(_:)((uint64_t)&v37, a2);
  if (!v26) {
    goto LABEL_13;
  }
  uint64_t v27 = v25;
  unint64_t v28 = v26;
  swift_bridgeObjectRelease();
  uint64_t v15 = Measurement<>.FormatStyle._format(_:withSkeleton:)(v27, v28);
  uint64_t v17 = v29;
  swift_bridgeObjectRelease();
  if (!v17) {
    goto LABEL_13;
  }
LABEL_17:
  (*(void (**)(char *, unsigned char *, uint64_t))(v5 + 16))(v7, v3, a2);
  if (!v17)
  {
    uint64_t v37 = v11;
    uint64_t v38 = v10;
    uint64_t v15 = Measurement<>.FormatStyle.formatAsDescription(_:)(&v37, a2);
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a2);
  return v15;
}

uint64_t type metadata accessor for Measurement()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Measurement<>.FormatStyle._format(_:withSkeleton:)(uint64_t a1, unint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)uint64_t v10 = *(_OWORD *)(v2 + 8);
  swift_unknownObjectRetain();
  uint64_t v5 = specialized static ICUMeasurementNumberFormatter.create(for:locale:)(a1, a2, v10);
  swift_unknownObjectRelease();
  if (!v5) {
    return 0;
  }
  type metadata accessor for ICUNumberFormatterBase.FormatResult();
  swift_initStackObject();
  ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
  uint64_t v6 = swift_retain_n();
  MEMORY[0x1F4188790](v6);
  swift_retain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v9, v10);
  uint64_t v7 = v10[0];
  swift_release();
  swift_release_n();
  return v7;
}

char *specialized static ICUMeasurementNumberFormatter.create(for:locale:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  void (*v57)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t);
  int64_t v60;
  char *v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  _OWORD v65[9];
  _OWORD v66[2];
  unsigned char v67[144];
  uint64_t v68;
  long long v69;
  long long v70;
  long long v71;
  long long v72;
  long long v73;
  long long v74;
  long long v75;
  long long v76;
  long long v77;
  _OWORD v78[2];
  _OWORD v79[9];
  _OWORD v80[2];
  unsigned char v81[144];
  long long v82;
  long long v83;
  _OWORD v84[7];
  _OWORD v85[2];
  uint64_t v86;

  unint64_t v86 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 472);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  int64_t v59 = v8;
  uint64_t v9 = v8(ObjectType, v6);
  uint64_t v11 = v10;
  unint64_t v57 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v6 + 464);
  v57(&v82, ObjectType, v6);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)&v82, (uint64_t)v81, &demangling cache variable for type metadata for LocalePreferences?);
  uint64_t v62 = a1;
  *(void *)&uint64_t v82 = a1;
  *((void *)&v82 + 1) = a2;
  *(void *)&unint64_t v83 = v9;
  *((void *)&v83 + 1) = v11;
  uint64_t v12 = outlined init with take of LocalePreferences?((uint64_t)v81, (uint64_t)v84, &demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1) {
    uint64_t v12 = swift_once();
  }
  uint64_t v77 = v84[6];
  v78[0] = v85[0];
  *(_OWORD *)((char *)v78 + 12) = *(_OWORD *)((char *)v85 + 12);
  unsigned int v73 = v84[2];
  uint64_t v74 = v84[3];
  uint64_t v75 = v84[4];
  uint64_t v76 = v84[5];
  unsigned int v69 = v82;
  uint64_t v70 = v83;
  uint64_t v13 = *(void *)algn_1E8ED4D18;
  uint64_t v55 = static ICUMeasurementNumberFormatter.cache;
  uint64_t v71 = v84[0];
  uint64_t v72 = v84[1];
  MEMORY[0x1F4188790](v12);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 24));
  uint64_t v56 = (uint64_t *)(v13 + 16);
  partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)(v13 + 16, &v68);
  os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 24));
  swift_release();
  uint64_t v14 = v68;
  if (v68 != 1) {
    goto LABEL_56;
  }
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v15 = v59(ObjectType, v6);
  v57(v79, ObjectType, v6);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)v67, &demangling cache variable for type metadata for LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v67, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  type metadata accessor for ICUMeasurementNumberFormatter();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 24) = v62;
  *(void *)(v16 + 32) = a2;
  swift_bridgeObjectRetain();
  uint64_t v17 = specialized _copyCollectionToContiguousArray<A>(_:)(v62, a2);
  uint64_t v18 = swift_bridgeObjectRelease();
  LODWORD(v65[0]) = 0;
  if (v17[2] >> 31)
  {
    __break(1u);
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v19 = unumf_openForSkeletonAndLocale();
    swift_release();
    swift_release();
    uint64_t v20 = (os_unfair_lock_s *)(v13 + 24);
    if (v19)
    {
      *(void *)(v16 + 16) = v19;
    }
    else
    {
      swift_bridgeObjectRelease();
      type metadata accessor for ICUNumberFormatterBase();
      swift_deallocPartialClassInstance();
      uint64_t v16 = 0;
    }
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v13 + 24));
    if (v55 >= *(void *)(*(void *)(v13 + 16) + 16)) {
      swift_bridgeObjectRetain();
    }
    else {
      uint64_t *v56 = MEMORY[0x1E4FBC868];
    }
    v79[8] = v77;
    v80[0] = v78[0];
    *(_OWORD *)((char *)v80 + 12) = *(_OWORD *)((char *)v78 + 12);
    v79[4] = v73;
    v79[5] = v74;
    v79[6] = v75;
    v79[7] = v76;
    v79[0] = v69;
    v79[1] = v70;
    v79[2] = v71;
    v79[3] = v72;
    uint64_t v5 = v16;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v64 = *v56;
    uint64_t v15 = *v56;
    uint64_t *v56 = 0x8000000000000000;
    uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v79);
    uint64_t v23 = *(void *)(v15 + 16);
    BOOL v24 = (v22 & 1) == 0;
    BOOL v25 = __OFADD__(v23, v24);
    uint64_t v26 = v23 + v24;
    if (!v25)
    {
      LOBYTE(v16) = v22;
      if (*(void *)(v15 + 24) < v26)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, isUniquelyReferenced_nonNull_native);
        uint64_t v27 = v64;
        uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v79);
        if ((v16 & 1) == (v28 & 1)) {
          goto LABEL_17;
        }
        uint64_t v18 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
      }
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v27 = v15;
LABEL_17:
        if (v16)
        {
LABEL_18:
          uint64_t v29 = *(void *)(v27 + 56);
          uint64_t v30 = 8 * v18;
          swift_release();
          *(void *)(v29 + v30) = v5;
          uint64_t v14 = v5;
LABEL_55:
          *(void *)(v13 + 16) = v27;
          swift_bridgeObjectRelease();
          os_unfair_lock_unlock(v20);
          swift_release();
          swift_bridgeObjectRelease();
          outlined consume of ICUDateIntervalFormatter??(v68);
LABEL_56:
          swift_release();
          outlined release of ICUByteCountNumberFormatter.Signature((uint64_t)&v82);
          return (char *)v14;
        }
LABEL_54:
        uint64_t v14 = v5;
        specialized _NativeDictionary._insert(at:key:value:)(v18, v79, v5, v27);
        outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)v79);
        goto LABEL_55;
      }
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_21:
  int64_t v58 = v18;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<ICUMeasurementNumberFormatter.Signature, ICUMeasurementNumberFormatter?>);
  uint64_t v31 = static _DictionaryStorage.copy(original:)();
  uint64_t v27 = v31;
  if (!*(void *)(v15 + 16))
  {
LABEL_53:
    swift_bridgeObjectRelease();
    uint64_t v18 = v58;
    uint64_t v20 = (os_unfair_lock_s *)(v13 + 24);
    if (v16) {
      goto LABEL_18;
    }
    goto LABEL_54;
  }
  uint64_t result = (char *)(v31 + 64);
  uint64_t v61 = (char *)(v15 + 64);
  unint64_t v33 = (unint64_t)((1 << *(unsigned char *)(v27 + 32)) + 63) >> 6;
  if (v27 != v15 || result >= &v61[8 * v33]) {
    uint64_t result = (char *)memmove(result, v61, 8 * v33);
  }
  int64_t v34 = 0;
  *(void *)(v27 + 16) = *(void *)(v15 + 16);
  uint64_t v35 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v36 = -1;
  if (v35 < 64) {
    uint64_t v36 = ~(-1 << v35);
  }
  unint64_t v37 = v36 & *(void *)(v15 + 64);
  unint64_t v60 = (unint64_t)(v35 + 63) >> 6;
  while (1)
  {
    if (v37)
    {
      unint64_t v38 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      int v63 = v34;
      unint64_t v39 = v38 | (v34 << 6);
      goto LABEL_29;
    }
    int64_t v51 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
      __break(1u);
      goto LABEL_58;
    }
    if (v51 >= v60) {
      goto LABEL_53;
    }
    unint64_t v52 = *(void *)&v61[8 * v51];
    int64_t v53 = v34 + 1;
    if (!v52)
    {
      int64_t v53 = v51 + 1;
      if (v51 + 1 >= v60) {
        goto LABEL_53;
      }
      unint64_t v52 = *(void *)&v61[8 * v53];
      if (!v52)
      {
        int64_t v53 = v51 + 2;
        if (v51 + 2 >= v60) {
          goto LABEL_53;
        }
        unint64_t v52 = *(void *)&v61[8 * v53];
        if (!v52)
        {
          int64_t v53 = v51 + 3;
          if (v51 + 3 >= v60) {
            goto LABEL_53;
          }
          unint64_t v52 = *(void *)&v61[8 * v53];
          if (!v52)
          {
            int64_t v53 = v51 + 4;
            if (v51 + 4 >= v60) {
              goto LABEL_53;
            }
            unint64_t v52 = *(void *)&v61[8 * v53];
            if (!v52)
            {
              int64_t v53 = v51 + 5;
              if (v51 + 5 >= v60) {
                goto LABEL_53;
              }
              unint64_t v52 = *(void *)&v61[8 * v53];
              if (!v52)
              {
                int64_t v53 = v51 + 6;
                if (v51 + 6 >= v60) {
                  goto LABEL_53;
                }
                unint64_t v52 = *(void *)&v61[8 * v53];
                if (!v52) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_52:
    unint64_t v37 = (v52 - 1) & v52;
    int v63 = v53;
    unint64_t v39 = __clz(__rbit64(v52)) + (v53 << 6);
LABEL_29:
    uint64_t v40 = (_OWORD *)(*(void *)(v15 + 48) + 176 * v39);
    long long v41 = v40[3];
    long long v42 = v40[4];
    long long v43 = v40[6];
    v65[5] = v40[5];
    v65[6] = v43;
    _OWORD v65[3] = v41;
    v65[4] = v42;
    long long v44 = v40[7];
    long long v45 = v40[8];
    long long v46 = v40[9];
    *(_OWORD *)((char *)v66 + 12) = *(_OWORD *)((char *)v40 + 156);
    v65[8] = v45;
    v66[0] = v46;
    v65[7] = v44;
    long long v48 = v40[1];
    long long v47 = v40[2];
    v65[0] = *v40;
    v65[1] = v48;
    _OWORD v65[2] = v47;
    uint64_t v49 = 8 * v39;
    uint64_t v50 = *(void *)(*(void *)(v15 + 56) + 8 * v39);
    memmove((void *)(*(void *)(v27 + 48) + 176 * v39), v40, 0xACuLL);
    *(void *)(*(void *)(v27 + 56) + v49) = v50;
    outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)v65);
    uint64_t result = (char *)swift_retain();
    int64_t v34 = v63;
  }
  int64_t v54 = v51 + 7;
  if (v54 >= v60) {
    goto LABEL_53;
  }
  unint64_t v52 = *(void *)&v61[8 * v54];
  if (v52)
  {
    int64_t v53 = v54;
    goto LABEL_52;
  }
  while (1)
  {
    int64_t v53 = v54 + 1;
    if (__OFADD__(v54, 1)) {
      break;
    }
    if (v53 >= v60) {
      goto LABEL_53;
    }
    unint64_t v52 = *(void *)&v61[8 * v53];
    ++v54;
    if (v52) {
      goto LABEL_52;
    }
  }
LABEL_58:
  __break(1u);
  return result;
}