uint64_t specialized AttributedSubstring.subscript.setter(uint64_t a1, char a2, uint64_t (*a3)(uint64_t, long long *), void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v7;
  void *v10;
  long long v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  long long v18;
  long long v19;
  long long v21;
  long long v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  unsigned char v27[48];
  unsigned char v28[48];
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  _OWORD v36[4];

  v7 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v10 = *(void **)v4;
    v11 = *(_OWORD *)(*(void *)v4 + 16);
    v12 = *(_OWORD *)(*(void *)v4 + 48);
    v36[1] = *(_OWORD *)(*(void *)v4 + 32);
    v36[2] = v12;
    v36[0] = v11;
    v13 = v10[8];
    v14 = v10[9];
    v15 = v10[10];
    v16 = v10[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v36);
    swift_unknownObjectRetain();
    *(void *)v7 = AttributedString.Guts.init(string:runs:)(v36, v13, v14, v15, v16);
    swift_release();
  }
  v17 = *(_OWORD **)v7;
  if (a2)
  {
    v26 = a4;
    v21 = v17[2];
    v29 = v17[1];
    v30 = v21;
    v31 = v17[3];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v27);
    v22 = v17[2];
    v33 = v17[1];
    v34 = v22;
    v35 = v17[3];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v28);
    v23 = BigString.Index.utf8Offset.getter();
    v24 = BigString.Index.utf8Offset.getter();
    v25 = swift_retain();
    v26(v25, v23, v24);
    return swift_release();
  }
  else
  {
    v18 = *(_OWORD *)(v7 + 24);
    v29 = *(_OWORD *)(v7 + 8);
    v30 = v18;
    v19 = *(_OWORD *)(v7 + 56);
    v31 = *(_OWORD *)(v7 + 40);
    v32 = v19;
    return a3(a1, &v29);
  }
}

uint64_t thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

void thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ()(uint64_t a1, void *a2)
{
  v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

uint64_t closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v94 = *(_OWORD **)a3;
  swift_retain();
  Range<>.init(_:in:)(a1, a2, &v94, (uint64_t *)&v118);
  uint64_t v6 = v120;
  if (v120 == 2) {
    return 0;
  }
  uint64_t v8 = v122;
  uint64_t v7 = v123;
  uint64_t v9 = v119;
  long long v90 = v118;
  long long v92 = v121;
  v10 = *(_OWORD **)a3;
  long long v11 = *(_OWORD *)(*(void *)a3 + 16);
  long long v12 = *(_OWORD *)(*(void *)a3 + 32);
  v150[2] = *(_OWORD *)(*(void *)a3 + 48);
  v150[1] = v12;
  v150[0] = v11;
  swift_retain();
  outlined retain of Locale((uint64_t)v150);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v150);
  long long v13 = v10[1];
  long long v14 = v10[2];
  long long v149 = v10[3];
  v148[1] = v14;
  v148[0] = v13;
  long long v15 = v10[1];
  long long v16 = v10[2];
  v151[2] = v149;
  v151[1] = v16;
  v151[0] = v15;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v151, (uint64_t)v152);
  outlined retain of Locale((uint64_t)v152);
  BigString.endIndex.getter();
  outlined release of Locale((uint64_t)v148);
  swift_release();
  v139[3] = v90;
  uint64_t v140 = v9;
  uint64_t v141 = v6;
  long long v142 = v92;
  uint64_t v143 = v8;
  uint64_t v144 = v7;
  long long v17 = v10[2];
  long long v145 = v10[1];
  long long v146 = v17;
  long long v147 = v10[3];
  swift_retain_n();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v124);
  uint64_t v18 = BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v25 = BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  outlined release of Locale((uint64_t)v125);
  swift_release();
  uint64_t v131 = v18;
  uint64_t v132 = v20;
  uint64_t v133 = v22;
  uint64_t v134 = v24;
  uint64_t v135 = v25;
  uint64_t v136 = v27;
  uint64_t v137 = v29;
  uint64_t v138 = v31;
  long long v32 = v10[1];
  long long v33 = v10[3];
  v139[1] = v10[2];
  v139[2] = v33;
  v139[0] = v32;
  swift_retain_n();
  outlined retain of Locale((uint64_t)v139);
  BigString.subscript.getter();
  outlined release of Locale((uint64_t)v139);
  uint64_t v34 = BigSubstring.startIndex.getter();
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  uint64_t v41 = BigSubstring.endIndex.getter();
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  outlined release of Locale((uint64_t)v126);
  swift_release_n();
  v48 = (void *)swift_allocObject();
  v48[2] = v10;
  v48[3] = v34;
  v48[4] = v36;
  v48[5] = v38;
  v48[6] = v40;
  v48[7] = v41;
  v48[8] = v43;
  v48[9] = v45;
  v48[10] = v47;
  v48[11] = 0;
  v80 = v48;
  swift_retain_n();
  uint64_t v89 = v38;
  uint64_t v91 = v34;
  uint64_t v93 = v36;
  uint64_t v88 = v40;
  uint64_t v49 = v40;
  if (static BigString.Index.== infix(_:_:)())
  {
LABEL_3:
    swift_release();
    v94 = v10;
    uint64_t v95 = v91;
    uint64_t v96 = v93;
    uint64_t v97 = v89;
    uint64_t v98 = v88;
    uint64_t v99 = v41;
    uint64_t v100 = v43;
    uint64_t v101 = v45;
    uint64_t v102 = v47;
    uint64_t v103 = 0;
    uint64_t v104 = v91;
    uint64_t v105 = v93;
    uint64_t v106 = v89;
    uint64_t v107 = v88;
    uint64_t v108 = v41;
    uint64_t v109 = v43;
    uint64_t v110 = v45;
    uint64_t v111 = v47;
    uint64_t v112 = v34;
    uint64_t v113 = v36;
    uint64_t v114 = v38;
    uint64_t v115 = v49;
    v116 = partial apply for closure #1 in closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    v117 = v80;
    outlined release of LazyFilterSequence<DefaultIndices<AttributedString.CharacterView>>.Iterator((uint64_t)&v94);
    swift_release_n();
    return 0;
  }
  uint64_t v86 = v47;
  v87 = v10 + 1;
  uint64_t v82 = v41;
  v83 = v10;
  uint64_t v85 = v43;
  while (1)
  {
    swift_retain();
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      break;
    }
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_29;
    }
    long long v52 = *v87;
    long long v53 = v87[2];
    v130[1] = v87[1];
    v130[2] = v53;
    v130[0] = v52;
    long long v54 = *v87;
    long long v55 = v87[1];
    v153[2] = v53;
    v153[1] = v55;
    v153[0] = v54;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v153, (uint64_t)v154);
    outlined retain of Locale((uint64_t)v154);
    uint64_t v84 = BigString.index(after:)();
    uint64_t v36 = v56;
    uint64_t v58 = v57;
    uint64_t v60 = v59;
    outlined release of Locale((uint64_t)v130);
    uint64_t v61 = v45;
    uint64_t v81 = v60;
    LOBYTE(v60) = static BigString.Index.< infix(_:_:)();
    uint64_t result = swift_release();
    if (v60) {
      goto LABEL_30;
    }
    swift_retain();
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_31;
    }
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if ((result & 1) == 0) {
      goto LABEL_32;
    }
    long long v62 = *v87;
    long long v63 = v87[2];
    v129[1] = v87[1];
    v129[2] = v63;
    v129[0] = v62;
    long long v64 = *v87;
    long long v65 = v87[1];
    v155[2] = v63;
    v155[1] = v65;
    v155[0] = v64;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v155, (uint64_t)v156);
    outlined retain of Locale((uint64_t)v156);
    uint64_t v66 = BigString.subscript.getter();
    uint64_t v68 = v67;
    outlined release of Locale((uint64_t)v129);
    swift_release();
    if (v66 == 37 && v68 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
      uint64_t v45 = v61;
      uint64_t v41 = v82;
    }
    else
    {
      char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v47 = v86;
      uint64_t v45 = v61;
      uint64_t v41 = v82;
      if ((v69 & 1) == 0) {
        goto LABEL_8;
      }
    }
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_33;
    }
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_34;
    }
    long long v70 = *v87;
    long long v71 = v87[2];
    v128[1] = v87[1];
    v128[2] = v71;
    v128[0] = v70;
    long long v72 = *v87;
    long long v73 = v87[1];
    v157[2] = v71;
    v157[1] = v73;
    v157[0] = v72;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v157, (uint64_t)v158);
    outlined retain of Locale((uint64_t)v158);
    BigString.index(after:)();
    uint64_t v47 = v86;
    outlined release of Locale((uint64_t)v128);
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_35;
    }
    if ((static BigString.Index.== infix(_:_:)() & 1) == 0)
    {
      swift_retain();
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        goto LABEL_36;
      }
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if ((result & 1) == 0) {
        goto LABEL_37;
      }
      long long v74 = *v87;
      long long v75 = v87[2];
      v127[1] = v87[1];
      v127[2] = v75;
      v127[0] = v74;
      long long v76 = *v87;
      v159[1] = v87[1];
      v159[2] = v75;
      v159[0] = v76;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v159, (uint64_t)v160);
      outlined retain of Locale((uint64_t)v160);
      uint64_t v77 = BigString.subscript.getter();
      uint64_t v79 = v78;
      outlined release of Locale((uint64_t)v127);
      swift_release();
      if (v77 == 37 && v79 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
        uint64_t v47 = v86;
      }
      else
      {
        char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t v47 = v86;
        if ((v51 & 1) == 0)
        {
          swift_release();
          v94 = v83;
          uint64_t v95 = v91;
          uint64_t v96 = v93;
          uint64_t v97 = v89;
          uint64_t v98 = v88;
          uint64_t v99 = v41;
          uint64_t v100 = v85;
          uint64_t v101 = v45;
          uint64_t v102 = v86;
          uint64_t v103 = 0;
          uint64_t v104 = v91;
          uint64_t v105 = v93;
          uint64_t v106 = v89;
          uint64_t v107 = v88;
          uint64_t v108 = v41;
          uint64_t v109 = v85;
          uint64_t v110 = v45;
          uint64_t v111 = v86;
          uint64_t v112 = v84;
          uint64_t v113 = v36;
          uint64_t v114 = v58;
          uint64_t v115 = v81;
          v116 = partial apply for closure #1 in closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
          v117 = v80;
          outlined release of LazyFilterSequence<DefaultIndices<AttributedString.CharacterView>>.Iterator((uint64_t)&v94);
          swift_release_n();
          return 1;
        }
      }
    }
LABEL_8:
    uint64_t v34 = v84;
    uint64_t v43 = v85;
    uint64_t v38 = v58;
    uint64_t v49 = v81;
    v10 = v83;
    if (static BigString.Index.== infix(_:_:)()) {
      goto LABEL_3;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1, void *a2)
{
  id v3 = (_OWORD *)*a2;
  outlined retain of AttributedString.Runs((uint64_t)a2);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  long long v5 = v3[1];
  long long v6 = v3[3];
  v12[1] = v3[2];
  v12[2] = v6;
  v12[0] = v5;
  long long v7 = v3[1];
  v13[1] = v3[2];
  v13[2] = v6;
  v13[0] = v7;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v13, (uint64_t)v14);
  outlined retain of Locale((uint64_t)v14);
  uint64_t v8 = BigString.subscript.getter();
  uint64_t v10 = v9;
  outlined release of Locale((uint64_t)v12);
  outlined release of AttributedString.Runs((uint64_t)a2);
  if (v8 == 37 && v10 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
    char v11 = 1;
  }
  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  return v11 & 1;
}

uint64_t thunk for @callee_guaranteed (@unowned _NSRange) -> (@unowned Bool)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 1;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned _NSRange) -> (@unowned Bool)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3) & 1;
}

double closure #9 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)&long long v46 = *a4;
  swift_retain();
  Range<>.init(_:in:)(a2, a3, &v46, (uint64_t *)&v41);
  if (v43 == 2)
  {
    *(void *)(a5 + 24) = MEMORY[0x1E4FBB390];
    *(unsigned char *)a5 = 0;
    return result;
  }
  long long v46 = v41;
  unint64_t v47 = v42;
  uint64_t v48 = v43;
  long long v49 = v44;
  long long v50 = v45;
  if (one-time initialization token for language != -1) {
    swift_once();
  }
  id v11 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)static NSAttributedStringKey.language);
  uint64_t v13 = v12;
  if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v13 == v14)
  {
    swift_bridgeObjectRelease_n();
LABEL_19:
    uint64_t v27 = (_OWORD *)*a4;
    swift_retain();
    specialized AttributedString.firstValue<A>(of:in:)(&v46, v27, (uint64_t)&v41);
    swift_release();
    uint64_t v28 = *((void *)&v41 + 1);
    if (*((void *)&v41 + 1))
    {
      uint64_t v29 = v41;
      *(void *)(a5 + 24) = MEMORY[0x1E4FBB1A0];
      *(void *)a5 = v29;
      *(void *)(a5 + 8) = v28;
      return result;
    }
    goto LABEL_27;
  }
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v16) {
    goto LABEL_19;
  }
  id v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSMorphology");
  uint64_t v19 = v18;
  if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v19 == v20)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_22;
  }
  char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v22)
  {
LABEL_22:
    uint64_t v30 = (_OWORD *)*a4;
    swift_retain();
    uint64_t v31 = &static AttributeScopes.FoundationAttributes.MorphologyAttribute.name;
    long long v32 = (uint64_t *)algn_1E8ED5E30;
    long long v33 = &one-time initialization token for name;
    goto LABEL_23;
  }
  id v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSAssumedFallbackInflection");
  uint64_t v25 = v24;
  if (v23 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v25 == v26)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v40 & 1) == 0) {
      goto LABEL_27;
    }
  }
  uint64_t v30 = (_OWORD *)*a4;
  swift_retain();
  uint64_t v31 = &static AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute.name;
  long long v32 = (uint64_t *)algn_1E8ED5F28;
  long long v33 = &one-time initialization token for name;
LABEL_23:
  specialized AttributedString.firstValue<A>(of:in:)(&v46, v30, v33, v31, v32, (uint64_t)&v41);
  swift_release();
  uint64_t v34 = *((void *)&v41 + 1);
  if (*((void *)&v41 + 1))
  {
    unint64_t v35 = v42;
    char v36 = v41;
    unint64_t v37 = (unint64_t)v41 >> 8;
    unint64_t v38 = (unint64_t)v41 >> 16;
    unint64_t v39 = v42 >> 8;
    *(void *)(a5 + 24) = &type metadata for Morphology;
    *(unsigned char *)a5 = v36;
    *(unsigned char *)(a5 + 1) = v37;
    *(unsigned char *)(a5 + 2) = v38;
    *(void *)(a5 + 8) = v34;
    *(unsigned char *)(a5 + 16) = v35;
    *(unsigned char *)(a5 + 17) = v39;
    *(unsigned char *)(a5 + 18) = BYTE2(v35);
    *(unsigned char *)(a5 + 19) = BYTE3(v35);
    *(unsigned char *)(a5 + 20) = BYTE4(v35);
    return result;
  }
LABEL_27:
  double result = 0.0;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  return result;
}

uint64_t specialized AttributedString.firstValue<A>(of:in:)@<X0>(long long *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  long long v5 = a2[2];
  v78[0] = a2[1];
  v78[1] = v5;
  v78[2] = a2[3];
  swift_retain();
  outlined retain of Locale((uint64_t)v78);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v78);
  long long v6 = a2[2];
  v76[0] = a2[1];
  v76[1] = v6;
  long long v77 = a2[3];
  v79[0] = v76[0];
  v79[1] = v6;
  v79[2] = v77;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v79, (uint64_t)v80);
  outlined retain of Locale((uint64_t)v80);
  BigString.endIndex.getter();
  outlined release of Locale((uint64_t)v76);
  long long v7 = a1[1];
  long long v69 = *a1;
  long long v70 = v7;
  long long v8 = a1[3];
  long long v71 = a1[2];
  long long v72 = v8;
  long long v9 = a2[2];
  long long v73 = a2[1];
  long long v74 = v9;
  long long v75 = a2[3];
  swift_retain_n();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v59);
  uint64_t v10 = BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v17 = BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  outlined release of Locale((uint64_t)v60);
  swift_release_n();
  uint64_t v61 = v10;
  uint64_t v62 = v12;
  uint64_t v63 = v14;
  uint64_t v64 = v16;
  uint64_t v65 = v17;
  uint64_t v66 = v19;
  uint64_t v67 = v21;
  uint64_t v68 = v23;
  AttributedString.Runs.init(_:in:)((uint64_t)a2, &v81);
  v94[10] = v91;
  v94[11] = v92;
  v94[6] = v87;
  v94[7] = v88;
  v94[9] = v90;
  v94[8] = v89;
  v94[2] = v83;
  v94[3] = v84;
  v94[5] = v86;
  v94[4] = v85;
  v94[1] = v82;
  v94[0] = v81;
  uint64_t v95 = v93;
  uint64_t v96 = &outlined read-only object #0 of specialized AttributedString.firstValue<A>(of:in:);
  uint64_t v97 = MEMORY[0x1E4FBC860];
  uint64_t v24 = *((void *)&v89 + 1);
  uint64_t v26 = *((void *)&v90 + 1);
  uint64_t v25 = v90;
  uint64_t v27 = v91;
  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)v94);
  if (static BigString.Index.== infix(_:_:)())
  {
LABEL_5:
    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v94);
    uint64_t result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v94);
LABEL_6:
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  else
  {
    while (1)
    {
      long long v55 = v91;
      long long v56 = v92;
      uint64_t v57 = v93;
      long long v51 = v87;
      long long v52 = v88;
      long long v53 = v89;
      long long v54 = v90;
      long long v47 = v83;
      long long v48 = v84;
      long long v49 = v85;
      long long v50 = v86;
      long long v45 = v81;
      long long v46 = v82;
      uint64_t v41 = v24;
      uint64_t v42 = v25;
      uint64_t v43 = v26;
      uint64_t v44 = v27;
      AttributedString.Runs.subscript.getter(v58);
      uint64_t v28 = v58[0];
      long long v55 = v91;
      long long v56 = v92;
      uint64_t v57 = v93;
      long long v51 = v87;
      long long v52 = v88;
      long long v53 = v89;
      long long v54 = v90;
      long long v47 = v83;
      long long v48 = v84;
      long long v49 = v85;
      long long v50 = v86;
      long long v45 = v81;
      long long v46 = v82;
      uint64_t v41 = v24;
      uint64_t v42 = v25;
      uint64_t v43 = v26;
      uint64_t v44 = v27;
      outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)v94);
      outlined retain of AttributedString.Runs((uint64_t)&v81);
      AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)(&v41, (uint64_t)&outlined read-only object #0 of specialized AttributedString.firstValue<A>(of:in:), MEMORY[0x1E4FBC860], v58);
      outlined release of AttributedString.Runs((uint64_t)&v81);
      outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v94);
      uint64_t v29 = v58[0];
      uint64_t v30 = v58[1];
      uint64_t v32 = v58[2];
      uint64_t v31 = v58[3];
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result)
      {
        __break(1u);
        return result;
      }
      uint64_t v40 = v26;
      uint64_t v34 = v25;
      uint64_t v35 = v24;
      uint64_t v36 = specialized AttributedString._AttributeStorage.subscript.getter(v28);
      uint64_t v38 = v37;
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v38) {
        break;
      }
      uint64_t v24 = v29;
      uint64_t v25 = v30;
      uint64_t v26 = v32;
      uint64_t v27 = v31;
      if (static BigString.Index.== infix(_:_:)()) {
        goto LABEL_5;
      }
    }
    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v94);
    uint64_t result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v94);
    if (v38 == 1) {
      goto LABEL_6;
    }
    *(void *)a3 = v36;
    *(void *)(a3 + 8) = v38;
    *(void *)(a3 + 16) = v35;
    *(void *)(a3 + 24) = v34;
    *(void *)(a3 + 32) = v40;
    *(void *)(a3 + 40) = v27;
    *(void *)(a3 + 48) = v29;
    *(void *)(a3 + 56) = v30;
    *(void *)(a3 + 64) = v32;
    *(void *)(a3 + 72) = v31;
  }
  return result;
}

uint64_t specialized AttributedString.firstValue<A>(of:in:)@<X0>(long long *a1@<X0>, _OWORD *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  long long v8 = &v101;
  long long v9 = a2[2];
  v98[0] = a2[1];
  v98[1] = v9;
  v98[2] = a2[3];
  swift_retain();
  outlined retain of Locale((uint64_t)v98);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v98);
  long long v10 = a2[2];
  v96[0] = a2[1];
  v96[1] = v10;
  long long v97 = a2[3];
  v99[0] = v96[0];
  v99[1] = v10;
  v99[2] = v97;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v99, (uint64_t)v100);
  outlined retain of Locale((uint64_t)v100);
  BigString.endIndex.getter();
  outlined release of Locale((uint64_t)v96);
  long long v11 = a1[1];
  long long v89 = *a1;
  long long v90 = v11;
  long long v12 = a1[3];
  long long v91 = a1[2];
  long long v92 = v12;
  long long v13 = a2[2];
  long long v93 = a2[1];
  long long v94 = v13;
  long long v95 = a2[3];
  swift_retain_n();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v79);
  uint64_t v14 = BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v21 = BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  outlined release of Locale((uint64_t)v80);
  swift_release_n();
  uint64_t v81 = v14;
  uint64_t v82 = v16;
  uint64_t v83 = v18;
  uint64_t v84 = v20;
  uint64_t v85 = v21;
  uint64_t v86 = v23;
  uint64_t v87 = v25;
  uint64_t v88 = v27;
  AttributedString.Runs.init(_:in:)((uint64_t)a2, &v101);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1821037E0;
  if (*a3 != -1) {
LABEL_11:
  }
    swift_once();
  uint64_t v29 = *a5;
  *(void *)(v28 + 32) = *a4;
  *(void *)(v28 + 40) = v29;
  long long v30 = v8[11];
  v114[10] = v8[10];
  v114[11] = v30;
  long long v31 = v8[7];
  v114[6] = v8[6];
  v114[7] = v31;
  long long v32 = v8[8];
  v114[9] = v8[9];
  v114[8] = v32;
  long long v33 = v8[3];
  v114[2] = v8[2];
  v114[3] = v33;
  long long v34 = v8[4];
  v114[5] = v8[5];
  v114[4] = v34;
  long long v35 = *v8;
  v114[1] = v8[1];
  v114[0] = v35;
  uint64_t v115 = v113;
  uint64_t v116 = v28;
  uint64_t v117 = MEMORY[0x1E4FBC860];
  uint64_t v36 = *((void *)&v109 + 1);
  uint64_t v38 = *((void *)&v110 + 1);
  uint64_t v37 = v110;
  uint64_t v39 = v111;
  swift_bridgeObjectRetain();
  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)v114);
  if (static BigString.Index.== infix(_:_:)())
  {
LABEL_6:
    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v114);
    uint64_t result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v114);
LABEL_7:
    *(void *)(a6 + 80) = 0;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)(a6 + 64) = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)a6 = 0u;
  }
  else
  {
    while (1)
    {
      long long v71 = v111;
      long long v72 = v112;
      uint64_t v73 = v113;
      long long v67 = v107;
      long long v68 = v108;
      long long v69 = v109;
      long long v70 = v110;
      long long v63 = v103;
      long long v64 = v104;
      long long v65 = v105;
      long long v66 = v106;
      long long v61 = v101;
      long long v62 = v102;
      uint64_t v57 = v36;
      uint64_t v58 = v37;
      uint64_t v59 = v38;
      uint64_t v60 = v39;
      long long v8 = (long long *)v39;
      AttributedString.Runs.subscript.getter(v74);
      uint64_t v40 = v74[0];
      long long v71 = v111;
      long long v72 = v112;
      uint64_t v73 = v113;
      long long v67 = v107;
      long long v68 = v108;
      long long v69 = v109;
      long long v70 = v110;
      long long v63 = v103;
      long long v64 = v104;
      long long v65 = v105;
      long long v66 = v106;
      long long v61 = v101;
      long long v62 = v102;
      uint64_t v57 = v36;
      uint64_t v58 = v37;
      uint64_t v59 = v38;
      uint64_t v60 = v39;
      outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)v114);
      outlined retain of AttributedString.Runs((uint64_t)&v101);
      uint64_t v41 = v28;
      AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)(&v57, v28, MEMORY[0x1E4FBC860], v74);
      outlined release of AttributedString.Runs((uint64_t)&v101);
      outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v114);
      uint64_t v42 = v37;
      uint64_t v28 = v74[0];
      uint64_t v37 = v74[1];
      uint64_t v43 = v38;
      uint64_t v38 = v74[2];
      uint64_t v39 = v74[3];
      uint64_t v52 = v42;
      uint64_t v53 = v36;
      long long v50 = v8;
      uint64_t v51 = v43;
      if (static BigString.Index.< infix(_:_:)())
      {
        __break(1u);
        goto LABEL_11;
      }
      specialized AttributedString._AttributeStorage.subscript.getter(v40, a3, a5, a4, &v75);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v44 = v76;
      if (v76) {
        break;
      }
      uint64_t v36 = v28;
      uint64_t v28 = v41;
      if (static BigString.Index.== infix(_:_:)()) {
        goto LABEL_6;
      }
    }
    uint64_t v46 = v78;
    uint64_t v47 = v77;
    int v48 = v75;
    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v114);
    uint64_t result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v114);
    if (v44 == 1) {
      goto LABEL_7;
    }
    *(_WORD *)a6 = v48;
    *(unsigned char *)(a6 + 2) = BYTE2(v48);
    *(void *)(a6 + 8) = v44;
    *(_WORD *)(a6 + 16) = v47;
    *(unsigned char *)(a6 + 18) = BYTE2(v47);
    *(unsigned char *)(a6 + 19) = BYTE3(v47);
    *(unsigned char *)(a6 + 20) = (v47 | (unint64_t)(v46 << 32)) >> 32;
    *(void *)(a6 + 24) = v53;
    *(void *)(a6 + 32) = v52;
    *(void *)(a6 + 40) = v51;
    *(void *)(a6 + 48) = v50;
    *(void *)(a6 + 56) = v28;
    *(void *)(a6 + 64) = v37;
    *(void *)(a6 + 72) = v38;
    *(void *)(a6 + 80) = v39;
  }
  return result;
}

uint64_t thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

id thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?)(uint64_t a1, void *a2)
{
  void (*v2)(void *__return_ptr);
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void v12[3];
  uint64_t v13;
  uint64_t vars8;

  v2 = *(void (**)(void *__return_ptr))(a1 + 32);
  id v3 = a2;
  v2(v12);

  v4 = v13;
  if (v13)
  {
    long long v5 = __swift_project_boxed_opaque_existential_1(v12, v13);
    long long v6 = *(void *)(v4 - 8);
    long long v7 = MEMORY[0x1F4188790](v5);
    long long v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v6 + 16))(v9, v7);
    long long v10 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    long long v10 = 0;
  }

  return v10;
}

uint64_t closure #10 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)&long long v22 = *a3;
  swift_retain();
  Range<>.init(_:in:)(a1, a2, &v22, (uint64_t *)&v16);
  uint64_t v6 = v18;
  if (v18 == 2) {
    return 0;
  }
  uint64_t v9 = v20;
  uint64_t v8 = v21;
  uint64_t v10 = v17;
  long long v13 = v16;
  long long v14 = v19;
  long long v11 = (_OWORD *)*a3;
  long long v12 = v11[2];
  long long v28 = v11[1];
  long long v29 = v12;
  long long v30 = v11[3];
  swift_retain();
  BigString.unicodeScalars.getter();
  swift_release();
  long long v22 = v13;
  uint64_t v23 = v10;
  uint64_t v24 = v6;
  long long v25 = v14;
  uint64_t v26 = v9;
  uint64_t v27 = v8;
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v15);
  return MEMORY[0x185302030](&v16);
}

uint64_t thunk for @callee_guaranteed (@unowned _NSRange) -> (@owned String)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

id thunk for @escaping @callee_guaranteed (@unowned _NSRange) -> (@owned String)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3);
  id v3 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();

  return v3;
}

void closure #11 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a3;
  *(void *)(v10 + 24) = a4;
  v12[4] = partial apply for closure #1 in closure #11 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  v12[5] = v10;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1107296256;
  v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  _OWORD v12[3] = &block_descriptor_99;
  long long v11 = _Block_copy(v12);
  swift_retain();
  swift_release();
  objc_msgSend(a5, sel_enumerateSubstringsInRange_options_usingBlock_, a1, a2, 3, v11);
  _Block_release(v11);
}

uint64_t thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(a1, a2, a3, a4, (uint64_t)&unk_1ECA5B730, (uint64_t)partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ());
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  v9(a2, a3, a6, v11);

  return swift_release();
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2) {
    a2 = String._bridgeToObjectiveCImpl()();
  }
  id v7 = (id)a2;
  (*(void (**)(uint64_t))(a6 + 16))(a6);
}

uint64_t closure #12 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5)
{
  uint64_t v6 = (uint64_t)a4;
  v172 = (long long *)*a4;
  swift_retain();
  uint64_t result = Range<>.init(_:in:)(a1, a2, &v172, (uint64_t *)&v143);
  uint64_t v11 = *((void *)&v144 + 1);
  if (*((void *)&v144 + 1) == 2) {
    return result;
  }
  long long v12 = &v143;
  uint64_t v13 = v144;
  unint64_t v132 = *((void *)&v143 + 1);
  uint64_t v134 = v143;
  v169[0] = v143;
  v169[1] = v144;
  uint64_t v125 = v145;
  uint64_t v126 = v146;
  uint64_t v129 = *((void *)&v145 + 1);
  v169[2] = v145;
  uint64_t v170 = v146;
  uint64_t v127 = v147;
  uint64_t v171 = v147;
  outlined init with copy of Any(a3, (uint64_t)&v143);
  uint64_t v123 = a1;
  uint64_t v124 = a2;
  uint64_t v122 = a5;
  v128 = (void *)v6;
  *(void *)&long long v131 = v13;
  *((void *)&v131 + 1) = v11;
  if (swift_dynamicCast())
  {
    uint64_t v118 = (uint64_t)v172;
    unint64_t v119 = v173;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      long long v14 = *(void **)v6;
      long long v15 = *(_OWORD *)(*(void *)v6 + 16);
      long long v16 = *(_OWORD *)(*(void *)v6 + 48);
      long long v189 = *(_OWORD *)(*(void *)v6 + 32);
      long long v190 = v16;
      long long v188 = v15;
      uint64_t v17 = v14[8];
      uint64_t v18 = v14[9];
      uint64_t v19 = v14[10];
      uint64_t v20 = v14[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v188);
      swift_unknownObjectRetain();
      *(void *)uint64_t v6 = AttributedString.Guts.init(string:runs:)(&v188, v17, v18, v19, v20);
      swift_release();
    }
    uint64_t v21 = *(void *)v6;
    long long v22 = *(_OWORD *)(*(void *)v6 + 16);
    long long v23 = *(_OWORD *)(*(void *)v6 + 48);
    long long v185 = *(_OWORD *)(*(void *)v6 + 32);
    long long v186 = v23;
    long long v184 = v22;
    swift_retain_n();
    outlined retain of Locale((uint64_t)&v184);
    uint64_t v24 = BigString.startIndex.getter();
    uint64_t v26 = v25;
    uint64_t v28 = v27;
    uint64_t v30 = v29;
    outlined release of Locale((uint64_t)&v184);
    long long v31 = *(_OWORD *)(v21 + 16);
    long long v32 = *(_OWORD *)(v21 + 48);
    long long v181 = *(_OWORD *)(v21 + 32);
    long long v182 = v32;
    long long v180 = v31;
    long long v33 = *(_OWORD *)(v21 + 16);
    long long v34 = *(_OWORD *)(v21 + 32);
    long long v196 = v32;
    long long v194 = v33;
    long long v195 = v34;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v194, (uint64_t)v150);
    outlined retain of Locale((uint64_t)v150);
    uint64_t v35 = BigString.endIndex.getter();
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    uint64_t v41 = v40;
    outlined release of Locale((uint64_t)&v180);
    swift_release();
    *(void *)&long long v143 = v21;
    *((void *)&v143 + 1) = v24;
    *(void *)&long long v144 = v26;
    *((void *)&v144 + 1) = v28;
    *(void *)&long long v145 = v30;
    *((void *)&v145 + 1) = v35;
    uint64_t v146 = v37;
    uint64_t v147 = v39;
    uint64_t v148 = v41;
    if (one-time initialization token for currentIdentity != -1) {
      swift_once();
    }
    uint64_t v42 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    uint64_t v43 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v43);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v42, (uint64_t *)&v172);
    os_unfair_lock_unlock(v43);
    swift_release();
    long long v12 = v172;
    uint64_t v149 = (uint64_t)v172;
    BigString.init()();
    v172 = 0;
    MEMORY[0x185309530](&v172, 8);
    uint64_t v44 = (uint64_t)v172;
    type metadata accessor for AttributedString.Guts();
    uint64_t v6 = swift_allocObject();
    if (BigString.isEmpty.getter())
    {
      long long v45 = v155;
      *(_OWORD *)(v6 + 16) = v154;
      *(_OWORD *)(v6 + 32) = v45;
      *(_OWORD *)(v6 + 48) = v156;
      *(void *)(v6 + 64) = 0;
      *(void *)(v6 + 72) = 0;
      *(void *)(v6 + 80) = 0;
      *(void *)(v6 + 88) = v44;
      void *v128 = v6;
      swift_release();
      if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
      {
        if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
        {
          uint64_t v120 = v12;
          long long v46 = *(_OWORD *)(v21 + 16);
          long long v47 = *(_OWORD *)(v21 + 48);
          v168[1] = *(_OWORD *)(v21 + 32);
          v168[2] = v47;
          v168[0] = v46;
          long long v48 = *(_OWORD *)(v21 + 16);
          long long v137 = *(_OWORD *)(v21 + 32);
          long long v138 = v47;
          long long v136 = v48;
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v136, (uint64_t)v152);
          outlined retain of Locale((uint64_t)v152);
          uint64_t v49 = MEMORY[0x185301530](v134, v132, v131, *((void *)&v131 + 1));
          unint64_t v133 = v50;
          uint64_t v135 = v49;
          uint64_t v52 = v51;
          uint64_t v54 = v53;
          outlined release of Locale((uint64_t)v168);
          long long v55 = *(_OWORD *)(v21 + 16);
          long long v56 = *(_OWORD *)(v21 + 48);
          long long v166 = *(_OWORD *)(v21 + 32);
          long long v167 = v56;
          long long v165 = v55;
          long long v57 = *(_OWORD *)(v21 + 16);
          long long v161 = *(_OWORD *)(v21 + 32);
          long long v162 = v56;
          long long v160 = v57;
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v160, (uint64_t)v153);
          outlined retain of Locale((uint64_t)v153);
          uint64_t v58 = MEMORY[0x185301530](v125, v129, v126, v127);
          uint64_t v60 = v59;
          uint64_t v62 = v61;
          uint64_t v64 = v63;
          outlined release of Locale((uint64_t)&v165);
          v172 = (long long *)v135;
          unint64_t v173 = v133;
          uint64_t v174 = v52;
          uint64_t v175 = v54;
          uint64_t v176 = v58;
          uint64_t v177 = v60;
          uint64_t v178 = v62;
          uint64_t v179 = v64;
          v193[0] = v118;
          v193[1] = v119;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            long long v65 = *(_OWORD *)(v21 + 32);
            long long v157 = *(_OWORD *)(v21 + 16);
            long long v158 = v65;
            long long v159 = *(_OWORD *)(v21 + 48);
            uint64_t v66 = *(void *)(v21 + 64);
            uint64_t v67 = *(void *)(v21 + 72);
            uint64_t v68 = *(void *)(v21 + 80);
            uint64_t v69 = *(void *)(v21 + 88);
            swift_allocObject();
            outlined retain of Locale((uint64_t)&v157);
            swift_unknownObjectRetain();
            *(void *)&long long v143 = AttributedString.Guts.init(string:runs:)(&v157, v66, v67, v68, v69);
            swift_release();
          }
          v192[0] = 1;
          uint64_t v70 = AttributedString.Guts.attributesToUseForTextReplacement(in:)();
          uint64_t v72 = v71;
          MEMORY[0x1F4188790](v70);
          AttributedString.CharacterView._mutateStringContents(in:attributes:with:)((uint64_t)&v172, v70, v72, (void (*)(_OWORD *, uint64_t))closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:)specialized partial apply);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((long long *)v149 == v120)
          {
            void *v128 = v143;
            swift_release();
            uint64_t v73 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            objc_msgSend(v122, sel_replaceCharactersInRange_withString_, v123, v124, v73);
            return swift_unknownObjectRelease();
          }
          goto LABEL_34;
        }
        goto LABEL_28;
      }
      goto LABEL_26;
    }
    __break(1u);
  }
  else
  {
    outlined init with copy of Any(a3, (uint64_t)&v143);
    if ((swift_dynamicCast() & 1) == 0)
    {
      outlined init with copy of Any(a3, (uint64_t)&v143);
      v172 = 0;
      unint64_t v173 = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      v172 = (long long *)0xD00000000000001DLL;
      unint64_t v173 = 0x80000001823B3E80;
      __swift_project_boxed_opaque_existential_1(&v143, *((uint64_t *)&v144 + 1));
      swift_getDynamicType();
      v117._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v117);
      swift_bridgeObjectRelease();
LABEL_34:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    uint64_t v21 = (uint64_t)v172;
    v172 = (long long *)v134;
    unint64_t v173 = v132;
    uint64_t v174 = v13;
    uint64_t v175 = v11;
    uint64_t v176 = v125;
    uint64_t v177 = v129;
    uint64_t v178 = v126;
    uint64_t v179 = v127;
    swift_retain();
    uint64_t v74 = AttributedString.Guts.getUniformValues(in:)();
    uint64_t v76 = v75;
    swift_release();
    uint64_t v141 = v74;
    uint64_t v142 = v76;
    if (one-time initialization token for name == -1) {
      goto LABEL_16;
    }
  }
  swift_once();
LABEL_16:
  unint64_t v77 = static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name;
  unint64_t v78 = qword_1E8ED5EE0;
  uint64_t v148 = 0;
  _OWORD v12[3] = 0u;
  long long v144 = 0u;
  long long v145 = 0u;
  long long v143 = 0u;
  swift_bridgeObjectRetain();
  specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v143, v77, v78);
  swift_bridgeObjectRelease();
  specialized AttributedString.replaceSubrange<A, B>(_:with:)(v169, v21);
  uint64_t v79 = *(_OWORD **)v6;
  long long v80 = *(_OWORD *)(v21 + 16);
  long long v81 = *(_OWORD *)(v21 + 48);
  v12[30] = *(_OWORD *)(v21 + 32);
  v12[31] = v81;
  v12[29] = v80;
  swift_retain();
  swift_retain();
  outlined retain of Locale((uint64_t)v168);
  uint64_t v130 = BigString.startIndex.getter();
  uint64_t v83 = v82;
  uint64_t v85 = v84;
  uint64_t v87 = v86;
  outlined release of Locale((uint64_t)v168);
  long long v88 = *(_OWORD *)(v21 + 16);
  long long v89 = *(_OWORD *)(v21 + 48);
  long long v166 = *(_OWORD *)(v21 + 32);
  long long v167 = v89;
  long long v165 = v88;
  long long v90 = *(_OWORD *)(v21 + 16);
  long long v181 = *(_OWORD *)(v21 + 32);
  long long v182 = v89;
  long long v180 = v90;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v180, (uint64_t)v183);
  outlined retain of Locale((uint64_t)v183);
  uint64_t v91 = BigString.endIndex.getter();
  uint64_t v93 = v92;
  uint64_t v95 = v94;
  uint64_t v97 = v96;
  outlined release of Locale((uint64_t)&v165);
  *(void *)&long long v160 = v130;
  *((void *)&v160 + 1) = v83;
  *(void *)&long long v161 = v85;
  *((void *)&v161 + 1) = v87;
  *(void *)&long long v162 = v91;
  *((void *)&v162 + 1) = v93;
  uint64_t v163 = v95;
  uint64_t v164 = v97;
  long long v98 = *(_OWORD *)(v21 + 32);
  long long v157 = *(_OWORD *)(v21 + 16);
  long long v158 = v98;
  long long v159 = *(_OWORD *)(v21 + 48);
  long long v185 = v98;
  long long v186 = v159;
  long long v184 = v157;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v184, (uint64_t)v187);
  outlined retain of Locale((uint64_t)v187);
  BigSubstring.init(_unchecked:in:)();
  BigSubstring.count.getter();
  outlined release of Locale((uint64_t)&v143);
  long long v121 = (_OWORD *)v21;
  swift_release();
  long long v99 = v79[2];
  long long v154 = v79[1];
  long long v155 = v99;
  long long v156 = v79[3];
  swift_retain();
  outlined retain of Locale((uint64_t)&v154);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)&v154);
  long long v100 = v79[1];
  long long v101 = v79[3];
  v153[1] = v79[2];
  v153[2] = v101;
  v153[0] = v100;
  long long v102 = v79[1];
  long long v189 = v79[2];
  long long v190 = v101;
  long long v188 = v102;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v188, (uint64_t)v191);
  outlined retain of Locale((uint64_t)v191);
  BigString.endIndex.getter();
  outlined release of Locale((uint64_t)v153);
  if (static BigString.Index.< infix(_:_:)())
  {
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (static BigString.Index.< infix(_:_:)())
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  long long v103 = v79[1];
  long long v104 = v79[3];
  v152[1] = v79[2];
  v152[2] = v104;
  v152[0] = v103;
  long long v105 = v79[1];
  long long v106 = v79[2];
  long long v196 = v104;
  long long v194 = v105;
  long long v195 = v106;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v194, (uint64_t)v192);
  outlined retain of Locale((uint64_t)v192);
  uint64_t v107 = BigString.index(_:offsetBy:)();
  uint64_t v109 = v108;
  uint64_t v111 = v110;
  uint64_t v113 = v112;
  outlined release of Locale((uint64_t)v152);
  if (static BigString.Index.< infix(_:_:)())
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  char v114 = static BigString.Index.< infix(_:_:)();
  swift_release_n();
  if (v114)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (static BigString.Index.< infix(_:_:)())
  {
LABEL_31:
    __break(1u);
    goto LABEL_34;
  }
  *(void *)&long long v136 = v134;
  *((void *)&v136 + 1) = v132;
  long long v137 = v131;
  *(void *)&long long v138 = v107;
  *((void *)&v138 + 1) = v109;
  uint64_t v139 = v111;
  uint64_t v140 = v113;
  specialized AttributedString._addAttributesNotPresentMergingInlinePresentationIntents(_:to:)(v141, &v136);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v115 = v121[2];
  v150[0] = v121[1];
  v150[1] = v115;
  long long v151 = v121[3];
  long long v137 = v115;
  long long v138 = v151;
  long long v136 = v150[0];
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v136, (uint64_t)v193);
  outlined retain of Locale((uint64_t)v193);
  MEMORY[0x185302050](v150);
  uint64_t v116 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  objc_msgSend(v122, sel_replaceCharactersInRange_withString_, v123, v124, v116);
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t thunk for @callee_guaranteed (@unowned _NSRange, @in_guaranteed Any) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned _NSRange, @in_guaranteed Any) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  v9[3] = swift_getObjectType();
  v9[0] = a4;
  swift_unknownObjectRetain();
  v7(a2, a3, v9);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed NSAttributedStringKey, @in_guaranteed Any) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, id, void *))(a1 + 32);
  _OWORD v12[3] = swift_getObjectType();
  v12[0] = a5;
  id v10 = a4;
  swift_unknownObjectRetain();
  v9(a2, a3, v10, v12);

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

double closure #14 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  outlined init with copy of Any(a1, (uint64_t)v8);
  if (swift_dynamicCast())
  {
    uint64_t v6 = v7;
    uint64_t v7 = a2;
    *(void *)(a3 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString?);
    swift_retain();
    AttributedString.formatInflectionAlternative(_:replacements:)((uint64_t)&v6);
    swift_release();
    swift_release();
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t AttributedString.formatInflectionAlternative(_:replacements:)(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  v750 = v2;
  v4 = *(_OWORD **)v3;
  uint64_t v752 = v5;
  uint64_t v753 = *v1;
  long long v6 = *(_OWORD *)(*(void *)v3 + 16);
  long long v7 = *(_OWORD *)(*(void *)v3 + 32);
  v1180[2] = *(_OWORD *)(*(void *)v3 + 48);
  v1180[1] = v7;
  v1180[0] = v6;
  swift_retain();
  outlined retain of Locale((uint64_t)v1180);
  uint64_t v8 = BigString.startIndex.getter();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  outlined release of Locale((uint64_t)v1180);
  uint64_t v805 = v8;
  if ((static BigString.Index.== infix(_:_:)() & 1) == 0) {
    goto LABEL_181;
  }
  if (v752 < 0) {
    uint64_t v15 = v752;
  }
  else {
    uint64_t v15 = v752 & 0xFFFFFFFFFFFFFF8;
  }
  unint64_t v749 = v752 & 0xC000000000000001;
  uint64_t v747 = v15;
  uint64_t v748 = v752 + 32;
  v751 = (long long *)(v753 + 16);
  while (1)
  {
    long long v16 = v4[2];
    v1179[0] = v4[1];
    v1179[1] = v16;
    v1179[2] = v4[3];
    swift_retain();
    outlined retain of Locale((uint64_t)v1179);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v1179);
    long long v17 = v4[1];
    v1177[1] = v4[2];
    long long v1178 = v4[3];
    v1177[0] = v17;
    long long v18 = v4[1];
    long long v19 = v4[2];
    v1181[2] = v1178;
    v1181[1] = v19;
    v1181[0] = v18;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1181, (uint64_t)v1182);
    outlined retain of Locale((uint64_t)v1182);
    uint64_t v20 = BigString.endIndex.getter();
    uint64_t v22 = v21;
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    outlined release of Locale((uint64_t)v1177);
    uint64_t v27 = v12;
    uint64_t v28 = v10;
    char v29 = static BigString.Index.< infix(_:_:)();
    swift_release();
    if (v29) {
      goto LABEL_182;
    }
    uint64_t v1166 = v805;
    uint64_t v1167 = v28;
    uint64_t v1168 = v27;
    uint64_t v1169 = v14;
    uint64_t v1170 = v20;
    uint64_t v1171 = v22;
    uint64_t v1172 = v24;
    uint64_t v1173 = v26;
    long long v30 = v4[1];
    long long v31 = v4[2];
    long long v1176 = v4[3];
    long long v1175 = v31;
    long long v1174 = v30;
    swift_retain_n();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)&v863);
    uint64_t v32 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v34 = v33;
    uint64_t v36 = v35;
    uint64_t v38 = v37;
    uint64_t v39 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v806 = v40;
    uint64_t v42 = v41;
    uint64_t v44 = v43;
    outlined release of Locale((uint64_t)&v864);
    swift_release();
    uint64_t v1157 = v32;
    uint64_t v1158 = v34;
    uint64_t v1159 = v36;
    uint64_t v1160 = v38;
    uint64_t v1161 = v39;
    uint64_t v1162 = v806;
    uint64_t v1163 = v42;
    uint64_t v1164 = v44;
    long long v45 = v4[1];
    v1165[1] = v4[2];
    v807 = v4 + 1;
    v1165[2] = v4[3];
    v1165[0] = v45;
    swift_retain_n();
    outlined retain of Locale((uint64_t)v1165);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v1165);
    uint64_t v46 = BigSubstring.startIndex.getter();
    uint64_t v48 = v47;
    uint64_t v50 = v49;
    uint64_t v784 = v51;
    uint64_t v52 = BigSubstring.endIndex.getter();
    uint64_t v54 = v53;
    uint64_t v56 = v55;
    uint64_t v58 = v57;
    outlined release of Locale((uint64_t)&v865);
    swift_release();
    v815 = v4;
    uint64_t v838 = (uint64_t)v4;
    unint64_t v839 = v46;
    uint64_t v840 = v48;
    uint64_t v841 = v50;
    uint64_t v842 = v784;
    uint64_t v843 = v52;
    uint64_t v844 = v54;
    uint64_t v845 = v56;
    v846 = v58;
    uint64_t v847 = 0;
    lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
    unint64_t v59 = Substring.init<A>(_:)();
    unint64_t v61 = v60;
    uint64_t v63 = v62;
    uint64_t v65 = v64;
    uint64_t v838 = 123;
    unint64_t v839 = 0xE100000000000000;
    unint64_t v66 = Substring.init<A>(_:)();
    if ((v59 ^ v61) < 0x4000 || !((v66 ^ v67) >> 14))
    {
      v487 = v815;
      swift_release();
      swift_bridgeObjectRelease();
LABEL_123:
      swift_bridgeObjectRelease();
      long long v488 = v807[1];
      v987[0] = *v807;
      v987[1] = v488;
      v987[2] = v807[2];
      swift_retain();
      outlined retain of Locale((uint64_t)v987);
      uint64_t v489 = BigString.startIndex.getter();
      uint64_t v491 = v490;
      uint64_t v493 = v492;
      uint64_t v495 = v494;
      outlined release of Locale((uint64_t)v987);
      swift_release();
      while (1)
      {
        if ((static BigString.Index.== infix(_:_:)() & 1) == 0) {
          goto LABEL_183;
        }
        long long v496 = v487[2];
        v986[0] = v487[1];
        v986[1] = v496;
        v986[2] = v487[3];
        swift_retain();
        outlined retain of Locale((uint64_t)v986);
        BigString.startIndex.getter();
        outlined release of Locale((uint64_t)v986);
        long long v497 = v487[1];
        v984[1] = v487[2];
        long long v985 = v487[3];
        v984[0] = v497;
        long long v498 = v487[1];
        long long v499 = v487[2];
        v1241[2] = v985;
        v1241[1] = v499;
        v1241[0] = v498;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v1241, (uint64_t)v1242);
        outlined retain of Locale((uint64_t)v1242);
        uint64_t v500 = BigString.endIndex.getter();
        uint64_t v502 = v501;
        v818 = v487;
        uint64_t v504 = v503;
        uint64_t v506 = v505;
        outlined release of Locale((uint64_t)v984);
        char v810 = static BigString.Index.< infix(_:_:)();
        swift_release();
        if (v810) {
          goto LABEL_184;
        }
        uint64_t v783 = v493;
        uint64_t v787 = v489;
        uint64_t v973 = v489;
        uint64_t v773 = v495;
        uint64_t v780 = v491;
        uint64_t v974 = v491;
        uint64_t v975 = v493;
        uint64_t v976 = v495;
        uint64_t v977 = v500;
        uint64_t v978 = v502;
        uint64_t v979 = v504;
        uint64_t v980 = v506;
        long long v507 = v487[1];
        long long v508 = v487[2];
        long long v983 = v487[3];
        long long v982 = v508;
        long long v981 = v507;
        swift_retain_n();
        BigString.unicodeScalars.getter();
        BigString.UnicodeScalarView.subscript.getter();
        outlined release of Locale((uint64_t)&v882);
        uint64_t v509 = BigSubstring.UnicodeScalarView.startIndex.getter();
        uint64_t v511 = v510;
        uint64_t v513 = v512;
        uint64_t v515 = v514;
        uint64_t v516 = BigSubstring.UnicodeScalarView.endIndex.getter();
        uint64_t v790 = v517;
        uint64_t v519 = v518;
        uint64_t v521 = v520;
        outlined release of Locale((uint64_t)v883);
        swift_release();
        uint64_t v964 = v509;
        uint64_t v965 = v511;
        uint64_t v966 = v513;
        uint64_t v967 = v515;
        uint64_t v968 = v516;
        uint64_t v969 = v790;
        uint64_t v970 = v519;
        uint64_t v971 = v521;
        long long v522 = v818[1];
        v972[1] = v818[2];
        v791 = v818 + 1;
        v972[2] = v818[3];
        v972[0] = v522;
        swift_retain_n();
        outlined retain of Locale((uint64_t)v972);
        BigString.subscript.getter();
        outlined release of Locale((uint64_t)v972);
        uint64_t v523 = BigSubstring.startIndex.getter();
        uint64_t v525 = v524;
        uint64_t v527 = v526;
        uint64_t v529 = v528;
        uint64_t v530 = BigSubstring.endIndex.getter();
        uint64_t v532 = v531;
        uint64_t v534 = v533;
        v536 = v535;
        outlined release of Locale((uint64_t)v884);
        swift_release();
        uint64_t v838 = (uint64_t)v818;
        unint64_t v839 = v523;
        uint64_t v840 = v525;
        uint64_t v841 = v527;
        uint64_t v842 = v529;
        uint64_t v843 = v530;
        uint64_t v844 = v532;
        uint64_t v845 = v534;
        v846 = v536;
        uint64_t v847 = 0;
        unint64_t v537 = Substring.init<A>(_:)();
        unint64_t v539 = v538;
        uint64_t v541 = v540;
        uint64_t v543 = v542;
        uint64_t v838 = 32125;
        unint64_t v839 = 0xE200000000000000;
        unint64_t v544 = Substring.init<A>(_:)();
        if (!((v537 ^ v539) >> 14))
        {
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v548 = v787;
          goto LABEL_156;
        }
        uint64_t v548 = v787;
        if (!((v544 ^ v545) >> 14))
        {
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_156;
        }
        specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v544, v545, v546, v547, 0, 0, 0, 0, 0, v537, v539, v541, v543);
        char v550 = v549;
        swift_bridgeObjectRelease();
        if (v550) {
          break;
        }
        swift_bridgeObjectRetain();
        uint64_t v551 = Substring.UTF8View.distance(from:to:)();
        swift_bridgeObjectRelease();
        uint64_t v552 = Substring.UTF8View.distance(from:to:)();
        swift_bridgeObjectRelease();
        if (__OFADD__(BigString.Index.utf8Offset.getter(), v551)) {
          goto LABEL_190;
        }
        long long v553 = v818[2];
        v963[0] = *v791;
        v963[1] = v553;
        v963[2] = v818[3];
        swift_retain();
        outlined retain of Locale((uint64_t)v963);
        BigString.utf8.getter();
        outlined release of Locale((uint64_t)v963);
        long long v554 = *v791;
        v961[1] = v818[2];
        long long v962 = v818[3];
        v961[0] = v554;
        long long v555 = *v791;
        long long v556 = v818[2];
        v1243[2] = v962;
        v1243[1] = v556;
        v1243[0] = v555;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v1243, (uint64_t)v1244);
        outlined retain of Locale((uint64_t)v1244);
        BigString.startIndex.getter();
        outlined release of Locale((uint64_t)v961);
        uint64_t v557 = BigString.UTF8View.index(_:offsetBy:)();
        uint64_t v559 = v558;
        uint64_t v561 = v560;
        uint64_t v563 = v562;
        outlined release of Locale((uint64_t)&v890);
        swift_release();
        if (__OFADD__(BigString.Index.utf8Offset.getter(), v552)) {
          goto LABEL_191;
        }
        long long v564 = v818[2];
        v960[0] = *v791;
        v960[1] = v564;
        v960[2] = v818[3];
        swift_retain();
        outlined retain of Locale((uint64_t)v960);
        uint64_t v794 = v557;
        BigString.utf8.getter();
        outlined release of Locale((uint64_t)v960);
        long long v565 = *v791;
        v958[1] = v818[2];
        long long v959 = v818[3];
        v958[0] = v565;
        long long v566 = *v791;
        long long v567 = v818[2];
        v1245[2] = v959;
        v1245[1] = v567;
        v1245[0] = v566;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v1245, (uint64_t)v1246);
        outlined retain of Locale((uint64_t)v1246);
        BigString.startIndex.getter();
        uint64_t v803 = v561;
        uint64_t v811 = v559;
        uint64_t v797 = v563;
        outlined release of Locale((uint64_t)v958);
        uint64_t v568 = BigString.UTF8View.index(_:offsetBy:)();
        uint64_t v570 = v569;
        uint64_t v572 = v571;
        uint64_t v574 = v573;
        outlined release of Locale((uint64_t)&v891);
        swift_release();
        char v575 = static BigString.Index.< infix(_:_:)();
        swift_release();
        if (v575) {
          goto LABEL_192;
        }
        uint64_t v761 = v572;
        uint64_t v763 = v570;
        uint64_t v766 = v568;
        uint64_t v757 = v574;
        long long v576 = v818[2];
        v957[0] = *v791;
        v957[1] = v576;
        v957[2] = v818[3];
        swift_retain();
        outlined retain of Locale((uint64_t)v957);
        uint64_t v788 = BigString.startIndex.getter();
        uint64_t v578 = v577;
        uint64_t v580 = v579;
        uint64_t v582 = v581;
        outlined release of Locale((uint64_t)v957);
        long long v583 = *v791;
        v955[1] = v818[2];
        long long v956 = v818[3];
        v955[0] = v583;
        long long v584 = *v791;
        long long v585 = v818[2];
        v1247[2] = v956;
        v1247[1] = v585;
        v1247[0] = v584;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v1247, (uint64_t)v1248);
        outlined retain of Locale((uint64_t)v1248);
        uint64_t v586 = BigString.endIndex.getter();
        uint64_t v588 = v587;
        uint64_t v590 = v589;
        uint64_t v592 = v591;
        outlined release of Locale((uint64_t)v955);
        uint64_t v946 = v788;
        uint64_t v947 = v578;
        uint64_t v948 = v580;
        uint64_t v949 = v582;
        uint64_t v950 = v586;
        uint64_t v951 = v588;
        uint64_t v952 = v590;
        uint64_t v953 = v592;
        long long v593 = *v791;
        long long v594 = v818[2];
        v954[2] = v818[3];
        v954[1] = v594;
        v954[0] = v593;
        swift_retain();
        outlined retain of Locale((uint64_t)v954);
        BigString.startIndex.getter();
        outlined release of Locale((uint64_t)v954);
        swift_release();
        if (static BigString.Index.< infix(_:_:)()) {
          goto LABEL_193;
        }
        if (static BigString.Index.< infix(_:_:)()) {
          goto LABEL_194;
        }
        if (static BigString.Index.< infix(_:_:)()) {
          goto LABEL_195;
        }
        if (static BigString.Index.< infix(_:_:)()) {
          goto LABEL_196;
        }
        long long v595 = *v791;
        v944[4] = v818[2];
        long long v945 = v818[3];
        v944[3] = v595;
        long long v596 = *v791;
        long long v597 = v818[2];
        v1249[2] = v945;
        v1249[1] = v597;
        v1249[0] = v596;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v1249, (uint64_t)v1250);
        outlined retain of Locale((uint64_t)v1250);
        BigSubstring.init(_unchecked:in:)();
        uint64_t v781 = BigSubstring.distance(from:to:)();
        outlined release of Locale((uint64_t)v892);
        v598 = v818;
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          long long v599 = v818[2];
          v944[0] = *v791;
          v944[1] = v599;
          v944[2] = v818[3];
          uint64_t v600 = *((void *)v818 + 8);
          uint64_t v601 = *((void *)v818 + 9);
          uint64_t v602 = *((void *)v818 + 10);
          uint64_t v603 = *((void *)v818 + 11);
          type metadata accessor for AttributedString.Guts();
          swift_allocObject();
          outlined retain of Locale((uint64_t)v944);
          swift_unknownObjectRetain();
          uint64_t v604 = AttributedString.Guts.init(string:runs:)(v944, v600, v601, v602, v603);
          swift_release();
          v598 = (_OWORD *)v604;
        }
        long long v605 = v598[2];
        v943[0] = v598[1];
        v943[1] = v605;
        v943[2] = v598[3];
        swift_retain_n();
        outlined retain of Locale((uint64_t)v943);
        uint64_t v606 = BigString.startIndex.getter();
        uint64_t v608 = v607;
        uint64_t v610 = v609;
        uint64_t v612 = v611;
        outlined release of Locale((uint64_t)v943);
        long long v613 = v598[1];
        v941[1] = v598[2];
        long long v942 = v598[3];
        v941[0] = v613;
        long long v614 = v598[1];
        long long v615 = v598[2];
        v1251[2] = v942;
        v1251[1] = v615;
        v1251[0] = v614;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v1251, (uint64_t)v1252);
        outlined retain of Locale((uint64_t)v1252);
        uint64_t v616 = BigString.endIndex.getter();
        uint64_t v618 = v617;
        uint64_t v620 = v619;
        v622 = v621;
        outlined release of Locale((uint64_t)v941);
        swift_release();
        uint64_t v838 = (uint64_t)v598;
        unint64_t v839 = v606;
        uint64_t v840 = v608;
        uint64_t v841 = v610;
        uint64_t v842 = v612;
        uint64_t v843 = v616;
        uint64_t v844 = v618;
        uint64_t v845 = v620;
        v846 = v622;
        if (one-time initialization token for currentIdentity != -1) {
          swift_once();
        }
        v623 = (uint64_t *)(static AttributedString.currentIdentity + 16);
        v624 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
        swift_retain();
        os_unfair_lock_lock(v624);
        closure #1 in static AttributedString._nextModifyIdentity.getter(v623, &v820);
        os_unfair_lock_unlock(v624);
        swift_release();
        uint64_t v625 = v820;
        uint64_t v847 = v820;
        BigString.init()();
        uint64_t v820 = 0;
        MEMORY[0x185309530](&v820, 8);
        uint64_t v626 = v820;
        type metadata accessor for AttributedString.Guts();
        uint64_t v627 = swift_allocObject();
        if ((BigString.isEmpty.getter() & 1) == 0) {
          goto LABEL_197;
        }
        uint64_t v774 = v625;
        long long v628 = v895;
        *(_OWORD *)(v627 + 16) = v894;
        *(_OWORD *)(v627 + 32) = v628;
        *(_OWORD *)(v627 + 48) = v896;
        *(void *)(v627 + 64) = 0;
        *(void *)(v627 + 72) = 0;
        *(void *)(v627 + 80) = 0;
        *(void *)(v627 + 88) = v626;
        swift_release();
        if (static BigString.Index.< infix(_:_:)()) {
          goto LABEL_198;
        }
        if (static BigString.Index.< infix(_:_:)()) {
          goto LABEL_199;
        }
        uint64_t v629 = v838;
        long long v630 = *(_OWORD *)(v838 + 16);
        long long v631 = *(_OWORD *)(v838 + 32);
        long long v940 = *(_OWORD *)(v838 + 48);
        v939[1] = v631;
        v939[0] = v630;
        long long v632 = *(_OWORD *)(v838 + 16);
        long long v633 = *(_OWORD *)(v838 + 32);
        v1253[2] = v940;
        v1253[1] = v633;
        v1253[0] = v632;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v1253, (uint64_t)v1254);
        outlined retain of Locale((uint64_t)v1254);
        uint64_t v634 = MEMORY[0x185301530](v794, v811, v803, v797);
        uint64_t v812 = v635;
        uint64_t v819 = v634;
        uint64_t v804 = v636;
        uint64_t v638 = v637;
        outlined release of Locale((uint64_t)v939);
        long long v639 = *(_OWORD *)(v629 + 16);
        v937[1] = *(_OWORD *)(v629 + 32);
        long long v938 = *(_OWORD *)(v629 + 48);
        v937[0] = v639;
        long long v640 = *(_OWORD *)(v629 + 16);
        long long v641 = *(_OWORD *)(v629 + 32);
        v1255[2] = v938;
        v1255[1] = v641;
        v1255[0] = v640;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v1255, (uint64_t)v1256);
        outlined retain of Locale((uint64_t)v1256);
        uint64_t v642 = MEMORY[0x185301530](v766, v763, v761, v757);
        uint64_t v644 = v643;
        uint64_t v646 = v645;
        uint64_t v648 = v647;
        outlined release of Locale((uint64_t)v937);
        v935[0] = v819;
        v935[1] = v812;
        v935[2] = v804;
        v935[3] = v638;
        v935[4] = v642;
        v935[5] = v644;
        v935[6] = v646;
        v935[7] = v648;
        uint64_t v820 = 125;
        unint64_t v821 = 0xE100000000000000;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          long long v649 = *(_OWORD *)(v629 + 32);
          v936[0] = *(_OWORD *)(v629 + 16);
          v936[1] = v649;
          v936[2] = *(_OWORD *)(v629 + 48);
          uint64_t v650 = *(void *)(v629 + 64);
          uint64_t v651 = *(void *)(v629 + 72);
          uint64_t v652 = *(void *)(v629 + 80);
          uint64_t v653 = *(void *)(v629 + 88);
          swift_allocObject();
          outlined retain of Locale((uint64_t)v936);
          swift_unknownObjectRetain();
          uint64_t v838 = AttributedString.Guts.init(string:runs:)(v936, v650, v651, v652, v653);
          swift_release();
        }
        LOBYTE(v856) = 1;
        uint64_t v654 = AttributedString.Guts.attributesToUseForTextReplacement(in:)();
        uint64_t v656 = v655;
        MEMORY[0x1F4188790](v654);
        AttributedString.CharacterView._mutateStringContents(in:attributes:with:)((uint64_t)v935, v654, v656, (void (*)(_OWORD *, uint64_t))partial apply for specialized closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v847 != v774) {
          goto LABEL_255;
        }
        v657 = (_OWORD *)v838;
        swift_release();
        long long v658 = v657[2];
        v934[0] = v657[1];
        v934[1] = v658;
        v934[2] = v657[3];
        swift_retain();
        outlined retain of Locale((uint64_t)v934);
        BigString.startIndex.getter();
        outlined release of Locale((uint64_t)v934);
        long long v659 = v657[1];
        v932[1] = v657[2];
        long long v933 = v657[3];
        v932[0] = v659;
        long long v660 = v657[1];
        long long v661 = v657[2];
        v1257[2] = v933;
        v1257[1] = v661;
        v1257[0] = v660;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v1257, (uint64_t)v1258);
        outlined retain of Locale((uint64_t)v1258);
        BigString.endIndex.getter();
        outlined release of Locale((uint64_t)v932);
        long long v662 = v657[1];
        long long v663 = v657[2];
        v931[2] = v657[3];
        v931[1] = v663;
        v931[0] = v662;
        swift_retain();
        outlined retain of Locale((uint64_t)v931);
        BigString.startIndex.getter();
        outlined release of Locale((uint64_t)v931);
        v487 = v657;
        swift_release();
        if (__OFADD__(v781, 1)) {
          goto LABEL_200;
        }
        if (static BigString.Index.< infix(_:_:)()) {
          goto LABEL_201;
        }
        if (static BigString.Index.< infix(_:_:)()) {
          goto LABEL_202;
        }
        long long v664 = v657[1];
        v929[1] = v657[2];
        long long v930 = v657[3];
        v929[0] = v664;
        long long v665 = v657[1];
        long long v666 = v657[2];
        v1259[2] = v930;
        v1259[1] = v666;
        v1259[0] = v665;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v1259, (uint64_t)v1260);
        outlined retain of Locale((uint64_t)v1260);
        uint64_t v667 = BigString.index(_:offsetBy:)();
        uint64_t v491 = v668;
        uint64_t v670 = v669;
        uint64_t v495 = v671;
        outlined release of Locale((uint64_t)v929);
        if (static BigString.Index.< infix(_:_:)()) {
          goto LABEL_203;
        }
        uint64_t v489 = v667;
        char v672 = static BigString.Index.< infix(_:_:)();
        swift_release();
        uint64_t v493 = v670;
        if (v672) {
          goto LABEL_204;
        }
      }
      swift_release();
LABEL_156:
      swift_bridgeObjectRelease();
      if ((static BigString.Index.== infix(_:_:)() & 1) == 0) {
        goto LABEL_249;
      }
      long long v673 = v818[2];
      v928[0] = *v791;
      v928[1] = v673;
      v928[2] = v818[3];
      swift_retain();
      outlined retain of Locale((uint64_t)v928);
      BigString.startIndex.getter();
      outlined release of Locale((uint64_t)v928);
      long long v674 = *v791;
      v926[1] = v818[2];
      long long v927 = v818[3];
      v926[0] = v674;
      long long v675 = *v791;
      long long v676 = v818[2];
      v1261[2] = v927;
      v1261[1] = v676;
      v1261[0] = v675;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v1261, (uint64_t)v1262);
      outlined retain of Locale((uint64_t)v1262);
      uint64_t v677 = BigString.endIndex.getter();
      uint64_t v679 = v678;
      uint64_t v681 = v680;
      uint64_t v683 = v682;
      outlined release of Locale((uint64_t)v926);
      char v684 = static BigString.Index.< infix(_:_:)();
      swift_release();
      if (v684) {
        goto LABEL_250;
      }
      uint64_t v915 = v548;
      uint64_t v916 = v780;
      uint64_t v917 = v783;
      uint64_t v918 = v773;
      uint64_t v919 = v677;
      uint64_t v920 = v679;
      uint64_t v921 = v681;
      uint64_t v922 = v683;
      long long v685 = *v791;
      long long v686 = v818[2];
      long long v925 = v818[3];
      long long v924 = v686;
      long long v923 = v685;
      swift_retain_n();
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)&v897);
      uint64_t v687 = BigSubstring.UnicodeScalarView.startIndex.getter();
      uint64_t v689 = v688;
      uint64_t v691 = v690;
      uint64_t v693 = v692;
      uint64_t v694 = BigSubstring.UnicodeScalarView.endIndex.getter();
      uint64_t v813 = v695;
      uint64_t v697 = v696;
      uint64_t v699 = v698;
      outlined release of Locale((uint64_t)&v820);
      swift_release();
      uint64_t v906 = v687;
      uint64_t v907 = v689;
      uint64_t v908 = v691;
      uint64_t v909 = v693;
      uint64_t v910 = v694;
      uint64_t v911 = v813;
      uint64_t v912 = v697;
      uint64_t v913 = v699;
      long long v700 = *v791;
      v914[1] = v818[2];
      v914[2] = v818[3];
      v914[0] = v700;
      swift_retain_n();
      outlined retain of Locale((uint64_t)v914);
      BigString.subscript.getter();
      outlined release of Locale((uint64_t)v914);
      uint64_t v701 = BigSubstring.startIndex.getter();
      uint64_t v703 = v702;
      uint64_t v705 = v704;
      uint64_t v707 = v706;
      uint64_t v708 = BigSubstring.endIndex.getter();
      uint64_t v710 = v709;
      uint64_t v712 = v711;
      uint64_t v714 = v713;
      outlined release of Locale((uint64_t)&v838);
      swift_release();
      *(void *)&long long v856 = v818;
      *((void *)&v856 + 1) = v701;
      *(void *)&long long v857 = v703;
      *((void *)&v857 + 1) = v705;
      *(void *)&long long v858 = v707;
      *((void *)&v858 + 1) = v708;
      uint64_t v859 = v710;
      uint64_t v860 = v712;
      uint64_t v861 = v714;
      uint64_t v862 = 0;
      unint64_t v715 = Substring.init<A>(_:)();
      unint64_t v717 = v716;
      uint64_t v719 = v718;
      uint64_t v721 = v720;
      *(void *)&long long v856 = 125;
      *((void *)&v856 + 1) = 0xE100000000000000;
      unint64_t v722 = Substring.init<A>(_:)();
      if ((v715 ^ v717) >= 0x4000 && (v722 ^ v723) >> 14)
      {
        specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v722, v723, v724, v725, 0, 0, 0, 0, 0, v715, v717, v719, v721);
        char v729 = v728;
        swift_bridgeObjectRelease();
        if ((v729 & 1) == 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v730 = Substring.UTF8View.distance(from:to:)();
          swift_bridgeObjectRelease();
          uint64_t v814 = Substring.UTF8View.distance(from:to:)();
          swift_bridgeObjectRelease();
          if (__OFADD__(BigString.Index.utf8Offset.getter(), v730)) {
            goto LABEL_252;
          }
          long long v731 = v818[2];
          v905[0] = *v791;
          v905[1] = v731;
          v905[2] = v818[3];
          swift_retain();
          outlined retain of Locale((uint64_t)v905);
          BigString.utf8.getter();
          outlined release of Locale((uint64_t)v905);
          long long v732 = *v791;
          v903[1] = v818[2];
          long long v904 = v818[3];
          v903[0] = v732;
          long long v733 = *v791;
          long long v734 = v818[2];
          v1263[2] = v904;
          v1263[1] = v734;
          v1263[0] = v733;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v1263, (uint64_t)v1264);
          outlined retain of Locale((uint64_t)v1264);
          BigString.startIndex.getter();
          outlined release of Locale((uint64_t)v903);
          BigString.UTF8View.index(_:offsetBy:)();
          outlined release of Locale((uint64_t)&v898);
          swift_release();
          if (__OFADD__(BigString.Index.utf8Offset.getter(), v814))
          {
LABEL_253:
            __break(1u);
          }
          else
          {
            long long v735 = v818[2];
            v902[0] = *v791;
            v902[1] = v735;
            v902[2] = v818[3];
            swift_retain();
            outlined retain of Locale((uint64_t)v902);
            BigString.utf8.getter();
            outlined release of Locale((uint64_t)v902);
            long long v736 = *v791;
            v900[1] = v818[2];
            long long v901 = v818[3];
            v900[0] = v736;
            long long v737 = *v791;
            long long v857 = v818[2];
            long long v858 = v901;
            long long v856 = v737;
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v856, (uint64_t)v1265);
            outlined retain of Locale((uint64_t)v1265);
            BigString.startIndex.getter();
            outlined release of Locale((uint64_t)v900);
            BigString.UTF8View.index(_:offsetBy:)();
            outlined release of Locale((uint64_t)&v899);
            swift_release();
            char v738 = static BigString.Index.< infix(_:_:)();
            swift_release();
            if ((v738 & 1) == 0)
            {
              void *v750 = 0;
              return swift_release();
            }
          }
          __break(1u);
LABEL_255:
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        v726 = v818;
        swift_release();
      }
      else
      {
        v726 = v818;
        swift_release();
        swift_bridgeObjectRelease();
      }
      uint64_t result = swift_bridgeObjectRelease();
      void *v750 = v726;
      return result;
    }
    specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v66, v67, v68, v69, 0, 0, 0, 0, 0, v59, v61, v63, v65);
    char v71 = v70;
    swift_bridgeObjectRelease();
    if (v71)
    {
      v487 = v815;
      swift_release();
      goto LABEL_123;
    }
    swift_bridgeObjectRetain();
    uint64_t v72 = Substring.UTF8View.distance(from:to:)();
    swift_bridgeObjectRelease();
    uint64_t v73 = Substring.UTF8View.distance(from:to:)();
    swift_bridgeObjectRelease();
    if (__OFADD__(BigString.Index.utf8Offset.getter(), v72)) {
      goto LABEL_185;
    }
    long long v74 = v807[1];
    v1156[0] = *v807;
    v1156[1] = v74;
    v1156[2] = v807[2];
    swift_retain();
    outlined retain of Locale((uint64_t)v1156);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v1156);
    long long v75 = *v807;
    v1154[1] = v807[1];
    long long v1155 = v807[2];
    v1154[0] = v75;
    long long v76 = *v807;
    long long v77 = v807[1];
    v1183[2] = v1155;
    v1183[1] = v77;
    v1183[0] = v76;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1183, (uint64_t)v1184);
    outlined retain of Locale((uint64_t)v1184);
    BigString.startIndex.getter();
    uint64_t v785 = v73;
    outlined release of Locale((uint64_t)v1154);
    uint64_t v78 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v80 = v79;
    uint64_t v82 = v81;
    uint64_t v84 = v83;
    outlined release of Locale((uint64_t)&v866);
    swift_release();
    if (__OFADD__(BigString.Index.utf8Offset.getter(), v785)) {
      goto LABEL_186;
    }
    long long v85 = v807[1];
    v1153[0] = *v807;
    v1153[1] = v85;
    v1153[2] = v807[2];
    swift_retain();
    outlined retain of Locale((uint64_t)v1153);
    uint64_t v772 = v82;
    uint64_t v786 = v78;
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v1153);
    long long v86 = *v807;
    v1151[1] = v807[1];
    long long v1152 = v807[2];
    v1151[0] = v86;
    long long v87 = *v807;
    long long v88 = v807[1];
    v1185[2] = v1152;
    v1185[1] = v88;
    v1185[0] = v87;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1185, (uint64_t)v1186);
    outlined retain of Locale((uint64_t)v1186);
    BigString.startIndex.getter();
    uint64_t v789 = v84;
    outlined release of Locale((uint64_t)v1151);
    uint64_t v89 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v91 = v90;
    uint64_t v93 = v92;
    uint64_t v95 = v94;
    outlined release of Locale((uint64_t)&v867);
    swift_release();
    uint64_t v795 = v95;
    uint64_t v798 = v89;
    uint64_t v792 = v91;
    uint64_t v782 = v93;
    LOBYTE(v89) = static BigString.Index.< infix(_:_:)();
    swift_release();
    if (v89) {
      goto LABEL_187;
    }
    long long v96 = v807[1];
    v1150[0] = *v807;
    v1150[1] = v96;
    v1150[2] = v807[2];
    swift_retain();
    outlined retain of Locale((uint64_t)v1150);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)v1150);
    swift_release();
    if (static BigString.Index.== infix(_:_:)())
    {
      void *v750 = 0;
      return swift_release();
    }
    uint64_t v771 = v80;
    long long v97 = v807[1];
    v1149[0] = *v807;
    v1149[1] = v97;
    v1149[2] = v807[2];
    swift_retain();
    outlined retain of Locale((uint64_t)v1149);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v1149);
    long long v98 = *v807;
    v1147[1] = v807[1];
    long long v1148 = v807[2];
    v1147[0] = v98;
    long long v99 = *v807;
    long long v100 = v807[1];
    v1187[2] = v1148;
    v1187[1] = v100;
    v1187[0] = v99;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1187, (uint64_t)v1188);
    outlined retain of Locale((uint64_t)v1188);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)v1147);
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_188;
    }
    if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
      goto LABEL_189;
    }
    long long v101 = *v807;
    v1145[1] = v807[1];
    long long v1146 = v807[2];
    v1145[0] = v101;
    long long v102 = *v807;
    long long v103 = v807[1];
    v1189[2] = v1146;
    v1189[1] = v103;
    v1189[0] = v102;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1189, (uint64_t)v1190);
    outlined retain of Locale((uint64_t)v1190);
    uint64_t v104 = BigString.subscript.getter();
    uint64_t v106 = v105;
    outlined release of Locale((uint64_t)v1145);
    swift_release();
    if (v104 == 123 && v106 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_20:
      if (static BigString.Index.< infix(_:_:)()) {
        goto LABEL_205;
      }
      long long v108 = v807[1];
      v1018[0] = *v807;
      v1018[1] = v108;
      v1018[2] = v807[2];
      swift_retain();
      outlined retain of Locale((uint64_t)v1018);
      uint64_t v764 = BigString.startIndex.getter();
      uint64_t v775 = v109;
      uint64_t v111 = v110;
      uint64_t v113 = v112;
      outlined release of Locale((uint64_t)v1018);
      long long v114 = *v807;
      v1016[1] = v807[1];
      long long v1017 = v807[2];
      v1016[0] = v114;
      long long v115 = *v807;
      long long v116 = v807[1];
      v1225[2] = v1017;
      v1225[1] = v116;
      v1225[0] = v115;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v1225, (uint64_t)v1226);
      outlined retain of Locale((uint64_t)v1226);
      uint64_t v117 = BigString.endIndex.getter();
      uint64_t v119 = v118;
      uint64_t v121 = v120;
      uint64_t v123 = v122;
      outlined release of Locale((uint64_t)v1016);
      uint64_t v1007 = v764;
      uint64_t v1008 = v775;
      uint64_t v1009 = v111;
      uint64_t v1010 = v113;
      uint64_t v1011 = v117;
      uint64_t v1012 = v119;
      uint64_t v1013 = v121;
      uint64_t v1014 = v123;
      long long v124 = *v807;
      long long v125 = v807[1];
      v1015[2] = v807[2];
      v1015[1] = v125;
      v1015[0] = v124;
      swift_retain();
      outlined retain of Locale((uint64_t)v1015);
      BigString.startIndex.getter();
      outlined release of Locale((uint64_t)v1015);
      swift_release();
      if (static BigString.Index.< infix(_:_:)()) {
        goto LABEL_206;
      }
      if (static BigString.Index.< infix(_:_:)()) {
        goto LABEL_207;
      }
      if (static BigString.Index.< infix(_:_:)()) {
        goto LABEL_208;
      }
      if (static BigString.Index.< infix(_:_:)()) {
        goto LABEL_209;
      }
      long long v126 = *v807;
      v1005[4] = v807[1];
      long long v1006 = v807[2];
      v1005[3] = v126;
      long long v127 = *v807;
      long long v128 = v807[1];
      v1227[2] = v1006;
      v1227[1] = v128;
      v1227[0] = v127;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v1227, (uint64_t)v1228);
      outlined retain of Locale((uint64_t)v1228);
      BigSubstring.init(_unchecked:in:)();
      uint64_t v762 = BigSubstring.distance(from:to:)();
      outlined release of Locale((uint64_t)v868);
      uint64_t v129 = v815;
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        long long v130 = v807[1];
        v1005[0] = *v807;
        v1005[1] = v130;
        v1005[2] = v807[2];
        uint64_t v131 = v815[8];
        uint64_t v132 = v815[9];
        uint64_t v133 = v815[10];
        uint64_t v134 = v815[11];
        type metadata accessor for AttributedString.Guts();
        swift_allocObject();
        outlined retain of Locale((uint64_t)v1005);
        swift_unknownObjectRetain();
        uint64_t v135 = AttributedString.Guts.init(string:runs:)(v1005, v131, v132, v133, v134);
        swift_release();
        uint64_t v129 = (_OWORD *)v135;
      }
      long long v136 = v129[2];
      v1004[0] = v129[1];
      v1004[1] = v136;
      v1004[2] = v129[3];
      swift_retain_n();
      outlined retain of Locale((uint64_t)v1004);
      uint64_t v137 = BigString.startIndex.getter();
      uint64_t v139 = v138;
      uint64_t v141 = v140;
      uint64_t v143 = v142;
      outlined release of Locale((uint64_t)v1004);
      long long v144 = v129[1];
      v1002[1] = v129[2];
      long long v1003 = v129[3];
      v1002[0] = v144;
      long long v145 = v129[1];
      long long v146 = v129[2];
      v1229[2] = v1003;
      v1229[1] = v146;
      v1229[0] = v145;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v1229, (uint64_t)v1230);
      outlined retain of Locale((uint64_t)v1230);
      uint64_t v147 = BigString.endIndex.getter();
      uint64_t v149 = v148;
      uint64_t v151 = v150;
      v153 = v152;
      outlined release of Locale((uint64_t)v1002);
      swift_release();
      v816 = v129;
      uint64_t v838 = (uint64_t)v129;
      unint64_t v839 = v137;
      uint64_t v840 = v139;
      uint64_t v841 = v141;
      uint64_t v842 = v143;
      uint64_t v843 = v147;
      uint64_t v844 = v149;
      uint64_t v845 = v151;
      v846 = v153;
      if (one-time initialization token for currentIdentity != -1) {
        swift_once();
      }
      long long v154 = (uint64_t *)(static AttributedString.currentIdentity + 16);
      long long v155 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
      swift_retain();
      os_unfair_lock_lock(v155);
      closure #1 in static AttributedString._nextModifyIdentity.getter(v154, &v820);
      os_unfair_lock_unlock(v155);
      swift_release();
      uint64_t v156 = v820;
      uint64_t v847 = v820;
      BigString.init()();
      uint64_t v820 = 0;
      MEMORY[0x185309530](&v820, 8);
      uint64_t v157 = v820;
      type metadata accessor for AttributedString.Guts();
      uint64_t v158 = swift_allocObject();
      if ((BigString.isEmpty.getter() & 1) == 0) {
        goto LABEL_210;
      }
      uint64_t v758 = v156;
      long long v159 = v868[8];
      *(_OWORD *)(v158 + 16) = v868[7];
      *(_OWORD *)(v158 + 32) = v159;
      *(_OWORD *)(v158 + 48) = v868[9];
      *(void *)(v158 + 64) = 0;
      *(void *)(v158 + 72) = 0;
      *(void *)(v158 + 80) = 0;
      *(void *)(v158 + 88) = v157;
      swift_release();
      if (static BigString.Index.< infix(_:_:)()) {
        goto LABEL_211;
      }
      if (static BigString.Index.< infix(_:_:)()) {
        goto LABEL_212;
      }
      long long v160 = v816[1];
      v1000[1] = v816[2];
      long long v1001 = v816[3];
      v1000[0] = v160;
      long long v161 = v816[1];
      long long v162 = v816[2];
      v1231[2] = v1001;
      v1231[1] = v162;
      v1231[0] = v161;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v1231, (uint64_t)v1232);
      outlined retain of Locale((uint64_t)v1232);
      uint64_t v163 = BigString.index(after:)();
      uint64_t v165 = v164;
      uint64_t v167 = v166;
      uint64_t v169 = v168;
      outlined release of Locale((uint64_t)v1000);
      if (static BigString.Index.< infix(_:_:)()) {
        goto LABEL_213;
      }
      if (static BigString.Index.< infix(_:_:)()) {
        goto LABEL_214;
      }
      if (static BigString.Index.< infix(_:_:)()) {
        goto LABEL_215;
      }
      uint64_t v170 = v838;
      long long v171 = *(_OWORD *)(v838 + 16);
      long long v172 = *(_OWORD *)(v838 + 32);
      long long v999 = *(_OWORD *)(v838 + 48);
      v998[1] = v172;
      v998[0] = v171;
      long long v173 = *(_OWORD *)(v838 + 16);
      long long v174 = *(_OWORD *)(v838 + 32);
      v1233[2] = v999;
      v1233[1] = v174;
      v1233[0] = v173;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v1233, (uint64_t)v1234);
      outlined retain of Locale((uint64_t)v1234);
      uint64_t v175 = MEMORY[0x185301530](v786, v771, v772, v789);
      uint64_t v177 = v176;
      uint64_t v808 = v179;
      uint64_t v817 = v178;
      outlined release of Locale((uint64_t)v998);
      long long v180 = *(_OWORD *)(v170 + 16);
      v996[1] = *(_OWORD *)(v170 + 32);
      long long v997 = *(_OWORD *)(v170 + 48);
      v996[0] = v180;
      long long v181 = *(_OWORD *)(v170 + 16);
      long long v182 = *(_OWORD *)(v170 + 32);
      v1235[2] = v997;
      v1235[1] = v182;
      v1235[0] = v181;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v1235, (uint64_t)v1236);
      outlined retain of Locale((uint64_t)v1236);
      uint64_t v183 = MEMORY[0x185301530](v163, v165, v167, v169);
      uint64_t v185 = v184;
      uint64_t v187 = v186;
      uint64_t v189 = v188;
      outlined release of Locale((uint64_t)v996);
      v994[0] = v175;
      v994[1] = v177;
      v994[2] = v817;
      v994[3] = v808;
      v994[4] = v183;
      v994[5] = v185;
      v994[6] = v187;
      v994[7] = v189;
      uint64_t v820 = 123;
      unint64_t v821 = 0xE100000000000000;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        long long v190 = *(_OWORD *)(v170 + 32);
        v995[0] = *(_OWORD *)(v170 + 16);
        v995[1] = v190;
        v995[2] = *(_OWORD *)(v170 + 48);
        uint64_t v191 = *(void *)(v170 + 64);
        uint64_t v192 = *(void *)(v170 + 72);
        uint64_t v193 = *(void *)(v170 + 80);
        uint64_t v194 = *(void *)(v170 + 88);
        swift_allocObject();
        outlined retain of Locale((uint64_t)v995);
        swift_unknownObjectRetain();
        uint64_t v838 = AttributedString.Guts.init(string:runs:)(v995, v191, v192, v193, v194);
        swift_release();
      }
      LOBYTE(v892[0]) = 1;
      uint64_t v195 = AttributedString.Guts.attributesToUseForTextReplacement(in:)();
      uint64_t v197 = v196;
      MEMORY[0x1F4188790](v195);
      AttributedString.CharacterView._mutateStringContents(in:attributes:with:)((uint64_t)v994, v195, v197, (void (*)(_OWORD *, uint64_t))closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:)specialized partial apply);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v847 != v758) {
        goto LABEL_255;
      }
      v198 = (_OWORD *)v838;
      swift_release();
      long long v199 = v198[2];
      v993[0] = v198[1];
      v993[1] = v199;
      v993[2] = v198[3];
      swift_retain();
      outlined retain of Locale((uint64_t)v993);
      BigString.startIndex.getter();
      outlined release of Locale((uint64_t)v993);
      long long v200 = v198[1];
      v991[1] = v198[2];
      long long v992 = v198[3];
      v991[0] = v200;
      long long v201 = v198[1];
      long long v202 = v198[2];
      v1237[2] = v992;
      v1237[1] = v202;
      v1237[0] = v201;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v1237, (uint64_t)v1238);
      outlined retain of Locale((uint64_t)v1238);
      BigString.endIndex.getter();
      outlined release of Locale((uint64_t)v991);
      long long v203 = v198[1];
      long long v204 = v198[2];
      v990[2] = v198[3];
      v990[1] = v204;
      v990[0] = v203;
      swift_retain();
      outlined retain of Locale((uint64_t)v990);
      BigString.startIndex.getter();
      outlined release of Locale((uint64_t)v990);
      v4 = v198;
      swift_release();
      if (__OFADD__(v762, 1)) {
        goto LABEL_216;
      }
      if (static BigString.Index.< infix(_:_:)()) {
        goto LABEL_217;
      }
      if (static BigString.Index.< infix(_:_:)()) {
        goto LABEL_218;
      }
      long long v205 = v198[1];
      v988[1] = v198[2];
      long long v989 = v198[3];
      v988[0] = v205;
      long long v206 = v198[1];
      long long v207 = v198[2];
      v1239[2] = v989;
      v1239[1] = v207;
      v1239[0] = v206;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v1239, (uint64_t)v1240);
      outlined retain of Locale((uint64_t)v1240);
      uint64_t v208 = BigString.index(_:offsetBy:)();
      uint64_t v210 = v209;
      uint64_t v12 = v211;
      uint64_t v213 = v212;
      outlined release of Locale((uint64_t)v988);
      uint64_t v805 = v208;
      if (static BigString.Index.< infix(_:_:)()) {
        goto LABEL_219;
      }
      char v214 = static BigString.Index.< infix(_:_:)();
      swift_release();
      uint64_t v10 = v210;
      uint64_t v14 = v213;
      if (v214) {
        goto LABEL_220;
      }
      goto LABEL_43;
    }
    char v107 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v107) {
      goto LABEL_20;
    }
    if ((static BigString.Index.== infix(_:_:)() & 1) == 0) {
      goto LABEL_221;
    }
    long long v215 = v807[1];
    v1144[0] = *v807;
    v1144[1] = v215;
    v1144[2] = v807[2];
    swift_retain();
    outlined retain of Locale((uint64_t)v1144);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v1144);
    long long v216 = *v807;
    v1142[1] = v807[1];
    long long v1143 = v807[2];
    v1142[0] = v216;
    long long v217 = *v807;
    long long v218 = v807[1];
    v1191[2] = v1143;
    v1191[1] = v218;
    v1191[0] = v217;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1191, (uint64_t)v1192);
    outlined retain of Locale((uint64_t)v1192);
    uint64_t v219 = BigString.endIndex.getter();
    uint64_t v221 = v220;
    uint64_t v223 = v222;
    uint64_t v225 = v224;
    outlined release of Locale((uint64_t)v1142);
    char v776 = static BigString.Index.< infix(_:_:)();
    swift_release();
    if (v776) {
      goto LABEL_222;
    }
    uint64_t v1131 = v798;
    uint64_t v1132 = v792;
    uint64_t v1133 = v93;
    uint64_t v1134 = v795;
    uint64_t v1135 = v219;
    uint64_t v1136 = v221;
    uint64_t v1137 = v223;
    uint64_t v1138 = v225;
    long long v226 = *v807;
    long long v227 = v807[1];
    long long v1141 = v807[2];
    long long v1140 = v227;
    long long v1139 = v226;
    swift_retain_n();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)&v869);
    uint64_t v228 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v230 = v229;
    uint64_t v232 = v231;
    uint64_t v234 = v233;
    uint64_t v235 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v759 = v236;
    uint64_t v238 = v237;
    uint64_t v240 = v239;
    outlined release of Locale((uint64_t)&v870);
    swift_release();
    uint64_t v1122 = v228;
    uint64_t v1123 = v230;
    uint64_t v1124 = v232;
    uint64_t v1125 = v234;
    uint64_t v1126 = v235;
    uint64_t v1127 = v759;
    uint64_t v1128 = v238;
    uint64_t v1129 = v240;
    long long v241 = *v807;
    v1130[1] = v807[1];
    v1130[2] = v807[2];
    v1130[0] = v241;
    swift_retain_n();
    outlined retain of Locale((uint64_t)v1130);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v1130);
    uint64_t v242 = BigSubstring.startIndex.getter();
    uint64_t v244 = v243;
    uint64_t v246 = v245;
    uint64_t v248 = v247;
    uint64_t v249 = BigSubstring.endIndex.getter();
    uint64_t v251 = v250;
    uint64_t v253 = v252;
    v255 = v254;
    outlined release of Locale((uint64_t)&v871);
    swift_release();
    uint64_t v838 = (uint64_t)v815;
    unint64_t v839 = v242;
    uint64_t v840 = v244;
    uint64_t v841 = v246;
    uint64_t v842 = v248;
    uint64_t v843 = v249;
    uint64_t v844 = v251;
    uint64_t v845 = v253;
    v846 = v255;
    uint64_t v847 = 0;
    unint64_t v256 = Substring.init<A>(_:)();
    unint64_t v258 = v257;
    uint64_t v260 = v259;
    uint64_t v262 = v261;
    uint64_t v838 = 125;
    unint64_t v839 = 0xE100000000000000;
    unint64_t v263 = Substring.init<A>(_:)();
    if ((v256 ^ v258) < 0x4000 || !((v263 ^ v264) >> 14))
    {
      swift_release();
      swift_bridgeObjectRelease();
LABEL_170:
      swift_bridgeObjectRelease();
      void *v750 = 0;
      return swift_release();
    }
    specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v263, v264, v265, v266, 0, 0, 0, 0, 0, v256, v258, v260, v262);
    char v268 = v267;
    swift_bridgeObjectRelease();
    if (v268)
    {
      swift_release();
      goto LABEL_170;
    }
    swift_bridgeObjectRetain();
    uint64_t v269 = Substring.UTF8View.distance(from:to:)();
    swift_bridgeObjectRelease();
    uint64_t v270 = Substring.UTF8View.distance(from:to:)();
    swift_bridgeObjectRelease();
    if (__OFADD__(BigString.Index.utf8Offset.getter(), v269)) {
      goto LABEL_223;
    }
    long long v271 = v807[1];
    v1121[0] = *v807;
    v1121[1] = v271;
    v1121[2] = v807[2];
    swift_retain();
    outlined retain of Locale((uint64_t)v1121);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v1121);
    long long v272 = *v807;
    v1119[1] = v807[1];
    long long v1120 = v807[2];
    v1119[0] = v272;
    long long v273 = *v807;
    long long v274 = v807[1];
    v1193[2] = v1120;
    v1193[1] = v274;
    v1193[0] = v273;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1193, (uint64_t)v1194);
    outlined retain of Locale((uint64_t)v1194);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v1119);
    uint64_t v275 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v277 = v276;
    uint64_t v768 = v278;
    uint64_t v280 = v279;
    outlined release of Locale((uint64_t)&v872);
    swift_release();
    if (__OFADD__(BigString.Index.utf8Offset.getter(), v270)) {
      goto LABEL_224;
    }
    long long v281 = v807[1];
    v1118[0] = *v807;
    v1118[1] = v281;
    v1118[2] = v807[2];
    swift_retain();
    outlined retain of Locale((uint64_t)v1118);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v1118);
    long long v282 = *v807;
    v1116[1] = v807[1];
    long long v1117 = v807[2];
    v1116[0] = v282;
    long long v283 = *v807;
    long long v284 = v807[1];
    v1195[2] = v1117;
    v1195[1] = v284;
    v1195[0] = v283;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1195, (uint64_t)v1196);
    outlined retain of Locale((uint64_t)v1196);
    BigString.startIndex.getter();
    uint64_t v777 = v280;
    uint64_t v285 = v277;
    outlined release of Locale((uint64_t)v1116);
    uint64_t v286 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v288 = v287;
    uint64_t v290 = v289;
    uint64_t v292 = v291;
    outlined release of Locale((uint64_t)&v873);
    swift_release();
    char v765 = static BigString.Index.< infix(_:_:)();
    swift_release();
    if (v765) {
      goto LABEL_225;
    }
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_226;
    }
    uint64_t v754 = v292;
    uint64_t v755 = v290;
    uint64_t v756 = v288;
    uint64_t v760 = v286;
    long long v293 = v807[1];
    v1115[0] = *v807;
    v1115[1] = v293;
    v1115[2] = v807[2];
    swift_retain();
    outlined retain of Locale((uint64_t)v1115);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v1115);
    long long v294 = *v807;
    v1113[1] = v807[1];
    long long v1114 = v807[2];
    v1113[0] = v294;
    long long v295 = *v807;
    long long v296 = v807[1];
    v1197[2] = v1114;
    v1197[1] = v296;
    v1197[0] = v295;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1197, (uint64_t)v1198);
    outlined retain of Locale((uint64_t)v1198);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)v1113);
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_227;
    }
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_228;
    }
    v297 = v807;
    uint64_t v1104 = v798;
    uint64_t v1105 = v792;
    uint64_t v1106 = v782;
    uint64_t v1107 = v795;
    uint64_t v1108 = v275;
    uint64_t v1109 = v285;
    uint64_t v1110 = v768;
    uint64_t v1111 = v777;
    long long v298 = *v807;
    long long v299 = v807[1];
    v1112[2] = v807[2];
    v1112[1] = v299;
    v1112[0] = v298;
    swift_retain_n();
    outlined retain of Locale((uint64_t)v1112);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v1112);
    uint64_t v300 = BigSubstring.startIndex.getter();
    unint64_t v302 = v301;
    uint64_t v793 = v303;
    uint64_t v304 = v300;
    uint64_t v306 = v305;
    uint64_t v307 = BigSubstring.endIndex.getter();
    uint64_t v309 = v308;
    uint64_t v311 = v310;
    uint64_t v313 = v312;
    outlined release of Locale((uint64_t)&v874);
    swift_release_n();
    uint64_t v1091 = v304;
    unint64_t v1092 = v302;
    uint64_t v1093 = v306;
    uint64_t v1094 = v793;
    uint64_t v1095 = v307;
    uint64_t v1096 = v309;
    uint64_t v1097 = v311;
    uint64_t v1098 = v313;
    uint64_t v838 = v304;
    unint64_t v839 = v302;
    uint64_t v840 = v306;
    uint64_t v841 = v793;
    uint64_t v842 = v307;
    uint64_t v843 = v309;
    uint64_t v844 = v311;
    uint64_t v845 = v313;
    v846 = v815;
    uint64_t v847 = v304;
    unint64_t v848 = v302;
    uint64_t v849 = v306;
    uint64_t v850 = v793;
    uint64_t v851 = v307;
    uint64_t v852 = v309;
    uint64_t v853 = v311;
    uint64_t v854 = v313;
    uint64_t v855 = 0;
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v838);
    if ((static BigString.Index.== infix(_:_:)() & 1) == 0)
    {
      while ((static BigString.Index.< infix(_:_:)() & 1) == 0)
      {
        if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
          goto LABEL_175;
        }
        if (static BigString.Index.< infix(_:_:)()) {
          goto LABEL_176;
        }
        if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
          goto LABEL_177;
        }
        long long v314 = *v297;
        v1102[1] = v297[1];
        long long v1103 = v297[2];
        v1102[0] = v314;
        long long v315 = *v297;
        long long v316 = v297[1];
        v1199[2] = v1103;
        v1199[1] = v316;
        v1199[0] = v315;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v1199, (uint64_t)v1200);
        outlined retain of Locale((uint64_t)v1200);
        BigString.subscript.getter();
        outlined release of Locale((uint64_t)v1102);
        outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v838);
        if (static BigString.Index.< infix(_:_:)()) {
          goto LABEL_178;
        }
        if (static BigString.Index.< infix(_:_:)()) {
          goto LABEL_179;
        }
        long long v317 = *v807;
        v1100[1] = v807[1];
        long long v1101 = v807[2];
        v1100[0] = v317;
        long long v318 = *v807;
        long long v319 = v807[1];
        v1201[2] = v1101;
        v1201[1] = v319;
        v1201[0] = v318;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v1201, (uint64_t)v1202);
        outlined retain of Locale((uint64_t)v1202);
        BigString.index(after:)();
        outlined release of Locale((uint64_t)v1100);
        char v320 = static BigString.Index.< infix(_:_:)();
        swift_release();
        if (v320) {
          goto LABEL_180;
        }
        char v321 = Character.isNumber.getter();
        swift_bridgeObjectRelease();
        if ((v321 & 1) == 0)
        {
          swift_release();
          goto LABEL_120;
        }
        v297 = v807;
        if (static BigString.Index.== infix(_:_:)()) {
          goto LABEL_66;
        }
      }
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
LABEL_186:
      __break(1u);
LABEL_187:
      __break(1u);
LABEL_188:
      __break(1u);
LABEL_189:
      __break(1u);
LABEL_190:
      __break(1u);
LABEL_191:
      __break(1u);
LABEL_192:
      __break(1u);
LABEL_193:
      __break(1u);
LABEL_194:
      __break(1u);
LABEL_195:
      __break(1u);
LABEL_196:
      __break(1u);
LABEL_197:
      __break(1u);
LABEL_198:
      __break(1u);
LABEL_199:
      __break(1u);
LABEL_200:
      __break(1u);
LABEL_201:
      __break(1u);
LABEL_202:
      __break(1u);
LABEL_203:
      __break(1u);
LABEL_204:
      __break(1u);
LABEL_205:
      __break(1u);
LABEL_206:
      __break(1u);
LABEL_207:
      __break(1u);
LABEL_208:
      __break(1u);
LABEL_209:
      __break(1u);
LABEL_210:
      __break(1u);
LABEL_211:
      __break(1u);
LABEL_212:
      __break(1u);
LABEL_213:
      __break(1u);
LABEL_214:
      __break(1u);
LABEL_215:
      __break(1u);
LABEL_216:
      __break(1u);
LABEL_217:
      __break(1u);
LABEL_218:
      __break(1u);
LABEL_219:
      __break(1u);
LABEL_220:
      __break(1u);
LABEL_221:
      __break(1u);
LABEL_222:
      __break(1u);
LABEL_223:
      __break(1u);
LABEL_224:
      __break(1u);
LABEL_225:
      __break(1u);
LABEL_226:
      __break(1u);
LABEL_227:
      __break(1u);
LABEL_228:
      __break(1u);
LABEL_229:
      __break(1u);
LABEL_230:
      __break(1u);
LABEL_231:
      __break(1u);
LABEL_232:
      __break(1u);
LABEL_233:
      __break(1u);
LABEL_234:
      __break(1u);
LABEL_235:
      __break(1u);
LABEL_236:
      __break(1u);
LABEL_237:
      __break(1u);
LABEL_238:
      __break(1u);
LABEL_239:
      __break(1u);
LABEL_240:
      __break(1u);
LABEL_241:
      __break(1u);
LABEL_242:
      __break(1u);
LABEL_243:
      __break(1u);
LABEL_244:
      __break(1u);
LABEL_245:
      __break(1u);
LABEL_246:
      __break(1u);
LABEL_247:
      __break(1u);
LABEL_248:
      __break(1u);
LABEL_249:
      __break(1u);
LABEL_250:
      __break(1u);
LABEL_251:
      __break(1u);
LABEL_252:
      __break(1u);
      goto LABEL_253;
    }
LABEL_66:
    swift_release();
    long long v322 = v297[1];
    v1099[0] = *v297;
    v1099[1] = v322;
    v1099[2] = v297[2];
    swift_retain();
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v838);
    swift_retain();
    outlined retain of Locale((uint64_t)v1099);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v1099);
    uint64_t v799 = BigSubstring.startIndex.getter();
    uint64_t v324 = v323;
    uint64_t v326 = v325;
    uint64_t v328 = v327;
    uint64_t v329 = BigSubstring.endIndex.getter();
    uint64_t v331 = v330;
    uint64_t v333 = v332;
    uint64_t v335 = v334;
    outlined release of Locale((uint64_t)&v875);
    swift_release_n();
    uint64_t v1083 = v799;
    uint64_t v1084 = v324;
    uint64_t v1085 = v326;
    uint64_t v1086 = v328;
    uint64_t v1087 = v329;
    uint64_t v1088 = v331;
    uint64_t v1089 = v333;
    uint64_t v1090 = v335;
    long long v336 = *v807;
    v1081[4] = v807[1];
    long long v1082 = v807[2];
    v1081[3] = v336;
    long long v337 = *v807;
    v1203[1] = v807[1];
    v1203[2] = v1082;
    v1203[0] = v337;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1203, (uint64_t)v1204);
    outlined retain of Locale((uint64_t)v1204);
    BigSubstring.init(_unchecked:in:)();
    swift_release();
    uint64_t v338 = MEMORY[0x185302040](&v876);
    uint64_t v340 = specialized FixedWidthInteger.init(_:)(v338, v339);
    if (v341) {
      goto LABEL_120;
    }
    id v342 = (id)v340;
    unint64_t v343 = v340 - 1;
    if (v340 < 1) {
      goto LABEL_120;
    }
    if ((unint64_t)v752 >> 62)
    {
      swift_bridgeObjectRetain();
      unint64_t v344 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if ((v344 & 0x8000000000000000) != 0) {
        goto LABEL_229;
      }
    }
    else
    {
      unint64_t v344 = *(void *)((v752 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v343 >= v344) {
      break;
    }
    if (v749)
    {
      id v345 = (id)MEMORY[0x185303120](v343, v752);
    }
    else
    {
      if (v343 >= *(void *)((v752 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_251;
      }
      id v345 = *(id *)(v748 + 8 * v343);
    }
    v346 = v345;
    id v347 = objc_msgSend(v345, sel_index, v739, v740, v741, v742, v743, v744, v745, v746, v747);

    if (v347 != v342) {
      goto LABEL_78;
    }
    if (v749) {
      id v348 = (id)MEMORY[0x185303120](v343, v752);
    }
    else {
      id v348 = *(id *)(v748 + 8 * v343);
    }
    v351 = v348;
LABEL_89:
    id v353 = v351;
    id v354 = objc_msgSend(v353, sel_replacementRangeInResult);
    uint64_t v356 = v355;
    uint64_t v820 = v753;
    swift_retain();
    Range<>.init(_:in:)((uint64_t)v354, v356, &v820, v884);
    uint64_t v357 = v885;
    if (v885 == 2)
    {
      swift_release();

      goto LABEL_121;
    }
    v739 = v353;
    uint64_t v358 = v884[0];
    uint64_t v359 = v884[1];
    uint64_t v360 = v884[2];
    uint64_t v778 = v886;
    uint64_t v767 = v888;
    uint64_t v769 = v887;
    uint64_t v361 = v889;
    long long v362 = *(_OWORD *)(v753 + 32);
    v1081[0] = *v751;
    v1081[1] = v362;
    v1081[2] = *(_OWORD *)(v753 + 48);
    swift_retain();
    outlined retain of Locale((uint64_t)v1081);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v1081);
    long long v363 = *v751;
    v1079[1] = *(_OWORD *)(v753 + 32);
    long long v1080 = *(_OWORD *)(v753 + 48);
    v1079[0] = v363;
    long long v364 = *v751;
    long long v365 = *(_OWORD *)(v753 + 32);
    v1205[2] = v1080;
    v1205[1] = v365;
    v1205[0] = v364;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1205, (uint64_t)v1206);
    outlined retain of Locale((uint64_t)v1206);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)v1079);
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_230;
    }
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_231;
    }
    uint64_t v1070 = v358;
    uint64_t v1071 = v359;
    uint64_t v1072 = v360;
    uint64_t v1073 = v357;
    uint64_t v1074 = v778;
    uint64_t v1075 = v769;
    uint64_t v1076 = v767;
    uint64_t v1077 = v361;
    long long v366 = *v751;
    long long v367 = *(_OWORD *)(v753 + 32);
    v1078[2] = *(_OWORD *)(v753 + 48);
    v1078[1] = v367;
    v1078[0] = v366;
    swift_retain_n();
    outlined retain of Locale((uint64_t)v1078);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v1078);
    uint64_t v368 = BigSubstring.startIndex.getter();
    unint64_t v370 = v369;
    uint64_t v372 = v371;
    uint64_t v374 = v373;
    uint64_t v375 = BigSubstring.endIndex.getter();
    uint64_t v377 = v376;
    uint64_t v379 = v378;
    uint64_t v381 = v380;
    outlined release of Locale((uint64_t)&v877);
    swift_release_n();
    uint64_t v1024 = v368;
    unint64_t v1025 = v370;
    uint64_t v1026 = v372;
    uint64_t v1027 = v374;
    uint64_t v1028 = v375;
    uint64_t v1029 = v377;
    uint64_t v1030 = v379;
    uint64_t v1031 = v381;
    uint64_t v820 = v368;
    unint64_t v821 = v370;
    uint64_t v822 = v372;
    uint64_t v823 = v374;
    uint64_t v824 = v375;
    uint64_t v825 = v377;
    uint64_t v826 = v379;
    uint64_t v827 = v381;
    uint64_t v828 = v753;
    uint64_t v829 = v368;
    unint64_t v830 = v370;
    uint64_t v831 = v372;
    uint64_t v832 = v374;
    uint64_t v833 = v375;
    uint64_t v744 = v377;
    uint64_t v745 = v375;
    uint64_t v834 = v377;
    uint64_t v835 = v379;
    uint64_t v742 = v381;
    uint64_t v743 = v379;
    uint64_t v836 = v381;
    uint64_t v837 = 0;
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_232;
    }
    unint64_t v740 = v370;
    uint64_t v741 = v368;
    long long v382 = v807[1];
    v1069[0] = *v807;
    v1069[1] = v382;
    v1069[2] = v807[2];
    swift_retain();
    outlined retain of Locale((uint64_t)v1069);
    uint64_t v779 = BigString.startIndex.getter();
    uint64_t v384 = v383;
    uint64_t v800 = v385;
    uint64_t v387 = v386;
    outlined release of Locale((uint64_t)v1069);
    long long v388 = *v807;
    v1067[1] = v807[1];
    long long v1068 = v807[2];
    v1067[0] = v388;
    long long v389 = *v807;
    long long v390 = v807[1];
    v1207[2] = v1068;
    v1207[1] = v390;
    v1207[0] = v389;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1207, (uint64_t)v1208);
    outlined retain of Locale((uint64_t)v1208);
    uint64_t v391 = BigString.endIndex.getter();
    uint64_t v393 = v392;
    uint64_t v395 = v394;
    uint64_t v397 = v396;
    outlined release of Locale((uint64_t)v1067);
    uint64_t v1058 = v779;
    uint64_t v1059 = v384;
    uint64_t v1060 = v800;
    uint64_t v1061 = v387;
    uint64_t v1062 = v391;
    uint64_t v1063 = v393;
    uint64_t v1064 = v395;
    uint64_t v1065 = v397;
    long long v398 = *v807;
    long long v399 = v807[1];
    v1066[2] = v807[2];
    v1066[1] = v399;
    v1066[0] = v398;
    swift_retain();
    outlined retain of Locale((uint64_t)v1066);
    BigString.startIndex.getter();
    uint64_t v401 = v400;
    outlined release of Locale((uint64_t)v1066);
    swift_release();
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_233;
    }
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_234;
    }
    uint64_t v746 = v401;
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_235;
    }
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_236;
    }
    long long v402 = *v807;
    v1056[4] = v807[1];
    long long v1057 = v807[2];
    v1056[3] = v402;
    long long v403 = *v807;
    long long v404 = v807[1];
    v1209[2] = v1057;
    v1209[1] = v404;
    v1209[0] = v403;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1209, (uint64_t)v1210);
    outlined retain of Locale((uint64_t)v1210);
    BigSubstring.init(_unchecked:in:)();
    uint64_t v770 = BigSubstring.distance(from:to:)();
    outlined release of Locale((uint64_t)v878);
    swift_release();
    v405 = v815;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      long long v406 = v807[1];
      v1056[0] = *v807;
      v1056[1] = v406;
      v1056[2] = v807[2];
      uint64_t v407 = v815[8];
      uint64_t v408 = v815[9];
      uint64_t v409 = v815[10];
      uint64_t v410 = v815[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v1056);
      swift_unknownObjectRetain();
      v405 = (_OWORD *)AttributedString.Guts.init(string:runs:)(v1056, v407, v408, v409, v410);
      swift_release();
    }
    long long v411 = v405[2];
    v1055[0] = v405[1];
    v1055[1] = v411;
    v1055[2] = v405[3];
    swift_retain_n();
    outlined retain of Locale((uint64_t)v1055);
    uint64_t v412 = BigString.startIndex.getter();
    uint64_t v414 = v413;
    uint64_t v416 = v415;
    uint64_t v418 = v417;
    outlined release of Locale((uint64_t)v1055);
    long long v419 = v405[1];
    v1053[1] = v405[2];
    long long v1054 = v405[3];
    v1053[0] = v419;
    long long v420 = v405[1];
    long long v421 = v405[2];
    v1211[2] = v1054;
    v1211[1] = v421;
    v1211[0] = v420;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1211, (uint64_t)v1212);
    outlined retain of Locale((uint64_t)v1212);
    uint64_t v422 = BigString.endIndex.getter();
    uint64_t v424 = v423;
    uint64_t v426 = v425;
    uint64_t v428 = v427;
    outlined release of Locale((uint64_t)v1053);
    swift_release();
    v892[0] = v405;
    v892[1] = v412;
    v892[2] = v414;
    v892[3] = v416;
    v892[4] = v418;
    v892[5] = v422;
    v892[6] = v424;
    v892[7] = v426;
    v892[8] = v428;
    if (one-time initialization token for currentIdentity != -1) {
      swift_once();
    }
    v429 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    v430 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v430);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v429, v883);
    os_unfair_lock_unlock(v430);
    swift_release();
    uint64_t v431 = v883[0];
    uint64_t v893 = v883[0];
    BigString.init()();
    v883[0] = 0;
    MEMORY[0x185309530](v883, 8);
    uint64_t v432 = v883[0];
    type metadata accessor for AttributedString.Guts();
    uint64_t v433 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) == 0) {
      goto LABEL_237;
    }
    long long v434 = v878[8];
    *(_OWORD *)(v433 + 16) = v878[7];
    *(_OWORD *)(v433 + 32) = v434;
    *(_OWORD *)(v433 + 48) = v878[9];
    *(void *)(v433 + 64) = 0;
    *(void *)(v433 + 72) = 0;
    *(void *)(v433 + 80) = 0;
    *(void *)(v433 + 88) = v432;
    swift_release();
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_238;
    }
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_239;
    }
    uint64_t v809 = v431;
    v435 = v405 + 1;
    long long v436 = v405[1];
    v1051[1] = v405[2];
    long long v1052 = v405[3];
    v1051[0] = v436;
    long long v437 = v405[1];
    long long v438 = v405[2];
    v1213[2] = v1052;
    v1213[1] = v438;
    v1213[0] = v437;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1213, (uint64_t)v1214);
    outlined retain of Locale((uint64_t)v1214);
    uint64_t v439 = MEMORY[0x185301530](v786, v771, v772, v789);
    uint64_t v796 = v440;
    uint64_t v801 = v439;
    uint64_t v442 = v441;
    uint64_t v444 = v443;
    outlined release of Locale((uint64_t)v1051);
    long long v445 = *v435;
    v1049[1] = v435[1];
    long long v1050 = v435[2];
    v1049[0] = v445;
    long long v446 = *v435;
    long long v447 = v435[1];
    v1215[2] = v1050;
    v1215[1] = v447;
    v1215[0] = v446;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1215, (uint64_t)v1216);
    outlined retain of Locale((uint64_t)v1216);
    uint64_t v448 = MEMORY[0x185301530](v760, v756, v755, v754);
    uint64_t v450 = v449;
    uint64_t v452 = v451;
    uint64_t v454 = v453;
    outlined release of Locale((uint64_t)v1049);
    v1036[0] = v801;
    v1036[1] = v442;
    v1036[2] = v444;
    v1036[3] = v796;
    v1036[4] = v448;
    v1036[5] = v450;
    v1036[6] = v452;
    v1036[7] = v454;
    long long v455 = *v751;
    long long v456 = *(_OWORD *)(v753 + 32);
    v1048[2] = *(_OWORD *)(v753 + 48);
    v1048[1] = v456;
    v1048[0] = v455;
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v820);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v820);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v820);
    swift_retain();
    outlined retain of Locale((uint64_t)v1048);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v1048);
    uint64_t v457 = BigSubstring.startIndex.getter();
    uint64_t v802 = v458;
    uint64_t v460 = v459;
    uint64_t v462 = v461;
    uint64_t v463 = BigSubstring.endIndex.getter();
    uint64_t v465 = v464;
    uint64_t v467 = v466;
    uint64_t v469 = v468;
    outlined release of Locale((uint64_t)&v879);
    swift_release_n();
    uint64_t v1040 = v457;
    uint64_t v1041 = v802;
    uint64_t v1042 = v460;
    uint64_t v1043 = v462;
    uint64_t v1044 = v463;
    uint64_t v1045 = v465;
    uint64_t v1046 = v467;
    uint64_t v1047 = v469;
    long long v470 = *(_OWORD *)(v753 + 32);
    long long v1037 = *v751;
    long long v1038 = v470;
    long long v1039 = *(_OWORD *)(v753 + 48);
    v1217[2] = v1039;
    v1217[1] = v470;
    v1217[0] = v1037;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1217, (uint64_t)v1218);
    outlined retain of Locale((uint64_t)v1218);
    BigSubstring.init(_unchecked:in:)();
    swift_release();
    specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v1036);
    swift_release();
    outlined release of Locale((uint64_t)&v880);
    if (v893 != v809) {
      goto LABEL_255;
    }
    v4 = (_OWORD *)v892[0];
    swift_release();
    long long v471 = v4[2];
    v1035[0] = v4[1];
    v1035[1] = v471;
    v1035[2] = v4[3];
    swift_retain();
    outlined retain of Locale((uint64_t)v1035);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v1035);
    long long v472 = v4[1];
    v1033[1] = v4[2];
    long long v1034 = v4[3];
    v1033[0] = v472;
    long long v473 = v4[1];
    long long v474 = v4[2];
    v1219[2] = v1034;
    v1219[1] = v474;
    v1219[0] = v473;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1219, (uint64_t)v1220);
    outlined retain of Locale((uint64_t)v1220);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)v1033);
    long long v475 = v4[1];
    long long v476 = v4[2];
    v1032[2] = v4[3];
    v1032[1] = v476;
    v1032[0] = v475;
    swift_retain();
    outlined retain of Locale((uint64_t)v1032);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v1032);
    swift_release();
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_240;
    }
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_241;
    }
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_242;
    }
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_243;
    }
    long long v477 = *(_OWORD *)(v753 + 32);
    long long v1021 = *v751;
    long long v1022 = v477;
    long long v1023 = *(_OWORD *)(v753 + 48);
    v1221[1] = v477;
    v1221[2] = v1023;
    v1221[0] = v1021;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1221, (uint64_t)v1222);
    outlined retain of Locale((uint64_t)v1222);
    BigSubstring.init(_unchecked:in:)();
    uint64_t v478 = BigSubstring.distance(from:to:)();
    outlined release of Locale((uint64_t)&v881);
    if (__OFADD__(v770, v478)) {
      goto LABEL_244;
    }
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_245;
    }
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_246;
    }
    long long v479 = v4[1];
    v1019[1] = v4[2];
    long long v1020 = v4[3];
    v1019[0] = v479;
    long long v480 = v4[1];
    long long v481 = v4[2];
    v1223[2] = v1020;
    v1223[1] = v481;
    v1223[0] = v480;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1223, (uint64_t)v1224);
    outlined retain of Locale((uint64_t)v1224);
    uint64_t v482 = BigString.index(_:offsetBy:)();
    uint64_t v10 = v483;
    uint64_t v12 = v484;
    uint64_t v14 = v485;
    outlined release of Locale((uint64_t)v1019);
    uint64_t v805 = v482;
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_247;
    }
    char v486 = static BigString.Index.< infix(_:_:)();
    swift_release();
    swift_release();
    swift_release();

    if (v486) {
      goto LABEL_248;
    }
LABEL_43:
    if ((static BigString.Index.== infix(_:_:)() & 1) == 0) {
      goto LABEL_181;
    }
  }
  if (v344)
  {
LABEL_78:
    swift_bridgeObjectRetain();
    uint64_t v349 = 4;
    while (1)
    {
      id v350 = v749 ? (id)MEMORY[0x185303120](v349 - 4, v752) : *(id *)(v752 + 8 * v349);
      v351 = v350;
      uint64_t v352 = v349 - 3;
      if (__OFADD__(v349 - 4, 1)) {
        break;
      }
      if (objc_msgSend(v350, sel_index) == v342)
      {
        swift_bridgeObjectRelease();
        goto LABEL_89;
      }

      ++v349;
      if (v352 == v344)
      {
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_121;
      }
    }
    __break(1u);
    goto LABEL_174;
  }
LABEL_120:
  swift_release();
LABEL_121:
  void *v750 = 0;
  return swift_release();
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed Any) -> (@out Any?)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

id thunk for @escaping @callee_guaranteed (@in_guaranteed Any) -> (@out Any?)(uint64_t a1, uint64_t a2)
{
  void (*v3)(void *__return_ptr, void *);
  uint64_t v4;
  void *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void v12[3];
  uint64_t v13;
  void v14[4];
  uint64_t vars8;

  uint64_t v3 = *(void (**)(void *__return_ptr, void *))(a1 + 32);
  v14[3] = swift_getObjectType();
  v14[0] = a2;
  swift_unknownObjectRetain();
  v3(v12, v14);
  v4 = v13;
  if (v13)
  {
    uint64_t v5 = __swift_project_boxed_opaque_existential_1(v12, v13);
    long long v6 = *(void *)(v4 - 8);
    long long v7 = MEMORY[0x1F4188790](v5);
    uint64_t v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v6 + 16))(v9, v7);
    uint64_t v10 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    uint64_t v10 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);

  return v10;
}

void closure #1 in AttributedString.enumerateInflectableRanges(in:editor:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, long long *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v11 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  unint64_t v12 = *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32);
  long long v34 = a8[1];
  long long v35 = *a8;
  long long v32 = a8[3];
  long long v33 = a8[2];
  if (v10)
  {
    if (v10 == 1)
    {
      outlined consume of AttributedString.AttributeRunBoundaries?(v11, 1);
      outlined consume of AttributedString.AttributeRunBoundaries?(0, 0);
      long long v18 = 0;
    }
    else
    {
      v20.i64[0] = 0xFFFFFFFFFFLL;
      v20.i64[1] = 0xFFFFFFFFFFLL;
      uint64x2_t v21 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v12), v20);
      int64x2_t v30 = (int64x2_t)vshlq_u64(v21, (uint64x2_t)xmmword_182108550);
      int64x2_t v29 = (int64x2_t)vshlq_u64(v21, (uint64x2_t)xmmword_182108540);
      outlined copy of AttributedString.AttributeRunBoundaries?(v11, v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSMorphology);
      __int16 v36 = v11;
      char v37 = BYTE2(v11);
      uint64_t v38 = v10;
      char v39 = v12;
      int32x2_t v22 = vmovn_s64(v29);
      v23.i64[1] = v30.i64[1];
      *(int32x2_t *)v23.i8 = vmovn_s64(v30);
      v23.i16[1] = v23.i16[2];
      v23.i16[2] = v22.i16[0];
      v23.i16[3] = v22.i16[2];
      unsigned __int32 v40 = vmovn_s16(v23).u32[0];
      swift_bridgeObjectRetain();
      *(void *)&v42.grammaticalGender.value = &v36;
      NSMorphology.init(_:)(v24, v42);
      long long v18 = v25;
    }
    if (a3) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = a2;
    }
    if (a5) {
      a4 = 0;
    }
    if (a7) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = a6;
    }
    id v19 = objc_msgSend(objc_allocWithZone((Class)_NSInflectionRuleExplicit), sel_initWithMorphology_agreeWithArgument_agreeWithConcept_referentConcept_, v18, v26, a4, v27);

    if (v19) {
      goto LABEL_16;
    }
LABEL_5:
    *(void *)(a9 + 64) = 0;
    *(_OWORD *)(a9 + 32) = 0u;
    *(_OWORD *)(a9 + 48) = 0u;
    *(_OWORD *)a9 = 0u;
    *(_OWORD *)(a9 + 16) = 0u;
    return;
  }
  swift_bridgeObjectRelease_n();
  outlined consume of AttributedString.AttributeRunBoundaries?(v11, 0);
  outlined consume of AttributedString.AttributeRunBoundaries?(v11, 0);
  id v19 = objc_msgSend(self, sel_automaticRule);
  if (!v19) {
    goto LABEL_5;
  }
LABEL_16:
  id v28 = v19;
  *(_OWORD *)a9 = v35;
  *(_OWORD *)(a9 + 16) = v34;
  *(_OWORD *)(a9 + 32) = v33;
  *(_OWORD *)(a9 + 48) = v32;
  *(void *)(a9 + 64) = v28;
}

uint64_t specialized closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  if (*a3 == 1)
  {
    swift_bridgeObjectRetain();
    return BigSubstring.replaceSubrange<A>(_:with:)();
  }
  return result;
}

uint64_t specialized AttributedString._AttributeStorage.subscript.getter(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012, 0x80000001823A8610);
  if ((v3 & 1) == 0) {
    return 0;
  }
  outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v2, (uint64_t)v6);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v6, (uint64_t)&v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
  swift_dynamicCast();
  outlined destroy of AttributedString._AttributeValue((uint64_t)v6);
  return v7;
}

{
  unint64_t v2;
  char v3;
  uint64_t v5;
  unsigned char v6[72];
  uint64_t v7;

  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(0x6175676E614C534ELL, 0xEA00000000006567);
  if ((v3 & 1) == 0) {
    return 0;
  }
  outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v2, (uint64_t)v6);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v6, (uint64_t)&v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
  swift_dynamicCast();
  outlined destroy of AttributedString._AttributeValue((uint64_t)v6);
  return v7;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  unsigned char v7[40];
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  uint64_t v12;
  uint64_t v13;

  if (one-time initialization token for name == -1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_3;
    }
LABEL_8:
    unint64_t v12 = 0;
    uint64_t v10 = 0u;
    uint64_t v11 = 0u;
    uint64_t v8 = 0u;
    uint64_t v9 = 0u;
    goto LABEL_9;
  }
  swift_once();
  if (!*(void *)(a1 + 16)) {
    goto LABEL_8;
  }
LABEL_3:
  unint64_t v2 = qword_1E8ED5F88;
  char v3 = static AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute.name;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v2);
  if (v5)
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v4, (uint64_t)&v8);
    swift_bridgeObjectRelease();
    if (*((void *)&v9 + 1))
    {
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v8, (uint64_t)v7);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      type metadata accessor for NSInlinePresentationIntent(0);
      swift_dynamicCast();
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v8);
      return v13;
    }
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t v10 = 0u;
    uint64_t v11 = 0u;
    uint64_t v8 = 0u;
    uint64_t v9 = 0u;
    swift_bridgeObjectRelease();
  }
LABEL_9:
  outlined destroy of Any?((uint64_t)&v8, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  return 0;
}

uint64_t sub_181F660A0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_181F660D8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sSo21NSAttributedStringKeyaSo8_NSRangeVypSgADSpy10ObjectiveC8ObjCBoolVGIegnyy_Iggyg_AbdedIIegnyy_Ieggyg_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_181F66110()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sSo8_NSRangeVypSgABSpy10ObjectiveC8ObjCBoolVGIegnyy_Igyg_AbcbGIegnyy_Iegyg_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_181F66148()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_181F66158()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sSo8_NSRangeVSo27NSLocalizedNumberFormatRuleCABSpy10ObjectiveC8ObjCBoolVGIeggyy_Igyg_AbdbHIeggyy_Iegyg_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_181F66190()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_181F661A0()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sSo21NSAttributedStringKeyaSo8_NSRangeVIggy_AbDIeggy_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_181F661D8()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_181F661E8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sSo8_NSRangeVSbIgyd_ABSbIegyd_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_181F66224()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_181F66234()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sSo21NSAttributedStringKeyaSo8_NSRangeVypSgIggyr_AbdEIeggyr_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_181F6626C()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_181F6627C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sSo8_NSRangeVSSIgyo_ABSSIegyo_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_181F662B4()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sSo8_NSRangeVSSSgABSpy10ObjectiveC8ObjCBoolVGIeggyy_Igyg_AbcbGIeggyy_Iegyg_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_181F662EC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sSo8_NSRangeVypIgyn_ABypIegyn_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_181F66328()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sypypSgIgnr_ypAAIegnr_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t specialized AttributedString.Runs.Run.subscript.getter()
{
  uint64_t v1 = (uint64_t)v0;
  uint64_t v2 = *v0;
  outlined retain of AttributedString.Runs.Run(v1);
  if (one-time initialization token for name == -1)
  {
    if (*(void *)(v2 + 16)) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v14 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    goto LABEL_9;
  }
  swift_once();
  if (!*(void *)(v2 + 16)) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v3 = qword_1E8ED5F88;
  uint64_t v4 = static AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute.name;
  swift_bridgeObjectRetain();
  unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v3);
  if ((v6 & 1) == 0)
  {
    uint64_t v14 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  outlined init with copy of AttributedString._AttributeValue(*(void *)(v2 + 56) + 72 * v5, (uint64_t)&v10);
  swift_bridgeObjectRelease();
  if (!*((void *)&v11 + 1))
  {
LABEL_9:
    outlined destroy of Any?((uint64_t)&v10, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v7 = 0;
    uint64_t v15 = 0;
    char v16 = 1;
    goto LABEL_10;
  }
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v10, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
  type metadata accessor for NSInlinePresentationIntent(0);
  swift_dynamicCast();
  outlined destroy of AttributedString._AttributeValue((uint64_t)&v10);
  char v16 = 0;
  uint64_t v7 = v15;
LABEL_10:
  outlined release of AttributedString.Runs.Run(v1);
  return v7;
}

uint64_t specialized AttributedString.enumerate<A>(_:in:editor:)(long long *a1, _OWORD *a2, void (*a3)(void *, uint64_t, uint64_t, char *), uint64_t a4, uint64_t a5)
{
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  long long v7 = a2[2];
  v81[0] = a2[1];
  v81[1] = v7;
  v81[2] = a2[3];
  swift_retain();
  outlined retain of Locale((uint64_t)v81);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v81);
  long long v8 = a2[2];
  v79[0] = a2[1];
  v79[1] = v8;
  long long v80 = a2[3];
  v82[0] = v79[0];
  v82[1] = v8;
  v82[2] = v80;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v82, (uint64_t)v83);
  outlined retain of Locale((uint64_t)v83);
  BigString.endIndex.getter();
  outlined release of Locale((uint64_t)v79);
  long long v9 = a1[1];
  long long v72 = *a1;
  long long v73 = v9;
  long long v10 = a1[3];
  long long v74 = a1[2];
  long long v75 = v10;
  long long v11 = a2[2];
  long long v76 = a2[1];
  long long v77 = v11;
  long long v78 = a2[3];
  swift_retain_n();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v55);
  uint64_t v12 = BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v49 = v13;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v18 = BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  outlined release of Locale((uint64_t)v56);
  swift_release_n();
  uint64_t v64 = v12;
  uint64_t v65 = v49;
  uint64_t v66 = v15;
  uint64_t v67 = v17;
  uint64_t v68 = v18;
  uint64_t v69 = v20;
  uint64_t v70 = v22;
  uint64_t v71 = v24;
  AttributedString.Runs.init(_:in:)((uint64_t)a2, &v88);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1821037E0;
  if (one-time initialization token for name != -1) {
    swift_once();
  }
  uint64_t v26 = qword_1E8ED5E58;
  *(void *)(v25 + 32) = static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name;
  *(void *)(v25 + 40) = v26;
  v101[10] = v98;
  v101[11] = v99;
  v101[6] = v94;
  v101[7] = v95;
  v101[8] = v96;
  v101[9] = v97;
  v101[2] = v90;
  v101[3] = v91;
  v101[4] = v92;
  v101[5] = v93;
  v101[0] = v88;
  v101[1] = v89;
  *(void *)&long long v102 = v100;
  *((void *)&v102 + 1) = v25;
  uint64_t v103 = MEMORY[0x1E4FBC860];
  uint64_t v63 = MEMORY[0x1E4FBC860];
  v62[10] = v98;
  v62[11] = v99;
  v62[6] = v94;
  v62[7] = v95;
  v62[8] = v96;
  v62[9] = v97;
  v62[2] = v90;
  v62[3] = v91;
  v62[4] = v92;
  v62[5] = v93;
  v62[0] = v88;
  v62[1] = v89;
  v62[12] = v102;
  swift_bridgeObjectRetain();
  uint64_t v27 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v62);
  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v101);
  uint64_t v28 = *(void *)(v27 + 16);
  if (v28)
  {
    char v29 = 0;
    uint64_t v30 = v28 - 1;
    for (uint64_t i = v27 + 56; ; i += 88)
    {
      if (v29)
      {
        if (!v30) {
          return swift_release();
        }
        char v29 = 1;
      }
      else
      {
        uint64_t v32 = *(void *)(i - 24);
        uint64_t v33 = *(void *)(i - 16);
        unint64_t v34 = *(unsigned int *)(i - 8) | ((unint64_t)*(unsigned __int8 *)(i - 4) << 32);
        if (v33 == 1)
        {
          outlined copy of AttributedString.AttributeRunBoundaries?(*(void *)(i - 24), 1);
          if (!v30) {
            return swift_release();
          }
          char v29 = 0;
        }
        else
        {
          uint64_t v54 = &type metadata for InflectionRule;
          char v53 = BYTE4(v34);
          int v52 = v34;
          long long v35 = *(_OWORD **)(a5 + 16);
          long long v36 = v35[1];
          long long v37 = v35[3];
          v61[1] = v35[2];
          v61[2] = v37;
          char v50 = 0;
          v51[0] = v32;
          v51[1] = v33;
          v61[0] = v36;
          outlined copy of AttributedString.AttributeRunBoundaries?(v32, v33);
          outlined copy of AttributedString.AttributeRunBoundaries?(v32, v33);
          outlined copy of AttributedString.AttributeRunBoundaries?(v32, v33);
          swift_retain();
          outlined retain of Locale((uint64_t)v61);
          BigString.startIndex.getter();
          outlined release of Locale((uint64_t)v61);
          long long v38 = v35[1];
          long long v39 = v35[3];
          v60[1] = v35[2];
          v60[2] = v39;
          v60[0] = v38;
          long long v40 = v35[1];
          v84[1] = v35[2];
          v84[2] = v39;
          v84[0] = v40;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v84, (uint64_t)v85);
          outlined retain of Locale((uint64_t)v85);
          BigString.endIndex.getter();
          outlined release of Locale((uint64_t)v60);
          long long v41 = v35[1];
          long long v42 = v35[3];
          v59[1] = v35[2];
          v59[2] = v42;
          v59[0] = v41;
          long long v43 = v35[1];
          v86[1] = v35[2];
          v86[2] = v42;
          v86[0] = v43;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v86, (uint64_t)v87);
          outlined retain of Locale((uint64_t)v87);
          swift_release();
          BigString.utf16.getter();
          BigString.startIndex.getter();
          uint64_t v44 = BigString.UTF16View.distance(from:to:)();
          outlined release of Locale((uint64_t)v57);
          BigString.utf16.getter();
          uint64_t v45 = BigString.UTF16View.distance(from:to:)();
          outlined release of Locale((uint64_t)v59);
          outlined release of Locale((uint64_t)v58);
          a3(v51, v44, v45, &v50);
          outlined destroy of Any?((uint64_t)v51, (uint64_t *)&demangling cache variable for type metadata for Any?);
          outlined consume of AttributedString.AttributeRunBoundaries?(v32, v33);
          outlined consume of AttributedString.AttributeRunBoundaries?(v32, v33);
          if (!v30) {
            return swift_release();
          }
          char v29 = v50;
        }
      }
      --v30;
    }
  }
  return swift_release();
}

{
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  _OWORD *v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v47;
  char v48;
  void v49[4];
  unsigned char v50[48];
  unsigned char v51[112];
  unsigned char v52[48];
  unsigned char v53[48];
  _OWORD v54[3];
  _OWORD v55[3];
  _OWORD v56[3];
  _OWORD v57[13];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  long long v67;
  long long v68;
  long long v69;
  long long v70;
  long long v71;
  long long v72;
  long long v73;
  _OWORD v74[2];
  long long v75;
  _OWORD v76[3];
  long long v77[3];
  unsigned char v78[40];
  long long v79[3];
  unsigned char v80[40];
  long long v81[3];
  unsigned char v82[40];
  long long v83;
  long long v84;
  long long v85;
  long long v86;
  long long v87;
  long long v88;
  long long v89;
  long long v90;
  long long v91;
  long long v92;
  long long v93;
  long long v94;
  uint64_t v95;
  _OWORD v96[12];
  long long v97;
  uint64_t v98;
  uint64_t v99;

  long long v99 = *MEMORY[0x1E4F143B8];
  long long v7 = a2[2];
  v76[0] = a2[1];
  v76[1] = v7;
  _OWORD v76[2] = a2[3];
  swift_retain();
  outlined retain of Locale((uint64_t)v76);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v76);
  long long v8 = a2[2];
  v74[0] = a2[1];
  v74[1] = v8;
  long long v75 = a2[3];
  v77[0] = v74[0];
  v77[1] = v8;
  v77[2] = v75;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v77, (uint64_t)v78);
  outlined retain of Locale((uint64_t)v78);
  BigString.endIndex.getter();
  outlined release of Locale((uint64_t)v74);
  long long v9 = a1[1];
  uint64_t v67 = *a1;
  uint64_t v68 = v9;
  long long v10 = a1[3];
  uint64_t v69 = a1[2];
  uint64_t v70 = v10;
  long long v11 = a2[2];
  uint64_t v71 = a2[1];
  long long v72 = v11;
  long long v73 = a2[3];
  swift_retain_n();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v50);
  uint64_t v12 = BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v14 = v13;
  uint64_t v47 = v15;
  uint64_t v17 = v16;
  uint64_t v18 = BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  outlined release of Locale((uint64_t)v51);
  swift_release_n();
  unint64_t v59 = v12;
  unint64_t v60 = v14;
  unint64_t v61 = v47;
  uint64_t v62 = v17;
  uint64_t v63 = v18;
  uint64_t v64 = v20;
  uint64_t v65 = v22;
  uint64_t v66 = v24;
  AttributedString.Runs.init(_:in:)((uint64_t)a2, &v83);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1821037E0;
  if (one-time initialization token for name != -1) {
    swift_once();
  }
  uint64_t v26 = qword_1E8ED5EE0;
  *(void *)(v25 + 32) = static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name;
  *(void *)(v25 + 40) = v26;
  v96[10] = v93;
  v96[11] = v94;
  v96[6] = v89;
  v96[7] = v90;
  v96[8] = v91;
  v96[9] = v92;
  _OWORD v96[2] = v85;
  v96[3] = v86;
  v96[4] = v87;
  v96[5] = v88;
  v96[0] = v83;
  v96[1] = v84;
  *(void *)&long long v97 = v95;
  *((void *)&v97 + 1) = v25;
  long long v98 = MEMORY[0x1E4FBC860];
  uint64_t v58 = MEMORY[0x1E4FBC860];
  v57[10] = v93;
  v57[11] = v94;
  v57[6] = v89;
  v57[7] = v90;
  v57[8] = v91;
  v57[9] = v92;
  v57[2] = v85;
  v57[3] = v86;
  v57[4] = v87;
  v57[5] = v88;
  v57[0] = v83;
  v57[1] = v84;
  v57[12] = v97;
  swift_bridgeObjectRetain();
  uint64_t v27 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v57);
  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v96);
  uint64_t v28 = *(void *)(v27 + 16);
  if (v28)
  {
    char v29 = 0;
    uint64_t v30 = v28 - 1;
    for (uint64_t i = v27 + 48; ; i += 72)
    {
      if (v29)
      {
        if (!v30) {
          return swift_release();
        }
        char v29 = 1;
      }
      else
      {
        uint64_t v32 = *(void *)(i - 16);
        if (v32)
        {
          uint64_t v48 = 0;
          v49[3] = &type metadata for AttributedString;
          v49[0] = v32;
          uint64_t v33 = *(_OWORD **)(a5 + 16);
          unint64_t v34 = v33[1];
          long long v35 = v33[3];
          v56[1] = v33[2];
          v56[2] = v35;
          v56[0] = v34;
          swift_retain_n();
          swift_retain();
          outlined retain of Locale((uint64_t)v56);
          BigString.startIndex.getter();
          outlined release of Locale((uint64_t)v56);
          long long v36 = v33[1];
          long long v37 = v33[3];
          v55[1] = v33[2];
          v55[2] = v37;
          v55[0] = v36;
          long long v38 = v33[1];
          v79[1] = v33[2];
          _OWORD v79[2] = v37;
          v79[0] = v38;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v79, (uint64_t)v80);
          outlined retain of Locale((uint64_t)v80);
          BigString.endIndex.getter();
          outlined release of Locale((uint64_t)v55);
          long long v39 = v33[1];
          long long v40 = v33[3];
          v54[1] = v33[2];
          v54[2] = v40;
          v54[0] = v39;
          long long v41 = v33[1];
          v81[1] = v33[2];
          v81[2] = v40;
          v81[0] = v41;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v81, (uint64_t)v82);
          outlined retain of Locale((uint64_t)v82);
          swift_release();
          BigString.utf16.getter();
          BigString.startIndex.getter();
          long long v42 = BigString.UTF16View.distance(from:to:)();
          outlined release of Locale((uint64_t)v52);
          BigString.utf16.getter();
          long long v43 = BigString.UTF16View.distance(from:to:)();
          outlined release of Locale((uint64_t)v54);
          outlined release of Locale((uint64_t)v53);
          a3(v49, v42, v43, &v48);
          outlined destroy of Any?((uint64_t)v49, (uint64_t *)&demangling cache variable for type metadata for Any?);
          swift_release_n();
          if (!v30) {
            return swift_release();
          }
          char v29 = v48;
        }
        else
        {
          if (!v30) {
            return swift_release();
          }
          char v29 = 0;
        }
      }
      --v30;
    }
  }
  return swift_release();
}

uint64_t specialized AttributedString.enumerateFormattableRanges(in:editor:)(long long *a1, uint64_t a2, void (*a3)(id, uint64_t, uint64_t, char *), uint64_t a4, uint64_t a5)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  long long v51 = a1[1];
  long long v52 = *a1;
  long long v50 = a1[2];
  uint64_t v5 = *((void *)a1 + 6);
  uint64_t v6 = *((void *)a1 + 7);
  long long v7 = *(_OWORD **)a2;
  long long v8 = *(_OWORD *)(*(void *)a2 + 16);
  long long v9 = *(_OWORD *)(*(void *)a2 + 48);
  v80[1] = *(_OWORD *)(*(void *)a2 + 32);
  v80[2] = v9;
  v80[0] = v8;
  swift_retain();
  outlined retain of Locale((uint64_t)v80);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v80);
  long long v10 = v7[1];
  long long v11 = v7[3];
  v79[1] = v7[2];
  _OWORD v79[2] = v11;
  v79[0] = v10;
  long long v12 = v7[1];
  v81[1] = v7[2];
  v81[2] = v11;
  v81[0] = v12;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v81, (uint64_t)v82);
  outlined retain of Locale((uint64_t)v82);
  BigString.endIndex.getter();
  outlined release of Locale((uint64_t)v79);
  long long v71 = v52;
  long long v72 = v51;
  long long v73 = v50;
  uint64_t v74 = v5;
  uint64_t v75 = v6;
  long long v13 = v7[2];
  long long v76 = v7[1];
  long long v77 = v13;
  long long v78 = v7[3];
  swift_retain_n();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v54);
  *(void *)&long long v52 = BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v20 = BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  outlined release of Locale((uint64_t)v55);
  swift_release_n();
  uint64_t v63 = v52;
  uint64_t v64 = v15;
  uint64_t v65 = v17;
  uint64_t v66 = v19;
  uint64_t v67 = v20;
  uint64_t v68 = v22;
  uint64_t v69 = v24;
  uint64_t v70 = v26;
  AttributedString.Runs.init(_:in:)((uint64_t)v7, &v87);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_1821037E0;
  outlined retain of AttributedString.Runs((uint64_t)&v87);
  if (one-time initialization token for name != -1) {
    swift_once();
  }
  uint64_t v28 = qword_1E8ED5B58;
  *(void *)(v27 + 32) = static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.name;
  *(void *)(v27 + 40) = v28;
  swift_bridgeObjectRetain();
  outlined release of AttributedString.Runs((uint64_t)&v87);
  v100[10] = v97;
  v100[11] = v98;
  v100[6] = v93;
  v100[7] = v94;
  v100[8] = v95;
  v100[9] = v96;
  v100[2] = v89;
  v100[3] = v90;
  v100[4] = v91;
  v100[5] = v92;
  v100[0] = v87;
  v100[1] = v88;
  *(void *)&long long v101 = v99;
  *((void *)&v101 + 1) = v27;
  uint64_t v102 = MEMORY[0x1E4FBC860];
  uint64_t v62 = MEMORY[0x1E4FBC860];
  v61[10] = v97;
  v61[11] = v98;
  v61[6] = v93;
  v61[7] = v94;
  v61[8] = v95;
  v61[9] = v96;
  v61[2] = v89;
  _OWORD v61[3] = v90;
  v61[4] = v91;
  v61[5] = v92;
  v61[0] = v87;
  v61[1] = v88;
  v61[12] = v101;
  char v29 = specialized Sequence.compactMap<A>(_:)((uint64_t)v61);
  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v100);
  uint64_t v30 = v29[2];
  if (v30)
  {
    char v31 = 0;
    uint64_t v32 = v30 - 1;
    for (uint64_t i = v29 + 6; ; i += 9)
    {
      if (v31)
      {
        if (!v32) {
          return swift_bridgeObjectRelease();
        }
        char v31 = 1;
      }
      else
      {
        unint64_t v34 = (void *)i[6];
        v53[0] = 0;
        long long v35 = *(_OWORD **)a5;
        long long v36 = *(_OWORD *)(*(void *)a5 + 16);
        long long v37 = *(_OWORD *)(*(void *)a5 + 48);
        v60[1] = *(_OWORD *)(*(void *)a5 + 32);
        v60[2] = v37;
        v60[0] = v36;
        id v38 = v34;
        swift_retain();
        outlined retain of Locale((uint64_t)v60);
        BigString.startIndex.getter();
        outlined release of Locale((uint64_t)v60);
        long long v39 = v35[1];
        long long v40 = v35[3];
        v59[1] = v35[2];
        v59[2] = v40;
        v59[0] = v39;
        long long v41 = v35[1];
        v83[1] = v35[2];
        v83[2] = v40;
        v83[0] = v41;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v83, (uint64_t)v84);
        outlined retain of Locale((uint64_t)v84);
        BigString.endIndex.getter();
        outlined release of Locale((uint64_t)v59);
        long long v42 = v35[1];
        long long v43 = v35[3];
        v58[1] = v35[2];
        v58[2] = v43;
        v58[0] = v42;
        long long v44 = v35[1];
        v85[1] = v35[2];
        v85[2] = v43;
        v85[0] = v44;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v85, (uint64_t)v86);
        outlined retain of Locale((uint64_t)v86);
        swift_release();
        BigString.utf16.getter();
        BigString.startIndex.getter();
        uint64_t v45 = BigString.UTF16View.distance(from:to:)();
        outlined release of Locale((uint64_t)v56);
        BigString.utf16.getter();
        uint64_t v46 = BigString.UTF16View.distance(from:to:)();
        outlined release of Locale((uint64_t)v58);
        outlined release of Locale((uint64_t)v57);
        a3(v38, v45, v46, v53);

        if (!v32) {
          return swift_bridgeObjectRelease();
        }
        char v31 = v53[0];
      }
      --v32;
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized AttributedString._addAttributesNotPresentMergingInlinePresentationIntents(_:to:)(uint64_t result, long long *a2)
{
  if (!*(void *)(result + 16)) {
    return result;
  }
  uint64_t v3 = v2;
  uint64_t v5 = *((void *)a2 + 6);
  uint64_t v4 = *((void *)a2 + 7);
  long long v222 = a2[1];
  long long v225 = a2[2];
  long long v219 = *a2;
  uint64_t v179 = result;
  uint64_t v182 = specialized AttributedString._AttributeStorage.subscript.getter(result);
  char v181 = v6;
  long long v7 = (_OWORD *)*v2;
  long long v8 = *(_OWORD *)(*v2 + 16);
  long long v9 = *(_OWORD *)(*v2 + 32);
  v322[2] = *(_OWORD *)(*v2 + 48);
  v322[1] = v9;
  v322[0] = v8;
  swift_retain();
  outlined retain of Locale((uint64_t)v322);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v322);
  long long v10 = v7[1];
  long long v11 = v7[2];
  long long v321 = v7[3];
  v320[1] = v11;
  v320[0] = v10;
  long long v12 = v7[1];
  long long v13 = v7[2];
  v323[2] = v321;
  v323[1] = v13;
  v323[0] = v12;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v323, (uint64_t)v324);
  outlined retain of Locale((uint64_t)v324);
  BigString.endIndex.getter();
  outlined release of Locale((uint64_t)v320);
  swift_release();
  long long v312 = v219;
  long long v313 = v222;
  long long v314 = v225;
  uint64_t v315 = v5;
  uint64_t v316 = v4;
  long long v14 = v7[2];
  long long v317 = v7[1];
  long long v318 = v14;
  long long v319 = v7[3];
  swift_retain_n();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v251);
  uint64_t v15 = BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v22 = BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  outlined release of Locale((uint64_t)v252);
  swift_release();
  uint64_t v304 = v15;
  uint64_t v305 = v17;
  uint64_t v306 = v19;
  uint64_t v307 = v21;
  uint64_t v308 = v22;
  uint64_t v309 = v24;
  uint64_t v310 = v26;
  uint64_t v311 = v28;
  uint64_t result = AttributedString.Runs.init(_:in:)((uint64_t)v7, &v235);
  char v29 = (void *)v235;
  long long v180 = v239;
  uint64_t v30 = v239;
  uint64_t v183 = *((void *)&v235 + 1);
  if (*((void *)&v235 + 1) == (void)v239) {
    return swift_release();
  }
  uint64_t v31 = *(void *)&v237[0];
  uint64_t v196 = (long long *)(v235 + 16);
  uint64_t v32 = v182;
  if (v181) {
    uint64_t v32 = 0;
  }
  uint64_t v168 = v32;
  long long v171 = v241;
  long long v172 = v240;
  long long v170 = v242;
  uint64_t v204 = v243;
  uint64_t v203 = v244;
  uint64_t v202 = v245;
  uint64_t v201 = v246;
  uint64_t v200 = v247;
  uint64_t v178 = v236;
  uint64_t v214 = v236;
  uint64_t v176 = *(void *)&v237[0];
  uint64_t v177 = *((void *)&v236 + 1);
  unint64_t v206 = *((void *)&v236 + 1);
  uint64_t v207 = *((void *)&v237[1] + 1);
  uint64_t v174 = *(void *)&v237[1];
  uint64_t v175 = *((void *)&v237[0] + 1);
  uint64_t v33 = *((void *)&v237[0] + 1);
  uint64_t v226 = *(void *)&v237[1];
  uint64_t v198 = v249;
  uint64_t v199 = v248;
  uint64_t v173 = *((void *)&v237[1] + 1);
  uint64_t v169 = v238;
  uint64_t v34 = v238;
  uint64_t v35 = *((void *)&v235 + 1);
  uint64_t v197 = v250;
  long long v205 = v3;
  uint64_t v210 = (void *)v235;
  uint64_t v167 = v239;
  while (1)
  {
    if (v35 >= v30)
    {
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
      goto LABEL_155;
    }
    *(void *)&long long v235 = v29;
    *((void *)&v235 + 1) = v183;
    *(void *)&long long v236 = v178;
    *((void *)&v236 + 1) = v177;
    *(void *)&v237[0] = v176;
    *((void *)&v237[0] + 1) = v175;
    *(void *)&v237[1] = v174;
    *((void *)&v237[1] + 1) = v173;
    long long v239 = v180;
    long long v240 = v172;
    long long v241 = v171;
    long long v242 = v170;
    uint64_t v238 = v169;
    uint64_t v243 = v204;
    uint64_t v244 = v203;
    uint64_t v245 = v202;
    uint64_t v246 = v201;
    uint64_t v247 = v200;
    uint64_t v248 = v199;
    uint64_t v249 = v198;
    uint64_t v250 = v197;
    v234[0] = v35;
    v234[1] = v214;
    v234[2] = v206;
    v234[3] = v31;
    v234[4] = v33;
    v234[5] = v226;
    v234[6] = v207;
    v234[7] = v34;
    uint64_t result = (uint64_t)AttributedString.Runs._resolve(_:)(v234, &v227);
    if (v227 != v29[11]) {
      goto LABEL_147;
    }
    uint64_t v223 = v34;
    uint64_t v216 = v31;
    uint64_t v220 = v35;
    unint64_t v36 = v228;
    uint64_t v37 = v230;
    uint64_t v38 = v231;
    uint64_t v39 = v232;
    uint64_t v40 = v233;
    if (v229)
    {
      long long v41 = (void *)(v229 + 24 * ((v228 >> ((4 * *(unsigned char *)(v229 + 18) + 8) & 0x3C)) & 0xF));
      uint64_t v42 = v41[4];
      unint64_t v211 = v41[3];
      unint64_t v43 = v41[5];
      swift_retain();
      uint64_t v209 = v42;
      swift_bridgeObjectRetain();
      unint64_t v208 = v43;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v44 = v29[8];
      swift_retain();
      swift_unknownObjectRetain();
      unint64_t v211 = specialized Rope._Node.subscript.getter(v36, v44);
      unint64_t v208 = v46;
      uint64_t v209 = v45;
      swift_unknownObjectRelease();
    }
    char v47 = static BigString.Index.< infix(_:_:)();
    if (v47) {
      uint64_t v48 = v37;
    }
    else {
      uint64_t v48 = v204;
    }
    if (v47) {
      uint64_t v49 = v38;
    }
    else {
      uint64_t v49 = v203;
    }
    if (v47) {
      uint64_t v50 = v39;
    }
    else {
      uint64_t v50 = v202;
    }
    if (v47) {
      uint64_t v51 = v40;
    }
    else {
      uint64_t v51 = v201;
    }
    uint64_t result = BigString.Index.utf8Offset.getter();
    int64_t v52 = result + v211;
    if (__OFADD__(result, v211)) {
      goto LABEL_148;
    }
    uint64_t v53 = BigString.Index.utf8Offset.getter();
    if (v53 < v52) {
      int64_t v52 = v53;
    }
    long long v54 = *v196;
    long long v55 = v196[1];
    long long v303 = v196[2];
    v302[1] = v55;
    v302[0] = v54;
    long long v56 = *v196;
    long long v57 = v196[1];
    v325[2] = v303;
    v325[1] = v57;
    v325[0] = v56;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v325, (uint64_t)v326);
    outlined retain of Locale((uint64_t)v326);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v302);
    uint64_t result = BigString.Index.utf8Offset.getter();
    if (__OFSUB__(v52, result)) {
      goto LABEL_149;
    }
    uint64_t v58 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v60 = v59;
    uint64_t v62 = v61;
    uint64_t v64 = v63;
    outlined release of Locale((uint64_t)v253);
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_150;
    }
    uint64_t v192 = v50;
    uint64_t v194 = v48;
    uint64_t v270 = v48;
    uint64_t v188 = v64;
    uint64_t v190 = v49;
    uint64_t v271 = v49;
    uint64_t v272 = v50;
    uint64_t v273 = v51;
    uint64_t v185 = v58;
    uint64_t v186 = v60;
    uint64_t v274 = v58;
    uint64_t v275 = v60;
    uint64_t v184 = v62;
    uint64_t v276 = v62;
    uint64_t v277 = v64;
    unint64_t v65 = v210[8];
    uint64_t v66 = v210[9];
    uint64_t v67 = v210[11];
    uint64_t v212 = v210[10];
    uint64_t v68 = v216;
    if (v216 == 1 || v214 != v67) {
      break;
    }
    uint64_t v69 = v210[9];
    uint64_t v70 = v220;
    if (v223 == 2)
    {
      unint64_t v71 = v206;
      if (v65)
      {
        swift_retain();
        swift_unknownObjectRetain();
        uint64_t v72 = v214;
        uint64_t result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v214, v206, v216, v65, v66, v212);
        uint64_t v73 = result;
        goto LABEL_118;
      }
      uint64_t result = swift_retain();
      uint64_t v73 = 0;
    }
    else
    {
      swift_unknownObjectRetain();
      swift_retain();
      uint64_t result = BigString.Index.utf8Offset.getter();
      uint64_t v73 = result;
      unint64_t v71 = v206;
    }
    uint64_t v72 = v214;
LABEL_118:
    *(void *)&long long v235 = v72;
    *((void *)&v235 + 1) = v71;
    *(void *)&long long v236 = v68;
    BOOL v81 = __OFADD__(v70, 1);
    uint64_t v94 = v70 + 1;
    if (v81) {
      goto LABEL_151;
    }
    if (v72 != v67) {
      goto LABEL_152;
    }
    if (v68)
    {
      unint64_t v95 = *(void *)(v68 + 24 * ((v71 >> ((4 * *(unsigned char *)(v68 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v95 = specialized Rope._Node.subscript.getter(v71, v65);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    BOOL v81 = __OFADD__(v73, v95);
    unint64_t v96 = v73 + v95;
    if (v81) {
      goto LABEL_153;
    }
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v235, v65, v69, v212, v67);
    swift_unknownObjectRelease_n();
    unint64_t v206 = *((void *)&v235 + 1);
    uint64_t v214 = v235;
    uint64_t v97 = v236;
    uint64_t v221 = v94;
    if (v223 == 2)
    {
      long long v98 = *v196;
      long long v99 = v196[1];
      long long v301 = v196[2];
      v300[1] = v99;
      v300[0] = v98;
      long long v100 = *v196;
      long long v101 = v196[1];
      v327[2] = v301;
      v327[1] = v101;
      v327[0] = v100;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v327, (uint64_t)v328);
      outlined retain of Locale((uint64_t)v328);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v300);
      long long v102 = *v196;
      long long v103 = v196[1];
      long long v299 = v196[2];
      v298[1] = v103;
      v298[0] = v102;
      long long v104 = *v196;
      long long v105 = v196[1];
      v329[2] = v299;
      v329[1] = v105;
      v329[0] = v104;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v329, (uint64_t)v330);
      outlined retain of Locale((uint64_t)v330);
      BigString.startIndex.getter();
      outlined release of Locale((uint64_t)v298);
      uint64_t v106 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v108 = v107;
      uint64_t v207 = v109;
      uint64_t v224 = v110;
      outlined release of Locale((uint64_t)v255);
      uint64_t v111 = v210;
    }
    else
    {
      long long v112 = *v196;
      long long v113 = v196[1];
      long long v297 = v196[2];
      v296[1] = v113;
      v296[0] = v112;
      long long v114 = *v196;
      long long v115 = v196[1];
      v331[2] = v297;
      v331[1] = v115;
      v331[0] = v114;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v331, (uint64_t)v332);
      outlined retain of Locale((uint64_t)v332);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v296);
      uint64_t result = BigString.Index.utf8Offset.getter();
      uint64_t v111 = v210;
      if (__OFSUB__(v96, result)) {
        goto LABEL_161;
      }
      uint64_t v106 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v108 = v116;
      uint64_t v207 = v117;
      uint64_t v224 = v118;
      outlined release of Locale((uint64_t)v254);
    }
    swift_release();
    uint64_t v285 = v209;
    unint64_t v286 = v208;
    uint64_t v287 = v194;
    uint64_t v288 = v190;
    uint64_t v289 = v192;
    uint64_t v290 = v51;
    uint64_t v291 = v185;
    uint64_t v292 = v186;
    uint64_t v293 = v184;
    uint64_t v294 = v188;
    long long v295 = v111;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v119 = specialized AttributedString.Runs.Run.subscript.getter();
    char v121 = v120;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v121) {
      uint64_t v122 = v182;
    }
    else {
      uint64_t v122 = v119 | v168;
    }
    uint64_t v227 = v209;
    unint64_t v228 = v208;
    LOBYTE(v235) = 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(v179, (char *)&v235);
    if (one-time initialization token for name != -1) {
      swift_once();
    }
    char v123 = v121 & v181;
    unint64_t v125 = static AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute.name;
    unint64_t v124 = qword_1E8ED5F88;
    uint64_t v215 = v106;
    uint64_t v218 = v97;
    if (v123)
    {
      memset(v237, 0, sizeof(v237));
      long long v235 = 0u;
      long long v236 = 0u;
    }
    else
    {
      type metadata accessor for NSInlinePresentationIntent(0);
      *((void *)&v236 + 1) = v126;
      *(void *)&v237[0] = lazy protocol witness table accessor for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent();
      *(void *)&long long v235 = v122;
      *(_OWORD *)((char *)v237 + 8) = xmmword_182106C90;
      BYTE8(v237[1]) = 1;
    }
    uint64_t v238 = 0;
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v235, v125, v124);
    swift_bridgeObjectRelease();
    uint64_t v127 = v228;
    uint64_t v213 = v227;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      long long v128 = (void *)*v205;
      long long v129 = *(_OWORD *)(*v205 + 16);
      long long v130 = *(_OWORD *)(*v205 + 32);
      v284[2] = *(_OWORD *)(*v205 + 48);
      v284[1] = v130;
      v284[0] = v129;
      uint64_t v131 = v128[8];
      uint64_t v132 = v128[9];
      uint64_t v133 = v128[10];
      uint64_t v134 = v128[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v284);
      swift_unknownObjectRetain();
      *long long v205 = AttributedString.Guts.init(string:runs:)(v284, v131, v132, v133, v134);
      swift_release();
    }
    uint64_t v195 = v127;
    uint64_t v226 = v108;
    uint64_t v135 = (_OWORD *)*v205;
    long long v136 = *(_OWORD *)(*v205 + 16);
    long long v137 = *(_OWORD *)(*v205 + 32);
    v283[2] = *(_OWORD *)(*v205 + 48);
    v283[1] = v137;
    v283[0] = v136;
    swift_retain();
    outlined retain of Locale((uint64_t)v283);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v283);
    long long v138 = v135[1];
    long long v139 = v135[2];
    long long v282 = v135[3];
    v281[1] = v139;
    v281[0] = v138;
    long long v140 = v135[1];
    v333[1] = v135[2];
    v333[2] = v282;
    v333[0] = v140;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v333, (uint64_t)v334);
    outlined retain of Locale((uint64_t)v334);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)v281);
    swift_release();
    uint64_t v141 = *v205;
    long long v142 = *(_OWORD *)(*v205 + 32);
    long long v278 = *(_OWORD *)(*v205 + 16);
    long long v279 = v142;
    long long v280 = *(_OWORD *)(v141 + 48);
    swift_retain_n();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v256);
    uint64_t v143 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v145 = v144;
    uint64_t v147 = v146;
    uint64_t v149 = v148;
    uint64_t v150 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v191 = v151;
    uint64_t v193 = v150;
    uint64_t v187 = v153;
    uint64_t v189 = v152;
    outlined release of Locale((uint64_t)v257);
    swift_release();
    if (one-time initialization token for currentIdentity != -1) {
      swift_once();
    }
    long long v154 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    long long v155 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v155);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v154, (uint64_t *)&v235);
    os_unfair_lock_unlock(v155);
    swift_release();
    BigString.init()();
    *(void *)&long long v235 = 0;
    MEMORY[0x185309530](&v235, 8);
    uint64_t v156 = v235;
    type metadata accessor for AttributedString.Guts();
    uint64_t v157 = swift_allocObject();
    uint64_t result = BigString.isEmpty.getter();
    if ((result & 1) == 0) {
      goto LABEL_154;
    }
    long long v158 = v259;
    *(_OWORD *)(v157 + 16) = v258;
    *(_OWORD *)(v157 + 32) = v158;
    *(_OWORD *)(v157 + 48) = v260;
    *(void *)(v157 + 64) = 0;
    *(void *)(v157 + 72) = 0;
    *(void *)(v157 + 80) = 0;
    *(void *)(v157 + 88) = v156;
    long long v159 = v205;
    *long long v205 = v157;
    swift_release();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      long long v160 = *(_OWORD *)(v141 + 32);
      v269[0] = *(_OWORD *)(v141 + 16);
      v269[1] = v160;
      v269[2] = *(_OWORD *)(v141 + 48);
      uint64_t v161 = *(void *)(v141 + 64);
      uint64_t v162 = *(void *)(v141 + 72);
      uint64_t v164 = *(void *)(v141 + 80);
      uint64_t v163 = *(void *)(v141 + 88);
      swift_allocObject();
      outlined retain of Locale((uint64_t)v269);
      swift_unknownObjectRetain();
      uint64_t v165 = v164;
      long long v159 = v205;
      uint64_t v166 = AttributedString.Guts.init(string:runs:)(v269, v161, v162, v165, v163);
      swift_release();
      uint64_t v141 = v166;
    }
    uint64_t v30 = v167;
    uint64_t v261 = v143;
    uint64_t v262 = v145;
    uint64_t v263 = v147;
    uint64_t v264 = v149;
    uint64_t v265 = v193;
    uint64_t v266 = v191;
    uint64_t v267 = v189;
    uint64_t v268 = v187;
    AttributedString.Guts.setAttributes(_:in:)(v213, v195);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *long long v159 = v141;
    char v29 = v210;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    uint64_t v31 = v218;
    uint64_t v35 = v221;
    uint64_t v33 = v215;
    uint64_t v34 = v224;
    if (v221 == v167) {
      return swift_release();
    }
  }
  if (v65) {
    uint64_t v74 = v210[9];
  }
  else {
    uint64_t v74 = 0;
  }
  uint64_t v70 = v220;
  if (v220 < 0 || v74 < v220) {
    goto LABEL_160;
  }
  if (!v65 || v220 >= v66 || !*(_WORD *)(v65 + 16))
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    unint64_t v71 = specialized Rope._endPath.getter(v65);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v68 = 0;
    if (!v65)
    {
      uint64_t v69 = v66;
      uint64_t v73 = 0;
      goto LABEL_117;
    }
LABEL_76:
    swift_unknownObjectRetain();
    uint64_t v69 = v66;
    uint64_t v73 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v67, v71, v68, v65, v66, v212);
    uint64_t result = swift_unknownObjectRelease_n();
LABEL_117:
    uint64_t v72 = v67;
    goto LABEL_118;
  }
  uint64_t v217 = v210[9];
  uint64_t v75 = *(unsigned __int8 *)(v65 + 18);
  if (*(unsigned char *)(v65 + 18))
  {
    swift_unknownObjectRetain_n();
    uint64_t result = swift_retain();
    uint64_t v76 = v220;
    unint64_t v77 = v65;
    while (1)
    {
      unint64_t v79 = *(unsigned __int16 *)(v77 + 16);
      if (*(_WORD *)(v77 + 16))
      {
        uint64_t v80 = *(void *)(v77 + 32);
        BOOL v81 = __OFSUB__(v76, v80);
        uint64_t v82 = v76 - v80;
        if (v81) {
          goto LABEL_144;
        }
        if (__OFADD__(v82, 1)) {
          goto LABEL_145;
        }
        if (v82 + 1 <= 0)
        {
          unint64_t v79 = 0;
          goto LABEL_48;
        }
        if (v79 != 1)
        {
          uint64_t v83 = *(void *)(v77 + 56);
          uint64_t v76 = v82 - v83;
          if (__OFSUB__(v82, v83)) {
            goto LABEL_158;
          }
          if (__OFADD__(v76, 1)) {
            goto LABEL_159;
          }
          if (v76 + 1 < 1)
          {
            unint64_t v79 = 1;
            uint64_t v76 = v82;
            goto LABEL_48;
          }
          if (v79 == 2) {
            goto LABEL_47;
          }
          uint64_t v84 = *(void *)(v77 + 80);
          BOOL v81 = __OFSUB__(v76, v84);
          uint64_t v82 = v76 - v84;
          if (v81) {
            goto LABEL_162;
          }
          if (__OFADD__(v82, 1)) {
            goto LABEL_163;
          }
          if (v82 + 1 < 1)
          {
            unint64_t v79 = 2;
            goto LABEL_48;
          }
          if (v79 != 3)
          {
            uint64_t v85 = 3;
            if (v79 > 3) {
              uint64_t v85 = *(unsigned __int16 *)(v77 + 16);
            }
            long long v86 = (void *)(v77 + 104);
            uint64_t v87 = 3;
            while (v85 != v87)
            {
              uint64_t v76 = v82 - *v86;
              if (__OFSUB__(v82, *v86)) {
                goto LABEL_156;
              }
              if (__OFADD__(v76, 1)) {
                goto LABEL_157;
              }
              if (v76 + 1 < 1)
              {
                unint64_t v79 = v87;
                uint64_t v76 = v82;
                goto LABEL_48;
              }
              ++v87;
              v86 += 3;
              uint64_t v82 = v76;
              if (v79 == v87) {
                goto LABEL_47;
              }
            }
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
LABEL_161:
            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
LABEL_165:
            __break(1u);
            goto LABEL_166;
          }
        }
        uint64_t v76 = v82;
      }
LABEL_47:
      if (v76)
      {
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
        goto LABEL_146;
      }
LABEL_48:
      char v78 = (4 * *(unsigned char *)(v77 + 18) + 8) & 0x3C;
      uint64_t v75 = ((-15 << v78) - 1) & v75 | (v79 << v78);
      uint64_t v68 = *(void *)(v77 + 24 + 24 * v79);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      unint64_t v77 = v68;
      if (!*(unsigned char *)(v68 + 18)) {
        goto LABEL_81;
      }
    }
  }
  swift_unknownObjectRetain_n();
  uint64_t result = swift_retain();
  uint64_t v76 = v220;
  uint64_t v68 = v65;
LABEL_81:
  unint64_t v88 = *(unsigned __int16 *)(v68 + 16);
  if (!*(_WORD *)(v68 + 16))
  {
    if (v76) {
      goto LABEL_164;
    }
    goto LABEL_115;
  }
  unint64_t v89 = v76 - 1;
  if (__OFSUB__(v76, 1)) {
    goto LABEL_165;
  }
  if (!__OFADD__(v89, 1))
  {
    if (v76 <= 0)
    {
      unint64_t v88 = 0;
    }
    else
    {
      if (v88 == 1) {
        goto LABEL_94;
      }
      BOOL v81 = __OFSUB__(v89, 1);
      unint64_t v89 = v76 - 2;
      if (v81) {
        goto LABEL_169;
      }
      if (__OFADD__(v89, 1)) {
        goto LABEL_170;
      }
      if (v76 - 1 < 1)
      {
        unint64_t v88 = 1;
        goto LABEL_115;
      }
      if (v88 == 2)
      {
LABEL_94:
        if (v89) {
          goto LABEL_164;
        }
        goto LABEL_115;
      }
      BOOL v81 = __OFSUB__(v89, 1);
      unint64_t v89 = v76 - 3;
      if (v81) {
        goto LABEL_171;
      }
      if (__OFADD__(v89, 1)) {
        goto LABEL_172;
      }
      if (v76 - 2 >= 1)
      {
        if (v88 != 3)
        {
          uint64_t v90 = 0;
          uint64_t v91 = 3;
          if (v88 > 3) {
            uint64_t v91 = *(unsigned __int16 *)(v68 + 16);
          }
          unint64_t v92 = v91 - 3;
          if (v89 >= v88 - 4) {
            unint64_t v93 = v88 - 4;
          }
          else {
            unint64_t v93 = v76 - 3;
          }
          if (v93 >= v76 + 0x7FFFFFFFFFFFFFFDLL) {
            unint64_t v93 = v76 + 0x7FFFFFFFFFFFFFFDLL;
          }
          while (v92 > v93)
          {
            if (v76 + 0x7FFFFFFFFFFFFFFDLL == v90) {
              goto LABEL_168;
            }
            if (v89 == v90)
            {
              unint64_t v88 = v76;
              goto LABEL_115;
            }
            if (v88 - 3 == ++v90)
            {
              if (v89 == v90) {
                goto LABEL_115;
              }
              goto LABEL_164;
            }
          }
          goto LABEL_167;
        }
        goto LABEL_94;
      }
      unint64_t v88 = 2;
    }
LABEL_115:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v71 = v75 & 0xFFFFFFFFFFFFF0FFLL | (v88 << 8);
    uint64_t v66 = v217;
    uint64_t v70 = v220;
    goto LABEL_76;
  }
LABEL_166:
  __break(1u);
LABEL_167:
  __break(1u);
LABEL_168:
  __break(1u);
LABEL_169:
  __break(1u);
LABEL_170:
  __break(1u);
LABEL_171:
  __break(1u);
LABEL_172:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent()
{
  unint64_t result = lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent;
  if (!lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent)
  {
    type metadata accessor for NSInlinePresentationIntent(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent);
  }
  return result;
}

uint64_t outlined retain of AttributedString.Runs.Run(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of AttributedString.Runs.Run(uint64_t a1)
{
  return a1;
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  thunk for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(a1, a2, a3, a4, a5, *(void *)(v5 + 16));
}

uint64_t sub_181F68880()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in closure #11 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, a3, a4, a7);
}

uint64_t sub_181F688E4()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 96, 7);
}

uint64_t partial apply for closure #1 in closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1)
{
  return closure #1 in closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(a1, (void *)(v1 + 16));
}

uint64_t outlined release of LazyFilterSequence<DefaultIndices<AttributedString.CharacterView>>.Iterator(uint64_t a1)
{
  return a1;
}

uint64_t sub_181F6895C()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSLocalizedNumberFormatRule, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 16) + 16))(*(void *)(v4 + 16), a1, a2, a3, a4);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Swift.AnyObject?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return thunk for @escaping @callee_unowned @convention(block) (@unowned Swift.AnyObject?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(a1, a2, a3, a4, *(void *)(v4 + 16));
}

uint64_t sub_181F689C0()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_181F68A00()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181F68A10()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181F68A20()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_181F68A30()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181F68A40()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_181F68A50()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181F68A60()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_181F68A70()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181F68A80()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_181F68A90()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181F68AA0()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_181F68AB0()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181F68AC0()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_181F68AF8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181F68B08()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181F68B40()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181F68B54()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t outlined copy of TermOfAddress?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  if (a13 != 4) {
    return outlined copy of TermOfAddress._TermOfAddress(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  }
  return result;
}

uint64_t sub_181F68B8C()
{
  return MEMORY[0x1F4186498](v0, 128, 7);
}

uint64_t String.Encoding.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

BOOL static String.Encoding.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t String.Encoding.rawValue.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*String.Encoding.rawValue.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void static String.Encoding.nextstep.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static String.Encoding.japaneseEUC.getter(void *a1@<X8>)
{
  *a1 = 3;
}

void static String.Encoding.isoLatin1.getter(void *a1@<X8>)
{
  *a1 = 5;
}

void static String.Encoding.symbol.getter(void *a1@<X8>)
{
  *a1 = 6;
}

void static String.Encoding.nonLossyASCII.getter(void *a1@<X8>)
{
  *a1 = 7;
}

void static String.Encoding.shiftJIS.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static String.Encoding.isoLatin2.getter(void *a1@<X8>)
{
  *a1 = 9;
}

void static String.Encoding.windowsCP1251.getter(void *a1@<X8>)
{
  *a1 = 11;
}

void static String.Encoding.windowsCP1252.getter(void *a1@<X8>)
{
  *a1 = 12;
}

void static String.Encoding.windowsCP1253.getter(void *a1@<X8>)
{
  *a1 = 13;
}

void static String.Encoding.windowsCP1254.getter(void *a1@<X8>)
{
  *a1 = 14;
}

void static String.Encoding.windowsCP1250.getter(void *a1@<X8>)
{
  *a1 = 15;
}

void static String.Encoding.iso2022JP.getter(void *a1@<X8>)
{
  *a1 = 21;
}

void static String.Encoding.macOSRoman.getter(void *a1@<X8>)
{
  *a1 = 30;
}

void static String.Encoding.utf16.getter(void *a1@<X8>)
{
  *a1 = 10;
}

void static String.Encoding.utf16BigEndian.getter(void *a1@<X8>)
{
  *a1 = 2415919360;
}

void static String.Encoding.utf16LittleEndian.getter(void *a1@<X8>)
{
  *a1 = 2483028224;
}

void static String.Encoding.utf32.getter(void *a1@<X8>)
{
  *a1 = 2348810496;
}

void static String.Encoding.utf32BigEndian.getter(void *a1@<X8>)
{
  *a1 = 2550137088;
}

void static String.Encoding.utf32LittleEndian.getter(void *a1@<X8>)
{
  *a1 = 2617245952;
}

void String.Encoding.hashValue.getter()
{
}

void protocol witness for Hashable.hashValue.getter in conformance String.Encoding()
{
}

id String.Encoding.description.getter()
{
  id v1 = objc_msgSend(self, sel_localizedNameOfStringEncoding_, *v0);
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

unint64_t lazy protocol witness table accessor for type String.Encoding and conformance String.Encoding()
{
  unint64_t result = lazy protocol witness table cache variable for type String.Encoding and conformance String.Encoding;
  if (!lazy protocol witness table cache variable for type String.Encoding and conformance String.Encoding)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.Encoding and conformance String.Encoding);
  }
  return result;
}

id protocol witness for CustomStringConvertible.description.getter in conformance String.Encoding()
{
  id v1 = objc_msgSend(self, sel_localizedNameOfStringEncoding_, *v0);
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

uint64_t Unicode.Scalar._stripDiacritics()(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(a1), 2);
  BOOL v3 = BuiltInUnicodeScalarSet._isMemberOfBitmap(_:_:)(v1, v2, 0x700030002);
  if (v3)
  {
    MEMORY[0x1F4188790](v3);
    if (CFUniCharDecomposeCharacter() >= 1)
    {
      if (v5 >= 0x510) {
        return v1;
      }
      else {
        return v5;
      }
    }
  }
  return v1;
}

void PersonNameComponents.FormatStyle.style.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *PersonNameComponents.FormatStyle.style.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*PersonNameComponents.FormatStyle.style.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t PersonNameComponents.FormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 8);
  return swift_unknownObjectRetain();
}

__n128 PersonNameComponents.FormatStyle.locale.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  *(__n128 *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*PersonNameComponents.FormatStyle.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t PersonNameComponents.FormatStyle.attributed.getter@<X0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = *(unsigned char *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  return swift_unknownObjectRetain();
}

__n128 PersonNameComponents.FormatStyle.init(style:locale:)@<Q0>(unsigned char *a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = *a1;
  __n128 result = *a2;
  *(__n128 *)(a3 + 8) = *a2;
  return result;
}

uint64_t PersonNameComponents.FormatStyle.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = *v2;
  *(_OWORD *)(a2 + 8) = *a1;
  return swift_unknownObjectRetain();
}

id PersonNameComponents.FormatStyle.format(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *v1;
  uint64_t v4 = *((void *)v1 + 2);
  id v5 = objc_msgSend(objc_allocWithZone((Class)NSPersonNameComponentsFormatter), sel_init);
  objc_msgSend(v5, sel_setStyle_, v3 + 1);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 488))(ObjectType, v4);
  objc_msgSend(v5, sel_setLocale_, v7);

  objc_msgSend(*(id *)(v2 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSPersonNameComponents();
  swift_dynamicCast();
  id v8 = objc_msgSend(v5, sel_stringFromPersonNameComponents_, v11);

  id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  return v9;
}

uint64_t PersonNameComponents.FormatStyle.Style.rawValue.getter()
{
  return *v0 + 1;
}

unint64_t PersonNameComponents.FormatStyle.Style.init(rawValue:)@<X0>(unint64_t result@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v2 = 0x302010004uLL >> (8 * result);
  if (result >= 5) {
    LOBYTE(v2) = 4;
  }
  *a2 = v2;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PersonNameComponents.FormatStyle.Style@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return PersonNameComponents.FormatStyle.Style.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PersonNameComponents.FormatStyle.Style()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PersonNameComponents.FormatStyle.Style()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t static PersonNameComponents.FormatStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized static PersonNameComponents.FormatStyle.== infix(_:_:)(a1, a2) & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PersonNameComponents.FormatStyle.CodingKeys()
{
  if (*v0) {
    return 0x656C61636F6CLL;
  }
  else {
    return 0x656C797473;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PersonNameComponents.FormatStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PersonNameComponents.FormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PersonNameComponents.FormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PersonNameComponents.FormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t PersonNameComponents.FormatStyle.encode(to:)(void *a1)
{
  return PersonNameComponents.FormatStyle.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<PersonNameComponents.FormatStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys);
}

uint64_t PersonNameComponents.FormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PersonNameComponents.FormatStyle.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<PersonNameComponents.FormatStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys, a2);
}

id protocol witness for FormatStyle.format(_:) in conformance PersonNameComponents.FormatStyle@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  id result = PersonNameComponents.FormatStyle.format(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance PersonNameComponents.FormatStyle@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = *v2;
  *(_OWORD *)(a2 + 8) = *a1;
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PersonNameComponents.FormatStyle@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PersonNameComponents.FormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PersonNameComponents.FormatStyle(void *a1)
{
  return PersonNameComponents.FormatStyle.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PersonNameComponents.FormatStyle(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized static PersonNameComponents.FormatStyle.== infix(_:_:)(a1, a2) & 1;
}

uint64_t (*PersonNameComponents.AttributedStyle.style.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t (*PersonNameComponents.AttributedStyle.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void PersonNameComponents.AttributedStyle.format(_:)(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  uint64_t v6 = *((void *)v2 + 2);
  id v7 = objc_msgSend(objc_allocWithZone((Class)NSPersonNameComponentsFormatter), sel_init);
  objc_msgSend(v7, sel_setStyle_, v5 + 1);
  uint64_t ObjectType = swift_getObjectType();
  id v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 488))(ObjectType, v6);
  objc_msgSend(v7, sel_setLocale_, v9);

  objc_msgSend(*(id *)(v4 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSPersonNameComponents();
  swift_dynamicCast();
  id v10 = objc_msgSend(v7, sel_annotatedStringFromPersonNameComponents_, v12);

  long long v11 = specialized static AttributeScope.scopeDescription.getter();
  swift_bridgeObjectRelease();
  AttributedString.init(_:attributeTable:options:)(v10, (uint64_t)v11, 0, v13);

  *a2 = v13[0];
}

uint64_t PersonNameComponents.FormatStyle.hash(into:)(uint64_t a1)
{
  void (*v7)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned char *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  Swift::UInt v35;
  Swift::UInt v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  unsigned char v40[144];
  unsigned char v41[8];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  char v58;
  void v59[18];
  unsigned char v60[144];
  unsigned char v61[152];
  uint64_t vars8;

  uint64_t v3 = *((void *)v1 + 2);
  Hasher._combine(_:)(*v1 + 1);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  if ((v5(ObjectType, v3) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    id v7 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 464);
    swift_unknownObjectRetain();
    v7(v59, ObjectType, v3);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v59, (uint64_t)v60);
    outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v61);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v61) == 1)
    {
      Hasher._combine(_:)(0);
      return swift_unknownObjectRelease();
    }
    outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v41);
    Hasher._combine(_:)(1u);
    if (v41[0] == 2)
    {
      id v8 = 0;
    }
    else
    {
      id v8 = v41[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v8);
    id v9 = v42;
    if (v42)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v9 + 16));
      id v10 = *(void *)(v9 + 16);
      if (v10)
      {
        outlined retain of LocalePreferences?((uint64_t)v60, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        long long v11 = v9 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v11 += 16;
          --v10;
        }
        while (v10);
        swift_bridgeObjectRelease();
        if (!v43)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          if (!v44) {
            goto LABEL_16;
          }
          goto LABEL_23;
        }
LABEL_22:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v44)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          long long v12 = v45;
          if (!v45) {
            goto LABEL_17;
          }
          goto LABEL_24;
        }
LABEL_23:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        long long v12 = v45;
        if (!v45)
        {
LABEL_17:
          Hasher._combine(_:)(0);
          long long v13 = v46;
          if (!v46)
          {
LABEL_18:
            Hasher._combine(_:)(0);
            goto LABEL_26;
          }
LABEL_25:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v13);
          swift_bridgeObjectRelease();
LABEL_26:
          uint64_t v16 = v47;
          uint64_t v15 = v48;
          uint64_t v18 = v49;
          uint64_t v17 = v50;
          uint64_t v19 = v51;
          if (v47)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v20 = v15;
            uint64_t v21 = v18;
            uint64_t v22 = v17;
            uint64_t v23 = v19;
            uint64_t v24 = v16;
            _CFObject.hash(into:)();
            if (v15) {
              goto LABEL_28;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            char v29 = v19;
            uint64_t v30 = v15;
            uint64_t v31 = v18;
            uint64_t v32 = v17;
            if (v15)
            {
LABEL_28:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v25 = v15;
              _CFObject.hash(into:)();

              if (v18) {
                goto LABEL_29;
              }
              goto LABEL_34;
            }
          }
          Hasher._combine(_:)(0);
          if (v18)
          {
LABEL_29:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v26 = v18;
            _CFObject.hash(into:)();

            if (v17) {
              goto LABEL_30;
            }
            goto LABEL_35;
          }
LABEL_34:
          Hasher._combine(_:)(0);
          if (v17)
          {
LABEL_30:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v27 = v17;
            _CFObject.hash(into:)();

            if (v19)
            {
LABEL_31:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v28 = v19;
              _CFObject.hash(into:)();

              goto LABEL_37;
            }
LABEL_36:
            Hasher._combine(_:)(0);
            uint64_t v28 = 0;
LABEL_37:

            uint64_t v33 = v52;
            if (v33)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v33);
              swift_bridgeObjectRelease();
              uint64_t v34 = v53;
              if (v53) {
                goto LABEL_39;
              }
            }
            else
            {
              Hasher._combine(_:)(0);
              uint64_t v34 = v53;
              if (v53)
              {
LABEL_39:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v34);
                swift_bridgeObjectRelease();
                if (v54)
                {
LABEL_40:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_44:
                  if (v55 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    uint64_t v35 = v55 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v35);
                  }
                  if (v56 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    unint64_t v36 = v56 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v36);
                  }
                  if (v57 == 2)
                  {
                    uint64_t v37 = 0;
                  }
                  else
                  {
                    uint64_t v37 = v57 & 1;
                    Hasher._combine(_:)(1u);
                  }
                  Hasher._combine(_:)(v37);
                  if (v58 == 2)
                  {
                    uint64_t v38 = 0;
                  }
                  else
                  {
                    uint64_t v39 = v58 & 1;
                    Hasher._combine(_:)(1u);
                    uint64_t v38 = v39;
                  }
                  Hasher._combine(_:)(v38);
                  outlined retain of LocalePreferences?((uint64_t)v60, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?((uint64_t)v60, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  return swift_unknownObjectRelease();
                }
LABEL_43:
                Hasher._combine(_:)(0);
                goto LABEL_44;
              }
            }
            Hasher._combine(_:)(0);
            if (v54) {
              goto LABEL_40;
            }
            goto LABEL_43;
          }
LABEL_35:
          Hasher._combine(_:)(0);
          if (v19) {
            goto LABEL_31;
          }
          goto LABEL_36;
        }
LABEL_24:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v12);
        swift_bridgeObjectRelease();
        long long v13 = v46;
        if (!v46) {
          goto LABEL_18;
        }
        goto LABEL_25;
      }
      outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v40);
      long long v14 = v40;
    }
    else
    {
      Hasher._combine(_:)(0);
      long long v14 = v41;
    }
    outlined retain of LocalePreferences(v14);
    if (!v43) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
  Hasher._combine(_:)(1u);

  return swift_unknownObjectRelease();
}

uint64_t static PersonNameComponents.AttributedStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized static PersonNameComponents.FormatStyle.== infix(_:_:)(a1, a2) & 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PersonNameComponents.AttributedStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PersonNameComponents.AttributedStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t PersonNameComponents.AttributedStyle.encode(to:)(void *a1)
{
  return PersonNameComponents.FormatStyle.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<PersonNameComponents.AttributedStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys);
}

uint64_t PersonNameComponents.FormatStyle.encode(to:)(void *a1, uint64_t *a2, void (*a3)(void))
{
  long long v13 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  id v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v9 = *v3;
  long long v12 = *(_OWORD *)(v3 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v13();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v15) = v9;
  char v16 = 0;
  lazy protocol witness table accessor for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style();
  uint64_t v10 = v14;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v10)
  {
    long long v15 = v12;
    char v16 = 1;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int PersonNameComponents.FormatStyle.hashValue.getter()
{
  void (*v6)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned char *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  Swift::UInt v34;
  Swift::UInt v35;
  Swift::UInt8 v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  unsigned char v40[144];
  unsigned char v41[8];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  char v58;
  void v59[18];
  unsigned char v60[144];
  unsigned char v61[144];
  unsigned char v62[72];

  uint64_t v1 = *v0;
  uint64_t v2 = *((void *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 48);
  swift_unknownObjectRetain();
  if (v4(ObjectType, v2))
  {
    Swift::UInt8 v5 = 1;
LABEL_5:
    Hasher._combine(_:)(v5);
    goto LABEL_56;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 64))(ObjectType, v2);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v2 + 464);
  swift_unknownObjectRetain();
  v6(v59, ObjectType, v2);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v59, (uint64_t)v60);
  outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v61);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v61) == 1)
  {
    Swift::UInt8 v5 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v41);
  Hasher._combine(_:)(1u);
  if (v41[0] == 2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = v41[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v7);
  id v8 = v42;
  if (!v42)
  {
    Hasher._combine(_:)(0);
    long long v13 = v41;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v8 + 16));
  char v9 = *(void *)(v8 + 16);
  if (!v9)
  {
    outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v40);
    long long v13 = v40;
LABEL_20:
    outlined retain of LocalePreferences(v13);
    if (!v43) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v60, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v10 = v8 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v10 += 16;
    --v9;
  }
  while (v9);
  swift_bridgeObjectRelease();
  if (!v43)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v44) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v44)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    long long v11 = v45;
    if (!v45) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v62, v11);
    swift_bridgeObjectRelease();
    long long v12 = v46;
    if (!v46) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  long long v11 = v45;
  if (v45) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  long long v12 = v46;
  if (!v46)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v62, v12);
  swift_bridgeObjectRelease();
LABEL_25:
  long long v15 = v47;
  uint64_t v14 = v48;
  uint64_t v17 = v49;
  char v16 = v50;
  uint64_t v18 = v51;
  if (v47)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v19 = v14;
    uint64_t v20 = v17;
    uint64_t v21 = v16;
    uint64_t v22 = v18;
    uint64_t v23 = v15;
    _CFObject.hash(into:)();
    if (v14) {
      goto LABEL_27;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v28 = v18;
    char v29 = v14;
    uint64_t v30 = v17;
    uint64_t v31 = v16;
    if (v14)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v24 = v14;
      _CFObject.hash(into:)();

      if (v17) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v17)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v25 = v17;
    _CFObject.hash(into:)();

    if (v16) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v18) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v16) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v26 = v16;
  _CFObject.hash(into:)();

  if (v18)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v27 = v18;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  uint64_t v27 = 0;
LABEL_36:

  uint64_t v32 = v52;
  if (v32)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v62, v32);
    swift_bridgeObjectRelease();
    uint64_t v33 = v53;
    if (v53) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v54) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  uint64_t v33 = v53;
  if (!v53) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v62, v33);
  swift_bridgeObjectRelease();
  if (!v54) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v55 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v34 = v55 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v34);
  }
  if (v56 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v35 = v56 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v35);
  }
  if (v57 == 2)
  {
    unint64_t v36 = 0;
  }
  else
  {
    unint64_t v36 = v57 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v36);
  if (v58 == 2)
  {
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v38 = v58 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v37 = v38;
  }
  Hasher._combine(_:)(v37);
  outlined retain of LocalePreferences?((uint64_t)v60, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v60, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

uint64_t PersonNameComponents.AttributedStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PersonNameComponents.FormatStyle.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<PersonNameComponents.AttributedStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys, a2);
}

uint64_t PersonNameComponents.FormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v16 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v15 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  char v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v4)
  {
    uint64_t v11 = v15;
    uint64_t v10 = v16;
    char v18 = 0;
    lazy protocol witness table accessor for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v12 = v17;
    char v18 = 1;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v7);
    long long v13 = v17;
    *(unsigned char *)uint64_t v10 = v12;
    *(_OWORD *)(v10 + 8) = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PersonNameComponents.AttributedStyle@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PersonNameComponents.AttributedStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PersonNameComponents.AttributedStyle(void *a1)
{
  return PersonNameComponents.AttributedStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PersonNameComponents.FormatStyle()
{
  void (*v6)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  Swift::UInt v33;
  Swift::UInt v34;
  Swift::UInt8 v35;
  Swift::UInt8 v36;
  Swift::UInt8 v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  char v55;
  char v56;
  void v57[18];
  unsigned char v58[144];
  unsigned char v59[144];
  unsigned char v60[72];

  uint64_t v1 = *v0;
  uint64_t v2 = *((void *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 48);
  swift_unknownObjectRetain();
  if (v4(ObjectType, v2))
  {
    Swift::UInt8 v5 = 1;
LABEL_5:
    Hasher._combine(_:)(v5);
    goto LABEL_55;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 64))(ObjectType, v2);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v2 + 464);
  swift_unknownObjectRetain();
  v6(v57, ObjectType, v2);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v57, (uint64_t)v58);
  outlined init with take of LocalePreferences?((uint64_t)v58, (uint64_t)v59);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v59) == 1)
  {
    Swift::UInt8 v5 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v58, (uint64_t)&v39);
  Hasher._combine(_:)(1u);
  if (v39 == 2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = v39 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v7);
  uint64_t v8 = v40;
  if (!v40)
  {
    Hasher._combine(_:)(0);
LABEL_19:
    outlined retain of LocalePreferences(&v39);
    if (!v41) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v8 + 16));
  char v9 = *(void *)(v8 + 16);
  if (!v9) {
    goto LABEL_19;
  }
  outlined retain of LocalePreferences?((uint64_t)v58, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v10 = v8 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v10 += 16;
    --v9;
  }
  while (v9);
  swift_bridgeObjectRelease();
  if (!v41)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v42) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v42)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    uint64_t v11 = v43;
    if (!v43) {
      goto LABEL_16;
    }
LABEL_22:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v60, v11);
    swift_bridgeObjectRelease();
    char v12 = v44;
    if (!v44) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v11 = v43;
  if (v43) {
    goto LABEL_22;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  char v12 = v44;
  if (!v44)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v60, v12);
  swift_bridgeObjectRelease();
LABEL_24:
  uint64_t v14 = v45;
  long long v13 = v46;
  uint64_t v16 = v47;
  uint64_t v15 = v48;
  long long v17 = v49;
  if (v45)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    char v18 = v13;
    uint64_t v19 = v16;
    uint64_t v20 = v15;
    uint64_t v21 = v17;
    uint64_t v22 = v14;
    _CFObject.hash(into:)();
    if (v13) {
      goto LABEL_26;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v27 = v17;
    uint64_t v28 = v13;
    char v29 = v16;
    uint64_t v30 = v15;
    if (v13)
    {
LABEL_26:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v23 = v13;
      _CFObject.hash(into:)();

      if (v16) {
        goto LABEL_27;
      }
      goto LABEL_32;
    }
  }
  Hasher._combine(_:)(0);
  if (v16)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v24 = v16;
    _CFObject.hash(into:)();

    if (v15) {
      goto LABEL_28;
    }
LABEL_33:
    Hasher._combine(_:)(0);
    if (v17) {
      goto LABEL_29;
    }
    goto LABEL_34;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  if (!v15) {
    goto LABEL_33;
  }
LABEL_28:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v25 = v15;
  _CFObject.hash(into:)();

  if (v17)
  {
LABEL_29:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v26 = v17;
    _CFObject.hash(into:)();

    goto LABEL_35;
  }
LABEL_34:
  Hasher._combine(_:)(0);
  uint64_t v26 = 0;
LABEL_35:

  uint64_t v31 = v50;
  if (v31)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v60, v31);
    swift_bridgeObjectRelease();
    uint64_t v32 = v51;
    if (v51) {
      goto LABEL_37;
    }
LABEL_40:
    Hasher._combine(_:)(0);
    if (v52) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    goto LABEL_42;
  }
  Hasher._combine(_:)(0);
  uint64_t v32 = v51;
  if (!v51) {
    goto LABEL_40;
  }
LABEL_37:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v60, v32);
  swift_bridgeObjectRelease();
  if (!v52) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_42:
  if (v53 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v33 = v53 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v33);
  }
  if (v54 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v34 = v54 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v34);
  }
  if (v55 == 2)
  {
    uint64_t v35 = 0;
  }
  else
  {
    uint64_t v35 = v55 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v35);
  if (v56 == 2)
  {
    unint64_t v36 = 0;
  }
  else
  {
    uint64_t v37 = v56 & 1;
    Hasher._combine(_:)(1u);
    unint64_t v36 = v37;
  }
  Hasher._combine(_:)(v36);
  outlined retain of LocalePreferences?((uint64_t)v58, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v58, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_55:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

void PersonNameComponents.ParseStrategy.parse(_:)(uint64_t *a1@<X8>)
{
  id v2 = objc_msgSend(objc_allocWithZone((Class)NSPersonNameComponentsFormatter), sel_init);
  id v3 = objc_msgSend(v2, sel_personNameComponentsFromString_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    uint64_t v4 = swift_allocObject();
    objc_msgSend(v3, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    *(void *)(v4 + 16) = v5;

    *a1 = v4;
  }
  else
  {
    lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy.ParseError and conformance PersonNameComponents.ParseStrategy.ParseError();
    swift_allocError();
    swift_willThrow();
  }
}

uint64_t static PersonNameComponents.ParseStrategy.== infix(_:_:)()
{
  return 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PersonNameComponents.ParseStrategy.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PersonNameComponents.ParseStrategy.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t PersonNameComponents.ParseStrategy.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PersonNameComponents.ParseStrategy.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int PersonNameComponents.ParseStrategy.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t PersonNameComponents.ParseStrategy.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

void protocol witness for ParseStrategy.parse(_:) in conformance PersonNameComponents.ParseStrategy(uint64_t *a1@<X8>)
{
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PersonNameComponents.ParseStrategy(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PersonNameComponents.ParseStrategy.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t PersonNameComponents.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v3;
  return (*(uint64_t (**)(uint64_t *))(a3 + 48))(&v5);
}

Swift::String __swiftcall PersonNameComponents.formatted()()
{
  uint64_t v1 = *v0;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = static LocaleCache.cache + 16;
  uint64_t v3 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v2, v13);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  uint64_t v4 = v13[0];
  uint64_t v5 = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  LOBYTE(v13[0]) = 1;
  v13[1] = v4;
  v13[2] = v5;
  uint64_t v12 = v1;
  id v6 = PersonNameComponents.FormatStyle.format(_:)(&v12);
  uint64_t v8 = v7;
  swift_release();
  uint64_t v9 = (uint64_t)v6;
  uint64_t v10 = v8;
  result._object = v10;
  result._countAndFlagsBits = v9;
  return result;
}

uint64_t PersonNameComponents.init<A>(_:strategy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 48))(&v12, a1, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a2, a3);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  if (!v5) {
    *a5 = v12;
  }
  return result;
}

void PersonNameComponents.init(_:)(uint64_t *a1@<X8>)
{
  id v2 = objc_msgSend(objc_allocWithZone((Class)NSPersonNameComponentsFormatter), sel_init);
  id v3 = objc_msgSend(v2, sel_personNameComponentsFromString_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    uint64_t v4 = swift_allocObject();
    objc_msgSend(v3, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    *(void *)(v4 + 16) = v5;
    swift_bridgeObjectRelease();

    *a1 = v4;
  }
  else
  {
    lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy.ParseError and conformance PersonNameComponents.ParseStrategy.ParseError();
    swift_allocError();
    swift_willThrow();
    swift_bridgeObjectRelease();
  }
}

uint64_t static FormatStyle<>.name(style:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v4 = static LocaleCache.cache + 16;
  uint64_t v5 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v5);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v4, &v8);
  os_unfair_lock_unlock(v5);
  swift_release_n();
  uint64_t v6 = v8;
  uint64_t result = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  *(unsigned char *)a2 = v3;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style()
{
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style);
  }
  return result;
}

uint64_t specialized static PersonNameComponents.FormatStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2)
  {
    long long v2 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    long long v6 = v2;
    char v3 = specialized static Locale.== infix(_:_:)((uint64_t)&v6, (uint64_t)&v5);
  }
  else
  {
    char v3 = 0;
  }
  return v3 & 1;
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy.ParseError and conformance PersonNameComponents.ParseStrategy.ParseError()
{
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.ParseError and conformance PersonNameComponents.ParseStrategy.ParseError;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.ParseError and conformance PersonNameComponents.ParseStrategy.ParseError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.ParseError and conformance PersonNameComponents.ParseStrategy.ParseError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for PersonNameComponents.FormatStyle(void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for PersonNameComponents.FormatStyle(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle, (uint64_t (*)(void))lazy protocol witness table accessor for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle, (uint64_t (*)(void))lazy protocol witness table accessor for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle);
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for PersonNameComponents.AttributedStyle(void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for PersonNameComponents.FormatStyle(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle, (uint64_t (*)(void))lazy protocol witness table accessor for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle, (uint64_t (*)(void))lazy protocol witness table accessor for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle);
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for PersonNameComponents.ParseStrategy(void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for PersonNameComponents.FormatStyle(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy, (uint64_t (*)(void))lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy, (uint64_t (*)(void))lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy);
}

uint64_t instantiation function for generic protocol witness table for PersonNameComponents.FormatStyle(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a1[1] = a4();
  a1[2] = a5();
  uint64_t result = a6();
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for PersonNameComponents.FormatStyle(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PersonNameComponents.FormatStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithTake for PersonNameComponents.FormatStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for PersonNameComponents.FormatStyle()
{
  return &type metadata for PersonNameComponents.FormatStyle;
}

unsigned char *storeEnumTagSinglePayload for PersonNameComponents.FormatStyle.Style(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F6C6D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PersonNameComponents.FormatStyle.Style()
{
  return &type metadata for PersonNameComponents.FormatStyle.Style;
}

uint64_t assignWithCopy for PersonNameComponents.FormatStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = v3;
  return a1;
}

ValueMetadata *type metadata accessor for PersonNameComponents.AttributedStyle()
{
  return &type metadata for PersonNameComponents.AttributedStyle;
}

ValueMetadata *type metadata accessor for PersonNameComponents.ParseStrategy()
{
  return &type metadata for PersonNameComponents.ParseStrategy;
}

void *type metadata accessor for PersonNameComponents.ParseStrategy.CodingKeys()
{
  return &unk_1ECA3CA90;
}

ValueMetadata *type metadata accessor for PersonNameComponents.ParseStrategy.ParseError()
{
  return &type metadata for PersonNameComponents.ParseStrategy.ParseError;
}

void *type metadata accessor for PersonNameComponents.AttributedStyle.CodingKeys()
{
  return &unk_1ECA3CAD0;
}

unsigned char *storeEnumTagSinglePayload for PersonNameComponents.AttributedStyle.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F6C878);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PersonNameComponents.FormatStyle.CodingKeys()
{
  return &unk_1ECA3C960;
}

uint64_t specialized PersonNameComponents.FormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C797473 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t _KeyValueCodingAndObservingSequence<>.changes<A>(for:options:)()
{
  type metadata accessor for KeyPath();
  id v1 = v0;
  swift_retain();
  swift_dynamicCast();
  type metadata accessor for NSObject.KeyValueObservedChanges();
  uint64_t v2 = swift_allocObject();
  NSObject.KeyValueObservedChanges.init(object:keyPath:options:)(v1);
  return v2;
}

uint64_t type metadata accessor for NSObject.KeyValueObservedChanges()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t NSObject.KeyValueObservedChanges.Iterator.next()(uint64_t a1, uint64_t a2)
{
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = *v2;
  return MEMORY[0x1F4188298](NSObject.KeyValueObservedChanges.Iterator.next(), 0, 0);
}

uint64_t NSObject.KeyValueObservedChanges.Iterator.next()()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  int v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  uint64_t v4 = *(void *)(v1 + 16);
  v3[2] = v4;
  uint64_t v5 = *(void *)(v1 + 24);
  v3[3] = v5;
  v3[4] = v2;
  char v6 = (void *)swift_task_alloc();
  v0[6] = v6;
  v6[2] = v4;
  v6[3] = v5;
  v6[4] = v2;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[7] = v7;
  type metadata accessor for NSKeyValueObservedChange();
  type metadata accessor for Optional();
  *uint64_t v7 = v0;
  v7[1] = NSObject.KeyValueObservedChanges.Iterator.next();
  uint64_t v8 = v0[2];
  return MEMORY[0x1F4188148](v8, &async function pointer to partial apply for closure #1 in NSObject.KeyValueObservedChanges.Iterator.next());
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  int v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t closure #1 in NSObject.KeyValueObservedChanges.Iterator.next()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[12] = a3;
  v4[13] = a4;
  v4[10] = a1;
  v4[11] = a2;
  return MEMORY[0x1F4188298](closure #1 in NSObject.KeyValueObservedChanges.Iterator.next(), 0, 0);
}

uint64_t closure #1 in NSObject.KeyValueObservedChanges.Iterator.next()()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v1;
  *(void *)(v0 + 24) = closure #1 in NSObject.KeyValueObservedChanges.Iterator.next();
  long long v7 = *(_OWORD *)(v0 + 96);
  uint64_t v3 = swift_continuation_init();
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = swift_task_alloc();
  *(_OWORD *)(v5 + 16) = v7;
  *(void *)(v5 + 32) = v3;
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 40));
  partial apply for closure #1 in closure #1 in NSObject.KeyValueObservedChanges.next()((void *)(v4 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 40));
  swift_task_dealloc();
  return MEMORY[0x1F41881E8](v0 + 16);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  uint64_t v1 = *(uint64_t (**)(void))(*(void *)v0 + 8);
  return v1();
}

uint64_t closure #2 in NSObject.KeyValueObservedChanges.Iterator.next()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = a2;
  v10[5] = a3;
  v10[6] = a1;
  swift_retain();
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in closure #2 in NSObject.KeyValueObservedChanges.Iterator.next(), (uint64_t)v10);
  swift_release();
  return outlined destroy of TaskPriority?((uint64_t)v8);
}

uint64_t closure #1 in closure #2 in NSObject.KeyValueObservedChanges.Iterator.next()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x1F4188298](closure #1 in closure #2 in NSObject.KeyValueObservedChanges.Iterator.next(), 0, 0);
}

uint64_t closure #1 in closure #2 in NSObject.KeyValueObservedChanges.Iterator.next()()
{
  NSObject.KeyValueObservedChanges.teardown()();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v8);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v8);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v11 = 0;
  uint64_t v13 = 0;
LABEL_6:
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NSObject.KeyValueObservedChanges<A, B>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = closure #1 in NSNotificationCenter.Notifications.Iterator.next();
  v6[2] = a1;
  uint64_t v7 = *v2;
  v6[3] = a2;
  v6[4] = v7;
  return MEMORY[0x1F4188298](NSObject.KeyValueObservedChanges.Iterator.next(), 0, 0);
}

uint64_t _sSo8NSObjectC10FoundationE23KeyValueObservedChangesC8IteratorVy_xq__GScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = _sSo8NSObjectC10FoundationE23KeyValueObservedChangesC8IteratorVy_xq__GScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return MEMORY[0x1F4187C88](a1, a2, a3, a5, a6, v12);
}

uint64_t _sSo8NSObjectC10FoundationE23KeyValueObservedChangesC8IteratorVy_xq__GScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t NSObject.KeyValueObservedChanges.init(object:keyPath:options:)(void *a1)
{
  type metadata accessor for NSObject.KeyValueObservedChanges.State();
  type metadata accessor for os_unfair_lock_s(255);
  type metadata accessor for ManagedBuffer();
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 40) = 0;
  uint64_t v4 = (os_unfair_lock_s *)(v3 + 40);
  uint64_t v5 = MEMORY[0x1E4FBC860];
  *(void *)(v3 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v6 = v3 + 16;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = v5;
  *(void *)(v1 + 16) = v3;
  swift_retain();
  os_unfair_lock_lock(v4);
  partial apply for closure #1 in NSObject.KeyValueObservedChanges.init(object:keyPath:options:)(v6);
  os_unfair_lock_unlock(v4);
  swift_release();

  swift_release();
  return v1;
}

uint64_t partial apply for closure #1 in NSObject.KeyValueObservedChanges.Iterator.next()(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = partial apply for closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  *(_OWORD *)(v5 + 96) = v6;
  *(void *)(v5 + 80) = a1;
  *(void *)(v5 + 88) = v4;
  return MEMORY[0x1F4188298](closure #1 in NSObject.KeyValueObservedChanges.Iterator.next(), 0, 0);
}

uint64_t partial apply for closure #2 in NSObject.KeyValueObservedChanges.Iterator.next()()
{
  return closure #2 in NSObject.KeyValueObservedChanges.Iterator.next()(v0[4], v0[2], v0[3]);
}

void closure #1 in NSObject.KeyValueObservedChanges.init(object:keyPath:options:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = swift_allocObject();
  swift_weakInit();
  uint64_t v11 = (void *)swift_allocObject();
  uint64_t v12 = *(void *)(v9 + 80);
  v11[2] = v12;
  uint64_t v13 = *(void *)(v9 + 88);
  v11[3] = v13;
  v11[4] = v10;
  uint64_t v25 = a2;
  type metadata accessor for NSObject();
  id v14 = a2;
  swift_dynamicCast();
  uint64_t v15 = v24;
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = v12;
  v16[3] = v13;
  void v16[4] = &protocol witness table for NSObject;
  v16[5] = partial apply for closure #1 in closure #1 in NSObject.KeyValueObservedChanges.init(object:keyPath:options:);
  v16[6] = v11;
  long long v17 = (objc_class *)type metadata accessor for NSKeyValueObservation();
  id v18 = objc_allocWithZone(v17);
  swift_unknownObjectWeakInit();
  v23.receiver = v18;
  v23.super_class = v17;
  swift_retain();
  id v19 = objc_msgSendSuper2(&v23, sel_init);
  uint64_t v20 = (void *)MEMORY[0x185306FE0]();
  objc_allocWithZone((Class)type metadata accessor for NSKeyValueObservation.Helper());
  swift_retain();
  id v21 = v15;
  swift_retain();
  id v22 = NSKeyValueObservation.Helper.init(object:keyPath:options:callback:)(v21, a3, a4, (uint64_t)partial apply for closure #1 in _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:), (uint64_t)v16);
  swift_unknownObjectWeakAssign();

  swift_release();
  swift_release();

  *(void *)(a1 + 8) = v19;
}

uint64_t closure #1 in closure #1 in NSObject.KeyValueObservedChanges.init(object:keyPath:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    NSObject.KeyValueObservedChanges.send(_:)(a2);
    return swift_release();
  }
  return result;
}

uint64_t NSObject.KeyValueObservedChanges.send(_:)(uint64_t a1)
{
  uint64_t v45 = a1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = type metadata accessor for NSKeyValueObservedChange();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v43 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v40 = (char *)&v38 - v6;
  uint64_t v42 = v7;
  type metadata accessor for UnsafeContinuation();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v39 = (uint64_t *)((char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v11);
  uint64_t v44 = (uint64_t *)((char *)&v38 - v12);
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (uint64_t *)((char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v17);
  id v19 = (uint64_t *)((char *)&v38 - v18);
  uint64_t v20 = (os_unfair_lock_s *)v1[2];
  uint64_t v46 = *(void *)(v2 + 80);
  uint64_t v47 = v3;
  uint64_t v48 = v45;
  id v21 = v20 + 4;
  id v22 = v20 + 10;
  os_unfair_lock_lock(v20 + 10);
  partial apply for closure #1 in NSObject.KeyValueObservedChanges.send(_:)(v21, v19);
  os_unfair_lock_unlock(v22);
  objc_super v23 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v14 + 16);
  uint64_t v45 = v13;
  v23(v16, v19, v13);
  uint64_t v41 = v9;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(v16, 1, TupleTypeMetadata2) == 1)
  {
    uint64_t v24 = *(uint64_t (**)(uint64_t *, uint64_t))(v14 + 8);
    uint64_t v25 = v45;
    v24(v19, v45);
    return v24(v16, v25);
  }
  else
  {
    uint64_t v27 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v28 = TupleTypeMetadata2;
    uint64_t v38 = TupleTypeMetadata2;
    char v29 = (char *)v44 + v27;
    uint64_t v30 = (char *)v16 + v27;
    uint64_t v31 = *v16;
    *uint64_t v44 = v31;
    uint64_t v32 = *(void *)(v4 - 8);
    uint64_t v33 = v32;
    uint64_t v34 = v4;
    uint64_t v35 = v40;
    unint64_t v36 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
    v36(v29, v30, v34);
    uint64_t v37 = (char *)v39 + *(int *)(v28 + 48);
    *uint64_t v39 = v31;
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v37, v29, v34);
    v36(v35, v37, v34);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v35, 0, 1, v34);
    (*(void (**)(void, char *, uint64_t))(v43 + 32))(*(void *)(*(void *)(v31 + 64) + 40), v35, v42);
    swift_continuation_resume();
    (*(void (**)(void *, uint64_t))(v41 + 8))(v44, v38);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v14 + 8))(v19, v45);
  }
}

uint64_t NSObject.KeyValueObservedChanges.deinit()
{
  NSObject.KeyValueObservedChanges.teardown()();
  swift_release();
  return v0;
}

Swift::Void __swiftcall NSObject.KeyValueObservedChanges.teardown()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 88);
  uint64_t v3 = type metadata accessor for NSKeyValueObservedChange();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v23 - v6;
  uint64_t v8 = (os_unfair_lock_s *)v0[2];
  uint64_t v25 = *(void *)(v1 + 80);
  uint64_t v26 = v2;
  uint64_t v9 = (uint64_t)&v8[4];
  uint64_t v10 = v8 + 10;
  os_unfair_lock_lock(v8 + 10);
  partial apply for closure #1 in NSObject.KeyValueObservedChanges.teardown()(v9, v27);
  os_unfair_lock_unlock(v10);
  uint64_t v12 = (void *)v27[0];
  uint64_t v11 = v27[1];
  if (v27[0])
  {
    uint64_t v13 = (void *)MEMORY[0x185309640](v27[0] + OBJC_IVAR____NSKeyValueObservation_helper);
    id v14 = v12;
    if (v13)
    {
      NSKeyValueObservation.Helper.invalidate()();
    }
    swift_unknownObjectWeakAssign();
  }
  uint64_t v15 = type metadata accessor for UnsafeContinuation();
  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v17 = MEMORY[0x185302620](v16, v15);
  if (!v17)
  {
    swift_bridgeObjectRelease();
LABEL_11:

    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v18 = v17;
  if (v17 >= 1)
  {
    uint64_t v24 = v12;
    uint64_t v19 = 0;
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
    id v21 = (void (**)(void, char *, uint64_t))(v5 + 32);
    do
    {
      uint64_t v22 = *(void *)(v11 + 8 * v19++ + 32);
      v20(v7, 1, 1, v3);
      (*v21)(*(void *)(*(void *)(v22 + 64) + 40), v7, v4);
      swift_continuation_resume();
    }
    while (v18 != v19);
    swift_bridgeObjectRelease();
    uint64_t v12 = v24;
    goto LABEL_11;
  }
  __break(1u);
  os_unfair_lock_unlock((os_unfair_lock_t)v17);
  __break(1u);
}

uint64_t NSObject.KeyValueObservedChanges.__deallocating_deinit()
{
  NSObject.KeyValueObservedChanges.teardown()();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t closure #1 in NSObject.KeyValueObservedChanges.send(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v6 = type metadata accessor for NSKeyValueObservedChange();
  uint64_t v39 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v36 - v7;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v36 - v15;
  if (!a1[1])
  {
    type metadata accessor for UnsafeContinuation();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56))(a3, 1, 1, TupleTypeMetadata2);
  }
  uint64_t v37 = a3;
  uint64_t v17 = *a1;
  if (MEMORY[0x185302610](*a1, v6, v14) < 1)
  {
    uint64_t v27 = a1[2];
    uint64_t v28 = type metadata accessor for UnsafeContinuation();
    if (!MEMORY[0x185302610](v27, v28))
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v8, v38, v6);
      type metadata accessor for Array();
      Array._makeUniqueAndReserveCapacityIfNotUnique()();
      Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)(*a1 + 16));
      Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t v35 = swift_getTupleTypeMetadata2();
      return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v37, 1, 1, v35);
    }
    uint64_t result = MEMORY[0x185302620](v27, v28);
    if (result)
    {
      type metadata accessor for Array();
      swift_getWitnessTable();
      uint64_t result = Collection.first.getter();
      uint64_t v29 = v40;
      if (v40)
      {
        swift_getWitnessTable();
        RangeReplaceableCollection.removeFirst(_:)(1);
        uint64_t v30 = swift_getTupleTypeMetadata2();
        uint64_t v32 = v37;
        uint64_t v31 = v38;
        uint64_t v33 = (char *)v37 + *(int *)(v30 + 48);
        *uint64_t v37 = v29;
        (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v33, v31, v6);
        return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v32, 0, 1, v30);
      }
      goto LABEL_29;
    }
    goto LABEL_25;
  }
  uint64_t result = MEMORY[0x185302610](v17, v6);
  if (__OFADD__(result, 1))
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v36 = v3;
  if (result + 1 < 8)
  {
LABEL_8:
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v8, v38, v6);
    type metadata accessor for Array();
    Array._makeUniqueAndReserveCapacityIfNotUnique()();
    Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)(*a1 + 16));
    Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    uint64_t v19 = *a1;
    uint64_t v20 = a1[2];
    uint64_t v21 = type metadata accessor for UnsafeContinuation();
    if (MEMORY[0x185302610](v20, v21) < 1)
    {
      uint64_t v34 = swift_getTupleTypeMetadata2();
      return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v37, 1, 1, v34);
    }
    uint64_t result = MEMORY[0x185302620](v20, v21);
    if (result)
    {
      type metadata accessor for Array();
      swift_getWitnessTable();
      uint64_t result = Collection.first.getter();
      uint64_t v22 = v40;
      if (!v40)
      {
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      swift_getWitnessTable();
      RangeReplaceableCollection.removeFirst(_:)(1);
      *uint64_t v37 = v22;
      uint64_t result = MEMORY[0x185302620](v19, v6);
      if (result)
      {
        swift_getWitnessTable();
        Collection.first.getter();
        uint64_t v23 = v39;
        uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48))(v12, 1, v6);
        if (result != 1)
        {
          uint64_t v24 = swift_getTupleTypeMetadata2();
          uint64_t v25 = v37;
          (*(void (**)(char *, char *, uint64_t))(v23 + 32))((char *)v37 + *(int *)(v24 + 48), v12, v6);
          swift_getWitnessTable();
          RangeReplaceableCollection.removeFirst(_:)(1);
          return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v25, 0, 1, v24);
        }
        goto LABEL_27;
      }
      goto LABEL_23;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t result = MEMORY[0x185302620](v17, v6);
  if (!result)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  type metadata accessor for Array();
  swift_getWitnessTable();
  Collection.first.getter();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48))(v16, 1, v6);
  if (result != 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    swift_getWitnessTable();
    RangeReplaceableCollection.removeFirst(_:)(1);
    goto LABEL_8;
  }
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in NSObject.KeyValueObservedChanges.next()(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for NSKeyValueObservedChange();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v17 - v12;
  uint64_t v14 = *a1;
  if (MEMORY[0x185302610](*a1, v5, v11) < 1)
  {
    v17[3] = a2;
    type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    Array._makeUniqueAndReserveCapacityIfNotUnique()();
    Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)(a1[2] + 16));
    return Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  }
  else
  {
    uint64_t result = MEMORY[0x185302620](v14, v5);
    if (result)
    {
      v17[0] = a2;
      v17[1] = v2;
      type metadata accessor for Array();
      swift_getWitnessTable();
      Collection.first.getter();
      uint64_t v16 = *(void *)(v5 - 8);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v9, 1, v5);
      if (result != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v9, v5);
        swift_getWitnessTable();
        RangeReplaceableCollection.removeFirst(_:)(1);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v5);
        (*(void (**)(void, char *, uint64_t))(v7 + 32))(*(void *)(*(void *)(v17[0] + 64) + 40), v13, v6);
        return swift_continuation_resume();
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t NSObject.KeyValueObservedChanges.makeAsyncIterator()@<X0>(void *a1@<X8>)
{
  *a1 = v1;
  return swift_retain();
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in NSObject.KeyValueObservedChanges<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance NSObject.KeyValueObservedChanges<A, B>@<X0>(void *a1@<X8>)
{
  NSObject.KeyValueObservedChanges.makeAsyncIterator()(a1);

  return swift_release();
}

uint64_t type metadata completion function for NSObject.KeyValueObservedChanges()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for NSObject.KeyValueObservedChanges(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NSObject.KeyValueObservedChanges);
}

uint64_t type metadata accessor for NSObject.KeyValueObservedChanges.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for NSObject.KeyValueObservedChanges.State(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for NSObject.KeyValueObservedChanges.State(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  id v4 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for NSObject.KeyValueObservedChanges.State(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v4 = (void *)a1[1];
  uint64_t v5 = (void *)a2[1];
  a1[1] = v5;
  id v6 = v5;

  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NSObject.KeyValueObservedChanges.State(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for NSObject.KeyValueObservedChanges.State()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in NSObject.KeyValueObservedChanges.teardown()@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = MEMORY[0x1E4FBC860];
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = v2;
  *a2 = v3;
  a2[1] = v4;
  return result;
}

uint64_t sub_181F6F0E4()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #1 in closure #2 in NSObject.KeyValueObservedChanges.Iterator.next()()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  v3[2] = v2;
  return MEMORY[0x1F4188298](closure #1 in closure #2 in NSObject.KeyValueObservedChanges.Iterator.next(), 0, 0);
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  id v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t sub_181F6F370()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  id v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu);
  return v6(a1, v4);
}

uint64_t partial apply for closure #1 in closure #1 in NSObject.KeyValueObservedChanges.next()(void *a1)
{
  return closure #1 in closure #1 in NSObject.KeyValueObservedChanges.next()(a1, *(void *)(v1 + 32));
}

void partial apply for closure #1 in NSObject.KeyValueObservedChanges.init(object:keyPath:options:)(uint64_t a1)
{
  closure #1 in NSObject.KeyValueObservedChanges.init(object:keyPath:options:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(uint64_t **)(v1 + 40));
}

uint64_t sub_181F6F4A0()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_181F6F4D8()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in closure #1 in NSObject.KeyValueObservedChanges.init(object:keyPath:options:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in closure #1 in NSObject.KeyValueObservedChanges.init(object:keyPath:options:)(a1, a2);
}

uint64_t sub_181F6F51C()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #1 in NSObject.KeyValueObservedChanges.send(_:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return closure #1 in NSObject.KeyValueObservedChanges.send(_:)(a1, *(void *)(v2 + 32), a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString._InternalRun(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v2 = a2[2];
  uint64_t v3 = a1[2];
  if ((specialized static Dictionary<>.== infix(_:_:)(a1[1], a2[1]) & 1) == 0) {
    return 0;
  }

  return specialized static Set.== infix(_:_:)(v3, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString._InternalRun()
{
  Swift::UInt v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  specialized Dictionary<>.hash(into:)((uint64_t)v5, v2);
  specialized Set.hash(into:)((uint64_t)v5, v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AttributedString._InternalRun(uint64_t a1)
{
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  Hasher._combine(_:)(*v1);
  specialized Dictionary<>.hash(into:)(a1, v3);

  specialized Set.hash(into:)(a1, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString._InternalRun()
{
  Swift::UInt v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  specialized Dictionary<>.hash(into:)((uint64_t)v5, v2);
  specialized Set.hash(into:)((uint64_t)v5, v3);
  return Hasher._finalize()();
}

void protocol witness for RopeElement.summary.getter in conformance AttributedString._InternalRun(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  *a1 = 1;
  a1[1] = v2;
}

void protocol witness for RopeElement.rebalance(nextNeighbor:) in conformance AttributedString._InternalRun()
{
}

void protocol witness for RopeElement.rebalance(prevNeighbor:) in conformance AttributedString._InternalRun()
{
}

uint64_t *protocol witness for RopeElement.split(at:) in conformance AttributedString._InternalRun@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v4 = *v2 - v3;
  if (*v2 < v3)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v5 = v2[1];
  uint64_t v6 = v2[2];
  void *v2 = v3;
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  swift_bridgeObjectRetain();

  return (uint64_t *)swift_bridgeObjectRetain();
}

uint64_t protocol witness for static RopeSummary.maxNodeSize.getter in conformance AttributedString._InternalRun.Summary()
{
  return 15;
}

BOOL protocol witness for RopeSummary.isZero.getter in conformance AttributedString._InternalRun.Summary()
{
  return *v0 == 0;
}

void *protocol witness for RopeSummary.add(_:) in conformance AttributedString._InternalRun.Summary(void *result)
{
  if (__OFADD__(*v1, *result))
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = result[1];
    *v1 += *result;
    uint64_t v3 = v1[1];
    BOOL v4 = __OFADD__(v3, v2);
    uint64_t v5 = v3 + v2;
    if (!v4)
    {
      v1[1] = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

void *protocol witness for RopeSummary.subtract(_:) in conformance AttributedString._InternalRun.Summary(void *result)
{
  if (__OFSUB__(*v1, *result))
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = result[1];
    *v1 -= *result;
    uint64_t v3 = v1[1];
    BOOL v4 = __OFSUB__(v3, v2);
    uint64_t v5 = v3 - v2;
    if (!v4)
    {
      v1[1] = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributedString._InternalRun.Summary(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributedString._InternalRun.Summary and conformance AttributedString._InternalRun.Summary();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString._InternalRun.Summary and conformance AttributedString._InternalRun.Summary()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString._InternalRun.Summary and conformance AttributedString._InternalRun.Summary;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRun.Summary and conformance AttributedString._InternalRun.Summary)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRun.Summary and conformance AttributedString._InternalRun.Summary);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString._InternalRun.Summary and conformance AttributedString._InternalRun.Summary;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRun.Summary and conformance AttributedString._InternalRun.Summary)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRun.Summary and conformance AttributedString._InternalRun.Summary);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString._InternalRun and conformance AttributedString._InternalRun()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString._InternalRun and conformance AttributedString._InternalRun;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRun and conformance AttributedString._InternalRun)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRun and conformance AttributedString._InternalRun);
  }
  return result;
}

void one-time initialization function for recognizedEnglishPronouns()
{
  recognizedEnglishPronouns._rawValue = &outlined read-only object #0 of one-time initialization function for recognizedEnglishPronouns;
}

double one-time initialization function for recognizedNominativePronouns()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(language: Locale.LanguageCode, nominative: String, predefinedTermOfAddress: TermOfAddress)>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1821A4D10;
  Swift::String v1 = String.lowercased()();
  *(void *)(v0 + 32) = 29541;
  *(void *)(v0 + 40) = 0xE200000000000000;
  *(Swift::String *)(v0 + 48) = v1;
  *(void *)(v0 + 64) = 1634495589;
  *(void *)(v0 + 72) = 0xE400000000000000;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(void *)(v0 + 176) = 1;
  Swift::String v2 = String.lowercased()();
  *(void *)(v0 + 184) = 29541;
  *(void *)(v0 + 192) = 0xE200000000000000;
  *(Swift::String *)(v0 + 200) = v2;
  *(void *)(v0 + 216) = 7121347;
  *(void *)(v0 + 224) = 0xA300000000000000;
  *(_OWORD *)(v0 + 248) = 0u;
  *(_OWORD *)(v0 + 232) = 0u;
  *(_OWORD *)(v0 + 264) = 0u;
  *(_OWORD *)(v0 + 280) = 0u;
  *(_OWORD *)(v0 + 296) = 0u;
  *(_OWORD *)(v0 + 312) = 0u;
  *(void *)(v0 + 328) = 2;
  Swift::String v3 = String.lowercased()();
  *(void *)(v0 + 336) = 29286;
  *(void *)(v0 + 344) = 0xE200000000000000;
  *(Swift::String *)(v0 + 352) = v3;
  *(void *)(v0 + 368) = 1701604453;
  *(void *)(v0 + 376) = 0xE400000000000000;
  *(_OWORD *)(v0 + 384) = 0u;
  *(_OWORD *)(v0 + 400) = 0u;
  *(_OWORD *)(v0 + 416) = 0u;
  *(_OWORD *)(v0 + 432) = 0u;
  *(_OWORD *)(v0 + 448) = 0u;
  *(_OWORD *)(v0 + 464) = 0u;
  *(void *)(v0 + 480) = 1;
  Swift::String v4 = String.lowercased()();
  *(void *)(v0 + 488) = 29286;
  *(void *)(v0 + 496) = 0xE200000000000000;
  *(Swift::String *)(v0 + 504) = v4;
  *(void *)(v0 + 520) = 27753;
  *(void *)(v0 + 528) = 0xE200000000000000;
  *(_OWORD *)(v0 + 536) = 0u;
  *(_OWORD *)(v0 + 552) = 0u;
  *(_OWORD *)(v0 + 568) = 0u;
  *(_OWORD *)(v0 + 584) = 0u;
  *(_OWORD *)(v0 + 600) = 0u;
  *(_OWORD *)(v0 + 616) = 0u;
  *(void *)(v0 + 632) = 2;
  Swift::String v5 = String.lowercased()();
  *(void *)(v0 + 640) = 29801;
  *(void *)(v0 + 648) = 0xE200000000000000;
  *(Swift::String *)(v0 + 656) = v5;
  *(void *)(v0 + 672) = 6907244;
  *(void *)(v0 + 680) = 0xE300000000000000;
  *(_OWORD *)(v0 + 688) = 0u;
  *(_OWORD *)(v0 + 704) = 0u;
  *(_OWORD *)(v0 + 720) = 0u;
  *(_OWORD *)(v0 + 736) = 0u;
  *(_OWORD *)(v0 + 752) = 0u;
  *(_OWORD *)(v0 + 768) = 0u;
  *(void *)(v0 + 784) = 1;
  Swift::String v6 = String.lowercased()();
  *(void *)(v0 + 792) = 29801;
  *(void *)(v0 + 800) = 0xE200000000000000;
  *(Swift::String *)(v0 + 808) = v6;
  *(void *)(v0 + 824) = 6911340;
  *(void *)(v0 + 832) = 0xE300000000000000;
  *(_OWORD *)(v0 + 840) = 0u;
  *(_OWORD *)(v0 + 856) = 0u;
  *(_OWORD *)(v0 + 872) = 0u;
  *(_OWORD *)(v0 + 888) = 0u;
  *(_OWORD *)(v0 + 904) = 0u;
  *(_OWORD *)(v0 + 920) = 0u;
  *(void *)(v0 + 936) = 2;
  Swift::String v7 = String.lowercased()();
  *(void *)(v0 + 944) = 29808;
  *(void *)(v0 + 952) = 0xE200000000000000;
  *(Swift::String *)(v0 + 960) = v7;
  *(void *)(v0 + 976) = 6384741;
  *(void *)(v0 + 984) = 0xE300000000000000;
  *(_OWORD *)(v0 + 992) = 0u;
  *(_OWORD *)(v0 + 1008) = 0u;
  *(_OWORD *)(v0 + 1024) = 0u;
  *(_OWORD *)(v0 + 1040) = 0u;
  *(_OWORD *)(v0 + 1056) = 0u;
  *(_OWORD *)(v0 + 1072) = 0u;
  *(void *)(v0 + 1088) = 1;
  Swift::String v8 = String.lowercased()();
  *(void *)(v0 + 1096) = 29808;
  *(void *)(v0 + 1104) = 0xE200000000000000;
  *(Swift::String *)(v0 + 1112) = v8;
  *(void *)(v0 + 1128) = 6646885;
  *(void *)(v0 + 1136) = 0xE300000000000000;
  *(_OWORD *)(v0 + 1144) = 0u;
  *(_OWORD *)(v0 + 1160) = 0u;
  *(_OWORD *)(v0 + 1176) = 0u;
  *(_OWORD *)(v0 + 1192) = 0u;
  *(_OWORD *)(v0 + 1208) = 0u;
  *(_OWORD *)(v0 + 1224) = 0u;
  *(void *)(v0 + 1240) = 2;
  Swift::String v9 = String.lowercased()();
  *(void *)(v0 + 1248) = 29281;
  *(void *)(v0 + 1256) = 0xE200000000000000;
  *(Swift::String *)(v0 + 1264) = v9;
  *(void *)(v0 + 1280) = 2329511897;
  *(void *)(v0 + 1288) = 0xA400000000000000;
  *(_OWORD *)(v0 + 1296) = 0u;
  *(_OWORD *)(v0 + 1312) = 0u;
  *(_OWORD *)(v0 + 1328) = 0u;
  *(_OWORD *)(v0 + 1344) = 0u;
  *(_OWORD *)(v0 + 1360) = 0u;
  *(_OWORD *)(v0 + 1376) = 0u;
  *(void *)(v0 + 1392) = 1;
  Swift::String v10 = String.lowercased()();
  *(void *)(v0 + 1400) = 29281;
  *(void *)(v0 + 1408) = 0xE200000000000000;
  *(Swift::String *)(v0 + 1416) = v10;
  *(void *)(v0 + 1432) = 2295957465;
  *(void *)(v0 + 1440) = 0xA400000000000000;
  double result = 0.0;
  *(_OWORD *)(v0 + 1448) = 0u;
  *(_OWORD *)(v0 + 1464) = 0u;
  *(_OWORD *)(v0 + 1480) = 0u;
  *(_OWORD *)(v0 + 1496) = 0u;
  *(_OWORD *)(v0 + 1512) = 0u;
  *(_OWORD *)(v0 + 1528) = 0u;
  *(void *)(v0 + 1544) = 2;
  recognizedNominativePronouns._rawValue = (void *)v0;
  return result;
}

uint64_t TermOfAddress.extrapolatingEnglishPronouns()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = v1[9];
  uint64_t v12 = v1[10];
  uint64_t v13 = v1[11];
  unint64_t v14 = v1[12];
  uint64_t v109 = v5;
  uint64_t v110 = v9;
  uint64_t v113 = v7;
  uint64_t v115 = v4;
  uint64_t v116 = v6;
  uint64_t v108 = v2;
  if (v14 >= 4)
  {
    uint64_t v22 = v1[1];
    uint64_t v98 = v12;
    outlined copy of TermOfAddress._TermOfAddress(v3, v2, v5, v4, v6, v7, v9, v8, v10, v11, v12, v13, v14);
    outlined consume of Locale.LanguageCode?(v3, v22);
    uint64_t v15 = v8;
    outlined consume of Locale.LanguageCode?(v116, v7);
    uint64_t v18 = v10;
    uint64_t v17 = v11;
    uint64_t v16 = v13;
    outlined consume of Locale.LanguageCode?(v10, v11);
    unint64_t v19 = v14;
    uint64_t v20 = v3;
    uint64_t v21 = v98;
  }
  else
  {
    uint64_t v15 = v1[7];
    uint64_t v16 = v13;
    uint64_t v17 = v11;
    uint64_t v18 = v10;
    unint64_t v19 = MEMORY[0x1E4FBC860];
    uint64_t v20 = v3;
    uint64_t v21 = v12;
  }
  uint64_t v111 = v18;
  uint64_t v112 = v15;
  uint64_t v23 = *(void *)(v19 + 16);
  uint64_t v107 = v20;
  uint64_t v24 = v17;
  uint64_t v25 = v16;
  if (v23)
  {
    unint64_t v26 = v19 + 40;
    uint64_t v27 = v113;
    while (*(unsigned char *)(v26 + 24))
    {
      v26 += 64;
      if (!--v23)
      {
        swift_bridgeObjectRelease();
        uint64_t v119 = 0;
        uint64_t v130 = 0;
        goto LABEL_11;
      }
    }
    uint64_t v119 = *(void *)(v26 - 8);
    uint64_t v28 = v21;
    uint64_t v29 = *(void *)v26;
    swift_bridgeObjectRetain();
    uint64_t v130 = v29;
    uint64_t v21 = v28;
    swift_bridgeObjectRetain();
    uint64_t v27 = v113;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v119 = 0;
    uint64_t v130 = 0;
    uint64_t v27 = v113;
  }
LABEL_11:
  uint64_t v104 = v16;
  uint64_t v105 = v24;
  if (v14 >= 4)
  {
    outlined copy of TermOfAddress._TermOfAddress(v107, v108, v5, v115, v116, v27, v110, v15, v111, v24, v21, v16, v14);
    uint64_t v31 = v27;
    uint64_t v25 = v16;
    outlined consume of Locale.LanguageCode?(v107, v108);
    outlined consume of Locale.LanguageCode?(v116, v27);
    outlined consume of Locale.LanguageCode?(v111, v24);
    unint64_t v30 = v14;
    uint64_t v32 = *(void *)(v14 + 16);
    if (!v32) {
      goto LABEL_18;
    }
  }
  else
  {
    unint64_t v30 = MEMORY[0x1E4FBC860];
    uint64_t v31 = v27;
    uint64_t v32 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (!v32)
    {
LABEL_18:
      swift_bridgeObjectRelease();
      uint64_t v106 = 0;
      uint64_t v121 = 0;
      if (v14 < 4) {
        goto LABEL_19;
      }
LABEL_22:
      outlined copy of TermOfAddress._TermOfAddress(v107, v108, v5, v115, v116, v31, v110, v15, v111, v24, v21, v25, v14);
      uint64_t v25 = v16;
      outlined consume of Locale.LanguageCode?(v107, v108);
      outlined consume of Locale.LanguageCode?(v116, v31);
      outlined consume of Locale.LanguageCode?(v111, v24);
      unint64_t v34 = v14;
      uint64_t v35 = *(void *)(v14 + 16);
      if (!v35) {
        goto LABEL_33;
      }
      goto LABEL_23;
    }
  }
  unint64_t v33 = v30 + 40;
  while (*(unsigned char *)(v33 + 24) != 1)
  {
    v33 += 64;
    if (!--v32) {
      goto LABEL_18;
    }
  }
  uint64_t v106 = *(void *)(v33 - 8);
  uint64_t v36 = v21;
  uint64_t v37 = *(void *)v33;
  swift_bridgeObjectRetain();
  uint64_t v121 = v37;
  uint64_t v21 = v36;
  swift_bridgeObjectRetain();
  uint64_t v31 = v113;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14 >= 4) {
    goto LABEL_22;
  }
LABEL_19:
  unint64_t v34 = MEMORY[0x1E4FBC860];
  uint64_t v35 = *(void *)(MEMORY[0x1E4FBC860] + 16);
  if (!v35)
  {
LABEL_33:
    swift_bridgeObjectRelease();
    uint64_t v103 = 0;
    uint64_t v120 = 0;
    if (v14 < 4) {
      goto LABEL_34;
    }
LABEL_37:
    outlined copy of TermOfAddress._TermOfAddress(v107, v108, v5, v115, v116, v31, v110, v15, v111, v24, v21, v25, v14);
    uint64_t v25 = v16;
    outlined consume of Locale.LanguageCode?(v107, v108);
    outlined consume of Locale.LanguageCode?(v116, v31);
    outlined consume of Locale.LanguageCode?(v111, v24);
    unint64_t v42 = v14;
    uint64_t v43 = *(void *)(v14 + 16);
    if (!v43) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
LABEL_23:
  unint64_t v38 = v34 + 40;
  while (1)
  {
    int v39 = *(unsigned __int8 *)(v38 + 27);
    BOOL v40 = *(unsigned char *)(v38 + 24) != 3 || v39 == 2;
    if (!v40 && (v39 & 1) != 0) {
      break;
    }
    v38 += 64;
    if (!--v35) {
      goto LABEL_33;
    }
  }
  uint64_t v103 = *(void *)(v38 - 8);
  uint64_t v44 = v21;
  uint64_t v45 = *(void *)v38;
  swift_bridgeObjectRetain();
  uint64_t v120 = v45;
  uint64_t v21 = v44;
  swift_bridgeObjectRetain();
  uint64_t v31 = v113;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14 >= 4) {
    goto LABEL_37;
  }
LABEL_34:
  unint64_t v42 = MEMORY[0x1E4FBC860];
  uint64_t v43 = *(void *)(MEMORY[0x1E4FBC860] + 16);
  if (!v43)
  {
LABEL_47:
    swift_bridgeObjectRelease();
    unint64_t v102 = 0;
    unint64_t v118 = 0;
    if (v14 < 4) {
      goto LABEL_48;
    }
LABEL_51:
    outlined copy of TermOfAddress._TermOfAddress(v107, v108, v5, v115, v116, v31, v110, v15, v111, v24, v21, v25, v14);
    uint64_t v25 = v16;
    outlined consume of Locale.LanguageCode?(v107, v108);
    outlined consume of Locale.LanguageCode?(v116, v31);
    outlined consume of Locale.LanguageCode?(v111, v24);
    unint64_t v50 = v14;
    uint64_t v51 = *(void *)(v14 + 16);
    if (!v51) {
      goto LABEL_55;
    }
LABEL_52:
    unint64_t v54 = v50 + 40;
    while (*(unsigned char *)(v54 + 26) != 1)
    {
      v54 += 64;
      if (!--v51) {
        goto LABEL_55;
      }
    }
    uint64_t v56 = *(void *)v54;
    uint64_t v114 = *(void *)(v54 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v55 = v56;
    uint64_t v31 = v113;
    if (!v130) {
      goto LABEL_63;
    }
    goto LABEL_58;
  }
LABEL_38:
  unint64_t v46 = v42 + 40;
  while (1)
  {
    int v47 = *(unsigned __int8 *)(v46 + 27);
    BOOL v48 = *(unsigned char *)(v46 + 24) != 3 || v47 == 2;
    if (!v48 && (v47 & 1) == 0) {
      break;
    }
    v46 += 64;
    if (!--v43) {
      goto LABEL_47;
    }
  }
  unint64_t v102 = *(void *)(v46 - 8);
  uint64_t v52 = v21;
  unint64_t v53 = *(void *)v46;
  swift_bridgeObjectRetain();
  unint64_t v118 = v53;
  uint64_t v21 = v52;
  swift_bridgeObjectRetain();
  uint64_t v31 = v113;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14 >= 4) {
    goto LABEL_51;
  }
LABEL_48:
  unint64_t v50 = MEMORY[0x1E4FBC860];
  uint64_t v51 = *(void *)(MEMORY[0x1E4FBC860] + 16);
  if (v51) {
    goto LABEL_52;
  }
LABEL_55:
  swift_bridgeObjectRelease();
  uint64_t v114 = 0;
  uint64_t v55 = 0;
  if (v130)
  {
LABEL_58:
    if (v121 && v120 && v118 && v55)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *a1 = v107;
      a1[1] = v108;
      a1[2] = v5;
      a1[3] = v115;
      a1[4] = v116;
      a1[5] = v31;
      a1[6] = v110;
      a1[7] = v15;
      a1[8] = v111;
      a1[9] = v24;
      a1[10] = v21;
      a1[11] = v25;
      a1[12] = v14;
      return outlined copy of TermOfAddress._TermOfAddress(v107, v108, v5, v115, v116, v31, v110, v15, v111, v24, v21, v25, v14);
    }
  }
LABEL_63:
  uint64_t v101 = v55;
  if (one-time initialization token for recognizedEnglishPronouns != -1) {
    swift_once();
  }
  rawValue = recognizedEnglishPronouns._rawValue;
  uint64_t v59 = *((void *)recognizedEnglishPronouns._rawValue + 2);
  swift_bridgeObjectRetain();
  if (!v59)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v91 = v115;
    uint64_t v92 = v107;
    uint64_t v93 = v108;
    uint64_t v94 = v109;
    uint64_t v95 = v111;
    unint64_t v96 = a1;
LABEL_98:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *unint64_t v96 = v92;
    v96[1] = v93;
    _OWORD v96[2] = v94;
    v96[3] = v91;
    v96[4] = v116;
    v96[5] = v113;
    v96[6] = v110;
    v96[7] = v112;
    v96[8] = v95;
    v96[9] = v24;
    v96[10] = v21;
    v96[11] = v25;
    v96[12] = v14;
    return outlined copy of TermOfAddress._TermOfAddress(v92, v93, v94, v91, v116, v113, v110, v112, v95, v24, v21, v25, v14);
  }
  uint64_t v99 = v21;
  swift_bridgeObjectRetain();
  long long v60 = rawValue[11];
  long long v141 = rawValue[10];
  long long v142 = v60;
  long long v143 = rawValue[12];
  unint64_t v144 = *((void *)rawValue + 26);
  long long v61 = rawValue[7];
  long long v137 = rawValue[6];
  long long v138 = v61;
  long long v62 = rawValue[9];
  long long v139 = rawValue[8];
  long long v140 = v62;
  long long v63 = rawValue[3];
  long long v133 = rawValue[2];
  long long v134 = v63;
  long long v64 = rawValue[5];
  uint64_t v117 = rawValue;
  long long v135 = rawValue[4];
  long long v136 = v64;
  uint64_t v126 = 216;
  for (uint64_t i = v59 - 1; ; --i)
  {
    uint64_t v125 = v133;
    uint64_t v65 = *((void *)&v134 + 1);
    uint64_t v122 = v135;
    uint64_t v123 = v134;
    long long v66 = v136;
    uint64_t v124 = v137;
    uint64_t v67 = v138;
    uint64_t v131 = *((void *)&v135 + 1);
    uint64_t v132 = *((void *)&v137 + 1);
    uint64_t v68 = *((void *)&v138 + 1);
    long long v69 = v139;
    uint64_t v129 = *((void *)&v133 + 1);
    uint64_t v70 = *((void *)&v140 + 1);
    uint64_t v128 = v140;
    long long v71 = v141;
    long long v72 = v142;
    long long v73 = v143;
    unint64_t v74 = v144;
    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    outlined consume of TermOfAddress?(v67, v68, v69, *((uint64_t *)&v69 + 1), v128, v70, v71, *((uint64_t *)&v71 + 1), v72, *((uint64_t *)&v72 + 1), v73, *((uint64_t *)&v73 + 1), v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v130)
    {
      swift_bridgeObjectRelease();
      uint64_t v76 = v117;
      goto LABEL_94;
    }
    if (v119 == v125 && v130 == v129)
    {
      swift_bridgeObjectRelease();
      uint64_t v75 = v131;
      uint64_t v76 = v117;
    }
    else
    {
      char v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v75 = v131;
      uint64_t v76 = v117;
      if ((v77 & 1) == 0) {
        goto LABEL_94;
      }
    }
    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    outlined consume of TermOfAddress?(v67, v68, v69, *((uint64_t *)&v69 + 1), v128, v70, v71, *((uint64_t *)&v71 + 1), v72, *((uint64_t *)&v72 + 1), v73, *((uint64_t *)&v73 + 1), v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v121 || v106 == v123 && v121 == v65)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v79 & 1) == 0) {
        goto LABEL_94;
      }
    }
    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    outlined consume of TermOfAddress?(v67, v68, v69, *((uint64_t *)&v69 + 1), v128, v70, v71, *((uint64_t *)&v71 + 1), v72, *((uint64_t *)&v72 + 1), v73, *((uint64_t *)&v73 + 1), v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v120 || v103 == v122 && v120 == v75)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v80 & 1) == 0) {
        goto LABEL_94;
      }
    }
    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    outlined consume of TermOfAddress?(v67, v68, v69, *((uint64_t *)&v69 + 1), v128, v70, v71, *((uint64_t *)&v71 + 1), v72, *((uint64_t *)&v72 + 1), v73, *((uint64_t *)&v73 + 1), v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v118 && __PAIR128__(v118, v102) != v66)
    {
      char v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v81 & 1) == 0) {
        goto LABEL_94;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    outlined consume of TermOfAddress?(v67, v68, v69, *((uint64_t *)&v69 + 1), v128, v70, v71, *((uint64_t *)&v71 + 1), v72, *((uint64_t *)&v72 + 1), v73, *((uint64_t *)&v73 + 1), v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v101)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v114 = v124;
      goto LABEL_101;
    }
    if (v114 == v124 && v101 == v132) {
      break;
    }
    char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v78)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v114 = v124;
      goto LABEL_101;
    }
LABEL_94:
    outlined release of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    if (!i)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v21 = v99;
      unint64_t v96 = a1;
      uint64_t v91 = v115;
      uint64_t v93 = v108;
      uint64_t v94 = v109;
      uint64_t v92 = v107;
      uint64_t v95 = v111;
      uint64_t v25 = v104;
      uint64_t v24 = v105;
      goto LABEL_98;
    }
    long long v82 = *(_OWORD *)((char *)v76 + v126);
    long long v83 = *(_OWORD *)((char *)v76 + v126 + 16);
    long long v84 = *(_OWORD *)((char *)v76 + v126 + 48);
    long long v135 = *(_OWORD *)((char *)v76 + v126 + 32);
    long long v136 = v84;
    long long v133 = v82;
    long long v134 = v83;
    long long v85 = *(_OWORD *)((char *)v76 + v126 + 64);
    long long v86 = *(_OWORD *)((char *)v76 + v126 + 80);
    long long v87 = *(_OWORD *)((char *)v76 + v126 + 112);
    long long v139 = *(_OWORD *)((char *)v76 + v126 + 96);
    long long v140 = v87;
    long long v137 = v85;
    long long v138 = v86;
    long long v88 = *(_OWORD *)((char *)v76 + v126 + 128);
    long long v89 = *(_OWORD *)((char *)v76 + v126 + 144);
    long long v90 = *(_OWORD *)((char *)v76 + v126 + 160);
    unint64_t v144 = *(void *)((char *)v76 + v126 + 176);
    long long v142 = v89;
    long long v143 = v90;
    long long v141 = v88;
    v126 += 184;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_101:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v74 == 4)
  {
    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t result = swift_bridgeObjectRelease();
    if (v14 < 4)
    {
      __break(1u);
    }
    else
    {
      outlined copy of TermOfAddress._TermOfAddress(v107, v108, v109, v115, v116, v113, v110, v15, v111, v105, v99, v104, v14);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Morphology.Pronoun>);
      uint64_t result = swift_allocObject();
      *(_OWORD *)(result + 16) = xmmword_18210C690;
      *(void *)(result + 32) = v125;
      *(void *)(result + 40) = v129;
      *(_WORD *)(result + 48) = 3587;
      *(unsigned char *)(result + 50) = 6;
      uint64_t v97 = MEMORY[0x1E4FBC868];
      *(void *)(result + 56) = MEMORY[0x1E4FBC868];
      *(_DWORD *)(result + 64) = 33751808;
      *(unsigned char *)(result + 68) = 2;
      *(void *)(result + 72) = 0;
      *(void *)(result + 80) = 0;
      *(void *)(result + 85) = 0;
      *(void *)(result + 96) = v123;
      *(void *)(result + 104) = v65;
      *(_WORD *)(result + 112) = 3587;
      *(unsigned char *)(result + 114) = 6;
      *(void *)(result + 120) = v97;
      *(_DWORD *)(result + 128) = 33751809;
      *(unsigned char *)(result + 132) = 2;
      *(void *)(result + 136) = 0;
      *(void *)(result + 144) = 0;
      *(void *)(result + 149) = 0;
      *(void *)(result + 160) = v122;
      *(void *)(result + 168) = v131;
      *(_WORD *)(result + 176) = 3587;
      *(unsigned char *)(result + 178) = 6;
      *(void *)(result + 184) = v97;
      *(_DWORD *)(result + 192) = 16974595;
      *(unsigned char *)(result + 196) = 2;
      *(void *)(result + 213) = 0;
      *(void *)(result + 200) = 0;
      *(void *)(result + 208) = 0;
      *(_OWORD *)(result + 224) = v66;
      *(_WORD *)(result + 240) = 3587;
      *(unsigned char *)(result + 242) = 6;
      *(void *)(result + 248) = v97;
      *(_DWORD *)(result + 256) = 197379;
      *(unsigned char *)(result + 260) = 2;
      *(void *)(result + 264) = 0;
      *(void *)(result + 272) = 0;
      *(void *)(result + 277) = 0;
      *(void *)(result + 288) = v114;
      *(void *)(result + 296) = v132;
      *(_WORD *)(result + 304) = 3587;
      *(unsigned char *)(result + 306) = 6;
      *(void *)(result + 312) = v97;
      *(_DWORD *)(result + 320) = 33620750;
      *(unsigned char *)(result + 324) = 2;
      *(void *)(result + 328) = 0;
      *(void *)(result + 336) = 0;
      *(void *)(result + 341) = 0;
      *a1 = v107;
      a1[1] = v108;
      a1[2] = v109;
      a1[3] = v115;
      a1[4] = v116;
      a1[5] = v113;
      a1[6] = v110;
      a1[7] = v15;
      a1[8] = v111;
      a1[9] = v105;
      a1[10] = v99;
      a1[11] = v104;
      a1[12] = result;
    }
  }
  else
  {
    uint64_t result = outlined release of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    *a1 = v67;
    a1[1] = v68;
    *((_OWORD *)a1 + 1) = v69;
    a1[4] = v128;
    a1[5] = v70;
    *((_OWORD *)a1 + 3) = v71;
    *((_OWORD *)a1 + 4) = v72;
    *((_OWORD *)a1 + 5) = v73;
    a1[12] = v74;
  }
  return result;
}

uint64_t TermOfAddress.extrapolatingFromNominativePronouns()@<X0>(void *a1@<X8>)
{
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v96 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = v1[9];
  uint64_t v13 = v1[10];
  uint64_t v12 = (void *)v1[11];
  unint64_t v14 = v1[12];
  uint64_t v89 = v6;
  uint64_t v99 = v10;
  uint64_t v97 = v11;
  uint64_t v98 = v12;
  uint64_t v90 = v4;
  uint64_t v87 = v3;
  uint64_t v91 = v5;
  uint64_t v94 = v7;
  uint64_t v95 = v8;
  uint64_t v93 = (void *)v9;
  if (v14 >= 4)
  {
    uint64_t v19 = v3;
    outlined copy of TermOfAddress._TermOfAddress(v4, v3, v5, v6, v7, v96, v8, v9, v10, v11, v13, (uint64_t)v12, v14);
    outlined consume of Locale.LanguageCode?(v4, v19);
    uint64_t v18 = v94;
    outlined consume of Locale.LanguageCode?(v94, v96);
    outlined consume of Locale.LanguageCode?(v10, v11);
    unint64_t v15 = v14;
    uint64_t v16 = v87;
    uint64_t v17 = v91;
  }
  else
  {
    unint64_t v15 = MEMORY[0x1E4FBC860];
    uint64_t v16 = v3;
    uint64_t v17 = v5;
    uint64_t v18 = v7;
  }
  uint64_t v20 = *(void *)(v15 + 16);
  unint64_t v92 = v14;
  uint64_t v88 = v13;
  if (v20)
  {
    unint64_t v21 = v15 + 40;
    while (*(unsigned char *)(v21 + 24))
    {
      v21 += 64;
      if (!--v20) {
        goto LABEL_8;
      }
    }
    uint64_t v22 = *(void *)v21;
    uint64_t v100 = *(void *)(v21 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v16 = v87;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    uint64_t v100 = 0;
    uint64_t v22 = 0;
  }
  if (one-time initialization token for recognizedNominativePronouns != -1) {
    swift_once();
  }
  rawValue = recognizedNominativePronouns._rawValue;
  uint64_t v24 = *((void *)recognizedNominativePronouns._rawValue + 2);
  if (!v24)
  {
    swift_bridgeObjectRelease();
    uint64_t v68 = v97;
    uint64_t v67 = (uint64_t)v93;
LABEL_43:
    uint64_t v69 = v90;
    *a1 = v90;
    a1[1] = v16;
    uint64_t v70 = v89;
    a1[2] = v17;
    a1[3] = v70;
    uint64_t v71 = v96;
    a1[4] = v18;
    a1[5] = v71;
    uint64_t v72 = v95;
    a1[6] = v95;
    a1[7] = v67;
    uint64_t v73 = v99;
    a1[8] = v99;
    a1[9] = v68;
    uint64_t v74 = v88;
    uint64_t v75 = (uint64_t)v98;
    a1[10] = v88;
    a1[11] = v75;
    unint64_t v76 = v92;
    a1[12] = v92;
    return outlined copy of TermOfAddress._TermOfAddress(v69, v16, v17, v70, v18, v71, v72, v67, v73, v68, v74, v75, v76);
  }
  uint64_t v103 = v22;
  long long v86 = a1;
  swift_bridgeObjectRetain_n();
  long long v25 = rawValue[9];
  long long v132 = rawValue[8];
  long long v26 = rawValue[10];
  long long v133 = v25;
  long long v134 = v26;
  unint64_t v135 = *((void *)rawValue + 22);
  long long v27 = rawValue[5];
  long long v128 = rawValue[4];
  long long v129 = v27;
  long long v28 = rawValue[7];
  long long v130 = rawValue[6];
  long long v131 = v28;
  long long v29 = rawValue[3];
  long long v126 = rawValue[2];
  long long v127 = v29;
  uint64_t v116 = v24 - 1;
  uint64_t v115 = 184;
  uint64_t v101 = rawValue;
  while (1)
  {
    uint64_t v122 = *((void *)&v126 + 1);
    uint64_t v102 = v126;
    uint64_t v121 = (void *)*((void *)&v127 + 1);
    uint64_t v104 = v127;
    uint64_t v114 = v128;
    uint64_t v30 = v129;
    uint64_t v117 = *((void *)&v128 + 1);
    uint64_t v118 = *((void *)&v129 + 1);
    uint64_t v31 = *((void *)&v130 + 1);
    uint64_t v119 = v130;
    uint64_t v32 = *((void *)&v131 + 1);
    uint64_t v120 = v131;
    long long v33 = v132;
    long long v34 = v133;
    long long v35 = v134;
    unint64_t v36 = v135;
    outlined retain of (language: Locale.LanguageCode, nominative: String, predefinedTermOfAddress: TermOfAddress)((uint64_t)&v126);
    outlined retain of (language: Locale.LanguageCode, nominative: String, predefinedTermOfAddress: TermOfAddress)((uint64_t)&v126);
    unint64_t v105 = v36;
    uint64_t v106 = *((void *)&v35 + 1);
    uint64_t v107 = v35;
    uint64_t v108 = *((void *)&v34 + 1);
    uint64_t v109 = v34;
    uint64_t v110 = v30;
    uint64_t v111 = v31;
    uint64_t v112 = v32;
    long long v113 = v33;
    outlined consume of TermOfAddress._TermOfAddress(v30, v118, v119, v31, v120, v32, v33, *((uint64_t *)&v33 + 1), v34, *((uint64_t *)&v34 + 1), v35, *((uint64_t *)&v35 + 1), v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v103)
    {
      swift_bridgeObjectRelease();
      goto LABEL_39;
    }
    if (v100 == v114 && v103 == v117)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v37 & 1) == 0) {
        goto LABEL_39;
      }
    }
    if (v92 < 4)
    {
      outlined retain of (language: Locale.LanguageCode, nominative: String, predefinedTermOfAddress: TermOfAddress)((uint64_t)&v126);
LABEL_38:
      uint64_t v59 = v122;
      outlined consume of TermOfAddress._TermOfAddress(v110, v118, v119, v111, v120, v112, v113, *((uint64_t *)&v113 + 1), v109, v108, v107, v106, v105);
      swift_bridgeObjectRelease();
      outlined consume of Locale.LanguageCode?(0, 0);
      outlined consume of Locale.LanguageCode?(v102, v59);
      goto LABEL_39;
    }
    uint64_t v38 = v90;
    uint64_t v39 = v87;
    uint64_t countAndFlagsBits = v91;
    uint64_t v41 = v89;
    uint64_t v42 = v96;
    uint64_t v43 = v94;
    outlined copy of TermOfAddress._TermOfAddress(v90, v87, v91, v89, v94, v96, v95, (uint64_t)v93, v99, v97, v88, (uint64_t)v98, v92);
    outlined retain of (language: Locale.LanguageCode, nominative: String, predefinedTermOfAddress: TermOfAddress)((uint64_t)&v126);
    uint64_t v44 = swift_bridgeObjectRelease();
    if (v39)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined consume of Locale.LanguageCode?(v38, v39);
      outlined consume of Locale.LanguageCode?(v43, v42);
      outlined consume of Locale.LanguageCode?(v99, v97);
      outlined consume of TermOfAddress._TermOfAddress(v110, v118, v119, v111, v120, v112, v113, *((uint64_t *)&v113 + 1), v109, v108, v107, v106, v105);
      object = (void *)v41;
      uint64_t v46 = v38;
    }
    else
    {
      MEMORY[0x1F4188790](v44);
      int v125 = 0;
      uint64_t v123 = 0;
      unint64_t v124 = 0xE000000000000000;
      outlined copy of Locale.LanguageCode?(v38, 0);
      if (v42)
      {
        uint64_t v48 = v95;
        uint64_t v49 = v93;
        outlined copy of Locale.LanguageCode?(v94, v96);
        uint64_t v50 = v97;
        outlined copy of Locale.LanguageCode?(v99, v97);
        v51._uint64_t countAndFlagsBits = 45;
        v51._object = (void *)0xE100000000000000;
        String.append(_:)(v51);
        v52._uint64_t countAndFlagsBits = v48;
        v52._object = v49;
        String.append(_:)(v52);
      }
      else
      {
        outlined copy of Locale.LanguageCode?(v94, 0);
        uint64_t v50 = v97;
        outlined copy of Locale.LanguageCode?(v99, v97);
      }
      if (v50)
      {
        v53._uint64_t countAndFlagsBits = 95;
        v53._object = (void *)0xE100000000000000;
        String.append(_:)(v53);
        v54._uint64_t countAndFlagsBits = v88;
        v54._object = v98;
        String.append(_:)(v54);
      }
      outlined consume of Locale.LanguageCode?(v90, 0);
      outlined consume of Locale.LanguageCode?(v94, v96);
      outlined consume of Locale.LanguageCode?(v99, v50);
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      int Language = uloc_getLanguage();
      swift_release();
      if (v125 > 0 || Language <= 0 || (v85[Language] = 0, uint64_t v56 = MEMORY[0x185301F80](v85), !v57))
      {
        outlined consume of Locale.LanguageCode?(v90, 0);
        outlined consume of Locale.LanguageCode?(v94, v96);
        outlined consume of Locale.LanguageCode?(v99, v97);
        goto LABEL_38;
      }
      uint64_t v46 = v56;
      uint64_t v39 = v57;
      Swift::String v58 = String.lowercased()();
      uint64_t countAndFlagsBits = v58._countAndFlagsBits;
      object = v58._object;
      outlined consume of Locale.LanguageCode?(v90, 0);
      outlined consume of Locale.LanguageCode?(v94, v96);
      outlined consume of Locale.LanguageCode?(v99, v97);
      outlined consume of TermOfAddress._TermOfAddress(v110, v118, v119, v111, v120, v112, v113, *((uint64_t *)&v113 + 1), v109, v108, v107, v106, v105);
    }
    swift_bridgeObjectRelease();
    if (countAndFlagsBits == v104 && object == v121) {
      break;
    }
    char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v46, v39);
    if (v47) {
      goto LABEL_45;
    }
LABEL_39:
    outlined release of (language: Locale.LanguageCode, nominative: String, predefinedTermOfAddress: TermOfAddress)((uint64_t)&v126);
    if (!v116)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      a1 = v86;
      uint64_t v16 = v87;
      uint64_t v17 = v91;
      uint64_t v18 = v94;
      uint64_t v67 = (uint64_t)v93;
      uint64_t v68 = v97;
      goto LABEL_43;
    }
    long long v60 = *(_OWORD *)((char *)v101 + v115 + 16);
    long long v126 = *(_OWORD *)((char *)v101 + v115);
    long long v127 = v60;
    long long v61 = *(_OWORD *)((char *)v101 + v115 + 32);
    long long v62 = *(_OWORD *)((char *)v101 + v115 + 48);
    long long v63 = *(_OWORD *)((char *)v101 + v115 + 80);
    long long v130 = *(_OWORD *)((char *)v101 + v115 + 64);
    long long v131 = v63;
    long long v128 = v61;
    long long v129 = v62;
    long long v64 = *(_OWORD *)((char *)v101 + v115 + 96);
    long long v65 = *(_OWORD *)((char *)v101 + v115 + 112);
    long long v66 = *(_OWORD *)((char *)v101 + v115 + 128);
    unint64_t v135 = *(void *)((char *)v101 + v115 + 144);
    long long v133 = v65;
    long long v134 = v66;
    long long v132 = v64;
    v115 += 152;
    --v116;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Locale.LanguageCode?(v46, v39);
LABEL_45:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease_n();
  char v78 = v86;
  uint64_t v79 = v118;
  *long long v86 = v110;
  v78[1] = v79;
  uint64_t v80 = v111;
  v78[2] = v119;
  _OWORD v78[3] = v80;
  uint64_t v81 = v112;
  v78[4] = v120;
  v78[5] = v81;
  uint64_t v82 = *((void *)&v113 + 1);
  v78[6] = v113;
  v78[7] = v82;
  uint64_t v83 = v108;
  v78[8] = v109;
  v78[9] = v83;
  uint64_t v84 = v106;
  v78[10] = v107;
  v78[11] = v84;
  v78[12] = v105;
  return result;
}

uint64_t TermOfAddress.withExtrapolatedPronouns()@<X0>(uint64_t a1@<X8>)
{
  long long v3 = *v1;
  long long v4 = v1[1];
  long long v5 = v1[2];
  long long v6 = v1[3];
  long long v7 = v1[4];
  long long v8 = v1[5];
  unint64_t v9 = *((void *)v1 + 12);
  long long v27 = v4;
  long long v28 = v3;
  long long v31 = v6;
  long long v32 = v5;
  long long v29 = v8;
  long long v30 = v7;
  if (v9 >= 4)
  {
    v35[0] = v3;
    v35[1] = v4;
    v35[2] = v5;
    v35[3] = v6;
    v35[4] = v7;
    v35[5] = v8;
    uint64_t v18 = *((void *)&v3 + 1);
    uint64_t v17 = v3;
    long long v19 = v4;
    outlined copy of Locale.LanguageCode?(v3, *((uint64_t *)&v3 + 1));
    outlined copy of Locale.LanguageCode?(v32, *((uint64_t *)&v32 + 1));
    outlined copy of Locale.LanguageCode?(v30, *((uint64_t *)&v30 + 1));
    unsigned long long v26 = __PAIR128__(v18, v17);
    object = (void *)*((void *)&v19 + 1);
    uint64_t countAndFlagsBits = v19;
    if (!v18)
    {
      outlined copy of Locale.LanguageCode?(v17, 0);
      outlined copy of Locale.LanguageCode?(v32, *((uint64_t *)&v32 + 1));
      outlined copy of Locale.LanguageCode?(v30, *((uint64_t *)&v30 + 1));
      *(void *)&unsigned long long v26 = specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)v35);
      *((void *)&v26 + 1) = v20;
      outlined consume of Locale.LanguageCode?(v17, 0);
      outlined consume of Locale.LanguageCode?(v32, *((uint64_t *)&v32 + 1));
      outlined consume of Locale.LanguageCode?(v30, *((uint64_t *)&v30 + 1));
      if (*((void *)&v26 + 1))
      {
        Swift::String v21 = String.lowercased()();
        object = v21._object;
        uint64_t countAndFlagsBits = v21._countAndFlagsBits;
      }
      else
      {
        unsigned long long v26 = 0uLL;
        object = 0;
        uint64_t countAndFlagsBits = 0;
      }
      uint64_t v18 = 0;
    }
    outlined copy of Locale.LanguageCode?(v17, v18);
    outlined consume of Locale.LanguageCode?(v17, v18);
    outlined consume of Locale.LanguageCode?(v32, *((uint64_t *)&v32 + 1));
    outlined consume of Locale.LanguageCode?(v30, *((uint64_t *)&v30 + 1));
    Swift::String v22 = String.lowercased()();
    if (*((void *)&v26 + 1))
    {
      if (v22._countAndFlagsBits == countAndFlagsBits && object == v22._object)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined consume of Locale.LanguageCode?(v26, *((uint64_t *)&v26 + 1));
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
LABEL_14:
        uint64_t result = TermOfAddress.extrapolatingEnglishPronouns()((uint64_t *)v33);
LABEL_16:
        long long v15 = v33[0];
        long long v16 = v33[1];
        long long v13 = v33[2];
        long long v14 = v33[3];
        long long v11 = v33[4];
        long long v12 = v33[5];
        unint64_t v9 = v34;
        goto LABEL_17;
      }
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined consume of Locale.LanguageCode?(v26, *((uint64_t *)&v26 + 1));
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      if (v23) {
        goto LABEL_14;
      }
    }
    else
    {
      outlined consume of Locale.LanguageCode?(28261, 0xE200000000000000);
      outlined consume of Locale.LanguageCode?(v26, 0);
    }
    uint64_t result = TermOfAddress.extrapolatingFromNominativePronouns()(v33);
    goto LABEL_16;
  }
  uint64_t result = outlined copy of TermOfAddress._TermOfAddress(v3, *((uint64_t *)&v3 + 1), v4, *((uint64_t *)&v4 + 1), v5, *((uint64_t *)&v5 + 1), v6, *((uint64_t *)&v6 + 1), v7, *((uint64_t *)&v7 + 1), v8, *((uint64_t *)&v8 + 1), v9);
  long long v12 = v29;
  long long v11 = v30;
  long long v14 = v31;
  long long v13 = v32;
  long long v16 = v27;
  long long v15 = v28;
LABEL_17:
  *(_OWORD *)a1 = v15;
  *(_OWORD *)(a1 + 16) = v16;
  *(_OWORD *)(a1 + 32) = v13;
  *(_OWORD *)(a1 + 48) = v14;
  *(_OWORD *)(a1 + 64) = v11;
  *(_OWORD *)(a1 + 80) = v12;
  *(void *)(a1 + 96) = v9;
  return result;
}

Swift::Bool __swiftcall NSTermOfAddress.containsPronoun(_:grammemes:)(Swift::String _, Swift::OpaquePointer grammemes)
{
  uint64_t object = (uint64_t)_._object;
  uint64_t countAndFlagsBits = _._countAndFlagsBits;
  id v5 = objc_msgSend(v2, sel_pronouns);
  if (v5)
  {
    long long v6 = v5;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSMorphologyPronoun>);
    uint64_t v78 = swift_dynamicCastClass();
    if (v78)
    {
    }
    else
    {
      swift_unknownObjectRelease();
      objc_msgSend(v6, sel_copy);
      type metadata accessor for NSMorphologyPronoun();
      unint64_t v7 = _bridgeCocoaArray<A>(_:)();

      swift_unknownObjectRelease();
      uint64_t v78 = v7;
      if (v7 >> 62) {
        goto LABEL_65;
      }
    }
    uint64_t v8 = *(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v8)
    {
      uint64_t v9 = 0;
      unint64_t v76 = (char *)object;
      uint64_t v77 = MEMORY[0x1E4FBC840] + 8;
      rawValue = grammemes._rawValue;
      uint64_t v79 = v8;
      while (1)
      {
        if ((v78 & 0xC000000000000001) != 0) {
          id v10 = (id)MEMORY[0x185303120](v9, v78);
        }
        else {
          id v10 = *(id *)(v78 + 32 + 8 * v9);
        }
        long long v11 = v10;
        BOOL v12 = __OFADD__(v9++, 1);
        if (v12)
        {
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
          goto LABEL_63;
        }
        id v13 = objc_msgSend(v10, sel_pronoun);
        id v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        uint64_t v16 = v15;

        if (v14 == (id)countAndFlagsBits && v16 == object)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {

            goto LABEL_10;
          }
        }
        id v19 = objc_msgSend(v11, sel__morphunConstraints);
        if (v77 == MEMORY[0x1E4FBB1A0]) {
          break;
        }
        swift_unknownObjectRetain();
        if (static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)()) {
          goto LABEL_57;
        }
        id v46 = objc_msgSend(v19, sel_count);
        if (!v46) {
          goto LABEL_57;
        }
        uint64_t v47 = (uint64_t)v46;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
        uint64_t v48 = (void *)static _DictionaryStorage.allocate(capacity:)();
        uint64_t v49 = (char *)v48[6];
        uint64_t v50 = v48[7];
        swift_retain();
        uint64_t v51 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v49, v50, v19, v47);
        if (v51 < 0 || v47 < v51) {
          goto LABEL_64;
        }
        v48[2] = v51;
        if (!v51) {
          goto LABEL_56;
        }
        uint64_t object = v51 - 1;
        grammemes._rawValue = v48 + 8;
        do
        {
          while (1)
          {
            if ((*(void *)((char *)grammemes._rawValue + (((unint64_t)object >> 3) & 0x1FFFFFFFFFFFFFF8)) >> object)) {
              goto LABEL_47;
            }
            Swift::String v53 = (uint64_t *)(v48[6] + 16 * object);
            uint64_t v54 = *v53;
            uint64_t v55 = v53[1];
            swift_bridgeObjectRetain();
            unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v54, v55);
            LOBYTE(v54) = v57;
            swift_bridgeObjectRelease();
            if ((v54 & 1) == 0) {
              break;
            }
            swift_arrayDestroy();
            swift_arrayDestroy();
            uint64_t v58 = v48[2];
            BOOL v12 = __OFSUB__(v58, 1);
            uint64_t v59 = v58 - 1;
            if (v12) {
              goto LABEL_62;
            }
            v48[2] = v59;
LABEL_47:
            if (--object < 0) {
              goto LABEL_55;
            }
          }
          *(void *)((char *)grammemes._rawValue + ((v56 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v56;
          if (object < (uint64_t)v56)
          {
            uint64_t v52 = 16 * v56;
            *(_OWORD *)(v48[6] + v52) = *(_OWORD *)(v48[6] + 16 * object);
            *(_OWORD *)(v48[7] + v52) = *(_OWORD *)(v48[7] + 16 * object);
            goto LABEL_47;
          }
          if (v56 == object) {
            goto LABEL_47;
          }
          uint64_t v60 = v48[6];
          long long v61 = (uint64_t *)(v60 + 16 * v56);
          long long v62 = (uint64_t *)(v60 + 16 * object);
          uint64_t v63 = *v61;
          uint64_t v64 = v61[1];
          uint64_t v65 = v62[1];
          *long long v61 = *v62;
          v61[1] = v65;
          *long long v62 = v63;
          v62[1] = v64;
          uint64_t v66 = v48[7];
          uint64_t v67 = (uint64_t *)(v66 + 16 * v56);
          uint64_t v68 = (uint64_t *)(v66 + 16 * object);
          uint64_t v69 = *v67;
          uint64_t v70 = v67[1];
          uint64_t v71 = v68[1];
          *uint64_t v67 = *v68;
          v67[1] = v71;
          *uint64_t v68 = v69;
          v68[1] = v70;
        }
        while ((object & 0x8000000000000000) == 0);
LABEL_55:
        grammemes._rawValue = rawValue;
LABEL_56:
        swift_release();
LABEL_57:

        MEMORY[0x1F4188790](v72);
        char v73 = specialized Sequence.allSatisfy(_:)((uint64_t)grammemes._rawValue, partial apply for closure #1 in NSTermOfAddress.containsPronoun(_:grammemes:));
        swift_bridgeObjectRelease();

        if (v73)
        {
          swift_bridgeObjectRelease();
          LOBYTE(v5) = 1;
          return (char)v5;
        }
        uint64_t object = (uint64_t)v76;
LABEL_10:
        if (v9 == v79) {
          goto LABEL_66;
        }
      }
      swift_bridgeObjectRelease();
      swift_unknownObjectRetain();
      if (static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)()) {
        goto LABEL_57;
      }
      id v20 = objc_msgSend(v19, sel_count);
      if (!v20) {
        goto LABEL_57;
      }
      uint64_t v21 = (uint64_t)v20;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      Swift::String v22 = (void *)static _DictionaryStorage.allocate(capacity:)();
      uint64_t v24 = (void *)v22[6];
      uint64_t v23 = v22[7];
      swift_retain();
      uint64_t v25 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v24, v23, v19, v21);
      if ((v25 & 0x8000000000000000) == 0 && v21 >= v25)
      {
        v22[2] = v25;
        if (!v25) {
          goto LABEL_56;
        }
        grammemes._rawValue = (void *)(v25 - 1);
        uint64_t object = (uint64_t)(v22 + 8);
        while (1)
        {
          if ((*(void *)(object + (((unint64_t)grammemes._rawValue >> 3) & 0x1FFFFFFFFFFFFFF8)) >> SLOBYTE(grammemes._rawValue))) {
            goto LABEL_32;
          }
          long long v30 = (uint64_t *)(v22[6] + 16 * (uint64_t)grammemes._rawValue);
          uint64_t v31 = *v30;
          uint64_t v32 = v30[1];
          swift_bridgeObjectRetain();
          unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
          LOBYTE(v31) = v34;
          swift_bridgeObjectRelease();
          if (v31) {
            break;
          }
          *(void *)(object + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
          if ((uint64_t)grammemes._rawValue < (uint64_t)v33)
          {
            *(_OWORD *)(v22[6] + 16 * v33) = *(_OWORD *)(v22[6] + 16 * (uint64_t)grammemes._rawValue);
            uint64_t v26 = v22[7];
            long long v27 = (_OWORD *)(v26 + 32 * (uint64_t)grammemes._rawValue);
            long long v28 = v27[1];
            long long v29 = (_OWORD *)(v26 + 32 * v33);
            *long long v29 = *v27;
            v29[1] = v28;
LABEL_32:
            if (((unint64_t)--grammemes._rawValue & 0x8000000000000000) != 0) {
              goto LABEL_55;
            }
            continue;
          }
          if ((void *)v33 == grammemes._rawValue) {
            goto LABEL_32;
          }
          uint64_t v37 = v22[6];
          uint64_t v38 = (uint64_t *)(v37 + 16 * v33);
          uint64_t v39 = (uint64_t *)(v37 + 16 * (uint64_t)grammemes._rawValue);
          uint64_t v40 = *v38;
          uint64_t v41 = v38[1];
          uint64_t v42 = v39[1];
          *uint64_t v38 = *v39;
          v38[1] = v42;
          *uint64_t v39 = v40;
          v39[1] = v41;
          uint64_t v43 = v22[7];
          uint64_t v44 = (_OWORD *)(v43 + 32 * v33);
          uint64_t v45 = (_OWORD *)(v43 + 32 * (uint64_t)grammemes._rawValue);
          outlined init with take of Any(v44, v81);
          outlined init with take of Any(v45, v44);
          outlined init with take of Any(v81, v45);
          if (((unint64_t)grammemes._rawValue & 0x8000000000000000) != 0) {
            goto LABEL_55;
          }
        }
        swift_arrayDestroy();
        swift_arrayDestroy();
        uint64_t v35 = v22[2];
        BOOL v12 = __OFSUB__(v35, 1);
        uint64_t v36 = v35 - 1;
        if (v12) {
          goto LABEL_61;
        }
        v22[2] = v36;
        goto LABEL_32;
      }
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_66:
    swift_bridgeObjectRelease();
    LOBYTE(v5) = 0;
  }
  return (char)v5;
}

uint64_t closure #1 in NSTermOfAddress.containsPronoun(_:grammemes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a5 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v11)
    {
      BOOL v12 = (uint64_t *)(*(void *)(a5 + 56) + 16 * v10);
      uint64_t v13 = *v12;
      uint64_t v14 = v12[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v13 == a3 && v14 == a4) {
        char v16 = 1;
      }
      else {
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
    }
    else
    {
      char v16 = 1;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v16 = 1;
  }
  return v16 & 1;
}

uint64_t outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)(uint64_t a1)
{
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v3 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v11 = *(void *)(a1 + 128);
  uint64_t v12 = *(void *)(a1 + 120);
  uint64_t v10 = *(void *)(a1 + 136);
  long long v8 = *(_OWORD *)(a1 + 160);
  long long v9 = *(_OWORD *)(a1 + 144);
  unint64_t v6 = *(void *)(a1 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of TermOfAddress?(v13, v2, v3, v4, v5, v12, v11, v10, v9, *((uint64_t *)&v9 + 1), v8, *((uint64_t *)&v8 + 1), v6);
  return a1;
}

uint64_t outlined release of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v11 = *(void *)(a1 + 128);
  uint64_t v12 = *(void *)(a1 + 120);
  uint64_t v10 = *(void *)(a1 + 136);
  long long v8 = *(_OWORD *)(a1 + 160);
  long long v9 = *(_OWORD *)(a1 + 144);
  unint64_t v6 = *(void *)(a1 + 176);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of TermOfAddress?(v13, v2, v3, v4, v5, v12, v11, v10, v9, *((uint64_t *)&v9 + 1), v8, *((uint64_t *)&v8 + 1), v6);
  return a1;
}

uint64_t outlined retain of (language: Locale.LanguageCode, nominative: String, predefinedTermOfAddress: TermOfAddress)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v7 = *(void *)(a1 + 96);
  uint64_t v12 = *(void *)(a1 + 104);
  uint64_t v13 = *(void *)(a1 + 48);
  long long v10 = *(_OWORD *)(a1 + 128);
  long long v11 = *(_OWORD *)(a1 + 112);
  unint64_t v8 = *(void *)(a1 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of TermOfAddress._TermOfAddress(v13, v2, v3, v4, v5, v6, v7, v12, v11, *((uint64_t *)&v11 + 1), v10, *((uint64_t *)&v10 + 1), v8);
  return a1;
}

uint64_t outlined release of (language: Locale.LanguageCode, nominative: String, predefinedTermOfAddress: TermOfAddress)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v7 = *(void *)(a1 + 96);
  uint64_t v12 = *(void *)(a1 + 104);
  uint64_t v13 = *(void *)(a1 + 48);
  long long v10 = *(_OWORD *)(a1 + 128);
  long long v11 = *(_OWORD *)(a1 + 112);
  unint64_t v8 = *(void *)(a1 + 144);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of TermOfAddress._TermOfAddress(v13, v2, v3, v4, v5, v6, v7, v12, v11, *((uint64_t *)&v11 + 1), v10, *((uint64_t *)&v10 + 1), v8);
  return a1;
}

unint64_t type metadata accessor for NSMorphologyPronoun()
{
  unint64_t result = lazy cache variable for type metadata for NSMorphologyPronoun;
  if (!lazy cache variable for type metadata for NSMorphologyPronoun)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
  }
  return result;
}

uint64_t partial apply for closure #1 in NSTermOfAddress.containsPronoun(_:grammemes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in NSTermOfAddress.containsPronoun(_:grammemes:)(a1, a2, a3, a4, *(void *)(v4 + 16));
}

uint64_t specialized Sequence.allSatisfy(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v23 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      break;
    }
    if (v19 >= v23) {
      goto LABEL_24;
    }
    unint64_t v20 = *(void *)(v4 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v23) {
        goto LABEL_24;
      }
      unint64_t v20 = *(void *)(v4 + 8 * v9);
      if (!v20)
      {
        int64_t v9 = v19 + 2;
        if (v19 + 2 >= v23) {
          goto LABEL_24;
        }
        unint64_t v20 = *(void *)(v4 + 8 * v9);
        if (!v20)
        {
          int64_t v9 = v19 + 3;
          if (v19 + 3 >= v23) {
            goto LABEL_24;
          }
          unint64_t v20 = *(void *)(v4 + 8 * v9);
          if (!v20)
          {
            int64_t v21 = v19 + 4;
            if (v21 >= v23)
            {
LABEL_24:
              uint64_t v22 = 1;
              goto LABEL_25;
            }
            unint64_t v20 = *(void *)(v4 + 8 * v21);
            if (!v20)
            {
              while (1)
              {
                int64_t v9 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_27;
                }
                if (v9 >= v23) {
                  goto LABEL_24;
                }
                unint64_t v20 = *(void *)(v4 + 8 * v9);
                ++v21;
                if (v20) {
                  goto LABEL_22;
                }
              }
            }
            int64_t v9 = v21;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v20 - 1) & v20;
    unint64_t v11 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_5:
    uint64_t v12 = 16 * v11;
    uint64_t v13 = (uint64_t *)(*(void *)(a1 + 48) + v12);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    char v16 = (uint64_t *)(*(void *)(a1 + 56) + v12);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    LOBYTE(v17) = a2(v14, v15, v17, v18);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      uint64_t v22 = 0;
LABEL_25:
      swift_release();
      return v22;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

unint64_t specialized BidirectionalCollection<>._alignIndex(roundingUp:)(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t result = _StringGuts.validateInclusiveScalarIndex(_:)(a1, a4, a5);
  if (result >> 14 < a1 >> 14 && result >> 14 < a3 >> 14)
  {
    unint64_t v11 = _StringGuts.validateScalarIndex(_:)(result, a4, a5);
    if ((a5 & 0x1000000000000000) != 0)
    {
      return String.UnicodeScalarView._foreignIndex(after:)();
    }
    else
    {
      unint64_t v12 = v11 >> 16;
      if ((a5 & 0x2000000000000000) != 0)
      {
        v17[0] = a4;
        v17[1] = a5 & 0xFFFFFFFFFFFFFFLL;
        int v14 = *((unsigned __int8 *)v17 + v12);
      }
      else
      {
        if ((a4 & 0x1000000000000000) != 0) {
          uint64_t v13 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
        }
        else {
          uint64_t v13 = _StringObject.sharedUTF8.getter();
        }
        int v14 = *(unsigned __int8 *)(v13 + v12);
      }
      int v15 = (char)v14;
      unsigned int v16 = __clz(v14 ^ 0xFF) - 24;
      if (v15 >= 0) {
        LOBYTE(v16) = 1;
      }
      return ((v12 + v16) << 16) | 5;
    }
  }
  return result;
}

unint64_t specialized BidirectionalCollection<>._alignIndex(roundingUp:)(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = _StringGuts.validateInclusiveScalarIndex(_:)(a1, a2, a3);
  if (result >> 14 < a1 >> 14)
  {
    uint64_t v7 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (result >> 14 < 4 * v7)
    {
      unint64_t v8 = _StringGuts.validateScalarIndex(_:)(result, a2, a3);
      if ((a3 & 0x1000000000000000) != 0)
      {
        return String.UnicodeScalarView._foreignIndex(after:)();
      }
      else
      {
        unint64_t v9 = v8 >> 16;
        if ((a3 & 0x2000000000000000) != 0)
        {
          v14[0] = a2;
          v14[1] = a3 & 0xFFFFFFFFFFFFFFLL;
          int v11 = *((unsigned __int8 *)v14 + v9);
        }
        else
        {
          if ((a2 & 0x1000000000000000) != 0) {
            uint64_t v10 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
          }
          else {
            uint64_t v10 = _StringObject.sharedUTF8.getter();
          }
          int v11 = *(unsigned __int8 *)(v10 + v9);
        }
        int v12 = (char)v11;
        unsigned int v13 = __clz(v11 ^ 0xFF) - 24;
        if (v12 >= 0) {
          LOBYTE(v13) = 1;
        }
        return ((v9 + v13) << 16) | 5;
      }
    }
  }
  return result;
}

unint64_t specialized Data.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeMutableBufferPointer<UInt8>);
  uint64_t v10 = &protocol witness table for <A> UnsafeMutableBufferPointer<A>;
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v8, v9);
  unint64_t v5 = *v4;
  if (*v4)
  {
    uint64_t v6 = v4[1];
    if (v6)
    {
      if (v6 <= 14)
      {
        unint64_t v5 = specialized Data.InlineData.init(_:)((unsigned char *)*v4, (unsigned char *)(v5 + v6));
      }
      else
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        __DataStorage.init(bytes:length:)(v5, v6);
        if ((unint64_t)v6 >= 0x7FFFFFFF)
        {
          type metadata accessor for Data.RangeReference();
          unint64_t v5 = swift_allocObject();
          *(void *)(v5 + 16) = 0;
          *(void *)(v5 + 24) = v6;
        }
        else
        {
          unint64_t v5 = v6 << 32;
        }
      }
    }
    else
    {
      unint64_t v5 = 0;
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v5;
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1, unint64_t a2)
{
  v34[5] = *MEMORY[0x1E4F143B8];
  v34[3] = &type metadata for Data;
  v34[4] = &protocol witness table for Data;
  v34[0] = a1;
  v34[1] = a2;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v34, (uint64_t)&type metadata for Data);
  uint64_t v6 = *v4;
  unint64_t v5 = v4[1];
  switch(v5 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)v6;
      uint64_t v11 = v6 >> 32;
      BOOL v12 = v11 < v10;
      uint64_t v13 = v11 - v10;
      if (v12)
      {
        __break(1u);
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
      int v14 = (void *)(v5 & 0x3FFFFFFFFFFFFFFFLL);
      uint64_t v15 = v14[2];
      if (v15)
      {
        uint64_t v16 = v14[5];
        BOOL v17 = __OFSUB__(v10, v16);
        uint64_t v18 = v10 - v16;
        if (!v17)
        {
          int64_t v19 = (unsigned char *)(v15 + v18);
          uint64_t v20 = v14[3];
          if (v20 >= v13) {
            uint64_t v20 = v13;
          }
          int64_t v21 = &v19[v20];
          goto LABEL_18;
        }
LABEL_23:
        __break(1u);
      }
LABEL_17:
      int64_t v19 = 0;
      int64_t v21 = 0;
LABEL_18:
      outlined copy of Data._Representation(a1, a2);
      unint64_t v8 = v19;
      uint64_t v9 = v21;
LABEL_19:
      closure #1 in Data.init<A>(_:)(v8, v9, &v33);
      outlined consume of Data._Representation(a1, a2);
      uint64_t v30 = v33;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
      return v30;
    case 2uLL:
      uint64_t v22 = (void *)(v5 & 0x3FFFFFFFFFFFFFFFLL);
      uint64_t v23 = *(void *)(v6 + 16);
      uint64_t v24 = *(void *)(v6 + 24);
      uint64_t v25 = v22[2];
      if (v25)
      {
        uint64_t v26 = v22[5];
        BOOL v17 = __OFSUB__(v23, v26);
        uint64_t v27 = v23 - v26;
        if (v17)
        {
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
        BOOL v17 = __OFSUB__(v24, v23);
        uint64_t v28 = v24 - v23;
        if (!v17)
        {
          int64_t v19 = (unsigned char *)(v25 + v27);
          uint64_t v29 = v22[3];
          if (v29 >= v28) {
            uint64_t v29 = v28;
          }
          int64_t v21 = &v19[v29];
          goto LABEL_18;
        }
      }
      else if (!__OFSUB__(v24, v23))
      {
        goto LABEL_17;
      }
      goto LABEL_21;
    case 3uLL:
      memset(v32, 0, 14);
      outlined copy of Data._Representation(a1, a2);
      unint64_t v8 = v32;
      uint64_t v9 = v32;
      goto LABEL_19;
    default:
      v32[0] = *v4;
      LOWORD(v32[1]) = v5;
      BYTE2(v32[1]) = BYTE2(v5);
      BYTE3(v32[1]) = BYTE3(v5);
      BYTE4(v32[1]) = BYTE4(v5);
      BYTE5(v32[1]) = BYTE5(v5);
      uint64_t v7 = (char *)v32 + BYTE6(v5);
      outlined copy of Data._Representation(a1, a2);
      unint64_t v8 = v32;
      uint64_t v9 = v7;
      goto LABEL_19;
  }
}

unint64_t String.UnicodeScalarView.index(_:offsetBy:)(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t result = _StringGuts.validateInclusiveScalarIndex(_:)(a1, a3, a4);
  if (a2 < 0)
  {
    uint64_t v14 = 0;
    while (1)
    {
      if (result < 0x10000) {
        goto LABEL_38;
      }
      if ((a4 & 0x1000000000000000) == 0) {
        break;
      }
      unint64_t result = String.UnicodeScalarView._foreignIndex(before:)();
LABEL_20:
      if (--v14 <= a2) {
        return result;
      }
    }
    unint64_t v15 = result >> 16;
    if ((a4 & 0x2000000000000000) != 0)
    {
      unint64_t v21 = a3;
      uint64_t v22 = a4 & 0xFFFFFFFFFFFFFFLL;
      if ((*((unsigned char *)&v21 + v15 - 1) & 0xC0) == 0x80)
      {
        uint64_t v17 = 0;
        do
          int v19 = *((unsigned char *)&v21 + v15 + v17-- - 2) & 0xC0;
        while (v19 == 128);
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v16 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((a3 & 0x1000000000000000) == 0) {
        uint64_t v16 = _StringObject.sharedUTF8.getter();
      }
      if ((*(unsigned char *)(v15 + v16 - 1) & 0xC0) == 0x80)
      {
        uint64_t v17 = 0;
        do
          int v18 = *(unsigned char *)(v16 + v15 - 2 + v17--) & 0xC0;
        while (v18 == 128);
LABEL_33:
        uint64_t v20 = 1 - v17;
LABEL_35:
        unint64_t result = ((v15 - v20) << 16) | 5;
        goto LABEL_20;
      }
    }
    uint64_t v20 = 1;
    goto LABEL_35;
  }
  if (a2)
  {
    if ((a4 & 0x2000000000000000) != 0) {
      unint64_t v8 = HIBYTE(a4) & 0xF;
    }
    else {
      unint64_t v8 = a3 & 0xFFFFFFFFFFFFLL;
    }
    while (1)
    {
      unint64_t v9 = result >> 16;
      if (result >> 16 >= v8) {
        break;
      }
      if ((a4 & 0x1000000000000000) != 0)
      {
        unint64_t result = String.UnicodeScalarView._foreignIndex(after:)();
        if (!--a2) {
          return result;
        }
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          unint64_t v21 = a3;
          uint64_t v22 = a4 & 0xFFFFFFFFFFFFFFLL;
          int v11 = *((unsigned __int8 *)&v21 + v9);
        }
        else
        {
          uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0) {
            uint64_t v10 = _StringObject.sharedUTF8.getter();
          }
          int v11 = *(unsigned __int8 *)(v10 + v9);
        }
        int v12 = (char)v11;
        unsigned int v13 = __clz(v11 ^ 0xFF) - 24;
        if (v12 >= 0) {
          LOBYTE(v13) = 1;
        }
        unint64_t result = ((v9 + v13) << 16) | 5;
        if (!--a2) {
          return result;
        }
      }
    }
    __break(1u);
LABEL_38:
    __break(1u);
  }
  return result;
}

uint64_t StringProtocol.data(using:allowLossyConversion:)(uint64_t *a1, char a2)
{
  unint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v13 - v5;
  uint64_t v7 = *a1;
  if (v7 == 4)
  {
    dispatch thunk of StringProtocol.utf8.getter();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    return Data.init<A>(_:)((uint64_t)v6, AssociatedTypeWitness, *(void *)(AssociatedConformanceWitness + 8));
  }
  else
  {
    StringProtocol._ephemeralString.getter();
    uint64_t v10 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v9 = objc_msgSend(v10, sel_dataUsingEncoding_allowLossyConversion_, v7, a2 & 1);
    swift_unknownObjectRelease();
    if (v9)
    {
      id v11 = v9;
      id v9 = specialized Data.init(referencing:)(v11);
    }
  }
  return (uint64_t)v9;
}

unint64_t StringProtocol._lineBounds<A>(around:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return StringProtocol._lineBounds<A>(around:)(a1, a2, a3, a4, a5, 0xFuLL);
}

unint64_t StringProtocol._paragraphBounds<A>(around:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return StringProtocol._lineBounds<A>(around:)(a1, a2, a3, a4, a5, 7uLL);
}

unint64_t StringProtocol._lineBounds<A>(around:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v67 = a6;
  unint64_t v68 = a5;
  uint64_t v64 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v63 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  long long v62 = (char *)&v57 - v11;
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  unint64_t v15 = (char *)&v57 - v14;
  if (a2 == MEMORY[0x1E4FBB1A0])
  {
    unint64_t v39 = v6[1];
    unint64_t v76 = *v6;
    unint64_t v40 = v76;
    unint64_t v77 = v39;
    lazy protocol witness table accessor for type String.UnicodeScalarView and conformance String.UnicodeScalarView();
    swift_bridgeObjectRetain();
    dispatch thunk of RangeExpression.relative<A>(to:)();
    unint64_t v41 = v70;
    unint64_t v42 = _StringGuts.validateInclusiveScalarIndex(_:)(v69, v40, v39);
    unint64_t result = specialized BidirectionalCollection<>._alignIndex(roundingUp:)(v41, v40, v39);
    if (result >> 14 < v42 >> 14)
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    unint64_t v43 = result;
    unint64_t v44 = String.subscript.getter();
    unint64_t v46 = v45;
    unint64_t v48 = v47;
    unint64_t v50 = v49;
    swift_bridgeObjectRelease();
    specialized BidirectionalCollection<>._getBlock(for:in:)(v67, v42, v43, v44, v46, v48, v50, (uint64_t)&v76);
    uint64_t v6 = (unint64_t *)&demangling cache variable for type metadata for String.Index?;
    outlined init with take of LocalePreferences?((uint64_t)&v76, (uint64_t)v82, &demangling cache variable for type metadata for String.Index?);
    unint64_t result = outlined init with take of LocalePreferences?((uint64_t)v82, (uint64_t)&v83, &demangling cache variable for type metadata for String.Index?);
    if (v84)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    uint64_t v38 = (char *)v83;
    outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v81, &demangling cache variable for type metadata for String.Index?);
    unint64_t result = outlined init with take of LocalePreferences?((uint64_t)v81, (uint64_t)&v85, &demangling cache variable for type metadata for String.Index?);
    if (v86)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)v80, &demangling cache variable for type metadata for String.Index?);
    outlined init with take of LocalePreferences?((uint64_t)v80, (uint64_t)&v69, &demangling cache variable for type metadata for String.Index?);
    if ((v70 & 1) == 0)
    {
LABEL_18:
      swift_bridgeObjectRelease();
      return (unint64_t)v38;
    }
    __break(1u);
  }
  else if (a2 != MEMORY[0x1E4FBB7A8])
  {
    uint64_t v65 = v10;
    dispatch thunk of StringProtocol.unicodeScalars.getter();
    swift_getAssociatedConformanceWitness();
    dispatch thunk of RangeExpression.relative<A>(to:)();
    unint64_t v16 = v77;
    unint64_t v69 = v76;
    dispatch thunk of BidirectionalCollection.index(_:offsetBy:)();
    unint64_t v17 = v76;
    unint64_t result = BidirectionalCollection<>._alignIndex(roundingUp:)(v16, v12);
    if (result >> 14 < v17 >> 14)
    {
      __break(1u);
    }
    else
    {
      int v19 = *(void (**)(char *, uint64_t))(v13 + 8);
      unint64_t v68 = result;
      v19(v15, v12);
      unint64_t v20 = v17;
      unint64_t v59 = v17;
      unint64_t v21 = v62;
      dispatch thunk of StringProtocol.utf8.getter();
      unint64_t v22 = *(void *)(*(void *)(a4 + 8) + 8);
      dispatch thunk of Collection.startIndex.getter();
      unint64_t v69 = v76;
      unint64_t v85 = v20;
      uint64_t v23 = AssociatedTypeWitness;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v60 = dispatch thunk of Collection.distance(from:to:)();
      uint64_t v25 = v65 + 8;
      uint64_t v26 = *(void (**)(char *, uint64_t))(v65 + 8);
      v26(v21, v23);
      uint64_t v61 = a4;
      dispatch thunk of StringProtocol.utf8.getter();
      unint64_t v76 = v59;
      unint64_t v69 = v68;
      unint64_t v59 = AssociatedConformanceWitness;
      dispatch thunk of Collection.distance(from:to:)();
      uint64_t v65 = v25;
      uint64_t v58 = v26;
      v26(v21, v23);
      (*(void (**)(char *, unint64_t *, uint64_t))(v64 + 16))(v63, v6, a2);
      unint64_t v68 = v22;
      unint64_t v27 = Substring.init<A>(_:)();
      unint64_t v29 = v28;
      unint64_t v31 = v30;
      unint64_t v33 = v32;
      unint64_t v34 = Substring.UTF8View.index(_:offsetBy:)();
      swift_bridgeObjectRetain();
      unint64_t v35 = Substring.UTF8View.index(_:offsetBy:)();
      unint64_t result = swift_bridgeObjectRelease();
      if (v35 >> 14 >= v34 >> 14)
      {
        swift_bridgeObjectRetain();
        specialized BidirectionalCollection<>._getBlock(for:in:)(v67, v34, v35, v27, v29, v31, v33, (uint64_t)&v76);
        outlined init with take of LocalePreferences?((uint64_t)&v76, (uint64_t)v82, &demangling cache variable for type metadata for String.Index?);
        unint64_t result = outlined init with take of LocalePreferences?((uint64_t)v82, (uint64_t)&v83, &demangling cache variable for type metadata for String.Index?);
        if ((v84 & 1) == 0)
        {
          unint64_t v67 = v83;
          outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v81, &demangling cache variable for type metadata for String.Index?);
          unint64_t result = outlined init with take of LocalePreferences?((uint64_t)v81, (uint64_t)&v85, &demangling cache variable for type metadata for String.Index?);
          if ((v86 & 1) == 0)
          {
            outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)v80, &demangling cache variable for type metadata for String.Index?);
            unint64_t result = outlined init with take of LocalePreferences?((uint64_t)v80, (uint64_t)&v69, &demangling cache variable for type metadata for String.Index?);
            if ((v70 & 1) == 0)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              uint64_t v63 = (char *)Substring.UTF8View.distance(from:to:)();
              uint64_t v64 = Substring.UTF8View.distance(from:to:)();
              swift_bridgeObjectRelease();
              unint64_t v67 = Substring.UTF8View.distance(from:to:)();
              swift_bridgeObjectRelease();
              dispatch thunk of StringProtocol.utf8.getter();
              dispatch thunk of Collection.startIndex.getter();
              uint64_t v73 = v74;
              uint64_t v36 = AssociatedTypeWitness;
              dispatch thunk of Collection.index(_:offsetBy:)();
              uint64_t v37 = v58;
              v58(v21, v36);
              uint64_t v63 = v75;
              dispatch thunk of StringProtocol.utf8.getter();
              dispatch thunk of Collection.startIndex.getter();
              uint64_t v72 = v73;
              dispatch thunk of Collection.index(_:offsetBy:)();
              v37(v21, v36);
              dispatch thunk of StringProtocol.utf8.getter();
              uint64_t v38 = v63;
              dispatch thunk of Collection.startIndex.getter();
              uint64_t v71 = v72;
              dispatch thunk of Collection.index(_:offsetBy:)();
              v37(v21, v36);
              return (unint64_t)v38;
            }
            goto LABEL_26;
          }
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
          goto LABEL_27;
        }
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
    }
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v52 = v6[1];
  unint64_t v54 = v6[2];
  unint64_t v53 = v6[3];
  unint64_t v76 = *v6;
  unint64_t v51 = v76;
  unint64_t v77 = v52;
  v78[0] = v54;
  v78[1] = v53;
  lazy protocol witness table accessor for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView();
  swift_bridgeObjectRetain();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  unint64_t v55 = v70;
  unint64_t v56 = _StringGuts.validateInclusiveScalarIndex(_:)(v69, v54, v53);
  unint64_t result = specialized BidirectionalCollection<>._alignIndex(roundingUp:)(v55, v51, v52, v54, v53);
  if (result >> 14 < v56 >> 14)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized BidirectionalCollection<>._getBlock(for:in:)(v67, v56, result, v51, v52, v54, v53, (uint64_t)&v76);
  outlined init with take of LocalePreferences?((uint64_t)&v76, (uint64_t)v82, &demangling cache variable for type metadata for String.Index?);
  unint64_t result = outlined init with take of LocalePreferences?((uint64_t)v82, (uint64_t)&v83, &demangling cache variable for type metadata for String.Index?);
  if (v84)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v38 = (char *)v83;
  outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v81, &demangling cache variable for type metadata for String.Index?);
  unint64_t result = outlined init with take of LocalePreferences?((uint64_t)v81, (uint64_t)&v85, &demangling cache variable for type metadata for String.Index?);
  if (v86)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)v80, &demangling cache variable for type metadata for String.Index?);
  unint64_t result = outlined init with take of LocalePreferences?((uint64_t)v80, (uint64_t)&v69, &demangling cache variable for type metadata for String.Index?);
  if ((v70 & 1) == 0) {
    goto LABEL_18;
  }
LABEL_31:
  __break(1u);
  return result;
}

void *specialized Data.LargeSlice.withUnsafeMutableBytes<A>(_:)(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v3 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = v1[1];
    uint64_t v7 = *(void *)(*v1 + 16);
    uint64_t v6 = *(void *)(*v3 + 24);
    uint64_t v8 = *(void *)(v5 + 16);
    if (v8)
    {
      uint64_t v9 = *(void *)(v5 + 40);
      BOOL v10 = __OFSUB__(v7, v9);
      uint64_t v11 = v7 - v9;
      if (v10)
      {
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
      unint64_t v12 = v8 + v11;
      uint64_t v13 = v6 - v7;
      if (!__OFSUB__(v6, v7)) {
        goto LABEL_5;
      }
    }
    else
    {
      unint64_t v12 = 0;
      uint64_t v13 = v6 - v7;
      if (!__OFSUB__(v6, v7))
      {
LABEL_5:
        type metadata accessor for __DataStorage();
        swift_allocObject();
        v3[1] = __DataStorage.init(bytes:length:copy:deallocator:offset:)(v12, v13, 1, 0, 0, v7);
        swift_release();
        goto LABEL_6;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_6:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v14 = *(void *)(*v3 + 16);
    uint64_t v15 = *(void *)(*v3 + 24);
    type metadata accessor for Data.RangeReference();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v14;
    *(void *)(v16 + 24) = v15;
    *uint64_t v3 = v16;
    swift_release();
  }
  unint64_t v17 = (void *)v3[1];
  uint64_t v18 = v17[2];
  if (!v18)
  {
LABEL_22:
    __break(1u);
    JUMPOUT(0x181F74440);
  }
  uint64_t v19 = *(void *)(*v3 + 16);
  uint64_t v20 = v17[5];
  BOOL v10 = __OFSUB__(v19, v20);
  uint64_t v21 = v19 - v20;
  if (v10) {
    goto LABEL_19;
  }
  uint64_t v22 = *(void *)(*v3 + 24);
  BOOL v10 = __OFSUB__(v22, v19);
  uint64_t v23 = v22 - v19;
  if (v10)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v24 = v17[3];
  if (v24 >= v23) {
    uint64_t v24 = v23;
  }
  unint64_t result = a1(&v26, v18 + v21, v18 + v21 + v24);
  if (!v2) {
    return (void *)v26;
  }
  return result;
}

uint64_t closure #1 in String.data(using:allowLossyConversion:)(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v22 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v5 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v5 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return result;
  }
  uint64_t v9 = (void *)result;
  uint64_t v19 = a3 & 0xFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  uint64_t v10 = 0;
  while (1)
  {
    if ((a3 & 0x1000000000000000) != 0)
    {
      unsigned int v12 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a3 & 0x2000000000000000) != 0)
      {
        uint64_t v20 = a2;
        uint64_t v21 = v19;
      }
      else if ((a2 & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      unsigned int v12 = _decodeScalar(_:startingAt:)();
    }
    uint64_t v14 = v13;
    if (v12 > 0x7F) {
      break;
    }
    uint64_t v16 = v9[2];
    uint64_t v17 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v20, (unsigned char *)(*v9 + v16), v9[1] - v16, v12);
    unint64_t v4 = v21;
    if (v20 <= 0x7F)
    {
      if (v21 != 1) {
        goto LABEL_31;
      }
    }
    else if (v20 >= 0x800)
    {
      if (WORD1(v20))
      {
        if (v21 != 4)
        {
          unint64_t v18 = 4;
          goto LABEL_32;
        }
      }
      else if (v21 != 3)
      {
        unint64_t v18 = 3;
        goto LABEL_32;
      }
    }
    else if (v21 != 2)
    {
      unint64_t v18 = 2;
      goto LABEL_32;
    }
    uint64_t v11 = v17 + v16;
LABEL_8:
    v9[2] = v11;
    v10 += v14;
    if (v10 >= v5) {
      return swift_bridgeObjectRelease();
    }
  }
  uint64_t v15 = v9[2];
  if (v15 < v9[1])
  {
    *(unsigned char *)(*v9 + v15) = a4;
    uint64_t v11 = v15 + 1;
    goto LABEL_8;
  }
  __break(1u);
LABEL_31:
  unint64_t v18 = 1;
LABEL_32:
  unint64_t result = Unicode.Scalar.UTF8View.subscript.getter();
  if (v4 < v18) {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t StringProtocol.lineRange<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return StringProtocol.lineRange<A>(for:)(a1, a2, a3, a4, a5, 0xFuLL);
}

unint64_t StringProtocol.paragraphRange<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return StringProtocol.lineRange<A>(for:)(a1, a2, a3, a4, a5, 7uLL);
}

unint64_t StringProtocol.lineRange<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t result = StringProtocol._lineBounds<A>(around:)(a1, a2, a3, a4, a5, a6);
  if (v7 >> 14 < result >> 14) {
    __break(1u);
  }
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = result;
  if (!a2)
  {
    uint64_t v6 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
    uint64_t v6 = 0;
    goto LABEL_14;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = 0;
    if (objc_msgSend(v3, sel_length))
    {
      uint64_t v12 = a3;
      uint64_t v7 = a3 - 1;
      while (1)
      {
        char v16 = 0;
        uint64_t v15 = v6;
        uint64_t v8 = (void *)swift_allocObject();
        v8[2] = &v15;
        void v8[3] = v6;
        v8[4] = &v16;
        uint64_t v9 = swift_allocObject();
        *(void *)(v9 + 16) = _sSo6NSDataC10FoundationEys5UInt8VSicigySV_So8_NSRangeVSpy10ObjectiveC8ObjCBoolVGtXEfU_TA_0;
        *(void *)(v9 + 24) = v8;
        aBlock[4] = _sSVSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIgyyy_SVAbFIegyyy_TRTA_0;
        aBlock[5] = v9;
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeRawPointer, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
        aBlock[3] = &block_descriptor_23;
        uint64_t v10 = _Block_copy(aBlock);
        swift_retain();
        swift_release();
        objc_msgSend(v3, sel_enumerateByteRangesUsingBlock_, v10);
        _Block_release(v10);
        LOBYTE(v10) = swift_isEscapingClosureAtFileLocation();
        unint64_t result = (void *)swift_release();
        if (v10) {
          break;
        }
        char v11 = v16;
        swift_release();
        unint64_t result = objc_msgSend(v3, sel_length);
        if (v6 >= (uint64_t)result) {
          goto LABEL_16;
        }
        *(unsigned char *)(a2 + v6) = v11;
        if (v7 == v6)
        {
          uint64_t v6 = v12;
          goto LABEL_14;
        }
        if ((id)++v6 == objc_msgSend(v3, sel_length)) {
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
LABEL_14:
    *uint64_t v13 = v3;
    v13[1] = v6;
    return (void *)v6;
  }
LABEL_17:
  __break(1u);
  return result;
}

void specialized Sequence._copySequenceContents(initializing:)(void *a1, _OWORD *a2, uint64_t a3)
{
  type metadata accessor for NSDictionary.Iterator();
  uint64_t v7 = (_OWORD *)swift_allocObject();
  uint64_t v8 = swift_unknownObjectRetain();
  NSFastEnumerationIterator.init(_:)(v8, (uint64_t)v44);
  long long v9 = v44[11];
  v7[11] = v44[10];
  v7[12] = v9;
  v7[13] = v45[0];
  *(_OWORD *)((char *)v7 + 217) = *(_OWORD *)((char *)v45 + 9);
  long long v10 = v44[7];
  v7[7] = v44[6];
  v7[8] = v10;
  long long v11 = v44[9];
  v7[9] = v44[8];
  v7[10] = v11;
  long long v12 = v44[3];
  v7[3] = v44[2];
  v7[4] = v12;
  long long v13 = v44[5];
  v7[5] = v44[4];
  v7[6] = v13;
  long long v14 = v44[1];
  v7[1] = v44[0];
  v7[2] = v14;

  if (!a2 || !a3) {
    goto LABEL_17;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    unint64_t v30 = a1;
    NSFastEnumerationIterator.next()((uint64_t)&v32);
    if (v33)
    {
      uint64_t v15 = 0;
      unint64_t v31 = &v38;
      v29[3] = a3;
      uint64_t v16 = a3 - 1;
      do
      {
        outlined init with take of Any(&v32, &v34);
        outlined init with copy of Any((uint64_t)&v34, (uint64_t)&v36);
        if (!*((void *)v7 + 2)) {
          goto LABEL_20;
        }
        self;
        uint64_t v17 = (void *)swift_dynamicCastObjCClassUnconditional();
        uint64_t v18 = v35;
        uint64_t v19 = __swift_project_boxed_opaque_existential_1(&v34, v35);
        swift_unknownObjectRetain();
        uint64_t isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
        if (isClassOrObjCExistentialType)
        {
          if (*(void *)(*(void *)(v18 - 8) + 64) != 8)
          {
            __break(1u);
            goto LABEL_19;
          }
          uint64_t v21 = *v19;
          swift_unknownObjectRetain();
        }
        else
        {
          v29[2] = v29;
          double v26 = MEMORY[0x1F4188790](isClassOrObjCExistentialType);
          v29[1] = (char *)v29 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(double))(v28 + 16))(v26);
          uint64_t v21 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        }
        id v22 = objc_msgSend(v17, sel_objectForKey_, v21);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        if (!v22) {
          goto LABEL_21;
        }
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v34);
        outlined init with take of Any(&v32, v31);
        long long v24 = v38;
        long long v23 = v39;
        long long v42 = v38;
        long long v43 = v39;
        long long v25 = v37;
        long long v40 = v36;
        long long v41 = v37;
        *a2 = v36;
        a2[1] = v25;
        a2[2] = v24;
        a2[3] = v23;
        if (v16 == v15) {
          goto LABEL_16;
        }
        a2 += 4;
        NSFastEnumerationIterator.next()((uint64_t)&v32);
        ++v15;
      }
      while (v33);
    }
    outlined destroy of Any?((uint64_t)&v32, (uint64_t *)&demangling cache variable for type metadata for Any?);
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    outlined destroy of Any?((uint64_t)&v36, &demangling cache variable for type metadata for (key: Any, value: Any)?);
LABEL_16:
    a1 = v30;
LABEL_17:
    *a1 = v7;
    return;
  }
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a2) {
    goto LABEL_9;
  }
  if (!a3)
  {
LABEL_10:
    uint64_t v6 = a6;
LABEL_11:
    *unint64_t result = a4;
    result[1] = a5;
    result[2] = a6;
    result[3] = v6;
    return (void *)a3;
  }
  uint64_t v6 = a6 + a5;
  uint64_t v7 = __OFADD__(a6, a5);
  if (a3 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if ((v7 & 1) == 0)
  {
    if (v6 == a6)
    {
LABEL_9:
      a3 = 0;
      goto LABEL_10;
    }
    if (v6 < a6)
    {
LABEL_18:
      __break(1u);
LABEL_19:
      uint64_t v6 = a6 + v7 + 1;
      goto LABEL_11;
    }
    uint64_t v7 = 0;
    while (a5 != v7)
    {
      *(unsigned char *)(a2 + v7) = *(unsigned char *)(a4 + v7);
      if (a3 - 1 == v7) {
        goto LABEL_19;
      }
      if (a5 - 1 == v7)
      {
        a3 = a5;
        goto LABEL_11;
      }
      ++v7;
      if (a6 + v7 < a6) {
        goto LABEL_18;
      }
    }
    __break(1u);
    goto LABEL_22;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, void *a2, uint64_t a3, void *a4, uint64_t a5, unsigned __int8 a6)
{
  if (!a2) {
    goto LABEL_6;
  }
  if (!a3)
  {
    unint64_t v8 = 0;
    goto LABEL_29;
  }
  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v7 = a4;
  if (a6 >= 2u)
  {
    if (a6 == 3)
    {
LABEL_6:
      unint64_t v8 = 0;
      a3 = 0;
LABEL_29:
      *(void *)unint64_t result = a4;
      *(void *)(result + 8) = a5;
      *(unsigned char *)(result + 16) = a6;
      *(void *)(result + 24) = v8;
      return a3;
    }
    unint64_t v8 = a4[2];
    if (!v8)
    {
      a3 = 0;
      goto LABEL_29;
    }
    uint64_t v7 = (void *)a4[4];
  }
  *a2 = v7;
  if (a3 == 1)
  {
    unint64_t v8 = 1;
    goto LABEL_29;
  }
  if (!a6)
  {
    unint64_t v8 = 1;
    a3 = 1;
    goto LABEL_29;
  }
  uint64_t v9 = a5;
  if (a6 != 1)
  {
    unint64_t v8 = a4[2];
    if (v8 == 1)
    {
LABEL_15:
      a3 = v8;
      goto LABEL_29;
    }
    if (!v8) {
      goto LABEL_38;
    }
    uint64_t v9 = a4[5];
  }
  a2[1] = v9;
  if (a3 == 2)
  {
    unint64_t v8 = 2;
    goto LABEL_29;
  }
  if (a6 != 2)
  {
    unint64_t v8 = 2;
    goto LABEL_28;
  }
  unint64_t v8 = a4[2];
  if (v8 == 2)
  {
LABEL_28:
    a3 = 2;
    goto LABEL_29;
  }
  if (v8 < 3)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  a2[2] = a4[6];
  if (a3 == 3)
  {
    unint64_t v8 = 3;
    goto LABEL_29;
  }
  uint64_t v10 = 0;
  while (1)
  {
    int v6 = a6;
    if (a6 != 2) {
      break;
    }
    int v6 = v10 + 3;
    unint64_t v11 = a4[2];
    if (v10 + 3 == v11)
    {
      unint64_t v8 = v10 + 3;
      goto LABEL_15;
    }
    if (v10 + 3 >= v11) {
      goto LABEL_38;
    }
    a2[v10 + 3] = a4[v10 + 7];
    if (a3 - 3 == ++v10)
    {
      unint64_t v8 = a3;
      goto LABEL_29;
    }
  }
LABEL_39:
  if (!v6) {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v24[5] = a4;
  uint64_t result = IndexSet.startIndex.getter(v24);
  uint64_t v9 = v24[0];
  uint64_t v10 = v24[1];
  uint64_t v11 = v24[2];
  uint64_t v12 = v24[3];
  uint64_t v23 = v24[4];
  if (!a2)
  {
    uint64_t v13 = 0;
    goto LABEL_36;
  }
  if (!a3)
  {
LABEL_33:
    uint64_t v13 = a3;
LABEL_36:
    *a1 = a4;
    a1[1] = v9;
    a1[2] = v10;
    a1[3] = v11;
    a1[4] = v12;
    a1[5] = v23;
    return v13;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = v9;
      uint64_t result = (uint64_t)objc_msgSend(*(id *)(a4 + 16), sel_rangeCount);
      if (result < 1)
      {
        if (!v14)
        {
          uint64_t v9 = 0;
          goto LABEL_36;
        }
      }
      else
      {
        char v15 = *(unsigned char *)(a4 + 24);
        uint64_t result = (uint64_t)objc_msgSend(*(id *)(a4 + 16), sel_rangeAtIndex_, result - 1);
        uint64_t v17 = result + v16;
        BOOL v18 = __OFADD__(result, v16);
        if (v15)
        {
          if (v18) {
            goto LABEL_39;
          }
          if (v17 < result) {
            goto LABEL_40;
          }
        }
        else
        {
          if (v18) {
            goto LABEL_41;
          }
          if (v17 < result) {
            goto LABEL_42;
          }
        }
        if (v14 == v17)
        {
          uint64_t v9 = v14;
          goto LABEL_36;
        }
      }
      uint64_t v9 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        break;
      }
      if (v9 == v11)
      {
        uint64_t v19 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          goto LABEL_38;
        }
        uint64_t v9 = v11;
        if (v19 != v23)
        {
          char v20 = *(unsigned char *)(a4 + 24);
          uint64_t result = (uint64_t)objc_msgSend(*(id *)(a4 + 16), sel_rangeAtIndex_, v19);
          uint64_t v10 = result;
          uint64_t v11 = result + v21;
          BOOL v22 = __OFADD__(result, v21);
          if (v20)
          {
            if (v22) {
              goto LABEL_43;
            }
            uint64_t v12 = v19;
            uint64_t v9 = result;
            if (v11 < result) {
              goto LABEL_44;
            }
          }
          else
          {
            if (v22) {
              goto LABEL_45;
            }
            uint64_t v12 = v19;
            uint64_t v9 = result;
            if (v11 < result)
            {
              __break(1u);
              goto LABEL_33;
            }
          }
        }
      }
      *(void *)(a2 + 8 * v13++) = v14;
      if (a3 == v13) {
        goto LABEL_33;
      }
    }
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
  }
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = result;
  if (!a2) {
    goto LABEL_5;
  }
  uint64_t v10 = a3;
  if (!a3) {
    goto LABEL_6;
  }
  if (a3 < 0)
  {
LABEL_30:
    __break(1u);
    return result;
  }
  if (a5 != a4)
  {
    uint64_t v12 = a2;
    uint64_t v19 = a5 - a4;
    uint64_t v13 = 1;
    uint64_t v14 = a4;
    while (1)
    {
      char v15 = *(unsigned char *)(a6 + 24);
      uint64_t result = objc_msgSend(*(id *)(a6 + 16), sel_rangeAtIndex_, v14);
      uint64_t v17 = (char *)result + v16;
      BOOL v18 = __OFADD__(result, v16);
      if (v15)
      {
        if (v18) {
          goto LABEL_26;
        }
        if ((uint64_t)v17 < (uint64_t)result) {
          goto LABEL_27;
        }
      }
      else
      {
        if (v18) {
          goto LABEL_28;
        }
        if ((uint64_t)v17 < (uint64_t)result) {
          goto LABEL_29;
        }
      }
      if ((uint64_t)v17 < (uint64_t)result) {
        break;
      }
      if (v14 == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_25;
      }
      *uint64_t v12 = result;
      v12[1] = v17;
      if (v10 == v13)
      {
        uint64_t v11 = v14 + 1;
        goto LABEL_7;
      }
      ++v14;
      ++v13;
      v12 += 2;
      if (a5 == v14)
      {
        uint64_t v11 = a5;
        uint64_t v10 = v19;
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
LABEL_5:
  uint64_t v10 = 0;
LABEL_6:
  uint64_t v11 = a4;
LABEL_7:
  *uint64_t v9 = a4;
  v9[1] = a5;
  v9[2] = a6;
  v9[3] = v11;
  return (void *)v10;
}

void specialized Sequence._copySequenceContents(initializing:)(char *a1, double *a2, uint64_t a3)
{
  uint64_t v7 = *(void *)v3;
  long long v8 = *(_OWORD *)(v3 + 88);
  v28[4] = *(_OWORD *)(v3 + 72);
  v28[5] = v8;
  v28[6] = *(_OWORD *)(v3 + 104);
  uint64_t v29 = *(void *)(v3 + 120);
  long long v9 = *(_OWORD *)(v3 + 24);
  v28[0] = *(_OWORD *)(v3 + 8);
  v28[1] = v9;
  long long v10 = *(_OWORD *)(v3 + 56);
  v28[2] = *(_OWORD *)(v3 + 40);
  v28[3] = v10;
  outlined init with take of LocalePreferences?(v3 + 128, (uint64_t)v32, &demangling cache variable for type metadata for Range<Date>?);
  uint64_t v30 = v7;
  outlined init with take of LocalePreferences?((uint64_t)v32, (uint64_t)v27, &demangling cache variable for type metadata for Range<Date>?);
  Calendar.DatesByRecurring.Iterator.init(start:matching:range:)(&v30, (uint64_t)v28, (uint64_t)v27, (uint64_t)__src);
  if (a2 && a3)
  {
    if ((a3 & 0x8000000000000000) == 0)
    {
      if (__src[36])
      {
LABEL_5:
        char v11 = BYTE8(__src[1]);
        char v12 = BYTE9(__src[1]);
        char v13 = BYTE10(__src[1]);
        char v14 = __src[3];
        uint64_t v15 = *((void *)&__src[7] + 1);
        uint64_t v16 = *((void *)&__src[9] + 1);
        uint64_t v17 = *((void *)&__src[10] + 1);
        uint64_t v18 = *((void *)&__src[35] + 1);
        long long v26 = *(_OWORD *)((char *)&__src[36] + 8);
        uint64_t v19 = *((void *)&__src[37] + 1);
        LOBYTE(v28[0]) = __src[9];
        v27[0] = __src[10];
        *(void *)a1 = *(void *)&__src[0];
        *(_OWORD *)(a1 + 8) = *(_OWORD *)((char *)__src + 8);
        a1[24] = v11;
        a1[25] = v12;
        a1[26] = v13;
        *((_OWORD *)a1 + 2) = __src[2];
        a1[48] = v14;
        *(_OWORD *)(a1 + 56) = *(_OWORD *)((char *)&__src[3] + 8);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)((char *)&__src[4] + 8);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)((char *)&__src[5] + 8);
        *(_OWORD *)(a1 + 104) = *(_OWORD *)((char *)&__src[6] + 8);
        *((void *)a1 + 15) = v15;
        *((_OWORD *)a1 + 8) = __src[8];
        a1[144] = v28[0];
        *((void *)a1 + 19) = v16;
        a1[160] = v27[0];
        *((void *)a1 + 21) = v17;
        *((void *)a1 + 22) = *(void *)&__src[11];
        memcpy(a1 + 184, (char *)&__src[11] + 8, 0x179uLL);
        *((void *)a1 + 71) = v18;
        a1[576] = 1;
        *(_OWORD *)(a1 + 584) = v26;
        *((void *)a1 + 75) = v19;
        return;
      }
      uint64_t v20 = 1;
LABEL_8:
      if (LOBYTE(__src[3]) == 1 && *((uint64_t *)&__src[10] + 1) >= *((uint64_t *)&__src[2] + 1)) {
        goto LABEL_5;
      }
      uint64_t v21 = (void *)*((void *)&__src[37] + 1);
      while (1)
      {
        if (v21[2])
        {
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v22 = v21[2];
            if (!v22) {
              goto LABEL_33;
            }
          }
          else
          {
            uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew()(v21);
            uint64_t v22 = v21[2];
            if (!v22) {
              goto LABEL_33;
            }
          }
          uint64_t v23 = v22 - 1;
          double v24 = *(double *)&v21[v23 + 4];
          v21[2] = v23;
          *((void *)&__src[37] + 1) = v21;
          if (__OFADD__(*((void *)&__src[10] + 1), 1))
          {
            __break(1u);
LABEL_33:
            __break(1u);
            break;
          }
          ++*((void *)&__src[10] + 1);
          if (!LOBYTE(__src[3]) && *((double *)&__src[2] + 1) < v24) {
            goto LABEL_5;
          }
          if (__src[9]) {
            goto LABEL_29;
          }
          if (*((double *)&__src[8] + 1) < v24) {
            goto LABEL_5;
          }
          if (v24 >= *(double *)&__src[8])
          {
LABEL_29:
            *a2 = v24;
            if (v20 == a3) {
              goto LABEL_6;
            }
            ++a2;
            ++v20;
            goto LABEL_8;
          }
        }
        else
        {
          Calendar.DatesByRecurring.Iterator.nextGroup()();
          uint64_t v21 = (void *)*((void *)&__src[37] + 1);
          if (*(void *)(*((void *)&__src[37] + 1) + 16))
          {
            *(void *)&__src[37] = 0;
          }
          else
          {
            uint64_t v25 = *(void *)&__src[37] + 1;
            if (__OFADD__(*(void *)&__src[37], 1)) {
              goto LABEL_35;
            }
            ++*(void *)&__src[37];
            if (*((uint64_t *)&__src[36] + 1) < v25) {
              goto LABEL_5;
            }
          }
        }
        if (__src[36]) {
          goto LABEL_5;
        }
      }
    }
    __break(1u);
LABEL_35:
    __break(1u);
  }
  else
  {
LABEL_6:
    memcpy(a1, __src, 0x260uLL);
  }
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, void *a2, uint64_t a3)
{
  void (*v53)(long long *__return_ptr, uint64_t, uint64_t);
  Swift::String v54;
  Swift::String v55;
  void *(*v56)(long long *__return_ptr, uint64_t, uint64_t);
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_unfair_lock_s *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  Swift::String v67;
  Swift::String v68;
  uint64_t v69;
  void (*v70)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v71;
  Swift::String v72;
  Swift::String v73;
  uint64_t (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  Swift::String v76;
  Swift::String v77;
  uint64_t (*v78)(uint64_t, uint64_t);
  uint64_t v79;
  Swift::String v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  void *v86;
  Swift::String v87;
  Swift::String v88;
  Swift::String v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  NSObject *v96;
  uint64_t v97;
  const char *v98;
  void *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char v103;
  void v105[2];
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t *v115;
  int v116;
  NSObject *v117;
  uint64_t v118;
  void *v119;
  double v120;
  double v121;
  int v122;
  long long v123;
  uint64_t v124;
  long long v125;
  unsigned char v126[32];
  Swift::String v127;
  long long v128;
  _OWORD v129[2];
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unsigned __int8 v133;
  unsigned __int8 v134;
  unsigned char v135[282];
  char v136;
  unsigned __int8 v137;
  unsigned char v138[282];
  unsigned __int8 v139;
  unsigned __int8 v140[8];
  unsigned char v141[320];

  int v6 = v3;
  uint64_t v118 = a3;
  uint64_t v119 = a2;
  long long v8 = (char *)(v3 + 331);
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v110 = *(void *)(v9 - 8);
  uint64_t v111 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v109 = (char *)v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v112 = *(void *)(v11 - 8);
  long long v113 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v114 = (char *)v105 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)v3;
  uint64_t v14 = *((void *)v3 + 1);
  uint64_t v15 = *((void *)v3 + 2);
  double v16 = *((double *)v3 + 4);
  uint64_t v120 = *((double *)v3 + 3);
  uint64_t v121 = v16;
  uint64_t v17 = v3 + 48;
  uint64_t v18 = v6[40];
  memcpy(v141, v17, 0x11AuLL);
  unint64_t v124 = v6[330];
  int v19 = v6[331];
  int v20 = v8[1];
  memcpy(v138, v17, sizeof(v138));
  *(void *)unint64_t v135 = v13;
  *(void *)&v135[8] = v14;
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)v141);
  BOOL v21 = DateComponents._validate(for:)((uint64_t *)v135);
  outlined release of Calendar.DatesByAdding((uint64_t)v6);
  uint64_t v22 = 1;
  v141[296] = 1;
  v141[288] = v18;
  long long v139 = v18;
  memcpy(v138, v141, sizeof(v138));
  long long v137 = v19;
  uint64_t v136 = v20;
  if (!v119)
  {
    *(_OWORD *)a1 = xmmword_18218B600;
    *(unsigned char *)(a1 + 16) = 1;
    *(void *)(a1 + 24) = v15;
    double v35 = v121;
    *(double *)(a1 + 32) = v120;
    *(double *)(a1 + 40) = v35;
    *(unsigned char *)(a1 + 48) = v18;
    *(void *)(a1 + 56) = v15;
    *(void *)(a1 + 64) = v13;
    *(void *)(a1 + 72) = v14;
    memcpy((void *)(a1 + 80), v141, 0x11AuLL);
    *(unsigned char *)(a1 + 362) = v124;
    *(unsigned char *)(a1 + 363) = v19;
    uint64_t v23 = 0;
    *(unsigned char *)(a1 + 364) = v20;
    *(void *)(a1 + 368) = 100;
    *(unsigned char *)(a1 + 376) = !v21;
    return v23;
  }
  uint64_t v108 = !v21;
  uint64_t v116 = v19;
  LODWORD(v117) = v18;
  *((void *)&v123 + 1) = v14;
  uint64_t v115 = (uint64_t *)a1;
  uint64_t v23 = v118;
  if (!v118)
  {
    uint64_t v31 = 0;
    uint64_t v4 = v15;
    double v37 = v120;
    double v36 = v121;
    unsigned __int8 v25 = v116;
    char v38 = (char)v117;
    uint64_t v18 = v13;
    uint64_t v30 = -1;
    char v28 = v124;
    BOOL v32 = v108;
LABEL_18:
    v135[0] = v23 == 0;
    LOBYTE(v128) = v38;
    long long v39 = v115;
    *uint64_t v115 = v30;
    v39[1] = v31;
    *((unsigned char *)v39 + 16) = v23 == 0;
    v39[3] = v4;
    *((double *)v39 + 4) = v37;
    *((double *)v39 + 5) = v36;
    *((unsigned char *)v39 + 48) = v38;
    v39[7] = v15;
    uint64_t v40 = *((void *)&v123 + 1);
    v39[8] = v18;
    v39[9] = v40;
    memcpy(v39 + 10, v141, 0x11AuLL);
    *((unsigned char *)v39 + 362) = v28;
    *((unsigned char *)v39 + 363) = v25;
    *((unsigned char *)v39 + 364) = v20;
    v39[46] = 100;
    *((unsigned char *)v39 + 376) = v32;
    return v23;
  }
  if (v118 < 0)
  {
    __break(1u);
LABEL_65:
    swift_once();
    goto LABEL_23;
  }
  uint64_t v18 = v13;
  char v24 = v20;
  unsigned __int8 v25 = v116;
  if (!v21)
  {
    char v28 = v124;
    uint64_t v23 = 0;
    uint64_t v5 = 0;
    uint64_t v30 = -1;
    uint64_t v4 = v15;
    long long v41 = v115;
    uint64_t v42 = *((void *)&v123 + 1);
    double v44 = v120;
    double v43 = v121;
    unsigned __int8 v29 = 1;
    goto LABEL_58;
  }
  uint64_t v122 = v20;
  *(void *)&uint64_t v123 = v13;
  uint64_t v22 = 0;
  double v26 = v120;
  double v27 = v121;
  uint64_t v18 = -1;
  uint64_t v106 = 1;
  uint64_t v107 = 0;
  uint64_t v5 = 0;
  uint64_t v4 = v15;
  char v28 = 1;
  unsigned __int8 v29 = 1;
LABEL_6:
  uint64_t v23 = v18;
  do
  {
    uint64_t v30 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_62;
    }
    int v125 = v123;
    v127._uint64_t countAndFlagsBits = v15;
    memcpy(v135, v141, sizeof(v135));
    v140[0] = v124;
    long long v134 = v25;
    long long v133 = v122;
    long long v132 = v4;
    long long v130 = v5;
    LOBYTE(v131) = v28 & 1;
    swift_unknownObjectRetain();
    outlined retain of DateComponents((uint64_t)v141);
    Calendar._enumerateDatesStep(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:inSearchingDate:previouslyReturnedMatchDate:)((double *)&v127._countAndFlagsBits, v135, v140, &v134, &v133, (double *)&v132, (uint64_t)&v130, (uint64_t)&v128);
    outlined release of DateComponents((uint64_t)v141);
    swift_unknownObjectRelease();
    uint64_t v4 = *(void *)&v129[0];
    if (BYTE8(v128) != 2)
    {
      uint64_t v31 = v128;
      char v28 = v124;
      uint64_t v18 = v123;
      BOOL v32 = v108;
      if (v117)
      {
LABEL_14:
        uint64_t v23 = v118;
        uint64_t v33 = v119;
        *uint64_t v119 = v128;
        uint64_t v34 = v106;
        if (v106 != v23)
        {
          unsigned __int8 v29 = 0;
          char v28 = 0;
          uint64_t v119 = v33 + 1;
          ++v106;
          uint64_t v107 = v34;
          uint64_t v5 = v31;
          uint64_t v18 = v30;
          goto LABEL_6;
        }
        double v37 = v120;
        double v36 = v121;
        LOBYTE(v20) = v122;
        char v38 = (char)v117;
        goto LABEL_18;
      }
      uint64_t v23 = v107;
      if (*(double *)&v128 >= v26)
      {
        if (*(double *)&v128 >= v27)
        {
          long long v41 = v115;
          uint64_t v42 = *((void *)&v123 + 1);
          double v44 = v120;
          double v43 = v121;
          char v24 = v122;
          uint64_t v23 = v107;
          goto LABEL_58;
        }
        goto LABEL_14;
      }
LABEL_62:
      long long v41 = v115;
      uint64_t v42 = *((void *)&v123 + 1);
      double v44 = v120;
      double v43 = v121;
      char v24 = v122;
      goto LABEL_58;
    }
    ++v18;
  }
  while (v30 < 100);
  uint64_t v45 = 100;
  if (v23 + 1 > 100) {
    uint64_t v45 = v23 + 1;
  }
  uint64_t v118 = v45;
  v140[0] = v29 & 1;
  uint64_t v18 = v123;
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)v141);
  if (one-time initialization token for log != -1) {
    goto LABEL_65;
  }
LABEL_23:
  id v46 = (id)static Calendar.log;
  unint64_t v47 = v114;
  Logger.init(_:)();
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)v141);
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)v141);
  unint64_t v48 = Logger.logObject.getter();
  int v49 = static os_log_type_t.debug.getter();
  BOOL v50 = os_log_type_enabled(v48, (os_log_type_t)v49);
  uint64_t v42 = *((void *)&v123 + 1);
  uint64_t v23 = v107;
  if (v50)
  {
    uint64_t v108 = v49;
    uint64_t v51 = swift_slowAlloc();
    uint64_t v106 = swift_slowAlloc();
    long long v132 = v106;
    *(_DWORD *)uint64_t v51 = 134350338;
    *(void *)unint64_t v135 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v119 = (void *)v51;
    *(_WORD *)(v51 + 12) = 2082;
    *(void *)unint64_t v135 = 0;
    *(void *)&v135[8] = 0xE000000000000000;
    swift_unknownObjectRetain();
    _StringGuts.grow(_:)(72);
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v53 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v42 + 24);
    swift_unknownObjectRetain();
    v53(&v128, ObjectType, v42);
    swift_unknownObjectRelease();
    LOBYTE(v125) = v128;
    _print_unlocked<A, B>(_:_:)();
    v54._uint64_t countAndFlagsBits = 10272;
    v54._uint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v54);
    *(void *)&long long v128 = v123;
    *((void *)&v128 + 1) = v42;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CalendarProtocol & Swift.AnyObject);
    _print_unlocked<A, B>(_:_:)();
    v55._uint64_t countAndFlagsBits = 0x656C61636F6C2029;
    v55._uint64_t object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v55);
    unint64_t v56 = *(void *(**)(long long *__return_ptr, uint64_t, uint64_t))(v42 + 32);
    swift_unknownObjectRetain();
    uint64_t v57 = v56(&v128, ObjectType, v42);
    uint64_t v117 = v48;
    if ((void)v128)
    {
      uint64_t v58 = *((void *)&v128 + 1);
      swift_unknownObjectRelease();
    }
    else
    {
      if (one-time initialization token for cache != -1) {
        uint64_t v57 = (void *)swift_once();
      }
      uint64_t v61 = (os_unfair_lock_s *)static LocaleCache.cache;
      MEMORY[0x1F4188790](v57);
      swift_retain_n();
      os_unfair_lock_lock(v61 + 31);
      partial apply for closure #1 in LocaleCache.fixed(_:)((uint64_t)&v61[4], &v125);
      if (v22)
      {
        outlined release of DateComponents((uint64_t)v141);
        swift_unknownObjectRelease();
        os_unfair_lock_unlock(v61 + 31);
        __break(1u);
        JUMPOUT(0x181F76458);
      }
      os_unfair_lock_unlock(v61 + 31);
      swift_unknownObjectRelease();
      swift_release_n();
      uint64_t v58 = *((void *)&v125 + 1);
    }
    long long v62 = v119;
    v105[1] = (char *)v119 + 14;
    uint64_t v63 = swift_getObjectType();
    uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 64))(v63, v58);
    uint64_t v66 = v65;
    swift_unknownObjectRelease();
    v67._uint64_t countAndFlagsBits = v64;
    v67._uint64_t object = v66;
    String.append(_:)(v67);
    swift_bridgeObjectRelease();
    v68._uint64_t countAndFlagsBits = 0x6F7A20656D697420;
    v68._uint64_t object = (void *)0xEC000000203A656ELL;
    String.append(_:)(v68);
    unint64_t v69 = *((void *)&v123 + 1);
    unint64_t v70 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*((void *)&v123 + 1) + 48);
    swift_unknownObjectRetain();
    v70(&v128, ObjectType, v69);
    swift_unknownObjectRelease();
    uint64_t v71 = v128;
    swift_getObjectType();
    *(void *)&int v125 = v71;
    v72._uint64_t countAndFlagsBits = dispatch thunk of CustomDebugStringConvertible.debugDescription.getter();
    String.append(_:)(v72);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    v73._uint64_t countAndFlagsBits = 0x6557747372696620;
    v73._uint64_t object = (void *)0xEF203A7961646B65;
    String.append(_:)(v73);
    uint64_t v74 = *(uint64_t (**)(uint64_t, uint64_t))(v69 + 56);
    swift_unknownObjectRetain();
    uint64_t v75 = v74(ObjectType, v69);
    swift_unknownObjectRelease();
    *(void *)&long long v128 = v75;
    v76._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v76);
    swift_bridgeObjectRelease();
    v77._uint64_t object = (void *)0x80000001823AD310;
    v77._uint64_t countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v77);
    uint64_t v78 = *(uint64_t (**)(uint64_t, uint64_t))(v69 + 72);
    swift_unknownObjectRetain();
    uint64_t v79 = v78(ObjectType, v69);
    swift_unknownObjectRelease();
    *(void *)&long long v128 = v79;
    v80._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v80);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)unint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(uint64_t *)v135, *(unint64_t *)&v135[8], &v132);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    *((_WORD *)v62 + 11) = 2082;
    memcpy(v135, v141, sizeof(v135));
    outlined retain of DateComponents((uint64_t)v141);
    uint64_t v81 = v109;
    DateComponents.customMirror.getter();
    uint64_t v82 = Mirror.children.getter();
    (*(void (**)(char *, uint64_t))(v110 + 8))(v81, v111);
    unint64_t v83 = 0xE000000000000000;
    long long v130 = 0;
    long long v131 = 0xE000000000000000;
    swift_retain();
    dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (*(void *)&v135[40])
    {
      uint64_t v111 = v82;
      do
      {
        long long v128 = *(_OWORD *)v135;
        v129[0] = *(_OWORD *)&v135[16];
        v129[1] = *(_OWORD *)&v135[32];
        v127._uint64_t countAndFlagsBits = 0;
        v127._uint64_t object = (void *)0xE000000000000000;
        char v84 = *(void **)&v135[8];
        unint64_t v85 = *(void *)v135;
        int v125 = *(_OWORD *)v135;
        outlined init with copy of Any((uint64_t)v129, (uint64_t)v126);
        if (v84)
        {
          char v86 = v84;
        }
        else
        {
          unint64_t v85 = 0;
          char v86 = (void *)0xE000000000000000;
        }
        swift_bridgeObjectRetain();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v126);
        v87._uint64_t countAndFlagsBits = v85;
        v87._uint64_t object = v86;
        String.append(_:)(v87);
        swift_bridgeObjectRelease();
        v88._uint64_t countAndFlagsBits = 8250;
        v88._uint64_t object = (void *)0xE200000000000000;
        String.append(_:)(v88);
        _print_unlocked<A, B>(_:_:)();
        v89._uint64_t countAndFlagsBits = 32;
        v89._uint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v89);
        String.append(_:)(v127);
        swift_bridgeObjectRelease();
        outlined destroy of Any?((uint64_t)&v128, &demangling cache variable for type metadata for (label: String?, value: Any));
        dispatch thunk of _AnyIteratorBoxBase.next()();
      }
      while (*(void *)&v135[40]);
      unint64_t v83 = v131;
      uint64_t v90 = v130;
    }
    else
    {
      uint64_t v90 = 0;
    }
    swift_release();
    swift_release();
    uint64_t v91 = v119;
    outlined release of DateComponents((uint64_t)v141);
    *(void *)unint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v83, &v132);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined release of DateComponents((uint64_t)v141);
    outlined release of DateComponents((uint64_t)v141);
    *((_WORD *)v91 + 16) = 2082;
    if (v122) {
      unint64_t v92 = 0x647261776B636162;
    }
    else {
      unint64_t v92 = 0x64726177726F66;
    }
    uint64_t v93 = 0xE800000000000000;
    if (v122) {
      uint64_t v94 = 0xE800000000000000;
    }
    else {
      uint64_t v94 = 0xE700000000000000;
    }
    *(void *)unint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v94, &v132);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *((_WORD *)v91 + 21) = 2082;
    uint64_t v95 = 0x656D69547478656ELL;
    uint64_t v42 = *((void *)&v123 + 1);
    uint64_t v23 = v107;
    unint64_t v47 = v114;
    uint64_t v96 = v117;
    uint64_t v97 = v123;
    switch(v124)
    {
      case 1:
        uint64_t v95 = 0xD000000000000023;
        uint64_t v98 = "nextTimePreservingSmallerComponents";
        goto LABEL_48;
      case 2:
        uint64_t v95 = 0xD000000000000027;
        uint64_t v98 = "previousTimePreservingSmallerComponents";
LABEL_48:
        uint64_t v93 = (unint64_t)(v98 - 32) | 0x8000000000000000;
        break;
      case 3:
        uint64_t v93 = 0xE600000000000000;
        uint64_t v95 = 0x746369727473;
        break;
      default:
        break;
    }
    uint64_t v99 = v119;
    *(void *)unint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v93, &v132);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *((_WORD *)v99 + 26) = 2080;
    if (v116) {
      uint64_t v100 = 1953718636;
    }
    else {
      uint64_t v100 = 0x7473726966;
    }
    if (v116) {
      uint64_t v101 = 0xE400000000000000;
    }
    else {
      uint64_t v101 = 0xE500000000000000;
    }
    *(void *)unint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v100, v101, &v132);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_181795000, v96, (os_log_type_t)v108, "Unable to find Calendar enumeration result: %{public}f %{public}s %{public}s %{public}s %{public}s %s", (uint8_t *)v99, 0x3Eu);
    uint64_t v102 = v106;
    swift_arrayDestroy();
    MEMORY[0x185309510](v102, -1, -1);
    MEMORY[0x185309510](v99, -1, -1);

    uint64_t v60 = v112;
    unint64_t v59 = v113;
    uint64_t v18 = v97;
    char v28 = v124;
  }
  else
  {
    swift_unknownObjectRelease_n();

    outlined release of DateComponents((uint64_t)v141);
    outlined release of DateComponents((uint64_t)v141);
    char v28 = v124;
    uint64_t v60 = v112;
    unint64_t v59 = v113;
  }
  (*(void (**)(char *, uint64_t))(v60 + 8))(v47, v59);
  outlined release of DateComponents((uint64_t)v141);
  swift_unknownObjectRelease();
  unsigned __int8 v29 = v140[0];
  LODWORD(v117) = v139;
  unsigned __int8 v25 = v137;
  char v24 = v136;
  long long v41 = v115;
  double v44 = v120;
  double v43 = v121;
  uint64_t v30 = v118;
LABEL_58:
  v135[0] = v29 & 1;
  uint64_t v103 = (char)v117;
  LOBYTE(v128) = (_BYTE)v117;
  *long long v41 = v30;
  v41[1] = v5;
  *((unsigned char *)v41 + 16) = v29 & 1;
  v41[3] = v4;
  *((double *)v41 + 4) = v44;
  *((double *)v41 + 5) = v43;
  *((unsigned char *)v41 + 48) = v103;
  v41[7] = v15;
  v41[8] = v18;
  v41[9] = v42;
  memcpy(v41 + 10, v138, 0x11AuLL);
  *((unsigned char *)v41 + 362) = v28;
  *((unsigned char *)v41 + 363) = v25;
  *((unsigned char *)v41 + 364) = v24;
  v41[46] = 100;
  *((unsigned char *)v41 + 376) = 1;
  return v23;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v19)(double *__return_ptr, unsigned char *, double *, void, uint64_t, uint64_t);
  double v20;
  double v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  unsigned char __src[296];
  double v29;
  double v30[36];
  unsigned char v31[288];
  unsigned char __dst[288];
  unsigned char v33[289];
  char v34;

  uint64_t v8 = *(void *)v3;
  uint64_t v7 = *(void *)(v3 + 8);
  double v9 = *(double *)(v3 + 16);
  double v11 = *(double *)(v3 + 24);
  double v10 = *(double *)(v3 + 32);
  char v12 = *(unsigned char *)(v3 + 40);
  memcpy(__dst, (const void *)(v3 + 48), 0x11AuLL);
  double v26 = v12;
  double v27 = *(unsigned __int8 *)(v3 + 330);
  uint64_t v34 = v12;
  memcpy(&v33[7], (const void *)(v3 + 48), 0x11AuLL);
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)__dst);
  uint64_t result = outlined release of Calendar.DatesByAdding(v3);
  if (!a2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v7;
    *(double *)(a1 + 16) = v9;
    *(double *)(a1 + 24) = v11;
    *(double *)(a1 + 32) = v10;
    *(unsigned char *)(a1 + 40) = v34;
    memcpy((void *)(a1 + 41), v33, 0x121uLL);
    a3 = 0;
    *(unsigned char *)(a1 + 330) = v27;
    *(unsigned char *)(a1 + 331) = 0;
    *(void *)(a1 + 336) = 1;
    return a3;
  }
  uint64_t v14 = a2;
  double v15 = v10;
  char v16 = v27;
  if (!a3)
  {
    char v24 = 1;
LABEL_21:
    v31[0] = v26;
    memcpy(&__src[7], __dst, 0x11AuLL);
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v7;
    *(double *)(a1 + 16) = v9;
    *(double *)(a1 + 24) = v11;
    *(double *)(a1 + 32) = v15;
    *(unsigned char *)(a1 + 40) = v31[0];
    memcpy((void *)(a1 + 41), __src, 0x121uLL);
    *(unsigned char *)(a1 + 330) = v16;
    *(unsigned char *)(a1 + 331) = 0;
    *(void *)(a1 + 336) = v24;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v18 = 0;
    int v19 = *(void (**)(double *__return_ptr, unsigned char *, double *, void, uint64_t, uint64_t))(v7 + 200);
    int v20 = 1.59271755e13;
    if (v9 <= 1.59271755e13) {
      int v20 = v9;
    }
    BOOL v21 = fmax(v20, -2.11845067e11);
    unsigned __int8 v25 = a3;
    uint64_t v22 = a3 - 1;
    while (1)
    {
      memcpy(v30, __dst, 0x11AuLL);
      DateComponents.scaled(by:)(v18 + 1, (uint64_t)__src);
      memcpy(v31, __src, 0x11AuLL);
      memcpy(__src, v31, 0x11AuLL);
      unsigned __int8 v29 = v21;
      swift_unknownObjectRetain();
      v19(v30, __src, &v29, v27, ObjectType, v7);
      swift_unknownObjectRelease();
      uint64_t result = outlined release of DateComponents((uint64_t)v31);
      if ((LOBYTE(v30[1]) & 1) != 0 || (v26 & 1) == 0 && (v30[0] >= v11 ? (uint64_t v23 = v30[0] < v15) : (uint64_t v23 = 0), !v23))
      {
        LOBYTE(v30[0]) = v26;
        memcpy(&__src[7], __dst, 0x11AuLL);
        *(void *)a1 = v8;
        *(void *)(a1 + 8) = v7;
        *(double *)(a1 + 16) = v9;
        *(double *)(a1 + 24) = v11;
        *(double *)(a1 + 32) = v15;
        *(unsigned char *)(a1 + 40) = LOBYTE(v30[0]);
        memcpy((void *)(a1 + 41), __src, 0x121uLL);
        *(unsigned char *)(a1 + 330) = v27;
        *(unsigned char *)(a1 + 331) = 1;
        *(void *)(a1 + 336) = v18 + 1;
        return v18;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFELL) {
        break;
      }
      *(double *)(v14 + 8 * v18) = v30[0];
      if (v22 == v18)
      {
        char v24 = v18 + 2;
        char v16 = v27;
        a3 = v25;
        goto LABEL_21;
      }
      ++v18;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v6 = a3;
    if (a3)
    {
      if (a3 < 0) {
        __break(1u);
      }
      uint64_t v7 = a2;
      uint64_t v8 = 0;
      if (uenum_next())
      {
        uint64_t v8 = 0;
        while (1)
        {
          *uint64_t v7 = String.init(cString:)();
          v7[1] = v9;
          if (v6 - 1 == v8) {
            break;
          }
          v7 += 2;
          ++v8;
          if (!uenum_next()) {
            goto LABEL_8;
          }
        }
      }
      else
      {
LABEL_8:
        uint64_t v6 = v8;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = 0;
  a1[1] = a4;
  return v6;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6, timespec *a7)
{
  uint64_t v89 = a2;
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  type metadata accessor for _POSIXDirectoryContentsSequence.Iterator();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 64) = 0;
  if ((a5 & 0x1000000000000000) != 0)
  {
    Swift::Int v14 = String.UTF8View._foreignCount()();
  }
  else if ((a5 & 0x2000000000000000) != 0)
  {
    Swift::Int v14 = HIBYTE(a5) & 0xF;
  }
  else
  {
    Swift::Int v14 = a4 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v15 = 3 * v14;
  if ((unsigned __int128)(v14 * (__int128)3) >> 64 != (3 * v14) >> 63)
  {
    __break(1u);
    goto LABEL_88;
  }
  if (v15 < -1)
  {
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  uint64_t v16 = v15 + 1;
  swift_bridgeObjectRetain();
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain();
  p_st_atimespec = a7;
  uint64_t v88 = a1;
  uint64_t v87 = a3;
  if (v15 >= 1024)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v23 = (const char *)swift_slowAlloc();
      swift_bridgeObjectRetain();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v23, v16, 1, a4, a5);
      char v25 = v24;
      swift_bridgeObjectRelease();
      if (v25)
      {
        MEMORY[0x185309510](v23, -1, -1);
        goto LABEL_35;
      }
      uint64_t v22 = opendir(v23);
      MEMORY[0x185309510](v23, -1, -1);
      if (!v22) {
        goto LABEL_35;
      }
LABEL_15:
      *(void *)(v13 + 24) = a4;
      *(void *)(v13 + 32) = a5;
      *(void *)(v13 + 16) = v22;
      *(unsigned char *)(v13 + 56) = a6 & 1;
      __darwin_time_t tv_sec = a7[1].tv_sec;
      if (tv_sec)
      {
        double v27 = (__darwin_ino64_t *)(swift_bridgeObjectRetain() + 40);
        char v28 = (void *)MEMORY[0x1E4FBC860];
        do
        {
          uint64_t v30 = *(v27 - 1);
          __darwin_ino64_t st_ino = *v27;
          uint64_t v32 = HIBYTE(*v27) & 0xF;
          if ((*v27 & 0x2000000000000000) == 0) {
            uint64_t v32 = v30 & 0xFFFFFFFFFFFFLL;
          }
          if (v32)
          {
            swift_bridgeObjectRetain_n();
            String.index(before:)();
            uint64_t v33 = String.subscript.getter();
            uint64_t v35 = v34;
            swift_bridgeObjectRelease();
            if (v33 == 47 && v35 == 0xE100000000000000)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v37 & 1) == 0)
              {
                *(void *)&v93.st_dev = v30;
                v93.__darwin_ino64_t st_ino = st_ino;
                swift_bridgeObjectRetain();
                v38._uint64_t countAndFlagsBits = 47;
                v38._uint64_t object = (void *)0xE100000000000000;
                String.append(_:)(v38);
                swift_bridgeObjectRelease();
                uint64_t v30 = *(void *)&v93.st_dev;
                __darwin_ino64_t st_ino = v93.st_ino;
              }
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              char v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
            }
            unint64_t v40 = v28[2];
            unint64_t v39 = v28[3];
            if (v40 >= v39 >> 1) {
              char v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v39 > 1), v40 + 1, 1, v28);
            }
            v28[2] = v40 + 1;
            unsigned __int8 v29 = &v28[2 * v40];
            void v29[4] = v30;
            v29[5] = st_ino;
          }
          v27 += 2;
          --tv_sec;
        }
        while (tv_sec);
        swift_bridgeObjectRelease();
        a3 = v87;
      }
      else
      {
        char v28 = (void *)MEMORY[0x1E4FBC860];
      }
      swift_bridgeObjectRelease();
      *(void *)&v93.st_dev = v28;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v46 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v48 = v47;
      swift_bridgeObjectRelease();
      *(void *)(v13 + 40) = v46;
      *(void *)(v13 + 48) = v48;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_51;
    }
  }
  MEMORY[0x1F4188790](isStackAllocationSafe);
  int v19 = (char *)&v87 - v18;
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v19, v16, 1, a4, a5);
  char v21 = v20;
  swift_bridgeObjectRelease();
  if ((v21 & 1) == 0)
  {
    uint64_t v22 = opendir(v19);
    a7 = p_st_atimespec;
    if (v22) {
      goto LABEL_15;
    }
  }
LABEL_35:
  uint64_t v41 = swift_bridgeObjectRelease();
  *(void *)(v13 + 24) = 0;
  *(void *)(v13 + 32) = 0xE000000000000000;
  *(void *)(v13 + 40) = 0;
  *(void *)(v13 + 48) = 0xE000000000000000;
  *(unsigned char *)(v13 + 56) = 0;
  int v42 = MEMORY[0x185301870](v41);
  int v43 = v42;
  uint64_t v44 = 263;
  switch(v42)
  {
    case 1:
    case 13:
      uint64_t v44 = 257;
      goto LABEL_45;
    case 2:
      uint64_t v44 = 260;
      goto LABEL_45;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      goto LABEL_40;
    case 27:
      goto LABEL_45;
    default:
      if (v42 == 63)
      {
        uint64_t v44 = 258;
      }
      else
      {
        if (v42 == 102)
        {
          id v45 = 0;
          uint64_t v44 = 256;
          goto LABEL_50;
        }
LABEL_40:
        uint64_t v44 = 256;
      }
LABEL_45:
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
      {
        *(void *)&v93.st_dev = 0;
        v93.__darwin_ino64_t st_ino = 0xE000000000000000;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        *(void *)&v93.st_dev = 0xD000000000000014;
        v93.__darwin_ino64_t st_ino = 0x80000001823A9780;
        LODWORD(v91) = v43;
        v86._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v86);
        swift_bridgeObjectRelease();
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x181F77290);
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
      uint64_t v49 = (int)POSIXErrorCode.rawValue.getter();
      id v50 = objc_allocWithZone((Class)NSError);
      uint64_t v51 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v45 = objc_msgSend(v50, sel_initWithDomain_code_userInfo_, v51, v49, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v52 = objc_msgSend(v45, sel_domain);
      id v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
      uint64_t v55 = v54;

      if (v53 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v55 == v56)
      {
        swift_bridgeObjectRelease_n();
        a3 = v87;
      }
      else
      {
        char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        a3 = v87;
        if ((v57 & 1) == 0) {
          goto LABEL_90;
        }
      }
LABEL_50:
      specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v44, a4, a5, v45, 0x7265646C6F46, 0xE600000000000000, 0, 0, &v93, 0, 0);
      uint64_t v58 = *(void **)(v13 + 64);
      *(void *)(v13 + 64) = *(void *)&v93.st_dev;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      break;
  }
LABEL_51:
  if (!v89 || !a3)
  {
LABEL_83:
    uint64_t v62 = 0;
    goto LABEL_85;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    unint64_t v59 = *(DIR **)(v13 + 16);
    if (v59)
    {
      uint64_t v60 = 0;
      p_st_atimespec = &v93.st_atimespec;
      uint64_t v61 = 1;
      while (1)
      {
        uint64_t v62 = v61;
        uint64_t v63 = readdir(v59);
        if (!v63)
        {
LABEL_84:
          closedir(v59);
          *(void *)(v13 + 16) = 0;
          uint64_t v62 = v60;
          goto LABEL_85;
        }
        uint64_t v64 = v63;
        while (1)
        {
          if (!v64->d_namlen || !v64->d_ino) {
            goto LABEL_60;
          }
          uint64_t v66 = String.init(cString:)();
          unint64_t v67 = v65;
          if ((v66 != 46 || v65 != (void *)0xE100000000000000)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            && (v66 != 11822 || v67 != (void *)0xE200000000000000)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            && (v66 != 24366 || v67 != (void *)0xE200000000000000)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            break;
          }
          swift_bridgeObjectRelease();
LABEL_60:
          uint64_t v64 = readdir(v59);
          if (!v64) {
            goto LABEL_84;
          }
        }
        if (*(unsigned char *)(v13 + 56) != 1) {
          goto LABEL_79;
        }
        if (v64->d_type)
        {
          if (v64->d_type == 4) {
            goto LABEL_76;
          }
LABEL_79:
          __darwin_ino64_t v79 = *(void *)(v13 + 48);
          *(void *)&v93.st_dev = *(void *)(v13 + 40);
          v93.__darwin_ino64_t st_ino = v79;
          swift_bridgeObjectRetain();
          v80._uint64_t countAndFlagsBits = v66;
          v80._uint64_t object = v67;
          String.append(_:)(v80);
        }
        else
        {
          memset(&v93, 0, 28);
          uint64_t v71 = p_st_atimespec;
          timespec *p_st_atimespec = 0u;
          v71[1] = 0u;
          v71[2] = 0u;
          v71[3] = 0u;
          v71[4] = 0u;
          v71[5] = 0u;
          v71[6] = 0u;
          uint64_t v72 = *(void *)(v13 + 32);
          uint64_t v91 = *(void *)(v13 + 24);
          uint64_t v92 = v72;
          swift_bridgeObjectRetain();
          v73._uint64_t countAndFlagsBits = 47;
          v73._uint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v73);
          swift_bridgeObjectRetain();
          v74._uint64_t countAndFlagsBits = v66;
          v74._uint64_t object = v67;
          String.append(_:)(v74);
          swift_bridgeObjectRelease();
          uint64_t v75 = String.utf8CString.getter();
          swift_bridgeObjectRelease();
          int v76 = stat((const char *)(v75 + 32), &v93);
          swift_release();
          if (v76) {
            goto LABEL_79;
          }
          int st_mode = v93.st_mode;
          int v78 = S_IFMT.getter() & st_mode;
          if (v78 != (unsigned __int16)S_IFDIR.getter()) {
            goto LABEL_79;
          }
LABEL_76:
          __darwin_ino64_t v68 = *(void *)(v13 + 48);
          *(void *)&v93.st_dev = *(void *)(v13 + 40);
          v93.__darwin_ino64_t st_ino = v68;
          swift_bridgeObjectRetain();
          v69._uint64_t countAndFlagsBits = v66;
          v69._uint64_t object = v67;
          String.append(_:)(v69);
          swift_bridgeObjectRetain();
          v70._uint64_t countAndFlagsBits = 47;
          v70._uint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v70);
          swift_bridgeObjectRelease();
        }
        uint64_t v81 = *(void *)&v93.st_dev;
        __darwin_ino64_t v82 = v93.st_ino;
        __uint8_t d_type = v64->d_type;
        char v84 = v89;
        *uint64_t v89 = v66;
        v84[1] = (uint64_t)v67;
        v84[2] = v81;
        long long v84[3] = v82;
        *((unsigned char *)v84 + 32) = d_type;
        if (v62 == v87) {
          goto LABEL_91;
        }
        uint64_t v89 = v84 + 5;
        uint64_t v61 = v62 + 1;
        unint64_t v59 = *(DIR **)(v13 + 16);
        uint64_t v60 = v62;
        if (!v59) {
          goto LABEL_85;
        }
      }
    }
    goto LABEL_83;
  }
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  uint64_t v62 = v87;
LABEL_85:
  *uint64_t v88 = v13;
  return v62;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  type metadata accessor for _DarwinSearchPathsSequence.Iterator();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a4;
  *(void *)(v10 + 24) = a5;
  uint64_t started = sysdir_start_search_path_enumeration_private();
  uint64_t v12 = 0;
  *(_DWORD *)(v10 + 32) = started;
  if (!a2 || !a3) {
    goto LABEL_15;
  }
  if (a3 < 0) {
    __break(1u);
  }
  uint64_t v13 = started;
  unsigned __int8 v29 = a1;
  uint64_t v12 = 0;
  while (1)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if (isStackAllocationSafe)
    {
      double v15 = MEMORY[0x1F4188790](isStackAllocationSafe);
      uint64_t v16 = MEMORY[0x185309710](v13, v28, v15);
      *(_DWORD *)(v10 + 32) = v16;
      if (!v16) {
        goto LABEL_14;
      }
      uint64_t v13 = v16;
      id v17 = objc_msgSend(self, sel_defaultManager);
      id v18 = objc_msgSend(v17, sel_stringWithFileSystemRepresentation_length_, v28, strlen(v28));

      id v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      uint64_t v21 = v20;

      goto LABEL_5;
    }
    uint64_t v22 = (const char *)swift_slowAlloc();
    uint64_t v23 = MEMORY[0x185309710](v13, v22);
    *(_DWORD *)(v10 + 32) = v23;
    if (!v23) {
      break;
    }
    uint64_t v13 = v23;
    id v24 = objc_msgSend(self, sel_defaultManager);
    id v25 = objc_msgSend(v24, sel_stringWithFileSystemRepresentation_length_, v22, strlen(v22));

    id v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    uint64_t v21 = v26;

    MEMORY[0x185309510](v22, -1, -1);
LABEL_5:
    ++v12;
    *a2 = v19;
    a2[1] = v21;
    a2 += 2;
    if (a3 == v12)
    {
      uint64_t v12 = a3;
      goto LABEL_14;
    }
  }
  MEMORY[0x185309510](v22, -1, -1);
LABEL_14:
  a1 = v29;
LABEL_15:
  *a1 = v10;
  return v12;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  v23[0] = 0;
  int v9 = a6 & 1;
  uint64_t v24 = 0;
  uint64_t v25 = a4;
  unint64_t v26 = a5;
  uint64_t v27 = 0;
  if ((a5 & 0x2000000000000000) != 0) {
    uint64_t v10 = HIBYTE(a5) & 0xF;
  }
  else {
    uint64_t v10 = a4 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v28 = v10;
  char v29 = a6 & 1;
  char v30 = 0;
  if (a2)
  {
    if (a3)
    {
      if (a3 < 0) {
        __break(1u);
      }
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      unsigned int v15 = 0;
      uint64_t v22 = a3;
      uint64_t v16 = a3 - 1;
LABEL_12:
      if (v13 >= v10)
      {
LABEL_36:
        char v20 = 1;
        a3 = v12;
        goto LABEL_33;
      }
      if ((a5 & 0x1000000000000000) != 0)
      {
        unsigned int v18 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a5 & 0x2000000000000000) == 0 && (a4 & 0x1000000000000000) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        unsigned int v18 = _decodeScalar(_:startingAt:)();
      }
      unsigned int v15 = bswap32(v18);
      if (!v9) {
        unsigned int v15 = v18;
      }
      v23[0] = v15;
      v13 += v19;
      uint64_t v27 = v13;
      uint64_t v24 = 1;
      *(unsigned char *)(a2 + v12) = v15;
      if (v16 != v12)
      {
        uint64_t v14 = 1;
        while (v16 != v12)
        {
          ++v12;
          if (v14 < 1) {
            goto LABEL_12;
          }
          if (__OFADD__(v14, 1)) {
            goto LABEL_35;
          }
          char v17 = *((unsigned char *)v23 + v14);
          uint64_t v24 = v14 + 1;
          if (v14 == 3)
          {
            uint64_t v14 = 0;
            uint64_t v24 = 0;
            *(unsigned char *)(a2 + v12) = v17;
            if (v16 == v12)
            {
              char v20 = 0;
              goto LABEL_32;
            }
          }
          else
          {
            *(unsigned char *)(a2 + v12) = v17;
            if (v16 == v12)
            {
              char v20 = 0;
              ++v14;
              goto LABEL_32;
            }
            ++v14;
          }
        }
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      char v20 = 0;
      uint64_t v14 = 1;
LABEL_32:
      a3 = v22;
    }
    else
    {
      unsigned int v15 = 0;
      uint64_t v14 = 0;
      uint64_t v13 = 0;
      char v20 = 0;
    }
  }
  else
  {
    unsigned int v15 = 0;
    uint64_t v14 = 0;
    uint64_t v13 = 0;
    char v20 = 0;
    a3 = 0;
  }
LABEL_33:
  *(_DWORD *)a1 = v15;
  *(void *)(a1 + 8) = v14;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = v13;
  *(void *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 48) = v9;
  *(unsigned char *)(a1 + 49) = v20;
  return a3;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v5 = v3;
  long long v6 = *v3;
  long long v7 = v3[1];
  v225[4] = v3[4];
  long long v8 = v3[2];
  v225[3] = v3[3];
  v225[2] = v8;
  v225[0] = v6;
  v225[1] = v7;
  long long v9 = v3[5];
  long long v10 = v3[6];
  long long v11 = v3[7];
  v225[8] = v3[8];
  v225[7] = v11;
  v225[6] = v10;
  v225[5] = v9;
  long long v12 = v3[9];
  long long v13 = v3[10];
  long long v14 = v3[11];
  uint64_t v226 = *((void *)v3 + 24);
  v225[11] = v14;
  v225[10] = v13;
  v225[9] = v12;
  uint64_t v15 = *((void *)v3 + 1);
  uint64_t v16 = *((void *)v3 + 2);
  unint64_t v18 = *((void *)v3 + 3);
  uint64_t v17 = *((void *)v3 + 4);
  uint64_t v20 = *((void *)v3 + 5);
  uint64_t v19 = *((void *)v3 + 6);
  uint64_t v21 = *((void *)v5 + 8);
  uint64_t v195 = *((void *)v5 + 7);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_177;
  }
  if (!a3)
  {
    uint64_t v5 = v225;
    goto LABEL_177;
  }
  if (a3 < 0)
  {
LABEL_200:
    __break(1u);
    goto LABEL_201;
  }
  uint64_t v22 = *((void *)v5 + 9);
  if (v22 == v15)
  {
    a3 = 0;
    uint64_t v5 = v225;
LABEL_177:
    long long v152 = v5[11];
    *(_OWORD *)(result + 160) = v5[10];
    *(_OWORD *)(result + 176) = v152;
    uint64_t v153 = *((void *)v5 + 24);
    long long v154 = v5[7];
    *(_OWORD *)(result + 96) = v5[6];
    *(_OWORD *)(result + 112) = v154;
    long long v155 = v5[9];
    *(_OWORD *)(result + 128) = v5[8];
    *(_OWORD *)(result + 144) = v155;
    long long v156 = v5[3];
    *(_OWORD *)(result + 32) = v5[2];
    *(_OWORD *)(result + 48) = v156;
    long long v157 = v5[5];
    *(_OWORD *)(result + 64) = v5[4];
    *(_OWORD *)(result + 80) = v157;
    long long v158 = v5[1];
    *(_OWORD *)uint64_t result = *v5;
    *(_OWORD *)(result + 16) = v158;
    *(void *)(result + 192) = v153;
    *(void *)(result + 200) = v15;
    *(void *)(result + 208) = v16;
    *(void *)(result + 216) = v18;
    *(void *)(result + 224) = v17;
    *(void *)(result + 232) = v20;
    *(void *)(result + 240) = v19;
    *(void *)(result + 248) = v195;
    *(void *)(result + 256) = v21;
    return a3;
  }
  uint64_t v192 = v17;
  uint64_t v161 = result;
  uint64_t v159 = v22 - v15;
  if (v22 <= v15)
  {
LABEL_173:
    __break(1u);
LABEL_174:
    uint64_t v5 = v225;
    uint64_t v15 = v160;
    uint64_t result = v161;
    uint64_t v21 = v4;
    unint64_t v18 = v16;
LABEL_176:
    uint64_t v17 = v192;
    uint64_t v16 = v193;
    goto LABEL_177;
  }
  uint64_t v23 = *(void **)v5;
  uint64_t v169 = *((void *)v5 + 17);
  uint64_t v168 = *((void *)v5 + 18);
  uint64_t v167 = *((void *)v5 + 19);
  uint64_t v166 = *((void *)v5 + 20);
  uint64_t v24 = (_OWORD *)(*(void *)v5 + 16);
  uint64_t v160 = v15 + a3;
  uint64_t v165 = v24;
  uint64_t v164 = a3;
  uint64_t v25 = 1;
  uint64_t v26 = v15;
  uint64_t v186 = (uint64_t)v5;
  uint64_t v162 = v15;
  uint64_t v163 = *((void *)v5 + 9);
  uint64_t v191 = *(void **)v5;
  while (1)
  {
    uint64_t v190 = v26;
    unint64_t v170 = v18;
    uint64_t v171 = v21;
    uint64_t v183 = a2;
    uint64_t v184 = v25;
    uint64_t v194 = v16;
    if (v192 != 1 && v16 == v23[11])
    {
      if (v21 == 2)
      {
        uint64_t v27 = v23[8];
        if (v27)
        {
          uint64_t v29 = v23[9];
          uint64_t v28 = v23[10];
          swift_unknownObjectRetain();
          specialized Rope._Node.distanceFromStart<A>(to:in:)(v16, v18, v192, v27, v29, v28);
          swift_unknownObjectRelease();
        }
        char v185 = 1;
        uint64_t v38 = v192;
        unint64_t v181 = v18;
        uint64_t v187 = v16;
        goto LABEL_75;
      }
      uint64_t v48 = BigString.Index.utf8Offset.getter();
      uint64_t v38 = v192;
      unint64_t v181 = v18;
      uint64_t v187 = v16;
      goto LABEL_72;
    }
    uint64_t v30 = v23[8];
    uint64_t v31 = v23[9];
    if (v30) {
      uint64_t v32 = v23[9];
    }
    else {
      uint64_t v32 = 0;
    }
    if (v26 < 0 || v32 < v26) {
      goto LABEL_196;
    }
    uint64_t v33 = v23[10];
    uint64_t v187 = v23[11];
    if (v30 && v26 < v31 && *(_WORD *)(v30 + 16))
    {
      uint64_t v34 = *(unsigned __int8 *)(v30 + 18);
      if (*(unsigned char *)(v30 + 18))
      {
        uint64_t result = swift_unknownObjectRetain_n();
        uint64_t v35 = v190;
        uint64_t v36 = v30;
        while (1)
        {
          uint64_t v39 = *(unsigned __int16 *)(v36 + 16);
          if (!*(_WORD *)(v36 + 16)) {
            break;
          }
          uint64_t v40 = *(void *)(v36 + 32);
          BOOL v41 = __OFSUB__(v35, v40);
          uint64_t v42 = v35 - v40;
          if (v41) {
            goto LABEL_187;
          }
          if (__OFADD__(v42, 1)) {
            goto LABEL_188;
          }
          if (v42 + 1 < 1)
          {
            uint64_t v39 = 0;
            goto LABEL_27;
          }
          if (v39 == 1)
          {
            uint64_t v35 = v42;
            break;
          }
          int v43 = (uint64_t *)(v36 + 56);
          uint64_t v44 = 1;
          while (1)
          {
            uint64_t v45 = *v43;
            v43 += 3;
            uint64_t v35 = v42 - v45;
            if (__OFSUB__(v42, v45))
            {
              __break(1u);
LABEL_179:
              __break(1u);
LABEL_180:
              __break(1u);
LABEL_181:
              __break(1u);
LABEL_182:
              __break(1u);
LABEL_183:
              __break(1u);
              goto LABEL_184;
            }
            if (__OFADD__(v35, 1)) {
              goto LABEL_179;
            }
            if (v35 + 1 < 1) {
              break;
            }
            ++v44;
            uint64_t v42 = v35;
            if (v39 == v44) {
              goto LABEL_26;
            }
          }
          uint64_t v39 = v44;
          uint64_t v35 = v42;
LABEL_27:
          char v37 = (4 * *(unsigned char *)(v36 + 18) + 8) & 0x3C;
          uint64_t v34 = ((-15 << v37) - 1) & v34 | (v39 << v37);
          uint64_t v38 = *(void *)(v36 + 24 + 24 * v39);
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v36 = v38;
          if (!*(unsigned char *)(v38 + 18)) {
            goto LABEL_46;
          }
        }
LABEL_26:
        if (!v35) {
          goto LABEL_27;
        }
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
LABEL_196:
        __break(1u);
LABEL_197:
        __break(1u);
LABEL_198:
        __break(1u);
LABEL_199:
        __break(1u);
        goto LABEL_200;
      }
      uint64_t result = swift_unknownObjectRetain_n();
      uint64_t v35 = v190;
      uint64_t v38 = v30;
LABEL_46:
      uint64_t v49 = *(unsigned __int16 *)(v38 + 16);
      v50.i64[0] = -1;
      v50.i64[1] = -1;
      if (*(_WORD *)(v38 + 16))
      {
        unint64_t v51 = v35 - 1;
        if (__OFSUB__(v35, 1)) {
          goto LABEL_205;
        }
        if (__OFADD__(v51, 1)) {
          goto LABEL_206;
        }
        if (v35 < 1)
        {
          uint64_t v49 = 0;
LABEL_68:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v47 = v34 & 0xFFFFFFFFFFFFF0FFLL | (v49 << 8);
          uint64_t v5 = (_OWORD *)v186;
          uint64_t v21 = v171;
          unint64_t v181 = v47;
LABEL_42:
          swift_unknownObjectRetain();
          uint64_t v48 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v187, v47, v38, v30, v31, v33);
          swift_unknownObjectRelease_n();
          goto LABEL_70;
        }
        if (v49 != 1)
        {
          unint64_t v52 = v49 - 2;
          if (v51 < v49 - 2) {
            unint64_t v52 = v35 - 1;
          }
          if (v52 >= v35 + 0x7FFFFFFFFFFFFFFFLL) {
            unint64_t v52 = v35 + 0x7FFFFFFFFFFFFFFFLL;
          }
          unint64_t v53 = v52 + 1;
          if (v53 >= 5)
          {
            uint64_t v55 = v53 & 3;
            if ((v53 & 3) == 0) {
              uint64_t v55 = 4;
            }
            unint64_t v56 = v53 - v55;
            uint64_t v54 = v56 + 1;
            int64x2_t v57 = 0uLL;
            int64x2_t v58 = (int64x2_t)(unint64_t)(v35 - 1);
            do
            {
              int64x2_t v58 = vaddq_s64(v58, v50);
              int64x2_t v57 = vaddq_s64(v57, v50);
              v56 -= 4;
            }
            while (v56);
            unint64_t v51 = vaddvq_s64(vaddq_s64(vzip2q_s64(v58, v57), vzip1q_s64(v58, v57)));
          }
          else
          {
            uint64_t v54 = 1;
          }
          while (1)
          {
            if (v35 + 0x8000000000000000 == v54) {
              goto LABEL_199;
            }
            if (v35 == v54) {
              break;
            }
            ++v54;
            --v51;
            if (v49 == v54) {
              goto LABEL_67;
            }
          }
          uint64_t v49 = v35;
          goto LABEL_68;
        }
      }
      else
      {
        unint64_t v51 = v35;
      }
LABEL_67:
      if (v51) {
        goto LABEL_204;
      }
      goto LABEL_68;
    }
    unint64_t v46 = swift_unknownObjectRetain_n();
    unint64_t v47 = specialized Rope._endPath.getter(v46);
    swift_unknownObjectRelease();
    uint64_t v38 = 0;
    unint64_t v181 = v47;
    if (v30) {
      goto LABEL_42;
    }
    uint64_t v48 = 0;
LABEL_70:
    if (v21 == 2)
    {
      char v185 = 1;
      goto LABEL_75;
    }
LABEL_72:
    if (BigString.Index.utf8Offset.getter() == v48)
    {
      long long v59 = *v24;
      long long v60 = v24[2];
      v208[1] = v24[1];
      v208[2] = v60;
      v208[0] = v59;
      long long v61 = *v24;
      v215[1] = v24[1];
      v215[2] = v60;
      v215[0] = v61;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v215, (uint64_t)v216);
      outlined retain of Locale((uint64_t)v216);
      uint64_t v62 = &v199;
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v208);
      uint64_t v63 = BigString.UTF8View.index(roundingDown:)();
      uint64_t v65 = v64;
      uint64_t v67 = v66;
      uint64_t v69 = v68;
      char v185 = 0;
      goto LABEL_76;
    }
    char v185 = 0;
LABEL_75:
    long long v70 = *v24;
    long long v71 = v24[2];
    v210[1] = v24[1];
    v210[2] = v71;
    v210[0] = v70;
    long long v72 = *v24;
    v211[1] = v24[1];
    v211[2] = v71;
    v211[0] = v72;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v211, (uint64_t)v212);
    outlined retain of Locale((uint64_t)v212);
    uint64_t v62 = &v200;
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v210);
    long long v73 = *v24;
    long long v74 = v24[2];
    v209[1] = v24[1];
    v209[2] = v74;
    v209[0] = v73;
    long long v75 = *v24;
    v213[1] = v24[1];
    v213[2] = v74;
    v213[0] = v75;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v213, (uint64_t)v214);
    outlined retain of Locale((uint64_t)v214);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v209);
    uint64_t v63 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v65 = v76;
    uint64_t v67 = v77;
    uint64_t v69 = v78;
    uint64_t v5 = (_OWORD *)v186;
LABEL_76:
    uint64_t result = outlined release of Locale((uint64_t)v62);
    if (v187 != v191[11]) {
      goto LABEL_189;
    }
    if (v38)
    {
      __darwin_ino64_t v79 = (void *)(v38 + 24 * ((v181 >> ((4 * *(unsigned char *)(v38 + 18) + 8) & 0x3C)) & 0xF));
      uint64_t v80 = v79[4];
      unint64_t v188 = v79[3];
      uint64_t v81 = v79[5];
      outlined retain of AttributedString.Runs((uint64_t)v5);
      uint64_t v182 = v80;
      swift_bridgeObjectRetain();
      uint64_t v180 = v81;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v82 = v191[8];
      outlined retain of AttributedString.Runs(v186);
      swift_unknownObjectRetain();
      uint64_t v5 = (_OWORD *)v186;
      unint64_t v188 = specialized Rope._Node.subscript.getter(v181, v82);
      uint64_t v180 = v84;
      uint64_t v182 = v83;
      swift_unknownObjectRelease();
    }
    uint64_t v85 = v168;
    uint64_t v86 = v169;
    uint64_t v87 = v166;
    char v88 = static BigString.Index.< infix(_:_:)();
    if (v88)
    {
      uint64_t v86 = v63;
      uint64_t v85 = v65;
      uint64_t v89 = v67;
    }
    else
    {
      uint64_t v89 = v167;
    }
    if (v88) {
      uint64_t v87 = v69;
    }
    uint64_t result = BigString.Index.utf8Offset.getter();
    int64_t v90 = result + v188;
    if (__OFADD__(result, v188)) {
      goto LABEL_190;
    }
    uint64_t v91 = BigString.Index.utf8Offset.getter();
    if (v91 < v90) {
      int64_t v90 = v91;
    }
    uint64_t v24 = v165;
    long long v92 = *v165;
    long long v93 = v165[2];
    v207[1] = v165[1];
    v207[2] = v93;
    v207[0] = v92;
    long long v94 = *v165;
    v217[1] = v165[1];
    v217[2] = v93;
    v217[0] = v94;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v217, (uint64_t)v218);
    outlined retain of Locale((uint64_t)v218);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v207);
    uint64_t result = BigString.Index.utf8Offset.getter();
    if (__OFSUB__(v90, result)) {
      goto LABEL_191;
    }
    uint64_t v95 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v97 = v96;
    uint64_t v99 = v98;
    uint64_t v101 = v100;
    outlined release of Locale((uint64_t)v201);
    uint64_t v179 = v95;
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_192;
    }
    uint64_t v172 = v97;
    uint64_t v173 = v101;
    uint64_t v174 = v99;
    uint64_t v175 = v87;
    uint64_t v176 = v89;
    uint64_t v177 = v85;
    uint64_t v102 = v192;
    uint64_t v104 = v191[8];
    uint64_t v103 = v191[9];
    uint64_t v105 = v191[10];
    uint64_t v106 = v194;
    uint64_t v178 = v86;
    uint64_t v189 = v191[11];
    if (v192 != 1 && v194 == v191[11])
    {
      if (v185)
      {
        unint64_t v107 = v170;
        if (v104)
        {
          outlined retain of AttributedString.Runs((uint64_t)v5);
          swift_unknownObjectRetain();
          uint64_t v108 = v103;
          uint64_t v109 = v103;
          uint64_t v110 = v105;
          uint64_t v111 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v194, v170, v192, v104, v109, v105);
        }
        else
        {
          uint64_t v108 = v191[9];
          uint64_t v110 = v191[10];
          outlined retain of AttributedString.Runs((uint64_t)v5);
          uint64_t v111 = 0;
        }
      }
      else
      {
        uint64_t v108 = v191[9];
        uint64_t v110 = v191[10];
        outlined retain of AttributedString.Runs((uint64_t)v5);
        swift_unknownObjectRetain();
        uint64_t v111 = BigString.Index.utf8Offset.getter();
        unint64_t v107 = v170;
      }
      goto LABEL_161;
    }
    if (v104) {
      uint64_t v112 = v191[9];
    }
    else {
      uint64_t v112 = 0;
    }
    uint64_t v113 = v190;
    if (v190 < 0 || v112 < v190) {
      goto LABEL_197;
    }
    if (v104 && v190 < v103 && *(_WORD *)(v104 + 16)) {
      break;
    }
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)v5);
    unint64_t v126 = swift_unknownObjectRetain();
    unint64_t v107 = specialized Rope._endPath.getter(v126);
    swift_unknownObjectRelease();
    uint64_t v102 = 0;
    if (v104) {
      goto LABEL_129;
    }
    uint64_t v108 = v103;
    uint64_t v110 = v105;
    uint64_t v111 = 0;
    uint64_t v106 = v189;
LABEL_161:
    uint64_t v196 = v106;
    unint64_t v197 = v107;
    uint64_t v198 = v102;
    if (v102)
    {
      unint64_t v133 = *(void *)(v102 + 24 * ((v107 >> ((4 * *(unsigned char *)(v102 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v133 = specialized Rope._Node.subscript.getter(v107, v104);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    BOOL v41 = __OFADD__(v111, v133);
    unint64_t v134 = v111 + v133;
    if (v41) {
      goto LABEL_193;
    }
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v196, v104, v108, v110, v189);
    swift_unknownObjectRelease_n();
    uint64_t v16 = v197;
    uint64_t v192 = v198;
    uint64_t v193 = v196;
    if (v185)
    {
      long long v135 = *v165;
      long long v136 = v165[2];
      v206[1] = v165[1];
      v206[2] = v136;
      v206[0] = v135;
      long long v137 = *v165;
      v219[1] = v165[1];
      v219[2] = v136;
      v219[0] = v137;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v219, (uint64_t)v220);
      outlined retain of Locale((uint64_t)v220);
      long long v138 = &v203;
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v206);
      long long v139 = *v165;
      long long v140 = v165[2];
      v205[1] = v165[1];
      v205[2] = v140;
      v205[0] = v139;
      long long v141 = *v165;
      v221[1] = v165[1];
      v221[2] = v140;
      v221[0] = v141;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v221, (uint64_t)v222);
      outlined retain of Locale((uint64_t)v222);
      BigString.startIndex.getter();
      outlined release of Locale((uint64_t)v205);
      uint64_t v20 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v19 = v142;
      uint64_t v195 = v143;
      uint64_t v4 = v144;
      uint64_t v145 = v184;
    }
    else
    {
      long long v146 = *v165;
      long long v147 = v165[2];
      v204[1] = v165[1];
      v204[2] = v147;
      v204[0] = v146;
      long long v148 = *v165;
      v223[1] = v165[1];
      v223[2] = v147;
      v223[0] = v148;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v223, (uint64_t)v224);
      outlined retain of Locale((uint64_t)v224);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v204);
      uint64_t result = BigString.Index.utf8Offset.getter();
      BOOL v41 = __OFSUB__(v134, result);
      uint64_t v145 = v184;
      if (v41) {
        goto LABEL_198;
      }
      long long v138 = &v202;
      uint64_t v20 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v19 = v149;
      uint64_t v195 = v150;
      uint64_t v4 = v151;
    }
    outlined release of Locale((uint64_t)v138);
    uint64_t v5 = (_OWORD *)v186;
    uint64_t result = outlined release of AttributedString.Runs(v186);
    *uint64_t v183 = v182;
    v183[1] = v180;
    v183[2] = v178;
    v183[3] = v177;
    v183[4] = v176;
    v183[5] = v175;
    v183[6] = v179;
    v183[7] = v172;
    v183[8] = v174;
    v183[9] = v173;
    uint64_t v23 = v191;
    v183[10] = v191;
    a3 = v164;
    if (v145 == v164) {
      goto LABEL_174;
    }
    uint64_t v26 = v190 + 1;
    uint64_t v15 = v163;
    uint64_t v21 = v4;
    unint64_t v18 = v16;
    if (v190 + 1 == v163)
    {
      uint64_t v5 = v225;
      a3 = v159;
      uint64_t result = v161;
      goto LABEL_176;
    }
    uint64_t v16 = v193;
    if (v162 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v25 = v145 + 1;
      a2 = v183 + 11;
      if (v26 < v163) {
        continue;
      }
    }
    goto LABEL_173;
  }
  uint64_t v114 = v191[9];
  uint64_t v115 = v191[10];
  uint64_t v116 = *(unsigned __int8 *)(v104 + 18);
  if (*(unsigned char *)(v104 + 18))
  {
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)v5);
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v117 = v104;
    while (1)
    {
      uint64_t v119 = *(unsigned __int16 *)(v117 + 16);
      if (!*(_WORD *)(v117 + 16)) {
        goto LABEL_106;
      }
      uint64_t v120 = *(void *)(v117 + 32);
      uint64_t v121 = v113 - v120;
      if (__OFSUB__(v113, v120)) {
        goto LABEL_185;
      }
      if (__OFADD__(v121, 1)) {
        goto LABEL_186;
      }
      if (v121 + 1 <= 0)
      {
        uint64_t v119 = 0;
      }
      else
      {
        if (v119 == 1)
        {
          v113 -= v120;
LABEL_106:
          if (v113) {
            goto LABEL_183;
          }
          goto LABEL_107;
        }
        uint64_t v122 = *(void *)(v117 + 56);
        BOOL v41 = __OFSUB__(v121, v122);
        uint64_t v123 = v121 - v122;
        if (v41) {
          goto LABEL_194;
        }
        if (__OFADD__(v123, 1)) {
          goto LABEL_195;
        }
        if (v123 + 1 >= 1)
        {
          if (v119 != 2)
          {
            unint64_t v124 = (void *)(v117 + 80);
            uint64_t v125 = 2;
            while (v119 != v125)
            {
              uint64_t v113 = v123 - *v124;
              if (__OFSUB__(v123, *v124)) {
                goto LABEL_181;
              }
              if (__OFADD__(v113, 1)) {
                goto LABEL_182;
              }
              if (v113 + 1 < 1)
              {
                uint64_t v119 = v125;
                uint64_t v113 = v123;
                goto LABEL_107;
              }
              ++v125;
              v124 += 3;
              uint64_t v123 = v113;
              if (v119 == v125) {
                goto LABEL_106;
              }
            }
            goto LABEL_180;
          }
          uint64_t v113 = v123;
          goto LABEL_106;
        }
        uint64_t v119 = 1;
        uint64_t v113 = v121;
      }
LABEL_107:
      char v118 = (4 * *(unsigned char *)(v117 + 18) + 8) & 0x3C;
      uint64_t v116 = ((-15 << v118) - 1) & v116 | (v119 << v118);
      uint64_t v102 = *(void *)(v117 + 24 + 24 * v119);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v117 = v102;
      if (!*(unsigned char *)(v102 + 18)) {
        goto LABEL_133;
      }
    }
  }
  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v5);
  uint64_t result = swift_unknownObjectRetain();
  uint64_t v102 = v104;
LABEL_133:
  uint64_t v128 = *(unsigned __int16 *)(v102 + 16);
  if (!*(_WORD *)(v102 + 16))
  {
    unint64_t v129 = v113;
    uint64_t v105 = v115;
    uint64_t v103 = v114;
LABEL_153:
    if (v129) {
      goto LABEL_203;
    }
    goto LABEL_159;
  }
  unint64_t v129 = v113 - 1;
  if (__OFSUB__(v113, 1)) {
    goto LABEL_207;
  }
  if (__OFADD__(v129, 1)) {
    goto LABEL_208;
  }
  uint64_t v105 = v115;
  uint64_t v103 = v114;
  if (v113 <= 0)
  {
    uint64_t v128 = 0;
LABEL_159:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v107 = v116 & 0xFFFFFFFFFFFFF0FFLL | (v128 << 8);
LABEL_129:
    swift_unknownObjectRetain();
    uint64_t v106 = v189;
    uint64_t v108 = v103;
    uint64_t v127 = v103;
    uint64_t v110 = v105;
    uint64_t v111 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v189, v107, v102, v104, v127, v105);
    swift_unknownObjectRelease_n();
    goto LABEL_161;
  }
  if (v128 == 1) {
    goto LABEL_153;
  }
  BOOL v41 = __OFSUB__(v129, 1);
  unint64_t v129 = v113 - 2;
  if (v41) {
    goto LABEL_209;
  }
  if (__OFADD__(v129, 1)) {
    goto LABEL_210;
  }
  if (v113 - 1 < 1)
  {
    uint64_t v128 = 1;
    goto LABEL_159;
  }
  if (v128 == 2) {
    goto LABEL_153;
  }
  uint64_t v130 = 0;
  unint64_t v131 = v128 - 2;
  if (v129 >= v128 - 3) {
    unint64_t v132 = v128 - 3;
  }
  else {
    unint64_t v132 = v113 - 2;
  }
  if (v132 >= v113 + 0x7FFFFFFFFFFFFFFELL) {
    unint64_t v132 = v113 + 0x7FFFFFFFFFFFFFFELL;
  }
  while (v131 > v132)
  {
    if (v113 + 0x7FFFFFFFFFFFFFFELL == v130) {
      goto LABEL_202;
    }
    if (v129 == v130)
    {
      uint64_t v128 = v113;
      goto LABEL_159;
    }
    if (v131 == ++v130)
    {
      v129 -= v130;
      goto LABEL_153;
    }
  }
LABEL_201:
  __break(1u);
LABEL_202:
  __break(1u);
LABEL_203:
  __break(1u);
LABEL_204:
  __break(1u);
LABEL_205:
  __break(1u);
LABEL_206:
  __break(1u);
LABEL_207:
  __break(1u);
LABEL_208:
  __break(1u);
LABEL_209:
  __break(1u);
LABEL_210:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = a4[8];
  if (v6) {
    uint64_t v7 = a4[10];
  }
  else {
    uint64_t v7 = 0;
  }
  if (a5 < 0 || v7 < a5) {
    goto LABEL_266;
  }
  uint64_t v8 = a6;
  uint64_t v10 = a4[9];
  uint64_t v114 = a4[11];
  uint64_t v103 = (void *)result;
  if (!v6 || (a4[10] > a5 ? (BOOL v11 = *(unsigned __int16 *)(v6 + 16) == 0) : (BOOL v11 = 1), v11))
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    unint64_t v12 = specialized Rope._endPath.getter(v6);
    swift_unknownObjectRelease();
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    if (!v6) {
      goto LABEL_61;
    }
    goto LABEL_13;
  }
  uint64_t v16 = *(unsigned __int8 *)(v6 + 18);
  if (*(unsigned char *)(v6 + 18))
  {
    swift_unknownObjectRetain_n();
    uint64_t result = swift_retain();
    uint64_t v14 = a5;
    unint64_t v17 = v6;
    while (1)
    {
      uint64_t v19 = *(unsigned __int16 *)(v17 + 16);
      if (!*(_WORD *)(v17 + 16)) {
        goto LABEL_17;
      }
      uint64_t v20 = *(void *)(v17 + 40);
      uint64_t v21 = v14 - v20;
      if (__OFSUB__(v14, v20)) {
        goto LABEL_255;
      }
      if (__OFADD__(v21, 1)) {
        goto LABEL_256;
      }
      if (v21 + 1 <= 0)
      {
        uint64_t v19 = 0;
        goto LABEL_18;
      }
      if (v19 == 1) {
        break;
      }
      uint64_t v22 = *(void *)(v17 + 64);
      BOOL v23 = __OFSUB__(v21, v22);
      uint64_t v24 = v21 - v22;
      if (v23) {
        goto LABEL_264;
      }
      if (__OFADD__(v24, 1)) {
        goto LABEL_265;
      }
      if (v24 + 1 < 1)
      {
        uint64_t v19 = 1;
        uint64_t v14 = v21;
        goto LABEL_18;
      }
      if (v19 == 2)
      {
        uint64_t v14 = v24;
        goto LABEL_17;
      }
      uint64_t v25 = (void *)(v17 + 88);
      uint64_t v26 = 2;
      while (1)
      {
        if (v19 == v26) {
          goto LABEL_240;
        }
        uint64_t v14 = v24 - *v25;
        if (__OFSUB__(v24, *v25))
        {
LABEL_241:
          __break(1u);
LABEL_242:
          __break(1u);
LABEL_243:
          __break(1u);
LABEL_244:
          __break(1u);
LABEL_245:
          __break(1u);
LABEL_246:
          __break(1u);
LABEL_247:
          __break(1u);
LABEL_248:
          __break(1u);
LABEL_249:
          __break(1u);
LABEL_250:
          __break(1u);
LABEL_251:
          __break(1u);
LABEL_252:
          __break(1u);
LABEL_253:
          __break(1u);
          goto LABEL_254;
        }
        if (__OFADD__(v14, 1)) {
          goto LABEL_242;
        }
        if (v14 + 1 < 1) {
          break;
        }
        ++v26;
        v25 += 3;
        uint64_t v24 = v14;
        if (v19 == v26) {
          goto LABEL_17;
        }
      }
      uint64_t v19 = v26;
      uint64_t v14 = v24;
LABEL_18:
      char v18 = (4 * *(unsigned char *)(v17 + 18) + 8) & 0x3C;
      uint64_t v16 = ((-15 << v18) - 1) & v16 | (v19 << v18);
      uint64_t v13 = *(void *)(v17 + 24 + 24 * v19);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      unint64_t v17 = v13;
      if (!*(unsigned char *)(v13 + 18)) {
        goto LABEL_40;
      }
    }
    v14 -= v20;
LABEL_17:
    if (!v14) {
      goto LABEL_18;
    }
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
LABEL_257:
    __break(1u);
LABEL_258:
    __break(1u);
LABEL_259:
    __break(1u);
LABEL_260:
    __break(1u);
LABEL_261:
    __break(1u);
LABEL_262:
    __break(1u);
LABEL_263:
    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
LABEL_267:
    __break(1u);
LABEL_268:
    __break(1u);
LABEL_269:
    __break(1u);
LABEL_270:
    __break(1u);
LABEL_271:
    __break(1u);
LABEL_272:
    __break(1u);
LABEL_273:
    __break(1u);
LABEL_274:
    __break(1u);
    goto LABEL_275;
  }
  swift_unknownObjectRetain_n();
  uint64_t result = swift_retain();
  uint64_t v14 = a5;
  uint64_t v13 = v6;
LABEL_40:
  uint64_t v27 = *(unsigned __int16 *)(v13 + 16);
  if (!*(_WORD *)(v13 + 16)) {
    goto LABEL_59;
  }
  uint64_t v28 = *(void *)(v13 + 24);
  uint64_t v29 = v14 - v28;
  if (__OFSUB__(v14, v28))
  {
LABEL_285:
    __break(1u);
    goto LABEL_286;
  }
  if (__OFADD__(v29, 1))
  {
LABEL_286:
    __break(1u);
LABEL_287:
    __break(1u);
LABEL_288:
    __break(1u);
    goto LABEL_289;
  }
  if (v29 + 1 <= 0)
  {
    uint64_t v27 = 0;
    goto LABEL_60;
  }
  if (v27 == 1)
  {
    v14 -= v28;
    goto LABEL_59;
  }
  uint64_t v30 = *(void *)(v13 + 48);
  BOOL v23 = __OFSUB__(v29, v30);
  uint64_t v31 = v29 - v30;
  if (v23)
  {
LABEL_289:
    __break(1u);
    goto LABEL_290;
  }
  if (!__OFADD__(v31, 1))
  {
    if (v31 + 1 < 1)
    {
      uint64_t v27 = 1;
      uint64_t v14 = v29;
      goto LABEL_60;
    }
    if (v27 != 2)
    {
      uint64_t v32 = (void *)(v13 + 72);
      uint64_t v33 = 2;
      while (1)
      {
        if (v27 == v33) {
          goto LABEL_278;
        }
        uint64_t v14 = v31 - *v32;
        if (__OFSUB__(v31, *v32)) {
          break;
        }
        if (__OFADD__(v14, 1)) {
          goto LABEL_280;
        }
        if (v14 + 1 < 1) {
          goto LABEL_233;
        }
        ++v33;
        v32 += 3;
        uint64_t v31 = v14;
        if (v27 == v33) {
          goto LABEL_59;
        }
      }
LABEL_279:
      __break(1u);
LABEL_280:
      __break(1u);
LABEL_281:
      __break(1u);
LABEL_282:
      __break(1u);
LABEL_283:
      __break(1u);
LABEL_284:
      __break(1u);
      goto LABEL_285;
    }
    uint64_t v14 = v31;
LABEL_59:
    if (!v14)
    {
      while (1)
      {
LABEL_60:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v12 = v16 & 0xFFFFFFFFFFFFF0FFLL | (v27 << 8);
        uint64_t v8 = a6;
        if (v6)
        {
LABEL_13:
          swift_unknownObjectRetain();
          uint64_t v15 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v114, v12, v13, v6, v10);
          swift_release();
          swift_unknownObjectRelease_n();
        }
        else
        {
LABEL_61:
          swift_release();
          uint64_t v15 = 0;
        }
        uint64_t v10 = a5;
        BOOL v23 = __OFSUB__(a5, v14);
        uint64_t v34 = a5 - v14;
        uint64_t result = a3;
        if (v23) {
          goto LABEL_267;
        }
        if (!a2) {
          goto LABEL_228;
        }
        uint64_t v35 = v114;
        if (!a3)
        {
LABEL_230:
          *uint64_t v103 = a4;
          v103[1] = v10;
          v103[2] = v8;
          v103[3] = v35;
          v103[4] = v12;
          v103[5] = v13;
          v103[6] = v15;
          v103[7] = v34;
          return result;
        }
        if (a3 < 0) {
          goto LABEL_274;
        }
        uint64_t v111 = 0;
        while (1)
        {
          uint64_t v16 = a4[8];
          uint64_t v114 = v35;
          if (v10 != v8)
          {
            if (v16) {
              uint64_t v41 = a4[10];
            }
            else {
              uint64_t v41 = 0;
            }
            goto LABEL_120;
          }
          if (!v16)
          {
            if (v10 > 0) {
              goto LABEL_268;
            }
            uint64_t v40 = 0;
            goto LABEL_118;
          }
          uint64_t v36 = a4[10];
          if (v36 < v10) {
            goto LABEL_261;
          }
          uint64_t v37 = *(unsigned __int8 *)(v16 + 18);
          BOOL v38 = !*(_WORD *)(v16 + 16) || v36 <= v10;
          uint64_t v108 = a4[9];
          uint64_t v106 = a4[11];
          if (!v38) {
            break;
          }
          unint64_t v39 = ((-15 << ((4 * v37 + 8) & 0x3C)) - 1) & v37 | ((unint64_t)*(unsigned __int16 *)(v16 + 16) << ((4 * v37 + 8) & 0x3C));
          swift_unknownObjectRetain();
          uint64_t v40 = 0;
          uint64_t v10 = 0;
LABEL_117:
          swift_unknownObjectRetain();
          specialized Rope._Node.distanceFromStart<A>(to:in:)(v106, v39, v10, v16, v108);
          uint64_t result = swift_unknownObjectRelease_n();
          uint64_t v8 = a6;
          uint64_t v10 = a5;
LABEL_118:
          uint64_t v41 = v10 - v40;
          if (__OFSUB__(v10, v40)) {
            goto LABEL_257;
          }
          uint64_t v35 = v114;
LABEL_120:
          if (v34 == v41)
          {
            uint64_t result = v111;
            goto LABEL_230;
          }
          if (v35 != a4[11]) {
            goto LABEL_243;
          }
          if (v13)
          {
            unint64_t v53 = (void *)(v13 + 24 * ((v12 >> ((4 * *(unsigned char *)(v13 + 18) + 8) & 0x3C)) & 0xF));
            uint64_t v54 = v53[4];
            uint64_t v55 = v53[5];
            unint64_t v56 = v53[3];
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            uint64_t v109 = v54;
            uint64_t v110 = v55;
          }
          else
          {
            uint64_t v57 = a4[8];
            swift_unknownObjectRetain();
            specialized Rope._Node.subscript.getter(v12, v57);
            uint64_t v59 = v58;
            uint64_t v61 = v60;
            uint64_t result = swift_unknownObjectRelease();
            if (v114 != a4[11]) {
              goto LABEL_260;
            }
            uint64_t v109 = v59;
            uint64_t v110 = v61;
            uint64_t v62 = a4[8];
            swift_unknownObjectRetain();
            unint64_t v56 = specialized Rope._Node.subscript.getter(v12, v62);
            uint64_t v10 = a5;
            swift_unknownObjectRelease();
          }
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v63 = v34 + v56;
          if (__OFADD__(v34, v56)) {
            goto LABEL_244;
          }
          if (v34 >= v8) {
            uint64_t v64 = v8;
          }
          else {
            uint64_t v64 = v34;
          }
          if (v34 < v10) {
            uint64_t v64 = v10;
          }
          if (v63 <= v10) {
            uint64_t v65 = v10;
          }
          else {
            uint64_t v65 = v34 + v56;
          }
          if (v63 <= v8) {
            uint64_t v66 = v65;
          }
          else {
            uint64_t v66 = v8;
          }
          if (v64 == v66) {
            goto LABEL_245;
          }
          uint64_t v67 = v66 - v64;
          if (__OFSUB__(v66, v64)) {
            goto LABEL_246;
          }
          uint64_t v68 = a4[8];
          uint64_t v69 = a4[11];
          uint64_t v116 = v114;
          unint64_t v117 = v12;
          uint64_t v118 = v13;
          BOOL v23 = __OFADD__(v15++, 1);
          if (v23) {
            goto LABEL_247;
          }
          if (v114 != v69) {
            goto LABEL_248;
          }
          uint64_t v107 = v67;
          if (v13)
          {
            unint64_t v70 = *(void *)(v13 + 24 * ((v12 >> ((4 * *(unsigned char *)(v13 + 18) + 8) & 0x3C)) & 0xF) + 24);
            swift_unknownObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            swift_retain();
            swift_unknownObjectRetain();
            unint64_t v70 = specialized Rope._Node.subscript.getter(v12, v68);
          }
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          BOOL v23 = __OFADD__(v34, v70);
          v34 += v70;
          if (v23) {
            goto LABEL_249;
          }
          if (v68)
          {
            unint64_t v71 = ((-15 << ((4 * *(unsigned char *)(v68 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v68 + 18) | ((unint64_t)*(unsigned __int16 *)(v68 + 16) << ((4 * *(unsigned char *)(v68 + 18) + 8) & 0x3C));
            uint64_t result = swift_unknownObjectRetain();
          }
          else
          {
            unint64_t v71 = 0;
          }
          uint64_t v35 = v114;
          if (v12 >= v71) {
            goto LABEL_250;
          }
          if (v13)
          {
            char v72 = (4 * *(unsigned char *)(v13 + 18) + 8) & 0x3C;
            unint64_t v73 = ((v12 >> v72) & 0xF) + 1;
            if (v73 < *(unsigned __int16 *)(v13 + 16))
            {
              unint64_t v12 = (v73 << v72) | ((-15 << v72) - 1) & v12;
              uint64_t result = swift_unknownObjectRelease_n();
              goto LABEL_162;
            }
          }
          int v74 = *(unsigned __int8 *)(v68 + 18);
          char v75 = (4 * v74 + 8) & 0x3C;
          uint64_t v76 = (v12 >> v75) & 0xF;
          uint64_t v115 = v76;
          if (v74)
          {
            swift_unknownObjectRetain();
            char v77 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v68 + 24, &v115, (uint64_t)&v116, v68, v74);
            uint64_t result = swift_unknownObjectRelease();
            if (v77)
            {
              uint64_t result = swift_unknownObjectRelease_n();
              uint64_t v35 = v116;
              unint64_t v12 = v117;
              uint64_t v13 = v118;
              goto LABEL_162;
            }
          }
          else
          {
            uint64_t v78 = v76 + 1;
            if (v76 + 1 < (unint64_t)*(unsigned __int16 *)(v68 + 16))
            {
              uint64_t result = swift_unknownObjectRelease_n();
              unint64_t v12 = (v78 << v75) | ((-15 << v75) - 1) & v12;
              uint64_t v13 = v68;
              goto LABEL_162;
            }
          }
          if (v68)
          {
            int v79 = *(unsigned __int8 *)(v68 + 18);
            uint64_t v80 = *(unsigned __int16 *)(v68 + 16);
            uint64_t result = swift_unknownObjectRelease_n();
            unint64_t v12 = ((-15 << ((4 * v79 + 8) & 0x3C)) - 1) & v79 | (unint64_t)(v80 << ((4 * v79 + 8) & 0x3C));
          }
          else
          {
            unint64_t v12 = 0;
          }
          uint64_t v13 = 0;
          uint64_t v116 = v114;
LABEL_162:
          if (v34 < v8)
          {
            swift_release();
LABEL_68:
            uint64_t v10 = a5;
            uint64_t result = a3;
            goto LABEL_69;
          }
          uint64_t v81 = a4[8];
          if (a5 != v8)
          {
            uint64_t v35 = a4[11];
            if (v81)
            {
              uint64_t v15 = a4[9];
              uint64_t v34 = a4[10];
              int v95 = *(unsigned __int8 *)(v81 + 18);
              uint64_t v96 = *(unsigned __int16 *)(v81 + 16);
              swift_release();
              uint64_t v13 = 0;
              unint64_t v12 = ((-15 << ((4 * v95 + 8) & 0x3C)) - 1) & v95 | (unint64_t)(v96 << ((4 * v95 + 8) & 0x3C));
            }
            else
            {
              swift_release();
              unint64_t v12 = 0;
              uint64_t v13 = 0;
              uint64_t v15 = 0;
              uint64_t v34 = 0;
            }
            goto LABEL_68;
          }
          uint64_t v35 = a4[11];
          if (v81)
          {
            uint64_t v82 = a4[10];
            if (v82 < a5) {
              goto LABEL_269;
            }
            uint64_t v83 = a4[9];
            uint64_t v84 = *(unsigned __int8 *)(v81 + 18);
            if (*(_WORD *)(v81 + 16) && v82 > a5)
            {
              if (*(unsigned char *)(v81 + 18))
              {
                uint64_t result = swift_unknownObjectRetain_n();
                uint64_t v85 = a5;
                uint64_t v86 = v81;
                while (1)
                {
                  uint64_t v88 = *(unsigned __int16 *)(v86 + 16);
                  if (!*(_WORD *)(v86 + 16)) {
                    goto LABEL_171;
                  }
                  uint64_t v89 = *(void *)(v86 + 40);
                  uint64_t v90 = v85 - v89;
                  if (__OFSUB__(v85, v89)) {
                    goto LABEL_252;
                  }
                  if (__OFADD__(v90, 1)) {
                    goto LABEL_253;
                  }
                  if (v90 + 1 <= 0)
                  {
                    uint64_t v88 = 0;
                  }
                  else
                  {
                    if (v88 == 1)
                    {
                      v85 -= v89;
LABEL_171:
                      if (v85) {
                        goto LABEL_251;
                      }
                      goto LABEL_172;
                    }
                    uint64_t v91 = *(void *)(v86 + 64);
                    BOOL v23 = __OFSUB__(v90, v91);
                    uint64_t v92 = v90 - v91;
                    if (v23) {
                      goto LABEL_262;
                    }
                    if (__OFADD__(v92, 1)) {
                      goto LABEL_263;
                    }
                    if (v92 + 1 >= 1)
                    {
                      if (v88 != 2)
                      {
                        long long v93 = (void *)(v86 + 88);
                        uint64_t v94 = 2;
                        while (v88 != v94)
                        {
                          uint64_t v85 = v92 - *v93;
                          if (__OFSUB__(v92, *v93)) {
                            goto LABEL_238;
                          }
                          if (__OFADD__(v85, 1)) {
                            goto LABEL_239;
                          }
                          if (v85 + 1 < 1)
                          {
                            uint64_t v88 = v94;
                            uint64_t v85 = v92;
                            goto LABEL_172;
                          }
                          ++v94;
                          v93 += 3;
                          uint64_t v92 = v85;
                          if (v88 == v94) {
                            goto LABEL_171;
                          }
                        }
LABEL_237:
                        __break(1u);
LABEL_238:
                        __break(1u);
LABEL_239:
                        __break(1u);
LABEL_240:
                        __break(1u);
                        goto LABEL_241;
                      }
                      uint64_t v85 = v92;
                      goto LABEL_171;
                    }
                    uint64_t v88 = 1;
                    uint64_t v85 = v90;
                  }
LABEL_172:
                  char v87 = (4 * *(unsigned char *)(v86 + 18) + 8) & 0x3C;
                  uint64_t v84 = ((-15 << v87) - 1) & v84 | (v88 << v87);
                  uint64_t v13 = *(void *)(v86 + 24 + 24 * v88);
                  swift_unknownObjectRetain();
                  uint64_t result = swift_unknownObjectRelease();
                  uint64_t v86 = v13;
                  if (!*(unsigned char *)(v13 + 18)) {
                    goto LABEL_200;
                  }
                }
              }
              uint64_t result = swift_unknownObjectRetain_n();
              uint64_t v84 = 0;
              uint64_t v85 = a5;
              uint64_t v13 = v81;
LABEL_200:
              uint64_t v114 = v83;
              uint64_t v97 = *(unsigned __int16 *)(v13 + 16);
              if (*(_WORD *)(v13 + 16))
              {
                uint64_t v98 = *(void *)(v13 + 24);
                BOOL v23 = __OFSUB__(v85, v98);
                uint64_t v99 = v85 - v98;
                if (v23) {
                  goto LABEL_282;
                }
                if (__OFADD__(v99, 1)) {
                  goto LABEL_283;
                }
                if (v99 + 1 <= 0)
                {
                  uint64_t v97 = 0;
                  goto LABEL_223;
                }
                if (v97 != 1)
                {
                  uint64_t v100 = *(void *)(v13 + 48);
                  uint64_t v85 = v99 - v100;
                  if (__OFSUB__(v99, v100)) {
                    goto LABEL_287;
                  }
                  if (__OFADD__(v85, 1)) {
                    goto LABEL_288;
                  }
                  if (v85 + 1 >= 1)
                  {
                    if (v97 != 2)
                    {
                      uint64_t v101 = (void *)(v13 + 72);
                      uint64_t v102 = 2;
                      while (v97 != v102)
                      {
                        uint64_t v99 = v85 - *v101;
                        if (__OFSUB__(v85, *v101)) {
                          goto LABEL_276;
                        }
                        if (__OFADD__(v99, 1)) {
                          goto LABEL_277;
                        }
                        if (v99 + 1 < 1)
                        {
                          uint64_t v97 = v102;
                          goto LABEL_223;
                        }
                        ++v102;
                        v101 += 3;
                        uint64_t v85 = v99;
                        if (v97 == v102) {
                          goto LABEL_210;
                        }
                      }
LABEL_275:
                      __break(1u);
LABEL_276:
                      __break(1u);
LABEL_277:
                      __break(1u);
LABEL_278:
                      __break(1u);
                      goto LABEL_279;
                    }
                    goto LABEL_209;
                  }
                  uint64_t v97 = 1;
                  uint64_t v85 = v99;
LABEL_223:
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  unint64_t v12 = v84 & 0xFFFFFFFFFFFFF0FFLL | (v97 << 8);
                  uint64_t v83 = v114;
LABEL_224:
                  swift_unknownObjectRetain();
                  uint64_t v15 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v35, v12, v13, v81, v83);
                  swift_release();
                  swift_unknownObjectRelease_n();
                  uint64_t v10 = a5;
                  goto LABEL_225;
                }
              }
              else
              {
LABEL_209:
                uint64_t v99 = v85;
              }
LABEL_210:
              if (v99) {
                goto LABEL_281;
              }
              uint64_t v85 = 0;
              goto LABEL_223;
            }
            unint64_t v12 = ((-15 << ((4 * v84 + 8) & 0x3C)) - 1) & v84 | ((unint64_t)*(unsigned __int16 *)(v81 + 16) << ((4 * v84 + 8) & 0x3C));
            swift_unknownObjectRetain();
            uint64_t v85 = 0;
            uint64_t v13 = 0;
            goto LABEL_224;
          }
          uint64_t v10 = a5;
          if (a5 > 0) {
            goto LABEL_273;
          }
          swift_release();
          uint64_t v85 = 0;
          uint64_t v13 = 0;
          unint64_t v12 = 0;
          uint64_t v15 = 0;
LABEL_225:
          uint64_t v34 = v10 - v85;
          uint64_t result = a3;
          if (__OFSUB__(v10, v85))
          {
            __break(1u);
LABEL_228:
            uint64_t result = 0;
            uint64_t v35 = v114;
            goto LABEL_230;
          }
LABEL_69:
          *a2 = v107;
          a2[1] = v109;
          a2[2] = v110;
          ++v111;
          a2 += 3;
          if (v111 == result) {
            goto LABEL_230;
          }
        }
        if (!*(unsigned char *)(v16 + 18)) {
          break;
        }
        uint64_t result = swift_unknownObjectRetain_n();
        uint64_t v40 = v10;
        unint64_t v6 = v16;
LABEL_89:
        uint64_t v31 = *(unsigned __int16 *)(v6 + 16);
        if (!*(_WORD *)(v6 + 16)) {
          goto LABEL_87;
        }
        uint64_t v43 = *(void *)(v6 + 40);
        BOOL v23 = __OFSUB__(v40, v43);
        uint64_t v33 = v40 - v43;
        if (v23) {
          goto LABEL_235;
        }
        if (__OFADD__(v33, 1)) {
          goto LABEL_236;
        }
        if (v33 + 1 < 1)
        {
          uint64_t v31 = 0;
          goto LABEL_88;
        }
        if (v31 == 1)
        {
          uint64_t v40 = v33;
LABEL_87:
          if (!v40) {
            goto LABEL_88;
          }
          __break(1u);
LABEL_235:
          __break(1u);
LABEL_236:
          __break(1u);
          goto LABEL_237;
        }
        uint64_t v44 = (uint64_t *)(v6 + 64);
        uint64_t v45 = 1;
        while (1)
        {
          uint64_t v46 = *v44;
          v44 += 3;
          uint64_t v40 = v33 - v46;
          if (__OFSUB__(v33, v46)) {
            break;
          }
          if (__OFADD__(v40, 1)) {
            goto LABEL_232;
          }
          if (v40 + 1 < 1)
          {
            uint64_t v31 = v45;
            uint64_t v40 = v33;
LABEL_88:
            char v42 = (4 * *(unsigned char *)(v6 + 18) + 8) & 0x3C;
            uint64_t v37 = ((-15 << v42) - 1) & v37 | (v31 << v42);
            uint64_t v10 = *(void *)(v6 + 24 + 24 * v31);
            swift_unknownObjectRetain();
            uint64_t result = swift_unknownObjectRelease();
            unint64_t v6 = v10;
            if (!*(unsigned char *)(v10 + 18)) {
              goto LABEL_103;
            }
            goto LABEL_89;
          }
          ++v45;
          uint64_t v33 = v40;
          if (v31 == v45) {
            goto LABEL_87;
          }
        }
        __break(1u);
LABEL_232:
        __break(1u);
LABEL_233:
        uint64_t v27 = v33;
        uint64_t v14 = v31;
      }
      uint64_t result = swift_unknownObjectRetain_n();
      uint64_t v37 = 0;
      uint64_t v40 = v10;
      uint64_t v10 = v16;
LABEL_103:
      uint64_t v47 = *(unsigned __int16 *)(v10 + 16);
      if (!*(_WORD *)(v10 + 16)) {
        goto LABEL_115;
      }
      uint64_t v48 = *(void *)(v10 + 24);
      BOOL v23 = __OFSUB__(v40, v48);
      uint64_t v49 = v40 - v48;
      if (v23) {
        goto LABEL_271;
      }
      if (__OFADD__(v49, 1)) {
        goto LABEL_272;
      }
      if (v49 + 1 < 1)
      {
        uint64_t v47 = 0;
      }
      else
      {
        if (v47 == 1)
        {
          uint64_t v40 = v49;
LABEL_115:
          if (v40) {
            goto LABEL_270;
          }
          goto LABEL_116;
        }
        int64x2_t v50 = (uint64_t *)(v10 + 48);
        uint64_t v51 = 1;
        while (1)
        {
          uint64_t v52 = *v50;
          v50 += 3;
          uint64_t v40 = v49 - v52;
          if (__OFSUB__(v49, v52)) {
            goto LABEL_258;
          }
          if (__OFADD__(v40, 1)) {
            goto LABEL_259;
          }
          if (v40 + 1 < 1) {
            break;
          }
          ++v51;
          uint64_t v49 = v40;
          if (v47 == v51) {
            goto LABEL_115;
          }
        }
        uint64_t v47 = v51;
        uint64_t v40 = v49;
      }
LABEL_116:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v39 = v37 & 0xFFFFFFFFFFFFF0FFLL | (v47 << 8);
      goto LABEL_117;
    }
    goto LABEL_284;
  }
LABEL_290:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = result;
  long long v9 = *(_OWORD **)v3;
  uint64_t v10 = *(void *)(v3 + 8);
  uint64_t v11 = *(void *)(v3 + 16);
  uint64_t v12 = *(void *)(v3 + 24);
  uint64_t v13 = *(void *)(v3 + 32);
  uint64_t v38 = *(void *)(v3 + 40);
  uint64_t v15 = *(void *)(v3 + 48);
  uint64_t v14 = *(void *)(v3 + 56);
  long long v16 = *(_OWORD *)(v3 + 64);
  uint64_t v32 = a2;
  if (!a2)
  {
    a3 = 0;
    goto LABEL_7;
  }
  if (!a3)
  {
LABEL_7:
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t v5 = *(void *)(v3 + 16);
    uint64_t v18 = *(void *)(v3 + 24);
    uint64_t v19 = *(void *)(v3 + 32);
    goto LABEL_21;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v31 = *(_OWORD **)v3;
    long long v30 = *(_OWORD *)(v3 + 64);
    uint64_t v17 = *(void *)(v3 + 16);
    uint64_t v18 = v12;
    uint64_t v19 = v13;
    if (static BigString.Index.== infix(_:_:)())
    {
      a3 = 0;
      uint64_t v4 = v10;
      uint64_t v5 = v17;
      uint64_t v12 = v18;
      uint64_t v13 = v19;
      long long v16 = v30;
      uint64_t v11 = v17;
      long long v9 = v31;
LABEL_21:
      *(void *)uint64_t v8 = v9;
      *(void *)(v8 + 8) = v10;
      *(void *)(v8 + 16) = v11;
      *(void *)(v8 + 24) = v12;
      *(void *)(v8 + 32) = v13;
      *(void *)(v8 + 40) = v38;
      *(void *)(v8 + 48) = v15;
      *(void *)(v8 + 56) = v14;
      *(_OWORD *)(v8 + 64) = v16;
      *(void *)(v8 + 80) = v4;
      *(void *)(v8 + 88) = v5;
      *(void *)(v8 + 96) = v18;
      *(void *)(v8 + 104) = v19;
      return a3;
    }
    uint64_t v28 = v8;
    uint64_t v29 = a3;
    uint64_t v36 = v17;
    uint64_t v34 = v19;
    uint64_t v35 = v18;
    if (static BigString.Index.< infix(_:_:)())
    {
LABEL_17:
      __break(1u);
LABEL_18:
      a3 = v29;
LABEL_20:
      uint64_t v8 = v28;
      long long v9 = v31;
      long long v16 = v30;
      uint64_t v11 = v36;
      uint64_t v13 = v34;
      uint64_t v12 = v35;
      goto LABEL_21;
    }
    uint64_t v20 = 0;
    uint64_t v33 = v31 + 1;
    while (1)
    {
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if ((result & 1) == 0) {
        break;
      }
      long long v21 = v31[2];
      long long v44 = *v33;
      long long v45 = v21;
      long long v46 = v31[3];
      BigString.unicodeScalars.getter();
      int v22 = BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v39);
      outlined retain of AttributedString.Runs(v37);
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        goto LABEL_23;
      }
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        goto LABEL_24;
      }
      long long v23 = v31[2];
      long long v41 = *v33;
      long long v42 = v23;
      long long v43 = v31[3];
      BigString.unicodeScalars.getter();
      uint64_t v4 = BigString.UnicodeScalarView.index(after:)();
      uint64_t v5 = v24;
      uint64_t v18 = v25;
      uint64_t v19 = v26;
      outlined release of Locale((uint64_t)v40);
      char v27 = static BigString.Index.< infix(_:_:)();
      uint64_t result = outlined release of AttributedString.Runs(v37);
      if (v27) {
        goto LABEL_25;
      }
      *(_DWORD *)(v32 + 4 * v20) = v22;
      if (v29 - 1 == v20) {
        goto LABEL_18;
      }
      if (static BigString.Index.== infix(_:_:)())
      {
        a3 = v20 + 1;
        goto LABEL_20;
      }
      ++v20;
      if (static BigString.Index.< infix(_:_:)()) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7 = a6;
  uint64_t v8 = a4;
  long long v9 = a2;
  if (a4) {
    unint64_t v10 = *(unsigned __int8 *)(a4 + 18);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v47 = a4;
  uint64_t v48 = a5;
  uint64_t v49 = a6;
  v50.i64[0] = a7;
  v50.i64[1] = a7;
  long long v51 = v10;
  long long v52 = 0uLL;
  if (!a2)
  {
    a3 = 0;
    *uint64_t result = a4;
    result[1] = a5;
    result[2] = a6;
    result[3] = a7;
    result[4] = a7;
    result[5] = v10;
    result[7] = 0;
    result[8] = 0;
    result[6] = 0;
    return (void *)a3;
  }
  if (!a3)
  {
    int64x2_t v34 = vdupq_n_s64(a7);
    long long v35 = 0uLL;
    long long v36 = v10;
LABEL_35:
    *uint64_t result = v8;
    result[1] = a5;
    result[2] = v7;
    *(int64x2_t *)(result + 3) = v34;
    *(_OWORD *)(result + 5) = v36;
    *(_OWORD *)(result + 7) = v35;
    return (void *)a3;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v38 = result;
  uint64_t v39 = a5;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v40 = a4 + 24;
  uint64_t v43 = a3;
  unint64_t v41 = a7;
  while (1)
  {
    uint64_t v13 = v50.i64[1];
    long long v14 = v51;
    if (v8)
    {
      if (v12 == v7)
      {
        uint64_t v37 = v7;
LABEL_37:
        *uint64_t v38 = v8;
        v38[1] = v39;
        v38[2] = v7;
        v38[3] = a7;
        v38[4] = v13;
        *(_OWORD *)(v38 + 5) = v14;
        v38[7] = v11;
        a3 = v11;
        v38[8] = v37;
        return (void *)a3;
      }
    }
    else if (!v12)
    {
      uint64_t v37 = 0;
      goto LABEL_37;
    }
    if (v50.i64[1] != a7) {
      break;
    }
    ++v11;
    if (*((void *)&v51 + 1))
    {
      uint64_t v15 = (void *)(*((void *)&v51 + 1)
                     + 24
                     * (((unint64_t)v51 >> ((4 * *(unsigned char *)(*((void *)&v51 + 1) + 18) + 8) & 0x3C)) & 0xF));
      unint64_t v17 = v15[3];
      unint64_t v16 = v15[4];
      unint64_t v18 = v15[5];
      *(void *)&long long v52 = v11;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      unint64_t v19 = v17;
      unint64_t v44 = v18;
      unint64_t v45 = v16;
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v19 = specialized Rope._Node.subscript.getter(v14, v8);
      unint64_t v44 = v21;
      unint64_t v45 = v20;
      swift_unknownObjectRelease();
      *(void *)&long long v52 = v11;
      swift_unknownObjectRetain();
      unint64_t v17 = specialized Rope._Node.subscript.getter(v14, v8);
    }
    swift_bridgeObjectRelease();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    BOOL v22 = __OFADD__(v12, v17);
    v12 += v17;
    if (v22) {
      goto LABEL_40;
    }
    *((void *)&v52 + 1) = v12;
    if (!v8) {
      goto LABEL_42;
    }
    unint64_t v23 = ((-15 << ((4 * *(unsigned char *)(v8 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v8 + 18) | ((unint64_t)*(unsigned __int16 *)(v8 + 16) << ((4 * *(unsigned char *)(v8 + 18) + 8) & 0x3C));
    uint64_t result = (void *)swift_unknownObjectRetain();
    if ((unint64_t)v14 >= v23) {
      goto LABEL_42;
    }
    if (*((void *)&v14 + 1))
    {
      char v24 = (4 * *(unsigned char *)(*((void *)&v14 + 1) + 18) + 8) & 0x3C;
      unint64_t v25 = (((unint64_t)v14 >> v24) & 0xF) + 1;
      if (v25 < *(unsigned __int16 *)(*((void *)&v14 + 1) + 16))
      {
        *(void *)&long long v51 = (v25 << v24) | ((-15 << v24) - 1) & v14;
LABEL_9:
        uint64_t result = (void *)swift_unknownObjectRelease_n();
        goto LABEL_10;
      }
    }
    int v26 = *(unsigned __int8 *)(v8 + 18);
    char v27 = (4 * v26 + 8) & 0x3C;
    unint64_t v46 = ((unint64_t)v14 >> v27) & 0xF;
    if (v26)
    {
      swift_unknownObjectRetain();
      char v28 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v40, (uint64_t *)&v46, (uint64_t)&v50.i64[1], v8, v26);
      swift_unknownObjectRelease();
      if ((v28 & 1) == 0)
      {
        int v29 = *(unsigned __int8 *)(v8 + 18);
LABEL_31:
        uint64_t v31 = *(unsigned __int16 *)(v8 + 16);
        char v32 = *(unsigned char *)(v8 + 18);
        uint64_t result = (void *)swift_unknownObjectRelease_n();
        unint64_t v33 = ((-15 << ((4 * v32 + 8) & 0x3C)) - 1) & v29 | (unint64_t)(v31 << ((4 * v32 + 8) & 0x3C));
        a7 = v41;
        uint64_t v7 = a6;
        v50.i64[1] = v41;
        long long v51 = v33;
        a3 = v43;
        goto LABEL_11;
      }
      goto LABEL_9;
    }
    unint64_t v30 = (((unint64_t)v14 >> v27) & 0xF) + 1;
    if (v30 >= *(unsigned __int16 *)(v8 + 16))
    {
      int v29 = 0;
      goto LABEL_31;
    }
    *(void *)&long long v51 = (v30 << v27) | ((-15 << v27) - 1) & v14;
    uint64_t result = (void *)swift_unknownObjectRelease_n();
    *((void *)&v51 + 1) = v8;
LABEL_10:
    uint64_t v7 = a6;
    a3 = v43;
    a7 = v41;
LABEL_11:
    *long long v9 = v19;
    v9[1] = v45;
    v9[2] = v44;
    v9 += 3;
    if (a3 == v11)
    {
      uint64_t v8 = v47;
      a5 = v48;
      uint64_t v7 = v49;
      int64x2_t v34 = v50;
      long long v36 = v51;
      long long v35 = v52;
      uint64_t result = v38;
      goto LABEL_35;
    }
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v7 = result;
  uint64_t v8 = *(_OWORD **)v3;
  uint64_t v9 = *(void *)(v3 + 8);
  uint64_t v11 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  uint64_t v12 = *(void *)(v3 + 32);
  uint64_t v43 = *(void *)(v3 + 40);
  uint64_t v13 = *(void *)(v3 + 48);
  unint64_t v45 = a2;
  uint64_t v46 = *(void *)(v3 + 56);
  long long v14 = *(_OWORD *)(v3 + 64);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_7;
  }
  if (!a3)
  {
LABEL_7:
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t v5 = *(void *)(v3 + 16);
    uint64_t v15 = *(void *)(v3 + 24);
    uint64_t v17 = *(void *)(v3 + 32);
    goto LABEL_21;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    long long v35 = *(_OWORD **)v3;
    long long v34 = *(_OWORD *)(v3 + 64);
    uint64_t v15 = *(void *)(v3 + 64);
    uint64_t v16 = *(void *)(v3 + 24);
    uint64_t v17 = v12;
    if (static BigString.Index.== infix(_:_:)())
    {
      a3 = 0;
      uint64_t v4 = v9;
      uint64_t v5 = v11;
      uint64_t v15 = v16;
      uint64_t v12 = v17;
      long long v14 = v34;
      uint64_t v10 = v16;
      uint64_t v8 = v35;
LABEL_21:
      *(void *)uint64_t v7 = v8;
      *(void *)(v7 + 8) = v9;
      *(void *)(v7 + 16) = v11;
      *(void *)(v7 + 24) = v10;
      *(void *)(v7 + 32) = v12;
      *(void *)(v7 + 40) = v43;
      *(void *)(v7 + 48) = v13;
      *(void *)(v7 + 56) = v46;
      *(_OWORD *)(v7 + 64) = v14;
      *(void *)(v7 + 80) = v4;
      *(void *)(v7 + 88) = v5;
      *(void *)(v7 + 96) = v15;
      *(void *)(v7 + 104) = v17;
      return a3;
    }
    uint64_t v33 = v7;
    uint64_t v40 = v17;
    uint64_t v41 = v16;
    if (static BigString.Index.< infix(_:_:)())
    {
LABEL_17:
      __break(1u);
LABEL_18:
      uint64_t v7 = v33;
      uint64_t v8 = v35;
      uint64_t v9 = v36;
LABEL_20:
      long long v14 = v34;
      uint64_t v11 = v37;
      uint64_t v12 = v40;
      uint64_t v10 = v41;
      goto LABEL_21;
    }
    unint64_t v18 = v35 + 1;
    uint64_t v44 = 1;
    uint64_t v37 = v11;
    uint64_t v38 = a3;
    uint64_t v36 = v9;
    while (1)
    {
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if ((result & 1) == 0) {
        break;
      }
      long long v19 = *v18;
      long long v20 = v35[3];
      v48[1] = v35[2];
      v48[2] = v20;
      v48[0] = v19;
      long long v21 = *v18;
      v49[1] = v35[2];
      v49[2] = v20;
      v49[0] = v21;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v49, (uint64_t)v50);
      outlined retain of Locale((uint64_t)v50);
      uint64_t v22 = BigString.subscript.getter();
      uint64_t v24 = v23;
      outlined release of Locale((uint64_t)v48);
      outlined retain of AttributedString.Runs(v42);
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        goto LABEL_23;
      }
      uint64_t v39 = v24;
      uint64_t v25 = v22;
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        goto LABEL_24;
      }
      long long v26 = *v18;
      long long v27 = v35[3];
      v47[1] = v35[2];
      v47[2] = v27;
      v47[0] = v26;
      long long v28 = *v18;
      v51[1] = v35[2];
      void v51[2] = v27;
      v51[0] = v28;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v51, (uint64_t)v52);
      outlined retain of Locale((uint64_t)v52);
      uint64_t v4 = BigString.index(after:)();
      uint64_t v5 = v29;
      uint64_t v15 = v30;
      uint64_t v17 = v31;
      outlined release of Locale((uint64_t)v47);
      char v32 = static BigString.Index.< infix(_:_:)();
      uint64_t result = outlined release of AttributedString.Runs(v42);
      if (v32) {
        goto LABEL_25;
      }
      a3 = v38;
      *unint64_t v45 = v25;
      v45[1] = v39;
      if (v38 == v44) {
        goto LABEL_18;
      }
      uint64_t v9 = v36;
      if (static BigString.Index.== infix(_:_:)())
      {
        a3 = v44;
        uint64_t v7 = v33;
        uint64_t v8 = v35;
        goto LABEL_20;
      }
      ++v44;
      v45 += 2;
      if (static BigString.Index.< infix(_:_:)()) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = BigString.Index.init(_utf8Offset:)();
  uint64_t v13 = result;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  if (!a2)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_15;
  }
  if (!a3)
  {
LABEL_15:
    *a1 = a4;
    a1[1] = a5;
    a1[2] = a6;
    a1[3] = a7;
    a1[4] = v13;
    a1[5] = v15;
    a1[6] = v17;
    a1[7] = v19;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    BigString.Index.init(_utf8Offset:)();
    uint64_t v20 = v13;
    if ((static BigString.Index.== infix(_:_:)() & 1) == 0)
    {
      long long v27 = a1;
      uint64_t v28 = a3;
      swift_bridgeObjectRetain();
      if (BigString.Index.utf8Offset.getter() < 0)
      {
LABEL_11:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      else
      {
        uint64_t v21 = 1;
        while (1)
        {
          uint64_t v32 = v17;
          uint64_t v33 = v19;
          uint64_t v22 = v15;
          uint64_t v23 = v20;
          Substring.index(after:)();
          uint64_t v20 = BigString.Index.init(_utf8Offset:)();
          uint64_t v15 = v24;
          uint64_t v17 = v25;
          uint64_t v19 = v26;
          uint64_t v7 = a7;
          swift_bridgeObjectRelease();
          *a2 = v23;
          a2[1] = v22;
          a2[2] = v32;
          a2[3] = v33;
          a3 = v28;
          if (v28 == v21) {
            break;
          }
          BigString.Index.init(_utf8Offset:)();
          if (static BigString.Index.== infix(_:_:)())
          {
            uint64_t v13 = v20;
            a3 = v21;
            goto LABEL_14;
          }
          ++v21;
          swift_bridgeObjectRetain();
          a2 += 4;
          if (BigString.Index.utf8Offset.getter() < 0) {
            goto LABEL_11;
          }
        }
      }
      uint64_t v13 = v20;
LABEL_14:
      a7 = v7;
      a1 = v27;
      goto LABEL_15;
    }
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t)v3;
  uint64_t v7 = *v3;
  uint64_t v8 = v3[1];
  uint64_t v9 = v3[2];
  uint64_t v10 = v3[3];
  uint64_t v11 = v3[4];
  uint64_t v32 = v3[11];
  uint64_t v33 = v3[10];
  uint64_t v30 = v3[13];
  uint64_t v31 = v3[12];
  uint64_t v26 = v3[6];
  uint64_t v27 = v3[5];
  uint64_t v24 = v3[8];
  uint64_t v25 = v3[7];
  uint64_t v23 = v3[9];
  uint64_t v12 = BigString.Index.utf8Offset.getter();
  if (v12 < 0) {
    goto LABEL_20;
  }
  uint64_t v13 = v12;
  uint64_t v14 = (v12 << 16) | 4;
  uint64_t v29 = v7;
  uint64_t v28 = v11;
  if (!a2)
  {
LABEL_7:
    uint64_t v16 = 0;
LABEL_17:
    *a1 = v29;
    a1[1] = v8;
    a1[2] = v9;
    a1[3] = v10;
    a1[4] = v28;
    a1[5] = v27;
    a1[6] = v26;
    a1[7] = v25;
    a1[8] = v24;
    a1[9] = v23;
    a1[10] = v33;
    a1[11] = v32;
    a1[12] = v31;
    a1[13] = v30;
    a1[14] = v14;
    return v16;
  }
  if (!a3)
  {
    uint64_t v16 = 0;
    goto LABEL_17;
  }
  if (a3 < 0) {
    goto LABEL_19;
  }
  uint64_t v15 = BigString.Index.utf8Offset.getter();
  if ((v15 & 0x8000000000000000) == 0)
  {
    if (4 * (v15 & 0xFFFFFFFFFFFFLL) == ((4 * v13) & 0x3FFFFFFFFFFFFLL)) {
      goto LABEL_7;
    }
    uint64_t v16 = 0;
    uint64_t v17 = v14;
    while (1)
    {
      outlined retain of Locale(v4);
      BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
      BigString.endIndex.getter();
      if (static BigString.Index.< infix(_:_:)()) {
        break;
      }
      BigString.index(after:)();
      uint64_t v18 = BigString.Index.utf8Offset.getter();
      if (v18 < 0) {
        goto LABEL_20;
      }
      uint64_t v19 = v18;
      outlined release of Locale(v4);
      uint64_t v14 = (v19 << 16) | 4;
      *(void *)(a2 + 8 * v16) = v17;
      if (a3 - 1 == v16)
      {
        uint64_t v16 = a3;
        goto LABEL_17;
      }
      uint64_t v20 = BigString.Index.utf8Offset.getter();
      if (v20 < 0) {
        goto LABEL_20;
      }
      ++v16;
      uint64_t v17 = (v19 << 16) | 4;
      if (4 * (v20 & 0xFFFFFFFFFFFFLL) == ((4 * v19) & 0x3FFFFFFFFFFFFLL)) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
  }
LABEL_20:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t *a1, uint64_t a2, uint64_t a3, const char *a4, int a5)
{
  v24[2] = *(char **)MEMORY[0x1E4F143B8];
  type metadata accessor for _FTSSequence.Iterator();
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 56) = 0;
  uint64_t v11 = MEMORY[0x1E4FBC860];
  *(void *)(v10 + 64) = MEMORY[0x1E4FBC860];
  *(void *)(v10 + 72) = v11;
  *(unsigned char *)(v10 + 80) = 0;
  *(void *)(v10 + 48) = a4;
  memset(&v23, 0, 28);
  memset(&v23.st_atimespec, 0, 112);
  if (lstat(a4, &v23) || (v24[0] = (char *)a4, v24[1] = 0, (uint64_t v16 = fts_open(v24, a5, 0)) == 0))
  {
    unsigned int v12 = MEMORY[0x185301870]();
    uint64_t v14 = String.init(cString:)();
    char v15 = 1;
    uint64_t v16 = (FTS *)v12;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v13 = 0;
    char v15 = 0;
  }
  uint64_t v17 = 0;
  *(void *)(v10 + 16) = v16;
  *(void *)(v10 + 24) = v14;
  *(void *)(v10 + 32) = v13;
  *(unsigned char *)(v10 + 40) = v15;
  if (a2 && a3)
  {
    if (a3 < 0) {
      __break(1u);
    }
    uint64_t v18 = _FTSSequence.Iterator.next()();
    if (v21 == -1)
    {
      uint64_t v17 = 0;
    }
    else
    {
      uint64_t v17 = 0;
      while (1)
      {
        *(void *)a2 = v18;
        *(void *)(a2 + 8) = v19;
        *(void *)(a2 + 16) = v20;
        *(unsigned char *)(a2 + 24) = v21 & 1;
        if (a3 - 1 == v17) {
          break;
        }
        a2 += 32;
        uint64_t v18 = _FTSSequence.Iterator.next()();
        ++v17;
        if (v21 == -1) {
          goto LABEL_15;
        }
      }
      uint64_t v17 = a3;
    }
  }
LABEL_15:
  *a1 = v10;
  return v17;
}

uint64_t String.UnicodeScalarView.distance(from:to:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = _StringGuts.validateInclusiveScalarIndex(_:)(a1, a3, a4);
  unint64_t v8 = _StringGuts.validateInclusiveScalarIndex(_:)(a2, a3, a4) >> 14;
  if (v7 >> 14 < v8)
  {
    for (uint64_t i = 0; ; ++i)
    {
      uint64_t v10 = i + 1;
      if (__OFADD__(i, 1)) {
        break;
      }
      if ((a4 & 0x1000000000000000) != 0)
      {
        unint64_t v7 = String.UnicodeScalarView._foreignIndex(after:)();
      }
      else
      {
        unint64_t v11 = v7 >> 16;
        if ((a4 & 0x2000000000000000) != 0)
        {
          unint64_t v24 = a3;
          uint64_t v25 = a4 & 0xFFFFFFFFFFFFFFLL;
          int v13 = *((unsigned __int8 *)&v24 + v11);
        }
        else
        {
          uint64_t v12 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0) {
            uint64_t v12 = _StringObject.sharedUTF8.getter();
          }
          int v13 = *(unsigned __int8 *)(v12 + v11);
        }
        int v14 = (char)v13;
        unsigned int v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0) {
          LOBYTE(v15) = 1;
        }
        unint64_t v7 = ((v11 + v15) << 16) | 5;
      }
      if (v8 <= v7 >> 14) {
        return v10;
      }
    }
    __break(1u);
    goto LABEL_36;
  }
  if (v8 < v7 >> 14)
  {
    uint64_t v10 = 0;
    while (!__OFSUB__(v10--, 1))
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        unint64_t v7 = String.UnicodeScalarView._foreignIndex(before:)();
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          unint64_t v24 = a3;
          uint64_t v25 = a4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((unsigned char *)&v24 + (v7 >> 16) - 1) & 0xC0) == 0x80)
          {
            uint64_t v21 = 0;
            do
              int v22 = *((unsigned char *)&v24 + (v7 >> 16) + v21-- - 2) & 0xC0;
            while (v22 == 128);
            uint64_t v20 = 1 - v21;
          }
          else
          {
            uint64_t v20 = 1;
          }
        }
        else
        {
          uint64_t v17 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0) {
            uint64_t v17 = _StringObject.sharedUTF8.getter();
          }
          uint64_t v18 = 0;
          do
            int v19 = *(unsigned char *)(v17 + (v7 >> 16) - 1 + v18--) & 0xC0;
          while (v19 == 128);
          uint64_t v20 = -v18;
        }
        unint64_t v7 = (v7 - (v20 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v8 >= v7 >> 14) {
        return v10;
      }
    }
LABEL_36:
    __break(1u);
    JUMPOUT(0x181F7A9C4);
  }
  return 0;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, unsigned char *a2, uint64_t a3, unsigned int a4)
{
  if (!a2)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
LABEL_24:
    *(_DWORD *)uint64_t result = a4;
    *(void *)(result + 8) = v11;
    return v12;
  }
  if (!a3)
  {
    uint64_t v11 = 0;
LABEL_23:
    uint64_t v12 = a3;
    goto LABEL_24;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    int v4 = (a4 & 0x3F) << 8;
    int v5 = (v4 | (a4 >> 6)) + 33217;
    int v6 = (v4 | (a4 >> 6) & 0x3F) << 8;
    unsigned int v7 = (v6 | (a4 >> 12)) + 8487393;
    unsigned int v8 = (((v6 & 0xFFFFFFC0 | (a4 >> 12) & 0x3F) << 8) | (a4 >> 18)) - 2122219023;
    if (a4 < 0x80) {
      unsigned int v9 = a4 + 1;
    }
    else {
      unsigned int v9 = v5;
    }
    if (HIWORD(a4)) {
      unsigned int v7 = v8;
    }
    if (a4 >= 0x800) {
      unsigned int v10 = v7;
    }
    else {
      unsigned int v10 = v9;
    }
    *a2 = (v10 - 1) & ~(-1 << (32 - (__clz(v10) & 0x18)));
    uint64_t v11 = 1;
    uint64_t v12 = 1;
    if (a3 == 1 || a4 < 0x80) {
      goto LABEL_24;
    }
    unsigned int v13 = a4 >= 0x800 ? v7 : v5;
    a2[1] = (unsigned __int16)((v13 - 257) & ~(unsigned __int16)(-1 << (32 - (__clz(v13) & 0x18)))) >> 8;
    uint64_t v11 = 2;
    uint64_t v12 = 2;
    if (a3 == 2 || a4 < 0x800) {
      goto LABEL_24;
    }
    uint64_t v14 = ~(-1 << (32 - (__clz(v7) & 0x18)));
    a2[2] = ((v7 + 16711423) & v14) >> 16;
    if (a3 != 3)
    {
      if (a4 < 0x10000)
      {
        uint64_t v11 = 3;
        uint64_t v12 = 3;
      }
      else
      {
        a2[3] = ((v7 - 16843009) & v14) >> 24;
        uint64_t v11 = 4;
        uint64_t v12 = 4;
      }
      goto LABEL_24;
    }
    uint64_t v11 = 3;
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

void *specialized Data.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ArraySlice<UInt8>);
  v19[3] = v8;
  v19[4] = &protocol witness table for <A> ArraySlice<A>;
  unsigned int v9 = (void *)swift_allocObject();
  v19[0] = v9;
  v9[2] = a1;
  v9[3] = a2;
  void v9[4] = a3;
  v9[5] = a4;
  uint64_t result = __swift_project_boxed_opaque_existential_1(v19, v8);
  uint64_t v11 = result[2];
  uint64_t v12 = result[3] >> 1;
  BOOL v13 = __OFSUB__(v12, v11);
  uint64_t v14 = v12 - v11;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    unsigned int v15 = (unsigned char *)(result[1] + v11);
    uint64_t v16 = &v15[v14];
    swift_unknownObjectRetain();
    closure #1 in Data.init<A>(_:)(v15, v16, &v18);
    uint64_t v17 = v18;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    return (void *)v17;
  }
  return result;
}

uint64_t specialized static StringProtocol.== infix<A>(_:_:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0) {
    uint64_t v6 = HIBYTE(a6) & 0xF;
  }
  else {
    uint64_t v6 = a5 & 0xFFFFFFFFFFFFLL;
  }
  if (a3 == a5 && a4 == a6 && !(a1 >> 16) && a2 >> 16 == v6) {
    return 1;
  }
  else {
    return _stringCompareInternal(_:_:_:_:expecting:)() & 1;
  }
}

uint64_t sub_181F7ACD4()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_181F7ACE4()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181F7ACF4()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t specialized OptionSet<>.remove(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2;
  if (*v2)
  {
    uint64_t v4 = v3 & result;
    if ((v3 & result) != 0 && v4 != 0xFFFF)
    {
      uint64_t v7 = v3 ^ result;
      if (v3 == result)
      {
        uint64_t v8 = (unsigned __int16)*v2;
        if ((unsigned __int16)*v2) {
          goto LABEL_15;
        }
        goto LABEL_14;
      }
LABEL_13:
      uint64_t v8 = v7 & v3;
      if (v8)
      {
LABEL_15:
        char v6 = 0;
        uint64_t *v2 = v8;
        goto LABEL_16;
      }
LABEL_14:
      uint64_t v8 = 0xFFFFLL;
      goto LABEL_15;
    }
    uint64_t v4 = 0;
    char v6 = 1;
  }
  else
  {
    uint64_t v4 = 0;
    char v6 = 1;
    if ((_WORD)result && (unsigned __int16)result != 0xFFFF)
    {
      uint64_t v4 = (unsigned __int16)result;
      uint64_t v7 = result ^ 0xFFFF;
      if (result == 0xFFFF) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
LABEL_16:
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = v6;
  return result;
}

uint64_t specialized OptionSet<>.update(with:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2;
  if (*v2)
  {
    uint64_t v4 = v3 & result;
    if ((v3 & result) != 0)
    {
LABEL_3:
      uint64_t v5 = v3 | result;
      if (!v5) {
        uint64_t v5 = 0xFFFFLL;
      }
      uint64_t *v2 = v5;
      BOOL v6 = v4 == 0xFFFF;
      if (v4 == 0xFFFF) {
        uint64_t v4 = 0;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v4 = (unsigned __int16)result;
    if ((_WORD)result) {
      goto LABEL_3;
    }
  }
  uint64_t v4 = 0;
  uint64_t v7 = v3 | result;
  if (!v7) {
    uint64_t v7 = 0xFFFFLL;
  }
  uint64_t *v2 = v7;
  BOOL v6 = 1;
LABEL_12:
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = v6;
  return result;
}

uint64_t specialized SetAlgebra.subtracting(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (a2)
  {
    if (a2 != result)
    {
      uint64_t v3 = (a2 ^ result) & a2;
      if (v3)
      {
LABEL_4:
        *a3 = v3;
        return result;
      }
    }
    else
    {
      uint64_t v3 = (unsigned __int16)a2;
      if ((_WORD)a2) {
        goto LABEL_4;
      }
    }
  }
  else if (result != 0xFFFF)
  {
    uint64_t v3 = (unsigned __int16)~(_WORD)result;
    if ((_WORD)result != 0xFFFF) {
      goto LABEL_4;
    }
  }
  *a3 = 0xFFFFLL;
  return result;
}

uint64_t specialized SetAlgebra.subtract(_:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v5 = a1;
  uint64_t v6 = v2;
  IndexSet.symmetricDifference(_:)(&v5, &v7);
  uint64_t v4 = v7;
  uint64_t v5 = v2;
  IndexSet.intersection(_:)(&v4, (uint64_t)&v6);
  swift_release();
  uint64_t result = swift_release();
  uint64_t *v1 = v6;
  return result;
}

uint64_t specialized SetAlgebra.subtract(_:)(uint64_t result)
{
  uint64_t v2 = *v1;
  if (!*v1)
  {
    uint64_t v3 = result ^ 0xFFFF;
    if (result == 0xFFFF) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v3 = v2 ^ result;
  if (v2 != result)
  {
LABEL_6:
    uint64_t v4 = v3 & v2;
    if (v4) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  uint64_t v4 = (unsigned __int16)*v1;
  if ((unsigned __int16)*v1)
  {
LABEL_4:
    uint64_t *v1 = v4;
    return result;
  }
LABEL_7:
  uint64_t *v1 = 0xFFFFLL;
  return result;
}

uint64_t AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.init(unumberFormatField:unit:)@<X0>(uint64_t result@<X0>, char a2@<W1>, unsigned char *a3@<X8>)
{
  if (result > 0xB) {
    goto LABEL_6;
  }
  if (((1 << result) & 0x447) != 0)
  {
    *a3 = 9;
    return result;
  }
  if (result == 11) {
    *a3 = a2;
  }
  else {
LABEL_6:
  }
    *a3 = 12;
  return result;
}

void static ByteCountFormatStyle.Units.all.getter(void *a1@<X8>)
{
  *a1 = 0xFFFFLL;
}

uint64_t (*ByteCountFormatStyle.style.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *v1;
  return Measurement<>.AttributedStyle<>.ByteCount.style.modify;
}

void *(*ByteCountFormatStyle.allowedUnits.modify(void *a1))(void *result)
{
  *a1 = *(void *)(v1 + 8);
  a1[1] = v1;
  return Measurement<>.AttributedStyle<>.ByteCount.allowedUnits.modify;
}

unsigned char *(*ByteCountFormatStyle.spellsOutZero.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 16);
  return Measurement<>.AttributedStyle<>.ByteCount.spellsOutZero.modify;
}

uint64_t ByteCountFormatStyle.includesActualByteCount.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t ByteCountFormatStyle.includesActualByteCount.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 17) = result;
  return result;
}

unsigned char *(*ByteCountFormatStyle.includesActualByteCount.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 17);
  return Measurement<>.AttributedStyle<>.ByteCount.includesActualByteCount.modify;
}

uint64_t (*ByteCountFormatStyle.locale.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 24);
  swift_unknownObjectRetain();
  return Measurement<>.AttributedStyle<>.ByteCount.locale.modify;
}

uint64_t ByteCountFormatStyle.attributed.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  char v4 = *(unsigned char *)(v1 + 17);
  *(unsigned char *)a1 = *(unsigned char *)v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 17) = v4;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  return swift_unknownObjectRetain();
}

__n128 ByteCountFormatStyle.attributed.setter(char *a1)
{
  char v3 = *a1;
  uint64_t v4 = *((void *)a1 + 1);
  char v5 = a1[16];
  char v6 = a1[17];
  swift_unknownObjectRelease();
  *(unsigned char *)uint64_t v1 = v3;
  *(void *)(v1 + 8) = v4;
  *(unsigned char *)(v1 + 16) = v5;
  *(unsigned char *)(v1 + 17) = v6;
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v1 + 24) = result;
  return result;
}

uint64_t (*ByteCountFormatStyle.attributed.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void one-time initialization function for unitNames()
{
  static ByteCountFormatStyle.Unit.unitNames = (uint64_t)&outlined read-only object #0 of one-time initialization function for unitNames;
}

void one-time initialization function for decimalByteSizes()
{
  static ByteCountFormatStyle.Unit.decimalByteSizes = (uint64_t)&outlined read-only object #0 of one-time initialization function for decimalByteSizes;
}

void one-time initialization function for binaryByteSizes()
{
  static ByteCountFormatStyle.Unit.binaryByteSizes = (uint64_t)&outlined read-only object #0 of one-time initialization function for binaryByteSizes;
}

Swift::String __swiftcall ByteCountFormatStyle.format(_:)(Swift::Int64 a1)
{
  ByteCountFormatStyle.Attributed._format(_:doubleValue:)((_WORD *)a1, 0, 0, (uint64_t *)&v10, (double)a1);
  uint64_t v1 = v10;
  long long v2 = v10[1];
  long long v3 = v10[3];
  v12[1] = v10[2];
  v12[2] = v3;
  v12[0] = v2;
  swift_retain();
  outlined retain of Locale((uint64_t)v12);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v12);
  long long v4 = v1[1];
  long long v5 = v1[3];
  v11[1] = v1[2];
  v11[2] = v5;
  v11[0] = v4;
  long long v6 = v1[1];
  v13[1] = v1[2];
  v13[2] = v5;
  v13[0] = v6;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v13, (uint64_t)v14);
  outlined retain of Locale((uint64_t)v14);
  BigString.endIndex.getter();
  outlined release of Locale((uint64_t)v11);
  swift_release();
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  uint64_t v7 = String.init<A>(_:)();
  result._uint64_t object = v8;
  result._uint64_t countAndFlagsBits = v7;
  return result;
}

uint64_t ByteCountFormatStyle.Attributed.format(_:)@<X0>(_WORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ByteCountFormatStyle.Attributed._format(_:doubleValue:)(a1, 0, 0, a2, (double)(uint64_t)a1);
}

uint64_t ByteCountFormatStyle.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 8);
  char v4 = *(unsigned char *)(v2 + 16);
  char v5 = *(unsigned char *)(v2 + 17);
  *(unsigned char *)a2 = *(unsigned char *)v2;
  *(void *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 17) = v5;
  *(_OWORD *)(a2 + 24) = *a1;
  return swift_unknownObjectRetain();
}

__n128 ByteCountFormatStyle.init(style:allowedUnits:spellsOutZero:includesActualByteCount:locale:)@<Q0>(unsigned char *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, char a4@<W3>, __n128 *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6 = *a2;
  *(unsigned char *)a6 = *a1;
  *(void *)(a6 + 8) = v6;
  *(unsigned char *)(a6 + 16) = a3;
  *(unsigned char *)(a6 + 17) = a4;
  __n128 result = *a5;
  *(__n128 *)(a6 + 24) = *a5;
  return result;
}

Foundation::ByteCountFormatStyle::Style_optional __swiftcall ByteCountFormatStyle.Style.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 4;
  if ((unint64_t)rawValue < 4) {
    char v2 = rawValue;
  }
  char *v1 = v2;
  return (Foundation::ByteCountFormatStyle::Style_optional)rawValue;
}

uint64_t ByteCountFormatStyle.Style.rawValue.getter()
{
  return *v0;
}

Foundation::ByteCountFormatStyle::Style_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ByteCountFormatStyle.Style(Swift::Int *a1)
{
  return ByteCountFormatStyle.Style.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ByteCountFormatStyle.Style()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ByteCountFormatStyle.Style()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t ByteCountFormatStyle.Units.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t ByteCountFormatStyle.Units.rawValue.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*ByteCountFormatStyle.Units.rawValue.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

Foundation::ByteCountFormatStyle::Units __swiftcall ByteCountFormatStyle.Units.init(rawValue:)(Foundation::ByteCountFormatStyle::Units rawValue)
{
  Swift::UInt v2 = 0xFFFFLL;
  if (rawValue.rawValue) {
    Swift::UInt v2 = rawValue.rawValue;
  }
  Swift::UInt *v1 = v2;
  return rawValue;
}

void static ByteCountFormatStyle.Units.bytes.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static ByteCountFormatStyle.Units.kb.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static ByteCountFormatStyle.Units.mb.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static ByteCountFormatStyle.Units.gb.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static ByteCountFormatStyle.Units.tb.getter(void *a1@<X8>)
{
  *a1 = 16;
}

void static ByteCountFormatStyle.Units.pb.getter(void *a1@<X8>)
{
  *a1 = 32;
}

void static ByteCountFormatStyle.Units.eb.getter(void *a1@<X8>)
{
  *a1 = 64;
}

void static ByteCountFormatStyle.Units.zb.getter(void *a1@<X8>)
{
  *a1 = 128;
}

void static ByteCountFormatStyle.Units.ybOrHigher.getter(void *a1@<X8>)
{
  *a1 = 65280;
}

uint64_t *protocol witness for OptionSet.init(rawValue:) in conformance ByteCountFormatStyle.Units@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *result;
  if (!*result) {
    uint64_t v2 = 0xFFFFLL;
  }
  *a2 = v2;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ByteCountFormatStyle.Units()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ByteCountFormatStyle.Units()
{
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for SetAlgebra.init() in conformance ByteCountFormatStyle.Units(void *a1@<X8>)
{
  *a1 = 0xFFFFLL;
}

void *protocol witness for SetAlgebra.union(_:) in conformance ByteCountFormatStyle.Units@<X0>(void *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *v2;
  if (!*v2) {
    uint64_t v3 = 0xFFFFLL;
  }
  *a2 = v3 | *result;
  return result;
}

void *protocol witness for SetAlgebra.intersection(_:) in conformance ByteCountFormatStyle.Units@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (*v2)
  {
    uint64_t v3 = *v2 & *result;
    if (v3)
    {
LABEL_3:
      *a2 = v3;
      return result;
    }
  }
  else
  {
    uint64_t v3 = (unsigned __int16)*result;
    if ((unsigned __int16)*result) {
      goto LABEL_3;
    }
  }
  *a2 = 0xFFFFLL;
  return result;
}

uint64_t *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance ByteCountFormatStyle.Units@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*v2)
  {
    uint64_t v4 = *v2 ^ v3;
    if (v4)
    {
LABEL_3:
      *a2 = v4;
      return result;
    }
  }
  else
  {
    uint64_t v4 = v3 ^ 0xFFFF;
    if (v4) {
      goto LABEL_3;
    }
  }
  *a2 = 0xFFFFLL;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance ByteCountFormatStyle.Units(void *a1, uint64_t *a2)
{
  return specialized OptionSet<>.insert(_:)(a1, *a2);
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance ByteCountFormatStyle.Units@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized OptionSet<>.remove(_:)(*a1, a2);
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance ByteCountFormatStyle.Units@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized OptionSet<>.update(with:)(*a1, a2);
}

void *protocol witness for SetAlgebra.formUnion(_:) in conformance ByteCountFormatStyle.Units(void *result)
{
  uint64_t v2 = *v1 | *result;
  if (!v2) {
    uint64_t v2 = 0xFFFFLL;
  }
  uint64_t *v1 = v2;
  return result;
}

void *protocol witness for SetAlgebra.formIntersection(_:) in conformance ByteCountFormatStyle.Units(void *result)
{
  uint64_t v2 = *v1 & *result;
  if (!v2) {
    uint64_t v2 = 0xFFFFLL;
  }
  uint64_t *v1 = v2;
  return result;
}

void *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance ByteCountFormatStyle.Units(void *result)
{
  uint64_t v2 = *v1 ^ *result;
  if (!v2) {
    uint64_t v2 = 0xFFFFLL;
  }
  uint64_t *v1 = v2;
  return result;
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance ByteCountFormatStyle.Units@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized SetAlgebra.subtracting(_:)(*a1, *v2, a2);
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance ByteCountFormatStyle.Units(void *a1)
{
  uint64_t v2 = *v1;
  if (!*v1)
  {
    uint64_t v3 = (unsigned __int16)*a1;
    if ((unsigned __int16)*a1) {
      return v3 == v2;
    }
    goto LABEL_3;
  }
  uint64_t v3 = v2 & *a1;
  if (!v3) {
LABEL_3:
  }
    uint64_t v3 = 0xFFFFLL;
  return v3 == v2;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance ByteCountFormatStyle.Units(void *a1)
{
  if (!*v1)
  {
    uint64_t v2 = (unsigned __int16)*a1;
    if ((unsigned __int16)*a1) {
      return v2 == 0xFFFF;
    }
    goto LABEL_3;
  }
  uint64_t v2 = *v1 & *a1;
  if (!v2) {
LABEL_3:
  }
    uint64_t v2 = 0xFFFFLL;
  return v2 == 0xFFFF;
}

BOOL protocol witness for SetAlgebra.contains(_:) in conformance ByteCountFormatStyle.Units(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!*a1)
  {
    uint64_t v3 = (unsigned __int16)*v1;
    if ((unsigned __int16)*v1) {
      return v3 == v2;
    }
    goto LABEL_3;
  }
  uint64_t v3 = *v1 & v2;
  if (!v3) {
LABEL_3:
  }
    uint64_t v3 = 0xFFFFLL;
  return v3 == v2;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance ByteCountFormatStyle.Units()
{
  return *v0 == 0xFFFFLL;
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance ByteCountFormatStyle.Units(uint64_t *a1)
{
  return specialized SetAlgebra.subtract(_:)(*a1);
}

uint64_t *protocol witness for RawRepresentable.init(rawValue:) in conformance ByteCountFormatStyle.Units@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result;
  if (!*result) {
    uint64_t v2 = 0xFFFFLL;
  }
  *(void *)a2 = v2;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void ByteCountFormatStyle.Attributed.style.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *ByteCountFormatStyle.Attributed.style.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*ByteCountFormatStyle.Attributed.style.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void ByteCountFormatStyle.Attributed.allowedUnits.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
}

void *ByteCountFormatStyle.Attributed.allowedUnits.setter(void *result)
{
  *(void *)(v1 + 8) = *result;
  return result;
}

uint64_t (*ByteCountFormatStyle.Attributed.allowedUnits.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t ByteCountFormatStyle.Attributed.spellsOutZero.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t ByteCountFormatStyle.Attributed.spellsOutZero.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

uint64_t (*ByteCountFormatStyle.Attributed.spellsOutZero.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t (*ByteCountFormatStyle.Attributed.includesActualByteCount.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t ByteCountFormatStyle.Attributed.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 24);
  return swift_unknownObjectRetain();
}

__n128 ByteCountFormatStyle.Attributed.locale.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  *(__n128 *)(v1 + 24) = *a1;
  return result;
}

uint64_t (*ByteCountFormatStyle.Attributed.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t ByteCountFormatStyle.Attributed.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 8);
  char v4 = *(unsigned char *)(v2 + 16);
  char v5 = *(unsigned char *)(v2 + 17);
  *(unsigned char *)a2 = *(unsigned char *)v2;
  *(void *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 17) = v5;
  *(_OWORD *)(a2 + 24) = *a1;
  return swift_unknownObjectRetain();
}

void one-time initialization function for maxDecimalSizes()
{
  static ByteCountFormatStyle.Attributed.maxDecimalSizes = (uint64_t)&outlined read-only object #0 of one-time initialization function for maxDecimalSizes;
}

void one-time initialization function for maxBinarySizes()
{
  static ByteCountFormatStyle.Attributed.maxBinarySizes = (uint64_t)&outlined read-only object #0 of one-time initialization function for maxBinarySizes;
}

uint64_t ByteCountFormatStyle.Attributed.useSpelloutZero(forLocale:unit:)(uint64_t a1, unsigned __int8 a2)
{
  void (*v5)(_OWORD *__return_ptr, uint64_t, uint64_t);
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  char v11;
  _OWORD v13[6];
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;

  if (a2 > 1u) {
    goto LABEL_50;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  char v5 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v3 + 352);
  swift_unknownObjectRetain();
  v5(v13, ObjectType, v3);
  swift_unknownObjectRelease();
  uint64_t v16 = v13[2];
  uint64_t v17 = v13[3];
  uint64_t v18 = v13[4];
  int v19 = v13[5];
  uint64_t v14 = v13[0];
  unsigned int v15 = v13[1];
  if (*((void *)&v13[0] + 1))
  {
    uint64_t object = (void *)*((void *)&v15 + 1);
    uint64_t countAndFlagsBits = v15;
    outlined copy of Locale.LanguageCode?(v14, *((uint64_t *)&v13[0] + 1));
  }
  else
  {
    outlined retain of Locale.Language((uint64_t *)&v14, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)&v14);
    unsigned int v9 = v8;
    outlined retain of Locale.Language((uint64_t *)&v14, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    if (!v9)
    {
      outlined retain of Locale.Language((uint64_t *)&v14, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
      goto LABEL_50;
    }
    unsigned int v10 = String.lowercased()();
    uint64_t countAndFlagsBits = v10._countAndFlagsBits;
    uint64_t object = v10._object;
  }
  outlined retain of Locale.Language((uint64_t *)&v14, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
  swift_bridgeObjectRelease();
  if ((countAndFlagsBits != 29281 || object != (void *)0xE200000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 24932 || object != (void *)0xE200000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 27749 || object != (void *)0xE200000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 28261 || object != (void *)0xE200000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 29286 || object != (void *)0xE200000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 26984 || object != (void *)0xE200000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 29288 || object != (void *)0xE200000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 25705 || object != (void *)0xE200000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 29801 || object != (void *)0xE200000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 29549 || object != (void *)0xE200000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 29808 || object != (void *)0xE200000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 28530 || object != (void *)0xE200000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 26740 || object != (void *)0xE200000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (a2)
    {
      swift_bridgeObjectRelease();
LABEL_50:
      uint64_t v11 = 0;
      return v11 & 1;
    }
    if ((countAndFlagsBits != 24931 || object != (void *)0xE200000000000000)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      && (countAndFlagsBits != 28526 || object != (void *)0xE200000000000000))
    {
      uint64_t v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      return v11 & 1;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v11 = 1;
  return v11 & 1;
}

uint64_t ByteCountFormatStyle.Attributed.hash(into:)(uint64_t a1)
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned char *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  unsigned char v43[144];
  unsigned char v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  void v62[18];
  unsigned char v63[144];
  unsigned char v64[152];
  uint64_t vars8;

  Swift::UInt v3 = *((void *)v1 + 1);
  Swift::UInt8 v4 = v1[16];
  Swift::UInt8 v5 = v1[17];
  uint64_t v6 = *((void *)v1 + 4);
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain();
  if ((v8(ObjectType, v6) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v6 + 64))(ObjectType, v6);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    unsigned int v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 464);
    swift_unknownObjectRetain();
    v10(v62, ObjectType, v6);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63);
    outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v64) == 1)
    {
      Hasher._combine(_:)(0);
      return swift_unknownObjectRelease();
    }
    outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v44);
    Hasher._combine(_:)(1u);
    if (v44[0] == 2)
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v11 = v44[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v11);
    uint64_t v12 = v45;
    if (v45)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v12 + 16));
      BOOL v13 = *(void *)(v12 + 16);
      if (v13)
      {
        outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v14 = v12 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v14 += 16;
          --v13;
        }
        while (v13);
        swift_bridgeObjectRelease();
        if (!v46)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          if (!v47) {
            goto LABEL_16;
          }
          goto LABEL_23;
        }
LABEL_22:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v47)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          unsigned int v15 = v48;
          if (!v48) {
            goto LABEL_17;
          }
          goto LABEL_24;
        }
LABEL_23:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        unsigned int v15 = v48;
        if (!v48)
        {
LABEL_17:
          Hasher._combine(_:)(0);
          uint64_t v16 = v49;
          if (!v49)
          {
LABEL_18:
            Hasher._combine(_:)(0);
            goto LABEL_26;
          }
LABEL_25:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v16);
          swift_bridgeObjectRelease();
LABEL_26:
          int v19 = v50;
          uint64_t v18 = v51;
          uint64_t v21 = v52;
          uint64_t v20 = v53;
          int v22 = v54;
          if (v50)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            stat v23 = v18;
            unint64_t v24 = v21;
            uint64_t v25 = v20;
            uint64_t v26 = v22;
            uint64_t v27 = v19;
            _CFObject.hash(into:)();
            if (v18) {
              goto LABEL_28;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            uint64_t v32 = v22;
            uint64_t v33 = v18;
            long long v34 = v21;
            long long v35 = v20;
            if (v18)
            {
LABEL_28:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v28 = v18;
              _CFObject.hash(into:)();

              if (v21) {
                goto LABEL_29;
              }
              goto LABEL_34;
            }
          }
          Hasher._combine(_:)(0);
          if (v21)
          {
LABEL_29:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v29 = v21;
            _CFObject.hash(into:)();

            if (v20) {
              goto LABEL_30;
            }
            goto LABEL_35;
          }
LABEL_34:
          Hasher._combine(_:)(0);
          if (v20)
          {
LABEL_30:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v30 = v20;
            _CFObject.hash(into:)();

            if (v22)
            {
LABEL_31:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v31 = v22;
              _CFObject.hash(into:)();

              goto LABEL_37;
            }
LABEL_36:
            Hasher._combine(_:)(0);
            uint64_t v31 = 0;
LABEL_37:

            uint64_t v36 = v55;
            if (v36)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v36);
              swift_bridgeObjectRelease();
              uint64_t v37 = v56;
              if (v56) {
                goto LABEL_39;
              }
            }
            else
            {
              Hasher._combine(_:)(0);
              uint64_t v37 = v56;
              if (v56)
              {
LABEL_39:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v37);
                swift_bridgeObjectRelease();
                if (v57)
                {
LABEL_40:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_44:
                  if (v58 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    uint64_t v38 = v58 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v38);
                  }
                  if (v59 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    uint64_t v39 = v59 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v39);
                  }
                  if (v60 == 2)
                  {
                    uint64_t v40 = 0;
                  }
                  else
                  {
                    uint64_t v40 = v60 & 1;
                    Hasher._combine(_:)(1u);
                  }
                  Hasher._combine(_:)(v40);
                  if (v61 == 2)
                  {
                    uint64_t v41 = 0;
                  }
                  else
                  {
                    uint64_t v42 = v61 & 1;
                    Hasher._combine(_:)(1u);
                    uint64_t v41 = v42;
                  }
                  Hasher._combine(_:)(v41);
                  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  return swift_unknownObjectRelease();
                }
LABEL_43:
                Hasher._combine(_:)(0);
                goto LABEL_44;
              }
            }
            Hasher._combine(_:)(0);
            if (v57) {
              goto LABEL_40;
            }
            goto LABEL_43;
          }
LABEL_35:
          Hasher._combine(_:)(0);
          if (v22) {
            goto LABEL_31;
          }
          goto LABEL_36;
        }
LABEL_24:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v15);
        swift_bridgeObjectRelease();
        uint64_t v16 = v49;
        if (!v49) {
          goto LABEL_18;
        }
        goto LABEL_25;
      }
      outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v43);
      uint64_t v17 = v43;
    }
    else
    {
      Hasher._combine(_:)(0);
      uint64_t v17 = v44;
    }
    outlined retain of LocalePreferences(v17);
    if (!v46) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
  Hasher._combine(_:)(1u);

  return swift_unknownObjectRelease();
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance ByteCountFormatStyle.Attributed.CodingKeys()
{
  unint64_t result = 0x656C797473;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x556465776F6C6C61;
      break;
    case 2:
      unint64_t result = 0x754F736C6C657073;
      break;
    case 3:
      unint64_t result = 0xD000000000000017;
      break;
    case 4:
      unint64_t result = 0x656C61636F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ByteCountFormatStyle.Attributed.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ByteCountFormatStyle.Attributed.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t ByteCountFormatStyle.Attributed.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ByteCountFormatStyle.Attributed.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = *v1;
  uint64_t v12 = *((void *)v1 + 1);
  int v14 = v1[16];
  int v11 = v1[17];
  long long v10 = *(_OWORD *)(v1 + 24);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = v8;
  char v15 = 0;
  lazy protocol witness table accessor for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    *(void *)&long long v13 = v12;
    char v15 = 1;
    lazy protocol witness table accessor for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v13 = v10;
    char v15 = 4;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int ByteCountFormatStyle.Attributed.hashValue.getter()
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned char *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  unsigned char v43[144];
  unsigned char v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  void v62[18];
  unsigned char v63[144];
  unsigned char v64[144];
  unsigned char v65[72];

  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Swift::UInt8 v3 = v0[16];
  Swift::UInt8 v4 = v0[17];
  uint64_t v5 = *((void *)v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if (v7(ObjectType, v5))
  {
    Swift::UInt8 v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    goto LABEL_56;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unsigned int v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v62, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63);
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v64) == 1)
  {
    Swift::UInt8 v8 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v44);
  Hasher._combine(_:)(1u);
  if (v44[0] == 2)
  {
    long long v10 = 0;
  }
  else
  {
    long long v10 = v44[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v10);
  int v11 = v45;
  if (!v45)
  {
    Hasher._combine(_:)(0);
    uint64_t v16 = v44;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v11 + 16));
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12)
  {
    outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v43);
    uint64_t v16 = v43;
LABEL_20:
    outlined retain of LocalePreferences(v16);
    if (!v46) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  long long v13 = v11 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 += 16;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  if (!v46)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v47) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v47)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    int v14 = v48;
    if (!v48) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v14);
    swift_bridgeObjectRelease();
    char v15 = v49;
    if (!v49) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  int v14 = v48;
  if (v48) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  char v15 = v49;
  if (!v49)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v15);
  swift_bridgeObjectRelease();
LABEL_25:
  uint64_t v18 = v50;
  uint64_t v17 = v51;
  uint64_t v20 = v52;
  int v19 = v53;
  uint64_t v21 = v54;
  if (v50)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    int v22 = v17;
    stat v23 = v20;
    unint64_t v24 = v19;
    uint64_t v25 = v21;
    uint64_t v26 = v18;
    _CFObject.hash(into:)();
    if (v17) {
      goto LABEL_27;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v31 = v21;
    uint64_t v32 = v17;
    uint64_t v33 = v20;
    long long v34 = v19;
    if (v17)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v27 = v17;
      _CFObject.hash(into:)();

      if (v20) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v20)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v28 = v20;
    _CFObject.hash(into:)();

    if (v19) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v21) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v19) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v29 = v19;
  _CFObject.hash(into:)();

  if (v21)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v30 = v21;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  uint64_t v30 = 0;
LABEL_36:

  long long v35 = v55;
  if (v35)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v35);
    swift_bridgeObjectRelease();
    uint64_t v36 = v56;
    if (v56) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v57) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  uint64_t v36 = v56;
  if (!v56) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v36);
  swift_bridgeObjectRelease();
  if (!v57) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v37 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v59 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v38 = v59 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  if (v60 == 2)
  {
    uint64_t v39 = 0;
  }
  else
  {
    uint64_t v39 = v60 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v39);
  if (v61 == 2)
  {
    uint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = v61 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v40 = v41;
  }
  Hasher._combine(_:)(v40);
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

uint64_t ByteCountFormatStyle.Attributed.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ByteCountFormatStyle.Attributed.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  Swift::UInt8 v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v18 = 0;
    lazy protocol witness table accessor for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v9 = v16;
    char v18 = 1;
    lazy protocol witness table accessor for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v10 = v16;
    LOBYTE(v16) = 2;
    int v17 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v15 = v10;
    LOBYTE(v16) = 3;
    LOBYTE(v10) = KeyedDecodingContainer.decode(_:forKey:)();
    char v18 = 4;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    char v12 = v17 & 1;
    long long v13 = v16;
    *(unsigned char *)a2 = v9;
    *(void *)(a2 + 8) = v15;
    *(unsigned char *)(a2 + 16) = v12;
    *(unsigned char *)(a2 + 17) = v10 & 1;
    *(_OWORD *)(a2 + 24) = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance ByteCountFormatStyle.Attributed@<X0>(_WORD **a1@<X0>, uint64_t *a2@<X8>)
{
  return ByteCountFormatStyle.Attributed._format(_:doubleValue:)(*a1, 0, 0, a2, (double)(uint64_t)*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ByteCountFormatStyle.Attributed@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ByteCountFormatStyle.Attributed.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ByteCountFormatStyle.Attributed(void *a1)
{
  return ByteCountFormatStyle.Attributed.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ByteCountFormatStyle.Attributed()
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  char v59;
  void v60[18];
  unsigned char v61[144];
  unsigned char v62[144];
  unsigned char v63[72];

  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Swift::UInt8 v3 = v0[16];
  Swift::UInt8 v4 = v0[17];
  uint64_t v5 = *((void *)v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if (v7(ObjectType, v5))
  {
    Swift::UInt8 v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    goto LABEL_55;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  char v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v60, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v61);
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v62);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v62) == 1)
  {
    Swift::UInt8 v8 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)&v42);
  Hasher._combine(_:)(1u);
  if (v42 == 2)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = v42 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v10);
  int v11 = v43;
  if (!v43)
  {
    Hasher._combine(_:)(0);
LABEL_19:
    outlined retain of LocalePreferences(&v42);
    if (!v44) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v11 + 16));
  char v12 = *(void *)(v11 + 16);
  if (!v12) {
    goto LABEL_19;
  }
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  long long v13 = v11 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 += 16;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  if (!v44)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v45) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v45)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    uint64_t v14 = v46;
    if (!v46) {
      goto LABEL_16;
    }
LABEL_22:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v14);
    swift_bridgeObjectRelease();
    uint64_t v15 = v47;
    if (!v47) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v14 = v46;
  if (v46) {
    goto LABEL_22;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  uint64_t v15 = v47;
  if (!v47)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v15);
  swift_bridgeObjectRelease();
LABEL_24:
  int v17 = v48;
  long long v16 = v49;
  int v19 = v50;
  char v18 = v51;
  uint64_t v20 = v52;
  if (v48)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v21 = v16;
    int v22 = v19;
    stat v23 = v18;
    unint64_t v24 = v20;
    uint64_t v25 = v17;
    _CFObject.hash(into:)();
    if (v16) {
      goto LABEL_26;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v30 = v20;
    uint64_t v31 = v16;
    uint64_t v32 = v19;
    uint64_t v33 = v18;
    if (v16)
    {
LABEL_26:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v26 = v16;
      _CFObject.hash(into:)();

      if (v19) {
        goto LABEL_27;
      }
      goto LABEL_32;
    }
  }
  Hasher._combine(_:)(0);
  if (v19)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v27 = v19;
    _CFObject.hash(into:)();

    if (v18) {
      goto LABEL_28;
    }
LABEL_33:
    Hasher._combine(_:)(0);
    if (v20) {
      goto LABEL_29;
    }
    goto LABEL_34;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  if (!v18) {
    goto LABEL_33;
  }
LABEL_28:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v28 = v18;
  _CFObject.hash(into:)();

  if (v20)
  {
LABEL_29:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v29 = v20;
    _CFObject.hash(into:)();

    goto LABEL_35;
  }
LABEL_34:
  Hasher._combine(_:)(0);
  uint64_t v29 = 0;
LABEL_35:

  long long v34 = v53;
  if (v34)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v34);
    swift_bridgeObjectRelease();
    long long v35 = v54;
    if (v54) {
      goto LABEL_37;
    }
LABEL_40:
    Hasher._combine(_:)(0);
    if (v55) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    goto LABEL_42;
  }
  Hasher._combine(_:)(0);
  long long v35 = v54;
  if (!v54) {
    goto LABEL_40;
  }
LABEL_37:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v35);
  swift_bridgeObjectRelease();
  if (!v55) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_42:
  if (v56 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v36 = v56 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }
  if (v57 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v37 = v57 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v58 == 2)
  {
    uint64_t v38 = 0;
  }
  else
  {
    uint64_t v38 = v58 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v38);
  if (v59 == 2)
  {
    uint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = v59 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v39 = v40;
  }
  Hasher._combine(_:)(v39);
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_55:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

uint64_t ByteCountFormatStyle.hash(into:)(uint64_t a1)
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned char *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  unsigned char v44[144];
  unsigned char v45[8];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  char v62;
  void v63[18];
  unsigned char v64[144];
  unsigned char v65[152];

  Swift::UInt v3 = *((void *)v1 + 1);
  Swift::UInt8 v4 = v1[16];
  Swift::UInt8 v5 = v1[17];
  uint64_t v6 = *((void *)v1 + 4);
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  uint64_t ObjectType = swift_getObjectType();
  Swift::UInt8 v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain_n();
  if (v8(ObjectType, v6))
  {
    Swift::UInt8 v9 = 1;
LABEL_5:
    Hasher._combine(_:)(v9);
    return swift_unknownObjectRelease_n();
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(ObjectType, v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 464);
  swift_unknownObjectRetain();
  v10(v63, ObjectType, v6);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64);
  outlined init with take of LocalePreferences?((uint64_t)v64, (uint64_t)v65);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v65) == 1)
  {
    Swift::UInt8 v9 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v64, (uint64_t)v45);
  Hasher._combine(_:)(1u);
  if (v45[0] == 2)
  {
    int v11 = 0;
  }
  else
  {
    int v11 = v45[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v11);
  char v12 = v46;
  if (!v46)
  {
    Hasher._combine(_:)(0);
    int v17 = v45;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v12 + 16));
  long long v13 = *(void *)(v12 + 16);
  if (!v13)
  {
    outlined init with take of LocalePreferences?((uint64_t)v64, (uint64_t)v44);
    int v17 = v44;
LABEL_20:
    outlined retain of LocalePreferences(v17);
    if (!v47) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v64, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v14 = v12 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v14 += 16;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  if (!v47)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v48) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v48)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    uint64_t v15 = v49;
    if (!v49) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v15);
    swift_bridgeObjectRelease();
    long long v16 = v50;
    if (!v50) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v15 = v49;
  if (v49) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  long long v16 = v50;
  if (!v50)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v16);
  swift_bridgeObjectRelease();
LABEL_25:
  int v19 = v51;
  char v18 = v52;
  uint64_t v21 = v53;
  uint64_t v20 = v54;
  int v22 = v55;
  if (v51)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    stat v23 = v18;
    unint64_t v24 = v21;
    uint64_t v25 = v20;
    uint64_t v26 = v22;
    uint64_t v27 = v19;
    _CFObject.hash(into:)();
    if (v18) {
      goto LABEL_27;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v32 = v22;
    uint64_t v33 = v18;
    long long v34 = v21;
    long long v35 = v20;
    if (v18)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v28 = v18;
      _CFObject.hash(into:)();

      if (v21) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v21)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v29 = v21;
    _CFObject.hash(into:)();

    if (v20) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v22) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v20) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v30 = v20;
  _CFObject.hash(into:)();

  if (v22)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v31 = v22;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  uint64_t v31 = 0;
LABEL_36:

  uint64_t v36 = v56;
  if (v36)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v36);
    swift_bridgeObjectRelease();
    uint64_t v37 = v57;
    if (v57) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v58) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  uint64_t v37 = v57;
  if (!v57) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v37);
  swift_bridgeObjectRelease();
  if (!v58) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v59 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v38 = v59 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  if (v60 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v39 = v60 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }
  if (v61 == 2)
  {
    uint64_t v40 = 0;
  }
  else
  {
    uint64_t v40 = v61 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v40);
  if (v62 == 2)
  {
    uint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = v62 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v41 = v42;
  }
  Hasher._combine(_:)(v41);
  outlined retain of LocalePreferences?((uint64_t)v64, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v64, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return swift_unknownObjectRelease_n();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ByteCountFormatStyle.CodingKeys()
{
  return 0x7475626972747461;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ByteCountFormatStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x7475626972747461 && a2 == 0xEA00000000006465)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ByteCountFormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ByteCountFormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t ByteCountFormatStyle.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ByteCountFormatStyle.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = *v2;
  uint64_t v9 = *((void *)v2 + 1);
  int v10 = v2[16];
  int v12 = v2[17];
  int v13 = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = v8;
  uint64_t v15 = v9;
  char v16 = v13;
  char v17 = v12;
  long long v18 = *(_OWORD *)(v2 + 24);
  lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int ByteCountFormatStyle.hashValue.getter()
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned char *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  unsigned char v43[144];
  unsigned char v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  void v62[18];
  unsigned char v63[144];
  unsigned char v64[144];
  unsigned char v65[72];

  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Swift::UInt8 v3 = v0[16];
  Swift::UInt8 v4 = v0[17];
  uint64_t v5 = *((void *)v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  uint64_t ObjectType = swift_getObjectType();
  char v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain_n();
  if (v7(ObjectType, v5))
  {
    Swift::UInt8 v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    goto LABEL_56;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v62, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63);
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v64) == 1)
  {
    Swift::UInt8 v8 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v44);
  Hasher._combine(_:)(1u);
  if (v44[0] == 2)
  {
    int v10 = 0;
  }
  else
  {
    int v10 = v44[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v10);
  int v11 = v45;
  if (!v45)
  {
    Hasher._combine(_:)(0);
    char v16 = v44;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v11 + 16));
  int v12 = *(void *)(v11 + 16);
  if (!v12)
  {
    outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v43);
    char v16 = v43;
LABEL_20:
    outlined retain of LocalePreferences(v16);
    if (!v46) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  int v13 = v11 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 += 16;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  if (!v46)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v47) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v47)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    char v14 = v48;
    if (!v48) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v14);
    swift_bridgeObjectRelease();
    uint64_t v15 = v49;
    if (!v49) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  char v14 = v48;
  if (v48) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  uint64_t v15 = v49;
  if (!v49)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v15);
  swift_bridgeObjectRelease();
LABEL_25:
  long long v18 = v50;
  char v17 = v51;
  uint64_t v20 = v52;
  int v19 = v53;
  uint64_t v21 = v54;
  if (v50)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    int v22 = v17;
    stat v23 = v20;
    unint64_t v24 = v19;
    uint64_t v25 = v21;
    uint64_t v26 = v18;
    _CFObject.hash(into:)();
    if (v17) {
      goto LABEL_27;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v31 = v21;
    uint64_t v32 = v17;
    uint64_t v33 = v20;
    long long v34 = v19;
    if (v17)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v27 = v17;
      _CFObject.hash(into:)();

      if (v20) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v20)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v28 = v20;
    _CFObject.hash(into:)();

    if (v19) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v21) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v19) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v29 = v19;
  _CFObject.hash(into:)();

  if (v21)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v30 = v21;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  uint64_t v30 = 0;
LABEL_36:

  long long v35 = v55;
  if (v35)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v35);
    swift_bridgeObjectRelease();
    uint64_t v36 = v56;
    if (v56) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v57) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  uint64_t v36 = v56;
  if (!v56) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v36);
  swift_bridgeObjectRelease();
  if (!v57) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v37 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v59 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v38 = v59 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  if (v60 == 2)
  {
    uint64_t v39 = 0;
  }
  else
  {
    uint64_t v39 = v60 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v39);
  if (v61 == 2)
  {
    uint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = v61 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v40 = v41;
  }
  Hasher._combine(_:)(v40);
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease_n();
  return Hasher._finalize()();
}

uint64_t ByteCountFormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ByteCountFormatStyle.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  Swift::UInt8 v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v9 = v15;
    char v10 = v16;
    char v11 = v17;
    long long v12 = v18;
    *(unsigned char *)a2 = v14[8];
    *(void *)(a2 + 8) = v9;
    *(unsigned char *)(a2 + 16) = v10;
    *(unsigned char *)(a2 + 17) = v11;
    *(_OWORD *)(a2 + 24) = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ByteCountFormatStyle@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ByteCountFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ByteCountFormatStyle(void *a1)
{
  return ByteCountFormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ByteCountFormatStyle()
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  char v59;
  void v60[18];
  unsigned char v61[144];
  unsigned char v62[144];
  unsigned char v63[72];

  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Swift::UInt8 v3 = v0[16];
  Swift::UInt8 v4 = v0[17];
  uint64_t v5 = *((void *)v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain_n();
  if (v7(ObjectType, v5))
  {
    Swift::UInt8 v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    goto LABEL_55;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v60, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v61);
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v62);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v62) == 1)
  {
    Swift::UInt8 v8 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)&v42);
  Hasher._combine(_:)(1u);
  if (v42 == 2)
  {
    char v10 = 0;
  }
  else
  {
    char v10 = v42 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v10);
  char v11 = v43;
  if (!v43)
  {
    Hasher._combine(_:)(0);
LABEL_19:
    outlined retain of LocalePreferences(&v42);
    if (!v44) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v11 + 16));
  long long v12 = *(void *)(v11 + 16);
  if (!v12) {
    goto LABEL_19;
  }
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  int v13 = v11 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 += 16;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  if (!v44)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v45) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v45)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    char v14 = v46;
    if (!v46) {
      goto LABEL_16;
    }
LABEL_22:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v14);
    swift_bridgeObjectRelease();
    uint64_t v15 = v47;
    if (!v47) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  char v14 = v46;
  if (v46) {
    goto LABEL_22;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  uint64_t v15 = v47;
  if (!v47)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v15);
  swift_bridgeObjectRelease();
LABEL_24:
  char v17 = v48;
  char v16 = v49;
  int v19 = v50;
  long long v18 = v51;
  uint64_t v20 = v52;
  if (v48)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v21 = v16;
    int v22 = v19;
    stat v23 = v18;
    unint64_t v24 = v20;
    uint64_t v25 = v17;
    _CFObject.hash(into:)();
    if (v16) {
      goto LABEL_26;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v30 = v20;
    uint64_t v31 = v16;
    uint64_t v32 = v19;
    uint64_t v33 = v18;
    if (v16)
    {
LABEL_26:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v26 = v16;
      _CFObject.hash(into:)();

      if (v19) {
        goto LABEL_27;
      }
      goto LABEL_32;
    }
  }
  Hasher._combine(_:)(0);
  if (v19)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v27 = v19;
    _CFObject.hash(into:)();

    if (v18) {
      goto LABEL_28;
    }
LABEL_33:
    Hasher._combine(_:)(0);
    if (v20) {
      goto LABEL_29;
    }
    goto LABEL_34;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  if (!v18) {
    goto LABEL_33;
  }
LABEL_28:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v28 = v18;
  _CFObject.hash(into:)();

  if (v20)
  {
LABEL_29:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v29 = v20;
    _CFObject.hash(into:)();

    goto LABEL_35;
  }
LABEL_34:
  Hasher._combine(_:)(0);
  uint64_t v29 = 0;
LABEL_35:

  long long v34 = v53;
  if (v34)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v34);
    swift_bridgeObjectRelease();
    long long v35 = v54;
    if (v54) {
      goto LABEL_37;
    }
LABEL_40:
    Hasher._combine(_:)(0);
    if (v55) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    goto LABEL_42;
  }
  Hasher._combine(_:)(0);
  long long v35 = v54;
  if (!v54) {
    goto LABEL_40;
  }
LABEL_37:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v35);
  swift_bridgeObjectRelease();
  if (!v55) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_42:
  if (v56 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v36 = v56 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }
  if (v57 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v37 = v57 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v58 == 2)
  {
    uint64_t v38 = 0;
  }
  else
  {
    uint64_t v38 = v58 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v38);
  if (v59 == 2)
  {
    uint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = v59 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v39 = v40;
  }
  Hasher._combine(_:)(v39);
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_55:
  swift_unknownObjectRelease_n();
  return Hasher._finalize()();
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerVSg_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI7VSg_TG5SRyAGGAMsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result = a3();
  if (!v3) {
    return v5;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

BOOL specialized static ByteCountFormatStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL v2 = *a1 == *a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  BOOL result = 0;
  if (v2 && ((a1[16] ^ a2[16]) & 1) == 0 && ((a1[17] ^ a2[17]) & 1) == 0)
  {
    long long v3 = *(_OWORD *)(a1 + 24);
    long long v5 = *(_OWORD *)(a2 + 24);
    long long v6 = v3;
    if (specialized static Locale.== infix(_:_:)((uint64_t)&v6, (uint64_t)&v5)) {
      return 1;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for ByteCountFormatStyle.Attributed(void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for ByteCountFormatStyle.Attributed(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed, (uint64_t (*)(void))lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed, (uint64_t (*)(void))lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed);
}

uint64_t instantiation function for generic protocol witness table for ByteCountFormatStyle(void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for ByteCountFormatStyle.Attributed(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type ByteCountFormatStyle and conformance ByteCountFormatStyle, (uint64_t (*)(void))lazy protocol witness table accessor for type ByteCountFormatStyle and conformance ByteCountFormatStyle, (uint64_t (*)(void))lazy protocol witness table accessor for type ByteCountFormatStyle and conformance ByteCountFormatStyle);
}

uint64_t instantiation function for generic protocol witness table for ByteCountFormatStyle.Attributed(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a1[1] = a4();
  a1[2] = a5();
  uint64_t result = a6();
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ByteCountFormatStyle and conformance ByteCountFormatStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle);
  }
  return result;
}

unsigned char *sub_181F7FFC0@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

unsigned char *sub_181F7FFCC(unsigned char *result, unsigned char *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_181F7FFD8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(result + 8);
  return result;
}

void *sub_181F7FFE4(void *result, uint64_t a2)
{
  *(void *)(a2 + 8) = *result;
  return result;
}

uint64_t sub_181F7FFF0@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 16);
  return result;
}

unsigned char *sub_181F7FFFC(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 16) = *result;
  return result;
}

uint64_t sub_181F80008@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 17);
  return result;
}

unsigned char *sub_181F80014(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 17) = *result;
  return result;
}

uint64_t sub_181F80020@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *(_OWORD *)(a1 + 24);
  return swift_unknownObjectRetain();
}

__n128 sub_181F80030(__n128 *a1, uint64_t a2)
{
  __n128 v4 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v4;
  *(__n128 *)(a2 + 24) = v4;
  return result;
}

ValueMetadata *type metadata accessor for ByteCountFormatStyle()
{
  return &type metadata for ByteCountFormatStyle;
}

unsigned char *storeEnumTagSinglePayload for ByteCountFormatStyle.Style(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F8016CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ByteCountFormatStyle.Style()
{
  return &type metadata for ByteCountFormatStyle.Style;
}

ValueMetadata *type metadata accessor for ByteCountFormatStyle.Units()
{
  return &type metadata for ByteCountFormatStyle.Units;
}

ValueMetadata *type metadata accessor for ByteCountFormatStyle.Attributed()
{
  return &type metadata for ByteCountFormatStyle.Attributed;
}

unsigned char *storeEnumTagSinglePayload for ByteCountFormatStyle.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181F80260);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for ByteCountFormatStyle.CodingKeys()
{
  return &unk_1ECA3C430;
}

unsigned char *storeEnumTagSinglePayload for ByteCountFormatStyle.Attributed.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F80364);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ByteCountFormatStyle.Attributed.CodingKeys()
{
  return &unk_1ECA3C210;
}

uint64_t outlined retain of ByteCountFormatStyle.Attributed(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in localizedParens(locale:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ulocdata_open();
  *a1 = result;
  return result;
}

void *partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)@<X0>(void *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t _s10Foundation24ICULegacyNumberFormatterC0C10FormatTypeOWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_181F8070C()
{
  uint64_t v1 = *(void *)(type metadata accessor for ICULegacyNumberFormatter.Signature(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v6 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  }
  else
  {
    if (EnumCaseMultiPayload > 1) {
      goto LABEL_7;
    }
    uint64_t v6 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  }
  uint64_t v7 = v0 + v3 + *(int *)(v6 + 36);
  uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
LABEL_7:
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, v3 + v4, v2 | 7);
}

uint64_t outlined init with take of ICULegacyNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t PredicateExpressions.SequenceContains.init(sequence:element:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for PredicateExpressions.SequenceContains();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 68), a2, a4);
}

uint64_t PredicateExpressions.SequenceContains.evaluate(_:)(uint64_t *a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a2[5];
  uint64_t v25 = v2[3];
  uint64_t v26 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v22 - v6;
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[2];
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(v10 - 8);
  double v11 = MEMORY[0x1F4188790](v10);
  int v13 = (char *)&v22 - v12;
  uint64_t v14 = *a1;
  uint64_t v28 = v14;
  uint64_t v15 = v27;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, double))(v8 + 16))(&v28, v9, v8, v11);
  if (!v15)
  {
    uint64_t v16 = v10;
    uint64_t v17 = v24;
    uint64_t v28 = v14;
    (*(void (**)(uint64_t *, uint64_t))(v26 + 16))(&v28, v25);
    uint64_t v19 = v16;
    uint64_t v27 = v2[6];
    uint64_t v20 = dispatch thunk of Sequence._customContainsEquatableElement(_:)();
    if (v20 == 2)
    {
      MEMORY[0x1F4188790](v20);
      uint64_t v21 = v27;
      *(&v22 - 4) = v16;
      *(&v22 - 3) = v21;
      *(&v22 - 2) = v2[7];
      *(&v22 - 1) = (uint64_t)v7;
      LOBYTE(v2) = Sequence.contains(where:)();
      uint64_t v19 = v16;
    }
    else
    {
      LOBYTE(v2) = v20 & 1;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v13, v19);
  }
  return v2 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.SequenceContains<A, B>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = PredicateExpressions.SequenceContains.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

uint64_t PredicateExpressions.SequenceContainsWhere.init(_:builder:)@<X0>(uint64_t a1@<X0>, void (*a2)(void *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return PredicateExpressions.SequenceContainsWhere.init(_:builder:)(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.SequenceContainsWhere);
}

uint64_t PredicateExpressions.SequenceContainsWhere.evaluate(_:)(uint64_t *a1, void *a2)
{
  return PredicateExpressions.SequenceContainsWhere.evaluate(_:)(a1, a2, (uint64_t)partial apply for closure #1 in PredicateExpressions.SequenceContainsWhere.evaluate(_:), MEMORY[0x1E4FBB288]) & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.SequenceContainsWhere<A, B>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = PredicateExpressions.SequenceContainsWhere.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

uint64_t PredicateExpressions.SequenceAllSatisfy.variable.getter@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(v2 + *(int *)(result + 64));
  return result;
}

uint64_t PredicateExpressions.SequenceAllSatisfy.init(_:builder:)@<X0>(uint64_t a1@<X0>, void (*a2)(void *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return PredicateExpressions.SequenceContainsWhere.init(_:builder:)(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.SequenceAllSatisfy);
}

uint64_t PredicateExpressions.SequenceContainsWhere.init(_:builder:)@<X0>(uint64_t a1@<X0>, void (*a2)(void *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t (*a9)(void, void *))
{
  v24[1] = a3;
  uint64_t v25 = a2;
  uint64_t v15 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  long long v18 = (char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for nextID != -1)
  {
    uint64_t v23 = v16;
    swift_once();
    uint64_t v16 = v23;
  }
  unint64_t add_explicit = atomic_fetch_add_explicit(&static PredicateExpressions.VariableID.nextID, 1uLL, memory_order_relaxed);
  v26[0] = a4;
  v26[1] = a5;
  v26[2] = a6;
  v26[3] = a7;
  v26[4] = v16;
  uint64_t v20 = a9(0, v26);
  *(void *)(a8 + *(int *)(v20 + 64)) = add_explicit;
  uint64_t v21 = *(void *)(a4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(a8, a1, a4);
  v26[0] = add_explicit;
  v25(v26);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a1, a4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(a8 + *(int *)(v20 + 60), v18, a5);
}

uint64_t PredicateExpressions.SequenceAllSatisfy.evaluate(_:)(uint64_t *a1, void *a2)
{
  return PredicateExpressions.SequenceContainsWhere.evaluate(_:)(a1, a2, (uint64_t)partial apply for closure #1 in PredicateExpressions.SequenceAllSatisfy.evaluate(_:), MEMORY[0x1E4FBB250]) & 1;
}

uint64_t PredicateExpressions.SequenceContainsWhere.evaluate(_:)(uint64_t *a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, double))
{
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  double v11 = (char *)&v21 - v10;
  uint64_t v27 = *a1;
  uint64_t v26 = v27;
  uint64_t v12 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16);
  swift_bridgeObjectRetain();
  uint64_t v13 = v12(&v26, v9, v8);
  if (!v5)
  {
    uint64_t v14 = v22;
    double v15 = MEMORY[0x1F4188790](v13);
    uint64_t v16 = a2[3];
    *(&v21 - 8) = v9;
    *(&v21 - 7) = v16;
    uint64_t v18 = a2[5];
    uint64_t v17 = a2[6];
    *(&v21 - 6) = v8;
    *(&v21 - 5) = v18;
    *(&v21 - 4) = v17;
    *(&v21 - 3) = (uint64_t)&v27;
    *(&v21 - 2) = v4;
    uint64_t v19 = AssociatedTypeWitness;
    LOBYTE(v4) = v24(v23, v15);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v19);
  }
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t closure #1 in PredicateExpressions.SequenceContainsWhere.evaluate(_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(void, uint64_t *, double))
{
  uint64_t v28 = a2;
  uint64_t v27 = a1;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = type metadata accessor for Optional();
  double v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v19 = (char *)&v27 - v18;
  v30[0] = a4;
  v30[1] = a5;
  v30[2] = a6;
  v30[3] = a7;
  v30[4] = a8;
  uint64_t v20 = *(void *)(a3 + *(int *)(a9(0, v30, v17) + 64));
  uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v19, v27, AssociatedTypeWitness);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v19, 0, 1, AssociatedTypeWitness);
  v30[0] = v20;
  uint64_t v22 = (uint64_t)v19;
  uint64_t v23 = v28;
  PredicateBindings.subscript.setter(v22, v30, AssociatedTypeWitness);
  v30[0] = *v23;
  uint64_t v24 = v29;
  (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t))(a7 + 16))(&v31, v30, a5, a7);
  if (!v24) {
    char v25 = v31;
  }
  return v25 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.SequenceAllSatisfy<A, B>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = PredicateExpressions.SequenceAllSatisfy.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

uint64_t PredicateExpressions.SequenceStartsWith.prefix.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 76));
}

uint64_t PredicateExpressions.SequenceStartsWith.init(base:prefix:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for PredicateExpressions.SequenceStartsWith();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 76), a2, a4);
}

uint64_t PredicateExpressions.SequenceStartsWith.evaluate(_:)(uint64_t *a1, void *a2)
{
  uint64_t v5 = a2[5];
  uint64_t v23 = a2[3];
  uint64_t v24 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v25 = (char *)&v21 - v7;
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[2];
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v21 - v13;
  uint64_t v15 = *a1;
  uint64_t v27 = v15;
  uint64_t v16 = v26;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, double))(v8 + 16))(&v27, v9, v8, v12);
  if (!v16)
  {
    uint64_t v17 = v10;
    uint64_t v26 = v11;
    uint64_t v18 = v22;
    uint64_t v27 = v15;
    (*(void (**)(uint64_t *, uint64_t))(v24 + 16))(&v27, v23);
    uint64_t v20 = v25;
    char v2 = Sequence<>.starts<A>(with:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v17);
  }
  return v2 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.SequenceStartsWith<A, B>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = PredicateExpressions.SequenceStartsWith.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

uint64_t static PredicateExpressions.build_contains<A, B>(_:where:)@<X0>(uint64_t a1@<X0>, void (*a2)(void *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return static PredicateExpressions.build_contains<A, B>(_:where:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.SequenceContainsWhere);
}

uint64_t static PredicateExpressions.build_allSatisfy<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, void (*a2)(void *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return static PredicateExpressions.build_contains<A, B>(_:where:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.SequenceAllSatisfy);
}

uint64_t static PredicateExpressions.build_contains<A, B>(_:where:)@<X0>(uint64_t a1@<X0>, void (*a2)(void *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t (*a10)(void, void *))
{
  uint64_t v27 = a7;
  uint64_t v28 = a8;
  uint64_t v26 = a6;
  uint64_t v29 = a3;
  uint64_t v30 = a2;
  uint64_t v31 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v15 - 8);
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *(void (**)(char *, double))(v16 + 16);
  v21(v20, v18);
  if (one-time initialization token for nextID != -1) {
    swift_once();
  }
  unint64_t add_explicit = atomic_fetch_add_explicit(&static PredicateExpressions.VariableID.nextID, 1uLL, memory_order_relaxed);
  v32[0] = a4;
  v32[1] = a5;
  v32[2] = v26;
  void v32[3] = v27;
  v32[4] = v28;
  uint64_t v23 = a10(0, v32);
  *(void *)(a9 + *(int *)(v23 + 64)) = add_explicit;
  ((void (*)(uint64_t, char *, uint64_t))v21)(a9, v20, a4);
  v32[0] = add_explicit;
  v30(v32);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v20, a4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v31 + 32))(a9 + *(int *)(v23 + 60), v14, a5);
}

uint64_t static PredicateExpressions.build_starts<A, B>(_:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a5, a1);
  uint64_t v8 = type metadata accessor for PredicateExpressions.SequenceStartsWith();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a5 + *(int *)(v8 + 76), a2, a4);
}

uint64_t PredicateExpressions.SequenceContains.description.getter()
{
  _StringGuts.grow(_:)(43);
  v0._uint64_t object = (void *)0x80000001823B4030;
  v0._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x6E656D656C65202CLL;
  v1._uint64_t object = (void *)0xEB00000000203A74;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 41;
  v2._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t PredicateExpressions.SequenceContainsWhere.description.getter(int a1)
{
  return PredicateExpressions.SequenceContainsWhere.description.getter(a1, 59, 0xD000000000000020, (void *)0x80000001823B4050);
}

uint64_t PredicateExpressions.SequenceAllSatisfy.description.getter(int a1)
{
  return PredicateExpressions.SequenceContainsWhere.description.getter(a1, 56, 0xD00000000000001DLL, (void *)0x80000001823B4080);
}

uint64_t PredicateExpressions.SequenceContainsWhere.description.getter(int a1, Swift::Int a2, uint64_t a3, void *a4)
{
  _StringGuts.grow(_:)(a2);
  v6._uint64_t countAndFlagsBits = a3;
  v6._uint64_t object = a4;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  v7._uint64_t countAndFlagsBits = 0x626169726176202CLL;
  v7._uint64_t object = (void *)0xEC000000203A656CLL;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 41;
  v9._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = 0x656C626169726156;
  v10._uint64_t object = (void *)0xE900000000000028;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0x203A74736574202CLL;
  v11._uint64_t object = (void *)0xE800000000000000;
  String.append(_:)(v11);
  _print_unlocked<A, B>(_:_:)();
  v12._uint64_t countAndFlagsBits = 41;
  v12._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return 0;
}

uint64_t PredicateExpressions.SequenceContains<>.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t PredicateExpressions.SequenceContains<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v34 = a4;
  uint64_t v36 = a3;
  uint64_t v32 = a5;
  uint64_t v31 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  Swift::String v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v11);
  long long v35 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = v13;
  v37[0] = v13;
  v37[1] = v14;
  v37[2] = v15;
  uint64_t v38 = v16;
  uint64_t v39 = v18;
  uint64_t v40 = v17;
  uint64_t v19 = type metadata accessor for PredicateExpressions.SequenceContains();
  uint64_t v30 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v27 - v20;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v5) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v28 = v21;
  uint64_t v29 = a1;
  uint64_t v27 = v19;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v37, v38);
  uint64_t v22 = v35;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v23 = v28;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v28, v22, v41);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v37, v38);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v24 = v27;
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(&v23[*(int *)(v27 + 68)], v9, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  uint64_t v25 = v30;
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v32, v23, v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v23, v24);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceContains<A, B>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.SequenceContains<>.init(from:)(a1, *(void *)(a2 + 24), *(void *)(a3 - 8), *(void *)(a3 - 24), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.SequenceContains<A, B>(void *a1)
{
  return PredicateExpressions.SequenceContains<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.SequenceContainsWhere<>.encode(to:)(void *a1, uint64_t a2)
{
  return PredicateExpressions.SequenceContainsWhere<>.encode(to:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  unsigned char v6[24];
  uint64_t v7;
  uint64_t v8;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v3)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    uint64_t v8 = *(void *)(v2 + *(int *)(a2 + 64));
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedTypeWitness();
    type metadata accessor for PredicateExpressions.Variable();
    swift_getWitnessTable();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t PredicateExpressions.SequenceContainsWhere<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  return PredicateExpressions.SequenceContainsWhere<>.init(from:)(a1, a2, a3, a4, a5, a6);
}

{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void, void *, double);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void *v42;
  void v43[3];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  uint64_t v41 = a4;
  uint64_t v34 = a6;
  Swift::String v9 = *(void *)(a3 - 8);
  uint64_t v37 = a5;
  uint64_t v38 = v9;
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v40 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[0] = v16;
  v43[1] = v17;
  long long v35 = v19;
  uint64_t v36 = v18;
  v43[2] = v18;
  uint64_t v44 = v20;
  unint64_t v45 = v19;
  uint64_t v22 = v21(0, v43, v14);
  uint64_t v33 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v32 - v23;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v25 = v42;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v25) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v42 = a1;
  uint64_t v32 = v24;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v43, v44);
  uint64_t v26 = v40;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v32, v26, a2);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v43, v44);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v41 = v22;
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(&v32[*(int *)(v22 + 60)], v11, a3);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for PredicateExpressions.Variable();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v43, v44);
  swift_getWitnessTable();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v27 = (uint64_t)v42;
  uint64_t v28 = v41;
  uint64_t v29 = v32;
  *(void *)&v32[*(int *)(v41 + 64)] = v46;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  uint64_t v30 = v33;
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 16))(v34, v29, v28);
  __swift_destroy_boxed_opaque_existential_1(v27);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v29, v28);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceContainsWhere<A, B>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceContainsWhere<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, uint64_t, void, void))PredicateExpressions.SequenceContainsWhere<>.init(from:), a5, a6);
}

uint64_t PredicateExpressions.SequenceAllSatisfy<>.encode(to:)(void *a1, uint64_t a2)
{
  return PredicateExpressions.SequenceContainsWhere<>.encode(to:)(a1, a2);
}

uint64_t PredicateExpressions.SequenceAllSatisfy<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  return PredicateExpressions.SequenceContainsWhere<>.init(from:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceAllSatisfy<A, B>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceContainsWhere<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, uint64_t, void, void))PredicateExpressions.SequenceAllSatisfy<>.init(from:), a5, a6);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceContainsWhere<A, B>(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, uint64_t, void, void), uint64_t a5, uint64_t a6)
{
  return a4(a1, a2[2], a2[3], a2[4], *(void *)(a3 - 8), a6, a2[5], *(void *)(a3 - 24));
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.SequenceAllSatisfy<A, B>(void *a1, uint64_t a2)
{
  return PredicateExpressions.SequenceAllSatisfy<>.encode(to:)(a1, a2);
}

uint64_t PredicateExpressions.SequenceStartsWith<>.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t PredicateExpressions.SequenceStartsWith<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v35 = a4;
  uint64_t v37 = a3;
  uint64_t v33 = a5;
  uint64_t v32 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  Swift::String v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = *(void *)(v10 - 8);
  *(double *)&long long v12 = MEMORY[0x1F4188790](v11);
  uint64_t v36 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = v14;
  v38[0] = v14;
  v38[1] = v15;
  v38[2] = v16;
  uint64_t v39 = v17;
  long long v40 = v12;
  uint64_t v41 = v18;
  uint64_t v19 = type metadata accessor for PredicateExpressions.SequenceStartsWith();
  uint64_t v31 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v27 - v20;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v5) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v29 = v21;
  uint64_t v30 = a1;
  uint64_t v28 = v19;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v38, v39);
  uint64_t v22 = v36;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v23 = v29;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v29, v22, v42);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v38, v39);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v24 = v28;
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(&v23[*(int *)(v28 + 76)], v9, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  uint64_t v25 = v31;
  (*(void (**)(uint64_t, char *, uint64_t))(v31 + 16))(v33, v23, v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v23, v24);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceStartsWith<A, B>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.SequenceStartsWith<>.init(from:)(a1, *(void *)(a2 + 24), *(void *)(a3 - 8), *(void *)(a3 - 24), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.SequenceStartsWith<A, B>(void *a1)
{
  return PredicateExpressions.SequenceStartsWith<>.encode(to:)(a1);
}

uint64_t partial apply for closure #1 in Sequence<>.contains(_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t partial apply for closure #1 in PredicateExpressions.SequenceContainsWhere.evaluate(_:)(uint64_t a1)
{
  return partial apply for closure #1 in PredicateExpressions.SequenceContainsWhere.evaluate(_:)(a1, (uint64_t (*)(void, uint64_t *, double))type metadata accessor for PredicateExpressions.SequenceContainsWhere) & 1;
}

uint64_t type metadata accessor for PredicateExpressions.SequenceAllSatisfy()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for closure #1 in PredicateExpressions.SequenceAllSatisfy.evaluate(_:)(uint64_t a1)
{
  return partial apply for closure #1 in PredicateExpressions.SequenceContainsWhere.evaluate(_:)(a1, (uint64_t (*)(void, uint64_t *, double))type metadata accessor for PredicateExpressions.SequenceAllSatisfy) & 1;
}

uint64_t partial apply for closure #1 in PredicateExpressions.SequenceContainsWhere.evaluate(_:)(uint64_t a1, uint64_t (*a2)(void, uint64_t *, double))
{
  return closure #1 in PredicateExpressions.SequenceContainsWhere.evaluate(_:)(a1, *(uint64_t **)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), a2) & 1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.SequenceContainsWhere(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  if (v10 < a2)
  {
    unint64_t v12 = ((*(void *)(*(void *)(v5 - 8) + 64) + (v11 & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v13 = a2 - v10;
    uint64_t v14 = v12 & 0xFFFFFFF8;
    if ((v12 & 0xFFFFFFF8) != 0) {
      unsigned int v15 = 2;
    }
    else {
      unsigned int v15 = v13 + 1;
    }
    if (v15 >= 0x10000) {
      LODWORD(v16) = 4;
    }
    else {
      LODWORD(v16) = 2;
    }
    if (v15 < 0x100) {
      LODWORD(v16) = 1;
    }
    if (v15 >= 2) {
      uint64_t v16 = v16;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *((unsigned __int8 *)a1 + v12);
        if (!v17) {
          break;
        }
        goto LABEL_21;
      case 2:
        int v17 = *(unsigned __int16 *)((char *)a1 + v12);
        if (v17) {
          goto LABEL_21;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x181F83290);
      case 4:
        int v17 = *(int *)((char *)a1 + v12);
        if (!v17) {
          break;
        }
LABEL_21:
        unsigned int v18 = v17 - 1;
        if (v14)
        {
          unsigned int v18 = 0;
          int v19 = *a1;
        }
        else
        {
          int v19 = 0;
        }
        return v10 + (v19 | v18) + 1;
      default:
        break;
    }
  }
  if (!v10) {
    return 0;
  }
  if (v6 >= v8) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
}

void storeEnumTagSinglePayload for PredicateExpressions.SequenceContainsWhere(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = ((*(void *)(*(void *)(v8 - 8) + 64) + (v13 & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v12 >= a3)
  {
    int v18 = 0;
    int v19 = a2 - v12;
    if (a2 <= v12)
    {
LABEL_17:
      switch(v18)
      {
        case 1:
          a1[v14] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v14] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_41;
        case 4:
          *(_DWORD *)&a1[v14] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 >= v10)
            {
              uint64_t v24 = *(void (**)(void))(v6 + 56);
              v24();
            }
            else
            {
              unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
              uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
              v23(v22);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v15 = a3 - v12;
    if (((*(_DWORD *)(*(void *)(v8 - 8) + 64) + (v13 & ~v11) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v16 = v15 + 1;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v16 >= 0x10000) {
      int v17 = 4;
    }
    else {
      int v17 = 2;
    }
    if (v16 < 0x100) {
      int v17 = 1;
    }
    if (v16 >= 2) {
      int v18 = v17;
    }
    else {
      int v18 = 0;
    }
    int v19 = a2 - v12;
    if (a2 <= v12) {
      goto LABEL_17;
    }
  }
  if (((*(_DWORD *)(*(void *)(v8 - 8) + 64) + (v13 & ~v11) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v20 = v19;
  }
  else {
    int v20 = 1;
  }
  if (((*(_DWORD *)(*(void *)(v8 - 8) + 64) + (v13 & ~v11) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v21 = ~v12 + a2;
    bzero(a1, v14);
    *(_DWORD *)a1 = v21;
  }
  switch(v18)
  {
    case 1:
      a1[v14] = v20;
      break;
    case 2:
      *(_WORD *)&a1[v14] = v20;
      break;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x181F83504);
    case 4:
      *(_DWORD *)&a1[v14] = v20;
      break;
    default:
      return;
  }
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.SequenceContains(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for PredicateExpressions.SequenceContains(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x181F839F0);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.SequenceContainsWhere<A, B>(void *a1, uint64_t a2)
{
  return protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.SequenceAllSatisfy<A, B>(a1, a2);
}

uint64_t PredicateExpressions.StringCaseInsensitiveCompare.root.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.StringCaseInsensitiveCompare.other.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 68));
}

uint64_t PredicateExpressions.StringCaseInsensitiveCompare.init(root:other:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for PredicateExpressions.StringCaseInsensitiveCompare();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 68), a2, a4);
}

id PredicateExpressions.StringCaseInsensitiveCompare.evaluate(_:)(uint64_t *a1, void *a2)
{
  uint64_t v5 = a2[5];
  uint64_t v23 = a2[3];
  uint64_t v24 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v25 = (char *)&v21 - v7;
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[2];
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x1F4188790](v10);
  size_t v14 = (char *)&v21 - v13;
  uint64_t v15 = *a1;
  uint64_t v27 = v15;
  uint64_t v16 = v26;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, double))(v8 + 16))(&v27, v9, v8, v12);
  if (!v16)
  {
    uint64_t v26 = v11;
    uint64_t v27 = v15;
    (*(void (**)(uint64_t *, uint64_t))(v24 + 16))(&v27, v23);
    StringProtocol._ephemeralString.getter();
    unsigned int v18 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v21 = AssociatedTypeWitness;
    int v19 = v25;
    StringProtocol._ephemeralString.getter();
    uint64_t v20 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v2 = objc_msgSend(v18, sel_caseInsensitiveCompare_, v20);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v10);
  }
  return v2;
}

id protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.StringCaseInsensitiveCompare<A, B>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  id result = PredicateExpressions.StringCaseInsensitiveCompare.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t static PredicateExpressions.build_caseInsensitiveCompare<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a5, a1);
  uint64_t v8 = type metadata accessor for PredicateExpressions.StringCaseInsensitiveCompare();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a5 + *(int *)(v8 + 68), a2, a4);
}

uint64_t PredicateExpressions.StringCaseInsensitiveCompare.description.getter()
{
  _StringGuts.grow(_:)(49);
  v0._uint64_t object = (void *)0x80000001823B40A0;
  v0._uint64_t countAndFlagsBits = 0xD000000000000023;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x3A726568746F202CLL;
  v1._uint64_t object = (void *)0xE900000000000020;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 41;
  v2._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t PredicateExpressions.StringCaseInsensitiveCompare<>.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t PredicateExpressions.StringCaseInsensitiveCompare<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v34 = a4;
  uint64_t v36 = a3;
  uint64_t v32 = a5;
  uint64_t v31 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v35 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = v13;
  v37[0] = v13;
  v37[1] = v14;
  v37[2] = v15;
  uint64_t v38 = v16;
  uint64_t v39 = v18;
  uint64_t v40 = v17;
  uint64_t v19 = type metadata accessor for PredicateExpressions.StringCaseInsensitiveCompare();
  uint64_t v30 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v27 - v20;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v5) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v28 = v21;
  uint64_t v29 = a1;
  uint64_t v27 = v19;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v37, v38);
  uint64_t v22 = v35;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v23 = v28;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v28, v22, v41);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v37, v38);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v24 = v27;
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(&v23[*(int *)(v27 + 68)], v9, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  uint64_t v25 = v30;
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v32, v23, v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v23, v24);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.StringCaseInsensitiveCompare<A, B>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.StringCaseInsensitiveCompare<>.init(from:)(a1, *(void *)(a2 + 24), *(void *)(a3 - 8), *(void *)(a3 - 24), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.StringCaseInsensitiveCompare<A, B>(void *a1)
{
  return PredicateExpressions.StringCaseInsensitiveCompare<>.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.StringCaseInsensitiveCompare(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for PredicateExpressions.StringCaseInsensitiveCompare(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x181F84A48);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t AttributedSubstring.description.getter()
{
  return AttributedString.Guts.description(in:)();
}

uint64_t AttributedSubstring.runs.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = swift_retain();
  return AttributedString.Runs.init(_:in:)(v2, a1);
}

uint64_t AttributedSubstring.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a1;
  long long v7 = *(_OWORD *)(v3 + 24);
  long long v16 = *(_OWORD *)(v3 + 8);
  long long v17 = v7;
  long long v8 = *(_OWORD *)(v3 + 56);
  long long v18 = *(_OWORD *)(v3 + 40);
  long long v19 = v8;
  uint64_t v9 = *(void *)(*MEMORY[0x1E4FBC5F0] + v6 + 8);
  swift_retain();
  AttributedString.Guts.getUniformValue<A>(in:key:)(v9, a2, (uint64_t)v14);
  if (v15)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v14, (uint64_t)&v13);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v14);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(a3, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    outlined destroy of AttributedString._AttributeValue?((uint64_t)v14);
    uint64_t v11 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a3, 1, 1, v11);
  }
  return swift_release();
}

uint64_t AttributedSubstring.characters.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(_OWORD **)v1;
  long long v4 = *(_OWORD *)(v1 + 24);
  v23[7] = *(_OWORD *)(v1 + 8);
  v23[8] = v4;
  long long v5 = *(_OWORD *)(v1 + 56);
  v23[9] = *(_OWORD *)(v1 + 40);
  v23[10] = v5;
  long long v6 = v3[1];
  long long v7 = v3[3];
  v24[1] = v3[2];
  void v24[2] = v7;
  v24[0] = v6;
  swift_retain_n();
  outlined retain of Locale((uint64_t)v24);
  BigString.subscript.getter();
  outlined release of Locale((uint64_t)v24);
  uint64_t v8 = BigSubstring.startIndex.getter();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v15 = BigSubstring.endIndex.getter();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  outlined release of Locale((uint64_t)v23);
  uint64_t result = swift_release();
  *a1 = v3;
  a1[1] = v8;
  a1[2] = v10;
  a1[3] = v12;
  a1[4] = v14;
  a1[5] = v15;
  a1[6] = v17;
  a1[7] = v19;
  a1[8] = v21;
  a1[9] = 0;
  return result;
}

uint64_t AttributedSubstring.setAttributes(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    long long v5 = (void *)*v1;
    long long v6 = *(_OWORD *)(*v1 + 16);
    long long v7 = *(_OWORD *)(*v1 + 48);
    v13[1] = *(_OWORD *)(*v1 + 32);
    v13[2] = v7;
    v13[0] = v6;
    uint64_t v8 = v5[8];
    uint64_t v9 = v5[9];
    uint64_t v10 = v5[10];
    uint64_t v11 = v5[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v13);
    swift_unknownObjectRetain();
    uint64_t *v2 = AttributedString.Guts.init(string:runs:)(v13, v8, v9, v10, v11);
    swift_release();
  }
  return AttributedString.Guts.setAttributes(_:in:)(v3, v4);
}

uint64_t AttributedSubstring.unicodeScalars.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(_OWORD **)v1;
  long long v4 = *(_OWORD *)(v1 + 24);
  long long v24 = *(_OWORD *)(v1 + 8);
  long long v25 = v4;
  long long v5 = *(_OWORD *)(v1 + 56);
  long long v26 = *(_OWORD *)(v1 + 40);
  long long v27 = v5;
  long long v6 = v3[2];
  long long v28 = v3[1];
  long long v29 = v6;
  long long v30 = v3[3];
  swift_retain_n();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)&v22);
  uint64_t v7 = BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  outlined release of Locale((uint64_t)v23);
  uint64_t result = swift_release();
  *a1 = v3;
  a1[1] = v7;
  a1[2] = v9;
  a1[3] = v11;
  a1[4] = v13;
  a1[5] = v14;
  a1[6] = v16;
  a1[7] = v18;
  a1[8] = v20;
  a1[9] = 0;
  return result;
}

uint64_t AttributedSubstring.init()@<X0>(uint64_t *a1@<X8>)
{
  BigString.init()();
  v38[0] = 0;
  MEMORY[0x185309530](v38, 8);
  uint64_t v2 = v38[0];
  type metadata accessor for AttributedString.Guts();
  uint64_t v3 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if (result)
  {
    long long v5 = v36[1];
    *(_OWORD *)(v3 + 16) = v36[0];
    *(_OWORD *)(v3 + 32) = v5;
    *(_OWORD *)(v3 + 48) = v36[2];
    *(void *)(v3 + 64) = 0;
    *(void *)(v3 + 72) = 0;
    *(void *)(v3 + 80) = 0;
    *(void *)(v3 + 88) = v2;
    swift_retain_n();
    outlined retain of Locale((uint64_t)v36);
    uint64_t v6 = BigString.startIndex.getter();
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    outlined release of Locale((uint64_t)v36);
    long long v13 = *(_OWORD *)(v3 + 32);
    v42[0] = *(_OWORD *)(v3 + 16);
    v42[1] = v13;
    long long v43 = *(_OWORD *)(v3 + 48);
    v44[0] = v42[0];
    v44[1] = v13;
    v44[2] = v43;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v44, (uint64_t)v45);
    outlined retain of Locale((uint64_t)v45);
    uint64_t v14 = BigString.endIndex.getter();
    uint64_t v16 = v15;
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    outlined release of Locale((uint64_t)v42);
    swift_release();
    v38[14] = v6;
    v38[15] = v8;
    v38[16] = v10;
    v38[17] = v12;
    v38[18] = v14;
    v38[19] = v16;
    v38[20] = v18;
    v38[21] = v20;
    long long v21 = *(_OWORD *)(v3 + 32);
    long long v39 = *(_OWORD *)(v3 + 16);
    long long v40 = v21;
    long long v41 = *(_OWORD *)(v3 + 48);
    swift_retain();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v37);
    uint64_t v22 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    uint64_t v28 = v27;
    uint64_t v29 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v31 = v30;
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    outlined release of Locale((uint64_t)v38);
    uint64_t result = swift_release_n();
    *a1 = v3;
    a1[1] = v22;
    a1[2] = v24;
    a1[3] = v26;
    a1[4] = v28;
    a1[5] = v29;
    a1[6] = v31;
    a1[7] = v33;
    a1[8] = v35;
    a1[9] = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AttributedSubstring.base.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_retain();
}

__n128 AttributedSubstring.startIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 8);
  long long v3 = *(_OWORD *)(v1 + 24);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 AttributedSubstring.endIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 40);
  long long v3 = *(_OWORD *)(v1 + 56);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t AttributedSubstring.replaceAttributes(_:with:)(uint64_t *a1, uint64_t *a2)
{
  long long v3 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if ((specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) == 0
    || (uint64_t result = specialized static Set.== infix(_:_:)(v5, v7), (result & 1) == 0))
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = (void *)*v2;
      long long v10 = *(_OWORD *)(*v2 + 16);
      long long v11 = *(_OWORD *)(*v2 + 48);
      v31[1] = *(_OWORD *)(*v2 + 32);
      v31[2] = v11;
      v31[0] = v10;
      uint64_t v12 = v9[8];
      uint64_t v13 = v9[9];
      uint64_t v14 = v9[10];
      uint64_t v15 = v9[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v31);
      swift_unknownObjectRetain();
      *long long v3 = AttributedString.Guts.init(string:runs:)(v31, v12, v13, v14, v15);
      swift_release();
    }
    uint64_t v29 = v7;
    if (specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v4)) {
      int v28 = 1;
    }
    else {
      int v28 = specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v6);
    }
    uint64_t v16 = v6;
    uint64_t v30 = MEMORY[0x1E4FBC860];
    uint64_t v17 = (void *)*v3;
    uint64_t v18 = BigString.Index.utf8Offset.getter();
    uint64_t v19 = BigString.Index.utf8Offset.getter();
    MEMORY[0x1F4188790](v19);
    void v27[2] = v4;
    v27[3] = v5;
    MEMORY[0x1F4188790](v20);
    void v24[2] = v4;
    v24[3] = v5;
    _OWORD v24[4] = v16;
    v24[5] = v29;
    char v25 = v28 & 1;
    uint64_t v26 = &v30;
    swift_retain();
    AttributedString._InternalRunsSlice.updateEach(when:with:)((uint64_t (*)(uint64_t, uint64_t))partial apply for closure #1 in AttributedString.replaceAttributes(_:with:), (uint64_t)v27, (void (*)(uint64_t *, uint64_t, uint64_t))partial apply for closure #2 in AttributedSubstring.replaceAttributes(_:with:), (uint64_t)v24, v17, v18, v19);
    swift_release();
    uint64_t v21 = v30;
    uint64_t v22 = *(void *)(v30 + 16);
    if (v22)
    {
      swift_bridgeObjectRetain();
      uint64_t v23 = (uint64_t *)(v21 + 40);
      do
      {
        AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(*(v23 - 1), *v23, 0, 0);
        v23 += 2;
        --v22;
      }
      while (v22);
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #2 in AttributedSubstring.replaceAttributes(_:with:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, void **a9)
{
  uint64_t v13 = a4 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a4 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(a4 + 64);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v18 = 0;
  while (1)
  {
    if (v16)
    {
      unint64_t v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v20 = v19 | (v18 << 6);
      goto LABEL_5;
    }
    int64_t v24 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v17) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v13 + 8 * v24);
    ++v18;
    if (!v25)
    {
      int64_t v18 = v24 + 1;
      if (v24 + 1 >= v17) {
        goto LABEL_23;
      }
      unint64_t v25 = *(void *)(v13 + 8 * v18);
      if (!v25)
      {
        int64_t v18 = v24 + 2;
        if (v24 + 2 >= v17) {
          goto LABEL_23;
        }
        unint64_t v25 = *(void *)(v13 + 8 * v18);
        if (!v25)
        {
          int64_t v18 = v24 + 3;
          if (v24 + 3 >= v17) {
            goto LABEL_23;
          }
          unint64_t v25 = *(void *)(v13 + 8 * v18);
          if (!v25) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v16 = (v25 - 1) & v25;
    unint64_t v20 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_5:
    uint64_t v21 = (unint64_t *)(*(void *)(a4 + 48) + 16 * v20);
    unint64_t v22 = *v21;
    unint64_t v23 = v21[1];
    uint64_t v34 = 0;
    memset(v33, 0, sizeof(v33));
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v33, v22, v23);
    swift_bridgeObjectRelease();
  }
  int64_t v26 = v24 + 4;
  if (v26 < v17)
  {
    unint64_t v25 = *(void *)(v13 + 8 * v26);
    if (!v25)
    {
      while (1)
      {
        int64_t v18 = v26 + 1;
        if (__OFADD__(v26, 1)) {
          break;
        }
        if (v18 >= v17) {
          goto LABEL_23;
        }
        unint64_t v25 = *(void *)(v13 + 8 * v18);
        ++v26;
        if (v25) {
          goto LABEL_22;
        }
      }
LABEL_30:
      __break(1u);
LABEL_31:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2] + 1, 1, a1);
      a1 = (void *)result;
      *(void *)int64_t v18 = result;
      goto LABEL_25;
    }
    int64_t v18 = v26;
    goto LABEL_22;
  }
LABEL_23:
  swift_release();
  LOBYTE(v33[0]) = 0;
  uint64_t result = specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(a6, (char *)v33);
  if ((a8 & 1) == 0) {
    return result;
  }
  int64_t v18 = (int64_t)a9;
  a1 = *a9;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a9 = a1;
  if ((result & 1) == 0) {
    goto LABEL_31;
  }
LABEL_25:
  unint64_t v29 = a1[2];
  unint64_t v28 = a1[3];
  if (v29 >= v28 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, a1);
    a1 = (void *)result;
  }
  a1[2] = v29 + 1;
  uint64_t v30 = &a1[2 * v29];
  v30[4] = a2;
  uint64_t v30[5] = a3;
  *(void *)int64_t v18 = a1;
  return result;
}

uint64_t AttributedSubstring.subscript.getter@<X0>(void *a1@<X8>)
{
  long long v3 = *(_OWORD **)v1;
  long long v4 = *(_OWORD *)(v1 + 24);
  long long v44 = *(_OWORD *)(v1 + 8);
  long long v45 = v4;
  long long v5 = *(_OWORD *)(v1 + 56);
  long long v46 = *(_OWORD *)(v1 + 40);
  long long v47 = v5;
  long long v6 = v3[1];
  long long v7 = v3[3];
  v48[1] = v3[2];
  v48[2] = v7;
  v48[0] = v6;
  swift_retain_n();
  outlined retain of Locale((uint64_t)v48);
  BigString.subscript.getter();
  outlined release of Locale((uint64_t)v48);
  uint64_t v8 = BigSubstring.startIndex.getter();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v15 = BigSubstring.endIndex.getter();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  outlined release of Locale((uint64_t)v38);
  swift_release_n();
  v40[0] = v3;
  v40[1] = v8;
  v40[2] = v10;
  v40[3] = v12;
  v40[4] = v14;
  v40[5] = v15;
  v40[6] = v17;
  v40[7] = v19;
  v40[8] = v21;
  v40[9] = 0;
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  swift_release();
  long long v22 = v3[2];
  long long v41 = v3[1];
  long long v42 = v22;
  long long v43 = v3[3];
  swift_retain_n();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v39);
  uint64_t v23 = BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v30 = BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  outlined release of Locale((uint64_t)v40);
  uint64_t result = swift_release();
  *a1 = v3;
  a1[1] = v23;
  a1[2] = v25;
  a1[3] = v27;
  a1[4] = v29;
  a1[5] = v30;
  a1[6] = v32;
  a1[7] = v34;
  a1[8] = v36;
  a1[9] = 0;
  return result;
}

Swift::Int AttributedSubstring.hashValue.getter()
{
  long long v1 = v0[3];
  long long v7 = v0[2];
  long long v8 = v1;
  long long v9 = v0[4];
  long long v2 = v0[1];
  long long v5 = *v0;
  long long v6 = v2;
  Hasher.init(_seed:)();
  specialized AttributedStringProtocol.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for AttributedStringProtocol.runs.getter in conformance AttributedSubstring@<X0>(void *a1@<X8>)
{
  uint64_t v2 = swift_retain();
  return AttributedString.Runs.init(_:in:)(v2, a1);
}

uint64_t protocol witness for AttributedStringProtocol.characters.getter in conformance AttributedSubstring@<X0>(void *a1@<X8>)
{
  long long v3 = *(_OWORD **)v1;
  long long v4 = *(_OWORD *)(v1 + 24);
  v23[7] = *(_OWORD *)(v1 + 8);
  v23[8] = v4;
  long long v5 = *(_OWORD *)(v1 + 56);
  v23[9] = *(_OWORD *)(v1 + 40);
  v23[10] = v5;
  long long v6 = v3[1];
  long long v7 = v3[3];
  v24[1] = v3[2];
  void v24[2] = v7;
  v24[0] = v6;
  swift_retain_n();
  outlined retain of Locale((uint64_t)v24);
  BigString.subscript.getter();
  outlined release of Locale((uint64_t)v24);
  uint64_t v8 = BigSubstring.startIndex.getter();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v15 = BigSubstring.endIndex.getter();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  outlined release of Locale((uint64_t)v23);
  uint64_t result = swift_release();
  *a1 = v3;
  a1[1] = v8;
  a1[2] = v10;
  a1[3] = v12;
  a1[4] = v14;
  a1[5] = v15;
  a1[6] = v17;
  a1[7] = v19;
  a1[8] = v21;
  a1[9] = 0;
  return result;
}

uint64_t protocol witness for AttributedStringProtocol.unicodeScalars.getter in conformance AttributedSubstring@<X0>(void *a1@<X8>)
{
  long long v3 = *(_OWORD **)v1;
  long long v4 = *(_OWORD *)(v1 + 24);
  long long v24 = *(_OWORD *)(v1 + 8);
  long long v25 = v4;
  long long v5 = *(_OWORD *)(v1 + 56);
  long long v26 = *(_OWORD *)(v1 + 40);
  long long v27 = v5;
  long long v6 = v3[2];
  long long v28 = v3[1];
  long long v29 = v6;
  long long v30 = v3[3];
  swift_retain_n();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)&v22);
  uint64_t v7 = BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  outlined release of Locale((uint64_t)v23);
  uint64_t result = swift_release();
  *a1 = v3;
  a1[1] = v7;
  a1[2] = v9;
  a1[3] = v11;
  a1[4] = v13;
  a1[5] = v14;
  a1[6] = v16;
  a1[7] = v18;
  a1[8] = v20;
  a1[9] = 0;
  return result;
}

uint64_t AttributedSubstring.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  long long v5 = *(_OWORD *)(v3 + 24);
  long long v13 = *(_OWORD *)(v3 + 8);
  long long v14 = v5;
  long long v6 = *(_OWORD *)(v3 + 56);
  long long v15 = *(_OWORD *)(v3 + 40);
  long long v16 = v6;
  AttributedString.Guts.getUniformValue<A>(in:key:)(a1, a2, (uint64_t)v11);
  if (v12)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v11, (uint64_t)&v10);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v11);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(a3, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    outlined destroy of AttributedString._AttributeValue?((uint64_t)v11);
    uint64_t v9 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a3, 1, 1, v9);
  }
}

uint64_t (*protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedSubstring(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = AttributedSubstring.subscript.modify(v8, a2, a3, a4);
  return protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString;
}

{
  void *v7;
  uint64_t v8;

  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[4] = AttributedSubstring.subscript.modify(v7, v8, a3, a4);
  return protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString;
}

void (*AttributedSubstring.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, uint64_t a2)
{
  uint64_t v9 = (char *)malloc(0xF0uLL);
  *a1 = v9;
  *((void *)v9 + 24) = a4;
  *((void *)v9 + 25) = v4;
  *((void *)v9 + 22) = a2;
  *((void *)v9 + 23) = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  *((void *)v9 + 26) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *((void *)v9 + 27) = v12;
  size_t v13 = *(void *)(v12 + 64);
  *((void *)v9 + 28) = malloc(v13);
  long long v14 = malloc(v13);
  *((void *)v9 + 29) = v14;
  *(_OWORD *)(v9 + 72) = *(_OWORD *)(v4 + 8);
  *(_OWORD *)(v9 + 88) = *(_OWORD *)(v4 + 24);
  *(_OWORD *)(v9 + 104) = *(_OWORD *)(v4 + 40);
  *(_OWORD *)(v9 + 120) = *(_OWORD *)(v4 + 56);
  AttributedString.Guts.getUniformValue<A>(in:key:)(a3, a4, (uint64_t)v9);
  if (*((void *)v9 + 3))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v9, (uint64_t)(v9 + 136));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v9);
    uint64_t v15 = 0;
  }
  else
  {
    outlined destroy of AttributedString._AttributeValue?((uint64_t)v9);
    uint64_t v15 = 1;
  }
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v14, v15, 1, AssociatedTypeWitness);
  return AttributedSubstring.subscript.modify;
}

void AttributedSubstring.subscript.modify(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[28];
  uint64_t v4 = (void *)(*a1)[29];
  if (a2)
  {
    uint64_t v5 = v2[26];
    uint64_t v6 = v2[27];
    uint64_t v7 = v2[24];
    uint64_t v8 = v2[23];
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[28], v4, v5);
    AttributedSubstring.subscript.setter((uint64_t)v3, v9, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    AttributedSubstring.subscript.setter((*a1)[29], a2, v2[23], v2[24]);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t protocol witness for AttributedStringProtocol.subscript.getter in conformance AttributedSubstring@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return AttributedSubstring.subscript.getter(a1, a2, a3);
}

uint64_t protocol witness for AttributedStringProtocol.subscript.setter in conformance AttributedSubstring(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized AttributedSubstring.subscript.setter(a1, a3, a4);
  swift_release();
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(a1, v5);
}

uint64_t (*protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedSubstring(void *a1, void *a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[4] = AttributedSubstring.subscript.modify(v7, a2, a4);
  return protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString;
}

void (*AttributedSubstring.subscript.modify(void *a1, void *a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = (char *)malloc(0xF0uLL);
  *a1 = v7;
  *((void *)v7 + 22) = a3;
  *((void *)v7 + 23) = v3;
  uint64_t v8 = *(void *)(*MEMORY[0x1E4FBC5F0] + *a2 + 8);
  *((void *)v7 + 24) = v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  *((void *)v7 + 25) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *((void *)v7 + 26) = v11;
  size_t v12 = *(void *)(v11 + 64);
  *((void *)v7 + 27) = malloc(v12);
  *((void *)v7 + 28) = malloc(v12);
  size_t v13 = malloc(v12);
  *((void *)v7 + 29) = v13;
  *(_OWORD *)(v7 + 72) = *(_OWORD *)(v3 + 8);
  *(_OWORD *)(v7 + 88) = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(v7 + 104) = *(_OWORD *)(v3 + 40);
  *(_OWORD *)(v7 + 120) = *(_OWORD *)(v3 + 56);
  swift_retain();
  AttributedString.Guts.getUniformValue<A>(in:key:)(v8, a3, (uint64_t)v7);
  if (*((void *)v7 + 3))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v7, (uint64_t)(v7 + 136));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v7);
    uint64_t v14 = 0;
  }
  else
  {
    outlined destroy of AttributedString._AttributeValue?((uint64_t)v7);
    uint64_t v14 = 1;
  }
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v13, v14, 1, AssociatedTypeWitness);
  swift_release();
  return AttributedSubstring.subscript.modify;
}

void AttributedSubstring.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))((*a1)[26] + 16);
  v3((*a1)[28], v2[29], v2[25]);
  uint64_t v5 = (void *)v2[28];
  uint64_t v15 = (void *)v2[29];
  uint64_t v7 = v2[26];
  uint64_t v6 = (void *)v2[27];
  uint64_t v9 = v2[24];
  uint64_t v8 = v2[25];
  uint64_t v10 = v2[22];
  if (a2)
  {
    v3(v2[27], (uint64_t)v5, v2[25]);
    AttributedSubstring.subscript.setter((uint64_t)v6, v11, v9, v10);
    size_t v12 = *(void (**)(void *, uint64_t))(v7 + 8);
    v12(v5, v8);
    size_t v13 = v15;
    v12(v15, v8);
  }
  else
  {
    AttributedSubstring.subscript.setter((uint64_t)v5, v4, v2[24], v2[22]);
    size_t v13 = v15;
    (*(void (**)(void *, uint64_t))(v7 + 8))(v15, v8);
  }
  free(v13);
  free(v5);
  free(v6);

  free(v2);
}

uint64_t AttributedSubstring.subscript.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AttributedString.Guts.getUniformValues(in:)();
  *a1 = result;
  a1[1] = v3;
  a1[2] = 0;
  a1[3] = 0;
  return result;
}

uint64_t protocol witness for AttributedStringProtocol.subscript.setter in conformance AttributedSubstring(uint64_t *a1)
{
  specialized AttributedSubstring.subscript.setter(a1);

  return swift_release();
}

uint64_t AttributedSubstring.subscript.setter(uint64_t *a1)
{
  specialized AttributedSubstring.subscript.setter(a1);

  return swift_release();
}

void (*AttributedSubstring.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1)
{
  uint64_t v5 = v4;
  uint64_t v9 = malloc(0x68uLL);
  *a1 = v9;
  v9[11] = a4;
  v9[12] = v5;
  v9[10] = a3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v10 = *(void **)v5;
    long long v12 = *(_OWORD *)(*(void *)v5 + 32);
    long long v11 = *(_OWORD *)(*(void *)v5 + 48);
    *(_OWORD *)uint64_t v9 = *(_OWORD *)(*(void *)v5 + 16);
    *((_OWORD *)v9 + 1) = v12;
    *((_OWORD *)v9 + 2) = v11;
    uint64_t v13 = v10[8];
    uint64_t v14 = v10[9];
    uint64_t v15 = v10[10];
    uint64_t v16 = v10[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v9);
    swift_unknownObjectRetain();
    *(void *)uint64_t v5 = AttributedString.Guts.init(string:runs:)(v9, v13, v14, v15, v16);
    swift_release();
  }
  v9[6] = MEMORY[0x1E4FBC868];
  uint64_t v17 = v9 + 6;
  uint64_t v18 = MEMORY[0x1E4FBC870];
  void v17[2] = 0;
  v17[3] = 0;
  v17[1] = v18;
  return AttributedSubstring.subscript.modify;
}

void AttributedSubstring.subscript.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  $defer #1 <A>() in AttributedSubstring.subscript.modify((uint64_t *)(*(void *)a1 + 48), *(uint64_t **)(*(void *)a1 + 96));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t $defer #1 <A>() in AttributedSubstring.subscript.modify(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[3];
  if (v2)
  {
    unint64_t v17 = a1[2];
    uint64_t v3 = (_OWORD *)*a2;
    long long v4 = *(_OWORD *)(*a2 + 32);
    long long v23 = *(_OWORD *)(*a2 + 16);
    long long v24 = v4;
    long long v25 = v3[3];
    swift_bridgeObjectRetain();
    swift_retain();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v18);
    long long v5 = v3[2];
    long long v20 = v3[1];
    long long v21 = v5;
    long long v22 = v3[3];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v19);
    uint64_t v6 = BigString.Index.utf8Offset.getter();
    uint64_t v7 = BigString.Index.utf8Offset.getter();
    AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)(v17, v2, v6, v7, 1);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    uint64_t v9 = *a2;
    uint64_t v10 = *a1;
    long long v11 = *(_OWORD *)(*a2 + 32);
    long long v23 = *(_OWORD *)(*a2 + 16);
    long long v24 = v11;
    long long v25 = *(_OWORD *)(v9 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v18);
    long long v12 = *(_OWORD *)(v9 + 32);
    long long v20 = *(_OWORD *)(v9 + 16);
    long long v21 = v12;
    long long v22 = *(_OWORD *)(v9 + 48);
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v19);
    uint64_t v13 = BigString.Index.utf8Offset.getter();
    uint64_t v14 = BigString.Index.utf8Offset.getter();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)((void *)v9, v13, v14, v10, 0);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v10))
    {
      uint64_t v15 = swift_bridgeObjectRetain();
      uint64_t v16 = specialized Sequence.compactMap<A>(_:)(v15);
      swift_bridgeObjectRelease();
      AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v13, v14, 0, v16);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
    }
    return swift_bridgeObjectRelease();
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedSubstring()
{
  long long v1 = v0[3];
  long long v7 = v0[2];
  long long v8 = v1;
  long long v9 = v0[4];
  long long v2 = v0[1];
  long long v5 = *v0;
  long long v6 = v2;
  Hasher.init(_seed:)();
  specialized AttributedStringProtocol.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

Swift::UInt protocol witness for Hashable.hash(into:) in conformance AttributedSubstring(uint64_t a1)
{
  return specialized AttributedStringProtocol.hash(into:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedSubstring()
{
  long long v1 = v0[3];
  long long v7 = v0[2];
  long long v8 = v1;
  long long v9 = v0[4];
  long long v2 = v0[1];
  long long v5 = *v0;
  long long v6 = v2;
  Hasher.init(_seed:)();
  specialized AttributedStringProtocol.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedSubstring()
{
  return AttributedString.Guts.description(in:)();
}

uint64_t key path getter for AttributedSubstring.subscript<A>(dynamicMember:) : <A>AttributedSubstringA@<X0>(uint64_t **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(uint64_t *)((char *)a1 + a2 - 8);
  long long v5 = *a1;
  swift_retain();
  AttributedSubstring.subscript.getter(v5, v4, a3);

  return swift_release();
}

double key path getter for AttributedSubstring.subscript<A>(dynamicMember:) : <A>AttributedSubstringA@<D0>(_OWORD *a1@<X8>)
{
  swift_retain();
  AttributedSubstring.subscript.getter((uint64_t *)v4);
  swift_release();
  double result = *(double *)v4;
  long long v3 = v4[1];
  *a1 = v4[0];
  a1[1] = v3;
  return result;
}

uint64_t key path setter for AttributedSubstring.subscript<A>(dynamicMember:) : <A>AttributedSubstringA(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + a3 - 16);
  uint64_t v5 = *(void *)(a4 + a3 - 8);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v9 = a1[2];
  uint64_t v8 = a1[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  long long v11 = AttributedSubstring.subscript.modify(v14, v10, v4, v5);
  *long long v12 = v6;
  v12[1] = v7;
  v12[2] = v9;
  _OWORD v12[3] = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(void *, void))v11)(v14, 0);
}

uint64_t specialized static AttributedSubstring.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a1 + 1);
  long long v4 = *(_OWORD *)(a1 + 3);
  long long v5 = *(_OWORD *)(a1 + 5);
  long long v300 = *(_OWORD *)(a1 + 7);
  long long v299 = v5;
  long long v298 = v4;
  long long v297 = v3;
  uint64_t v6 = *a2;
  long long v7 = *(_OWORD *)(a2 + 1);
  long long v8 = *(_OWORD *)(a2 + 3);
  long long v9 = *(_OWORD *)(a2 + 5);
  long long v296 = *(_OWORD *)(a2 + 7);
  long long v295 = v9;
  long long v294 = v8;
  long long v293 = v7;
  if (v2 == v6
    && (static BigString.Index.== infix(_:_:)() & 1) != 0
    && (static BigString.Index.== infix(_:_:)() & 1) != 0)
  {
    return 1;
  }
  uint64_t v10 = swift_retain();
  AttributedString.Runs.init(_:in:)(v10, __src);
  long long v242 = __src[10];
  long long v243 = __src[11];
  uint64_t v244 = *(void *)&__src[12];
  long long v238 = __src[6];
  long long v239 = __src[7];
  long long v241 = __src[9];
  long long v240 = __src[8];
  long long v234 = __src[2];
  long long v235 = __src[3];
  long long v237 = __src[5];
  long long v236 = __src[4];
  long long v233 = __src[1];
  long long v232 = __src[0];
  uint64_t v11 = swift_retain();
  uint64_t result = AttributedString.Runs.init(_:in:)(v11, __src);
  long long v251 = __src[10];
  long long v252 = __src[11];
  uint64_t v253 = *(void *)&__src[12];
  long long v247 = __src[6];
  long long v248 = __src[7];
  long long v250 = __src[9];
  long long v249 = __src[8];
  *(_OWORD *)&v245[32] = __src[2];
  *(_OWORD *)&v245[48] = __src[3];
  long long v246 = __src[5];
  *(_OWORD *)&v245[64] = __src[4];
  *(_OWORD *)&v245[16] = __src[1];
  *(_OWORD *)uint64_t v245 = __src[0];
  uint64_t v13 = *(void *)&__src[0];
  uint64_t v14 = v232;
  if ((void)v232 == *(void *)&__src[0])
  {
    uint64_t result = static BigString.Index.== infix(_:_:)();
    if (result)
    {
      uint64_t result = static BigString.Index.== infix(_:_:)();
      if (result)
      {
LABEL_133:
        outlined release of AttributedString.Runs((uint64_t)v245);
        outlined release of AttributedString.Runs((uint64_t)&v232);
        return 1;
      }
    }
  }
  uint64_t v15 = *((void *)&v236 + 1);
  uint64_t v151 = *((void *)&v232 + 1);
  if (__OFSUB__(*((void *)&v236 + 1), *((void *)&v232 + 1))) {
    goto LABEL_158;
  }
  if (__OFSUB__(*(void *)&v245[72], *(void *)&v245[8]))
  {
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
    goto LABEL_169;
  }
  if (*((void *)&v236 + 1) - *((void *)&v232 + 1) != *(void *)&v245[72] - *(void *)&v245[8]) {
    goto LABEL_139;
  }
  uint64_t v165 = v233;
  uint64_t v156 = *((void *)&v234 + 1);
  uint64_t v157 = v234;
  uint64_t v155 = v235;
  unint64_t v153 = *((void *)&v233 + 1);
  uint64_t v154 = *((void *)&v235 + 1);
  uint64_t v16 = v236;
  uint64_t v17 = *((void *)&v240 + 1);
  uint64_t v19 = *((void *)&v241 + 1);
  uint64_t v18 = v241;
  uint64_t v20 = v242;
  uint64_t v186 = v250;
  uint64_t v188 = *((void *)&v249 + 1);
  uint64_t v21 = *((void *)&v250 + 1);
  uint64_t v22 = v251;
  __src[10] = v251;
  __src[11] = v252;
  *(void *)&__src[12] = v253;
  __src[6] = v247;
  __src[7] = v248;
  __src[9] = v250;
  __src[8] = v249;
  __src[2] = *(_OWORD *)&v245[32];
  __src[3] = *(_OWORD *)&v245[48];
  __src[5] = v246;
  __src[4] = *(_OWORD *)&v245[64];
  __src[1] = *(_OWORD *)&v245[16];
  __src[0] = *(_OWORD *)v245;
  *(_OWORD *)((char *)&__src[12] + 8) = *(_OWORD *)&v245[8];
  *(_OWORD *)((char *)&__src[13] + 8) = *(_OWORD *)&v245[24];
  *(_OWORD *)((char *)&__src[14] + 8) = *(_OWORD *)&v245[40];
  uint64_t v183 = (long long *)(v14 + 16);
  long long v23 = (long long *)(v13 + 16);
  long long v24 = (void *)v14;
  uint64_t v166 = v23;
  *(_OWORD *)((char *)&__src[15] + 8) = *(_OWORD *)&v245[56];
  outlined retain of AttributedString.Runs((uint64_t)&v232);
  uint64_t result = outlined retain of AttributedString.Runs((uint64_t)v245);
  uint64_t v149 = v18;
  uint64_t v150 = v17;
  uint64_t v25 = v22;
  uint64_t v26 = v21;
  uint64_t v28 = v186;
  uint64_t v27 = v188;
  uint64_t v177 = v19;
  uint64_t v178 = v18;
  uint64_t v147 = v20;
  uint64_t v148 = v19;
  uint64_t v176 = v20;
  uint64_t v29 = v151;
  uint64_t v152 = v15;
  uint64_t v167 = v24;
  while (1)
  {
    uint64_t v187 = v28;
    uint64_t v189 = v27;
    uint64_t v175 = v26;
    uint64_t v164 = v25;
    uint64_t v179 = v17;
    uint64_t v180 = v16;
    if (v29 == v15)
    {
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v181 = 0;
      uint64_t v182 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v184 = v15;
      uint64_t v38 = 0;
      goto LABEL_121;
    }
    if (v29 < v151 || v29 >= v15) {
      goto LABEL_147;
    }
    *(_OWORD *)&__dst[160] = v242;
    *(_OWORD *)&__dst[176] = v243;
    *(void *)&__dst[192] = v244;
    *(_OWORD *)&__dst[96] = v238;
    *(_OWORD *)&__dst[112] = v239;
    *(_OWORD *)&__dst[128] = v240;
    *(_OWORD *)&__dst[144] = v241;
    *(_OWORD *)&__dst[32] = v234;
    *(_OWORD *)&__dst[48] = v235;
    *(_OWORD *)&__dst[64] = v236;
    *(_OWORD *)&__dst[80] = v237;
    *(_OWORD *)__dst = v232;
    *(_OWORD *)&__dst[16] = v233;
    uint64_t v198 = v29;
    uint64_t v199 = v165;
    unint64_t v200 = v153;
    uint64_t v201 = v157;
    uint64_t v202 = v156;
    uint64_t v203 = v155;
    uint64_t v204 = v154;
    uint64_t v205 = v16;
    uint64_t result = (uint64_t)AttributedString.Runs._resolve(_:)(&v198, &v209);
    if (v209 != v24[11]) {
      goto LABEL_148;
    }
    uint64_t v185 = v29;
    unint64_t v39 = v210;
    uint64_t v40 = v214;
    uint64_t v41 = v215;
    uint64_t v42 = v216;
    uint64_t v43 = v217;
    if (v211)
    {
      long long v44 = (void *)(v211 + 24 * ((v210 >> ((4 * *(unsigned char *)(v211 + 18) + 8) & 0x3C)) & 0xF));
      unint64_t v45 = v44[3];
      uint64_t v46 = v44[4];
      uint64_t v47 = v44[5];
      outlined retain of AttributedString.Runs((uint64_t)&v232);
      uint64_t v174 = v46;
      swift_bridgeObjectRetain();
      uint64_t v190 = v47;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v48 = v24[8];
      outlined retain of AttributedString.Runs((uint64_t)&v232);
      swift_unknownObjectRetain();
      unint64_t v45 = specialized Rope._Node.subscript.getter(v39, v48);
      uint64_t v174 = v49;
      uint64_t v190 = v50;
      swift_unknownObjectRelease();
    }
    uint64_t v52 = v149;
    uint64_t v51 = v150;
    uint64_t v54 = v147;
    uint64_t v53 = v148;
    if (static BigString.Index.< infix(_:_:)())
    {
      uint64_t v51 = v40;
      uint64_t v52 = v41;
      uint64_t v53 = v42;
      uint64_t v54 = v43;
    }
    uint64_t result = BigString.Index.utf8Offset.getter();
    int64_t v55 = result + v45;
    if (__OFADD__(result, v45)) {
      goto LABEL_149;
    }
    uint64_t v56 = BigString.Index.utf8Offset.getter();
    if (v56 < v55) {
      int64_t v55 = v56;
    }
    long long v57 = *v183;
    long long v58 = v183[1];
    long long v292 = v183[2];
    v291[1] = v58;
    v291[0] = v57;
    long long v59 = *v183;
    long long v60 = v183[1];
    v301[2] = v292;
    v301[1] = v60;
    v301[0] = v59;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v301, (uint64_t)v302);
    outlined retain of Locale((uint64_t)v302);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v291);
    uint64_t result = BigString.Index.utf8Offset.getter();
    if (__OFSUB__(v55, result)) {
      goto LABEL_150;
    }
    uint64_t v61 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v63 = v62;
    uint64_t v65 = v64;
    uint64_t v67 = v66;
    outlined release of Locale((uint64_t)v254);
    uint64_t v193 = v61;
    uint64_t v194 = v54;
    uint64_t v182 = v52;
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_151;
    }
    uint64_t v68 = v53;
    uint64_t v192 = v65;
    uint64_t v173 = v63;
    uint64_t v70 = v167[8];
    uint64_t v69 = v167[9];
    uint64_t v71 = v167[11];
    uint64_t v195 = v69;
    uint64_t v196 = v167[10];
    uint64_t v72 = v157;
    uint64_t v181 = v68;
    if (v157 != 1 && v165 == v71)
    {
      uint64_t v73 = v167[11];
      uint64_t v74 = v180;
      uint64_t v75 = v185;
      if (v180 == 2)
      {
        unint64_t v76 = v153;
        if (v70)
        {
          outlined retain of AttributedString.Runs((uint64_t)&v232);
          swift_unknownObjectRetain();
          uint64_t result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v165, v153, v157, v70, v69, v196);
          uint64_t v77 = v165;
          uint64_t v78 = result;
        }
        else
        {
          uint64_t result = swift_retain();
          uint64_t v78 = 0;
          uint64_t v77 = v165;
        }
      }
      else
      {
        outlined retain of AttributedString.Runs((uint64_t)&v232);
        swift_unknownObjectRetain();
        uint64_t result = BigString.Index.utf8Offset.getter();
        uint64_t v77 = v165;
        uint64_t v78 = result;
        unint64_t v76 = v153;
      }
      goto LABEL_110;
    }
    if (v70) {
      uint64_t v79 = v167[9];
    }
    else {
      uint64_t v79 = 0;
    }
    uint64_t v75 = v185;
    if (v185 < 0 || v79 < v185) {
      goto LABEL_162;
    }
    if (v70 && v185 < v69 && *(_WORD *)(v70 + 16))
    {
      uint64_t v80 = v167[9];
      uint64_t v81 = *(unsigned __int8 *)(v70 + 18);
      if (*(unsigned char *)(v70 + 18))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)&v232);
        uint64_t result = swift_unknownObjectRetain();
        uint64_t v82 = v70;
        while (1)
        {
          unint64_t v84 = *(unsigned __int16 *)(v82 + 16);
          if (*(_WORD *)(v82 + 16))
          {
            uint64_t v85 = *(void *)(v82 + 32);
            BOOL v86 = __OFSUB__(v75, v85);
            uint64_t v87 = v75 - v85;
            if (v86) {
              goto LABEL_141;
            }
            if (__OFADD__(v87, 1)) {
              goto LABEL_142;
            }
            if (v87 + 1 <= 0)
            {
              unint64_t v84 = 0;
              goto LABEL_43;
            }
            if (v84 != 1)
            {
              uint64_t v88 = *(void *)(v82 + 56);
              uint64_t v75 = v87 - v88;
              if (__OFSUB__(v87, v88)) {
                goto LABEL_160;
              }
              if (__OFADD__(v75, 1)) {
                goto LABEL_161;
              }
              if (v75 + 1 < 1)
              {
                unint64_t v84 = 1;
                uint64_t v75 = v87;
                goto LABEL_43;
              }
              if (v84 == 2) {
                goto LABEL_42;
              }
              uint64_t v89 = *(void *)(v82 + 80);
              BOOL v86 = __OFSUB__(v75, v89);
              uint64_t v87 = v75 - v89;
              if (v86) {
                goto LABEL_164;
              }
              if (__OFADD__(v87, 1)) {
                goto LABEL_165;
              }
              if (v87 + 1 < 1)
              {
                unint64_t v84 = 2;
                goto LABEL_43;
              }
              if (v84 != 3)
              {
                uint64_t v90 = 3;
                if (v84 > 3) {
                  uint64_t v90 = *(unsigned __int16 *)(v82 + 16);
                }
                uint64_t v91 = (void *)(v82 + 104);
                uint64_t v92 = 3;
                while (v90 != v92)
                {
                  uint64_t v75 = v87 - *v91;
                  if (__OFSUB__(v87, *v91)) {
                    goto LABEL_156;
                  }
                  if (__OFADD__(v75, 1)) {
                    goto LABEL_157;
                  }
                  if (v75 + 1 < 1)
                  {
                    unint64_t v84 = v92;
                    uint64_t v75 = v87;
                    goto LABEL_43;
                  }
                  ++v92;
                  v91 += 3;
                  uint64_t v87 = v75;
                  if (v84 == v92) {
                    goto LABEL_42;
                  }
                }
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
LABEL_157:
                __break(1u);
LABEL_158:
                __break(1u);
                goto LABEL_159;
              }
            }
            uint64_t v75 = v87;
          }
LABEL_42:
          if (v75)
          {
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
            goto LABEL_143;
          }
LABEL_43:
          char v83 = (4 * *(unsigned char *)(v82 + 18) + 8) & 0x3C;
          uint64_t v81 = ((-15 << v83) - 1) & v81 | (v84 << v83);
          uint64_t v72 = *(void *)(v82 + 24 + 24 * v84);
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v82 = v72;
          if (!*(unsigned char *)(v72 + 18)) {
            goto LABEL_75;
          }
        }
      }
      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs((uint64_t)&v232);
      uint64_t result = swift_unknownObjectRetain();
      uint64_t v72 = v70;
LABEL_75:
      unint64_t v94 = *(unsigned __int16 *)(v72 + 16);
      if (*(_WORD *)(v72 + 16))
      {
        unint64_t v95 = v75 - 1;
        if (__OFSUB__(v75, 1)) {
          goto LABEL_167;
        }
        if (__OFADD__(v95, 1)) {
          goto LABEL_168;
        }
        if (v75 <= 0)
        {
          unint64_t v94 = 0;
          goto LABEL_107;
        }
        if (v94 != 1)
        {
          BOOL v86 = __OFSUB__(v95, 1);
          unint64_t v95 = v75 - 2;
          if (v86) {
            goto LABEL_171;
          }
          if (__OFADD__(v95, 1)) {
            goto LABEL_172;
          }
          if (v75 - 1 < 1)
          {
            unint64_t v94 = 1;
            goto LABEL_107;
          }
          if (v94 != 2)
          {
            BOOL v86 = __OFSUB__(v95, 1);
            unint64_t v95 = v75 - 3;
            if (v86) {
              goto LABEL_173;
            }
            if (__OFADD__(v95, 1)) {
              goto LABEL_174;
            }
            if (v75 - 2 >= 1)
            {
              if (v94 != 3)
              {
                uint64_t v96 = 0;
                uint64_t v97 = 3;
                if (v94 > 3) {
                  uint64_t v97 = *(unsigned __int16 *)(v72 + 16);
                }
                unint64_t v98 = v97 - 3;
                if (v95 >= v94 - 4) {
                  unint64_t v99 = v94 - 4;
                }
                else {
                  unint64_t v99 = v75 - 3;
                }
                if (v99 >= v75 + 0x7FFFFFFFFFFFFFFDLL) {
                  unint64_t v99 = v75 + 0x7FFFFFFFFFFFFFFDLL;
                }
                while (v98 > v99)
                {
                  if (v75 + 0x7FFFFFFFFFFFFFFDLL == v96) {
                    goto LABEL_170;
                  }
                  if (v95 == v96)
                  {
                    unint64_t v94 = v75;
                    goto LABEL_107;
                  }
                  if (v94 - 3 == ++v96)
                  {
                    v95 -= v96;
                    goto LABEL_101;
                  }
                }
LABEL_169:
                __break(1u);
LABEL_170:
                __break(1u);
LABEL_171:
                __break(1u);
LABEL_172:
                __break(1u);
LABEL_173:
                __break(1u);
LABEL_174:
                __break(1u);
                return result;
              }
              goto LABEL_101;
            }
            unint64_t v94 = 2;
LABEL_107:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v76 = v81 & 0xFFFFFFFFFFFFF0FFLL | (v94 << 8);
            uint64_t v75 = v185;
            uint64_t v69 = v80;
            goto LABEL_71;
          }
        }
      }
      else
      {
        unint64_t v95 = v75;
      }
LABEL_101:
      if (v95) {
        goto LABEL_166;
      }
      goto LABEL_107;
    }
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)&v232);
    unint64_t v93 = swift_unknownObjectRetain();
    unint64_t v76 = specialized Rope._endPath.getter(v93);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v72 = 0;
    if (!v70)
    {
      uint64_t v78 = 0;
      goto LABEL_109;
    }
LABEL_71:
    swift_unknownObjectRetain();
    uint64_t v78 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v71, v76, v72, v70, v69, v196);
    uint64_t result = swift_unknownObjectRelease_n();
LABEL_109:
    uint64_t v73 = v71;
    uint64_t v77 = v71;
    uint64_t v74 = v180;
LABEL_110:
    *(void *)__dst = v77;
    *(void *)&__dst[8] = v76;
    *(void *)&__dst[16] = v72;
    BOOL v86 = __OFADD__(v75, 1);
    uint64_t v100 = v75 + 1;
    if (v86) {
      goto LABEL_152;
    }
    if (v77 != v73) {
      goto LABEL_153;
    }
    uint64_t v184 = v100;
    if (v72)
    {
      unint64_t v101 = *(void *)(v72 + 24 * ((v76 >> ((4 * *(unsigned char *)(v72 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v101 = specialized Rope._Node.subscript.getter(v76, v70);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    BOOL v86 = __OFADD__(v78, v101);
    unint64_t v102 = v78 + v101;
    if (v86) {
      goto LABEL_154;
    }
    uint64_t v103 = v51;
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(__dst, v70, v195, v196, v73);
    swift_unknownObjectRelease_n();
    unint64_t v153 = *(void *)&__dst[8];
    uint64_t v165 = *(void *)__dst;
    uint64_t v157 = *(void *)&__dst[16];
    if (v74 == 2)
    {
      long long v104 = *v183;
      long long v105 = v183[1];
      long long v290 = v183[2];
      v289[1] = v105;
      v289[0] = v104;
      long long v106 = *v183;
      long long v107 = v183[1];
      v303[2] = v290;
      v303[1] = v107;
      v303[0] = v106;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v303, (uint64_t)v304);
      outlined retain of Locale((uint64_t)v304);
      uint64_t v108 = &v256;
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v289);
      long long v109 = *v183;
      long long v110 = v183[1];
      long long v288 = v183[2];
      v287[1] = v110;
      v287[0] = v109;
      long long v111 = *v183;
      long long v112 = v183[1];
      v305[2] = v288;
      v305[1] = v112;
      v305[0] = v111;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v305, (uint64_t)v306);
      outlined retain of Locale((uint64_t)v306);
      BigString.startIndex.getter();
      outlined release of Locale((uint64_t)v287);
    }
    else
    {
      long long v113 = *v183;
      long long v114 = v183[1];
      long long v286 = v183[2];
      v285[1] = v114;
      v285[0] = v113;
      long long v115 = *v183;
      long long v116 = v183[1];
      v307[2] = v286;
      v307[1] = v116;
      v307[0] = v115;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v307, (uint64_t)v308);
      outlined retain of Locale((uint64_t)v308);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v285);
      uint64_t result = BigString.Index.utf8Offset.getter();
      if (__OFSUB__(v102, result)) {
        goto LABEL_163;
      }
      uint64_t v108 = &v255;
    }
    uint64_t v117 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v155 = v118;
    uint64_t v156 = v117;
    uint64_t v154 = v119;
    uint64_t v180 = v120;
    outlined release of Locale((uint64_t)v108);
    outlined release of AttributedString.Runs((uint64_t)&v232);
    uint64_t v37 = v167;
    uint64_t v34 = v173;
    uint64_t v30 = v174;
    uint64_t v31 = v190;
    uint64_t v32 = v103;
    uint64_t v38 = v193;
    uint64_t v33 = v194;
    uint64_t v36 = v67;
    uint64_t v35 = v192;
LABEL_121:
    specialized IndexingIterator.next()((uint64_t)&v198);
    uint64_t v209 = v30;
    unint64_t v210 = v31;
    uint64_t v211 = v32;
    uint64_t v212 = v182;
    uint64_t v213 = v181;
    uint64_t v214 = v33;
    uint64_t v215 = v38;
    uint64_t v216 = v34;
    uint64_t v217 = v35;
    uint64_t v218 = v36;
    long long v219 = v37;
    uint64_t v220 = v198;
    uint64_t v191 = v199;
    uint64_t v221 = v199;
    unint64_t v222 = v200;
    uint64_t v223 = v201;
    uint64_t v224 = v202;
    uint64_t v225 = v203;
    uint64_t v226 = v204;
    uint64_t v227 = v205;
    uint64_t v228 = v206;
    uint64_t v229 = v207;
    uint64_t v230 = v208;
    if (!v30) {
      break;
    }
    if (!v198) {
      goto LABEL_137;
    }
    uint64_t v121 = v198;
    outlined copy of AttributedString.Runs.Run?(v30);
    outlined copy of AttributedString.Runs.Run?(v121);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((specialized static Dictionary<>.== infix(_:_:)(v30, v121) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_136:
      outlined consume of AttributedString.Runs.Run?(v30);
      outlined consume of AttributedString.Runs.Run?(v121);
      goto LABEL_137;
    }
    char v122 = specialized static Set.== infix(_:_:)(v31, v191);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v122 & 1) == 0) {
      goto LABEL_136;
    }
    long long v123 = *v183;
    long long v124 = v183[1];
    long long v284 = v183[2];
    v283[1] = v124;
    v283[0] = v123;
    long long v125 = *v183;
    long long v126 = v183[1];
    v309[2] = v284;
    v309[1] = v126;
    v309[0] = v125;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v309, (uint64_t)v310);
    outlined retain of Locale((uint64_t)v310);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v283);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v171 = BigString.Index.utf8Offset.getter();
    uint64_t v169 = BigString.Index.utf8Offset.getter();
    uint64_t result = outlined consume of AttributedString.Runs.Run?(v30);
    if (__OFSUB__(v169, v171))
    {
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
      goto LABEL_155;
    }
    uint64_t v170 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v172 = v127;
    uint64_t v168 = v128;
    uint64_t v159 = v129;
    outlined release of Locale((uint64_t)v257);
    long long v130 = *v166;
    long long v131 = v166[1];
    long long v282 = v166[2];
    v281[1] = v131;
    v281[0] = v130;
    long long v132 = *v166;
    long long v133 = v166[1];
    v311[2] = v282;
    v311[1] = v133;
    v311[0] = v132;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v311, (uint64_t)v312);
    outlined retain of Locale((uint64_t)v312);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v281);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v162 = BigString.Index.utf8Offset.getter();
    uint64_t v160 = BigString.Index.utf8Offset.getter();
    uint64_t result = outlined consume of AttributedString.Runs.Run?(v121);
    if (__OFSUB__(v160, v162)) {
      goto LABEL_144;
    }
    uint64_t v134 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v158 = v135;
    uint64_t v161 = v136;
    uint64_t v163 = v137;
    outlined release of Locale((uint64_t)v258);
    long long v138 = *v183;
    long long v139 = v183[1];
    long long v280 = v183[2];
    v279[1] = v139;
    v279[0] = v138;
    long long v140 = *v183;
    long long v141 = v183[1];
    v313[2] = v280;
    v313[1] = v141;
    v313[0] = v140;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v313, (uint64_t)v314);
    outlined retain of Locale((uint64_t)v314);
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_145;
    }
    uint64_t v271 = v179;
    uint64_t v272 = v178;
    uint64_t v273 = v177;
    uint64_t v274 = v176;
    uint64_t v275 = v170;
    uint64_t v276 = v172;
    uint64_t v277 = v168;
    uint64_t v278 = v159;
    uint64_t v142 = v134;
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v279);
    long long v143 = *v166;
    long long v144 = v166[1];
    long long v270 = v166[2];
    v269[1] = v144;
    v269[0] = v143;
    long long v145 = *v166;
    v315[1] = v166[1];
    v315[2] = v270;
    v315[0] = v145;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v315, (uint64_t)v316);
    outlined retain of Locale((uint64_t)v316);
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_146;
    }
    uint64_t v261 = v189;
    uint64_t v262 = v187;
    uint64_t v263 = v175;
    uint64_t v264 = v164;
    uint64_t v265 = v134;
    uint64_t v266 = v158;
    uint64_t v267 = v161;
    uint64_t v268 = v163;
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v269);
    char v146 = MEMORY[0x185301310](v259, v260);
    outlined consume of AttributedString.Runs.Run?(v30);
    outlined consume of AttributedString.Runs.Run?(v121);
    outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(&v209);
    outlined release of Locale((uint64_t)v260);
    uint64_t result = outlined release of Locale((uint64_t)v259);
    if ((v146 & 1) == 0) {
      goto LABEL_138;
    }
    uint64_t v25 = v163;
    uint64_t v27 = v142;
    uint64_t v28 = v158;
    uint64_t v26 = v161;
    uint64_t v17 = v170;
    long long v24 = v167;
    uint64_t v177 = v168;
    uint64_t v178 = v172;
    uint64_t v176 = v159;
    uint64_t v15 = v152;
    uint64_t v16 = v180;
    uint64_t v29 = v184;
  }
  if (!v198)
  {
    outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(&v209);
    memcpy(__dst, __src, sizeof(__dst));
    outlined release of AttributedString.Runs((uint64_t)__dst);
    outlined release of AttributedString.Runs((uint64_t)&v232);
    goto LABEL_133;
  }
LABEL_137:
  outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(&v209);
LABEL_138:
  memcpy(__dst, __src, sizeof(__dst));
  outlined release of AttributedString.Runs((uint64_t)__dst);
  outlined release of AttributedString.Runs((uint64_t)&v232);
LABEL_139:
  outlined release of AttributedString.Runs((uint64_t)v245);
  outlined release of AttributedString.Runs((uint64_t)&v232);
  return 0;
}

uint64_t partial apply for closure #2 in AttributedSubstring.replaceAttributes(_:with:)(void *a1, uint64_t a2, uint64_t a3)
{
  return closure #2 in AttributedSubstring.replaceAttributes(_:with:)(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(unsigned char *)(v3 + 48), *(void ***)(v3 + 56));
}

uint64_t specialized AttributedSubstring.subscript.setter(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v5 = a1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    long long v7 = (void *)*v1;
    long long v8 = *(_OWORD *)(*v1 + 16);
    long long v9 = *(_OWORD *)(*v1 + 48);
    v16[1] = *(_OWORD *)(*v1 + 32);
    v16[2] = v9;
    v16[0] = v8;
    uint64_t v10 = v7[8];
    uint64_t v14 = v7[9];
    uint64_t v11 = v7[10];
    uint64_t v12 = v7[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v16);
    swift_unknownObjectRetain();
    uint64_t *v2 = AttributedString.Guts.init(string:runs:)(v16, v10, v14, v11, v12);
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15[0] = v3;
  v15[1] = v4;
  v15[2] = v6;
  v15[3] = v5;
  $defer #1 <A>() in AttributedSubstring.subscript.modify(v15, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_181F88330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized AttributedSubstring.subscript.setter(a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t sub_181F8835C()
{
  return 16;
}

__n128 sub_181F88368(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_181F8837C()
{
  return 16;
}

__n128 sub_181F88388(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t protocol witness for DataProtocol.regions.getter in conformance <A> [A]@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t ArraySlice<A>.regions.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for DataProtocol.regions.getter in conformance <A> ArraySlice<A>@<X0>(_OWORD *a1@<X8>)
{
  long long v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for DataProtocol.regions.getter in conformance <A> ContiguousArray<A>@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_retain();
}

uint64_t Repeated<A>.regions.getter(uint64_t a1, char a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a1 < 1) {
      __break(1u);
    }
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<UInt8>);
    long long v8 = &protocol witness table for <A> CollectionOfOne<A>;
    LOBYTE(v6[0]) = a2;
    char __src = *(unsigned char *)__swift_project_boxed_opaque_existential_1(v6, v7);
    specialized Data.InlineData.init(_:)(&__src, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }
  return a1;
}

uint64_t protocol witness for DataProtocol.regions.getter in conformance <A> Repeated<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Repeated<A>.regions.getter(*(void *)v1, *(unsigned char *)(v1 + 8));
  *a1 = result;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in <A> [A]()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type CollectionOfOne<[UInt8]> and conformance CollectionOfOne<A>, &demangling cache variable for type metadata for CollectionOfOne<[UInt8]>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : DataProtocol in <A> [A]()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ArraySlice<UInt8> and conformance <A> ArraySlice<A>, (uint64_t *)&demangling cache variable for type metadata for ArraySlice<UInt8>);
}

_UNKNOWN **associated type witness table accessor for DataProtocol.Regions.Sequence.Element : ContiguousBytes in <A> [A]()
{
  return &protocol witness table for <A> [A];
}

uint64_t associated type witness table accessor for DataProtocol.Regions.Sequence.Element : DataProtocol in <A> [A]()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8]);
}

_UNKNOWN **associated type witness table accessor for DataProtocol.Regions.Sequence.Element.Collection.SubSequence : ContiguousBytes in <A> [A]()
{
  return &protocol witness table for <A> ArraySlice<A>;
}

uint64_t instantiation function for generic protocol witness table for <A> [A](uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [UInt8] and conformance [A], &demangling cache variable for type metadata for [UInt8]);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in <A> ArraySlice<A>()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type CollectionOfOne<ArraySlice<UInt8>> and conformance CollectionOfOne<A>, &demangling cache variable for type metadata for CollectionOfOne<ArraySlice<UInt8>>);
}

uint64_t instantiation function for generic protocol witness table for <A> ArraySlice<A>(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ArraySlice<UInt8> and conformance ArraySlice<A>, (uint64_t *)&demangling cache variable for type metadata for ArraySlice<UInt8>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in <A> ContiguousArray<A>()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type CollectionOfOne<ContiguousArray<UInt8>> and conformance CollectionOfOne<A>, &demangling cache variable for type metadata for CollectionOfOne<ContiguousArray<UInt8>>);
}

_UNKNOWN **associated type witness table accessor for DataProtocol.Regions.Sequence.Element : ContiguousBytes in <A> ContiguousArray<A>()
{
  return &protocol witness table for <A> ContiguousArray<A>;
}

uint64_t associated type witness table accessor for DataProtocol.Regions.Sequence.Element : DataProtocol in <A> ContiguousArray<A>()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ContiguousArray<UInt8> and conformance <A> ContiguousArray<A>, &demangling cache variable for type metadata for ContiguousArray<UInt8>);
}

uint64_t instantiation function for generic protocol witness table for <A> ContiguousArray<A>(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ContiguousArray<UInt8> and conformance ContiguousArray<A>, &demangling cache variable for type metadata for ContiguousArray<UInt8>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in <A> EmptyCollection<A>()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyCollection<Data> and conformance EmptyCollection<A>, &demangling cache variable for type metadata for EmptyCollection<Data>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : DataProtocol in <A> EmptyCollection<A>()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyCollection<UInt8> and conformance <A> EmptyCollection<A>, &demangling cache variable for type metadata for EmptyCollection<UInt8>);
}

uint64_t instantiation function for generic protocol witness table for <A> EmptyCollection<A>(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyCollection<UInt8> and conformance EmptyCollection<A>, &demangling cache variable for type metadata for EmptyCollection<UInt8>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in <A> Repeated<A>()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Repeated<Data> and conformance Repeated<A>, &demangling cache variable for type metadata for Repeated<Data>);
}

unint64_t lazy protocol witness table accessor for type Slice<Repeated<UInt8>> and conformance <> Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<Repeated<UInt8>> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Repeated<UInt8>> and conformance <> Slice<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<Repeated<UInt8>>);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Repeated<UInt8> and conformance <A> Repeated<A>, &demangling cache variable for type metadata for Repeated<UInt8>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Repeated<UInt8>> and conformance <> Slice<A>);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for <A> Repeated<A>(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Repeated<UInt8> and conformance Repeated<A>, &demangling cache variable for type metadata for Repeated<UInt8>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <A> [A](void *a1)
{
  a1[1] = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8]);
  a1[2] = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [UInt8] and conformance [A], &demangling cache variable for type metadata for [UInt8]);
  uint64_t result = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [UInt8] and conformance [A], &demangling cache variable for type metadata for [UInt8]);
  a1[3] = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <A> ContiguousArray<A>(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ContiguousArray<UInt8> and conformance <A> ContiguousArray<A>, &demangling cache variable for type metadata for ContiguousArray<UInt8>);
  a1[2] = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ContiguousArray<UInt8> and conformance ContiguousArray<A>, &demangling cache variable for type metadata for ContiguousArray<UInt8>);
  uint64_t result = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ContiguousArray<UInt8> and conformance ContiguousArray<A>, &demangling cache variable for type metadata for ContiguousArray<UInt8>);
  a1[3] = result;
  return result;
}

uint64_t static __PlistDictionaryEncoder.encodeToTopLevelContainer<A>(_:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  type metadata accessor for __PlistDictionaryEncoder();
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = MEMORY[0x1E4FBC868];
  uint64_t v11 = MEMORY[0x1E4FBC860];
  *(void *)(v9 + 24) = 200;
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 16) = v11;
  *(_OWORD *)(v9 + 40) = xmmword_18210F290;
  uint64_t v12 = specialized __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)(a1, 0x8000000000000000, 0, 0, 0, 255, a2, a3);
  if (v4) {
    return swift_release();
  }
  uint64_t v14 = v12;
  if (!v12)
  {
    uint64_t v15 = type metadata accessor for EncodingError();
    swift_allocError();
    uint64_t v17 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
    v17[3] = a2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
    (*(void (**)(uint64_t *, unint64_t, unint64_t))(*(void *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v19._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._uint64_t object = (void *)0x80000001823AAF20;
    v20._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v20);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v15 - 8) + 104))(v17, *MEMORY[0x1E4FBBAA0], v15);
    swift_willThrow();
    return swift_release();
  }
  a4[3] = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  uint64_t result = swift_release();
  *a4 = v14;
  return result;
}

uint64_t specialized __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unint64_t a7, unint64_t a8)
{
  unint64_t v26 = a8;
  uint64_t v15 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, unint64_t, unint64_t))(v15 + 16))(v17, a1, a7);
    uint64_t v18 = &lazy cache variable for type metadata for NSDate;
  }
  else
  {
    unint64_t v21 = a2;
    uint64_t v22 = a3;
    uint64_t v23 = a4;
    uint64_t v24 = a5;
    int v25 = a6;
    if (!swift_dynamicCastMetatype())
    {
      MEMORY[0x1F4188790](0);
      unint64_t v20 = v26;
      *(&v21 - 4) = a7;
      *(&v21 - 3) = v20;
      *(&v21 - 2) = a1;
      return specialized __PlistDictionaryEncoder._boxGeneric<A>(_:for:_:)((void (*)(void *))closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)specialized partial apply, (uint64_t)(&v21 - 6), v21, v22, v23, v24, v25);
    }
    (*(void (**)(char *, unint64_t, unint64_t))(v15 + 16))(v17, a1, a7);
    uint64_t v18 = (unint64_t *)&lazy cache variable for type metadata for NSData;
  }
  type metadata accessor for NSMorphologyPronoun(0, v18);
  swift_dynamicCast();
  return v27;
}

void __PlistDictionaryEncoder.container<A>(keyedBy:)()
{
  if ((*(uint64_t (**)(void))(*v0 + 208))())
  {
    objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CA60]), sel_init);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_5:
    type metadata accessor for _PlistDictionaryKeyedEncodingContainer();
    swift_retain();
    swift_retain();
    swift_getWitnessTable();
    KeyedEncodingContainer.init<A>(_:)();
    return;
  }
  uint64_t v1 = specialized BidirectionalCollection.last.getter(v0[2]);
  if (v1)
  {
    long long v2 = v1;
    self;
    if (swift_dynamicCastObjCClass()) {
      goto LABEL_5;
    }
  }
  __break(1u);
}

void __PlistDictionaryEncoder.unkeyedContainer()(uint64_t **a1@<X8>)
{
  long long v2 = v1;
  if (((*(uint64_t (**)(void))(*v1 + 208))() & 1) == 0)
  {
    uint64_t v5 = specialized BidirectionalCollection.last.getter(v1[2]);
    if (v5)
    {
      uint64_t v6 = v5;
      self;
      uint64_t v4 = (uint64_t *)swift_dynamicCastObjCClass();
      if (v4) {
        goto LABEL_5;
      }
    }
    __break(1u);
    return;
  }
  uint64_t v4 = (uint64_t *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CA48]), sel_init);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
LABEL_5:
  uint64_t v7 = v2[5];
  a1[3] = (uint64_t *)&type metadata for _PlistDictionaryUnkeyedEncodingContainer;
  a1[4] = (uint64_t *)lazy protocol witness table accessor for type _PlistDictionaryUnkeyedEncodingContainer and conformance _PlistDictionaryUnkeyedEncodingContainer();
  *a1 = v2;
  a1[1] = v4;
  a1[2] = (uint64_t *)v7;
  swift_retain();

  swift_retain();
}

uint64_t __PlistDictionaryEncoder.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __PlistDictionaryEncoder()
{
  return self;
}

void protocol witness for Encoder.container<A>(keyedBy:) in conformance __PlistDictionaryEncoder()
{
}

void protocol witness for Encoder.unkeyedContainer() in conformance __PlistDictionaryEncoder(uint64_t **a1@<X8>)
{
}

uint64_t protocol witness for Encoder.singleValueContainer() in conformance __PlistDictionaryEncoder@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3] = type metadata accessor for __PlistDictionaryEncoder();
  a1[4] = lazy protocol witness table accessor for type __PlistDictionaryEncoder and conformance __PlistDictionaryEncoder(&lazy protocol witness table cache variable for type __PlistDictionaryEncoder and conformance __PlistDictionaryEncoder, (void (*)(void))type metadata accessor for __PlistDictionaryEncoder);
  *a1 = v3;

  return swift_retain();
}

uint64_t _PlistDictionaryKeyedEncodingContainer.encodeNil(forKey:)()
{
  uint64_t v1 = *(void **)(v0 + 8);
  uint64_t v2 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v4 = v3;
  if (one-time initialization token for _plistNullNSString != -1) {
    swift_once();
  }
  Class isa = _plistNullNSString.super.isa;
  swift_bridgeObjectRetain();
  objc_msgSend(v1, sel___swift_setObject_forKeyedSubscript_, isa, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v2, v4);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(char a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  uint64_t v4 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v6 = v5;
  id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithBool_, a1 & 1);
  swift_bridgeObjectRetain();
  objc_msgSend(v3, sel___swift_setObject_forKeyedSubscript_, v7, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v4, v6);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  uint64_t v3 = *(void **)(v1 + 8);
  uint64_t v4 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v6 = v5;
  id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, a1);
  swift_bridgeObjectRetain();
  objc_msgSend(v3, sel___swift_setObject_forKeyedSubscript_, v7, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v4, v6);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(__int16 a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  uint64_t v4 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v6 = v5;
  id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, a1);
  swift_bridgeObjectRetain();
  objc_msgSend(v3, sel___swift_setObject_forKeyedSubscript_, v7, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v4, v6);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(unsigned __int8 a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  uint64_t v4 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v6 = v5;
  id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, a1);
  swift_bridgeObjectRetain();
  objc_msgSend(v3, sel___swift_setObject_forKeyedSubscript_, v7, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v4, v6);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(unsigned __int16 a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  uint64_t v4 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v6 = v5;
  id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, a1);
  swift_bridgeObjectRetain();
  objc_msgSend(v3, sel___swift_setObject_forKeyedSubscript_, v7, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v4, v6);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id v7 = *(void **)(v4 + 8);
  uint64_t v8 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v10 = v9;
  id v11 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a4, a1);
  swift_bridgeObjectRetain();
  objc_msgSend(v7, sel___swift_setObject_forKeyedSubscript_, v11, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v8, v10);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)()
{
  uint64_t v1 = *(void **)(v0 + 8);
  uint64_t v2 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v4 = v3;
  id v5 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithString_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  objc_msgSend(v1, sel___swift_setObject_forKeyedSubscript_, v5, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v2, v4);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(float a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  uint64_t v4 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v6 = v5;
  id v7 = objc_allocWithZone((Class)NSNumber);
  *(float *)&double v8 = a1;
  id v9 = objc_msgSend(v7, sel_initWithFloat_, v8);
  swift_bridgeObjectRetain();
  objc_msgSend(v3, sel___swift_setObject_forKeyedSubscript_, v9, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v4, v6);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(double a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  uint64_t v4 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v6 = v5;
  id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, a1);
  swift_bridgeObjectRetain();
  objc_msgSend(v3, sel___swift_setObject_forKeyedSubscript_, v7, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v4, v6);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

void _PlistDictionaryKeyedEncodingContainer.encode<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v31 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v31);
  uint64_t v14 = (char *)&v27 - v13;
  uint64_t v28 = v5;
  uint64_t v15 = *v5;
  v30[3] = a4;
  v30[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v30);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  unint64_t v17 = *(void *)(v15 + 40);
  uint64_t v18 = *(void *)(v11 - 8);
  Swift::String v19 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  uint64_t v27 = a2;
  v19(v14, a2, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, v11);
  uint64_t v20 = *(void *)(a3 + 24);
  swift_retain();
  uint64_t v21 = v29;
  id v22 = __PlistDictionaryEncoder.box<A>(_:for:_:)(v30, v17, (uint64_t)v14, v11, v20);
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v31);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  }
  else
  {
    uint64_t v23 = v22;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v31);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    uint64_t v24 = (void *)v28[1];
    v30[0] = dispatch thunk of CodingKey.stringValue.getter();
    v30[1] = v25;
    id v26 = v23;
    swift_bridgeObjectRetain();
    objc_msgSend(v24, sel___swift_setObject_forKeyedSubscript_, v26, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
}

id specialized __PlistDictionaryEncoder.box<A>(_:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  long long v25 = *(_OWORD *)(a1 + 24);
  uint64_t v12 = __swift_project_boxed_opaque_existential_1((void *)a1, v25);
  uint64_t v13 = swift_dynamicCastMetatype();
  if (v13)
  {
    double v14 = MEMORY[0x1F4188790](v13);
    (*(void (**)(char *, void *, void, double))(v16 + 16))((char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v12, v25, v14);
    unint64_t v17 = &lazy cache variable for type metadata for NSDate;
LABEL_5:
    type metadata accessor for NSMorphologyPronoun(0, v17);
    swift_dynamicCast();
    return (id)v26;
  }
  uint64_t v18 = swift_dynamicCastMetatype();
  if (v18)
  {
    double v19 = MEMORY[0x1F4188790](v18);
    (*(void (**)(char *, void *, void, double))(v21 + 16))((char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v12, v25, v19);
    unint64_t v17 = (unint64_t *)&lazy cache variable for type metadata for NSData;
    goto LABEL_5;
  }
  MEMORY[0x1F4188790](0);
  v23[1] = v25;
  uint64_t v24 = v12;
  id result = (id)specialized __PlistDictionaryEncoder._boxGeneric<A>(_:for:_:)((void (*)(void *))partial apply for specialized closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:), (uint64_t)v23, a2, a3, a4, a5, a6);
  if (!v6 && !result) {
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9E8]), sel_init);
  }
  return result;
}

id __PlistDictionaryEncoder.box<A>(_:for:_:)(void *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  uint64_t v12 = __swift_project_boxed_opaque_existential_1(a1, v10);
  uint64_t v13 = swift_dynamicCastMetatype();
  if (v13)
  {
    double v14 = MEMORY[0x1F4188790](v13);
    (*(void (**)(char *, void *, uint64_t, double))(v16 + 16))((char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v12, v10, v14);
    unint64_t v17 = &lazy cache variable for type metadata for NSDate;
LABEL_5:
    type metadata accessor for NSMorphologyPronoun(0, v17);
    swift_dynamicCast();
    return (id)v24[3];
  }
  uint64_t v18 = swift_dynamicCastMetatype();
  if (v18)
  {
    double v19 = MEMORY[0x1F4188790](v18);
    (*(void (**)(char *, void *, uint64_t, double))(v21 + 16))((char *)v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v12, v10, v19);
    unint64_t v17 = (unint64_t *)&lazy cache variable for type metadata for NSData;
    goto LABEL_5;
  }
  v24[1] = v24;
  MEMORY[0x1F4188790](0);
  _OWORD v23[2] = v10;
  v23[3] = a4;
  v23[4] = v11;
  v23[5] = a5;
  v23[6] = v12;
  id result = (id)__PlistDictionaryEncoder._boxGeneric<A>(_:for:_:)((void (*)(void *))partial apply for closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:), (uint64_t)v23, a2, a3, a4, a5);
  if (!v5 && !result) {
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9E8]), sel_init);
  }
  return result;
}

uint64_t _PlistDictionaryKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  id v7 = v6;
  uint64_t v44 = a5;
  uint64_t v45 = a6;
  uint64_t v46 = a4;
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v43 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49);
  uint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v41 - v17;
  uint64_t v19 = *(void *)(a3 + 24);
  id v48 = a2;
  uint64_t v42 = v19;
  uint64_t v20 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v22 = v21;
  uint64_t v47 = v7;
  uint64_t v23 = (void *)v7[1];
  *(void *)&v51[0] = v20;
  *((void *)&v51[0] + 1) = v21;
  swift_bridgeObjectRetain_n();
  id v24 = objc_msgSend(v23, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v24)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    outlined init with take of Any(v51, &v52);
    swift_bridgeObjectRelease();
    outlined init with copy of Any((uint64_t)&v52, (uint64_t)v51);
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSMutableDictionary);
    uint64_t result = swift_dynamicCast();
    if (!result) {
      goto LABEL_16;
    }

    outlined init with take of Any(&v52, v51);
    swift_dynamicCast();
    id v26 = v50;
  }
  else
  {
    swift_bridgeObjectRelease();
    id v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CA60]), sel_init);
    *(void *)&long long v52 = v20;
    *((void *)&v52 + 1) = v22;
    swift_bridgeObjectRetain();
    id v26 = v27;
    objc_msgSend(v23, sel___swift_setObject_forKeyedSubscript_, v26, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
  }
  uint64_t v28 = v49;
  uint64_t v29 = *v47;
  unint64_t v30 = v47[2];
  (*(void (**)(char *, id, uint64_t))(v11 + 16))(v18, v48, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, v10);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v18, v28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v15, 1, v10) == 1)
  {
    uint64_t v31 = *(void (**)(char *, uint64_t))(v13 + 8);
    swift_retain();
    v31(v18, v28);
    v31(v15, v28);
    swift_retain();
LABEL_13:
    *(void *)&long long v52 = v29;
    *((void *)&v52 + 1) = v26;
    unint64_t v53 = v30;
    type metadata accessor for _PlistDictionaryKeyedEncodingContainer();
    swift_getWitnessTable();
    return KeyedEncodingContainer.init<A>(_:)();
  }
  id v48 = v26;
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  uint64_t v33 = v43;
  v32(v43, v15, v10);
  uint64_t v34 = (uint64_t *)swift_allocObject();
  uint64_t v35 = v42;
  v34[5] = v10;
  void v34[6] = v35;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v34 + 2);
  v32((char *)boxed_opaque_existential_1, v33, v10);
  uint64_t v37 = *(void (**)(char *, uint64_t))(v13 + 8);
  swift_retain();
  v37(v18, v49);
  v34[7] = v30;
  if (v30 >> 62)
  {
    if (v30 >> 62 != 1)
    {
      id v26 = v48;
      uint64_t v40 = 1;
      goto LABEL_12;
    }
    uint64_t v38 = (uint64_t *)((v30 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v38 = (uint64_t *)(v30 + 64);
  }
  id v26 = v48;
  uint64_t v39 = *v38;
  uint64_t result = swift_retain();
  uint64_t v40 = v39 + 1;
  if (!__OFADD__(v39, 1))
  {
LABEL_12:
    v34[8] = v40;
    unint64_t v30 = (unint64_t)v34;
    goto LABEL_13;
  }
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

unint64_t _PlistDictionaryKeyedEncodingContainer.nestedUnkeyedContainer(forKey:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v42 = a3;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v41 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v39 - v14;
  uint64_t v16 = *(void *)(a2 + 24);
  id v44 = a1;
  uint64_t v40 = v16;
  uint64_t v17 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v19 = v18;
  uint64_t v43 = v4;
  uint64_t v20 = (void *)v4[1];
  *(void *)&v47[0] = v17;
  *((void *)&v47[0] + 1) = v18;
  swift_bridgeObjectRetain_n();
  id v21 = objc_msgSend(v20, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v21)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    outlined init with take of Any(v47, v48);
    swift_bridgeObjectRelease();
    outlined init with copy of Any((uint64_t)v48, (uint64_t)v47);
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSMutableArray);
    unint64_t result = swift_dynamicCast();
    if (!result) {
      goto LABEL_16;
    }

    outlined init with take of Any(v48, v47);
    swift_dynamicCast();
    id v23 = v46;
  }
  else
  {
    swift_bridgeObjectRelease();
    id v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CA48]), sel_init);
    *(void *)&v48[0] = v17;
    *((void *)&v48[0] + 1) = v19;
    swift_bridgeObjectRetain();
    id v23 = v24;
    objc_msgSend(v20, sel___swift_setObject_forKeyedSubscript_, v23, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
  }
  uint64_t v25 = *v43;
  unint64_t v26 = v43[2];
  (*(void (**)(char *, id, uint64_t))(v8 + 16))(v15, v44, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v15, 0, 1, v7);
  uint64_t v27 = v45;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v15, v45);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7) == 1)
  {
    uint64_t v28 = *(void (**)(char *, uint64_t))(v10 + 8);
    swift_retain();
    v28(v15, v27);
    v28(v12, v27);
    swift_retain();
LABEL_13:
    uint64_t v38 = v42;
    v42[3] = &type metadata for _PlistDictionaryUnkeyedEncodingContainer;
    unint64_t result = lazy protocol witness table accessor for type _PlistDictionaryUnkeyedEncodingContainer and conformance _PlistDictionaryUnkeyedEncodingContainer();
    v38[4] = result;
    *uint64_t v38 = v25;
    v38[1] = v23;
    v38[2] = v26;
    return result;
  }
  id v44 = v23;
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  unint64_t v30 = v41;
  v29(v41, v12, v7);
  uint64_t v31 = (uint64_t *)swift_allocObject();
  uint64_t v32 = v40;
  v31[5] = v7;
  v31[6] = v32;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v31 + 2);
  v29((char *)boxed_opaque_existential_1, v30, v7);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v10 + 8);
  swift_retain();
  v34(v15, v45);
  v31[7] = v26;
  if (v26 >> 62)
  {
    if (v26 >> 62 != 1)
    {
      id v23 = v44;
      uint64_t v37 = 1;
      goto LABEL_12;
    }
    uint64_t v35 = (uint64_t *)((v26 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v35 = (uint64_t *)(v26 + 64);
  }
  id v23 = v44;
  uint64_t v36 = *v35;
  unint64_t result = swift_retain();
  uint64_t v37 = v36 + 1;
  if (!__OFADD__(v36, 1))
  {
LABEL_12:
    v31[8] = v37;
    unint64_t v26 = (unint64_t)v31;
    goto LABEL_13;
  }
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t _PlistDictionaryKeyedEncodingContainer.superEncoder()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (void *)v1[1];
  uint64_t v4 = *(void *)(*v1 + 40);
  uint64_t v5 = type metadata accessor for __PlistDictionaryReferencingEncoder();
  uint64_t v6 = swift_allocObject();
  swift_retain();
  id v7 = v3;
  uint64_t v8 = swift_retain();
  uint64_t v9 = specialized __PlistDictionaryReferencingEncoder.init(referencing:at:codingPathNode:wrapping:)(v8, 0x7265707573, 0xE500000000000000, 0, 0, v4, v7, v6);
  a1[3] = v5;
  uint64_t result = lazy protocol witness table accessor for type __PlistDictionaryEncoder and conformance __PlistDictionaryEncoder(&lazy protocol witness table cache variable for type __PlistDictionaryReferencingEncoder and conformance __PlistDictionaryEncoder, (void (*)(void))type metadata accessor for __PlistDictionaryReferencingEncoder);
  a1[4] = result;
  *a1 = v9;
  return result;
}

uint64_t _PlistDictionaryKeyedEncodingContainer.superEncoder(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  id v19 = (id)v3[1];
  unint64_t v12 = *(void *)(v11 + 40);
  uint64_t v13 = type metadata accessor for __PlistDictionaryReferencingEncoder();
  uint64_t v14 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  uint64_t v15 = *(void *)(a2 + 24);
  swift_retain();
  swift_retain();
  uint64_t v16 = specialized __PlistDictionaryReferencingEncoder.init(referencing:at:codingPathNode:wrapping:)(v11, (uint64_t)v10, v12, v19, v14, v7, v15);
  a3[3] = v13;
  uint64_t result = lazy protocol witness table accessor for type __PlistDictionaryEncoder and conformance __PlistDictionaryEncoder(&lazy protocol witness table cache variable for type __PlistDictionaryReferencingEncoder and conformance __PlistDictionaryEncoder, (void (*)(void))type metadata accessor for __PlistDictionaryReferencingEncoder);
  a3[4] = result;
  *a3 = v16;
  return result;
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeNil(forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>()
{
  return _PlistDictionaryKeyedEncodingContainer.encodeNil(forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>(char a1)
{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1);
}

{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>()
{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>(double a1)
{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>(float a1)
{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithInteger_);
}

{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithInt_);
}

{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithLongLong_);
}

{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithUnsignedInteger_);
}

{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithUnsignedInt_);
}

{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithUnsignedLongLong_);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>(__int16 a1)
{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>(unsigned __int8 a1)
{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>(unsigned __int16 a1)
{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1);
}

void protocol witness for KeyedEncodingContainerProtocol.encode<A>(_:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return _PlistDictionaryKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a5, a3, a4, a6);
}

void _PlistDictionaryUnkeyedEncodingContainer.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v16[4] = a3;
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v9 = *v3;
  _OWORD v16[3] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
  unint64_t v11 = *(void *)(v9 + 40);
  unint64_t v12 = (void *)v6[1];
  swift_retain();
  id v13 = objc_msgSend(v12, sel_count);
  uint64_t v14 = v5;
  id v15 = specialized __PlistDictionaryEncoder.box<A>(_:for:_:)((uint64_t)v16, v11, (uint64_t)v13, 0, 0, 2);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  if (!v14)
  {
    objc_msgSend((id)v6[1], sel_addObject_, v15);
  }
}

uint64_t _PlistDictionaryUnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)()
{
  uint64_t v1 = *(void **)(v0 + 8);
  id v2 = objc_msgSend(v1, sel_count);
  objc_msgSend(v1, sel_addObject_, objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CA60]), sel_init));
  unint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = (void *)swift_allocObject();
  v4[5] = &type metadata for _CodingKey;
  v4[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t result = swift_allocObject();
  _OWORD v4[2] = result;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = v2;
  *(unsigned char *)(result + 40) = 2;
  v4[7] = v3;
  if (v3 >> 62)
  {
    uint64_t v6 = 0;
    if (v3 >> 62 != 1) {
      goto LABEL_6;
    }
    uint64_t v7 = (uint64_t *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v7 = (uint64_t *)(v3 + 64);
  }
  uint64_t v6 = *v7;
  uint64_t result = swift_retain();
LABEL_6:
  if (__OFADD__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    v4[8] = v6 + 1;
    type metadata accessor for _PlistDictionaryKeyedEncodingContainer();
    swift_retain();
    swift_getWitnessTable();
    return KeyedEncodingContainer.init<A>(_:)();
  }
  return result;
}

uint64_t _PlistDictionaryUnkeyedEncodingContainer.nestedUnkeyedContainer()@<X0>(void *a1@<X8>)
{
  unint64_t v3 = (void *)v1[1];
  id v4 = objc_msgSend(v3, sel_count);
  id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CA48]), sel_init);
  objc_msgSend(v3, sel_addObject_, v5);
  uint64_t v6 = *v1;
  unint64_t v7 = v1[2];
  uint64_t v8 = (void *)swift_allocObject();
  v8[5] = &type metadata for _CodingKey;
  v8[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t result = swift_allocObject();
  v8[2] = result;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = v4;
  *(unsigned char *)(result + 40) = 2;
  v8[7] = v7;
  if (v7 >> 62)
  {
    uint64_t v10 = 0;
    if (v7 >> 62 != 1) {
      goto LABEL_6;
    }
    unint64_t v11 = (uint64_t *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    unint64_t v11 = (uint64_t *)(v7 + 64);
  }
  uint64_t v10 = *v11;
  uint64_t result = swift_retain();
LABEL_6:
  if (__OFADD__(v10, 1))
  {
    __break(1u);
  }
  else
  {
    v8[8] = v10 + 1;
    a1[3] = &type metadata for _PlistDictionaryUnkeyedEncodingContainer;
    a1[4] = lazy protocol witness table accessor for type _PlistDictionaryUnkeyedEncodingContainer and conformance _PlistDictionaryUnkeyedEncodingContainer();
    *a1 = v6;
    a1[1] = v5;
    a1[2] = v8;
    return swift_retain();
  }
  return result;
}

id protocol witness for UnkeyedEncodingContainer.count.getter in conformance _PlistDictionaryUnkeyedEncodingContainer()
{
  return objc_msgSend(*(id *)(v0 + 8), sel_count);
}

id protocol witness for UnkeyedEncodingContainer.encodeNil() in conformance _PlistDictionaryUnkeyedEncodingContainer()
{
  uint64_t v1 = *(void **)(v0 + 8);
  if (one-time initialization token for _plistNullNSString != -1) {
    swift_once();
  }
  return objc_msgSend(v1, sel_addObject_, _plistNullNSString.super.isa);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(char a1)
{
  id v2 = *(void **)(v1 + 8);
  id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithBool_, a1 & 1);
  objc_msgSend(v2, sel_addObject_, v3);
}

{
  uint64_t v1;
  void *v2;
  id v3;

  id v2 = *(void **)(v1 + 8);
  id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, a1);
  objc_msgSend(v2, sel_addObject_, v3);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer()
{
  uint64_t v1 = *(void **)(v0 + 8);
  id v2 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithString_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  objc_msgSend(v1, sel_addObject_, v2);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(double a1)
{
  id v2 = *(void **)(v1 + 8);
  id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, a1);
  objc_msgSend(v2, sel_addObject_, v3);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(float a1)
{
  id v3 = *(void **)(v1 + 8);
  id v4 = objc_allocWithZone((Class)NSNumber);
  *(float *)&double v5 = a1;
  id v6 = objc_msgSend(v4, sel_initWithFloat_, v5);
  objc_msgSend(v3, sel_addObject_, v6);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(a1, a2, a3, (SEL *)&selRef_initWithInt_);
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(a1, a2, a3, (SEL *)&selRef_initWithLongLong_);
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(a1, a2, a3, (SEL *)&selRef_initWithUnsignedInteger_);
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(a1, a2, a3, (SEL *)&selRef_initWithUnsignedInt_);
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(a1, a2, a3, (SEL *)&selRef_initWithUnsignedLongLong_);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(__int16 a1)
{
  id v2 = *(void **)(v1 + 8);
  id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, a1);
  objc_msgSend(v2, sel_addObject_, v3);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(unsigned __int8 a1)
{
  id v2 = *(void **)(v1 + 8);
  id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, a1);
  objc_msgSend(v2, sel_addObject_, v3);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(unsigned __int16 a1)
{
  id v2 = *(void **)(v1 + 8);
  id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, a1);
  objc_msgSend(v2, sel_addObject_, v3);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  double v5 = *(void **)(v4 + 8);
  id v6 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a4, a1);
  objc_msgSend(v5, sel_addObject_, v6);
}

void protocol witness for UnkeyedEncodingContainer.encode<A>(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t protocol witness for UnkeyedEncodingContainer.superEncoder() in conformance _PlistDictionaryUnkeyedEncodingContainer@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v4 = *v1;
  id v3 = (void *)v1[1];
  swift_retain();
  id v5 = objc_msgSend(v3, sel_count);
  unint64_t v6 = *(void *)(v4 + 40);
  uint64_t v7 = type metadata accessor for __PlistDictionaryReferencingEncoder();
  uint64_t v8 = swift_allocObject();
  swift_retain();
  __PlistDictionaryReferencingEncoder.init(referencing:at:codingPathNode:wrapping:)(v4, (uint64_t)v5, v6, (uint64_t)v3);
  a1[3] = v7;
  uint64_t result = lazy protocol witness table accessor for type __PlistDictionaryEncoder and conformance __PlistDictionaryEncoder(&lazy protocol witness table cache variable for type __PlistDictionaryReferencingEncoder and conformance __PlistDictionaryEncoder, (void (*)(void))type metadata accessor for __PlistDictionaryReferencingEncoder);
  a1[4] = result;
  *a1 = v8;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistDictionaryEncoder.encode(_:)(Swift::String a1)
{
  if ((*(uint64_t (**)(void))(*(void *)v1 + 208))())
  {
    id v2 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithString_, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    id v3 = v2;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }
  else
  {
    __break(1u);
  }
}

void __PlistDictionaryEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  if ((*(uint64_t (**)(void))(*v3 + 208))())
  {
    _OWORD v13[3] = a2;
    uint64_t v13[4] = a3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v13);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
    unint64_t v10 = v3[5];
    swift_retain();
    id v11 = specialized __PlistDictionaryEncoder.box<A>(_:for:_:)((uint64_t)v13, v10, 0, 0, 0, 255);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    if (!v5)
    {
      id v12 = v11;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
  }
  else
  {
    __break(1u);
  }
}

void protocol witness for SingleValueEncodingContainer.encodeNil() in conformance __PlistDictionaryEncoder()
{
  if (((*(uint64_t (**)(void))(**(void **)v0 + 208))() & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (one-time initialization token for _plistNullNSString != -1) {
LABEL_5:
  }
    swift_once();
  uint64_t v1 = _plistNullNSString.super.isa;
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(char a1)
{
  if ((*(uint64_t (**)(void))(**(void **)v1 + 208))())
  {
    id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithBool_, a1 & 1);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }
  else
  {
    __break(1u);
  }
}

{
  uint64_t v1;
  id v3;

  if ((*(uint64_t (**)(void))(**(void **)v1 + 208))())
  {
    id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, a1);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }
  else
  {
    __break(1u);
  }
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(uint64_t a1, uint64_t a2)
{
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(double a1)
{
  if ((*(uint64_t (**)(void))(**(void **)v1 + 208))())
  {
    id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, a1);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }
  else
  {
    __break(1u);
  }
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(float a1)
{
  if ((*(uint64_t (**)(void))(**(void **)v1 + 208))())
  {
    id v3 = objc_allocWithZone((Class)NSNumber);
    *(float *)&double v4 = a1;
    id v5 = objc_msgSend(v3, sel_initWithFloat_, v4);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }
  else
  {
    __break(1u);
  }
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

{
  protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(a1, a2, a3, (SEL *)&selRef_initWithInt_);
}

{
  protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(a1, a2, a3, (SEL *)&selRef_initWithLongLong_);
}

{
  protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(a1, a2, a3, (SEL *)&selRef_initWithUnsignedInteger_);
}

{
  protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(a1, a2, a3, (SEL *)&selRef_initWithUnsignedInt_);
}

{
  protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(a1, a2, a3, (SEL *)&selRef_initWithUnsignedLongLong_);
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(__int16 a1)
{
  if ((*(uint64_t (**)(void))(**(void **)v1 + 208))())
  {
    id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, a1);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }
  else
  {
    __break(1u);
  }
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(unsigned __int8 a1)
{
  if ((*(uint64_t (**)(void))(**(void **)v1 + 208))())
  {
    id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, a1);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }
  else
  {
    __break(1u);
  }
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(unsigned __int16 a1)
{
  if ((*(uint64_t (**)(void))(**(void **)v1 + 208))())
  {
    id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, a1);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }
  else
  {
    __break(1u);
  }
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  if ((*(uint64_t (**)(void))(**(void **)v4 + 208))())
  {
    id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a4, a1);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }
  else
  {
    __break(1u);
  }
}

void protocol witness for SingleValueEncodingContainer.encode<A>(_:) in conformance __PlistDictionaryEncoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t specialized closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  v3[3] = type metadata accessor for __PlistDictionaryEncoder();
  v3[4] = lazy protocol witness table accessor for type __PlistDictionaryEncoder and conformance __PlistDictionaryEncoder(&lazy protocol witness table cache variable for type __PlistDictionaryEncoder and conformance __PlistDictionaryEncoder, (void (*)(void))type metadata accessor for __PlistDictionaryEncoder);
  v3[0] = a1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  v3[3] = type metadata accessor for __PlistDictionaryEncoder();
  v3[4] = lazy protocol witness table accessor for type __PlistDictionaryEncoder and conformance __PlistDictionaryEncoder(&lazy protocol witness table cache variable for type __PlistDictionaryEncoder and conformance __PlistDictionaryEncoder, (void (*)(void))type metadata accessor for __PlistDictionaryEncoder);
  v3[0] = a1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t specialized __PlistDictionaryEncoder._boxGeneric<A>(_:for:_:)(void (*a1)(void *), uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v9 = v7;
  id v15 = a1;
  uint64_t v16 = v9 + 2;
  unint64_t v31 = *(void *)(v9[2] + 16);
  if (a7 != -1)
  {
    unint64_t v30 = a1;
    uint64_t v29 = v8;
    uint64_t v17 = (void *)swift_allocObject();
    v17[5] = &type metadata for _CodingKey;
    v17[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v18 = swift_allocObject();
    void v17[2] = v18;
    *(void *)(v18 + 16) = a4;
    *(void *)(v18 + 24) = a5;
    *(void *)(v18 + 32) = a6;
    *(unsigned char *)(v18 + 40) = a7;
    v17[7] = a3;
    uint64_t v28 = a4;
    uint64_t v19 = a5;
    if (a3 >> 62)
    {
      if (a3 >> 62 != 1)
      {
        uint64_t v24 = a6;
        uint64_t v23 = 1;
LABEL_10:
        v17[8] = v23;
        uint64_t v21 = v9[5];
        uint64_t v22 = v9[6];
        v9[5] = v17;
        uint64_t v16 = v9 + 2;
LABEL_11:
        outlined copy of _CodingKey?(v28, v19, v24, a7);
        uint64_t v8 = v29;
        goto LABEL_12;
      }
      uint64_t v20 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      uint64_t v20 = (uint64_t *)(a3 + 64);
    }
    uint64_t v24 = a6;
    uint64_t v25 = *v20;
    swift_retain();
    uint64_t v23 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      return 0;
    }
    goto LABEL_10;
  }
  uint64_t v21 = v9[5];
  uint64_t v22 = v9[6];
  v9[5] = a3;
  if (!(a3 >> 62))
  {
    uint64_t v28 = a4;
    uint64_t v29 = v8;
    uint64_t v19 = a5;
    uint64_t v24 = a6;
    unint64_t v30 = a1;
    uint64_t v23 = *(void *)(a3 + 64);
    swift_retain();
    goto LABEL_11;
  }
  if (a3 >> 62 == 1)
  {
    unint64_t v30 = a1;
    uint64_t v23 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
    swift_retain();
LABEL_12:
    swift_retain();
    id v15 = v30;
    goto LABEL_13;
  }
  uint64_t v23 = 0;
LABEL_13:
  v9[6] = v23;
  v15(v9);
  if (v8)
  {
    v9[5] = v21;
    swift_retain();
    swift_release();
    v9[6] = v22;
    swift_release();
    swift_release();
    if (v31 < *(void *)(v9[2] + 16))
    {
      unint64_t v26 = (void *)specialized ContiguousArray._customRemoveLast()();
      if (!v26) {
        unint64_t v26 = (void *)specialized ContiguousArray.remove(at:)(*(void *)(*v16 + 16) - 1);
      }
    }
    return swift_willThrow();
  }
  v9[5] = v21;
  swift_retain();
  swift_release();
  v9[6] = v22;
  swift_release();
  swift_release();
  if (v31 >= *(void *)(v9[2] + 16)) {
    return 0;
  }
  uint64_t result = specialized ContiguousArray._customRemoveLast()();
  if (!result) {
    return specialized ContiguousArray.remove(at:)(*(void *)(*v16 + 16) - 1);
  }
  return result;
}

uint64_t __PlistDictionaryEncoder._boxGeneric<A>(_:for:_:)(void (*a1)(void *), uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v49 = a4;
  id v7 = v6;
  uint64_t v44 = a6;
  uint64_t v45 = a2;
  unint64_t v50 = a3;
  id v46 = a1;
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v43 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v42 - v17;
  uint64_t v19 = v7[2];
  uint64_t v42 = v7 + 2;
  unint64_t v47 = *(void *)(v19 + 16);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16);
  v20((char *)&v42 - v17, v49, v11, v16);
  ((void (*)(char *, char *, uint64_t))v20)(v14, v18, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, a5) != 1)
  {
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    uint64_t v28 = v43;
    v27(v43, v14, a5);
    uint64_t v29 = (uint64_t *)swift_allocObject();
    uint64_t v30 = v44;
    v29[5] = a5;
    v29[6] = v30;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29 + 2);
    v27((char *)boxed_opaque_existential_1, v28, a5);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v18, v11);
    unint64_t v33 = v50;
    v29[7] = v50;
    unint64_t v34 = v33 >> 62;
    if (v33 >> 62)
    {
      if (v34 != 1)
      {
        uint64_t v26 = 1;
        if (!__OFSUB__(v34, 1)) {
          goto LABEL_12;
        }
        goto LABEL_27;
      }
      uint64_t v35 = (uint64_t *)((v33 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      uint64_t v35 = (uint64_t *)(v33 + 64);
    }
    uint64_t v36 = *v35;
    uint64_t result = swift_retain();
    BOOL v37 = __OFADD__(v36, 1);
    uint64_t v26 = v36 + 1;
    if (!v37)
    {
LABEL_12:
      v29[8] = v26;
      uint64_t v22 = v7[5];
      uint64_t v23 = v7[6];
      v7[5] = v29;
      goto LABEL_13;
    }
LABEL_27:
    __break(1u);
    return result;
  }
  uint64_t v21 = *(void (**)(char *, uint64_t))(v12 + 8);
  v21(v18, v11);
  v21(v14, v11);
  uint64_t v22 = v7[5];
  uint64_t v23 = v7[6];
  unint64_t v24 = v50;
  unint64_t v25 = v50 >> 62;
  v7[5] = v50;
  if (v24 >> 62)
  {
    if (v25 != 1)
    {
      uint64_t v26 = 0;
      goto LABEL_14;
    }
    uint64_t v26 = *(void *)((v24 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
    swift_retain();
  }
  else
  {
    uint64_t v26 = *(void *)(v24 + 64);
    swift_retain();
  }
LABEL_13:
  swift_retain();
LABEL_14:
  v7[6] = v26;
  uint64_t v38 = v48;
  v46(v7);
  if (v38)
  {
    v7[5] = v22;
    swift_retain();
    swift_release();
    v7[6] = v23;
    swift_release();
    swift_release();
    if (v47 < *(void *)(v7[2] + 16))
    {
      uint64_t v39 = v42;
      uint64_t v40 = (void *)specialized ContiguousArray._customRemoveLast()();
      if (!v40) {
        uint64_t v40 = (void *)specialized ContiguousArray.remove(at:)(*(void *)(*v39 + 16) - 1);
      }
    }
    return swift_willThrow();
  }
  else
  {
    v7[5] = v22;
    swift_retain();
    swift_release();
    v7[6] = v23;
    swift_release();
    swift_release();
    if (v47 >= *(void *)(v7[2] + 16))
    {
      return 0;
    }
    else
    {
      uint64_t v41 = v42;
      uint64_t result = specialized ContiguousArray._customRemoveLast()();
      if (!result) {
        return specialized ContiguousArray.remove(at:)(*(void *)(*v41 + 16) - 1);
      }
    }
  }
  return result;
}

uint64_t __PlistDictionaryReferencingEncoder.init(referencing:at:codingPathNode:wrapping:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 56) = a1;
  *(void *)(v4 + 64) = a4;
  *(void *)(v4 + 72) = a2;
  *(void *)(v4 + 80) = 0;
  *(unsigned char *)(v4 + 88) = 0;
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v9 = (void *)swift_allocObject();
  v9[5] = &type metadata for _CodingKey;
  v9[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t result = swift_allocObject();
  v9[2] = result;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = a2;
  *(unsigned char *)(result + 40) = 2;
  unint64_t v11 = a3 >> 62;
  v9[7] = a3;
  if (a3 >> 62)
  {
    uint64_t v12 = 0;
    if (v11 != 1) {
      goto LABEL_6;
    }
    uint64_t v13 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v13 = (uint64_t *)(a3 + 64);
  }
  uint64_t v12 = *v13;
  uint64_t result = swift_retain();
LABEL_6:
  if (!__OFADD__(v12, 1))
  {
    v9[8] = v12 + 1;
    if (v11)
    {
      if (v11 != 1)
      {
        swift_bridgeObjectRetain();
        uint64_t v14 = 0;
        goto LABEL_13;
      }
      uint64_t v14 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
    }
    else
    {
      uint64_t v14 = *(void *)(a3 + 64);
    }
    swift_bridgeObjectRetain();
    swift_release();
LABEL_13:
    *(void *)(v4 + 16) = MEMORY[0x1E4FBC860];
    *(void *)(v4 + 24) = v8;
    *(void *)(v4 + 32) = v7;
    *(void *)(v4 + 40) = v9;
    *(void *)(v4 + 48) = v14;
    return v4;
  }
  __break(1u);
  return result;
}

BOOL __PlistDictionaryReferencingEncoder.canEncodeNewValue.getter()
{
  uint64_t v1 = *(void *)(v0[2] + 16);
  unint64_t v2 = v0[5];
  swift_retain();
  uint64_t v3 = _CodingPathNode.path.getter(v2);
  swift_release();
  uint64_t v4 = *(void *)(v3 + 16);
  swift_bridgeObjectRelease();
  unint64_t v5 = *(void *)(v0[7] + 40);
  swift_retain();
  uint64_t v6 = _CodingPathNode.path.getter(v5);
  swift_release();
  uint64_t v7 = *(void *)(v6 + 16);
  swift_bridgeObjectRelease();
  return v1 == v4 + ~v7;
}

void __PlistDictionaryReferencingEncoder.__ivar_destroyer()
{
  swift_release();
  uint64_t v1 = *(void **)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 80);
  char v4 = *(unsigned char *)(v0 + 88);

  outlined consume of __PlistDictionaryReferencingEncoder.Reference(v1, v2, v3, v4);
}

uint64_t __PlistDictionaryReferencingEncoder.deinit()
{
  uint64_t v1 = v0;
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v2 = v0 + 16;
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4 == 1)
  {
    uint64_t v5 = specialized ContiguousArray._customRemoveLast()();
    if (!v5) {
      uint64_t v5 = specialized ContiguousArray.remove(at:)(*(void *)(*(void *)v2 + 16) - 1);
    }
    id v6 = (id)v5;
    uint64_t v7 = (unint64_t *)&lazy cache variable for type metadata for NSObject;
  }
  else
  {
    if (v4)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9E8]), sel_init);
    uint64_t v7 = &lazy cache variable for type metadata for NSDictionary;
  }
  uint64_t v8 = type metadata accessor for NSMorphologyPronoun(0, v7);
  v17[3] = v8;
  v17[0] = v6;
  uint64_t v9 = *(void **)(v1 + 64);
  uint64_t v10 = *(void *)(v1 + 72);
  uint64_t v11 = *(void *)(v1 + 80);
  if (*(unsigned char *)(v1 + 88))
  {
    id v12 = objc_allocWithZone((Class)NSString);
    uint64_t v13 = String._bridgeToObjectiveCImpl()();
    id v14 = v9;
    id v15 = objc_msgSend(v12, sel_initWithString_, v13);
    swift_unknownObjectRelease();
    __swift_project_boxed_opaque_existential_1(v17, v8);
    objc_msgSend(v14, sel_setObject_forKeyedSubscript_, _bridgeAnythingToObjectiveC<A>(_:)(), v15);

    swift_unknownObjectRelease();
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v17, v8);
    objc_msgSend(v9, sel_insertObject_atIndex_, _bridgeAnythingToObjectiveC<A>(_:)(), v10);
    swift_unknownObjectRelease();
    outlined consume of __PlistDictionaryReferencingEncoder.Reference(v9, v10, v11, 0);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of __PlistDictionaryReferencingEncoder.Reference(*(void **)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(unsigned char *)(v1 + 88));
  return v1;
}

uint64_t __PlistDictionaryReferencingEncoder.__deallocating_deinit()
{
  __PlistDictionaryReferencingEncoder.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __PlistDictionaryReferencingEncoder()
{
  return self;
}

id outlined copy of __PlistDictionaryReferencingEncoder.Reference(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    id v5 = a1;
    return (id)swift_bridgeObjectRetain();
  }
  else
  {
    return a1;
  }
}

void destroy for __PlistDictionaryReferencingEncoder.Reference(uint64_t a1)
{
}

void outlined consume of __PlistDictionaryReferencingEncoder.Reference(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t initializeWithCopy for __PlistDictionaryReferencingEncoder.Reference(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of __PlistDictionaryReferencingEncoder.Reference(*(void **)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for __PlistDictionaryReferencingEncoder.Reference(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of __PlistDictionaryReferencingEncoder.Reference(*(void **)a2, v4, v5, v6);
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  outlined consume of __PlistDictionaryReferencingEncoder.Reference(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for __PlistDictionaryReferencingEncoder.Reference(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of __PlistDictionaryReferencingEncoder.Reference(v5, v7, v6, v8);
  return a1;
}

void *type metadata accessor for __PlistDictionaryReferencingEncoder.Reference()
{
  return &unk_1ECA43350;
}

void *type metadata accessor for _PlistDictionaryEncodingStorage()
{
  return &unk_1ECA42BA0;
}

uint64_t partial apply for specialized closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  return specialized closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)(a1);
}

uint64_t one-time initialization function for _plistNullNSString()
{
  uint64_t v0 = (objc_class *)objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithString_, String._bridgeToObjectiveCImpl()());
  uint64_t result = swift_unknownObjectRelease();
  _plistNullNSString.super.Class isa = v0;
  return result;
}

uint64_t sub_181F8D3EC()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t sub_181F8D430()
{
  outlined consume of _CodingKey(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));

  return MEMORY[0x1F4186498](v0, 41, 7);
}

unint64_t lazy protocol witness table accessor for type _PlistDictionaryUnkeyedEncodingContainer and conformance _PlistDictionaryUnkeyedEncodingContainer()
{
  unint64_t result = lazy protocol witness table cache variable for type _PlistDictionaryUnkeyedEncodingContainer and conformance _PlistDictionaryUnkeyedEncodingContainer;
  if (!lazy protocol witness table cache variable for type _PlistDictionaryUnkeyedEncodingContainer and conformance _PlistDictionaryUnkeyedEncodingContainer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PlistDictionaryUnkeyedEncodingContainer and conformance _PlistDictionaryUnkeyedEncodingContainer);
  }
  return result;
}

uint64_t type metadata accessor for _PlistDictionaryKeyedEncodingContainer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for _PlistDictionaryKeyedEncodingContainer(uint64_t a1)
{
  swift_release();

  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for _PlistDictionaryKeyedEncodingContainer(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  id v4 = v3;
  swift_retain();
  return a1;
}

void *assignWithCopy for _PlistDictionaryKeyedEncodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  id v4 = (void *)a2[1];
  uint64_t v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _PlistDictionaryKeyedEncodingContainer(uint64_t a1, uint64_t a2)
{
  swift_release();
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for _PlistDictionaryUnkeyedEncodingContainer()
{
  return &type metadata for _PlistDictionaryUnkeyedEncodingContainer;
}

uint64_t lazy protocol witness table accessor for type __PlistDictionaryEncoder and conformance __PlistDictionaryEncoder(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized __PlistDictionaryReferencingEncoder.init(referencing:at:codingPathNode:wrapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v54 = a6;
  v56[3] = &type metadata for _CodingKey;
  unint64_t v50 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v56[4] = v50;
  uint64_t v15 = swift_allocObject();
  v56[0] = v15;
  *(void *)(v15 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  *(void *)(v15 + 32) = a4;
  *(unsigned char *)(v15 + 40) = a5;
  *(void *)(a8 + 56) = a1;
  swift_retain();
  swift_retain();
  id v16 = a7;
  uint64_t v17 = _CodingKey.stringValue.getter(a2, a3, a4, a5);
  id v52 = v16;
  *(void *)(a8 + 64) = v16;
  *(void *)(a8 + 72) = v17;
  *(void *)(a8 + 80) = v18;
  *(unsigned char *)(a8 + 88) = 1;
  swift_release();
  uint64_t v51 = *(void *)(a1 + 24);
  uint64_t v55 = a1;
  uint64_t v53 = *(void *)(a1 + 32);
  uint64_t v19 = __swift_project_boxed_opaque_existential_1(v56, (uint64_t)&type metadata for _CodingKey);
  uint64_t v20 = type metadata accessor for Optional();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void *)(v21 + 64);
  v23.n128_f64[0] = MEMORY[0x1F4188790](v20);
  unint64_t v24 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v25 = (char *)&v49 - v24;
  uint64_t v26 = off_1ECA30F70;
  ((void (*)(char *, void *, __n128))off_1ECA30F70->initializeWithCopy)((char *)&v49 - v24, v19, v23);
  uint64_t v27 = ((uint64_t (*)(char *, void, uint64_t, ValueMetadata *))v26->storeEnumTagSinglePayload)((char *)&v49 - v24, 0, 1, &type metadata for _CodingKey);
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)&v49 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v31 = MEMORY[0x1F4188790](v30);
  uint64_t v32 = (char *)&v49 - v24;
  (*(void (**)(char *, char *, uint64_t, double))(v21 + 16))((char *)&v49 - v24, (char *)&v49 - v24, v20, v31);
  if (((unsigned int (*)(char *, uint64_t, ValueMetadata *))v26->getEnumTagSinglePayload)((char *)&v49 - v24, 1, &type metadata for _CodingKey) == 1)
  {
    unint64_t v33 = *(void (**)(char *, uint64_t))(v21 + 8);
    uint64_t v34 = v53;
    swift_bridgeObjectRetain();
    v33((char *)&v49 - v24, v20);
    v33((char *)&v49 - v24, v20);
    unint64_t v35 = v54;
    swift_retain();
    swift_release();

    unint64_t v36 = v35 >> 62;
    BOOL v37 = (uint64_t *)v35;
    if (v35 >> 62)
    {
LABEL_3:
      if (v36 != 1)
      {
        uint64_t v45 = 0;
LABEL_16:
        uint64_t v48 = v51;
        *(void *)(a8 + 16) = MEMORY[0x1E4FBC860];
        *(void *)(a8 + 24) = v48;
        *(void *)(a8 + 32) = v34;
        *(void *)(a8 + 40) = v37;
        *(void *)(a8 + 48) = v45;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
        return a8;
      }
      uint64_t v38 = (uint64_t *)((v35 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_15:
      uint64_t v45 = *v38;
      swift_release();
      goto LABEL_16;
    }
LABEL_14:
    uint64_t v38 = (uint64_t *)(v35 + 64);
    goto LABEL_15;
  }
  id v39 = v52;
  initializeWithTake = (void (*)(char *, char *, ValueMetadata *))v26->initializeWithTake;
  initializeWithTake(v29, v32, &type metadata for _CodingKey);
  BOOL v37 = (uint64_t *)swift_allocObject();
  unint64_t v41 = v50;
  v37[5] = (uint64_t)&type metadata for _CodingKey;
  v37[6] = v41;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v37 + 2);
  initializeWithTake((char *)boxed_opaque_existential_1, v29, &type metadata for _CodingKey);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v34 = v53;
  swift_bridgeObjectRetain();
  v43(v25, v20);
  unint64_t v35 = v54;
  v37[7] = v54;
  unint64_t v36 = v35 >> 62;
  if (!(v35 >> 62))
  {
    uint64_t v44 = (uint64_t *)(v35 + 64);
    goto LABEL_10;
  }
  if (v36 == 1)
  {
    uint64_t v44 = (uint64_t *)((v35 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_10:
    uint64_t v46 = *v44;
    swift_retain();
    goto LABEL_12;
  }
  uint64_t v46 = 0;
LABEL_12:
  uint64_t result = v55;
  if (!__OFADD__(v46, 1))
  {
    v37[8] = v46 + 1;
    swift_release();

    if (v36) {
      goto LABEL_3;
    }
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t specialized __PlistDictionaryReferencingEncoder.init(referencing:at:codingPathNode:wrapping:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v52 = a3;
  *(void *)&long long v55 = a6;
  *((void *)&v55 + 1) = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v54);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(boxed_opaque_existential_1, a2, a6);
  *(void *)(a5 + 56) = a1;
  swift_retain();
  swift_retain();
  id v13 = a4;
  uint64_t v14 = dispatch thunk of CodingKey.stringValue.getter();
  id v50 = v13;
  *(void *)(a5 + 64) = v13;
  *(void *)(a5 + 72) = v14;
  *(void *)(a5 + 80) = v15;
  *(unsigned char *)(a5 + 88) = 1;
  swift_release();
  uint64_t v48 = *(void *)(a1 + 24);
  uint64_t v53 = a1;
  uint64_t v51 = *(void *)(a1 + 32);
  long long v47 = v55;
  uint64_t v16 = v55;
  uint64_t v17 = __swift_project_boxed_opaque_existential_1(v54, v55);
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v49 = *(void *)(v18 - 8);
  uint64_t v19 = *(void *)(v49 + 64);
  v20.n128_f64[0] = MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void *)(v16 - 8);
  (*(void (**)(char *, void *, uint64_t, __n128))(v22 + 16))(v21, v17, v16, v20);
  uint64_t v23 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v21, 0, 1, v16);
  MEMORY[0x1F4188790](v23);
  unint64_t v25 = (char *)&v47 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v27 = MEMORY[0x1F4188790](v26);
  uint64_t v28 = v18;
  uint64_t v29 = v49;
  (*(void (**)(char *, char *, uint64_t, double))(v49 + 16))(v21, v21, v28, v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v21, 1, v16) == 1)
  {
    uint64_t v30 = *(void (**)(char *, uint64_t))(v29 + 8);
    uint64_t v31 = v51;
    swift_bridgeObjectRetain();
    v30(v21, v28);
    v30(v21, v28);
    unint64_t v32 = v52;
    swift_retain();
    swift_release();

    unint64_t v33 = v32 >> 62;
    uint64_t v34 = v32;
    uint64_t v35 = v31;
    if (v32 >> 62)
    {
LABEL_3:
      if (v33 != 1)
      {
        uint64_t v43 = 0;
LABEL_16:
        uint64_t v46 = v48;
        *(void *)(a5 + 16) = MEMORY[0x1E4FBC860];
        *(void *)(a5 + 24) = v46;
        *(void *)(a5 + 32) = v35;
        *(void *)(a5 + 40) = v34;
        *(void *)(a5 + 48) = v43;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
        return a5;
      }
      unint64_t v36 = (uint64_t *)((v32 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_15:
      uint64_t v43 = *v36;
      swift_release();
      goto LABEL_16;
    }
LABEL_14:
    unint64_t v36 = (uint64_t *)(v32 + 64);
    goto LABEL_15;
  }
  id v37 = v50;
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
  v38(v25, v21, v16);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 40) = v47;
  id v39 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v34 + 16));
  v38((char *)v39, v25, v16);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v29 + 8);
  uint64_t v41 = v51;
  swift_bridgeObjectRetain();
  v40(v21, v28);
  unint64_t v32 = v52;
  *(void *)(v34 + 56) = v52;
  unint64_t v33 = v32 >> 62;
  uint64_t v35 = v41;
  if (!(v32 >> 62))
  {
    uint64_t v42 = (uint64_t *)(v32 + 64);
    goto LABEL_10;
  }
  if (v33 == 1)
  {
    uint64_t v42 = (uint64_t *)((v32 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_10:
    uint64_t v44 = *v42;
    swift_retain();
    goto LABEL_12;
  }
  uint64_t v44 = 0;
LABEL_12:
  uint64_t result = v53;
  if (!__OFADD__(v44, 1))
  {
    *(void *)(v34 + 64) = v44 + 1;
    swift_release();

    if (v33) {
      goto LABEL_3;
    }
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  return closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)(a1);
}

uint64_t closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)specialized partial apply(uint64_t a1)
{
  return partial apply for specialized closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)(a1);
}

id Int8.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_charValue);
}

uint64_t Int8.init(exactly:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_charValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v2 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, v1);
  char v3 = static NSObject.== infix(_:_:)();

  if (v3) {
    int v4 = v1;
  }
  else {
    int v4 = 0;
  }
  return v4 & 0xFFFFFEFF | (((v3 & 1) == 0) << 8);
}

NSNumber __swiftcall Int8._bridgeToObjectiveC()()
{
  char v1 = v0;
  id v2 = objc_allocWithZone((Class)NSNumber);

  return (NSNumber)objc_msgSend(v2, sel_initWithChar_, v1);
}

uint64_t static Int8._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, unsigned char *a2)
{
  id v3 = objc_msgSend(a1, sel_charValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if (v5)
  {
    *a2 = (_BYTE)v3;
    a2[1] = 0;
  }
  return v5 & 1;
}

void *static Int8._unconditionallyBridgeFromObjectiveC(_:)(void *result)
{
  if (result)
  {
    id v1 = result;
    id v2 = objc_msgSend(v1, sel_charValue);
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, v2);
    char v4 = static NSObject.== infix(_:_:)();

    if (v4) {
      return (void *)v2;
    }
    else {
      return 0;
    }
  }
  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int8()
{
  uint64_t v1 = *v0;
  id v2 = objc_allocWithZone((Class)NSNumber);

  return objc_msgSend(v2, sel_initWithChar_, v1);
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Int8(void *a1@<X0>, unsigned char *a2@<X8>)
{
  if (a1)
  {
    id v3 = a1;
    id v4 = objc_msgSend(v3, sel_charValue);
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, v4);
    char v6 = static NSObject.== infix(_:_:)();

    if (v6) {
      char v7 = (char)v4;
    }
    else {
      char v7 = 0;
    }
  }
  else
  {
    char v7 = 0;
  }
  *a2 = v7;
}

id UInt8.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_unsignedCharValue);
}

uint64_t UInt8.init(exactly:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_unsignedCharValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v2 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, v1);
  char v3 = static NSObject.== infix(_:_:)();

  if (v3) {
    int v4 = (int)v1;
  }
  else {
    int v4 = 0;
  }
  return v4 & 0xFFFFFEFF | (((v3 & 1) == 0) << 8);
}

NSNumber __swiftcall UInt8._bridgeToObjectiveC()()
{
  unsigned __int8 v1 = v0;
  id v2 = objc_allocWithZone((Class)NSNumber);

  return (NSNumber)objc_msgSend(v2, sel_initWithUnsignedChar_, v1);
}

uint64_t static UInt8._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, unsigned char *a2)
{
  id v3 = objc_msgSend(a1, sel_unsignedCharValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if (v5)
  {
    *a2 = (_BYTE)v3;
    a2[1] = 0;
  }
  return v5 & 1;
}

void *static UInt8._unconditionallyBridgeFromObjectiveC(_:)(void *result)
{
  if (result)
  {
    id v1 = result;
    id v2 = objc_msgSend(v1, sel_unsignedCharValue);
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, v2);
    char v4 = static NSObject.== infix(_:_:)();

    if (v4) {
      return (void *)v2;
    }
    else {
      return 0;
    }
  }
  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UInt8()
{
  uint64_t v1 = *v0;
  id v2 = objc_allocWithZone((Class)NSNumber);

  return objc_msgSend(v2, sel_initWithUnsignedChar_, v1);
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UInt8(void *a1@<X0>, unsigned char *a2@<X8>)
{
  if (a1)
  {
    id v3 = a1;
    id v4 = objc_msgSend(v3, sel_unsignedCharValue);
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, v4);
    char v6 = static NSObject.== infix(_:_:)();

    if (v6) {
      char v7 = (char)v4;
    }
    else {
      char v7 = 0;
    }
  }
  else
  {
    char v7 = 0;
  }
  *a2 = v7;
}

id Int16.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_shortValue);
}

uint64_t Int16.init(exactly:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_shortValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v2 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, v1);
  char v3 = static NSObject.== infix(_:_:)();

  if (v3) {
    int v4 = (unsigned __int16)v1;
  }
  else {
    int v4 = 0;
  }
  return v4 & 0xFFFEFFFF | (((v3 & 1) == 0) << 16);
}

uint64_t static Int16._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_shortValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if (v5)
  {
    *(_WORD *)a2 = (_WORD)v3;
    *(unsigned char *)(a2 + 2) = 0;
  }
  return v5 & 1;
}

void *static Int16._unconditionallyBridgeFromObjectiveC(_:)(void *result)
{
  if (result)
  {
    id v1 = result;
    id v2 = objc_msgSend(v1, sel_shortValue);
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, v2);
    char v4 = static NSObject.== infix(_:_:)();

    if (v4) {
      return (void *)v2;
    }
    else {
      return 0;
    }
  }
  return result;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Int16(void *a1@<X0>, _WORD *a2@<X8>)
{
  if (a1)
  {
    id v3 = a1;
    id v4 = objc_msgSend(v3, sel_shortValue);
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, v4);
    char v6 = static NSObject.== infix(_:_:)();

    if (v6) {
      __int16 v7 = (__int16)v4;
    }
    else {
      __int16 v7 = 0;
    }
  }
  else
  {
    __int16 v7 = 0;
  }
  *a2 = v7;
}

id UInt16.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_unsignedShortValue);
}

uint64_t UInt16.init(exactly:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_unsignedShortValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v2 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, v1);
  char v3 = static NSObject.== infix(_:_:)();

  if (v3) {
    int v4 = (int)v1;
  }
  else {
    int v4 = 0;
  }
  return v4 & 0xFFFEFFFF | (((v3 & 1) == 0) << 16);
}

NSNumber __swiftcall UInt16._bridgeToObjectiveC()()
{
  unsigned __int16 v1 = v0;
  id v2 = objc_allocWithZone((Class)NSNumber);

  return (NSNumber)objc_msgSend(v2, sel_initWithUnsignedShort_, v1);
}

uint64_t static UInt16._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_unsignedShortValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if (v5)
  {
    *(_WORD *)a2 = (_WORD)v3;
    *(unsigned char *)(a2 + 2) = 0;
  }
  return v5 & 1;
}

void *static UInt16._unconditionallyBridgeFromObjectiveC(_:)(void *result)
{
  if (result)
  {
    id v1 = result;
    id v2 = objc_msgSend(v1, sel_unsignedShortValue);
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, v2);
    char v4 = static NSObject.== infix(_:_:)();

    if (v4) {
      return (void *)v2;
    }
    else {
      return 0;
    }
  }
  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UInt16()
{
  uint64_t v1 = *v0;
  id v2 = objc_allocWithZone((Class)NSNumber);

  return objc_msgSend(v2, sel_initWithUnsignedShort_, v1);
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UInt16(void *a1@<X0>, _WORD *a2@<X8>)
{
  if (a1)
  {
    id v3 = a1;
    id v4 = objc_msgSend(v3, sel_unsignedShortValue);
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, v4);
    char v6 = static NSObject.== infix(_:_:)();

    if (v6) {
      __int16 v7 = (__int16)v4;
    }
    else {
      __int16 v7 = 0;
    }
  }
  else
  {
    __int16 v7 = 0;
  }
  *a2 = v7;
}

id Int32.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_intValue);
}

unint64_t Int32.init(exactly:)(void *a1)
{
  return Int32.init(exactly:)(a1, (SEL *)&selRef_intValue, (SEL *)&selRef_initWithInt_);
}

uint64_t static Int32._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return static Int32._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, (SEL *)&selRef_intValue, (SEL *)&selRef_initWithInt_);
}

void *static Int32._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  return static Int32._unconditionallyBridgeFromObjectiveC(_:)(a1, (SEL *)&selRef_intValue, (SEL *)&selRef_initWithInt_);
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Int32(void *a1@<X0>, _DWORD *a2@<X8>)
{
}

unint64_t UInt32.init(exactly:)(void *a1)
{
  return Int32.init(exactly:)(a1, (SEL *)&selRef_unsignedIntValue, (SEL *)&selRef_initWithUnsignedInt_);
}

unint64_t Int32.init(exactly:)(void *a1, SEL *a2, SEL *a3)
{
  id v4 = [a1 *a2];
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a3, v4);
  char v6 = static NSObject.== infix(_:_:)();

  uint64_t v7 = v4;
  if ((v6 & 1) == 0) {
    uint64_t v7 = 0;
  }
  return v7 | ((unint64_t)((v6 & 1) == 0) << 32);
}

uint64_t static UInt32._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return static Int32._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, (SEL *)&selRef_unsignedIntValue, (SEL *)&selRef_initWithUnsignedInt_);
}

uint64_t static Int32._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2, SEL *a3, SEL *a4)
{
  id v6 = [a1 *a3];
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a4, v6);
  char v8 = static NSObject.== infix(_:_:)();

  if (v8)
  {
    *(_DWORD *)a2 = v6;
    *(unsigned char *)(a2 + 4) = 0;
  }
  return v8 & 1;
}

void *static UInt32._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  return static Int32._unconditionallyBridgeFromObjectiveC(_:)(a1, (SEL *)&selRef_unsignedIntValue, (SEL *)&selRef_initWithUnsignedInt_);
}

void *static Int32._unconditionallyBridgeFromObjectiveC(_:)(void *result, SEL *a2, SEL *a3)
{
  if (result)
  {
    id v5 = result;
    id v6 = [v5 *a2];
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a3, v6);
    LOBYTE(a2) = static NSObject.== infix(_:_:)();

    if (a2) {
      return (void *)v6;
    }
    else {
      return 0;
    }
  }
  return result;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UInt32(void *a1@<X0>, _DWORD *a2@<X8>)
{
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Int32(void *a1@<X0>, SEL *a2@<X3>, SEL *a3@<X4>, _DWORD *a4@<X8>)
{
  if (a1)
  {
    id v7 = a1;
    id v8 = [v7 *a2];
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v9 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a3, v8);
    LOBYTE(a3) = static NSObject.== infix(_:_:)();

    if (a3) {
      int v10 = (int)v8;
    }
    else {
      int v10 = 0;
    }
  }
  else
  {
    int v10 = 0;
  }
  *a4 = v10;
}

id Int64.init(exactly:)(void *a1)
{
  return Int64.init(exactly:)(a1, (SEL *)&selRef_longLongValue, (SEL *)&selRef_initWithLongLong_);
}

uint64_t static Int64._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return static Int64._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, (SEL *)&selRef_longLongValue, (SEL *)&selRef_initWithLongLong_);
}

id static Int64._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  return static Int64._unconditionallyBridgeFromObjectiveC(_:)(a1, (SEL *)&selRef_longLongValue, (SEL *)&selRef_initWithLongLong_);
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Int64(void *a1@<X0>, void *a2@<X8>)
{
}

id UInt64.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_unsignedLongLongValue);
}

id UInt64.init(exactly:)(void *a1)
{
  return Int64.init(exactly:)(a1, (SEL *)&selRef_unsignedLongLongValue, (SEL *)&selRef_initWithUnsignedLongLong_);
}

id Int64.init(exactly:)(void *a1, SEL *a2, SEL *a3)
{
  id v4 = [a1 *a2];
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a3, v4);
  char v6 = static NSObject.== infix(_:_:)();

  if (v6) {
    return v4;
  }
  else {
    return 0;
  }
}

id static UInt64._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  return static Int64._unconditionallyBridgeFromObjectiveC(_:)(a1, (SEL *)&selRef_unsignedLongLongValue, (SEL *)&selRef_initWithUnsignedLongLong_);
}

id static Int64._unconditionallyBridgeFromObjectiveC(_:)(id result, SEL *a2, SEL *a3)
{
  if (result)
  {
    id v5 = result;
    id v6 = [v5 *a2];
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a3, v6);
    LOBYTE(a2) = static NSObject.== infix(_:_:)();

    if (a2) {
      return v6;
    }
    else {
      return 0;
    }
  }
  return result;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UInt64(void *a1@<X0>, void *a2@<X8>)
{
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Int64(void *a1@<X0>, SEL *a2@<X3>, SEL *a3@<X4>, void *a4@<X8>)
{
  if (a1)
  {
    id v7 = a1;
    id v8 = [v7 *a2];
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v9 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a3, v8);
    LOBYTE(a3) = static NSObject.== infix(_:_:)();

    if (a3) {
      id v10 = v8;
    }
    else {
      id v10 = 0;
    }
  }
  else
  {
    id v10 = 0;
  }
  *a4 = v10;
}

id Int.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_integerValue);
}

id Int.init(exactly:)(void *a1)
{
  return Int64.init(exactly:)(a1, (SEL *)&selRef_integerValue, (SEL *)&selRef_initWithInteger_);
}

uint64_t static Int._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return static Int64._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, (SEL *)&selRef_integerValue, (SEL *)&selRef_initWithInteger_);
}

id static Int._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  return static Int64._unconditionallyBridgeFromObjectiveC(_:)(a1, (SEL *)&selRef_integerValue, (SEL *)&selRef_initWithInteger_);
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Int(void *a1@<X0>, void *a2@<X8>)
{
}

id UInt.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_unsignedIntegerValue);
}

id UInt.init(exactly:)(void *a1)
{
  return Int64.init(exactly:)(a1, (SEL *)&selRef_unsignedIntegerValue, (SEL *)&selRef_initWithUnsignedInteger_);
}

uint64_t static UInt._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return static Int64._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, (SEL *)&selRef_unsignedIntegerValue, (SEL *)&selRef_initWithUnsignedInteger_);
}

id static UInt._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  return static Int64._unconditionallyBridgeFromObjectiveC(_:)(a1, (SEL *)&selRef_unsignedIntegerValue, (SEL *)&selRef_initWithUnsignedInteger_);
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UInt(void *a1@<X0>, void *a2@<X8>)
{
}

id Float.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_floatValue);
}

uint64_t Float.init(exactly:)(void *a1)
{
  unint64_t v1 = specialized Float.init(exactly:)(a1);
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Float(void *a1@<X0>, _DWORD *a2@<X8>)
{
  specialized static Float._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *a2 = v3;
}

uint64_t Double.init(exactly:)(void *a1)
{
  return specialized Double.init(exactly:)(a1);
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Double(void *a1@<X0>, void *a2@<X8>)
{
  specialized static Double._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *a2 = v3;
}

id Bool.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_BOOLValue);
}

void Bool.init(exactly:)(uint64_t a1)
{
  if (!*MEMORY[0x1E4F1CFD0])
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*MEMORY[0x1E4F1CFD0] != a1)
  {
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v2 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, 1);
    char v3 = static NSObject.== infix(_:_:)();

    if ((v3 & 1) == 0)
    {
      if (*MEMORY[0x1E4F1CFC8])
      {
        if (*MEMORY[0x1E4F1CFC8] != a1)
        {
          id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, 0);
          static NSObject.== infix(_:_:)();
        }
        return;
      }
LABEL_11:
      __break(1u);
    }
  }
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Bool(void *a1@<X0>, unsigned char *a2@<X8>)
{
  specialized static Bool._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *a2 = v3 & 1;
}

double CGFloat.init(exactly:)(void *a1)
{
  objc_msgSend(a1, sel_doubleValue);
  if ((~v2 & 0x7FF0000000000000) != 0 || (v2 & 0xFFFFFFFFFFFFFLL) == 0) {
    specialized Double.init(exactly:)(a1);
  }
  else {
    objc_msgSend(a1, sel_doubleValue);
  }
  return result;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance CGFloat(void *a1@<X0>, void *a2@<X8>)
{
  specialized static CGFloat._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *a2 = v3;
}

id protocol witness for ExpressibleByFloatLiteral.init(floatLiteral:) in conformance NSNumber@<X0>(double *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithDouble_, *a1);
  *a2 = result;
  return result;
}

id protocol witness for ExpressibleByIntegerLiteral.init(integerLiteral:) in conformance NSNumber@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithInteger_, *a1);
  *a2 = result;
  return result;
}

id protocol witness for ExpressibleByBooleanLiteral.init(BOOLeanLiteral:) in conformance NSNumber@<X0>(unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithBool_, *a1);
  *a2 = result;
  return result;
}

void specialized static Int8._forceBridgeFromObjectiveC(_:result:)(void *a1, unsigned char *a2)
{
  id v3 = objc_msgSend(a1, sel_charValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if (v5)
  {
    *a2 = (_BYTE)v3;
    a2[1] = 0;
  }
  else
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 544175136;
    v7._uint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = 947154505;
    v8._uint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void specialized static UInt8._forceBridgeFromObjectiveC(_:result:)(void *a1, unsigned char *a2)
{
  id v3 = objc_msgSend(a1, sel_unsignedCharValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if (v5)
  {
    *a2 = (_BYTE)v3;
    a2[1] = 0;
  }
  else
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 544175136;
    v7._uint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = 0x38746E4955;
    v8._uint64_t object = (void *)0xE500000000000000;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void specialized static Int16._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_shortValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if (v5)
  {
    *(_WORD *)a2 = (_WORD)v3;
    *(unsigned char *)(a2 + 2) = 0;
  }
  else
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 544175136;
    v7._uint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = 0x3631746E49;
    v8._uint64_t object = (void *)0xE500000000000000;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void specialized static UInt16._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_unsignedShortValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if (v5)
  {
    *(_WORD *)a2 = (_WORD)v3;
    *(unsigned char *)(a2 + 2) = 0;
  }
  else
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 544175136;
    v7._uint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = 0x3631746E4955;
    v8._uint64_t object = (void *)0xE600000000000000;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void specialized static Int32._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_intValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInt_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if (v5)
  {
    *(_DWORD *)a2 = v3;
    *(unsigned char *)(a2 + 4) = 0;
  }
  else
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 544175136;
    v7._uint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = 0x3233746E49;
    v8._uint64_t object = (void *)0xE500000000000000;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void specialized static UInt32._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_unsignedIntValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedInt_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if (v5)
  {
    *(_DWORD *)a2 = v3;
    *(unsigned char *)(a2 + 4) = 0;
  }
  else
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 544175136;
    v7._uint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = 0x3233746E4955;
    v8._uint64_t object = (void *)0xE600000000000000;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void specialized static UInt64._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_unsignedLongLongValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedLongLong_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if (v5)
  {
    *(void *)a2 = v3;
    *(unsigned char *)(a2 + 8) = 0;
  }
  else
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 544175136;
    v7._uint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = 0x3436746E4955;
    v8._uint64_t object = (void *)0xE600000000000000;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

unint64_t specialized static Float._forceBridgeFromObjectiveC(_:result:)(unint64_t *a1, unsigned char *object)
{
  id v3 = a1;
  objc_msgSend(a1, sel_floatValue);
  if ((~v4 & 0x7F800000) != 0 || (v4 & 0x7FFFFF) == 0)
  {
    unint64_t result = specialized Float.init(exactly:)(v3);
    *(_DWORD *)uint64_t object = result;
    object[4] = BYTE4(result) & 1;
    if ((result & 0x100000000) == 0) {
      return result;
    }
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    unint64_t v13 = 0xD000000000000011;
    unint64_t v14 = 0x80000001823AD070;
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v7._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    uint64_t object = v7._object;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._uint64_t countAndFlagsBits = 544175136;
    v8._uint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v8);
    id v3 = &v13;
    v9._uint64_t countAndFlagsBits = 0x74616F6C46;
    v9._uint64_t object = (void *)0xE500000000000000;
    String.append(_:)(v9);
    LODWORD(v12) = 0;
    uint64_t v11 = 478;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  unint64_t result = (unint64_t)objc_msgSend(v3, sel_floatValue, v11, v12, v13, v14);
  *(_DWORD *)uint64_t object = v10;
  object[4] = 0;
  return result;
}

void specialized static Float._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    objc_msgSend(v1, sel_floatValue);
    if ((~v2 & 0x7F800000) != 0 || (v2 & 0x7FFFFF) == 0) {
      specialized Float.init(exactly:)(v1);
    }
    else {
      objc_msgSend(v1, sel_floatValue);
    }
  }
}

void specialized static Double._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    objc_msgSend(v1, sel_doubleValue);
    if ((~v2 & 0x7FF0000000000000) != 0 || (v2 & 0xFFFFFFFFFFFFFLL) == 0) {
      specialized Double.init(exactly:)(v1);
    }
    else {
      objc_msgSend(v1, sel_doubleValue);
    }
  }
}

void specialized static Bool._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, char *a2)
{
  if (!*MEMORY[0x1E4F1CFD0])
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (*MEMORY[0x1E4F1CFD0] == a1)
  {
    char v4 = 1;
    goto LABEL_9;
  }
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  char v4 = 1;
  id v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, 1);
  char v6 = static NSObject.== infix(_:_:)();

  if (v6)
  {
LABEL_9:
    *a2 = v4;
    return;
  }
  if (!*MEMORY[0x1E4F1CFC8]) {
    goto LABEL_11;
  }
  if (*MEMORY[0x1E4F1CFC8] == a1
    || (id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, 0),
        char v8 = static NSObject.== infix(_:_:)(),
        v7,
        (v8 & 1) != 0))
  {
    char v4 = 0;
    goto LABEL_9;
  }
LABEL_12:
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v9._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 544175136;
  v10._uint64_t object = (void *)0xE400000000000000;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = 1819242306;
  v11._uint64_t object = (void *)0xE400000000000000;
  String.append(_:)(v11);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized static Bool._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  if (a1)
  {
    if (!*MEMORY[0x1E4F1CFD0])
    {
      __break(1u);
LABEL_12:
      __break(1u);
      return;
    }
    if (a1 != (void *)*MEMORY[0x1E4F1CFD0])
    {
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      id v2 = objc_allocWithZone((Class)NSNumber);
      id v3 = a1;
      id v4 = objc_msgSend(v2, sel_initWithInteger_, 1);
      char v5 = static NSObject.== infix(_:_:)();

      if (v5)
      {
LABEL_10:

        return;
      }
      if (*MEMORY[0x1E4F1CFC8])
      {
        if (v3 != (id)*MEMORY[0x1E4F1CFC8])
        {
          id v6 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, 0);
          static NSObject.== infix(_:_:)();

          id v3 = v6;
        }
        goto LABEL_10;
      }
      goto LABEL_12;
    }
  }
}

uint64_t specialized static CGFloat._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t result = specialized static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
  if ((result & 1) == 0)
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v3._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._uint64_t countAndFlagsBits = 544175136;
    v4._uint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v4);
    v5._uint64_t countAndFlagsBits = 0x74616F6C464743;
    v5._uint64_t object = (void *)0xE700000000000000;
    String.append(_:)(v5);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void specialized static CGFloat._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    objc_msgSend(v1, sel_doubleValue);
    if ((~v2 & 0x7FF0000000000000) != 0 || (v2 & 0xFFFFFFFFFFFFFLL) == 0) {
      specialized Double.init(exactly:)(v1);
    }
    else {
      objc_msgSend(v1, sel_doubleValue);
    }
  }
}

unint64_t lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal()
{
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal;
  if (!lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal)
  {
    type metadata accessor for NSDecimal(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal);
  }
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByBooleanLiteral.BooleanLiteralType : _ExpressibleByBuiltinBooleanLiteral in NSNumber()
{
  return MEMORY[0x1E4FBB3C0];
}

uint64_t SortDescriptor.AllowedComparison.CodingKeys.init(rawValue:)(Swift::String string)
{
  uint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._uint64_t object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SortDescriptor.AllowedComparison.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t SortDescriptor.AllowedComparison.CodingKeys.rawValue.getter(char a1)
{
  if (a1) {
    return 0xD000000000000010;
  }
  else {
    return 0x65756C6156776172;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SortDescriptor<A>.AllowedComparison.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1C8];

  return MEMORY[0x1F4185BB0](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SortDescriptor<A>.AllowedComparison.CodingKeys(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4183DE0](a1, a2, WitnessTable, v5);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SortDescriptor<A>.AllowedComparison.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4183DF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance SortDescriptor<A>.AllowedComparison.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4183DE8](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SortDescriptor<A>.AllowedComparison.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = SortDescriptor.AllowedComparison.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SortDescriptor<A>.AllowedComparison.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SortDescriptor.AllowedComparison.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SortDescriptor<A>.AllowedComparison.CodingKeys()
{
  return SortDescriptor.AllowedComparison.CodingKeys.rawValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SortDescriptor<A>.AllowedComparison.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  uint64_t result = SortDescriptor.AllowedComparison.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SortDescriptor<A>.AllowedComparison.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = protocol witness for Sequence._customContainsEquatableElement(_:) in conformance _DarwinSearchPathsSequence();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SortDescriptor<A>.AllowedComparison.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SortDescriptor<A>.AllowedComparison.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

char *SortDescriptor.AllowedComparison.selector.getter(uint64_t a1)
{
  (*(void (**)(Swift::UInt *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(&v11, v1, a1);
  Swift::String v2 = &selRef_compare_;
  switch(v14)
  {
    case 2:
      swift_release();
      outlined destroy of AnySortComparator((uint64_t)&v11);
      goto LABEL_13;
    case 3:
      Swift::UInt v3 = v11;
      unsigned int v4 = v12;
      int v5 = v13;
      if (one-time initialization token for validAlgorithms != -1) {
        swift_once();
      }
      id v6 = static String.StandardComparator.validAlgorithms;
      if (!*((void *)static String.StandardComparator.validAlgorithms + 2)) {
        goto LABEL_13;
      }
      int v7 = v5 ? 256 : 0;
      unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v7 | v4);
      if ((v9 & 1) == 0) {
        goto LABEL_13;
      }
      Swift::String v2 = (char **)(v6[7] + 8 * v8);
      return *v2;
    case 4:
      return *v2;
    default:
      swift_release();
LABEL_13:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x181F90DC0);
  }
}

uint64_t SortDescriptor.AllowedComparison.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  type metadata accessor for SortDescriptor.AllowedComparison.CodingKeys();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v20 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v6 = (char *)&v18 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    int v7 = a1;
    uint64_t v9 = v20;
    uint64_t v8 = v21;
    LOBYTE(v22) = 0;
    uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
    if (v10 == 1)
    {
      char v27 = 1;
      lazy protocol witness table accessor for type String.StandardComparator and conformance String.StandardComparator();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v19 = v6;
      uint64_t v15 = v22;
      char v16 = v23;
      char v17 = v24;
      if (v22 || (v23 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t))(v9 + 8))(v19, v4);
        *(void *)&v25[0] = v15;
        BYTE8(v25[0]) = v16;
        BYTE9(v25[0]) = v17;
        char v26 = 3;
        uint64_t v13 = v8;
        goto LABEL_9;
      }
      LOBYTE(v22) = 0;
      type metadata accessor for DecodingError();
      swift_allocError();
      swift_getWitnessTable();
      id v6 = v19;
    }
    else
    {
      if (!v10)
      {
        uint64_t v13 = v8;
        (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v4);
        memset(v25, 0, sizeof(v25));
        char v26 = 4;
LABEL_9:
        uint64_t v14 = type metadata accessor for SortDescriptor.AllowedComparison();
        (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(void *)(v14 - 8) + 32))(v13, v25, v14);
        uint64_t v11 = (uint64_t)v7;
        return __swift_destroy_boxed_opaque_existential_1(v11);
      }
      LOBYTE(v22) = 0;
      type metadata accessor for DecodingError();
      swift_allocError();
      swift_getWitnessTable();
    }
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v4);
    a1 = v7;
  }
  uint64_t v11 = (uint64_t)a1;
  return __swift_destroy_boxed_opaque_existential_1(v11);
}

double SortDescriptor.AllowedComparison.init(fromSelector:)@<D0>(const char *a1@<X0>, uint64_t a2@<X8>)
{
  Swift::UInt v3 = NSStringFromSelector(a1);
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  BOOL v7 = v4 == (id)0x3A657261706D6F63 && v6 == 0xE800000000000000;
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    memset(v12, 0, sizeof(v12));
    char v8 = 4;
  }
  else
  {
    if (v4 == (id)0xD000000000000019 && v6 == 0x80000001823B43F0
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      *(void *)&v12[0] = 833;
    }
    else
    {
      if (v4 == (id)0xD000000000000011 && v6 == 0x80000001823B4410)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v11 & 1) == 0)
        {
          double result = 0.0;
          *(_OWORD *)(a2 + 64) = 0u;
          *(_OWORD *)(a2 + 80) = 0u;
          *(_OWORD *)(a2 + 32) = 0u;
          *(_OWORD *)(a2 + 48) = 0u;
          *(_OWORD *)a2 = 0u;
          *(_OWORD *)(a2 + 16) = 0u;
          *(unsigned char *)(a2 + 96) = -1;
          return result;
        }
      }
      *(void *)&v12[0] = 0;
    }
    WORD4(v12[0]) = 1;
    char v8 = 3;
  }
  char v13 = v8;
  uint64_t v9 = type metadata accessor for SortDescriptor.AllowedComparison();
  (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(void *)(v9 - 8) + 32))(a2, v12, v9);
  return result;
}

uint64_t SortDescriptor.AllowedComparison.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for SortDescriptor.AllowedComparison.CodingKeys();
  swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v22 = *(void *)(v6 - 8);
  uint64_t v23 = v6;
  MEMORY[0x1F4188790](v6);
  char v8 = (char *)&v21 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v9 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16);
  v9(&v27, v3, a2);
  switch(v30)
  {
    case 2:
      swift_release();
      outlined destroy of AnySortComparator((uint64_t)&v27);
      goto LABEL_4;
    case 3:
      uint64_t v15 = v27;
      char v16 = v28;
      char v17 = v29;
      LOBYTE(v24) = 0;
      uint64_t v18 = v23;
      uint64_t v19 = v21;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (!v19)
      {
        uint64_t v24 = v15;
        char v25 = v16;
        char v26 = v17;
        char v31 = 1;
        lazy protocol witness table accessor for type String.StandardComparator and conformance String.StandardComparator();
        KeyedEncodingContainer.encode<A>(_:forKey:)();
      }
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v8, v18);
      break;
    case 4:
      LOBYTE(v24) = 0;
      uint64_t v20 = v23;
      KeyedEncodingContainer.encode(_:forKey:)();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v8, v20);
      break;
    default:
      swift_release();
LABEL_4:
      uint64_t v10 = type metadata accessor for EncodingError();
      swift_allocError();
      unsigned __int8 v12 = v11;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
      _OWORD v12[3] = a2;
      uint64_t v13 = swift_allocObject();
      *unsigned __int8 v12 = v13;
      v9((uint64_t *)(v13 + 16), v3, a2);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v10 - 8) + 104))(v12, *MEMORY[0x1E4FBBAA0], v10);
      swift_willThrow();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v8, v23);
      break;
  }
  return result;
}

void SortDescriptor.AllowedComparison.hash(into:)(uint64_t a1, uint64_t a2)
{
  (*(void (**)(long long *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(&v21, v2, a2);
  switch(v27)
  {
    case 1:
      Swift::UInt v7 = v21;
      Swift::UInt8 v8 = BYTE8(v21);
      Swift::UInt v9 = BYTE9(v21);
      uint64_t v10 = v22;
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(v7);
      Hasher._combine(_:)(v8);
      Hasher._combine(_:)(v9);
      *(void *)&long long v15 = v10;
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for String?);
      goto LABEL_4;
    case 2:
      long long v17 = v23;
      long long v18 = v24;
      long long v19 = v25;
      uint64_t v20 = v26;
      long long v15 = v21;
      long long v16 = v22;
      Hasher._combine(_:)(2uLL);
      __swift_project_boxed_opaque_existential_1(&v15, *((uint64_t *)&v16 + 1));
      dispatch thunk of Hashable.hash(into:)();
      type metadata accessor for PartialKeyPath();
      dispatch thunk of Hashable.hash(into:)();
      outlined destroy of AnySortComparator((uint64_t)&v15);
      swift_release();
      return;
    case 3:
      Swift::UInt v11 = v21;
      Swift::UInt8 v12 = BYTE8(v21);
      Swift::UInt v13 = BYTE9(v21);
      Hasher._combine(_:)(4uLL);
      Hasher._combine(_:)(v11);
      Hasher._combine(_:)(v12);
      Swift::UInt v14 = v13;
      goto LABEL_8;
    case 4:
      Swift::UInt v14 = 3;
LABEL_8:
      Hasher._combine(_:)(v14);
      break;
    default:
      Swift::UInt v3 = v21;
      Swift::UInt8 v4 = BYTE8(v21);
      Swift::UInt v5 = BYTE9(v21);
      uint64_t v6 = v22;
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v3);
      Hasher._combine(_:)(v4);
      Hasher._combine(_:)(v5);
      *(void *)&long long v15 = v6;
LABEL_4:
      type metadata accessor for KeyPath();
      dispatch thunk of Hashable.hash(into:)();
      swift_release();
      break;
  }
}

uint64_t static SortDescriptor.AllowedComparison.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SortDescriptor.AllowedComparison();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(int8x16_t *, uint64_t, uint64_t))(v5 + 16);
  v6((int8x16_t *)v24, a1, v4);
  v6(&v25, a2, v4);
  switch(v24[96])
  {
    case 1:
      v6((int8x16_t *)&v19, (uint64_t)v24, v4);
      uint64_t v7 = v22;
      if (v31 != 1) {
        goto LABEL_3;
      }
      goto LABEL_5;
    case 2:
      v6((int8x16_t *)&v19, (uint64_t)v24, v4);
      uint64_t v10 = v23;
      if (v31 != 2)
      {
        swift_release();
        outlined destroy of AnySortComparator((uint64_t)&v19);
        goto LABEL_19;
      }
      uint64_t v11 = v30.i64[1];
      void v17[2] = v27;
      v17[3] = v28;
      void v17[4] = v29;
      uint64_t v18 = v30.i64[0];
      v17[0] = v25;
      v17[1] = v26;
      char v12 = specialized static AnySortComparator.== infix(_:_:)(&v19, v17);
      outlined destroy of AnySortComparator((uint64_t)&v19);
      if (v12)
      {
        type metadata accessor for AnyKeyPath();
        swift_retain();
        swift_retain();
        char v9 = MEMORY[0x185302EC0](v10, v11);
        swift_release_n();
        swift_release_n();
        outlined destroy of AnySortComparator((uint64_t)v17);
        goto LABEL_12;
      }
      outlined destroy of AnySortComparator((uint64_t)v17);
      swift_release();
      goto LABEL_24;
    case 3:
      v6((int8x16_t *)&v19, (uint64_t)v24, v4);
      if (v31 != 3) {
        goto LABEL_19;
      }
      char v13 = (v19 != v25.i64[0]) | v20 ^ v25.i8[8] | v21 ^ v25.i8[9];
      (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v24, v4);
      char v9 = v13 ^ 1;
      return v9 & 1;
    case 4:
      if (v31 != 4) {
        goto LABEL_19;
      }
      int8x16_t v14 = vorrq_s8(vorrq_s8(vorrq_s8(v27, v29), vorrq_s8(v28, v30)), vorrq_s8(v25, v26));
      if (vorr_s8(*(int8x8_t *)v14.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL))) {
        goto LABEL_19;
      }
      (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v24, v4);
      char v9 = 1;
      return v9 & 1;
    default:
      v6((int8x16_t *)&v19, (uint64_t)v24, v4);
      uint64_t v7 = v22;
      if (v31)
      {
LABEL_3:
        swift_release();
LABEL_19:
        TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
        (*(void (**)(unsigned char *, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 8))(v24, TupleTypeMetadata2);
LABEL_20:
        char v9 = 0;
        return v9 & 1;
      }
LABEL_5:
      uint64_t v8 = v26.i64[0];
      if (v19 != v25.i64[0] || ((v20 ^ v25.u8[8]) & 1) != 0 || ((v21 ^ v25.u8[9]) & 1) != 0)
      {
        swift_release();
LABEL_24:
        swift_release();
        (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v24, v4);
        goto LABEL_20;
      }
      type metadata accessor for AnyKeyPath();
      swift_retain();
      swift_retain();
      char v9 = MEMORY[0x185302EC0](v7, v8);
      swift_release_n();
      swift_release_n();
LABEL_12:
      (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v24, v4);
      return v9 & 1;
  }
}

Swift::Int SortDescriptor.AllowedComparison.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  SortDescriptor.AllowedComparison.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SortDescriptor<A>.AllowedComparison(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  SortDescriptor.AllowedComparison.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SortDescriptor<A>.AllowedComparison@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SortDescriptor.AllowedComparison.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SortDescriptor<A>.AllowedComparison(void *a1, uint64_t a2)
{
  return SortDescriptor.AllowedComparison.encode(to:)(a1, a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SortDescriptor<A>.AllowedComparison(uint64_t a1, uint64_t a2)
{
  return static SortDescriptor.AllowedComparison.== infix(_:_:)(a1, a2);
}

uint64_t SortDescriptor.order.setter(uint64_t result)
{
  unsigned char *v1 = result & 1;
  return result;
}

uint64_t (*SortDescriptor.order.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t sub_181F91E54()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181F91E64()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181F91E74()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181F920AC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181F920BC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181F920CC()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181F92104()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t SortDescriptor.init(_:comparator:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  char v5 = *((unsigned char *)a1 + 9);
  *(unsigned char *)a2 = v5;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  uint64_t result = swift_release();
  *(void *)(a2 + 24) = v3;
  *(unsigned char *)(a2 + 32) = v4;
  *(unsigned char *)(a2 + 33) = v5;
  *(void *)(a2 + 40) = v7;
  *(unsigned char *)(a2 + 120) = 0;
  return result;
}

{
  uint64_t v3;
  char v4;
  char v5;
  uint64_t result;
  uint64_t v7;

  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  char v5 = *((unsigned char *)a1 + 9);
  *(unsigned char *)a2 = v5;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  uint64_t result = swift_release();
  *(void *)(a2 + 24) = v3;
  *(unsigned char *)(a2 + 32) = v4;
  *(unsigned char *)(a2 + 33) = v5;
  *(void *)(a2 + 40) = v7;
  *(unsigned char *)(a2 + 120) = 1;
  return result;
}

uint64_t SortDescriptor.init(_:comparator:order:)@<X0>(uint64_t *a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  char v4 = a2 & 1;
  uint64_t v5 = *a1;
  char v6 = *((unsigned char *)a1 + 8);
  *(unsigned char *)a3 = a2 & 1;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  uint64_t result = swift_release();
  *(void *)(a3 + 24) = v5;
  *(unsigned char *)(a3 + 32) = v6;
  *(unsigned char *)(a3 + 33) = v4;
  *(void *)(a3 + 40) = v8;
  *(unsigned char *)(a3 + 120) = 0;
  return result;
}

{
  char v4;
  uint64_t v5;
  char v6;
  uint64_t result;
  uint64_t v8;

  char v4 = a2 & 1;
  uint64_t v5 = *a1;
  char v6 = *((unsigned char *)a1 + 8);
  *(unsigned char *)a3 = a2 & 1;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  uint64_t result = swift_release();
  *(void *)(a3 + 24) = v5;
  *(unsigned char *)(a3 + 32) = v6;
  *(unsigned char *)(a3 + 33) = v4;
  *(void *)(a3 + 40) = v8;
  *(unsigned char *)(a3 + 120) = 1;
  return result;
}

uint64_t SortDescriptor.init<A>(_:comparator:)(uint64_t a1, uint64_t *a2)
{
  return SortDescriptor.init<A>(_:comparator:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t *))SortDescriptor.init<A>(_:comparator:order:));
}

{
  return SortDescriptor.init<A>(_:comparator:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t *))SortDescriptor.init<A>(_:comparator:order:));
}

uint64_t SortDescriptor.init<A>(_:comparator:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  char v4 = *((unsigned char *)a2 + 8);
  char v5 = *((unsigned char *)a2 + 9);
  uint64_t v7 = *a2;
  char v8 = v4;
  char v9 = v5;
  return a3(a1, &v7);
}

uint64_t SortDescriptor.init<A>(_:comparator:order:)@<X0>(uint64_t *a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  return SortDescriptor.init<A>(_:comparator:order:)(a1, a2, a3);
}

{
  return SortDescriptor.init<A>(_:comparator:order:)(a1, a2, a3);
}

{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  char v13;
  Swift::String v14;
  Swift::String v15;

  char v5 = *a1;
  char v6 = *((unsigned __int8 *)a1 + 8);
  uint64_t v7 = *((unsigned __int8 *)a1 + 9);
  swift_retain();
  char v8 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  uint64_t v10 = v9;
  swift_release();
  if (v10)
  {
    uint64_t result = swift_release();
    *(void *)(a3 + 8) = v8;
    *(void *)(a3 + 16) = v10;
    *(unsigned char *)a3 = a2 & 1;
    if (v5) {
      char v12 = 1;
    }
    else {
      char v12 = v6;
    }
    if ((v12 | v7))
    {
      *(unsigned char *)(a3 + 32) = v6;
      *(unsigned char *)(a3 + 33) = 0;
      char v13 = 3;
    }
    else
    {
      char v5 = 0;
      *(void *)(a3 + 112) = 0;
      *(_OWORD *)(a3 + 80) = 0u;
      *(_OWORD *)(a3 + 96) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      char v13 = 4;
    }
    *(void *)(a3 + 24) = v5;
    *(unsigned char *)(a3 + 120) = v13;
  }
  else
  {
    _StringGuts.grow(_:)(111);
    swift_getMetatypeMetadata();
    v14._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._uint64_t object = (void *)0x80000001823B41B0;
    v15._uint64_t countAndFlagsBits = 0xD00000000000006DLL;
    String.append(_:)(v15);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

double SortDescriptor.init<A>(_:comparing:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = [a1 key];
  if (!v4) {
    goto LABEL_6;
  }
  char v5 = v4;
  id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v8 = v7;

  char v9 = (const char *)objc_msgSend(a1, sel_selector);
  if (!v9)
  {
    swift_bridgeObjectRelease();
LABEL_6:

    goto LABEL_8;
  }
  SortDescriptor.AllowedComparison.init(fromSelector:)(v9, (uint64_t)v18);
  if (v18[96] != 255)
  {
    uint64_t v10 = type metadata accessor for SortDescriptor.AllowedComparison();
    uint64_t v11 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v10 - 8) + 32);
    v11(v19, v18, v10);
    *((void *)&v20 + 1) = v6;
    *(void *)&long long v21 = v8;
    unsigned __int8 v12 = objc_msgSend(a1, sel_ascending);

    LOBYTE(v20) = v12 ^ 1;
    v11((unsigned char *)&v21 + 8, v19, v10);
    long long v13 = v25;
    *(_OWORD *)(a2 + 64) = v24;
    *(_OWORD *)(a2 + 80) = v13;
    *(_OWORD *)(a2 + 96) = v26[0];
    *(_OWORD *)(a2 + 105) = *(_OWORD *)((char *)v26 + 9);
    long long v14 = v21;
    *(_OWORD *)a2 = v20;
    *(_OWORD *)(a2 + 16) = v14;
    double result = *(double *)&v22;
    long long v16 = v23;
    *(_OWORD *)(a2 + 32) = v22;
    *(_OWORD *)(a2 + 48) = v16;
    return result;
  }
  swift_bridgeObjectRelease();

  type metadata accessor for SortDescriptor.AllowedComparison();
  uint64_t v17 = type metadata accessor for Optional();
  (*(void (**)(unsigned char *, uint64_t))(*(void *)(v17 - 8) + 8))(v18, v17);
LABEL_8:
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 1;
  double result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(unsigned char *)(a2 + 120) = 0;
  return result;
}

uint64_t SortDescriptor.compare(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for SortDescriptor.AllowedComparison();
  (*(void (**)(_OWORD *, unsigned char *, uint64_t))(*(void *)(v5 - 8) + 16))(v130, v3 + 24, v5);
  switch(v132)
  {
    case 1:
      unint64_t v33 = *(void *)&v130[0];
      char v34 = BYTE8(v130[0]);
      int v35 = BYTE9(v130[0]);
      swift_retain_n();
      swift_getAtKeyPath();
      swift_release();
      swift_retain();
      swift_getAtKeyPath();
      swift_release();
      uint64_t v13 = v123;
      if (!*((void *)&v124 + 1))
      {
        swift_release_n();
        if (v123)
        {
          swift_bridgeObjectRelease();
          if (*v3) {
            return 1;
          }
          else {
            return -1;
          }
        }
        return v13;
      }
      if (!v123)
      {
        swift_release_n();
        swift_bridgeObjectRelease();
        if (*v3) {
          return -1;
        }
        else {
          return 1;
        }
      }
      int v117 = v35;
      if (v34)
      {
        if (one-time initialization token for cache != -1) {
          swift_once();
        }
        LocaleCache.current.getter();
        uint64_t v37 = v36;
        unint64_t v120 = v122;
        uint64_t v121 = v123;
        lazy protocol witness table accessor for type String and conformance String();
        StringProtocol._ephemeralString.getter();
        StringProtocol._ephemeralString.getter();
        long long v111 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v109 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        long long v118 = v124;
        uint64_t v38 = StringProtocol._toUTF16Offsets(_:)();
        unint64_t v40 = v39 - v38;
        if (!__OFSUB__(v39, v38))
        {
          uint64_t v41 = v38;
          uint64_t ObjectType = swift_getObjectType();
          uint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t))(v37 + 488);
          swift_unknownObjectRetain();
          uint64_t v44 = (void *)v43(ObjectType, v37);
          swift_unknownObjectRelease();
          uint64_t v13 = (uint64_t)objc_msgSend(v111, sel_compare_options_range_locale_, v109, v33, v41, v40, v44);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_17;
        }
        __break(1u);
        goto LABEL_123;
      }
      swift_bridgeObjectRetain();
      unint64_t v60 = Substring.init<A>(_:)();
      unint64_t v40 = v61;
      unint64_t v63 = v62;
      unint64_t v112 = v64;
      unint64_t v120 = v122;
      uint64_t v121 = v123;
      swift_bridgeObjectRetain();
      unint64_t v65 = Substring.init<A>(_:)();
      unint64_t v69 = v68;
      if (!v33)
      {
        if (v63 == v67 && v112 == v68 && v60 >> 16 == v65 >> 16 && v40 >> 16 == v66 >> 16)
        {
          swift_bridgeObjectRelease_n();
          LODWORD(v40) = v117;
        }
        else
        {
          uint64_t v13 = 1;
          if (_stringCompareInternal(_:_:_:_:expecting:)())
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v13 = -1;
            LODWORD(v40) = v117;
            goto LABEL_87;
          }
          char v95 = _stringCompareInternal(_:_:_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          LODWORD(v40) = v117;
          if (v95) {
            goto LABEL_87;
          }
        }
        uint64_t v13 = 0;
        goto LABEL_87;
      }
      unint64_t v110 = v40;
      unint64_t v107 = v66;
      if ((v33 & 2) != 0)
      {
        unint64_t v81 = v65;
        unint64_t v82 = v67;
        unint64_t v83 = v66;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v101 = v63;
        unint64_t v72 = v81;
        unint64_t v84 = v83;
        unint64_t v70 = v40;
        unint64_t v85 = v82;
        unint64_t v71 = v60;
        LODWORD(v40) = v117;
        uint64_t v13 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v81, v84, v85, v69, (v33 >> 8) & 1, (v33 >> 7) & 1, v33 & 1, (v33 >> 6) & 1, (v33 & 0x200) != 0, v60, v110, v101, v112);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v70 = v40;
        uint64_t v100 = v63;
        unint64_t v71 = v60;
        unint64_t v72 = v65;
        uint64_t v13 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v65, v66, v67, v68, (v33 >> 8) & 1, (v33 >> 7) & 1, v33 & 1, (v33 >> 6) & 1, (v33 & 0x200) != 0, v60, v40, v100, v112);
        LODWORD(v40) = v117;
      }
      if (v13)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_87;
      }
      if ((v33 & 0x200) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v13 = 0;
        goto LABEL_87;
      }
      unint64_t v120 = v71;
      *(void *)&long long v118 = v72;
      unint64_t v88 = v70 >> 14;
      unint64_t v89 = v71 >> 14;
      if (v71 >> 14 >= v70 >> 14 || v107 >> 14 <= v72 >> 14) {
        goto LABEL_114;
      }
      unint64_t v115 = v107 >> 14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unsigned int v90 = Substring.UnicodeScalarView.subscript.getter();
      unsigned int v91 = Substring.UnicodeScalarView.subscript.getter();
      if (v90 != v91)
      {
        unsigned int v94 = v91;
        goto LABEL_108;
      }
      Substring.UnicodeScalarView.formIndex(after:)();
      Substring.UnicodeScalarView.formIndex(after:)();
      unint64_t v89 = v120 >> 14;
      if (v120 >> 14 >= v88)
      {
LABEL_112:
        LODWORD(v40) = v117;
        goto LABEL_113;
      }
      LODWORD(v40) = v117;
      if (v115 > (unint64_t)v118 >> 14)
      {
        unsigned int v92 = Substring.UnicodeScalarView.subscript.getter();
        unsigned int v93 = Substring.UnicodeScalarView.subscript.getter();
        if (v92 == v93)
        {
          Substring.UnicodeScalarView.formIndex(after:)();
          Substring.UnicodeScalarView.formIndex(after:)();
          unint64_t v89 = v120 >> 14;
          if (v120 >> 14 < v88)
          {
            LODWORD(v40) = v117;
            if (v115 > (unint64_t)v118 >> 14)
            {
              LODWORD(v37) = Substring.UnicodeScalarView.subscript.getter();
              LODWORD(v38) = Substring.UnicodeScalarView.subscript.getter();
              if (v37 != v38)
              {
LABEL_123:
                unsigned int v94 = v38;
                unsigned int v90 = v37;
LABEL_109:
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
                if (v90 >= v94) {
                  uint64_t v13 = v94 < v90;
                }
                else {
                  uint64_t v13 = -1;
                }
                goto LABEL_87;
              }
              while (1)
              {
                Substring.UnicodeScalarView.formIndex(after:)();
                Substring.UnicodeScalarView.formIndex(after:)();
                unint64_t v89 = v120 >> 14;
                if (v120 >> 14 >= v88 || v115 <= (unint64_t)v118 >> 14) {
                  break;
                }
                unsigned int v90 = Substring.UnicodeScalarView.subscript.getter();
                unsigned int v94 = Substring.UnicodeScalarView.subscript.getter();
                if (v90 != v94) {
                  goto LABEL_109;
                }
              }
            }
            goto LABEL_113;
          }
          goto LABEL_112;
        }
        unsigned int v94 = v93;
        unsigned int v90 = v92;
LABEL_108:
        LODWORD(v40) = v117;
        goto LABEL_109;
      }
LABEL_113:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_114:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v89 == v88)
      {
        if (((unint64_t)v118 ^ v107) >> 14) {
          uint64_t v13 = -1;
        }
        else {
          uint64_t v13 = 0;
        }
      }
      else
      {
        uint64_t v13 = 1;
      }
LABEL_87:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release_n();
      if (v40) {
        goto LABEL_100;
      }
      return v13;
    case 2:
      long long v126 = v130[2];
      long long v127 = v130[3];
      long long v128 = v130[4];
      uint64_t v129 = v131;
      long long v124 = v130[0];
      long long v125 = v130[1];
      swift_retain_n();
      swift_getAtPartialKeyPath();
      swift_release();
      swift_retain();
      swift_getAtPartialKeyPath();
      swift_release();
      long long v14 = (uint64_t (*)(long long *, unint64_t *, unint64_t *))*((void *)&v126 + 1);
      uint64_t v15 = *((void *)&v125 + 1);
      long long v16 = __swift_project_boxed_opaque_existential_1(&v124, *((uint64_t *)&v125 + 1));
      uint64_t v119 = v15;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v118);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(boxed_opaque_existential_1, v16, v15);
      uint64_t v13 = v14(&v118, &v122, &v120);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v118);
      swift_release_n();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v120);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v122);
      outlined destroy of AnySortComparator((uint64_t)&v124);
      return v13;
    case 3:
    case 4:
      uint64_t v6 = *(void *)(a3 - 8);
      uint64_t v7 = *(void (**)(long long *, _OWORD *, uint64_t))(v6 + 16);
      v7(v130, v3, a3);
      v7(&v124, v130, a3);
      if (!(void)v125)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x181F93E08);
      }
      id v8 = objc_allocWithZone((Class)NSSortDescriptor);
      uint64_t v9 = String._bridgeToObjectiveCImpl()();
      id v10 = objc_msgSend(v8, sel_initWithKey_ascending_selector_, v9, (v124 & 1) == 0, SortDescriptor.AllowedComparison.selector.getter(v5));
      swift_unknownObjectRelease();
      uint64_t v11 = *(void (**)(long long *, uint64_t))(v6 + 8);
      v11(&v124, a3);
      v11(v130, a3);
      uint64_t v12 = _bridgeAnythingToObjectiveC<A>(_:)();
      uint64_t v13 = (uint64_t)objc_msgSend(v10, sel_compareObject_toObject_, v12, _bridgeAnythingToObjectiveC<A>(_:)());

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return v13;
    default:
      unint64_t v18 = *(void *)&v130[0];
      int v19 = BYTE8(v130[0]);
      int v20 = BYTE9(v130[0]);
      swift_retain_n();
      swift_getAtKeyPath();
      swift_release();
      swift_retain();
      swift_getAtKeyPath();
      swift_release();
      int v117 = v20;
      if (v19 == 1)
      {
        uint64_t v113 = v18;
        if (one-time initialization token for cache != -1) {
          swift_once();
        }
        LocaleCache.current.getter();
        uint64_t v22 = v21;
        unint64_t v120 = v122;
        uint64_t v121 = v123;
        lazy protocol witness table accessor for type String and conformance String();
        StringProtocol._ephemeralString.getter();
        unsigned int v24 = v23;
        StringProtocol._ephemeralString.getter();
        id v108 = (id)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v25 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        long long v118 = v124;
        uint64_t v26 = StringProtocol._toUTF16Offsets(_:)();
        uint64_t v28 = v27 - v26;
        if (!__OFSUB__(v27, v26))
        {
          uint64_t v29 = v26;
          uint64_t v30 = swift_getObjectType();
          char v31 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 488);
          swift_unknownObjectRetain();
          unint64_t v32 = (void *)v31(v30, v22);
          swift_unknownObjectRelease();
          uint64_t v13 = (uint64_t)objc_msgSend(v108, sel_compare_options_range_locale_, v25, v113, v29, v28, v32);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_17:
          swift_release_n();
          if (!v117) {
            return v13;
          }
LABEL_100:
          if (v13 == -1) {
            return 1;
          }
          if (v13 == 1) {
            return -1;
          }
          return v13;
        }
        __break(1u);
        goto LABEL_121;
      }
      swift_bridgeObjectRetain();
      unint64_t v45 = Substring.init<A>(_:)();
      unint64_t v47 = v46;
      unint64_t v49 = v48;
      unint64_t v114 = v50;
      unint64_t v120 = v122;
      uint64_t v121 = v123;
      swift_bridgeObjectRetain();
      unint64_t v51 = Substring.init<A>(_:)();
      unint64_t v55 = v52;
      unint64_t v56 = v54;
      if (v18)
      {
        unint64_t v57 = v18;
        unint64_t v106 = v45;
        if ((v18 & 2) != 0)
        {
          unsigned int v73 = (v18 >> 9) & 1;
          uint64_t v104 = (v18 >> 6) & 1;
          int v103 = v18 & 1;
          uint64_t v102 = (v18 >> 8) & 1;
          unint64_t v74 = v51;
          unint64_t v75 = v53;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v99 = v45;
          unsigned __int8 v97 = v73;
          unint64_t v58 = v47;
          unint64_t v59 = v74;
          uint64_t v13 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v74, v55, v75, v56, v102, (v57 >> 7) & 1, v103, v104, v97, v99, v47, v49, v114);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v13) {
            goto LABEL_22;
          }
        }
        else
        {
          unint64_t v58 = v47;
          unint64_t v98 = v45;
          unint64_t v59 = v51;
          uint64_t v13 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v51, v52, v53, v54, (v18 >> 8) & 1, (v18 >> 7) & 1, v18 & 1, (v18 >> 6) & 1, (v18 & 0x200) != 0, v98, v47, v49, v114);
          if (v13)
          {
LABEL_22:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_98:
            int v87 = v117;
LABEL_99:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release_n();
            if (!v87) {
              return v13;
            }
            goto LABEL_100;
          }
        }
        if ((v57 & 0x200) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v13 = 0;
          goto LABEL_98;
        }
        unint64_t v120 = v106;
        *(void *)&long long v118 = v59;
        unint64_t v76 = v58 >> 14;
        unint64_t v77 = v106 >> 14;
        if (v106 >> 14 >= v58 >> 14 || v55 >> 14 <= v59 >> 14)
        {
LABEL_93:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v77 == v76)
          {
            if (((unint64_t)v118 ^ v55) >> 14) {
              uint64_t v13 = -1;
            }
            else {
              uint64_t v13 = 0;
            }
          }
          else
          {
            uint64_t v13 = 1;
          }
          goto LABEL_98;
        }
        unint64_t v105 = v55 >> 14;
        unint64_t v116 = v58 >> 14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unsigned int v78 = Substring.UnicodeScalarView.subscript.getter();
        unsigned int v79 = Substring.UnicodeScalarView.subscript.getter();
        if (v78 == v79)
        {
          Substring.UnicodeScalarView.formIndex(after:)();
          Substring.UnicodeScalarView.formIndex(after:)();
          unint64_t v77 = v120 >> 14;
          unint64_t v76 = v58 >> 14;
          if (v120 >> 14 >= v116 || v105 <= (unint64_t)v118 >> 14)
          {
LABEL_92:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_93;
          }
          unsigned int v78 = Substring.UnicodeScalarView.subscript.getter();
          unsigned int v79 = Substring.UnicodeScalarView.subscript.getter();
          if (v78 == v79)
          {
            Substring.UnicodeScalarView.formIndex(after:)();
            Substring.UnicodeScalarView.formIndex(after:)();
            unint64_t v77 = v120 >> 14;
            unint64_t v76 = v58 >> 14;
            if (v120 >> 14 < v116 && v105 > (unint64_t)v118 >> 14)
            {
              unsigned int v24 = Substring.UnicodeScalarView.subscript.getter();
              LODWORD(v26) = Substring.UnicodeScalarView.subscript.getter();
              if (v24 != v26)
              {
LABEL_121:
                unsigned int v80 = v26;
                unsigned int v78 = v24;
LABEL_90:
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
                if (v78 >= v80) {
                  uint64_t v13 = v80 < v78;
                }
                else {
                  uint64_t v13 = -1;
                }
                goto LABEL_98;
              }
              unint64_t v76 = v58 >> 14;
              while (1)
              {
                Substring.UnicodeScalarView.formIndex(after:)();
                Substring.UnicodeScalarView.formIndex(after:)();
                unint64_t v77 = v120 >> 14;
                if (v120 >> 14 >= v116 || v105 <= (unint64_t)v118 >> 14) {
                  break;
                }
                unsigned int v78 = Substring.UnicodeScalarView.subscript.getter();
                unsigned int v80 = Substring.UnicodeScalarView.subscript.getter();
                if (v78 != v80) {
                  goto LABEL_90;
                }
              }
            }
            goto LABEL_92;
          }
        }
        unsigned int v80 = v79;
        goto LABEL_90;
      }
      if (v49 == v53 && v114 == v54 && v45 >> 16 == v51 >> 16 && v47 >> 16 == v52 >> 16)
      {
        swift_bridgeObjectRelease_n();
LABEL_66:
        uint64_t v13 = 0;
        goto LABEL_67;
      }
      uint64_t v13 = 1;
      if (_stringCompareInternal(_:_:_:_:expecting:)())
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v13 = -1;
      }
      else
      {
        char v86 = _stringCompareInternal(_:_:_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v86 & 1) == 0) {
          goto LABEL_66;
        }
      }
LABEL_67:
      int v87 = v117;
      goto LABEL_99;
  }
}

void SortDescriptor.hash(into:)()
{
  if (*((void *)v0 + 2))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*v0);
  uint64_t v1 = type metadata accessor for SortDescriptor.AllowedComparison();
  (*(void (**)(long long *, unsigned __int8 *, uint64_t))(*(void *)(v1 - 8) + 16))(&v20, v0 + 24, v1);
  switch(v26)
  {
    case 1:
      Swift::UInt v6 = v20;
      Swift::UInt8 v7 = BYTE8(v20);
      Swift::UInt v8 = BYTE9(v20);
      uint64_t v9 = v21;
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(v6);
      Hasher._combine(_:)(v7);
      Hasher._combine(_:)(v8);
      *(void *)&long long v14 = v9;
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for String?);
      goto LABEL_7;
    case 2:
      long long v16 = v22;
      long long v17 = v23;
      long long v18 = v24;
      uint64_t v19 = v25;
      long long v14 = v20;
      long long v15 = v21;
      Hasher._combine(_:)(2uLL);
      __swift_project_boxed_opaque_existential_1(&v14, *((uint64_t *)&v15 + 1));
      dispatch thunk of Hashable.hash(into:)();
      type metadata accessor for PartialKeyPath();
      dispatch thunk of Hashable.hash(into:)();
      outlined destroy of AnySortComparator((uint64_t)&v14);
      swift_release();
      return;
    case 3:
      Swift::UInt v10 = v20;
      Swift::UInt8 v11 = BYTE8(v20);
      Swift::UInt v12 = BYTE9(v20);
      Hasher._combine(_:)(4uLL);
      Hasher._combine(_:)(v10);
      Hasher._combine(_:)(v11);
      Swift::UInt v13 = v12;
      goto LABEL_11;
    case 4:
      Swift::UInt v13 = 3;
LABEL_11:
      Hasher._combine(_:)(v13);
      break;
    default:
      Swift::UInt v2 = v20;
      Swift::UInt8 v3 = BYTE8(v20);
      Swift::UInt v4 = BYTE9(v20);
      uint64_t v5 = v21;
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v2);
      Hasher._combine(_:)(v3);
      Hasher._combine(_:)(v4);
      *(void *)&long long v14 = v5;
LABEL_7:
      type metadata accessor for KeyPath();
      dispatch thunk of Hashable.hash(into:)();
      swift_release();
      break;
  }
}

uint64_t static SortDescriptor.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v5 = *((void *)a1 + 2);
  uint64_t v6 = *((void *)a2 + 2);
  if (v5)
  {
    if (!v6) {
      return 0;
    }
    BOOL v7 = *((void *)a1 + 1) == *((void *)a2 + 1) && v5 == v6;
    if (!v7 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return 0;
    }
  }
  else if (v6)
  {
    return 0;
  }

  return static SortDescriptor.AllowedComparison.== infix(_:_:)((uint64_t)(a1 + 24), (uint64_t)(a2 + 24));
}

uint64_t SortDescriptor.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x726564726FLL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6972745379656BLL && a2 == 0xE900000000000067 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73697261706D6F63 && a2 == 0xEA00000000006E6FLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t SortDescriptor.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x726564726FLL;
  }
  if (a1 == 1) {
    return 0x6E6972745379656BLL;
  }
  return 0x73697261706D6F63;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SortDescriptor<A>.CodingKeys()
{
  return SortDescriptor.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SortDescriptor<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = SortDescriptor.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SortDescriptor<A>.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized URL.ParseStrategy.ComponentParseStrategy.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SortDescriptor<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SortDescriptor<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t SortDescriptor.encode(to:)(void *a1, uint64_t a2)
{
  Swift::UInt8 v3 = v2;
  v11[0] = *(void *)(a2 + 16);
  type metadata accessor for SortDescriptor.CodingKeys();
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  Swift::UInt v8 = (char *)v11 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = *v3;
  char v14 = 0;
  lazy protocol witness table accessor for type SortOrder and conformance SortOrder();
  uint64_t v9 = v11[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v9)
  {
    char v13 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v12 = 2;
    type metadata accessor for SortDescriptor.AllowedComparison();
    swift_getWitnessTable();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int SortDescriptor.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t SortDescriptor.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  type metadata accessor for SortDescriptor.CodingKeys();
  swift_getWitnessTable();
  uint64_t v16 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v4 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v6 = (char *)&v15 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v7 = v4;
  uint64_t v8 = v15;
  char v22 = 0;
  lazy protocol witness table accessor for type SortOrder and conformance SortOrder();
  uint64_t v9 = v16;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v18[0] = v17[0];
  v17[0] = 1;
  uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v20 = v10;
  uint64_t v11 = type metadata accessor for SortDescriptor.AllowedComparison();
  char v22 = 2;
  swift_getWitnessTable();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v6, v9);
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(&v21, v17, v11);
  uint64_t v12 = type metadata accessor for SortDescriptor();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v8, v18, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
}

uint64_t protocol witness for SortComparator.order.setter in conformance SortDescriptor<A>(char a1)
{
  return SortDescriptor.order.setter(a1 & 1);
}

void (*protocol witness for SortComparator.order.modify in conformance SortDescriptor<A>(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SortDescriptor.order.modify();
  return protocol witness for SortComparator.order.modify in conformance KeyPathComparator<A>;
}

uint64_t protocol witness for Decodable.init(from:) in conformance SortDescriptor<A>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SortDescriptor.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SortDescriptor<A>(void *a1, uint64_t a2)
{
  return SortDescriptor.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SortDescriptor<A>()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SortDescriptor<A>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static SortDescriptor.== infix(_:_:)(a1, a2);
}

uint64_t NSSortDescriptor.init<A>(_:)(unsigned char *a1)
{
  uint64_t v2 = type metadata accessor for SortDescriptor();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v3 + 16);
  v4(v14, a1, v2);
  v4(v12, v14, v2);
  if (v13)
  {
    id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    uint64_t v6 = String._bridgeToObjectiveCImpl()();
    char v7 = v12[0];
    uint64_t v8 = type metadata accessor for SortDescriptor.AllowedComparison();
    id v9 = objc_msgSend(v5, sel_initWithKey_ascending_selector_, v6, (v7 & 1) == 0, SortDescriptor.AllowedComparison.selector.getter(v8));
    swift_unknownObjectRelease();
    uint64_t v10 = *(void (**)(unsigned char *, uint64_t))(v3 + 8);
    v10(v12, v2);
    v10(v14, v2);
    v10(a1, v2);
    return (uint64_t)v9;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t NSSortDescriptor.init<A>(_:)(char *a1)
{
  if (*((void *)a1 + 2))
  {
    id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    uint64_t v3 = String._bridgeToObjectiveCImpl()();
    char v4 = *a1;
    uint64_t v5 = type metadata accessor for SortDescriptor.AllowedComparison();
    id v6 = objc_msgSend(v2, sel_initWithKey_ascending_selector_, v3, (v4 & 1) == 0, SortDescriptor.AllowedComparison.selector.getter(v5));
    swift_unknownObjectRelease();
    uint64_t v7 = type metadata accessor for SortDescriptor();
    (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(a1, v7);
    return (uint64_t)v6;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for SortDescriptor.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t instantiation function for generic protocol witness table for SortDescriptor<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Equatable in SortDescriptor<A>()
{
  return swift_getWitnessTable();
}

uint64_t assignWithCopy for SortDescriptor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    char v4 = (void *)(a1 + 24);
    uint64_t v5 = (uint64_t *)(a2 + 24);
    uint64_t v6 = type metadata accessor for SortDescriptor.AllowedComparison();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1 + 24, v6);
    int v7 = *(unsigned __int8 *)(a2 + 120);
    if (v7 == 2)
    {
      uint64_t v9 = *(void *)(a2 + 48);
      *(void *)(a1 + 48) = v9;
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 24, a2 + 24);
      uint64_t v10 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v10;
      uint64_t v11 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v11;
      uint64_t v12 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = v12;
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(unsigned char *)(a1 + 120) = 2;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else if (v7 == 1)
    {
      uint64_t v13 = *v5;
      *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
      void *v4 = v13;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(unsigned char *)(a1 + 120) = 1;
      swift_retain();
    }
    else if (*(unsigned char *)(a2 + 120))
    {
      long long v14 = *(_OWORD *)v5;
      long long v15 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = v15;
      *(_OWORD *)char v4 = v14;
      long long v16 = *(_OWORD *)(a2 + 72);
      long long v17 = *(_OWORD *)(a2 + 88);
      long long v18 = *(_OWORD *)(a2 + 104);
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      *(_OWORD *)(a1 + 88) = v17;
      *(_OWORD *)(a1 + 104) = v18;
      *(_OWORD *)(a1 + 72) = v16;
    }
    else
    {
      uint64_t v8 = *v5;
      *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
      void *v4 = v8;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(unsigned char *)(a1 + 120) = 0;
      swift_retain();
    }
  }
  return a1;
}

__n128 __swift_memcpy121_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(_OWORD *)(a1 + 105) = *(long long *)((char *)a2 + 105);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for SortDescriptor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v5 = type metadata accessor for SortDescriptor.AllowedComparison();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1 + 24, v5);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SortDescriptor(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 121)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SortDescriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 120) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 121) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 121) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SortDescriptor.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F952A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t assignWithCopy for SortDescriptor.AllowedComparison(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 == a2) {
    return a1;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + 96);
  if (v4 >= 4) {
    unsigned int v4 = *(_DWORD *)a1 + 4;
  }
  if (v4 == 2)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    swift_release();
    swift_release();
    swift_release();
LABEL_8:
    swift_release();
    goto LABEL_9;
  }
  if (v4 <= 1) {
    goto LABEL_8;
  }
LABEL_9:
  unsigned int v5 = *((unsigned __int8 *)a2 + 96);
  if (v5 >= 4) {
    unsigned int v5 = *(_DWORD *)a2 + 4;
  }
  switch(v5)
  {
    case 0u:
      uint64_t v6 = *a2;
      *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
      *(void *)a1 = v6;
      *(void *)(a1 + 16) = a2[2];
      *(unsigned char *)(a1 + 96) = 0;
      swift_retain();
      break;
    case 1u:
      uint64_t v12 = *a2;
      *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
      *(void *)a1 = v12;
      *(void *)(a1 + 16) = a2[2];
      *(unsigned char *)(a1 + 96) = 1;
      swift_retain();
      break;
    case 2u:
      uint64_t v13 = a2[3];
      *(void *)(a1 + 24) = v13;
      *(void *)(a1 + 32) = a2[4];
      (**(void (***)(uint64_t, uint64_t *))(v13 - 8))(a1, a2);
      uint64_t v14 = a2[6];
      *(void *)(a1 + 40) = a2[5];
      *(void *)(a1 + 48) = v14;
      uint64_t v15 = a2[8];
      *(void *)(a1 + 56) = a2[7];
      *(void *)(a1 + 64) = v15;
      uint64_t v16 = a2[10];
      *(void *)(a1 + 72) = a2[9];
      *(void *)(a1 + 80) = v16;
      *(void *)(a1 + 88) = a2[11];
      *(unsigned char *)(a1 + 96) = 2;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      break;
    case 3u:
      uint64_t v17 = *a2;
      *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
      *(void *)a1 = v17;
      *(unsigned char *)(a1 + 96) = 3;
      break;
    default:
      long long v7 = *(_OWORD *)a2;
      long long v8 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = v8;
      *(_OWORD *)a1 = v7;
      long long v9 = *((_OWORD *)a2 + 3);
      long long v10 = *((_OWORD *)a2 + 4);
      long long v11 = *((_OWORD *)a2 + 5);
      *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
      *(_OWORD *)(a1 + 64) = v10;
      *(_OWORD *)(a1 + 80) = v11;
      *(_OWORD *)(a1 + 48) = v9;
      break;
  }
  return a1;
}

__n128 __swift_memcpy97_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for SortDescriptor.AllowedComparison(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return a1;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + 96);
  if (v4 >= 4) {
    unsigned int v4 = *(_DWORD *)a1 + 4;
  }
  if (v4 == 2)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    swift_release();
    swift_release();
    swift_release();
LABEL_8:
    swift_release();
    goto LABEL_9;
  }
  if (v4 <= 1) {
    goto LABEL_8;
  }
LABEL_9:
  unsigned int v5 = *(unsigned __int8 *)(a2 + 96);
  if (v5 >= 4) {
    unsigned int v5 = *(_DWORD *)a2 + 4;
  }
  switch(v5)
  {
    case 0u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 96) = 0;
      return a1;
    case 1u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      char v9 = 1;
      goto LABEL_17;
    case 2u:
      long long v10 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v10;
      long long v11 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v11;
      long long v12 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v12;
      char v9 = 2;
      goto LABEL_17;
    case 3u:
      *(void *)a1 = *(void *)a2;
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
      char v9 = 3;
LABEL_17:
      *(unsigned char *)(a1 + 96) = v9;
      break;
    default:
      long long v6 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v6;
      *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      long long v8 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v8;
      break;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SortDescriptor.AllowedComparison(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 97)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 96);
  if (v3 >= 5) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SortDescriptor.AllowedComparison(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 96) = 0;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 97) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 97) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 96) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for SortDescriptor.AllowedComparison(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 96);
  if (result >= 4) {
    return (*(_DWORD *)a1 + 4);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for SortDescriptor.AllowedComparison(uint64_t result, unsigned int a2)
{
  if (a2 > 3)
  {
    unsigned int v2 = a2 - 4;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    LOBYTE(a2) = 4;
    *(_DWORD *)uint64_t result = v2;
  }
  *(unsigned char *)(result + 96) = a2;
  return result;
}

uint64_t base witness table accessor for Equatable in SortDescriptor<A>.AllowedComparison()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in SortDescriptor<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in SortDescriptor<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in SortDescriptor<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for SortDescriptor.AllowedComparison.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_181F957D0()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + 112);
  if (v1 == 2)
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    swift_release();
    swift_release();
    swift_release();
  }
  else if (v1 > 1)
  {
    goto LABEL_6;
  }
  swift_release();
LABEL_6:

  return MEMORY[0x1F4186498](v0, 113, 7);
}

unsigned char *storeEnumTagSinglePayload for SortDescriptor.AllowedComparison.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F959C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in SortDescriptor<A>.AllowedComparison.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in SortDescriptor<A>.AllowedComparison.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in SortDescriptor<A>.AllowedComparison.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DateV21ComponentsFormatStyleV5FieldV6OptionOG_AF8CalendarV9ComponentOs5NeverOTg5015_s10Foundation4e3V21fgh138V5bound33_A95AAD4BE9B9AA48B183E68E3F6B3AACLL3for10relativeTo10movingDown18countingTowardZeroAcF_Sb22includedInRangeOfInputtSgAC_ACS2btFAA8k2V9l4OAE5i2V6J53Ocfu_33_29c7146c9c40ed4ad401dd5090de8340AuQTf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t result = v9;
    unsigned int v4 = (char *)(a1 + 32);
    do
    {
      char v6 = *v4++;
      char v5 = v6;
      uint64_t v10 = result;
      unint64_t v8 = *(void *)(result + 16);
      unint64_t v7 = *(void *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
        uint64_t result = v10;
      }
      *(void *)(result + 16) = v8 + 1;
      *(unsigned char *)(result + v8 + 32) = 0x60504030A0201uLL >> (8 * v5);
      --v2;
    }
    while (v2);
  }
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.ComponentsFormatStyle.Field.Option@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Date.ComponentsFormatStyle.Field.Option.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ComponentsFormatStyle.Field.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ComponentsFormatStyle.Field.Option()
{
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance Date.ComponentsFormatStyle.Field.Option(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Date.ComponentsFormatStyle.Field.Option.allCases.getter;
}

void static Date.ComponentsFormatStyle.Field.minute.getter(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

void static Date.ComponentsFormatStyle.Field.second.getter(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.ComponentsFormatStyle.Field.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.ComponentsFormatStyle.Field.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Date.ComponentsFormatStyle.Field.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.ComponentsFormatStyle.Field.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = v7;
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option);
  }
  return result;
}

uint64_t Date.ComponentsFormatStyle.Field.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.ComponentsFormatStyle.Field.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ComponentsFormatStyle.Field@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return Date.ComponentsFormatStyle.Field.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ComponentsFormatStyle.Field(void *a1)
{
  return Date.ComponentsFormatStyle.Field.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ComponentsFormatStyle.Style.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ComponentsFormatStyle.Style.Option()
{
  return RawRepresentable<>.encode(to:)();
}

void static Date.ComponentsFormatStyle.Style.wide.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static Date.ComponentsFormatStyle.Style.abbreviated.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void static Date.ComponentsFormatStyle.Style.narrow.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static Date.ComponentsFormatStyle.Style.spellOut.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void Date.ComponentsFormatStyle.Style.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static Date.ComponentsFormatStyle.Style.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.ComponentsFormatStyle.Style.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.ComponentsFormatStyle.Style.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Date.ComponentsFormatStyle.Style.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.ComponentsFormatStyle.Style.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = v7;
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option);
  }
  return result;
}

uint64_t Date.ComponentsFormatStyle.Style.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.ComponentsFormatStyle.Style.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ComponentsFormatStyle.Style@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return Date.ComponentsFormatStyle.Style.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ComponentsFormatStyle.Style(void *a1)
{
  return Date.ComponentsFormatStyle.Style.encode(to:)(a1);
}

void Date.ComponentsFormatStyle.style.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *Date.ComponentsFormatStyle.style.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*Date.ComponentsFormatStyle.style.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.ComponentsFormatStyle.fields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Date.ComponentsFormatStyle.fields.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*Date.ComponentsFormatStyle.fields.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.ComponentsFormatStyle.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 16);
  return swift_unknownObjectRetain();
}

__n128 Date.ComponentsFormatStyle.calendar.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  v1[1] = *a1;
  return result;
}

uint64_t (*Date.ComponentsFormatStyle.calendar.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.ComponentsFormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 32);
  return swift_unknownObjectRetain();
}

__n128 Date.ComponentsFormatStyle.locale.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*Date.ComponentsFormatStyle.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.ComponentsFormatStyle.isPositive.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t Date.ComponentsFormatStyle.isPositive.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 48) = result;
  return result;
}

uint64_t (*Date.ComponentsFormatStyle.isPositive.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 Date.ComponentsFormatStyle.init(style:locale:calendar:fields:)@<Q0>(unsigned char *a1@<X0>, long long *a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(unsigned char *)a5 = *a1;
  *(void *)(a5 + 8) = a4;
  __n128 result = *a3;
  long long v6 = *a2;
  *(__n128 *)(a5 + 16) = *a3;
  *(_OWORD *)(a5 + 32) = v6;
  *(unsigned char *)(a5 + 48) = 1;
  return result;
}

uint64_t Date.ComponentsFormatStyle.format(_:)(double *a1)
{
  double v2 = *a1;
  double v3 = a1[1];
  *(void *)&double v144 = *(char *)v1;
  LODWORD(v4) = *(unsigned __int8 *)v1;
  uint64_t v5 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v7 = v1[3];
  unint64_t v8 = v1[4];
  Swift::UInt v9 = v1[5];
  LODWORD(v1) = *((unsigned __int8 *)v1 + 48);
  uint64_t v150 = v5;
  if (one-time initialization token for cache == -1) {
    goto LABEL_2;
  }
  while (1)
  {
    a1 = (double *)swift_once();
    uint64_t v5 = v150;
LABEL_2:
    uint64_t v10 = unk_1E8EDF3B0;
    uint64_t v146 = static Date.ComponentsFormatStyle.cache;
    LOBYTE(v152[0]) = v4;
    *((void *)&v152[0] + 1) = v5;
    *(void *)&v152[1] = v6;
    *((void *)&v152[1] + 1) = v7;
    *(void *)&v152[2] = v8;
    *((void *)&v152[2] + 1) = v9;
    int v149 = (int)v1;
    LOBYTE(v152[3]) = (_BYTE)v1;
    MEMORY[0x1F4188790](a1);
    uint64_t v138 = v9;
    uint64_t v142 = v8;
    int v11 = v4;
    uint64_t v4 = v10 + 16;
    double v12 = *(double *)&v6;
    uint64_t v13 = (os_unfair_lock_s *)(v10 + 24);
    swift_retain_n();
    os_unfair_lock_lock((os_unfair_lock_t)(v10 + 24));
    int64_t v14 = v7;
    partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)((uint64_t *)(v10 + 16), v154);
    uint64_t v15 = v10;
    os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 24));
    swift_release();
    id v16 = (id)v154[0];
    if (v154[0])
    {
      swift_release();
      double v17 = v12;
      goto LABEL_123;
    }
    int v18 = v11;
    uint64_t v134 = (uint64_t *)v4;
    uint64_t v136 = v15;
    uint64_t v137 = v13;
    id v19 = objc_msgSend(objc_allocWithZone((Class)NSDateComponentsFormatter), sel_init);
    v151[0] = v12;
    *(void *)&v151[1] = v7;
    int64_t v133 = v7;
    v155[0] = v142;
    v155[1] = v138;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    Calendar.locale.setter(v155);
    LODWORD(v4) = LODWORD(v12);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v21 = (void *)(*(uint64_t (**)(uint64_t, int64_t))(v7 + 216))(ObjectType, v7);
    objc_msgSend(v19, sel_setCalendar_, v21);

    objc_msgSend(v19, sel_setUnitsStyle_, qword_182217A90[*(void *)&v144]);
    unint64_t v8 = v150;
    double v22 = v12;
    if (v150) {
      break;
    }
    BOOL v31 = v18 == 5;
    uint64_t v32 = v136;
    unint64_t v33 = v137;
    char v34 = v134;
    uint64_t v35 = v146;
    if (!v31) {
      goto LABEL_66;
    }
    char v140 = LOBYTE(v12);
    id v143 = v19;
    double v144 = v12;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
    uint64_t v36 = static _SetStorage.allocate(capacity:)();
    int64_t v7 = 0;
    uint64_t v6 = v36 + 56;
    LODWORD(v4) = -1;
    do
    {
      Swift::UInt v9 = outlined read-only object #1 of Date.ComponentsFormatStyle.format(_:)[v7 + 32];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v9);
      uint64_t v1 = v155;
      Swift::Int v37 = Hasher._finalize()();
      uint64_t v38 = -1 << *(unsigned char *)(v36 + 32);
      unint64_t v39 = v37 & ~v38;
      unint64_t v40 = v39 >> 6;
      uint64_t v41 = *(void *)(v6 + 8 * (v39 >> 6));
      uint64_t v42 = 1 << v39;
      uint64_t v43 = *(void *)(v36 + 48);
      if (((1 << v39) & v41) != 0)
      {
        if (*(unsigned __int8 *)(v43 + v39) == v9) {
          goto LABEL_18;
        }
        uint64_t v44 = ~v38;
        while (1)
        {
          unint64_t v39 = (v39 + 1) & v44;
          unint64_t v40 = v39 >> 6;
          uint64_t v41 = *(void *)(v6 + 8 * (v39 >> 6));
          uint64_t v42 = 1 << v39;
          if ((v41 & (1 << v39)) == 0) {
            break;
          }
          if (*(unsigned __int8 *)(v43 + v39) == v9) {
            goto LABEL_18;
          }
        }
      }
      *(void *)(v6 + 8 * v40) = v42 | v41;
      *(unsigned char *)(v43 + v39) = v9;
      uint64_t v45 = *(void *)(v36 + 16);
      BOOL v46 = __OFADD__(v45, 1);
      uint64_t v47 = v45 + 1;
      if (v46) {
        goto LABEL_83;
      }
      *(void *)(v36 + 16) = v47;
LABEL_18:
      ++v7;
    }
    while (v7 != 3);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, NSCalendarUnit>);
    uint64_t v1 = (uint64_t *)static _DictionaryStorage.allocate(capacity:)();
    uint64_t v52 = 0;
    unint64_t v8 = (unint64_t)(v1 + 8);
    LODWORD(v4) = 1;
    do
    {
      int64_t v7 = outlined read-only object #0 of Date.ComponentsFormatStyle.format(_:)[v52 + 32];
      if (v7 == 18) {
        break;
      }
      Swift::UInt v9 = *(void *)&outlined read-only object #0 of Date.ComponentsFormatStyle.format(_:)[v52 + 40];
      unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #0 of Date.ComponentsFormatStyle.format(_:)[v52 + 32]);
      if (v54) {
        goto LABEL_84;
      }
      *(void *)(v8 + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v53;
      *(unsigned char *)(v1[6] + v53) = v7;
      *(void *)(v1[7] + 8 * v53) = v9;
      uint64_t v55 = v1[2];
      BOOL v46 = __OFADD__(v55, 1);
      uint64_t v56 = v55 + 1;
      if (v46) {
        goto LABEL_85;
      }
      v1[2] = v56;
      v52 += 16;
    }
    while (v52 != 256);
    int64_t v57 = 0;
    Swift::UInt v9 = 0;
    uint64_t v58 = 1 << *(unsigned char *)(v36 + 32);
    uint64_t v59 = *(void *)(v36 + 56);
    uint64_t v60 = -1;
    if (v58 < 64) {
      uint64_t v60 = ~(-1 << v58);
    }
    unint64_t v61 = v60 & v59;
    int64_t v7 = (unint64_t)(v58 + 63) >> 6;
    if ((v60 & v59) != 0)
    {
LABEL_41:
      unint64_t v62 = __clz(__rbit64(v61));
      v61 &= v61 - 1;
      unint64_t v63 = v62 | (v57 << 6);
      if (!v1[2]) {
        goto LABEL_80;
      }
      goto LABEL_59;
    }
    while (1)
    {
      int64_t v64 = v57 + 1;
      if (__OFADD__(v57, 1)) {
        break;
      }
      if (v64 >= v7) {
        goto LABEL_64;
      }
      unint64_t v65 = *(void *)(v6 + 8 * v64);
      ++v57;
      if (!v65)
      {
        int64_t v57 = v64 + 1;
        if (v64 + 1 >= v7) {
          goto LABEL_64;
        }
        unint64_t v65 = *(void *)(v6 + 8 * v57);
        if (!v65)
        {
          int64_t v57 = v64 + 2;
          if (v64 + 2 >= v7) {
            goto LABEL_64;
          }
          unint64_t v65 = *(void *)(v6 + 8 * v57);
          if (!v65)
          {
            int64_t v57 = v64 + 3;
            if (v64 + 3 >= v7) {
              goto LABEL_64;
            }
            unint64_t v65 = *(void *)(v6 + 8 * v57);
            if (!v65)
            {
              int64_t v66 = v64 + 4;
              if (v66 >= v7) {
                goto LABEL_64;
              }
              unint64_t v65 = *(void *)(v6 + 8 * v66);
              if (!v65)
              {
                while (1)
                {
                  int64_t v57 = v66 + 1;
                  if (__OFADD__(v66, 1)) {
                    goto LABEL_151;
                  }
                  if (v57 >= v7) {
                    break;
                  }
                  unint64_t v65 = *(void *)(v6 + 8 * v57);
                  ++v66;
                  if (v65) {
                    goto LABEL_58;
                  }
                }
LABEL_64:
                swift_release();
                swift_release();
                double v22 = v144;
                uint64_t v32 = v136;
                unint64_t v33 = v137;
                uint64_t v35 = v146;
                LOBYTE(v4) = v140;
                id v19 = v143;
                goto LABEL_65;
              }
              int64_t v57 = v66;
            }
          }
        }
      }
LABEL_58:
      unint64_t v61 = (v65 - 1) & v65;
      unint64_t v63 = __clz(__rbit64(v65)) + (v57 << 6);
      if (!v1[2])
      {
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
        break;
      }
LABEL_59:
      uint64_t v67 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v36 + 48) + v63));
      if ((v68 & 1) == 0) {
        goto LABEL_81;
      }
      uint64_t v69 = *(void *)(v1[7] + 8 * v67);
      if ((v69 & ~v9) == 0) {
        uint64_t v69 = 0;
      }
      v9 |= v69;
      if (v61) {
        goto LABEL_41;
      }
    }
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
  }
  Swift::UInt v9 = *(void *)(v150 + 16);
  uint64_t v1 = (uint64_t *)MEMORY[0x1E4FBC860];
  if (!v9) {
    goto LABEL_27;
  }
  char v139 = v4;
  double v144 = v22;
  v155[0] = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
  uint64_t v1 = (uint64_t *)v155[0];
  int64_t v23 = specialized Set.startIndex.getter(v150);
  int64_t v7 = v24;
  uint64_t v6 = v25 & 1;
  uint64_t v26 = v150;
  do
  {
    if (v23 < 0 || v23 >= 1 << *(unsigned char *)(v26 + 32))
    {
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
      goto LABEL_80;
    }
    if (((*(void *)(v150 + 56 + (((unint64_t)v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
      goto LABEL_78;
    }
    if (*(_DWORD *)(v26 + 36) != v7) {
      goto LABEL_79;
    }
    uint64_t v4 = qword_182217AC0[*(char *)(*(void *)(v26 + 48) + v23)];
    v155[0] = (uint64_t)v1;
    unint64_t v8 = v1[2];
    unint64_t v27 = v1[3];
    if (v8 >= v27 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v8 + 1, 1);
      uint64_t v26 = v150;
      uint64_t v1 = (uint64_t *)v155[0];
    }
    v1[2] = v8 + 1;
    v1[v8 + 4] = v4;
    int64_t v28 = specialized _NativeSet.index(after:)(v23, v7, v6 & 1, v26);
    uint64_t v26 = v150;
    int64_t v23 = v28;
    int64_t v7 = v29;
    uint64_t v6 = v30 & 1;
    --v9;
  }
  while (v9);
  outlined consume of Set<Calendar.Component>.Index._Variant(v28, v29, v30 & 1);
  double v22 = v144;
  LOBYTE(v4) = v139;
LABEL_27:
  uint64_t v48 = v1[2];
  uint64_t v32 = v136;
  unint64_t v33 = v137;
  uint64_t v35 = v146;
  Swift::UInt v9 = 0;
  if (v48)
  {
    unint64_t v49 = v1 + 4;
    do
    {
      uint64_t v51 = *v49++;
      uint64_t v50 = v51;
      if ((v51 & ~v9) == 0) {
        uint64_t v50 = 0;
      }
      v9 |= v50;
      --v48;
    }
    while (v48);
  }
  swift_bridgeObjectRelease();
LABEL_65:
  objc_msgSend(v19, sel_setAllowedUnits_, v9);
  char v34 = v134;
LABEL_66:
  swift_unknownObjectRelease();
  swift_retain();
  os_unfair_lock_lock(v33);
  double v70 = v22;
  if (v35 >= *(void *)(*(void *)(v32 + 16) + 16)) {
    swift_bridgeObjectRetain();
  }
  else {
    *char v34 = MEMORY[0x1E4FBC868];
  }
  v156[0] = v152[0];
  v156[1] = v152[1];
  v156[2] = v152[2];
  char v157 = v152[3];
  id v16 = v19;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v155[0] = *v34;
  uint64_t v72 = v155[0];
  *char v34 = 0x8000000000000000;
  unint64_t v74 = specialized __RawDictionaryStorage.find<A>(_:)((unsigned __int8 *)v156);
  uint64_t v75 = *(void *)(v72 + 16);
  BOOL v76 = (v73 & 1) == 0;
  uint64_t v77 = v75 + v76;
  if (__OFADD__(v75, v76))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v4) = v73;
    if (*(void *)(v72 + 24) < v77)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v77, isUniquelyReferenced_nonNull_native);
      uint64_t v78 = v155[0];
      unint64_t v79 = specialized __RawDictionaryStorage.find<A>(_:)((unsigned __int8 *)v156);
      if ((v4 & 1) != (v80 & 1)) {
        goto LABEL_156;
      }
      unint64_t v74 = v79;
      double v17 = v70;
      if ((v4 & 1) == 0)
      {
LABEL_121:
        specialized _NativeDictionary._insert(at:key:value:)(v74, (uint64_t)v156, (uint64_t)v16, (void *)v78);
        outlined retain of Date.ComponentsFormatStyle((uint64_t)v156);
LABEL_122:
        int64_t v14 = v133;
        *(void *)(v32 + 16) = v78;
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(v137);
        swift_release();
        swift_bridgeObjectRelease();
        unint64_t v106 = (void *)v154[0];
        swift_release();

LABEL_123:
        if (v149) {
          double v107 = v2;
        }
        else {
          double v107 = v3;
        }
        if (v149) {
          double v2 = v3;
        }
        if (v150)
        {
          uint64_t v148 = v16;
          *(double *)uint64_t v154 = v17;
          v154[1] = v14;
          int64_t v108 = *(void *)(v150 + 16);
          if (v108)
          {
            v155[0] = MEMORY[0x1E4FBC860];
            swift_unknownObjectRetain();
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v108, 0);
            uint64_t v109 = v155[0];
            uint64_t v110 = specialized Set.startIndex.getter(v150);
            uint64_t v111 = v150;
            int64_t v112 = v110;
            int v114 = v113;
            char v116 = v115 & 1;
            while ((v112 & 0x8000000000000000) == 0 && v112 < 1 << *(unsigned char *)(v111 + 32))
            {
              if (((*(void *)(v150 + 56 + (((unint64_t)v112 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v112) & 1) == 0) {
                goto LABEL_149;
              }
              if (*(_DWORD *)(v111 + 36) != v114) {
                goto LABEL_150;
              }
              char v117 = *(unsigned char *)(*(void *)(v111 + 48) + v112);
              v155[0] = v109;
              unint64_t v119 = *(void *)(v109 + 16);
              unint64_t v118 = *(void *)(v109 + 24);
              if (v119 >= v118 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v118 > 1, v119 + 1, 1);
                uint64_t v111 = v150;
                uint64_t v109 = v155[0];
              }
              *(void *)(v109 + 16) = v119 + 1;
              *(unsigned char *)(v109 + v119 + 32) = 0x60504030A0201uLL >> (8 * v117);
              int64_t v120 = specialized _NativeSet.index(after:)(v112, v114, v116 & 1, v111);
              uint64_t v111 = v150;
              int64_t v112 = v120;
              int v114 = v121;
              char v116 = v122 & 1;
              if (!--v108)
              {
                outlined consume of Set<Calendar.Component>.Index._Variant(v120, v121, v122 & 1);
                goto LABEL_142;
              }
            }
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
            goto LABEL_155;
          }
          swift_unknownObjectRetain();
          uint64_t v109 = MEMORY[0x1E4FBC860];
LABEL_142:
          lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
          uint64_t v153 = Set.init(minimumCapacity:)();
          uint64_t v127 = *(void *)(v109 + 16);
          if (v127)
          {
            long long v128 = (unsigned __int8 *)(v109 + 32);
            do
            {
              unsigned int v129 = *v128++;
              specialized Set._Variant.insert(_:)(v155, v129);
              --v127;
            }
            while (v127);
          }
          swift_bridgeObjectRelease();
          *(double *)uint64_t v152 = v107;
          v151[0] = v2;
          Calendar.dateComponents(_:from:to:)(v153, (double *)v152, v151, v155);
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          memcpy(v152, v155, 0x11AuLL);
          memcpy(v151, v155, 0x11AuLL);
          Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
          id v131 = objc_msgSend(v148, sel_stringFromDateComponents_, isa);

          if (!v131) {
            goto LABEL_152;
          }
          id v126 = static String._unconditionallyBridgeFromObjectiveC(_:)(v131);

          outlined release of DateComponents((uint64_t)v152);
        }
        else
        {
          id v123 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v107);
          id v124 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v2);
          id v125 = objc_msgSend(v16, sel_stringFromDate_toDate_, v123, v124);

          if (!v125) {
            goto LABEL_154;
          }
          id v126 = static String._unconditionallyBridgeFromObjectiveC(_:)(v125);
        }
        return (uint64_t)v126;
      }
LABEL_76:
      uint64_t v81 = *(void *)(v78 + 56);
      uint64_t v82 = 8 * v74;

      *(void *)(v81 + v82) = v16;
      uint64_t v32 = v136;
      goto LABEL_122;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v78 = v72;
      double v17 = v70;
      if ((v73 & 1) == 0) {
        goto LABEL_121;
      }
      goto LABEL_76;
    }
  }
  unint64_t v135 = v74;
  id v147 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Date.ComponentsFormatStyle, NSDateComponentsFormatter>);
  uint64_t v83 = static _DictionaryStorage.copy(original:)();
  uint64_t v78 = v83;
  if (!*(void *)(v72 + 16))
  {
LABEL_120:
    swift_bridgeObjectRelease();
    double v17 = v70;
    id v16 = v147;
    unint64_t v74 = v135;
    if ((v4 & 1) == 0) {
      goto LABEL_121;
    }
    goto LABEL_76;
  }
  unint64_t v84 = (char *)(v83 + 64);
  long long v141 = (char *)(v72 + 64);
  unint64_t v85 = (unint64_t)((1 << *(unsigned char *)(v78 + 32)) + 63) >> 6;
  if (v78 != v72 || v84 >= &v141[8 * v85]) {
    memmove(v84, v141, 8 * v85);
  }
  int64_t v86 = 0;
  *(void *)(v78 + 16) = *(void *)(v72 + 16);
  uint64_t v87 = 1 << *(unsigned char *)(v72 + 32);
  uint64_t v88 = -1;
  if (v87 < 64) {
    uint64_t v88 = ~(-1 << v87);
  }
  unint64_t v89 = v88 & *(void *)(v72 + 64);
  int64_t v90 = (unint64_t)(v87 + 63) >> 6;
  while (2)
  {
    if (v89)
    {
      unint64_t v91 = __clz(__rbit64(v89));
      v89 &= v89 - 1;
      unint64_t v92 = v91 | (v86 << 6);
LABEL_96:
      unint64_t v93 = v92 << 6;
      uint64_t v94 = 8 * v92;
      unint64_t v95 = v93 - v94;
      unint64_t v96 = *(void *)(v72 + 48) + v95;
      uint64_t v97 = *(void *)(v96 + 8);
      char v98 = *(unsigned char *)(v96 + 48);
      unint64_t v99 = *(void **)(*(void *)(v72 + 56) + v94);
      unint64_t v100 = *(void *)(v78 + 48) + v95;
      long long v101 = *(_OWORD *)(v96 + 16);
      long long v145 = *(_OWORD *)(v96 + 32);
      *(unsigned char *)unint64_t v100 = *(unsigned char *)v96;
      *(void *)(v100 + 8) = v97;
      *(_OWORD *)(v100 + 16) = v101;
      *(_OWORD *)(v100 + 32) = v145;
      *(unsigned char *)(v100 + 48) = v98;
      *(void *)(*(void *)(v78 + 56) + v94) = v99;
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      id v102 = v99;
      continue;
    }
    break;
  }
  int64_t v103 = v86 + 1;
  if (__OFADD__(v86, 1)) {
    goto LABEL_153;
  }
  uint64_t v32 = v136;
  if (v103 >= v90) {
    goto LABEL_120;
  }
  unint64_t v104 = *(void *)&v141[8 * v103];
  ++v86;
  if (v104) {
    goto LABEL_119;
  }
  int64_t v86 = v103 + 1;
  if (v103 + 1 >= v90) {
    goto LABEL_120;
  }
  unint64_t v104 = *(void *)&v141[8 * v86];
  if (v104) {
    goto LABEL_119;
  }
  int64_t v86 = v103 + 2;
  if (v103 + 2 >= v90) {
    goto LABEL_120;
  }
  unint64_t v104 = *(void *)&v141[8 * v86];
  if (v104) {
    goto LABEL_119;
  }
  int64_t v86 = v103 + 3;
  if (v103 + 3 >= v90) {
    goto LABEL_120;
  }
  unint64_t v104 = *(void *)&v141[8 * v86];
  if (v104) {
    goto LABEL_119;
  }
  int64_t v86 = v103 + 4;
  if (v103 + 4 >= v90) {
    goto LABEL_120;
  }
  unint64_t v104 = *(void *)&v141[8 * v86];
  if (v104) {
    goto LABEL_119;
  }
  int64_t v86 = v103 + 5;
  if (v103 + 5 >= v90) {
    goto LABEL_120;
  }
  unint64_t v104 = *(void *)&v141[8 * v86];
  if (v104) {
    goto LABEL_119;
  }
  int64_t v86 = v103 + 6;
  if (v103 + 6 >= v90) {
    goto LABEL_120;
  }
  unint64_t v104 = *(void *)&v141[8 * v86];
  if (v104)
  {
LABEL_119:
    unint64_t v89 = (v104 - 1) & v104;
    unint64_t v92 = __clz(__rbit64(v104)) + (v86 << 6);
    goto LABEL_96;
  }
  int64_t v105 = v103 + 7;
  if (v105 >= v90) {
    goto LABEL_120;
  }
  unint64_t v104 = *(void *)&v141[8 * v105];
  if (v104)
  {
    int64_t v86 = v105;
    goto LABEL_119;
  }
  while (1)
  {
    int64_t v86 = v105 + 1;
    if (__OFADD__(v105, 1)) {
      break;
    }
    uint64_t v32 = v136;
    if (v86 >= v90) {
      goto LABEL_120;
    }
    unint64_t v104 = *(void *)&v141[8 * v86];
    ++v105;
    if (v104) {
      goto LABEL_119;
    }
  }
LABEL_155:
  __break(1u);
LABEL_156:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t Date.ComponentsFormatStyle.calendar(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  char v5 = *v2;
  char v6 = v2[48];
  uint64_t v7 = swift_bridgeObjectRetain();
  *(unsigned char *)a2 = v5;
  *(void *)(a2 + 8) = v7;
  long long v8 = *((_OWORD *)v2 + 2);
  *(_OWORD *)(a2 + 16) = *a1;
  *(_OWORD *)(a2 + 32) = v8;
  *(unsigned char *)(a2 + 48) = v6;
  swift_unknownObjectRetain();

  return swift_unknownObjectRetain();
}

uint64_t Date.ComponentsFormatStyle.locale(_:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  char v5 = *v2;
  uint64_t v6 = *((void *)v2 + 1);
  char v7 = v2[48];
  swift_bridgeObjectRetain();
  long long v10 = *((_OWORD *)v2 + 1);
  swift_unknownObjectRetain();
  *(unsigned char *)a2 = v5;
  *(void *)(a2 + 8) = v6;
  long long v8 = *a1;
  *(_OWORD *)(a2 + 16) = v10;
  *(_OWORD *)(a2 + 32) = v8;
  *(unsigned char *)(a2 + 48) = v7;

  return swift_unknownObjectRetain();
}

void Date.ComponentsFormatStyle.hash(into:)(uint64_t a1)
{
  void (*v12)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned char *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  Swift::UInt v40;
  Swift::UInt v41;
  Swift::UInt8 v42;
  Swift::UInt8 v43;
  Swift::UInt8 v44;
  Swift::UInt8 v45;
  unsigned char v46[144];
  unsigned char v47[8];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  char v64;
  void v65[18];
  unsigned char v66[144];
  unsigned char v67[152];

  uint64_t v3 = *((void *)v1 + 1);
  uint64_t v4 = *((void *)v1 + 3);
  uint64_t v5 = *((void *)v1 + 5);
  Swift::UInt8 v6 = v1[48];
  Hasher._combine(_:)(*v1);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t ObjectType = swift_getObjectType();
  long long v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 120);
  swift_unknownObjectRetain();
  v8(a1, ObjectType, v4);
  swift_unknownObjectRelease();
  uint64_t v9 = swift_getObjectType();
  long long v10 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if (v10(v9, v5))
  {
    Swift::UInt8 v11 = 1;
LABEL_8:
    Hasher._combine(_:)(v11);
    goto LABEL_61;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(v9, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  double v12 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v12(v65, v9, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v65, (uint64_t)v66, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v67, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v67) == 1)
  {
    Swift::UInt8 v11 = 0;
    goto LABEL_8;
  }
  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v47, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v47[0] == 2)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = v47[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v13);
  int64_t v14 = v48;
  if (!v48)
  {
    Hasher._combine(_:)(0);
    int v18 = v47;
    goto LABEL_22;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v14 + 16));
  uint64_t v15 = *(void *)(v14 + 16);
  if (!v15)
  {
    outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v46, &demangling cache variable for type metadata for LocalePreferences?);
    int v18 = v46;
LABEL_22:
    outlined retain of LocalePreferences(v18);
    if (!v49) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }
  outlined retain of LocalePreferences?((uint64_t)v66, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  id v16 = v14 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v16 += 16;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
  if (!v49)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v50) {
      goto LABEL_18;
    }
LABEL_24:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    double v17 = v51;
    if (!v51) {
      goto LABEL_19;
    }
    goto LABEL_25;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v50) {
    goto LABEL_24;
  }
LABEL_18:
  Hasher._combine(_:)(0);
  double v17 = v51;
  if (!v51)
  {
LABEL_19:
    Hasher._combine(_:)(0);
    goto LABEL_26;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v17);
  swift_bridgeObjectRelease();
LABEL_26:
  id v19 = v52;
  uint64_t v45 = v6;
  if (v52)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v19);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v21 = v53;
  uint64_t v20 = v54;
  int64_t v23 = v55;
  double v22 = v56;
  int64_t v24 = v57;
  if (v53)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    char v25 = v20;
    uint64_t v26 = v23;
    unint64_t v27 = v22;
    int64_t v28 = v24;
    uint64_t v29 = v21;
    _CFObject.hash(into:)();
    if (v20) {
      goto LABEL_31;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    char v34 = v24;
    uint64_t v35 = v20;
    uint64_t v36 = v23;
    Swift::Int v37 = v22;
    if (v20)
    {
LABEL_31:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      char v30 = v20;
      _CFObject.hash(into:)();

      if (v23) {
        goto LABEL_32;
      }
      goto LABEL_37;
    }
  }
  Hasher._combine(_:)(0);
  if (v23)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    BOOL v31 = v23;
    _CFObject.hash(into:)();

    if (v22) {
      goto LABEL_33;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    if (v24) {
      goto LABEL_34;
    }
    goto LABEL_39;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  if (!v22) {
    goto LABEL_38;
  }
LABEL_33:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v32 = v22;
  _CFObject.hash(into:)();

  if (v24)
  {
LABEL_34:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    unint64_t v33 = v24;
    _CFObject.hash(into:)();

    goto LABEL_40;
  }
LABEL_39:
  Hasher._combine(_:)(0);
  unint64_t v33 = 0;
LABEL_40:

  uint64_t v38 = v58;
  if (v38)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v38);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::UInt8 v6 = v45;
  unint64_t v39 = v59;
  if (!v59)
  {
    Hasher._combine(_:)(0);
    if (v60) {
      goto LABEL_45;
    }
LABEL_47:
    Hasher._combine(_:)(0);
    goto LABEL_48;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v39);
  swift_bridgeObjectRelease();
  if (!v60) {
    goto LABEL_47;
  }
LABEL_45:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_48:
  if (v61 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    unint64_t v40 = v61 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v40);
  }
  if (v62 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v41 = v62 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }
  if (v63 == 2)
  {
    uint64_t v42 = 0;
  }
  else
  {
    uint64_t v42 = v63 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v42);
  if (v64 == 2)
  {
    uint64_t v43 = 0;
  }
  else
  {
    uint64_t v44 = v64 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v43 = v44;
  }
  Hasher._combine(_:)(v43);
  outlined retain of LocalePreferences?((uint64_t)v66, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v66, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_61:
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v6);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.ComponentsFormatStyle.CodingKeys()
{
  uint64_t result = 0x656C797473;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x73646C656966;
      break;
    case 2:
      uint64_t result = 0x7261646E656C6163;
      break;
    case 3:
      uint64_t result = 0x656C61636F6CLL;
      break;
    case 4:
      uint64_t result = 0x697469736F507369;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.ComponentsFormatStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Date.ComponentsFormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.ComponentsFormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.ComponentsFormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Date.ComponentsFormatStyle.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.ComponentsFormatStyle.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = *v1;
  uint64_t v13 = *((void *)v1 + 1);
  long long v9 = *((_OWORD *)v1 + 1);
  long long v11 = *((_OWORD *)v1 + 2);
  long long v12 = v9;
  int v15 = v1[48];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = v8;
  char v16 = 0;
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    *(void *)&long long v14 = v13;
    char v16 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Date.ComponentsFormatStyle.Field>);
    lazy protocol witness table accessor for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>, (void (*)(void))lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    long long v14 = v12;
    char v16 = 2;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v14 = v11;
    char v16 = 3;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v14) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int Date.ComponentsFormatStyle.hashValue.getter()
{
  void (*v11)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned char *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  Swift::UInt v39;
  Swift::UInt v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  Swift::UInt8 v43;
  unsigned char v45[144];
  unsigned char v46[8];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  char v62;
  char v63;
  void v64[18];
  unsigned char v65[144];
  unsigned char v66[144];
  unsigned char v67[80];

  Swift::UInt v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  uint64_t v3 = *((void *)v0 + 3);
  uint64_t v4 = *((void *)v0 + 5);
  Swift::UInt8 v5 = v0[48];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(v67, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t ObjectType = swift_getObjectType();
  char v7 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 120);
  swift_unknownObjectRetain();
  v7(v67, ObjectType, v3);
  swift_unknownObjectRelease();
  uint64_t v8 = swift_getObjectType();
  long long v9 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain();
  if (v9(v8, v4))
  {
    Swift::UInt8 v10 = 1;
LABEL_8:
    Hasher._combine(_:)(v10);
    goto LABEL_59;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(v8, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  long long v11 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v11(v64, v8, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v64, (uint64_t)v65, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v65, (uint64_t)v66, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v66) == 1)
  {
    Swift::UInt8 v10 = 0;
    goto LABEL_8;
  }
  outlined init with take of LocalePreferences?((uint64_t)v65, (uint64_t)v46, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v46[0] == 2)
  {
    long long v12 = 0;
  }
  else
  {
    long long v12 = v46[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v12);
  uint64_t v13 = v47;
  if (!v47)
  {
    Hasher._combine(_:)(0);
    int v18 = v46;
    goto LABEL_23;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v13 + 16));
  long long v14 = *(void *)(v13 + 16);
  if (!v14)
  {
    outlined init with take of LocalePreferences?((uint64_t)v65, (uint64_t)v45, &demangling cache variable for type metadata for LocalePreferences?);
    int v18 = v45;
LABEL_23:
    outlined retain of LocalePreferences(v18);
    if (!v48) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
  outlined retain of LocalePreferences?((uint64_t)v65, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  int v15 = v13 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 += 16;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  if (!v48)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v49) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v49)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    char v16 = v50;
    if (!v50) {
      goto LABEL_19;
    }
LABEL_26:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v67, v16);
    swift_bridgeObjectRelease();
    double v17 = v51;
    if (!v51) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  char v16 = v50;
  if (v50) {
    goto LABEL_26;
  }
LABEL_19:
  Hasher._combine(_:)(0);
  double v17 = v51;
  if (!v51)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_28;
  }
LABEL_27:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v67, v17);
  swift_bridgeObjectRelease();
LABEL_28:
  uint64_t v20 = v52;
  id v19 = v53;
  double v22 = v54;
  uint64_t v21 = v55;
  int64_t v23 = v56;
  if (v52)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    int64_t v24 = v19;
    char v25 = v22;
    uint64_t v26 = v21;
    unint64_t v27 = v23;
    int64_t v28 = v20;
    _CFObject.hash(into:)();
    if (v19) {
      goto LABEL_30;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    unint64_t v33 = v23;
    char v34 = v19;
    uint64_t v35 = v22;
    uint64_t v36 = v21;
    if (v19)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v29 = v19;
      _CFObject.hash(into:)();

      if (v22) {
        goto LABEL_31;
      }
      goto LABEL_36;
    }
  }
  Hasher._combine(_:)(0);
  if (v22)
  {
LABEL_31:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    char v30 = v22;
    _CFObject.hash(into:)();

    if (v21) {
      goto LABEL_32;
    }
LABEL_37:
    Hasher._combine(_:)(0);
    if (v23) {
      goto LABEL_33;
    }
    goto LABEL_38;
  }
LABEL_36:
  Hasher._combine(_:)(0);
  if (!v21) {
    goto LABEL_37;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  BOOL v31 = v21;
  _CFObject.hash(into:)();

  if (v23)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v32 = v23;
    _CFObject.hash(into:)();

    goto LABEL_39;
  }
LABEL_38:
  Hasher._combine(_:)(0);
  uint64_t v32 = 0;
LABEL_39:

  Swift::Int v37 = v57;
  if (v37)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v67, v37);
    swift_bridgeObjectRelease();
    uint64_t v38 = v58;
    if (v58) {
      goto LABEL_41;
    }
LABEL_44:
    Hasher._combine(_:)(0);
    if (v59) {
      goto LABEL_42;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(0);
  uint64_t v38 = v58;
  if (!v58) {
    goto LABEL_44;
  }
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v67, v38);
  swift_bridgeObjectRelease();
  if (!v59) {
    goto LABEL_45;
  }
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v60 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    unint64_t v39 = v60 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }
  if (v61 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    unint64_t v40 = v61 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v40);
  }
  if (v62 == 2)
  {
    uint64_t v41 = 0;
  }
  else
  {
    uint64_t v41 = v62 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v41);
  if (v63 == 2)
  {
    uint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = v63 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v42 = v43;
  }
  Hasher._combine(_:)(v42);
  outlined retain of LocalePreferences?((uint64_t)v65, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v65, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t Date.ComponentsFormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.ComponentsFormatStyle.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    char v20 = 0;
    lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v9 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Date.ComponentsFormatStyle.Field>);
    char v20 = 1;
    lazy protocol witness table accessor for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>, (void (*)(void))lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v10 = v18;
    char v20 = 2;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v17 = v18;
    char v20 = 3;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    uint64_t v16 = v17;
    swift_unknownObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v19 = v9;
    long long v11 = v18;
    LOBYTE(v18) = 4;
    long long v15 = v11;
    swift_unknownObjectRetain();
    char v12 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(unsigned char *)a2 = v19;
    *(void *)(a2 + 8) = v10;
    long long v13 = v15;
    *(_OWORD *)(a2 + 16) = v17;
    *(_OWORD *)(a2 + 32) = v13;
    *(unsigned char *)(a2 + 48) = v12 & 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Date.ComponentsFormatStyle@<X0>(double *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = Date.ComponentsFormatStyle.format(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance Date.ComponentsFormatStyle@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  char v5 = *v2;
  uint64_t v6 = *((void *)v2 + 1);
  char v7 = v2[48];
  swift_bridgeObjectRetain();
  long long v10 = *((_OWORD *)v2 + 1);
  swift_unknownObjectRetain();
  *(unsigned char *)a2 = v5;
  *(void *)(a2 + 8) = v6;
  long long v8 = *a1;
  *(_OWORD *)(a2 + 16) = v10;
  *(_OWORD *)(a2 + 32) = v8;
  *(unsigned char *)(a2 + 48) = v7;

  return swift_unknownObjectRetain();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ComponentsFormatStyle@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Date.ComponentsFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ComponentsFormatStyle(void *a1)
{
  return Date.ComponentsFormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.ComponentsFormatStyle()
{
  void (*v11)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  void v62[18];
  unsigned char v63[144];
  unsigned char v64[144];
  unsigned char v65[80];

  Swift::UInt v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  uint64_t v3 = *((void *)v0 + 3);
  uint64_t v4 = *((void *)v0 + 5);
  Swift::UInt8 v5 = v0[48];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(v65, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t ObjectType = swift_getObjectType();
  char v7 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 120);
  swift_unknownObjectRetain();
  v7(v65, ObjectType, v3);
  swift_unknownObjectRelease();
  uint64_t v8 = swift_getObjectType();
  int v9 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain();
  if (v9(v8, v4))
  {
    Swift::UInt8 v10 = 1;
LABEL_8:
    Hasher._combine(_:)(v10);
    goto LABEL_58;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(v8, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  long long v11 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v11(v62, v8, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v64) == 1)
  {
    Swift::UInt8 v10 = 0;
    goto LABEL_8;
  }
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)&v44, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v44 == 2)
  {
    char v12 = 0;
  }
  else
  {
    char v12 = v44 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v12);
  long long v13 = v45;
  if (!v45)
  {
    Hasher._combine(_:)(0);
LABEL_22:
    outlined retain of LocalePreferences(&v44);
    if (!v46) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v13 + 16));
  long long v14 = *(void *)(v13 + 16);
  if (!v14) {
    goto LABEL_22;
  }
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  long long v15 = v13 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 += 16;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  if (!v46)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v47) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v47)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    uint64_t v16 = v48;
    if (!v48) {
      goto LABEL_19;
    }
LABEL_25:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v16);
    swift_bridgeObjectRelease();
    long long v17 = v49;
    if (!v49) {
      goto LABEL_20;
    }
    goto LABEL_26;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v16 = v48;
  if (v48) {
    goto LABEL_25;
  }
LABEL_19:
  Hasher._combine(_:)(0);
  long long v17 = v49;
  if (!v49)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_27;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v17);
  swift_bridgeObjectRelease();
LABEL_27:
  int v19 = v50;
  long long v18 = v51;
  uint64_t v21 = v52;
  char v20 = v53;
  double v22 = v54;
  if (v50)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    int64_t v23 = v18;
    int64_t v24 = v21;
    char v25 = v20;
    uint64_t v26 = v22;
    unint64_t v27 = v19;
    _CFObject.hash(into:)();
    if (v18) {
      goto LABEL_29;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v32 = v22;
    unint64_t v33 = v18;
    char v34 = v21;
    uint64_t v35 = v20;
    if (v18)
    {
LABEL_29:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      int64_t v28 = v18;
      _CFObject.hash(into:)();

      if (v21) {
        goto LABEL_30;
      }
      goto LABEL_35;
    }
  }
  Hasher._combine(_:)(0);
  if (v21)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v29 = v21;
    _CFObject.hash(into:)();

    if (v20) {
      goto LABEL_31;
    }
LABEL_36:
    Hasher._combine(_:)(0);
    if (v22) {
      goto LABEL_32;
    }
    goto LABEL_37;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  if (!v20) {
    goto LABEL_36;
  }
LABEL_31:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  char v30 = v20;
  _CFObject.hash(into:)();

  if (v22)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    BOOL v31 = v22;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  BOOL v31 = 0;
LABEL_38:

  uint64_t v36 = v55;
  if (v36)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v36);
    swift_bridgeObjectRelease();
    Swift::Int v37 = v56;
    if (v56) {
      goto LABEL_40;
    }
LABEL_43:
    Hasher._combine(_:)(0);
    if (v57) {
      goto LABEL_41;
    }
LABEL_44:
    Hasher._combine(_:)(0);
    goto LABEL_45;
  }
  Hasher._combine(_:)(0);
  Swift::Int v37 = v56;
  if (!v56) {
    goto LABEL_43;
  }
LABEL_40:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v37);
  swift_bridgeObjectRelease();
  if (!v57) {
    goto LABEL_44;
  }
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_45:
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v38 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  if (v59 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    unint64_t v39 = v59 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }
  if (v60 == 2)
  {
    unint64_t v40 = 0;
  }
  else
  {
    unint64_t v40 = v60 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v40);
  if (v61 == 2)
  {
    uint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = v61 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v41 = v42;
  }
  Hasher._combine(_:)(v41);
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_58:
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

__n128 static FormatStyle<>.components(style:fields:)@<Q0>(unsigned __int8 *a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  unsigned __int8 v5 = *a1;
  uint64_t v6 = one-time initialization token for cache;
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v7 = static LocaleCache.cache + 16;
  uint64_t v8 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v8);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v7, (uint64_t *)v14);
  os_unfair_lock_unlock(v8);
  swift_release_n();
  unint64_t v9 = *(void *)&v14[0];
  uint64_t v10 = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v11 = static CalendarCache.cache + 16;
  char v12 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v12);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v11, (uint64_t *)v14);
  os_unfair_lock_unlock(v12);
  swift_release_n();
  __n128 result = (__n128)v14[0];
  a3->n128_u8[0] = v5;
  a3->n128_u64[1] = a2;
  a3[1] = result;
  a3[2].n128_u64[0] = v9;
  a3[2].n128_u64[1] = v10;
  a3[3].n128_u8[0] = 1;
  return result;
}

__n128 static FormatStyle<>.timeDuration.getter@<Q0>(__n128 *a1@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = static LocaleCache.cache + 16;
  uint64_t v3 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v2, (uint64_t *)v9);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  unint64_t v4 = *(void *)&v9[0];
  uint64_t v5 = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v6 = static CalendarCache.cache + 16;
  uint64_t v7 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v6, (uint64_t *)v9);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  __n128 result = (__n128)v9[0];
  a1->n128_u8[0] = 5;
  a1->n128_u64[1] = 0;
  a1[1] = result;
  a1[2].n128_u64[0] = v4;
  a1[2].n128_u64[1] = v5;
  a1[3].n128_u8[0] = 1;
  return result;
}

void Date.ComponentsFormatStyle.discreteInput(before:)(double *a1@<X0>, uint64_t a2@<X8>)
{
  void (*v52)(double *__return_ptr, double *, double *, void, uint64_t, uint64_t);
  unsigned __int8 v53;
  char v54;
  uint64_t v55;
  char v56;
  double v57;
  double v58[36];
  double v59;
  char v60;
  _OWORD __dst[18];
  long long v62;
  long long v63;
  long long v64;
  char v65;
  _OWORD v66[2];
  Swift::Int_optional v67;
  Swift::Int_optional v68;

  double v4 = *a1;
  double v5 = a1[1];
  long long v6 = v2[1];
  unint64_t v62 = *v2;
  unint64_t v63 = v6;
  int64_t v64 = v2[2];
  unint64_t v65 = *((unsigned char *)v2 + 48);
  uint64_t v56 = v65;
  if (v65) {
    double v7 = v4;
  }
  else {
    double v7 = v5;
  }
  if (v65) {
    double v8 = v5;
  }
  else {
    double v8 = v4;
  }
  outlined retain of Date.ComponentsFormatStyle((uint64_t)&v62);
  uint64_t v9 = specialized _ArrayProtocol.filter(_:)((uint64_t)&outlined read-only object #0 of static Date.ComponentsFormatStyle.Field.Option.allCases.getter, &v62);
  outlined release of Date.ComponentsFormatStyle((uint64_t)&v62);
  uint64_t v10 = *(void *)(v9 + 16);
  if (!v10)
  {
    swift_bridgeObjectRelease();
    goto LABEL_102;
  }
  uint64_t v55 = a2;
  uint64_t v11 = *(unsigned __int8 *)(v10 + v9 + 31);
  uint64_t v12 = qword_1ECA48D18;
  if (qword_1ECA48D18)
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    long long v14 = &byte_1ECA48D28;
    do
    {
      unsigned int v18 = *v14++;
      char v17 = v18;
      if (v11 < v18)
      {
        *(void *)&__dst[0] = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1);
          uint64_t v13 = *(void *)&__dst[0];
        }
        unint64_t v16 = *(void *)(v13 + 16);
        unint64_t v15 = *(void *)(v13 + 24);
        if (v16 >= v15 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
          uint64_t v13 = *(void *)&__dst[0];
        }
        *(void *)(v13 + 16) = v16 + 1;
        *(unsigned char *)(v13 + v16 + 32) = v17;
      }
      --v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
  }
  uint64_t v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DateV21ComponentsFormatStyleV5FieldV6OptionOG_AF8CalendarV9ComponentOs5NeverOTg5015_s10Foundation4e3V21fgh138V5bound33_A95AAD4BE9B9AA48B183E68E3F6B3AACLL3for10relativeTo10movingDown18countingTowardZeroAcF_Sb22includedInRangeOfInputtSgAC_ACS2btFAA8k2V9l4OAE5i2V6J53Ocfu_33_29c7146c9c40ed4ad401dd5090de8340AuQTf3nnnpk_nTf1cn_nTm(v13);
  swift_release();
  swift_bridgeObjectRetain();
  char v20 = (char *)v19;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1, (char *)v19);
  }
  unint64_t v22 = *((void *)v20 + 2);
  unint64_t v21 = *((void *)v20 + 3);
  if (v22 >= v21 >> 1) {
    char v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v20);
  }
  *((void *)v20 + 2) = v22 + 1;
  int64_t v23 = v20 + 32;
  v20[v22 + 32] = 13;
  swift_bridgeObjectRelease();
  v66[0] = v63;
  __dst[0] = v63;
  outlined retain of Locale((uint64_t)v66);
  uint64_t v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DateV21ComponentsFormatStyleV5FieldV6OptionOG_AF8CalendarV9ComponentOs5NeverOTg5015_s10Foundation4e3V21fgh138V5bound33_A95AAD4BE9B9AA48B183E68E3F6B3AACLL3for10relativeTo10movingDown18countingTowardZeroAcF_Sb22includedInRangeOfInputtSgAC_ACS2btFAA8k2V9l4OAE5i2V6J53Ocfu_33_29c7146c9c40ed4ad401dd5090de8340AuQTf3nnnpk_nTf1cn_nTm(v9);
  lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
  uint64_t v25 = Set.init(minimumCapacity:)();
  *(void *)&v58[0] = v25;
  uint64_t v26 = *(void *)(v24 + 16);
  if (v26)
  {
    for (uint64_t i = 0; i != v26; ++i)
    {
      uint64_t v28 = v24 + i;
      specialized Set._Variant.insert(_:)(&v59, *(unsigned __int8 *)(v28 + 32));
    }
    swift_bridgeObjectRelease();
    uint64_t v29 = *(void *)&v58[0];
  }
  else
  {
    uint64_t v29 = v25;
    swift_bridgeObjectRelease();
  }
  uint64_t v30 = swift_allocObject();
  BOOL v31 = (unsigned char *)(v30 + 264);
  uint64_t v32 = (const void *)(v30 + 16);
  uint64_t v33 = swift_bridgeObjectRetain();
  uint64_t v34 = specialized Set.union<A>(_:)(v33, v29);
  swift_bridgeObjectRelease();
  v58[0] = v7;
  uint64_t v59 = v8;
  Calendar.dateComponents(_:from:to:)(v34, v58, &v59, (void *)(v30 + 16));
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v35 = *((void *)v20 + 2);
  if (v56)
  {
    if (v35)
    {
      uint64_t v41 = (unsigned __int8 *)(v20 + 32);
      uint64_t v42 = *((void *)v20 + 2);
      while (2)
      {
        int v43 = *v41++;
        uint64_t v44 = *(void *)(v30 + 48);
        char v45 = *(unsigned char *)(v30 + 56);
        switch(v43)
        {
          case 1:
            uint64_t v44 = *(void *)(v30 + 64);
            if ((*(unsigned char *)(v30 + 72) & 1) == 0) {
              goto LABEL_66;
            }
            goto LABEL_38;
          case 2:
            uint64_t v44 = *(void *)(v30 + 80);
            if (*(unsigned char *)(v30 + 88)) {
              goto LABEL_38;
            }
            goto LABEL_66;
          case 3:
            uint64_t v44 = *(void *)(v30 + 96);
            if (*(unsigned char *)(v30 + 104)) {
              goto LABEL_38;
            }
            goto LABEL_66;
          case 4:
            uint64_t v44 = *(void *)(v30 + 128);
            if (*(unsigned char *)(v30 + 136)) {
              goto LABEL_38;
            }
            goto LABEL_66;
          case 5:
            uint64_t v44 = *(void *)(v30 + 144);
            if (*(unsigned char *)(v30 + 152)) {
              goto LABEL_38;
            }
            goto LABEL_66;
          case 6:
            uint64_t v44 = *(void *)(v30 + 160);
            if (*(unsigned char *)(v30 + 168)) {
              goto LABEL_38;
            }
            goto LABEL_66;
          case 7:
            uint64_t v44 = *(void *)(v30 + 192);
            if (*(unsigned char *)(v30 + 200)) {
              goto LABEL_38;
            }
            goto LABEL_66;
          case 8:
            uint64_t v44 = *(void *)(v30 + 208);
            if (*(unsigned char *)(v30 + 216)) {
              goto LABEL_38;
            }
            goto LABEL_66;
          case 9:
            uint64_t v44 = *(void *)(v30 + 224);
            if (*(unsigned char *)(v30 + 232)) {
              goto LABEL_38;
            }
            goto LABEL_66;
          case 10:
            uint64_t v44 = *(void *)(v30 + 256);
            if (*v31) {
              goto LABEL_38;
            }
            goto LABEL_66;
          case 11:
            uint64_t v44 = *(void *)(v30 + 272);
            if (*(unsigned char *)(v30 + 280)) {
              goto LABEL_38;
            }
            goto LABEL_66;
          case 12:
            uint64_t v44 = *(void *)(v30 + 288);
            if (*(unsigned char *)(v30 + 296)) {
              goto LABEL_38;
            }
            goto LABEL_66;
          case 13:
            uint64_t v44 = *(void *)(v30 + 176);
            char v45 = *(unsigned char *)(v30 + 184);
            goto LABEL_65;
          case 14:
          case 15:
          case 16:
            goto LABEL_38;
          case 17:
            uint64_t v44 = *(void *)(v30 + 112);
            if (*(unsigned char *)(v30 + 120)) {
              goto LABEL_38;
            }
            goto LABEL_66;
          default:
LABEL_65:
            if (v45) {
              goto LABEL_38;
            }
LABEL_66:
            if (v44) {
              goto LABEL_29;
            }
LABEL_38:
            if (--v42) {
              continue;
            }
            goto LABEL_70;
        }
      }
    }
LABEL_70:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    double v46 = v8;
  }
  else
  {
LABEL_29:
    while (v35)
    {
      char v36 = *v23++;
      LOBYTE(__dst[0]) = v36;
      v67.value = 0;
      v67.is_nil = 0;
      DateComponents.setValue(_:for:)(v67, (Foundation::Calendar::Component)__dst);
      --v35;
    }
    swift_bridgeObjectRelease();
    uint64_t v37 = swift_allocObject();
    uint64_t v38 = v37;
    *(unsigned char *)(v37 + 16) = 2;
    if ((v56 & 1) == 0
      || (getter of countingPastZero #1 in Date.ComponentsFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:)(v37, v9, v30) & 1) != 0)
    {
      unint64_t v39 = (uint64_t *)(v30 + 64);
      unint64_t v40 = (unsigned char *)(v30 + 72);
      switch(v11)
      {
        case 1:
          unint64_t v39 = (uint64_t *)(v30 + 80);
          if ((*(unsigned char *)(v30 + 88) & 1) == 0) {
            goto LABEL_79;
          }
          goto LABEL_101;
        case 2:
          unint64_t v39 = (uint64_t *)(v30 + 256);
          if (*v31) {
            goto LABEL_101;
          }
          goto LABEL_79;
        case 3:
          unint64_t v39 = (uint64_t *)(v30 + 96);
          if (*(unsigned char *)(v30 + 104)) {
            goto LABEL_101;
          }
          goto LABEL_79;
        case 4:
          unint64_t v39 = (uint64_t *)(v30 + 128);
          if (*(unsigned char *)(v30 + 136)) {
            goto LABEL_101;
          }
          goto LABEL_79;
        case 5:
          unint64_t v40 = (unsigned char *)(v30 + 152);
          unint64_t v39 = (uint64_t *)(v30 + 144);
          goto LABEL_78;
        case 6:
          unint64_t v39 = (uint64_t *)(v30 + 160);
          if (*(unsigned char *)(v30 + 168)) {
            goto LABEL_101;
          }
          goto LABEL_79;
        default:
LABEL_78:
          if (*v40) {
            goto LABEL_101;
          }
LABEL_79:
          uint64_t v47 = *v39;
          if (!__OFSUB__(v47, 1))
          {
            LOBYTE(__dst[0]) = 0x60504030A0201uLL >> (8 * v11);
            v68.is_nil = 0;
            v68.value = v47 - 1;
            DateComponents.setValue(_:for:)(v68, (Foundation::Calendar::Component)__dst);
            goto LABEL_81;
          }
LABEL_101:
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          a2 = v55;
          break;
      }
      goto LABEL_102;
    }
LABEL_81:
    memcpy(__dst, v32, 0x11AuLL);
    memcpy(v58, v32, 0x11AuLL);
    double v48 = 1.59271755e13;
    if (v7 <= 1.59271755e13) {
      double v48 = v7;
    }
    double v49 = fmax(v48, -2.11845067e11);
    uint64_t v50 = *((void *)&v66[0] + 1);
    uint64_t ObjectType = swift_getObjectType();
    int64_t v57 = v49;
    uint64_t v52 = *(void (**)(double *__return_ptr, double *, double *, void, uint64_t, uint64_t))(v50 + 200);
    outlined retain of Locale((uint64_t)v66);
    outlined retain of DateComponents((uint64_t)__dst);
    v52(&v59, v58, &v57, 0, ObjectType, v50);
    outlined release of DateComponents((uint64_t)__dst);
    outlined release of Locale((uint64_t)v66);
    if ((v60 & 1) == 0)
    {
      double v46 = v59;
      a2 = v55;
      if (v56)
      {
        char v54 = getter of countingPastZero #1 in Date.ComponentsFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:)(v38, v9, v30);
        swift_release();
        swift_bridgeObjectRelease();
        unint64_t v53 = v54 ^ 1;
      }
      else
      {
        swift_release();
        swift_bridgeObjectRelease();
        unint64_t v53 = 0;
      }
      swift_release();
      if ((v53 & (v46 == v8)) == 0 && v46 >= v8) {
        goto LABEL_102;
      }
      if ((v53 & 1) == 0) {
        goto LABEL_87;
      }
      goto LABEL_86;
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    double v46 = -6.31140768e10;
  }
  a2 = v55;
LABEL_86:
  v58[0] = v46;
  Date.nextUdateDown.getter((double *)__dst);
  double v46 = *(double *)__dst;
LABEL_87:
  if ((v56 & 1) == 0)
  {
    if (v5 < v46)
    {
      __break(1u);
      JUMPOUT(0x181F9A3CCLL);
    }
    *(double *)a2 = v46;
    *(double *)(a2 + 8) = v5;
    goto LABEL_92;
  }
  if (v46 >= v4)
  {
    *(double *)a2 = v4;
    *(double *)(a2 + 8) = v46;
LABEL_92:
    *(unsigned char *)(a2 + 16) = 0;
    return;
  }
LABEL_102:
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
}

void Date.nextUdateDown.getter(double *a1@<X8>)
{
  double v2 = (*v1 + 978307200.0) * -1000.0 + 0.0;
  if (v2 < INFINITY) {
    *(void *)&v2 += (*(uint64_t *)&v2 >> 63) | 1;
  }
  double v3 = -v2;
  double v4 = v2 / -1000.0;
  if (v4 * 1000.0 > v3)
  {
    double v5 = 0.0 - v4;
    if (v5 < INFINITY) {
      *(void *)&v5 += (*(uint64_t *)&v5 >> 63) | 1;
    }
    double v4 = -v5;
  }
  double v6 = v4 + -978307200.0;
  if (v4 < v4 + -978307200.0 + 978307200.0)
  {
    double v7 = 0.0 - v6;
    if (0.0 - v6 < INFINITY) {
      *(void *)&v7 += (*(uint64_t *)&v7 >> 63) | 1;
    }
    double v6 = -v7;
  }
  *a1 = v6;
}

void Date.ComponentsFormatStyle.discreteInput(after:)(double *a1@<X0>, uint64_t a2@<X8>)
{
  void (*v52)(double *__return_ptr, double *, double *, void, uint64_t, uint64_t);
  char v53;
  unsigned __int8 v54;
  uint64_t v55;
  char v56;
  double v57;
  double v58[36];
  double v59;
  char v60;
  _OWORD __dst[18];
  long long v62;
  long long v63;
  long long v64;
  char v65;
  _OWORD v66[2];
  Swift::Int_optional v67;
  Swift::Int_optional v68;

  double v4 = *a1;
  double v5 = a1[1];
  long long v6 = v2[1];
  unint64_t v62 = *v2;
  unint64_t v63 = v6;
  int64_t v64 = v2[2];
  unint64_t v65 = *((unsigned char *)v2 + 48);
  uint64_t v56 = v65;
  if (v65) {
    double v7 = v4;
  }
  else {
    double v7 = v5;
  }
  if (v65) {
    double v8 = v5;
  }
  else {
    double v8 = v4;
  }
  outlined retain of Date.ComponentsFormatStyle((uint64_t)&v62);
  uint64_t v9 = specialized _ArrayProtocol.filter(_:)((uint64_t)&outlined read-only object #0 of static Date.ComponentsFormatStyle.Field.Option.allCases.getter, &v62);
  outlined release of Date.ComponentsFormatStyle((uint64_t)&v62);
  uint64_t v10 = *(void *)(v9 + 16);
  if (!v10)
  {
    swift_bridgeObjectRelease();
    goto LABEL_100;
  }
  uint64_t v55 = a2;
  uint64_t v11 = *(unsigned __int8 *)(v10 + v9 + 31);
  uint64_t v12 = qword_1ECA48D18;
  if (qword_1ECA48D18)
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    long long v14 = &byte_1ECA48D28;
    do
    {
      unsigned int v18 = *v14++;
      char v17 = v18;
      if (v11 < v18)
      {
        *(void *)&__dst[0] = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1);
          uint64_t v13 = *(void *)&__dst[0];
        }
        unint64_t v16 = *(void *)(v13 + 16);
        unint64_t v15 = *(void *)(v13 + 24);
        if (v16 >= v15 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
          uint64_t v13 = *(void *)&__dst[0];
        }
        *(void *)(v13 + 16) = v16 + 1;
        *(unsigned char *)(v13 + v16 + 32) = v17;
      }
      --v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
  }
  uint64_t v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DateV21ComponentsFormatStyleV5FieldV6OptionOG_AF8CalendarV9ComponentOs5NeverOTg5015_s10Foundation4e3V21fgh138V5bound33_A95AAD4BE9B9AA48B183E68E3F6B3AACLL3for10relativeTo10movingDown18countingTowardZeroAcF_Sb22includedInRangeOfInputtSgAC_ACS2btFAA8k2V9l4OAE5i2V6J53Ocfu_33_29c7146c9c40ed4ad401dd5090de8340AuQTf3nnnpk_nTf1cn_nTm(v13);
  swift_release();
  swift_bridgeObjectRetain();
  char v20 = (char *)v19;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1, (char *)v19);
  }
  unint64_t v22 = *((void *)v20 + 2);
  unint64_t v21 = *((void *)v20 + 3);
  if (v22 >= v21 >> 1) {
    char v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v20);
  }
  *((void *)v20 + 2) = v22 + 1;
  int64_t v23 = v20 + 32;
  v20[v22 + 32] = 13;
  swift_bridgeObjectRelease();
  v66[0] = v63;
  __dst[0] = v63;
  outlined retain of Locale((uint64_t)v66);
  uint64_t v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DateV21ComponentsFormatStyleV5FieldV6OptionOG_AF8CalendarV9ComponentOs5NeverOTg5015_s10Foundation4e3V21fgh138V5bound33_A95AAD4BE9B9AA48B183E68E3F6B3AACLL3for10relativeTo10movingDown18countingTowardZeroAcF_Sb22includedInRangeOfInputtSgAC_ACS2btFAA8k2V9l4OAE5i2V6J53Ocfu_33_29c7146c9c40ed4ad401dd5090de8340AuQTf3nnnpk_nTf1cn_nTm(v9);
  lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
  uint64_t v25 = Set.init(minimumCapacity:)();
  *(void *)&v58[0] = v25;
  uint64_t v26 = *(void *)(v24 + 16);
  if (v26)
  {
    for (uint64_t i = 0; i != v26; ++i)
    {
      uint64_t v28 = v24 + i;
      specialized Set._Variant.insert(_:)(&v59, *(unsigned __int8 *)(v28 + 32));
    }
    swift_bridgeObjectRelease();
    uint64_t v29 = *(void *)&v58[0];
  }
  else
  {
    uint64_t v29 = v25;
    swift_bridgeObjectRelease();
  }
  uint64_t v30 = swift_allocObject();
  BOOL v31 = (unsigned char *)(v30 + 264);
  uint64_t v32 = (const void *)(v30 + 16);
  uint64_t v33 = swift_bridgeObjectRetain();
  uint64_t v34 = specialized Set.union<A>(_:)(v33, v29);
  swift_bridgeObjectRelease();
  v58[0] = v7;
  uint64_t v59 = v8;
  Calendar.dateComponents(_:from:to:)(v34, v58, &v59, (void *)(v30 + 16));
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v35 = *((void *)v20 + 2);
  if (v56)
  {
LABEL_63:
    while (v35)
    {
      char v41 = *v23++;
      LOBYTE(__dst[0]) = v41;
      v67.value = 0;
      v67.is_nil = 0;
      DateComponents.setValue(_:for:)(v67, (Foundation::Calendar::Component)__dst);
      --v35;
    }
    swift_bridgeObjectRelease();
    uint64_t v42 = swift_allocObject();
    uint64_t v43 = v42;
    *(unsigned char *)(v42 + 16) = 2;
    if ((v56 & 1) != 0
      || (getter of countingPastZero #1 in Date.ComponentsFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:)(v42, v9, v30) & 1) != 0)
    {
      uint64_t v44 = (uint64_t *)(v30 + 64);
      char v45 = (unsigned char *)(v30 + 72);
      switch(v11)
      {
        case 1:
          uint64_t v44 = (uint64_t *)(v30 + 80);
          if ((*(unsigned char *)(v30 + 88) & 1) == 0) {
            goto LABEL_79;
          }
          goto LABEL_99;
        case 2:
          uint64_t v44 = (uint64_t *)(v30 + 256);
          if (*v31) {
            goto LABEL_99;
          }
          goto LABEL_79;
        case 3:
          uint64_t v44 = (uint64_t *)(v30 + 96);
          if (*(unsigned char *)(v30 + 104)) {
            goto LABEL_99;
          }
          goto LABEL_79;
        case 4:
          uint64_t v44 = (uint64_t *)(v30 + 128);
          if (*(unsigned char *)(v30 + 136)) {
            goto LABEL_99;
          }
          goto LABEL_79;
        case 5:
          char v45 = (unsigned char *)(v30 + 152);
          uint64_t v44 = (uint64_t *)(v30 + 144);
          goto LABEL_78;
        case 6:
          uint64_t v44 = (uint64_t *)(v30 + 160);
          if (*(unsigned char *)(v30 + 168)) {
            goto LABEL_99;
          }
          goto LABEL_79;
        default:
LABEL_78:
          if (*v45) {
            goto LABEL_99;
          }
LABEL_79:
          uint64_t v47 = *v44;
          if (!__OFADD__(v47, 1))
          {
            LOBYTE(__dst[0]) = 0x60504030A0201uLL >> (8 * v11);
            v68.is_nil = 0;
            v68.value = v47 + 1;
            DateComponents.setValue(_:for:)(v68, (Foundation::Calendar::Component)__dst);
            goto LABEL_81;
          }
LABEL_99:
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          a2 = v55;
          break;
      }
      goto LABEL_100;
    }
LABEL_81:
    memcpy(__dst, v32, 0x11AuLL);
    memcpy(v58, v32, 0x11AuLL);
    double v48 = 1.59271755e13;
    if (v7 <= 1.59271755e13) {
      double v48 = v7;
    }
    double v49 = fmax(v48, -2.11845067e11);
    uint64_t v50 = *((void *)&v66[0] + 1);
    uint64_t ObjectType = swift_getObjectType();
    int64_t v57 = v49;
    uint64_t v52 = *(void (**)(double *__return_ptr, double *, double *, void, uint64_t, uint64_t))(v50 + 200);
    outlined retain of Locale((uint64_t)v66);
    outlined retain of DateComponents((uint64_t)__dst);
    v52(&v59, v58, &v57, 0, ObjectType, v50);
    outlined release of DateComponents((uint64_t)__dst);
    outlined release of Locale((uint64_t)v66);
    if (v60)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      double v46 = 6.3113904e10;
      a2 = v55;
    }
    else
    {
      double v46 = v59;
      a2 = v55;
      if (v56)
      {
        swift_release();
        swift_bridgeObjectRelease();
        char v54 = 0;
      }
      else
      {
        unint64_t v53 = getter of countingPastZero #1 in Date.ComponentsFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:)(v43, v9, v30);
        swift_release();
        swift_bridgeObjectRelease();
        char v54 = v53 ^ 1;
      }
      swift_release();
      if ((v54 & (v46 == v8)) == 0 && v8 >= v46) {
        goto LABEL_100;
      }
      if ((v54 & 1) == 0) {
        goto LABEL_92;
      }
    }
  }
  else
  {
    if (v35)
    {
      char v36 = (unsigned __int8 *)(v20 + 32);
      uint64_t v37 = *((void *)v20 + 2);
      while (2)
      {
        int v38 = *v36++;
        uint64_t v39 = *(void *)(v30 + 48);
        char v40 = *(unsigned char *)(v30 + 56);
        switch(v38)
        {
          case 1:
            uint64_t v39 = *(void *)(v30 + 64);
            if ((*(unsigned char *)(v30 + 72) & 1) == 0) {
              goto LABEL_59;
            }
            goto LABEL_31;
          case 2:
            uint64_t v39 = *(void *)(v30 + 80);
            if (*(unsigned char *)(v30 + 88)) {
              goto LABEL_31;
            }
            goto LABEL_59;
          case 3:
            uint64_t v39 = *(void *)(v30 + 96);
            if (*(unsigned char *)(v30 + 104)) {
              goto LABEL_31;
            }
            goto LABEL_59;
          case 4:
            uint64_t v39 = *(void *)(v30 + 128);
            if (*(unsigned char *)(v30 + 136)) {
              goto LABEL_31;
            }
            goto LABEL_59;
          case 5:
            uint64_t v39 = *(void *)(v30 + 144);
            if (*(unsigned char *)(v30 + 152)) {
              goto LABEL_31;
            }
            goto LABEL_59;
          case 6:
            uint64_t v39 = *(void *)(v30 + 160);
            if (*(unsigned char *)(v30 + 168)) {
              goto LABEL_31;
            }
            goto LABEL_59;
          case 7:
            uint64_t v39 = *(void *)(v30 + 192);
            if (*(unsigned char *)(v30 + 200)) {
              goto LABEL_31;
            }
            goto LABEL_59;
          case 8:
            uint64_t v39 = *(void *)(v30 + 208);
            if (*(unsigned char *)(v30 + 216)) {
              goto LABEL_31;
            }
            goto LABEL_59;
          case 9:
            uint64_t v39 = *(void *)(v30 + 224);
            if (*(unsigned char *)(v30 + 232)) {
              goto LABEL_31;
            }
            goto LABEL_59;
          case 10:
            uint64_t v39 = *(void *)(v30 + 256);
            if (*v31) {
              goto LABEL_31;
            }
            goto LABEL_59;
          case 11:
            uint64_t v39 = *(void *)(v30 + 272);
            if (*(unsigned char *)(v30 + 280)) {
              goto LABEL_31;
            }
            goto LABEL_59;
          case 12:
            uint64_t v39 = *(void *)(v30 + 288);
            if (*(unsigned char *)(v30 + 296)) {
              goto LABEL_31;
            }
            goto LABEL_59;
          case 13:
            uint64_t v39 = *(void *)(v30 + 176);
            char v40 = *(unsigned char *)(v30 + 184);
            goto LABEL_58;
          case 14:
          case 15:
          case 16:
            goto LABEL_31;
          case 17:
            uint64_t v39 = *(void *)(v30 + 112);
            if (*(unsigned char *)(v30 + 120)) {
              goto LABEL_31;
            }
            goto LABEL_59;
          default:
LABEL_58:
            if (v40) {
              goto LABEL_31;
            }
LABEL_59:
            if (v39) {
              goto LABEL_63;
            }
LABEL_31:
            if (--v37) {
              continue;
            }
            goto LABEL_70;
        }
      }
    }
LABEL_70:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    double v46 = v8;
    a2 = v55;
  }
  v58[0] = v46;
  Date.nextUdateUp.getter((double *)__dst);
  double v46 = *(double *)__dst;
LABEL_92:
  if (v56)
  {
    if (v46 < v4)
    {
      __break(1u);
      JUMPOUT(0x181F9AD24);
    }
    *(double *)a2 = v4;
    *(double *)(a2 + 8) = v46;
    goto LABEL_97;
  }
  if (v5 >= v46)
  {
    *(double *)a2 = v46;
    *(double *)(a2 + 8) = v5;
LABEL_97:
    *(unsigned char *)(a2 + 16) = 0;
    return;
  }
LABEL_100:
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
}

void Date.nextUdateUp.getter(double *a1@<X8>)
{
  double v2 = (*v1 + 978307200.0) * 1000.0 + 0.0;
  if (v2 < INFINITY) {
    *(void *)&v2 += (*(uint64_t *)&v2 >> 63) | 1;
  }
  double v3 = v2 / 1000.0;
  if (v2 / 1000.0 * 1000.0 < v2)
  {
    double v3 = v3 + 0.0;
    if (v3 < INFINITY) {
      *(void *)&v3 += (*(uint64_t *)&v3 >> 63) | 1;
    }
  }
  double v4 = v3 + -978307200.0;
  if (v3 + -978307200.0 < INFINITY && v3 + -978307200.0 + 978307200.0 < v3) {
    *(void *)a1 = ((*(uint64_t *)&v4 >> 63) | 1) + *(void *)&v4;
  }
  else {
    *a1 = v4;
  }
}

double *Date.ComponentsFormatStyle.input(before:)@<X0>(double *result@<X0>, uint64_t a2@<X8>)
{
  double v3 = *result;
  double v4 = result[1];
  double v5 = 0.0 - *result;
  if (v5 < INFINITY) {
    *(void *)&double v5 = ((COERCE__INT64(0.0 - *result) >> 63) | 1) + COERCE__INT64(0.0 - *result);
  }
  double v6 = fabs(v3 + v5);
  double v7 = (v3 + 978307200.0) * -1000.0 + 0.0;
  if (v7 < INFINITY) {
    *(void *)&v7 += (*(uint64_t *)&v7 >> 63) | 1;
  }
  double v8 = vabdd_f64(v3, v7 / -1000.0 + -978307200.0);
  double v9 = 0.0 - v4;
  if (0.0 - v4 < INFINITY) {
    *(void *)&double v9 = ((COERCE__INT64(0.0 - v4) >> 63) | 1) + COERCE__INT64(0.0 - v4);
  }
  double v10 = fabs(v4 + v9);
  double v11 = (v4 + 978307200.0) * -1000.0 + 0.0;
  if (v11 < INFINITY) {
    *(void *)&v11 += (*(uint64_t *)&v11 >> 63) | 1;
  }
  double v12 = (v6 + v8 + v10 + vabdd_f64(v4, v11 / -1000.0 + -978307200.0)) * 4.0;
  if (*(unsigned char *)(v2 + 48))
  {
    double v4 = v4 - v12;
    if (v4 < v3)
    {
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) = 1;
      return result;
    }
    goto LABEL_13;
  }
  double v3 = v3 - v12;
  if (v4 >= v3)
  {
LABEL_13:
    *(double *)a2 = v3;
    *(double *)(a2 + 8) = v4;
    *(unsigned char *)(a2 + 16) = 0;
    return result;
  }
  __break(1u);
  return result;
}

double *Date.ComponentsFormatStyle.input(after:)@<X0>(double *result@<X0>, uint64_t a2@<X8>)
{
  double v3 = *result;
  double v4 = result[1];
  double v5 = 0.0 - *result;
  if (v5 < INFINITY) {
    *(void *)&double v5 = ((COERCE__INT64(0.0 - *result) >> 63) | 1) + COERCE__INT64(0.0 - *result);
  }
  double v6 = fabs(v3 + v5);
  double v7 = (v3 + 978307200.0) * -1000.0 + 0.0;
  if (v7 < INFINITY) {
    *(void *)&v7 += (*(uint64_t *)&v7 >> 63) | 1;
  }
  double v8 = vabdd_f64(v3, v7 / -1000.0 + -978307200.0);
  double v9 = 0.0 - v4;
  if (0.0 - v4 < INFINITY) {
    *(void *)&double v9 = ((COERCE__INT64(0.0 - v4) >> 63) | 1) + COERCE__INT64(0.0 - v4);
  }
  double v10 = fabs(v4 + v9);
  double v11 = (v4 + 978307200.0) * -1000.0 + 0.0;
  if (v11 < INFINITY) {
    *(void *)&v11 += (*(uint64_t *)&v11 >> 63) | 1;
  }
  double v12 = (v6 + v8 + v10 + vabdd_f64(v4, v11 / -1000.0 + -978307200.0)) * 4.0;
  if (*(unsigned char *)(v2 + 48))
  {
    double v4 = v4 + v12;
    if (v4 >= v3) {
      goto LABEL_14;
    }
    __break(1u);
  }
  double v3 = v3 + v12;
  if (v4 < v3)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 16) = 1;
    return result;
  }
LABEL_14:
  *(double *)a2 = v3;
  *(double *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

uint64_t getter of countingPastZero #1 in Date.ComponentsFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 != 2) {
    return v3 & 1;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    double v5 = (unsigned __int8 *)(a2 + 32);
    uint64_t v6 = *(void *)(a3 + 64);
    unsigned int v7 = *(unsigned __int8 *)(a3 + 72);
    uint64_t v8 = *(void *)(a3 + 80);
    unsigned int v9 = *(unsigned __int8 *)(a3 + 88);
    uint64_t v10 = *(void *)(a3 + 96);
    unsigned int v11 = *(unsigned __int8 *)(a3 + 104);
    uint64_t v12 = *(void *)(a3 + 128);
    unsigned int v13 = *(unsigned __int8 *)(a3 + 136);
    uint64_t v14 = *(void *)(a3 + 144);
    unsigned int v15 = *(unsigned __int8 *)(a3 + 152);
    uint64_t v16 = *(void *)(a3 + 160);
    unsigned int v17 = *(unsigned __int8 *)(a3 + 168);
    uint64_t v18 = *(void *)(a3 + 256);
    uint64_t v19 = v4 - 1;
    unsigned int v20 = *(unsigned __int8 *)(a3 + 264);
    do
    {
      int v21 = *v5++;
      uint64_t v22 = v6;
      unsigned int v23 = v7;
      switch(v21)
      {
        case 1:
          uint64_t v22 = v8;
          unsigned int v23 = v9;
          break;
        case 2:
          uint64_t v22 = v18;
          unsigned int v23 = v20;
          break;
        case 3:
          uint64_t v22 = v10;
          unsigned int v23 = v11;
          break;
        case 4:
          uint64_t v22 = v12;
          unsigned int v23 = v13;
          break;
        case 5:
          uint64_t v22 = v14;
          unsigned int v23 = v15;
          break;
        case 6:
          uint64_t v22 = v16;
          unsigned int v23 = v17;
          break;
        default:
          break;
      }
      if (v22) {
        uint64_t v24 = v23;
      }
      else {
        uint64_t v24 = 1;
      }
      BOOL v26 = v19-- != 0;
    }
    while (v24 == 1 && v26);
  }
  else
  {
    uint64_t v24 = 1;
  }
  *(unsigned char *)(a1 + 16) = v24;
  return v24;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  unsigned int v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (__n128 result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void *partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  long long v6 = *(_OWORD *)(v5 + 16);
  v8[0] = *(_OWORD *)v5;
  v8[1] = v6;
  v8[2] = *(_OWORD *)(v5 + 32);
  char v9 = *(unsigned char *)(v5 + 48);
  __n128 result = specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, (unsigned __int8 *)v8);
  if (!v3) {
    *a2 = result;
  }
  return result;
}

uint64_t outlined retain of Date.ComponentsFormatStyle(uint64_t a1)
{
  return a1;
}

uint64_t specialized static Date.ComponentsFormatStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v3 = *((void *)a1 + 1);
  long long v5 = *((_OWORD *)a1 + 1);
  long long v4 = *((_OWORD *)a1 + 2);
  int v6 = a1[48];
  uint64_t v7 = *((void *)a2 + 1);
  long long v8 = *((_OWORD *)a2 + 1);
  int v9 = a2[48];
  if (v3)
  {
    if (!v7) {
      return 0;
    }
    long long v14 = *((_OWORD *)a2 + 2);
    long long v15 = v4;
    long long v12 = *((_OWORD *)a2 + 1);
    long long v13 = v5;
    char v10 = specialized static Set.== infix(_:_:)(v3, v7);
    long long v8 = v12;
    long long v5 = v13;
    if ((v10 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    long long v14 = *((_OWORD *)a2 + 2);
    long long v15 = v4;
    if (v7) {
      return 0;
    }
  }
  long long v16 = v8;
  long long v17 = v5;
  if ((specialized static Calendar.== infix(_:_:)((uint64_t)&v17, (uint64_t)&v16) & 1) == 0) {
    return 0;
  }
  long long v16 = v14;
  long long v17 = v15;
  if (specialized static Locale.== infix(_:_:)((uint64_t)&v17, (uint64_t)&v16)) {
    return v6 ^ v9 ^ 1u;
  }
  else {
    return 0;
  }
}

unint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style);
  }
  return result;
}

uint64_t specialized Set.union<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = (unsigned __int8 *)(a1 + 32);
    do
    {
      unsigned int v4 = *v3++;
      specialized Set._Variant.insert(_:)(&v6, v4);
      --v2;
    }
    while (v2);
    return v7;
  }
  return a2;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, unsigned char *a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = result + 32;
    uint64_t v5 = (uint64_t)(a2 + 8);
    uint64_t v6 = MEMORY[0x1E4FBC860];
    while (1)
    {
      if (v3 <= v2) {
        unint64_t v7 = v2;
      }
      else {
        unint64_t v7 = v3;
      }
      while (1)
      {
        if (v3 == v7)
        {
          __break(1u);
          return result;
        }
        Swift::UInt v8 = *(unsigned __int8 *)(v4 + v3++);
        outlined init with take of LocalePreferences?(v5, (uint64_t)v17, &demangling cache variable for type metadata for Set<Date.ComponentsFormatStyle.Field>?);
        unint64_t result = outlined init with take of LocalePreferences?((uint64_t)v17, (uint64_t)&v18, &demangling cache variable for type metadata for Set<Date.ComponentsFormatStyle.Field>?);
        uint64_t v9 = v18;
        if (!v18) {
          break;
        }
        if (*(void *)(v18 + 16))
        {
          Hasher.init(_seed:)();
          Hasher._combine(_:)(v8);
          unint64_t result = Hasher._finalize()();
          uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
          unint64_t v11 = result & ~v10;
          if ((*(void *)(v9 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
          {
            uint64_t v12 = *(void *)(v9 + 48);
            if (*(unsigned __int8 *)(v12 + v11) == v8) {
              goto LABEL_18;
            }
            uint64_t v13 = ~v10;
            while (1)
            {
              unint64_t v11 = (v11 + 1) & v13;
              if (((*(void *)(v9 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
                break;
              }
              if (*(unsigned __int8 *)(v12 + v11) == v8) {
                goto LABEL_18;
              }
            }
          }
        }
LABEL_6:
        if (v3 == v2) {
          return v6;
        }
      }
      if (*a2 == 5 && (v8 - 4) > 2) {
        goto LABEL_6;
      }
LABEL_18:
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
      }
      unint64_t v15 = *(void *)(v6 + 16);
      unint64_t v14 = *(void *)(v6 + 24);
      if (v15 >= v14 >> 1) {
        unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      }
      *(void *)(v6 + 16) = v15 + 1;
      *(unsigned char *)(v6 + v15 + 32) = v8;
      if (v3 == v2) {
        return v6;
      }
    }
  }
  return MEMORY[0x1E4FBC860];
}

uint64_t outlined release of Date.ComponentsFormatStyle(uint64_t a1)
{
  return a1;
}

uint64_t sub_181F9B910()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 298, 7);
}

uint64_t sub_181F9B950()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

unint64_t instantiation function for generic protocol witness table for Date.ComponentsFormatStyle(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle();
  a1[2] = lazy protocol witness table accessor for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle();
  unint64_t result = lazy protocol witness table accessor for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle();
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.ComponentsFormatStyle(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t destroy for Date.ComponentsFormatStyle()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for Date.ComponentsFormatStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Date.ComponentsFormatStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for Date.ComponentsFormatStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_unknownObjectRelease();
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for Date.ComponentsFormatStyle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.ComponentsFormatStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.ComponentsFormatStyle()
{
  return &type metadata for Date.ComponentsFormatStyle;
}

ValueMetadata *type metadata accessor for Date.ComponentsFormatStyle.Field()
{
  return &type metadata for Date.ComponentsFormatStyle.Field;
}

ValueMetadata *type metadata accessor for Date.ComponentsFormatStyle.Style()
{
  return &type metadata for Date.ComponentsFormatStyle.Style;
}

unsigned char *storeEnumTagSinglePayload for Date.ComponentsFormatStyle.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F9BF68);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Date.ComponentsFormatStyle.CodingKeys()
{
  return &unk_1ECA48BF8;
}

unsigned char *storeEnumTagSinglePayload for Date.ComponentsFormatStyle.Style(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F9C06CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Date.ComponentsFormatStyle.Style.Option()
{
  return &unk_1ECA48AE8;
}

void *type metadata accessor for Date.ComponentsFormatStyle.Style.CodingKeys()
{
  return &unk_1ECA48A58;
}

unsigned char *storeEnumTagSinglePayload for Date.ComponentsFormatStyle.Field(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F9C184);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.ComponentsFormatStyle.Field.Option()
{
  return &type metadata for Date.ComponentsFormatStyle.Field.Option;
}

unsigned char *storeEnumTagSinglePayload for Date.ComponentsFormatStyle.Style.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181F9C258);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for Date.ComponentsFormatStyle.Field.CodingKeys()
{
  return &unk_1ECA48C88;
}

unint64_t lazy protocol witness table accessor for type [Date.ComponentsFormatStyle.Field.Option] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Date.ComponentsFormatStyle.Field.Option] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Date.ComponentsFormatStyle.Field.Option] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Date.ComponentsFormatStyle.Field.Option]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Date.ComponentsFormatStyle.Field.Option] and conformance [A]);
  }
  return result;
}

unint64_t specialized Date.ComponentsFormatStyle.Field.Option.init(rawValue:)(unint64_t result)
{
  if (result >= 7) {
    return 7;
  }
  return result;
}

uint64_t specialized Date.ComponentsFormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C797473 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73646C656966 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x697469736F507369 && a2 == 0xEA00000000006576)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t amfi_launch_constraint_set_spawnattr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && (unint64_t)(a3 - 1) <= 0x3FFE) {
    return MEMORY[0x1F40CD7F0]();
  }
  else {
    return 22;
  }
}

void sub_181F9E448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose((const void *)(v3 - 128), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_181F9EAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

char *retainCString(int a1, char *__s1)
{
  return strdup(__s1);
}

void releaseCString(int a1, void *a2)
{
}

BOOL equalCString(unsigned char *a1, unsigned char *a2)
{
  int v2 = *a1;
  if (!*a1) {
    return *a2 == 0;
  }
  uint64_t v3 = a1 + 1;
  while (v2 == *a2)
  {
    ++a2;
    int v4 = *v3++;
    int v2 = v4;
    if (!v4) {
      return *a2 == 0;
    }
  }
  return 0;
}

uint64_t hashCString_old(const char *a1)
{
  size_t v2 = strlen(a1);

  return MEMORY[0x1F40D8620](a1, v2);
}

uint64_t _encodeCString(void *a1, char *__s)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (__s)
  {
    int v4 = strlen(__s);
    _encodeInt(a1, v4);
    return [a1 appendBytes:__s length:v4];
  }
  else
  {
    char v6 = -123;
    return [a1 appendBytes:&v6 length:1];
  }
}

uint64_t _encodeInt(void *a1, int a2)
{
  size_t v2 = a1;
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v7 = a2;
  if ((a2 + 110) > 0xED)
  {
    if ((a2 + 0x7FFF) > 0xFFFE)
    {
      LOBYTE(v6) = -126;
      [a1 appendBytes:&v6 length:1];
      uint64_t v3 = (__int16 *)&v7;
      a1 = v2;
      uint64_t v4 = 4;
    }
    else
    {
      __int16 v6 = a2;
      char v8 = -127;
      [a1 appendBytes:&v8 length:1];
      uint64_t v3 = &v6;
      a1 = v2;
      uint64_t v4 = 2;
    }
  }
  else
  {
    LOBYTE(v6) = a2;
    uint64_t v3 = &v6;
    uint64_t v4 = 1;
  }
  return [a1 appendBytes:v3 length:v4];
}

void _encodeOrReuseCString(void *a1, char *a2, CFDictionaryRef theDict)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  value = 0;
  if (a2)
  {
    if (CFDictionaryGetValueIfPresent(theDict, a2, (const void **)&value))
    {
      _encodeInt(a1, (int)value);
    }
    else
    {
      value = (void *)(CFDictionaryGetCount(theDict) - 110);
      char v7 = -124;
      [a1 appendBytes:&v7 length:1];
      _encodeCString(a1, a2);
      CFDictionarySetValue(theDict, a2, value);
    }
  }
  else
  {
    char v7 = -123;
    [a1 appendBytes:&v7 length:1];
  }
}

char *_encodeValueOfObjCType(uint64_t a1, char *a2, SEL *a3)
{
  sizep[1] = *MEMORY[0x1E4F143B8];
  char v7 = a2 + 1;
  int v6 = *a2;
  if (v6 <= 80)
  {
    if (v6 > 57)
    {
      switch(*a2)
      {
        case ':':
          if (*a3) {
            Name = (char *)sel_getName(*a3);
          }
          else {
            Name = 0;
          }
          uint64_t v34 = *(void **)(a1 + 8);
          if (v34) {
            goto LABEL_77;
          }
          return (char *)v7;
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case 'A':
          goto LABEL_87;
        case '@':
          _encodeObject_old(a1, (void *)*a3);
          return (char *)v7;
        case 'B':
        case 'C':
          goto LABEL_8;
        default:
          if (v6 == 73 || v6 == 76) {
            goto LABEL_24;
          }
          goto LABEL_87;
      }
    }
    switch(*a2)
    {
      case '!':
        return (char *)v7;
      case '#':
        _encodeClass_old(a1, (objc_class *)*a3);
        return (char *)v7;
      case '%':
        uint64_t v34 = *(void **)(a1 + 8);
        if (!v34) {
          return (char *)v7;
        }
        Name = (char *)*a3;
LABEL_77:
        CFDictionaryRef v39 = *(const __CFDictionary **)(a1 + 24);
        break;
      case '(':
        sizep[0] = 0;
        uint64_t v35 = skipAggregateName(a2 + 1);
        char v7 = NSGetSizeAndAlignment(v35 - 1, sizep, 0);
        if (sizep[0])
        {
          NSUInteger v36 = 0;
          do
            _encodeValueOfObjCType(a1, "C", (char *)a3 + v36++);
          while (v36 < sizep[0]);
        }
        return (char *)v7;
      case '*':
        uint64_t v37 = *(void **)(a1 + 8);
        if (!v37) {
          return (char *)v7;
        }
        SEL v38 = *a3;
        if (!_encodePointerIfNew(v37, *a3, *(CFDictionaryRef *)(a1 + 16))) {
          return (char *)v7;
        }
        uint64_t v34 = *(void **)(a1 + 8);
        CFDictionaryRef v39 = *(const __CFDictionary **)(a1 + 24);
        Name = (char *)v38;
        break;
      default:
        goto LABEL_87;
    }
    _encodeOrReuseCString(v34, Name, v39);
    return (char *)v7;
  }
  if (v6 > 98)
  {
    switch(*a2)
    {
      case 'c':
LABEL_8:
        uint64_t v9 = *(void **)(a1 + 8);
        if (!v9) {
          return (char *)v7;
        }
        LOBYTE(sizep[0]) = *(unsigned char *)a3;
        uint64_t v10 = sizep;
        goto LABEL_33;
      case 'd':
        int v21 = *(void **)(a1 + 8);
        if (!v21) {
          return (char *)v7;
        }
        double v28 = *(double *)a3;
        if (*(double *)a3 >= -2147483650.0 && v28 < 2147483650.0) {
          int v20 = (int)v28;
        }
        else {
          int v20 = 0;
        }
        if (v28 == (double)v20) {
          goto LABEL_57;
        }
        sizep[0] = (NSUInteger)*a3;
        char v30 = -125;
        goto LABEL_84;
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'r':
        goto LABEL_87;
      case 'f':
        int v21 = *(void **)(a1 + 8);
        if (!v21) {
          return (char *)v7;
        }
        float v31 = *(float *)a3;
        double v32 = *(float *)a3;
        if (v32 >= -2147483650.0 && v32 < 2147483650.0) {
          int v20 = (int)v31;
        }
        else {
          int v20 = 0;
        }
        if (v31 != (float)v20)
        {
          LODWORD(sizep[0]) = *(_DWORD *)a3;
          LOBYTE(v44) = -125;
          [v21 appendBytes:&v44 length:1];
          uint64_t v10 = sizep;
          goto LABEL_82;
        }
LABEL_57:
        uint64_t v19 = v21;
LABEL_58:
        _encodeInt(v19, v20);
        break;
      case 'i':
      case 'l':
LABEL_24:
        uint64_t v19 = *(void **)(a1 + 8);
        if (!v19) {
          return (char *)v7;
        }
        int v20 = *(_DWORD *)a3;
        goto LABEL_58;
      case 'q':
        goto LABEL_26;
      case 's':
        goto LABEL_29;
      default:
        if (v6 != 123) {
          goto LABEL_87;
        }
        uint64_t v25 = skipAggregateName(a2 + 1);
        if (*v25 != 125)
        {
          unint64_t v26 = 0;
          do
          {
            sizep[0] = 0;
            NSUInteger v44 = 0;
            NSGetSizeAndAlignment(v25, sizep, &v44);
            unint64_t v27 = roundUp(v26, v44);
            uint64_t v25 = (char *)_encodeValueOfObjCType(a1, v25, (char *)a3 + v27);
            unint64_t v26 = sizep[0] + v27;
          }
          while (*v25 != 125);
        }
        return v25 + 1;
    }
    return (char *)v7;
  }
  if (v6 == 81)
  {
LABEL_26:
    int v21 = *(void **)(a1 + 8);
    if (!v21) {
      return (char *)v7;
    }
    SEL v22 = *a3;
    sizep[0] = (NSUInteger)v22;
    if ((unint64_t)(v22 + 110) <= 0xED)
    {
      LOBYTE(v44) = (_BYTE)v22;
      goto LABEL_32;
    }
    if ((unint64_t)(v22 + 0x7FFF) > 0xFFFE)
    {
      if ((unint64_t)(v22 + 0x7FFFFFFF) > 0xFFFFFFFE)
      {
        char v30 = -121;
LABEL_84:
        LOBYTE(v44) = v30;
        [v21 appendBytes:&v44 length:1];
        uint64_t v10 = sizep;
        uint64_t v9 = v21;
        uint64_t v24 = 8;
      }
      else
      {
        char v45 = -126;
        objc_msgSend(v21, "appendBytes:length:", &v45, 1, v22);
        uint64_t v10 = &v44;
LABEL_82:
        uint64_t v9 = v21;
        uint64_t v24 = 4;
      }
      goto LABEL_85;
    }
    LOWORD(v44) = (_WORD)v22;
    char v45 = -127;
    objc_msgSend(v21, "appendBytes:length:", &v45, 1, v44);
    uint64_t v10 = &v44;
LABEL_71:
    uint64_t v9 = v21;
    uint64_t v24 = 2;
LABEL_85:
    objc_msgSend(v9, "appendBytes:length:", v10, v24, v44);
    return (char *)v7;
  }
  if (v6 != 83)
  {
    if (v6 == 91)
    {
      sizep[0] = 0;
      int v11 = *(unsigned __int8 *)v7;
      if ((v11 - 48) > 9)
      {
        long long v16 = NSGetSizeAndAlignment(v7, sizep, 0);
      }
      else
      {
        uint64_t v12 = 0;
        do
        {
          uint64_t v13 = v12;
          uint64_t v14 = (v11 - 48);
          int v15 = *(unsigned __int8 *)++v7;
          int v11 = v15;
          uint64_t v12 = v14 + 10 * v12;
        }
        while ((v15 - 48) < 0xA);
        long long v16 = NSGetSizeAndAlignment(v7, sizep, 0);
        if (v12)
        {
          uint64_t v17 = 0;
          uint64_t v18 = v14 + 10 * v13;
          do
            _encodeValueOfObjCType(a1, v7, (char *)a3 + sizep[0] * v17++);
          while (v18 != v17);
        }
      }
      int v40 = *(unsigned __int8 *)v16;
      if (v40 == 93) {
        return (char *)(v16 + 1);
      }
      int v42 = (char)v40;
      uint64_t v43 = "missing ']' in type descriptor";
    }
    else
    {
LABEL_87:
      int v42 = (char)v6;
      uint64_t v43 = "unknown type descriptor";
    }
    typeDescriptorError(v42, (uint64_t)a2, (uint64_t)v43);
  }
LABEL_29:
  int v21 = *(void **)(a1 + 8);
  if (v21)
  {
    __int16 v23 = *(_WORD *)a3;
    LOWORD(sizep[0]) = v23;
    if ((unsigned __int16)(v23 + 110) <= 0xEDu)
    {
      LOBYTE(v44) = v23;
LABEL_32:
      uint64_t v10 = &v44;
      uint64_t v9 = v21;
LABEL_33:
      uint64_t v24 = 1;
      goto LABEL_85;
    }
    LOBYTE(v44) = -127;
    [v21 appendBytes:&v44 length:1];
    uint64_t v10 = sizep;
    goto LABEL_71;
  }
  return (char *)v7;
}

void typeDescriptorError(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = +[NSString stringWithFormat:@"*** type descriptor error for '%c' in '%s': %s", a1, a2, a3];
  objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSArchiverArchiveInconsistency" reason:v3 userInfo:0]);
}

uint64_t _encodeObject_old(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  uint64_t v5 = *(void **)(a1 + 8);
  if (v5)
  {
    uint64_t result = _encodePointerIfNew(v5, a2, *(CFDictionaryRef *)(a1 + 16));
    if (result)
    {
      char v7 = (void *)_replacementObjectForObject(a1, a2);
      _encodeClass_old(a1, (objc_class *)[v7 classForArchiver]);
      [v7 encodeWithCoder:a1];
      uint64_t v8 = *(void **)(a1 + 8);
      char v10 = -122;
      return [v8 appendBytes:&v10 length:1];
    }
  }
  else
  {
    uint64_t result = (uint64_t)_replacementObjectForObject(a1, a2);
    if (result)
    {
      uint64_t v9 = (void *)result;
      uint64_t result = CFSetContainsValue(*(CFSetRef *)(a1 + 32), (const void *)result);
      if (!result)
      {
        CFSetAddValue(*(CFMutableSetRef *)(a1 + 32), v9);
        return [v9 encodeWithCoder:a1];
      }
    }
  }
  return result;
}

const void *_replacementObjectForObject(uint64_t a1, void *key)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v6 = 0;
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 48);
  if (!v4) {
    goto LABEL_4;
  }
  if (!CFDictionaryGetValueIfPresent(v4, key, &v6))
  {
    if (*(void *)(a1 + 48))
    {
LABEL_5:
      int v6 = (const void *)objc_msgSend(key, "replacementObjectForArchiver:", a1, v6, v7);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), key, v6);
      return v6;
    }
LABEL_4:
    *(void *)(a1 + 48) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], 0, 0, 0);
    goto LABEL_5;
  }
  return v6;
}

uint64_t _encodePointerIfNew(void *a1, const void *a2, CFDictionaryRef theDict)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  value = 0;
  if (a2)
  {
    if (!CFDictionaryGetValueIfPresent(theDict, a2, (const void **)&value))
    {
      value = (void *)(CFDictionaryGetCount(theDict) - 110);
      char v9 = -124;
      uint64_t v6 = 1;
      [a1 appendBytes:&v9 length:1];
      CFDictionarySetValue(theDict, a2, value);
      return v6;
    }
    _encodeInt(a1, (int)value);
  }
  else
  {
    char v9 = -123;
    [a1 appendBytes:&v9 length:1];
  }
  return 0;
}

uint64_t _encodeClass_old(uint64_t a1, objc_class *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    CFDictionaryRef v4 = a2;
    uint64_t result = _encodePointerIfNew((void *)result, a2, *(CFDictionaryRef *)(a1 + 16));
    if (result)
    {
      do
      {
        uint64_t v5 = NSStringFromClass(v4);
        if ([(NSString *)v5 hasPrefix:@"%"]) {
          uint64_t v5 = [(NSString *)v5 substringFromIndex:1];
        }
        CFDictionaryRef v6 = *(const __CFDictionary **)(a1 + 40);
        if (!v6 || (Value = (NSString *)CFDictionaryGetValue(v6, v5)) == 0)
        {
          Value = (NSString *)encodingMap;
          if (encodingMap) {
            Value = (NSString *)CFDictionaryGetValue((CFDictionaryRef)encodingMap, v5);
          }
        }
        if (Value) {
          uint64_t v8 = Value;
        }
        else {
          uint64_t v8 = v5;
        }
        if (v8 != v5)
        {
          Class v9 = NSClassFromString(v8);
          if (v9) {
            _NSCoderCheckPotentiallyMangledClassNameAndWarn((uint64_t)v9, 1);
          }
        }
        CStringPtr = CFStringGetCStringPtr((CFStringRef)v8, 0x600u);
        if (!CStringPtr)
        {
          CStringPtr = buffer;
          CFStringGetCString((CFStringRef)v8, buffer, 512, 0x600u);
        }
        uint64_t v11 = *(void **)(a1 + 8);
        uint64_t v12 = sel_registerName(CStringPtr);
        Name = (char *)sel_getName(v12);
        _encodeOrReuseCString(v11, Name, *(CFDictionaryRef *)(a1 + 24));
        uint64_t v14 = *(void **)(a1 + 8);
        int Version = class_getVersion(v4);
        _encodeInt(v14, Version);
        do
        {
          Superclass = class_getSuperclass(v4);
          CFDictionaryRef v4 = Superclass;
        }
        while (Superclass && *class_getName(Superclass) == 37);
        uint64_t result = _encodePointerIfNew(*(void **)(a1 + 8), v4, *(CFDictionaryRef *)(a1 + 16));
      }
      while ((result & 1) != 0);
    }
  }
  return result;
}

char *skipAggregateName(char *result)
{
  unint64_t v1 = result;
  do
  {
    while (1)
    {
      int v3 = *result++;
      int v2 = v3;
      if (v3 > 60) {
        break;
      }
      if ((v2 - 40) < 2 || v2 == 0) {
        return v1;
      }
    }
    if (v2 == 61) {
      return result;
    }
  }
  while (v2 != 125 && v2 != 123);
  return v1;
}

unint64_t roundUp(unint64_t a1, unint64_t a2)
{
  if ((a2 ^ 0x7FFFFFFFFFFFFFFFLL) < a1)
  {
    int v3 = +[NSString stringWithFormat:@"*** value %lu too large (may have wrapped)", a2 + a1];
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3A8] reason:v3 userInfo:0]);
  }
  if (a2) {
    return (a2 + a1 - 1) / a2 * a2;
  }
  else {
    return 0;
  }
}

void ___addStringToStringTable_block_invoke()
{
}

id _NSUseParamAsSortSelector(void *a1, uint64_t a2, SEL a3)
{
  return objc_msgSend(a1, a3, a2);
}

uint64_t sub_181FA346C()
{
  return 0;
}

uint64_t sub_181FA34B0()
{
  return 0;
}

uint64_t _NSGrammaticalGenderGetFromExternalRepresentation(void *a1, uint64_t *a2)
{
  if (a1)
  {
    if ([a1 isEqual:@"feminine"])
    {
      uint64_t v4 = 1;
    }
    else if ([a1 isEqual:@"masculine"])
    {
      uint64_t v4 = 2;
    }
    else
    {
      uint64_t result = [a1 isEqual:@"neuter"];
      if (!result) {
        return result;
      }
      uint64_t v4 = 3;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  return 1;
}

uint64_t _NSGrammaticalNumberGetFromExternalRepresentation(void *a1, uint64_t *a2)
{
  if (a1)
  {
    if ([a1 isEqual:@"one"])
    {
      uint64_t v4 = 1;
    }
    else if ([a1 isEqual:@"zero"])
    {
      uint64_t v4 = 2;
    }
    else if ([a1 isEqual:@"other"])
    {
      uint64_t v4 = 3;
    }
    else if ([a1 isEqual:@"two"])
    {
      uint64_t v4 = 4;
    }
    else if ([a1 isEqual:@"few"])
    {
      uint64_t v4 = 5;
    }
    else
    {
      uint64_t result = [a1 isEqual:@"many"];
      if (!result) {
        return result;
      }
      uint64_t v4 = 6;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  return 1;
}

uint64_t _NSGrammaticalPartOfSpeechGetFromExternalRepresentation(void *a1, uint64_t *a2)
{
  if (a1)
  {
    if ([a1 isEqual:@"determiner"])
    {
      uint64_t v4 = 1;
    }
    else if ([a1 isEqual:@"pronoun"])
    {
      uint64_t v4 = 2;
    }
    else if ([a1 isEqual:@"letter"])
    {
      uint64_t v4 = 3;
    }
    else if ([a1 isEqual:@"adverb"])
    {
      uint64_t v4 = 4;
    }
    else if ([a1 isEqual:@"particle"])
    {
      uint64_t v4 = 5;
    }
    else if ([a1 isEqual:@"adjective"])
    {
      uint64_t v4 = 6;
    }
    else if ([a1 isEqual:@"adposition"])
    {
      uint64_t v4 = 7;
    }
    else if ([a1 isEqual:@"verb"])
    {
      uint64_t v4 = 8;
    }
    else if ([a1 isEqual:@"noun"])
    {
      uint64_t v4 = 9;
    }
    else if ([a1 isEqual:@"conjunction"])
    {
      uint64_t v4 = 10;
    }
    else if ([a1 isEqual:@"numeral"])
    {
      uint64_t v4 = 11;
    }
    else if ([a1 isEqual:@"interjection"])
    {
      uint64_t v4 = 12;
    }
    else if ([a1 isEqual:@"preposition"])
    {
      uint64_t v4 = 13;
    }
    else
    {
      uint64_t result = [a1 isEqual:@"abbreviation"];
      if (!result) {
        return result;
      }
      uint64_t v4 = 14;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  return 1;
}

uint64_t _NSGrammaticalCaseGetFromExternalRepresentation(void *a1, uint64_t *a2)
{
  if (a1)
  {
    if ([a1 isEqual:@"nominative"])
    {
      uint64_t v4 = 1;
    }
    else if ([a1 isEqual:@"accusative"])
    {
      uint64_t v4 = 2;
    }
    else if ([a1 isEqual:@"dative"])
    {
      uint64_t v4 = 3;
    }
    else if ([a1 isEqual:@"genitive"])
    {
      uint64_t v4 = 4;
    }
    else if ([a1 isEqual:@"prepositional"])
    {
      uint64_t v4 = 5;
    }
    else if ([a1 isEqual:@"ablative"])
    {
      uint64_t v4 = 6;
    }
    else if ([a1 isEqual:@"adessive"])
    {
      uint64_t v4 = 7;
    }
    else if ([a1 isEqual:@"allative"])
    {
      uint64_t v4 = 8;
    }
    else if ([a1 isEqual:@"elative"])
    {
      uint64_t v4 = 9;
    }
    else if ([a1 isEqual:@"illative"])
    {
      uint64_t v4 = 10;
    }
    else if ([a1 isEqual:@"essive"])
    {
      uint64_t v4 = 11;
    }
    else if ([a1 isEqual:@"inessive"])
    {
      uint64_t v4 = 12;
    }
    else if ([a1 isEqual:@"locative"])
    {
      uint64_t v4 = 13;
    }
    else
    {
      uint64_t result = [a1 isEqual:@"translative"];
      if (!result) {
        return result;
      }
      uint64_t v4 = 14;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  return 1;
}

uint64_t _NSGrammaticalPronounTypeGetFromExternalRepresentation(void *a1, uint64_t *a2)
{
  if (a1)
  {
    if ([a1 isEqual:@"personal"])
    {
      uint64_t v4 = 1;
    }
    else if ([a1 isEqual:@"reflexive"])
    {
      uint64_t v4 = 2;
    }
    else
    {
      uint64_t result = [a1 isEqual:@"possessive"];
      if (!result) {
        return result;
      }
      uint64_t v4 = 3;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  return 1;
}

BOOL __NSMorphologyCustomPronounValidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[NSMorphologyCustomPronoun _validateCustomPronounWithAccessor:a1 forLanguage:a2 error:a3];
}

uint64_t _NSAutoreleasePoolGetRubyToken()
{
  return _CFGetTSD();
}

uint64_t _NSAutoreleasePoolSetRubyToken(uint64_t result)
{
  if (result) {
    return _CFSetTSD();
  }
  return result;
}

uint64_t NSAutoreleaseObject()
{
  return _CFAutoreleasePoolAddObject();
}

uint64_t NSAutoreleasePoolCount()
{
  return 0;
}

BOOL _NSIsLocalizedString(void *a1)
{
  return object_getClass(a1) == (Class)NSDebugString;
}

void NSBundleDisableCodeLoading()
{
  _MergedGlobals_92 = 1;
}

void *___iOSStyleReceipt_block_invoke()
{
  return dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 256);
}

void mutateError2(SEL sel, uint64_t a2, objc_class *a3)
{
  switch(a2)
  {
    case 3:
      uint64_t v5 = +[NSString stringWithFormat:@"%@: Range or index out of bounds", _NSMethodExceptionProem(a3, sel)];
      CFDictionaryRef v6 = (void *)MEMORY[0x1E4F1CA00];
      uint64_t v7 = (void *)MEMORY[0x1E4F1C4A8];
      goto LABEL_10;
    case 2:
      Name = _NSMethodExceptionProem(a3, sel);
      uint64_t v8 = @"%@: nil argument";
      break;
    case 1:
      uint64_t v4 = +[NSString stringWithFormat:@"Attempt to mutate immutable object with %s", sel_getName(sel), Class];
LABEL_9:
      uint64_t v5 = v4;
      CFDictionaryRef v6 = (void *)MEMORY[0x1E4F1CA00];
      uint64_t v7 = (void *)MEMORY[0x1E4F1C3C8];
LABEL_10:
      objc_exception_throw((id)[v6 exceptionWithName:*v7 reason:v5 userInfo:0]);
    default:
      Name = (void *)sel_getName(sel);
      Class Class = object_getClass(a3);
      uint64_t v8 = @"Can't call %s in %@";
      break;
  }
  uint64_t v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v8, Name, Class);
  goto LABEL_9;
}

uint64_t sub_181FAC28C()
{
  return 0;
}

uint64_t sub_181FAC2C8()
{
  return 0;
}

uint64_t sub_181FAC304()
{
  return 0;
}

__CFDictionary *buildTokenMapWithDictionary(void *a1)
{
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], 0, MEMORY[0x1E4F1D530], 0);
  int v3 = (void *)[a1 objectForKey:@"NSPriorDayDesignations"];
  if (!v3) {
    int v3 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"yesterday", 0);
  }
  uint64_t v4 = [v3 count];
  if (v4)
  {
    uint64_t v5 = v4 - 1;
    do
      CFDictionarySetValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v3, "objectAtIndex:", v5--), "lowercaseString"), (const void *)0x4F);
    while (v5 != -1);
  }
  CFDictionaryRef v6 = (void *)[a1 objectForKey:@"NSNextDayDesignations"];
  if (!v6) {
    CFDictionaryRef v6 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"tomorrow", 0);
  }
  uint64_t v7 = [v6 count];
  if (v7)
  {
    uint64_t v8 = v7 - 1;
    do
      CFDictionarySetValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v6, "objectAtIndex:", v8--), "lowercaseString"), (const void *)0x50);
    while (v8 != -1);
  }
  Class v9 = (void *)[a1 objectForKey:@"NSNextNextDayDesignations"];
  if (!v9) {
    Class v9 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"nextday", 0);
  }
  uint64_t v10 = [v9 count];
  if (v10)
  {
    uint64_t v11 = v10 - 1;
    do
      CFDictionarySetValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v9, "objectAtIndex:", v11--), "lowercaseString"), (const void *)0x51);
    while (v11 != -1);
  }
  uint64_t v12 = (void *)[a1 objectForKey:@"NSThisDayDesignations"];
  if (!v12) {
    uint64_t v12 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"today", @"now", 0);
  }
  uint64_t v13 = [v12 count];
  if (v13)
  {
    uint64_t v14 = v13 - 1;
    do
      CFDictionarySetValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v12, "objectAtIndex:", v14--), "lowercaseString"), (const void *)0x4E);
    while (v14 != -1);
  }
  int v15 = (void *)[a1 objectForKey:@"NSEarlierTimeDesignations"];
  if (!v15) {
    int v15 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"prior", @"last", @"past", @"ago", 0);
  }
  uint64_t v16 = [v15 count];
  if (v16)
  {
    uint64_t v17 = v16 - 1;
    do
      CFDictionarySetValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v15, "objectAtIndex:", v17--), "lowercaseString"), (const void *)0x5A);
    while (v17 != -1);
  }
  uint64_t v18 = (void *)[a1 objectForKey:@"NSLaterTimeDesignations"];
  if (!v18) {
    uint64_t v18 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"next", 0);
  }
  uint64_t v19 = [v18 count];
  if (v19)
  {
    uint64_t v20 = v19 - 1;
    do
      CFDictionarySetValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v18, "objectAtIndex:", v20--), "lowercaseString"), (const void *)0x59);
    while (v20 != -1);
  }
  int v21 = (void *)[a1 objectForKey:@"NSYearMonthWeekDesignations"];
  if (!v21) {
    int v21 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"year", @"month", @"week", 0);
  }
  uint64_t v22 = [v21 count];
  if (v22)
  {
    uint64_t v23 = v22 - 1;
    do
    {
      CFDictionarySetValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v21, "objectAtIndex:", v23), "lowercaseString"), (const void *)(v23 + 91));
      --v23;
    }
    while (v23 != -1);
  }
  uint64_t v24 = (void *)[a1 objectForKey:@"NSHourNameDesignations"];
  if (!v24) {
    uint64_t v24 = objc_msgSend(@"((0, midnight), (10, morning), (12, noon, lunch), (14, afternoon), (19, dinner))", "propertyList");
  }
  uint64_t v25 = [v24 count];
  if (v25)
  {
    uint64_t v26 = v25;
    do
    {
      unint64_t v27 = (void *)[v24 objectAtIndex:--v26];
      int v28 = objc_msgSend((id)objc_msgSend(v27, "objectAtIndex:", 0), "intValue");
      uint64_t v29 = [v27 count];
      if (v29 >= 1)
      {
        char v30 = (const void *)(v28 + 94);
        unint64_t v31 = v29 + 1;
        do
        {
          CFDictionarySetValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v27, "objectAtIndex:", v31 - 2), "lowercaseString"), v30);
          --v31;
        }
        while (v31 > 1);
      }
    }
    while (v26);
  }
  double v32 = (void *)[a1 objectForKey:@"NSMonthNameArray"];
  if (!v32) {
    double v32 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"January", @"February", @"March", @"April", @"May", @"June", @"July", @"August", @"September", @"October", @"November", @"December", 0);
  }
  uint64_t v33 = [v32 count];
  if (v33)
  {
    uint64_t v34 = v33 - 1;
    do
    {
      CFDictionarySetValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v32, "objectAtIndex:", v34), "lowercaseString"), (const void *)(v34 + 66));
      --v34;
    }
    while (v34 != -1);
  }
  uint64_t v35 = (void *)[a1 objectForKey:@"NSShortMonthNameArray"];
  if (!v35) {
    uint64_t v35 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"Jan", @"Feb", @"Mar", @"Apr", @"May", @"Jun", @"Jul", @"Aug", @"Sep", @"Oct", @"Nov", @"Dec", 0);
  }
  uint64_t v36 = [v35 count];
  if (v36)
  {
    uint64_t v37 = v36 - 1;
    do
    {
      CFDictionarySetValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v35, "objectAtIndex:", v37), "lowercaseString"), (const void *)(v37 + 66));
      --v37;
    }
    while (v37 != -1);
  }
  SEL v38 = (void *)[a1 objectForKey:@"NSWeekDayNameArray"];
  if (!v38) {
    SEL v38 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"Sunday", @"Monday", @"Tuesday", @"Wednesday", @"Thursday", @"Friday", @"Saturday", 0);
  }
  uint64_t v39 = [v38 count];
  if (v39)
  {
    uint64_t v40 = v39 - 1;
    do
    {
      CFDictionarySetValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v38, "objectAtIndex:", v40), "lowercaseString"), (const void *)(v40 + 82));
      --v40;
    }
    while (v40 != -1);
  }
  char v41 = (void *)[a1 objectForKey:@"NSShortWeekDayNameArray"];
  if (!v41) {
    char v41 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"Sun", @"Mon", @"Tue", @"Wed", @"Thu", @"Fri", @"Sat", 0);
  }
  uint64_t v42 = [v41 count];
  if (v42)
  {
    uint64_t v43 = v42 - 1;
    do
    {
      CFDictionarySetValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v41, "objectAtIndex:", v43), "lowercaseString"), (const void *)(v43 + 82));
      --v43;
    }
    while (v43 != -1);
  }
  NSUInteger v44 = (void *)[a1 objectForKey:@"NSAMPMDesignation"];
  if (!v44) {
    NSUInteger v44 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"AM", @"PM", 0);
  }
  uint64_t v45 = [v44 count];
  if (v45)
  {
    uint64_t v46 = v45 - 1;
    do
    {
      CFDictionarySetValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v44, "objectAtIndex:", v46), "lowercaseString"), (const void *)(v46 + 118));
      --v46;
    }
    while (v46 != -1);
  }

  return Mutable;
}

uint64_t appendNumber(void *a1, uint64_t a2, const char *a3, const char *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = [a1 length];
  if (*a3) {
    Class v9 = a3;
  }
  else {
    Class v9 = a4;
  }
  uint64_t v10 = fmtcheck(v9, "%ld");
  snprintf(__str, 0x410uLL, v10, a2);
  return objc_msgSend(a1, "replaceCharactersInRange:withCString:length:", v8, 0, __str, strlen(__str));
}

uint64_t skipWhitespace(void *a1)
{
  int v2 = (void *)[a1 string];
  unint64_t v3 = [a1 scanLocation];
  unint64_t v4 = [v2 length];
  uint64_t v5 = (void *)[a1 charactersToBeSkipped];
  if (v4 <= v3) {
    unint64_t v4 = v3;
  }
  while (v4 != v3)
  {
    char v6 = objc_msgSend(v5, "characterIsMember:", objc_msgSend(v2, "characterAtIndex:", v3++));
    if ((v6 & 1) == 0)
    {
      unint64_t v4 = v3 - 1;
      break;
    }
  }

  return [a1 setScanLocation:v4];
}

uint64_t absolute_from_gregorian(int a1)
{
  uint64_t v1 = (uint64_t)a1 >> 16;
  if (a1 < 2uLL)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = SHIWORD(a1) % 400;
    do
    {
      if ((*(void *)&a1 & 0x30000) != 0 || v2 != 1 || v4 == 100 || v4 == 300 || v4 == 200) {
        uint64_t v5 = days_per_month[v2];
      }
      else {
        uint64_t v5 = 29;
      }
      v3 += v5;
      ++v2;
    }
    while (a1 - 1 != v2);
  }
  uint64_t v6 = v1 - 1;
  uint64_t v7 = 365 * ((int)v1 - 1);
  uint64_t v8 = v1 + 2;
  if (v1 >= 1) {
    uint64_t v8 = v1 - 1;
  }
  uint64_t v9 = ((unsigned __int128)(v6 * (__int128)0x5C28F5C28F5C28F5) >> 64) - v1 + 1;
  return v7 + BYTE1(a1) + (v8 >> 2) + v6 / 400 + (v9 >> 6) + ((unint64_t)v9 >> 63) + v3;
}

uint64_t sub_181FB2E70()
{
  return 0;
}

uint64_t sub_181FB2EB4()
{
  return 0;
}

uint64_t sub_181FB354C()
{
  return 0;
}

uint64_t sub_181FB37F8()
{
  return 0;
}

uint64_t sub_181FB383C()
{
  return 0;
}

uint64_t sub_181FB3880()
{
  return 0;
}

uint64_t sub_181FB38C4()
{
  return 0;
}

uint64_t sub_181FB3908()
{
  return 0;
}

double sub_181FB3950()
{
  return 0.0;
}

double sub_181FB3994()
{
  return 0.0;
}

uint64_t sub_181FB39D8()
{
  return 0;
}

uint64_t _NSCoderIsAppleSigningIdentifier(void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  memset(v6, 0, 76);
  uint64_t result = objc_msgSend(a1, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", v6, 76, 0, 1, 0, 0, objc_msgSend(a1, "length"), 0);
  if (result)
  {
    uint64_t v2 = 0;
    BYTE11(v6[4]) = 0;
    do
      int v3 = *((unsigned __int8 *)v6 + v2++);
    while ((v3 - 65) < 0x1A || (v3 - 48) < 0xA);
    uint64_t v5 = (const char *)v6;
    if (v2 == 1) {
      return strncmp(v5, "com.apple.", 0xAuLL) == 0;
    }
    if (v3 == 46)
    {
      uint64_t v5 = (char *)v6 + v2;
      return strncmp(v5, "com.apple.", 0xAuLL) == 0;
    }
    return 0;
  }
  return result;
}

void __NSCoderInvalidState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v10 = &a9;
    uint64_t v9 = [[NSString alloc] initWithFormat:a1 arguments:&a9];
  }
  else
  {
    uint64_t v9 = (NSString *)&stru_1ECA5C228;
  }
  objc_exception_throw((id)objc_msgSend(MEMORY[0x1E4F1CA00], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E4F1C3B8], v9, 0, v10, v11));
}

uint64_t __NSCoderDecodeObject(void *a1, const char *a2)
{
  if (a2) {
    return [a1 decodeTopLevelObjectAndReturnError:a2];
  }
  else {
    return [a1 decodeObject];
  }
}

uint64_t __NSCoderDecodeObjectForKey(void *a1, const char *a2, uint64_t a3)
{
  if (a3) {
    return [a1 decodeTopLevelObjectForKey:a2 error:a3];
  }
  else {
    return [a1 decodeObjectForKey:a2];
  }
}

uint64_t __NSCoderDecodeObjectOfClassesForKey(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = [MEMORY[0x1E4F1CAD0] setWithArray:a2];
  if (a4)
  {
    return [a1 decodeTopLevelObjectOfClasses:v7 forKey:a3 error:a4];
  }
  else
  {
    return [a1 decodeObjectOfClasses:v7 forKey:a3];
  }
}

void *_bestReadOnlySandboxExtensionTypeForURL(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    getpid();
    objc_msgSend((id)objc_msgSend(v1, "path"), "fileSystemRepresentation");
    if (sandbox_check()) {
      return 0;
    }
    else {
      return (void *)*MEMORY[0x1E4F14000];
    }
  }
  return result;
}

void *_bestReadWriteSandboxExtensionTypeForURL(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    getpid();
    objc_msgSend((id)objc_msgSend(v1, "path"), "fileSystemRepresentation");
    if (sandbox_check())
    {
      return _bestReadOnlySandboxExtensionTypeForURL(v1);
    }
    else
    {
      return (void *)*MEMORY[0x1E4F14008];
    }
  }
  return result;
}

uint64_t _issueSandboxExtension(void *a1, uint64_t a2, NSError **a3)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  objc_msgSend((id)objc_msgSend(a1, "path"), "fileSystemRepresentation");
  uint64_t v6 = (const char *)sandbox_extension_issue_file();
  if (!v6)
  {
    uint64_t v11 = *__error();
    uint64_t v16 = @"NSLocalizedDescription";
    uint64_t v12 = [(id)_NSFoundationBundle() localizedStringForKey:@"Could not create sandbox extension of type %s for URL %@. Error: %s" value:&stru_1ECA5C228 table:@"Extension"];
    uint64_t v13 = [a1 path];
    uint64_t v14 = __error();
    v17[0] = +[NSString stringWithFormat:v12, a2, v13, strerror(*v14), @"NSLocalizedDescription"];
    int v15 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSPOSIXErrorDomain", v11, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v17 forKeys:&v16 count:1]);
    if (a3 && v15) {
      *a3 = v15;
    }
    return 0;
  }
  uint64_t v7 = v6;
  size_t v8 = strlen(v6) + 1;
  uint64_t v9 = (void *)MEMORY[0x1E4F1C9B8];

  return [v9 dataWithBytesNoCopy:v7 length:v8 freeWhenDone:1];
}

void NSDataDeallocatorVM_block_invoke_2(int a1, void *ptr, NSUInteger bytes)
{
  if (ptr) {
    NSDeallocateMemoryPages(ptr, bytes);
  }
}

uint64_t NSDataDeallocatorUnmap_block_invoke_3(int a1, void *a2, size_t a3)
{
  if (a2) {
    return munmap(a2, a3);
  }
  return result;
}

void sub_181FB5F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_181FB62C0()
{
  return v0;
}

void _NSDataReinitializationBreak()
{
  if (_NSDataReinitializationBreak_onceToken != -1) {
    dispatch_once(&_NSDataReinitializationBreak_onceToken, &__block_literal_global_242);
  }
}

uint64_t sub_181FB783C()
{
  return 0;
}

void sub_181FB8004(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_181FB8068(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_181FB80EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_181FB8718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_181FB88A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void _NSDateFormatterNoInit()
{
}

CFStringRef _NSNewStringFromCString(const char *a1)
{
  size_t v2 = strlen(a1);

  return CFStringCreateWithBytes(0, (const UInt8 *)a1, v2, 0x8000100u, 0);
}

uint64_t NSIsFreedObject(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    if (!NSIsFreedObject_freedClass) {
      NSIsFreedObject_freedClass Class = _objc_getFreedObjectClass();
    }
    Class Class = object_getClass(v1);
    if (Class == (Class)NSIsFreedObject_freedClass) {
      return 1;
    }
    int v3 = Class;
    uint64_t result = (uint64_t)object_getClass(Class);
    if (!result) {
      return result;
    }
    Name = class_getName(v3);
    return Name && !strncmp(Name, "_NSZombie_", 0xAuLL);
  }
  return result;
}

uint64_t NSFrameAddress()
{
  return 0;
}

uint64_t NSReturnAddress()
{
  return 0;
}

uint64_t NSCountFrames()
{
  return 0;
}

const char *_NSPrintForDebugger(void *a1)
{
  if (!a1) {
    return "<nil>";
  }
  if ((objc_opt_respondsToSelector() & 1) == 0 && (objc_opt_respondsToSelector() & 1) == 0) {
    return "<not an object or object does not respond to description method>";
  }
  _CFAutoreleasePoolPush();
  if (_NSPrintForDebugger_result)
  {
    free((void *)_NSPrintForDebugger_result);
    _NSPrintForDebugger_uint64_t result = 0;
  }
  if (objc_opt_respondsToSelector()) {
    size_t v2 = (void *)[a1 debugDescription];
  }
  else {
    size_t v2 = (void *)[a1 description];
  }
  uint64_t v4 = v2;
  if (v2 && ![v2 isEqual:&stru_1ECA5C228])
  {
    uint64_t v5 = (void *)[v4 dataUsingEncoding:4 allowLossyConversion:1];
    _NSPrintForDebugger_uint64_t result = (uint64_t)malloc_type_malloc([v5 length] + 1, 0x6E4CA608uLL);
    memmove((void *)_NSPrintForDebugger_result, (const void *)[v5 bytes], objc_msgSend(v5, "length"));
    uint64_t v6 = _NSPrintForDebugger_result;
    *(unsigned char *)(v6 + [v5 length]) = 0;
    _CFAutoreleasePoolPop();
    return (const char *)_NSPrintForDebugger_result;
  }
  else
  {
    _CFAutoreleasePoolPop();
    return "<object returned empty description>";
  }
}

uint64_t NSRecordAllocationEvent(uint64_t result)
{
  switch((int)result)
  {
    case 3:
      uint64_t result = 3;
      goto LABEL_7;
    case 4:
    case 6:
      uint64_t result = 12;
      goto LABEL_7;
    case 5:
    case 7:
      uint64_t result = 13;
      goto LABEL_7;
    default:
      if (result != 22) {
        return result;
      }
LABEL_7:
      if (*MEMORY[0x1E4F1CBC0]) {
        return __CFRecordAllocationEvent();
      }
      return result;
  }
}

void _NSKVO1AdaptorSlowDeliver(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v12 = [a6 objectForKey:@"new"];
  if (a3)
  {
    uint64_t v13 = [a6 objectForKey:@"old"];
    uint64_t v14 = (void *)[a6 objectForKey:@"indexes"];
    uint64_t v15 = objc_msgSend((id)objc_msgSend(a6, "objectForKey:", @"kind"), "unsignedIntegerValue");
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v13 = 0;
    uint64_t v15 = 1;
  }
  if (v12 == *MEMORY[0x1E4F1D260]) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v12;
  }
  if (v13 == *MEMORY[0x1E4F1D260]) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = v13;
  }
  _NSKVO1AdaptorDeliver(a1, a2, a3, v16, v17, v14, v15, a4, a5);
}

void *_variantPermutations(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = [a1 count];
  if (v2 >= 2)
  {
    unint64_t v3 = v2;
    if (v2 < 5)
    {
      uint64_t v5 = (void *)[v1 firstObject];
      uint64_t v6 = (void *)_variantPermutations(objc_msgSend(v1, "subarrayWithRange:", 1, v3 - 1));
      uint64_t v1 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", (2 * objc_msgSend(v6, "count")) | 1);
      long long v13 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      uint64_t v7 = [v6 countByEnumeratingWithState:&v13 objects:v12 count:16];
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = *(void *)v14;
        do
        {
          uint64_t v10 = 0;
          do
          {
            if (*(void *)v14 != v9) {
              objc_enumerationMutation(v6);
            }
            objc_msgSend(v1, "addObject:", objc_msgSend(v5, "stringByAppendingString:", *(void *)(*((void *)&v13 + 1) + 8 * v10++)));
          }
          while (v8 != v10);
          uint64_t v8 = [v6 countByEnumeratingWithState:&v13 objects:v12 count:16];
        }
        while (v8);
      }
      [v1 addObject:v5];
      [v1 addObjectsFromArray:v6];
    }
    else
    {
      uint64_t v4 = _NSOSLog();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v18 = v1;
        _os_log_impl(&dword_181795000, v4, OS_LOG_TYPE_DEFAULT, "Too many variant permutations to compute: %@", buf, 0xCu);
      }
      return (void *)MEMORY[0x1E4F1CBF0];
    }
  }
  return v1;
}

void WebNSErrorExtrasInit()
{
  if (!descriptions)
  {
    _CFAutoreleasePoolPush();
    descriptions = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA60]);
    _CFAutoreleasePoolPop();
  }
}

NSError *_NSErrorWithFilePath(uint64_t a1, uint64_t a2)
{
  objc_opt_class();
  isKindOfClass Class = objc_opt_isKindOfClass();
  uint64_t v5 = &NSURLErrorKey;
  if ((isKindOfClass & 1) == 0) {
    uint64_t v5 = &NSFilePathErrorKey;
  }
  uint64_t v6 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", a2, *v5, 0);

  return +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:a1 userInfo:v6];
}

NSError *_NSErrorWithFilePathAndEncoding(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_opt_class();
  isKindOfClass Class = objc_opt_isKindOfClass();
  uint64_t v7 = &NSURLErrorKey;
  if ((isKindOfClass & 1) == 0) {
    uint64_t v7 = &NSFilePathErrorKey;
  }
  uint64_t v8 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", a2, *v7, +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3), @"NSStringEncoding", 0);

  return +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:a1 userInfo:v8];
}

NSError *_NSErrorWithFilePathErrnoAndVariant(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return _NSErrorWithFilePathErrnoVariantAndExtraUserInfo(a1, a2, a3, a4, 0);
}

NSError *_NSErrorWithFilePathAndErrno(uint64_t a1, uint64_t a2, int a3)
{
  return _NSErrorWithFilePathErrnoVariantAndExtraUserInfo(a1, a2, a3, 0, 0);
}

NSString *encodingName(void *a1)
{
  uint64_t result = +[NSString localizedNameOfStringEncoding:](NSString, "localizedNameOfStringEncoding:", [a1 unsignedIntegerValue]);
  if (result)
  {
    unint64_t v2 = result;
    if ([(NSString *)result length]) {
      return v2;
    }
    else {
      return 0;
    }
  }
  return result;
}

NSString *validationValue(uint64_t a1)
{
  if (_NSIsNSNumber()) {
    return +[NSString localizedStringWithFormat:@"%@", a1];
  }
  else {
    return +[NSString stringWithFormat:](NSString, "stringWithFormat:", [(id)_NSFoundationBundle() localizedStringForKey:@"\\U201c%@\\U201d" value:&stru_1ECA5C228 table:@"FoundationErrors"], a1);
  }
}

NSError *_NSErrorWithCloudSharingError(void *a1, void *a2)
{
  if (!a1 || (objc_msgSend((id)objc_msgSend(a1, "domain"), "isEqualToString:", @"NSCocoaErrorDomain") & 1) != 0) {
    return (NSError *)a1;
  }
  if (objc_msgSend((id)objc_msgSend(a1, "domain"), "isEqualToString:", _MergedGlobals_83()))
  {
    uint64_t v5 = a1;
LABEL_6:
    uint64_t v6 = _cocoaDomainCodeFromCloudKitError(v5);
    goto LABEL_17;
  }
  uint64_t v7 = (void *)[a1 domain];
  if (![v7 isEqualToString:off_1EB1E80A8()])
  {
LABEL_16:
    uint64_t v6 = 5375;
    goto LABEL_17;
  }
  uint64_t v8 = [a1 code];
  uint64_t v6 = 4;
  if (v8 <= 22)
  {
    if (v8 == 5) {
      goto LABEL_17;
    }
    if (v8 == 17)
    {
      uint64_t v5 = objc_msgSend((id)objc_msgSend(a1, "userInfo"), "objectForKeyedSubscript:", @"NSUnderlyingError");
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  if (v8 == 23)
  {
    uint64_t v6 = 3072;
    goto LABEL_17;
  }
  if (v8 != 24)
  {
    if (v8 == 34)
    {
      uint64_t v6 = 640;
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_17:
  uint64_t v9 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithObject:a1 forKey:@"NSUnderlyingError"];
  uint64_t v10 = (void *)[a2 _variantSubstrings];
  if ([v10 count]) {
    objc_msgSend(v9, "setObject:forKey:", objc_msgSend(v10, "componentsJoinedByString:", @","), @"NSUserStringVariant");
  }

  return +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:v6 userInfo:v9];
}

uint64_t _cocoaDomainCodeFromCloudKitError(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [a1 code];
  uint64_t v3 = 5120;
  switch(v2)
  {
    case 2:
      uint64_t v7 = 0;
      uint64_t v8 = &v7;
      uint64_t v9 = 0x2020000000;
      uint64_t v10 = 5375;
      uint64_t v4 = objc_msgSend((id)objc_msgSend(a1, "userInfo"), "objectForKeyedSubscript:", getCKPartialErrorsByItemIDKey[0]());
      v6[0] = MEMORY[0x1E4F143A8];
      v6[1] = 3221225472;
      v6[2] = ___cocoaDomainCodeFromCloudKitError_block_invoke;
      void v6[3] = &unk_1E51F7868;
      v6[4] = &v7;
      [v4 enumerateKeysAndObjectsUsingBlock:v6];
      uint64_t v3 = v8[3];
      _Block_object_dispose(&v7, 8);
      return v3;
    case 3:
    case 4:
    case 6:
    case 7:
    case 23:
      return v3;
    case 5:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 22:
    case 24:
      return 5375;
    case 10:
      return 5124;
    case 14:
      return 5123;
    case 20:
      return 3072;
    case 25:
      return 5121;
    default:
      if (v2 == 29) {
        return 5122;
      }
      if (v2 == 32) {
        return 5124;
      }
      return 5375;
  }
}

void sub_181FC2438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t initUTTypeConformsTo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)MobileCoreServicesLibrary_frameworkLibrary;
  if (!MobileCoreServicesLibrary_frameworkLibrary)
  {
    uint64_t v4 = dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 2);
    MobileCoreServicesLibrary_frameworkLibrary = (uint64_t)v4;
    if (!v4) {
      __assert_rtn("MobileCoreServicesLibrary", "NSError_Private.m", 32, "frameworkLibrary");
    }
  }
  uint64_t v5 = (uint64_t (*)())dlsym(v4, "UTTypeConformsTo");
  softLinkUTTypeConformsTo[0] = v5;
  if (!v5) {
    __assert_rtn("initUTTypeConformsTo", "NSError_Private.m", 33, "softLinkUTTypeConformsTo");
  }

  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1, a2);
}

uint64_t initCKErrorDomain()
{
  uint64_t v0 = CloudKitLibrary();
  uint64_t v1 = (uint64_t *)dlsym(v0, "CKErrorDomain");
  if (!v1) {
    __assert_rtn("initCKErrorDomain", "NSError_Private.m", 45, "constant");
  }
  uint64_t result = *v1;
  constantCKErrorDomain = result;
  _MergedGlobals_83 = CKErrorDomainFunction;
  return result;
}

void *CloudKitLibrary()
{
  uint64_t result = (void *)CloudKitLibrary_frameworkLibrary;
  if (!CloudKitLibrary_frameworkLibrary)
  {
    uint64_t result = dlopen("/System/Library/Frameworks/CloudKit.framework/CloudKit", 2);
    CloudKitLibrary_frameworkLibrary = (uint64_t)result;
    if (!result) {
      __assert_rtn("CloudKitLibrary", "NSError_Private.m", 43, "frameworkLibrary");
    }
  }
  return result;
}

uint64_t CKErrorDomainFunction()
{
  return constantCKErrorDomain;
}

uint64_t ___cocoaDomainCodeFromCloudKitError_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t result = _cocoaDomainCodeFromCloudKitError(a3);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) != 5375) {
    *a4 = 1;
  }
  return result;
}

uint64_t initCKPartialErrorsByItemIDKey()
{
  uint64_t v0 = CloudKitLibrary();
  uint64_t v1 = (uint64_t *)dlsym(v0, "CKPartialErrorsByItemIDKey");
  if (!v1) {
    __assert_rtn("initCKPartialErrorsByItemIDKey", "NSError_Private.m", 44, "constant");
  }
  uint64_t result = *v1;
  constantCKPartialErrorsByItemIDKey = result;
  getCKPartialErrorsByItemIDKey[0] = CKPartialErrorsByItemIDKeyFunction;
  return result;
}

uint64_t CKPartialErrorsByItemIDKeyFunction()
{
  return constantCKPartialErrorsByItemIDKey;
}

uint64_t initBRCloudDocsErrorDomain()
{
  uint64_t v0 = (void *)qword_1EB1EC780;
  if (!qword_1EB1EC780)
  {
    uint64_t v0 = dlopen("/System/Library/PrivateFrameworks/CloudDocs.framework/CloudDocs", 2);
    qword_1EB1EC780 = (uint64_t)v0;
    if (!v0) {
      __assert_rtn("CloudDocsLibrary", "NSError_Private.m", 46, "frameworkLibrary");
    }
  }
  uint64_t v1 = (uint64_t *)dlsym(v0, "BRCloudDocsErrorDomain");
  if (!v1) {
    __assert_rtn("initBRCloudDocsErrorDomain", "NSError_Private.m", 47, "constant");
  }
  uint64_t result = *v1;
  qword_1EB1EC778 = result;
  off_1EB1E80A8 = BRCloudDocsErrorDomainFunction;
  return result;
}

uint64_t BRCloudDocsErrorDomainFunction()
{
  return qword_1EB1EC778;
}

uint64_t _NSRaiseError(uint64_t a1)
{
  return MEMORY[0x1F40D8D80](140, a1, 0);
}

uint64_t _NSExceptionRaiser()
{
  return MEMORY[0x1F40D8D80](160, 0, 0);
}

uint64_t _NSSetExceptionRaiser(uint64_t a1)
{
  return MEMORY[0x1F40D8D80](161, a1, 0);
}

void *_userInfoForFileAndLine(uint64_t a1, uint64_t a2)
{
  if (!a1 && !a2) {
    return 0;
  }
  uint64_t v5 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v4 = v5;
  if (a1) {
    [v5 setObject:a1 forKey:@"NSAssertFile"];
  }
  if (a2) {
    objc_msgSend(v4, "setObject:forKey:", +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2), @"NSAssertLine");
  }
  return v4;
}

uint64_t sub_181FC334C()
{
  return 0;
}

uint64_t sub_181FC3390()
{
  return 0;
}

uint64_t sub_181FC33D4()
{
  return 0;
}

uint64_t sub_181FC3420()
{
  return 0;
}

uint64_t sub_181FC3464()
{
  return 0;
}

uint64_t sub_181FC34A8()
{
  return 0;
}

uint64_t sub_181FC34EC()
{
  return 0;
}

uint64_t sub_181FC3530()
{
  return 0;
}

uint64_t sub_181FC3574()
{
  return v0;
}

uint64_t sub_181FC35B8()
{
  return 0;
}

uint64_t sub_181FC35FC()
{
  return 0;
}

uint64_t sub_181FC3640()
{
  return 0;
}

uint64_t sub_181FC3684()
{
  return 0;
}

uint64_t sub_181FC36C8()
{
  return 0;
}

uint64_t sub_181FC370C()
{
  return 0;
}

uint64_t sub_181FC3750()
{
  return 0;
}

uint64_t sub_181FC3794()
{
  return 0;
}

uint64_t sub_181FC37D8()
{
  return 0;
}

uint64_t sub_181FC3C50()
{
  return 0;
}

uint64_t sub_181FC3C94()
{
  return 0;
}

uint64_t sub_181FC3CD8()
{
  return 0;
}

uint64_t sub_181FC3DA0()
{
  return 0;
}

uint64_t sub_181FC3F30()
{
  return 0;
}

uint64_t sub_181FC3F74()
{
  return 0;
}

void sub_181FC4014()
{
  if (v0) {
    *uint64_t v0 = +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:3072 userInfo:0];
  }
  JUMPOUT(0x181FC3FE4);
}

void sub_181FC40FC()
{
}

uint64_t sub_181FC4144()
{
  return 0;
}

void sub_181FC41EC()
{
  if (v0) {
    *uint64_t v0 = +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:3072 userInfo:0];
  }
  JUMPOUT(0x181FC41BCLL);
}

void sub_181FC42D4()
{
}

void sub_181FC43D0()
{
  if (v0) {
    *uint64_t v0 = +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:3072 userInfo:0];
  }
  JUMPOUT(0x181FC43A0);
}

void sub_181FC44B8()
{
}

uint64_t sub_181FC4500()
{
  return 0;
}

void sub_181FC45B0()
{
  if (v0) {
    *uint64_t v0 = +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:3072 userInfo:0];
  }
  JUMPOUT(0x181FC4580);
}

void sub_181FC4698()
{
}

uint64_t sub_181FC46E0()
{
  return 0;
}

void sub_181FC4790()
{
  if (v0) {
    *uint64_t v0 = +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:3072 userInfo:0];
  }
  JUMPOUT(0x181FC4760);
}

void sub_181FC4878()
{
}

void sub_181FC4974()
{
  if (v0) {
    *uint64_t v0 = +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:3072 userInfo:0];
  }
  JUMPOUT(0x181FC4944);
}

void sub_181FC4A5C()
{
}

void sub_181FC4B58()
{
  if (v0) {
    *uint64_t v0 = +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:3072 userInfo:0];
  }
  JUMPOUT(0x181FC4B28);
}

void sub_181FC4C40()
{
}

void sub_181FC4D34()
{
  if (v0) {
    *uint64_t v0 = +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:3072 userInfo:0];
  }
  JUMPOUT(0x181FC4D04);
}

void sub_181FC4E1C()
{
}

void sub_181FC4F10()
{
  if (v0) {
    *uint64_t v0 = +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:3072 userInfo:0];
  }
  JUMPOUT(0x181FC4EE0);
}

void sub_181FC4FF8()
{
}

uint64_t sub_181FC5040()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_181FC5084()
{
  return 0;
}

uint64_t sub_181FC5114()
{
  return 0;
}

uint64_t unsetFlag(uint64_t result, __int16 a2)
{
  return result;
}

void _NSFileHandleRaiseOperationExceptionWhileReading(objc_class *a1, const char *a2, int a3)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  if (*__error() < 1 || *__error() >= *MEMORY[0x1E4F14AA0]) {
    uint64_t v6 = "unknown error";
  }
  else {
    uint64_t v6 = *(const char **)(MEMORY[0x1E4F14A98] + 8 * *__error());
  }
  uint64_t v7 = __error();
  uint64_t v8 = _NSErrorWithFilePathAndErrno(*v7, 0, a3);
  uint64_t v10 = @"NSFileHandleOperationExceptionUnderlyingError";
  v11[0] = v8;
  uint64_t v9 = (void *)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSFileHandleOperationException", +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@: %s", _NSMethodExceptionProem(a1, a2), v6), objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v11, &v10, 1) reason userInfo];
  objc_exception_throw(v9);
}

uint64_t sub_181FC605C()
{
  return 0;
}

uint64_t sub_181FC60A0()
{
  return 0;
}

uint64_t _NSFrameworkHandleForLibrarianSymbols()
{
  if (qword_1EB1ECE28 != -1) {
    dispatch_once(&qword_1EB1ECE28, &__block_literal_global_10);
  }
  return qword_1EB1ECE20;
}

uint64_t sub_181FC6860()
{
  return 0;
}

uint64_t sub_181FC68A4()
{
  return 0;
}

uint64_t sub_181FC68E8()
{
  return 0;
}

uint64_t sub_181FC692C()
{
  return 0;
}

void sub_181FC7F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

NSError *_cocoaDomainErrorForLibrarianError(uint64_t a1, void *a2, int a3)
{
  uint64_t v6 = (void *)[a2 domain];
  if ([v6 isEqualToString:@"NSCocoaErrorDomain"])
  {
    id v7 = a2;
    return (NSError *)v7;
  }
  else if ([v6 isEqualToString:@"NSPOSIXErrorDomain"])
  {
    uint64_t v9 = [a2 code];
    uint64_t v10 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObject:a2 forKey:@"NSUnderlyingError"];
    return _NSErrorWithFilePathErrnoVariantAndExtraUserInfo(v9, a1, a3, 0, v10);
  }
  else
  {
    if (a3) {
      uint64_t v11 = 256;
    }
    else {
      uint64_t v11 = 512;
    }
    uint64_t v12 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithObjectsAndKeys:", a2, @"NSUnderlyingError", a1, @"NSURL", 0);
    return +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:v11 userInfo:v12];
  }
}

NSError *_librarianMissingError(int a1)
{
  if (a1) {
    uint64_t v1 = 256;
  }
  else {
    uint64_t v1 = 512;
  }
  uint64_t v2 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObject:forKey:", objc_msgSend((id)_NSFoundationBundle(), "localizedStringForKey:value:table:", @"This feature is not enabled on this machine.", &stru_1ECA5C228, @"Document"), @"NSLocalizedDescription");

  return +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:v1 userInfo:v2];
}

void sub_181FC83D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_181FC85AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_181FC8A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_181FC8D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 136), 8);
  _Unwind_Resume(a1);
}

void _postUbqiuityAccountChangeNotification()
{
  if (off_1EB1ECED0 && off_1EB1ECED0())
  {
    Main = CFRunLoopGetMain();
    CFRunLoopPerformBlock(Main, (CFTypeRef)*MEMORY[0x1E4F1D410], &__block_literal_global_665);
    uint64_t v1 = CFRunLoopGetMain();
    CFRunLoopWakeUp(v1);
  }
}

void sub_181FC9A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void __Block_byref_object_copy__380(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__381(uint64_t a1)
{
}

void sub_181FC9E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_181FCA5E4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 104), 8);
  _Unwind_Resume(a1);
}

void sub_181FCAF20(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void ___postUbqiuityAccountChangeNotification_block_invoke()
{
  uint64_t v0 = (void *)MEMORY[0x185308110]();
  [+[NSNotificationCenter defaultCenter] postNotificationName:@"NSUbiquityIdentityDidChangeNotification" object:0];
}

uint64_t int_sort(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a2 < *a1;
  }
}

uint64_t sub_181FCC054()
{
  return 0;
}

uint64_t sub_181FCC0A4()
{
  return 0;
}

void sub_181FCD58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_181FCD824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t NSExtensionIsPredicateSafeToExecuteWithObject()
{
  return 0;
}

uint64_t NSExtensionIsSafeKeyPathForObject()
{
  return 0;
}

uint64_t initNSDocumentTypeDocumentAttribute()
{
  uint64_t v0 = UIFoundationLibrary();
  uint64_t v1 = (uint64_t *)dlsym(v0, "NSDocumentTypeDocumentAttribute");
  if (!v1) {
    __assert_rtn("initNSDocumentTypeDocumentAttribute", "NSExtensionItem.m", 34, "constant");
  }
  uint64_t result = *v1;
  constantNSDocumentTypeDocumentAttribute = result;
  _MergedGlobals_84 = NSDocumentTypeDocumentAttributeFunction;
  return result;
}

uint64_t NSDocumentTypeDocumentAttributeFunction()
{
  return constantNSDocumentTypeDocumentAttribute;
}

uint64_t initNSRTFTextDocumentType()
{
  uint64_t v0 = UIFoundationLibrary();
  uint64_t v1 = (uint64_t *)dlsym(v0, "NSRTFTextDocumentType");
  if (!v1) {
    __assert_rtn("initNSRTFTextDocumentType", "NSExtensionItem.m", 35, "constant");
  }
  uint64_t result = *v1;
  constantNSRTFTextDocumentType = result;
  off_1EB1E80B8 = NSRTFTextDocumentTypeFunction;
  return result;
}

uint64_t NSRTFTextDocumentTypeFunction()
{
  return constantNSRTFTextDocumentType;
}

uint64_t initNSRTFDTextDocumentType()
{
  uint64_t v0 = UIFoundationLibrary();
  uint64_t v1 = (uint64_t *)dlsym(v0, "NSRTFDTextDocumentType");
  if (!v1) {
    __assert_rtn("initNSRTFDTextDocumentType", "NSExtensionItem.m", 36, "constant");
  }
  uint64_t result = *v1;
  constantNSRTFDTextDocumentType = result;
  off_1EB1E80C0 = NSRTFDTextDocumentTypeFunction;
  return result;
}

uint64_t NSRTFDTextDocumentTypeFunction()
{
  return constantNSRTFDTextDocumentType;
}

void *UIFoundationLibrary()
{
  uint64_t result = (void *)UIFoundationLibrary_frameworkLibrary;
  if (!UIFoundationLibrary_frameworkLibrary)
  {
    uint64_t result = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    UIFoundationLibrary_frameworkLibrary = (uint64_t)result;
    if (!result) {
      __assert_rtn("UIFoundationLibrary", "NSExtensionItem.m", 33, "frameworkLibrary");
    }
  }
  return result;
}

uint64_t initkUTTypeFileURL()
{
  uint64_t v0 = CoreServicesLibrary();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTypeFileURL");
  if (!v1) {
    __assert_rtn("initkUTTypeFileURL", "NSExtensionItem.m", 41, "constant");
  }
  uint64_t result = *v1;
  constantkUTTypeFileURL = result;
  off_1EB1E80C8 = kUTTypeFileURLFunction;
  return result;
}

void *CoreServicesLibrary()
{
  uint64_t result = (void *)CoreServicesLibrary_frameworkLibrary;
  if (!CoreServicesLibrary_frameworkLibrary)
  {
    uint64_t result = dlopen("/System/Library/Frameworks/CoreServices.framework/CoreServices", 2);
    CoreServicesLibrary_frameworkLibrary = (uint64_t)result;
    if (!result) {
      __assert_rtn("CoreServicesLibrary", "NSExtensionItem.m", 38, "frameworkLibrary");
    }
  }
  return result;
}

uint64_t kUTTypeFileURLFunction()
{
  return constantkUTTypeFileURL;
}

uint64_t initkUTTypeURL()
{
  uint64_t v0 = CoreServicesLibrary();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTypeURL");
  if (!v1) {
    __assert_rtn("initkUTTypeURL", "NSExtensionItem.m", 39, "constant");
  }
  uint64_t result = *v1;
  constantkUTTypeURL = result;
  off_1EB1E80D0 = kUTTypeURLFunction;
  return result;
}

uint64_t kUTTypeURLFunction()
{
  return constantkUTTypeURL;
}

uint64_t initFPCopyExtensionMatchingDictionaryForItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)FileProviderLibrary_frameworkLibrary;
  if (!FileProviderLibrary_frameworkLibrary)
  {
    uint64_t v4 = dlopen("/System/Library/Frameworks/FileProvider.framework/FileProvider", 2);
    FileProviderLibrary_frameworkLibrary = (uint64_t)v4;
    if (!v4) {
      __assert_rtn("FileProviderLibrary", "NSExtensionItem.m", 55, "frameworkLibrary");
    }
  }
  uint64_t v5 = (uint64_t (*)())dlsym(v4, "FPCopyExtensionMatchingDictionaryForItem");
  off_1EB1E80E0 = v5;
  if (!v5) {
    __assert_rtn("initFPCopyExtensionMatchingDictionaryForItem", "NSExtensionItem.m", 57, "softLinkFPCopyExtensionMatchingDictionaryForItem");
  }

  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1, a2);
}

uint64_t initkUTTypeData()
{
  uint64_t v0 = CoreServicesLibrary();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTypeData");
  if (!v1) {
    __assert_rtn("initkUTTypeData", "NSExtensionItem.m", 40, "constant");
  }
  uint64_t result = *v1;
  constantkUTTypeData = result;
  off_1EB1E80D8 = kUTTypeDataFunction;
  return result;
}

uint64_t kUTTypeDataFunction()
{
  return constantkUTTypeData;
}

BOOL NSEqualPoints(NSPoint aPoint, NSPoint bPoint)
{
  return aPoint.y == bPoint.y && aPoint.x == bPoint.x;
}

NSRect NSOffsetRect(NSRect aRect, CGFloat dX, CGFloat dY)
{
  double v3 = aRect.origin.x + dX;
  double v4 = aRect.origin.y + dY;
  aRect.origin.y = v4;
  aRect.origin.x = v3;
  return aRect;
}

NSRect NSInsetRect(NSRect aRect, CGFloat dX, CGFloat dY)
{
  double v3 = aRect.origin.x + dX;
  double v4 = aRect.origin.y + dY;
  double v5 = aRect.size.width - dX - dX;
  double v6 = aRect.size.height - dY - dY;
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

NSRect NSIntegralRect(NSRect aRect)
{
  double height = aRect.size.height;
  double v2 = 0.0;
  if (aRect.size.width <= 0.0)
  {
    double v6 = 0.0;
    double v7 = 0.0;
    double v8 = 0.0;
  }
  else
  {
    double width = aRect.size.width;
    double y = aRect.origin.y;
    double x = aRect.origin.x;
    double v6 = 0.0;
    double v7 = 0.0;
    double v8 = 0.0;
    if (height > 0.0)
    {
      double v8 = floor(x);
      double v7 = floor(y);
      double v6 = ceil(x + width) - v8;
      double v2 = ceil(y + height) - v7;
    }
  }
  result.size.double height = v2;
  result.size.double width = v6;
  result.origin.double y = v7;
  result.origin.double x = v8;
  return result;
}

unint64_t NSIntegralRectFlipOptions(unint64_t a1)
{
  return (a1 >> 2) & 0x20202 | a1 & 0xFFFFFFFFFFF5F5F5 | (4 * (int)a1) & 0x80808;
}

double roundTowardsPlusInfinity(double a1)
{
  return floor(a1 + 0.5);
}

double roundTowardsMinusInfinity(double a1)
{
  return ceil(a1 + -0.5);
}

void NSDivideRect(NSRect inRect, NSRect *slice, NSRect *rem, CGFloat amount, NSRectEdge edge)
{
  *slice = inRect;
  *rem = inRect;
  if ((edge | 2) == 2)
  {
    if (inRect.size.width >= amount) {
      double width = amount;
    }
    else {
      double width = inRect.size.width;
    }
    slice->size.double width = width;
    double x = rem->size.width - width;
    rem->size.double width = x;
    if (edge)
    {
      inRect.origin.double y = slice->origin.x;
      rem = slice;
    }
    else
    {
      inRect.origin.double y = slice->size.width;
      double x = inRect.origin.x;
    }
  }
  else
  {
    if (inRect.size.height >= amount) {
      double height = amount;
    }
    else {
      double height = inRect.size.height;
    }
    slice->size.double height = height;
    double x = rem->size.height - height;
    rem->size.double height = x;
    if (edge == NSRectEdgeMinY)
    {
      double x = slice->size.height;
      rem = (NSRect *)((char *)rem + 8);
    }
    else
    {
      inRect.origin.double y = slice->origin.y;
      rem = (NSRect *)&slice->origin.y;
    }
  }
  rem->origin.double x = inRect.origin.y + x;
}

BOOL NSPointInRect(NSPoint aPoint, NSRect aRect)
{
  double v2 = aRect.origin.x + aRect.size.width;
  return aPoint.x >= aRect.origin.x
      && aPoint.x < v2
      && aPoint.y >= aRect.origin.y
      && aPoint.y < aRect.origin.y + aRect.size.height;
}

BOOL NSMouseInRect(NSPoint aPoint, NSRect aRect, BOOL flipped)
{
  double v3 = aRect.origin.x + aRect.size.width;
  if (aPoint.x < aRect.origin.x || aPoint.x >= v3) {
    return 0;
  }
  double v6 = aRect.origin.y + aRect.size.height;
  if (flipped) {
    return aPoint.y < v6 && aPoint.y >= aRect.origin.y;
  }
  else {
    return aPoint.y <= v6 && aPoint.y > aRect.origin.y;
  }
}

BOOL NSContainsRect(NSRect aRect, NSRect bRect)
{
  BOOL result = 0;
  if (aRect.size.width > 0.0
    && aRect.size.height > 0.0
    && bRect.size.width > 0.0
    && bRect.size.height > 0.0
    && aRect.origin.x <= bRect.origin.x
    && aRect.origin.y <= bRect.origin.y)
  {
    return aRect.origin.x + aRect.size.width >= bRect.origin.x + bRect.size.width
        && aRect.origin.y + aRect.size.height >= bRect.origin.y + bRect.size.height;
  }
  return result;
}

BOOL NSEdgeInsetsEqual(NSEdgeInsets aInsets, NSEdgeInsets bInsets)
{
  return aInsets.top == bInsets.top
      && aInsets.left == bInsets.left
      && aInsets.bottom == bInsets.bottom
      && aInsets.right == bInsets.right;
}

NSString *__cdecl NSStringFromPoint(NSPoint aPoint)
{
  return +[NSString stringWithFormat:@"{%.*g, %.*g}", 17, *(void *)&aPoint.x, 17, *(void *)&aPoint.y];
}

NSPoint NSPointFromString(NSString *aString)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  double v3 = 0.0;
  double v4 = 0.0;
  parseFloats(aString, 2, (uint64_t)&v3);
  double v1 = v3;
  double v2 = v4;
  result.double y = v2;
  result.double x = v1;
  return result;
}

void sub_181FCF470(_Unwind_Exception *a1)
{
}

void sub_181FCF490(void *a1)
{
}

void sub_181FCF7B4(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void sub_181FCFF6C(_Unwind_Exception *exception_object)
{
}

void raiseError(uint64_t a1, const char *a2)
{
  id v3 = objc_alloc(MEMORY[0x1E4F1CA00]);
  Name = sel_getName(a2);
  uint64_t v5 = (void *)[v3 initWithName:@"NSHashTableAbstractImplementationError", +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"abstract method %s called directly on class %@", Name, objc_opt_class()), 0 reason userInfo];
  objc_exception_throw(v5);
}

void sub_181FD06F0(_Unwind_Exception *exception_object)
{
}

void sub_181FD1890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_181FD19DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void NSFreeHashTable(NSHashTable *table)
{
  if (table)
  {
  }
  else
  {
    double v2 = (NSHashTable *)table;
    NSLog((NSString *)@"%s: hash table argument is NULL", "void NSFreeHashTable(NSHashTable * _Nonnull)");
    table = v2;
  }
}

void NSResetHashTable(NSHashTable *table)
{
  if (!table) {
    NSLog((NSString *)@"%s: hash table argument is NULL", "void NSResetHashTable(NSHashTable * _Nonnull)");
  }

  [(NSHashTable *)table removeAllItems];
}

BOOL NSCompareHashTables(NSHashTable *table1, NSHashTable *table2)
{
  if (table1)
  {
    if (table2) {
      goto LABEL_3;
    }
  }
  else
  {
    NSLog((NSString *)@"%s: first hash table argument is NULL", "BOOL NSCompareHashTables(NSHashTable * _Nonnull, NSHashTable * _Nonnull)");
    if (table2) {
      goto LABEL_3;
    }
  }
  NSLog((NSString *)@"%s: second hash table argument is NULL", "BOOL NSCompareHashTables(NSHashTable * _Nonnull, NSHashTable * _Nonnull)");
LABEL_3:

  return [(NSHashTable *)table1 isEqual:table2];
}

NSHashTable *__cdecl NSCopyHashTableWithZone(NSHashTable *table, NSZone *zone)
{
  if (!table) {
    NSLog((NSString *)@"%s: hash table argument is NULL", zone, "NSHashTable * _Nonnull NSCopyHashTableWithZone(NSHashTable * _Nonnull, NSZone * _Nullable)");
  }

  return (NSHashTable *)[(NSHashTable *)table copy];
}

void NSHashInsertKnownAbsent(NSHashTable *table, const void *pointer)
{
  if (!table) {
    NSLog((NSString *)@"%s: hash table argument is NULL", "void NSHashInsertKnownAbsent(NSHashTable * _Nonnull, const void * _Nullable)");
  }

  [(NSHashTable *)table insertKnownAbsentItem:pointer];
}

NSHashEnumerator *__cdecl NSEnumerateHashTable(NSHashEnumerator *__return_ptr retstr, NSHashTable *table)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  if (!table) {
    NSLog((NSString *)@"%s: hash table argument is NULL", "NSHashEnumerator NSEnumerateHashTable(NSHashTable * _Nonnull)");
  }
  retstr->_puint64_t i = 0;
  retstr->_suint64_t i = 0;
  retstr->_bs = 0;
  NSUInteger v4 = [(NSHashTable *)table count];
  retstr->_puint64_t i = v4;
  retstr->_suint64_t i = 0;
  uint64_t v5 = malloc_type_calloc(v4, 8uLL, 0x80040B8603338uLL);
  retstr->_bs = v5;
  v7[0] = 0;
  NSPoint result = (NSHashEnumerator *)[(NSHashTable *)table getKeys:v5 count:v7];
  retstr->_puint64_t i = v7[0];
  return result;
}

void *__cdecl NSNextHashEnumeratorItem(NSHashEnumerator *enumerator)
{
  if (!enumerator) {
    NSLog((NSString *)@"%s: state argument is NULL", "void * _Nullable NSNextHashEnumeratorItem(NSHashEnumerator * _Nonnull)");
  }
  suint64_t i = enumerator->_si;
  NSPoint result = enumerator->_bs;
  if (enumerator->_pi <= si)
  {
    if (result)
    {
      free(result);
      NSPoint result = 0;
      enumerator->_bs = 0;
    }
  }
  else
  {
    NSPoint result = (void *)*((void *)result + si);
    enumerator->_suint64_t i = si + 1;
  }
  return result;
}

void NSEndHashTableEnumeration(NSHashEnumerator *enumerator)
{
  if (!enumerator) {
    NSLog((NSString *)@"%s: state argument is NULL", "void NSEndHashTableEnumeration(NSHashEnumerator * _Nonnull)");
  }
  enumerator->_suint64_t i = enumerator->_pi;
  free(enumerator->_bs);
  enumerator->_bs = 0;
}

NSString *__cdecl NSStringFromHashTable(NSHashTable *table)
{
  if (!table) {
    NSLog((NSString *)@"%s: hash table argument is NULL", "NSString * _Nonnull NSStringFromHashTable(NSHashTable * _Nonnull)");
  }

  return (NSString *)[(NSHashTable *)table description];
}

NSArray *__cdecl NSAllHashTableObjects(NSHashTable *table)
{
  if (!table) {
    NSLog((NSString *)@"%s: hash table argument is NULL", "NSArray * _Nonnull NSAllHashTableObjects(NSHashTable * _Nonnull)");
  }

  return [(NSHashTable *)table allObjects];
}

void freePointerHT(int a1, void *a2)
{
}

uint64_t hashPointerStructHT(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

BOOL isEqualPointerStructHT(uint64_t a1, void *a2, void *a3)
{
  return *a2 == *a3;
}

uint64_t hashObjectHT(uint64_t a1, void *a2)
{
  return [a2 hash];
}

uint64_t isEqualObjectHT(uint64_t a1, void *a2, void *a3)
{
  if (a2 == a3) {
    return 1;
  }
  else {
    return objc_msgSend(a2, "isEqual:");
  }
}

uint64_t releaseObjectHT()
{
  return MEMORY[0x1F41817F8]();
}

uint64_t describeObjectHT(uint64_t a1, void *a2)
{
  return [a2 description];
}

void _NSLexiconIterateFormsOfWord(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  char v36 = 0;
  (*(void (**)(uint64_t, void *, void *, char *))(a3 + 16))(a3, a1, &__block_literal_global_5, &v36);
  if (!v36)
  {
    v35[0] = 0;
    v35[1] = v35;
    v35[2] = 0x3052000000;
    v35[3] = __Block_byref_object_copy__5;
    v35[4] = __Block_byref_object_dispose__5;
    v35[5] = 0;
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 3221225472;
    char v30 = ___NSLexiconIterateFormsOfWord_block_invoke_6;
    unint64_t v31 = &unk_1E51F8460;
    uint64_t v33 = a2;
    uint64_t v34 = v35;
    double v32 = a1;
    v28[0] = 0;
    v28[1] = v28;
    v28[2] = 0x3052000000;
    v28[3] = __Block_byref_object_copy__5;
    v28[4] = __Block_byref_object_dispose__5;
    v28[5] = 0;
    v21[5] = 0;
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    uint64_t v23 = ___NSLexiconIterateFormsOfWord_block_invoke_2;
    uint64_t v24 = &unk_1E51F8460;
    uint64_t v26 = a2;
    unint64_t v27 = v28;
    uint64_t v25 = a1;
    v21[0] = 0;
    v21[1] = v21;
    v21[2] = 0x3052000000;
    v21[3] = __Block_byref_object_copy__5;
    v21[4] = __Block_byref_object_dispose__5;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    uint64_t v16 = ___NSLexiconIterateFormsOfWord_block_invoke_3;
    uint64_t v17 = &unk_1E51F8460;
    uint64_t v19 = a2;
    uint64_t v20 = v21;
    uint64_t v18 = a1;
    uint64_t v6 = [a1 lowercaseStringWithLocale:a2];
    *(void *)(v34[1] + 40) = v6;
    if ([a1 isEqual:*(void *)(v34[1] + 40)])
    {
      double v7 = v14;
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 3221225472;
      double v8 = ___NSLexiconIterateFormsOfWord_block_invoke_4;
    }
    else if ([a1 isEqual:v23((uint64_t)v22)])
    {
      double v7 = v13;
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      double v8 = ___NSLexiconIterateFormsOfWord_block_invoke_5;
    }
    else
    {
      if (![a1 isEqual:v16((uint64_t)v15)])
      {
LABEL_14:
        _Block_object_dispose(v21, 8);
        _Block_object_dispose(v28, 8);
        _Block_object_dispose(v35, 8);
        return;
      }
      double v7 = v12;
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      double v8 = ___NSLexiconIterateFormsOfWord_block_invoke_6;
    }
    void v7[2] = v8;
    v7[3] = &unk_1E51F8488;
    v7[4] = a2;
    if (([a1 isEqual:v30((uint64_t)v29)] & 1) != 0
      || (uint64_t v9 = v30((uint64_t)v29),
          (*(void (**)(uint64_t, uint64_t, void *, char *))(a3 + 16))(a3, v9, v7, &v36),
          !v36))
    {
      if (([a1 isEqual:v16((uint64_t)v15)] & 1) != 0
        || (uint64_t v10 = v16((uint64_t)v15),
            (*(void (**)(uint64_t, uint64_t, void *, char *))(a3 + 16))(a3, v10, v7, &v36),
            !v36))
      {
        if (([a1 isEqual:v23((uint64_t)v22)] & 1) == 0)
        {
          uint64_t v11 = v23((uint64_t)v22);
          (*(void (**)(uint64_t, uint64_t, void *, char *))(a3 + 16))(a3, v11, v7, &v36);
        }
      }
    }
    goto LABEL_14;
  }
}

void sub_181FD22E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
}

void sub_181FD2B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_181FD2CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _NSGetUnsignedInt2(void *a1)
{
  uint64_t v1 = (unsigned __int8 *)(*a1)++;
  int v2 = (char)*v1;
  uint64_t v3 = *v1;
  if (v2 < 0) {
    return (v3 - 128) + (_NSGetUnsignedInt2() << 7);
  }
  return v3;
}

id _NSGroupIndexesIntoSimpleRanges(uint64_t *a1, uint64_t a2)
{
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if (a2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      uint64_t v8 = *a1++;
      uint64_t v7 = v8;
      if (v6 + v5 == v8)
      {
        ++v6;
      }
      else
      {
        if (v6) {
          objc_msgSend(v4, "addObject:", +[NSValue valueWithRange:](NSValue, "valueWithRange:"));
        }
        uint64_t v6 = 1;
        uint64_t v5 = v7;
      }
      --a2;
    }
    while (a2);
    if (v6) {
      objc_msgSend(v4, "addObject:", +[NSValue valueWithRange:](NSValue, "valueWithRange:", v5));
    }
  }

  return v4;
}

uint64_t _bitfieldSetRangesCount(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    uint64_t v2 = ~result;
    NSPoint result = 1;
    unint64_t v3 = v1;
    while (1)
    {
      unint64_t v4 = (-1 << __clz(__rbit64(v3))) & v2;
      if (!v4) {
        break;
      }
      ++result;
      unint64_t v3 = (-1 << __clz(__rbit64(v4))) & v1;
      if (!v3) {
        return --result;
      }
    }
  }
  return result;
}

void sub_181FD7120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __NSIndexSetChunkIterate(void *a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t *a8)
{
  unint64_t v13 = a3;
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if ((a2 & 0x2000000000000000) != 0)
  {
    unint64_t v16 = atomic_load(a8);
    if (v16 != 0x7FFFFFFFFFFFFFFFLL)
    {
      BOOL v17 = v16 >= a3;
      BOOL v18 = v16 <= a4;
      if ((a2 & 2) == 0) {
        BOOL v18 = v17;
      }
      if (!v18) {
        return 0;
      }
    }
  }
  if ((a2 & 0x4000000000000000) != 0)
  {
    _CFAutoreleasePoolPush();
    char v44 = 0;
    if (a4 >= v13)
    {
      unint64_t v29 = a5 + a6;
      do
      {
        unint64_t v30 = [a1 rangeAtIndex:v13];
        if (v30 + v31 >= v29) {
          uint64_t v32 = a5 + a6;
        }
        else {
          uint64_t v32 = v30 + v31;
        }
        if (a5 > v30 || v30 >= v29)
        {
          uint64_t v33 = v32 - a5;
          if (a5 >= v30 + v31) {
            uint64_t v33 = 0;
          }
          if (v30 <= a5) {
            uint64_t v34 = v33;
          }
          else {
            uint64_t v34 = 0;
          }
          if (!v34) {
            goto LABEL_43;
          }
        }
        else if (v32 == v30)
        {
          goto LABEL_43;
        }
        __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a7);
LABEL_43:
        ++v13;
      }
      while (v13 <= a4);
    }
    return 0;
  }
  double v19 = MEMORY[0x1F4188790](a1);
  int v21 = (char *)v41 - v20;
  if (!objc_msgSend(a1, "__getContainmentVector:inRange:", (char *)v41 - v20, v13, a4 - v13 + 1, v19)) {
    return 0;
  }
  v41[2] = v41;
  uint64_t v42 = a8;
  v41[1] = _CFAutoreleasePoolPush();
  if (a4 - v13 == -1) {
    return 0;
  }
  unint64_t v22 = 0;
  unint64_t v23 = a4;
  while (1)
  {
    unint64_t v24 = v23 - v13;
    if ((a2 & 2) == 0) {
      unint64_t v24 = v22;
    }
    if (!v21[v24]) {
      goto LABEL_25;
    }
    if ((a2 & 2) != 0) {
      unint64_t v25 = v23;
    }
    else {
      unint64_t v25 = v13 + v22;
    }
    char v43 = 0;
    if ((a2 & 0x2000000000000000) == 0)
    {
      __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a7);
      if (v43) {
        goto LABEL_46;
      }
      goto LABEL_25;
    }
    if (__NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a7)) {
      break;
    }
    if (v43)
    {
LABEL_46:
      uint64_t v35 = 1;
      goto LABEL_54;
    }
    unint64_t v26 = atomic_load(v42);
    if (v26 != 0x7FFFFFFFFFFFFFFFLL)
    {
      BOOL v27 = v26 >= v13;
      BOOL v28 = v26 <= a4;
      if ((a2 & 2) == 0) {
        BOOL v28 = v27;
      }
      if (!v28)
      {
        uint64_t v35 = 0;
        goto LABEL_54;
      }
    }
LABEL_25:
    ++v22;
    if (v13 - 1 == --v23) {
      return 0;
    }
  }
  char v36 = v42;
  do
  {
    unint64_t v37 = atomic_load(v36);
    if (v37 != 0x7FFFFFFFFFFFFFFFLL)
    {
      BOOL v38 = v37 < v25;
      if ((a2 & 2) == 0) {
        BOOL v38 = v25 < v37;
      }
      if (!v38) {
        break;
      }
    }
    unint64_t v39 = v37;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)v36, &v39, v25, memory_order_relaxed, memory_order_relaxed);
  }
  while (v39 != v37);
  uint64_t v35 = 0;
LABEL_54:
  _CFAutoreleasePoolPop();
  return v35;
}

void sub_181FD832C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_181FD8500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _NSPerformInflectionsWithObserverAndInflectionRule(void *a1, NSInflectionRule *a2, uint64_t a3)
{
  v9[5] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = _NSInflectionObserver;
  id v7 = a1;
  _NSInflectionObserver = (uint64_t)a1;
  if (!a2 || +[NSInflectionRule automaticRule] == a2)
  {
    (*(void (**)(uint64_t))(a3 + 16))(a3);
  }
  else
  {
    uint64_t v8 = [[_NSAttributedStringGrammarInflection alloc] initWithInflectionRule:a2];
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    _OWORD v9[2] = ___NSPerformInflectionsWithObserverAndInflectionRule_block_invoke;
    v9[3] = &unk_1E51F8650;
    void v9[4] = a3;
    [(_NSAttributedStringGrammarInflection *)v8 _useInsteadOfUserInflectionInBlock:v9];
  }
  _NSInflectionObserver = v6;
}

void sub_181FDAB5C(_Unwind_Exception *a1)
{
}

NSString *_NSInflectionLanguageWithLensAndRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = (NSString *)(*(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t))(a1 + 16))(a1, @"NSLanguage", a2, a3);
  char v4 = _NSIsNSString();
  if (!v3 || (v4 & 1) == 0)
  {
    unint64_t v3 = [(NSArray *)[+[NSBundle mainBundle] preferredLocalizations] firstObject];
    if (!v3)
    {
      unint64_t v3 = [+[NSBundle mainBundle] developmentLocalization];
      if (!v3) {
        __assert_rtn("_NSInflectionLanguageWithLensAndRange", "NSAttributedString_Inflection.m", 135, "language");
      }
    }
  }
  return v3;
}

uint64_t _NSInflectionGrammarWithLensAndRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t))(a1 + 16))(a1, @"NSMorphology", a2, a3);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t))(a1 + 16))(a1, @"NSGrammar", a2, a3);
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      return v7;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_181FDC830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 72), 8);
  _Unwind_Resume(a1);
}

void sub_181FDCBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 72), 8);
  _Unwind_Resume(a1);
}

void sub_181FDCF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 72), 8);
  _Unwind_Resume(a1);
}

void sub_181FDD4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

uint64_t ___virtualizeURLKeysForAccessingFault_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = [a2 isEqualToString:*MEMORY[0x1E4F1C648]];
  uint64_t v7 = (void *)*MEMORY[0x1E4F1CDB8];
  if (result) {
    BOOL v8 = v7 == a2;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t v9 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    if (!v9)
    {
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(a1 + 32) mutableCopy];
      uint64_t v9 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    }
    return [v9 replaceObjectAtIndex:a3 withObject:v7];
  }
  return result;
}

uint64_t _NSGetVoidValueWithMethod(uint64_t a1, int a2, Method m)
{
  IMP Implementation = method_getImplementation(m);
  SEL Name = method_getName(m);
  ((void (*)(uint64_t, SEL))Implementation)(a1, Name);
  return 0;
}

id _NSGetCharValueWithMethod(uint64_t a1, uint64_t a2, objc_method *a3)
{
  id v5 = objc_allocWithZone((Class)NSNumber);
  IMP Implementation = method_getImplementation(a3);
  SEL Name = method_getName(a3);
  BOOL v8 = objc_msgSend(v5, "initWithChar:", ((uint64_t (*)(uint64_t, SEL))Implementation)(a1, Name));

  return v8;
}

id _NSGetUnsignedCharValueWithMethod(uint64_t a1, uint64_t a2, objc_method *a3)
{
  id v5 = objc_allocWithZone((Class)NSNumber);
  IMP Implementation = method_getImplementation(a3);
  SEL Name = method_getName(a3);
  BOOL v8 = objc_msgSend(v5, "initWithUnsignedChar:", ((uint64_t (*)(uint64_t, SEL))Implementation)(a1, Name));

  return v8;
}

id _NSGetLongValueWithMethod(uint64_t a1, uint64_t a2, objc_method *a3)
{
  id v5 = objc_allocWithZone((Class)NSNumber);
  IMP Implementation = method_getImplementation(a3);
  SEL Name = method_getName(a3);
  BOOL v8 = objc_msgSend(v5, "initWithLong:", ((uint64_t (*)(uint64_t, SEL))Implementation)(a1, Name));

  return v8;
}

id _NSGetUnsignedLongValueWithMethod(uint64_t a1, uint64_t a2, objc_method *a3)
{
  id v5 = objc_allocWithZone((Class)NSNumber);
  IMP Implementation = method_getImplementation(a3);
  SEL Name = method_getName(a3);
  BOOL v8 = objc_msgSend(v5, "initWithUnsignedLong:", ((uint64_t (*)(uint64_t, SEL))Implementation)(a1, Name));

  return v8;
}

id _NSGetShortValueWithMethod(uint64_t a1, uint64_t a2, objc_method *a3)
{
  id v5 = objc_allocWithZone((Class)NSNumber);
  IMP Implementation = method_getImplementation(a3);
  SEL Name = method_getName(a3);
  BOOL v8 = objc_msgSend(v5, "initWithShort:", ((uint64_t (*)(uint64_t, SEL))Implementation)(a1, Name));

  return v8;
}

NSValue *_NSGetRangeValueWithMethod(uint64_t a1, int a2, Method m)
{
  IMP Implementation = method_getImplementation(m);
  SEL Name = method_getName(m);
  uint64_t v8 = ((uint64_t (*)(uint64_t, SEL))Implementation)(a1, Name);

  return +[NSValue valueWithRange:](NSValue, "valueWithRange:", v8, v7);
}

id _NSGetObjectGetWeakValueInIvar(uint64_t a1, int a2, Ivar v)
{
  unint64_t v3 = (id *)(a1 + ivar_getOffset(v));

  return objc_loadWeak(v3);
}

id _NSGetObjectGetIvarValueInIvar(void *a1, int a2, Ivar a3)
{
  return object_getIvar(a1, a3);
}

id _NSGetCharValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  unint64_t v3 = (void *)[objc_allocWithZone((Class)NSNumber) initWithChar:*(char *)(a1 + ivar_getOffset(a3))];

  return v3;
}

id _NSGetUnsignedCharValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  unint64_t v3 = (void *)[objc_allocWithZone((Class)NSNumber) initWithUnsignedChar:*(unsigned __int8 *)(a1 + ivar_getOffset(a3))];

  return v3;
}

id _NSGetDoubleValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  unint64_t v3 = (void *)[objc_allocWithZone((Class)NSNumber) initWithDouble:*(double *)(a1 + ivar_getOffset(a3))];

  return v3;
}

id _NSGetFloatValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  id v5 = objc_allocWithZone((Class)NSNumber);
  LODWORD(v6) = *(_DWORD *)(a1 + ivar_getOffset(a3));
  uint64_t v7 = (void *)[v5 initWithFloat:v6];

  return v7;
}

id _NSGetIntValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  unint64_t v3 = (void *)[objc_allocWithZone((Class)NSNumber) initWithInt:*(unsigned int *)(a1 + ivar_getOffset(a3))];

  return v3;
}

id _NSGetUnsignedIntValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  unint64_t v3 = (void *)[objc_allocWithZone((Class)NSNumber) initWithUnsignedInt:*(unsigned int *)(a1 + ivar_getOffset(a3))];

  return v3;
}

id _NSGetLongValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  unint64_t v3 = (void *)[objc_allocWithZone((Class)NSNumber) initWithLong:*(void *)(a1 + ivar_getOffset(a3))];

  return v3;
}

id _NSGetUnsignedLongValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  unint64_t v3 = (void *)[objc_allocWithZone((Class)NSNumber) initWithUnsignedLong:*(void *)(a1 + ivar_getOffset(a3))];

  return v3;
}

id _NSGetLongLongValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  unint64_t v3 = (void *)[objc_allocWithZone((Class)NSNumber) initWithLongLong:*(void *)(a1 + ivar_getOffset(a3))];

  return v3;
}

id _NSGetUnsignedLongLongValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  unint64_t v3 = (void *)[objc_allocWithZone((Class)NSNumber) initWithUnsignedLongLong:*(void *)(a1 + ivar_getOffset(a3))];

  return v3;
}

id _NSGetShortValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  unint64_t v3 = (void *)[objc_allocWithZone((Class)NSNumber) initWithShort:*(__int16 *)(a1 + ivar_getOffset(a3))];

  return v3;
}

id _NSGetUnsignedShortValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  unint64_t v3 = (void *)[objc_allocWithZone((Class)NSNumber) initWithUnsignedShort:*(unsigned __int16 *)(a1 + ivar_getOffset(a3))];

  return v3;
}

NSValue *_NSGetPointValueInIvar(uint64_t a1, int a2, Ivar v)
{
  unint64_t v3 = (double *)(a1 + ivar_getOffset(v));
  double v4 = *v3;
  double v5 = v3[1];

  return +[NSValue valueWithPoint:](NSValue, "valueWithPoint:", v4, v5);
}

NSValue *_NSGetRangeValueInIvar(uint64_t a1, int a2, Ivar v)
{
  unint64_t v3 = (uint64_t *)(a1 + ivar_getOffset(v));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];

  return +[NSValue valueWithRange:](NSValue, "valueWithRange:", v4, v5);
}

NSValue *_NSGetRectValueInIvar(uint64_t a1, int a2, Ivar v)
{
  unint64_t v3 = (double *)(a1 + ivar_getOffset(v));
  double v4 = *v3;
  double v5 = v3[1];
  double v6 = v3[2];
  double v7 = v3[3];

  return +[NSValue valueWithRect:](NSValue, "valueWithRect:", v4, v5, v6, v7);
}

NSValue *_NSGetSizeValueInIvar(uint64_t a1, int a2, Ivar v)
{
  unint64_t v3 = (double *)(a1 + ivar_getOffset(v));
  double v4 = *v3;
  double v5 = v3[1];

  return +[NSValue valueWithSize:](NSValue, "valueWithSize:", v4, v5);
}

NSValue *_NSGetValueInIvar(uint64_t a1, int a2, Ivar v)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  TypeEncoding = ivar_getTypeEncoding(v);
  size_t v6 = strlen(TypeEncoding);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v7)
  {
    char v9 = 0;
    uint64_t v10 = 0;
    do
    {
      int v12 = *(unsigned __int8 *)TypeEncoding++;
      char v11 = v12;
      if (v12 == 34)
      {
        v9 ^= 1u;
      }
      else if (v9)
      {
        char v9 = 1;
      }
      else
      {
        char v9 = 0;
        v8[v10++] = v11;
      }
      --v7;
    }
    while (v7);
  }
  else
  {
    uint64_t v10 = 0;
  }
  v8[v10] = 0;
  return +[NSValue valueWithBytes:a1 + ivar_getOffset(v) objCType:v8];
}

uint64_t _NSSetCharValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (a3)
  {
    IMP Implementation = method_getImplementation(m);
    SEL Name = method_getName(m);
    uint64_t v9 = [a3 charValue];
    return ((uint64_t (*)(void *, SEL, uint64_t))Implementation)(a1, Name, v9);
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
}

uint64_t _NSSetUnsignedCharValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (a3)
  {
    IMP Implementation = method_getImplementation(m);
    SEL Name = method_getName(m);
    uint64_t v9 = [a3 unsignedCharValue];
    return ((uint64_t (*)(void *, SEL, uint64_t))Implementation)(a1, Name, v9);
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
}

uint64_t _NSSetDoubleValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (a3)
  {
    IMP Implementation = method_getImplementation(m);
    SEL Name = method_getName(m);
    [a3 doubleValue];
    return ((uint64_t (*)(void *, SEL))Implementation)(a1, Name);
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
}

uint64_t _NSSetUnsignedIntValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (a3)
  {
    IMP Implementation = method_getImplementation(m);
    SEL Name = method_getName(m);
    uint64_t v9 = [a3 unsignedIntValue];
    return ((uint64_t (*)(void *, SEL, uint64_t))Implementation)(a1, Name, v9);
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
}

uint64_t _NSSetLongValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (a3)
  {
    IMP Implementation = method_getImplementation(m);
    SEL Name = method_getName(m);
    uint64_t v9 = [a3 longValue];
    return ((uint64_t (*)(void *, SEL, uint64_t))Implementation)(a1, Name, v9);
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
}

uint64_t _NSSetUnsignedLongValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (a3)
  {
    IMP Implementation = method_getImplementation(m);
    SEL Name = method_getName(m);
    uint64_t v9 = [a3 unsignedLongValue];
    return ((uint64_t (*)(void *, SEL, uint64_t))Implementation)(a1, Name, v9);
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
}

uint64_t _NSSetShortValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (a3)
  {
    IMP Implementation = method_getImplementation(m);
    SEL Name = method_getName(m);
    uint64_t v9 = [a3 shortValue];
    return ((uint64_t (*)(void *, SEL, uint64_t))Implementation)(a1, Name, v9);
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
}

uint64_t _NSSetUnsignedShortValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (a3)
  {
    IMP Implementation = method_getImplementation(m);
    SEL Name = method_getName(m);
    uint64_t v9 = [a3 unsignedShortValue];
    return ((uint64_t (*)(void *, SEL, uint64_t))Implementation)(a1, Name, v9);
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
}

uint64_t _NSSetPointValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (a3)
  {
    IMP Implementation = method_getImplementation(m);
    SEL Name = method_getName(m);
    [a3 pointValue];
    return ((uint64_t (*)(void *, SEL))Implementation)(a1, Name);
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
}

uint64_t _NSSetRangeValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (a3)
  {
    IMP Implementation = method_getImplementation(m);
    SEL Name = method_getName(m);
    uint64_t v10 = [a3 rangeValue];
    return ((uint64_t (*)(void *, SEL, uint64_t, uint64_t))Implementation)(a1, Name, v10, v9);
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
}

uint64_t _NSSetRectValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (a3)
  {
    IMP Implementation = method_getImplementation(m);
    SEL Name = method_getName(m);
    [a3 rectValue];
    return ((uint64_t (*)(void *, SEL))Implementation)(a1, Name);
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
}

uint64_t _NSSetSizeValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (a3)
  {
    IMP Implementation = method_getImplementation(m);
    SEL Name = method_getName(m);
    [a3 sizeValue];
    return ((uint64_t (*)(void *, SEL))Implementation)(a1, Name);
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
}

id _NSSetObjectSetManualValueForKeyInIvar(uint64_t a1, int a2, void *a3, int a4, Ivar v)
{
  ptrdiff_t Offset = ivar_getOffset(v);
  id v8 = *(id *)(a1 + Offset);
  id result = a3;
  *(void *)(a1 + Offset) = result;
  return result;
}

id _NSSetObjectSetWeakValueForKeyInIvar(uint64_t a1, int a2, void *a3, int a4, Ivar v)
{
  size_t v6 = (id *)(a1 + ivar_getOffset(v));

  return objc_storeWeak(v6, a3);
}

ptrdiff_t _NSSetObjectSetAssignValueForKeyInIvar(uint64_t a1, int a2, uint64_t a3, int a4, Ivar v)
{
  ptrdiff_t result = ivar_getOffset(v);
  *(void *)(a1 + result) = a3;
  return result;
}

void _NSSetObjectSetIvarValueForKeyInIvar(void *a1, int a2, void *a3, int a4, Ivar ivar)
{
}

ptrdiff_t _NSSetCharValueForKeyInIvar(unsigned char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  if (a3)
  {
    char v7 = [a3 charValue];
    ptrdiff_t result = ivar_getOffset(a5);
    a1[result] = v7;
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
  return result;
}

ptrdiff_t _NSSetUnsignedCharValueForKeyInIvar(unsigned char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  if (a3)
  {
    char v7 = [a3 unsignedCharValue];
    ptrdiff_t result = ivar_getOffset(a5);
    a1[result] = v7;
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
  return result;
}

ptrdiff_t _NSSetFloatValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  if (a3)
  {
    [a3 floatValue];
    int v8 = v7;
    ptrdiff_t result = ivar_getOffset(a5);
    *(_DWORD *)&a1[result] = v8;
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
  return result;
}

ptrdiff_t _NSSetIntValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  if (a3)
  {
    int v7 = [a3 intValue];
    ptrdiff_t result = ivar_getOffset(a5);
    *(_DWORD *)&a1[result] = v7;
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
  return result;
}

ptrdiff_t _NSSetUnsignedIntValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  if (a3)
  {
    int v7 = [a3 unsignedIntValue];
    ptrdiff_t result = ivar_getOffset(a5);
    *(_DWORD *)&a1[result] = v7;
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
  return result;
}

ptrdiff_t _NSSetLongValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  if (a3)
  {
    uint64_t v7 = [a3 longValue];
    ptrdiff_t result = ivar_getOffset(a5);
    *(void *)&a1[result] = v7;
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
  return result;
}

ptrdiff_t _NSSetUnsignedLongValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  if (a3)
  {
    uint64_t v7 = [a3 unsignedLongValue];
    ptrdiff_t result = ivar_getOffset(a5);
    *(void *)&a1[result] = v7;
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
  return result;
}

ptrdiff_t _NSSetShortValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  if (a3)
  {
    __int16 v7 = [a3 shortValue];
    ptrdiff_t result = ivar_getOffset(a5);
    *(_WORD *)&a1[result] = v7;
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
  return result;
}

ptrdiff_t _NSSetUnsignedShortValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  if (a3)
  {
    __int16 v7 = [a3 unsignedShortValue];
    ptrdiff_t result = ivar_getOffset(a5);
    *(_WORD *)&a1[result] = v7;
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
  return result;
}

uint64_t _NSSetPointValueForKeyInIvar(char *a1, int a2, void *a3, uint64_t a4, Ivar v)
{
  if (a3)
  {
    size_t v6 = &a1[ivar_getOffset(v)];
    uint64_t result = [a3 pointValue];
    *(void *)size_t v6 = v8;
    *((void *)v6 + 1) = v9;
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
  return result;
}

uint64_t _NSSetRangeValueForKeyInIvar(char *a1, int a2, void *a3, uint64_t a4, Ivar v)
{
  if (a3)
  {
    size_t v6 = &a1[ivar_getOffset(v)];
    uint64_t result = [a3 rangeValue];
    *(void *)size_t v6 = result;
    *((void *)v6 + 1) = v8;
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
  return result;
}

uint64_t _NSSetRectValueForKeyInIvar(char *a1, int a2, void *a3, uint64_t a4, Ivar v)
{
  if (a3)
  {
    size_t v6 = &a1[ivar_getOffset(v)];
    uint64_t result = [a3 rectValue];
    *(void *)size_t v6 = v8;
    *((void *)v6 + 1) = v9;
    *((void *)v6 + 2) = v10;
    *((void *)v6 + 3) = v11;
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
  return result;
}

uint64_t _NSSetSizeValueForKeyInIvar(char *a1, int a2, void *a3, uint64_t a4, Ivar v)
{
  if (a3)
  {
    size_t v6 = &a1[ivar_getOffset(v)];
    uint64_t result = [a3 sizeValue];
    *(void *)size_t v6 = v8;
    *((void *)v6 + 1) = v9;
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
  return result;
}

uint64_t _NSSetValueInIvar(void *a1, int a2, void *a3, uint64_t a4, Ivar v)
{
  if (a3)
  {
    ptrdiff_t v6 = (ptrdiff_t)a1 + ivar_getOffset(v);
    return [a3 getValue:v6];
  }
  else
  {
    return [a1 setNilValueForKey:a4];
  }
}

void sub_181FDFF18(_Unwind_Exception *exception_object)
{
}

void sub_181FE00AC(_Unwind_Exception *exception_object)
{
}

void sub_181FE0240(_Unwind_Exception *exception_object)
{
}

id _NSKeyValuePrimitiveGetterForClassAndKey(const void *(__cdecl *a1)(CFAllocatorRef, const void *), const void *a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  CFSetRef v6 = (const __CFSet *)qword_1EB1ED228;
  if (!qword_1EB1ED228)
  {
    long long v7 = *(_OWORD *)(MEMORY[0x1E4F1D548] + 16);
    *(_OWORD *)&v11.version = *MEMORY[0x1E4F1D548];
    *(_OWORD *)&v11.release = v7;
    v11.equal = (CFSetEqualCallBack)NSKeyValueAccessorIsEqual;
    v11.hash = (CFSetHashCallBack)NSKeyValueAccessorHash;
    CFSetRef v6 = CFSetCreateMutable(0, 0, &v11);
    qword_1EB1ED228 = (uint64_t)v6;
  }
  v11.version = 0;
  v11.retain = a1;
  *(_OWORD *)&v11.release = (unint64_t)a2;
  if (a2)
  {
    CFHashCode v8 = CFHash(a2);
    CFSetRef v6 = (const __CFSet *)qword_1EB1ED228;
  }
  else
  {
    CFHashCode v8 = 0;
  }
  v11.copyDescription = (CFSetCopyDescriptionCallBack)(v8 ^ (unint64_t)a1);
  id Value = (id)CFSetGetValue(v6, &v11);
  if (!Value)
  {
    id Value = objc_msgSend(a3, sel__createValuePrimitiveGetterWithContainerClassID_key_, a1, a2, *(_OWORD *)&v11.version, v11.release);
    CFSetAddValue((CFMutableSetRef)qword_1EB1ED228, Value);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  return Value;
}

void sub_181FE2254(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

id _NSKeyValuePrimitiveSetterForClassAndKey(const void *(__cdecl *a1)(CFAllocatorRef, const void *), const void *a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  CFSetRef v6 = (const __CFSet *)qword_1EB1ED230;
  if (!qword_1EB1ED230)
  {
    long long v7 = *(_OWORD *)(MEMORY[0x1E4F1D548] + 16);
    *(_OWORD *)&v11.version = *MEMORY[0x1E4F1D548];
    *(_OWORD *)&v11.release = v7;
    v11.equal = (CFSetEqualCallBack)NSKeyValueAccessorIsEqual;
    v11.hash = (CFSetHashCallBack)NSKeyValueAccessorHash;
    CFSetRef v6 = CFSetCreateMutable(0, 0, &v11);
    qword_1EB1ED230 = (uint64_t)v6;
  }
  v11.version = 0;
  v11.retain = a1;
  *(_OWORD *)&v11.release = (unint64_t)a2;
  if (a2)
  {
    CFHashCode v8 = CFHash(a2);
    CFSetRef v6 = (const __CFSet *)qword_1EB1ED230;
  }
  else
  {
    CFHashCode v8 = 0;
  }
  v11.copyDescription = (CFSetCopyDescriptionCallBack)(v8 ^ (unint64_t)a1);
  id Value = (id)CFSetGetValue(v6, &v11);
  if (!Value)
  {
    id Value = objc_msgSend(a3, sel__createValuePrimitiveSetterWithContainerClassID_key_, a1, a2, *(_OWORD *)&v11.version, v11.release);
    CFSetAddValue((CFMutableSetRef)qword_1EB1ED230, Value);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  return Value;
}

void sub_181FE23D8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void _NSKeyValueInvalidateAllCachesForContainerAndKey(uint64_t a1, const void *a2)
{
  v8[7] = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  v7[0] = 0;
  v7[1] = a1;
  void v7[2] = a2;
  if (a2) {
    CFHashCode v4 = CFHash(a2);
  }
  else {
    CFHashCode v4 = 0;
  }
  uint64_t v5 = 0;
  v7[3] = v4 ^ a1;
  v8[0] = _MergedGlobals_98;
  v8[1] = NSKeyValueCachedSetters;
  v8[2] = NSKeyValueCachedMutableArrayGetters;
  _OWORD v8[3] = NSKeyValueCachedMutableOrderedSetGetters;
  v8[4] = NSKeyValueCachedMutableSetGetters;
  v8[5] = qword_1EB1ED228;
  v8[6] = qword_1EB1ED230;
  do
  {
    CFSetRef v6 = (__CFSet *)v8[v5];
    if (v6) {
      CFSetRemoveValue(v6, v7);
    }
    ++v5;
  }
  while (v5 != 7);
  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
}

uint64_t _NSSetValueAndNotifyForKeyInIvar(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void *, void, uint64_t, uint64_t, uint64_t))
{
  [a1 willChangeValueForKey:a4];
  a6(a1, 0, a3, a4, a5);

  return [a1 didChangeValueForKey:a4];
}

uint64_t _NSSetValueAndNotifyForUndefinedKey(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *, uint64_t, uint64_t, uint64_t))
{
  [a1 willChangeValueForKey:a4];
  a5(a1, a2, a3, a4);

  return [a1 didChangeValueForKey:a4];
}

void NSKVODeallocateBreak(uint64_t a1)
{
  if (!a1) {
    NSLog((NSString *)@" ", v1, v2);
  }
}

uint64_t NSKVOIsAutonotifying()
{
  return 1;
}

void NSKVOInsertObjectAtIndexAndNotify(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  Class Class = object_getClass(a1);
  IndexedIvars = (Class *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  id v10 = (id)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  uint64_t v9 = [[NSIndexSet alloc] initWithIndex:a4];
  [a1 willChange:2 valuesAtIndexes:v9 forKey:v10];
  class_getInstanceMethod(*IndexedIvars, (SEL)a2);
  method_invoke();
  [a1 didChange:2 valuesAtIndexes:v9 forKey:v10];
}

void NSKVOInsertObjectsAtIndexesAndNotify(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  Class Class = object_getClass(a1);
  IndexedIvars = (Class *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  id v11 = (id)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  [a1 willChange:2 valuesAtIndexes:a4 forKey:v11];
  MethodIMP Implementation = class_getMethodImplementation(*IndexedIvars, (SEL)a2);
  ((void (*)(void *, const void *, uint64_t, uint64_t))MethodImplementation)(a1, a2, a3, a4);
  [a1 didChange:2 valuesAtIndexes:a4 forKey:v11];
}

void NSKVORemoveObjectAtIndexAndNotify(void *a1, const void *a2, uint64_t a3)
{
  Class Class = object_getClass(a1);
  IndexedIvars = (Class *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  id v9 = (id)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  CFHashCode v8 = [[NSIndexSet alloc] initWithIndex:a3];
  [a1 willChange:3 valuesAtIndexes:v8 forKey:v9];
  class_getInstanceMethod(*IndexedIvars, (SEL)a2);
  method_invoke();
  [a1 didChange:3 valuesAtIndexes:v8 forKey:v9];
}

void NSKVORemoveObjectsAtIndexesAndNotify(void *a1, const void *a2, uint64_t a3)
{
  Class Class = object_getClass(a1);
  IndexedIvars = (Class *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  id v9 = (id)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  [a1 willChange:3 valuesAtIndexes:a3 forKey:v9];
  MethodIMP Implementation = class_getMethodImplementation(*IndexedIvars, (SEL)a2);
  ((void (*)(void *, const void *, uint64_t))MethodImplementation)(a1, a2, a3);
  [a1 didChange:3 valuesAtIndexes:a3 forKey:v9];
}

void NSKVOReplaceObjectAtIndexAndNotify(void *a1, const void *a2, uint64_t a3)
{
  Class Class = object_getClass(a1);
  IndexedIvars = (Class *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  id v9 = (id)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  CFHashCode v8 = [[NSIndexSet alloc] initWithIndex:a3];
  [a1 willChange:4 valuesAtIndexes:v8 forKey:v9];
  class_getInstanceMethod(*IndexedIvars, (SEL)a2);
  method_invoke();
  [a1 didChange:4 valuesAtIndexes:v8 forKey:v9];
}

void NSKVOReplaceObjectsAtIndexesAndNotify(void *a1, const void *a2, uint64_t a3)
{
  Class Class = object_getClass(a1);
  IndexedIvars = (Class *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  id v8 = (id)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  [a1 willChange:4 valuesAtIndexes:a3 forKey:v8];
  class_getInstanceMethod(*IndexedIvars, (SEL)a2);
  method_invoke();
  [a1 didChange:4 valuesAtIndexes:a3 forKey:v8];
}

void NSKVOAddObjectAndNotify(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a3;
  Class Class = object_getClass(a1);
  IndexedIvars = (Class *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  long long v7 = objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0, v9, v10);
  os_unfair_recursive_lock_unlock();
  id v8 = (void *)[objc_alloc(MEMORY[0x1E4F1CAD0]) initWithObjects:&v9 count:1];
  [a1 willChangeValueForKey:v7 withSetMutation:1 usingObjects:v8];
  class_getInstanceMethod(*IndexedIvars, (SEL)a2);
  method_invoke();
  [a1 didChangeValueForKey:v7 withSetMutation:1 usingObjects:v8];
}

void NSKVOIntersectSetAndNotify(void *a1, const void *a2, uint64_t a3)
{
  Class Class = object_getClass(a1);
  IndexedIvars = (Class *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  id v8 = (id)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  [a1 willChangeValueForKey:v8 withSetMutation:3 usingObjects:a3];
  class_getInstanceMethod(*IndexedIvars, (SEL)a2);
  method_invoke();
  [a1 didChangeValueForKey:v8 withSetMutation:3 usingObjects:a3];
}

void NSKVOMinusSetAndNotify(void *a1, const void *a2, uint64_t a3)
{
  Class Class = object_getClass(a1);
  IndexedIvars = (Class *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  id v8 = (id)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  [a1 willChangeValueForKey:v8 withSetMutation:2 usingObjects:a3];
  class_getInstanceMethod(*IndexedIvars, (SEL)a2);
  method_invoke();
  [a1 didChangeValueForKey:v8 withSetMutation:2 usingObjects:a3];
}

void NSKVORemoveObjectAndNotify(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a3;
  Class Class = object_getClass(a1);
  IndexedIvars = (Class *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  long long v7 = objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0, v9, v10);
  os_unfair_recursive_lock_unlock();
  id v8 = (void *)[objc_alloc(MEMORY[0x1E4F1CAD0]) initWithObjects:&v9 count:1];
  [a1 willChangeValueForKey:v7 withSetMutation:2 usingObjects:v8];
  class_getInstanceMethod(*IndexedIvars, (SEL)a2);
  method_invoke();
  [a1 didChangeValueForKey:v7 withSetMutation:2 usingObjects:v8];
}

void NSKVOUnionSetAndNotify(void *a1, const void *a2, uint64_t a3)
{
  Class Class = object_getClass(a1);
  IndexedIvars = (Class *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  id v8 = (id)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  [a1 willChangeValueForKey:v8 withSetMutation:1 usingObjects:a3];
  class_getInstanceMethod(*IndexedIvars, (SEL)a2);
  method_invoke();
  [a1 didChangeValueForKey:v8 withSetMutation:1 usingObjects:a3];
}

void _NSSetCharValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  Class Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    id v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    uint64_t v9 = objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((unsigned char *)v8 + 40))
    {
      [a1 willChangeValueForKey:v9];
      MethodIMP Implementation = class_getMethodImplementation(*v8, (SEL)a2);
      ((void (*)(void *, const void *, uint64_t))MethodImplementation)(a1, a2, a3);
      [a1 didChangeValueForKey:v9];
    }
    else
    {
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      void v11[2] = ___NSSetCharValueAndNotify_block_invoke;
      _OWORD v11[3] = &unk_1E51F8BD0;
      v11[5] = v8;
      v11[6] = a2;
      v11[4] = a1;
      char v12 = a3;
      [a1 _changeValueForKey:v9 key:0 key:0 usingBlock:v11];
    }
  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }
}

void _NSSetUnsignedCharValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  Class Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    id v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    uint64_t v9 = objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((unsigned char *)v8 + 40))
    {
      [a1 willChangeValueForKey:v9];
      MethodIMP Implementation = class_getMethodImplementation(*v8, (SEL)a2);
      ((void (*)(void *, const void *, uint64_t))MethodImplementation)(a1, a2, a3);
      [a1 didChangeValueForKey:v9];
    }
    else
    {
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      void v11[2] = ___NSSetUnsignedCharValueAndNotify_block_invoke;
      _OWORD v11[3] = &unk_1E51F8BD0;
      v11[5] = v8;
      v11[6] = a2;
      v11[4] = a1;
      char v12 = a3;
      [a1 _changeValueForKey:v9 key:0 key:0 usingBlock:v11];
    }
  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }
}

void _NSSetIntValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  Class Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    id v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    uint64_t v9 = objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((unsigned char *)v8 + 40))
    {
      [a1 willChangeValueForKey:v9];
      MethodIMP Implementation = class_getMethodImplementation(*v8, (SEL)a2);
      ((void (*)(void *, const void *, uint64_t))MethodImplementation)(a1, a2, a3);
      [a1 didChangeValueForKey:v9];
    }
    else
    {
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      void v11[2] = ___NSSetIntValueAndNotify_block_invoke;
      _OWORD v11[3] = &unk_1E51F7A90;
      v11[5] = v8;
      v11[6] = a2;
      v11[4] = a1;
      int v12 = a3;
      [a1 _changeValueForKey:v9 key:0 key:0 usingBlock:v11];
    }
  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }
}

void _NSSetUnsignedIntValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  Class Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    id v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    uint64_t v9 = objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((unsigned char *)v8 + 40))
    {
      [a1 willChangeValueForKey:v9];
      MethodIMP Implementation = class_getMethodImplementation(*v8, (SEL)a2);
      ((void (*)(void *, const void *, uint64_t))MethodImplementation)(a1, a2, a3);
      [a1 didChangeValueForKey:v9];
    }
    else
    {
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      void v11[2] = ___NSSetUnsignedIntValueAndNotify_block_invoke;
      _OWORD v11[3] = &unk_1E51F7A90;
      v11[5] = v8;
      v11[6] = a2;
      v11[4] = a1;
      int v12 = a3;
      [a1 _changeValueForKey:v9 key:0 key:0 usingBlock:v11];
    }
  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }
}

void _NSSetLongValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  v11[8] = *MEMORY[0x1E4F143B8];
  Class Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    id v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    uint64_t v9 = objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((unsigned char *)v8 + 40))
    {
      [a1 willChangeValueForKey:v9];
      MethodIMP Implementation = class_getMethodImplementation(*v8, (SEL)a2);
      ((void (*)(void *, const void *, uint64_t))MethodImplementation)(a1, a2, a3);
      [a1 didChangeValueForKey:v9];
    }
    else
    {
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      void v11[2] = ___NSSetLongValueAndNotify_block_invoke;
      _OWORD v11[3] = &unk_1E51F8BF8;
      v11[4] = a1;
      v11[5] = v8;
      v11[6] = a2;
      void v11[7] = a3;
      [a1 _changeValueForKey:v9 key:0 key:0 usingBlock:v11];
    }
  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }
}

void _NSSetUnsignedLongValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  v11[8] = *MEMORY[0x1E4F143B8];
  Class Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    id v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    uint64_t v9 = objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((unsigned char *)v8 + 40))
    {
      [a1 willChangeValueForKey:v9];
      MethodIMP Implementation = class_getMethodImplementation(*v8, (SEL)a2);
      ((void (*)(void *, const void *, uint64_t))MethodImplementation)(a1, a2, a3);
      [a1 didChangeValueForKey:v9];
    }
    else
    {
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      void v11[2] = ___NSSetUnsignedLongValueAndNotify_block_invoke;
      _OWORD v11[3] = &unk_1E51F8BF8;
      v11[4] = a1;
      v11[5] = v8;
      v11[6] = a2;
      void v11[7] = a3;
      [a1 _changeValueForKey:v9 key:0 key:0 usingBlock:v11];
    }
  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }
}

void _NSSetShortValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  Class Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    id v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    uint64_t v9 = objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((unsigned char *)v8 + 40))
    {
      [a1 willChangeValueForKey:v9];
      MethodIMP Implementation = class_getMethodImplementation(*v8, (SEL)a2);
      ((void (*)(void *, const void *, uint64_t))MethodImplementation)(a1, a2, a3);
      [a1 didChangeValueForKey:v9];
    }
    else
    {
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      void v11[2] = ___NSSetShortValueAndNotify_block_invoke;
      _OWORD v11[3] = &unk_1E51F8C20;
      v11[5] = v8;
      v11[6] = a2;
      v11[4] = a1;
      __int16 v12 = a3;
      [a1 _changeValueForKey:v9 key:0 key:0 usingBlock:v11];
    }
  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }
}

void _NSSetUnsignedShortValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  Class Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    id v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    uint64_t v9 = objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((unsigned char *)v8 + 40))
    {
      [a1 willChangeValueForKey:v9];
      MethodIMP Implementation = class_getMethodImplementation(*v8, (SEL)a2);
      ((void (*)(void *, const void *, uint64_t))MethodImplementation)(a1, a2, a3);
      [a1 didChangeValueForKey:v9];
    }
    else
    {
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      void v11[2] = ___NSSetUnsignedShortValueAndNotify_block_invoke;
      _OWORD v11[3] = &unk_1E51F8C20;
      v11[5] = v8;
      v11[6] = a2;
      v11[4] = a1;
      __int16 v12 = a3;
      [a1 _changeValueForKey:v9 key:0 key:0 usingBlock:v11];
    }
  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }
}

void _NSSetRangeValueAndNotify(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  v13[9] = *MEMORY[0x1E4F143B8];
  Class Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    uint64_t v10 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    id v11 = objc_msgSend((id)CFDictionaryGetValue(v10[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((unsigned char *)v10 + 40))
    {
      [a1 willChangeValueForKey:v11];
      MethodIMP Implementation = class_getMethodImplementation(*v10, (SEL)a2);
      ((void (*)(void *, const void *, uint64_t, uint64_t))MethodImplementation)(a1, a2, a3, a4);
      [a1 didChangeValueForKey:v11];
    }
    else
    {
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      v13[2] = ___NSSetRangeValueAndNotify_block_invoke;
      _OWORD v13[3] = &unk_1E51F8C48;
      uint64_t v13[4] = a1;
      void v13[5] = v10;
      v13[6] = a2;
      v13[7] = a3;
      v13[8] = a4;
      [a1 _changeValueForKey:v11 key:0 key:0 usingBlock:v13];
    }
  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3, a4);
  }
}

void sub_181FEAF00(void *a1)
{
}

void sub_181FEAF24(_Unwind_Exception *a1)
{
}

CFMutableDictionaryRef _NSKeyValueCreatePendingChangeNotificationArray()
{
  return CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], 0, &NSKVOPendingNotificationStackIdentifierCallbacks, MEMORY[0x1E4F1D540]);
}

uint64_t _NSKVOIsObservableBeingDeallocated(const void *a1)
{
  uint64_t result = _CFGetTSD();
  if (result)
  {
    CFArrayRef v3 = *(const __CFArray **)(result + 80);
    if (v3)
    {
      v4.length = CFArrayGetCount(*(CFArrayRef *)(result + 80));
      v4.location = 0;
      return CFArrayContainsValue(v3, v4, a1) != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t __NSKeyValueDidChangeByOrderedToManyMutation_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8 * a2);
  uint64_t result = [*(id *)(a1 + 32) objectAtIndex:a2];
  if (v4 == result)
  {
    CFSetRef v6 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    if (!v6)
    {
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = [*(id *)(a1 + 40) mutableCopy];
      CFSetRef v6 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    }
    return [v6 removeIndex:a2];
  }
  return result;
}

void sub_181FEBE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t ___isInternal_block_invoke()
{
  uint64_t result = os_variant_has_internal_diagnostics();
  _MergedGlobals_104 = result;
  return result;
}

uint64_t BKSProcessAssertionFunction()
{
  return classBKSProcessAssertion;
}

void sub_181FEE060(_Unwind_Exception *a1)
{
}

void sub_181FEE080(void *a1)
{
}

void sub_181FEE440(_Unwind_Exception *a1)
{
}

void sub_181FEE460(void *a1)
{
}

void sub_181FEE830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_181FEE934(_Unwind_Exception *a1)
{
}

void sub_181FEE9F8(_Unwind_Exception *a1)
{
}

void sub_181FEEA18(void *a1)
{
}

uint64_t _decodeObjectXML(uint64_t a1, const void *a2, void *a3)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 80));
  ValueAtIndedouble x = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), Count - 1);
  if (CFGetTypeID(ValueAtIndex) == 19)
  {
    id v8 = (void *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
    id v9 = v8;
    CFArrayRemoveValueAtIndex(ValueAtIndex, 0);
    if (!v8) {
      goto LABEL_11;
    }
  }
  else
  {
    id v8 = (void *)CFDictionaryGetValue(ValueAtIndex, a2);
    id v10 = v8;
    if (!v8) {
      goto LABEL_11;
    }
  }
  CFTypeID v11 = CFGetTypeID(v8);
  if (v11 != _CFKeyedArchiverUIDGetTypeID())
  {
    uint64_t v58 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
    uint64_t v14 = @"%@: value is not a reference as expected";
    goto LABEL_10;
  }
  uint64_t result = _CFKeyedArchiverUIDGetValue();
  if (!result)
  {
LABEL_12:
    *a3 = 0;
    return result;
  }
  unsigned int v13 = result;
  if (_decodeObjectReference(a1, 100, (uint64_t)a2, result, a3)) {
    return *a3 != 0;
  }
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 88)) <= v13)
  {
LABEL_51:
    uint64_t v58 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
    uint64_t v14 = @"%@: invalid object reference";
    goto LABEL_10;
  }
  unint64_t v15 = v13;
  uint64_t v16 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v13);
  if (!v16)
  {
    uint64_t v58 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
    uint64_t v14 = @"%@: wrong object format";
    goto LABEL_10;
  }
  BOOL v17 = v16;
  if (CFGetTypeID(v16) == 7 && CFEqual(@"$null", v17))
  {
    *a3 = 0;
    return 1;
  }
  if (CFGetTypeID(v17) != 7 && CFGetTypeID(v17) != 21 && CFGetTypeID(v17) != 22 && CFGetTypeID(v17) != 20)
  {
    if (CFGetTypeID(v17) != 18)
    {
      uint64_t v58 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
      uint64_t v14 = @"%@: wrong object format format";
      goto LABEL_10;
    }
    uint64_t v20 = CFDictionaryGetValue((CFDictionaryRef)v17, @"$class");
    if (!v20 || (CFTypeID v21 = CFGetTypeID(v20), v21 != _CFKeyedArchiverUIDGetTypeID()))
    {
      uint64_t v58 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
      uint64_t v14 = @"%@: missing class information for object or wrong format";
      goto LABEL_10;
    }
    unsigned int v22 = _CFKeyedArchiverUIDGetValue();
    if (!v22)
    {
      uint64_t v58 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
      uint64_t v14 = @"%@: null class for object";
      goto LABEL_10;
    }
    unsigned int v23 = v22;
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 88)) > v22)
    {
      CFDictionaryRef v24 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v23);
      if (v24 && (CFDictionaryRef v25 = v24, CFGetTypeID(v24) == 18))
      {
        unint64_t v26 = (NSString *)CFDictionaryGetValue(v25, @"$classname");
        if (v26)
        {
          BOOL v27 = v26;
          if ((_NSIsNSString() & 1) == 0)
          {
            objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", @"NSInvalidUnarchiveOperationException", 4864, @"%@: cannot decode object of class (%@) for key (%@); the archive appears to be corrupt (non-string class name)",
              _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_),
              v27,
              a2);
            goto LABEL_11;
          }
          id obj = (id)CFDictionaryGetValue(v25, @"$classhints");
          int64_t v64 = CFDictionaryGetValue(v25, @"$classes");
          if (!obj || _NSIsNSArray()) && (!v64 || (_NSIsNSArray()))
          {
            BOOL v28 = (objc_class *)[(id)a1 classForClassName:v27];
            if (v28
              || (BOOL v28 = (objc_class *)[(id)objc_opt_class() classForClassName:v27]) != 0
              || (BOOL v28 = NSClassFromString(v27)) != 0)
            {
LABEL_44:
              if (([*(id *)(a1 + 120) classNameAllowed:v28] & 1) == 0)
              {
                unint64_t v30 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
                objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", *MEMORY[0x1E4F1C3C8], 4864, @"%@: data to unarchive contains class (%@) which has not been allowed", v30, NSStringFromClass(v28));
                goto LABEL_61;
              }
              goto LABEL_45;
            }
            long long v69 = 0u;
            long long v70 = 0u;
            long long v67 = 0u;
            long long v68 = 0u;
            uint64_t v62 = [obj countByEnumeratingWithState:&v67 objects:value count:16];
            if (v62)
            {
              uint64_t v61 = *(void *)v68;
              do
              {
                for (uint64_t i = 0; i != v62; ++i)
                {
                  if (*(void *)v68 != v61) {
                    objc_enumerationMutation(obj);
                  }
                  BOOL v28 = NSClassFromString(*(NSString **)(*((void *)&v67 + 1) + 8 * i));
                  if (v28) {
                    goto LABEL_44;
                  }
                }
                uint64_t v62 = [obj countByEnumeratingWithState:&v67 objects:value count:16];
              }
              while (v62);
            }
            if (*(void *)(a1 + 8) && (objc_opt_respondsToSelector() & 1) != 0)
            {
              BOOL v28 = (objc_class *)[*(id *)(a1 + 8) unarchiver:a1 cannotDecodeObjectOfClassName:v27 originalClasses:v64];
              if (v28)
              {
LABEL_45:
                if (!_coderValidateClassValidToMessageForUnarchiving(v28))
                {
                  uint64_t v31 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
                  objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", *MEMORY[0x1E4F1C3C8], 4864, @"%@: unexpected non-objectlike class (%@)", v31, NSStringFromClass(v28));
                  goto LABEL_61;
                }
              }
            }
            else
            {
              BOOL v28 = 0;
            }
            unint64_t v29 = (objc_class *)[(objc_class *)v28 classForKeyedUnarchiver];
            if (v29)
            {
              if ([(id)a1 requiresSecureCoding])
              {
                if (a2)
                {
                  if ([(id)a1 validateAllowedClass:v29 forKey:a2]) {
                    goto LABEL_75;
                  }
LABEL_11:
                  uint64_t result = 0;
                  goto LABEL_12;
                }
                [(id)a1 validateClassSupportsSecureCoding:v29];
              }
LABEL_75:
              _NSCoderCheckPotentiallyMangledClassNameAndWarn((uint64_t)v29, 0);
              uint64_t v33 = *(void *)(a1 + 120);
              if (-[NSCoder _isPossibleNestedCollectionClass:](a1, v29) && *(unsigned char *)(v33 + 40))
              {
                if (*(unsigned char *)(v33 + 41))
                {
                  *(_WORD *)(v33 + 40) = 0;
                  objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", @"NSInvalidUnarchiveOperationException", 4864, @"%1$@: value for key (%2$@) contains too many nested (%3$@)s", _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_), a2, v27);
                  goto LABEL_11;
                }
                *(unsigned char *)(v33 + 41) = 1;
              }
              LOBYTE(v67) = 1;
              id v34 = coderAllocateClassForUnarchival((void *)a1, v29, &v67);
              if (!(_BYTE)v67) {
                goto LABEL_11;
              }
              uint64_t v35 = v34;
              int v65 = *(_DWORD *)(a1 + 64);
              *(_DWORD *)(a1 + 64) = 0;
              CFRetain(v17);
              CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 80), v17);
              CFTypeID v36 = CFGetTypeID(v17);
              unint64_t v37 = atomic_load((unint64_t *)(a1 + 16));
              uint64_t v38 = *(void *)(a1 + 136);
              if (v36 == 19)
              {
                if (v37 != v38) {
                  goto LABEL_109;
                }
                unint64_t v39 = atomic_load((unint64_t *)(a1 + 16));
                unint64_t v40 = v39 | 1;
              }
              else
              {
                if (v37 != v38) {
                  goto LABEL_109;
                }
                unint64_t v41 = atomic_load((unint64_t *)(a1 + 16));
                unint64_t v40 = v41 & 0xFFFFFFFFFFFFFFFELL;
              }
              atomic_store(v40, (unint64_t *)(a1 + 16));
              unint64_t v42 = atomic_load((unint64_t *)(a1 + 16));
              *(void *)(a1 + 136) = v42;
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), (const void *)v13, v35);
              char v43 = objc_msgSend((id)objc_msgSend(v35, "initWithCoder:", a1), "awakeAfterUsingCoder:", a1);
              *(_DWORD *)(*(void *)(a1 + 120) + 16) = v13;
              CFIndex v44 = CFArrayGetCount(*(CFArrayRef *)(a1 + 80));
              uint64_t v45 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), v44 - 1);
              CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 80), v44 - 1);
              CFRelease(v45);
              if (v44 < 2)
              {
LABEL_93:
                *(_DWORD *)(a1 + 64) = v65;
                if (v43)
                {
                  value[0] = v43;
                  CFDictionaryRef v54 = *(const __CFDictionary **)(a1 + 32);
                  if (v54 && CFDictionaryGetValueIfPresent(v54, v43, (const void **)value))
                  {
                    if (value[0] != v43)
                    {

                      id v55 = value[0];
                    }
                  }
                  else
                  {
                    id v56 = v43;
                    if (*(void *)(a1 + 8) && (objc_opt_respondsToSelector() & 1) != 0)
                    {
                      int64_t v57 = (void *)[*(id *)(a1 + 8) unarchiver:a1 didDecodeObject:v43];
                      value[0] = v57;
                    }
                    else
                    {
                      int64_t v57 = value[0];
                    }
                    if (v57) {
                      objc_msgSend((id)a1, "_replaceObject:withObject:", v43);
                    }
                    else {
                      value[0] = v43;
                    }
                  }
                  char v43 = value[0];
                  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), value[0], (const void *)v15);
                  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), (const void *)v15, v43);
                }
                CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 48), (const void *)v15);
                *a3 = v43;
                return 1;
              }
              uint64_t v46 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), v44 - 2);
              CFTypeID v47 = CFGetTypeID(v46);
              unint64_t v48 = atomic_load((unint64_t *)(a1 + 16));
              uint64_t v49 = *(void *)(a1 + 136);
              if (v47 == 19)
              {
                if (v48 == v49)
                {
                  unint64_t v50 = atomic_load((unint64_t *)(a1 + 16));
                  unint64_t v51 = v50 | 1;
LABEL_92:
                  atomic_store(v51, (unint64_t *)(a1 + 16));
                  unint64_t v53 = atomic_load((unint64_t *)(a1 + 16));
                  *(void *)(a1 + 136) = v53;
                  goto LABEL_93;
                }
              }
              else if (v48 == v49)
              {
                unint64_t v52 = atomic_load((unint64_t *)(a1 + 16));
                unint64_t v51 = v52 & 0xFFFFFFFFFFFFFFFELL;
                goto LABEL_92;
              }
LABEL_109:
              __NSPoisoned();
            }
LABEL_61:
            objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", @"NSInvalidUnarchiveOperationException", 4864, @"%1$@: cannot decode object of class (%2$@) for key (%3$@) because no class named \"%2$@\" was found; the class needs to be defined in source code or linked in from a library (ensure the class is part of the correct target). If the class was renamed, use setClassName:forClass: to add a class translation mapping to NSKeyedUnarchiver",
              _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_),
              v27,
              a2);
            goto LABEL_11;
          }
          uint64_t v58 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
          uint64_t v14 = @"%@: wrong class format";
        }
        else
        {
          uint64_t v58 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
          uint64_t v14 = @"%@: missing class name for class";
        }
      }
      else
      {
        uint64_t v58 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
        uint64_t v14 = @"%@: wrong class container format";
      }
LABEL_10:
      objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", @"NSArchiverArchiveInconsistency", 4864, v14, v58, v59, v60);
      goto LABEL_11;
    }
    goto LABEL_51;
  }
  unint64_t v18 = atomic_load((unint64_t *)(a1 + 16));
  if (v18 != *(void *)(a1 + 136)) {
    goto LABEL_109;
  }
  char v19 = atomic_load((unint64_t *)(a1 + 16));
  if ((v19 & 4) != 0
    && (-[NSKeyedUnarchiver _validatePropertyListClass:forKey:](a1, (void *)[v17 classForCoder], (uint64_t)a2) & 1) == 0)
  {
    goto LABEL_11;
  }
  *a3 = v17;
  return 1;
}

void sub_181FEFBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v17 + 48), v18);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

NSArray *__NSKeyedUnarchiverSecureUnarchivedArrayOfObjectsOfClasses(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = [MEMORY[0x1E4F1CAD0] setWithArray:a1];

  return +[NSKeyedUnarchiver unarchivedArrayOfObjectsOfClasses:v5 fromData:a2 error:a3];
}

NSDictionary *__NSKeyedUnarchiverSecureUnarchivedDictionaryOfKeysOfClassesObjectsOfClasses(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = [MEMORY[0x1E4F1CAD0] setWithArray:a1];
  uint64_t v8 = [MEMORY[0x1E4F1CAD0] setWithArray:a2];

  return +[NSKeyedUnarchiver unarchivedDictionaryWithKeysOfClasses:v7 objectsOfClasses:v8 fromData:a3 error:a4];
}

void YOU_HAVE_A_CYCLE_IN_YOUR_OBJECT_GRAPH__THIS_ISNT_A_FOUNDATION_BUG__SEE_ERROR_MESSAGE_()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = _NSOSLog();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_fault_impl(&dword_181795000, v0, OS_LOG_TYPE_FAULT, "Decoder with secure coding enabled is decoding a cycle. See rdar://105473537 for help\n", v1, 2u);
  }
}

uint64_t sub_181FF1824()
{
  return 0;
}

uint64_t initEXGetExtensionContextVendorClass()
{
  uint64_t v0 = (void *)ExtensionFoundationLibrary_frameworkLibrary;
  if (!ExtensionFoundationLibrary_frameworkLibrary)
  {
    uint64_t v0 = dlopen("/System/Library/Frameworks/ExtensionFoundation.framework/ExtensionFoundation", 2);
    ExtensionFoundationLibrary_frameworkLibrardouble y = (uint64_t)v0;
    if (!v0) {
      return 0;
    }
  }
  uint64_t v1 = (uint64_t (*)())dlsym(v0, "EXGetExtensionContextVendorClass");
  softLinkEXGetExtensionContextVendorClass Class = v1;
  if (!v1) {
    return 0;
  }

  return v1();
}

uint64_t initEXGetExtensionContextInternalClass()
{
  uint64_t v0 = (void *)ExtensionFoundationLibrary_frameworkLibrary;
  if (!ExtensionFoundationLibrary_frameworkLibrary)
  {
    uint64_t v0 = dlopen("/System/Library/Frameworks/ExtensionFoundation.framework/ExtensionFoundation", 2);
    ExtensionFoundationLibrary_frameworkLibrardouble y = (uint64_t)v0;
    if (!v0) {
      return 0;
    }
  }
  uint64_t v1 = (uint64_t (*)())dlsym(v0, "EXGetExtensionContextInternalClass");
  softLinkEXGetExtensionContextInternalClass Class = v1;
  if (!v1) {
    return 0;
  }

  return v1();
}

void _SetPreferredLanguages(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)[MEMORY[0x1E4F1CA48] array];
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v3 = [a1 countByEnumeratingWithState:&v20 objects:v19 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v21;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v21 != v5) {
          objc_enumerationMutation(a1);
        }
        uint64_t v7 = *(void **)(*((void *)&v20 + 1) + 8 * v6);
        if ((_NSIsNSString() & 1) == 0) {
          [+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler") handleFailureInFunction:+[NSString stringWithUTF8String:"void _SetPreferredLanguages(NSArray *)"], @"NSLocale.m", 254, @"Unexpected language identifier object type: %@", v7 file lineNumber description];
        }
        uint64_t v8 = _NormalizedLanguageIDFromString((uint64_t)v7);
        [v2 addObject:v8];
        if (([v7 isEqualToString:v8] & 1) == 0)
        {
          id v9 = _NSOSLog();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            unint64_t v18 = v7;
            _os_log_error_impl(&dword_181795000, v9, OS_LOG_TYPE_ERROR, "Warning: Language identifier is not in canonical form: %@", buf, 0xCu);
          }
        }
        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = [a1 countByEnumeratingWithState:&v20 objects:v19 count:16];
    }
    while (v4);
  }
  id v10 = (void *)_CFLocaleCopyPreferredLanguagesForCurrentUser();
  if (!v10 || (CFTypeID v11 = v10, v12 = [v10 isEqualToArray:v2], CFRelease(v11), (v12 & 1) == 0))
  {
    CFStringRef v13 = (const __CFString *)*MEMORY[0x1E4F1D3B8];
    CFStringRef v14 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
    CFStringRef v15 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
    CFPreferencesSetValue(@"AppleLanguages", v2, (CFStringRef)*MEMORY[0x1E4F1D3B8], (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
    CFPreferencesSynchronize(v13, v14, v15);
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, @"AppleLanguagePreferencesChangedNotification", 0, 0, 1u);
  }
}

uint64_t _NormalizedLanguageIDFromString(uint64_t a1)
{
  if (qword_1EB1ED3B8 != -1) {
    dispatch_once(&qword_1EB1ED3B8, &__block_literal_global_23);
  }
  uint64_t result = [(id)_MergedGlobals_106 objectForKey:a1];
  if (!result)
  {
    uint64_t v3 = [MEMORY[0x1E4F1CA20] canonicalLanguageIdentifierFromString:a1];
    uint64_t result = a1;
    if (v3)
    {
      uint64_t result = [(id)qword_1EB1ED3B0 objectForKey:v3];
      if (!result) {
        return v3;
      }
    }
  }
  return result;
}

void raiseError_0(uint64_t a1, const char *a2)
{
  id v3 = objc_alloc(MEMORY[0x1E4F1CA00]);
  SEL Name = sel_getName(a2);
  uint64_t v5 = (void *)[v3 initWithName:@"NSMapTableAbstractImplementationError", +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"abstract method %s called directly on class %@", Name, objc_opt_class()), 0 reason userInfo];
  objc_exception_throw(v5);
}

void sub_181FF523C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_181FF5460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_181FF55BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 56), 8);
  _Unwind_Resume(a1);
}

BOOL NSCompareMapTables(NSMapTable *table1, NSMapTable *table2)
{
  if (table1)
  {
    if (table2) {
      goto LABEL_3;
    }
  }
  else
  {
    NSLog((NSString *)@"%s: first map table argument is NULL", "BOOL NSCompareMapTables(NSMapTable * _Nonnull, NSMapTable * _Nonnull)");
    if (table2) {
      goto LABEL_3;
    }
  }
  NSLog((NSString *)@"%s: second map table argument is NULL", "BOOL NSCompareMapTables(NSMapTable * _Nonnull, NSMapTable * _Nonnull)");
LABEL_3:

  return [(NSMapTable *)table1 isEqual:table2];
}

void NSFreeMapTable(NSMapTable *table)
{
  if (table)
  {
  }
  else
  {
    uint64_t v2 = (NSMapTable *)table;
    NSLog((NSString *)@"%s: map table argument is NULL", "void NSFreeMapTable(NSMapTable * _Nonnull)");
    table = v2;
  }
}

void NSResetMapTable(NSMapTable *table)
{
  if (!table) {
    NSLog((NSString *)@"%s: map table argument is NULL", "void NSResetMapTable(NSMapTable * _Nonnull)");
  }

  [(NSMapTable *)table removeAllItems];
}

NSMapTable *__cdecl NSCopyMapTableWithZone(NSMapTable *table, NSZone *zone)
{
  if (!table) {
    NSLog((NSString *)@"%s: map table argument is NULL", zone, "NSMapTable * _Nonnull NSCopyMapTableWithZone(NSMapTable * _Nonnull, NSZone * _Nullable)");
  }

  return (NSMapTable *)[(NSMapTable *)table copy];
}

void *__cdecl NSMapInsertIfAbsent(NSMapTable *table, const void *key, const void *value)
{
  if (!table) {
    NSLog((NSString *)@"%s: map table argument is NULL", "void * _Nullable NSMapInsertIfAbsent(NSMapTable * _Nonnull, const void * _Nullable, const void * _Nullable)");
  }

  return [(NSMapTable *)table existingItemForSetItem:value forAbsentKey:key];
}

NSUInteger NSCountMapTable(NSMapTable *table)
{
  if (!table) {
    NSLog((NSString *)@"%s: map table argument is NULL", "NSUInteger NSCountMapTable(NSMapTable * _Nonnull)");
  }

  return [(NSMapTable *)table count];
}

NSString *__cdecl NSStringFromMapTable(NSMapTable *table)
{
  if (!table) {
    NSLog((NSString *)@"%s: map table argument is NULL", "NSString * _Nonnull NSStringFromMapTable(NSMapTable * _Nonnull)");
  }

  return (NSString *)[(NSMapTable *)table description];
}

void freePointerMT(int a1, void *a2)
{
}

uint64_t describeObjectMT(uint64_t a1, void *a2)
{
  return [a2 description];
}

void sub_181FF7270(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

CFTypeRef __NSMDVretain(int a1, CFTypeRef cf)
{
  if (cf) {
    return CFRetain(cf);
  }
  else {
    return 0;
  }
}

void __NSMDVrelease(int a1, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

CFTypeRef __NSMDVcopyDesc(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (__CFString *)[a1 description];
  }
  else
  {
    uint64_t v2 = @"<NULL>";
  }
  return CFRetain(v2);
}

uint64_t __NSMDVequal(void *a1, void *a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t result = 0;
  if (a1)
  {
    if (a2) {
      return objc_msgSend(a1, "isEqual:", a2, v2, v3);
    }
  }
  return result;
}

CFTypeRef __NSMetadataCreateResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = [[NSMetadataItem alloc] _init:a2];
  if ((*(unsigned char *)(a3 + 8) & 0x20) != 0) {
    id v4 = (id)[*(id *)(a3 + 88) metadataQuery:a3 replacementObjectForResultObject:v4];
  }
  if (objc_opt_isKindOfClass()) {
    [v4 _setQuery:a3];
  }
  if (!v4) {
    return 0;
  }

  return CFRetain(v4);
}

CFTypeRef __NSMetadataCreateValue(int a1, uint64_t a2, CFTypeRef cf, uint64_t a4)
{
  CFTypeRef v4 = cf;
  if ((*(unsigned char *)(a4 + 8) & 0x40) != 0) {
    CFTypeRef v4 = (CFTypeRef)[*(id *)(a4 + 88) metadataQuery:a4 replacementValueForAttribute:a2 value:cf];
  }
  if (!v4) {
    return 0;
  }

  return CFRetain(v4);
}

uint64_t __NSMetadataSortCompare(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a3[9]) {
    a3[9] = objc_opt_new();
  }
  if (!a3[10]) {
    a3[10] = objc_opt_new();
  }
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v6 = (void *)a3[4];
  uint64_t result = [v6 countByEnumeratingWithState:&v14 objects:v13 count:16];
  if (result)
  {
    uint64_t v8 = result;
    uint64_t v9 = *(void *)v15;
    while (2)
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v15 != v9) {
          objc_enumerationMutation(v6);
        }
        CFTypeID v11 = *(void **)(*((void *)&v14 + 1) + v10);
        *(void *)(a3[9] + _Block_object_dispose(&STACK[0x260], 8) = *(void *)(a1 + v10);
        *(void *)(a3[10] + _Block_object_dispose(&STACK[0x260], 8) = *(void *)(a2 + v10);
        uint64_t v12 = [v11 compareObject:a3[9] toObject:a3[10]];
        if (v12)
        {
          if (v12 == -1) {
            return -1;
          }
          else {
            return 1;
          }
        }
        v10 += 8;
        --v8;
      }
      while (v8);
      uint64_t result = [v6 countByEnumeratingWithState:&v14 objects:v13 count:16];
      uint64_t v8 = result;
      a2 += v10;
      a1 += v10;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

void sub_181FF7B80(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_181FF7ED8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_181FF8818(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

Class ___loadQueryFramework_block_invoke()
{
  _NSFrameworkHandleForLibrarianSymbols();
  Class result = objc_lookUpClass("BRQuery");
  _MergedGlobals_7 = result != 0;
  return result;
}

uint64_t sub_181FFA2EC()
{
  return v0;
}

uint64_t sub_181FFAB4C()
{
  return 0;
}

uint64_t sub_181FFAB94()
{
  return 0;
}

uint64_t sub_181FFAC28()
{
  return 0;
}

uint64_t sub_181FFAC6C()
{
  return 0;
}

uint64_t sub_181FFACB0()
{
  return 0;
}

uint64_t sub_181FFAFDC()
{
  return 0;
}

uint64_t sub_181FFC02C()
{
  return 0;
}

uint64_t NSCopyStringFromSelector(const char *a1)
{
  if (!a1) {
    return 0;
  }
  SEL Name = sel_getName(a1);
  if (!Name) {
    return 0;
  }
  uint64_t v2 = Name;
  uint64_t v3 = [NSString alloc];
  size_t v4 = strlen(v2);

  return (uint64_t)[(NSString *)v3 initWithBytesNoCopy:v2 length:v4 encoding:4 freeWhenDone:0];
}

BOOL _NSRequiresMorphunInflectionForLanguageIdentifier(void *a1)
{
  if (_NSLanguageIdentifierBeginsWithLanguageCode(a1, @"en")
    || _NSLanguageIdentifierBeginsWithLanguageCode(a1, @"es")
    || _NSLanguageIdentifierBeginsWithLanguageCode(a1, @"it")
    || _NSLanguageIdentifierBeginsWithLanguageCode(a1, @"fr")
    || _NSLanguageIdentifierBeginsWithLanguageCode(a1, @"pt")
    || _NSLanguageIdentifierBeginsWithLanguageCode(a1, @"de")
    || _NSLanguageIdentifierBeginsWithLanguageCode(a1, @"ko"))
  {
    return 1;
  }

  return _NSLanguageIdentifierBeginsWithLanguageCode(a1, @"hi");
}

BOOL _NSLanguageIdentifierBeginsWithLanguageCode(void *a1, void *a2)
{
  unint64_t v4 = [a1 length];
  if (v4 < [a2 length]
    || objc_msgSend(a1, "compare:options:range:", a2, 1, 0, objc_msgSend(a2, "length")))
  {
    return 0;
  }
  uint64_t v6 = [a1 length];
  return v6 == [a2 length]
      || objc_msgSend(a1, "characterAtIndex:", objc_msgSend(a2, "length")) == 45
      || objc_msgSend(a1, "characterAtIndex:", objc_msgSend(a2, "length")) == 95;
}

uint64_t _NSLexiconInflectedStringUsingMorphun(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  if (qword_1EB1ED530 != -1) {
    dispatch_once(&qword_1EB1ED530, &__block_literal_global_30);
  }
  if (!off_1EB1ED400) {
    return 0;
  }
  uint64_t v13 = [MEMORY[0x1E4F1CA20] localeWithLocaleIdentifier:a4];
  if (!v13) {
    return 0;
  }
  uint64_t v14 = v13;
  if (![a7 count])
  {
    CFDictionaryRef v54 = a5;
    uint64_t v55 = v14;
    uint64_t v53 = a6;
LABEL_29:
    long long v22 = 0;
    goto LABEL_30;
  }
  long long v15 = [+[NSCharacterSet whitespaceAndNewlineCharacterSet] invertedSet];
  uint64_t v16 = [a1 rangeOfCharacterFromSet:v15];
  if (v16 == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  uint64_t v19 = v16;
  CFDictionaryRef v54 = a5;
  uint64_t v55 = v14;
  uint64_t v53 = a6;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  uint64_t v20 = [a7 countByEnumeratingWithState:&v62 objects:v61 count:16];
  if (!v20) {
    goto LABEL_29;
  }
  uint64_t v21 = v20;
  long long v22 = 0;
  uint64_t v23 = v19 + a2;
  uint64_t v24 = *(void *)v63;
  do
  {
    for (uint64_t i = 0; i != v21; ++i)
    {
      if (*(void *)v63 != v24) {
        objc_enumerationMutation(a7);
      }
      unint64_t v26 = *(void **)(*((void *)&v62 + 1) + 8 * i);
      if ([v26 replacementKind] != 1)
      {
        [v26 argument];
        if (!_NSIsNSNumber()) {
          continue;
        }
      }
      if ([v26 replacementRangeInResult] == v23)
      {
        unint64_t v28 = v27;
        if (v27 >= [a1 length]) {
          return 0;
        }
        unint64_t v29 = objc_msgSend(a1, "rangeOfCharacterFromSet:options:range:", v15, 0, v28 + v19, objc_msgSend(a1, "length") - (v28 + v19));
        if (v29 <= v28 + v19 || v29 == 0x7FFFFFFFFFFFFFFFLL) {
          unint64_t v31 = v28 + v19;
        }
        else {
          unint64_t v31 = v29;
        }
        long long v22 = objc_msgSend(a1, "substringWithRange:", 0, v31);
        a1 = (void *)[a1 substringFromIndex:v31];
      }
    }
    uint64_t v21 = [a7 countByEnumeratingWithState:&v62 objects:v61 count:16];
  }
  while (v21);
LABEL_30:
  CFTypeRef cf = 0;
  uint64_t v32 = off_1EB1ED400(&cf);
  if (cf)
  {
    if (_NSInflectionLog_onceToken != -1) {
      dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
    }
    uint64_t v33 = _NSInflectionLog_log;
    if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v58 = "mlccfp_getDefaultCommonConceptFactoryProvider(&error)";
      __int16 v59 = 2112;
      CFTypeRef v60 = cf;
      _os_log_error_impl(&dword_181795000, v33, OS_LOG_TYPE_ERROR, "Inflection engine reported an error for '%s' while attempting to inflect: %@", buf, 0x16u);
    }
    CFTypeRef v34 = cf;
  }
  else
  {
    CFTypeRef v34 = 0;
  }
  uint64_t v17 = 0;
  if (!v32 || v34) {
    goto LABEL_123;
  }
  CFTypeRef cf = 0;
  uint64_t v35 = off_1EB1ED408(v32, v55, &cf);
  if (cf)
  {
    if (_NSInflectionLog_onceToken != -1) {
      dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
    }
    CFTypeID v36 = _NSInflectionLog_log;
    if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v58 = "mlccfp_getCommonConceptFactory(provider, (CFLocaleRef)locale, &error)";
      __int16 v59 = 2112;
      CFTypeRef v60 = cf;
      _os_log_error_impl(&dword_181795000, v36, OS_LOG_TYPE_ERROR, "Inflection engine reported an error for '%s' while attempting to inflect: %@", buf, 0x16u);
    }
    CFTypeRef v34 = cf;
  }
  else
  {
    CFTypeRef v34 = 0;
  }
  uint64_t v17 = 0;
  if (!v35 || v34) {
    goto LABEL_123;
  }
  CFTypeRef cf = 0;
  uint64_t v37 = off_1EB1ED410(v35, &cf);
  if (cf)
  {
    if (_NSInflectionLog_onceToken != -1) {
      dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
    }
    uint64_t v38 = _NSInflectionLog_log;
    if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v58 = "mccf_getSemanticFeatureModel(factory, &error)";
      __int16 v59 = 2112;
      CFTypeRef v60 = cf;
      _os_log_error_impl(&dword_181795000, v38, OS_LOG_TYPE_ERROR, "Inflection engine reported an error for '%s' while attempting to inflect: %@", buf, 0x16u);
    }
    CFTypeRef v34 = cf;
  }
  else
  {
    CFTypeRef v34 = 0;
  }
  uint64_t v17 = 0;
  if (!v37 || v34) {
    goto LABEL_123;
  }
  CFTypeRef cf = 0;
  uint64_t v39 = off_1EB1ED418(a1, &cf);
  if (cf)
  {
    if (_NSInflectionLog_onceToken != -1) {
      dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
    }
    unint64_t v40 = _NSInflectionLog_log;
    if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v58 = "mss_create((CFStringRef)stringToInflect, &error)";
      __int16 v59 = 2112;
      CFTypeRef v60 = cf;
      _os_log_error_impl(&dword_181795000, v40, OS_LOG_TYPE_ERROR, "Inflection engine reported an error for '%s' while attempting to inflect: %@", buf, 0x16u);
    }
    CFTypeRef v34 = cf;
  }
  else
  {
    CFTypeRef v34 = 0;
  }
  if (v39 && !v34)
  {
    CFTypeRef cf = 0;
    uint64_t v41 = off_1EB1ED420(v37, v39, &cf);
    if (cf)
    {
      if (_NSInflectionLog_onceToken != -1) {
        dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
      }
      unint64_t v42 = _NSInflectionLog_log;
      if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v58 = "minf_create(model, speakableSource, &error)";
        __int16 v59 = 2112;
        CFTypeRef v60 = cf;
        _os_log_error_impl(&dword_181795000, v42, OS_LOG_TYPE_ERROR, "Inflection engine reported an error for '%s' while attempting to inflect: %@", buf, 0x16u);
      }
      CFTypeRef v34 = cf;
    }
    else
    {
      CFTypeRef v34 = 0;
    }
    if (!v41 || v34)
    {
      uint64_t v43 = 0;
      if (!v41) {
        goto LABEL_122;
      }
      goto LABEL_121;
    }
    if ([v54 addConstraintsTo:v41])
    {
      CFTypeRef cf = 0;
      char v44 = off_1EB1ED428(v41, &cf);
      if (cf)
      {
        if (_NSInflectionLog_onceToken != -1) {
          dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
        }
        uint64_t v45 = _NSInflectionLog_log;
        if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          uint64_t v58 = "minf_isExists(inflectable, &error)";
          __int16 v59 = 2112;
          CFTypeRef v60 = cf;
          _os_log_error_impl(&dword_181795000, v45, OS_LOG_TYPE_ERROR, "Inflection engine reported an error for '%s' while attempting to inflect: %@", buf, 0x16u);
        }
        CFTypeRef v34 = cf;
      }
      else
      {
        CFTypeRef v34 = 0;
      }
      if (v34) {
        char v47 = 0;
      }
      else {
        char v47 = v44;
      }
      if ((v47 & 1) == 0)
      {
        uint64_t v43 = 0;
        goto LABEL_121;
      }
      uint64_t v46 = v53;
      if (!v53)
      {
        CFTypeRef cf = 0;
        uint64_t v48 = off_1EB1ED438(v41, &cf);
        if (cf)
        {
          if (_NSInflectionLog_onceToken != -1) {
            dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
          }
          uint64_t v49 = _NSInflectionLog_log;
          if (!os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR)) {
            goto LABEL_98;
          }
          *(_DWORD *)buf = 136315394;
          uint64_t v58 = "minf_toSpeakableString(inflectable, &error)";
          __int16 v59 = 2112;
          CFTypeRef v60 = cf;
          goto LABEL_126;
        }
LABEL_105:
        CFTypeRef v34 = 0;
LABEL_106:
        if (!v48 || v34)
        {
          uint64_t v43 = 0;
          if (!v48) {
            goto LABEL_121;
          }
        }
        else
        {
          CFTypeRef cf = 0;
          unint64_t v50 = (void *)off_1EB1ED440(v48, &cf);
          if (cf)
          {
            if (_NSInflectionLog_onceToken != -1) {
              dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
            }
            unint64_t v51 = _NSInflectionLog_log;
            if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              uint64_t v58 = "mss_createPrintCopy(speakableResult, &error)";
              __int16 v59 = 2112;
              CFTypeRef v60 = cf;
              _os_log_error_impl(&dword_181795000, v51, OS_LOG_TYPE_ERROR, "Inflection engine reported an error for '%s' while attempting to inflect: %@", buf, 0x16u);
            }
            CFTypeRef v34 = cf;
          }
          else
          {
            CFTypeRef v34 = 0;
          }
          id v52 = v50;
          uint64_t v43 = (uint64_t)v52;
          if (v22 && v52) {
            uint64_t v43 = [v22 stringByAppendingString:v52];
          }
        }
        off_1EB1ED448(v48);
LABEL_121:
        off_1EB1ED450(v41);
        goto LABEL_122;
      }
    }
    else
    {
      uint64_t v46 = v53;
      if (!v53)
      {
        uint64_t v43 = 0;
        CFTypeRef v34 = 0;
        goto LABEL_121;
      }
    }
    CFTypeRef cf = 0;
    uint64_t v48 = off_1EB1ED430(v41, v46, &cf);
    if (cf)
    {
      if (_NSInflectionLog_onceToken != -1) {
        dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
      }
      uint64_t v49 = _NSInflectionLog_log;
      if (!os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR)) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136315394;
      uint64_t v58 = "minf_getFeatureValueByNameCopy(inflectable,(CFStringRef)featureName, &error)";
      __int16 v59 = 2112;
      CFTypeRef v60 = cf;
LABEL_126:
      _os_log_error_impl(&dword_181795000, v49, OS_LOG_TYPE_ERROR, "Inflection engine reported an error for '%s' while attempting to inflect: %@", buf, 0x16u);
LABEL_98:
      CFTypeRef v34 = cf;
      goto LABEL_106;
    }
    goto LABEL_105;
  }
  uint64_t v43 = 0;
  uint64_t v17 = 0;
  if (v39)
  {
LABEL_122:
    off_1EB1ED448(v39);
    uint64_t v17 = v43;
  }
LABEL_123:
  if (v34) {
    CFRelease(v34);
  }
  return v17;
}

void sub_1820026D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _DisplayValueRelease(uint64_t a1, uint64_t a2)
{
  return off_1EB1ED4C8(a2);
}

void _NSObjectRaiseNullSelectorException(objc_class *a1, const char *a2)
{
  uint64_t v2 = (void *)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8], +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@: null selector", _NSMethodExceptionProem(a1, a2)), 0 reason userInfo];
  objc_exception_throw(v2);
}

id NSCopyObject(id object, NSUInteger extraBytes, NSZone *zone)
{
  if (!object) {
    return 0;
  }
  id v3 = object_copy(object, extraBytes);
  unint64_t v4 = (objc_class *)objc_opt_class();
  object_setClass(v3, v4);
  if (*MEMORY[0x1E4F1CBC0])
  {
    object_getClassName(v3);
    __CFSetLastAllocationEventName();
  }
  return v3;
}

void NSIncrementExtraRefCount(id object)
{
  if (object)
  {
    _objc_rootRetain();
    if (*MEMORY[0x1E4F1CBC0])
    {
      __CFRecordAllocationEvent();
    }
  }
}

BOOL NSDecrementExtraRefCountWasZero(id object)
{
  if (object)
  {
    id v1 = object;
    if (*MEMORY[0x1E4F1CBC0]) {
      __CFRecordAllocationEvent();
    }
    LOBYTE(object) = MEMORY[0x1F4181480](v1);
  }
  return (char)object;
}

NSUInteger NSExtraRefCount(NSUInteger object)
{
  if (object)
  {
    uint64_t v1 = _objc_rootRetainCount();
    if (v1) {
      return v1 - 1;
    }
    else {
      return 0;
    }
  }
  return object;
}

void iop_unlock(os_unfair_lock_s *a1)
{
}

void iop_removeAllDependencies(unsigned __int8 *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  char v5 = 0;
  uint64_t v6 = 0;
  uint64_t v18 = MEMORY[0x1E4F143A8];
  uint64_t v19 = 3221225472;
  uint64_t v20 = __iop_removeAllDependencies_block_invoke;
  uint64_t v21 = &unk_1E51F8B80;
  long long v22 = a2;
  uint64_t v23 = a1;
  LOBYTE(v7) = 1;
  uint64_t v8 = 1;
  do
  {
    while (1)
    {
      while (1)
      {
        char v9 = v5;
        uint64_t v10 = v8;
        char v11 = v7;
        uint64_t v12 = _NSOperationDependenciesAndReadyKeys[v6];
        if (v12 != @"isReady") {
          break;
        }
        uint64_t v8 = 0;
        int v13 = atomic_load(a1 + 236);
        char v14 = v5 | (v13 != 0);
        char v5 = 1;
        uint64_t v7 = v10;
        uint64_t v6 = 1;
        if (v14) {
          goto LABEL_14;
        }
      }
      if (v12 != @"isFinished") {
        break;
      }
      uint64_t v8 = 0;
      long long v15 = a1 + 235;
LABEL_13:
      int v13 = atomic_load(v15);
      char v16 = v5 | (v13 != 0);
      uint64_t v6 = 1;
      uint64_t v7 = v10;
      char v5 = 1;
      if (v16)
      {
LABEL_14:
        if (v13) {
          char v17 = v11;
        }
        else {
          char v17 = v10;
        }
        if (v17) {
          goto LABEL_18;
        }
        goto LABEL_20;
      }
    }
    if (v12 == @"isExecuting")
    {
      uint64_t v8 = 0;
      long long v15 = a1 + 234;
      goto LABEL_13;
    }
    if (v12 == @"isCancelled")
    {
      uint64_t v8 = 0;
      long long v15 = a1 + 237;
      goto LABEL_13;
    }
    uint64_t v8 = 0;
    uint64_t v6 = 1;
    uint64_t v7 = v10;
    char v5 = 1;
  }
  while ((v9 & 1) == 0);
  if (v10)
  {
LABEL_18:
    [a2 _changeValueForKeys:_NSOperationDependenciesAndReadyKeys count:2 maybeOldValuesDict:0 maybeNewValuesDict:0 usingBlock:&v18];
    goto LABEL_21;
  }
LABEL_20:
  ((void (*)(uint64_t *, uint64_t, uint64_t))v20)(&v18, 1, v7);
  +[__NSOperationInternalObserver _observeValueForKeyPath:@"isReady", a2, 0, 0, 0, 0, 0, v18, v19 ofObject changeKind oldValue newValue indexes context];
LABEL_21:
}

void __iop_removeAllDependencies_block_invoke(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 224));
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = *(void **)(v2 + 32);
  *(void *)(v2 + 32) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 224));
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v14 objects:v13 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v14 + 1) + 8 * i);
        os_unfair_lock_lock((os_unfair_lock_t)(v8 + 232));
        os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 224));
        int v9 = atomic_load((unsigned __int8 *)(v8 + 237));
        if (v9 != 244)
        {
          unsigned __int8 v10 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 40) + 232));
          if ((v10 & 1) == 0)
          {
            uint64_t v11 = *(void *)(a1 + 40);
            uint64_t v12 = *(void *)(v11 + 48);
            *(void *)(v11 + 4_Block_object_dispose(&STACK[0x260], 8) = v12 - 1;
            if (v12 <= 0) {
              __assert_rtn("iop_removeAllDependencies_block_invoke", "NSOperation.m", 552, "iop->__unfinished_deps >= 0");
            }
          }
        }
        [*(id *)(v8 + 48) removeObject:*(void *)(a1 + 32)];
        os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 224));
        os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 232));
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v14 objects:v13 count:16];
    }
    while (v5);
  }
}

uint64_t __iop_cancel_block_invoke(uint64_t result)
{
  return result;
}

void __iop_cancel_block_invoke_2(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 224));
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(v2 + 4_Block_object_dispose(&STACK[0x260], 8) = 0;

  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 224));
}

double __iop_setThreadPriority_block_invoke(uint64_t a1)
{
  double result = *(double *)(a1 + 40);
  *(double *)(*(void *)(a1 + 32) + 80) = result;
  return result;
}

void __iop_removeDependency_block_invoke(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 48) + 224));
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = *(void **)(v2 + 32);
  if (!v3)
  {
LABEL_4:
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 224));
    return;
  }
  if ([v3 indexOfObjectIdenticalTo:*(void *)(a1 + 32)] == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v2 = *(void *)(a1 + 48);
    goto LABEL_4;
  }
  id v11 = *(id *)(a1 + 32);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 48) + 224));
  if (v11)
  {
    os_unfair_lock_lock((os_unfair_lock_t)v11 + 58);
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 48) + 224));
    uint64_t v4 = *(void **)(*(void *)(a1 + 48) + 32);
    if (v4)
    {
      uint64_t v5 = [v4 indexOfObjectIdenticalTo:*(void *)(a1 + 32)];
      if (v5 != 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v6 = v5;
        int v7 = atomic_load((unsigned __int8 *)v11 + 237);
        if (v7 != 244)
        {
          unsigned __int8 v8 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 48) + 232));
          if ((v8 & 1) == 0)
          {
            uint64_t v9 = *(void *)(a1 + 48);
            uint64_t v10 = *(void *)(v9 + 48);
            *(void *)(v9 + 4_Block_object_dispose(&STACK[0x260], 8) = v10 - 1;
            if (v10 <= 0) {
              __assert_rtn("iop_removeDependency_block_invoke", "NSOperation.m", 847, "iop->__unfinished_deps >= 0");
            }
          }
        }
        [*((id *)v11 + 6) removeObject:*(void *)(a1 + 40)];
        [*(id *)(*(void *)(a1 + 48) + 32) removeObjectAtIndex:v6];
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 48) + 224));
    os_unfair_lock_unlock((os_unfair_lock_t)v11 + 58);
  }
}

uint64_t __iop_start_block_invoke(uint64_t result)
{
  return result;
}

uint64_t __iop_start_block_invoke_2(uint64_t result)
{
  return result;
}

uint64_t __iop_start_block_invoke_3(uint64_t result)
{
  return result;
}

void _NSAbbreviatePathWithTilde(unsigned __int16 *a1, uint64_t *a2)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  if (*a2 >= 1 && (*a2 != 1 || *a1 != 47))
  {
    uint64_t v4 = NSHomeDirectoryForUser(0);
    uint64_t v5 = [(NSString *)v4 length];
    if (*a2 >= v5)
    {
      uint64_t v6 = v5;
      MEMORY[0x1F4188790](v5);
      uint64_t v9 = (unsigned __int16 *)((char *)v19 - v8);
      if (v10 > 0x100) {
        uint64_t v9 = (unsigned __int16 *)malloc_type_malloc(2 * v7, 0x1000040BDFB0063uLL);
      }
      else {
        bzero((char *)v19 - v8, 2 * v7);
      }
      -[NSString getCharacters:range:](v4, "getCharacters:range:", v9, 0, v6);
      if (v6 < 1)
      {
        uint64_t v15 = 0;
        BOOL v16 = 0;
      }
      else if (*a1 == *v9)
      {
        uint64_t v11 = 1;
        while (1)
        {
          uint64_t v12 = v11;
          if (v6 == v11) {
            break;
          }
          int v13 = a1[v11];
          int v14 = v9[v11++];
          if (v13 != v14)
          {
            uint64_t v15 = v12;
            goto LABEL_17;
          }
        }
        uint64_t v15 = v6;
LABEL_17:
        BOOL v16 = v12 < v6;
      }
      else
      {
        uint64_t v15 = 0;
        BOOL v16 = 1;
      }
      if ((unint64_t)v6 >= 0x101) {
        free(v9);
      }
      if (!v16)
      {
        if (*a2 == v15)
        {
          *a1 = 126;
          uint64_t v17 = 1;
        }
        else
        {
          uint64_t v18 = &a1[v15];
          if (*v18 != 47) {
            return;
          }
          memmove(a1 + 1, v18, 2 * (*a2 - v15));
          *a1 = 126;
          uint64_t v17 = *a2 - v15 + 1;
        }
        *a2 = v17;
      }
    }
  }
}

__CFString *_NSFindCommonPrefixInStringArray(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int64_t v4 = [a1 count];
  if (!v4) {
    return &stru_1ECA5C228;
  }
  uint64_t v5 = v4;
  int64_t v6 = v4 - 1;
  if (v4 != 1)
  {
    if (v4 >= 257) {
      uint64_t v9 = (id *)NSAllocateObjectArray(v4);
    }
    else {
      uint64_t v9 = (id *)v19;
    }
    objc_msgSend(a1, "getObjects:range:", v9, 0, v5);
    id v10 = *v9;
    uint64_t v17 = [*v9 length];
    if (v17 < 1)
    {
      uint64_t v8 = &stru_1ECA5C228;
    }
    else
    {
      uint64_t v11 = 0;
      if (a2) {
        uint64_t v12 = 8;
      }
      else {
        uint64_t v12 = 9;
      }
      uint64_t v8 = &stru_1ECA5C228;
      while (1)
      {
        uint64_t v18 = v8;
        [v10 rangeOfComposedCharacterSequenceAtIndex:v11];
        v11 += v13;
        uint64_t v8 = (__CFString *)objc_msgSend(v10, "substringWithRange:", 0, v11);
        int64_t v14 = v6;
        uint64_t v15 = v9 + 1;
        if (v5 >= 2) {
          break;
        }
LABEL_18:
        int64_t v6 = v14;
        if (v11 >= v17) {
          goto LABEL_22;
        }
      }
      while (1)
      {
        objc_msgSend(*v15, "rangeOfString:options:range:", v8, v12, 0, objc_msgSend(*v15, "length"));
        if (!v16) {
          break;
        }
        ++v15;
        if (!--v6) {
          goto LABEL_18;
        }
      }
      uint64_t v8 = v18;
    }
LABEL_22:
    if (v9 != (id *)v19) {
      free(v9);
    }
    return v8;
  }

  return (__CFString *)[a1 objectAtIndex:0];
}

NSString *NSFullUserName(void)
{
  if (geteuid()) {
    uid_t v0 = geteuid();
  }
  else {
    uid_t v0 = getuid();
  }
  double result = (NSString *)getpwuid(v0);
  if (result)
  {
    if (result[5].super.isa) {
      double result = (NSString *)(id)[objc_allocWithZone((Class)NSString) initWithBytes:result[5].super.isa length:strlen((const char *)result[5].super.isa) encoding:4];
    }
    else {
      double result = 0;
    }
  }
  if (!result) {
    return (NSString *)&stru_1ECA5C228;
  }
  return result;
}

NSString *NSOpenStepRootDirectory(void)
{
  if (issetugid()) {
    return (NSString *)@"/";
  }
  uint64_t v1 = getenv("NEXT_ROOT");
  if (!v1 || !*v1) {
    return (NSString *)@"/";
  }
  uint64_t v2 = [+[NSFileManager defaultManager] stringWithFileSystemRepresentation:v1 length:strlen(v1)];

  return [(NSString *)v2 stringByStandardizingPath];
}

uint64_t _NSErrnoMessage()
{
  return *(void *)(MEMORY[0x1E4F14A98] + 8 * *__error());
}

uint64_t _NSPreferredChunkSizeForFileDescriptor(int a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  memset(&v12, 0, 512);
  memset(&v11, 0, sizeof(v11));
  if (fstatfs(a1, &v12) == -1)
  {
    if (fstat(a1, &v11) == -1)
    {
      if (qword_1EB1ED5B8 != -1) {
        dispatch_once(&qword_1EB1ED5B8, &__block_literal_global_34);
      }
      int64_t v4 = _MergedGlobals_111;
      if (os_log_type_enabled((os_log_t)_MergedGlobals_111, OS_LOG_TYPE_ERROR))
      {
        int v5 = *__error();
        int64_t v6 = __error();
        uint64_t v7 = strerror(*v6);
        v8[0] = 67109378;
        v8[1] = v5;
        __int16 v9 = 2080;
        id v10 = v7;
        _os_log_error_impl(&dword_181795000, v4, OS_LOG_TYPE_ERROR, "Encountered fstat failure %d %s", (uint8_t *)v8, 0x12u);
      }
      return -1;
    }
    blksize_t st_blksize = v11.st_blksize;
  }
  else
  {
    blksize_t st_blksize = v12.f_iosize;
  }
  if (st_blksize > 0) {
    return st_blksize;
  }
  return -1;
}

uint64_t _NSReadExtendedAttributesFromFileDescriptor(int a1, void *a2, int a3, int *a4)
{
  int v5 = a2;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v7 = [a2 countByEnumeratingWithState:&v29 objects:v28 count:16];
  if (!v7) {
    return [MEMORY[0x1E4F1C9E8] dictionary];
  }
  uint64_t v8 = v7;
  uint64_t v23 = a4;
  __int16 v9 = 0;
  uint64_t v10 = *(void *)v30;
  unint64_t v11 = 0x1E4F1C000uLL;
  uint64_t v25 = *(void *)v30;
  while (2)
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      if (*(void *)v30 != v10) {
        objc_enumerationMutation(v5);
      }
      uint64_t v13 = *(void **)(*((void *)&v29 + 1) + 8 * i);
      int64_t v14 = v27;
      if (([v13 getCString:v27 maxLength:200 encoding:4] & 1) == 0) {
        int64_t v14 = (const char *)[v13 UTF8String];
      }
      ssize_t v15 = fgetxattr(a1, v14, value, 0x3E8uLL, 0, 0);
      if (v15 != -1)
      {
        uint64_t v16 = (void *)[objc_alloc(*(Class *)(v11 + 2488)) initWithBytes:value length:v15];
        if (!v16) {
          continue;
        }
LABEL_10:
        if (!v9) {
          __int16 v9 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
        }
        [v9 setObject:v16 forKey:v13];

        continue;
      }
      if (*__error() != 34) {
        continue;
      }
      uint64_t v17 = v9;
      uint64_t v18 = v5;
      unint64_t v19 = v11;
      ssize_t v20 = fgetxattr(a1, v14, 0, 0, 0, 0);
      if (v20 == -1)
      {
        int v5 = v18;
        __int16 v9 = v17;
        uint64_t v10 = v25;
        continue;
      }
      size_t v21 = v20;
      uint64_t v16 = (void *)[objc_alloc(MEMORY[0x1E4F1CA58]) initWithLength:v20];
      if (fgetxattr(a1, v14, (void *)[v16 mutableBytes], v21, 0, 0) == v21)
      {
        unint64_t v11 = v19;
        int v5 = v18;
        __int16 v9 = v17;
        uint64_t v10 = v25;
        if (!v16) {
          continue;
        }
        goto LABEL_10;
      }

      unint64_t v11 = v19;
      int v5 = v18;
      __int16 v9 = v17;
      uint64_t v10 = v25;
      if (a3)
      {
        if (v23) {
          *uint64_t v23 = *__error();
        }
        return 0;
      }
    }
    uint64_t v8 = [v5 countByEnumeratingWithState:&v29 objects:v28 count:16];
    if (v8) {
      continue;
    }
    break;
  }
  if (!v9) {
    return [MEMORY[0x1E4F1C9E8] dictionary];
  }
  return (uint64_t)v9;
}

uint64_t _NSCleanupTemporaryDirectory(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    double result = rmdir((const char *)[(id)result fileSystemRepresentation]);
    if (result)
    {
      uint64_t v2 = +[NSFileManager defaultManager];
      return [(NSFileManager *)v2 removeItemAtPath:v1 error:0];
    }
  }
  return result;
}

uint64_t _NSCreateTemporaryFile(void *a1, NSString **a2, int *a3, uint64_t *a4, NSError **a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  getpid();
  if (!sandbox_check())
  {
    *a4 = 0;
    ssize_t v15 = (void *)[a1 stringByDeletingLastPathComponent];
    if ([v15 isEqual:&stru_1ECA5C228])
    {
      __s[0] = 0;
    }
    else if (([v15 getFileSystemRepresentation:__s maxLength:1024] & 1) == 0)
    {
      if (a5)
      {
        unint64_t v27 = _NSErrorWithFilePath(514, (uint64_t)a1);
        goto LABEL_33;
      }
      return 0;
    }
    int v16 = strlen(__s);
    int v17 = v16;
    if (v16 >= 1 && __s[v16 - 1] != 47)
    {
      if (v16 == 1048) {
        goto LABEL_18;
      }
      int v17 = v16 + 1;
      __s[v16] = 47;
    }
    unsigned __int16 v18 = getpid();
    snprintf(__str, 6uLL, "%04x", v18);
    if ((unint64_t)(v17 - 1027) >= 0xFFFFFFFFFFFFFBE7)
    {
      long long v29 = &__s[v17];
      do
      {
        *long long v29 = 0;
        _NSFastMultiCStringConcat((uint64_t)v29, v19, v20, v21, v22, v23, v24, v25, ".dat.nosync", (uint64_t)__str);
        if (!mktemp(__s)) {
          break;
        }
        int v30 = _NSOpenFileDescriptor_Protected(__s, 2562, 0, 438);
        if ((v30 & 0x80000000) == 0)
        {
          int v14 = v30;
          statfs v12 = +[NSString stringWithUTF8String:__s];
          if (a2) {
            goto LABEL_5;
          }
          goto LABEL_6;
        }
      }
      while (*__error() == 17);
LABEL_19:
      if (a5)
      {
        unint64_t v26 = __error();
        unint64_t v27 = _NSErrorWithFilePathErrnoVariantAndExtraUserInfo(*v26, (uint64_t)a1, 0, 0, 0);
LABEL_33:
        *a5 = v27;
        return 0;
      }
      return 0;
    }
LABEL_18:
    *__error() = 63;
    goto LABEL_19;
  }
  uint64_t v10 = +[NSFileManager defaultManager];
  *(void *)__s = 0;
  id v11 = -[NSURL path](-[NSFileManager URLForDirectory:inDomain:appropriateForURL:create:error:](v10, "URLForDirectory:inDomain:appropriateForURL:create:error:", 99, 1, [MEMORY[0x1E4F1CB10] fileURLWithPath:a1 isDirectory:0], 1, __s), "path");
  *a4 = (uint64_t)v11;
  if (!v11)
  {
    if (a5) {
      *a5 = *(NSError **)__s;
    }
    return 0;
  }
  statfs v12 = (NSString *)objc_msgSend(v11, "stringByAppendingPathComponent:", objc_msgSend(a1, "lastPathComponent"));
  int v13 = _NSOpenFileDescriptor_Protected((char *)[(NSString *)v12 fileSystemRepresentation], 2562, 0, 438);
  if (v13 < 0)
  {
    if (a5)
    {
      unint64_t v28 = __error();
      *a5 = _NSErrorWithFilePathErrnoVariantAndExtraUserInfo(*v28, (uint64_t)a1, 0, 0, 0);
    }
    _NSCleanupTemporaryDirectory(*a4);
    *a4 = 0;
    return 0;
  }
  int v14 = v13;
  if (a2) {
LABEL_5:
  }
    *a2 = v12;
LABEL_6:
  if (a3) {
    *a3 = v14;
  }
  else {
    close(v14);
  }
  return 1;
}

uint64_t _NSMoveTemporaryFileToDestination(void *a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t result = objc_msgSend(a2, "getFileSystemRepresentation:maxLength:", &__to, 1024, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0,
             0,
             0);
  if (result)
  {
    uint64_t result = [a1 getFileSystemRepresentation:&__from maxLength:1024];
    if (result)
    {
      if (lstat((const char *)&__to, &v9))
      {
        if (*__error() != 2) {
          return 0;
        }
        rename(&__from, &__to, v5);
        if (!v6) {
          return 1;
        }
      }
      else
      {
        mode_t st_mode = v9.st_mode;
        rename(&__from, &__to, v4);
        if (!v8)
        {
          chmod((const char *)&__to, st_mode);
          return 1;
        }
      }
      unlink((const char *)&__from);
      return 0;
    }
  }
  return result;
}

uint64_t _NSWriteExtendedAttributesToFileDescriptor(int a1, void *a2, int a3, int *a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v8 = [a2 countByEnumeratingWithState:&v19 objects:v18 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v20;
    while (2)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v20 != v10) {
          objc_enumerationMutation(a2);
        }
        uint64_t v12 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        int v13 = v17;
        if (([v12 getCString:v17 maxLength:200 encoding:4] & 1) == 0) {
          int v13 = (const char *)[v12 UTF8String];
        }
        int v14 = (void *)[a2 objectForKey:v12];
        if (fsetxattr(a1, v13, (const void *)[v14 bytes], objc_msgSend(v14, "length"), 0, 0)) {
          BOOL v15 = a3 == 0;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15)
        {
          if (a4) {
            *a4 = *__error();
          }
          return 0;
        }
      }
      uint64_t v9 = [a2 countByEnumeratingWithState:&v19 objects:v18 count:16];
      if (v9) {
        continue;
      }
      break;
    }
  }
  return 1;
}

void *_NSLogCStringFunction()
{
  return __NSLogCString;
}

void *_NSSetLogCStringFunction(void *result)
{
  __NSLogCString = result;
  return result;
}

uint64_t _NSRuntimeIssuesLog()
{
  if (qword_1EB1ED5D8 != -1) {
    dispatch_once(&qword_1EB1ED5D8, &__block_literal_global_44);
  }
  return qword_1EB1ED5D0;
}

void *NSReallocateScannedUncollectable(void *a1, size_t a2)
{
  if (a1)
  {
    int64_t v4 = malloc_zone_from_ptr(a1);
    return malloc_type_zone_realloc(v4, a1, a2, 0xF8D18AE6uLL);
  }
  else
  {
    int v6 = malloc_default_zone();
    return malloc_type_zone_calloc(v6, 1uLL, a2, 0xC2E5A2B2uLL);
  }
}

uint64_t NSScannedZone(uint64_t a1)
{
  return a1;
}

uint64_t NSUnscannedZone(uint64_t a1)
{
  return a1;
}

uint64_t NSCollectedScannedZone(uint64_t a1)
{
  return a1;
}

uint64_t NSCollectedUnscannedZone(uint64_t a1)
{
  return a1;
}

NSZone *__cdecl NSCreateZone(NSUInteger startSize, NSUInteger granularity, BOOL canFree)
{
  return (NSZone *)malloc_create_zone(startSize, 0);
}

void NSSetZoneName(NSZone *zone, NSString *name)
{
  id v3 = (malloc_zone_t *)zone;
  if (!zone) {
    id v3 = malloc_default_zone();
  }
  int64_t v4 = [(NSString *)name UTF8String];

  malloc_set_zone_name(v3, v4);
}

NSString *__cdecl NSZoneName(NSZone *zone)
{
  if (!zone) {
    zone = (NSZone *)malloc_default_zone();
  }
  zone_name = malloc_get_zone_name((malloc_zone_t *)zone);
  if (zone_name) {
    uint64_t v2 = zone_name;
  }
  else {
    uint64_t v2 = "";
  }

  return +[NSString stringWithUTF8String:v2];
}

void *__cdecl NSZoneRealloc(NSZone *zone, void *ptr, NSUInteger size)
{
  if (ptr)
  {
    if (zone)
    {
      return malloc_type_zone_realloc((malloc_zone_t *)zone, ptr, size, 0x3C595B05uLL);
    }
    else
    {
      return malloc_type_realloc(ptr, size, 0xCA9ECF3FuLL);
    }
  }
  else
  {
    if (!zone) {
      zone = (NSZone *)malloc_default_zone();
    }
    return malloc_type_zone_malloc((malloc_zone_t *)zone, size, 0x4A6F13AEuLL);
  }
}

void NSZoneReallyFree(malloc_zone_t *a1, void *a2)
{
  if (a1) {
    malloc_zone_free(a1, a2);
  }
  else {
    free(a2);
  }
}

NSUInteger NSLogPageSize(void)
{
  int v0 = flsl(*MEMORY[0x1E4F14B00]) - 1;
  if (v0 > 0x40) {
    return 0;
  }
  return v0;
}

void NSDeallocateMemoryPages(void *ptr, NSUInteger bytes)
{
  if (mach_vm_deallocate(*MEMORY[0x1E4F14960], (mach_vm_address_t)ptr, bytes))
  {
    int64_t v4 = +[NSString stringWithFormat:@"*** NSDeallocateMemoryPages(%p, %lu) failed", ptr, bytes];
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:v4 userInfo:0]);
  }
}

NSUInteger NSRealMemoryAvailable(void)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  NSUInteger result = _NSRealMemory;
  if (!_NSRealMemory)
  {
    NSUInteger v2 = 0;
    *(void *)id v3 = 0x500000006;
    size_t v1 = 8;
    if (sysctl(v3, 2u, &v2, &v1, 0, 0) == -1)
    {
      return _NSRealMemory;
    }
    else
    {
      NSUInteger result = v2;
      _NSRealMemordouble y = v2;
    }
  }
  return result;
}

BOOL _NSDefaultMallocZoneClaimedAddress()
{
  return malloc_zone_claimed_address() != 0;
}

void *_NSFaultInObjectWithCleanup(atomic_ullong *a1, uint64_t a2, uint64_t a3)
{
  NSUInteger result = (void *)*a1;
  if (!result)
  {
    NSUInteger result = (void *)(*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    uint64_t v6 = 0;
    atomic_compare_exchange_strong(a1, (unint64_t *)&v6, (unint64_t)result);
    if (v6)
    {
      [result performSelector:a3];
      return (void *)*a1;
    }
  }
  return result;
}

uint64_t __NSLogAdaptor(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return __NSLogCString(a2, a3, a4 != 0);
}

uint64_t sub_18200AC18()
{
  return 0;
}

uint64_t sub_18200AC5C()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_18200ACA0()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_18200ACE4()
{
  return 0;
}

uint64_t sub_18200B720()
{
  return 0;
}

void raiseError_1(uint64_t a1, const char *a2)
{
  id v3 = objc_alloc(MEMORY[0x1E4F1CA00]);
  SEL Name = sel_getName(a2);
  int v5 = (void *)[v3 initWithName:@"NSPointerFunctionsAbstractImplementationError", +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"abstract method %s called directly on class %@", Name, objc_opt_class()), 0 reason userInfo];
  objc_exception_throw(v5);
}

void _NSXPCConnectionInitRemoteXPC()
{
  if (_MergedGlobals_112 != -1) {
    dispatch_once(&_MergedGlobals_112, &__block_literal_global_36);
  }
}

uint64_t __NSXPCCONNECTION_IS_WAITING_FOR_A_SYNCHRONOUS_REMOTE_REPLY__()
{
  return off_1EB1ED620();
}

vm_address_t machAcquire(vm_address_t a1, uint64_t (*a2)(vm_address_t), int a3)
{
  kern_return_t v9;
  uint64_t v10;
  vm_address_t dest_address[2];

  vm_address_t v3 = a1;
  dest_address[1] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    dest_address[0] = 0;
    unint64_t v4 = a2(a1);
    unint64_t v5 = v4 % *MEMORY[0x1E4F14B00];
    unint64_t v6 = *MEMORY[0x1E4F14B00] - v5;
    if (!v5) {
      unint64_t v6 = 0;
    }
    mach_vm_size_t v7 = v6 + v4;
    uint64_t v8 = (vm_map_t *)MEMORY[0x1E4F14960];
    uint64_t v9 = vm_allocate(*MEMORY[0x1E4F14960], dest_address, v6 + v4, 1);
    uint64_t v10 = 0;
    if (!v9)
    {
      if (vm_copy(*v8, v3, v7, dest_address[0]))
      {
        mach_vm_deallocate(*v8, dest_address[0], v7);
        return 0;
      }
      else
      {
        return dest_address[0];
      }
    }
    return v10;
  }
  return v3;
}

uint64_t machRelinquish(mach_vm_address_t a1, uint64_t (*a2)(void))
{
  unint64_t v3 = a2();
  unint64_t v4 = v3 % *MEMORY[0x1E4F14B00];
  unint64_t v5 = *MEMORY[0x1E4F14B00] - v4;
  if (!v4) {
    unint64_t v5 = 0;
  }
  mach_vm_size_t v6 = v5 + v3;
  vm_map_t v7 = *MEMORY[0x1E4F14960];

  return mach_vm_deallocate(v7, a1, v6);
}

NSString *pointerDescription(uint64_t a1)
{
  return +[NSString stringWithFormat:@"%p", a1];
}

NSString *cStringDescription(uint64_t a1)
{
  return +[NSString stringWithUTF8String:a1];
}

uint64_t valueHash(char *a1, uint64_t (*a2)(void))
{
  uint64_t result = a2();
  if (result >= 1)
  {
    unint64_t v4 = &a1[result];
    do
    {
      uint64_t v5 = *a1++;
      result += 17 * v5;
    }
    while (a1 < v4);
  }
  return result;
}

NSString *integerDescription(uint64_t a1)
{
  return +[NSString stringWithFormat:@"%ld", a1];
}

uint64_t _NSPointerFunctionCoding_isValidOptions(__int16 a1)
{
  unint64_t v1 = a1 & 7;
  BOOL v3 = v1 == 5 || v1 == 0;
  BOOL v4 = v1 <= 5 && v3;
  unint64_t v5 = a1 & 0x700;
  if (v5 > 0x500) {
    goto LABEL_19;
  }
  int64x2_t v6 = vdupq_n_s64(v5);
  int32x4_t v7 = (int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v6, (int64x2_t)xmmword_182331F20), (int32x4_t)vceqq_s64(v6, (int64x2_t)xmmword_182331F10)), (int8x16_t)xmmword_182331F30);
  v7.i32[0] = vaddvq_s32(v7);
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v7.i8);
  v8.i16[0] = vaddlv_u8(v8);
  __int32 v9 = v8.i32[0];
  if (v5 == 1024) {
    __int32 v9 = v8.i32[0] + 1;
  }
  if (v5 == 1280) {
    ++v9;
  }
  if (v9 == 1)
  {
    unint64_t v10 = v5 - 256;
    BOOL v11 = v10 > 0x4FF || (v10 & 0x1F00) == 256;
  }
  else
  {
LABEL_19:
    BOOL v11 = 0;
  }
  return v4 & v11;
}

void *_NSPointerFunctionCoding_bufferForCount(unint64_t a1)
{
  if (a1 >> 61) {
    return 0;
  }
  uint64_t result = malloc_type_malloc(8 * a1, 0x47288157uLL);
  if (result)
  {
    if (__CFADD__(result, a1))
    {
      free(result);
      return 0;
    }
  }
  return result;
}

id startReadARCWeakWithSentinelAt(id *a1, BOOL *a2)
{
  id v2 = *a1;
  if (a2) {
    *a2 = v2 == (id)1;
  }
  if ((unint64_t)v2 >= 2) {
    return objc_loadWeakRetained(a1);
  }
  else {
    return 0;
  }
}

void finishReadARCWeakAt(id a1)
{
  if (a1) {
}
  }

id continueReadARCWeakAt(id result)
{
  if (result) {
    return result;
  }
  return result;
}

id startReadARCWeakAt(id *a1, BOOL *a2)
{
  if (*a1)
  {
    id result = objc_loadWeakRetained(a1);
    if (!a2) {
      return result;
    }
  }
  else
  {
    id result = 0;
    if (!a2) {
      return result;
    }
  }
  *a2 = result == 0;
  return result;
}

uint64_t sub_18200E148()
{
  return 0;
}

uint64_t sub_18200E1E0()
{
  return 0;
}

uint64_t sub_18200E31C()
{
  return 0;
}

uint64_t __NSFireMachPort(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = *(void **)(a4 + 8);
  _CFAutoreleasePoolPush();
  if (objc_opt_respondsToSelector()) {
    [v5 handleMachMessage:a2];
  }

  return _CFAutoreleasePoolPop();
}

uint64_t __NSDescribeNSMachPortCallout(uint64_t a1, uint64_t a2, char *a3, size_t a4, char *a5, size_t a6)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  ClassSEL Name = object_getClassName(*(id *)(a2 + 8));
  Class Class = object_getClass(*(id *)(a2 + 8));
  int v13 = "<unknown name>";
  if (ClassName) {
    int v13 = ClassName;
  }
  snprintf(a5, a6, "(NSMachPort) %s", v13);
  memset(&v16, 0, sizeof(v16));
  uint64_t result = dladdr(Class, &v16);
  if (result)
  {
    dli_fname = v16.dli_fname;
    if (!v16.dli_fname) {
      dli_fname = "<unknown library>";
    }
    return snprintf(a3, a4, "%s", dli_fname);
  }
  return result;
}

void __destroyPortContext(void *ptr)
{
  if (ptr[3] == ~ptr[4])
  {
    ptr[1] = 0;
    _cfmp_record_nsmachport_deallocation();
    *(void *)&long long v2 = 0xFAFAFAFAFAFAFAFALL;
    *((void *)&v2 + 1) = 0xFAFAFAFAFAFAFAFALL;
    *((_OWORD *)ptr + 1) = v2;
    *((_OWORD *)ptr + 2) = v2;
    *(_OWORD *)ptr = v2;
    free(ptr);
  }
  else if (malloc_size(ptr))
  {
    NSLog((NSString *)@"*** __destroyPortContext() called with invalid context %p:{%p, %p, %p, %p, %p, %p}}:\n%@", ptr, *ptr, ptr[1], ptr[2], ptr[3], ptr[4], ptr[5], +[NSThread callStackSymbols]);
  }
  else
  {
    NSLog((NSString *)@"*** __destroyPortContext() called with invalid context %p:\n%@", ptr, +[NSThread callStackSymbols]);
  }
}

uint64_t _NSPortDeathNotify(uint64_t a1)
{
  _CFAutoreleasePoolPush();
  [+[NSNotificationCenter defaultCenter] postNotificationName:@"NSPortDidBecomeInvalidNotification" object:a1 userInfo:0];

  return _CFAutoreleasePoolPop();
}

uint64_t __NSFireMessagePort(uint64_t a1, unsigned int a2, const __CFData *a3, uint64_t a4)
{
  if (objc_opt_respondsToSelector())
  {
    CFDictionaryRef v7 = (const __CFDictionary *)CFPropertyListCreateWithData(0, a3, 0, 0, 0);
    if (v7)
    {
      CFDictionaryRef v8 = v7;
      id Value = CFDictionaryGetValue(v7, @"NSMessagePortReplyName");
      if (Value) {
        unint64_t v10 = (void *)[objc_allocWithZone((Class)NSMessagePort) initWithRemoteName:Value];
      }
      else {
        unint64_t v10 = 0;
      }
      BOOL v11 = (void *)CFDictionaryGetValue(v8, @"NSMessagePortComponents");
      _CFAutoreleasePoolPush();
      uint64_t v12 = (void *)[MEMORY[0x1E4F1CA48] array];
      uint64_t v13 = [v11 count];
      if (v13)
      {
        uint64_t v14 = v13;
        for (uint64_t i = 0; i != v14; ++i)
        {
          uint64_t v16 = [v11 objectAtIndex:i];
          if (_NSIsNSString())
          {
            uint64_t v17 = [objc_allocWithZone((Class)NSMessagePort) initWithRemoteName:v16];
            if (v17)
            {
              unsigned __int16 v18 = (void *)v17;
              [v12 addObject:v17];
            }
            else
            {
              NSLog((NSString *)@"-[NSMessagePort parseMessage:]: could not create port component; this is very bad");
            }
          }
          else
          {
            [v12 addObject:v16];
          }
        }
      }
      long long v19 = (void *)[objc_allocWithZone((Class)NSPortMessage) initWithSendPort:v10 receivePort:a4 components:v12];

      CFRelease(v8);
      [v19 setMsgid:a2];
      [*(id *)(a4 + 32) handlePortMessage:v19];

      _CFAutoreleasePoolPop();
    }
  }
  return 0;
}

NSString *_NSProgressFractionDescription(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  double v3 = 0.0;
  if ((*a1 & 0x8000000000000000) == 0 && (v1 & 0x8000000000000000) == 0 && v1 | v2)
  {
    if (v1) {
      double v3 = (double)v2 / (double)v1;
    }
    else {
      double v3 = 1.0;
    }
  }
  return +[NSString stringWithFormat:@"%lld / %lld (%0.6f)", v2, v1, *(void *)&v3];
}

uint64_t sub_18200FDAC()
{
  return 0;
}

uint64_t sub_18200FDF0()
{
  return 0;
}

uint64_t sub_18200FE34()
{
  return 0;
}

uint64_t sub_18200FE78()
{
  return 0;
}

uint64_t sub_182010350()
{
  return 0;
}

uint64_t sub_182010394()
{
  return 0;
}

uint64_t sub_182010460()
{
  return 0;
}

void sub_182010980(_Unwind_Exception *exception_object)
{
}

uint64_t sub_182010AAC()
{
  return 0;
}

uint64_t sub_182010B70()
{
  return 0;
}

__CFString *_NSIndentSpace(uint64_t a1)
{
  if (!a1) {
    return &stru_1ECA5C228;
  }
  uint64_t v1 = a1;
  uint64_t result = &stru_1ECA5C228;
  do
  {
    uint64_t result = (__CFString *)[(__CFString *)result stringByAppendingString:@"    "];
    --v1;
  }
  while (v1);
  return result;
}

uint64_t _NSFastMultiCStringConcat(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 *a9, uint64_t a10)
{
  unint64_t v10 = (unsigned char *)(result - 1);
  while (*++v10)
    ;
  uint64_t v17 = (unsigned __int8 **)&a10;
  for (uint64_t i = a9; i; uint64_t i = *v16)
  {
    int v13 = *i;
    unsigned char *v10 = v13;
    if (v13)
    {
      uint64_t v14 = i + 1;
      do
      {
        int v15 = *v14++;
        *++unint64_t v10 = v15;
      }
      while (v15);
    }
    uint64_t v16 = v17++;
  }
  return result;
}

const char *_NSNameOfClass(objc_class *a1)
{
  if (a1) {
    return class_getName(a1);
  }
  else {
    return "nil";
  }
}

uint64_t _NSCStringToUnsignedLong(char *a1, char **a2)
{
  uint64_t v4 = MEMORY[0x1E4F14390];
  do
  {
    while (1)
    {
      unsigned int v6 = *a1++;
      unsigned int v5 = v6;
      if ((v6 & 0x80000000) != 0) {
        break;
      }
      if ((*(_DWORD *)(v4 + 4 * v5 + 60) & 0x4000) == 0) {
        goto LABEL_6;
      }
    }
  }
  while (__maskrune(v5, 0x4000uLL));
LABEL_6:
  if (v5 == 43 || v5 == 45)
  {
    char v8 = *a1++;
    char v7 = v8;
  }
  else
  {
    char v7 = v5;
  }
  if (v7 == 48)
  {
    if ((*a1 | 0x20) == 0x78)
    {
      char v7 = a1[1];
      a1 += 2;
      unint64_t v9 = 16;
    }
    else
    {
      char v7 = 48;
      unint64_t v9 = 8;
    }
  }
  else
  {
    unint64_t v9 = 10;
  }
  unint64_t v10 = 0;
  char v11 = 0;
  unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL / v9;
  for (uint64_t i = a1 - 1; ; ++i)
  {
    unsigned int v14 = v7;
    LODWORD(v15) = v7 - 48;
    if (v15 > 9)
    {
      if ((v14 & 0x80000000) != 0)
      {
        if (!__maskrune(v14, 0x100uLL)) {
          break;
        }
        int v16 = __maskrune(v14, 0x8000uLL);
      }
      else
      {
        if ((*(_DWORD *)(v4 + 4 * v14 + 60) & 0x100) == 0) {
          break;
        }
        int v16 = *(_DWORD *)(v4 + 4 * v14 + 60) & 0x8000;
      }
      if (v16) {
        char v17 = -55;
      }
      else {
        char v17 = -87;
      }
      LOBYTE(v15) = v17 + v14;
    }
    if (v9 <= (char)v15) {
      break;
    }
    if (v11 & 1 | (v10 > v12))
    {
      char v11 = 1;
    }
    else
    {
      unint64_t v15 = (char)v15;
      if (v10 == v12 && v15 > ~(0xFFFFFFFFFFFFFFFFLL / v9 * v9))
      {
        char v11 = 1;
        unint64_t v10 = 0xFFFFFFFFFFFFFFFFLL / v9;
      }
      else
      {
        char v11 = 0;
        unint64_t v10 = v15 + v10 * v9;
      }
    }
    char v18 = i[1];
    char v7 = v18;
  }
  if (v11)
  {
    *__error() = 34;
    uint64_t result = -1;
  }
  else if (v5 == 45)
  {
    uint64_t result = -(uint64_t)v10;
  }
  else
  {
    uint64_t result = v10;
  }
  if (a2) {
    *a2 = i;
  }
  return result;
}

__CFString *_NSFoundationResourceDirectory()
{
  return @"/";
}

void freeenv(void **a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = a2;
    uint64_t v4 = a1;
    do
    {
      unsigned int v5 = *v4++;
      free(v5);
      --v3;
    }
    while (v3);
  }

  free(a1);
}

uint64_t _getCurrentNSHostName()
{
  int v0 = (void *)[MEMORY[0x1E4F18D48] currentHost];

  return [v0 name];
}

uint64_t _ASCII_recognize(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  a1[4] += a3;
  uint64_t v8 = [a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    uint64_t v10 = 0;
    do
    {
      while (1)
      {
        unsigned __int8 v11 = *(unsigned char *)(a2 + v10);
        if ((v11 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(a2 + v10) > 0xDu || ((1 << v11) & 0x3700) == 0))
        {
          break;
        }
        ++a1[17];
        [a4 appendByte:v11];
        if (++v10 == a3) {
          goto LABEL_15;
        }
      }
      [a4 appendPlaceholder];
      unint64_t v13 = a1[8] + 1;
      a1[8] = v13;
      ++v10;
    }
    while (v13 <= v9 && v10 != a3);
  }
LABEL_15:
  a1[12] = a1[8];
  uint64_t result = a1[17];
  a1[5] = result;
  return result;
}

uint64_t _BigE_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    int v24 = 0;
    unint64_t v10 = 0;
    CFAllocatorRef contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    while (1)
    {
      unint64_t v11 = v10;
      while (1)
      {
        unsigned __int8 v12 = *(unsigned char *)(a2 + v11);
        if ((v12 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }
        ++v11;
        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        if (v11 >= a3) {
          goto LABEL_36;
        }
      }
      unint64_t v10 = v11 + 1;
      if (v11 + 1 >= a3) {
        goto LABEL_34;
      }
      unsigned int v14 = *(unsigned __int8 *)(a2 + v11 + 1);
      unsigned int v15 = (v12 + 95);
      if ((v15 > 0x5D || v14 < 0x40 || v14 >= 0x7F)
        && (v15 > 0x5D || v14 < 0xA1 || v14 == 255)
        && ((v12 + 114) > 0x12u || v14 < 0x40 || v14 == 255)
        && ((v12 + 127) > 5u || v14 < 0x40 || v14 >= 0xE0))
      {
        goto LABEL_34;
      }
      unsigned int v20 = *(unsigned __int8 *)(a2 + v11 + 1);
      long long v21 = (void *)qword_1EB1ED688;
      CFStringRef v16 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)(a2 + v11), 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v16) {
        break;
      }
      CFStringRef cf = v16;
      CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v16, 0);
      if ([v21 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 80);
      }
      CFRelease(cf);
      int v22 = CharacterAtIndex;
      if (!CharacterAtIndex) {
        break;
      }
      if (v24)
      {
        v26[0] = v24;
        v26[1] = CharacterAtIndex;
        if ([(id)qword_1EB1ED690 indexForKey:v26 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 88);
        }
      }
      unint64_t v10 = v11 + 2;
      ++*(void *)(a1 + 48);
      [a4 appendByte1:v12 byte2:v20];
      int v24 = v22;
LABEL_35:
      if (v10 >= a3) {
        goto LABEL_36;
      }
    }
    int v24 = 0;
LABEL_34:
    [a4 appendPlaceholder];
    ++*(void *)(a1 + 96);
    unint64_t v17 = *(void *)(a1 + 64) + 1;
    *(void *)(a1 + 64) = v17;
    if (v17 > v9) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
LABEL_36:
  uint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t _Big5HKSCS_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    int v23 = 0;
    unint64_t v10 = 0;
    CFAllocatorRef contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    while (1)
    {
      unint64_t v11 = v10;
      while (1)
      {
        unsigned __int8 v12 = *(unsigned char *)(a2 + v11);
        if ((v12 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }
        ++v11;
        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        if (v11 >= a3) {
          goto LABEL_26;
        }
      }
      unint64_t v10 = v11 + 1;
      if (v11 + 1 >= a3) {
        goto LABEL_24;
      }
      if ((v12 + 121) > 0x77u) {
        goto LABEL_24;
      }
      int v14 = *(unsigned __int8 *)(a2 + v11 + 1);
      if ((v14 - 40) >= 0x57 && (v14 + 95) > 0x5Du) {
        goto LABEL_24;
      }
      unsigned int v19 = *(unsigned __int8 *)(a2 + v11 + 1);
      unsigned int v20 = (void *)qword_1EB1ED688;
      CFStringRef v15 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)(a2 + v11), 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v15) {
        break;
      }
      CFStringRef cf = v15;
      CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v15, 0);
      if ([v20 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 80);
      }
      CFRelease(cf);
      int v21 = CharacterAtIndex;
      if (!CharacterAtIndex) {
        break;
      }
      if (v23)
      {
        v25[0] = v23;
        v25[1] = CharacterAtIndex;
        if ([(id)qword_1EB1ED690 indexForKey:v25 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 88);
        }
      }
      unint64_t v10 = v11 + 2;
      ++*(void *)(a1 + 48);
      [a4 appendByte1:v12 byte2:v19];
      int v23 = v21;
LABEL_25:
      if (v10 >= a3) {
        goto LABEL_26;
      }
    }
    int v23 = 0;
LABEL_24:
    [a4 appendPlaceholder];
    ++*(void *)(a1 + 96);
    unint64_t v16 = *(void *)(a1 + 64) + 1;
    *(void *)(a1 + 64) = v16;
    if (v16 > v9) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
LABEL_26:
  uint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t _Big5_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    int v23 = 0;
    unint64_t v10 = 0;
    CFAllocatorRef contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    while (1)
    {
      unint64_t v11 = v10;
      while (1)
      {
        unsigned __int8 v12 = *(unsigned char *)(a2 + v11);
        if ((v12 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }
        ++v11;
        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        if (v11 >= a3) {
          goto LABEL_26;
        }
      }
      unint64_t v10 = v11 + 1;
      if (v11 + 1 >= a3) {
        goto LABEL_24;
      }
      if ((v12 + 95) > 0x5Du) {
        goto LABEL_24;
      }
      int v14 = *(unsigned __int8 *)(a2 + v11 + 1);
      if ((v14 - 64) >= 0x3F && (v14 + 95) > 0x5Du) {
        goto LABEL_24;
      }
      unsigned int v19 = *(unsigned __int8 *)(a2 + v11 + 1);
      unsigned int v20 = (void *)qword_1EB1ED688;
      CFStringRef v15 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)(a2 + v11), 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v15) {
        break;
      }
      CFStringRef cf = v15;
      CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v15, 0);
      if ([v20 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 80);
      }
      CFRelease(cf);
      int v21 = CharacterAtIndex;
      if (!CharacterAtIndex) {
        break;
      }
      if (v23)
      {
        v25[0] = v23;
        v25[1] = CharacterAtIndex;
        if ([(id)qword_1EB1ED690 indexForKey:v25 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 88);
        }
      }
      unint64_t v10 = v11 + 2;
      ++*(void *)(a1 + 48);
      [a4 appendByte1:v12 byte2:v19];
      int v23 = v21;
LABEL_25:
      if (v10 >= a3) {
        goto LABEL_26;
      }
    }
    int v23 = 0;
LABEL_24:
    [a4 appendPlaceholder];
    ++*(void *)(a1 + 96);
    unint64_t v16 = *(void *)(a1 + 64) + 1;
    *(void *)(a1 + 64) = v16;
    if (v16 > v9) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
LABEL_26:
  uint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t _WINDOWS936_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    int v23 = 0;
    unint64_t v10 = 0;
    CFAllocatorRef contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    while (1)
    {
      unint64_t v11 = v10;
      while (1)
      {
        unsigned __int8 v12 = *(unsigned char *)(a2 + v11);
        if ((v12 - 32) >= 0x61u
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }
        ++v11;
        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        if (v11 >= a3) {
          goto LABEL_26;
        }
      }
      unint64_t v10 = v11 + 1;
      if (v11 + 1 >= a3) {
        goto LABEL_24;
      }
      if ((v12 + 127) > 0x7Du) {
        goto LABEL_24;
      }
      unsigned int v14 = *(unsigned __int8 *)(a2 + v11 + 1);
      if (v14 < 0x40 || v14 == 255) {
        goto LABEL_24;
      }
      unsigned int v19 = *(unsigned __int8 *)(a2 + v11 + 1);
      unsigned int v20 = (void *)qword_1EB1ED688;
      CFStringRef v15 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)(a2 + v11), 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v15) {
        break;
      }
      CFStringRef cf = v15;
      CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v15, 0);
      if ([v20 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 80);
      }
      CFRelease(cf);
      int v21 = CharacterAtIndex;
      if (!CharacterAtIndex) {
        break;
      }
      if (v23)
      {
        v25[0] = v23;
        v25[1] = CharacterAtIndex;
        if ([(id)qword_1EB1ED690 indexForKey:v25 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 88);
        }
      }
      unint64_t v10 = v11 + 2;
      ++*(void *)(a1 + 48);
      [a4 appendByte1:v12 byte2:v19];
      int v23 = v21;
LABEL_25:
      if (v10 >= a3) {
        goto LABEL_26;
      }
    }
    int v23 = 0;
LABEL_24:
    [a4 appendPlaceholder];
    ++*(void *)(a1 + 96);
    unint64_t v16 = *(void *)(a1 + 64) + 1;
    *(void *)(a1 + 64) = v16;
    if (v16 > v9) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
LABEL_26:
  uint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t _WINDOWS950_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    int v23 = 0;
    unint64_t v10 = 0;
    CFAllocatorRef contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    while (1)
    {
      unint64_t v11 = v10;
      while (1)
      {
        unsigned __int8 v12 = *(unsigned char *)(a2 + v11);
        if ((v12 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }
        ++v11;
        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        if (v11 >= a3) {
          goto LABEL_27;
        }
      }
      unint64_t v10 = v11 + 1;
      if (v11 + 1 >= a3) {
        goto LABEL_25;
      }
      if ((v12 + 55) > 0xFDu) {
        goto LABEL_25;
      }
      if ((v12 + 95) > 0x58u) {
        goto LABEL_25;
      }
      unsigned int v14 = *(unsigned __int8 *)(a2 + v11 + 1);
      if (v14 < 0x40 || v14 == 255) {
        goto LABEL_25;
      }
      unsigned int v19 = *(unsigned __int8 *)(a2 + v11 + 1);
      unsigned int v20 = (void *)qword_1EB1ED688;
      CFStringRef v15 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)(a2 + v11), 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v15) {
        break;
      }
      CFStringRef cf = v15;
      CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v15, 0);
      if ([v20 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 80);
      }
      CFRelease(cf);
      int v21 = CharacterAtIndex;
      if (!CharacterAtIndex) {
        break;
      }
      if (v23)
      {
        v25[0] = v23;
        v25[1] = CharacterAtIndex;
        if ([(id)qword_1EB1ED690 indexForKey:v25 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 88);
        }
      }
      unint64_t v10 = v11 + 2;
      ++*(void *)(a1 + 48);
      [a4 appendByte1:v12 byte2:v19];
      int v23 = v21;
LABEL_26:
      if (v10 >= a3) {
        goto LABEL_27;
      }
    }
    int v23 = 0;
LABEL_25:
    [a4 appendPlaceholder];
    ++*(void *)(a1 + 96);
    unint64_t v16 = *(void *)(a1 + 64) + 1;
    *(void *)(a1 + 64) = v16;
    if (v16 > v9) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_27:
  uint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t _WINDOWS932_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    int v23 = 0;
    unint64_t v10 = 0;
    CFAllocatorRef contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    while (1)
    {
      unint64_t v11 = v10;
      while (1)
      {
        unsigned __int8 v12 = *(unsigned char *)(a2 + v11);
        if ((v12 - 32) >= 0x5Fu
          && (v12 + 95) >= 0x3Fu
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }
        ++v11;
        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        if (v11 >= a3) {
          goto LABEL_29;
        }
      }
      unint64_t v10 = v11 + 1;
      if (v11 + 1 >= a3) {
        goto LABEL_27;
      }
      int v14 = *(char *)(a2 + v11 + 1);
      if ((v12 + 6) >= 3u && (v12 + 127) >= 0x1Fu && (v12 & 0xF0) != 0xE0) {
        goto LABEL_27;
      }
      if (v14 >= -3 && (v14 - 64) > 0x3Eu) {
        goto LABEL_27;
      }
      bytes[0] = *(unsigned char *)(a2 + v11);
      unsigned __int8 v19 = v14;
      bytes[1] = v14;
      unsigned int v20 = (void *)qword_1EB1ED698;
      CFStringRef v15 = CFStringCreateWithBytesNoCopy(0, bytes, 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v15) {
        break;
      }
      CFStringRef cf = v15;
      v25[0] = CFStringGetCharacterAtIndex(v15, 0);
      if ([v20 indexForKey:v25 length:1] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 80);
      }
      CFRelease(cf);
      int v21 = v25[0];
      if (!v25[0]) {
        break;
      }
      if (v23)
      {
        v25[0] = v23;
        v25[1] = v21;
        if ([(id)qword_1EB1ED6A0 indexForKey:v25 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 88);
        }
      }
      unint64_t v10 = v11 + 2;
      ++*(void *)(a1 + 48);
      [a4 appendByte1:v12 byte2:v19];
      int v23 = v21;
LABEL_28:
      if (v10 >= a3) {
        goto LABEL_29;
      }
    }
    int v23 = 0;
LABEL_27:
    [a4 appendPlaceholder];
    ++*(void *)(a1 + 96);
    unint64_t v16 = *(void *)(a1 + 64) + 1;
    *(void *)(a1 + 64) = v16;
    if (v16 > v9) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t _WINDOWS949_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    int v23 = 0;
    unint64_t v10 = 0;
    CFAllocatorRef contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    while (1)
    {
      unint64_t v11 = v10;
      while (1)
      {
        unsigned __int8 v12 = *(unsigned char *)(a2 + v11);
        if ((v12 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }
        ++v11;
        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        if (v11 >= a3) {
          goto LABEL_26;
        }
      }
      unint64_t v10 = v11 + 1;
      if (v11 + 1 >= a3) {
        goto LABEL_24;
      }
      if ((v12 + 127) > 0x7Du) {
        goto LABEL_24;
      }
      unsigned int v14 = *(unsigned __int8 *)(a2 + v11 + 1);
      if (v14 < 0x41 || v14 == 255) {
        goto LABEL_24;
      }
      unsigned int v19 = *(unsigned __int8 *)(a2 + v11 + 1);
      unsigned int v20 = (void *)qword_1EB1ED6A8;
      CFStringRef v15 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)(a2 + v11), 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v15) {
        break;
      }
      CFStringRef cf = v15;
      CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v15, 0);
      if ([v20 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 80);
      }
      CFRelease(cf);
      int v21 = CharacterAtIndex;
      if (!CharacterAtIndex) {
        break;
      }
      if (v23)
      {
        v25[0] = v23;
        v25[1] = CharacterAtIndex;
        if ([(id)qword_1EB1ED6B0 indexForKey:v25 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 88);
        }
      }
      unint64_t v10 = v11 + 2;
      ++*(void *)(a1 + 48);
      [a4 appendByte1:v12 byte2:v19];
      int v23 = v21;
LABEL_25:
      if (v10 >= a3) {
        goto LABEL_26;
      }
    }
    int v23 = 0;
LABEL_24:
    [a4 appendPlaceholder];
    ++*(void *)(a1 + 96);
    unint64_t v16 = *(void *)(a1 + 64) + 1;
    *(void *)(a1 + 64) = v16;
    if (v16 > v9) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
LABEL_26:
  uint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t _WINDOWS874_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  a1[4] += a3;
  unint64_t v17 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    do
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      if (v11 < 0)
      {
        if ((iso8859_11Frqchars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7))) {
          ++a1[10];
        }
      }
      else if (v12 > 0x1F)
      {
        if (v12 < 0x7F)
        {
LABEL_13:
          ++a1[17];
          if (v8 > 0x7Eu || v9 >= 0x7Fu) {
            goto LABEL_21;
          }
        }
        else
        {
LABEL_20:
          ++a1[18];
LABEL_21:
          v18[0] = v9;
          v18[1] = v8;
          v18[2] = v12;
          if ([(id)qword_1EB1ED6B8 indexForBytes:v18 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
            ++a1[16];
          }
        }
        [a4 appendByte:v12];
        goto LABEL_24;
      }
      if (v12 <= 0xD && ((1 << v12) & 0x3700) != 0) {
        goto LABEL_13;
      }
      if ((v12 + 96) < 0x3Bu || (v12 + 33) < 0x1Du) {
        goto LABEL_20;
      }
      [a4 appendPlaceholder];
      unint64_t v15 = a1[8] + 1;
      a1[8] = v15;
      if (v15 > v17) {
        break;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v12) = 0;
LABEL_24:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v12;
      --v5;
    }
    while (v5);
  }
  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _EUCGB2312_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    int v23 = 0;
    unint64_t v10 = 0;
    CFAllocatorRef contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    while (1)
    {
      unint64_t v11 = v10;
      while (1)
      {
        unsigned __int8 v12 = *(unsigned char *)(a2 + v11);
        if ((v12 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }
        ++v11;
        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        if (v11 >= a3) {
          goto LABEL_26;
        }
      }
      unint64_t v10 = v11 + 1;
      if (v11 + 1 >= a3) {
        goto LABEL_24;
      }
      if ((v12 + 95) > 0x5Du) {
        goto LABEL_24;
      }
      unsigned int v14 = *(unsigned __int8 *)(a2 + v11 + 1);
      if (v14 < 0xA1 || v14 == 255) {
        goto LABEL_24;
      }
      unsigned int v19 = *(unsigned __int8 *)(a2 + v11 + 1);
      unsigned int v20 = (void *)qword_1EB1ED688;
      CFStringRef v15 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)(a2 + v11), 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v15) {
        break;
      }
      CFStringRef cf = v15;
      CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v15, 0);
      if ([v20 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 80);
      }
      CFRelease(cf);
      int v21 = CharacterAtIndex;
      if (!CharacterAtIndex) {
        break;
      }
      if (v23)
      {
        v25[0] = v23;
        v25[1] = CharacterAtIndex;
        if ([(id)qword_1EB1ED690 indexForKey:v25 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 88);
        }
      }
      unint64_t v10 = v11 + 2;
      ++*(void *)(a1 + 48);
      [a4 appendByte1:v12 byte2:v19];
      int v23 = v21;
LABEL_25:
      if (v10 >= a3) {
        goto LABEL_26;
      }
    }
    int v23 = 0;
LABEL_24:
    [a4 appendPlaceholder];
    ++*(void *)(a1 + 96);
    unint64_t v16 = *(void *)(a1 + 64) + 1;
    *(void *)(a1 + 64) = v16;
    if (v16 > v9) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
LABEL_26:
  uint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t _EUCJP_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 32) += a3;
  unint64_t v33 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    LOBYTE(v32) = 0;
    CFAllocatorRef contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    uint64_t v10 = a2 + 1;
    do
    {
      unint64_t v11 = v8;
      while (1)
      {
        unsigned __int8 v12 = *(unsigned char *)(v10 + v11 - 1);
        if ((v12 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(v10 + v11 - 1) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }
        ++v11;
        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        if (v11 >= a3) {
          goto LABEL_52;
        }
      }
      unint64_t v8 = v11 + 1;
      if (v11 + 1 >= a3) {
        goto LABEL_34;
      }
      unsigned int v14 = *(unsigned __int8 *)(v10 + v11);
      unsigned int v32 = v14;
      if ((v12 + 95) <= 0x5Du && v14 >= 0xA1 && v14 != 255)
      {
        UInt8 bytes = *(unsigned char *)(v10 + v11 - 1);
        char v35 = v14;
        uint64_t v27 = (void *)qword_1EB1ED698;
        CFStringRef v15 = CFStringCreateWithBytesNoCopy(0, &bytes, 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
        if (!v15) {
          goto LABEL_49;
        }
        CFStringRef cf = v15;
        CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v15, 0);
        if ([v27 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 80);
        }
        CFRelease(cf);
        unsigned int v28 = CharacterAtIndex;
        if (!CharacterAtIndex) {
          goto LABEL_49;
        }
        if (v9)
        {
          CharacterAtIndedouble x = v9;
          __int16 v38 = v28;
          if ([(id)qword_1EB1ED6A0 indexForKey:&CharacterAtIndex length:2] != 0x7FFFFFFFFFFFFFFFLL) {
            ++*(void *)(a1 + 88);
          }
        }
        ++*(void *)(a1 + 48);
        unint64_t v8 = v11 + 2;
        [a4 appendByte1:v12 byte2:v32];
        uint64_t v16 = v28;
        goto LABEL_51;
      }
      if (*(unsigned __int8 *)(v10 + v11 - 1) == 142 && v14 >= 0xA1 && v14 <= 0xDF)
      {
        UInt8 bytes = -114;
        char v35 = v14;
        long long v29 = (void *)qword_1EB1ED698;
        CFStringRef v17 = CFStringCreateWithBytesNoCopy(0, &bytes, 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
        if (!v17) {
          goto LABEL_49;
        }
        CFStringRef v18 = v17;
        CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v17, 0);
        if ([v29 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 80);
        }
        CFRelease(v18);
        uint64_t v16 = CharacterAtIndex;
        if (!CharacterAtIndex) {
          goto LABEL_49;
        }
        if (v9)
        {
          CharacterAtIndedouble x = v9;
          __int16 v38 = v16;
          if ([(id)qword_1EB1ED6A0 indexForKey:&CharacterAtIndex length:2] != 0x7FFFFFFFFFFFFFFFLL) {
            ++*(void *)(a1 + 88);
          }
        }
        ++*(void *)(a1 + 48);
        unint64_t v8 = v11 + 2;
        [a4 appendByte1:142 byte2:v32];
      }
      else
      {
LABEL_34:
        if (*(unsigned __int8 *)(v10 + v11 - 1) != 143 || v11 + 2 >= a3) {
          goto LABEL_50;
        }
        if ((v32 + 95) > 0x5Du) {
          goto LABEL_50;
        }
        unsigned int v20 = *(unsigned __int8 *)(v10 + v11 + 1);
        if (v20 < 0xA1 || v20 == 255) {
          goto LABEL_50;
        }
        UInt8 bytes = -113;
        char v35 = v32;
        unsigned int cfa = v20;
        char v36 = v20;
        int v30 = (void *)qword_1EB1ED698;
        CFStringRef v21 = CFStringCreateWithBytesNoCopy(0, &bytes, 3, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
        if (!v21) {
          goto LABEL_49;
        }
        CFStringRef v22 = v21;
        CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v21, 0);
        if ([v30 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 80);
        }
        CFRelease(v22);
        uint64_t v16 = CharacterAtIndex;
        if (!CharacterAtIndex)
        {
LABEL_49:
          uint64_t v9 = 0;
LABEL_50:
          [a4 appendPlaceholder];
          ++*(void *)(a1 + 96);
          unint64_t v23 = *(void *)(a1 + 64) + 1;
          *(void *)(a1 + 64) = v23;
          uint64_t v16 = v9;
          if (v23 > v33) {
            break;
          }
          goto LABEL_51;
        }
        if (v9)
        {
          CharacterAtIndedouble x = v9;
          __int16 v38 = v16;
          if ([(id)qword_1EB1ED6A0 indexForKey:&CharacterAtIndex length:2] != 0x7FFFFFFFFFFFFFFFLL) {
            ++*(void *)(a1 + 88);
          }
        }
        ++*(void *)(a1 + 48);
        unint64_t v8 = v11 + 3;
        [a4 appendByte1:143 byte2:v32 byte3:cfa];
      }
LABEL_51:
      uint64_t v9 = v16;
    }
    while (v8 < a3);
  }
LABEL_52:
  uint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t _EUCKR_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    int v23 = 0;
    unint64_t v10 = 0;
    CFAllocatorRef contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    while (1)
    {
      unint64_t v11 = v10;
      while (1)
      {
        unsigned __int8 v12 = *(unsigned char *)(a2 + v11);
        if ((v12 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }
        ++v11;
        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        if (v11 >= a3) {
          goto LABEL_26;
        }
      }
      unint64_t v10 = v11 + 1;
      if (v11 + 1 >= a3) {
        goto LABEL_24;
      }
      if ((v12 + 95) > 0x5Du) {
        goto LABEL_24;
      }
      unsigned int v14 = *(unsigned __int8 *)(a2 + v11 + 1);
      if (v14 < 0xA1 || v14 == 255) {
        goto LABEL_24;
      }
      unsigned int v19 = *(unsigned __int8 *)(a2 + v11 + 1);
      unsigned int v20 = (void *)qword_1EB1ED6A8;
      CFStringRef v15 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)(a2 + v11), 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v15) {
        break;
      }
      CFStringRef cf = v15;
      CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v15, 0);
      if ([v20 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 80);
      }
      CFRelease(cf);
      int v21 = CharacterAtIndex;
      if (!CharacterAtIndex) {
        break;
      }
      if (v23)
      {
        v25[0] = v23;
        v25[1] = CharacterAtIndex;
        if ([(id)qword_1EB1ED6B0 indexForKey:v25 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 88);
        }
      }
      unint64_t v10 = v11 + 2;
      [a4 appendByte1:v12 byte2:v19];
      ++*(void *)(a1 + 48);
      int v23 = v21;
LABEL_25:
      if (v10 >= a3) {
        goto LABEL_26;
      }
    }
    int v23 = 0;
LABEL_24:
    [a4 appendPlaceholder];
    ++*(void *)(a1 + 96);
    unint64_t v16 = *(void *)(a1 + 64) + 1;
    *(void *)(a1 + 64) = v16;
    if (v16 > v9) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
LABEL_26:
  uint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t _EUCTW_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    int v10 = 0;
    unint64_t v11 = 0;
    CFAllocatorRef contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    do
    {
      v11 += 4;
      while (1)
      {
        unsigned __int8 v12 = *(unsigned char *)(a2 + v11 - 4);
        if ((v12 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(a2 + v11 - 4) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }
        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        unint64_t v14 = v11 - 3;
        ++v11;
        if (v14 >= a3) {
          goto LABEL_44;
        }
      }
      CFStringRef v15 = (const UInt8 *)(a2 + v11 - 4);
      if (v11 - 3 < a3 && (v12 + 95) <= 0x5Du)
      {
        unsigned int v16 = *(unsigned __int8 *)(a2 + v11 - 3);
        if (v16 >= 0xA1 && v16 != 255)
        {
          unsigned int v28 = *(unsigned __int8 *)(a2 + v11 - 3);
          long long v31 = (void *)qword_1EB1ED688;
          CFStringRef v17 = CFStringCreateWithBytesNoCopy(0, v15, 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
          if (v17)
          {
            CFStringRef cf = v17;
            CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v17, 0);
            if ([v31 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
              ++*(void *)(a1 + 80);
            }
            CFRelease(cf);
            UniChar v18 = CharacterAtIndex;
            if (CharacterAtIndex)
            {
              int v33 = CharacterAtIndex;
              if (v10)
              {
                CharacterAtIndedouble x = v10;
                UniChar v36 = v18;
                if ([(id)qword_1EB1ED690 indexForKey:&CharacterAtIndex length:2] != 0x7FFFFFFFFFFFFFFFLL) {
                  ++*(void *)(a1 + 88);
                }
              }
              v11 -= 2;
              ++*(void *)(a1 + 48);
              objc_msgSend(a4, "appendByte1:byte2:", v12, v28, cf);
              goto LABEL_40;
            }
          }
          int v10 = 0;
          CFStringRef v15 = (const UInt8 *)(a2 + v11 - 4);
        }
      }
      if (v11 - 1 >= a3) {
        goto LABEL_42;
      }
      if (v12 != 142) {
        goto LABEL_42;
      }
      uint64_t v19 = a2 + v11;
      uint64_t v20 = *(unsigned __int8 *)(a2 + v11 - 3);
      if (v20 < 0xA1) {
        goto LABEL_42;
      }
      if (v20 > 0xF0) {
        goto LABEL_42;
      }
      unsigned int v21 = *(unsigned __int8 *)(v19 - 2);
      if (v21 < 0xA1) {
        goto LABEL_42;
      }
      if (v21 == 255) {
        goto LABEL_42;
      }
      unsigned int v22 = *(unsigned __int8 *)(v19 - 1);
      if (v22 < 0xA1 || v22 == 255) {
        goto LABEL_42;
      }
      unsigned int v29 = v22;
      unsigned int bytes = v21;
      unsigned int v32 = (void *)qword_1EB1ED688;
      CFStringRef v23 = CFStringCreateWithBytesNoCopy(0, v15, 4, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v23) {
        goto LABEL_41;
      }
      CFStringRef cf = v23;
      CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v23, 0);
      if ([v32 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 80);
      }
      CFRelease(cf);
      UniChar v24 = CharacterAtIndex;
      if (!CharacterAtIndex)
      {
LABEL_41:
        int v10 = 0;
LABEL_42:
        objc_msgSend(a4, "appendPlaceholder", cf);
        ++*(void *)(a1 + 96);
        unint64_t v25 = *(void *)(a1 + 64) + 1;
        *(void *)(a1 + 64) = v25;
        v11 -= 3;
        if (v25 > v9) {
          break;
        }
        continue;
      }
      int v33 = CharacterAtIndex;
      if (v10)
      {
        CharacterAtIndedouble x = v10;
        UniChar v36 = v24;
        if ([(id)qword_1EB1ED690 indexForKey:&CharacterAtIndex length:2] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 88);
        }
      }
      ++*(void *)(a1 + 48);
      objc_msgSend(a4, "appendByte1:byte2:byte3:byte4:", 142, v20, bytes, v29, cf);
LABEL_40:
      int v10 = v33;
    }
    while (v11 < a3);
  }
LABEL_44:
  uint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t _GB18030_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    int v10 = 0;
    unint64_t v11 = 0;
    CFAllocatorRef contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    do
    {
      v11 += 4;
      while (1)
      {
        int v12 = *(char *)(a2 + v11 - 4);
        if (v12 <= 31 && (v12 > 0xD || ((1 << v12) & 0x3700) == 0)) {
          break;
        }
        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        unint64_t v14 = v11 - 3;
        ++v11;
        if (v14 >= a3) {
          goto LABEL_44;
        }
      }
      CFStringRef v15 = (const UInt8 *)(a2 + v11 - 4);
      if (v11 - 3 < a3 && (v12 + 127) <= 0x7D)
      {
        int v16 = *(char *)(a2 + v11 - 3);
        if (v16 < -1 || (v16 - 64) <= 0x3Eu)
        {
          unsigned __int8 v30 = *(unsigned char *)(a2 + v11 - 3);
          int v33 = (void *)qword_1EB1ED688;
          CFStringRef v17 = CFStringCreateWithBytesNoCopy(0, v15, 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
          if (v17)
          {
            CFStringRef cf = v17;
            CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v17, 0);
            if ([v33 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
              ++*(void *)(a1 + 80);
            }
            CFRelease(cf);
            UniChar v18 = CharacterAtIndex;
            if (CharacterAtIndex)
            {
              int v35 = CharacterAtIndex;
              if (v10)
              {
                CharacterAtIndedouble x = v10;
                UniChar v38 = v18;
                if ([(id)qword_1EB1ED690 indexForKey:&CharacterAtIndex length:2] != 0x7FFFFFFFFFFFFFFFLL) {
                  ++*(void *)(a1 + 88);
                }
              }
              v11 -= 2;
              ++*(void *)(a1 + 48);
              [a4 appendByte1:v12 byte2:v30];
              goto LABEL_40;
            }
          }
          int v10 = 0;
          CFStringRef v15 = (const UInt8 *)(a2 + v11 - 4);
        }
      }
      if (v11 - 1 >= a3) {
        goto LABEL_42;
      }
      if ((v12 + 127) > 0x7D) {
        goto LABEL_42;
      }
      uint64_t v19 = a2 + v11;
      unsigned int v20 = *(unsigned __int8 *)(a2 + v11 - 3);
      if (v20 < 0x30) {
        goto LABEL_42;
      }
      if (v20 > 0x39) {
        goto LABEL_42;
      }
      unsigned int v21 = *(unsigned __int8 *)(v19 - 2);
      if (v21 < 0x81) {
        goto LABEL_42;
      }
      if (v21 == 255) {
        goto LABEL_42;
      }
      unsigned int v22 = *(unsigned __int8 *)(v19 - 1);
      if (v22 < 0x30 || v22 > 0x39) {
        goto LABEL_42;
      }
      unsigned int cfa = v22;
      unsigned int v31 = v21;
      unsigned int bytes = *(unsigned __int8 *)(a2 + v11 - 3);
      uint64_t v34 = (void *)qword_1EB1ED688;
      CFStringRef v23 = CFStringCreateWithBytesNoCopy(0, v15, 4, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v23) {
        goto LABEL_41;
      }
      CFStringRef v27 = v23;
      CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v23, 0);
      if ([v34 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 80);
      }
      CFRelease(v27);
      UniChar v24 = CharacterAtIndex;
      if (!CharacterAtIndex)
      {
LABEL_41:
        int v10 = 0;
LABEL_42:
        [a4 appendPlaceholder];
        ++*(void *)(a1 + 96);
        unint64_t v25 = *(void *)(a1 + 64) + 1;
        *(void *)(a1 + 64) = v25;
        v11 -= 3;
        if (v25 > v9) {
          break;
        }
        continue;
      }
      int v35 = CharacterAtIndex;
      if (v10)
      {
        CharacterAtIndedouble x = v10;
        UniChar v38 = v24;
        if ([(id)qword_1EB1ED690 indexForKey:&CharacterAtIndex length:2] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 88);
        }
      }
      ++*(void *)(a1 + 48);
      [a4 appendByte1:v12 byte2:bytes byte3:v31 byte4:cfa];
LABEL_40:
      int v10 = v35;
    }
    while (v11 < a3);
  }
LABEL_44:
  uint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t _GBK_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    int v23 = 0;
    unint64_t v10 = 0;
    CFAllocatorRef contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    while (1)
    {
      unint64_t v11 = v10;
      while (1)
      {
        int v12 = *(char *)(a2 + v11);
        if (v12 <= 31 && (v12 > 0xD || ((1 << v12) & 0x3700) == 0)) {
          break;
        }
        ++v11;
        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        if (v11 >= a3) {
          goto LABEL_51;
        }
      }
      unint64_t v10 = v11 + 1;
      if (v11 + 1 >= a3) {
        goto LABEL_49;
      }
      unsigned int v14 = *(unsigned __int8 *)(a2 + v11 + 1);
      if (((v12 + 95) > 8 || v14 < 0xA1 || v14 == 255)
        && ((v12 + 80) > 0x47 || v14 < 0xA1 || v14 == 255)
        && ((v12 + 127) > 0x1Fu || v14 < 0x40 || v14 == 255 || v14 == 127)
        && ((v12 + 86) > 0x54 || v14 < 0x40 || v14 > 0xA0 || v14 == 127)
        && ((v12 & 0xFFFFFFFE) != 0xFFFFFFA8 || v14 < 0x40 || v14 > 0xA0 || v14 == 127)
        && ((v12 + 86) > 5u || v14 < 0xA1 || v14 == 255)
        && ((v12 + 8) > 6 || v14 < 0xA1 || v14 == 255)
        && ((v12 + 95) > 6u || v14 < 0x40 || v14 > 0xA0 || v14 == 127))
      {
        goto LABEL_49;
      }
      unsigned int v19 = *(unsigned __int8 *)(a2 + v11 + 1);
      unsigned int v20 = (void *)qword_1EB1ED688;
      CFStringRef v15 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)(a2 + v11), 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v15) {
        break;
      }
      CFStringRef cf = v15;
      CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v15, 0);
      if ([v20 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 80);
      }
      CFRelease(cf);
      int v21 = CharacterAtIndex;
      if (!CharacterAtIndex) {
        break;
      }
      if (v23)
      {
        v25[0] = v23;
        v25[1] = CharacterAtIndex;
        if ([(id)qword_1EB1ED690 indexForKey:v25 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 88);
        }
      }
      ++*(void *)(a1 + 48);
      unint64_t v10 = v11 + 2;
      [a4 appendByte1:v12 byte2:v19];
      int v23 = v21;
LABEL_50:
      if (v10 >= a3) {
        goto LABEL_51;
      }
    }
    int v23 = 0;
LABEL_49:
    [a4 appendPlaceholder];
    ++*(void *)(a1 + 96);
    unint64_t v16 = *(void *)(a1 + 64) + 1;
    *(void *)(a1 + 64) = v16;
    if (v16 > v9) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
LABEL_51:
  uint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t _HZGB2312_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 32) += a3;
  *(_WORD *)unsigned int bytes = 31614;
  __int16 v29 = 32126;
  unint64_t v8 = [(id)a1 maxSkipBytes];
  unint64_t v9 = 0;
  char v10 = 0;
  int v25 = 0;
  CFAllocatorRef contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
  while (v9 < a3)
  {
    unsigned __int8 v11 = *(unsigned char *)(a2 + v9);
    if (v11 != 126 || v9 + 1 >= a3) {
      goto LABEL_15;
    }
    unsigned int v13 = *(unsigned __int8 *)(a2 + v9 + 1);
    if (v13 > 0x7C)
    {
      if (v13 == 126)
      {
LABEL_12:
        ++*(void *)(a1 + 48);
        v9 += 2;
        objc_msgSend(a4, "appendByte1:byte2:", 126);
      }
      else
      {
        if (v13 != 125) {
          goto LABEL_15;
        }
        v9 += 2;
        ++*(void *)(a1 + 120);
        objc_msgSend(a4, "appendByte1:byte2:", 126);
        char v10 = 0;
      }
    }
    else
    {
      if (v13 == 10) {
        goto LABEL_12;
      }
      if (v13 == 123)
      {
        v9 += 2;
        ++*(void *)(a1 + 120);
        objc_msgSend(a4, "appendByte1:byte2:", 126);
        char v10 = 1;
      }
      else
      {
LABEL_15:
        if (v10)
        {
          unint64_t v14 = v9 + 1;
          if (v9 + 1 >= a3) {
            goto LABEL_33;
          }
          if ((v11 - 33) > 0x56u) {
            goto LABEL_33;
          }
          uint64_t v15 = *(unsigned __int8 *)(a2 + v9 + 1);
          if (v15 < 0x21 || v15 > 0x7E) {
            goto LABEL_33;
          }
          char v27 = *(unsigned char *)(a2 + v9);
          char v28 = v15;
          unsigned int v22 = (void *)qword_1EB1ED688;
          unint64_t v23 = v8;
          CFStringRef v16 = CFStringCreateWithBytesNoCopy(0, bytes, 6, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
          if (!v16) {
            goto LABEL_24;
          }
          CFStringRef v17 = v16;
          v30[0] = CFStringGetCharacterAtIndex(v16, 0);
          if ([v22 indexForKey:v30 length:1] != 0x7FFFFFFFFFFFFFFFLL) {
            ++*(void *)(a1 + 80);
          }
          CFRelease(v17);
          int v18 = v30[0];
          if (!v30[0])
          {
LABEL_24:
            int v25 = 0;
            unint64_t v8 = v23;
            goto LABEL_33;
          }
          if (v25)
          {
            v30[0] = v25;
            v30[1] = v18;
            if ([(id)qword_1EB1ED690 indexForKey:v30 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
              ++*(void *)(a1 + 88);
            }
          }
          ++*(void *)(a1 + 48);
          v9 += 2;
          objc_msgSend(a4, "appendByte1:byte2:", v11, v15, v22);
          char v10 = 1;
          int v25 = v18;
          unint64_t v8 = v23;
        }
        else if ((v11 - 32) >= 0x5Fu {
               && (*(unsigned __int8 *)(a2 + v9) <= 0xDu ? (BOOL v19 = ((1 << v11) & 0x3700) == 0) : (BOOL v19 = 1), v19))
        }
        {
          unint64_t v14 = v9 + 1;
LABEL_33:
          objc_msgSend(a4, "appendPlaceholder", v22);
          ++*(void *)(a1 + 96);
          unint64_t v20 = *(void *)(a1 + 64) + 1;
          *(void *)(a1 + 64) = v20;
          unint64_t v9 = v14;
          if (v20 > v8) {
            break;
          }
        }
        else
        {
          ++v9;
          ++*(void *)(a1 + 56);
          [a4 appendByte:v11];
          char v10 = 0;
        }
      }
    }
  }
  uint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t _ISO2022CN_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 32) += a3;
  char v34 = 14;
  char v37 = 15;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    int v29 = 0;
    char v10 = 0;
    unint64_t v11 = 0;
    char v27 = a4;
    CFAllocatorRef contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    uint64_t v26 = v8;
    while (1)
    {
      uint64_t v12 = *(unsigned __int8 *)(a2 + v11);
      if (v12 == 15) {
        break;
      }
      if (v12 == 14)
      {
        ++v11;
        ++*(void *)(a1 + 120);
        [a4 appendByte:14];
        char v10 = 1;
        goto LABEL_42;
      }
      if ((v10 & 1) == 0)
      {
        if ((v12 - 32) >= 0xDFu && (v12 > 0xD || ((1 << v12) & 0x3700) == 0))
        {
          unint64_t v13 = v11 + 1;
          goto LABEL_28;
        }
        ++v11;
        ++*(void *)(a1 + 56);
        unint64_t v20 = a4;
        uint64_t v21 = v12;
        goto LABEL_40;
      }
      unint64_t v13 = v11 + 1;
      if (v11 + 1 >= a3) {
        goto LABEL_28;
      }
      uint64_t v14 = *(unsigned __int8 *)(a2 + v13);
      if ((v12 - 33) > 0xDDu || v14 < 0x21 || v14 == 255)
      {
        if (v12 != 27 || (v14 & 0xFE) != 0x4E) {
          goto LABEL_28;
        }
        v11 += 2;
        ++*(void *)(a1 + 120);
        [a4 appendByte1:27 byte2:v14];
        char v10 = 1;
LABEL_42:
        if (v11 >= a3) {
          goto LABEL_49;
        }
      }
      else
      {
        char v35 = *(unsigned char *)(a2 + v11);
        char v36 = v14;
        uint64_t v15 = (void *)qword_1EB1ED688;
        CFStringRef v16 = CFStringCreateWithBytesNoCopy(0, bytes, 8, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
        if (!v16)
        {
          int v29 = 0;
          a4 = v27;
          goto LABEL_27;
        }
        CFStringRef v17 = v16;
        v30[0] = CFStringGetCharacterAtIndex(v16, 0);
        if ([v15 indexForKey:v30 length:1] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 80);
        }
        CFRelease(v17);
        int v18 = v30[0];
        a4 = v27;
        if (v30[0])
        {
          if (v29)
          {
            v30[0] = v29;
            v30[1] = v18;
            if ([(id)qword_1EB1ED690 indexForKey:v30 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
              ++*(void *)(a1 + 88);
            }
          }
          v11 += 2;
          ++*(void *)(a1 + 48);
          objc_msgSend(v27, "appendByte1:byte2:", v12, v14, v26);
          char v10 = 1;
          int v29 = v18;
          unint64_t v9 = v26;
          goto LABEL_42;
        }
        int v29 = 0;
LABEL_27:
        unint64_t v9 = v26;
LABEL_28:
        if (v11 + 3 < a3
          && v12 == 27
          && *(unsigned char *)(a2 + v13) == 36
          && (char v22 = *(unsigned char *)(v11 + a2 + 2), (v22 - 41) <= 2u)
          && ((int v23 = *(unsigned __int8 *)(a2 + v11 + 3), (v23 - 71) < 7) || v23 == 69 || v23 == 65))
        {
          *(_WORD *)unsigned int bytes = 9243;
          char v32 = v22;
          char v33 = v23;
          unint64_t v13 = v11 + 4;
          ++*(void *)(a1 + 120);
          objc_msgSend(a4, "appendByte1:byte2:byte3:byte4:", 27, 36, v26);
        }
        else
        {
          objc_msgSend(a4, "appendPlaceholder", v26);
          ++*(void *)(a1 + 96);
          unint64_t v24 = *(void *)(a1 + 64) + 1;
          *(void *)(a1 + 64) = v24;
          if (v24 > v9) {
            goto LABEL_49;
          }
        }
        unint64_t v11 = v13;
        if (v13 >= a3) {
          goto LABEL_49;
        }
      }
    }
    ++v11;
    ++*(void *)(a1 + 120);
    unint64_t v20 = a4;
    uint64_t v21 = 15;
LABEL_40:
    objc_msgSend(v20, "appendByte:", v21, v26);
    char v10 = 0;
    goto LABEL_42;
  }
LABEL_49:
  uint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t _ISO2022JP1_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  *(void *)(a1 + 32) += a3;
  return recognizeISO2022JP(a2, a3, (void *)(a1 + 40), (void *)(a1 + 48), (void *)(a1 + 56), (void *)(a1 + 120), (unint64_t *)(a1 + 64), (uint64_t)&iso2022jpEscape, 8uLL, 3uLL, (char *)&iso2022jp1Escape, 1, *(_DWORD *)(a1 + 24), (void *)(a1 + 80), (void *)(a1 + 88), (void *)(a1 + 96), a4, [(id)a1 maxSkipBytes]);
}

uint64_t _ISO2022JP2_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  *(void *)(a1 + 32) += a3;
  return recognizeISO2022JP(a2, a3, (void *)(a1 + 40), (void *)(a1 + 48), (void *)(a1 + 56), (void *)(a1 + 120), (unint64_t *)(a1 + 64), (uint64_t)&iso2022jp2_3Escape, 0xEuLL, 9uLL, "DC", 2, *(_DWORD *)(a1 + 24), (void *)(a1 + 80), (void *)(a1 + 88), (void *)(a1 + 96), a4, [(id)a1 maxSkipBytes]);
}

uint64_t _ISO2022JP_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  *(void *)(a1 + 32) += a3;
  return recognizeISO2022JP(a2, a3, (void *)(a1 + 40), (void *)(a1 + 48), (void *)(a1 + 56), (void *)(a1 + 120), (unint64_t *)(a1 + 64), (uint64_t)&iso2022jpEscape, 8uLL, 3uLL, 0, 0, *(_DWORD *)(a1 + 24), (void *)(a1 + 80), (void *)(a1 + 88), (void *)(a1 + 96), a4, [(id)a1 maxSkipBytes]);
}

uint64_t _ISO2022KR_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 32) += a3;
  *(_DWORD *)unsigned int bytes = 1126769691;
  unint64_t v8 = [(id)a1 maxSkipBytes];
  unint64_t v9 = 0;
  char v10 = 0;
  int v26 = 0;
  CFAllocatorRef contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
  while (1)
  {
    unint64_t v11 = v9;
LABEL_3:
    if (v11 >= a3) {
      goto LABEL_42;
    }
    unint64_t v9 = v11 + 2;
    while (1)
    {
      uint64_t v12 = *(unsigned __int8 *)(a2 + v9 - 2);
      if (v12 != 27) {
        break;
      }
      if (v9 + 1 >= a3 || *(unsigned char *)(a2 + v9 - 1) != 36 || *(unsigned char *)(a2 + v9) != 41 || *(unsigned char *)(a2 + v9 + 1) != 67) {
        goto LABEL_14;
      }
      ++*(void *)(a1 + 120);
      unint64_t v13 = v9 + 2;
      [a4 appendBytes:v9 + 2 + a2 count:4];
      v9 += 4;
      if (v13 >= a3) {
        goto LABEL_42;
      }
    }
    if (v12 == 14)
    {
      --v9;
      ++*(void *)(a1 + 120);
      char v28 = 14;
      [a4 appendByte:14];
      char v10 = 1;
      continue;
    }
    if (v12 == 15)
    {
      --v9;
      ++*(void *)(a1 + 120);
      char v28 = 15;
      unint64_t v20 = a4;
      uint64_t v21 = 15;
      goto LABEL_37;
    }
LABEL_14:
    if ((v10 & 1) == 0)
    {
      if ((v12 - 32) >= 0x5F && (v12 > 0xD || ((1 << v12) & 0x3700) == 0))
      {
        unint64_t v11 = v9 - 1;
        goto LABEL_32;
      }
      --v9;
      ++*(void *)(a1 + 56);
      unint64_t v20 = a4;
      uint64_t v21 = v12;
LABEL_37:
      [v20 appendByte:v21];
      char v10 = 0;
      continue;
    }
    unint64_t v11 = v9 - 1;
    if (v9 - 1 >= a3) {
      goto LABEL_32;
    }
    if ((v12 - 33) > 0x5D) {
      goto LABEL_32;
    }
    uint64_t v14 = *(unsigned __int8 *)(a2 + v9 - 1);
    if (v14 < 0x21 || v14 > 0x7E) {
      goto LABEL_32;
    }
    char v29 = *(unsigned char *)(a2 + v9 - 2);
    char v30 = v14;
    int v23 = (void *)qword_1EB1ED6A8;
    unint64_t v24 = v8;
    CFStringRef v15 = CFStringCreateWithBytesNoCopy(0, bytes, 7, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
    if (!v15) {
      break;
    }
    CFStringRef v16 = v15;
    v31[0] = CFStringGetCharacterAtIndex(v15, 0);
    if ([v23 indexForKey:v31 length:1] != 0x7FFFFFFFFFFFFFFFLL) {
      ++*(void *)(a1 + 80);
    }
    CFRelease(v16);
    int v17 = v31[0];
    if (!v31[0]) {
      break;
    }
    if (v26)
    {
      v31[0] = v26;
      v31[1] = v17;
      if ([(id)qword_1EB1ED6B0 indexForKey:v31 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 88);
      }
    }
    ++*(void *)(a1 + 48);
    objc_msgSend(a4, "appendByte1:byte2:", v12, v14, v23);
    char v10 = 1;
    int v26 = v17;
    unint64_t v8 = v24;
  }
  int v26 = 0;
  unint64_t v8 = v24;
LABEL_32:
  objc_msgSend(a4, "appendPlaceholder", v23);
  ++*(void *)(a1 + 96);
  unint64_t v19 = *(void *)(a1 + 64) + 1;
  *(void *)(a1 + 64) = v19;
  if (v19 <= v8) {
    goto LABEL_3;
  }
LABEL_42:
  uint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t _ISOLATIN1_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  a1[4] += a3;
  unint64_t v17 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      if (v11 < 0)
      {
        if ((isolatin1FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)))
        {
          BOOL v13 = 0;
          ++a1[10];
        }
        else
        {
          BOOL v13 = 0;
        }
      }
      else
      {
        BOOL v13 = v12 != 127;
        if ((v12 - 32) < 0x5F) {
          break;
        }
      }
      BOOL v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      if (!v14 || v12 >= 0xA0) {
        break;
      }
      [a4 appendPlaceholder];
      unint64_t v15 = a1[8] + 1;
      a1[8] = v15;
      if (v15 > v17) {
        goto LABEL_26;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v12) = 0;
LABEL_21:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v12;
      if (!--v5) {
        goto LABEL_26;
      }
    }
    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_20:
        [a4 appendByte:v12];
        goto LABEL_21;
      }
    }
    else
    {
      ++a1[18];
    }
    v18[0] = v9;
    v18[1] = v8;
    v18[2] = v12;
    if ([(id)qword_1EB1ED6C0 indexForBytes:v18 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_20;
  }
LABEL_26:
  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISOLATIN10_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  a1[4] += a3;
  unint64_t v17 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      if (v11 < 0)
      {
        if ((isolatin10FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)))
        {
          BOOL v13 = 0;
          ++a1[10];
        }
        else
        {
          BOOL v13 = 0;
        }
      }
      else
      {
        BOOL v13 = v12 != 127;
        if ((v12 - 32) < 0x5F) {
          break;
        }
      }
      BOOL v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      if (!v14 || v12 >= 0xA0) {
        break;
      }
      [a4 appendPlaceholder];
      unint64_t v15 = a1[8] + 1;
      a1[8] = v15;
      if (v15 > v17) {
        goto LABEL_26;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v12) = 0;
LABEL_21:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v12;
      if (!--v5) {
        goto LABEL_26;
      }
    }
    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_20:
        [a4 appendByte:v12];
        goto LABEL_21;
      }
    }
    else
    {
      ++a1[18];
    }
    v18[0] = v9;
    v18[1] = v8;
    v18[2] = v12;
    if ([(id)qword_1EB1ED6C8 indexForBytes:v18 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_20;
  }
LABEL_26:
  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISOLATIN2_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  a1[4] += a3;
  uint64_t v8 = [a1 maxSkipBytes];
  if (v5)
  {
    unint64_t v9 = v8;
    unsigned __int8 v10 = 0;
    unsigned __int8 v11 = 0;
    while (1)
    {
      int v13 = *a2++;
      unsigned __int8 v12 = v13;
      uint64_t v14 = v13;
      if (v13 < 0 && ((isolatin2FrqChars[((unint64_t)v12 >> 3) & 0xF] >> (v14 & 7)) & 1) != 0) {
        ++a1[10];
      }
      if ((vmaxv_u16((uint16x4_t)vceq_s16(vdup_n_s16(v14), (int16x4_t)0x9000C000A000DLL)) & 1) == 0
        && v11 != 8
        && v14 <= 0x9F
        && (v14 - 32) > 0x5Eu)
      {
        [a4 appendPlaceholder];
        unint64_t v15 = a1[8] + 1;
        a1[8] = v15;
        if (v15 > v9) {
          goto LABEL_21;
        }
        unsigned __int8 v10 = 0;
        LOBYTE(v14) = 0;
        goto LABEL_20;
      }
      if (v14 >= 0x7F) {
        break;
      }
      ++a1[17];
      if (v10 > 0x7Eu || v11 >= 0x7Fu) {
        goto LABEL_17;
      }
LABEL_19:
      [a4 appendByte:v14];
LABEL_20:
      unsigned __int8 v11 = v10;
      unsigned __int8 v10 = v14;
      if (!--v5) {
        goto LABEL_21;
      }
    }
    ++a1[18];
LABEL_17:
    v17[0] = v11;
    v17[1] = v10;
    void v17[2] = v14;
    if ([(id)qword_1EB1ED6D0 indexForBytes:v17 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_19;
  }
LABEL_21:
  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISOLATIN3_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  a1[4] += a3;
  uint64_t v8 = [a1 maxSkipBytes];
  if (v5)
  {
    unint64_t v9 = v8;
    unsigned __int8 v10 = 0;
    unsigned __int8 v11 = 0;
    do
    {
      int v13 = *a2++;
      unsigned __int8 v12 = v13;
      uint64_t v14 = v13;
      if (v13 < 0)
      {
        if ((isolatin3FrqChars[((unint64_t)v12 >> 3) & 0xF] >> (v14 & 7)))
        {
          BOOL v15 = 0;
          ++a1[10];
        }
        else
        {
          BOOL v15 = 0;
        }
      }
      else
      {
        BOOL v15 = v14 != 127;
        if ((v14 - 32) < 0x5F) {
          goto LABEL_13;
        }
      }
      BOOL v16 = v14 > 0xD || ((1 << v14) & 0x3700) == 0;
      if (v16 && (v14 < 0xA0 || v14 == 165))
      {
LABEL_18:
        [a4 appendPlaceholder];
        unint64_t v18 = a1[8] + 1;
        a1[8] = v18;
        if (v18 > v9) {
          break;
        }
        unsigned __int8 v10 = 0;
        LOBYTE(v14) = 0;
        goto LABEL_20;
      }
LABEL_13:
      if ((v14 & 0xFFFFFFEF) == 0xAE) {
        goto LABEL_18;
      }
      if ((v14 - 195) <= 0x2D && ((1 << (v14 + 61)) & 0x200100002001) != 0) {
        goto LABEL_18;
      }
      if (!v15)
      {
        ++a1[18];
LABEL_30:
        v20[0] = v11;
        v20[1] = v10;
        v20[2] = v14;
        if ([(id)qword_1EB1ED6D8 indexForBytes:v20 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
          ++a1[16];
        }
        goto LABEL_32;
      }
      ++a1[17];
      if (v10 > 0x7Eu || v11 >= 0x7Fu) {
        goto LABEL_30;
      }
LABEL_32:
      [a4 appendByte:v14];
LABEL_20:
      unsigned __int8 v11 = v10;
      unsigned __int8 v10 = v14;
      --v5;
    }
    while (v5);
  }
  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISOLATIN4_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  a1[4] += a3;
  unint64_t v17 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      if (v11 < 0)
      {
        if ((isolatin4FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)))
        {
          BOOL v13 = 0;
          ++a1[10];
        }
        else
        {
          BOOL v13 = 0;
        }
      }
      else
      {
        BOOL v13 = v12 != 127;
        if ((v12 - 32) < 0x5F) {
          break;
        }
      }
      BOOL v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      if (!v14 || v12 >= 0xA0) {
        break;
      }
      [a4 appendPlaceholder];
      unint64_t v15 = a1[8] + 1;
      a1[8] = v15;
      if (v15 > v17) {
        goto LABEL_26;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v12) = 0;
LABEL_21:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v12;
      if (!--v5) {
        goto LABEL_26;
      }
    }
    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_20:
        [a4 appendByte:v12];
        goto LABEL_21;
      }
    }
    else
    {
      ++a1[18];
    }
    v18[0] = v9;
    v18[1] = v8;
    v18[2] = v12;
    if ([(id)qword_1EB1ED6E0 indexForBytes:v18 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_20;
  }
LABEL_26:
  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISOLATIN5_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  a1[4] += a3;
  unint64_t v17 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      if (v11 < 0)
      {
        if ((isolatin5FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)))
        {
          BOOL v13 = 0;
          ++a1[10];
        }
        else
        {
          BOOL v13 = 0;
        }
      }
      else
      {
        BOOL v13 = v12 != 127;
        if ((v12 - 32) < 0x5F) {
          break;
        }
      }
      BOOL v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      if (!v14 || v12 >= 0xA0) {
        break;
      }
      [a4 appendPlaceholder];
      unint64_t v15 = a1[8] + 1;
      a1[8] = v15;
      if (v15 > v17) {
        goto LABEL_26;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v12) = 0;
LABEL_21:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v12;
      if (!--v5) {
        goto LABEL_26;
      }
    }
    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_20:
        [a4 appendByte:v12];
        goto LABEL_21;
      }
    }
    else
    {
      ++a1[18];
    }
    v18[0] = v9;
    v18[1] = v8;
    v18[2] = v12;
    if ([(id)qword_1EB1ED6E8 indexForBytes:v18 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_20;
  }
LABEL_26:
  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISOLATIN6_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  a1[4] += a3;
  unint64_t v17 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      if (v11 < 0)
      {
        if ((isolatin6FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)))
        {
          BOOL v13 = 0;
          ++a1[10];
        }
        else
        {
          BOOL v13 = 0;
        }
      }
      else
      {
        BOOL v13 = v12 != 127;
        if ((v12 - 32) < 0x5F) {
          break;
        }
      }
      BOOL v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      if (!v14 || v12 >= 0xA0) {
        break;
      }
      [a4 appendPlaceholder];
      unint64_t v15 = a1[8] + 1;
      a1[8] = v15;
      if (v15 > v17) {
        goto LABEL_26;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v12) = 0;
LABEL_21:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v12;
      if (!--v5) {
        goto LABEL_26;
      }
    }
    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_20:
        [a4 appendByte:v12];
        goto LABEL_21;
      }
    }
    else
    {
      ++a1[18];
    }
    v18[0] = v9;
    v18[1] = v8;
    v18[2] = v12;
    if ([(id)qword_1EB1ED6F0 indexForBytes:v18 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_20;
  }
LABEL_26:
  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISOLATIN7_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  a1[4] += a3;
  unint64_t v17 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      if (v11 < 0)
      {
        if ((isolatin7FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)))
        {
          BOOL v13 = 0;
          ++a1[10];
        }
        else
        {
          BOOL v13 = 0;
        }
      }
      else
      {
        BOOL v13 = v12 != 127;
        if ((v12 - 32) < 0x5F) {
          break;
        }
      }
      BOOL v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      if (!v14 || v12 >= 0xA0) {
        break;
      }
      [a4 appendPlaceholder];
      unint64_t v15 = a1[8] + 1;
      a1[8] = v15;
      if (v15 > v17) {
        goto LABEL_26;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v12) = 0;
LABEL_21:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v12;
      if (!--v5) {
        goto LABEL_26;
      }
    }
    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_20:
        [a4 appendByte:v12];
        goto LABEL_21;
      }
    }
    else
    {
      ++a1[18];
    }
    v18[0] = v9;
    v18[1] = v8;
    v18[2] = v12;
    if ([(id)qword_1EB1ED6F8 indexForBytes:v18 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_20;
  }
LABEL_26:
  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISOLATIN8_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  a1[4] += a3;
  unint64_t v17 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      if (v11 < 0)
      {
        if ((isolatin8FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)))
        {
          BOOL v13 = 0;
          ++a1[10];
        }
        else
        {
          BOOL v13 = 0;
        }
      }
      else
      {
        BOOL v13 = v12 != 127;
        if ((v12 - 32) < 0x5F) {
          break;
        }
      }
      BOOL v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      if (!v14 || v12 >= 0xA0) {
        break;
      }
      [a4 appendPlaceholder];
      unint64_t v15 = a1[8] + 1;
      a1[8] = v15;
      if (v15 > v17) {
        goto LABEL_26;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v12) = 0;
LABEL_21:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v12;
      if (!--v5) {
        goto LABEL_26;
      }
    }
    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_20:
        [a4 appendByte:v12];
        goto LABEL_21;
      }
    }
    else
    {
      ++a1[18];
    }
    v18[0] = v9;
    v18[1] = v8;
    v18[2] = v12;
    if ([(id)qword_1EB1ED700 indexForBytes:v18 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_20;
  }
LABEL_26:
  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISOLATIN9_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  a1[4] += a3;
  unint64_t v17 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      if (v11 < 0)
      {
        if ((isolatin9FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)))
        {
          BOOL v13 = 0;
          ++a1[10];
        }
        else
        {
          BOOL v13 = 0;
        }
      }
      else
      {
        BOOL v13 = v12 != 127;
        if ((v12 - 32) < 0x5F) {
          break;
        }
      }
      BOOL v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      if (!v14 || v12 >= 0xA0) {
        break;
      }
      [a4 appendPlaceholder];
      unint64_t v15 = a1[8] + 1;
      a1[8] = v15;
      if (v15 > v17) {
        goto LABEL_26;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v12) = 0;
LABEL_21:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v12;
      if (!--v5) {
        goto LABEL_26;
      }
    }
    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_20:
        [a4 appendByte:v12];
        goto LABEL_21;
      }
    }
    else
    {
      ++a1[18];
    }
    v18[0] = v9;
    v18[1] = v8;
    v18[2] = v12;
    if ([(id)qword_1EB1ED708 indexForBytes:v18 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_20;
  }
LABEL_26:
  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISO88596_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  a1[4] += a3;
  unint64_t v20 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      int v10 = v11;
      unsigned int v12 = v11;
      if (v11 < 0)
      {
        BOOL v13 = 0;
        if ((iso8859_6FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7))) {
          ++a1[10];
        }
      }
      else
      {
        BOOL v13 = v10 != 127;
        if ((v10 - 32) < 0x5F) {
          break;
        }
      }
      BOOL v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      BOOL v15 = v14 && (v10 + 63) >= 0x1A;
      if (!v15 || (v10 + 32) < 0x13u) {
        break;
      }
      unsigned int v17 = v12 - 160;
      if (v17 <= 0x1F && ((1 << v17) & 0x88003011) != 0) {
        break;
      }
      [a4 appendPlaceholder];
      unint64_t v18 = a1[8] + 1;
      a1[8] = v18;
      if (v18 > v20) {
        goto LABEL_32;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v10) = 0;
LABEL_26:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v10;
      if (!--v5) {
        goto LABEL_32;
      }
    }
    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_25:
        [a4 appendByte:v10];
        goto LABEL_26;
      }
    }
    else
    {
      ++a1[18];
    }
    v21[0] = v9;
    v21[1] = v8;
    v21[2] = v10;
    if ([(id)qword_1EB1ED710 indexForBytes:v21 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_25;
  }
LABEL_32:
  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISO88595_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  a1[4] += a3;
  unint64_t v17 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      if (v11 < 0)
      {
        if ((iso8859_5FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)))
        {
          BOOL v13 = 0;
          ++a1[10];
        }
        else
        {
          BOOL v13 = 0;
        }
      }
      else
      {
        BOOL v13 = v12 != 127;
        if ((v12 - 32) < 0x5F) {
          break;
        }
      }
      BOOL v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      if (!v14 || v12 >= 0xA0) {
        break;
      }
      [a4 appendPlaceholder];
      unint64_t v15 = a1[8] + 1;
      a1[8] = v15;
      if (v15 > v17) {
        goto LABEL_26;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v12) = 0;
LABEL_21:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v12;
      if (!--v5) {
        goto LABEL_26;
      }
    }
    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_20:
        [a4 appendByte:v12];
        goto LABEL_21;
      }
    }
    else
    {
      ++a1[18];
    }
    v18[0] = v9;
    v18[1] = v8;
    v18[2] = v12;
    if ([(id)qword_1EB1ED718 indexForBytes:v18 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_20;
  }
LABEL_26:
  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISO88597_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  a1[4] += a3;
  unint64_t v17 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      int v10 = v11;
      unsigned int v12 = v11;
      if (v11 < 0)
      {
        BOOL v13 = 0;
        if ((windows1253[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7))) {
          ++a1[10];
        }
      }
      else
      {
        BOOL v13 = v10 != 127;
        if ((v10 - 32) < 0x5F) {
          break;
        }
      }
      BOOL v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      if (!v14 || (v10 + 1) >= 0xA1u && v12 != 174 && v12 != 210) {
        break;
      }
      [a4 appendPlaceholder];
      unint64_t v15 = a1[8] + 1;
      a1[8] = v15;
      if (v15 > v17) {
        goto LABEL_27;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v10) = 0;
LABEL_20:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v10;
      if (!--v5) {
        goto LABEL_27;
      }
    }
    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_19:
        [a4 appendByte:v10];
        goto LABEL_20;
      }
    }
    else
    {
      ++a1[18];
    }
    v18[0] = v9;
    v18[1] = v8;
    v18[2] = v10;
    if ([(id)qword_1EB1ED720 indexForBytes:v18 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_19;
  }
LABEL_27:
  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISO88598_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  a1[4] += a3;
  unint64_t v19 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      int v10 = v11;
      unsigned int v12 = v11;
      if (v11 < 0)
      {
        BOOL v13 = 0;
        if ((iso8859_8FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7))) {
          ++a1[10];
        }
      }
      else
      {
        BOOL v13 = v10 != 127;
        if ((v10 - 32) < 0x5F) {
          break;
        }
      }
      BOOL v14 = v12 > 0xD;
      int v15 = (1 << v12) & 0x3700;
      if (!v14 && v15 != 0) {
        break;
      }
      if ((v10 + 96) >= 0x1F)
      {
        if ((v10 + 33) <= 0x1Fu && (v10 + 3) < 0xFEu) {
          break;
        }
      }
      else if (v10 != -95)
      {
        break;
      }
      [a4 appendPlaceholder];
      unint64_t v17 = a1[8] + 1;
      a1[8] = v17;
      if (v17 > v19) {
        goto LABEL_29;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v10) = 0;
LABEL_20:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v10;
      if (!--v5) {
        goto LABEL_29;
      }
    }
    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_19:
        [a4 appendByte:v10];
        goto LABEL_20;
      }
    }
    else
    {
      ++a1[18];
    }
    v20[0] = v9;
    v20[1] = v8;
    v20[2] = v10;
    if ([(id)qword_1EB1ED728 indexForBytes:v20 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_19;
  }
LABEL_29:
  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISO885911_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  a1[4] += a3;
  unint64_t v19 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      int v10 = v11;
      unsigned int v12 = v11;
      if (v11 < 0)
      {
        BOOL v13 = 0;
        if ((iso8859_11Frqchars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7))) {
          ++a1[10];
        }
      }
      else
      {
        BOOL v13 = v10 != 127;
        if ((v10 - 32) < 0x5F) {
          break;
        }
      }
      BOOL v14 = v12 > 0xD;
      int v15 = (1 << v12) & 0x3700;
      BOOL v16 = v14 || v15 == 0;
      if (!v16 || (v10 + 96) < 0x3B || (v10 + 33) <= 0x1Cu) {
        break;
      }
      [a4 appendPlaceholder];
      unint64_t v17 = a1[8] + 1;
      a1[8] = v17;
      if (v17 > v19) {
        goto LABEL_26;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v10) = 0;
LABEL_20:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v10;
      if (!--v5) {
        goto LABEL_26;
      }
    }
    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_19:
        [a4 appendByte:v10];
        goto LABEL_20;
      }
    }
    else
    {
      ++a1[18];
    }
    v20[0] = v9;
    v20[1] = v8;
    v20[2] = v10;
    if ([(id)qword_1EB1ED730 indexForBytes:v20 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_19;
  }
LABEL_26:
  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _SHIFTJISX0213_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    int v23 = 0;
    unint64_t v10 = 0;
    CFAllocatorRef contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    while (1)
    {
      unint64_t v11 = v10;
      while (1)
      {
        unsigned __int8 v12 = *(unsigned char *)(a2 + v11);
        if ((v12 - 32) >= 0x5Fu
          && (v12 + 95) >= 0x3Fu
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }
        ++v11;
        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        if (v11 >= a3) {
          goto LABEL_28;
        }
      }
      unint64_t v10 = v11 + 1;
      if (v11 + 1 >= a3) {
        goto LABEL_26;
      }
      int v14 = *(char *)(a2 + v11 + 1);
      if ((v12 + 127) >= 0x1Fu && (v12 & 0xF0) != 0xE0) {
        goto LABEL_26;
      }
      if (v14 >= -3 && (v14 - 64) > 0x3Eu) {
        goto LABEL_26;
      }
      bytes[0] = *(unsigned char *)(a2 + v11);
      unsigned __int8 v19 = v14;
      bytes[1] = v14;
      unint64_t v20 = (void *)qword_1EB1ED698;
      CFStringRef v15 = CFStringCreateWithBytesNoCopy(0, bytes, 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v15) {
        break;
      }
      CFStringRef cf = v15;
      v25[0] = CFStringGetCharacterAtIndex(v15, 0);
      if ([v20 indexForKey:v25 length:1] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 80);
      }
      CFRelease(cf);
      int v21 = v25[0];
      if (!v25[0]) {
        break;
      }
      if (v23)
      {
        v25[0] = v23;
        v25[1] = v21;
        if ([(id)qword_1EB1ED6A0 indexForKey:v25 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 88);
        }
      }
      ++*(void *)(a1 + 48);
      unint64_t v10 = v11 + 2;
      [a4 appendByte1:v12 byte2:v19];
      int v23 = v21;
LABEL_27:
      if (v10 >= a3) {
        goto LABEL_28;
      }
    }
    int v23 = 0;
LABEL_26:
    [a4 appendPlaceholder];
    ++*(void *)(a1 + 96);
    unint64_t v16 = *(void *)(a1 + 64) + 1;
    *(void *)(a1 + 64) = v16;
    if (v16 > v9) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

unint64_t _UTF16_recognize(uint64_t a1, unsigned __int16 *a2, unint64_t a3, void *a4)
{
  *(void *)(a1 + 32) += a3;
  if (a3 < 2) {
    return 0;
  }
  if ((__int16)*a2 == -2)
  {
    BOOL v5 = 1;
    *(unsigned char *)(a1 + 161) = 1;
  }
  else
  {
    BOOL v5 = *(unsigned char *)(a1 + 161) != 0;
  }
  return recognizeUTF16(a2, a3, v5, (void *)(a1 + 40), (void *)(a1 + 48), (void *)(a1 + 64), (void *)(a1 + 96), (unsigned char *)(a1 + 162), a4, (void *)(a1 + 72));
}

unint64_t _UTF16BE_recognize(uint64_t a1, unsigned __int16 *a2, unint64_t a3, void *a4)
{
  *(void *)(a1 + 32) += a3;
  if (a3 < 2) {
    return 0;
  }
  *(unsigned char *)(a1 + 161) = 1;
  return recognizeUTF16(a2, a3, 1, (void *)(a1 + 40), (void *)(a1 + 48), (void *)(a1 + 64), (void *)(a1 + 96), (unsigned char *)(a1 + 162), a4, (void *)(a1 + 72));
}

unint64_t _UTF16LE_recognize(uint64_t a1, unsigned __int16 *a2, unint64_t a3, void *a4)
{
  *(void *)(a1 + 32) += a3;
  if (a3 < 2) {
    return 0;
  }
  *(unsigned char *)(a1 + 161) = 0;
  return recognizeUTF16(a2, a3, 0, (void *)(a1 + 40), (void *)(a1 + 48), (void *)(a1 + 64), (void *)(a1 + 96), (unsigned char *)(a1 + 162), a4, (void *)(a1 + 72));
}

unint64_t _UTF32_recognize(uint64_t a1, _DWORD *a2, unint64_t a3, void *a4)
{
  *(void *)(a1 + 32) += a3;
  if (a3 < 4) {
    return 0;
  }
  *(unsigned char *)(a1 + 161) = *a2 == 65534;
  [a4 appendUTF32Char:65279];
  int v9 = *(unsigned __int8 *)(a1 + 161);

  return recognizeUTF32(a2, a3, v9, (void *)(a1 + 40), (void *)(a1 + 64), (void *)(a1 + 96), (unsigned char *)(a1 + 162), a4);
}

unint64_t _UTF32BE_recognize(uint64_t a1, _DWORD *a2, unint64_t a3, void *a4)
{
  *(void *)(a1 + 32) += a3;
  if (a3 < 4) {
    return 0;
  }
  *(unsigned char *)(a1 + 161) = 1;
  return recognizeUTF32(a2, a3, 1, (void *)(a1 + 40), (void *)(a1 + 64), (void *)(a1 + 96), (unsigned char *)(a1 + 162), a4);
}

unint64_t _UTF32LE_recognize(uint64_t a1, _DWORD *a2, unint64_t a3, void *a4)
{
  *(void *)(a1 + 32) += a3;
  if (a3 < 4) {
    return 0;
  }
  *(unsigned char *)(a1 + 161) = 0;
  return recognizeUTF32(a2, a3, 0, (void *)(a1 + 40), (void *)(a1 + 64), (void *)(a1 + 96), (unsigned char *)(a1 + 162), a4);
}

uint64_t _UTF7_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    char v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = *(unsigned __int8 *)(a2 + v11);
      unint64_t v13 = v11 + 1;
      if (v12 == 43 && v13 < a3)
      {
        int v18 = *(unsigned __int8 *)(a2 + v13);
        if (v18 == 45) {
          goto LABEL_34;
        }
        BOOL v19 = (v18 - 48) >= 0xA && (v18 & 0xFFFFFFDF) - 65 >= 0x1A;
        if (!v19 || (v18 | 4) == 0x2F) {
          break;
        }
      }
      if (v10)
      {
        if (((v12 & 0xDF) - 65) < 0x1Au
          || (v12 != 43 ? (BOOL v15 = (v12 - 47) > 0xAu) : (BOOL v15 = 0), !v15))
        {
          unint64_t v13 = v11 + 1;
          ++*(void *)(a1 + 112);
          char v10 = 1;
          goto LABEL_47;
        }
        BOOL v22 = (v12 - 32) < 0x5E || (v12 - 9) < 2 || v12 == 13;
        if (v12 != 45 && v22) {
          goto LABEL_46;
        }
        if (v12 == 45)
        {
          unint64_t v13 = v11 + 1;
          if (v11 + 1 < a3)
          {
            if (*(unsigned char *)(a2 + v13) == 45)
            {
              unint64_t v13 = v11 + 2;
              *(void *)(a1 + 112) += 2;
              [a4 appendByte:45];
              char v10 = 0;
              uint64_t v12 = *(unsigned __int8 *)(v11 + a2 + 3);
            }
            else
            {
LABEL_55:
              ++*(void *)(a1 + 112);
              char v10 = 1;
              uint64_t v12 = 45;
            }
LABEL_47:
            [a4 appendByte:v12];
            goto LABEL_48;
          }
          if (v11 + 1 == a3) {
            goto LABEL_55;
          }
        }
      }
      else
      {
        BOOL v16 = (v12 - 32) >= 0x5Eu || v12 == 92;
        if (!v16 || (v12 <= 0xD ? (BOOL v17 = ((1 << v12) & 0x2600) == 0) : (BOOL v17 = 1), !v17))
        {
LABEL_46:
          char v10 = 0;
          unint64_t v13 = v11 + 1;
          ++*(void *)(a1 + 104);
          goto LABEL_47;
        }
      }
      [a4 appendPlaceholder];
      unint64_t v23 = *(void *)(a1 + 64) + 1;
      *(void *)(a1 + 64) = v23;
      if (v23 > v9) {
        goto LABEL_58;
      }
      unint64_t v13 = v11 + 1;
LABEL_48:
      unint64_t v11 = v13;
      if (v13 >= a3) {
        goto LABEL_58;
      }
    }
    char v10 = 1;
    *(unsigned char *)(a1 + 160) = 1;
LABEL_34:
    uint64_t v12 = 43;
    goto LABEL_47;
  }
LABEL_58:
  *(void *)(a1 + 96) = *(void *)(a1 + 64);
  uint64_t result = *(void *)(a1 + 112) + *(void *)(a1 + 104);
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t _UTF8_recognize(uint64_t a1, unsigned __int8 *a2, unint64_t a3, void *a4)
{
  *(void *)(a1 + 32) += a3;
  if (a3 < 3)
  {
    *(unsigned char *)(a1 + 162) = 0;
    uint64_t v8 = [(id)a1 maxSkipBytes];
    if (!a3) {
      goto LABEL_54;
    }
  }
  else
  {
    BOOL v7 = *a2 == 239 && a2[1] == 187 && a2[2] == 191;
    *(unsigned char *)(a1 + 162) = v7;
    uint64_t v8 = [(id)a1 maxSkipBytes];
  }
  unint64_t v9 = v8;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  LOBYTE(v12) = 0;
  unsigned __int8 v13 = 0;
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  unint64_t v16 = *(void *)(a1 + 64);
  while (v16 <= v9)
  {
    unsigned __int8 v17 = v13;
    unsigned __int8 v13 = v12;
    int v12 = (char)a2[v15];
    uint64_t v18 = v11 - 1;
    if ((unint64_t)(v11 - 1) >= 4)
    {
      if (v11 == 5)
      {
        uint64_t v11 = 0;
        if (v12 < 0 && (v12 + 64) >= 0x37u)
        {
          if (v15 + 1 < a3)
          {
            int v22 = (char)a2[v15 + 1];
            if ((v22 & 0x80000000) == 0 || (v22 + 64) <= 0x36u)
            {
              uint64_t v11 = 0;
              *(void *)(a1 + 64) = v16 + 1;
              goto LABEL_45;
            }
          }
LABEL_41:
          *(void *)(a1 + 64) = v16 + 1;
          uint64_t v11 = 5;
          goto LABEL_45;
        }
      }
      else
      {
        if (v11) {
          goto LABEL_45;
        }
        if (v16 != v14)
        {
          [a4 appendPlaceholder];
          ++*(void *)(a1 + 96);
          unint64_t v16 = *(void *)(a1 + 64);
        }
        if ((v12 & 0x80000000) == 0)
        {
          ++*(void *)(a1 + 56);
          [a4 appendByte:v12];
          uint64_t v10 = 0;
          uint64_t v11 = 0;
          goto LABEL_44;
        }
        if ((v12 + 64) <= 0x36)
        {
          uint64_t v10 = expectMap[v12 >> 4];
          uint64_t v11 = 1;
LABEL_44:
          unint64_t v14 = v16;
LABEL_45:
          unint64_t v16 = *(void *)(a1 + 64);
          if (v16 - v14 == 4) {
            uint64_t v11 = 0;
          }
          ++v15;
          goto LABEL_48;
        }
        unint64_t v14 = v16;
        uint64_t v11 = 5;
        uint64_t v10 = 5;
      }
    }
    else
    {
      if (v12 <= -65)
      {
        int v19 = 0;
        int v20 = 0;
        int v21 = 0;
        uint64_t v11 = 2;
        switch(v18)
        {
          case 0:
            break;
          case 1:
            int v20 = 0;
            int v21 = 0;
            int v19 = 1;
            uint64_t v11 = 3;
            break;
          case 2:
            int v19 = 0;
            int v20 = 0;
            int v21 = 0;
            uint64_t v11 = 4;
            break;
          case 3:
            int v19 = 0;
            int v21 = 0;
            uint64_t v11 = 0;
            int v20 = 1;
            break;
          default:
            int v19 = 0;
            int v20 = 0;
            int v21 = 1;
            uint64_t v11 = 5;
            break;
        }
        if (v10 == 3 && v19 && v17 == 237 && v13 >= 0xA0u && v13 <= 0xBFu)
        {
          uint64_t v11 = 0;
          *(void *)(a1 + 64) = v16 + 3;
          uint64_t v10 = 3;
          goto LABEL_45;
        }
        if (((v10 != v11) & ~v20) == 0)
        {
          ++*(void *)(a1 + 48);
          objc_msgSend(a4, "appendBytes:count:", &a2[v15 - v11 + 1]);
          uint64_t v11 = 0;
          goto LABEL_45;
        }
        if (!v21) {
          goto LABEL_45;
        }
        goto LABEL_41;
      }
      v16 += v11;
      *(void *)(a1 + 64) = v16;
      uint64_t v11 = 5;
    }
LABEL_48:
    if (v15 >= a3) {
      break;
    }
  }
  if (v11)
  {
    *(void *)(a1 + 64) = v16 + v11;
    if (v16 + v11 != v14)
    {
      [a4 appendPlaceholder];
      ++*(void *)(a1 + 96);
    }
  }
LABEL_54:
  uint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t _WINDOWS1256_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  a1[4] += a3;
  unint64_t v16 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      if (v11 < 0) {
        break;
      }
      if (v12 > 0x1F)
      {
        if (v12 < 0x7F)
        {
LABEL_16:
          ++a1[17];
          if (v8 <= 0x7Eu && v9 < 0x7Fu)
          {
LABEL_18:
            [a4 appendByte:v12];
            goto LABEL_19;
          }
LABEL_10:
          v17[0] = v9;
          v17[1] = v8;
          void v17[2] = v12;
          if ([(id)qword_1EB1ED738 indexForBytes:v17 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
            ++a1[16];
          }
          goto LABEL_18;
        }
LABEL_9:
        ++a1[18];
        goto LABEL_10;
      }
      if (v12 <= 0xD && ((1 << v12) & 0x3700) != 0) {
        goto LABEL_16;
      }
      [a4 appendPlaceholder];
      unint64_t v14 = a1[8] + 1;
      a1[8] = v14;
      if (v14 > v16) {
        goto LABEL_23;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v12) = 0;
LABEL_19:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v12;
      if (!--v5) {
        goto LABEL_23;
      }
    }
    if ((windows1256[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7))) {
      ++a1[10];
    }
    goto LABEL_9;
  }
LABEL_23:
  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _WINDOWS1257_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  a1[4] += a3;
  unint64_t v24 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      if (v11 < 0 && ((windows1257[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0) {
        ++a1[10];
      }
      BOOL v13 = (v12 & 0xFFFFFFFD) == 0x81 || (v12 & 0xFFFFFFFD) == 136;
      BOOL v14 = v13 || v12 == 140;
      BOOL v15 = v14 || (v12 & 0xFFFFFFF7) == 144;
      BOOL v16 = v15 || v12 == 154;
      BOOL v17 = v16 || v12 == 156;
      BOOL v18 = v17 || v12 == 159;
      BOOL v19 = v18 || (v12 & 0xFFFFFFFB) == 161;
      if (!v19 && v12 > 0x1F) {
        break;
      }
      if (v12 <= 0xD && ((1 << v12) & 0x3700) != 0) {
        goto LABEL_36;
      }
      objc_msgSend(a4, "appendPlaceholder", v24);
      unint64_t v22 = a1[8] + 1;
      a1[8] = v22;
      if (v22 > v24) {
        goto LABEL_47;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v12) = 0;
LABEL_43:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v12;
      if (!--v5) {
        goto LABEL_47;
      }
    }
    int v21 = a1 + 17;
    if ((v12 - 32) >= 0x5F) {
LABEL_36:
    }
      int v21 = a1 + 18;
    ++*v21;
    if (v8 > 0x7Eu || v9 > 0x7Eu || v12 >= 0x7F)
    {
      v25[0] = v9;
      v25[1] = v8;
      _WORD v25[2] = v12;
      if (objc_msgSend((id)qword_1EB1ED740, "indexForBytes:length:", v25, 3, v24) != 0x7FFFFFFFFFFFFFFFLL) {
        ++a1[16];
      }
    }
    objc_msgSend(a4, "appendByte:", v12, v24);
    goto LABEL_43;
  }
LABEL_47:
  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _WINDOWS1251_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  a1[4] += a3;
  unint64_t v16 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      if (v11 < 0 && ((windows1251[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0) {
        ++a1[10];
      }
      if (v12 >= 0x20 && v12 != 152) {
        break;
      }
      if (v12 <= 0xD && ((1 << v12) & 0x3700) != 0) {
        goto LABEL_14;
      }
      [a4 appendPlaceholder];
      unint64_t v14 = a1[8] + 1;
      a1[8] = v14;
      if (v14 > v16) {
        goto LABEL_23;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v12) = 0;
LABEL_19:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v12;
      if (!--v5) {
        goto LABEL_23;
      }
    }
    if (v12 < 0x7F)
    {
LABEL_14:
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_18:
        [a4 appendByte:v12];
        goto LABEL_19;
      }
    }
    else
    {
      ++a1[18];
    }
    v17[0] = v9;
    v17[1] = v8;
    void v17[2] = v12;
    if ([(id)qword_1EB1ED748 indexForBytes:v17 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_18;
  }
LABEL_23:
  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _WINDOWS1253_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  a1[4] += a3;
  uint64_t v8 = [a1 maxSkipBytes];
  if (v5)
  {
    unint64_t v9 = v8;
    unsigned __int8 v10 = 0;
    unsigned __int8 v11 = 0;
    while (1)
    {
      int v13 = *a2++;
      unsigned __int8 v12 = v13;
      uint64_t v14 = v13;
      if (v13 < 0 && ((windows1253[((unint64_t)v12 >> 3) & 0xF] >> (v14 & 7)) & 1) != 0) {
        ++a1[10];
      }
      BOOL v18 = (v14 - 32) < 0xDFu
         || v14 == 13
         || v14 == 10
         || (v14 & 0xFFFFFFFB) == 8
         || v14 == 9;
      if (!v18
        || ((v14 - 129) <= 0x19 ? (BOOL v19 = ((1 << (v14 + 127)) & 0x280FA81) == 0) : (BOOL v19 = 1),
            !v19 || (v14 & 0xFC) == 0x9C || v14 == 170 || v14 == 210))
      {
        [a4 appendPlaceholder];
        unint64_t v20 = a1[8] + 1;
        a1[8] = v20;
        if (v20 > v9) {
          goto LABEL_39;
        }
        unsigned __int8 v10 = 0;
        LOBYTE(v14) = 0;
        goto LABEL_26;
      }
      if (v14 >= 0x7F) {
        break;
      }
      ++a1[17];
      if (v10 > 0x7Eu || v11 >= 0x7Fu) {
        goto LABEL_36;
      }
LABEL_38:
      [a4 appendByte:v14];
LABEL_26:
      unsigned __int8 v11 = v10;
      unsigned __int8 v10 = v14;
      if (!--v5) {
        goto LABEL_39;
      }
    }
    ++a1[18];
LABEL_36:
    v22[0] = v11;
    v22[1] = v10;
    void v22[2] = v14;
    if ([(id)qword_1EB1ED750 indexForBytes:v22 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_38;
  }
LABEL_39:
  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _WINDOWS1255_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  a1[4] += a3;
  uint64_t v8 = [a1 maxSkipBytes];
  if (v5)
  {
    unint64_t v9 = v8;
    unsigned __int8 v10 = 0;
    unsigned __int8 v11 = 0;
    while (1)
    {
      int v13 = *a2++;
      unsigned __int8 v12 = v13;
      uint64_t v14 = v13;
      if (v13 < 0 && ((windows1255[((unint64_t)v12 >> 3) & 0xF] >> (v14 & 7)) & 1) != 0) {
        ++a1[10];
      }
      BOOL v18 = (v14 - 32) < 0xDFu
         || v14 == 13
         || v14 == 10
         || (v14 & 0xFFFFFFFB) == 8
         || v14 == 9;
      if (!v18
        || ((v14 - 129) <= 0x19 ? (BOOL v19 = ((1 << (v14 + 127)) & 0x200FA81) == 0) : (BOOL v19 = 1),
            !v19
         || v14 == 202
         || (v14 & 0xFC) == 0x9C
         || (v14 - 217) < 7
         || (v14 - 251) < 2))
      {
        [a4 appendPlaceholder];
        unint64_t v20 = a1[8] + 1;
        a1[8] = v20;
        if (v20 > v9) {
          goto LABEL_40;
        }
        unsigned __int8 v10 = 0;
        LOBYTE(v14) = 0;
        goto LABEL_26;
      }
      if (v14 >= 0x7F) {
        break;
      }
      ++a1[17];
      if (v10 > 0x7Eu || v11 >= 0x7Fu) {
        goto LABEL_37;
      }
LABEL_39:
      [a4 appendByte:v14];
LABEL_26:
      unsigned __int8 v11 = v10;
      unsigned __int8 v10 = v14;
      if (!--v5) {
        goto LABEL_40;
      }
    }
    ++a1[18];
LABEL_37:
    v22[0] = v11;
    v22[1] = v10;
    void v22[2] = v14;
    if ([(id)qword_1EB1ED758 indexForBytes:v22 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_39;
  }
LABEL_40:
  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _WINDOWS1252_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  a1[4] += a3;
  uint64_t v8 = [a1 maxSkipBytes];
  if (v5)
  {
    unint64_t v9 = v8;
    unsigned __int8 v10 = 0;
    unsigned __int8 v11 = 0;
    do
    {
      int v13 = *a2++;
      unsigned __int8 v12 = v13;
      uint64_t v14 = v13;
      if (v13 < 0)
      {
        if ((windows1252[((unint64_t)v12 >> 3) & 0xF] >> (v14 & 7))) {
          ++a1[10];
        }
      }
      else if (v14 <= 0x1F)
      {
        if (v14 > 0xD || ((1 << v14) & 0x3700) == 0) {
          goto LABEL_18;
        }
        goto LABEL_9;
      }
      if ((v14 - 129) <= 0x1C && ((1 << (v14 + 127)) & 0x1000D001) != 0)
      {
LABEL_18:
        [a4 appendPlaceholder];
        unint64_t v17 = a1[8] + 1;
        a1[8] = v17;
        if (v17 > v9) {
          break;
        }
        unsigned __int8 v10 = 0;
        LOBYTE(v14) = 0;
        goto LABEL_25;
      }
      if (v14 >= 0x7F)
      {
        ++a1[18];
LABEL_22:
        v19[0] = v11;
        v19[1] = v10;
        void v19[2] = v14;
        if ([(id)qword_1EB1ED760 indexForBytes:v19 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
          ++a1[16];
        }
        goto LABEL_24;
      }
LABEL_9:
      ++a1[17];
      if (v10 > 0x7Eu || v11 >= 0x7Fu) {
        goto LABEL_22;
      }
LABEL_24:
      [a4 appendByte:v14];
LABEL_25:
      unsigned __int8 v11 = v10;
      unsigned __int8 v10 = v14;
      --v5;
    }
    while (v5);
  }
  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _WINDOWS1250_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  a1[4] += a3;
  uint64_t v8 = [a1 maxSkipBytes];
  if (v5)
  {
    unint64_t v9 = v8;
    unsigned __int8 v10 = 0;
    unsigned __int8 v11 = 0;
    do
    {
      int v13 = *a2++;
      unsigned __int8 v12 = v13;
      uint64_t v14 = v13;
      if (v13 < 0)
      {
        if ((windows1250[((unint64_t)v12 >> 3) & 0xF] >> (v14 & 7))) {
          ++a1[10];
        }
      }
      else if (v14 <= 0x1F)
      {
        if (v14 > 0xD || ((1 << v14) & 0x3700) == 0) {
          goto LABEL_18;
        }
        goto LABEL_9;
      }
      if ((v14 - 129) <= 0x17 && ((1 << (v14 + 127)) & 0x808085) != 0)
      {
LABEL_18:
        [a4 appendPlaceholder];
        unint64_t v17 = a1[8] + 1;
        a1[8] = v17;
        if (v17 > v9) {
          break;
        }
        unsigned __int8 v10 = 0;
        LOBYTE(v14) = 0;
        goto LABEL_25;
      }
      if (v14 >= 0x7F)
      {
        ++a1[18];
LABEL_22:
        v19[0] = v11;
        v19[1] = v10;
        void v19[2] = v14;
        if ([(id)qword_1EB1ED768 indexForBytes:v19 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
          ++a1[16];
        }
        goto LABEL_24;
      }
LABEL_9:
      ++a1[17];
      if (v10 > 0x7Eu || v11 >= 0x7Fu) {
        goto LABEL_22;
      }
LABEL_24:
      [a4 appendByte:v14];
LABEL_25:
      unsigned __int8 v11 = v10;
      unsigned __int8 v10 = v14;
      --v5;
    }
    while (v5);
  }
  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _WINDOWS1254_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  a1[4] += a3;
  uint64_t v8 = [a1 maxSkipBytes];
  if (v5)
  {
    unint64_t v9 = v8;
    unsigned __int8 v10 = 0;
    unsigned __int8 v11 = 0;
    while (1)
    {
      int v13 = *a2++;
      unsigned __int8 v12 = v13;
      uint64_t v14 = v13;
      if (v13 < 0 && ((windows1254[((unint64_t)v12 >> 3) & 0xF] >> (v14 & 7)) & 1) != 0) {
        ++a1[10];
      }
      BOOL v19 = v14 == 13
         || (v14 - 32) < 0xDFu
         || v14 == 10
         || (v14 & 0xFFFFFFFB) == 8
         || v14 == 9;
      BOOL v20 = v14 == 129 || !v19;
      if (v20 || ((v14 - 141) <= 0x11 ? (BOOL v21 = ((1 << (v14 + 115)) & 0x3000F) == 0) : (BOOL v21 = 1), !v21))
      {
        [a4 appendPlaceholder];
        unint64_t v22 = a1[8] + 1;
        a1[8] = v22;
        if (v22 > v9) {
          goto LABEL_41;
        }
        unsigned __int8 v10 = 0;
        LOBYTE(v14) = 0;
        goto LABEL_31;
      }
      if (v14 >= 0x7F) {
        break;
      }
      ++a1[17];
      if (v10 > 0x7Eu || v11 >= 0x7Fu) {
        goto LABEL_38;
      }
LABEL_40:
      [a4 appendByte:v14];
LABEL_31:
      unsigned __int8 v11 = v10;
      unsigned __int8 v10 = v14;
      if (!--v5) {
        goto LABEL_41;
      }
    }
    ++a1[18];
LABEL_38:
    v24[0] = v11;
    v24[1] = v10;
    void v24[2] = v14;
    if ([(id)qword_1EB1ED770 indexForBytes:v24 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_40;
  }
LABEL_41:
  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _WINDOWS1258_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  a1[4] += a3;
  unint64_t v21 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      if (v11 < 0 && ((windows1258[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0) {
        ++a1[10];
      }
      BOOL v13 = (v12 + 111) >= 0xFCu || v12 == 138;
      BOOL v14 = v13 || v12 == 129;
      BOOL v15 = v14 || v12 == 154;
      BOOL v16 = v15 || (v12 + 97) >= 0xFEu;
      if (!v16 && v12 > 0x1F) {
        break;
      }
      if (v12 <= 0xD && ((1 << v12) & 0x3700) != 0) {
        goto LABEL_27;
      }
      [a4 appendPlaceholder];
      unint64_t v19 = a1[8] + 1;
      a1[8] = v19;
      if (v19 > v21) {
        goto LABEL_38;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v12) = 0;
LABEL_34:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v12;
      if (!--v5) {
        goto LABEL_38;
      }
    }
    BOOL v18 = a1 + 17;
    if ((v12 - 32) >= 0x5F) {
LABEL_27:
    }
      BOOL v18 = a1 + 18;
    ++*v18;
    if (v8 > 0x7Eu || v9 > 0x7Eu || v12 >= 0x7F)
    {
      v22[0] = v9;
      v22[1] = v8;
      void v22[2] = v12;
      if ([(id)qword_1EB1ED778 indexForBytes:v22 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
        ++a1[16];
      }
    }
    [a4 appendByte:v12];
    goto LABEL_34;
  }
LABEL_38:
  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t generateStringWithEncoding(void *a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, BOOL *a7)
{
  v28[1] = *MEMORY[0x1E4F143B8];
  if (!a4)
  {
    BOOL v13 = 0;
    if (!a7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  BOOL v13 = -[NSString initWithBytes:length:encoding:]([NSString alloc], "initWithBytes:length:encoding:", a2, a3, [a1 nsEncoding]);
  if (a7) {
LABEL_5:
  }
    *a7 = 0;
LABEL_6:
  if (a6) {
    BOOL v14 = v13 == 0;
  }
  else {
    BOOL v14 = 0;
  }
  if (v14) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = (uint64_t)v13;
  }
  if (v14 && a5)
  {
    id v16 = +[NSEncodingDetectionPlaceholder placeholderForDetector:a1];
    uint64_t v17 = a1[8];
    uint64_t v18 = [v16 bytesLength];
    v28[0] = v28;
    unint64_t v19 = a3 + (v18 + 7) * v17;
    MEMORY[0x1F4188790](v18);
    BOOL v20 = [NSEncodingDetectionBuffer alloc];
    uint64_t v21 = [a1 nsEncoding];
    uint64_t v22 = [a1 cfEncoding];
    if (v19 < 0x101)
    {
      uint64_t v23 = &v27;
      uint64_t v24 = 256;
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = v19;
    }
    uint64_t v25 = [(NSEncodingDetectionBuffer *)v20 initWithNSStringEncoding:v21 CFStringEncoding:v22 stackBuffer:v23 bufferLength:v24 placeholder:v16];
    [a1 softReset];
    [a1 recognizeString:a2 withDataLength:a3 intoBuffer:v25];
    uint64_t v15 = [(NSEncodingDetectionBuffer *)v25 stringWithLossySubsitutionString:a6];

    if (a7) {
      *a7 = a1[12] != 0;
    }
  }
  return v15;
}

uint64_t checkSuggestedEncodings(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = 0;
  BOOL v7 = &v6;
  uint64_t v8 = 0x3052000000;
  unsigned __int8 v9 = __Block_byref_object_copy__12;
  unsigned __int8 v10 = __Block_byref_object_dispose__12;
  uint64_t v11 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __checkSuggestedEncodings_block_invoke;
  v5[3] = &unk_1E51F9AE8;
  v5[5] = a1;
  v5[6] = a2;
  v5[4] = &v6;
  [a3 enumerateKeysAndObjectsUsingBlock:v5];
  uint64_t v3 = v7[5];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_18201BF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getAllDetectors(uint64_t a1, void *a2, unsigned int *a3, uint64_t a4, void *a5, void *a6, char a7)
{
  uint64_t v18 = a2;
  uint64_t v12 = 0;
  do
  {
    unsigned int v14 = *a3++;
    uint64_t v13 = v14;
    uint64_t v15 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v14, v18);
    uint64_t result = [a6 objectForKey:v15];
    if (!result)
    {
      uint64_t result = objc_msgSend(a5, "objectForKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v13));
      id v17 = (id)result;
      if (!result && (a7 & 1) == 0)
      {
        id v17 = +[NSEncodingDetector detectorForCFStringEncoding:v13 allowBackupDetectors:0];
        uint64_t result = [a5 setObject:v17 forKey:v15];
      }
      if (v17) {
        *(void *)(a1 + 8 * v12++) = v17;
      }
    }
    --a4;
  }
  while (a4);
  *uint64_t v18 = v12;
  return result;
}

uint64_t increaseWeightsOfEncodings(uint64_t result, unsigned int *a2, uint64_t a3)
{
  if (a3 >= 1)
  {
    uint64_t v15 = v10;
    uint64_t v16 = v9;
    uint64_t v17 = v6;
    uint64_t v18 = v5;
    uint64_t v19 = v4;
    uint64_t v20 = v3;
    uint64_t v21 = v7;
    uint64_t v22 = v8;
    uint64_t v11 = a3;
    uint64_t v13 = (void *)result;
    do
    {
      unsigned int v14 = *a2++;
      uint64_t result = objc_msgSend(v13, "objectForKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v14, v15, v16, v17, v18, v19, v20, v21, v22));
      if (result) {
        *(double *)(result + 152) = *(double *)(result + 152) * 5.0;
      }
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t compareTwoDetectors(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(*(void *)a1 + 164);
  unsigned int v3 = *(_DWORD *)(*(void *)a2 + 164);
  BOOL v4 = v2 > v3;
  BOOL v5 = v2 < v3;
  if (v4) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v5;
  }
}

uint64_t recognizeISO2022JP(uint64_t a1, unint64_t a2, void *a3, void *a4, void *a5, void *a6, unint64_t *a7, uint64_t a8, unint64_t a9, unint64_t a10, char *a11, uint64_t a12, CFStringEncoding a13, void *a14, void *a15, void *a16, void *a17, unint64_t a18)
{
  unint64_t v19 = 0;
  char v57 = 0;
  unint64_t v20 = 0;
  uint64_t v48 = 0;
  uint64_t v51 = 0;
  uint64_t v54 = 0;
  uint64_t v21 = 0;
  int v42 = 0;
  uint64_t v56 = 0;
  uint64_t v39 = a15;
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  UInt8 bytes = 27;
  int v60 = 0;
  CFAllocatorRef contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
LABEL_2:
  BOOL v22 = 0;
LABEL_3:
  uint64_t v55 = v21;
  CFIndex v52 = v21 + 2;
  uint64_t v53 = v21 + 1;
  unint64_t v49 = v20;
LABEL_4:
  if (v19 <= a2) {
    unint64_t v23 = a2;
  }
  else {
    unint64_t v23 = v19;
  }
  unint64_t v50 = v19;
  while (v19 != v23)
  {
    UInt8 v24 = *(unsigned char *)(a1 + v19);
    if (v24 == 27)
    {
      if (a8 && v19 + 2 < a2)
      {
        unint64_t v25 = 0;
        uint64_t v26 = *(unsigned __int8 *)(v19 + a1 + 1);
        uint64_t v27 = *(unsigned __int8 *)(a1 + v19 + 2);
        while (__PAIR64__(v27, v26) != __PAIR64__(*(char *)(a8 + v25 + 1), *(char *)(a8 + v25)))
        {
          unint64_t v28 = v25 + 3;
          v25 += 2;
          if (v28 >= a9) {
            goto LABEL_16;
          }
        }
        BOOL v22 = v25 > a10;
        LOBYTE(v62) = *(unsigned char *)(v19 + a1 + 1);
        HIBYTE(v62) = v27;
        v19 += 3;
        [a17 appendByte1:27 byte2:v26 byte3:v27];
        LOBYTE(v60) = 27;
        BYTE1(v60) = v26;
        uint64_t v21 = 3;
        BYTE2(v60) = v27;
        goto LABEL_49;
      }
LABEL_16:
      if (a11 && v19 + 3 < a2 && a12)
      {
        uint64_t v29 = *(unsigned __int8 *)(a1 + v19 + 3);
        BOOL v31 = *(unsigned char *)(v19 + a1 + 1) == 36 && *(unsigned char *)(v19 + a1 + 2) == 40;
        uint64_t v32 = a11;
        uint64_t v33 = a12;
        while (!v31 || v29 != *v32)
        {
          ++v32;
          if (!--v33) {
            goto LABEL_29;
          }
        }
        __int16 v62 = 10276;
        char v63 = v29;
        v19 += 4;
        [a17 appendByte1:27 byte2:36 byte3:40 byte4:v29];
        LOWORD(v60) = 9243;
        BYTE2(v60) = 40;
        BOOL v22 = 1;
        uint64_t v21 = 4;
        HIBYTE(v60) = v29;
LABEL_49:
        ++v54;
        char v57 = 1;
        uint64_t v56 = v21;
        goto LABEL_3;
      }
    }
LABEL_29:
    if (!v22
      && ((v24 - 32) < 0x5Fu || *(unsigned __int8 *)(a1 + v19) <= 0xDu && ((1 << v24) & 0x3700) != 0))
    {
      ++v19;
      ++v51;
      objc_msgSend(a17, "appendByte:", v24, v39);
      uint64_t v21 = v55;
      goto LABEL_2;
    }
    if ((v57 & 1) != 0 && (v24 - 33) <= 0x5Du && v22 && v19 + 1 < a2)
    {
      uint64_t v34 = *(unsigned __int8 *)(a1 + v19 + 1);
      if ((v34 - 33) <= 0x5D)
      {
        *(&bytes + v55) = v24;
        *(&bytes + v53) = v34;
        unint64_t v40 = (void *)qword_1EB1ED698;
        CFStringRef v35 = CFStringCreateWithBytesNoCopy(0, &bytes, v52, a13, 0, contentsDeallocator);
        if (v35)
        {
          CFStringRef v36 = v35;
          v64[0] = CFStringGetCharacterAtIndex(v35, 0);
          if ([v40 indexForKey:v64 length:1] != 0x7FFFFFFFFFFFFFFFLL) {
            ++*a14;
          }
          CFRelease(v36);
          int v37 = v64[0];
          if (v64[0])
          {
            if (v42)
            {
              v64[0] = v42;
              v64[1] = v37;
              if ([(id)qword_1EB1ED6A0 indexForKey:v64 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
                ++*v39;
              }
            }
            v19 += 2;
            ++v48;
            objc_msgSend(a17, "appendByte1:byte2:", v24, v34, v39);
            char v57 = 1;
            unint64_t v49 = v20;
            int v42 = v37;
            goto LABEL_4;
          }
        }
        int v42 = 0;
      }
    }
    objc_msgSend(a17, "appendPlaceholder", v39);
    [a17 appendBytes:&v60 count:v56];
    ++*a16;
    ++v20;
    ++v19;
    if (v20 > a18) {
      goto LABEL_52;
    }
  }
  unint64_t v20 = v49 + v23 - v50;
LABEL_52:
  uint64_t result = v48 + v51;
  *a3 += v48 + v51;
  *a7 = v20;
  *a4 = v48;
  *a5 = v51;
  *a6 = v54;
  return result;
}

unint64_t recognizeUTF16(unsigned __int16 *a1, unint64_t a2, int a3, void *a4, void *a5, void *a6, void *a7, unsigned char *a8, void *a9, void *a10)
{
  int v16 = *a1;
  BOOL v17 = v16 == 65534 || v16 == 65279;
  if (v17)
  {
    objc_msgSend(a9, "appendUTF16Char:");
    unint64_t v19 = 1;
    *a8 = 1;
  }
  else
  {
    unint64_t v19 = 0;
  }
  if (v19 < a2 >> 1)
  {
    uint64_t v32 = a5;
    uint64_t v34 = 0;
    unint64_t v20 = a2 >> 1;
    unint64_t v21 = v19;
    while (1)
    {
      unsigned int v22 = __rev16(a1[v21]);
      if (!a3) {
        unsigned int v22 = a1[v21];
      }
      if (v22 <= 0xFFFD)
      {
        int v23 = v22 & 0xFC00;
        if ((unsigned __int16)(v22 + 560) >= 0x20u && v23 != 56320)
        {
          if (v23 == 55296)
          {
            unint64_t v25 = v21 + 1;
            if (v21 + 1 >= v20) {
              goto LABEL_18;
            }
            unsigned int v26 = bswap32(a1[v25]) >> 16;
            if (!a3) {
              LOWORD(v26) = a1[v25];
            }
            if ((unsigned __int16)v26 >> 10 == 55)
            {
              uint64_t v27 = 0;
              unsigned __int16 v28 = v26 & 0xFFFE;
              while (v28 != 57342 || v22 != (unsigned __int16)invalidUTF16Chars[v27])
              {
                if (++v27 == 16)
                {
                  ++v19;
                  ++*v32;
                  unint64_t v29 = v21 + 2;
                  [a9 appendUTF16Char:a1[v29]];
                  [a9 appendUTF16Char:a1[v25]];
                  unint64_t v25 = v29;
                  goto LABEL_18;
                }
              }
            }
          }
          else if ((unsigned __int16)((unsigned __int16)(v22 + 0x2000) >> 11) <= 0x1Eu)
          {
            BOOL v17 = v22 == 0;
            uint64_t v30 = v34;
            if (v17) {
              uint64_t v30 = v34 + 1;
            }
            uint64_t v34 = v30;
            ++v19;
            [a9 appendUTF16Char:v32];
            unint64_t v25 = v21 + 1;
            goto LABEL_18;
          }
        }
      }
      objc_msgSend(a9, "appendPlaceholder", v32);
      ++*a7;
      *a6 += 2;
      unint64_t v25 = v21 + 2;
LABEL_18:
      unint64_t v21 = v25;
      if (v25 >= v20) {
        goto LABEL_35;
      }
    }
  }
  uint64_t v34 = 0;
  unint64_t v19 = 1;
LABEL_35:
  *a4 += v19;
  *a10 = v34;
  return v19;
}

unint64_t recognizeUTF32(_DWORD *a1, unint64_t a2, int a3, void *a4, void *a5, void *a6, unsigned char *a7, void *a8)
{
  if (*a1 == 65534 || *a1 == 65279)
  {
    objc_msgSend(a8, "appendUTF32Char:");
    unint64_t v17 = 1;
    *a7 = 1;
  }
  else
  {
    unint64_t v17 = 0;
  }
  unint64_t v18 = a2 >> 2;
  uint64_t v19 = 0;
  unint64_t v20 = v18 - v17;
  if (v18 <= v17)
  {
    unint64_t v17 = 1;
  }
  else
  {
    unint64_t v21 = &a1[v17];
    do
    {
      unsigned int v23 = *v21++;
      unsigned int v22 = v23;
      unsigned int v24 = bswap32(v23);
      if (!a3) {
        unsigned int v24 = v22;
      }
      if (v24 >> 11 < 0x1B || (v24 - 57344) >> 13 <= 0x80)
      {
        ++v17;
        objc_msgSend(a8, "appendUTF32Char:");
      }
      else
      {
        [a8 appendPlaceholder];
        ++*a6;
        v19 += 4;
      }
      --v20;
    }
    while (v20);
  }
  *a4 += v17;
  *a5 = v19;
  return v17;
}

id __initializeResources_block_invoke()
{
  id result = (id)[MEMORY[0x1E4F1C9E8] sharedKeySetForKeys:&unk_1ECAB61A0];
  _MergedGlobals_117 = (uint64_t)result;
  return result;
}

void *__initializeDics_block_invoke()
{
  qword_1EB1ED688 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&_NSMostCommonChineseCharsKeySetConfig);
  qword_1EB1ED698 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&_NSMostCommonJapaneseCharsKeySetConfig);
  qword_1EB1ED6A8 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&_NSMostCommonKoreanCharsKeySetConfig);
  qword_1EB1ED690 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&_NSChineseBigramKeySetConfig);
  qword_1EB1ED6A0 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&_NSJapaneseBigramKeySetConfig);
  qword_1EB1ED6B0 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&_NSKoreanBigramKeySetConfig);
  qword_1EB1ED6C0 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISOLatin1TrigramKeySetConfig);
  qword_1EB1ED6D0 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISOLatin2TrigramKeySetConfig);
  qword_1EB1ED6D8 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISOLatin3TrigramKeySetConfig);
  qword_1EB1ED6E0 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISOLatin4TrigramKeySetConfig);
  qword_1EB1ED6E8 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISOLatin5TrigramKeySetConfig);
  qword_1EB1ED6F0 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISOLatin6TrigramKeySetConfig);
  qword_1EB1ED6F8 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISOLatin7TrigramKeySetConfig);
  qword_1EB1ED700 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISOLatin8TrigramKeySetConfig);
  qword_1EB1ED708 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISOLatin9TrigramKeySetConfig);
  qword_1EB1ED6C8 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISOLatin10TrigramKeySetConfig);
  qword_1EB1ED718 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISO88595TrigramKeySetConfig);
  qword_1EB1ED710 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISO88596TrigramKeySetConfig);
  qword_1EB1ED720 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISO88597TrigramKeySetConfig);
  qword_1EB1ED728 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISO88598TrigramKeySetConfig);
  qword_1EB1ED730 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISO885911TrigramKeySetConfig);
  qword_1EB1ED6B8 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSWindows874TrigramKeySetConfig);
  qword_1EB1ED748 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSWindows1251TrigramKeySetConfig);
  qword_1EB1ED760 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSWindows1252TrigramKeySetConfig);
  qword_1EB1ED768 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSWindows1250TrigramKeySetConfig);
  qword_1EB1ED750 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSWindows1253TrigramKeySetConfig);
  qword_1EB1ED770 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSWindows1254TrigramKeySetConfig);
  qword_1EB1ED758 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSWindows1255TrigramKeySetConfig);
  qword_1EB1ED738 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSWindows1256TrigramKeySetConfig);
  qword_1EB1ED740 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSWindows1257TrigramKeySetConfig);
  id result = -[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSWindows1258TrigramKeySetConfig);
  qword_1EB1ED778 = (uint64_t)result;
  return result;
}

uint64_t __checkSuggestedEncodings_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  if (*(double *)(a3 + 152) > 1.0)
  {
    uint64_t v6 = result;
    if ([(id)a3 recognizeString:*(void *)(result + 40) withDataLength:*(void *)(result + 48) intoBuffer:0]&& !*(void *)(a3 + 64))
    {
      *(void *)(*(void *)(*(void *)(v6 + 32) + 8) + 40) = a3;
      *a4 = 1;
    }
    return [(id)a3 softReset];
  }
  return result;
}

void sub_18201D99C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18201DA18(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18201E38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 176), 8);
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__36(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__37(uint64_t a1)
{
}

void sub_18201E7D4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

void sub_18201E99C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18201EAB8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18201EC2C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18201EF7C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

void sub_18201F2FC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18201F41C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18201F5A8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18201F71C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18201FB0C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 136));
  _Unwind_Resume(a1);
}

void sub_18201FE0C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18201FF44(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t _bestMatchConformingToTypes(void *a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  uint64_t v4 = [a1 countByEnumeratingWithState:&v31 objects:v30 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v32;
LABEL_3:
    uint64_t v7 = 0;
    while (1)
    {
      if (*(void *)v32 != v6) {
        objc_enumerationMutation(a1);
      }
      uint64_t v8 = *(void *)(*((void *)&v31 + 1) + 8 * v7);
      if ([a2 containsObject:v8]) {
        break;
      }
      if (v5 == ++v7)
      {
        uint64_t v5 = [a1 countByEnumeratingWithState:&v31 objects:v30 count:16];
        if (v5) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    uint64_t v9 = [a1 countByEnumeratingWithState:&v26 objects:v25 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v27;
      uint64_t v19 = *(void *)v27;
      while (2)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v27 != v11) {
            objc_enumerationMutation(a1);
          }
          uint64_t v13 = *(void *)(*((void *)&v26 + 1) + 8 * i);
          long long v21 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          long long v24 = 0u;
          uint64_t v14 = [a2 countByEnumeratingWithState:&v21 objects:v20 count:16];
          if (v14)
          {
            uint64_t v15 = v14;
            uint64_t v16 = *(void *)v22;
LABEL_16:
            uint64_t v17 = 0;
            while (1)
            {
              if (*(void *)v22 != v16) {
                objc_enumerationMutation(a2);
              }
              uint64_t v8 = *(void *)(*((void *)&v21 + 1) + 8 * v17);
              if (((uint64_t (*)(uint64_t, uint64_t))off_1EB1E8100)(v8, v13)) {
                return v8;
              }
              if (v15 == ++v17)
              {
                uint64_t v15 = [a2 countByEnumeratingWithState:&v21 objects:v20 count:16];
                if (v15) {
                  goto LABEL_16;
                }
                break;
              }
            }
          }
          uint64_t v11 = v19;
        }
        uint64_t v10 = [a1 countByEnumeratingWithState:&v26 objects:v25 count:16];
        uint64_t v8 = 0;
        if (v10) {
          continue;
        }
        break;
      }
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

void sub_1820214EC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_182021814(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_182021930(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_182021C30(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_182021D4C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_182021EC4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_182022028(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void _asyncDispatchBlockWithOptions(void *a1, void *a2)
{
  if (objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"NSItemProviderOptionsDispatchMode"), "isEqualToString:", @"NSItemProviderOptionsDispatchModeAsynchronous"))global_queue = dispatch_get_global_queue(0, 0); {
  else
  }
    global_queue = MEMORY[0x1E4F14428];

  dispatch_async(global_queue, a2);
}

void sub_182022EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id location)
{
  objc_destroyWeak(v34);
  objc_destroyWeak(v35);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1820236F0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1820238E8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t initUTTypeConformsTo_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = MobileCoreServicesLibrary();
  uint64_t v5 = (uint64_t (*)(void))dlsym(v4, "UTTypeConformsTo");
  off_1EB1E8100 = v5;
  if (!v5) {
    __assert_rtn("initUTTypeConformsTo", "NSItemProvider.m", 25, "softLinkUTTypeConformsTo");
  }

  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1, a2);
}

void *MobileCoreServicesLibrary()
{
  id result = (void *)MobileCoreServicesLibrary_frameworkLibrary_0;
  if (!MobileCoreServicesLibrary_frameworkLibrary_0)
  {
    id result = dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 2);
    MobileCoreServicesLibrary_frameworkLibrary_0 = (uint64_t)result;
    if (!result) {
      __assert_rtn("MobileCoreServicesLibrary", "NSItemProvider.m", 24, "frameworkLibrary");
    }
  }
  return result;
}

uint64_t initFPIsFileProviderBookmark(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)FileProviderLibrary_frameworkLibrary_0;
  if (!FileProviderLibrary_frameworkLibrary_0)
  {
    uint64_t v4 = dlopen("/System/Library/PrivateFrameworks/FileProvider.framework/FileProvider", 2);
    FileProviderLibrary_frameworkLibrary_0 = (uint64_t)v4;
    if (!v4) {
      __assert_rtn("FileProviderLibrary", "NSItemProvider.m", 48, "frameworkLibrary");
    }
  }
  uint64_t v5 = (uint64_t (*)())dlsym(v4, "FPIsFileProviderBookmark");
  softLinkFPIsFileProviderBookmark = v5;
  if (!v5) {
    __assert_rtn("initFPIsFileProviderBookmark", "NSItemProvider.m", 49, "softLinkFPIsFileProviderBookmark");
  }

  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1, a2);
}

uint64_t initUTTypeCreatePreferredIdentifierForTag(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = MobileCoreServicesLibrary();
  uint64_t v7 = (uint64_t (*)())dlsym(v6, "UTTypeCreatePreferredIdentifierForTag");
  off_1EB1E8108 = v7;
  if (!v7) {
    __assert_rtn("initUTTypeCreatePreferredIdentifierForTag", "NSItemProvider.m", 26, "softLinkUTTypeCreatePreferredIdentifierForTag");
  }

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, a3);
}

uint64_t initkUTTagClassFilenameExtension()
{
  int v0 = MobileCoreServicesLibrary();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTagClassFilenameExtension");
  if (!v1) {
    __assert_rtn("initkUTTagClassFilenameExtension", "NSItemProvider.m", 27, "constant");
  }
  uint64_t result = *v1;
  constantkUTTagClassFilenameExtension = result;
  _MergedGlobals_85 = kUTTagClassFilenameExtensionFunction;
  return result;
}

uint64_t kUTTagClassFilenameExtensionFunction()
{
  return constantkUTTagClassFilenameExtension;
}

uint64_t initkUTTypeData_0()
{
  int v0 = MobileCoreServicesLibrary();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTypeData");
  if (!v1) {
    __assert_rtn("initkUTTypeData", "NSItemProvider.m", 28, "constant");
  }
  uint64_t result = *v1;
  constantkUTTypeData_0 = result;
  off_1EB1E80F0 = kUTTypeDataFunction_0;
  return result;
}

uint64_t kUTTypeDataFunction_0()
{
  return constantkUTTypeData_0;
}

uint64_t initkUTTypeURL_0()
{
  int v0 = MobileCoreServicesLibrary();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTypeURL");
  if (!v1) {
    __assert_rtn("initkUTTypeURL", "NSItemProvider.m", 30, "constant");
  }
  uint64_t result = *v1;
  constantkUTTypeURL_0 = result;
  off_1EB1E80F8 = kUTTypeURLFunction_0;
  return result;
}

uint64_t kUTTypeURLFunction_0()
{
  return constantkUTTypeURL_0;
}

uint64_t _bestMatchType(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if ([a2 containsObject:a1]) {
    return a1;
  }
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v7 = [a2 countByEnumeratingWithState:&v13 objects:v12 count:16];
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)v14;
LABEL_5:
  uint64_t v10 = 0;
  while (1)
  {
    if (*(void *)v14 != v9) {
      objc_enumerationMutation(a2);
    }
    uint64_t v6 = *(void *)(*((void *)&v13 + 1) + 8 * v10);
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, v6)) {
      return v6;
    }
    if (v8 == ++v10)
    {
      uint64_t v8 = [a2 countByEnumeratingWithState:&v13 objects:v12 count:16];
      uint64_t v6 = 0;
      if (v8) {
        goto LABEL_5;
      }
      return v6;
    }
  }
}

BOOL ___bestMatchConformingToType_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return off_1EB1E8100(a3) != 0;
}

BOOL ___bestMatchToConformingType_block_invoke(uint64_t a1, uint64_t a2)
{
  return off_1EB1E8100(a2) != 0;
}

id ___synchronousCoordinatedRead_block_invoke(void *a1)
{
  id result = (id)(*(uint64_t (**)(void))(a1[4] + 16))();
  *(void *)(*(void *)(a1[5] + 8) + 40) = result;
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  return result;
}

uint64_t sub_182024DEC()
{
  return 0;
}

uint64_t sub_182024E30()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_182024E74()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_182024EB8()
{
  return 0;
}

uint64_t sub_18202579C()
{
  return 0;
}

uint64_t sub_182025F38()
{
  return 0;
}

uint64_t sub_182025F7C()
{
  return 0;
}

uint64_t sub_182026254()
{
  return v0;
}

SEL __methodDescriptionForSelector(Class cls, SEL name)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (cls)
  {
    Superclass = cls;
    while (1)
    {
      outCFIndex Count = 0;
      uint64_t v5 = class_copyProtocolList(Superclass, &outCount);
      uint64_t v6 = v5;
      if (outCount) {
        break;
      }
      if (v5) {
LABEL_10:
      }
        free(v6);
      Superclass = class_getSuperclass(Superclass);
      if (!Superclass) {
        goto LABEL_12;
      }
    }
    uint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = v6[v7];
      isMetaClass Class = class_isMetaClass(Superclass);
      SEL v10 = protocol_getMethodDescription(v8, name, 1, !isMetaClass).name;
      if (v10) {
        break;
      }
      uint64_t v11 = v6[v7];
      BOOL v12 = class_isMetaClass(Superclass);
      SEL v10 = protocol_getMethodDescription(v11, name, 0, !v12).name;
      if (v10) {
        break;
      }
      if (++v7 >= (unint64_t)outCount) {
        goto LABEL_10;
      }
    }
    SEL v15 = v10;
    free(v6);
  }
  else
  {
LABEL_12:
    InstanceMethod = class_getInstanceMethod(cls, name);
    if (InstanceMethod)
    {
      long long v14 = InstanceMethod;
      SEL v15 = method_getName(InstanceMethod);
      method_getTypeEncoding(v14);
    }
    else
    {
      return 0;
    }
  }
  return v15;
}

BOOL _NSIPGetExpectedClassFromCompletionBlock(void *a1, void *a2, NSError **a3)
{
  BOOL has_signature = _Block_has_signature(a1);
  if (has_signature)
  {
    uint64_t v7 = (void *)[MEMORY[0x1E4F1CA38] signatureWithObjCTypes:_Block_signature(a1)];
    if (a2) {
      *a2 = [v7 _classForObjectAtArgumentIndex:1];
    }
  }
  else if (a3)
  {
    uint64_t v8 = [(id)_NSFoundationBundle() localizedStringForKey:@"Unable to get block signature." value:&stru_1ECA5C228 table:@"Extension"];
    *a3 = _makeError(-1, v8, 0);
  }
  return has_signature;
}

void _NSIPDispatchAsyncCallback(dispatch_block_t block)
{
  if (qword_1EB1E8588 != -1) {
    dispatch_once(&qword_1EB1E8588, &__block_literal_global_87);
  }
  uint64_t v2 = qword_1EB1E8580;

  dispatch_async(v2, block);
}

uint64_t _NSIPItemQueue()
{
  if (qword_1EB1E8578 != -1) {
    dispatch_once(&qword_1EB1E8578, &__block_literal_global_43);
  }
  return _MergedGlobals_1;
}

NSProgress *_NSIPCoordinatedRead(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = +[NSFileAccessIntent readingIntentWithURL:a1 options:1];

  return _coordinatedFileAccess((uint64_t)v4, a1, a2);
}

NSProgress *_coordinatedFileAccess(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v8[8] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = +[NSProgress discreteProgressWithTotalUnitCount:100];
  if (qword_1EB1E8598 != -1) {
    dispatch_once(&qword_1EB1E8598, &__block_literal_global_94);
  }
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _DWORD v8[2] = ___coordinatedFileAccess_block_invoke;
  _OWORD v8[3] = &unk_1E51FA2A8;
  v8[4] = a2;
  v8[5] = a1;
  v8[6] = v6;
  v8[7] = a3;
  [(id)qword_1EB1E8590 addOperationWithBlock:v8];
  return v6;
}

NSProgress *_NSIPCoordinatedReadForUploading(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = +[NSFileAccessIntent readingIntentWithURL:a1 options:8];

  return _coordinatedFileAccess((uint64_t)v4, a1, a2);
}

NSProgress *_NSIPCoordinatedDelete(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = +[NSFileAccessIntent writingIntentWithURL:a1 options:1];

  return _coordinatedFileAccess((uint64_t)v4, a1, a2);
}

uint64_t _NSIPTemporaryFileName(__CFString *a1, NSError **a2)
{
  unsigned int v3 = a1;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = _MergedGlobals_86();
    unsigned int v3 = (__CFString *)(id)((uint64_t (*)(uint64_t, uint64_t))off_1EB1E8118)((uint64_t)v3, v4);
  }
  [[(NSString *)NSTemporaryDirectory() stringByAppendingPathComponent:+[NSString stringWithFormat:@".%@.XXXXXX", @"com.apple.Foundation.NSItemProvider"]] UTF8String];
  __strlcpy_chk();
  int v5 = mkstemp(v14);
  if (v5 == -1)
  {
    SEL v10 = __error();
    uint64_t v11 = +[NSString stringWithFormat:@"%s", strerror(*v10)];
    TemporaryFileError = _NSIPCannotCreateTemporaryFileError((uint64_t)v11, 0);
    uint64_t v9 = 0;
    if (a2 && TemporaryFileError)
    {
      uint64_t v9 = 0;
      *a2 = TemporaryFileError;
    }
  }
  else
  {
    int v6 = v5;
    if (v3) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = @"tmp";
    }
    uint64_t v8 = [+[NSString stringWithUTF8String:v14] stringByAppendingPathExtension:v7];
    uint64_t v9 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v8 isDirectory:0 relativeToURL:0];
    unlink(v14);
    close(v6);
  }
  return v9;
}

NSError *_NSIPCannotCreateTemporaryFileError(uint64_t a1, uint64_t a2)
{
  if (a1) {
    unsigned int v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", [(id)_NSFoundationBundle() localizedStringForKey:@"Cannot create a temporary file. Error: %@" value:&stru_1ECA5C228 table:@"Extension"], a1);
  }
  else {
    unsigned int v3 = (NSString *)[(id)_NSFoundationBundle() localizedStringForKey:@"Cannot create a temporary file." value:&stru_1ECA5C228 table:@"Extension"];
  }

  return _makeError(-1, (uint64_t)v3, a2);
}

uint64_t _NSIPCloneToTemporaryDir(void *a1, __CFString *a2, NSError **a3)
{
  v11[1] = *(NSError **)MEMORY[0x1E4F143B8];
  v11[0] = 0;
  uint64_t v5 = _NSIPTemporaryFileName(a2, v11);
  int v6 = v11[0];
  if (!v5 || v11[0])
  {
    if (v5 | (uint64_t)v11[0]) {
      goto LABEL_8;
    }
    uint64_t v9 = (uint64_t)a1;
    uint64_t v8 = 0;
LABEL_7:
    int v6 = _NSIPCannotCopyFileError(v9, (uint64_t)v8, 0);
LABEL_8:
    uint64_t v5 = 0;
    if (!a3) {
      return v5;
    }
    goto LABEL_9;
  }
  if (copyfile((const char *)objc_msgSend((id)objc_msgSend(a1, "path"), "fileSystemRepresentation"), (const char *)objc_msgSend((id)objc_msgSend((id)v5, "path"), "fileSystemRepresentation"), 0, 0x10C800Fu))
  {
    uint64_t v7 = __error();
    uint64_t v8 = +[NSString stringWithFormat:@"%s", strerror(*v7)];
    uint64_t v9 = (uint64_t)a1;
    goto LABEL_7;
  }
  int v6 = v11[0];
  if (!a3) {
    return v5;
  }
LABEL_9:
  if (v6) {
    *a3 = v6;
  }
  return v5;
}

NSError *_NSIPCannotCopyFileError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    int v6 = (void *)_NSFoundationBundle();
    if (a1)
    {
      uint64_t v7 = [v6 localizedStringForKey:@"Cannot copy file at URL %@. Error: %@" value:&stru_1ECA5C228 table:@"Extension"];
      uint64_t v10 = a1;
      uint64_t v11 = a2;
    }
    else
    {
      uint64_t v7 = [v6 localizedStringForKey:@"Cannot copy file. Error: %@" value:&stru_1ECA5C228 table:@"Extension"];
      uint64_t v10 = a2;
    }
    uint64_t v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v7, v10, v11);
  }
  else if (a1)
  {
    uint64_t v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", [(id)_NSFoundationBundle() localizedStringForKey:@"Cannot copy file at URL %@." value:&stru_1ECA5C228 table:@"Extension"], a1, v11);
  }
  else
  {
    uint64_t v8 = (NSString *)[(id)_NSFoundationBundle() localizedStringForKey:@"Cannot copy file." value:&stru_1ECA5C228 table:@"Extension"];
  }

  return _makeError(-1, (uint64_t)v8, a3);
}

char *_NSIPCreateTemporaryFolder()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  [[(NSString *)NSTemporaryDirectory() stringByAppendingPathComponent:+[NSString stringWithFormat:@".%@.XXXXXX", @"com.apple.Foundation.NSItemProvider"]] getFileSystemRepresentation:v1 maxLength:1024];
  [+[NSFileManager defaultManager] createDirectoryAtPath:NSTemporaryDirectory() withIntermediateDirectories:1 attributes:0 error:0];
  id result = mkdtemp(v1);
  if (result) {
    return (char *)[MEMORY[0x1E4F1CB10] fileURLWithFileSystemRepresentation:v1 isDirectory:1 relativeToURL:0];
  }
  return result;
}

id _NSIPFilenameWithProperExtension(void *a1, uint64_t a2)
{
  id v3 = (id)[a1 copy];
  if (![v3 length]) {
    id v3 = (id)((uint64_t (*)(uint64_t))softLinkUTTypeCopyDescription[0])(a2);
  }
  if (![v3 length])
  {
    uint64_t v4 = getkUTTypeItem[0]();
    id v3 = (id)((uint64_t (*)(uint64_t))softLinkUTTypeCopyDescription[0])(v4);
  }
  SuggestedFilename = (void *)softLink_UTTypeCreateSuggestedFilename((uint64_t)v3, a2);

  return SuggestedFilename;
}

NSString *_NSIPSanitizedFilename(void *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  id result = (NSString *)[a1 length];
  if (result)
  {
    if (([a1 isEqualToString:@"."] & 1) != 0
      || ([a1 isEqualToString:@".."] & 1) != 0)
    {
      return 0;
    }
    id v3 = (void *)[a1 stringByReplacingOccurrencesOfString:@"/" withString:@":"];
    if (([v3 hasPrefix:@"."] & 1) != 0
      || [v3 hasPrefix:@"~"])
    {
      id v3 = objc_msgSend(v3, "stringByReplacingCharactersInRange:withString:", 0, 1, @"_");
    }
    if (![v3 getFileSystemRepresentation:__s1 maxLength:256]) {
      return 0;
    }
    else {
      return [+[NSFileManager defaultManager]];
    }
  }
  return result;
}

void *_NSIPCloneURLToTemporaryFolder(void *a1, uint64_t a2, void *a3, char **a4, NSError **a5)
{
  uint64_t v10 = _NSIPCreateTemporaryFolder();
  if (!v10) {
    __assert_rtn("_NSIPCloneURLToTemporaryFolder", "_NSItemProviderUtilities_Internal.m", 297, "tempFolderURL");
  }
  uint64_t v11 = v10;
  if (a3) {
    BOOL v12 = a3;
  }
  else {
    BOOL v12 = (void *)[a1 lastPathComponent];
  }
  long long v13 = objc_msgSend(v11, "URLByAppendingPathComponent:", _NSIPFilenameWithProperExtension(v12, a2));
  if (copyfile((const char *)objc_msgSend((id)objc_msgSend(a1, "path"), "fileSystemRepresentation"), (const char *)objc_msgSend((id)objc_msgSend(v13, "path"), "fileSystemRepresentation"), 0, 0x10C800Fu))
  {
    [+[NSFileManager defaultManager] removeItemAtURL:v11 error:0];
    long long v14 = __error();
    uint64_t v15 = +[NSString stringWithFormat:@"%s", strerror(*v14)];
    TemporaryFileError = _NSIPCannotCreateTemporaryFileError((uint64_t)v15, 0);
    long long v13 = 0;
    if (a5 && TemporaryFileError)
    {
      long long v13 = 0;
      *a5 = TemporaryFileError;
    }
  }
  else if (a4)
  {
    *a4 = v11;
  }
  return v13;
}

NSError *_NSIPCannotLoadRepresentationError(uint64_t a1, uint64_t a2)
{
  id v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", [(id)_NSFoundationBundle() localizedStringForKey:@"Cannot load representation of type %@" value:&stru_1ECA5C228 table:@"Extension"], a1);

  return _makeError(-1000, (uint64_t)v3, a2);
}

NSError *_makeError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v7 = v6;
  if (a2) {
    [v6 setObject:a2 forKeyedSubscript:@"NSLocalizedDescription"];
  }
  if (a3) {
    [v7 setObject:a3 forKeyedSubscript:@"NSUnderlyingError"];
  }

  return +[NSError errorWithDomain:@"NSItemProviderErrorDomain" code:a1 userInfo:v7];
}

NSError *_NSIPDataTransferCancelledError(uint64_t a1)
{
  uint64_t v2 = [(id)_NSFoundationBundle() localizedStringForKey:@"Data transfer has been cancelled." value:&stru_1ECA5C228 table:@"Extension"];

  return _makeError(-1000, v2, a1);
}

NSError *_NSIPNoLoaderAvailableError(uint64_t a1, uint64_t a2)
{
  id v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", [(id)_NSFoundationBundle() localizedStringForKey:@"No loader block available for type %@." value:&stru_1ECA5C228 table:@"Extension"], a1);

  return _makeError(-1000, (uint64_t)v3, a2);
}

NSError *_NSIPCannotLoadPreviewError(uint64_t a1)
{
  uint64_t v2 = [(id)_NSFoundationBundle() localizedStringForKey:@"Cannot load preview." value:&stru_1ECA5C228 table:@"Extension"];

  return _makeError(-1000, v2, a1);
}

NSError *_NSIPUnexpectedValueClassError(uint64_t a1, uint64_t a2)
{
  id v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", [(id)_NSFoundationBundle() localizedStringForKey:@"Cannot load an object of class %@" value:&stru_1ECA5C228 table:@"Extension"], a1);

  return _makeError(-1100, (uint64_t)v3, a2);
}

NSError *_NSIPUnavailableCoercionError(objc_class *a1, objc_class *a2, uint64_t a3)
{
  int v6 = (void *)_NSFoundationBundle();
  if (a1)
  {
    uint64_t v7 = [v6 localizedStringForKey:@"Could not coerce an item from class %@ to class %@" value:&stru_1ECA5C228 table:@"Extension"];
    uint64_t v8 = NSStringFromClass(a1);
    uint64_t v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v7, v8, NSStringFromClass(a2));
  }
  else
  {
    uint64_t v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", [v6 localizedStringForKey:@"Could not coerce an item to class %@" value:&stru_1ECA5C228 table:@"Extension"], NSStringFromClass(a2), v11);
  }

  return _makeError(-1200, (uint64_t)v9, a3);
}

NSError *_NSIPCocoaErrorWithCode(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a3) {
    id v12 = (id)[a3 mutableCopy];
  }
  else {
    id v12 = (id)[MEMORY[0x1E4F1CA60] dictionary];
  }
  long long v13 = v12;
  if (a4)
  {
    uint64_t v17 = &a9;
    long long v14 = [[NSString alloc] initWithFormat:a4 arguments:&a9];
    [v13 setObject:v14 forKeyedSubscript:@"NSDebugDescription"];
  }
  if (a2) {
    [v13 setObject:a2 forKeyedSubscript:@"NSUnderlyingError"];
  }
  if (objc_msgSend(v13, "count", v17)) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = 0;
  }
  return +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:a1 userInfo:v15];
}

dispatch_queue_t __callbackQueue_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("com.apple.Foundation.NSItemProvider-callback-queue", 0);
  qword_1EB1E8580 = (uint64_t)result;
  return result;
}

void ___coordinatedFileAccess_block_invoke(uint64_t a1)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  char v2 = [*(id *)(a1 + 32) startAccessingSecurityScopedResource];
  id v3 = [[NSFileCoordinator alloc] initWithFilePresenter:0];
  v11[0] = *(void *)(a1 + 40);
  uint64_t v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
  if (qword_1EB1E8598 != -1) {
    dispatch_once(&qword_1EB1E8598, &__block_literal_global_94);
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = ___coordinatedFileAccess_block_invoke_2;
  void v6[3] = &unk_1E51FA280;
  uint64_t v5 = *(void *)(a1 + 56);
  int8x16_t v7 = vextq_s8(*(int8x16_t *)(a1 + 40), *(int8x16_t *)(a1 + 40), 8uLL);
  char v10 = v2;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = v5;
  [(NSFileCoordinator *)v3 coordinateAccessWithIntents:v4 queue:qword_1EB1E8590 byAccessor:v6];
}

uint64_t ___coordinatedFileAccess_block_invoke_2(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 32), "totalUnitCount"));
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), [*(id *)(a1 + 40) URL], a2);
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v5 = *(void **)(a1 + 48);
    return [v5 stopAccessingSecurityScopedResource];
  }
  return result;
}

NSOperationQueue *___coordinationQueue_block_invoke()
{
  uint64_t result = objc_alloc_init(NSOperationQueue);
  qword_1EB1E8590 = (uint64_t)result;
  return result;
}

uint64_t initUTTypeCopyPreferredTagWithClass(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = MobileCoreServicesLibrary_0();
  uint64_t v5 = (uint64_t (*)())dlsym(v4, "UTTypeCopyPreferredTagWithClass");
  off_1EB1E8118 = v5;
  if (!v5) {
    __assert_rtn("initUTTypeCopyPreferredTagWithClass", "_NSItemProviderUtilities_Internal.m", 35, "softLinkUTTypeCopyPreferredTagWithClass");
  }

  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1, a2);
}

void *MobileCoreServicesLibrary_0()
{
  uint64_t result = (void *)MobileCoreServicesLibrary_frameworkLibrary_1;
  if (!MobileCoreServicesLibrary_frameworkLibrary_1)
  {
    uint64_t result = dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 2);
    MobileCoreServicesLibrary_frameworkLibrary_1 = (uint64_t)result;
    if (!result) {
      __assert_rtn("MobileCoreServicesLibrary", "_NSItemProviderUtilities_Internal.m", 32, "frameworkLibrary");
    }
  }
  return result;
}

uint64_t initkUTTagClassFilenameExtension_0()
{
  uint64_t v0 = MobileCoreServicesLibrary_0();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTagClassFilenameExtension");
  if (!v1) {
    __assert_rtn("initkUTTagClassFilenameExtension", "_NSItemProviderUtilities_Internal.m", 38, "constant");
  }
  uint64_t result = *v1;
  constantkUTTagClassFilenameExtension_0 = result;
  _MergedGlobals_86 = kUTTagClassFilenameExtensionFunction_0;
  return result;
}

uint64_t kUTTagClassFilenameExtensionFunction_0()
{
  return constantkUTTagClassFilenameExtension_0;
}

uint64_t initUTTypeCopyDescription(uint64_t a1)
{
  char v2 = MobileCoreServicesLibrary_0();
  id v3 = (uint64_t (*)())dlsym(v2, "UTTypeCopyDescription");
  softLinkUTTypeCopyDescription[0] = v3;
  if (!v3) {
    __assert_rtn("initUTTypeCopyDescription", "_NSItemProviderUtilities_Internal.m", 36, "softLinkUTTypeCopyDescription");
  }

  return ((uint64_t (*)(uint64_t))v3)(a1);
}

uint64_t initkUTTypeItem()
{
  uint64_t v0 = MobileCoreServicesLibrary_0();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTypeItem");
  if (!v1) {
    __assert_rtn("initkUTTypeItem", "_NSItemProviderUtilities_Internal.m", 42, "constant");
  }
  uint64_t result = *v1;
  constantkUTTypeItem = result;
  getkUTTypeItem[0] = kUTTypeItemFunction;
  return result;
}

uint64_t kUTTypeItemFunction()
{
  return constantkUTTypeItem;
}

uint64_t init_UTTypeCreateSuggestedFilename(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = MobileCoreServicesLibrary_0();
  uint64_t v5 = (uint64_t (*)())dlsym(v4, "_UTTypeCreateSuggestedFilename");
  softLink_UTTypeCreateSuggestedFilename = v5;
  if (!v5) {
    __assert_rtn("init_UTTypeCreateSuggestedFilename", "_NSItemProviderUtilities_Internal.m", 37, "softLink_UTTypeCreateSuggestedFilename");
  }

  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1, a2);
}

uint64_t __NSURLGetTopLevelDomain(void *a1)
{
  [a1 cStringUsingEncoding:4];
  [a1 length];
  uint64_t result = _CFHostGetTopLevelDomain();
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = [NSString alloc];
    return (uint64_t)[(NSString *)v4 initWithCString:v3 encoding:4];
  }
  return result;
}

BOOL NSIntersectsRange(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return a1 < a3 + a4 && a3 < a1 + a2;
}

unint64_t NSSubtractRange(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v6 = result + a2;
  unint64_t v7 = a3 + a4;
  BOOL v8 = a3 + a4 > result && v6 > a3;
  if (v8)
  {
    if (a3 <= result)
    {
      BOOL v10 = v6 >= v7;
      unint64_t v11 = v6 - v7;
      if (!v10) {
        unint64_t v11 = 0;
      }
      *a5 = v7;
      a5[1] = v11;
    }
    else
    {
      *a5 = result;
      a5[1] = a3 - result;
      BOOL v8 = v6 > v7;
      unint64_t v9 = v6 - v7;
      if (v8)
      {
        *a6 = v7;
        a6[1] = v9;
        return result;
      }
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
  }
  *a6 = 0;
  a6[1] = 0;
  return result;
}

NSRange NSRangeFromString(NSString *aString)
{
  uint64_t v1 = aString;
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (aString)
  {
    unint64_t v11 = 0;
    uint64_t v2 = (uint64_t)v12;
    if (![(NSString *)aString getCString:v12 maxLength:100 encoding:4]) {
      uint64_t v2 = [v1 UTF8String];
    }
    int v3 = *(unsigned __int8 *)v2;
    if (*(unsigned char *)v2)
    {
      uint64_t v4 = 0;
      while (v3 != 43 && (v3 - 48) >= 0xA)
      {
        uint64_t v5 = v4 + 1;
        int v3 = *(unsigned __int8 *)(v2 + 1 + v4++);
        if (!v3) {
          goto LABEL_13;
        }
      }
      uint64_t v5 = v4;
    }
    else
    {
      uint64_t v5 = 0;
    }
LABEL_13:
    uint64_t v1 = (void *)_NSCStringToUnsignedLong((char *)(v2 + v5), &v11);
    unint64_t v7 = &v11[-v2];
    int v8 = *v11;
    if (*v11)
    {
      while (v8 != 43 && (v8 - 48) >= 0xA)
      {
        unint64_t v9 = v7 + 1;
        int v8 = (v7++)[v2 + 1];
        if (!v8) {
          goto LABEL_19;
        }
      }
    }
    unint64_t v9 = v7;
LABEL_19:
    NSUInteger v6 = _NSCStringToUnsignedLong(&v9[v2], &v11);
  }
  else
  {
    NSUInteger v6 = 0;
  }
  NSUInteger v10 = (NSUInteger)v1;
  result.length = v6;
  result.location = v10;
  return result;
}

SEL _selectorForCoercion(uint64_t a1, void *a2)
{
  uint64_t v2 = _coercionClassStringFromClass(a2);
  int v3 = objc_opt_class();
  uint64_t v4 = +[NSString stringWithFormat:@"_NSItemProviderTypeCoercion_coerced%@ValueFrom%@Value:error:", v2, _coercionClassStringFromClass(v3)];

  return NSSelectorFromString(v4);
}

NSString *_coercionClassStringFromClass(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (qword_1EB1ED798 != -1) {
    dispatch_once(&qword_1EB1ED798, &__block_literal_global_44);
  }
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v2 = (void *)_MergedGlobals_118;
  NSRange result = (NSString *)[(id)_MergedGlobals_118 countByEnumeratingWithState:&v9 objects:v8 count:16];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)v10;
    while (2)
    {
      NSUInteger v6 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        unint64_t v7 = *(objc_class **)(*((void *)&v9 + 1) + 8 * (void)v6);
        if ([a1 isSubclassOfClass:v7]) {
          return NSStringFromClass(v7);
        }
        NSUInteger v6 = (NSString *)((char *)v6 + 1);
      }
      while (v4 != v6);
      NSRange result = (NSString *)[v2 countByEnumeratingWithState:&v9 objects:v8 count:16];
      uint64_t v4 = result;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

id ___coercionClassStringFromClass_block_invoke()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  Class Class = objc_getClass("UIImage");
  uint64_t v1 = objc_opt_class();
  if (Class)
  {
    uint64_t v9 = v1;
    uint64_t v10 = objc_opt_class();
    uint64_t v11 = objc_opt_class();
    Class v12 = Class;
    uint64_t v2 = (void *)MEMORY[0x1E4F1C978];
    int v3 = &v9;
    uint64_t v4 = 4;
  }
  else
  {
    uint64_t v6 = v1;
    uint64_t v7 = objc_opt_class();
    uint64_t v8 = objc_opt_class();
    uint64_t v2 = (void *)MEMORY[0x1E4F1C978];
    int v3 = &v6;
    uint64_t v4 = 3;
  }
  _MergedGlobals_118 = objc_msgSend(v2, "arrayWithObjects:count:", v3, v4, v6, v7, v8, v9, v10, v11, v12, v13);
  return (id)_MergedGlobals_118;
}

void sub_1820291B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_182029338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  objc_sync_exit(v16);
  _Block_object_dispose(&a16, 8);
  _Unwind_Resume(a1);
}

void sub_1820294BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_182029690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 88), 8);
  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

void sub_18202A538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

uint64_t __NSDescribeDelayedPerformCallout(uint64_t a1, uint64_t a2, char *a3, size_t a4, char *a5, size_t a6, uint64_t *a7)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v12 = *(id *)a2;
  uint64_t v13 = *(const char **)(a2 + 8);
  ClassSEL Name = object_getClassName(*(id *)a2);
  SEL Name = sel_getName(v13);
  if (a7) {
    *a7 = object_getMethodImplementation();
  }
  long long v16 = "<unknown name>";
  if (ClassName) {
    long long v16 = ClassName;
  }
  uint64_t v17 = "<unknown selector>";
  if (Name) {
    uint64_t v17 = Name;
  }
  snprintf(a5, a6, "(Delayed Perform) %s %s", v16, v17);
  Class Class = object_getClass(v12);
  memset(&v21, 0, sizeof(v21));
  uint64_t result = dladdr(Class, &v21);
  if (result)
  {
    dli_fname = v21.dli_fname;
    if (!v21.dli_fname) {
      dli_fname = "<unknown library>";
    }
    return snprintf(a3, a4, "%s", dli_fname);
  }
  return result;
}

uint64_t _NSScanHexDoubleFromString(void *a1, void *a2, void *a3, unint64_t *a4, void *a5)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (void *)[a5 objectForKey:*MEMORY[0x1E4F1C418]];
  if (!v9)
  {
    uint64_t v9 = (void *)[a5 objectForKey:@"NSDecimalSeparator"];
    if (!v9)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        uint64_t v9 = 0;
        goto LABEL_9;
      }
      uint64_t v9 = (void *)[a5 decimalSeparator];
      if (!v9) {
        goto LABEL_9;
      }
    }
  }
  if (![v9 length])
  {
LABEL_9:
    int v10 = 46;
    goto LABEL_10;
  }
  int v10 = [v9 characterAtIndex:0];
LABEL_10:
  long long v42 = 0u;
  long long v40 = 0u;
  memset(v41, 0, sizeof(v41));
  long long v39 = 0u;
  unint64_t v11 = *a4;
  unint64_t v12 = [a1 length];
  *((void *)&v40 + 1) = v12;
  *(void *)&v41[0] = v11;
  *(void *)&long long v40 = a1;
  if (v12 <= v11)
  {
    *(void *)&long long v39 = 0;
    unsigned int v14 = 0xFFFF;
  }
  else
  {
    if (v12 - v11 >= 0x20) {
      uint64_t v13 = 32;
    }
    else {
      uint64_t v13 = v12 - v11;
    }
    *(void *)&long long v39 = v13;
    objc_msgSend(a1, sel_getUid("getCharacters:range:"), (char *)v41 + 8, v11, v13);
    unsigned int v14 = WORD4(v41[0]);
  }
  WORD4(v42) = v14;
  uint64_t v15 = 1;
  *((void *)&v39 + 1) = 1;
  if (a2)
  {
    if (objc_msgSend(a2, "characterIsMember:"))
    {
      do
      {
        uint64_t v16 = *((void *)&v39 + 1);
        if (*((void *)&v39 + 1) - 1 >= (unint64_t)v39) {
          break;
        }
        if (*((void *)&v39 + 1) >= (unint64_t)v39)
        {
          uint64_t v18 = *(void *)&v41[0] + v39;
          if (*((void *)&v40 + 1) > *(void *)&v41[0] + (void)v39)
          {
            if (*((void *)&v40 + 1) - (*(void *)&v41[0] + (void)v39) >= 0x20uLL) {
              uint64_t v19 = 32;
            }
            else {
              uint64_t v19 = *((void *)&v40 + 1) - (*(void *)&v41[0] + v39);
            }
            *(void *)&v41[0] += v39;
            *(void *)&long long v39 = v19;
            objc_msgSend((id)v40, sel_getUid("getCharacters:range:"), (char *)v41 + 8, v18, v19);
            WORD4(v42) = WORD4(v41[0]);
            *((void *)&v39 + 1) = 1;
            continue;
          }
          *((void *)&v39 + 1) = v39 + 1;
          __int16 v17 = -1;
        }
        else
        {
          ++*((void *)&v39 + 1);
          __int16 v17 = *((_WORD *)v41 + v16 + 4);
        }
        WORD4(v42) = v17;
      }
      while ((objc_msgSend(a2, "characterIsMember:") & 1) != 0);
    }
    unsigned int v14 = WORD4(v42);
    uint64_t v15 = *((void *)&v39 + 1);
  }
  unint64_t v20 = *a4;
  unsigned __int16 v36 = v14;
  if (v14 <= 0x7F && (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v14 + 60) & 0x4000) != 0) {
    return 0;
  }
  unint64_t v21 = 0;
  uint64_t v32 = v15 + *(void *)&v41[0] + ~v20;
  while (_NSCheckDecimalSeparator((uint64_t *)&v39, &v36, v10, v9))
  {
    if (v21 >= 0x3F) {
      goto LABEL_48;
    }
    char v22 = 46;
LABEL_38:
    *(&v37 + v21) = v22;
    uint64_t v23 = *((void *)&v39 + 1);
    if (*((void *)&v39 + 1) < (unint64_t)v39)
    {
      ++*((void *)&v39 + 1);
      __int16 v24 = *((_WORD *)v41 + v23 + 4);
LABEL_46:
      WORD4(v42) = v24;
      goto LABEL_47;
    }
    uint64_t v25 = *(void *)&v41[0] + v39;
    if (*((void *)&v40 + 1) <= *(void *)&v41[0] + (void)v39)
    {
      *((void *)&v39 + 1) = v39 + 1;
      __int16 v24 = -1;
      goto LABEL_46;
    }
    if (*((void *)&v40 + 1) - (*(void *)&v41[0] + (void)v39) >= 0x20uLL) {
      uint64_t v26 = 32;
    }
    else {
      uint64_t v26 = *((void *)&v40 + 1) - (*(void *)&v41[0] + v39);
    }
    *(void *)&v41[0] += v39;
    *(void *)&long long v39 = v26;
    objc_msgSend((id)v40, sel_getUid("getCharacters:range:"), (char *)v41 + 8, v25, v26);
    __int16 v24 = WORD4(v41[0]);
    WORD4(v42) = WORD4(v41[0]);
    *((void *)&v39 + 1) = 1;
LABEL_47:
    unsigned __int16 v36 = v24;
    ++v21;
  }
  char v22 = v36;
  if (v36 <= 0x7Fu && v21 <= 0x3E) {
    goto LABEL_38;
  }
LABEL_48:
  long long v27 = &v37;
  *(&v37 + v21) = 0;
  uint64_t v35 = 0;
  int v34 = 0;
  int v28 = v37;
  if (v37 == 45 || v37 == 43)
  {
    long long v27 = (char *)&v38;
    int v28 = v38;
  }
  if (v28 != 48 || (v27[1] | 0x20) != 0x78) {
    return 0;
  }
  int v29 = v27[2];
  if ((v29 - 48) >= 0xA)
  {
    uint64_t result = 0;
    unsigned int v31 = (unsigned __int16)v29 - 65;
    if (v31 > 0x25 || ((1 << v31) & 0x3F0000003FLL) == 0) {
      return result;
    }
  }
  if (sscanf_l(&v37, 0, "%la%n", &v35, &v34) < 1) {
    return 0;
  }
  *a4 += v32 + v34;
  if (a3) {
    *a3 = v35;
  }
  return 1;
}

uint64_t sub_18202B054()
{
  return 0;
}

uint64_t sub_18202B0E4()
{
  return 0;
}

uint64_t _NSExtensionClass()
{
  if (qword_1EB1ED7A8 != -1) {
    dispatch_once(&qword_1EB1ED7A8, &__block_literal_global_46);
  }
  return _MergedGlobals_119;
}

uint64_t sub_18202B810()
{
  return 0;
}

uint64_t sub_18202B85C()
{
  uint64_t v1 = +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:3072 userInfo:0];
  uint64_t v2 = *(uint64_t (**)(uint64_t, void, NSError *))(v0 + 16);
  return v2(v0, 0, v1);
}

uint64_t sub_18202B8EC()
{
  if (v0) {
    *uint64_t v0 = +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:3072 userInfo:0];
  }
  return 0;
}

uint64_t sub_18202B964()
{
  uint64_t v1 = +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:3072 userInfo:0];
  uint64_t v2 = *(uint64_t (**)(uint64_t, void, NSError *))(v0 + 16);
  return v2(v0, 0, v1);
}

uint64_t sub_18202B9F4()
{
  uint64_t v1 = +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:3072 userInfo:0];
  uint64_t v2 = *(uint64_t (**)(uint64_t, void, NSError *))(v0 + 16);
  return v2(v0, 0, v1);
}

uint64_t sub_18202BA84()
{
  uint64_t v1 = +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:3072 userInfo:0];
  uint64_t v2 = *(uint64_t (**)(uint64_t, void, NSError *))(v0 + 16);
  return v2(v0, 0, v1);
}

uint64_t sub_18202BB0C()
{
  return 0;
}

uint64_t sub_18202BBA4()
{
  if (v0) {
    *uint64_t v0 = +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:3072 userInfo:0];
  }
  return 0;
}

uint64_t sub_18202BC1C()
{
  if (v0) {
    *uint64_t v0 = +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:3072 userInfo:0];
  }
  return 0;
}

uint64_t sub_18202BCD8()
{
  return 0;
}

uint64_t sub_18202BD1C()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_18202BD68()
{
  uint64_t v1 = +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:3072 userInfo:0];
  uint64_t v2 = *(uint64_t (**)(uint64_t, NSError *))(v0 + 16);
  return v2(v0, v1);
}

uint64_t sub_18202BDF4()
{
  uint64_t v1 = +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:3072 userInfo:0];
  uint64_t v2 = *(uint64_t (**)(uint64_t, NSError *))(v0 + 16);
  return v2(v0, v1);
}

uint64_t sub_18202BE78()
{
  return 0;
}

uint64_t preferredTermOfAddressForLanguageFromList(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t result = [a2 countByEnumeratingWithState:&v10 objects:v9 count:16];
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)v11;
LABEL_3:
    uint64_t v7 = 0;
    while (1)
    {
      if (*(void *)v11 != v6) {
        objc_enumerationMutation(a2);
      }
      uint64_t v8 = *(void **)(*((void *)&v10 + 1) + 8 * v7);
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        if ([v8 _isSupportedInLanguage:a1])
        {
          uint64_t result = [v8 _withExtrapolatedPronouns];
          if (result) {
            break;
          }
        }
      }
      if (v5 == ++v7)
      {
        uint64_t result = [a2 countByEnumeratingWithState:&v10 objects:v9 count:16];
        uint64_t v5 = result;
        if (result) {
          goto LABEL_3;
        }
        return result;
      }
    }
  }
  return result;
}

NSXPCInterface *_NSBundleResourceRequestServerInterface()
{
  uint64_t v0 = +[NSXPCInterface interfaceWithProtocol:&unk_1ECAF9D68];
  uint64_t v1 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v1, "setWithObjects:", v2, v3, objc_opt_class(), 0), sel_tagStateInBundle_completionHandler_, 0, 1);
  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v4, "setWithObjects:", v5, objc_opt_class(), 0), sel_beginODRSessionWithBundleURL_completionHandler_, 0, 1);
  uint64_t v6 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v7 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v6, "setWithObjects:", v7, objc_opt_class(), 0), sel_beginWithBundleURL_completionHandler_, 0, 1);
  uint64_t v8 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v9 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v8, "setWithObjects:", v9, objc_opt_class(), 0), sel_pinTags_inBundle_priority_completionHandler_, 0, 0);
  long long v10 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v11 = objc_opt_class();
  uint64_t v12 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v10, "setWithObjects:", v11, v12, objc_opt_class(), 0), sel_pinTags_inBundle_priority_completionHandler_, 0, 1);
  long long v13 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v14 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v13, "setWithObjects:", v14, objc_opt_class(), 0), sel_conditionallyPinTags_inBundle_completionHandler_, 0, 0);
  uint64_t v15 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v16 = objc_opt_class();
  uint64_t v17 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v15, "setWithObjects:", v16, v17, objc_opt_class(), 0), sel_conditionallyPinTags_inBundle_completionHandler_, 1, 1);
  uint64_t v18 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v19 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v18, "setWithObjects:", v19, objc_opt_class(), 0), sel_setLoadingPriority_forTags_inBundle_, 1, 0);
  unint64_t v20 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v21 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v20, "setWithObjects:", v21, objc_opt_class(), 0), sel_unpinTags_inBundle_completionHandler_, 0, 0);
  char v22 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v23 = objc_opt_class();
  uint64_t v24 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v22, "setWithObjects:", v23, v24, objc_opt_class(), 0), sel_unpinTags_inBundle_completionHandler_, 0, 1);
  uint64_t v25 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v26 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v25, "setWithObjects:", v26, objc_opt_class(), 0), sel_okToPurgeAssetPacks_, 0, 0);
  long long v27 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v28 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v27, "setWithObjects:", v28, objc_opt_class(), 0), sel_setPreservationPriority_forTags_inBundle_, 1, 0);
  int v29 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v30 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v29, "setWithObjects:", v30, objc_opt_class(), 0), sel_setAlwaysPreserved_forTags_inBundle_, 1, 0);
  return v0;
}

NSXPCInterface *_NSBundleResourceRequestClientInterface()
{
  return +[NSXPCInterface interfaceWithProtocol:&unk_1ECADCE70];
}

void sub_18202E058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_18202E4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 88), 8);
  _Unwind_Resume(a1);
}

void _setupConnection(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  [a1 setRemoteObjectInterface:_NSBundleResourceRequestServerInterface()];
  objc_msgSend(a1, "setExportedInterface:", +[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &unk_1ECADCE70));
  [a1 setExportedObject:(id)objc_opt_new()];
  [a1 resume];
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  char v9 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = ___setupConnection_block_invoke;
  v5[3] = &unk_1E51F7F80;
  v5[4] = &v6;
  uint64_t v2 = (void *)[a1 synchronousRemoteObjectProxyWithErrorHandler:v5];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  _OWORD v4[2] = ___setupConnection_block_invoke_2;
  v4[3] = &unk_1E51FA6B0;
  v4[4] = &v6;
  [v2 hello:v4];
  if (!*((unsigned char *)v7 + 24))
  {
    if (qword_1EB1E8600 != -1) {
      dispatch_once(&qword_1EB1E8600, &__block_literal_global_349);
    }
    uint64_t v3 = qword_1EB1E85F8;
    if (os_log_type_enabled((os_log_t)qword_1EB1E85F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_181795000, v3, OS_LOG_TYPE_ERROR, "NSBundleResourceRequest could not connect to its helper daemon", buf, 2u);
    }
  }
  _Block_object_dispose(&v6, 8);
}

void sub_18202FBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

NSXPCInterface *_appExtensionInterface()
{
  uint64_t v0 = +[NSXPCInterface interfaceWithProtocol:&unk_1ECADCFC8];
  uint64_t v1 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v1, "setWithObjects:", v2, v3, objc_opt_class(), 0), sel_hostApplicationAssetPacksBecameAvailable_, 0, 0);
  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v4, "setWithObjects:", v5, v6, objc_opt_class(), 0), sel_hostApplicationAssetPacksBecameUnavailable_, 0, 0);
  return v0;
}

uint64_t ___setupConnection_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  return result;
}

uint64_t ___setupConnection_block_invoke_2(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

void ___endAccessingResources_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
}

void ___endAccessingResources_block_invoke_2(uint64_t a1, void *a2)
{
  [*(id *)(a1 + 32) assetPacksBecameUnavailable:a2 error:0];
  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "remoteObjectProxy"), "okToPurgeAssetPacks:", objc_msgSend(a2, "allKeys"));

  uint64_t v4 = *(void **)(a1 + 56);
}

uint64_t isEqualCStringToString(unsigned __int8 *a1, unint64_t a2, void *a3)
{
  unint64_t v4 = a2;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if ([a3 length] != a2) {
    return 0;
  }
  uint64_t v18 = 0;
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  id v19 = a3;
  long long v20 = v4;
  if (v4)
  {
    if (v4 >= 0x20) {
      uint64_t v6 = 32;
    }
    else {
      uint64_t v6 = v4;
    }
    unint64_t v17 = v6;
    objc_msgSend(a3, sel_getUid("getCharacters:range:"), v21, 0, v6);
    int v7 = LOWORD(v21[0]);
    uint64_t v18 = 1;
    LOWORD(v22) = v21[0];
    uint64_t v8 = _NSCStringCharToUnicharTable;
    unint64_t v9 = 1;
    while (1)
    {
      unsigned int v10 = *a1++;
      int v11 = *(unsigned __int16 *)(v8 + 2 * v10);
      BOOL v12 = v11 == v7;
      if (v11 != v7) {
        return v12;
      }
      if (v9 >= v17)
      {
        unint64_t v14 = *((void *)&v20 + 1) + v17;
        if ((unint64_t)v20 > *((void *)&v20 + 1) + v17)
        {
          if ((unint64_t)v20 - (*((void *)&v20 + 1) + v17) >= 0x20) {
            uint64_t v15 = 32;
          }
          else {
            uint64_t v15 = v20 - (*((void *)&v20 + 1) + v17);
          }
          *((void *)&v20 + 1) += v17;
          unint64_t v17 = v15;
          objc_msgSend(v19, sel_getUid("getCharacters:range:"), v21, v14, v15);
          int v7 = LOWORD(v21[0]);
          LOWORD(v22) = v21[0];
          uint64_t v18 = 1;
          uint64_t v8 = _NSCStringCharToUnicharTable;
          unint64_t v9 = 1;
          goto LABEL_17;
        }
        unint64_t v9 = v17 + 1;
        uint64_t v18 = v17 + 1;
        int v7 = 0xFFFF;
      }
      else
      {
        long long v13 = (char *)&v17 + 2 * v9++;
        uint64_t v18 = v9;
        int v7 = *((unsigned __int16 *)v13 + 20);
      }
      LOWORD(v22) = v7;
LABEL_17:
      if (!--v4) {
        return v12;
      }
    }
  }
  return 1;
}

void sub_182033A5C()
{
}

void sub_182033CCC()
{
}

uint64_t initkUTTypeUTF8PlainText()
{
  uint64_t v0 = MobileCoreServicesLibrary_1();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTypeUTF8PlainText");
  if (!v1) {
    __assert_rtn("initkUTTypeUTF8PlainText", "NSString+NSItemProvider.m", 19, "constant");
  }
  uint64_t result = *v1;
  constantkUTTypeUTF8PlainText = result;
  _MergedGlobals_87 = kUTTypeUTF8PlainTextFunction;
  return result;
}

void *MobileCoreServicesLibrary_1()
{
  uint64_t result = (void *)MobileCoreServicesLibrary_frameworkLibrary_2;
  if (!MobileCoreServicesLibrary_frameworkLibrary_2)
  {
    uint64_t result = dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 2);
    MobileCoreServicesLibrary_frameworkLibrary_2 = (uint64_t)result;
    if (!result) {
      __assert_rtn("MobileCoreServicesLibrary", "NSString+NSItemProvider.m", 16, "frameworkLibrary");
    }
  }
  return result;
}

uint64_t kUTTypeUTF8PlainTextFunction()
{
  return constantkUTTypeUTF8PlainText;
}

uint64_t initkUTTypeUTF16ExternalPlainText()
{
  uint64_t v0 = MobileCoreServicesLibrary_1();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTypeUTF16ExternalPlainText");
  if (!v1) {
    __assert_rtn("initkUTTypeUTF16ExternalPlainText", "NSString+NSItemProvider.m", 21, "constant");
  }
  uint64_t result = *v1;
  constantkUTTypeUTF16ExternalPlainText = result;
  off_1EB1E8128 = kUTTypeUTF16ExternalPlainTextFunction;
  return result;
}

uint64_t kUTTypeUTF16ExternalPlainTextFunction()
{
  return constantkUTTypeUTF16ExternalPlainText;
}

uint64_t initkUTTypeUTF16PlainText()
{
  uint64_t v0 = MobileCoreServicesLibrary_1();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTypeUTF16PlainText");
  if (!v1) {
    __assert_rtn("initkUTTypeUTF16PlainText", "NSString+NSItemProvider.m", 20, "constant");
  }
  uint64_t result = *v1;
  constantkUTTypeUTF16PlainText = result;
  off_1EB1E8130 = kUTTypeUTF16PlainTextFunction;
  return result;
}

uint64_t kUTTypeUTF16PlainTextFunction()
{
  return constantkUTTypeUTF16PlainText;
}

uint64_t initkUTTypePlainText()
{
  uint64_t v0 = MobileCoreServicesLibrary_1();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTypePlainText");
  if (!v1) {
    __assert_rtn("initkUTTypePlainText", "NSString+NSItemProvider.m", 22, "constant");
  }
  uint64_t result = *v1;
  constantkUTTypePlainText = result;
  off_1EB1E8138 = kUTTypePlainTextFunction;
  return result;
}

uint64_t kUTTypePlainTextFunction()
{
  return constantkUTTypePlainText;
}

uint64_t initkUTTypeURL_1()
{
  uint64_t v0 = MobileCoreServicesLibrary_1();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTypeURL");
  if (!v1) {
    __assert_rtn("initkUTTypeURL", "NSString+NSItemProvider.m", 17, "constant");
  }
  uint64_t result = *v1;
  constantkUTTypeURL_1 = result;
  off_1EB1E8140 = kUTTypeURLFunction_1;
  return result;
}

uint64_t kUTTypeURLFunction_1()
{
  return constantkUTTypeURL_1;
}

uint64_t initUTTypeConformsTo_1(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = MobileCoreServicesLibrary_1();
  uint64_t v5 = (uint64_t (*)())dlsym(v4, "UTTypeConformsTo");
  off_1EB1E8150 = v5;
  if (!v5) {
    __assert_rtn("initUTTypeConformsTo", "NSString+NSItemProvider.m", 23, "softLinkUTTypeConformsTo");
  }

  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1, a2);
}

uint64_t initkUTTypeFileURL_0()
{
  uint64_t v0 = MobileCoreServicesLibrary_1();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTypeFileURL");
  if (!v1) {
    __assert_rtn("initkUTTypeFileURL", "NSString+NSItemProvider.m", 18, "constant");
  }
  uint64_t result = *v1;
  constantkUTTypeFileURL_0 = result;
  off_1EB1E8148 = kUTTypeFileURLFunction_0;
  return result;
}

uint64_t kUTTypeFileURLFunction_0()
{
  return constantkUTTypeFileURL_0;
}

uint64_t _NSNullCompare(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return -1;
  }
  else {
    return 0;
  }
}

void sub_1820345F4(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1820347D4()
{
  return 0;
}

uint64_t sub_182034864()
{
  return 0;
}

uint64_t sub_1820348A8()
{
  return 0;
}

uint64_t sub_182034984()
{
  return 7;
}

uint64_t sub_1820349C8()
{
  return 0;
}

void _inputStreamCallbackFunc(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = (id)[a3 retainedDelegate];
  if (objc_opt_respondsToSelector()) {
    [v5 stream:a1 handleEvent:a2];
  }
}

void _outputStreamCallbackFunc(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = (id)[a3 retainedDelegate];
  if (objc_opt_respondsToSelector()) {
    [v5 stream:a1 handleEvent:a2];
  }
}

uint64_t sub_182035528()
{
  return -1;
}

uint64_t sub_18203556C()
{
  return 0;
}

uint64_t sub_1820355B0()
{
  return 0;
}

uint64_t sub_1820355F8()
{
  return -1;
}

uint64_t sub_18203563C()
{
  return 0;
}

void _NSAllocatorAllocateHALTIfUsed()
{
}

uint64_t sub_182035D18()
{
  return 0;
}

uint64_t sub_182035D3C()
{
  return 0;
}

void sub_1820366E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 88), 8);
  _Unwind_Resume(a1);
}

uint64_t _NSEncodingToNewDataForExtendedAttribute(unint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  CFStringEncoding v1 = CFStringConvertNSStringEncodingToEncoding(a1);
  if (v1 == -1) {
    return 0;
  }
  CFStringEncoding v2 = v1;
  CFIndex usedBufLen = 0;
  CFStringRef v3 = CFStringConvertEncodingToIANACharSetName(v1);
  if (v3)
  {
    CFStringRef v4 = v3;
    v10.length = CFStringGetLength(v3);
    v10.location = 0;
    if (CFStringGetBytes(v4, v10, 0x8000100u, 0x3Fu, 1u, buffer, 70, &usedBufLen))
    {
      CFIndex v5 = usedBufLen;
    }
    else
    {
      CFIndex v5 = 0;
      CFIndex usedBufLen = 0;
    }
  }
  else
  {
    CFIndex v5 = 0;
  }
  snprintf_l((char *)&buffer[v5], 0x63uLL, 0, ";%u", v2);
  return [objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:buffer length:strlen((const char *)buffer)];
}

uint64_t _NSEncodingFromDataForExtendedAttribute(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  CFStringEncoding v2 = (const UInt8 *)[a1 bytes];
  uint64_t v3 = [a1 length];
  CFStringRef v4 = &v2[v3];
  CFIndex v5 = v2;
  if (v3 >= 1)
  {
    CFIndex v5 = v2;
    do
    {
      if (*v5 == 59) {
        break;
      }
      ++v5;
    }
    while (v5 < v4);
  }
  if (v5 >= v4 - 1
    || ((unint64_t v6 = v4 - (v5 + 1), v6 >= 0x63) ? (v7 = 99) : (v7 = v6),
        (__memcpy_chk(), v14[v7] = 0, CFStringEncoding encoding = 0, sscanf_l(v14, 0, "%u", &encoding) != 1)
     || !CFStringIsEncodingAvailable(encoding)
     || (unint64_t v8 = CFStringConvertEncodingToNSStringEncoding(encoding), v8 == 0xFFFFFFFF)))
  {
    if (v5 > v2)
    {
      CFStringRef v9 = CFStringCreateWithBytes(0, v2, v5 - v2, 0x8000100u, 1u);
      if (v9)
      {
        CFStringRef v10 = v9;
        CFStringEncoding v11 = CFStringConvertIANACharSetNameToEncoding(v9);
        if (v11 == -1) {
          unint64_t v8 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v8 = CFStringConvertEncodingToNSStringEncoding(v11);
        }
        CFRelease(v10);
        return v8;
      }
    }
    return 0xFFFFFFFFLL;
  }
  return v8;
}

uint64_t writeStringToURLOrPath(void *a1, void *a2, unsigned int a3, uint64_t a4, NSError **a5)
{
  v13[1] = *(id *)MEMORY[0x1E4F143B8];
  id v12 = 0;
  v13[0] = 0;
  uint64_t result = [a1 getExternalRepresentation:v13 extendedAttributes:&v12 forWritingToURLOrPath:a2 usingEncoding:a4 error:a5];
  if (result)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      if (([a2 isFileURL] & 1) == 0) {
        return [v13[0] writeToURL:a2 options:a3 error:a5];
      }
      uint64_t v9 = [a2 path];
      if (!v9)
      {
        if (!a5) {
          return 0;
        }
        CFStringRef v10 = _NSErrorWithFilePath(4, (uint64_t)a2);
        uint64_t result = 0;
        *a5 = v10;
        return result;
      }
    }
    else
    {
      uint64_t v9 = (uint64_t)a2;
    }
    uint64_t v11 = [v12 objectForKey:@"com.apple.TextEncoding"];
    if (v11) {
      return [MEMORY[0x1E4F1C9B8] _writeDataToPath:v9 data:v13[0] options:a3 stringEncodingAttributeData:v11 reportProgress:0 error:a5];
    }
    else {
      return [MEMORY[0x1E4F1C9B8] _writeDataToPath:v9 data:v13[0] options:a3 reportProgress:0 error:a5];
    }
  }
  return result;
}

uint64_t sub_182037B88()
{
  return v0;
}

uint64_t sub_182037BB0()
{
  return v0;
}

uint64_t sub_182037BD8()
{
  return v0;
}

uint64_t sub_182037C00()
{
  return v0;
}

uint64_t sub_182037C28()
{
  return v0;
}

uint64_t sub_182037C50()
{
  return v0;
}

uint64_t sub_182037D44()
{
  return v0;
}

uint64_t sub_182037D6C()
{
  return v0;
}

uint64_t sub_182037D94()
{
  return v0;
}

uint64_t sub_1820381E8()
{
  return 0;
}

uint64_t sub_182038230()
{
  return 0;
}

CFStringRef _NSNewInlineCString(const UInt8 *a1, CFIndex a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();

  return CFStringCreateWithBytes(v4, a1, a2, SystemEncoding, 0);
}

uint64_t NSCompareCharacters@<X0>(unsigned __int16 *a1@<X0>, unsigned __int16 *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  if (a3 >= a4) {
    unint64_t v6 = a4;
  }
  else {
    unint64_t v6 = a3;
  }
  if (v6)
  {
    while (1)
    {
      int v8 = *a1++;
      int v7 = v8;
      int v10 = *a2++;
      int v9 = v10;
      if (a5)
      {
        if ((v7 - 97) < 0x1A) {
          LOWORD(v7) = v7 - 32;
        }
        if ((v9 - 97) < 0x1A) {
          LOWORD(v9) = v9 - 32;
        }
      }
      if ((unsigned __int16)v7 > (unsigned __int16)v9) {
        a6 = 1;
      }
      if ((unsigned __int16)v7 < (unsigned __int16)v9) {
        a6 = -1;
      }
      if ((unsigned __int16)v7 != (unsigned __int16)v9) {
        break;
      }
      if (!--v6) {
        goto LABEL_16;
      }
    }
  }
  else
  {
LABEL_16:
    a6 = a3 > a4;
    if (a3 < a4) {
      return -1;
    }
  }
  return a6;
}

uint64_t NSCompareCString(unsigned __int8 *a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4, char a5)
{
  if (a3 >= a4) {
    unint64_t v5 = a4;
  }
  else {
    unint64_t v5 = a3;
  }
  if (v5)
  {
    uint64_t v6 = (uint64_t)&_NS_cmark_node_get_fence_info;
    while (1)
    {
      unsigned int v7 = *a1++;
      int v8 = *(unsigned __int16 *)(_NSCStringCharToUnicharTable + 2 * v7);
      unsigned int v9 = *a2++;
      int v10 = *(unsigned __int16 *)(_NSCStringCharToUnicharTable + 2 * v9);
      if (a5)
      {
        if ((v8 - 97) < 0x1A) {
          LOWORD(v_Block_object_dispose(&STACK[0x260], 8) = v8 - 32;
        }
        if ((v10 - 97) < 0x1A) {
          LOWORD(v10) = v10 - 32;
        }
      }
      if ((unsigned __int16)v8 > (unsigned __int16)v10) {
        uint64_t v6 = 1;
      }
      if ((unsigned __int16)v8 < (unsigned __int16)v10) {
        uint64_t v6 = -1;
      }
      if ((unsigned __int16)v8 != (unsigned __int16)v10) {
        break;
      }
      if (!--v5) {
        goto LABEL_17;
      }
    }
  }
  else
  {
LABEL_17:
    uint64_t v6 = a3 > a4;
    if (a3 < a4) {
      return -1;
    }
  }
  return v6;
}

uint64_t NSHashCStringAsIs(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F40D8620](a1, a2);
}

uint64_t NSHashString(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F40D8628](a1, a2);
}

uint64_t __NSCharToUnicharCFWrapper(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v4 = 0;
  int v1 = ((uint64_t (*)(void, uint64_t, unsigned __int16 *))*MEMORY[0x1E4F1CBA0])(0, a1, &v4);
  unsigned __int16 v2 = v4;
  if (!v1) {
    return (unsigned __int16)-3;
  }
  return v2;
}

uint64_t _NSConvertToASCIIorUnicode(unsigned __int16 *a1, size_t a2, unint64_t a3, void *a4, void *a5, unsigned char *a6, malloc_zone_t *zone)
{
  unsigned int v7 = zone;
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  long long v19 = 0u;
  memset(v20, 0, 496);
  uint64_t v11 = _NSConvertToASCIIorUnicode2(a1, a2, a3, 0, (uint64_t)&v19, zone);
  if (v11)
  {
    char v12 = v19;
    long long v13 = (uint64_t *)&v19 + 1;
    if (!(_BYTE)v19) {
      long long v13 = (uint64_t *)v20;
    }
    uint64_t v14 = *v13;
    if (BYTE1(v19))
    {
      *a4 = v14;
    }
    else if (v14)
    {
      size_t v15 = *((void *)&v20[0] + 1) << (v19 == 0);
      if (!v7) {
        unsigned int v7 = malloc_default_zone();
      }
      uint64_t v16 = malloc_type_zone_malloc(v7, v15, 0x4A6F13AEuLL);
      *a4 = v16;
      unint64_t v17 = (const void **)v20;
      if ((_BYTE)v19) {
        unint64_t v17 = (const void **)&v19 + 1;
      }
      memmove(v16, *v17, *((void *)&v20[0] + 1) << ((_BYTE)v19 == 0));
      char v12 = v19;
    }
    else
    {
      *a4 = 0;
    }
    *a5 = *((void *)&v20[0] + 1);
    *a6 = v12;
  }
  return v11;
}

uint64_t sub_18203B994()
{
  return 0;
}

uint64_t sub_18203BA24()
{
  return 0;
}

uint64_t sub_18203BA68()
{
  return 0;
}

uint64_t sub_18203BAAC()
{
  return 0;
}

uint64_t sub_18203BB3C()
{
  return 0;
}

uint64_t sub_18203BF58()
{
  return 0;
}

uint64_t sub_18203BF9C()
{
  return 0;
}

uint64_t sub_18203BFE0()
{
  return 0;
}

uint64_t sub_18203C024()
{
  return 0;
}

uint64_t sub_18203C068()
{
  return 0;
}

uint64_t sub_18203C0AC()
{
  return 0;
}

uint64_t sub_18203C0F0()
{
  return 0;
}

uint64_t sub_18203C134()
{
  return 0;
}

uint64_t sub_18203C264()
{
  return 0;
}

uint64_t sub_18203C2A8()
{
  return 0;
}

uint64_t sub_18203C2EC()
{
  return 0;
}

void sub_18203C96C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18203CAB4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18203DEE4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 88));
  _Unwind_Resume(a1);
}

void sub_18203E184(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18203E4F4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void COPY_SETTER_IMPL(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = atomic_load((unint64_t *)(a1 + 56));
  if ((v4 & 0x100000000) != 0)
  {
    unsigned int v7 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v8 = *MEMORY[0x1E4F1C3C8];
    unsigned int v9 = (NSString *)@"task already launched";
    goto LABEL_8;
  }
  if (!a2)
  {
    unsigned int v9 = +[NSString stringWithFormat:@"%@", a4];
    unsigned int v7 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v8 = *MEMORY[0x1E4F1C3C8];
LABEL_8:
    objc_exception_throw((id)[v7 exceptionWithName:v8 reason:v9 userInfo:0]);
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  uint64_t v11 = __COPY_SETTER_IMPL_block_invoke;
  char v12 = &unk_1E51FA8B0;
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v6 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  if (!*(void *)(a1 + 16)) {
    *(void *)(a1 + 16) = +[NSTask currentTaskDictionary];
  }
  ((void (*)(void *))v11)(v10);
  os_unfair_lock_unlock(v6);
}

void sub_18203E690(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id COPY_GETTER_IMPL(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = 0;
  char v12 = &v11;
  uint64_t v13 = 0x3052000000;
  uint64_t v14 = __Block_byref_object_copy__15;
  uint64_t v15 = __Block_byref_object_dispose__15;
  uint64_t v16 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  unsigned int v7 = __COPY_GETTER_IMPL_block_invoke;
  uint64_t v8 = &unk_1E51FA8D8;
  uint64_t v9 = a2;
  int v10 = &v11;
  uint64_t v3 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  if (!*(void *)(a1 + 16)) {
    *(void *)(a1 + 16) = +[NSTask currentTaskDictionary];
  }
  ((void (*)(void *))v7)(v6);
  os_unfair_lock_unlock(v3);
  id v4 = (id)v12[5];
  _Block_object_dispose(&v11, 8);
  return v4;
}

void sub_18203E8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id GETTER_IMPL(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = 0;
  char v12 = &v11;
  uint64_t v13 = 0x3052000000;
  uint64_t v14 = __Block_byref_object_copy__15;
  uint64_t v15 = __Block_byref_object_dispose__15;
  uint64_t v16 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  unsigned int v7 = __GETTER_IMPL_block_invoke;
  uint64_t v8 = &unk_1E51FA8D8;
  uint64_t v9 = a2;
  int v10 = &v11;
  uint64_t v3 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  if (!*(void *)(a1 + 16)) {
    *(void *)(a1 + 16) = +[NSTask currentTaskDictionary];
  }
  ((void (*)(void *))v7)(v6);
  os_unfair_lock_unlock(v3);
  id v4 = (id)v12[5];
  _Block_object_dispose(&v11, 8);
  return v4;
}

void sub_18203EA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void NOCOPY_SETTER_IMPL(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = atomic_load((unint64_t *)(a1 + 56));
  if ((v3 & 0x100000000) != 0) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"task already launched" userInfo:0]);
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  unsigned int v7 = __NOCOPY_SETTER_IMPL_block_invoke;
  uint64_t v8 = &unk_1E51FA8B0;
  uint64_t v9 = a2;
  uint64_t v10 = a3;
  uint64_t v5 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  if (!*(void *)(a1 + 16)) {
    *(void *)(a1 + 16) = +[NSTask currentTaskDictionary];
  }
  ((void (*)(void *))v7)(v6);
  os_unfair_lock_unlock(v5);
}

void sub_18203EC94(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18203EE8C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18203EF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

unint64_t *_signalRunningTask(unint64_t *result, const char *a2)
{
  unint64_t v2 = atomic_load(result + 7);
  if ((v2 & 0x100000000) == 0)
  {
    unint64_t v3 = (void *)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8], +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@: task not launched", _NSMethodExceptionProem((objc_class *)result, a2)), 0 reason userInfo];
    objc_exception_throw(v3);
  }
  return result;
}

void __PTHREAD_SPAWN_EAGAIN_OVERLIMIT__()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = _NSOSLog();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_fault_impl(&dword_181795000, v0, OS_LOG_TYPE_FAULT, "NSTask: Failed to spawn task due to receieving EAGAIN many times despite retrying; this means the system could not"
      " spawn a new process.",
      v1,
      2u);
  }
}

uint64_t sub_18203F864()
{
  return 0;
}

uint64_t sub_18203F8A8()
{
  return 0;
}

uint64_t sub_182040A74()
{
  return 0;
}

void _NSThreadPoisoned()
{
  qword_1E8EDF350 = (uint64_t)"Corrupt NSThread detected. Pointer authentication.";
  __break(1u);
}

uint64_t __NSThread__block_start__(void *a1)
{
  if (qword_1EB1ED040 != -1) {
    dispatch_once(&qword_1EB1ED040, &__block_literal_global_250);
  }
  uint64_t v2 = pthread_setspecific(qword_1EB1ED038, a1);
  unint64_t v3 = (void *)MEMORY[0x185308110](v2);
  (*((void (**)(void *))a1 + 2))(a1);
  return 0;
}

uint64_t sub_1820419B8()
{
  return 0;
}

uint64_t sub_182041A44()
{
  return 0;
}

double sub_182041A88()
{
  return 0.0;
}

double sub_182041ACC()
{
  return 0.0;
}

uint64_t sub_182041BA8()
{
  return 0;
}

void __NSDescribeTimerCallout(uint64_t a1, uint64_t a2, char *a3, size_t a4, char *a5, size_t a6, uint64_t *a7)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    char v12 = *(void **)(a2 + 8);
    uint64_t v13 = *(const char **)(a2 + 16);
    ClassSEL Name = object_getClassName(v12);
    SEL Name = sel_getName(v13);
    *a7 = object_getMethodImplementation();
    uint64_t v16 = "<unknown class name>";
    if (ClassName) {
      uint64_t v16 = ClassName;
    }
    uint64_t v17 = "<unknown selector>";
    if (Name) {
      uint64_t v17 = Name;
    }
    snprintf(a5, a6, "(NSTimer) [%s %s]", v16, v17);
    Class Class = object_getClass(v12);
    memset(&v20, 0, sizeof(v20));
    if (dladdr(Class, &v20))
    {
      dli_fname = v20.dli_fname;
      if (!v20.dli_fname) {
        dli_fname = "<unknown library>";
      }
      snprintf(a3, a4, "%s", dli_fname);
    }
  }
}

uint64_t sub_182043AF0()
{
  return 0;
}

uint64_t sub_182043BB8()
{
  return 0;
}

uint64_t sub_182043C80()
{
  return 0;
}

uint64_t sub_182043D48()
{
  return 0;
}

uint64_t sub_182043E10()
{
  return 0;
}

uint64_t sub_182043ED8()
{
  return 0;
}

uint64_t sub_182043FA0()
{
  return 0;
}

uint64_t sub_182044068()
{
  return 0;
}

uint64_t sub_1820440A4()
{
  return 0;
}

uint64_t sub_18204416C()
{
  return 0;
}

uint64_t sub_1820441A8()
{
  return 0;
}

uint64_t sub_1820441E8()
{
  return 0;
}

uint64_t sub_182044228()
{
  return 0;
}

uint64_t sub_182044268()
{
  return 0;
}

uint64_t sub_1820442A8()
{
  return 0;
}

uint64_t sub_1820442E8()
{
  return 0;
}

__CFString *sub_182044328()
{
  return &stru_1ECA5C228;
}

uint64_t sub_18204436C()
{
  return 0;
}

uint64_t sub_1820443A8()
{
  return 0;
}

uint64_t sub_1820443E8()
{
  return 0;
}

id sub_182045584(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  v17.receiver = v15;
  v17.super_class = (Class)NSURLComponents;
  return objc_msgSendSuper2(&v17, sel_init);
}

id sub_182045614(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  v17.receiver = v15;
  v17.super_class = (Class)NSURLComponents;
  return objc_msgSendSuper2(&v17, sel_init);
}

id sub_1820456A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  v17.receiver = v15;
  v17.super_class = (Class)NSURLComponents;
  return objc_msgSendSuper2(&v17, sel_init);
}

uint64_t sub_182045720()
{
  return 0;
}

uint64_t sub_182045764()
{
  return 0;
}

uint64_t sub_1820457A8()
{
  return 0;
}

uint64_t sub_1820457EC()
{
  return 0;
}

uint64_t sub_18204587C()
{
  return 0;
}

uint64_t sub_18204590C()
{
  return 0;
}

uint64_t sub_18204599C()
{
  return 0;
}

uint64_t sub_182045A2C()
{
  return 0;
}

uint64_t sub_182045ABC()
{
  return 0;
}

uint64_t sub_182045B4C()
{
  return 0;
}

uint64_t sub_182045BDC()
{
  return 0;
}

uint64_t sub_182045C6C()
{
  return 0;
}

uint64_t sub_182045CFC()
{
  return 0;
}

uint64_t sub_182045D8C()
{
  return 0;
}

uint64_t sub_182045E1C()
{
  return 0;
}

uint64_t sub_182045EAC()
{
  return 0;
}

uint64_t sub_182045F3C()
{
  return 0;
}

uint64_t sub_182045FCC()
{
  return 0;
}

uint64_t sub_18204605C()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_1820460A4()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_1820460EC()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_182046134()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_18204617C()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_1820461C4()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_18204620C()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_182046254()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_18204629C()
{
  return 0;
}

uint64_t sub_18204632C()
{
  return 0;
}

uint64_t NSURLReportAssertionFailure(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v4 = (FILE *)*MEMORY[0x1E4F143C8];
  if (a4) {
    return fprintf(v4, "=================\nASSERTION FAILED: %s (%s:%ld %s)\n=================\n");
  }
  else {
    return fprintf(v4, "=================\nSHOULD NEVER BE REACHED (%s:%ld %s)\n=================\n");
  }
}

uint64_t NSURLReportAssertionFailureWithMessage(const char *a1, uint64_t a2, const char *a3, const char *a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v14 = (FILE **)MEMORY[0x1E4F143C8];
  fwrite("=================\nASSERTION FAILED: ", 0x24uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
  vfprintf_l(*v14, 0, a5, &a9);
  return fprintf(*v14, "\n%s (%s:%ld %s)\n=================\n", a4, a1, a2, a3);
}

uint64_t NSURLReportArgumentAssertionFailure(const char *a1, uint64_t a2, const char *a3, const char *a4, const char *a5)
{
  return fprintf((FILE *)*MEMORY[0x1E4F143C8], "=================\nARGUMENT BAD: %s, %s (%s:%ld %s)\n=================\n", a4, a5, a1, a2, a3);
}

uint64_t NSURLReportFatalError(const char *a1, uint64_t a2, const char *a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v13 = (FILE **)MEMORY[0x1E4F143C8];
  fwrite("=================\nFATAL ERROR: ", 0x1FuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
  vfprintf_l(*v13, 0, a4, &a9);
  return fprintf(*v13, "\n(%s:%ld %s)\n=================\n", a1, a2, a3);
}

uint64_t NSURLReportError(const char *a1, uint64_t a2, const char *a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v13 = (FILE **)MEMORY[0x1E4F143C8];
  fwrite("=================\nERROR: ", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
  vfprintf_l(*v13, 0, a4, &a9);
  return fprintf(*v13, "\n(%s:%ld %s)\n=================\n", a1, a2, a3);
}

void NSURLLog(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  int v13 = *(_DWORD *)(a4 + 16);
  if (!v13)
  {
    *(_DWORD *)(a4 + 16) = 1;
    uint64_t v15 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "objectForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(void *)(a4 + 8)));
    if (v15)
    {
      uint64_t v16 = v15;
      LODWORD(v18[0]) = 0;
      if (![+[NSScanner scannerWithString:v16 v15]; {
      if ((*(void *)a4 & ~(unint64_t)LODWORD(v18[0])) == 0)
      }
        *(_DWORD *)(a4 + 16) = 2;
    }
    int v13 = *(_DWORD *)(a4 + 16);
  }
  if (v13 == 2)
  {
    objc_super v17 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "- %s:%ld %s - ", a1, a2, a3);
    v18[0] = &a9;
    vfprintf_l(*v17, 0, a5, &a9);
    if (a5[strlen(a5) - 1] != 10) {
      putc(10, *v17);
    }
  }
}

Class UTTypeClass()
{
  Class result = NSClassFromString((NSString *)@"UTType");
  if (!result)
  {
    if (UTTypeClass_predicate != -1) {
      dispatch_once(&UTTypeClass_predicate, &__block_literal_global_1699);
    }
    return NSClassFromString((NSString *)@"UTType");
  }
  return result;
}

void *__UTTypeClass_block_invoke()
{
  return dlopen("/System/Library/Frameworks/UniformTypeIdentifiers.framework/UniformTypeIdentifiers", 256);
}

NSLock *NSURLHostNameAddressInfoInit()
{
  qword_1EB1ED870 = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  Class result = objc_alloc_init(NSLock);
  _MergedGlobals_125 = (uint64_t)result;
  return result;
}

uint64_t resolveHostName(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  pthread_setname_np("com.apple.NSURLHostNameAddressInfo.resolving");
  _CFAutoreleasePoolPush();
  uint64_t v2 = (void *)[a1 host];
  __int16 v7 = 0;
  unint64_t v3 = +[NSString stringWithCharacters:&v7 length:1];
  if (v2 && [v2 rangeOfString:v3 options:2] == 0x7FFFFFFFFFFFFFFFLL)
  {
    id v4 = (char *)[v2 UTF8String];
    uint64_t v5 = doResolveHostName((uint64_t)v2, v4, 2);
    if (!v5) {
      uint64_t v5 = doResolveHostName((uint64_t)v2, v4, 30);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  [a1 hostNameResolved:v5];

  _CFAutoreleasePoolPop();
  return 0;
}

hostent *doResolveHostName(uint64_t a1, char *a2, int a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int v23 = 0;
  id v4 = getipnodebyname(a2, a3, 0, &v23);
  uint64_t v5 = v4;
  if (!v4) {
    return v5;
  }
  int h_addrtype = v4->h_addrtype;
  BOOL v7 = h_addrtype == 30 || h_addrtype == 2;
  if (!v7 || !*v4->h_addr_list)
  {
LABEL_26:
    freehostent(v5);
    return 0;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
LABEL_9:
  char v12 = v11;
  int v13 = v8;
  uint64_t v14 = v9;
  do
  {
    uint64_t v15 = (addrinfo *)malloc_type_calloc(1uLL, 0x30uLL, 0x1030040D19128EAuLL);
    uint64_t v11 = v15;
    uint64_t v8 = v15;
    if (v13)
    {
      v12->ai_next = v15;
      uint64_t v8 = v13;
    }
    int v16 = v5->h_addrtype;
    v15->ai_famildouble y = v16;
    *(void *)&v15->ai_socktype = 0x600000001;
    if (v16 != 2)
    {
      v15->ai_addrlen = 28;
      long long v19 = (char *)malloc_type_calloc(1uLL, 0x1CuLL, 0x1234816FuLL);
      *long long v19 = v11->ai_addrlen;
      v19[1] = 30;
      *(_OWORD *)(v19 + _Block_object_dispose(&STACK[0x260], 8) = *(_OWORD *)v5->h_addr_list[v14];
      goto LABEL_18;
    }
    int v17 = *(_DWORD *)v5->h_addr_list[v14];
    if (v17 != -1)
    {
      v15->ai_addrlen = 16;
      long long v19 = (char *)malloc_type_calloc(1uLL, 0x10uLL, 0xFBAA4E9BuLL);
      *long long v19 = v11->ai_addrlen;
      v19[1] = 2;
      *((_DWORD *)v19 + 1) = v17;
LABEL_18:
      v11->ai_addr = (sockaddr *)v19;
      v11->ai_canonname = strdup(v5->h_name);
      uint64_t v9 = v14 + 1;
      char v10 = 1;
      if (v5->h_addr_list[v14 + 1]) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
    free(v15);
    uint64_t v18 = (uint64_t)&v5->h_addr_list[v14++];
    int v13 = v8;
  }
  while (*(void *)(v18 + 8));
  if ((v10 & 1) == 0)
  {
    if (v8) {
      freeaddrinfo(v8);
    }
    goto LABEL_26;
  }
LABEL_21:
  freehostent(v5);
  if (!v8) {
    return 0;
  }
  Dl_info v20 = [[NSURLHostNameAddressInfo alloc] _initWithAddressInfo:v8];
  uint64_t v5 = v20;
  if (v20)
  {
    uint64_t v21 = v20;
    [(id)_MergedGlobals_125 lock];
    [(id)qword_1EB1ED870 removeObjectForKey:a1];
    [(id)qword_1EB1ED870 setObject:v5 forKey:a1];
    [(id)_MergedGlobals_125 unlock];
  }
  return v5;
}

uint64_t _hash_compare(void *a1, void *a2)
{
  if (*a1 >= *a2) {
    unsigned int v2 = 0;
  }
  else {
    unsigned int v2 = -1;
  }
  if (*a1 > *a2) {
    return 1;
  }
  else {
    return v2;
  }
}

uint64_t NSURLLocalizedString(const char *a1)
{
  unsigned int v2 = (void *)_NSFoundationBundle();
  CFStringRef v3 = CFStringCreateWithCStringNoCopy(0, a1, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  uint64_t v4 = [v2 localizedStringForKey:v3 value:0 table:@"URL"];
  CFRelease(v3);
  return v4;
}

unint64_t escapeChars(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v3 = (unint64_t)&a1[a2];
  if (a2 >= 1)
  {
    uint64_t v4 = a1;
    do
    {
      unint64_t v5 = *v4;
      if ((v5 - 127) > 0xFFFFFFA1)
      {
        ++v4;
      }
      else
      {
        memmove(v4 + 3, v4 + 1, v3 - (void)v4);
        unsigned __int8 *v4 = 37;
        v4[1] = a0123456789abcd[v5 >> 4];
        _OWORD v4[2] = a0123456789abcd[v5 & 0xF];
        v3 += 2;
        v4 += 3;
      }
    }
    while ((unint64_t)v4 < v3);
  }
  return v3 - (void)a1;
}

void _NSUserDefaults_Log_Nonsensical_Suites(uint64_t a1)
{
  v1[5] = *MEMORY[0x1E4F143B8];
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 3221225472;
  v1[2] = ___NSUserDefaults_Log_Nonsensical_Suites_block_invoke;
  v1[3] = &unk_1E51F71D0;
  v1[4] = a1;
  if (_NSUserDefaults_Log_Nonsensical_Suites_onceToken != -1) {
    dispatch_once(&_NSUserDefaults_Log_Nonsensical_Suites_onceToken, v1);
  }
}

uint64_t NSOpenStepDirectoryForUser()
{
  return 0;
}

uint64_t findUnit(uint64_t *a1, double a2)
{
  uint64_t v4 = (char *)malloc_type_malloc(0x40uLL, 0x1000040451B5BE8uLL);
  for (uint64_t i = 0; i != 64; i += 16)
  {
    double v6 = convertUnitFromMeters(*a1, a2);
    BOOL v7 = &v4[i];
    *(double *)BOOL v7 = v6;
    uint64_t v8 = *a1++;
    *((void *)v7 + 1) = v8;
  }
  qsort(v4, 4uLL, 0x10uLL, (int (__cdecl *)(const void *, const void *))compare);
  uint64_t v9 = 0;
  do
  {
    uint64_t v10 = v9 + 16;
    if (*(double *)&v4[v9] > 1.0) {
      break;
    }
    BOOL v11 = v9 == 48;
    v9 += 16;
  }
  while (!v11);
  uint64_t v12 = *(void *)&v4[v10 - 8];
  free(v4);
  return v12;
}

double convertUnitFromMeters(uint64_t a1, double a2)
{
  double v4 = 0.0;
  if (!v3 & v2)
  {
    switch(a1)
    {
      case 1281:
        double v5 = 39.3701;
        goto LABEL_14;
      case 1282:
        double v5 = 3.28084;
        goto LABEL_14;
      case 1283:
        double v5 = 1.0936;
        goto LABEL_14;
      case 1284:
        double v5 = 0.00062137;
LABEL_14:
        double v4 = a2 * v5;
        break;
      default:
        return v4;
    }
  }
  else
  {
    switch(a1)
    {
      case 8:
        double v6 = 0.001;
        goto LABEL_10;
      case 9:
        double v6 = 0.01;
        goto LABEL_10;
      case 10:
      case 12:
      case 13:
        return v4;
      case 11:
        return a2;
      case 14:
        double v6 = 1000.0;
LABEL_10:
        double v4 = a2 / v6;
        break;
      default:
        JUMPOUT(0);
    }
  }
  return v4;
}

uint64_t compare(double *a1, double *a2)
{
  if (*a1 >= *a2) {
    unsigned int v2 = 0;
  }
  else {
    unsigned int v2 = -1;
  }
  if (*a1 > *a2) {
    return 1;
  }
  else {
    return v2;
  }
}

NSString *_stringFromEdgeInsets(void *a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  long long v2 = 0u;
  long long v3 = 0u;
  [a1 getValue:&v2];
  return +[NSString stringWithFormat:@"{%.*g, %.*g, %.*g, %.*g}", 17, (void)v2, 17, *((void *)&v2 + 1), 17, (void)v3, 17, *((void *)&v3 + 1)];
}

uint64_t sub_18204E7CC()
{
  return 0;
}

void sub_18204E968(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x18204E930);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_18204EC98()
{
  return v0;
}

void sub_182050D10()
{
}

void sub_182050D68(_Unwind_Exception *a1)
{
}

void sub_182050D74(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x182050D80);
}

void sub_182050EBC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x182050E30);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_182050F38()
{
  return v0;
}

uint64_t sub_182050F60()
{
  return v0;
}

uint64_t sub_182050F88()
{
  return v0;
}

uint64_t sub_182050FB0()
{
  return v0;
}

uint64_t sub_182050FD8()
{
  return v0;
}

uint64_t sub_182051000()
{
  return v0;
}

uint64_t sub_182051028()
{
  return v0;
}

uint64_t sub_182051050()
{
  return v0;
}

uint64_t sub_182051078()
{
  return v0;
}

uint64_t sub_1820510A0()
{
  return v0;
}

uint64_t sub_1820510C8()
{
  return v0;
}

uint64_t sub_1820510F0()
{
  return v0;
}

uint64_t sub_182051118()
{
  return v0;
}

uint64_t sub_182051140()
{
  return v0;
}

uint64_t sub_182051168()
{
  return v0;
}

uint64_t sub_18205126C()
{
  return 0;
}

uint64_t mungeUnionsAndStructures(unsigned __int8 **a1)
{
  for (uint64_t i = *a1; ; uint64_t i = v3 + 1)
  {
    unsigned int v2 = *i;
    if (v2 > 0x7A) {
      break;
    }
    long long v3 = i;
    if (v2 == 40)
    {
      while ((_BYTE)v2)
      {
        if (v2 == 61) {
          goto LABEL_18;
        }
        char v4 = *++v3;
        LOBYTE(v2) = v4;
        if (v4 == 41) {
          goto LABEL_17;
        }
      }
      return 0;
    }
    if (v2 != 41) {
      goto LABEL_20;
    }
LABEL_17:
    long long v3 = i;
LABEL_18:
    ;
  }
  if (v2 == 123)
  {
    long long v3 = i;
    while ((_BYTE)v2)
    {
      if (v2 == 61) {
        goto LABEL_18;
      }
      char v5 = *++v3;
      LOBYTE(v2) = v5;
      if (v5 == 125) {
        goto LABEL_17;
      }
    }
    return 0;
  }
  if (v2 == 125) {
    goto LABEL_17;
  }
LABEL_20:
  *a1 = i;
  return 1;
}

uint64_t __ExtensionFoundationLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB1ED8D0 = result;
  return result;
}

uint64_t updateOffsetsForPosition(uint64_t result, unsigned __int8 *a2, uint64_t a3, uint64_t a4, unsigned __int8 **a5)
{
  if (a3 < 1 || a4 <= 0) {
    goto LABEL_47;
  }
  double v6 = *a5;
  char v5 = a5[1];
  BOOL v7 = a5[2];
  uint64_t v8 = (uint64_t)a5[3];
  uint64_t v9 = (uint64_t)a5[4];
  uint64_t v10 = (uint64_t)a5[5];
  if (*a5 == (unsigned __int8 *)0x7FFFFFFFFFFFFFFFLL
    || v5 == (unsigned __int8 *)0x7FFFFFFFFFFFFFFFLL
    || v7 == (unsigned __int8 *)0x7FFFFFFFFFFFFFFFLL
    || v8 == 0x7FFFFFFFFFFFFFFFLL
    || v9 < 1
    || v10 <= 0)
  {
    char v5 = 0;
    BOOL v7 = 0;
    uint64_t v8 = 0;
    double v6 = 0;
    *(_OWORD *)a5 = 0u;
    *((_OWORD *)a5 + 1) = 0u;
    uint64_t v9 = 1;
    *((int64x2_t *)a5 + 2) = vdupq_n_s64(1uLL);
    uint64_t v10 = 1;
  }
  if ((uint64_t)v6 >= (uint64_t)a2)
  {
LABEL_47:
    int64x2_t v22 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    *(int64x2_t *)a5 = v22;
    *((int64x2_t *)a5 + 1) = v22;
    a5[4] = (unsigned __int8 *)a3;
    a5[5] = (unsigned __int8 *)a4;
    return result;
  }
  int v16 = (char *)&v6[result];
  while (1)
  {
    int v17 = (unsigned __int8 *)&v16[-result];
    if (&v16[-result] == (char *)v7)
    {
      uint64_t v18 = *v16;
      uint64_t v19 = trailingBytesForUTF8[v18];
      v5 += v8;
      uint64_t v8 = v18 < 0xF0 ? 1 : 2;
      v7 += v19 + 1;
      if (v19 == -1) {
        uint64_t v8 = 0;
      }
    }
    if (v9 != a3)
    {
      uint64_t v20 = a2 - v17;
      if (v20)
      {
        int v21 = *v16;
        if (v21 == 10)
        {
          uint64_t v20 = 1;
        }
        else if (v21 == 13)
        {
          if (v20 != 1)
          {
            if (v16[1] == 10) {
              uint64_t v20 = 2;
            }
            else {
              uint64_t v20 = 1;
            }
          }
        }
        else
        {
          uint64_t v20 = 0;
        }
      }
      if (v20)
      {
        ++v9;
        uint64_t v10 = 1;
      }
      else
      {
        ++v10;
      }
      if (!v20) {
        uint64_t v20 = 1;
      }
      goto LABEL_46;
    }
    if (v10 == a4) {
      break;
    }
    ++v10;
    uint64_t v20 = 1;
    uint64_t v9 = a3;
LABEL_46:
    v16 += v20;
    if (v16 >= (char *)&a2[result]) {
      goto LABEL_47;
    }
  }
  a5[4] = (unsigned __int8 *)a3;
  a5[5] = (unsigned __int8 *)a4;
  *a5 = v17;
  a5[1] = v5;
  a5[2] = v7;
  a5[3] = (unsigned __int8 *)v8;
  return result;
}

uint64_t __attributesFromKnownAttributeKeys_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = +[_NSAttributeDescriptor descriptorForAttributeKey:a2];
  if (v6)
  {
    BOOL v7 = v6;
    uint64_t result = [v6 attributeValueFromValue:a3];
    if (!result) {
      return result;
    }
    uint64_t v9 = result;
    uint64_t v10 = *(void **)(a1 + 32);
    uint64_t v11 = [v7 name];
    uint64_t v12 = v10;
    uint64_t v13 = v9;
  }
  else
  {
    uint64_t v12 = *(void **)(a1 + 32);
    uint64_t v13 = a3;
    uint64_t v11 = a2;
  }

  return [v12 setObject:v13 forKeyedSubscript:v11];
}

uint64_t compare_0(double *a1, double *a2)
{
  if (*a1 >= *a2) {
    unsigned int v2 = 0;
  }
  else {
    unsigned int v2 = -1;
  }
  if (*a1 > *a2) {
    return 1;
  }
  else {
    return v2;
  }
}

uint64_t sub_1820540D0()
{
  return 0;
}

uint64_t sub_182054114()
{
  return 0;
}

uint64_t sub_182054158()
{
  return 0;
}

uint64_t sub_18205419C()
{
  return 0;
}

double sub_1820541E0()
{
  return 0.0;
}

void sub_182054BA0(_Unwind_Exception *a1)
{
}

uint64_t initkUTTypeURL_2()
{
  uint64_t v0 = MobileCoreServicesLibrary_2();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTypeURL");
  if (!v1) {
    __assert_rtn("initkUTTypeURL", "NSURL+NSItemProvider.m", 18, "constant");
  }
  uint64_t result = *v1;
  constantkUTTypeURL_2 = result;
  _MergedGlobals_88 = kUTTypeURLFunction_2;
  return result;
}

void *MobileCoreServicesLibrary_2()
{
  uint64_t result = (void *)MobileCoreServicesLibrary_frameworkLibrary_3;
  if (!MobileCoreServicesLibrary_frameworkLibrary_3)
  {
    uint64_t result = dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 2);
    MobileCoreServicesLibrary_frameworkLibrary_3 = (uint64_t)result;
    if (!result) {
      __assert_rtn("MobileCoreServicesLibrary", "NSURL+NSItemProvider.m", 17, "frameworkLibrary");
    }
  }
  return result;
}

uint64_t kUTTypeURLFunction_2()
{
  return constantkUTTypeURL_2;
}

uint64_t initUTTypeConformsTo_2(uint64_t a1, uint64_t a2)
{
  char v4 = MobileCoreServicesLibrary_2();
  char v5 = dlsym(v4, "UTTypeConformsTo");
  off_1EB1E8168 = (uint64_t (*)(void, void))v5;
  if (!v5) {
    __assert_rtn("initUTTypeConformsTo", "NSURL+NSItemProvider.m", 20, "softLinkUTTypeConformsTo");
  }

  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1, a2);
}

uint64_t initkUTTypeFileURL_1()
{
  uint64_t v0 = MobileCoreServicesLibrary_2();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTypeFileURL");
  if (!v1) {
    __assert_rtn("initkUTTypeFileURL", "NSURL+NSItemProvider.m", 19, "constant");
  }
  uint64_t result = *v1;
  constantkUTTypeFileURL_1 = result;
  off_1EB1E8160 = kUTTypeFileURLFunction_1;
  return result;
}

uint64_t kUTTypeFileURLFunction_1()
{
  return constantkUTTypeFileURL_1;
}

void _NSSetupLibXML()
{
  if (_NSSetupLibXML_xmlInitGuard != -1) {
    dispatch_once(&_NSSetupLibXML_xmlInitGuard, &__block_literal_global_56);
  }
}

uint64_t _xmlExternalEntityLoader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = +[NSXMLParser currentParser];
  if (v6)
  {
    if (v6[120])
    {
      return 0;
    }
    else
    {
      uint64_t v8 = __originalLoader;
      return [v6 _xmlExternalEntityWithURL:a1 identifier:a2 context:a3 originalLoaderFunction:v8];
    }
  }
  else
  {
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))__originalLoader;
    return v9(a1, a2, a3);
  }
}

NSError *_NSErrorFromXMLError(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 72))
  {
    char v4 = 0;
  }
  else
  {
    char v4 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    if (!*(unsigned char *)(a2 + 72))
    {
      objc_msgSend(v4, "setObject:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32)), @"NSXMLParserErrorLineNumber");
      objc_msgSend(v4, "setObject:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 68)), @"NSXMLParserErrorColumn");
      if (*(void *)(a1 + 8))
      {
        char v5 = [[NSString alloc] initWithUTF8String:*(void *)(a1 + 8)];
        if (v5)
        {
          id v6 = v5;
          [v4 setObject:v5 forKey:@"NSXMLParserErrorMessage"];
        }
      }
    }
  }
  if (*(unsigned char *)(a2 + 72)) {
    uint64_t v7 = 512;
  }
  else {
    uint64_t v7 = *(int *)(a1 + 4);
  }

  return +[NSError errorWithDomain:@"NSXMLParserErrorDomain" code:v7 userInfo:v4];
}

void _structuredErrorFunc(uint64_t a1, uint64_t a2)
{
}

void _internalSubset2(uint64_t a1, const xmlChar *a2, const xmlChar *a3, const xmlChar *a4)
{
}

BOOL _isStandalone(uint64_t a1)
{
  return *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 16) + 76) == 1;
}

BOOL _hasInternalSubset2(uint64_t a1)
{
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 16) + 80) != 0;
}

BOOL _hasExternalSubset2(uint64_t a1)
{
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 16) + 88) != 0;
}

xmlEntityPtr _getEntity(uint64_t a1, xmlChar *a2)
{
  if (a1 && *(unsigned char *)(a1 + 120)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = (void *)[(id)a1 delegate];
  xmlEntityPtr result = xmlGetPredefinedEntity(a2);
  if (!result)
  {
    xmlEntityPtr result = xmlSAX2GetEntity((void *)v5, a2);
    if (result)
    {
      if (*(_DWORD *)(v5 + 272) == 7) {
        *(void *)(v5 + 424) = 1;
      }
    }
    else
    {
      if ((objc_opt_respondsToSelector() & 1) == 0) {
        return 0;
      }
      if (a2)
      {
        id Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
        if (!Value) {
          id Value = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), (char *)a2);
        }
      }
      else
      {
        id Value = 0;
      }
      xmlEntityPtr result = (xmlEntityPtr)[v6 parser:a1 resolveExternalEntityName:Value systemID:0];
      if (result)
      {
        if (*(void *)(v5 + 16))
        {
          uint64_t v8 = [[NSString alloc] initWithData:result encoding:4];
          uint64_t v9 = [(NSString *)v8 UTF8String];
          if (v9)
          {
            uint64_t v10 = (const UInt8 *)v9;
            int v11 = strlen(v9);
            _characters(a1, v10, v11);
          }
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t _entityDecl(uint64_t result, xmlChar *a2, int a3, xmlChar *a4, xmlChar *a5, xmlChar *a6)
{
  uint64_t v11 = result;
  if (result && *(unsigned char *)(result + 120)) {
    return result;
  }
  uint64_t v12 = (void *)[(id)result delegate];
  xmlSAX2EntityDecl(*(void **)(v11 + 32), a2, a3, a4, a5, a6);
  if (a6)
  {
    id Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v11 + 64), a6);
    if (!Value) {
      id Value = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v11 + 64), (char *)a6);
    }
    if (a2) {
      goto LABEL_8;
    }
  }
  else
  {
    id Value = 0;
    if (a2)
    {
LABEL_8:
      uint64_t v14 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v11 + 64), a2);
      if (!v14) {
        uint64_t v14 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v11 + 64), (char *)a2);
      }
      goto LABEL_12;
    }
  }
  uint64_t v14 = 0;
LABEL_12:
  if ([Value length])
  {
    xmlEntityPtr result = objc_opt_respondsToSelector();
    if (result)
    {
      return [v12 parser:v11 foundInternalEntityDeclarationWithName:v14 value:Value];
    }
  }
  else
  {
    xmlEntityPtr result = [(id)v11 shouldResolveExternalEntities];
    if (result)
    {
      xmlEntityPtr result = objc_opt_respondsToSelector();
      if (result)
      {
        if (a4)
        {
          uint64_t v15 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v11 + 64), a4);
          if (!v15) {
            uint64_t v15 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v11 + 64), (char *)a4);
          }
        }
        else
        {
          uint64_t v15 = 0;
        }
        if (a5)
        {
          int v16 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v11 + 64), a5);
          if (!v16) {
            int v16 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v11 + 64), (char *)a5);
          }
        }
        else
        {
          int v16 = 0;
        }
        return [v12 parser:v11 foundExternalEntityDeclarationWithName:v14 publicID:v15 systemID:v16];
      }
    }
  }
  return result;
}

uint64_t _notationDecl(uint64_t result, void *a2, void *a3, void *a4)
{
  uint64_t v7 = result;
  if (!result || !*(unsigned char *)(result + 120))
  {
    uint64_t v8 = (void *)[(id)result delegate];
    xmlEntityPtr result = objc_opt_respondsToSelector();
    if (result)
    {
      if (a2)
      {
        id Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v7 + 64), a2);
        if (!Value) {
          id Value = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v7 + 64), (char *)a2);
        }
        if (a3)
        {
LABEL_8:
          uint64_t v10 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v7 + 64), a3);
          if (!v10) {
            uint64_t v10 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v7 + 64), (char *)a3);
          }
          if (a4) {
            goto LABEL_11;
          }
          goto LABEL_16;
        }
      }
      else
      {
        id Value = 0;
        if (a3) {
          goto LABEL_8;
        }
      }
      uint64_t v10 = 0;
      if (a4)
      {
LABEL_11:
        uint64_t v11 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v7 + 64), a4);
        if (!v11) {
          uint64_t v11 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v7 + 64), (char *)a4);
        }
        goto LABEL_17;
      }
LABEL_16:
      uint64_t v11 = 0;
LABEL_17:
      return [v8 parser:v7 foundNotationDeclarationWithName:Value publicID:v10 systemID:v11];
    }
  }
  return result;
}

void _attributeDecl(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, xmlEnumeration *a7)
{
  if (a1 && *(unsigned char *)(a1 + 120)) {
    return;
  }
  uint64_t v12 = (void *)[(id)a1 delegate];
  if (objc_opt_respondsToSelector())
  {
    if (a2)
    {
      id Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
      if (!Value) {
        id Value = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), (char *)a2);
      }
      if (a3)
      {
LABEL_8:
        uint64_t v14 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a3);
        if (!v14) {
          uint64_t v14 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), (char *)a3);
        }
        if (a6) {
          goto LABEL_11;
        }
        goto LABEL_15;
      }
    }
    else
    {
      id Value = 0;
      if (a3) {
        goto LABEL_8;
      }
    }
    uint64_t v14 = 0;
    if (a6)
    {
LABEL_11:
      uint64_t v15 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a6);
      if (!v15) {
        uint64_t v15 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), (char *)a6);
      }
      goto LABEL_16;
    }
LABEL_15:
    uint64_t v15 = 0;
LABEL_16:
    [v12 parser:a1 foundAttributeDeclarationWithName:v14 forElement:Value type:&stru_1ECA5C228 defaultValue:v15];
  }

  xmlFreeEnumeration(a7);
}

uint64_t _elementDecl(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  if (!result || !*(unsigned char *)(result + 120))
  {
    char v4 = (void *)[(id)result delegate];
    xmlEntityPtr result = objc_opt_respondsToSelector();
    if (result)
    {
      if (a2)
      {
        id Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 64), a2);
        if (!Value) {
          id Value = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v3 + 64), (char *)a2);
        }
      }
      else
      {
        id Value = 0;
      }
      return [v4 parser:v3 foundElementDeclarationWithName:Value model:&stru_1ECA5C228];
    }
  }
  return result;
}

uint64_t _unparsedEntityDecl(uint64_t result, xmlChar *a2, xmlChar *a3, xmlChar *a4, xmlChar *a5)
{
  uint64_t v9 = result;
  if (!result || !*(unsigned char *)(result + 120))
  {
    uint64_t v10 = (void *)[(id)result delegate];
    xmlSAX2UnparsedEntityDecl(*(void **)(v9 + 32), a2, a3, a4, a5);
    xmlEntityPtr result = objc_opt_respondsToSelector();
    if (result)
    {
      if (a2)
      {
        id Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 64), a2);
        if (!Value) {
          id Value = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v9 + 64), (char *)a2);
        }
        if (a3)
        {
LABEL_8:
          uint64_t v12 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 64), a3);
          if (!v12) {
            uint64_t v12 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v9 + 64), (char *)a3);
          }
          if (a4)
          {
LABEL_11:
            uint64_t v13 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 64), a4);
            if (!v13) {
              uint64_t v13 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v9 + 64), (char *)a4);
            }
            if (a5) {
              goto LABEL_14;
            }
            goto LABEL_20;
          }
LABEL_19:
          uint64_t v13 = 0;
          if (a5)
          {
LABEL_14:
            uint64_t v14 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 64), a5);
            if (!v14) {
              uint64_t v14 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v9 + 64), (char *)a5);
            }
            goto LABEL_21;
          }
LABEL_20:
          uint64_t v14 = 0;
LABEL_21:
          return [v10 parser:v9 foundUnparsedEntityDeclarationWithName:Value publicID:v12 systemID:v13 notationName:v14];
        }
      }
      else
      {
        id Value = 0;
        if (a3) {
          goto LABEL_8;
        }
      }
      uint64_t v12 = 0;
      if (a4) {
        goto LABEL_11;
      }
      goto LABEL_19;
    }
  }
  return result;
}

void _characters(uint64_t a1, const UInt8 *a2, int a3)
{
  if (!a1 || !*(unsigned char *)(a1 + 120))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (*(void *)(v4 + 424) == 1)
    {
      *(void *)(v4 + 424) = 0;
    }
    else if (*(void *)(a1 + 40) >> 31)
    {
      uint64_t v5 = *(void **)(a1 + 8);
      CFStringRef v6 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, a3, 0x8000100u, 0);
      if (v6)
      {
        CFStringRef v7 = v6;
        [v5 parser:a1 foundCharacters:v6];
        CFRelease(v7);
      }
    }
  }
}

uint64_t _processingInstruction(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (!result || !*(unsigned char *)(result + 120))
  {
    CFStringRef v6 = (void *)[(id)result delegate];
    xmlEntityPtr result = objc_opt_respondsToSelector();
    if (result)
    {
      if (a2)
      {
        id Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 64), a2);
        if (!Value) {
          id Value = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v5 + 64), (char *)a2);
        }
        if (a3) {
          goto LABEL_8;
        }
      }
      else
      {
        id Value = 0;
        if (a3)
        {
LABEL_8:
          uint64_t v8 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 64), a3);
          if (!v8) {
            uint64_t v8 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v5 + 64), (char *)a3);
          }
          goto LABEL_13;
        }
      }
      uint64_t v8 = 0;
LABEL_13:
      return [v6 parser:v5 foundProcessingInstructionWithTarget:Value data:v8];
    }
  }
  return result;
}

void _errorCallback(uint64_t a1)
{
  xmlErrorPtr LastError = xmlCtxtGetLastError(*(void **)(a1 + 32));

  _reportError((uint64_t)LastError, a1, 0);
}

void _cdataBlock(unsigned char *a1, const UInt8 *a2, int a3)
{
  if (!a1 || !a1[120])
  {
    CFStringRef v6 = (void *)[a1 delegate];
    if (objc_opt_respondsToSelector())
    {
      id v7 = (id)[objc_allocWithZone(MEMORY[0x1E4F1C9B8]) initWithBytes:a2 length:a3];
      [v6 parser:a1 foundCDATA:v7];
    }
    else
    {
      _characters((uint64_t)a1, a2, a3);
    }
  }
}

uint64_t _comment(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  if (!result || !*(unsigned char *)(result + 120))
  {
    uint64_t v4 = (void *)[(id)result delegate];
    xmlEntityPtr result = objc_opt_respondsToSelector();
    if (result)
    {
      if (a2)
      {
        id Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 64), a2);
        if (!Value) {
          id Value = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v3 + 64), (char *)a2);
        }
      }
      else
      {
        id Value = 0;
      }
      return [v4 parser:v3 foundComment:Value];
    }
  }
  return result;
}

void _externalSubset2(uint64_t a1, const xmlChar *a2, const xmlChar *a3, const xmlChar *a4)
{
}

void *_cachedColonSeparatedStringFromPrefixAndSuffix(const void *a1, size_t a2, const void *a3, size_t a4, uint64_t a5)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  size_t v10 = a2 + a4 + 2;
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)v16 - v11;
  if (v10 >= 0x101) {
    uint64_t v12 = (char *)malloc_type_malloc(v10, 0x100004077774924uLL);
  }
  memmove(v12, a1, a2);
  uint64_t v13 = &v12[a2];
  *v13++ = 58;
  memmove(v13, a3, a4);
  v13[a4] = 0;
  id Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a5 + 64), v12);
  if (!Value) {
    id Value = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a5 + 64), v12);
  }
  if (v10 >= 0x101) {
    free(v12);
  }
  return Value;
}

void _reportError(uint64_t a1, uint64_t a2, int a3)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 3)
    {
      uint64_t v6 = [(id)a2 delegate];
      if (!*(unsigned char *)(a2 + 120))
      {
        id v7 = (void *)v6;
        uint64_t v8 = _NSErrorFromXMLError(a1, a2);
        if (objc_opt_respondsToSelector()) {
          [v7 parser:a2 parseErrorOccurred:v8];
        }
        [(id)a2 _setExpandedParserError:v8];
        if (([(id)a2 shouldContinueAfterFatalError] & 1) == 0
          && *(_DWORD *)(a1 + 16) == 3
          && !*(unsigned char *)(a2 + 72))
        {
          if (a3 && dyld_program_sdk_at_least())
          {
            *(unsigned char *)(a2 + 120) = 1;
          }
          else
          {
            uint64_t v9 = *(xmlParserCtxt **)(a2 + 32);
            xmlStopParser(v9);
          }
        }
      }
    }
  }
}

void sub_182056D60(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _localeDidChange()
{
  uint64_t v0 = (const void *)qword_1EB1ED8F0;
  uint64_t v1 = qword_1EB1ED8F0;
  atomic_compare_exchange_strong(&qword_1EB1ED8F0, (unint64_t *)&v1, 0);
  if ((const void *)v1 == v0)
  {
    CFRelease(+[_NSPredicateOperatorUtilities retainedLocale]);
    if (v0)
    {
      if (v0 != (const void *)qword_1EB1ED8F0)
      {
        CFRelease(v0);
      }
    }
  }
}

void sub_18205704C(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    if (v3) {
      free(v2);
    }
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1820581C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a2)
  {
    if (a2 == 2)
    {
      objc_begin_catch(exception_object);
      NSLog((NSString *)@"THIS SHOULD NOT HAVE HAPPENED: %@");
      objc_exception_rethrow();
    }
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock(v9);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18205882C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a2)
  {
    if (a2 == 1)
    {
      objc_begin_catch(exception_object);
      NSLog((NSString *)@"THIS SHOULD NOT HAVE HAPPENED: %@");
      objc_exception_rethrow();
    }
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock(v9);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_182058B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_182059360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

void sub_1820599D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

NSFunctionExpression *HandleCastingOperation(void *a1)
{
  if ((unint64_t)[a1 count] <= 1) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:@"CAST() requires two args." userInfo:0]);
  }
  unsigned int v2 = (void *)[a1 objectAtIndex:0];
  int v3 = (void *)[a1 objectAtIndex:1];
  if ((objc_opt_isKindOfClass() & 1) != 0
    && (objc_opt_isKindOfClass() & 1) != 0
    && (objc_msgSend((id)objc_msgSend(v3, "constantValue"), "isEqual:", @"Class") & 1) == 0)
  {
    uint64_t v5 = [NSConstantValueExpression alloc];
    id v6 = +[_NSPredicateUtilities castObject:toType:](_NSPredicateUtilities, "castObject:toType:", [v2 constantValue], objc_msgSend((id)objc_msgSend(v3, "constantValue"), "description"));
    return (NSFunctionExpression *)[(NSConstantValueExpression *)v5 initWithObject:v6];
  }
  else
  {
    return CreateFunctionExpression((NSString *)@"castObject:toType:", a1);
  }
}

uint64_t CreateUserFunctionExpression(void *a1)
{
  unint64_t v2 = [a1 count];
  if (v2 <= 1)
  {
    uint64_t v12 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v13 = *MEMORY[0x1E4F1C3C8];
    uint64_t v14 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"User-defined function expressions must have at least a target and a selector; got (%@)",
            a1);
    uint64_t v15 = v12;
    uint64_t v16 = v13;
    goto LABEL_13;
  }
  unint64_t v3 = v2;
  uint64_t v4 = [a1 objectAtIndex:0];
  uint64_t v5 = [a1 objectAtIndex:1];
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    int v17 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v18 = *MEMORY[0x1E4F1C3C8];
    uint64_t v19 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"User-defined function expressions must have a predefinedSelector; got (%@)",
            v5);
LABEL_11:
    uint64_t v14 = v19;
    uint64_t v15 = v17;
    uint64_t v16 = v18;
    goto LABEL_13;
  }
  id v6 = (NSString *)objc_msgSend((id)objc_msgSend(a1, "objectAtIndex:", 1), "expressionValueWithObject:context:", 0, 0);
  if ((_NSIsNSString() & 1) == 0)
  {
    int v17 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v18 = *MEMORY[0x1E4F1C3C8];
    uint64_t v19 = +[NSString stringWithFormat:@"Can't get selector from non-string (%@)", v6];
    goto LABEL_11;
  }
  SEL v7 = NSSelectorFromString(v6);
  if (!v7)
  {
    uint64_t v14 = +[NSString stringWithFormat:@"Unable to parse function name '%@' into supported selector", v6];
    uint64_t v15 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v16 = *MEMORY[0x1E4F1C3C8];
LABEL_13:
    objc_exception_throw((id)[v15 exceptionWithName:v16 reason:v14 userInfo:0]);
  }
  SEL v8 = v7;
  uint64_t v9 = objc_msgSend(a1, "subarrayWithRange:", 2, v3 - 2);
  size_t v10 = [NSFunctionExpression alloc];

  return (uint64_t)[(NSFunctionExpression *)v10 initWithExpressionType:4 operand:v4 selector:v8 argumentArray:v9];
}

NSComparisonPredicate *HandleBetweenPredicate(uint64_t a1, uint64_t a2)
{
  id v4 = +[NSPredicateOperator _newOperatorWithType:100 modifier:0 options:0];
  uint64_t v5 = [[NSComparisonPredicate alloc] initWithPredicateOperator:v4 leftExpression:a1 rightExpression:a2];

  return v5;
}

NSConstantValueExpression *expressionByReplacingArray(void *a1)
{
  if ([a1 expressionType]) {
    return (NSConstantValueExpression *)a1;
  }
  uint64_t v2 = [a1 constantValue];
  if (!_NSIsNSArray()) {
    return (NSConstantValueExpression *)a1;
  }
  unint64_t v3 = [[NSConstantValueExpression alloc] initWithObject:v2];

  return v3;
}

NSSetExpression *CreateSetExpression(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = expressionByReplacingArray(a1);
  id v6 = expressionByReplacingArray(a3);
  if ((unint64_t)(a2 - 5) > 2) {
    SEL v7 = 0;
  }
  else {
    SEL v7 = [[NSSetExpression alloc] initWithType:a2 leftExpression:v5 rightExpression:v6];
  }

  if (!v7) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8], +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Unknown expression type %ld", a2), 0 reason userInfo]);
  }
  return v7;
}

uint64_t CreateFetchExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_lookUpClass("NSFetchRequestExpression");
  if (!v6) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"Can't find class for NSFetchRequestExpression" userInfo:0]);
  }
  id v7 = [v6 alloc];

  return [v7 initForFetch:a1 context:a2 countOnly:a3 != 0];
}

__objc2_class **_popFront(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 64)) {
    return &_emptyValue;
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 72));
  id v2 = (id)[*(id *)(a1 + 136) objectAtIndex:0];
  [*(id *)(a1 + 136) removeObjectAtIndex:0];
  int updated = updateState(a1);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 72));
  if (updated == 2)
  {
    if ([(id)a1 bufferFullHandler]) {
LABEL_8:
    }
      (*(void (**)(void))([(id)a1 bufferFullHandler] + 16))();
  }
  else if (updated == 1 && [(id)a1 bufferFullHandler])
  {
    goto LABEL_8;
  }

  return (__objc2_class **)v2;
}

uint64_t updateState(uint64_t a1)
{
  void v6[5] = *MEMORY[0x1E4F143B8];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = __updateState_block_invoke;
  void v6[3] = &unk_1E51FAEC8;
  void v6[4] = a1;
  int v1 = *(_DWORD *)(a1 + 64);
  switch(v1)
  {
    case 2:
      id v2 = fullToEmpty;
      unint64_t v3 = fullToNormal;
      id v4 = (uint64_t (*)(uint64_t))fullToFull;
      return __updateState_block_invoke((uint64_t)v6, v2, v3, v4);
    case 1:
      id v2 = normalToEmpty;
      unint64_t v3 = (uint64_t (*)(uint64_t))normalToNormal;
      id v4 = normalToFull;
      return __updateState_block_invoke((uint64_t)v6, v2, v3, v4);
    case 0:
      id v2 = (uint64_t (*)(uint64_t))emptyToEmpty;
      unint64_t v3 = (uint64_t (*)(uint64_t))emptyToNormal;
      id v4 = emptyToFull;
      return __updateState_block_invoke((uint64_t)v6, v2, v3, v4);
  }
  return 0;
}

uint64_t sub_18205B608()
{
  return 0;
}

uint64_t sub_18205B698()
{
  return 0;
}

uint64_t sub_18205B728()
{
  return 0;
}

uint64_t __updateState_block_invoke(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t))
{
  uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 136) count];
  id v6 = *(void **)(a1 + 32);
  if (v5)
  {
    unint64_t v7 = v5;
    if (_pressureSensitiveMaxCount_onceToken != -1) {
      dispatch_once(&_pressureSensitiveMaxCount_onceToken, &__block_literal_global_58);
    }
    [v6 isMemoryPressureSensitive];
    uint64_t v8 = *(void *)(a1 + 32);
    if (v7 >= v6[18]) {
      uint64_t v9 = a4;
    }
    else {
      uint64_t v9 = a3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = a2;
  }

  return v9(v8);
}

uint64_t emptyToEmpty()
{
  return 0;
}

uint64_t emptyToNormal(_DWORD *a1)
{
  a1[16] = 1;
  if ([a1 automaticallyEmitsObjects]) {
    [a1 emitObject];
  }
  return 0;
}

uint64_t emptyToFull(uint64_t a1)
{
  *(_DWORD *)(a1 + 64) = 2;
  dispatch_suspend(*(dispatch_object_t *)(a1 + 40));
  if ([(id)a1 automaticallyEmitsObjects]) {
    [(id)a1 emitObject];
  }
  return 0;
}

uint64_t normalToEmpty(uint64_t a1)
{
  *(_DWORD *)(a1 + 64) = 0;
  return 0;
}

uint64_t normalToNormal(void *a1)
{
  if ([a1 automaticallyEmitsObjects]) {
    [a1 emitObject];
  }
  return 0;
}

uint64_t normalToFull(uint64_t a1)
{
  *(_DWORD *)(a1 + 64) = 2;
  dispatch_suspend(*(dispatch_object_t *)(a1 + 40));
  if ([(id)a1 automaticallyEmitsObjects]) {
    [(id)a1 emitObject];
  }
  return 1;
}

uint64_t fullToEmpty(uint64_t a1)
{
  *(_DWORD *)(a1 + 64) = 0;
  dispatch_resume(*(dispatch_object_t *)(a1 + 40));
  return 2;
}

uint64_t fullToNormal(uint64_t a1)
{
  *(_DWORD *)(a1 + 64) = 1;
  dispatch_resume(*(dispatch_object_t *)(a1 + 40));
  if ([(id)a1 automaticallyEmitsObjects]) {
    [(id)a1 emitObject];
  }
  return 2;
}

uint64_t fullToFull(void *a1)
{
  if ([a1 automaticallyEmitsObjects]) {
    [a1 emitObject];
  }
  return 0;
}

void ___pressureSensitiveMaxCount_block_invoke()
{
  pressureSource = (uint64_t)dispatch_source_create(MEMORY[0x1E4F14468], 0, 2uLL, 0);
  dispatch_source_set_event_handler((dispatch_source_t)pressureSource, &__block_literal_global_66);
  uint64_t v0 = pressureSource;

  dispatch_resume(v0);
}

void __setupPressureTracking_block_invoke()
{
  uintptr_t mask = dispatch_source_get_mask((dispatch_source_t)pressureSource);
  if ((mask & 1) == 0) {
    NSLog((NSString *)@"Unknown memory pressure status %lu", mask);
  }
}

uint64_t sub_18205F3B4()
{
  return 0;
}

uint64_t sub_18205F434()
{
  return 0;
}

uint64_t sub_18205F474()
{
  return 0;
}

uint64_t sub_18205F4B0()
{
  return 0;
}

void sub_18205F804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FormatterCacheKeyCopy(uint64_t a1, void *a2)
{
  return [a2 copy];
}

uint64_t FormatterCacheKeyRelease()
{
  return MEMORY[0x1F41817F8]();
}

uint64_t FormatterCacheKeyEqual(void *a1, void *a2)
{
  uint64_t result = [a1 isEqual:a2];
  if (result)
  {
    uint64_t result = objc_msgSend((id)objc_msgSend(a1, "decimalSeparator"), "isEqual:", objc_msgSend(a2, "decimalSeparator"));
    if (result) {
      return objc_msgSend((id)objc_msgSend(a1, "groupingSeparator"), "isEqual:", objc_msgSend(a2, "groupingSeparator"));
    }
  }
  return result;
}

uint64_t FormatterCacheKeyHash(void *a1)
{
  uint64_t v2 = [a1 hash];
  uint64_t v3 = objc_msgSend((id)objc_msgSend(a1, "decimalSeparator"), "hash") ^ v2;
  return v3 ^ objc_msgSend((id)objc_msgSend(a1, "groupingSeparator"), "hash");
}

void yy_fatal_error(const char *a1)
{
}

int *_qfqp2_init_buffer(uint64_t a1, FILE *a2)
{
  int v4 = *__error();
  uint64_t v5 = yy_buffer_stack;
  if (a1)
  {
    *(void *)(a1 + 32) = 0;
    **(unsigned char **)(a1 + _Block_object_dispose(&STACK[0x260], 8) = 0;
    *(unsigned char *)(*(void *)(a1 + 8) + 1) = 0;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 4_Block_object_dispose(&STACK[0x260], 8) = 1;
    *(_DWORD *)(a1 + 64) = 0;
    uint64_t v6 = v5 ? *(void *)v5 : 0;
    if (v6 == a1)
    {
      unint64_t v7 = *(uint64_t **)v5;
      yy_n_chars = *(void *)(*(void *)v5 + 32);
      yy_c_buf_p = v7[2];
      _qfqp2text = yy_c_buf_p;
      _qfqp2in = *v7;
      yy_hold_char = *(unsigned char *)yy_c_buf_p;
      *(void *)a1 = a2;
      *(_DWORD *)(a1 + 60) = 1;
      goto LABEL_9;
    }
  }
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 60) = 1;
  if (v5) {
LABEL_9:
  }
    uint64_t v5 = *(void *)v5;
  if (v5 != a1) {
    *(void *)(a1 + 52) = 1;
  }
  if (a2)
  {
    int v8 = fileno(a2);
    BOOL v9 = isatty(v8) > 0;
  }
  else
  {
    BOOL v9 = 0;
  }
  *(_DWORD *)(a1 + 44) = v9;
  uint64_t result = __error();
  *uint64_t result = v4;
  return result;
}

unint64_t NSOrthographyFlagsForScriptAndOrthographyIndexes(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  if ((unint64_t)(a1 - 32) < 0xFFFFFFFFFFFFFFE1) {
    return 0;
  }
  uint64_t v6 = 0;
  if (a6 <= 0x1F && a6 - 11 >= 2 && a6 != 8 && a6 != a1 && a6 != 6)
  {
    if (a1 == 6 && !a2 || a1 == 8 && !a3 || a1 == 11 && !a4 || a1 == 12 && !a5) {
      return 0;
    }
    if (a2 >= 2)
    {
      if (a2 - 128 < 0xFFFFFFFFFFFFFF86) {
        return 0;
      }
      LODWORD(a2) = a2 - 4;
    }
    if (a3 >= 2)
    {
      if (a3 - 148 < 0xFFFFFFFFFFFFFFECLL) {
        return 0;
      }
      LOBYTE(a3) = a3 - 126;
    }
    if (a4 >= 2)
    {
      if (a4 - 188 < 0xFFFFFFFFFFFFFFE4) {
        return 0;
      }
      LOBYTE(a4) = a4 + 98;
    }
    if (a5 < 2) {
      return (a1 << 27) | ((a6 & 0x1F) << 22) | a2 | ((a3 & 0x1F) << 8) | ((a4 & 0x1F) << 13) | ((a5 & 0xF) << 18);
    }
    if (a5 - 206 >= 0xFFFFFFFFFFFFFFF2)
    {
      LOBYTE(a5) = a5 + 66;
      return (a1 << 27) | ((a6 & 0x1F) << 22) | a2 | ((a3 & 0x1F) << 8) | ((a4 & 0x1F) << 13) | ((a5 & 0xF) << 18);
    }
    return 0;
  }
  return v6;
}

unint64_t NSOrthographyGetScriptAndOrthographyIndexesForFlags(unint64_t result, void *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  if (a2) {
    *a2 = result >> 27;
  }
  if (a7) {
    *a7 = (result >> 22) & 0x1F;
  }
  if (a3)
  {
    unint64_t v7 = result;
    if (result > 0x7BuLL) {
      unint64_t v7 = 1;
    }
    if (v7 > 1) {
      v7 += 4;
    }
    *a3 = v7;
  }
  if (a4)
  {
    unint64_t v8 = (result >> 8) & 0x1F;
    if (v8 > 0x15) {
      unint64_t v8 = 1;
    }
    if (v8 > 1) {
      v8 += 126;
    }
    *a4 = v8;
  }
  if (a5)
  {
    unint64_t v9 = (result >> 13) & 0x1F;
    if (v9 > 0x1D) {
      unint64_t v9 = 1;
    }
    if (v9 > 1) {
      v9 += 158;
    }
    *a5 = v9;
  }
  if (a6)
  {
    uint64_t v10 = (result >> 18) & 0xF;
    if (((result >> 18) & 0xE) != 0) {
      v10 += 190;
    }
    *a6 = v10;
  }
  return result;
}

uint64_t NSOrthographyFlagsForDominantScriptAndLanguageMap(uint64_t a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  int v4 = (void *)[a2 objectForKey:a1];
  uint64_t v5 = (void *)[a2 objectForKey:@"Latn"];
  uint64_t v6 = (void *)[a2 objectForKey:@"Cyrl"];
  unint64_t v7 = (void *)[a2 objectForKey:@"Arab"];
  unint64_t v8 = (void *)[a2 objectForKey:@"Deva"];
  uint64_t v9 = [&unk_1ECAB7EF8 indexOfObject:a1];
  if ((unint64_t)(v9 - 32) < 0xFFFFFFFFFFFFFFE1) {
    return 0;
  }
  unint64_t v10 = v9;
  if (v4)
  {
    if ([v4 count] != 1) {
      return 0;
    }
  }
  if (v5 && [v5 count] != 1
    || v6 && [v6 count] != 1
    || v7 && [v7 count] != 1
    || v8 && [v8 count] != 1)
  {
    return 0;
  }
  uint64_t v11 = (void *)[v4 objectAtIndex:0];
  if (!v11
    || v10 <= 0xC && ((1 << v10) & 0x1940) != 0
    || (uint64_t result = [v11 isEqualToString:NSOrthographyDefaultLanguageForScriptIndex(v10)], result))
  {
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    uint64_t v12 = [a2 countByEnumeratingWithState:&v33 objects:v32 count:16];
    if (v12)
    {
      uint64_t v13 = v12;
      unsigned int v31 = v5;
      uint64_t v28 = v7;
      int v29 = v8;
      unint64_t v30 = v10;
      uint64_t v14 = 0;
      uint64_t v15 = *(void *)v34;
      do
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (*(void *)v34 != v15) {
            objc_enumerationMutation(a2);
          }
          int v17 = *(void **)(*((void *)&v33 + 1) + 8 * i);
          if (([v17 isEqualToString:a1] & 1) == 0
            && ([v17 isEqualToString:@"Latn"] & 1) == 0
            && ([v17 isEqualToString:@"Cyrl"] & 1) == 0
            && ([v17 isEqualToString:@"Arab"] & 1) == 0
            && ([v17 isEqualToString:@"Deva"] & 1) == 0)
          {
            if (v14)
            {
              uint64_t result = [v17 isEqualToString:v14];
              if (!result) {
                return result;
              }
            }
            else
            {
              uint64_t v14 = v17;
            }
          }
        }
        uint64_t v13 = [a2 countByEnumeratingWithState:&v33 objects:v32 count:16];
      }
      while (v13);
      if (v14)
      {
        uint64_t v19 = (void *)[a2 objectForKey:v14];
        uint64_t v20 = v19;
        uint64_t v5 = v31;
        if (v19 && [v19 count] != 1) {
          return 0;
        }
        uint64_t v21 = [&unk_1ECAB7F10 indexOfObject:v14];
        if ((unint64_t)(v21 - 32) < 0xFFFFFFFFFFFFFFE1) {
          return 0;
        }
        unint64_t v22 = v21;
        long long v27 = (void *)[v20 objectAtIndex:0];
        if (v27)
        {
          uint64_t result = [v27 isEqualToString:NSOrthographyDefaultLanguageForScriptIndex(v22)];
          unint64_t v8 = v29;
          unint64_t v10 = v30;
          unint64_t v7 = v28;
          if (!result) {
            return result;
          }
        }
        else
        {
          unint64_t v8 = v29;
          unint64_t v10 = v30;
          unint64_t v7 = v28;
        }
      }
      else
      {
        unint64_t v22 = 0;
        unint64_t v8 = v29;
        unint64_t v10 = v30;
        unint64_t v7 = v28;
        uint64_t v5 = v31;
      }
    }
    else
    {
      unint64_t v22 = 0;
    }
    if (v5)
    {
      unint64_t v23 = objc_msgSend(&unk_1ECAB7F28, "indexOfObject:", objc_msgSend(v5, "objectAtIndex:", 0));
      if (v6) {
        goto LABEL_41;
      }
    }
    else
    {
      unint64_t v23 = v10 == 6;
      if (v6)
      {
LABEL_41:
        unint64_t v24 = objc_msgSend(&unk_1ECAB7F40, "indexOfObject:", objc_msgSend(v6, "objectAtIndex:", 0));
        if (v7) {
          goto LABEL_42;
        }
        goto LABEL_46;
      }
    }
    unint64_t v24 = v10 == 8;
    if (v7)
    {
LABEL_42:
      unint64_t v25 = objc_msgSend(&unk_1ECAB7F58, "indexOfObject:", objc_msgSend(v7, "objectAtIndex:", 0));
      if (v8)
      {
LABEL_43:
        unint64_t v26 = objc_msgSend(&unk_1ECAB7F70, "indexOfObject:", objc_msgSend(v8, "objectAtIndex:", 0));
        return NSOrthographyFlagsForScriptAndOrthographyIndexes(v10, v23, v24, v25, v26, v22);
      }
LABEL_47:
      unint64_t v26 = v10 == 12;
      return NSOrthographyFlagsForScriptAndOrthographyIndexes(v10, v23, v24, v25, v26, v22);
    }
LABEL_46:
    unint64_t v25 = v10 == 11;
    if (v8) {
      goto LABEL_43;
    }
    goto LABEL_47;
  }
  return result;
}

__CFString *NSOrthographyDefaultLanguageForScriptIndex(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((unint64_t)(a1 - 2) <= 4)
  {
    uint64_t v2 = &unk_1ECAB80A8;
    return (__CFString *)[v2 objectAtIndex:v1];
  }
  if (a1 == 29)
  {
    uint64_t v2 = &unk_1ECAB80C0;
    uint64_t v1 = 208;
    return (__CFString *)[v2 objectAtIndex:v1];
  }
  if ((unint64_t)(a1 - 7) <= 0x18)
  {
    uint64_t v1 = a1 + 217;
    uint64_t v2 = &unk_1ECAB80D8;
    return (__CFString *)[v2 objectAtIndex:v1];
  }
  return @"und";
}

__CFString *NSOrthographyDominantScriptForFlags(unsigned int a1)
{
  uint64_t v1 = a1 >> 27;
  if (!v1) {
    return 0;
  }
  if (v1 == 1) {
    return @"Zyyy";
  }
  return (__CFString *)objc_msgSend(&unk_1ECAB80F0, "objectAtIndex:");
}

__CFString *NSOrthographyDominantLanguageForFlagsAndScript(unsigned int a1, uint64_t a2)
{
  uint64_t v3 = [&unk_1ECAB7F88 indexOfObject:a2];

  return NSOrthographyDominantLanguageForFlagsAndScriptIndex(a1, v3);
}

__CFString *NSOrthographyDominantLanguageForFlagsAndScriptIndex(unsigned int a1, uint64_t a2)
{
  switch(a2)
  {
    case 6:
      if (a1 > 0x7Bu) {
        uint64_t v2 = 1;
      }
      else {
        uint64_t v2 = a1;
      }
      if (v2 <= 1) {
        uint64_t v3 = v2;
      }
      else {
        uint64_t v3 = v2 + 4;
      }
      if (!v3) {
        return 0;
      }
      int v4 = &unk_1ECAB8108;
      return (__CFString *)objc_msgSend(v4, "objectAtIndex:");
    case 7:
    case 9:
    case 10:
      goto LABEL_12;
    case 8:
      LODWORD(v6) = (a1 >> 8) & 0x1F;
      if (v6 > 0x15) {
        uint64_t v6 = 1;
      }
      else {
        uint64_t v6 = v6;
      }
      if (v6 <= 1) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = v6 + 126;
      }
      if (!v7) {
        return 0;
      }
      int v4 = &unk_1ECAB8120;
      return (__CFString *)objc_msgSend(v4, "objectAtIndex:");
    case 11:
      LODWORD(v9) = (a1 >> 13) & 0x1F;
      if (v9 > 0x1D) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v9;
      }
      if (v9 <= 1) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v9 + 158;
      }
      if (!v10) {
        return 0;
      }
      int v4 = &unk_1ECAB8138;
      return (__CFString *)objc_msgSend(v4, "objectAtIndex:");
    case 12:
      if (((a1 >> 18) & 0xE) != 0) {
        uint64_t v11 = ((a1 >> 18) & 0xF) + 190;
      }
      else {
        uint64_t v11 = (a1 >> 18) & 0xF;
      }
      if (!v11) {
        return 0;
      }
      int v4 = &unk_1ECAB8150;
      return (__CFString *)objc_msgSend(v4, "objectAtIndex:");
    default:
      if (!a2) {
        return 0;
      }
LABEL_12:
      if (a1 >> 27 == a2 || ((a1 >> 22) & 0x1F) == a2) {
        return NSOrthographyDefaultLanguageForScriptIndex(a2);
      }
      else {
        return 0;
      }
  }
}

__CFString *NSOrthographyDominantLanguageForFlags(unsigned int a1)
{
  return NSOrthographyDominantLanguageForFlagsAndScriptIndex(a1, a1 >> 27);
}

void *NSOrthographyAllScriptsForFlags(unsigned int a1)
{
  uint64_t v2 = (void *)[MEMORY[0x1E4F1CA48] array];
  uint64_t v3 = a1 >> 27;
  if (v3 == 1)
  {
    unint64_t v4 = (a1 >> 22) & 0x1F;
    uint64_t v5 = @"Zyyy";
LABEL_6:
    [v2 addObject:v5];
    goto LABEL_7;
  }
  if (!(a1 >> 27))
  {
    unint64_t v4 = (a1 >> 22) & 0x1F;
    goto LABEL_8;
  }
  uint64_t v5 = (__CFString *)[&unk_1ECAB80F0 objectAtIndex:a1 >> 27];
  unint64_t v4 = (a1 >> 22) & 0x1F;
  if (v5) {
    goto LABEL_6;
  }
LABEL_7:
  if (v3 != 6)
  {
LABEL_8:
    if ((_BYTE)a1) {
      objc_msgSend(v2, "addObject:", objc_msgSend(&unk_1ECAB7FA0, "objectAtIndex:", 6));
    }
    if (v3 == 8) {
      goto LABEL_14;
    }
  }
  if ((a1 & 0x1F00) != 0) {
    objc_msgSend(v2, "addObject:", objc_msgSend(&unk_1ECAB7FB8, "objectAtIndex:", 8));
  }
  if (v3 == 11) {
    goto LABEL_17;
  }
LABEL_14:
  if ((a1 & 0x3E000) != 0) {
    objc_msgSend(v2, "addObject:", objc_msgSend(&unk_1ECAB7FD0, "objectAtIndex:", 11));
  }
  if (v3 != 12)
  {
LABEL_17:
    if ((a1 & 0x3C0000) != 0) {
      objc_msgSend(v2, "addObject:", objc_msgSend(&unk_1ECAB7FE8, "objectAtIndex:", 12));
    }
  }
  if (v4 && v4 != v3)
  {
    if (v4 > 0xC) {
      goto LABEL_26;
    }
    if (((1 << v4) & 0x1940) != 0) {
      return v2;
    }
    if (v4 == 1)
    {
      uint64_t v7 = @"Zyyy";
    }
    else
    {
LABEL_26:
      uint64_t v7 = (__CFString *)[&unk_1ECAB80F0 objectAtIndex:v4];
      if (!v7) {
        return v2;
      }
    }
    if (([v2 containsObject:v7] & 1) == 0) {
      [v2 addObject:v7];
    }
  }
  return v2;
}

void *NSOrthographyAllLanguagesForFlags(unsigned int a1)
{
  uint64_t v2 = (void *)[MEMORY[0x1E4F1CA48] array];
  unsigned int v3 = a1 >> 27;
  unint64_t v4 = NSOrthographyDominantLanguageForFlagsAndScriptIndex(a1, a1 >> 27);
  unint64_t v5 = (a1 >> 22) & 0x1F;
  if (v4) {
    [v2 addObject:v4];
  }
  if (v3 == 6) {
    goto LABEL_25;
  }
  if (a1 > 0x7Bu) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = a1;
  }
  if (v6 <= 1) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = v6 + 4;
  }
  if (v7)
  {
    uint64_t v8 = objc_msgSend(&unk_1ECAB8108, "objectAtIndex:");
    if (v8)
    {
      uint64_t v9 = v8;
      if (([v2 containsObject:v8] & 1) == 0) {
        [v2 addObject:v9];
      }
    }
  }
  if (v3 != 8)
  {
LABEL_25:
    LODWORD(v10) = (a1 >> 8) & 0x1F;
    if (v10 > 0x15) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v10;
    }
    if (v10 <= 1) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = v10 + 126;
    }
    if (v11)
    {
      uint64_t v12 = objc_msgSend(&unk_1ECAB8120, "objectAtIndex:");
      if (v12)
      {
        uint64_t v13 = v12;
        if (([v2 containsObject:v12] & 1) == 0) {
          [v2 addObject:v13];
        }
      }
    }
    if (v3 == 11) {
      goto LABEL_37;
    }
  }
  LODWORD(v14) = (a1 >> 13) & 0x1F;
  if (v14 > 0x1D) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v14;
  }
  if (v14 <= 1) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = v14 + 158;
  }
  if (v15)
  {
    uint64_t v16 = objc_msgSend(&unk_1ECAB8138, "objectAtIndex:");
    if (v16)
    {
      uint64_t v17 = v16;
      if (([v2 containsObject:v16] & 1) == 0) {
        [v2 addObject:v17];
      }
    }
  }
  if (v3 != 12)
  {
LABEL_37:
    if (((a1 >> 18) & 0xE) != 0) {
      uint64_t v18 = ((a1 >> 18) & 0xF) + 190;
    }
    else {
      uint64_t v18 = (a1 >> 18) & 0xF;
    }
    if (v18)
    {
      uint64_t v19 = objc_msgSend(&unk_1ECAB8150, "objectAtIndex:");
      if (v19)
      {
        uint64_t v20 = v19;
        if (([v2 containsObject:v19] & 1) == 0) {
          [v2 addObject:v20];
        }
      }
    }
  }
  if (v5 && v5 != v3 && (v5 > 0xC || ((1 << ((a1 >> 22) & 0x1F)) & 0x1940) == 0))
  {
    unint64_t v22 = NSOrthographyDominantLanguageForFlagsAndScriptIndex(a1, (a1 >> 22) & 0x1F);
    if (v22)
    {
      unint64_t v23 = v22;
      if (([v2 containsObject:v22] & 1) == 0) {
        [v2 addObject:v23];
      }
    }
  }
  return v2;
}

void *NSOrthographyLanguageMapForFlags(unsigned int a1)
{
  uint64_t v2 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v3 = a1 >> 27;
  if (v3)
  {
    if (v3 == 1) {
      unint64_t v4 = @"Zyyy";
    }
    else {
      unint64_t v4 = (__CFString *)[&unk_1ECAB80F0 objectAtIndex:a1 >> 27];
    }
  }
  else
  {
    unint64_t v4 = 0;
  }
  unint64_t v5 = NSOrthographyDominantLanguageForFlagsAndScriptIndex(a1, a1 >> 27);
  unint64_t v6 = (a1 >> 22) & 0x1F;
  if (v4 && v5) {
    objc_msgSend(v2, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObject:", v5), v4);
  }
  if (v3 == 6) {
    goto LABEL_29;
  }
  if (a1 > 0x7Bu) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = a1;
  }
  if (v7 <= 1) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = v7 + 4;
  }
  if (v8)
  {
    uint64_t v9 = objc_msgSend(&unk_1ECAB8108, "objectAtIndex:");
    if (v9) {
      objc_msgSend(v2, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObject:", v9), objc_msgSend(&unk_1ECAB8000, "objectAtIndex:", 6));
    }
  }
  if (v3 != 8)
  {
LABEL_29:
    LODWORD(v10) = (a1 >> 8) & 0x1F;
    if (v10 > 0x15) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v10;
    }
    if (v10 <= 1) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = v10 + 126;
    }
    if (v11)
    {
      uint64_t v12 = objc_msgSend(&unk_1ECAB8120, "objectAtIndex:");
      if (v12) {
        objc_msgSend(v2, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObject:", v12), objc_msgSend(&unk_1ECAB8018, "objectAtIndex:", 8));
      }
    }
    if (v3 == 11) {
      goto LABEL_40;
    }
  }
  LODWORD(v13) = (a1 >> 13) & 0x1F;
  if (v13 > 0x1D) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = v13;
  }
  if (v13 <= 1) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = v13 + 158;
  }
  if (v14)
  {
    uint64_t v15 = objc_msgSend(&unk_1ECAB8138, "objectAtIndex:");
    if (v15) {
      objc_msgSend(v2, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObject:", v15), objc_msgSend(&unk_1ECAB8030, "objectAtIndex:", 11));
    }
  }
  if (v3 != 12)
  {
LABEL_40:
    if (((a1 >> 18) & 0xE) != 0) {
      uint64_t v16 = ((a1 >> 18) & 0xF) + 190;
    }
    else {
      uint64_t v16 = (a1 >> 18) & 0xF;
    }
    if (v16)
    {
      uint64_t v17 = objc_msgSend(&unk_1ECAB8150, "objectAtIndex:");
      if (v17) {
        objc_msgSend(v2, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObject:", v17), objc_msgSend(&unk_1ECAB8048, "objectAtIndex:", 12));
      }
    }
  }
  if (v6 && v6 != v3)
  {
    if (v6 > 0xC) {
      goto LABEL_52;
    }
    if (((1 << ((a1 >> 22) & 0x1F)) & 0x1940) != 0) {
      return v2;
    }
    if (v6 == 1)
    {
      uint64_t v18 = @"Zyyy";
    }
    else
    {
LABEL_52:
      uint64_t v18 = (__CFString *)[&unk_1ECAB80F0 objectAtIndex:(a1 >> 22) & 0x1F];
      if (!v18) {
        return v2;
      }
    }
    uint64_t v19 = NSOrthographyDominantLanguageForFlagsAndScriptIndex(a1, (a1 >> 22) & 0x1F);
    if (v19) {
      objc_msgSend(v2, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObject:", v19), v18);
    }
  }
  return v2;
}

uint64_t sub_1820618FC()
{
  return v0;
}

uint64_t sub_1820620DC()
{
  return 0;
}

uint64_t sub_182062120()
{
  return 0;
}

void *orthoIndexesForLanguageCodes()
{
  uint64_t result = (void *)orthoIndexesForLanguageCodes_result;
  if (!orthoIndexesForLanguageCodes_result)
  {
    int v1 = numberOfLanguageCodes_numCodes;
    if (numberOfLanguageCodes_numCodes < 0)
    {
      int v1 = langid_numlanguages();
      numberOfLanguageCodes_numCodes = v1;
    }
    if (v1 > 0)
    {
      uint64_t v2 = v1;
      uint64_t result = malloc_type_calloc(v1, 1uLL, 0x100004077774924uLL);
      orthoIndexesForLanguageCodes_uint64_t result = (uint64_t)result;
      if (!result) {
        return result;
      }
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v4 = langid_languagecode();
        if (v4)
        {
          unint64_t v5 = (const char *)v4;
          uint64_t v6 = 0;
          uint64_t v7 = orthoIndexesForLanguageCodes_result;
          do
          {
            if (!strcmp(v5, langidLanguageCodes[v6])) {
              *(unsigned char *)(v7 + i) = langidOrthoIndexes[v6];
            }
            ++v6;
          }
          while (v6 != 33);
        }
      }
    }
    return (void *)orthoIndexesForLanguageCodes_result;
  }
  return result;
}

unint64_t scoreOrthographyForCharacters(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (unsigned __int16 *)result;
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  if (a3 == 8)
  {
    if ((byte_1EB1ED9C1 & 1) == 0)
    {
      uint64_t result = _NSLinguisticDataPath();
      if (result)
      {
        uint64_t v21 = (void *)result;
        qword_1EB1ED9D8 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C9B8]), "initWithContentsOfFile:options:error:", objc_msgSend((id)result, "stringByAppendingPathComponent:", @"Cyrl/Dict1.dat"), 1, 0);
        uint64_t result = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C9B8]), "initWithContentsOfFile:options:error:", objc_msgSend(v21, "stringByAppendingPathComponent:", @"Cyrl/Dict2.dat"), 1, 0);
        qword_1EB1ED9E0 = result;
      }
      byte_1EB1ED9C1 = 1;
    }
    uint64_t v10 = (void *)qword_1EB1ED9D8;
    uint64_t v9 = (void *)qword_1EB1ED9E0;
  }
  else
  {
    if (a3 != 6) {
      return result;
    }
    if ((_MergedGlobals_137 & 1) == 0)
    {
      uint64_t result = _NSLinguisticDataPath();
      if (result)
      {
        uint64_t v8 = (void *)result;
        qword_1EB1ED9C8 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C9B8]), "initWithContentsOfFile:options:error:", objc_msgSend((id)result, "stringByAppendingPathComponent:", @"Latn/Dict1.dat"), 1, 0);
        uint64_t result = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C9B8]), "initWithContentsOfFile:options:error:", objc_msgSend(v8, "stringByAppendingPathComponent:", @"Latn/Dict2.dat"), 1, 0);
        qword_1EB1ED9D0 = result;
      }
      _MergedGlobals_137 = 1;
    }
    if (a2 < 2) {
      return result;
    }
    uint64_t v10 = (void *)qword_1EB1ED9C8;
    uint64_t v9 = (void *)qword_1EB1ED9D0;
    int v11 = *v7;
    unsigned int v12 = v11 - 65;
    unsigned int v13 = v11 - 192;
    unsigned int v14 = v11 - 216;
    BOOL v15 = v12 >= 0x1A && v13 >= 0x17;
    if (!v15 || v14 <= 6)
    {
      int v17 = v7[1];
      if ((v17 - 216) >= 7 && (v17 - 192) >= 0x17 && (v17 - 65) >= 0x1A) {
        unint64_t v20 = 225;
      }
      else {
        unint64_t v20 = 450;
      }
      goto LABEL_30;
    }
  }
  unint64_t v20 = 450;
LABEL_30:
  if (a2 < 2) {
    return result;
  }
  if (!v10 || v9 == 0) {
    return result;
  }
  uint64_t v23 = [v10 bytes];
  uint64_t v24 = [v9 bytes];
  unint64_t v25 = [v10 length] / 5uLL;
  uint64_t result = [v9 length];
  if (a3 != 6)
  {
    unint64_t v26 = 0;
    uint64_t v27 = 0;
    while (1)
    {
      uint64_t v28 = v7[v27];
      if ((v28 - 65) <= 0x19) {
        break;
      }
      if ((v28 - 97) <= 0x19) {
        goto LABEL_47;
      }
      if ((v28 - 1040) <= 0x1F)
      {
        char v29 = v28 - 64;
        BOOL v30 = v28 == 1049;
LABEL_44:
        if (v30) {
          LOBYTE(v2_Block_object_dispose(&STACK[0x260], 8) = -40;
        }
        else {
          LOBYTE(v2_Block_object_dispose(&STACK[0x260], 8) = v29;
        }
LABEL_47:
        v77[v26++] = v28;
        goto LABEL_48;
      }
      if ((v28 - 1072) <= 0x1F)
      {
        char v29 = v28 - 96;
        BOOL v30 = v28 == 1081;
        goto LABEL_44;
      }
      if ((v28 & 0xFFF0) == 0x450 || (v28 & 0xFFF0) == 0x400)
      {
        if (v28 <= 0x410) {
          uint64_t v31 = -1024;
        }
        else {
          uint64_t v31 = -1104;
        }
        v28 += v31;
        if (((0xF1FBuLL >> v28) & 1) == 0) {
          goto LABEL_48;
        }
        LOBYTE(v2_Block_object_dispose(&STACK[0x260], 8) = cyrl1[v28];
        goto LABEL_47;
      }
      LODWORD(v2_Block_object_dispose(&STACK[0x260], 8) = v28 - 1162;
      if (v28 <= 0xF)
      {
        LOBYTE(v2_Block_object_dispose(&STACK[0x260], 8) = cyrl2[v28];
        goto LABEL_47;
      }
LABEL_48:
      if (++v27 >= a2 || v26 >= 0x40) {
        goto LABEL_89;
      }
    }
    LOBYTE(v2_Block_object_dispose(&STACK[0x260], 8) = v28 + 32;
    goto LABEL_47;
  }
  unint64_t v32 = 0;
  uint64_t v33 = 0;
  do
  {
    int v34 = v7[v33];
    if ((v34 - 65) <= 0x19)
    {
      LOBYTE(v35) = v34 + 32;
LABEL_65:
      unint64_t v26 = v32 + 1;
      v77[v32] = v35;
      goto LABEL_66;
    }
    if ((v34 - 97) <= 0x19)
    {
      LOBYTE(v35) = v7[v33];
      goto LABEL_65;
    }
    if ((v34 - 192) > 0x23F || (int v35 = latin1[v34 - 192], v35 == 32))
    {
LABEL_81:
      unint64_t v26 = v32;
      goto LABEL_66;
    }
    if (v35 != 42) {
      goto LABEL_65;
    }
    if ((v34 & 0xFFFFFFDF) == 0xC6)
    {
      long long v36 = "ae";
    }
    else if ((v34 & 0xFFFFFFDF) == 0xDE)
    {
      long long v36 = "th";
    }
    else
    {
      long long v36 = "ss";
      if (v34 != 223)
      {
        int v37 = v34 & 0xFFFE;
        switch(v37)
        {
          case 306:
            long long v36 = "ij";
            break;
          case 330:
            long long v36 = "ng";
            break;
          case 338:
            long long v36 = "oe";
            break;
          default:
            goto LABEL_81;
        }
      }
    }
    uint64_t v38 = 0;
    char v39 = 1;
    do
    {
      unint64_t v26 = v32 + 1;
      v77[v32] = v36[v38];
      if ((v39 & 1) == 0) {
        break;
      }
      char v39 = 0;
      uint64_t v38 = 1;
      BOOL v15 = v32++ >= 0x3F;
    }
    while (!v15);
LABEL_66:
    if (++v33 >= a2) {
      break;
    }
    unint64_t v32 = v26;
  }
  while (v26 < 0x40);
LABEL_89:
  if (v26 - 1 > 0x3E)
  {
    unsigned int v53 = 0;
    if (v25) {
      goto LABEL_110;
    }
  }
  else
  {
    int v40 = -1640531527;
    uint64_t v41 = v77;
    if (v26 < 0xC)
    {
      unsigned int v44 = -1640531527;
      int v43 = -1640531527;
      unsigned int v42 = v26;
    }
    else
    {
      unsigned int v42 = v26;
      int v43 = -1640531527;
      unsigned int v44 = -1640531527;
      do
      {
        unsigned int v45 = *((_DWORD *)v41 + 1) + v44;
        unsigned int v46 = *((_DWORD *)v41 + 2) + v43;
        int v47 = (*(_DWORD *)v41 + v40 - (v45 + v46)) ^ (v46 >> 13);
        unsigned int v48 = (v45 - v46 - v47) ^ (v47 << 8);
        unsigned int v49 = (v46 - v47 - v48) ^ (v48 >> 13);
        int v50 = (v47 - v48 - v49) ^ (v49 >> 12);
        unsigned int v51 = (v48 - v49 - v50) ^ (v50 << 16);
        unsigned int v52 = (v49 - v50 - v51) ^ (v51 >> 5);
        int v40 = (v50 - v51 - v52) ^ (v52 >> 3);
        unsigned int v44 = (v51 - v52 - v40) ^ (v40 << 10);
        int v43 = (v52 - v40 - v44) ^ (v44 >> 15);
        v41 += 12;
        v42 -= 12;
      }
      while (v42 > 0xB);
    }
    unsigned int v54 = v43 + v26;
    switch(v42)
    {
      case 1u:
        goto LABEL_108;
      case 2u:
        goto LABEL_107;
      case 3u:
        goto LABEL_106;
      case 4u:
        goto LABEL_105;
      case 5u:
        goto LABEL_104;
      case 6u:
        goto LABEL_103;
      case 7u:
        goto LABEL_102;
      case 8u:
        goto LABEL_101;
      case 9u:
        goto LABEL_100;
      case 0xAu:
        goto LABEL_99;
      case 0xBu:
        v54 += v41[10] << 24;
LABEL_99:
        v54 += v41[9] << 16;
LABEL_100:
        v54 += v41[8] << 8;
LABEL_101:
        v44 += v41[7] << 24;
LABEL_102:
        v44 += v41[6] << 16;
LABEL_103:
        v44 += v41[5] << 8;
LABEL_104:
        v44 += v41[4];
LABEL_105:
        v40 += v41[3] << 24;
LABEL_106:
        v40 += v41[2] << 16;
LABEL_107:
        v40 += v41[1] << 8;
LABEL_108:
        v40 += *v41;
        break;
      default:
        break;
    }
    int v55 = (v40 - v44 - v54) ^ (v54 >> 13);
    unsigned int v56 = (v44 - v54 - v55) ^ (v55 << 8);
    unsigned int v57 = (v54 - v55 - v56) ^ (v56 >> 13);
    int v58 = (v55 - v56 - v57) ^ (v57 >> 12);
    unsigned int v59 = (v56 - v57 - v58) ^ (v58 << 16);
    unsigned int v60 = (v57 - v58 - v59) ^ (v59 >> 5);
    int v61 = (v58 - v59 - v60) ^ (v60 >> 3);
    unsigned int v53 = (v60 - v61 - ((v59 - v60 - v61) ^ (v61 << 10))) ^ (((v59 - v60 - v61) ^ (v61 << 10)) >> 15);
    if (v25)
    {
LABEL_110:
      unint64_t v62 = result >> 3;
      if ((result >> 3))
      {
        double v63 = (double)(v53 - 1) / 4294967300.0;
        unint64_t v64 = (v63 * (double)v25);
        if (bswap32(*(_DWORD *)(v23 + 4 * v64)) <= v53)
        {
          do
          {
            int v67 = v64 + 1;
            if (v64 >= (v25 - 1)) {
              break;
            }
            unsigned int v68 = bswap32(*(_DWORD *)(v23 + 4 * v64++));
          }
          while (v68 < v53);
          uint64_t v65 = (v67 - 1);
          unsigned int v66 = bswap32(*(_DWORD *)(v23 + 4 * v65));
        }
        else
        {
          do
          {
            uint64_t v65 = v64;
            unsigned int v66 = bswap32(*(_DWORD *)(v23 + 4 * v64));
            BOOL v15 = v64 != 0;
            LODWORD(v64) = v64 - 1;
          }
          while (v15 && v66 > v53);
        }
        if (v66 == v53)
        {
          uint64_t v69 = *(unsigned __int8 *)(v23 + 4 * v25 + v65);
          if (*(unsigned char *)(v23 + 4 * v25 + v65)) {
            goto LABEL_144;
          }
        }
        unint64_t v70 = (v63 * (double)v62);
        if (bswap32(*(_DWORD *)(v24 + 4 * v70)) <= v53)
        {
          do
          {
            int v73 = v70 + 1;
            if (v70 >= (v62 - 1)) {
              break;
            }
            unsigned int v74 = bswap32(*(_DWORD *)(v24 + 4 * v70++));
          }
          while (v74 < v53);
          uint64_t v71 = (v73 - 1);
          unsigned int v72 = bswap32(*(_DWORD *)(v24 + 4 * v71));
        }
        else
        {
          do
          {
            uint64_t v71 = v70;
            unsigned int v72 = bswap32(*(_DWORD *)(v24 + 4 * v70));
            BOOL v15 = v70 != 0;
            LODWORD(v70) = v70 - 1;
          }
          while (v15 && v72 > v53);
        }
        if (v72 == v53) {
          unsigned int v75 = *(_DWORD *)(v24 + 4 * v62 + 4 * v71);
        }
        else {
          unsigned int v75 = 0;
        }
        uint64_t v69 = HIBYTE(v75);
        unint64_t v76 = (unint64_t)((double)v20 * 0.75);
        if (!BYTE2(v75)) {
          unint64_t v76 = v20;
        }
        if (v69) {
          unint64_t v20 = (unint64_t)((double)v20 * 0.5);
        }
        else {
          unint64_t v20 = v76;
        }
        if ((_BYTE)v75) {
          *(void *)(a4 + 8 * v75) += v20;
        }
        if (BYTE1(v75)) {
          *(void *)(a4 + 8 * BYTE1(v75)) += v20;
        }
        if (BYTE2(v75)) {
          *(void *)(a4 + 8 * BYTE2(v75)) += v20;
        }
        if (v69) {
LABEL_144:
        }
          *(void *)(a4 + 8 * v69) += v20;
      }
    }
  }
  return result;
}

unint64_t orthographyFlagsForScores(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  unint64_t v6 = a1[2];
  uint64_t v7 = a1[6];
  unint64_t v8 = a1[8];
  uint64_t v9 = 2;
  uint64_t v11 = a1[11];
  uint64_t v10 = a1[12];
  do
  {
    if (a1[v9] > v4)
    {
      uint64_t v5 = v9;
      unint64_t v4 = a1[v9];
    }
    ++v9;
  }
  while (v9 != 32);
  if (!v5) {
    return 0x8000000;
  }
  unint64_t v12 = 0;
  for (unint64_t i = 2; i != 32; ++i)
  {
    if (a1[i]) {
      BOOL v14 = v5 == i;
    }
    else {
      BOOL v14 = 1;
    }
    if (!v14 && (i > 0xC || ((1 << i) & 0x1940) == 0)) {
      unint64_t v12 = i;
    }
  }
  if (v6)
  {
    if (v6 < 5)
    {
      uint64_t v17 = 1;
    }
    else
    {
      unint64_t v15 = 0;
      uint64_t v16 = 2;
      uint64_t v17 = 1;
      do
      {
        if (*(void *)(a3 + 8 * v16) > v15)
        {
          uint64_t v17 = v16;
          unint64_t v15 = *(void *)(a3 + 8 * v16);
        }
        ++v16;
      }
      while (v16 != 6);
    }
    if (v5 == 2) {
      uint64_t v5 = v17;
    }
    if (v12 == 2) {
      unint64_t v12 = v17;
    }
  }
  if (!v7)
  {
    unint64_t v21 = 0;
    goto LABEL_36;
  }
  if (*(void *)(a2 + 48) >= 2uLL)
  {
    unint64_t v19 = 0;
    uint64_t v20 = 6;
    unint64_t v21 = 1;
    do
    {
      if (*(void *)(a3 + 8 * v20) > v19)
      {
        unint64_t v21 = v20;
        unint64_t v19 = *(void *)(a3 + 8 * v20);
      }
      ++v20;
    }
    while (v20 != 128);
LABEL_36:
    if (!v8) {
      goto LABEL_46;
    }
LABEL_39:
    if (*(void *)(a2 + 64))
    {
      unint64_t v22 = 0;
      uint64_t v23 = 128;
      unint64_t v8 = 1;
      do
      {
        if (*(void *)(a3 + 8 * v23) > v22)
        {
          unint64_t v8 = v23;
          unint64_t v22 = *(void *)(a3 + 8 * v23);
        }
        ++v23;
      }
      while (v23 != 148);
    }
    else
    {
      unint64_t v8 = 1;
    }
    goto LABEL_46;
  }
  unint64_t v21 = 1;
  if (v8) {
    goto LABEL_39;
  }
LABEL_46:
  if (v11) {
    unint64_t v24 = 160;
  }
  else {
    unint64_t v24 = 0;
  }
  if (v10) {
    unint64_t v25 = 192;
  }
  else {
    unint64_t v25 = 0;
  }
  return NSOrthographyFlagsForScriptAndOrthographyIndexes(v5, v21, v8, v24, v25, v12);
}

uint64_t sub_182063D4C()
{
  return 0;
}

uint64_t sub_182063D90()
{
  return 0;
}

uint64_t sub_182063DD8()
{
  return 0;
}

uint64_t sub_182067804()
{
  return 0;
}

uint64_t sub_182067848()
{
  return 0;
}

void sub_18206ACEC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18206C5DC(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18206C564);
  }
  _Unwind_Resume(exc_buf);
}

uint64_t sub_18206D030()
{
  return 0;
}

uint64_t sub_18206D0B0()
{
  return 0;
}

uint64_t sub_18206D0F0()
{
  return 0;
}

uint64_t __NSMeasurementConvertedForFileSizeDescription(void *a1, int a2, int a3, uint64_t a4, uint64_t *a5)
{
  if ((_WORD)a2) {
    unint64_t v9 = (unsigned __int16)a2;
  }
  else {
    unint64_t v9 = 65472;
  }
  unint64_t v10 = [&unk_1ECAB8210 count];
  unint64_t v11 = __clz(__rbit64(v9));
  unint64_t v20 = v10;
  if (v10 <= v11) {
    unint64_t v12 = v11;
  }
  else {
    unint64_t v12 = v10;
  }
  uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    if (v12 == v11) {
      break;
    }
    if ((v9 & (1 << v11)) != 0) {
      uint64_t v13 = v11;
    }
    objc_msgSend((id)objc_msgSend(a1, "measurementByConvertingToUnit:", informationStorageUnitFromAllowedUnit(v9 & (1 << v11), a3)), "doubleValue");
    double v15 = roundedSize(v11++, (*(void *)&a2 & 0x400000) == 0, v14);
  }
  while (fabs(v15) >= (double)a4 || v13 == 0x7FFFFFFFFFFFFFFFLL);
  uint64_t v17 = v20 - 1;
  if (v13 != 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v17 = v13;
  }
  if (a5) {
    *a5 = v17;
  }
  uint64_t v18 = informationStorageUnitFromAllowedUnit(1 << v17, a3);

  return [a1 measurementByConvertingToUnit:v18];
}

NSUnitInformationStorage *informationStorageUnitFromAllowedUnit(uint64_t a1, int a2)
{
  if (a1 > 15)
  {
    if (a1 > 63)
    {
      if (a1 == 64)
      {
        if (a2) {
          return +[NSUnitInformationStorage exabytes];
        }
        else {
          return +[NSUnitInformationStorage exbibytes];
        }
      }
      if (a1 == 128)
      {
        if (a2) {
          return +[NSUnitInformationStorage zettabytes];
        }
        else {
          return +[NSUnitInformationStorage zebibytes];
        }
      }
    }
    else
    {
      if (a1 == 16)
      {
        if (a2) {
          return +[NSUnitInformationStorage terabytes];
        }
        else {
          return +[NSUnitInformationStorage tebibytes];
        }
      }
      if (a1 == 32)
      {
        if (a2) {
          return +[NSUnitInformationStorage petabytes];
        }
        else {
          return +[NSUnitInformationStorage pebibytes];
        }
      }
    }
LABEL_23:
    if (a2) {
      return +[NSUnitInformationStorage yottabytes];
    }
    else {
      return +[NSUnitInformationStorage yobibytes];
    }
  }
  switch(a1)
  {
    case 1:
      uint64_t result = +[NSUnitInformationStorage bytes];
      break;
    case 2:
      if (a2) {
        uint64_t result = +[NSUnitInformationStorage kilobytes];
      }
      else {
        uint64_t result = +[NSUnitInformationStorage kibibytes];
      }
      break;
    case 4:
      if (a2) {
        uint64_t result = +[NSUnitInformationStorage megabytes];
      }
      else {
        uint64_t result = +[NSUnitInformationStorage mebibytes];
      }
      break;
    case 8:
      if (a2) {
        uint64_t result = +[NSUnitInformationStorage gigabytes];
      }
      else {
        uint64_t result = +[NSUnitInformationStorage gibibytes];
      }
      break;
    default:
      goto LABEL_23;
  }
  return result;
}

NSString *__NSLocalizedFileSizeDescriptionWithMeasurement(void *a1, unint64_t a2, uint64_t a3)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  if ((a2 & 0x180000) != 0) {
    int v6 = (a2 >> 18) & 1;
  }
  else {
    int v6 = 1;
  }
  if (v6) {
    uint64_t v7 = 1000;
  }
  else {
    uint64_t v7 = 1024;
  }
  char v8 = objc_msgSend((id)objc_msgSend(a1, "unit"), "isEqual:", +[NSUnitInformationStorage bytes](NSUnitInformationStorage, "bytes"));
  unint64_t v9 = a1;
  if ((v8 & 1) == 0) {
    unint64_t v9 = objc_msgSend(a1, "measurementByConvertingToUnit:", +[NSUnitInformationStorage bytes](NSUnitInformationStorage, "bytes"));
  }
  [v9 doubleValue];
  double v11 = v10;
  double v12 = fabs(v10);
  if (v12 < INFINITY || v12 > INFINITY)
  {
    if (v11 < -9.22337204e18 || v11 > 9.22337204e18)
    {
      v19[0] = 0;
      objc_msgSend((id)__NSMeasurementConvertedForFileSizeDescription(a1, a2, v6, v7, v19), "doubleValue");
      uint64_t v18 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
      return __NSLocalizedFileSizeDescriptionFormatNumber(v18, v19[0], (uint64_t)+[NSNumber numberWithDouble:v11], a2, a3);
    }
    else
    {
      uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      if (v11 != 9.22337204e18) {
        uint64_t v16 = (uint64_t)v11;
      }
      if (v11 == -9.22337204e18) {
        uint64_t v17 = 0x8000000000000000;
      }
      else {
        uint64_t v17 = v16;
      }
      return __NSLocalizedFileSizeDescription(v17, v7, a2, a3);
    }
  }
  else
  {
    uint64_t v13 = +[NSNumber numberWithDouble:v11];
    double v14 = +[NSNumber numberWithDouble:v11];
    return __NSLocalizedFileSizeDescriptionFormatNumber(v13, 0, (uint64_t)v14, a2, a3);
  }
}

NSString *NSLocalizedFileSizeDescription(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a1 < 0)
  {
    if ((NSLocalizedFileSizeDescription_warned & 1) == 0)
    {
      NSLocalizedFileSizeDescription_warned = 1;
      NSLog((NSString *)@"Warning: NSLocalizedFileSizeDescription() cannot accept size argument greater than INT64_MAX");
    }
    return +[NSString stringWithFormat:@"%llu", a1];
  }
  else
  {
    return __NSLocalizedFileSizeDescription(a1, a2, a3, 0);
  }
}

NSString *_NSLocalizedFileSizeDescription(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return __NSLocalizedFileSizeDescription(a1, a2, a3, 0);
}

void sub_18206EA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a65, 8);
  _Block_object_dispose(&a69, 8);
  _Unwind_Resume(a1);
}

uint64_t ___diffStr_block_invoke(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "appendFormat:", @"%lu", *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 1);
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) != v2) {
    objc_msgSend(*(id *)(a1 + 32), "appendFormat:", @",%lu", v2 + 1);
  }
  [*(id *)(a1 + 32) appendString:@"c"];
  objc_msgSend(*(id *)(a1 + 32), "appendFormat:", @"%lu", *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) + 1);
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) != v3) {
    objc_msgSend(*(id *)(a1 + 32), "appendFormat:", @",%lu", v3 + 1);
  }
  [*(id *)(a1 + 32) appendString:@"\n"];
  uint64_t result = [*(id *)(a1 + 32) appendString:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)];
  *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) = 0;
  return result;
}

uint64_t ___diffStr_block_invoke_2(void *a1, void *a2)
{
  uint64_t v4 = [a2 changeType];
  uint64_t v5 = [a2 index];
  uint64_t v6 = v5;
  if (v4 == 1)
  {
    uint64_t v7 = *(void *)(*(void *)(a1[5] + 8) + 24) + 1;
  }
  else
  {
    if (*(unsigned char *)(*(void *)(a1[7] + 8) + 24)) {
      BOOL v8 = *(void *)(*(void *)(a1[8] + 8) + 24) != 1;
    }
    else {
      BOOL v8 = 1;
    }
    uint64_t v7 = v8 + *(void *)(*(void *)(a1[6] + 8) + 24);
  }
  uint64_t v9 = *(void *)(*(void *)(a1[9] + 8) + 40);
  if (v9) {
    BOOL v10 = v5 == v7;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    (*(void (**)(void))(a1[4] + 16))();
    uint64_t v9 = *(void *)(*(void *)(a1[9] + 8) + 40);
  }
  if (!v9)
  {
    *(void *)(*(void *)(a1[9] + 8) + 40) = (id)objc_opt_new();
    if (v4 == 1)
    {
      *(void *)(*(void *)(a1[5] + 8) + 24) = v6;
      *(void *)(*(void *)(a1[10] + 8) + 24) = v6;
      uint64_t v11 = v6 - *(void *)(*(void *)(a1[12] + 8) + 24) + *(void *)(*(void *)(a1[13] + 8) + 24);
      uint64_t v12 = 1;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(*(void *)(a1[12] + 8) + 24) + v6 - *(void *)(*(void *)(a1[13] + 8) + 24);
      *(void *)(*(void *)(a1[5] + 8) + 24) = v13;
      *(void *)(*(void *)(a1[10] + 8) + 24) = v13;
      uint64_t v11 = v6;
    }
    *(void *)(*(void *)(a1[6] + 8) + 24) = v11;
    *(void *)(*(void *)(a1[11] + 8) + 24) = v11;
    *(void *)(*(void *)(a1[8] + 8) + 24) = v12;
    *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = 1;
  }
  if (v4 == 1)
  {
    uint64_t result = [*(id *)(*(void *)(a1[9] + 8) + 40) appendFormat:@"< %@\n", objc_msgSend(a2, "object")];
    ++*(void *)(*(void *)(a1[12] + 8) + 24);
    uint64_t v15 = a1[5];
  }
  else
  {
    uint64_t v16 = *(void *)(a1[8] + 8);
    if (*(void *)(v16 + 24) != v4)
    {
      *(void *)(v16 + 24) = v4;
      [*(id *)(*(void *)(a1[9] + 8) + 40) appendString:@"---\n"];
    }
    ++*(void *)(*(void *)(a1[13] + 8) + 24);
    uint64_t result = [*(id *)(*(void *)(a1[9] + 8) + 40) appendFormat:@"> %@\n", objc_msgSend(a2, "object")];
    uint64_t v15 = a1[6];
  }
  *(void *)(*(void *)(v15 + 8) + 24) = v6;
  return result;
}

void sub_18206F4F0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void *___loadCrashReporterSupport_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/CrashReporterSupport.framework/CrashReporterSupport", 256);
  if (result)
  {
    uint64_t result = dlsym(result, "SimulateCrash");
    off_1EB1EDA08 = (uint64_t (*)(void, void, void))result;
  }
  return result;
}

Class ___loadAssertionServices_block_invoke()
{
  dlopen("/System/Library/PrivateFrameworks/AssertionServices.framework/AssertionServices", 256);
  Class result = objc_lookUpClass("BKSProcessAssertion");
  _MergedGlobals_138 = result != 0;
  return result;
}

CFStringRef __CFBasicHashNullCallback(uint64_t a1, int a2, const __CFString *a3, const __CFString *a4)
{
  CFStringRef result = (CFStringRef)&CFBasicHashNullCallbacks;
  switch(a2)
  {
    case 8:
      return result;
    case 10:
    case 11:
    case 12:
    case 13:
    case 22:
    case 23:
      CFStringRef result = a3;
      break;
    case 18:
    case 19:
    case 20:
    case 21:
      CFStringRef result = (CFStringRef)(a3 == a4);
      break;
    case 24:
    case 25:
    case 26:
    case 27:
      CFStringRef result = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], 0, @"<%p>", a3);
      break;
    default:
      CFStringRef result = 0;
      break;
  }
  return result;
}

void *CFBasicHashGetBucket@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v3 = result[2];
  uint64_t v4 = result[3];
  *a3 = a2;
  uint64_t v5 = *(void *)(result[5] + 8 * a2);
  a3[3] = v5;
  if ((v3 & 4) != 0) {
    uint64_t v6 = *(void *)(result[6] + 8 * a2);
  }
  else {
    uint64_t v6 = 0;
  }
  a3[4] = v6;
  if ((v3 & 0x18) != 0)
  {
    uint64_t v7 = (v3 >> 3) & 3;
    if (!v7) {
      goto LABEL_25;
    }
    uint64_t v5 = *(void *)(result[v7 + 5] + 8 * a2);
  }
  a3[1] = v5;
  if ((v3 & 0x60) != 0)
  {
    uint64_t v8 = (v3 >> 5) & 3;
    if (!v8) {
      goto LABEL_25;
    }
    uint64_t v9 = *(void *)(result[v8 + 5] + 8 * a2);
  }
  else
  {
    uint64_t v9 = 0;
  }
  a3[2] = v9;
  if ((v3 & 0x380) != 0)
  {
    uint64_t v10 = (v3 >> 7) & 7;
    if (!v10) {
      goto LABEL_25;
    }
    uint64_t v11 = *(void *)(result[v10 + 5] + 8 * a2);
  }
  else
  {
    *((void *)&v12 + 1) = v4;
    *(void *)&long long v12 = v3;
    uint64_t v13 = (v12 >> 32) & 0xFFFFFF0000000000;
    uint64_t v11 = v5 != v13 && v5 != ~v13;
  }
  a3[5] = v11;
  if ((v3 & 0x1C00) == 0)
  {
    uint64_t v16 = 0;
    goto LABEL_24;
  }
  uint64_t v15 = (v3 >> 10) & 7;
  if (v15)
  {
    uint64_t v16 = *(void *)(result[v15 + 5] + 8 * a2);
LABEL_24:
    a3[6] = v16;
    return result;
  }
LABEL_25:
  __break(1u);
  return result;
}

void *CFBasicHashApply(void *result, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = result[2];
  uint64_t v3 = (v2 >> 16) & 0x3F;
  BOOL v4 = v2 < 0x400000 || v3 == 0;
  if (!v4 && v3 != 63)
  {
    uint64_t v6 = result;
    uint64_t v7 = __CFBasicHashTableSizes[v3];
    uint64_t v8 = v2 >> 22;
    uint64_t v9 = 1;
    do
    {
      uint64_t v18 = 0;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v15 = 0u;
      CFStringRef result = CFBasicHashGetBucket(v6, v9 - 1, &v15);
      if (*((void *)&v17 + 1))
      {
        uint64_t v10 = *(uint64_t (**)(uint64_t, _OWORD *))(a2 + 16);
        v13[0] = v15;
        v13[1] = v16;
        id v13[2] = v17;
        uint64_t v14 = v18;
        CFStringRef result = (void *)v10(a2, v13);
        if (!result) {
          return result;
        }
        v8 -= result != 0;
      }
      if (v8 >= 1)
      {
        BOOL v12 = __OFSUB__(v9, v7);
        BOOL v11 = v9 - v7 < 0;
      }
      else
      {
        BOOL v12 = 0;
        BOOL v11 = 0;
      }
      ++v9;
    }
    while (v11 != v12);
  }
  return result;
}

uint64_t __CFBasicHashGetCount_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += *(void *)(a2 + 40);
  return 1;
}

uint64_t CFBasicHashesAreEqual(void *a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unint64_t Count = CFBasicHashGetCount(a1);
  if (Count != CFBasicHashGetCount(a2)) {
    return 0;
  }
  uint64_t v5 = 1;
  if (Count)
  {
    uint64_t v8 = 0;
    uint64_t v9 = &v8;
    uint64_t v10 = 0x2020000000;
    char v11 = 1;
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = __CFBasicHashesAreEqual_block_invoke;
    v7[3] = &unk_1E51FB1E0;
    void v7[4] = &v8;
    v7[5] = a2;
    v7[6] = a1;
    CFBasicHashApply(a1, (uint64_t)v7);
    uint64_t v5 = *((unsigned __int8 *)v9 + 24);
    _Block_object_dispose(&v8, 8);
  }
  return v5;
}

void sub_18206FD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CFBasicHashesAreEqual_block_invoke(void *a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  memset(v10, 0, sizeof(v10));
  uint64_t result = a1[5];
  uint64_t v5 = *(void *)(result + 16);
  if ((v5 & 0x3F0000) != 0)
  {
    unint64_t v6 = a2[1];
    int v7 = v5 & 3;
    switch(v7)
    {
      case 3:
        ___CFBasicHashFindBucket3(result, v6, 0, (unint64_t *)v10);
        break;
      case 2:
        ___CFBasicHashFindBucket2(result, v6, 0, (unint64_t *)v10);
        break;
      case 1:
        ___CFBasicHashFindBucket1(result, v6, 0, (unint64_t *)v10);
        break;
      default:
        __break(1u);
        return result;
    }
  }
  else
  {
    memset(&v10[24], 0, 32);
  }
  if (a2[5] == *(void *)&v10[40])
  {
    uint64_t v8 = a1[6];
    if ((*(unsigned char *)(v8 + 16) & 0x18) == 0) {
      return 1;
    }
    uint64_t v9 = a2[3];
    if (v9 == *(void *)&v10[24]
      || (**(unsigned __int8 (***)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v8, 18, v9))
    {
      return 1;
    }
  }
  uint64_t result = 0;
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 0;
  return result;
}

uint64_t __CFBasicHashReplaceValue(uint64_t a1, void *a2, uint64_t a3)
{
  ++*(_WORD *)(a1 + 30);
  uint64_t v6 = (**(uint64_t (***)(void))(a1 + 32))();
  uint64_t v9 = v6;
  uint64_t v10 = *(void *)(a1 + 16);
  if ((v10 & 0x18) != 0)
  {
    uint64_t v11 = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, void))(a1 + 32))(a1, 12, a3, 0);
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v12 = *(void *)(a1 + 24);
    if ((v10 & 4) == 0)
    {
LABEL_3:
      uint64_t v13 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 24);
    uint64_t v11 = v6;
    if ((v10 & 4) == 0) {
      goto LABEL_3;
    }
  }
  uint64_t v13 = (**(uint64_t (***)(uint64_t, uint64_t, void, void))(a1 + 32))(a1, 11, 0, 0);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
LABEL_6:
  if ((v10 & 0x60) != 0)
  {
    uint64_t v14 = (**(uint64_t (***)(uint64_t, uint64_t, void, void))(a1 + 32))(a1, 13, 0, 0);
    uint64_t v15 = *(void *)(a1 + 20);
  }
  else
  {
    uint64_t v14 = 0;
    *((void *)&v16 + 1) = v12;
    *(void *)&long long v16 = v10;
    uint64_t v15 = v16 >> 32;
  }
  unint64_t v17 = v15 & 0xFFFFFF0000000000;
  if (v11 == v17 || v11 == ~v17) {
    __CFBasicHashFindNewMarker(a1, v11, v7, v8);
  }
  uint64_t v19 = *(void *)(a1 + 40);
  uint64_t v20 = *(void *)(v19 + 8 * *a2);
  *(void *)(v19 + 8 * *a2) = v9;
  uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, void))(a1 + 32))(a1, 14, v20, 0);
  unint64_t v22 = *(void *)(a1 + 16);
  if ((v22 & 4) != 0)
  {
    uint64_t v23 = *(void *)(a1 + 48);
    uint64_t v24 = *(void *)(v23 + 8 * *a2);
    *(void *)(v23 + 8 * *a2) = v13;
    uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, void))(a1 + 32))(a1, 15, v24, 0);
    unint64_t v22 = *(void *)(a1 + 16);
  }
  if ((v22 & 0x18) != 0)
  {
    uint64_t v25 = (v22 >> 3) & 3;
    if (!v25) {
      goto LABEL_26;
    }
    uint64_t v26 = *(void *)(a1 + 8 * v25 + 40);
    uint64_t v27 = *(void *)(v26 + 8 * *a2);
    *(void *)(v26 + 8 * *a2) = v11;
    uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, void))(a1 + 32))(a1, 16, v27, 0);
    unint64_t v22 = *(void *)(a1 + 16);
  }
  if ((v22 & 0x60) == 0) {
    return result;
  }
  uint64_t v28 = (v22 >> 5) & 3;
  if (!v28)
  {
LABEL_26:
    __break(1u);
    return result;
  }
  uint64_t v29 = *(void *)(a1 + 8 * v28 + 40);
  uint64_t v30 = *(void *)(v29 + 8 * *a2);
  *(void *)(v29 + 8 * *a2) = v14;
  uint64_t v31 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t, void))(a1 + 32);

  return v31(a1, 17, v30, 0);
}

void __CFBasicHashDrain(uint64_t a1, int a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = (v4 >> 16) & 0x3F;
  uint64_t v7 = __CFBasicHashTableSizes[v6];
  CFAllocatorRef v8 = CFGetAllocator((CFTypeRef)a1);
  char v39 = 0;
  ptr = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  unint64_t v9 = *(void *)(a1 + 16);
  if ((v9 & 4) != 0)
  {
    char v39 = *(void **)(a1 + 48);
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x260], 8) = 0;
  }
  unint64_t v10 = *(void *)(a1 + 24);
  if ((v9 & 0x18) != 0)
  {
    uint64_t v11 = (v9 >> 3) & 3;
    if (!v11) {
      goto LABEL_49;
    }
    uint64_t v12 = a1 + 8 * v11;
    int v40 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = 0;
  }
  else
  {
    int v40 = 0;
  }
  if ((v9 & 0x60) != 0)
  {
    uint64_t v13 = (v9 >> 5) & 3;
    if (!v13) {
      goto LABEL_49;
    }
    uint64_t v14 = a1 + 8 * v13;
    uint64_t v38 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = 0;
  }
  else
  {
    uint64_t v38 = 0;
  }
  if ((v9 & 0x380) != 0)
  {
    uint64_t v15 = (v9 >> 7) & 7;
    if (!v15) {
      goto LABEL_49;
    }
    uint64_t v16 = a1 + 8 * v15;
    unint64_t v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = 0;
  }
  else
  {
    unint64_t v17 = 0;
  }
  if ((v9 & 0x1C00) != 0)
  {
    uint64_t v18 = (v9 >> 10) & 7;
    if (!v18) {
      goto LABEL_49;
    }
    uint64_t v19 = a1 + 8 * v18;
    uint64_t v20 = *(void **)(v19 + 40);
    *(void *)(v19 + 40) = 0;
  }
  else
  {
    uint64_t v20 = 0;
  }
  int v36 = a2;
  int v34 = v20;
  int v35 = v17;
  if ((v9 & 0xE000) != 0)
  {
    if ((unsigned __int16)v9 >> 13)
    {
      uint64_t v21 = a1 + 8 * ((unsigned __int16)v9 >> 13);
      uint64_t v33 = *(void **)(v21 + 40);
      *(void *)(v21 + 40) = 0;
      goto LABEL_23;
    }
LABEL_49:
    __break(1u);
    return;
  }
  uint64_t v33 = 0;
LABEL_23:
  *(void *)(a1 + 16) = (unsigned __int16)v9;
  *(void *)(a1 + 24) = v10 | ((unint64_t)(HIWORD(v10) + 1) << 48);
  if (*(uint64_t (***)())(a1 + 32) != &CFBasicHashNullCallbacks)
  {
    unint64_t v22 = v40 ? v40 : ptr;
    if (v6 && v6 != 63)
    {
      *((void *)&v23 + 1) = v5;
      *(void *)&long long v23 = v4;
      uint64_t v24 = (v23 >> 32) & 0xFFFFFF0000000000;
      if (v7 <= 1) {
        uint64_t v25 = 1;
      }
      else {
        uint64_t v25 = v7;
      }
      uint64_t v26 = ptr;
      uint64_t v27 = v38;
      uint64_t v28 = v39;
      uint64_t v29 = v40;
      do
      {
        uint64_t v31 = *v22++;
        uint64_t v30 = v31;
        if (v31 != v24 && v30 != ~v24)
        {
          (**(void (***)(uint64_t, uint64_t, void, void))(a1 + 32))(a1, 14, *v26, 0);
          if (v39) {
            (**(void (***)(uint64_t, uint64_t, void, void))(a1 + 32))(a1, 15, *v28, 0);
          }
          if (v40) {
            (**(void (***)(uint64_t, uint64_t, void, void))(a1 + 32))(a1, 16, *v29, 0);
          }
          if (v38) {
            (**(void (***)(uint64_t, uint64_t, void, void))(a1 + 32))(a1, 17, *v27, 0);
          }
        }
        ++v27;
        ++v29;
        ++v28;
        ++v26;
        --v25;
      }
      while (v25);
    }
  }
  if (v36) {
    (**(void (***)(uint64_t, uint64_t, void, void))(a1 + 32))(a1, 9, 0, 0);
  }
  CFAllocatorDeallocate(v8, ptr);
  CFAllocatorDeallocate(v8, v39);
  CFAllocatorDeallocate(v8, v40);
  CFAllocatorDeallocate(v8, v38);
  CFAllocatorDeallocate(v8, v35);
  CFAllocatorDeallocate(v8, v34);

  CFAllocatorDeallocate(v8, v33);
}

uint64_t __CFBasicHashCopyDescription_block_invoke(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 56)) {
    unint64_t v4 = **(uint64_t (***)(void))(*(void *)(a1 + 32) + 32);
  }
  else {
    unint64_t v4 = (uint64_t (*)(void))__CFBasicHashNullCallback;
  }
  uint64_t v5 = (const void *)v4();
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(v6 + 16);
  if ((v7 & 0x18) != 0)
  {
    CFAllocatorRef v8 = (const void *)((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, void))v4)(v6, 26, a2[1], 0, *(void *)(v6 + 32));
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 16);
  }
  else
  {
    CFAllocatorRef v8 = 0;
  }
  uint64_t v9 = v7 & 0x18;
  uint64_t v10 = v7 & 0x380;
  uint64_t v11 = *(__CFString **)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *a2;
  if (v9) {
    BOOL v14 = v10 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14)
  {
    if (v9)
    {
      CFStringAppendFormat(v11, 0, @"%@%ld : %@ = %@\n", v12, v13, v8, v5);
    }
    else if (v10)
    {
      CFStringAppendFormat(v11, 0, @"%@%ld : %@ (%ld)\n", v12, v13, v5, a2[5]);
    }
    else
    {
      CFStringAppendFormat(v11, 0, @"%@%ld : %@\n", v12, *a2, v5);
    }
  }
  else
  {
    CFStringAppendFormat(v11, 0, @"%@%ld : %@ = %@ (%ld)\n", v12, v13, v8, v5, a2[5]);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v5) {
    CFRelease(v5);
  }
  return 1;
}

CFStringRef __CFBasicHashCopyDescription(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], 0);
  uint64_t v4 = a1[2];
  if ((v4 & 0x380) != 0) {
    uint64_t v5 = "multi";
  }
  else {
    uint64_t v5 = "";
  }
  if ((v4 & 0x18) != 0) {
    uint64_t v6 = "dict";
  }
  else {
    uint64_t v6 = "set";
  }
  unint64_t Count = CFBasicHashGetCount(a1);
  CFStringAppendFormat(Mutable, 0, @"%@{type = %s %s%s, count = %ld,\n", &stru_1ECA5C228, "mutable", v5, v6, Count);
  CFStringAppendFormat(Mutable, 0, @"%@entries =>\n", &stru_1ECA5C228);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __CFBasicHashCopyDescription_block_invoke;
  _OWORD v11[3] = &__block_descriptor_57_e18_C64__0___qQQQQQQ_8l;
  char v12 = 1;
  v11[4] = a1;
  v11[5] = Mutable;
  v11[6] = @"\t";
  CFBasicHashApply(a1, (uint64_t)v11);
  CFStringAppendFormat(Mutable, 0, @"%@}\n", &stru_1ECA5C228);
  CFAllocatorRef v8 = CFGetAllocator(a1);
  CFStringRef v9 = CFStringCreateWithFormat(v2, 0, @"<CFBasicHash %p [%p]>%@", a1, v8, Mutable);
  CFRelease(Mutable);
  return v9;
}

void __CFBasicHashDeallocate(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if ((v1 & 4) != 0)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a1 + 16) = *(void *)(a1 + 16);
    *(void *)(a1 + 24) = v1 | 4;
    __CFBasicHashDrain(a1, 1);
  }
}

unint64_t ___CFBasicHashFindBucket2@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unint64_t result = (**(uint64_t (***)(void))(a1 + 32))();
  unint64_t v8 = *(void *)(a1 + 16);
  if ((v8 & 0x18) != 0)
  {
    uint64_t v9 = (v8 >> 3) & 3;
    if (!v9) {
      goto LABEL_55;
    }
    uint64_t v10 = (uint64_t *)(a1 + 8 * v9 + 40);
  }
  else
  {
    uint64_t v10 = (uint64_t *)(a1 + 40);
  }
  uint64_t v11 = *v10;
  if ((v8 & 0xE000) == 0)
  {
    uint64_t v12 = 0;
    goto LABEL_9;
  }
  if (!((unsigned __int16)v8 >> 13))
  {
LABEL_55:
    __break(1u);
    return result;
  }
  uint64_t v12 = *(void *)(a1 + 8 * ((unsigned __int16)v8 >> 13) + 40);
LABEL_9:
  unint64_t v13 = (*(long long *)(a1 + 16) >> 32) & 0xFFFFFF0000000000;
  uint64_t v14 = ~v13;
  uint64_t v15 = (v8 >> 16) & 0x3F;
  unint64_t v16 = __CFBasicHashTableSizes[v15];
  *a4 = -1;
  a4[1] = ~v13;
  a4[2] = 0;
  a4[3] = ~v13;
  a4[5] = 0;
  a4[6] = 0;
  if (result / v16 % v16) {
    unint64_t v17 = result / v16 % v16;
  }
  else {
    unint64_t v17 = v16 - 1;
  }
  a4[4] = 0;
  if (!v15 || v15 == 63) {
    return result;
  }
  unint64_t v18 = result % v16;
  if (v16 <= 1) {
    uint64_t v19 = 1;
  }
  else {
    uint64_t v19 = v16;
  }
  uint64_t v20 = -1;
  while (1)
  {
    unint64_t v21 = *(void *)(v11 + 8 * v18);
    if (v21 == v13)
    {
      if (v20 == -1)
      {
        a4[3] = v13;
        *a4 = v18;
        a4[1] = v13;
      }
      return result;
    }
    if (a3) {
      goto LABEL_20;
    }
    if (v21 == v14)
    {
      if (v20 == -1)
      {
        *a4 = v18;
        uint64_t v20 = v18;
      }
      goto LABEL_20;
    }
    if (v21 == a2) {
      break;
    }
    if (!v12 || *(void *)(v12 + 8 * v18) == result)
    {
      uint64_t v36 = v12;
      unint64_t v37 = result;
      uint64_t v34 = v20;
      uint64_t v35 = v14;
      char v23 = (**(uint64_t (***)(uint64_t, uint64_t, unint64_t, uint64_t))(a1 + 32))(a1, 20, v21, a2);
      uint64_t v20 = v34;
      uint64_t v14 = v35;
      BOOL v24 = v23 == 0;
      uint64_t v12 = v36;
      unint64_t result = v37;
      if (!v24) {
        goto LABEL_37;
      }
    }
LABEL_20:
    if (v16 <= v18 + v17) {
      unint64_t v22 = v16;
    }
    else {
      unint64_t v22 = 0;
    }
    unint64_t v18 = v18 + v17 - v22;
    if (!--v19) {
      return result;
    }
  }
  unint64_t v21 = a2;
LABEL_37:
  *a4 = v18;
  unint64_t v25 = *(void *)(a1 + 16);
  unint64_t v26 = v21;
  if ((v25 & 0x18) != 0) {
    unint64_t v26 = *(void *)(*(void *)(a1 + 40) + 8 * v18);
  }
  a4[3] = v26;
  if ((v25 & 4) != 0) {
    unint64_t v27 = *(void *)(*(void *)(a1 + 48) + 8 * v18);
  }
  else {
    unint64_t v27 = 0;
  }
  a4[4] = v27;
  a4[1] = v21;
  if ((v25 & 0x60) != 0)
  {
    uint64_t v28 = (v25 >> 5) & 3;
    if (!v28) {
      goto LABEL_55;
    }
    unint64_t v29 = *(void *)(*(void *)(a1 + 8 * v28 + 40) + 8 * v18);
  }
  else
  {
    unint64_t v29 = 0;
  }
  a4[2] = v29;
  if ((v25 & 0x380) != 0)
  {
    uint64_t v30 = (v25 >> 7) & 7;
    if (!v30) {
      goto LABEL_55;
    }
    uint64_t v31 = *(void *)(*(void *)(a1 + 8 * v30 + 40) + 8 * v18);
  }
  else
  {
    uint64_t v31 = 1;
  }
  a4[5] = v31;
  if ((v25 & 0x1C00) != 0)
  {
    uint64_t v32 = (v25 >> 10) & 7;
    if (!v32) {
      goto LABEL_55;
    }
    uint64_t v33 = *(void *)(*(void *)(a1 + 8 * v32 + 40) + 8 * v18);
  }
  else
  {
    uint64_t v33 = 1;
  }
  a4[6] = v33;
  return result;
}

unint64_t ___CFBasicHashFindBucket3@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unint64_t result = (**(uint64_t (***)(void))(a1 + 32))();
  uint64_t v7 = a1;
  unint64_t v8 = *(void *)(a1 + 16);
  if ((v8 & 0x18) != 0)
  {
    uint64_t v9 = (v8 >> 3) & 3;
    if (!v9) {
      goto LABEL_56;
    }
    uint64_t v10 = (uint64_t *)(a1 + 8 * v9 + 40);
  }
  else
  {
    uint64_t v10 = (uint64_t *)(a1 + 40);
  }
  uint64_t v11 = *v10;
  if ((v8 & 0xE000) == 0)
  {
    uint64_t v12 = 0;
    goto LABEL_9;
  }
  if (!((unsigned __int16)v8 >> 13))
  {
LABEL_56:
    __break(1u);
    return result;
  }
  uint64_t v12 = *(void *)(a1 + 8 * ((unsigned __int16)v8 >> 13) + 40);
LABEL_9:
  unint64_t v13 = (*(long long *)(a1 + 16) >> 32) & 0xFFFFFF0000000000;
  uint64_t v14 = ~v13;
  uint64_t v15 = (v8 >> 16) & 0x3F;
  unint64_t v16 = __CFBasicHashTableSizes[v15];
  *a4 = -1;
  a4[1] = ~v13;
  a4[2] = 0;
  a4[3] = ~v13;
  a4[5] = 0;
  a4[6] = 0;
  if (result / v16 % v16) {
    unint64_t v17 = result / v16 % v16;
  }
  else {
    unint64_t v17 = v16 - 1;
  }
  a4[4] = 0;
  int v43 = a4;
  int v18 = a3;
  if (!v15 || v15 == 63) {
    return result;
  }
  uint64_t v19 = __CFBasicHashPrimitiveRoots[v15];
  unint64_t v20 = result % v16;
  if (v16 <= 1) {
    uint64_t v21 = 1;
  }
  else {
    uint64_t v21 = v16;
  }
  uint64_t v22 = -1;
  unint64_t v23 = __CFBasicHashPrimitiveRoots[v15];
  unint64_t v24 = result % v16;
  while (1)
  {
    unint64_t v25 = *(void *)(v11 + 8 * v24);
    if (v25 == v13)
    {
      if (v22 == -1)
      {
        v43[3] = v13;
        *int v43 = v24;
        v43[1] = v13;
      }
      return result;
    }
    if (v18) {
      goto LABEL_20;
    }
    if (v25 == v14)
    {
      if (v22 == -1)
      {
        *int v43 = v24;
        uint64_t v22 = v24;
      }
      goto LABEL_20;
    }
    if (v25 == a2) {
      break;
    }
    if (!v12 || *(void *)(v12 + 8 * v24) == result)
    {
      unint64_t v40 = result;
      uint64_t v41 = v7;
      uint64_t v38 = v14;
      uint64_t v39 = v12;
      uint64_t v37 = v22;
      char v26 = (**(uint64_t (***)(uint64_t, uint64_t, unint64_t, uint64_t))(v7 + 32))(v7, 20, v25, a2);
      uint64_t v22 = v37;
      uint64_t v14 = v38;
      int v18 = a3;
      BOOL v27 = v26 == 0;
      uint64_t v12 = v39;
      unint64_t result = v40;
      uint64_t v7 = v41;
      if (!v27) {
        goto LABEL_38;
      }
    }
LABEL_20:
    unint64_t v24 = v20 + v23 * v17;
    if (v16 <= v24) {
      v24 %= v16;
    }
    v23 *= v19;
    if (v16 <= v23) {
      v23 %= v16;
    }
    if (!--v21) {
      return result;
    }
  }
  unint64_t v25 = a2;
LABEL_38:
  *int v43 = v24;
  unint64_t v28 = *(void *)(v7 + 16);
  unint64_t v29 = v25;
  if ((v28 & 0x18) != 0) {
    unint64_t v29 = *(void *)(*(void *)(v7 + 40) + 8 * v24);
  }
  v43[3] = v29;
  if ((v28 & 4) != 0) {
    unint64_t v30 = *(void *)(*(void *)(v7 + 48) + 8 * v24);
  }
  else {
    unint64_t v30 = 0;
  }
  v43[4] = v30;
  v43[1] = v25;
  if ((v28 & 0x60) != 0)
  {
    uint64_t v31 = (v28 >> 5) & 3;
    if (!v31) {
      goto LABEL_56;
    }
    unint64_t v32 = *(void *)(*(void *)(v7 + 8 * v31 + 40) + 8 * v24);
  }
  else
  {
    unint64_t v32 = 0;
  }
  v43[2] = v32;
  if ((v28 & 0x380) != 0)
  {
    uint64_t v33 = (v28 >> 7) & 7;
    if (!v33) {
      goto LABEL_56;
    }
    uint64_t v34 = *(void *)(*(void *)(v7 + 8 * v33 + 40) + 8 * v24);
  }
  else
  {
    uint64_t v34 = 1;
  }
  v43[5] = v34;
  if ((v28 & 0x1C00) != 0)
  {
    uint64_t v35 = (v28 >> 10) & 7;
    if (!v35) {
      goto LABEL_56;
    }
    uint64_t v36 = *(void *)(*(void *)(v7 + 8 * v35 + 40) + 8 * v24);
  }
  else
  {
    uint64_t v36 = 1;
  }
  v43[6] = v36;
  return result;
}

uint64_t __CFBasicHashFindNewMarker(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v12 = *(void *)(result + 16);
  unint64_t v11 = *(void *)(result + 24);
  if ((v12 & 0x18) != 0)
  {
    uint64_t v13 = (v12 >> 3) & 3;
    if (!v13)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    uint64_t v14 = (uint64_t **)(result + 8 * v13 + 40);
    char v15 = 70;
  }
  else
  {
    uint64_t v14 = (uint64_t **)(result + 40);
    char v15 = 68;
  }
  unint64_t v4 = v11 >> 8 << 40;
  uint64_t v5 = ~v4;
  uint64_t v6 = *v14;
  a4 = (v12 >> 16) & 0x3F;
  uint64_t v16 = __CFBasicHashTableSizes[a4];
  uint64_t v13 = 4097;
  if (v11 >> 8) {
    uint64_t v13 = (v11 >> 8) + 1;
  }
  uint64_t v7 = (1 << v15) & v11;
  uint64_t v8 = 0;
  if (v16 <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = __CFBasicHashTableSizes[a4];
  }
  while (1)
  {
    uint64_t v10 = v13 << 40;
    if (v13 << 40 != a2)
    {
      a3 = ~(v13 << 40);
      if (a3 != a2)
      {
        if (!a4 || a4 == 63) {
          goto LABEL_34;
        }
        uint64_t v17 = 0;
        BOOL v18 = 1;
        uint64_t v19 = v6;
        while (*v19 != v10 && *v19 != a3)
        {
          BOOL v18 = ++v17 < v16;
          ++v19;
          if (v9 == v17) {
            goto LABEL_24;
          }
        }
        if (!v18) {
          break;
        }
      }
    }
    if (++v13 == 0x4000000) {
      goto LABEL_23;
    }
  }
LABEL_24:
  if (a4 && a4 != 63)
  {
    while (1)
    {
      if (v8 | v7)
      {
        uint64_t v21 = *v6;
        if (v4 != *v6) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v21 = *v6;
        if (*v6 != v4)
        {
LABEL_30:
          if (v21 == v5) {
            *uint64_t v6 = a3;
          }
          goto LABEL_32;
        }
      }
      *uint64_t v6 = v10;
LABEL_32:
      ++v6;
      if (!--v9)
      {
        unint64_t v12 = *(void *)(result + 16);
        unint64_t v11 = *(void *)(result + 24);
        break;
      }
    }
  }
LABEL_34:
  *(void *)(result + 16) = v12;
  *(void *)(result + 24) = v11 & 0xFFFFFFFF000000FFLL | ((v13 & 0xFFFFFF) << 8);
  return result;
}

void *initUAContinuityErrorDomain()
{
  unint64_t result = (void *)qword_1EB1EDA68;
  if (qword_1EB1EDA68
    || (unint64_t result = dlopen("/System/Library/PrivateFrameworks/UserActivity.framework/UserActivity", 2),
        (qword_1EB1EDA68 = (uint64_t)result) != 0))
  {
    unint64_t result = *(void **)dlsym(result, "UAContinuityErrorDomain");
    qword_1EB1EDA78 = (uint64_t)result;
    getUAContinuityErrorDomain = UAContinuityErrorDomainFunction;
  }
  return result;
}

uint64_t UAContinuityErrorDomainFunction()
{
  return qword_1EB1EDA78;
}

uint64_t skipJSON5Comment(uint64_t *a1, char a2, void *a3)
{
  v20[2] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a1[2];
  unint64_t v5 = a1[3];
  if (a2)
  {
    if (v4 > v5)
    {
      uint64_t v6 = *a1;
      while (1)
      {
        int v7 = *(unsigned __int8 *)(v6 + v5);
        if (v7 == 13) {
          break;
        }
        if (v7 == 10)
        {
          a1[3] = v5 + 1;
          ++a1[5];
          a1[6] = v5 + 1;
          return 1;
        }
        a1[3] = ++v5;
        if (v4 == v5) {
          goto LABEL_20;
        }
      }
      unint64_t v18 = v5 + 1;
      a1[3] = v5 + 1;
      if (v4 > v5 + 1 && *(unsigned char *)(v6 + v5 + 1) == 10)
      {
        unint64_t v18 = v5 + 2;
        a1[3] = v5 + 2;
      }
      ++a1[5];
      a1[6] = v18;
      return 1;
    }
LABEL_20:
    a1[3] = v4;
    return 1;
  }
  unint64_t v9 = v5 + 1;
  if (v4 > v9)
  {
    uint64_t v10 = *a1;
    while (*(unsigned char *)(v10 + v9 - 1) != 42 || *(unsigned char *)(v10 + v9) != 47)
    {
      a1[3] = v9++;
      if (v4 == v9) {
        goto LABEL_13;
      }
    }
    unint64_t v4 = v9 + 1;
    goto LABEL_20;
  }
LABEL_13:
  a1[3] = v4;
  if (a3)
  {
    unint64_t v11 = a1[6];
    BOOL v12 = v4 >= v11;
    unint64_t v13 = v4 - v11;
    if (v12) {
      unint64_t v14 = v13;
    }
    else {
      unint64_t v14 = 0;
    }
    char v15 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Unterminated block comment", a1[5], v14];
    uint64_t v16 = [[NSNumber alloc] initWithUnsignedInteger:a1[3]];
    v19[0] = @"NSDebugDescription";
    v19[1] = @"NSJSONSerializationErrorIndex";
    v20[0] = v15;
    v20[1] = v16;
    *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v20 forKeys:v19 count:2]);
  }
  return 0;
}

uint64_t __newJSONString_block_invoke()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  [@"[[:Lu:][:Ll:][:Lt:][:Lm:][:Lo:][:Nl:]]" getCharacters:(char *)&v1- ((2 * objc_msgSend(@"[[:Lu:][:Ll:][:Lt:][:Lm:][:Lo:][:Nl:]]", "length") + 17) & 0xFFFFFFFFFFFFFFF0)];
  HIDWORD(v1) = 0;
  [@"[[:Lu:][:Ll:][:Lt:][:Lm:][:Lo:][:Nl:]]" length];
  uint64_t result = uset_openPattern();
  qword_1EB1EDA88 = result;
  if (SHIDWORD(v1) >= 1)
  {
    qword_1E8EDF350 = (uint64_t)"Unable to open unicode pattern";
    __break(1u);
  }
  return result;
}

void __newJSONString_block_invoke_2(uint64_t a1, void *a2, unsigned char *a3)
{
  *a3 = 1;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
}

_NSJSONRoundTrippingNumber *newJSON5HexNumber(_NSJSONRoundTrippingNumber *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  unint64_t isa = (unint64_t)result[1].super.isa;
  Class v5 = result->super.isa;
  uint64_t v6 = (unsigned __int8 *)result->super.isa + isa;
  int v7 = *v6;
  int v8 = v7;
  unint64_t v9 = (objc_class *)isa;
  if (v7 == 45)
  {
    unint64_t v9 = (objc_class *)(isa + 1);
    if (result->_representation <= (NSString *)(isa + 1))
    {
      if (a2)
      {
        Class v42 = result[2].super.isa;
        BOOL v35 = isa >= (unint64_t)v42;
        unint64_t v43 = isa - (void)v42;
        if (v35) {
          unint64_t v44 = v43;
        }
        else {
          unint64_t v44 = 0;
        }
        uint64_t v38 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Number with minus sign but no digits", result[1]._representation, v44];
        goto LABEL_77;
      }
      return 0;
    }
    result[1].super.unint64_t isa = v9;
    int v8 = *((unsigned __int8 *)v9 + (void)v5);
  }
  if (v8 != 48)
  {
    if (a2)
    {
      Class v39 = result[2].super.isa;
      BOOL v35 = v9 >= v39;
      int64_t v40 = v9 - v39;
      if (v35) {
        int64_t v41 = v40;
      }
      else {
        int64_t v41 = 0;
      }
      uint64_t v38 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Hex number without leading zero", result[1]._representation, v41];
      goto LABEL_77;
    }
    return 0;
  }
  uint64_t v10 = (objc_class *)((char *)v9 + 1);
  unint64_t representation = (unint64_t)result->_representation;
  if (representation <= (unint64_t)v9 + 1)
  {
    if (!a2) {
      return 0;
    }
    Class v45 = result[2].super.isa;
    BOOL v35 = v9 >= v45;
    int64_t v46 = v9 - v45;
    if (v35) {
      int64_t v47 = v46;
    }
    else {
      int64_t v47 = 0;
    }
    unsigned int v48 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Unexpected end of file during JSON parse.", result[1]._representation, v47];
    unsigned int v49 = [[NSNumber alloc] initWithUnsignedInteger:v3[1].super.isa];
    uint64_t v77 = @"NSDebugDescription";
    uint64_t v78 = @"NSJSONSerializationErrorIndex";
    unint64_t v79 = v48;
    char v80 = v49;
    *a2 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v79 forKeys:&v77 count:2]);

    Class v50 = v3[1].super.isa;
    Class v51 = v3[2].super.isa;
    BOOL v35 = v50 >= v51;
    int64_t v52 = v50 - v51;
    if (v35) {
      uint64_t v53 = v52;
    }
    else {
      uint64_t v53 = 0;
    }
    unsigned int v54 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Hex number without next 'x'", v3[1]._representation, v53];
LABEL_86:
    int v58 = v54;
    unsigned int v59 = [[NSNumber alloc] initWithUnsignedInteger:v3[1].super.isa];
    uint64_t v77 = @"NSDebugDescription";
    uint64_t v78 = @"NSJSONSerializationErrorIndex";
    unint64_t v79 = v58;
    char v80 = v59;
    uint64_t v60 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v79 forKeys:&v77 count:2];
LABEL_87:
    *a2 = +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:3840 userInfo:v60];

    return 0;
  }
  result[1].super.unint64_t isa = v10;
  if ((*((unsigned __int8 *)v10 + (void)v5) | 0x20) != 0x78)
  {
    if (a2)
    {
      Class v55 = result[2].super.isa;
      BOOL v35 = v10 >= v55;
      int64_t v56 = v10 - v55;
      if (v35) {
        int64_t v57 = v56;
      }
      else {
        int64_t v57 = 0;
      }
      uint64_t v38 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Hex number without 'x'", result[1]._representation, v57];
      goto LABEL_77;
    }
    return 0;
  }
  BOOL v12 = (objc_class *)((char *)v9 + 2);
  if (representation <= (unint64_t)v9 + 2)
  {
    if (!a2) {
      return 0;
    }
    Class v61 = result[2].super.isa;
    BOOL v35 = v10 >= v61;
    int64_t v62 = v10 - v61;
    if (v35) {
      int64_t v63 = v62;
    }
    else {
      int64_t v63 = 0;
    }
    unint64_t v64 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Unexpected end of file during JSON parse.", result[1]._representation, v63];
    uint64_t v65 = [[NSNumber alloc] initWithUnsignedInteger:v3[1].super.isa];
    uint64_t v77 = @"NSDebugDescription";
    uint64_t v78 = @"NSJSONSerializationErrorIndex";
    unint64_t v79 = v64;
    char v80 = v65;
    *a2 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v79 forKeys:&v77 count:2]);

    Class v66 = v3[1].super.isa;
    Class v67 = v3[2].super.isa;
    BOOL v35 = v66 >= v67;
    int64_t v68 = v66 - v67;
    if (v35) {
      uint64_t v69 = v68;
    }
    else {
      uint64_t v69 = 0;
    }
    unsigned int v54 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Hex number without next digit (EoF)", v3[1]._representation, v69];
    goto LABEL_86;
  }
  result[1].super.unint64_t isa = v12;
  if ((*((unsigned char *)v12 + (void)v5) - 48) < 0xAu
    || ((unsigned int v13 = *((unsigned __int8 *)v12 + (void)v5) - 65, v14 = v13 > 0x25, v15 = (1 << v13) & 0x3F0000003FLL, !v14)
      ? (BOOL v16 = v15 == 0)
      : (BOOL v16 = 1),
        !v16))
  {
    uint64_t v17 = (objc_class *)((char *)v9 + 3);
    if (representation <= (unint64_t)v17)
    {
LABEL_21:
      result[1].super.unint64_t isa = v17;
    }
    else
    {
      while (1)
      {
        result[1].super.unint64_t isa = v17;
        if ((*((unsigned char *)v17 + (void)v5) - 48) > 9u)
        {
          unsigned int v18 = *((unsigned __int8 *)v17 + (void)v5) - 65;
          BOOL v14 = v18 > 0x25;
          uint64_t v19 = (1 << v18) & 0x3F0000003FLL;
          if (v14 || v19 == 0) {
            break;
          }
        }
        uint64_t v17 = (objc_class *)((char *)v17 + 1);
        if ((objc_class *)representation == v17)
        {
          uint64_t v17 = (objc_class *)representation;
          goto LABEL_21;
        }
      }
    }
    unint64_t v21 = 0;
    uint64_t v22 = (unsigned __int8 *)v17 + (void)v5 - 1;
    if (v7 == 45) {
      ++v6;
    }
    unint64_t v23 = v6 + 2;
    unint64_t v24 = 1;
    while (v22 >= v23)
    {
      int v25 = *v22;
      unsigned __int8 v26 = v25 - 48;
      if ((v25 - 48) >= 0xA)
      {
        if ((v25 - 65) > 5)
        {
          if ((v25 - 97) > 5)
          {
            __break(1u);
            return result;
          }
          unsigned __int8 v26 = v25 - 87;
        }
        else
        {
          unsigned __int8 v26 = v25 - 55;
        }
      }
      BOOL v27 = 0;
      unint64_t v28 = 0;
      if (v24 && v26)
      {
        unint64_t v28 = v24 * v26;
        BOOL v27 = __CFADD__(v21, v28) || (v26 * (unsigned __int128)v24) >> 64 != 0;
      }
      --v22;
      if (v24 >> 60) {
        int v30 = 1;
      }
      else {
        int v30 = v27;
      }
      uint64_t v31 = 16 * v24;
      if (v22 >= v23)
      {
        BOOL v32 = v24 == 0;
      }
      else
      {
        uint64_t v31 = v24;
        BOOL v32 = 1;
      }
      v21 += v28;
      if (v32) {
        int v33 = v27;
      }
      else {
        int v33 = v30;
      }
      unint64_t v24 = v31;
      if (v33)
      {
        if (!a2) {
          return 0;
        }
        Class v34 = result[2].super.isa;
        BOOL v35 = v17 >= v34;
        int64_t v36 = v17 - v34;
        if (v35) {
          int64_t v37 = v36;
        }
        else {
          int64_t v37 = 0;
        }
        uint64_t v38 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Hex number with underflow or overflow", result[1]._representation, v37];
        goto LABEL_77;
      }
    }
    if (v7 != 45)
    {
      unint64_t v70 = [[NSNumber alloc] initWithUnsignedLongLong:v21];
      goto LABEL_93;
    }
    if (v21 <= 0x8000000000000000)
    {
      unint64_t v70 = [[NSNumber alloc] initWithLongLong:-(uint64_t)v21];
LABEL_93:
      return newJSONNumberCreateRoundTripping((uint64_t)v3, isa, v70);
    }
    if (!a2) {
      return 0;
    }
    Class v71 = result[2].super.isa;
    BOOL v35 = v17 >= v71;
    int64_t v72 = v17 - v71;
    if (v35) {
      int64_t v73 = v72;
    }
    else {
      int64_t v73 = 0;
    }
    uint64_t v38 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Hex number with underflow", result[1]._representation, v73];
LABEL_77:
    int v58 = v38;
    unsigned int v59 = [[NSNumber alloc] initWithUnsignedInteger:v3[1].super.isa];
    uint64_t v77 = @"NSDebugDescription";
    uint64_t v78 = @"NSJSONSerializationErrorIndex";
    unint64_t v79 = v58;
    char v80 = v59;
    uint64_t v60 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v79 forKeys:&v77 count:2];
    goto LABEL_87;
  }
  if (a2)
  {
    Class v74 = result[2].super.isa;
    BOOL v35 = v12 >= v74;
    int64_t v75 = v12 - v74;
    if (v35) {
      int64_t v76 = v75;
    }
    else {
      int64_t v76 = 0;
    }
    uint64_t v38 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Hex number without next digit", result[1]._representation, v76];
    goto LABEL_77;
  }
  return 0;
}

uint64_t newJSON5InfinityOrNaN(uint64_t *a1, void *a2)
{
  v37[2] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a1[3];
  uint64_t v5 = *a1;
  int v6 = *(unsigned __int8 *)(*a1 + v4);
  if (v6 == 45 || v6 == 43)
  {
    unint64_t v7 = v4 + 1;
    if (a1[2] <= v4 + 1)
    {
      if (a2)
      {
        unint64_t v9 = a1[6];
        BOOL v10 = v4 >= v9;
        uint64_t v11 = v4 - v9;
        if (v10) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0;
        }
        unsigned int v13 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Partial negative infinity or NaN around character %lu (EoF).", a1[5], v12];
        goto LABEL_42;
      }
      return 0;
    }
    a1[3] = v7;
    int v8 = *(unsigned __int8 *)(v5 + v7);
  }
  else
  {
    int v8 = *(unsigned __int8 *)(*a1 + v4);
    unint64_t v7 = a1[3];
  }
  BOOL v14 = (const char *)(v5 + v7);
  if (v8 == 78)
  {
    if (a1[2] <= v7 + 2)
    {
      a1[3] = v7;
      if (a2)
      {
        unint64_t v27 = a1[6];
        BOOL v10 = v7 >= v27;
        uint64_t v28 = v7 - v27;
        if (v10) {
          uint64_t v29 = v28;
        }
        else {
          uint64_t v29 = 0;
        }
        unsigned int v13 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Partial NaN around character %lu (EoF).", a1[5], v29];
        goto LABEL_42;
      }
      return 0;
    }
    a1[3] = v7 + 2;
    if (strncmp(v14, "NaN", 3uLL))
    {
      a1[3] = v7;
      if (a2)
      {
        unint64_t v18 = a1[6];
        BOOL v10 = v7 >= v18;
        uint64_t v19 = v7 - v18;
        if (v10) {
          uint64_t v20 = v19;
        }
        else {
          uint64_t v20 = 0;
        }
        unsigned int v13 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Invalid NaN around character %lu (EoF).", a1[5], v20];
        goto LABEL_42;
      }
      return 0;
    }
    if (v6 == 45) {
      double v33 = NAN;
    }
    else {
      double v33 = NAN;
    }
    unint64_t v34 = v7 + 3;
  }
  else
  {
    if (v8 != 73)
    {
      a1[3] = v7;
      if (a2)
      {
        unint64_t v21 = a1[6];
        BOOL v10 = v7 >= v21;
        uint64_t v22 = v7 - v21;
        if (v10) {
          uint64_t v23 = v22;
        }
        else {
          uint64_t v23 = 0;
        }
        unsigned int v13 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Invalid Infinity or NaN", a1[5], v23];
        goto LABEL_42;
      }
      return 0;
    }
    if (a1[2] <= v7 + 7)
    {
      a1[3] = v7;
      if (a2)
      {
        unint64_t v24 = a1[6];
        BOOL v10 = v7 >= v24;
        uint64_t v25 = v7 - v24;
        if (v10) {
          uint64_t v26 = v25;
        }
        else {
          uint64_t v26 = 0;
        }
        unsigned int v13 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Partial infinity around character %lu (EoF).", a1[5], v26];
        goto LABEL_42;
      }
      return 0;
    }
    a1[3] = v7 + 7;
    if (strncmp(v14, "Infinity", 8uLL))
    {
      a1[3] = v7;
      if (a2)
      {
        unint64_t v15 = a1[6];
        BOOL v10 = v7 >= v15;
        uint64_t v16 = v7 - v15;
        if (v10) {
          uint64_t v17 = v16;
        }
        else {
          uint64_t v17 = 0;
        }
        unsigned int v13 = [[NSString alloc] initWithFormat:@"%@ around line %lu, column %lu.", @"Invalid infinity around character %lu (EoF).", a1[5], v17];
LABEL_42:
        int v30 = v13;
        uint64_t v31 = [[NSNumber alloc] initWithUnsignedInteger:a1[3]];
        v36[0] = @"NSDebugDescription";
        v36[1] = @"NSJSONSerializationErrorIndex";
        v37[0] = v30;
        v37[1] = v31;
        *a2 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", @"NSCocoaErrorDomain", 3840, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v37 forKeys:v36 count:2]);

        return 0;
      }
      return 0;
    }
    if (v6 == 45) {
      double v33 = -INFINITY;
    }
    else {
      double v33 = INFINITY;
    }
    unint64_t v34 = v7 + 8;
  }
  a1[3] = v34;
  BOOL v35 = [NSNumber alloc];

  return (uint64_t)[(NSNumber *)v35 initWithDouble:v33];
}

uint64_t _NSLinguisticDataPath()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t result = _NSLinguisticDataPath_dataPath;
  if (!_NSLinguisticDataPath_dataPath)
  {
    uint64_t v1 = (__CFString *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "objectForKey:", @"NSLinguisticDataPath");
    if (!v1 || (_NSIsNSString() & 1) == 0)
    {
      uint64_t v2 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 8uLL, 1);
      long long v12 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      uint64_t v3 = [(NSArray *)v2 countByEnumeratingWithState:&v12 objects:v11 count:16];
      if (v3)
      {
        uint64_t v4 = v3;
        uint64_t v5 = *(void *)v13;
        while (2)
        {
          for (uint64_t i = 0; i != v4; ++i)
          {
            if (*(void *)v13 != v5) {
              objc_enumerationMutation(v2);
            }
            uint64_t v7 = [*(id *)(*((void *)&v12 + 1) + 8 * i) stringByAppendingPathComponent:@"LinguisticData"];
            if ([+[NSFileManager defaultManager] fileExistsAtPath:v7])
            {
              uint64_t v1 = (__CFString *)v7;
              goto LABEL_14;
            }
          }
          uint64_t v4 = [(NSArray *)v2 countByEnumeratingWithState:&v12 objects:v11 count:16];
          if (v4) {
            continue;
          }
          break;
        }
      }
LABEL_14:
      if (!v1) {
        uint64_t v1 = @"/System/Library/LinguisticData";
      }
    }
    if (getenv("IPHONE_SIMULATOR_ROOT")
      && (int v8 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:")) != 0)
    {
      unint64_t v9 = [(NSString *)v8 stringByAppendingPathComponent:v1];
    }
    else
    {
      unint64_t v9 = +[NSString stringWithString:v1];
    }
    _NSLinguisticDataPath_dataPath = (uint64_t)v9;
    BOOL v10 = v9;
    return _NSLinguisticDataPath_dataPath;
  }
  return result;
}

uint64_t joinTokensInRange(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (result)
  {
    if (a3 >= 2)
    {
      unint64_t v3 = a2 + a3;
      unint64_t v4 = qword_1EB1EDB98;
      if (a2 + a3 <= qword_1EB1EDB98)
      {
        uint64_t v5 = (long long *)(result + 16 * v3);
        int v6 = (unsigned char *)(result + 16 * a2);
        void v6[2] = *((unsigned char *)v5 - 14) + *((unsigned char *)v5 - 16) - *v6;
        if (v3 < v4)
        {
          uint64_t v7 = v6 + 16;
          do
          {
            long long v8 = *v5++;
            *v7++ = v8;
            ++v3;
          }
          while (v3 < v4);
        }
        qword_1EB1EDB98 = v4 - a3 + 1;
      }
    }
  }
  return result;
}

uint64_t sentenceRangeAtIndexInTokens(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t *a6)
{
  uint64_t result = 0x7FFFFFFFFFFFFFFFLL;
  if (!a5)
  {
    unint64_t v19 = 0;
    uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_68;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    unint64_t v11 = v9;
    unint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v9 = v8;
    long long v13 = (unsigned __int16 *)(a4 + 16 * v8);
    while (1)
    {
      if (v9) {
        uint64_t v14 = *v13;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = v9 + 1;
      unint64_t v16 = a3;
      if (v9 + 1 < a5) {
        unint64_t v16 = v13[8];
      }
      unint64_t v17 = v14 + a2;
      if (v16 + a2 > a1 && v17 <= a1) {
        unint64_t v12 = v9;
      }
      if (*((unsigned char *)v13 + 3) == 2) {
        break;
      }
      v13 += 8;
      ++v9;
      if (a5 == v15)
      {
        uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
        if (v12 == 0x7FFFFFFFFFFFFFFFLL)
        {
          unint64_t v19 = 0;
LABEL_22:
          uint64_t result = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_68;
        }
        goto LABEL_24;
      }
    }
    if (v12 == 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v8 = v9 + 1;
      unint64_t v10 = v11;
      if (a5 - 1 != v9) {
        continue;
      }
      unint64_t v19 = 0;
      uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_22;
    }
    break;
  }
LABEL_24:
  if (v11 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    if (a5 <= v11 + 1) {
      unint64_t v21 = v11 + 1;
    }
    else {
      unint64_t v21 = a5;
    }
    uint64_t v22 = v21 - 1;
    uint64_t v23 = (unsigned __int16 *)(a4 + 16 * v11 + 16);
    while (1)
    {
      uint64_t v24 = v11++;
      if (v11 >= a5) {
        break;
      }
      unint64_t v16 = *v23;
      if (*((unsigned __int8 *)v23 - 14) + *(v23 - 8) == v16)
      {
        unsigned int v25 = *((unsigned __int8 *)v23 + 3) - 14;
        v23 += 8;
        if (v25 > 0xFFFFFFF4) {
          continue;
        }
      }
      goto LABEL_35;
    }
    uint64_t v24 = v22;
    unint64_t v16 = a3;
LABEL_35:
    if (v16 > a1)
    {
      uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
      if (v10 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if (a5 <= v10 + 1) {
          unint64_t v26 = v10 + 1;
        }
        else {
          unint64_t v26 = a5;
        }
        uint64_t v27 = v26 - 1;
        uint64_t v28 = (unsigned __int16 *)(a4 + 16 * v10 + 16);
        while (1)
        {
          uint64_t v20 = v10++;
          if (v10 >= a5) {
            break;
          }
          unint64_t v16 = *v28;
          if (*((unsigned __int8 *)v28 - 14) + *(v28 - 8) == v16)
          {
            unsigned int v29 = *((unsigned __int8 *)v28 + 3) - 14;
            v28 += 8;
            if (v29 > 0xFFFFFFF4) {
              continue;
            }
          }
          goto LABEL_47;
        }
        unint64_t v16 = a3;
        uint64_t v20 = v27;
      }
      goto LABEL_47;
    }
    uint64_t v20 = v24;
  }
  uint64_t v24 = v9;
LABEL_47:
  if (v20 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v20 + 1;
  }
  if (v20 == 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v30 = 0;
  }
  else {
    unint64_t v30 = v16;
  }
  uint64_t result = v30 + a2;
  if (v24 == 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v31 = a5;
  }
  else
  {
    unint64_t v32 = v24 + 1;
    if (a5 <= v24 + 1) {
      unint64_t v33 = v24 + 1;
    }
    else {
      unint64_t v33 = a5;
    }
    unint64_t v34 = (unsigned __int16 *)(a4 + 16 * v24 + 16);
    while (v32 < a5)
    {
      unint64_t v31 = v32;
      if (*((unsigned __int8 *)v34 - 14) + *(v34 - 8) == *v34)
      {
        unsigned int v35 = *((unsigned __int8 *)v34 + 3) - 14;
        v34 += 8;
        ++v32;
        if (v35 > 0xFFFFFFF4) {
          continue;
        }
      }
      goto LABEL_64;
    }
    unint64_t v31 = v33;
  }
LABEL_64:
  unint64_t v19 = v31 - v9;
  if (v19 >= 0x101)
  {
    if (v12 < v9 + 256
      || (unint64_t v36 = (v12 - v9) & 0xFFFFFFFFFFFFFF00,
          v9 += v36,
          v19 -= v36,
          uint64_t result = a2 + *(unsigned __int16 *)(a4 + 16 * v9),
          v19 >= 0x101))
    {
      unint64_t v19 = 256;
    }
  }
LABEL_68:
  if (a6)
  {
    *a6 = v9;
    a6[1] = v19;
  }
  return result;
}

id tagForNLTag(void *a1)
{
  if (qword_1EB1EDBE0 == -1)
  {
    if (a1) {
      goto LABEL_3;
    }
    return 0;
  }
  dispatch_once(&qword_1EB1EDBE0, &__block_literal_global_598);
  if (!a1) {
    return 0;
  }
LABEL_3:
  id result = (id)[(id)qword_1EB1EDBD8 objectForKey:a1];
  if (!result)
  {
    id v3 = a1;
    return v3;
  }
  return result;
}

void sub_18207988C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18207C764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __loadNLTagger_block_invoke()
{
  uint64_t v0 = (const char *)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)_NSLinguisticDataPath(), "stringByDeletingLastPathComponent"), "stringByAppendingPathComponent:", @"PrivateFrameworks/CoreNLP.framework/CoreNLP"), "fileSystemRepresentation");
  uint64_t v1 = dlopen(v0, 256);
  if (v1)
  {
    uint64_t v2 = v1;
    off_1EB1EDAB0 = (uint64_t (*)(void, void))dlsym(v1, "NLTaggerCreate");
    off_1EB1EDB48 = dlsym(v2, "NLTaggerSetString");
    off_1EB1EDB58 = (uint64_t (*)(void, void, void, void))dlsym(v2, "NLTaggerSetLocaleForRange");
    off_1EB1EDB50 = (uint64_t (*)(void, void, void, void))dlsym(v2, "NLTaggerSetStringEditedInRange");
    off_1EB1EDB78 = (uint64_t (*)(void, void, void, void, void, void))dlsym(v2, "NLTaggerEnumerateTokens");
    off_1EB1EDB80 = (uint64_t (*)(void, void))dlsym(v2, "NLTaggerCopyTagForCurrentToken");
    off_1EB1EDB70 = (void *(*)(void *__return_ptr, void, void, void))dlsym(v2, "NLTaggerGetTokenAtIndex");
    off_1EB1EDB60 = (uint64_t (*)(void, void, void, void))dlsym(v2, "NLTaggerCopyTagAtIndex");
    off_1EB1EDA98 = (uint64_t (*)(void, void))dlsym(v2, "NLTaggerCopyAvailableTagSchemes");
    off_1EB1EDB68 = (uint64_t (*)(void, void, void))dlsym(v2, "NLTaggerCopyLanguageMapAtIndex");
  }
  if (off_1EB1EDAB0) {
    BOOL v3 = off_1EB1EDB48 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3
    || off_1EB1EDB58 == 0
    || off_1EB1EDB50 == 0
    || off_1EB1EDB78 == 0
    || off_1EB1EDB80 == 0
    || off_1EB1EDB70 == 0
    || off_1EB1EDB60 == 0
    || off_1EB1EDA98 == 0)
  {
    _MergedGlobals_142 = 0;
    unint64_t v11 = off_1EB1EDB68;
  }
  else
  {
    _MergedGlobals_142 = off_1EB1EDB68 != 0;
    if (off_1EB1EDB68) {
      return;
    }
    unint64_t v11 = 0;
  }
  NSLog((NSString *)@"NSLinguisticTagger failed to load NLTagger, results %p %p %p %p %p %p %p %p %p %p", off_1EB1EDAB0, off_1EB1EDB48, off_1EB1EDB58, off_1EB1EDB50, off_1EB1EDB78, off_1EB1EDB80, off_1EB1EDB70, off_1EB1EDB60, off_1EB1EDA98, v11);
}

id __tagForNLTag_block_invoke()
{
  v2[31] = *MEMORY[0x1E4F143B8];
  v1[0] = @"Word";
  v1[1] = @"Punctuation";
  v2[0] = @"Word";
  v2[1] = @"Punctuation";
  v1[2] = @"Whitespace";
  v1[3] = @"Other";
  v2[2] = @"Whitespace";
  v2[3] = @"Other";
  v1[4] = @"Noun";
  v1[5] = @"Verb";
  v2[4] = @"Noun";
  v2[5] = @"Verb";
  void v1[6] = @"Adjective";
  v1[7] = @"Adverb";
  v2[6] = @"Adjective";
  v2[7] = @"Adverb";
  uint8_t v1[8] = @"Pronoun";
  v1[9] = @"Determiner";
  v2[8] = @"Pronoun";
  v2[9] = @"Determiner";
  v1[10] = @"Particle";
  v1[11] = @"Preposition";
  v2[10] = @"Particle";
  v2[11] = @"Preposition";
  v1[12] = @"Number";
  v1[13] = @"Conjunction";
  v2[12] = @"Number";
  v2[13] = @"Conjunction";
  v1[14] = @"Interjection";
  v1[15] = @"Classifier";
  v2[14] = @"Interjection";
  v2[15] = @"Classifier";
  v1[16] = @"Idiom";
  v1[17] = @"OtherWord";
  v2[16] = @"Idiom";
  v2[17] = @"OtherWord";
  v1[18] = @"SentenceTerminator";
  v1[19] = @"OpenQuote";
  v2[18] = @"SentenceTerminator";
  v2[19] = @"OpenQuote";
  v1[20] = @"CloseQuote";
  v1[21] = @"OpenParenthesis";
  v2[20] = @"CloseQuote";
  v2[21] = @"OpenParenthesis";
  v1[22] = @"CloseParenthesis";
  v1[23] = @"WordJoiner";
  v2[22] = @"CloseParenthesis";
  v2[23] = @"WordJoiner";
  v1[24] = @"Dash";
  v1[25] = @"Punctuation";
  v2[24] = @"Dash";
  v2[25] = @"Punctuation";
  v1[26] = @"ParagraphBreak";
  v1[27] = @"Whitespace";
  v2[26] = @"ParagraphBreak";
  v2[27] = @"Whitespace";
  v1[28] = @"PersonalName";
  v1[29] = @"PlaceName";
  v2[28] = @"PersonalName";
  v2[29] = @"PlaceName";
  v1[30] = @"OrganizationName";
  v2[30] = @"OrganizationName";
  id result = (id)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v2 forKeys:v1 count:31];
  qword_1EB1EDBD8 = (uint64_t)result;
  return result;
}

const void *getLXLemmatizer(__CFString *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = a1;
  if ([(__CFString *)a1 isEqualToString:@"en"]) {
    uint64_t v1 = @"en_US";
  }
  if ([(__CFString *)v1 isEqualToString:@"es"]) {
    uint64_t v1 = @"es_ES";
  }
  if ([(__CFString *)v1 isEqualToString:@"pt"]) {
    uint64_t v1 = @"pt_BR";
  }
  if (qword_1EB1EDBF0 != -1) {
    dispatch_once(&qword_1EB1EDBF0, &__block_literal_global_846);
  }
  id Value = 0;
  if (off_1EB1EDBF8 && off_1EB1EDC00)
  {
    [(id)qword_1EB1EDC08 lock];
    CFDictionaryRef Mutable = (const __CFDictionary *)qword_1EB1EDBE8;
    if (!qword_1EB1EDBE8)
    {
      CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
      qword_1EB1EDBE8 = (uint64_t)Mutable;
    }
    id Value = CFDictionaryGetValue(Mutable, v1);
    if (!Value)
    {
      id Value = (const void *)off_1EB1EDBF8(v1, 0);
      if (Value)
      {
        unint64_t v4 = v1;
        uint64_t v5 = Value;
      }
      else
      {
        uint64_t v5 = (const void *)*MEMORY[0x1E4F1D260];
        unint64_t v4 = v1;
      }
      CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EB1EDBE8, v4, v5);
    }
    CFTypeID v6 = CFGetTypeID(Value);
    if (v6 == CFNullGetTypeID()) {
      id Value = 0;
    }
    [(id)qword_1EB1EDC08 unlock];
  }
  return Value;
}

NSString *lemmatizerLemmaForStringWithCategory(uint64_t a1, void *a2, int a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  [(id)qword_1EB1EDC08 lock];
  uint64_t v17 = 0;
  unint64_t v18 = &v17;
  uint64_t v19 = 0x2020000000;
  uint64_t v20 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000;
  uint64_t v16 = 0;
  if ((a3 - 16) > 0x45) {
    char v6 = 12;
  }
  else {
    char v6 = byte_18237F184[(char)(a3 - 16)];
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __lemmatizerLemmaForStringWithCategory_block_invoke;
  _OWORD v11[3] = &unk_1E51FB748;
  v11[5] = &v17;
  v11[6] = a1;
  char v12 = v6;
  v11[4] = &v13;
  enumerateNormalizedStrings(a2, (uint64_t)v11);
  if (v18[3] || v14[3])
  {
    uint64_t v7 = +[NSString stringWithString:](NSString, "stringWithString:");
    uint64_t v8 = (const void *)v18[3];
    if (v8) {
      CFRelease(v8);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v9 = (const void *)v14[3];
  if (v9) {
    CFRelease(v9);
  }
  [(id)qword_1EB1EDC08 unlock];
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
  return v7;
}

void sub_18207CF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 72), 8);
  _Unwind_Resume(a1);
}

uint64_t lemmatizerAddTagsForString(uint64_t a1, void *a2, uint64_t a3)
{
  v7[6] = *MEMORY[0x1E4F143B8];
  [(id)qword_1EB1EDC08 lock];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __lemmatizerAddTagsForString_block_invoke;
  v7[3] = &unk_1E51FB7C0;
  void v7[4] = a3;
  v7[5] = a1;
  enumerateNormalizedStrings(a2, (uint64_t)v7);
  return [(id)qword_1EB1EDC08 unlock];
}

uint64_t __tagForWordToken_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = [a2 integerValue];
  if (v5 == [a3 integerValue]) {
    return 0;
  }
  uint64_t v7 = [a2 integerValue];
  if (v7 > [a3 integerValue]) {
    return -1;
  }
  else {
    return 1;
  }
}

NSLock *__getLXLemmatizer_block_invoke()
{
  uint64_t v0 = (const char *)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)_NSLinguisticDataPath(), "stringByDeletingLastPathComponent"), "stringByAppendingPathComponent:", @"PrivateFrameworks/Lexicon.framework/Lexicon"), "fileSystemRepresentation");
  uint64_t v1 = dlopen(v0, 256);
  if (v1)
  {
    uint64_t v2 = v1;
    off_1EB1EDBF8 = (uint64_t (*)(void, void))dlsym(v1, "LXLemmatizerCreate");
    off_1EB1EDC00 = (uint64_t (*)(void, void, void))dlsym(v2, "LXLemmatizerEnumerateLemmasforString");
  }
  id result = objc_alloc_init(NSLock);
  qword_1EB1EDC08 = (uint64_t)result;
  return result;
}

uint64_t enumerateNormalizedStrings(void *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if ((byte_1EB1EDA91 & 1) == 0)
  {
    uint64_t v12 = 0x20182019201C201DLL;
    qword_1EB1EDC10 = [[NSString alloc] initWithCharacters:(char *)&v12 + 6 length:1];
    qword_1EB1EDC18 = [[NSString alloc] initWithCharacters:(char *)&v12 + 4 length:1];
    qword_1EB1EDC20 = [[NSString alloc] initWithCharacters:(char *)&v12 + 2 length:1];
    qword_1EB1EDC28 = [[NSString alloc] initWithCharacters:&v12 length:1];
    id v4 = objc_alloc(MEMORY[0x1E4F1C9E8]);
    qword_1EB1EDC30 = objc_msgSend(v4, "initWithObjectsAndKeys:", @"not", @"n't", @"have", @"'ve", @"will", @"'ll", @"am", @"'m", @"are", @"'re", @"had", @"'d", 0, v12, v13);
    byte_1EB1EDA91 = 1;
  }
  [a1 rangeOfString:qword_1EB1EDC10];
  if (v5) {
    a1 = (void *)[a1 stringByReplacingOccurrencesOfString:qword_1EB1EDC10 withString:@"'"];
  }
  [a1 rangeOfString:qword_1EB1EDC18];
  if (v6) {
    a1 = (void *)[a1 stringByReplacingOccurrencesOfString:qword_1EB1EDC18 withString:@"'"];
  }
  [a1 rangeOfString:qword_1EB1EDC20];
  if (v7) {
    a1 = (void *)[a1 stringByReplacingOccurrencesOfString:qword_1EB1EDC20 withString:@"\""];
  }
  [a1 rangeOfString:qword_1EB1EDC28];
  if (v8) {
    a1 = (void *)[a1 stringByReplacingOccurrencesOfString:qword_1EB1EDC28 withString:@"\""];
  }
  BYTE6(v12) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *, char *))(a2 + 16))(a2, a1, (char *)&v12 + 6);
  if (!BYTE6(v12))
  {
    uint64_t v10 = (void *)[a1 lowercaseString];
    if (([v10 isEqualToString:a1] & 1) != 0
      || (uint64_t result = (*(uint64_t (**)(uint64_t, void *, char *))(a2 + 16))(a2, v10, (char *)&v12 + 6), !BYTE6(v12)))
    {
      unint64_t v11 = (void *)[v10 capitalizedString];
      if (([v11 isEqualToString:a1] & 1) != 0
        || (uint64_t result = (*(uint64_t (**)(uint64_t, void *, char *))(a2 + 16))(a2, v11, (char *)&v12 + 6),
            !BYTE6(v12)))
      {
        uint64_t result = [(id)qword_1EB1EDC30 objectForKey:v10];
        if (result) {
          return (*(uint64_t (**)(uint64_t, uint64_t, char *))(a2 + 16))(a2, result, (char *)&v12 + 6);
        }
      }
    }
  }
  return result;
}

uint64_t __lemmatizerLemmaForStringWithCategory_block_invoke(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 48);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _DWORD v8[2] = __lemmatizerLemmaForStringWithCategory_block_invoke_2;
  _OWORD v8[3] = &unk_1E51FB720;
  char v10 = *(unsigned char *)(a1 + 56);
  long long v9 = *(_OWORD *)(a1 + 32);
  uint64_t result = off_1EB1EDC00(v5, a2, v8);
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) != 0;
  }
  *a3 = v7;
  return result;
}

void *__lemmatizerLemmaForStringWithCategory_block_invoke_2(void *result, CFTypeRef cf, int a3, unsigned char *a4)
{
  BOOL v7 = result;
  if (!*(void *)(*(void *)(result[4] + 8) + 24))
  {
    uint64_t result = CFRetain(cf);
    *(void *)(*(void *)(v7[4] + 8) + 24) = result;
  }
  if (*((unsigned __int8 *)v7 + 48) == a3)
  {
    uint64_t result = CFRetain(cf);
    *(void *)(*(void *)(v7[5] + 8) + 24) = result;
    *a4 = 1;
  }
  return result;
}

void __lemmatizerAddTagsForString_block_invoke(uint64_t a1, uint64_t a2, BOOL *a3)
{
  void v14[4] = *MEMORY[0x1E4F143B8];
  v14[0] = 0;
  v14[1] = v14;
  void v14[2] = 0x2020000000;
  v14[3] = 0;
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  uint64_t v13 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  _OWORD v9[2] = __lemmatizerAddTagsForString_block_invoke_2;
  v9[3] = &unk_1E51FB770;
  void v9[4] = &v10;
  off_1EB1EDC00(v6, a2, v9);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _DWORD v8[2] = __lemmatizerAddTagsForString_block_invoke_3;
  _OWORD v8[3] = &unk_1E51FB798;
  uint64_t v7 = *(void *)(a1 + 40);
  void v8[4] = *(void *)(a1 + 32);
  v8[5] = &v10;
  v8[6] = v14;
  off_1EB1EDC00(v7, a2, v8);
  *a3 = v11[3] > 0;
  _Block_object_dispose(&v10, 8);
  _Block_object_dispose(v14, 8);
}

void sub_18207D738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 120), 8);
  _Unwind_Resume(a1);
}

uint64_t __lemmatizerAddTagsForString_block_invoke_2(uint64_t result)
{
  return result;
}

uint64_t __lemmatizerAddTagsForString_block_invoke_3(uint64_t a1, uint64_t a2, int a3)
{
  if ((a3 - 1) > 0xA) {
    id v4 = @"OtherWord";
  }
  else {
    id v4 = off_1E51FBA20[(char)(a3 - 1)];
  }
  uint64_t v5 = (void *)[*(id *)(a1 + 32) objectForKey:v4];
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)
     - *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  if (v5) {
    v6 += [v5 integerValue];
  }
  uint64_t result = objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v6), v4);
  ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  return result;
}

uint64_t _validateFilename(void *a1)
{
  uint64_t v1 = (void *)[a1 pathComponents];
  uint64_t v2 = [v1 count];
  if ((unint64_t)(v2 - 3) < 0xFFFFFFFFFFFFFFFELL) {
    return 0;
  }
  uint64_t v3 = v2;
  id v4 = (void *)[v1 firstObject];
  if (([v4 isEqualToString:@"/"] & 1) != 0
    || ([v4 isEqualToString:@".."] & 1) != 0
    || ([v4 isEqualToString:@"."] & 1) != 0)
  {
    return 0;
  }
  if (v3 == 1) {
    return 1;
  }
  uint64_t v6 = (void *)[v1 objectAtIndexedSubscript:1];

  return [v6 isEqualToString:@"/"];
}

uint64_t _NSDescribeFileContentsInstance(void *a1, id *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (void *)[a2 preferredFilename];
  uint64_t v11 = v10;
  if (!a3 || ([v10 isEqualToString:a3] & 1) != 0)
  {
    uint64_t v12 = (NSString *)&stru_1ECA5C228;
    if (a5) {
      goto LABEL_4;
    }
LABEL_12:
    uint64_t v14 = 0;
    goto LABEL_16;
  }
  uint64_t v12 = +[NSString stringWithFormat:@" (%@)", a3];
  if (!a5) {
    goto LABEL_12;
  }
LABEL_4:
  if ((unint64_t)(4 * a4 + 4) >= 0x3E8) {
    size_t v13 = 1000;
  }
  else {
    size_t v13 = 4 * a4 + 4;
  }
  if (a2[1])
  {
    bzero(__b, 0x3E9uLL);
    if (v13) {
      memset(__b, 32, v13);
    }
    __b[v13] = 0;
    uint64_t v14 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@%@", +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", __b, 4), +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Type: %@, mode:0%ho, mod time: %@", [a2[1] fileType], (unsigned __int16)objc_msgSend(a2[1], "filePosixPermissions"), objc_msgSend(a2[1], "fileModificationDate")));
  }
  else
  {
    bzero(__b, 0x3E9uLL);
    if (v13) {
      memset(__b, 32, v13);
    }
    __b[v13] = 0;
    uint64_t v14 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@(No file attribute information.)", +[NSString stringWithCString:__b encoding:4]);
  }
LABEL_16:
  if ([a2 isDirectory])
  {
    bzero(__b, 0x3E9uLL);
    if ((unint64_t)(4 * a4) >= 0x3E8) {
      size_t v15 = 1000;
    }
    else {
      size_t v15 = 4 * a4;
    }
    if (v15) {
      memset(__b, 32, v15);
    }
    __b[v15] = 0;
    [a1 appendFormat:@"%@Directory %@%@ <%p>: %@ children.  %@ icon.\n", +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", __b, 4), v11, v12, a2, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%lu", objc_msgSend((id)objc_msgSend(a2, "fileWrappers"), "count")), @"No"];
    if (v14) {
      [a1 appendFormat:@"%@\n", v14];
    }
    uint64_t v16 = (void *)[a2 fileWrappers];
    uint64_t v17 = (void *)[v16 keyEnumerator];
    uint64_t result = [v17 nextObject];
    if (result)
    {
      uint64_t v19 = result;
      do
      {
        _NSDescribeFileContentsInstance(a1, [v16 objectForKey:v19], v19, a4 + 1, a5);
        uint64_t result = [v17 nextObject];
        uint64_t v19 = result;
      }
      while (result);
    }
    return result;
  }
  if ([a2 isSymbolicLink])
  {
    bzero(__b, 0x3E9uLL);
    if ((unint64_t)(4 * a4) >= 0x3E8) {
      size_t v20 = 1000;
    }
    else {
      size_t v20 = 4 * a4;
    }
    if (v20) {
      memset(__b, 32, v20);
    }
    __b[v20] = 0;
    uint64_t result = [a1 appendFormat:@"%@Symbolic link %@%@ <%p>: destination '%@'.  %@ icon.\n", +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", __b, 4), v11, v12, a2, objc_msgSend(a2, "symbolicLinkDestinationURL"), @"No"];
LABEL_42:
    if (v14) {
      return [a1 appendFormat:@"%@", v14, v23, v24, v25];
    }
    return result;
  }
  int v21 = [a2 isRegularFile];
  if ((unint64_t)(4 * a4) >= 0x3E8) {
    size_t v22 = 1000;
  }
  else {
    size_t v22 = 4 * a4;
  }
  if (v21)
  {
    bzero(__b, 0x3E9uLL);
    if (v22) {
      memset(__b, 32, v22);
    }
    __b[v22] = 0;
    uint64_t result = [a1 appendFormat:@"%@Regular file %@%@ <%p>: length %lu.  %@ icon.\n", +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", __b, 4), v11, v12, a2, objc_msgSend((id)objc_msgSend(a2, "regularFileContents"), "length"), @"No"];
    goto LABEL_42;
  }
  bzero(__b, 0x3E9uLL);
  if (v22) {
    memset(__b, 32, v22);
  }
  __b[v22] = 0;
  return [a1 appendFormat:@"%@!!! %@%@ <%p> is not a directory, symlink, or file! So what the hell is it?\n", +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", __b, 4), v11, v12, a2];
}

uint64_t _NXCurrentWorkingDir()
{
  uint64_t v0 = +[NSFileManager defaultManager];

  return (uint64_t)[(NSFileManager *)v0 currentDirectoryPath];
}

uint64_t _NXRenameFile(uint64_t a1, uint64_t a2)
{
  return [+[NSFileManager defaultManager] moveItemAtPath:a1 toPath:a2 error:0]- 1;
}

uint64_t _NXAccessFile(uint64_t a1, uint64_t a2)
{
  id v4 = +[NSFileManager defaultManager];
  uint64_t v5 = v4;
  if (!a2)
  {
    unsigned int v6 = [(NSFileManager *)v4 fileExistsAtPath:a1];
    return v6 - 1;
  }
  if ((a2 & 4) == 0)
  {
    unsigned int v6 = 1;
    if ((a2 & 2) == 0) {
      goto LABEL_9;
    }
LABEL_7:
    if (v6) {
      unsigned int v6 = [(NSFileManager *)v5 isWritableFileAtPath:a1];
    }
    goto LABEL_9;
  }
  unsigned int v6 = [(NSFileManager *)v4 isReadableFileAtPath:a1];
  if ((a2 & 2) != 0) {
    goto LABEL_7;
  }
LABEL_9:
  if ((a2 & 1) != 0 && v6) {
    unsigned int v6 = [(NSFileManager *)v5 isExecutableFileAtPath:a1];
  }
  return v6 - 1;
}

uint64_t _NXChmodFile(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)[objc_allocWithZone((Class)NSNumber) initWithInt:a2];
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9E8]), "initWithObjectsAndKeys:", v3, @"NSFilePosixPermissions", 0);
  LODWORD(a1) = [+[NSFileManager defaultManager] changeFileAttributes:v4 atPath:a1];

  return a1 - 1;
}

uint64_t _NXStatFile(uint64_t a1, stat *a2)
{
  return stat([+[NSFileManager defaultManager] fileSystemRepresentationWithPath:a1], a2);
}

uint64_t _NXMakeDirs(void *a1, uint64_t a2)
{
  if (([a1 isEqualToString:&stru_1ECA5C228] & 1) != 0
    || [+[NSFileManager defaultManager] fileExistsAtPath:a1])
  {
    return 0;
  }
  if (_NXMakeDirs([a1 stringByDeletingLastPathComponent], a2)) {
    return -1;
  }
  uint64_t v5 = (void *)[objc_allocWithZone((Class)NSNumber) initWithInt:a2];
  unsigned int v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9E8]), "initWithObjectsAndKeys:", v5, @"NSFilePosixPermissions", 0);
  BOOL v7 = [+[NSFileManager defaultManager] createDirectoryAtPath:a1 attributes:v6];

  return v7 - 1;
}

uint64_t _NXRemoveDocument(uint64_t a1)
{
  if ([+[NSFileManager defaultManager] fileExistsAtPath:a1])
  {
    return [+[NSFileManager defaultManager] removeItemAtPath:a1 error:0]- 1;
  }
  else
  {
    return 0;
  }
}

NSDocInfo *_NSDocInfoFromFileAttributes(NSDocInfo *result, int a2)
{
  if (result)
  {
    uint64_t v3 = result;
    id v4 = objc_alloc_init(NSDocInfo);
    uint64_t v5 = (void *)[(NSDocInfo *)v3 fileModificationDate];
    uint64_t v6 = 0;
    if (a2 && v5)
    {
      [v5 timeIntervalSince1970];
      uint64_t v6 = (uint64_t)v7;
    }
    v4->time = v6;
    v4->mode = [(NSDocInfo *)v3 filePosixPermissions];
    uint64_t v8 = (void *)[(NSDocInfo *)v3 fileType];
    if (v8)
    {
      long long v9 = v8;
      *(&v4->mode + 1) = *(&v4->mode + 1) & 0xFFFE | [v8 isEqualToString:@"NSFileTypeDirectory"];
      if ([v9 isEqualToString:@"NSFileTypeSymbolicLink"]) {
        __int16 v10 = 4;
      }
      else {
        __int16 v10 = 0;
      }
      *(&v4->mode + 1) = *(&v4->mode + 1) & 0xFFF9 | v10;
    }
    return v4;
  }
  return result;
}

uint64_t unallocate(mach_vm_address_t address, mach_vm_size_t size)
{
  uint64_t result = mach_vm_deallocate(*MEMORY[0x1E4F14960], address, size);
  if (result) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSOtherSerializationException" reason:@"can't deallocate" userInfo:0]);
  }
  return result;
}

vm_address_t extendStreamFor(vm_address_t result, uint64_t a2)
{
  mach_vm_size_t v2 = *(void *)(result + 24);
  mach_vm_size_t v3 = *(void *)(result + 16) + a2;
  if (v3 <= v2) {
    return result;
  }
  vm_address_t v4 = result;
  if (v2) {
    uint64_t v5 = *(void *)(result + 24);
  }
  else {
    uint64_t v5 = 4;
  }
  do
  {
    vm_size_t v6 = v5;
    v5 *= 2;
  }
  while (v6 < v3);
  double v7 = (void *)MEMORY[0x1E4F14B00];
  uint64_t v8 = v6 + *MEMORY[0x1E4F14B00] - 1;
  if (((unint64_t)v8 & -*MEMORY[0x1E4F14B00]) <= v6) {
    vm_size_t v9 = v6;
  }
  else {
    vm_size_t v9 = v8 & -*MEMORY[0x1E4F14B00];
  }
  mach_vm_address_t v10 = *(void *)(result + 8);
  uint64_t result = allocate(v9);
  uint64_t v11 = (void *)result;
  if (v10)
  {
    uint64_t v12 = (const void *)v10;
    size_t v13 = v2;
    if (v2 >= 0x80000)
    {
      size_t v13 = v2;
      uint64_t v12 = (const void *)v10;
      if (((*v7 - 1) & (result | v10)) != 0) {
        goto LABEL_15;
      }
      malloc_default_zone();
      int v14 = malloc_zone_claimed_address();
      uint64_t result = (vm_address_t)v11;
      size_t v13 = v2;
      uint64_t v12 = (const void *)v10;
      if (v14) {
        goto LABEL_15;
      }
      NSUInteger v15 = v2 & -*v7;
      NSCopyMemoryPages((const void *)v10, v11, v15);
      uint64_t v12 = (const void *)(v10 + v15);
      uint64_t result = (vm_address_t)v11 + v15;
      size_t v13 = v2 - v15;
    }
    if (!v13)
    {
LABEL_16:
      uint64_t result = unallocate(v10, v2);
      goto LABEL_17;
    }
LABEL_15:
    memmove((void *)result, v12, v13);
    goto LABEL_16;
  }
LABEL_17:
  *(void *)(v4 + _Block_object_dispose(&STACK[0x260], 8) = v11;
  if (!v11) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSOtherSerializationException" reason:@"can't allocate" userInfo:0]);
  }
  *(void *)(v4 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v9;
  return result;
}

vm_address_t allocate(vm_size_t size)
{
  v2[1] = *MEMORY[0x1E4F143B8];
  v2[0] = 0;
  if (vm_allocate(*MEMORY[0x1E4F14960], v2, size, 1)) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"NSOtherSerializationException" reason:@"can't allocate" userInfo:0]);
  }
  return v2[0];
}

void sub_1820832FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 104), 8);
  _Unwind_Resume(a1);
}

void sub_182083B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2 == 1)
  {
    id v11 = objc_begin_catch(exception_object);
    objc_opt_class();
    [v11 name];
    [v11 reason];
    NSLog((NSString *)@"*** %@: Deserialization error %@: %@\n");
    [v11 raise];
    objc_end_catch();
    JUMPOUT(0x182083AC0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t newLeafDocument(uint64_t a1, char a2, uint64_t a3)
{
  if ((a2 & 4) != 0)
  {
    double v7 = [+[NSFileManager defaultManager] pathContentOfSymbolicLinkAtPath:a1];
    uint64_t v8 = +[NSData allocWithZone:a3];
    uint64_t v9 = [(NSString *)v7 dataUsingEncoding:4 allowLossyConversion:1];
    return (uint64_t)[(NSPageData *)v8 initWithData:v9];
  }
  else
  {
    uint64_t v5 = +[NSData allocWithZone:a3];
    return (uint64_t)[(NSPageData *)v5 initWithContentsOfMappedFile:a1];
  }
}

void *convertInvocationToMethodSignature(void *a1, void *a2, int a3)
{
  sizep[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (void *)[a1 methodSignature];
  int v6 = *(__int16 *)([v5 _argInfo:0] + 34);
  double v7 = (void *)[MEMORY[0x1E4F1CA18] invocationWithMethodSignature:a2];
  objc_msgSend(v7, "setTarget:", objc_msgSend(a1, "target"));
  if (v6 < 0)
  {
    unint64_t v8 = 1;
  }
  else
  {
    objc_msgSend(v7, "setSelector:", objc_msgSend(a1, "selector"));
    unint64_t v8 = 2;
  }
  if (a3)
  {
    uint64_t v9 = (const char *)[v5 methodReturnType];
    mach_vm_address_t v10 = (char *)[a2 methodReturnType];
    if ((*v10 | 0x20) != 0x76) {
      performInvocationTypeConversion(a1, v7, v9, v10, -1);
    }
  }
  uint64_t v24 = a1;
  unint64_t v11 = [v5 numberOfArguments];
  if (v8 < v11)
  {
    unint64_t v12 = v11;
    while (1)
    {
      size_t v13 = (const char *)[v5 getArgumentTypeAtIndex:v8];
      int v14 = (char *)[a2 getArgumentTypeAtIndex:v8];
      size_t v15 = strspn(v14, "norNOR");
      int v16 = v14[v15];
      if (v16 == 94)
      {
        size_t v17 = v15;
        if (memchr(v14, 78, v15))
        {
          BOOL v18 = 1;
          BOOL v19 = 1;
        }
        else
        {
          BOOL v19 = memchr(v14, 110, v17) != 0;
          BOOL v18 = memchr(v14, 111, v17) != 0;
        }
      }
      else
      {
        BOOL v18 = 0;
        BOOL v19 = 0;
      }
      int v20 = !v19;
      if (a3) {
        break;
      }
      if ((v18 & v20 & 1) == 0) {
        goto LABEL_20;
      }
      size_t v21 = strspn(v14, "^norNOR");
      sizep[0] = 0;
      NSGetSizeAndAlignment(&v14[v21], sizep, 0);
      size_t v22 = (void *)[MEMORY[0x1E4F1CA58] dataWithLength:sizep[0] + 32];
      uint64_t v26 = [v22 mutableBytes];
      [v7 setArgument:&v26 atIndex:v8];
      [v7 _addAttachedObject:v22];
LABEL_21:
      if (v12 == ++v8) {
        return v7;
      }
    }
    if (v16 != 94 || ((v20 | v18) & 1) == 0) {
      goto LABEL_21;
    }
LABEL_20:
    performInvocationTypeConversion(v24, v7, v13, v14, v8);
    goto LABEL_21;
  }
  return v7;
}

void performInvocationTypeConversion(void *a1, void *a2, const char *a3, char *__s, uint64_t a5)
{
  v24[1] = *MEMORY[0x1E4F143B8];
  if (__s[strspn(__s, "norNOR")] == 94)
  {
    v24[0] = 0;
    [a1 getArgument:v24 atIndex:a5];
    if (v24[0])
    {
      mach_vm_address_t v10 = &a3[strspn(a3, "^norNOR")];
      unint64_t v11 = &__s[strspn(__s, "^norNOR")];
      NSUInteger sizep = 0;
      NSGetSizeAndAlignment(v10, &sizep, 0);
      NSUInteger v22 = 0;
      NSGetSizeAndAlignment(v11, &v22, 0);
      NSUInteger v12 = sizep;
      if (sizep <= v22) {
        NSUInteger v12 = v22;
      }
      size_t v13 = (void *)[MEMORY[0x1E4F1CA58] dataWithLength:v12 + 32];
      int v14 = (void *)[v13 mutableBytes];
      memmove(v14, (const void *)v24[0], sizep);
      convertDataByTypeEncodings((uint64_t)v10, (uint64_t)v11, (double *)v24[0], v14);
      size_t v21 = v14;
      [a2 setArgument:&v21 atIndex:a5];
      [a2 _addAttachedObject:v13];
    }
    else
    {
      [a2 setArgument:v24 atIndex:a5];
    }
  }
  else
  {
    v24[0] = 0;
    NSGetSizeAndAlignment(a3, v24, 0);
    NSUInteger sizep = 0;
    NSGetSizeAndAlignment(__s, &sizep, 0);
    NSUInteger v15 = v24[0];
    if (v24[0] <= sizep) {
      NSUInteger v15 = sizep;
    }
    size_t v16 = v15 + 32;
    size_t v17 = malloc_type_calloc(v15 + 32, 1uLL, 0x3D29B037uLL);
    BOOL v18 = malloc_type_calloc(v16, 1uLL, 0xF6327142uLL);
    if (v17) {
      BOOL v19 = v18 == 0;
    }
    else {
      BOOL v19 = 1;
    }
    if (v19) {
      objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C4A0] reason:@"Unable to allocate bytes" userInfo:0]);
    }
    int v20 = v18;
    [a1 getArgument:v17 atIndex:a5];
    memmove(v20, v17, v16);
    convertDataByTypeEncodings((uint64_t)a3, (uint64_t)__s, (double *)v17, v20);
    [a2 setArgument:v20 atIndex:a5];
    free(v17);
    free(v20);
  }
}

void convertDataByTypeEncodings(uint64_t a1, uint64_t a2, double *a3, void *a4)
{
  uint64_t v7 = 0;
  sizep[1] = *MEMORY[0x1E4F143B8];
  while (2)
  {
    int v8 = *(char *)(a1 + v7);
    switch(*(unsigned char *)(a1 + v7))
    {
      case 'I':
      case 'L':
      case 'i':
      case 'l':
        if (!memchr("lLqQ", *(char *)(a2 + v7), 5uLL)) {
          goto LABEL_37;
        }
        size_t v21 = memchr("ilq", v8, 4uLL);
        *(void *)&double v22 = *(int *)a3;
        if (!v21) {
          *(void *)&double v22 = *(unsigned int *)a3;
        }
        goto LABEL_34;
      case 'J':
      case 'K':
      case 'M':
      case 'P':
      case 'S':
      case 'T':
      case 'U':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
      case '[':
      case '\\':
      case ']':
      case '_':
      case 'a':
      case 'b':
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'm':
      case 'p':
        return;
      case 'N':
      case 'O':
      case 'R':
      case 'V':
      case 'n':
      case 'o':
      case 'r':
        goto LABEL_3;
      case 'Q':
      case 'q':
        if (!memchr("iIlL", *(char *)(a2 + v7), 5uLL)) {
          goto LABEL_33;
        }
        *a4 = 0;
        double v23 = *a3;
        if (v8 == 113)
        {
          unsigned int v24 = 0x7FFFFFFF;
          if (*(uint64_t *)&v23 > 0x7FFFFFFF)
          {
LABEL_24:
            *(_DWORD *)a4 = v24;
            NSLog((NSString *)@"Warning - conversion from 64 bit to 32 bit integral value requested within NSPortCoder, but the 64 bit value %lld cannot be represented by a 32 bit value", *(void *)&v23);
            return;
          }
          if (*(uint64_t *)&v23 < (uint64_t)0xFFFFFFFF80000000)
          {
            unsigned int v24 = 0x80000000;
            goto LABEL_24;
          }
        }
        else if (HIDWORD(*(void *)&v23))
        {
          *(_DWORD *)a4 = -1;
          NSLog((NSString *)@"Warning - conversion from 64 bit to 32 bit integral value requested within NSPortCoder, but the 64 bit value %llu cannot be represented by a 32 bit value", *(void *)&v23);
          return;
        }
        *(_DWORD *)a4 = LODWORD(v23);
        return;
      case '^':
        if (strcmp((const char *)(a1 + v7), (const char *)(a2 + v7))) {
          NSLog((NSString *)@"Pointer conversions not handled yet");
        }
        return;
      case 'c':
        if (*(unsigned char *)(a2 + v7) == 66) {
          *(unsigned char *)a4 = *(unsigned char *)a3 != 0;
        }
        return;
      case 'd':
        if (*(unsigned char *)(a2 + v7) == 102)
        {
          double v25 = *a3;
          float v26 = *a3;
          if (fabs(*a3) == INFINITY)
          {
            *a4 = 0;
            *(float *)a4 = v26;
            return;
          }
          if (v25 >= -3.40282347e38)
          {
            if (v25 <= 3.40282347e38)
            {
              if (v25 <= 0.0 || v26 != 0.0)
              {
                *a4 = 0;
                *(float *)a4 = v26;
                if (v25 >= 0.0 || v26 != 0.0) {
                  return;
                }
LABEL_46:
                NSLog((NSString *)@"Warning - conversion from double to float value requested within NSPortCoder, but the double value %g is outside the range of a float.", *(void *)&v25);
                return;
              }
LABEL_45:
              *a4 = 0;
              *(float *)a4 = v26;
              goto LABEL_46;
            }
            *(float *)&int v27 = 3.4028e38;
          }
          else
          {
            *(float *)&int v27 = -3.4028e38;
          }
          float v26 = *(float *)&v27;
          goto LABEL_45;
        }
LABEL_33:
        double v22 = *a3;
LABEL_34:
        *(double *)a4 = v22;
        return;
      case 'f':
        if (*(unsigned char *)(a2 + v7) == 100) {
          *(double *)a4 = *(float *)a3;
        }
        else {
LABEL_37:
        }
          *(_DWORD *)a4 = *(_DWORD *)a3;
        return;
      default:
        if (v8 != 43)
        {
          if (v8 == 123)
          {
            uint64_t v9 = (char *)(a2 + v7);
            mach_vm_address_t v10 = strchr((char *)(a1 + v7), 61);
            unint64_t v11 = strchr(v9, 61);
            if (!v10 || !v11)
            {
              uint64_t v28 = +[NSString stringWithFormat:@"Unable to parse structs within encoding: %s", a1];
              objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:v28 userInfo:0]);
            }
            NSUInteger v12 = 0;
            NSUInteger v13 = 0;
            int v14 = v10 + 1;
            NSUInteger v15 = v11 + 1;
            while (*v14 && *v14 != 125)
            {
              NSUInteger alignp = 0;
              sizep[0] = 0;
              NSUInteger v29 = 0;
              NSUInteger v30 = 0;
              size_t v16 = NSGetSizeAndAlignment(v14, sizep, &alignp);
              size_t v17 = NSGetSizeAndAlignment(v15, &v30, &v29);
              NSUInteger v18 = (alignp + ((unint64_t)a3 + v12) / alignp * alignp - ((void)a3 + v12)) % alignp + v12;
              NSUInteger v19 = (v29 + ((unint64_t)a4 + v13) / v29 * v29 - ((void)a4 + v13)) % v29 + v13;
              if (v30 <= sizep[0]) {
                size_t v20 = sizep[0];
              }
              else {
                size_t v20 = v30;
              }
              memmove((char *)a4 + v19, (char *)a3 + v18, v20);
              convertDataByTypeEncodings(v14, v15, (char *)a3 + v18, (char *)a4 + v19);
              NSUInteger v12 = sizep[0] + v18;
              NSUInteger v13 = v30 + v19;
              NSUInteger v15 = v17;
              int v14 = v16;
            }
          }
          return;
        }
LABEL_3:
        v7 += 2;
        continue;
    }
  }
}

uint64_t encodingsAreCompatible(const char *a1, const char *a2)
{
  mach_vm_size_t v2 = a2;
  mach_vm_size_t v3 = a1;
  if (!strcmp(a1, a2)) {
    return 1;
  }
  size_t v4 = strlen(v3);
  size_t v5 = strlen(v2);
  uint64_t result = 1;
  if (v4 && v5)
  {
    uint64_t v7 = 0;
    size_t v8 = 0;
    NSUInteger v12 = v2;
    NSUInteger v13 = v3;
    while (1)
    {
      int v9 = v3[v8];
      int v10 = v2[v7];
      if (v9 == 123 && v10 == 123)
      {
        v8 += strcspn(&v3[v8], "=");
        v7 += strcspn(&v2[v7], "=");
        if ((v8 == v4) == (v7 != v5)) {
          return 0;
        }
      }
      else
      {
        int v11 = (char)v10;
        if (v9 == (char)v10) {
          goto LABEL_20;
        }
        if (memchr("ilq", v9, 4uLL) && memchr("ilq", v11, 4uLL)) {
          goto LABEL_17;
        }
        if (memchr("ILQ", v9, 4uLL) && memchr("ILQ", v11, 4uLL) || memchr("fd", v9, 3uLL) && memchr("fd", v11, 3uLL))
        {
          mach_vm_size_t v2 = v12;
LABEL_17:
          mach_vm_size_t v3 = v13;
          goto LABEL_20;
        }
        uint64_t result = (uint64_t)memchr("Bc", v9, 3uLL);
        if (!result) {
          return result;
        }
        uint64_t result = (uint64_t)memchr("Bc", v11, 3uLL);
        mach_vm_size_t v2 = v12;
        mach_vm_size_t v3 = v13;
        if (!result) {
          return result;
        }
      }
LABEL_20:
      ++v8;
      uint64_t result = 1;
      if (v8 < v4 && ++v7 < v5) {
        continue;
      }
      return result;
    }
  }
  return result;
}

uint64_t regexMatchCallback(unsigned char *a1)
{
  if (a1)
  {
    (*(void (**)(void))(*(void *)a1 + 16))();
    a1[16] = 0;
  }
  return 1;
}

uint64_t regexFindProgressCallback(uint64_t *a1, unint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  char v9 = 0;
  if (!a1) {
    return 1;
  }
  unint64_t v3 = a1[1];
  if (v3 == 0x7FFFFFFFFFFFFFFFLL || v3 >= a2)
  {
    uint64_t v5 = *a1;
    if (*a1)
    {
      (*(void (**)(uint64_t, void, uint64_t, char *))(v5 + 16))(v5, 0, 1, &v9);
      char v6 = v9;
      *((unsigned char *)a1 + 16) = v9;
      return (v6 ^ 1);
    }
    return 1;
  }
  char v7 = 0;
  *((unsigned char *)a1 + 17) = 1;
  return v7;
}

CFIndex addAddressResultsToComponents(uint64_t a1, void *a2)
{
  CFIndex result = off_1EB1EDCE0();
  CFArrayRef v4 = (const __CFArray *)result;
  if (qword_1EB1EDD18)
  {
    if (!result) {
      return result;
    }
  }
  else
  {
    CFIndex result = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C9E8]), "initWithObjectsAndKeys:", @"Contact", @"Name", @"ContactName", @"Name", @"AddressBookContactName", @"JobTitle", @"JobTitle", @"Organization", @"CompanyName", @"Street", @"Street", @"City", @"City", @"State", @"State", @"ZIP", @"ZipCode",
               @"Country",
               @"Country",
               @"Airline",
               @"AirlineName",
               @"Flight",
               @"FlightNumber",
               0);
    qword_1EB1EDD18 = result;
    if (!v4) {
      return result;
    }
  }
  CFIndex result = CFArrayGetCount(v4);
  if (result >= 1)
  {
    CFIndex v5 = result;
    for (CFIndex i = 0; i != v5; ++i)
    {
      ValueAtIndedouble x = CFArrayGetValueAtIndex(v4, i);
      uint64_t v8 = [(id)qword_1EB1EDD18 objectForKey:off_1EB1EDCD0()];
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = off_1EB1EDCE8(ValueAtIndex);
        if (v10)
        {
          int v11 = (const void *)v10;
          CFTypeID TypeID = CFStringGetTypeID();
          if (TypeID == CFGetTypeID(v11)) {
            [a2 setObject:v11 forKey:v9];
          }
        }
      }
      CFIndex result = addAddressResultsToComponents(ValueAtIndex, a2);
    }
  }
  return result;
}

void NSFileCoordinationDestroyTSD(uint64_t a1)
{
  if (a1)
  {
    mach_vm_size_t v2 = *(const void **)(a1 + 32);
    if (v2) {
      CFRelease(v2);
    }

    free((void *)a1);
  }
}

void sub_182089A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_18208A844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_18208E6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18208E818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL _NSFCShouldLog(int a1)
{
  uint64_t v1 = atomic_load(&_NSFCSubarbitrationCount);
  if (v1 < 1) {
    return 1;
  }
  unsigned __int8 v3 = atomic_load(_NSFCDisableLogSuppression);
  if (v3) {
    return 1;
  }
  uint64_t v4 = 0xFFFFFFFFLL;
  if (a1 == 2) {
    uint64_t v4 = 100;
  }
  if (a1 == 1) {
    uint64_t v4 = 200;
  }
  int64_t v5 = atomic_load(&_NSFCSubarbitratedClaimCount);
  return v5 < v4;
}

uint64_t _NSGetFSIDAndFileID(void *a1, void *a2, void *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t result = [a1 fileSystemRepresentation];
  if (result)
  {
    *(void *)&v7[16] = 0;
    *(_OWORD *)char v7 = __const__NSGetFSIDAndFileID_request;
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    if (!getattrlist((const char *)result, v7, v8, 0x28uLL, 1u)
      && *(_OWORD *)&v7[4] == *(_OWORD *)((char *)v8 + 4)
      && *(_DWORD *)&v7[20] == DWORD1(v8[1]))
    {
      uint64_t v6 = v9;
      *a2 = *((void *)&v8[1] + 1);
      *a3 = v6;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_182090F4C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_1820912C0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 72), 8);
  _Unwind_Resume(a1);
}

void sub_1820923CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 88), 8);
  _Unwind_Resume(a1);
}

uint64_t initUTTypeCopyDescription_0(uint64_t a1)
{
  mach_vm_size_t v2 = (void *)MobileCoreServicesLibrary_frameworkLibrary_4;
  if (!MobileCoreServicesLibrary_frameworkLibrary_4)
  {
    mach_vm_size_t v2 = dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 2);
    MobileCoreServicesLibrary_frameworkLibrary_4 = (uint64_t)v2;
    if (!v2) {
      __assert_rtn("MobileCoreServicesLibrary", "NSItemProviderRepresentation.m", 19, "frameworkLibrary");
    }
  }
  unsigned __int8 v3 = (uint64_t (*)())dlsym(v2, "UTTypeCopyDescription");
  softLinkUTTypeCopyDescription_0[0] = v3;
  if (!v3) {
    __assert_rtn("initUTTypeCopyDescription", "NSItemProviderRepresentation.m", 20, "softLinkUTTypeCopyDescription");
  }

  return ((uint64_t (*)(uint64_t))v3)(a1);
}

uint64_t NSByteCountFormatterAssertValidMeasurement(void *a1)
{
  [a1 unit];
  uint64_t result = objc_opt_isKindOfClass();
  if ((result & 1) == 0)
  {
    [a1 unit];
    unsigned __int8 v3 = (void *)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8], +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"NSByteCountFormatter only supports measurements of dimension NSUnitInformationStorage -- got invalid unit '%@'", objc_opt_class()), 0 reason userInfo];
    objc_exception_throw(v3);
  }
  return result;
}

void sub_18209559C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1820961AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_182098504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__181(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__182(uint64_t a1)
{
}

void *pairsForURLs(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mach_vm_size_t v2 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(a1, "count"));
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v3 = [a1 countByEnumeratingWithState:&v10 objects:v9 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(a1);
        }
        char v7 = *(NSURLPromisePair **)(*((void *)&v10 + 1) + 8 * v6);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          char v7 = +[NSURLPromisePair pairWithURL:v7];
        }
        [v2 addObject:v7];
        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = [a1 countByEnumeratingWithState:&v10 objects:v9 count:16];
    }
    while (v4);
  }
  return v2;
}

void sub_18209CDCC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 56), 8);
  _Unwind_Resume(a1);
}

void sub_18209CFE0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 104), 8);
  _Unwind_Resume(a1);
}

void sub_18209E000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18209E4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

void sub_18209F268(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_1820A06CC(_Unwind_Exception *a1)
{
}

uint64_t _NSFCGetFileProviderUIDFOrURL(void *a1, uid_t *a2, uint64_t *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (qword_1EB1EC158 != -1) {
    dispatch_once(&qword_1EB1EC158, &__block_literal_global_873);
  }
  if (off_1EB1EC150 && !off_1EB1EC150(a1, a2, a3))
  {
    uint64_t v6 = _NSFCLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *a3;
      *(_DWORD *)fileSec = 138412290;
      *(void *)&fileSec[4] = v8;
      _os_log_error_impl(&dword_181795000, v6, OS_LOG_TYPE_ERROR, "Failure to acquire UID from fault xattrs: %@", fileSec, 0xCu);
    }
  }
  if (*a2) {
    return 1;
  }
  *(void *)fileSec = 0;
  if ([a1 getResourceValue:fileSec forKey:*MEMORY[0x1E4F1C5E8] error:a3])
  {
    if (CFFileSecurityGetOwner(*(CFFileSecurityRef *)fileSec, a2)) {
      return 1;
    }
    *a3 = (uint64_t)+[NSError errorWithDomain:@"NSCocoaErrorDomain" code:256 userInfo:0];
  }
  return 0;
}

void sub_1820A3C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1820A3EB0(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v4 = objc_begin_catch(exception_object);
    uint64_t v5 = _NSOSLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = [v4 callStackSymbols];
      uint64_t v7 = v3 - 128;
      *(_DWORD *)(v3 - 12_Block_object_dispose(&STACK[0x300], 8) = 138412546;
      *(void *)(v7 + 4) = v4;
      *(_WORD *)(v3 - 116) = 2112;
      *(void *)(v7 + 14) = v6;
      _os_log_error_impl(&dword_181795000, v5, OS_LOG_TYPE_ERROR, "An exception occurred while attempting to gather debug information: %@\n%@", (uint8_t *)(v3 - 128), 0x16u);
    }
    (*(void (**)(uint64_t, void))(v2 + 16))(v2, 0);
    objc_end_catch();
    JUMPOUT(0x1820A3E74);
  }
  _Unwind_Resume(exception_object);
}

void sub_1820A4AD4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int buf, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    id v13 = objc_begin_catch(a1);
    uint64_t v14 = _NSOSLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = [v13 callStackSymbols];
      buf = 138412802;
      WORD2(a12) = 2112;
      *(void *)((char *)&a12 + 6) = v13;
      HIWORD(a12) = 2112;
      a13 = v15;
      _os_log_error_impl(&dword_181795000, v14, OS_LOG_TYPE_ERROR, "Failed to write filecoordinationd dump file to %@. Received exception: %@\n%@", (uint8_t *)&buf, 0x20u);
    }
    objc_end_catch();
    JUMPOUT(0x1820A4A40);
  }
  _Unwind_Resume(a1);
}

void sub_1820A4C20()
{
}

void sub_1820A6388(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

NSError *_secureCodingScreenedError(NSError *a1)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (objc_class *)objc_opt_class();
  uint64_t v3 = (objc_class *)objc_opt_class();
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 3221225472;
  uint64_t v37 = ___secureCodingScreenedError_block_invoke;
  uint64_t v38 = &unk_1E51FD9F0;
  Class v39 = v2;
  Class v40 = v3;
  uint64_t v30 = 0;
  uint64_t v31 = &v30;
  uint64_t v32 = 0x3052000000;
  unint64_t v33 = __Block_byref_object_copy__27;
  unint64_t v34 = __Block_byref_object_dispose__27;
  uint64_t v35 = 0;
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  int v27 = ___secureCodingScreenedError_block_invoke_2;
  uint64_t v28 = &unk_1E51FDA18;
  NSUInteger v29 = &v30;
  InstanceMethod = class_getInstanceMethod(v2, sel_localizedDescription);
  if (InstanceMethod == class_getInstanceMethod(v40, sel_localizedDescription)) {
    uint64_t v5 = [(NSDictionary *)[(NSError *)a1 userInfo] objectForKey:@"NSLocalizedDescription"];
  }
  else {
    uint64_t v5 = [(NSError *)a1 localizedDescription];
  }
  uint64_t v6 = v5;
  if (v5) {
    v27((uint64_t)v26, @"NSLocalizedDescription", v5);
  }
  if (((unsigned int (*)(void *, char *, uint64_t))v37)(v36, sel_localizedFailureReason, v6)) {
    uint64_t v7 = [(NSError *)a1 localizedFailureReason];
  }
  else {
    uint64_t v7 = [(NSDictionary *)[(NSError *)a1 userInfo] objectForKey:@"NSLocalizedFailureReason"];
  }
  uint64_t v8 = v7;
  if (v7) {
    v27((uint64_t)v26, @"NSLocalizedFailureReason", v7);
  }
  if (![(NSError *)a1 localizedRecoveryOptions]
    && ![(NSError *)a1 recoveryAttempter])
  {
    if (((unsigned int (*)(void *, char *))v37)(v36, sel_localizedRecoverySuggestion))
    {
      uint64_t v9 = [(NSError *)a1 localizedRecoverySuggestion];
      if (v9) {
        v27((uint64_t)v26, @"NSLocalizedRecoverySuggestion", v9);
      }
    }
  }
  if ([(NSDictionary *)[(NSError *)a1 userInfo] objectForKey:@"NSUnderlyingError"])
  {
    uint64_t v10 = _secureCodingScreenedError();
    if (v10) {
      v27((uint64_t)v26, @"NSUnderlyingError", v10);
    }
  }
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  double v22 = ___secureCodingScreenedError_block_invoke_3;
  double v23 = &unk_1E51FDA40;
  unsigned int v24 = a1;
  double v25 = v26;
  uint64_t v11 = [(NSDictionary *)[(NSError *)a1 userInfo] objectForKey:@"NSHelpAnchor"];
  if (v11) {
    ((void (*)(void *, __CFString *, uint64_t))v25[2])(v25, @"NSHelpAnchor", v11);
  }
  ((void (*)(void *, __CFString *, uint64_t))v22)(v21, @"NSURL", v11);
  v22((uint64_t)v21, @"NSFilePath");
  size_t v17 = ___secureCodingScreenedError_block_invoke_4;
  NSUInteger v18 = &unk_1E51FDA40;
  NSUInteger v19 = a1;
  size_t v20 = v26;
  if ([(NSDictionary *)[(NSError *)a1 userInfo] objectForKey:@"NSRecoveryAttempter"])
  {
    ((void (*)(void *, __CFString *, void))v20[2])(v20, @"NSRecoveryAttempter", 0);
  }
  v17((uint64_t)&v16, @"NSLocalizedRecoveryOptions");
  long long v12 = (void *)v31[5];
  if (v12 && (objc_msgSend(v12, "isEqualToDictionary:", -[NSError userInfo](a1, "userInfo")) & 1) == 0)
  {
    uint64_t v13 = [(NSError *)a1 domain];
    uint64_t v14 = [(NSError *)a1 code];
    a1 = +[NSError errorWithDomain:v13 code:v14 userInfo:v31[5]];
  }

  _Block_object_dispose(&v30, 8);
  return a1;
}

void sub_1820A7988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_1820A89EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

NSUUID *_uniqueFileProviderID(void *a1)
{
  AssociatedObject = (NSUUID *)objc_getAssociatedObject(a1, "_fileProviderID");
  if (!AssociatedObject)
  {
    AssociatedObject = +[NSUUID UUID];
    objc_setAssociatedObject(a1, "_fileProviderID", AssociatedObject, (void *)0x301);
  }
  return AssociatedObject;
}

void sub_1820A9134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1820AF9E8(_Unwind_Exception *a1)
{
}

void sub_1820B0168(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 232), 8);
  _Unwind_Resume(a1);
}

BOOL ___secureCodingScreenedError_block_invoke(uint64_t a1, const char *a2)
{
  Method InstanceMethod = class_getInstanceMethod(*(Class *)(a1 + 32), a2);
  return InstanceMethod != class_getInstanceMethod(*(Class *)(a1 + 40), a2);
}

uint64_t ___secureCodingScreenedError_block_invoke_2(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  if (*(void *)(*(void *)(*(void *)(result + 32) + 8) + 40))
  {
    if (!a3) {
      return result;
    }
  }
  else
  {
    uint64_t result = objc_opt_new();
    *(void *)(*(void *)(*(void *)(v5 + 32) + 8) + 40) = result;
    if (!a3) {
      return result;
    }
  }
  uint64_t v6 = *(void **)(*(void *)(*(void *)(v5 + 32) + 8) + 40);

  return [v6 setObject:a3 forKey:a2];
}

uint64_t ___secureCodingScreenedError_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t result = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "userInfo"), "objectForKey:", a2);
  if (result)
  {
    id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
    return v4();
  }
  return result;
}

uint64_t ___secureCodingScreenedError_block_invoke_4(uint64_t a1, uint64_t a2)
{
  uint64_t result = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "userInfo"), "objectForKey:", a2);
  if (result)
  {
    id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
    return v4();
  }
  return result;
}

void sub_1820B8128(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t ___nearestPresenterInterestedInSubitemPresenters_block_invoke(uint64_t result, uint64_t a2)
{
  if (*(void *)(a2 + 112) >> 31) {
    *(void *)(*(void *)(*(void *)(result + 32) + 8) + 40) = a2;
  }
  return result;
}

id ___messageToResponsesTable_block_invoke()
{
  void v3[5] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = objc_msgSend(MEMORY[0x1E4F1C9E8], "sharedKeySetForKeys:", objc_msgSend(&unk_1ECAB87F0, "allKeys"));
  uint64_t v1 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithSharedKeySet:v0];
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  int v3[2] = ___messageToResponsesTable_block_invoke_410;
  v3[3] = &unk_1E51F7840;
  v3[4] = v1;
  [&unk_1ECAB87F0 enumerateKeysAndObjectsUsingBlock:v3];
  id result = v1;
  _MergedGlobals_3_1 = (uint64_t)result;
  return result;
}

uint64_t ___messageToResponsesTable_block_invoke_410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setObject:a3 forKey:a2];
}

void sub_1820BE430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a71, 8);
  _Unwind_Resume(a1);
}

void sub_1820BF3B8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1820C0008(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1820C2B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_1820C43B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_1820C4CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__initializeFileProvider_block_invoke()
{
  uint64_t v0 = (const char *)objc_msgSend((id)objc_msgSend((id)pathToSystemFramework(@"FileProvider.framework"), "stringByAppendingString:", @"/FileProvider"), "fileSystemRepresentation");
  id result = dlopen(v0, 256);
  qword_1EB1EDE48 = (uint64_t)result;
  return result;
}

void __Block_byref_object_dispose__78(uint64_t a1)
{
}

uint64_t eventStreamCallback(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  void v7[7] = *MEMORY[0x1E4F143B8];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __eventStreamCallback_block_invoke;
  v7[3] = &unk_1E51FE520;
  v7[5] = a5;
  v7[6] = a6;
  void v7[4] = a2;
  return [a4 enumerateObjectsUsingBlock:v7];
}

void sub_1820C6A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__initializeFSEvents_block_invoke()
{
  id result = dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 256);
  if (result)
  {
    uint64_t v1 = result;
    off_1EB1EDEA8 = (uint64_t (*)(void, void, void, void, void, void, double))dlsym(result, "FSEventStreamCreate");
    off_1EB1EDEA0 = (uint64_t (*)(void))dlsym(v1, "FSEventStreamInvalidate");
    off_1EB1EDE90 = (uint64_t (*)(void))dlsym(v1, "FSEventStreamRelease");
    off_1EB1EDEB0 = (uint64_t (*)(void, void))dlsym(v1, "FSEventStreamSetDispatchQueue");
    off_1EB1EDEB8 = (uint64_t (*)(void))dlsym(v1, "FSEventStreamStart");
    id result = dlsym(v1, "FSEventStreamStop");
    off_1EB1EDE98 = (uint64_t (*)(void))result;
  }
  return result;
}

uint64_t __eventStreamCallback_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) handleFSEventPath:a2 flags:*(unsigned int *)(*(void *)(a1 + 40) + 4 * a3) id:*(void *)(*(void *)(a1 + 48) + 8 * a3)];
}

void clearAllObservers(uint64_t a1)
{
  uint64_t v1 = (unsigned int *)(a1 + 24);
  if (atomic_load((unsigned int *)(a1 + 24)))
  {
    id v4 = (os_unfair_lock_s *)(a1 + 28);
    os_unfair_lock_lock_with_options();
    unsigned int v5 = atomic_load(v1);
    if (v5 < 2) {
      id Weak = 0;
    }
    else {
      id Weak = objc_loadWeak((id *)(a1 + 16));
    }
    atomic_store(0, (unsigned int *)(a1 + 24));
    objc_storeWeak((id *)(a1 + 16), 0);
    os_unfair_lock_unlock(v4);
  }
}

void addObserver(uint64_t a1, void *a2)
{
  id v4 = (os_unfair_lock_s *)(a1 + 28);
  os_unfair_lock_lock_with_options();
  unsigned int add = atomic_fetch_add((atomic_uint *volatile)(a1 + 24), 1u);
  if (add == 1)
  {
    uint64_t v7 = (id *)(a1 + 16);
    id Weak = objc_loadWeak((id *)(a1 + 16));
    uint64_t v9 = [[NSHashTable alloc] initWithOptions:517 capacity:0];
    objc_storeWeak(v7, v9);
    [(NSHashTable *)v9 addObject:Weak];
  }
  else
  {
    uint64_t v6 = (id *)(a1 + 16);
    if (!add)
    {
      objc_storeWeak(v6, a2);
      goto LABEL_7;
    }
    uint64_t v9 = (NSHashTable *)objc_loadWeak(v6);
  }
  [(NSHashTable *)v9 addObject:a2];
LABEL_7:

  os_unfair_lock_unlock(v4);
}

void removeObservation(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (atomic_uint *)(a1 + 24);
  if (!atomic_load((unsigned int *)(a1 + 24))) {
    return;
  }
  uint64_t v6 = (os_unfair_lock_s *)(a1 + 28);
  os_unfair_lock_lock_with_options();
  unsigned int add = atomic_fetch_add(v2, 0xFFFFFFFF);
  uint64_t v8 = (id *)(a1 + 16);
  unsigned int v9 = add - 1;
  if (add == 1)
  {
    uint64_t v11 = 0;
    id Weak = 0;
  }
  else
  {
    id Weak = objc_loadWeak((id *)(a1 + 16));
    [Weak removeObject:a2];
    if (v9 != 1)
    {
      id Weak = 0;
      goto LABEL_9;
    }
    uint64_t v11 = (void *)[Weak anyObject];
  }
  objc_storeWeak(v8, v11);
LABEL_9:
  os_unfair_lock_unlock(v6);
}

void withUnlockedObservers(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = MEMORY[0x185308110]();
  unsigned int v5 = (void *)v4;
  if (atomic_load((unsigned int *)(a1 + 24)))
  {
    NSUInteger v18 = (void *)v4;
    os_unfair_lock_t v19 = (os_unfair_lock_t)(a1 + 28);
    os_unfair_lock_lock_with_options();
    v17[1] = v17;
    unint64_t v7 = atomic_load((unsigned int *)(a1 + 24));
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 1;
    }
    MEMORY[0x1F4188790](v8);
    uint64_t v10 = (void *)((char *)v17 - v9);
    uint64_t v21 = 0;
    if (v7 >= 0x101)
    {
      uint64_t v10 = (void *)_CFCreateArrayStorage();
      size_t v20 = v10;
    }
    else
    {
      size_t v20 = 0;
      if (!v7)
      {
LABEL_22:
        os_unfair_lock_unlock(v19);
        (*(void (**)(uint64_t, void *, unint64_t))(a2 + 16))(a2, v10, v7);
        free(v20);
        unsigned int v5 = v18;
        goto LABEL_23;
      }
    }
    if (v7 == 1)
    {
      void *v10 = objc_loadWeak((id *)(a1 + 16));
    }
    else
    {
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      id Weak = objc_loadWeak((id *)(a1 + 16));
      uint64_t v12 = [Weak countByEnumeratingWithState:&v23 objects:v22 count:16];
      if (v12)
      {
        unint64_t v13 = 0;
        uint64_t v14 = *(void *)v24;
        do
        {
          uint64_t v15 = 0;
          if (v7 >= v13) {
            uint64_t v16 = v7 - v13;
          }
          else {
            uint64_t v16 = 0;
          }
          do
          {
            if (*(void *)v24 != v14) {
              objc_enumerationMutation(Weak);
            }
            if (v16 == v15) {
              __assert_rtn("withUnlockedObservers", "_NSObserverList.m", 41, "idx < count");
            }
            v10[v13 + v15] = *(void *)(*((void *)&v23 + 1) + 8 * v15);
            ++v15;
          }
          while (v12 != v15);
          uint64_t v12 = [Weak countByEnumeratingWithState:&v23 objects:v22 count:16];
          v13 += v15;
        }
        while (v12);
      }
    }
    goto LABEL_22;
  }
  (*(void (**)(uint64_t, void, void))(a2 + 16))(a2, 0, 0);
LABEL_23:
}

void sub_1820C7E40(_Unwind_Exception *a1)
{
  free(*(void **)(v1 - 320));
  _Unwind_Resume(a1);
}

void sub_1820C81B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1820C95D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1820CAFD0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 104), 8);
  _Unwind_Resume(a1);
}

void sub_1820CB23C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_1820CB4A8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_1820CB614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 56), 8);
  _Unwind_Resume(a1);
}

uint64_t _NSPNCSettings(void *a1)
{
  uint64_t result = [a1 copy];
  _overriddenSettings = result;
  return result;
}

void sub_1820CC060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 72), 8);
  _Unwind_Resume(a1);
}

void sub_1820CC2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *initNPNameParser()
{
  if (qword_1EB1ED0F8
    || (uint64_t result = dlopen("/System/Library/PrivateFrameworks/CoreNameParser.framework/CoreNameParser", 1),
        (qword_1EB1ED0F8 = (uint64_t)result) != 0))
  {
    uint64_t result = objc_getClass("NPNameParser");
    qword_1EB1ED0F0 = (uint64_t)result;
    getNPNameParserClass Class = NPNameParserFunction;
  }
  return result;
}

uint64_t NPNameParserFunction()
{
  return qword_1EB1ED0F0;
}

void sub_1820CCAC0(_Unwind_Exception *a1)
{
}

uint64_t compare_1(double *a1, double *a2)
{
  if (*a1 >= *a2) {
    unsigned int v2 = 0;
  }
  else {
    unsigned int v2 = -1;
  }
  if (*a1 > *a2) {
    return 1;
  }
  else {
    return v2;
  }
}

void service_connection_handler_make_remote_connection(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)MEMORY[0x185308110]();
  unsigned int v5 = (void *)-[NSXPCConnection _initWithRemotePeerConnection:name:options:]([NSXPCConnection alloc], a2, (__CFString *)[a1 serviceName]);
  [a1 delegate];
  if ((objc_opt_respondsToSelector() & 1) == 0
    || (objc_msgSend((id)objc_msgSend(a1, "delegate"), "listener:shouldAcceptNewConnection:", a1, v5) & 1) == 0)
  {
    [v5 invalidate];
  }
}

void additional_service_handler(_xpc_connection_s *a1)
{
  unsigned int v2 = (void *)atomic_load(&_additionalListener);
  service_connection_handler_make_connection(v2, a1);
}

void ___setupRemoteListenerConnection_block_invoke(uint64_t a1, id a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  Class Class = object_getClass(a2);
  if (Class == (Class)_XPC_TYPE_REMOTE_CONNECTION)
  {
    unint64_t v7 = *(void **)(a1 + 32);
    service_connection_handler_make_remote_connection(v7, (uint64_t)a2);
  }
  else if (Class != (Class)MEMORY[0x1E4F145A8])
  {
    unsigned int v5 = (void *)MEMORY[0x18530A880](a2);
    uint64_t v6 = _NSXPCLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      int v8 = 136446210;
      uint64_t v9 = v5;
      _os_log_fault_impl(&dword_181795000, v6, OS_LOG_TYPE_FAULT, "NSXPCListener: received error or other non-connection type in handler for remote listener: %{public}s", (uint8_t *)&v8, 0xCu);
    }
    free(v5);
  }
}

const char *_NSXPCInterfaceDebugDescriptionHelper(const char *result, uint64_t a2, void *a3)
{
  if (a2)
  {
    SEL Name = sel_getName(result);
    uint64_t v6 = [*(id *)(a2 + 16) count];
    unint64_t v7 = @">=1";
    int v8 = *(unsigned char *)(a2 + 44) ? @">=1" : @"0";
    [a3 appendFormat:@"SEL: %s (%ld arguments, %@ proxies)\n Classes: %@\n", Name, v6, v8, descriptionForClassArray(*(void **)(a2 + 16))];
    uint64_t v9 = *(unsigned int *)(a2 + 40);
    uint64_t result = (const char *)[*(id *)a2 _typeString];
    uint64_t v10 = result;
    if (v9 || result)
    {
      uint64_t v11 = [*(id *)(a2 + 8) count];
      if (!*(unsigned char *)(a2 + 45)) {
        unint64_t v7 = @"0";
      }
      return (const char *)[a3 appendFormat:@" Reply block: (arg #%d, (%ld arguments, %@ proxies), signature '%@') %@\n", v9, v11, v7, v10, descriptionForClassArray(*(void **)(a2 + 8))];
    }
  }
  return result;
}

void sub_1820CE410(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1820CE430(_Unwind_Exception *a1)
{
}

void sub_1820CE590(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1820CE5A4(_Unwind_Exception *a1)
{
}

void sub_1820CE700(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1820CE714(_Unwind_Exception *a1)
{
}

void _maxVersionFinder(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  if (a2) {
    unint64_t v3 = *(void *)(a2 + 24);
  }
  else {
    unint64_t v3 = 1;
  }
  if (v3 > *a3) {
    *a3 = v3;
  }
}

void sub_1820CE8AC(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1820CE8C0(_Unwind_Exception *a1)
{
}

__CFString *descriptionForClassArray(void *a1)
{
  if (![a1 count]) {
    return @"[]";
  }
  unsigned int v2 = +[NSString stringWithString:@"["];
  -[NSMutableString appendString:](v2, "appendString:", descriptionForArgumentEntry((void *)[a1 objectAtIndex:0]));
  if ((unint64_t)[a1 count] >= 2 && (unint64_t)objc_msgSend(a1, "count") >= 2)
  {
    unint64_t v3 = 1;
    do
      -[NSMutableString appendFormat:](v2, "appendFormat:", @", %@", descriptionForArgumentEntry((void *)[a1 objectAtIndex:v3++]));
    while (v3 < [a1 count]);
  }
  [(NSMutableString *)v2 appendFormat:@"]"];
  return (__CFString *)v2;
}

NSString *descriptionForArgumentEntry(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if (![a1 count]) {
      return (NSString *)@"{}";
    }
    unsigned int v2 = +[NSString stringWithString:@"{"];
    unint64_t v3 = (void *)[a1 allObjects];
    -[NSMutableString appendFormat:](v2, "appendFormat:", @"%s", class_getName((Class)[v3 objectAtIndex:0]));
    if ((unint64_t)[v3 count] >= 2 && (unint64_t)objc_msgSend(v3, "count") >= 2)
    {
      unint64_t v4 = 1;
      do
        -[NSMutableString appendFormat:](v2, "appendFormat:", @", %s", class_getName((Class)[v3 objectAtIndex:v4++]));
      while (v4 < [v3 count]);
    }
    [(NSMutableString *)v2 appendFormat:@"}"];
    return (NSString *)v2;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    unsigned int v5 = (Protocol *)[a1 protocol];
    if (v5) {
      SEL Name = protocol_getName(v5);
    }
    else {
      SEL Name = "(none set)";
    }
    return +[NSString stringWithFormat:@"NSXPCInterface (%p) / %s", a1, Name];
  }
  else
  {
    if (objc_msgSend(a1, "isEqual:", objc_msgSend(MEMORY[0x1E4F1CA98], "null"))) {
      return (NSString *)@"{None}";
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      if (a1) {
        uint64_t v8 = a1[1];
      }
      else {
        uint64_t v8 = 0;
      }
      return +[NSString stringWithFormat:@"XPC Type: %@", v8, v9];
    }
    else
    {
      return +[NSString stringWithFormat:@"%@", objc_opt_class(), v9];
    }
  }
}

CFStringRef _selKeyCallbackCopyDescription(const char *a1)
{
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
  SEL Name = sel_getName(a1);

  return CFStringCreateWithCString(v1, Name, 0x8000100u);
}

uint64_t _NSProgressIPCDebugLog()
{
  if (qword_1EB1ECEE0 != -1) {
    dispatch_once(&qword_1EB1ECEE0, &__block_literal_global_90);
  }
  return _MergedGlobals_25_1;
}

void NSProgressTSDDestroy(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)(a1 + 8)) {
      NSProgressTSDDestroy();
    }

    free((void *)a1);
  }
}

uint64_t ___lockedLocalizedDescriptionForNotFile_block_invoke()
{
  qword_1EB1ECF50 = objc_alloc_init(NSNumberFormatter);
  [(id)qword_1EB1ECF50 setFormatterBehavior:1040];
  [(id)qword_1EB1ECF50 setNumberStyle:3];
  [(id)qword_1EB1ECF50 setMaximumFractionDigits:0];
  [(id)qword_1EB1ECF50 setMinimumFractionDigits:0];
  objc_msgSend((id)qword_1EB1ECF50, "setLocale:", objc_msgSend(MEMORY[0x1E4F1CA20], "currentLocale"));
  uint64_t v0 = (void *)qword_1EB1ECF50;

  return [v0 setRoundingMode:1];
}

uint64_t _lockedLocalizedTimeRemaining(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 8) objectForKey:@"NSProgressEstimatedTimeRemainingKey"];
  if (!v2) {
    return 0;
  }
  unint64_t v3 = (void *)v2;
  if (!_NSIsNSNumber()) {
    return 0;
  }
  uint64_t v4 = [*(id *)(a1 + 8) objectForKey:@"NSProgressLocalizedDescriptionTimeRemainingFormatterKey"];
  if (!v4 || (unsigned int v5 = (void *)v4, (objc_opt_isKindOfClass() & 1) == 0))
  {
    if (qword_1EB1ECF60 != -1) {
      dispatch_once(&qword_1EB1ECF60, &__block_literal_global_836);
    }
    unsigned int v5 = (void *)qword_1EB1ECF58;
  }
  [v3 doubleValue];

  return objc_msgSend(v5, "stringFromTimeInterval:");
}

NSString *_localizedAppendedTimeRemaining(NSString *result)
{
  if (result) {
    return +[NSString stringWithFormat:](NSString, "stringWithFormat:", [(id)_NSFoundationBundle() localizedStringForKey:@" — %@" value:&stru_1ECA5C228 table:@"Progress"], result);
  }
  return result;
}

uint64_t ___lockedLocalizedTimeRemaining_block_invoke()
{
  qword_1EB1ECF58 = objc_alloc_init(NSDateComponentsFormatter);
  [(id)qword_1EB1ECF58 setUnitsStyle:3];
  [(id)qword_1EB1ECF58 setIncludesTimeRemainingPhrase:1];
  uint64_t v0 = (void *)qword_1EB1ECF58;

  return [v0 setIncludesApproximationPhrase:1];
}

uint64_t ___lockedLocalizedAdditionalDescriptionForNotFile_block_invoke()
{
  qword_1EB1ECF70 = objc_alloc_init(NSNumberFormatter);
  [(id)qword_1EB1ECF70 setFormatterBehavior:1040];
  [(id)qword_1EB1ECF70 setNumberStyle:1];
  [(id)qword_1EB1ECF70 setUsesGroupingSeparator:1];
  uint64_t v0 = (void *)qword_1EB1ECF70;
  uint64_t v1 = [MEMORY[0x1E4F1CA20] currentLocale];

  return [v0 setLocale:v1];
}

void sub_1820D56D4(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v9 = objc_begin_catch(exc_buf);
      uint64_t v10 = _NSOSLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = [v9 description];
        LODWORD(a9) = 138412290;
        *(void *)((char *)&a9 + 4) = v11;
        _os_log_error_impl(&dword_181795000, v10, OS_LOG_TYPE_ERROR, "NSProgress Exception caught: %@", (uint8_t *)&a9, 0xCu);
      }
      objc_end_catch();
      JUMPOUT(0x1820D5684);
    }
    objc_begin_catch(exc_buf);
    JUMPOUT(0x1820D5688);
  }
  _Unwind_Resume(exc_buf);
}

double _NSOrderedChangesInit(uint64_t a1, Class a2, uint64_t a3, uint64_t a4)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x300], 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)a1 = [[a2 alloc] initWithObjects:a3 count:a4];
  *(int64x2_t *)(a1 + 40) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(void *)(a1 + 16) = 0;
  double result = NAN;
  *(_OWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = xmmword_18235A300;
  *(void *)(a1 + 56) = 0;
  return result;
}

void _NSOrderedChangesRelease(uint64_t a1)
{
  for (uint64_t i = *(void *)(a1 + 40); i != 0x7FFFFFFFFFFFFFFFLL; uint64_t i = *(void *)(v3 + 32))
  {
    uint64_t v3 = *(void *)(a1 + 16) + 40 * i;
  }
  uint64_t v4 = *(void **)(a1 + 16);
  if (v4) {
    free(v4);
  }
  unsigned int v5 = *(void **)a1;
}

uint64_t _NSOrderedChangesCopy(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t result = [*(id *)a1 copy];
  *(void *)a2 = result;
  *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x300], 8) = 0;
  *(int64x2_t *)(a2 + 40) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = xmmword_18235A300;
  *(void *)(a2 + 56) = 0;
  char v12 = 0;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  id v9 = ___NSOrderedChangesCopy_block_invoke;
  uint64_t v10 = &__block_descriptor_40_e21_v48__0Q8Q16Q24_32_B40l;
  uint64_t v11 = a2;
  if (*(void *)(a1 + 56))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (v5 != 0x7FFFFFFFFFFFFFFFLL)
    {
      unint64_t v6 = 0;
      do
      {
        if (v6 > *(void *)(a1 + 56)) {
          [+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler") handleFailureInFunction:+[NSString stringWithUTF8String:"void __NSOrderedChangeListEnumerate(NSOrderedChangeList *, BOOL *, _NSOrderedChangeEnumerator)"] file:@"NSOrderedChanges.m" lineNumber:257 description:@"overstepped bounds of enumeration"];
        }
        uint64_t v7 = *(void *)(a1 + 16);
        uint64_t result = ((uint64_t (*)(void *, void, void, void, void, char *))v9)(v8, *(void *)(v7 + 40 * v5), *(void *)(v7 + 40 * v5 + 8), *(void *)(v7 + 40 * v5 + 16), *(void *)(v7 + 40 * v5 + 24), &v12);
        if (v12) {
          break;
        }
        ++v6;
        uint64_t v5 = *(void *)(v7 + 40 * v5 + 32);
      }
      while (v5 != 0x7FFFFFFFFFFFFFFFLL);
    }
  }
  return result;
}

uint64_t _NSOrderedChangesEnumerateChanges(uint64_t result, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  uint64_t v10 = ___NSOrderedChangesEnumerateChanges_block_invoke;
  uint64_t v11 = &unk_1E51FEDA8;
  uint64_t v12 = a4;
  uint64_t v13 = a2;
  if (*(void *)(result + 56))
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(result + 40);
    if (v5 != 0x7FFFFFFFFFFFFFFFLL)
    {
      unint64_t v7 = 0;
      do
      {
        if (v7 > *(void *)(v4 + 56)) {
          [+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler") handleFailureInFunction:+[NSString stringWithUTF8String:"void __NSOrderedChangeListEnumerate(NSOrderedChangeList *, BOOL *, _NSOrderedChangeEnumerator)"] file:@"NSOrderedChanges.m" lineNumber:257 description:@"overstepped bounds of enumeration"];
        }
        uint64_t v8 = *(void *)(v4 + 16);
        uint64_t result = ((uint64_t (*)(void *, void, void, void, void, unsigned char *))v10)(v9, *(void *)(v8 + 40 * v5), *(void *)(v8 + 40 * v5 + 8), *(void *)(v8 + 40 * v5 + 16), *(void *)(v8 + 40 * v5 + 24), a3);
        if (*a3) {
          break;
        }
        ++v7;
        uint64_t v5 = *(void *)(v8 + 40 * v5 + 32);
      }
      while (v5 != 0x7FFFFFFFFFFFFFFFLL);
    }
  }
  return result;
}

id _NSOrderedChangesAddChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (!*(unsigned char *)(a1 + 8))
  {
    uint64_t v10 = [*(id *)a1 mutableCopy];

    *(void *)a1 = v10;
    *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = 1;
  }
  switch(a2)
  {
    case 2:
      [*(id *)a1 insertObject:a5 atIndex:a4];
      break;
    case 3:
      [*(id *)a1 removeObjectAtIndex:a4];
      break;
    case 4:
      [*(id *)a1 replaceObjectAtIndex:a4 withObject:a5];
      break;
    case 5:
      objc_msgSend(*(id *)a1, "moveObjectsAtIndexes:toIndex:", +[NSIndexSet indexSetWithIndex:](NSIndexSet, "indexSetWithIndex:", a3), a4);
      if (a3 == 0x7FFFFFFFFFFFFFFFLL) {
        [+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler") handleFailureInFunction:+[NSString stringWithUTF8String:"void __NSOrderedChangeListAppend(NSOrderedChanges *, NSKeyValueChange, NSUInteger, NSUInteger, id)"] file:@"NSOrderedChanges.m" lineNumber:187 description:@"move sources not found"];
      }
      break;
    default:
      break;
  }
  size_t v11 = *(void *)(a1 + 24);
  if (v11 != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v14 = *(char **)(a1 + 16);
    goto LABEL_21;
  }
  uint64_t v12 = *(void *)(a1 + 32);
  if (v12)
  {
    size_t v13 = malloc_good_size(40 * v12 + 40) / 0x28;
    if (v13 <= *(void *)(a1 + 32)) {
      [+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler") handleFailureInFunction:+[NSString stringWithUTF8String:"void __NSOrderedChangeListGrowIfNeeded(NSOrderedChangeList *)"] file:@"NSOrderedChanges.m" lineNumber:154 description:@"capacity should be larger than previously requested"];
    }
  }
  else
  {
    size_t v13 = 32;
  }
  uint64_t v15 = *(void *)(a1 + 16);
  if (!v15)
  {
    uint64_t v14 = (char *)malloc_type_malloc(40 * v13, 0x1080040A84C04D1uLL);
    if (v14) {
      goto LABEL_17;
    }
LABEL_27:
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C4A0] reason:@"Unable to allocate underlying buffer for change list" userInfo:0]);
  }
  uint64_t v14 = (char *)MEMORY[0x185306D80](v15, 40 * v13, 0x1080040A84C04D1, 0);
  if (!v14) {
    goto LABEL_27;
  }
LABEL_17:
  size_t v16 = *(void *)(a1 + 32);
  if (v16 < v13)
  {
    size_t v17 = (uint64_t *)&v14[40 * v16 + 32];
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      *(v17 - 1) = 0;
      *size_t v17 = v18;
      uint64_t v18 = v16++;
      v17 += 5;
    }
    while (v13 != v16);
  }
  size_t v11 = v13 - 1;
  *(void *)(a1 + 16) = v14;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v13 - 1;
  *(void *)(a1 + 32) = v13;
LABEL_21:
  os_unfair_lock_t v19 = &v14[40 * v11];
  *((void *)v19 + 1) = a3;
  *((void *)v19 + 2) = a4;
  id result = a5;
  *(void *)os_unfair_lock_t v19 = a2;
  *((void *)v19 + 3) = result;
  *((void *)v19 + 4) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0x7FFFFFFFFFFFFFFFLL;
  if (*(void *)(a1 + 40) == 0x7FFFFFFFFFFFFFFFLL) {
    *(void *)(a1 + 40) = v11;
  }
  uint64_t v21 = *(void *)(a1 + 48);
  if (v21 != 0x7FFFFFFFFFFFFFFFLL) {
    *(void *)(*(void *)(a1 + 16) + 40 * v21 + 32) = v11;
  }
  uint64_t v22 = *(void *)(a1 + 56) + 1;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x300], 8) = v11;
  *(void *)(a1 + 56) = v22;
  return result;
}

void _NSOrderedChangesSort(id *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a3 >= 2)
  {
    unint64_t v6 = v16;
    bzero(v16, 0x800uLL);
    if (2 * a3 >= 0x101) {
      unint64_t v6 = malloc_type_malloc(16 * a3, 0x100004000313F17uLL);
    }
    CFSortIndexes();
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)&v6[8 * v7];
      if (v8 == v7)
      {
        uint64_t v9 = v7 + 1;
      }
      else
      {
        unint64_t v10 = v8 + a2;
        unint64_t v11 = v7 + a2;
        _NSOrderedChangesAddChange((uint64_t)a1, 5, v8 + a2, v7 + a2, (void *)[*a1 objectAtIndex:v8 + a2]);
        uint64_t v9 = v7 + 1;
        if (v7 + 1 < a3)
        {
          uint64_t v12 = a3 - 1 - v7;
          size_t v13 = (unint64_t *)&v6[8 * v7 + 8];
          do
          {
            unint64_t v14 = *v13 - (*v13 >= v10);
            if (*v13 >= v10 || v14 >= v11)
            {
              if (v14 >= v11) {
                ++v14;
              }
              *size_t v13 = v14;
            }
            ++v13;
            --v12;
          }
          while (v12);
        }
      }
      uint64_t v7 = v9;
    }
    while (v9 != a3);
    if (v6 != v16) {
      free(v6);
    }
  }
}

uint64_t _NSXPCSerializationDebugInfoForReadData(uint64_t *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  long long v7 = xmmword_1823A84A0;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  DWORD2(v7) = *(unsigned char *)(*a1 + 8) & 0xF0;
  uint64_t v4 = +[NSString stringWithFormat:@"%.8s %llu bytes (-%llu bytes)\n", v2, v3, _NSXPCSerializationDebugSizeForObject(a1, (uint64_t)&v7) - a1[1] + 8];
  uint64_t v5 = _NSXPCSerializationDebugInfoForObject(a1, (char **)&v7, 2, 2);

  return (uint64_t)[(NSString *)v4 stringByAppendingString:v5];
}

uint64_t _NSXPCSerializationDebugSizeForObject(void *a1, uint64_t a2)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *(void *)a2;
  if (*(void *)a2 >= a1[1]) {
    return 0;
  }
  int v5 = *(_DWORD *)(a2 + 8);
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  v14[0] = 0;
  switch(v5)
  {
    case 208:
      v14[0] = 9;
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3221225472;
      void v9[2] = ___NSXPCSerializationDebugSizeForObject_block_invoke_2;
      v9[3] = &unk_1E51FEEC0;
      void v9[4] = &v11;
      void v9[5] = a1;
      _iterateDictionaryKeysAndValues(a1, (void *)a2, (uint64_t)v9);
      break;
    case 160:
      v14[0] = 9;
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 3221225472;
      void v10[2] = ___NSXPCSerializationDebugSizeForObject_block_invoke;
      v10[3] = &unk_1E51FEE98;
      v10[4] = &v11;
      v10[5] = a1;
      _NSXPCSerializationIterateArrayObject(a1, (void *)a2, (uint64_t)v10);
      break;
    case 128:
      if (_getReferenceAtMarker(a1, (void *)a2, v2, v14))
      {
        *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x300], 8) = *(unsigned char *)(*a1 + *(void *)a2) & 0xF0;
        uint64_t v6 = _NSXPCSerializationDebugSizeForObject(a1);
        _OWORD v12[3] = v6;
      }
      break;
    default:
      if (_getLastByteOfValueIncludingMarker(a1, v2, v14)) {
        _OWORD v12[3] = v12[3] - *(void *)a2 + 1;
      }
      break;
  }
  uint64_t v7 = v12[3];
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_1820D6C04(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 56), 8);
  _Unwind_Resume(a1);
}

NSString *_NSXPCSerializationDebugInfoForObject(uint64_t *a1, char **a2, uint64_t a3, uint64_t a4)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  if ((unint64_t)*a2 < a1[1])
  {
    HIDWORD(v7) = *((_DWORD *)a2 + 2);
    LODWORD(v7) = HIDWORD(v7) - 16;
    switch((v7 >> 4))
    {
      case 0u:
      case 1u:
      case 0xEu:
        unint64_t v10 = _NSXPCSerializationNumberForObject(a1, (unint64_t *)a2);
        unint64_t v11 = (unint64_t)*a2;
        if (v10) {
          return +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"(@%lld) %@", v11, [v10 debugDescription]);
        }
        return +[NSString stringWithFormat:@"<bad number @%lld>", v11, v18];
      case 3u:
        unint64_t v10 = _NSXPCSerializationDataForObject(a1, (unint64_t *)a2);
        unint64_t v11 = (unint64_t)*a2;
        if (v10) {
          return +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"(@%lld) %@", v11, [v10 debugDescription]);
        }
        else {
          return +[NSString stringWithFormat:@"<bad data @%lld>", v11, v18];
        }
      case 5u:
        v21[0] = 0;
        if (_getStringAtMarker(a1, v21, v5, v23) && v21[0]) {
          return +[NSString stringWithFormat:@"(@%lld) %@", *a2, v21[0]];
        }
        else {
          return +[NSString stringWithFormat:@"<bad string @%lld>", *a2];
        }
      case 6u:
        v21[0] = 0;
        if (_getASCIIStringAtMarker(a1, v21, (unint64_t)v5, &v22, v23)) {
          return +[NSString stringWithFormat:@"(@%lld) %s", *a2, v21[0]];
        }
        else {
          return +[NSString stringWithFormat:@"<bad ASCII string @%lld>", *a2, v18];
        }
      case 7u:
        v21[0] = 0;
        if (!_getReferenceAtMarker(a1, v21, (unint64_t)v5, v23) || v21[0] == 0) {
          return +[NSString stringWithFormat:@"<bad reference @%lld>", *a2, v18];
        }
        else {
          return +[NSString stringWithFormat:@"(@%lld) ref #%lld", *a2, v21[0]];
        }
      case 9u:
        uint64_t v13 = +[NSString string];
        [(NSString *)v13 appendFormat:@"(@%lld) [\n", *a2];
        v21[0] = 0;
        v21[1] = (__CFString *)v21;
        void v21[2] = (__CFString *)0x2020000000;
        unsigned char v21[3] = 0;
        v20[0] = MEMORY[0x1E4F143A8];
        v20[1] = 3221225472;
        v20[2] = ___NSXPCSerializationDebugInfoForObject_block_invoke;
        void v20[3] = &unk_1E51FEEE8;
        v20[4] = v13;
        v20[5] = v21;
        v20[6] = a3;
        v20[7] = a1;
        v20[8] = a4;
        _NSXPCSerializationIterateArrayObject(a1, a2, (uint64_t)v20);
        uint64_t v17 = a3 - a4;
        if (a3 != a4)
        {
          do
          {
            [(NSString *)v13 appendString:@" "];
            --v17;
          }
          while (v17);
        }
        [(NSString *)v13 appendString:@"]"];
        _Block_object_dispose(v21, 8);
        return v13;
      case 0xAu:
        return +[NSString stringWithFormat:@"(@%lld) YES", *a2, v18];
      case 0xBu:
        return +[NSString stringWithFormat:@"(@%lld) NO", *a2, v18];
      case 0xCu:
        uint64_t v13 = +[NSString string];
        [(NSString *)v13 appendFormat:@"(@%lld) {\n", *a2];
        v19[0] = MEMORY[0x1E4F143A8];
        v19[1] = 3221225472;
        void v19[2] = ___NSXPCSerializationDebugInfoForObject_block_invoke_2;
        unsigned char v19[3] = &unk_1E51FEF10;
        v19[4] = v13;
        void v19[5] = a3;
        v19[6] = a1;
        v19[7] = a4;
        _iterateDictionaryKeysAndValues(a1, a2, (uint64_t)v19);
        uint64_t v15 = a3 - a4;
        if (a3 != a4)
        {
          do
          {
            [(NSString *)v13 appendString:@" "];
            --v15;
          }
          while (v15);
        }
        [(NSString *)v13 appendString:@"}"];
        return v13;
      case 0xDu:
        return +[NSString stringWithFormat:@"(@%lld) <null>", *a2, v18];
      default:
        return +[NSString stringWithFormat:@"<invalid object @%lld>", *a2, v18];
    }
  }
  return (NSString *)&stru_1ECA5C228;
}

void sub_1820D7064(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 104), 8);
  _Unwind_Resume(a1);
}

void ___reserveSpace_block_invoke()
{
}

void sub_1820D750C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 72), 8);
  _Unwind_Resume(a1);
}

void NSUnimplemented_(uint64_t a1)
{
  qword_1E8EDF350 = a1;
  __break(1u);
}

void NSRequestConcreteImplementation(uint64_t a1, const char *a2, objc_class *a3)
{
  uint64_t v5 = objc_opt_class();
  SEL Name = sel_getName(a2);
  if ((objc_class *)v5 == a3)
  {
    unint64_t v7 = +[NSString stringWithFormat:@"*** -%s cannot be sent to an abstract object of class %s: Create a concrete instance!", Name, class_getName(a3), v10];
  }
  else
  {
    uint64_t v8 = (objc_class *)objc_opt_class();
    uint64_t v9 = _NSNameOfClass(v8);
    unint64_t v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"*** -%s only defined for abstract class.  Define -[%s %s]!", Name, v9, sel_getName(a2));
  }
  objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:v7 userInfo:0]);
}

void _NSRequestConcreteObject(int a1, SEL sel)
{
  SEL Name = sel_getName(sel);
  uint64_t v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = (void *)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8], +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"*** initialization method -%s cannot be sent to an abstract object of class %s: Create a concrete instance!", Name, _NSNameOfClass(v3)), 0 reason userInfo];
  objc_exception_throw(v4);
}

uint64_t Selector.init(_:)()
{
  return MEMORY[0x1F4187498]();
}

uint64_t static _CFObject.== infix(_:_:)()
{
  return MEMORY[0x1F4186958]();
}

uint64_t _CFObject.hash(into:)()
{
  return MEMORY[0x1F4186968]();
}

uint64_t _CFObject.hashValue.getter()
{
  return MEMORY[0x1F4186978]();
}

uint64_t TypeMetadata.descriptor.getter()
{
  return MEMORY[0x1F4149D80]();
}

uint64_t TypeMetadata._resolve(_:)()
{
  return MEMORY[0x1F4149D88]();
}

uint64_t TupleMetadata.Elements.Element.metadata.getter()
{
  return MEMORY[0x1F4149D90]();
}

uint64_t TupleMetadata.Elements.endIndex.getter()
{
  return MEMORY[0x1F4149D98]();
}

uint64_t TupleMetadata.Elements.subscript.getter()
{
  return MEMORY[0x1F4149DA0]();
}

uint64_t TupleMetadata.init(_:)()
{
  return MEMORY[0x1F4149DA8]();
}

uint64_t FieldDescriptor.subscript.getter()
{
  return MEMORY[0x1F4149DB0]();
}

uint64_t MangledTypeReference.standardSubstitution.getter()
{
  return MEMORY[0x1F4149DB8]();
}

uint64_t static Metadata.Kind.tuple.getter()
{
  return MEMORY[0x1F4149DC0]();
}

uint64_t type metadata accessor for AnyRegexOutput()
{
  return MEMORY[0x1F4188308]();
}

uint64_t dispatch thunk of RegexComponent.regex.getter()
{
  return MEMORY[0x1F4188318]();
}

uint64_t static RegexWordBoundaryKind.simple.getter()
{
  return MEMORY[0x1F4188330]();
}

uint64_t type metadata accessor for RegexWordBoundaryKind()
{
  return MEMORY[0x1F4188338]();
}

uint64_t Regex.ignoresCase(_:)()
{
  return MEMORY[0x1F4188378]();
}

uint64_t Regex._literalPattern.getter()
{
  return MEMORY[0x1F4188390]();
}

uint64_t Regex.wordBoundaryKind(_:)()
{
  return MEMORY[0x1F4188398]();
}

uint64_t Regex.Match.range.getter()
{
  return MEMORY[0x1F41883C0]();
}

uint64_t Regex<A>.init<A>(_:)()
{
  return MEMORY[0x1F41883D0]();
}

uint64_t Regex<A>.init(_:)()
{
  return MEMORY[0x1F41883D8]();
}

uint64_t type metadata accessor for Regex()
{
  return MEMORY[0x1F41883E0]();
}

uint64_t PartialType.create2(with:)()
{
  return MEMORY[0x1F4148000]();
}

uint64_t GenericArguments2.subscript.getter()
{
  return MEMORY[0x1F4148008]();
}

uint64_t Type.genericArguments.getter()
{
  return MEMORY[0x1F4148010]();
}

uint64_t Type.genericArguments2.getter()
{
  return MEMORY[0x1F4148018]();
}

uint64_t _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)()
{
  return MEMORY[0x1F41126B8]();
}

uint64_t _HashTable.UnsafeHandle.subscript.setter()
{
  return MEMORY[0x1F41126C0]();
}

uint64_t _HashTable.UnsafeHandle.startFind(_:)()
{
  return MEMORY[0x1F41126C8]();
}

uint64_t static _HashTable.minimumScale.getter()
{
  return MEMORY[0x1F41126D0]();
}

uint64_t _HashTable.BucketIterator.init(hashTable:startingAt:)()
{
  return MEMORY[0x1F41126D8]();
}

uint64_t _HashTable.BucketIterator.isOccupied.getter()
{
  return MEMORY[0x1F41126E0]();
}

uint64_t _HashTable.BucketIterator.currentValue.getter()
{
  return MEMORY[0x1F41126E8]();
}

uint64_t _HashTable.BucketIterator.currentValue.setter()
{
  return MEMORY[0x1F41126F0]();
}

Swift::Void __swiftcall _HashTable.BucketIterator.advance()()
{
}

Swift::Int_optional __swiftcall _HashTable.BucketIterator.findNext()()
{
  Swift::Int v0 = MEMORY[0x1F4112700]();
  result.value = v0;
  result.is_nil = v1;
  return result;
}

uint64_t static _HashTable.maximumCapacity(forScale:)()
{
  return MEMORY[0x1F4112708]();
}

uint64_t static _HashTable.minimumCapacity(forScale:)()
{
  return MEMORY[0x1F4112710]();
}

uint64_t static _HashTable.maximumUnhashedCount.getter()
{
  return MEMORY[0x1F4112718]();
}

uint64_t _HashTable.copy()()
{
  return MEMORY[0x1F4112720]();
}

uint64_t static _HashTable.scale(forCapacity:)()
{
  return MEMORY[0x1F4112728]();
}

uint64_t _HashTable.init(scale:reservedScale:)()
{
  return MEMORY[0x1F4112730]();
}

uint64_t BigSubstring.init(_unchecked:in:)()
{
  return MEMORY[0x1F4112738]();
}

uint64_t BigSubstring.startIndex.getter()
{
  return MEMORY[0x1F4112740]();
}

uint64_t BigSubstring.isIdentical(to:)()
{
  return MEMORY[0x1F4112748]();
}

uint64_t BigSubstring.replaceSubrange<A>(_:with:)()
{
  return MEMORY[0x1F4112750]();
}

uint64_t BigSubstring.UnicodeScalarView.init(_unchecked:in:)()
{
  return MEMORY[0x1F4112758]();
}

uint64_t BigSubstring.UnicodeScalarView.startIndex.getter()
{
  return MEMORY[0x1F4112760]();
}

uint64_t BigSubstring.UnicodeScalarView.isIdentical(to:)()
{
  return MEMORY[0x1F4112768]();
}

uint64_t BigSubstring.UnicodeScalarView.replaceSubrange<A>(_:with:)()
{
  return MEMORY[0x1F4112770]();
}

uint64_t BigSubstring.UnicodeScalarView.base.getter()
{
  return MEMORY[0x1F4112778]();
}

uint64_t BigSubstring.UnicodeScalarView.count.getter()
{
  return MEMORY[0x1F4112780]();
}

uint64_t BigSubstring.UnicodeScalarView.index(after:)()
{
  return MEMORY[0x1F4112788]();
}

uint64_t BigSubstring.UnicodeScalarView.index(before:)()
{
  return MEMORY[0x1F4112790]();
}

uint64_t BigSubstring.UnicodeScalarView.endIndex.getter()
{
  return MEMORY[0x1F4112798]();
}

uint64_t BigSubstring.UnicodeScalarView.subscript.getter()
{
  return MEMORY[0x1F41127A0]();
}

{
  return MEMORY[0x1F41127A8]();
}

uint64_t static BigSubstring.== infix(_:_:)()
{
  return MEMORY[0x1F41127B0]();
}

uint64_t BigSubstring.base.getter()
{
  return MEMORY[0x1F41127B8]();
}

uint64_t BigSubstring.hash(into:)()
{
  return MEMORY[0x1F41127C0]();
}

uint64_t BigSubstring.count.getter()
{
  return MEMORY[0x1F41127C8]();
}

uint64_t BigSubstring.UTF8View.startIndex.getter()
{
  return MEMORY[0x1F41127D0]();
}

uint64_t BigSubstring.UTF8View.index(after:)()
{
  return MEMORY[0x1F41127D8]();
}

uint64_t BigSubstring.UTF8View.index(before:)()
{
  return MEMORY[0x1F41127E0]();
}

uint64_t BigSubstring.UTF8View.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1F41127E8]();
}

uint64_t BigSubstring.UTF8View.endIndex.getter()
{
  return MEMORY[0x1F41127F0]();
}

uint64_t BigSubstring.UTF8View.subscript.getter()
{
  return MEMORY[0x1F41127F8]();
}

uint64_t BigSubstring.distance(from:to:)()
{
  return MEMORY[0x1F4112800]();
}

uint64_t BigSubstring.endIndex.getter()
{
  return MEMORY[0x1F4112808]();
}

uint64_t BigSubstring.subscript.getter()
{
  return MEMORY[0x1F4112810]();
}

uint64_t BigString.startIndex.getter()
{
  return MEMORY[0x1F4112880]();
}

uint64_t BigString.init(stringLiteral:)()
{
  return MEMORY[0x1F4112888]();
}

uint64_t BigString.unicodeScalars.modify()
{
  return MEMORY[0x1F4112890]();
}

uint64_t BigString.unicodeScalars.getter()
{
  return MEMORY[0x1F4112898]();
}

uint64_t BigString.UnicodeScalarView.replaceSubrange(_:with:)()
{
  return MEMORY[0x1F41128A0]();
}

uint64_t BigString.UnicodeScalarView.index(roundingUp:)()
{
  return MEMORY[0x1F41128A8]();
}

uint64_t BigString.UnicodeScalarView.index(roundingDown:)()
{
  return MEMORY[0x1F41128B0]();
}

uint64_t BigString.UnicodeScalarView.index(after:)()
{
  return MEMORY[0x1F41128B8]();
}

uint64_t BigString.UnicodeScalarView.index(before:)()
{
  return MEMORY[0x1F41128C0]();
}

uint64_t BigString.UnicodeScalarView.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1F41128C8]();
}

uint64_t BigString.UnicodeScalarView.index(_:offsetBy:)()
{
  return MEMORY[0x1F41128D0]();
}

uint64_t BigString.UnicodeScalarView.distance(from:to:)()
{
  return MEMORY[0x1F41128D8]();
}

uint64_t BigString.UnicodeScalarView.subscript.getter()
{
  return MEMORY[0x1F41128E0]();
}

{
  return MEMORY[0x1F41128E8]();
}

uint64_t BigString.utf8.getter()
{
  return MEMORY[0x1F41128F0]();
}

uint64_t BigString.Index.utf8Offset.getter()
{
  return MEMORY[0x1F41128F8]();
}

uint64_t BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)()
{
  return MEMORY[0x1F4112900]();
}

uint64_t BigString.Index.init(_utf8Offset:)()
{
  return MEMORY[0x1F4112908]();
}

uint64_t static BigString.Index.< infix(_:_:)()
{
  return MEMORY[0x1F4112910]();
}

uint64_t BigString.Index._isUTF16TrailingSurrogate.getter()
{
  return MEMORY[0x1F4112918]();
}

uint64_t static BigString.Index.== infix(_:_:)()
{
  return MEMORY[0x1F4112920]();
}

uint64_t BigString.index(roundingDown:)()
{
  return MEMORY[0x1F4112928]();
}

uint64_t BigString.index(after:)()
{
  return MEMORY[0x1F4112930]();
}

uint64_t BigString.index(before:)()
{
  return MEMORY[0x1F4112938]();
}

uint64_t BigString.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1F4112940]();
}

uint64_t BigString.index(_:offsetBy:)()
{
  return MEMORY[0x1F4112948]();
}

uint64_t BigString.utf16.getter()
{
  return MEMORY[0x1F4112950]();
}

uint64_t BigString.append(contentsOf:)()
{
  return MEMORY[0x1F4112958]();
}

uint64_t BigString.isEmpty.getter()
{
  return MEMORY[0x1F4112960]();
}

uint64_t BigString.UTF8View.startIndex.getter()
{
  return MEMORY[0x1F4112968]();
}

uint64_t BigString.UTF8View.count.getter()
{
  return MEMORY[0x1F4112970]();
}

uint64_t BigString.UTF8View.index(roundingDown:)()
{
  return MEMORY[0x1F4112978]();
}

uint64_t BigString.UTF8View.index(after:)()
{
  return MEMORY[0x1F4112980]();
}

uint64_t BigString.UTF8View.index(before:)()
{
  return MEMORY[0x1F4112988]();
}

uint64_t BigString.UTF8View.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1F4112990]();
}

uint64_t BigString.UTF8View.index(_:offsetBy:)()
{
  return MEMORY[0x1F4112998]();
}

uint64_t BigString.UTF8View.distance(from:to:)()
{
  return MEMORY[0x1F41129A0]();
}

uint64_t BigString.UTF8View.endIndex.getter()
{
  return MEMORY[0x1F41129A8]();
}

uint64_t BigString.UTF8View.subscript.getter()
{
  return MEMORY[0x1F41129B0]();
}

{
  return MEMORY[0x1F41129B8]();
}

uint64_t BigString.endIndex.getter()
{
  return MEMORY[0x1F41129C0]();
}

uint64_t BigString.UTF16View.startIndex.getter()
{
  return MEMORY[0x1F41129C8]();
}

uint64_t BigString.UTF16View.count.getter()
{
  return MEMORY[0x1F41129D0]();
}

uint64_t BigString.UTF16View.index(before:)()
{
  return MEMORY[0x1F41129D8]();
}

uint64_t BigString.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x1F41129E0]();
}

uint64_t BigString.UTF16View.distance(from:to:)()
{
  return MEMORY[0x1F41129E8]();
}

uint64_t BigString.UTF16View.endIndex.getter()
{
  return MEMORY[0x1F41129F0]();
}

uint64_t BigString.UTF16View.subscript.getter()
{
  return MEMORY[0x1F41129F8]();
}

uint64_t BigString.init()()
{
  return MEMORY[0x1F4112A00]();
}

uint64_t BigString.init(_:)()
{
  return MEMORY[0x1F4112A08]();
}

{
  return MEMORY[0x1F4112A18]();
}

{
  return MEMORY[0x1F4112A20]();
}

{
  return MEMORY[0x1F4112A30]();
}

{
  return MEMORY[0x1F4112A38]();
}

uint64_t BigString.subscript.getter()
{
  return MEMORY[0x1F4112A10]();
}

{
  return MEMORY[0x1F4112A40]();
}

uint64_t BigString.init<A>(_:)()
{
  return MEMORY[0x1F4112A28]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x1F4188670]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x1F4188680]();
}

uint64_t Logger.init()()
{
  return MEMORY[0x1F4188690]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x1F41886A0]();
}

uint64_t Logger.init(_:)()
{
  return MEMORY[0x1F41886B0]();
}

uint64_t XPC_TYPE_DATA.getter()
{
  return MEMORY[0x1F4187A50]();
}

uint64_t XPCCodableObject.copyUnderlyingXPCObject()()
{
  return MEMORY[0x1F4187BA0]();
}

uint64_t XPCCodableObject.type.getter()
{
  return MEMORY[0x1F4187BA8]();
}

uint64_t XPCCodableObject.init(copying:)()
{
  return MEMORY[0x1F4187BB0]();
}

uint64_t type metadata accessor for XPCCodableObject()
{
  return MEMORY[0x1F4187BB8]();
}

uint64_t MAP_FAILED.getter()
{
  return MEMORY[0x1F4186B60]();
}

uint64_t POSIXErrorCode.init(rawValue:)()
{
  return MEMORY[0x1F4188490]();
}

uint64_t POSIXErrorCode.rawValue.getter()
{
  return MEMORY[0x1F41884A0]();
}

uint64_t open(_:_:_:)()
{
  return MEMORY[0x1F4186B78]();
}

uint64_t open(_:_:)()
{
  return MEMORY[0x1F4186B80]();
}

uint64_t errno.getter()
{
  return MEMORY[0x1F41884A8]();
}

uint64_t errno.setter()
{
  return MEMORY[0x1F41884B8]();
}

Swift::Int32 __swiftcall fcntl(_:_:_:)(Swift::Int32 a1, Swift::Int32 a2, Swift::Int32 a3)
{
  return MEMORY[0x1F4186B88](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

uint64_t fcntl(_:_:_:)()
{
  return MEMORY[0x1F4186B90]();
}

Swift::Int32 __swiftcall fcntl(_:_:)(Swift::Int32 a1, Swift::Int32 a2)
{
  return MEMORY[0x1F4186B98](*(void *)&a1, *(void *)&a2);
}

uint64_t S_IFMT.getter()
{
  return MEMORY[0x1F4186BB0]();
}

uint64_t S_IFBLK.getter()
{
  return MEMORY[0x1F4186BB8]();
}

uint64_t S_IFCHR.getter()
{
  return MEMORY[0x1F4186BC0]();
}

uint64_t S_IFDIR.getter()
{
  return MEMORY[0x1F4186BC8]();
}

uint64_t S_IFLNK.getter()
{
  return MEMORY[0x1F4186BD0]();
}

uint64_t S_IFREG.getter()
{
  return MEMORY[0x1F4186BD8]();
}

uint64_t S_IRWXG.getter()
{
  return MEMORY[0x1F4186BF0]();
}

uint64_t S_IRWXO.getter()
{
  return MEMORY[0x1F4186BF8]();
}

uint64_t S_IRWXU.getter()
{
  return MEMORY[0x1F4186C00]();
}

uint64_t S_ISVTX.getter()
{
  return MEMORY[0x1F4186C08]();
}

uint64_t S_IWUSR.getter()
{
  return MEMORY[0x1F4186C18]();
}

uint64_t S_IFSOCK.getter()
{
  return MEMORY[0x1F4186C28]();
}

uint64_t type metadata accessor for FilePath()
{
  return MEMORY[0x1F4187810]();
}

uint64_t FilePath.init(_:)()
{
  return MEMORY[0x1F4187818]();
}

uint64_t CustomCombineIdentifierConvertible<>.combineIdentifier.getter()
{
  return MEMORY[0x1F40D65E8]();
}

uint64_t type metadata accessor for CombineIdentifier()
{
  return MEMORY[0x1F40D6608]();
}

uint64_t dispatch thunk of Subscriber.receive(completion:)()
{
  return MEMORY[0x1F40D68A8]();
}

uint64_t dispatch thunk of Subscriber.receive(subscription:)()
{
  return MEMORY[0x1F40D68B0]();
}

uint64_t dispatch thunk of Subscriber.receive(_:)()
{
  return MEMORY[0x1F40D68B8]();
}

uint64_t static Subscribers.Demand.== infix(_:_:)()
{
  return MEMORY[0x1F40D68F8]();
}

uint64_t static Subscribers.Demand.none.getter()
{
  return MEMORY[0x1F40D6900]();
}

uint64_t static Subscribers.Demand.unlimited.getter()
{
  return MEMORY[0x1F40D6908]();
}

uint64_t type metadata accessor for AnyCancellable()
{
  return MEMORY[0x1F40D6960]();
}

uint64_t AnyCancellable.init<A>(_:)()
{
  return MEMORY[0x1F40D6970]();
}

uint64_t AnyCancellable.init(_:)()
{
  return MEMORY[0x1F40D6988]();
}

uint64_t Publisher.map<A>(_:)()
{
  return MEMORY[0x1F40D6C50]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x1F4186CB0]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x1F4186CF8]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x1F4186D60]();
}

uint64_t DispatchData.enumerateBytes(_:)()
{
  return MEMORY[0x1F4186D88]();
}

uint64_t type metadata accessor for DispatchData()
{
  return MEMORY[0x1F4186DF0]();
}

uint64_t static DispatchTime.now()()
{
  return MEMORY[0x1F4186E28]();
}

uint64_t type metadata accessor for DispatchTime()
{
  return MEMORY[0x1F4186E60]();
}

uint64_t + infix(_:_:)()
{
  return MEMORY[0x1F4186F18]();
}

uint64_t dispatch thunk of static BinaryFloatingPoint.exponentBitCount.getter()
{
  return MEMORY[0x1F4183298]();
}

uint64_t dispatch thunk of BinaryFloatingPoint.significandWidth.getter()
{
  return MEMORY[0x1F41832A0]();
}

uint64_t dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter()
{
  return MEMORY[0x1F41832A8]();
}

uint64_t dispatch thunk of static BinaryFloatingPoint.significandBitCount.getter()
{
  return MEMORY[0x1F41832B0]();
}

uint64_t dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter()
{
  return MEMORY[0x1F41832B8]();
}

uint64_t dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)()
{
  return MEMORY[0x1F41832C0]();
}

uint64_t static BinaryFloatingPoint._convert<A>(from:)()
{
  return MEMORY[0x1F41832C8]();
}

uint64_t static BinaryFloatingPoint<>._convert<A>(from:)()
{
  return MEMORY[0x1F41832F0]();
}

uint64_t dispatch thunk of BinaryFloatingPoint.init(_:)()
{
  return MEMORY[0x1F41832F8]();
}

{
  return MEMORY[0x1F4183300]();
}

uint64_t dispatch thunk of BinaryFloatingPoint.init<A>(_:)()
{
  return MEMORY[0x1F4183308]();
}

uint64_t Dictionary.init(minimumCapacity:)()
{
  return MEMORY[0x1F4183338]();
}

Swift::Void __swiftcall Dictionary.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return MEMORY[0x1F4183358]();
}

uint64_t static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)()
{
  return MEMORY[0x1F4183368]();
}

uint64_t Dictionary.count.getter()
{
  return MEMORY[0x1F41833D0]();
}

uint64_t Dictionary.isEmpty.getter()
{
  return MEMORY[0x1F4183440]();
}

uint64_t Dictionary._Variant.setValue(_:forKey:)()
{
  return MEMORY[0x1F4183458]();
}

uint64_t type metadata accessor for Dictionary._Variant()
{
  return MEMORY[0x1F4183468]();
}

uint64_t type metadata accessor for Dictionary()
{
  return MEMORY[0x1F41834A8]();
}

uint64_t Dictionary.subscript.getter()
{
  return MEMORY[0x1F41834F8]();
}

uint64_t dispatch thunk of Encodable.encode(to:)()
{
  return MEMORY[0x1F4183510]();
}

uint64_t dispatch thunk of static FloatingPoint.nan.getter()
{
  return MEMORY[0x1F4183538]();
}

uint64_t dispatch thunk of FloatingPoint.sign.getter()
{
  return MEMORY[0x1F4183548]();
}

uint64_t dispatch thunk of FloatingPoint.isNaN.getter()
{
  return MEMORY[0x1F4183550]();
}

uint64_t dispatch thunk of FloatingPoint.isZero.getter()
{
  return MEMORY[0x1F4183558]();
}

uint64_t dispatch thunk of FloatingPoint.nextUp.getter()
{
  return MEMORY[0x1F4183560]();
}

uint64_t dispatch thunk of FloatingPoint.exponent.getter()
{
  return MEMORY[0x1F4183578]();
}

uint64_t dispatch thunk of static FloatingPoint.infinity.getter()
{
  return MEMORY[0x1F4183580]();
}

uint64_t dispatch thunk of FloatingPoint.isFinite.getter()
{
  return MEMORY[0x1F4183588]();
}

uint64_t dispatch thunk of FloatingPoint.nextDown.getter()
{
  return MEMORY[0x1F4183590]();
}

uint64_t dispatch thunk of FloatingPoint.init<A>(_:)()
{
  return MEMORY[0x1F41835A8]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x1F41835C0]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x1F41835C8]();
}

uint64_t Character.asciiValue.getter()
{
  return MEMORY[0x1F4183608]();
}

Swift::String __swiftcall Character.lowercased()()
{
  uint64_t v0 = MEMORY[0x1F4183610]();
  result._uint64_t object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t Character.isWhitespace.getter()
{
  return MEMORY[0x1F4183630]();
}

uint64_t Character._isSingleScalar.getter()
{
  return MEMORY[0x1F4183658]();
}

uint64_t Character.wholeNumberValue.getter()
{
  return MEMORY[0x1F4183660]();
}

uint64_t Character.hash(into:)()
{
  return MEMORY[0x1F4183678]();
}

uint64_t Character.write<A>(to:)()
{
  return MEMORY[0x1F4183680]();
}

uint64_t Character.isNumber.getter()
{
  return MEMORY[0x1F4183690]();
}

uint64_t BidirectionalCollection<>.firstMatch<A, B>(of:)()
{
  return MEMORY[0x1F41883F0]();
}

uint64_t BidirectionalCollection<>.prefixMatch<A>(of:)()
{
  return MEMORY[0x1F4188408]();
}

uint64_t BidirectionalCollection<>.contains<A>(_:)()
{
  return MEMORY[0x1F4188430]();
}

uint64_t dispatch thunk of BidirectionalCollection.index(before:)()
{
  return MEMORY[0x1F41836A8]();
}

uint64_t dispatch thunk of BidirectionalCollection.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1F41836B0]();
}

uint64_t dispatch thunk of BidirectionalCollection.index(_:offsetBy:)()
{
  return MEMORY[0x1F41836B8]();
}

uint64_t dispatch thunk of BidirectionalCollection.formIndex(before:)()
{
  return MEMORY[0x1F41836C8]();
}

uint64_t BidirectionalCollection.last.getter()
{
  return MEMORY[0x1F41836E0]();
}

uint64_t BidirectionalCollection.distance(from:to:)()
{
  return MEMORY[0x1F4183700]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x1F4183730]();
}

uint64_t dispatch thunk of static Comparable.> infix(_:_:)()
{
  return MEMORY[0x1F4183738]();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return MEMORY[0x1F4183740]();
}

uint64_t dispatch thunk of static Comparable.>= infix(_:_:)()
{
  return MEMORY[0x1F4183748]();
}

uint64_t dispatch thunk of static Comparable.<= infix(_:_:)()
{
  return MEMORY[0x1F4183750]();
}

uint64_t MutableCollection<>.sort(by:)()
{
  return MEMORY[0x1F41837C8]();
}

uint64_t type metadata accessor for ClosedRange()
{
  return MEMORY[0x1F4183808]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x1F4183838]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x1F4183880]();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = MEMORY[0x1F4183898]();
  result._uint64_t object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t String.init<A>(reflecting:)()
{
  return MEMORY[0x1F41838A0]();
}

Swift::String __swiftcall String.uppercased()()
{
  uint64_t v0 = MEMORY[0x1F41838B0]();
  result._uint64_t object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t String.utf8CString.getter()
{
  return MEMORY[0x1F41838B8]();
}

uint64_t String.init(_cocoaString:)()
{
  return MEMORY[0x1F41838C0]();
}

uint64_t static String._tryFromUTF8(_:)()
{
  return MEMORY[0x1F41838C8]();
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x1F41838D8]();
}

uint64_t String.init(_nativeStorage:)()
{
  return MEMORY[0x1F41838E0]();
}

uint64_t String.removeSubrange(_:)()
{
  return MEMORY[0x1F41838E8]();
}

uint64_t String.init(validatingUTF8:)()
{
  return MEMORY[0x1F41838F8]();
}

uint64_t String.replaceSubrange<A>(_:with:)()
{
  return MEMORY[0x1F4183900]();
}

Swift::Void __swiftcall String.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t String._slowWithCString<A, B>(encodedAs:_:)()
{
  return MEMORY[0x1F4183910]();
}

uint64_t String.UnicodeScalarView._foreignIndex(after:)()
{
  return MEMORY[0x1F4183920]();
}

uint64_t String.UnicodeScalarView._foreignIndex(before:)()
{
  return MEMORY[0x1F4183928]();
}

uint64_t String.UnicodeScalarView.append<A>(contentsOf:)()
{
  return MEMORY[0x1F4183938]();
}

uint64_t String.UnicodeScalarView.append(_:)()
{
  return MEMORY[0x1F4183940]();
}

uint64_t String.UnicodeScalarView.subscript.getter()
{
  return MEMORY[0x1F4183948]();
}

uint64_t static String._fromUTF8Repairing(_:)()
{
  return MEMORY[0x1F4183950]();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return MEMORY[0x1F4183958]();
}

uint64_t String.init(_:)()
{
  return MEMORY[0x1F4112A48]();
}

{
  return MEMORY[0x1F4112A50]();
}

{
  return MEMORY[0x1F4112A58]();
}

{
  return MEMORY[0x1F4183B70]();
}

{
  return MEMORY[0x1F4183B78]();
}

{
  return MEMORY[0x1F4183B80]();
}

uint64_t String._copyUTF16CodeUnits(into:range:)()
{
  return MEMORY[0x1F4183960]();
}

uint64_t String.init(stringInterpolation:)()
{
  return MEMORY[0x1F4183968]();
}

Swift::String __swiftcall String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(Builtin::RawPointer _builtinStringLiteral, Builtin::Word utf8CodeUnitCount, Builtin::Int1 isASCII)
{
  uint64_t v3 = MEMORY[0x1F4183978](_builtinStringLiteral, utf8CodeUnitCount, isASCII);
  result._uint64_t object = v4;
  result._uint64_t countAndFlagsBits = v3;
  return result;
}

uint64_t String._bridgeToObjectiveCImpl()()
{
  return MEMORY[0x1F4183980]();
}

uint64_t String.init(unsafeUninitializedCapacity:initializingUTF8With:)()
{
  return MEMORY[0x1F4183988]();
}

uint64_t String._nfd.getter()
{
  return MEMORY[0x1F41839A0]();
}

uint64_t String.init(from:)()
{
  return MEMORY[0x1F41839A8]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x1F41839B0]();
}

uint64_t String.Index.init<A>(utf16Offset:in:)()
{
  return MEMORY[0x1F41839C0]();
}

uint64_t String.Index.utf16Offset<A>(in:)()
{
  return MEMORY[0x1F41839C8]();
}

uint64_t String.Index.samePosition(in:)()
{
  return MEMORY[0x1F41839D8]();
}

uint64_t String.Index.init<A>(_:within:)()
{
  return MEMORY[0x1F41839E8]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x1F41839F0]();
}

uint64_t String.index(after:)()
{
  return MEMORY[0x1F41839F8]();
}

uint64_t String.index(before:)()
{
  return MEMORY[0x1F4183A00]();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1F4183A08]();
}

uint64_t String.index(_:offsetBy:)()
{
  return MEMORY[0x1F4183A10]();
}

uint64_t String.init(validating:)()
{
  return MEMORY[0x1F4187820]();
}

uint64_t String.append<A>(contentsOf:)()
{
  return MEMORY[0x1F4183A28]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.encode(to:)()
{
  return MEMORY[0x1F4183A40]();
}

uint64_t String.remove(at:)()
{
  return MEMORY[0x1F4183A58]();
}

uint64_t String.init(cString:)()
{
  return MEMORY[0x1F4183A60]();
}

{
  return MEMORY[0x1F4183A68]();
}

Swift::String_optional __swiftcall String.Iterator.next()()
{
  uint64_t v0 = MEMORY[0x1F4183A78]();
  result.value._uint64_t object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x1F4183A80]();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x1F4183A88]();
}

uint64_t String.UTF8View._foreignIndex(before:)()
{
  return MEMORY[0x1F4183A90]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1F4183A98]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x1F4183AA0]();
}

uint64_t String.UTF8View._foreignDistance(from:to:)()
{
  return MEMORY[0x1F4183AA8]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x1F4183AB0]();
}

Swift::Int __swiftcall String.UTF16View._foreignCount()()
{
  return MEMORY[0x1F4183AD8]();
}

uint64_t String.UTF16View._foreignIndex(after:)()
{
  return MEMORY[0x1F4183AE0]();
}

uint64_t String.UTF16View._foreignIndex(before:)()
{
  return MEMORY[0x1F4183AE8]();
}

uint64_t String.UTF16View._nativeGetOffset(for:)()
{
  return MEMORY[0x1F4183AF0]();
}

uint64_t String.UTF16View._foreignSubscript(position:)()
{
  return MEMORY[0x1F4183AF8]();
}

uint64_t String.UTF16View.count.getter()
{
  return MEMORY[0x1F4183B00]();
}

uint64_t String.UTF16View.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1F4183B08]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x1F4183B10]();
}

Swift::UInt16_optional __swiftcall String.UTF16View.Iterator.next()()
{
  return (Swift::UInt16_optional)MEMORY[0x1F4183B18]();
}

uint64_t String.UTF16View.distance(from:to:)()
{
  return MEMORY[0x1F4183B20]();
}

uint64_t String.UTF16View.subscript.getter()
{
  return MEMORY[0x1F4183B28]();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return MEMORY[0x1F4183B30](a1._countAndFlagsBits, a1._object);
}

Swift::Bool __swiftcall String.hasSuffix(_:)(Swift::String a1)
{
  return MEMORY[0x1F4183B38](a1._countAndFlagsBits, a1._object);
}

uint64_t String.hashValue.getter()
{
  return MEMORY[0x1F4183B40]();
}

Swift::String __swiftcall String.init(repeating:count:)(Swift::String repeating, Swift::Int count)
{
  uint64_t v2 = MEMORY[0x1F4183B48](repeating._countAndFlagsBits, repeating._object, count);
  result._uint64_t object = v3;
  result._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t String.init<A>(_:radix:uppercase:)()
{
  return MEMORY[0x1F4183B50]();
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x1F4183B58]();
}

{
  return MEMORY[0x1F4183BA0]();
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x1F4183B88]();
}

{
  return MEMORY[0x1F4183B90]();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return MEMORY[0x1F4183BA8]();
}

uint64_t dispatch thunk of Sequence._copyContents(initializing:)()
{
  return MEMORY[0x1F4183BB0]();
}

uint64_t dispatch thunk of Sequence.underestimatedCount.getter()
{
  return MEMORY[0x1F4183BB8]();
}

uint64_t dispatch thunk of Sequence._copyToContiguousArray()()
{
  return MEMORY[0x1F4183BC0]();
}

uint64_t dispatch thunk of Sequence._customContainsEquatableElement(_:)()
{
  return MEMORY[0x1F4183BC8]();
}

uint64_t dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x1F4183BD0]();
}

uint64_t Sequence.compactMap<A>(_:)()
{
  return MEMORY[0x1F4183BE8]();
}

uint64_t Sequence._copyContents(initializing:)()
{
  return MEMORY[0x1F4183BF8]();
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x1F4183C18]();
}

uint64_t Sequence.filter(_:)()
{
  return MEMORY[0x1F4183C48]();
}

uint64_t Sequence.contains(where:)()
{
  return MEMORY[0x1F4183C88]();
}

uint64_t Sequence<>.starts<A>(with:)()
{
  return MEMORY[0x1F4183CD8]();
}

uint64_t Sequence<>.joined(separator:)()
{
  return MEMORY[0x1F4183CF0]();
}

uint64_t dispatch thunk of RangeExpression.contains(_:)()
{
  return MEMORY[0x1F4183D58]();
}

uint64_t dispatch thunk of RangeExpression.relative<A>(to:)()
{
  return MEMORY[0x1F4183D60]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x1F4183D70]();
}

uint64_t dispatch thunk of RawRepresentable.init(rawValue:)()
{
  return MEMORY[0x1F4183D78]();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return MEMORY[0x1F4183D80]();
}

{
  return MEMORY[0x1F4183D98]();
}

{
  return MEMORY[0x1F4183DA0]();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return MEMORY[0x1F4183DF8]();
}

{
  return MEMORY[0x1F4183E10]();
}

{
  return MEMORY[0x1F4183E18]();
}

Swift::Void __swiftcall Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
}

uint64_t Array.description.getter()
{
  return MEMORY[0x1F4183E90]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x1F4183E98]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1F4183EC8]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x1F4183F08]();
}

Swift::Void __swiftcall Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(Swift::Int oldCount)
{
}

uint64_t Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1F4183F30]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1F4183F38]();
}

uint64_t Array.count.getter()
{
  return MEMORY[0x1F4183F40]();
}

Swift::Int __swiftcall Array._getCount()()
{
  return MEMORY[0x1F4183F80]();
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x1F4183FA8]();
}

uint64_t Bool.encode(to:)()
{
  return MEMORY[0x1F4183FF8]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x1F4187BF0]();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return MEMORY[0x1F4187C00]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x1F4187C08]();
}

uint64_t type metadata accessor for CheckedContinuation()
{
  return MEMORY[0x1F4187C10]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x1F4187CF8]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x1F4187D00]();
}

uint64_t static Task<>.checkCancellation()()
{
  return MEMORY[0x1F4187DD8]();
}

uint64_t type metadata accessor for UnsafeContinuation()
{
  return MEMORY[0x1F4187E00]();
}

uint64_t dispatch thunk of AsyncSequence.makeAsyncIterator()()
{
  return MEMORY[0x1F4187E68]();
}

uint64_t Double.description.getter()
{
  return MEMORY[0x1F4184008]();
}

uint64_t Double._roundSlowPath(_:)()
{
  return MEMORY[0x1F4184018]();
}

uint64_t Double.significandWidth.getter()
{
  return MEMORY[0x1F4184028]();
}

uint64_t Double.write<A>(to:)()
{
  return MEMORY[0x1F4184048]();
}

uint64_t Double.exponent.getter()
{
  return MEMORY[0x1F4184058]();
}

uint64_t dispatch thunk of Decodable.init(from:)()
{
  return MEMORY[0x1F4184090]();
}

uint64_t Float.description.getter()
{
  return MEMORY[0x1F4184098]();
}

uint64_t Float.significandWidth.getter()
{
  return MEMORY[0x1F41840B0]();
}

uint64_t Float.write<A>(to:)()
{
  return MEMORY[0x1F41840C0]();
}

uint64_t Float.exponent.getter()
{
  return MEMORY[0x1F41840C8]();
}

uint64_t Set.description.getter()
{
  return MEMORY[0x1F4184100]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x1F4184138]();
}

uint64_t static Set._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)()
{
  return MEMORY[0x1F4184168]();
}

uint64_t Set.count.getter()
{
  return MEMORY[0x1F4184188]();
}

uint64_t Set.isEmpty.getter()
{
  return MEMORY[0x1F41841C0]();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return MEMORY[0x1F41841D0]();
}

uint64_t Set._Variant.insert(_:)()
{
  return MEMORY[0x1F41841E0]();
}

uint64_t type metadata accessor for Set._Variant()
{
  return MEMORY[0x1F41841E8]();
}

uint64_t Int.init(from:)()
{
  return MEMORY[0x1F4184260]();
}

uint64_t Int.encode(to:)()
{
  return MEMORY[0x1F4184268]();
}

uint64_t dispatch thunk of static Numeric.* infix(_:_:)()
{
  return MEMORY[0x1F4184278]();
}

uint64_t dispatch thunk of Numeric.init<A>(exactly:)()
{
  return MEMORY[0x1F4184280]();
}

uint64_t dispatch thunk of Numeric.magnitude.getter()
{
  return MEMORY[0x1F4184288]();
}

uint64_t dispatch thunk of RandomAccessCollection.index(_:offsetBy:)()
{
  return MEMORY[0x1F4184290]();
}

uint64_t dispatch thunk of RandomAccessCollection.distance(from:to:)()
{
  return MEMORY[0x1F4184298]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x1F41842D0]();
}

uint64_t Collection<>.trimmingPrefix<A>(_:)()
{
  return MEMORY[0x1F4188438]();
}

uint64_t Collection<>.contains<A>(_:)()
{
  return MEMORY[0x1F4188450]();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return MEMORY[0x1F41842F8]();
}

uint64_t dispatch thunk of Collection.index(after:)()
{
  return MEMORY[0x1F4184300]();
}

uint64_t dispatch thunk of Collection.index(_:offsetBy:)()
{
  return MEMORY[0x1F4184310]();
}

uint64_t dispatch thunk of Collection.distance(from:to:)()
{
  return MEMORY[0x1F4184328]();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return MEMORY[0x1F4184330]();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return MEMORY[0x1F4184338]();
}

uint64_t Collection<>.popFirst()()
{
  return MEMORY[0x1F4184340]();
}

uint64_t Collection.first.getter()
{
  return MEMORY[0x1F4184398]();
}

uint64_t Collection.isEmpty.getter()
{
  return MEMORY[0x1F41843D0]();
}

uint64_t dispatch thunk of Collection.subscript.getter()
{
  return MEMORY[0x1F4184438]();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return MEMORY[0x1F4184440]();
}

uint64_t dispatch thunk of RangeReplaceableCollection.replaceSubrange<A>(_:with:)()
{
  return MEMORY[0x1F4184450]();
}

uint64_t RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)()
{
  return MEMORY[0x1F4188460]();
}

uint64_t RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)()
{
  return MEMORY[0x1F4188468]();
}

Swift::Void __swiftcall RangeReplaceableCollection.removeFirst(_:)(Swift::Int a1)
{
}

uint64_t RangeReplaceableCollection<>.removeLast()()
{
  return MEMORY[0x1F4184568]();
}

uint64_t Range.init(uncheckedBounds:)()
{
  return MEMORY[0x1F4184590]();
}

uint64_t type metadata accessor for Range()
{
  return MEMORY[0x1F41845B0]();
}

uint64_t Range<>.encode(to:)()
{
  return MEMORY[0x1F41845B8]();
}

uint64_t Range<>.init(from:)()
{
  return MEMORY[0x1F41845C0]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x1F41886C0]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x1F41886D0]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x1F41886E0]();
}

uint64_t static os_log_type_t.fault.getter()
{
  return MEMORY[0x1F41886E8]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x1F4186FD8]();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return MEMORY[0x1F4186FF0]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x1F41870A0]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x1F4187100]();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x1F41874A8](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x1F41874C0]();
}

uint64_t NSObject.hash(into:)()
{
  return MEMORY[0x1F41874D0]();
}

uint64_t NSObject.hashValue.getter()
{
  return MEMORY[0x1F41874E0]();
}

uint64_t OS_os_log.init(subsystem:category:)()
{
  return MEMORY[0x1F4188758]();
}

uint64_t Optional._bridgeToObjectiveC()()
{
  return MEMORY[0x1F4184638]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x1F4184640]();
}

Swift::String __swiftcall Substring.lowercased()()
{
  uint64_t v0 = MEMORY[0x1F41846D8]();
  result._uint64_t object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall Substring.uppercased()()
{
  uint64_t v0 = MEMORY[0x1F41846E8]();
  result._uint64_t object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t Substring.UnicodeScalarView.index(after:)()
{
  return MEMORY[0x1F41846F0]();
}

uint64_t Substring.UnicodeScalarView.index(before:)()
{
  return MEMORY[0x1F41846F8]();
}

uint64_t Substring.UnicodeScalarView.index(_:offsetBy:)()
{
  return MEMORY[0x1F4184700]();
}

uint64_t Substring.UnicodeScalarView.formIndex(after:)()
{
  return MEMORY[0x1F4184708]();
}

uint64_t Substring.UnicodeScalarView.formIndex(before:)()
{
  return MEMORY[0x1F4184710]();
}

uint64_t Substring.UnicodeScalarView.subscript.getter()
{
  return MEMORY[0x1F4184718]();
}

uint64_t Substring.index(after:)()
{
  return MEMORY[0x1F4184720]();
}

uint64_t Substring.index(before:)()
{
  return MEMORY[0x1F4184728]();
}

uint64_t Substring.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1F4184730]();
}

uint64_t Substring.index(_:offsetBy:)()
{
  return MEMORY[0x1F4184738]();
}

uint64_t Substring.UTF8View.index(after:)()
{
  return MEMORY[0x1F4184740]();
}

uint64_t Substring.UTF8View.index(before:)()
{
  return MEMORY[0x1F4184748]();
}

uint64_t Substring.UTF8View.index(_:offsetBy:)()
{
  return MEMORY[0x1F4184758]();
}

uint64_t Substring.UTF8View.distance(from:to:)()
{
  return MEMORY[0x1F4184760]();
}

uint64_t Substring.UTF8View.subscript.getter()
{
  return MEMORY[0x1F4184768]();
}

uint64_t Substring.distance(from:to:)()
{
  return MEMORY[0x1F4184770]();
}

uint64_t Substring.subscript.getter()
{
  return MEMORY[0x1F4184780]();
}

{
  return MEMORY[0x1F4184790]();
}

uint64_t Substring.init(_:)()
{
  return MEMORY[0x1F4184788]();
}

uint64_t Substring.init<A>(_:)()
{
  return MEMORY[0x1F4184798]();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return MEMORY[0x1F41847A0]();
}

uint64_t UInt.hashValue.getter()
{
  return MEMORY[0x1F41847A8]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x1F41847C0]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x1F4184820]();
}

uint64_t dispatch thunk of Strideable.distance(to:)()
{
  return MEMORY[0x1F4184838]();
}

uint64_t static Strideable._step(after:from:by:)()
{
  return MEMORY[0x1F4184848]();
}

uint64_t dispatch thunk of StringProtocol.unicodeScalars.getter()
{
  return MEMORY[0x1F4184858]();
}

uint64_t dispatch thunk of StringProtocol.utf8.getter()
{
  return MEMORY[0x1F4184860]();
}

uint64_t dispatch thunk of StringProtocol.utf16.getter()
{
  return MEMORY[0x1F4184868]();
}

uint64_t dispatch thunk of StringProtocol.hasSuffix(_:)()
{
  return MEMORY[0x1F4184878]();
}

uint64_t StringProtocol._toUTF16Index(_:)()
{
  return MEMORY[0x1F4184880]();
}

uint64_t StringProtocol._toUTF16Offset(_:)()
{
  return MEMORY[0x1F4184888]();
}

uint64_t StringProtocol._toUTF16Indices(_:)()
{
  return MEMORY[0x1F4184890]();
}

uint64_t StringProtocol._toUTF16Offsets(_:)()
{
  return MEMORY[0x1F4184898]();
}

uint64_t StringProtocol._ephemeralString.getter()
{
  return MEMORY[0x1F41848A0]();
}

uint64_t dispatch thunk of BinaryInteger.isMultiple(of:)()
{
  return MEMORY[0x1F41848B8]();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)()
{
  return MEMORY[0x1F41848C0]();
}

uint64_t dispatch thunk of static BinaryInteger./= infix(_:_:)()
{
  return MEMORY[0x1F4184900]();
}

uint64_t dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)()
{
  return MEMORY[0x1F4184908]();
}

uint64_t dispatch thunk of BinaryInteger.words.getter()
{
  return MEMORY[0x1F4184928]();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(exactly:)()
{
  return MEMORY[0x1F4184930]();
}

uint64_t dispatch thunk of BinaryInteger._lowWord.getter()
{
  return MEMORY[0x1F4184938]();
}

uint64_t dispatch thunk of BinaryInteger.bitWidth.getter()
{
  return MEMORY[0x1F4184940]();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(clamping:)()
{
  return MEMORY[0x1F4184948]();
}

uint64_t dispatch thunk of static BinaryInteger.isSigned.getter()
{
  return MEMORY[0x1F4184950]();
}

uint64_t BinaryInteger.description.getter()
{
  return MEMORY[0x1F4184958]();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(_:)()
{
  return MEMORY[0x1F4184970]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x1F4184978]();
}

uint64_t dispatch thunk of AnyKeyPath._kvcKeyPathString.getter()
{
  return MEMORY[0x1F4184988]();
}

uint64_t AnyKeyPath.debugDescription.getter()
{
  return MEMORY[0x1F4184990]();
}

uint64_t dispatch thunk of static AnyKeyPath._rootAndValueType.getter()
{
  return MEMORY[0x1F4184998]();
}

uint64_t dispatch thunk of AnyKeyPath._storedInlineOffset.getter()
{
  return MEMORY[0x1F41849A0]();
}

uint64_t static AnyKeyPath.== infix(_:_:)()
{
  return MEMORY[0x1F41849A8]();
}

uint64_t type metadata accessor for AnyKeyPath()
{
  return MEMORY[0x1F41849B0]();
}

uint64_t type metadata accessor for ArraySlice()
{
  return MEMORY[0x1F4184A40]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x1F4184B18]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x1F4184B20]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x1F4184B30]();
}

uint64_t _NativeSet._unsafeInsertNew(_:)()
{
  return MEMORY[0x1F4184B38]();
}

uint64_t _NativeSet.bridged()()
{
  return MEMORY[0x1F4184B40]();
}

uint64_t type metadata accessor for _NativeSet()
{
  return MEMORY[0x1F4184B50]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x1F4184B60]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x1F4184B90]();
}

uint64_t __CocoaSet.member(for:)()
{
  return MEMORY[0x1F4184BA8]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x1F4184BC0]();
}

uint64_t debugPrint<A>(_:separator:terminator:to:)()
{
  return MEMORY[0x1F4184BF8]();
}

uint64_t withVaList<A>(_:_:)()
{
  return MEMORY[0x1F4184C08]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x1F4184C18](seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return MEMORY[0x1F4184C20]();
}

uint64_t AnyHashable.base.getter()
{
  return MEMORY[0x1F4184C28]();
}

uint64_t AnyHashable.hash(into:)()
{
  return MEMORY[0x1F4184C30]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x1F4184C38]();
}

uint64_t static CommandLine.arguments.getter()
{
  return MEMORY[0x1F4184C88]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x1F4184C90]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1F4184C98]();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return MEMORY[0x1F4184CA0]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x1F4184CA8]();
}

uint64_t type metadata accessor for _SetStorage()
{
  return MEMORY[0x1F4184CB0]();
}

uint64_t _StringGuts.fastUTF8Scalar(startingAt:)()
{
  return MEMORY[0x1F4184CB8]();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return MEMORY[0x1F4184CC0]();
}

uint64_t _StringGuts._isContiguousASCII.getter()
{
  return MEMORY[0x1F4184CC8]();
}

Swift::Int __swiftcall _StringGuts.fastUTF8ScalarLength(endingAt:)(Swift::Int endingAt)
{
  return MEMORY[0x1F4184CD8](endingAt);
}

uint64_t _StringGuts.foreignErrorCorrectedScalar(startingAt:)()
{
  return MEMORY[0x1F4184CE0]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x1F4184CF0]();
}

uint64_t StaticString.description.getter()
{
  return MEMORY[0x1F4184D20]();
}

uint64_t _ArrayBuffer.requestNativeBuffer()()
{
  return MEMORY[0x1F4184D58]();
}

uint64_t _ArrayBuffer._copyContents(subRange:initializing:)()
{
  return MEMORY[0x1F4184D68]();
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x1F4184D78]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x1F4184D80]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1F4184D88]();
}

uint64_t _ArrayBuffer.capacity.getter()
{
  return MEMORY[0x1F4184D90]();
}

uint64_t static DecodingError.dataCorruptedError(in:debugDescription:)()
{
  return MEMORY[0x1F4184DB0]();
}

{
  return MEMORY[0x1F4184DB8]();
}

uint64_t static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)()
{
  return MEMORY[0x1F4184DC0]();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x1F4184DD0]();
}

uint64_t type metadata accessor for DecodingError()
{
  return MEMORY[0x1F4184DF0]();
}

uint64_t EncodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x1F4184DF8]();
}

uint64_t type metadata accessor for EncodingError()
{
  return MEMORY[0x1F4184E18]();
}

uint64_t type metadata accessor for ManagedBuffer()
{
  return MEMORY[0x1F4184E38]();
}

uint64_t dispatch thunk of static SignedNumeric.- prefix(_:)()
{
  return MEMORY[0x1F4184E50]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t _decodeScalar(_:startingAt:)()
{
  return MEMORY[0x1F4184E70]();
}

uint64_t type metadata accessor for PartialKeyPath()
{
  return MEMORY[0x1F4184E88]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x1F4184EC8]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x1F4184ED8]();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x1F4184EF0]();
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1F4184F00]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x1F4184F28]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1F4184F30]();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return MEMORY[0x1F4184F70]();
}

uint64_t dispatch thunk of _AnySequenceBox._makeIterator()()
{
  return MEMORY[0x1F4184FF8]();
}

uint64_t __VaListBuilder.deallocStorage(wordCount:storage:)()
{
  return MEMORY[0x1F4185030]();
}

uint64_t __VaListBuilder.va_list()()
{
  return MEMORY[0x1F4185038]();
}

uint64_t type metadata accessor for __VaListBuilder()
{
  return MEMORY[0x1F4185040]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x1F4185050]();
}

uint64_t type metadata accessor for PartialRangeFrom()
{
  return MEMORY[0x1F4185070]();
}

uint64_t type metadata accessor for PartialRangeUpTo()
{
  return MEMORY[0x1F4185078]();
}

uint64_t CodingUserInfoKey.init(rawValue:)()
{
  return MEMORY[0x1F41850B0]();
}

uint64_t type metadata accessor for CodingUserInfoKey()
{
  return MEMORY[0x1F41850C0]();
}

uint64_t dispatch thunk of FixedWidthInteger.addingReportingOverflow(_:)()
{
  return MEMORY[0x1F4185100]();
}

uint64_t dispatch thunk of FixedWidthInteger.multipliedReportingOverflow(by:)()
{
  return MEMORY[0x1F4185108]();
}

uint64_t dispatch thunk of FixedWidthInteger.subtractingReportingOverflow(_:)()
{
  return MEMORY[0x1F4185110]();
}

uint64_t dispatch thunk of static FixedWidthInteger.max.getter()
{
  return MEMORY[0x1F4185118]();
}

uint64_t FixedWidthInteger.init<A>(exactly:)()
{
  return MEMORY[0x1F4185158]();
}

uint64_t _NativeDictionary._unsafeInsertNew(key:value:)()
{
  return MEMORY[0x1F41851B0]();
}

uint64_t _NativeDictionary.bridged()()
{
  return MEMORY[0x1F41851D0]();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return MEMORY[0x1F41851F8]();
}

uint64_t __CocoaDictionary.count.getter()
{
  return MEMORY[0x1F4185238]();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return MEMORY[0x1F4185270]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x1F4185298]();
}

{
  return MEMORY[0x1F41852A0]();
}

uint64_t _bridgeCocoaArray<A>(_:)()
{
  return MEMORY[0x1F41852B0]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)()
{
  return MEMORY[0x1F41852C0]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.- infix(_:_:)()
{
  return MEMORY[0x1F41852C8]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x1F4185350]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x1F4185368]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1F4185370]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x1F4185380]();
}

uint64_t type metadata accessor for _DictionaryStorage()
{
  return MEMORY[0x1F4185388]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x1F4185398]();
}

uint64_t type metadata accessor for PartialRangeThrough()
{
  return MEMORY[0x1F41853A0]();
}

uint64_t dispatch thunk of _AnyIteratorBoxBase.next()()
{
  return MEMORY[0x1F41853A8]();
}

uint64_t type metadata accessor for CollectionDifference.Change()
{
  return MEMORY[0x1F41853D0]();
}

uint64_t type metadata accessor for CollectionDifference()
{
  return MEMORY[0x1F41853E0]();
}

uint64_t CollectionDifference.init<A>(_:)()
{
  return MEMORY[0x1F41853F8]();
}

uint64_t dispatch thunk of _ObjectiveCBridgeable._bridgeToObjectiveC()()
{
  return MEMORY[0x1F41854B0]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x1F41854C8](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)()
{
  return MEMORY[0x1F41854D0]();
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x1F41854D8]();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return MEMORY[0x1F41854E0]();
}

uint64_t KeyedDecodingContainer.superDecoder(forKey:)()
{
  return MEMORY[0x1F41854E8]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x1F41854F8]();
}

{
  return MEMORY[0x1F4185500]();
}

{
  return MEMORY[0x1F4185508]();
}

{
  return MEMORY[0x1F4185518]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x1F4185528]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x1F4185568]();
}

{
  return MEMORY[0x1F4185570]();
}

{
  return MEMORY[0x1F4185578]();
}

{
  return MEMORY[0x1F4185580]();
}

{
  return MEMORY[0x1F4185588]();
}

{
  return MEMORY[0x1F4185590]();
}

{
  return MEMORY[0x1F41855B0]();
}

{
  return MEMORY[0x1F41855B8]();
}

{
  return MEMORY[0x1F41855D0]();
}

{
  return MEMORY[0x1F41855D8]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x1F4185598]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x1F41855E0]();
}

uint64_t KeyedDecodingContainer.contains(_:)()
{
  return MEMORY[0x1F41855E8]();
}

uint64_t type metadata accessor for KeyedDecodingContainer()
{
  return MEMORY[0x1F41855F0]();
}

uint64_t KeyedDecodingContainer.init<A>(_:)()
{
  return MEMORY[0x1F41855F8]();
}

uint64_t KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)()
{
  return MEMORY[0x1F4185600]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x1F4185608]();
}

uint64_t KeyedEncodingContainer.codingPath.getter()
{
  return MEMORY[0x1F4185610]();
}

uint64_t KeyedEncodingContainer.superEncoder(forKey:)()
{
  return MEMORY[0x1F4185618]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x1F4185628]();
}

{
  return MEMORY[0x1F4185630]();
}

{
  return MEMORY[0x1F4185638]();
}

{
  return MEMORY[0x1F4185648]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x1F4185658]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x1F4185690]();
}

{
  return MEMORY[0x1F4185698]();
}

{
  return MEMORY[0x1F41856A0]();
}

{
  return MEMORY[0x1F41856A8]();
}

{
  return MEMORY[0x1F41856B0]();
}

{
  return MEMORY[0x1F41856B8]();
}

{
  return MEMORY[0x1F41856D8]();
}

{
  return MEMORY[0x1F41856E0]();
}

{
  return MEMORY[0x1F41856F8]();
}

{
  return MEMORY[0x1F4185700]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x1F41856C0]();
}

uint64_t type metadata accessor for KeyedEncodingContainer()
{
  return MEMORY[0x1F4185710]();
}

uint64_t KeyedEncodingContainer.init<A>(_:)()
{
  return MEMORY[0x1F4185718]();
}

uint64_t _ContiguousArrayBuffer._asCocoaArray()()
{
  return MEMORY[0x1F4185720]();
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1F4185730]();
}

uint64_t type metadata accessor for __SwiftDeferredNSArray()
{
  return MEMORY[0x1F4185738]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x1F4185740](a1);
}

uint64_t _stringCompareInternal(_:_:_:_:expecting:)()
{
  return MEMORY[0x1F4185748]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x1F4185758]();
}

uint64_t type metadata accessor for _ContiguousArrayStorage()
{
  return MEMORY[0x1F4185768]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)()
{
  return MEMORY[0x1F4185780]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.superDecoder()()
{
  return MEMORY[0x1F41857A0]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent(_:)()
{
  return MEMORY[0x1F41857A8]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.count.getter()
{
  return MEMORY[0x1F41857B8]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.decode(_:)()
{
  return MEMORY[0x1F41857C0]();
}

{
  return MEMORY[0x1F41857E0]();
}

{
  return MEMORY[0x1F4185800]();
}

{
  return MEMORY[0x1F4185808]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)()
{
  return MEMORY[0x1F41857F0]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter()
{
  return MEMORY[0x1F4185818]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.decodeNil()()
{
  return MEMORY[0x1F4185820]();
}

uint64_t UnkeyedDecodingContainer.decodeIfPresent(_:)()
{
  return MEMORY[0x1F4185828]();
}

{
  return MEMORY[0x1F4185830]();
}

{
  return MEMORY[0x1F4185838]();
}

{
  return MEMORY[0x1F4185840]();
}

{
  return MEMORY[0x1F4185848]();
}

{
  return MEMORY[0x1F4185858]();
}

{
  return MEMORY[0x1F4185860]();
}

uint64_t UnkeyedDecodingContainer.decodeIfPresent<A>(_:)()
{
  return MEMORY[0x1F4185850]();
}

uint64_t UnkeyedDecodingContainer.decode(_:)()
{
  return MEMORY[0x1F4185868]();
}

{
  return MEMORY[0x1F4185870]();
}

uint64_t dispatch thunk of UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)()
{
  return MEMORY[0x1F4185878]();
}

uint64_t dispatch thunk of UnkeyedEncodingContainer.superEncoder()()
{
  return MEMORY[0x1F4185890]();
}

uint64_t dispatch thunk of UnkeyedEncodingContainer.encode<A>(contentsOf:)()
{
  return MEMORY[0x1F41858A0]();
}

{
  return MEMORY[0x1F41858A8]();
}

uint64_t dispatch thunk of UnkeyedEncodingContainer.encode(_:)()
{
  return MEMORY[0x1F41858B0]();
}

{
  return MEMORY[0x1F41858D0]();
}

{
  return MEMORY[0x1F41858F0]();
}

uint64_t dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)()
{
  return MEMORY[0x1F41858D8]();
}

uint64_t dispatch thunk of UnkeyedEncodingContainer.encodeNil()()
{
  return MEMORY[0x1F4185900]();
}

uint64_t UnkeyedEncodingContainer.encodeConditional<A>(_:)()
{
  return MEMORY[0x1F4185908]();
}

uint64_t UnkeyedEncodingContainer.encode<A>(contentsOf:)()
{
  return MEMORY[0x1F4185910]();
}

{
  return MEMORY[0x1F4185918]();
}

{
  return MEMORY[0x1F4185920]();
}

{
  return MEMORY[0x1F4185928]();
}

{
  return MEMORY[0x1F4185930]();
}

{
  return MEMORY[0x1F4185938]();
}

{
  return MEMORY[0x1F4185940]();
}

{
  return MEMORY[0x1F4185948]();
}

{
  return MEMORY[0x1F4185950]();
}

{
  return MEMORY[0x1F4185958]();
}

{
  return MEMORY[0x1F4185960]();
}

{
  return MEMORY[0x1F4185968]();
}

{
  return MEMORY[0x1F4185970]();
}

{
  return MEMORY[0x1F4185978]();
}

{
  return MEMORY[0x1F4185980]();
}

{
  return MEMORY[0x1F4185988]();
}

{
  return MEMORY[0x1F4185990]();
}

uint64_t UnkeyedEncodingContainer.encode(_:)()
{
  return MEMORY[0x1F4185998]();
}

{
  return MEMORY[0x1F41859A0]();
}

uint64_t _getErrorEmbeddedNSError<A>(_:)()
{
  return MEMORY[0x1F41859A8]();
}

uint64_t dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)()
{
  return MEMORY[0x1F41859B8]();
}

uint64_t static FloatingPointRoundingRule.== infix(_:_:)()
{
  return MEMORY[0x1F41859C0]();
}

uint64_t type metadata accessor for FloatingPointRoundingRule()
{
  return MEMORY[0x1F41859C8]();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return MEMORY[0x1F41859F8]();
}

Swift::Void __swiftcall DefaultStringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t DefaultStringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return MEMORY[0x1F4185A08]();
}

uint64_t dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)()
{
  return MEMORY[0x1F4185A20]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x1F4185A30]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t dispatch thunk of CustomDebugStringConvertible.debugDescription.getter()
{
  return MEMORY[0x1F4185A48]();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode(_:)()
{
  return MEMORY[0x1F4185A58]();
}

{
  return MEMORY[0x1F4185A60]();
}

{
  return MEMORY[0x1F4185A68]();
}

{
  return MEMORY[0x1F4185A78]();
}

{
  return MEMORY[0x1F4185A80]();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)()
{
  return MEMORY[0x1F4185A88]();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decodeNil()()
{
  return MEMORY[0x1F4185AC0]();
}

uint64_t SingleValueDecodingContainer.decode(_:)()
{
  return MEMORY[0x1F4185AC8]();
}

{
  return MEMORY[0x1F4185AD0]();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encode(_:)()
{
  return MEMORY[0x1F4185AF0]();
}

{
  return MEMORY[0x1F4185AF8]();
}

{
  return MEMORY[0x1F4185B00]();
}

{
  return MEMORY[0x1F4185B10]();
}

{
  return MEMORY[0x1F4185B18]();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)()
{
  return MEMORY[0x1F4185B20]();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encodeNil()()
{
  return MEMORY[0x1F4185B68]();
}

uint64_t SingleValueEncodingContainer.encode(_:)()
{
  return MEMORY[0x1F4185B70]();
}

{
  return MEMORY[0x1F4185B78]();
}

uint64_t dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter()
{
  return MEMORY[0x1F4185B90]();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return MEMORY[0x1F4185B98]();
}

uint64_t KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x1F4185BE8]();
}

{
  return MEMORY[0x1F4185BF0]();
}

{
  return MEMORY[0x1F4185BF8]();
}

{
  return MEMORY[0x1F4185C00]();
}

{
  return MEMORY[0x1F4185C08]();
}

{
  return MEMORY[0x1F4185C18]();
}

{
  return MEMORY[0x1F4185C20]();
}

uint64_t KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x1F4185C10]();
}

uint64_t KeyedDecodingContainerProtocol.decode(_:forKey:)()
{
  return MEMORY[0x1F4185C28]();
}

{
  return MEMORY[0x1F4185C30]();
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x1F4185C88]();
}

{
  return MEMORY[0x1F4185C90]();
}

{
  return MEMORY[0x1F4185C98]();
}

{
  return MEMORY[0x1F4185CA0]();
}

{
  return MEMORY[0x1F4185CA8]();
}

{
  return MEMORY[0x1F4185CB8]();
}

{
  return MEMORY[0x1F4185CC0]();
}

{
  return MEMORY[0x1F4185CC8]();
}

{
  return MEMORY[0x1F4185CD0]();
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x1F4185CB0]();
}

uint64_t KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:)()
{
  return MEMORY[0x1F4185CD8]();
}

uint64_t KeyedEncodingContainerProtocol.encode(_:forKey:)()
{
  return MEMORY[0x1F4185CE0]();
}

{
  return MEMORY[0x1F4185CE8]();
}

uint64_t _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)()
{
  return MEMORY[0x1F4185D30]();
}

uint64_t _copyCollectionToContiguousArray<A>(_:)()
{
  return MEMORY[0x1F4185D38]();
}

uint64_t _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)()
{
  return MEMORY[0x1F4185D40]();
}

uint64_t dispatch thunk of _ExpressibleByBuiltinFloatLiteral.init(_builtinFloatLiteral:)()
{
  return MEMORY[0x1F4185D48]();
}

uint64_t dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)()
{
  return MEMORY[0x1F4185D58]();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return MEMORY[0x1F4185D68]();
}

uint64_t _bridgeNonVerbatimFromObjectiveCConditional<A>(_:_:_:)()
{
  return MEMORY[0x1F4185DA8]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1F4185DD8]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1F4185DE0]();
}

uint64_t dispatch thunk of Error._code.getter()
{
  return MEMORY[0x1F4185DE8]();
}

uint64_t dispatch thunk of Error._domain.getter()
{
  return MEMORY[0x1F4185DF0]();
}

uint64_t type metadata accessor for Slice()
{
  return MEMORY[0x1F4185E78]();
}

uint64_t static Hasher._hash(seed:bytes:count:)()
{
  return MEMORY[0x1F4185E98]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x1F4185EA8]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x1F4185EB0]();
}

uint64_t Hasher.combine(bytes:)()
{
  return MEMORY[0x1F4185EB8]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
}

Swift::Int __swiftcall Hasher.finalize()()
{
  return MEMORY[0x1F4185EF0]();
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t Hasher.init()()
{
  return MEMORY[0x1F4185F00]();
}

uint64_t Mirror.init(reflecting:)()
{
  return MEMORY[0x1F4185F10]();
}

uint64_t type metadata accessor for Mirror.DisplayStyle()
{
  return MEMORY[0x1F4185F28]();
}

uint64_t type metadata accessor for Mirror.AncestorRepresentation()
{
  return MEMORY[0x1F4185F38]();
}

uint64_t Mirror.children.getter()
{
  return MEMORY[0x1F4185F40]();
}

uint64_t type metadata accessor for Mirror()
{
  return MEMORY[0x1F4185F48]();
}

uint64_t Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)()
{
  return MEMORY[0x1F4185F50]();
}

uint64_t Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)()
{
  return MEMORY[0x1F4185F58]();
}

uint64_t Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)()
{
  return MEMORY[0x1F4185F60]();
}

uint64_t dispatch thunk of CVarArg._cVarArgEncoding.getter()
{
  return MEMORY[0x1F4185FA0]();
}

uint64_t dispatch thunk of Decoder.codingPath.getter()
{
  return MEMORY[0x1F4185FA8]();
}

uint64_t dispatch thunk of Decoder.unkeyedContainer()()
{
  return MEMORY[0x1F4185FB0]();
}

uint64_t dispatch thunk of Decoder.singleValueContainer()()
{
  return MEMORY[0x1F4185FB8]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1F4185FC8]();
}

uint64_t dispatch thunk of Encoder.unkeyedContainer()()
{
  return MEMORY[0x1F4185FD8]();
}

uint64_t dispatch thunk of Encoder.singleValueContainer()()
{
  return MEMORY[0x1F4185FE0]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1F4185FF0]();
}

uint64_t type metadata accessor for KeyPath()
{
  return MEMORY[0x1F4186008]();
}

uint64_t type metadata accessor for Unicode.GeneralCategory()
{
  return MEMORY[0x1F4186018]();
}

uint64_t static Unicode.CanonicalCombiningClass.notReordered.getter()
{
  return MEMORY[0x1F4186020]();
}

uint64_t static Unicode.CanonicalCombiningClass.== infix(_:_:)()
{
  return MEMORY[0x1F4186028]();
}

uint64_t Unicode.CanonicalCombiningClass.rawValue.getter()
{
  return MEMORY[0x1F4186030]();
}

uint64_t type metadata accessor for Unicode.CanonicalCombiningClass()
{
  return MEMORY[0x1F4186038]();
}

Swift::UInt8 __swiftcall Unicode.UTF8.ForwardParser._invalidLength()()
{
  return MEMORY[0x1F4186040]();
}

uint64_t type metadata accessor for Unicode._NFD.Iterator()
{
  return MEMORY[0x1F4186058]();
}

uint64_t type metadata accessor for Unicode._NFD()
{
  return MEMORY[0x1F4186060]();
}

uint64_t Unicode.Scalar.Properties._caseFolded.getter()
{
  return MEMORY[0x1F4186068]();
}

uint64_t Unicode.Scalar.Properties.isWhitespace.getter()
{
  return MEMORY[0x1F4186080]();
}

uint64_t Unicode.Scalar.Properties.numericValue.getter()
{
  return MEMORY[0x1F4186088]();
}

uint64_t Unicode.Scalar.Properties.generalCategory.getter()
{
  return MEMORY[0x1F41860A0]();
}

uint64_t Unicode.Scalar.Properties.lowercaseMapping.getter()
{
  return MEMORY[0x1F41860A8]();
}

uint64_t Unicode.Scalar.Properties.titlecaseMapping.getter()
{
  return MEMORY[0x1F41860B0]();
}

uint64_t Unicode.Scalar.Properties.canonicalCombiningClass.getter()
{
  return MEMORY[0x1F41860D0]();
}

uint64_t type metadata accessor for Unicode.Scalar.Properties()
{
  return MEMORY[0x1F41860E8]();
}

uint64_t Unicode.Scalar.properties.getter()
{
  return MEMORY[0x1F41860F0]();
}

uint64_t Unicode.Scalar.UTF8View.subscript.getter()
{
  return MEMORY[0x1F4186108]();
}

uint64_t Unicode.Scalar.UTF16View.subscript.getter()
{
  return MEMORY[0x1F4186110]();
}

uint64_t Duration.components.getter()
{
  return MEMORY[0x1F4186130]();
}

uint64_t Duration.init(secondsComponent:attosecondsComponent:)()
{
  return MEMORY[0x1F4186148]();
}

uint64_t static Duration./ infix<A>(_:_:)()
{
  return MEMORY[0x1F4186150]();
}

uint64_t static Duration./ infix(_:_:)()
{
  return MEMORY[0x1F4186158]();
}

uint64_t static Duration.< infix(_:_:)()
{
  return MEMORY[0x1F4186160]();
}

uint64_t static Duration.* infix(_:_:)()
{
  return MEMORY[0x1F4186168]();
}

uint64_t static Duration.* infix<A>(_:_:)()
{
  return MEMORY[0x1F4186170]();
}

uint64_t static Duration.+ infix(_:_:)()
{
  return MEMORY[0x1F4186178]();
}

uint64_t static Duration.- infix(_:_:)()
{
  return MEMORY[0x1F4186180]();
}

uint64_t static Duration.== infix(_:_:)()
{
  return MEMORY[0x1F4186188]();
}

uint64_t static Duration.-= infix(_:_:)()
{
  return MEMORY[0x1F4186190]();
}

uint64_t static Duration.zero.getter()
{
  return MEMORY[0x1F41861A0]();
}

uint64_t static Duration.seconds(_:)()
{
  return MEMORY[0x1F41861A8]();
}

uint64_t RangeSet.ranges.getter()
{
  return MEMORY[0x1F4186208]();
}

uint64_t RangeSet.init<A>(_:)()
{
  return MEMORY[0x1F4186260]();
}

uint64_t _Pointer.debugDescription.getter()
{
  return MEMORY[0x1F4186278]();
}

uint64_t dispatch thunk of CodingKey.stringValue.getter()
{
  return MEMORY[0x1F4186288]();
}

uint64_t dispatch thunk of CodingKey.init(stringValue:)()
{
  return MEMORY[0x1F4186290]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x1F4186318]();
}

uint64_t getVaList(_:)()
{
  return MEMORY[0x1F4186320]();
}

CFAbsoluteTime CFAbsoluteTimeAddGregorianUnits(CFAbsoluteTime at, CFTimeZoneRef tz, CFGregorianUnits *units)
{
  MEMORY[0x1F40D70A0](tz, units, at);
  return result;
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

SInt32 CFAbsoluteTimeGetDayOfWeek(CFAbsoluteTime at, CFTimeZoneRef tz)
{
  return MEMORY[0x1F40D70B8](tz, at);
}

SInt32 CFAbsoluteTimeGetDayOfYear(CFAbsoluteTime at, CFTimeZoneRef tz)
{
  return MEMORY[0x1F40D70C0](tz, at);
}

CFGregorianUnits *__cdecl CFAbsoluteTimeGetDifferenceAsGregorianUnits(CFGregorianUnits *__return_ptr retstr, CFAbsoluteTime at1, CFAbsoluteTime at2, CFTimeZoneRef tz, CFOptionFlags unitFlags)
{
  return (CFGregorianUnits *)MEMORY[0x1F40D70C8](retstr, tz, unitFlags, at1, at2);
}

CFGregorianDate CFAbsoluteTimeGetGregorianDate(CFAbsoluteTime at, CFTimeZoneRef tz)
{
  uint64_t v2 = MEMORY[0x1F40D70D8](tz, at);
  result.second = v3;
  result.year = v2;
  result.month = BYTE4(v2);
  result.dadouble y = BYTE5(v2);
  result.hour = BYTE6(v2);
  result.minute = HIBYTE(v2);
  return result;
}

uint64_t CFAllocatorAllocateTyped()
{
  return MEMORY[0x1F40D70F0]();
}

CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context)
{
  return (CFAllocatorRef)MEMORY[0x1F40D70F8](allocator, context);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D7160](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D71C8](theArray, range.location, range.length, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
{
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

void CFArrayReplaceValues(CFMutableArrayRef theArray, CFRange range, const void **newValues, CFIndex newCount)
{
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

CFAttributedStringRef CFAttributedStringCreateCopy(CFAllocatorRef alloc, CFAttributedStringRef aStr)
{
  return (CFAttributedStringRef)MEMORY[0x1F40D7248](alloc, aStr);
}

CFMutableAttributedStringRef CFAttributedStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFAttributedStringRef aStr)
{
  return (CFMutableAttributedStringRef)MEMORY[0x1F40D7258](alloc, maxLength, aStr);
}

CFAttributedStringRef CFAttributedStringCreateWithSubstring(CFAllocatorRef alloc, CFAttributedStringRef aStr, CFRange range)
{
  return (CFAttributedStringRef)MEMORY[0x1F40D7260](alloc, aStr, range.location, range.length);
}

CFTypeRef CFAttributedStringGetAttribute(CFAttributedStringRef aStr, CFIndex loc, CFStringRef attrName, CFRange *effectiveRange)
{
  return (CFTypeRef)MEMORY[0x1F40D7270](aStr, loc, attrName, effectiveRange);
}

CFTypeRef CFAttributedStringGetAttributeAndLongestEffectiveRange(CFAttributedStringRef aStr, CFIndex loc, CFStringRef attrName, CFRange inRange, CFRange *longestEffectiveRange)
{
  return (CFTypeRef)MEMORY[0x1F40D7278](aStr, loc, attrName, inRange.location, inRange.length, longestEffectiveRange);
}

CFDictionaryRef CFAttributedStringGetAttributes(CFAttributedStringRef aStr, CFIndex loc, CFRange *effectiveRange)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7280](aStr, loc, effectiveRange);
}

CFDictionaryRef CFAttributedStringGetAttributesAndLongestEffectiveRange(CFAttributedStringRef aStr, CFIndex loc, CFRange inRange, CFRange *longestEffectiveRange)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7288](aStr, loc, inRange.location, inRange.length, longestEffectiveRange);
}

CFStringRef CFAttributedStringGetString(CFAttributedStringRef aStr)
{
  return (CFStringRef)MEMORY[0x1F40D72A0](aStr);
}

CFTypeID CFAttributedStringGetTypeID(void)
{
  return MEMORY[0x1F40D72A8]();
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1F40D72D8](arg);
}

void CFBagAddValue(CFMutableBagRef theBag, const void *value)
{
}

CFMutableBagRef CFBagCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFBagCallBacks *callBacks)
{
  return (CFMutableBagRef)MEMORY[0x1F40D7308](allocator, capacity, callBacks);
}

CFIndex CFBagGetCountOfValue(CFBagRef theBag, const void *value)
{
  return MEMORY[0x1F40D7320](theBag, value);
}

CFTypeID CFBagGetTypeID(void)
{
  return MEMORY[0x1F40D7328]();
}

const void *__cdecl CFBagGetValue(CFBagRef theBag, const void *value)
{
  return (const void *)MEMORY[0x1F40D7330](theBag, value);
}

void CFBagRemoveAllValues(CFMutableBagRef theBag)
{
}

void CFBagRemoveValue(CFMutableBagRef theBag, const void *value)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

CFURLRef CFBundleCopyAuxiliaryExecutableURL(CFBundleRef bundle, CFStringRef executableName)
{
  return (CFURLRef)MEMORY[0x1F40D7438](bundle, executableName);
}

CFURLRef CFBundleCopyBuiltInPlugInsURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1F40D7440](bundle);
}

CFArrayRef CFBundleCopyBundleLocalizations(CFBundleRef bundle)
{
  return (CFArrayRef)MEMORY[0x1F40D7448](bundle);
}

CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1F40D7450](bundle);
}

CFArrayRef CFBundleCopyExecutableArchitectures(CFBundleRef bundle)
{
  return (CFArrayRef)MEMORY[0x1F40D7460](bundle);
}

CFURLRef CFBundleCopyExecutableURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1F40D7470](bundle);
}

uint64_t CFBundleCopyLocalizationForLocalizationInfo()
{
  return MEMORY[0x1F40D7488]();
}

CFArrayRef CFBundleCopyLocalizationsForPreferences(CFArrayRef locArray, CFArrayRef prefArray)
{
  return (CFArrayRef)MEMORY[0x1F40D7490](locArray, prefArray);
}

CFStringRef CFBundleCopyLocalizedString(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName)
{
  return (CFStringRef)MEMORY[0x1F40D74A8](bundle, key, value, tableName);
}

uint64_t CFBundleCopyLocalizedStringForLocalization()
{
  return MEMORY[0x1F40D74B0]();
}

uint64_t CFBundleCopyLocalizedStringTableForLocalization()
{
  return MEMORY[0x1F40D74B8]();
}

CFArrayRef CFBundleCopyPreferredLocalizationsFromArray(CFArrayRef locArray)
{
  return (CFArrayRef)MEMORY[0x1F40D74C0](locArray);
}

CFURLRef CFBundleCopyPrivateFrameworksURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1F40D74C8](bundle);
}

CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x1F40D74D0](bundle, resourceName, resourceType, subDirName);
}

CFURLRef CFBundleCopyResourceURLForLocalization(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName, CFStringRef localizationName)
{
  return (CFURLRef)MEMORY[0x1F40D74D8](bundle, resourceName, resourceType, subDirName, localizationName);
}

CFURLRef CFBundleCopyResourceURLInDirectory(CFURLRef bundleURL, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x1F40D74E0](bundleURL, resourceName, resourceType, subDirName);
}

CFArrayRef CFBundleCopyResourceURLsOfType(CFBundleRef bundle, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFArrayRef)MEMORY[0x1F40D74E8](bundle, resourceType, subDirName);
}

CFArrayRef CFBundleCopyResourceURLsOfTypeForLocalization(CFBundleRef bundle, CFStringRef resourceType, CFStringRef subDirName, CFStringRef localizationName)
{
  return (CFArrayRef)MEMORY[0x1F40D74F0](bundle, resourceType, subDirName, localizationName);
}

CFArrayRef CFBundleCopyResourceURLsOfTypeInDirectory(CFURLRef bundleURL, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFArrayRef)MEMORY[0x1F40D74F8](bundleURL, resourceType, subDirName);
}

CFURLRef CFBundleCopyResourcesDirectoryURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1F40D7500](bundle);
}

CFURLRef CFBundleCopySharedFrameworksURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1F40D7508](bundle);
}

CFURLRef CFBundleCopySharedSupportURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1F40D7510](bundle);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x1F40D7528](allocator, bundleURL);
}

CFStringRef CFBundleGetDevelopmentRegion(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1F40D7550](bundle);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1F40D7568](bundle);
}

CFDictionaryRef CFBundleGetInfoDictionary(CFBundleRef bundle)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7578](bundle);
}

CFDictionaryRef CFBundleGetLocalInfoDictionary(CFBundleRef bundle)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7588](bundle);
}

uint64_t CFBundleGetLocalizationInfoForLocalization()
{
  return MEMORY[0x1F40D7590]();
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x1F40D7598]();
}

CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1F40D75D0](bundle, key);
}

UInt32 CFBundleGetVersionNumber(CFBundleRef bundle)
{
  return MEMORY[0x1F40D75D8](bundle);
}

Boolean CFBundleIsExecutableLoaded(CFBundleRef bundle)
{
  return MEMORY[0x1F40D75E0](bundle);
}

Boolean CFBundlePreflightExecutable(CFBundleRef bundle, CFErrorRef *error)
{
  return MEMORY[0x1F40D7600](bundle, error);
}

void CFBundleUnloadExecutable(CFBundleRef bundle)
{
}

void CFCharacterSetAddCharactersInRange(CFMutableCharacterSetRef theSet, CFRange theRange)
{
}

void CFCharacterSetAddCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString)
{
}

CFDataRef CFCharacterSetCreateBitmapRepresentation(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFDataRef)MEMORY[0x1F40D7700](alloc, theSet);
}

CFCharacterSetRef CFCharacterSetCreateCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7708](alloc, theSet);
}

CFCharacterSetRef CFCharacterSetCreateInvertedSet(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7710](alloc, theSet);
}

CFMutableCharacterSetRef CFCharacterSetCreateMutable(CFAllocatorRef alloc)
{
  return (CFMutableCharacterSetRef)MEMORY[0x1F40D7718](alloc);
}

CFMutableCharacterSetRef CFCharacterSetCreateMutableCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFMutableCharacterSetRef)MEMORY[0x1F40D7720](alloc, theSet);
}

CFCharacterSetRef CFCharacterSetCreateWithBitmapRepresentation(CFAllocatorRef alloc, CFDataRef theData)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7728](alloc, theData);
}

CFCharacterSetRef CFCharacterSetCreateWithCharactersInRange(CFAllocatorRef alloc, CFRange theRange)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7730](alloc, theRange.location, theRange.length);
}

CFCharacterSetRef CFCharacterSetCreateWithCharactersInString(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7738](alloc, theString);
}

CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7740](theSetIdentifier);
}

CFTypeID CFCharacterSetGetTypeID(void)
{
  return MEMORY[0x1F40D7748]();
}

Boolean CFCharacterSetHasMemberInPlane(CFCharacterSetRef theSet, CFIndex thePlane)
{
  return MEMORY[0x1F40D7750](theSet, thePlane);
}

void CFCharacterSetIntersect(CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet)
{
}

void CFCharacterSetInvert(CFMutableCharacterSetRef theSet)
{
}

Boolean CFCharacterSetIsCharacterMember(CFCharacterSetRef theSet, UniChar theChar)
{
  return MEMORY[0x1F40D7770](theSet, theChar);
}

Boolean CFCharacterSetIsLongCharacterMember(CFCharacterSetRef theSet, UTF32Char theChar)
{
  return MEMORY[0x1F40D7778](theSet, *(void *)&theChar);
}

Boolean CFCharacterSetIsSupersetOfSet(CFCharacterSetRef theSet, CFCharacterSetRef theOtherset)
{
  return MEMORY[0x1F40D7780](theSet, theOtherset);
}

void CFCharacterSetRemoveCharactersInRange(CFMutableCharacterSetRef theSet, CFRange theRange)
{
}

void CFCharacterSetRemoveCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString)
{
}

void CFCharacterSetUnion(CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet)
{
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1F40D77A8](cf);
}

uint64_t CFCopyHomeDirectoryURLForUser()
{
  return MEMORY[0x1F40D77B8]();
}

uint64_t CFCopySystemVersionString()
{
  return MEMORY[0x1F40D77C8]();
}

uint64_t CFCopyUserName()
{
  return MEMORY[0x1F40D77D8]();
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1F40D7818](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1F40D7860]();
}

CFTypeRef CFDateFormatterCopyProperty(CFDateFormatterRef formatter, CFDateFormatterKey key)
{
  return (CFTypeRef)MEMORY[0x1F40D78A8](formatter, key);
}

CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle)
{
  return (CFDateFormatterRef)MEMORY[0x1F40D78B0](allocator, locale, dateStyle, timeStyle);
}

CFStringRef CFDateFormatterCreateDateFormatFromTemplate(CFAllocatorRef allocator, CFStringRef tmplate, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringRef)MEMORY[0x1F40D78B8](allocator, tmplate, options, locale);
}

CFDateRef CFDateFormatterCreateDateFromString(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep)
{
  return (CFDateRef)MEMORY[0x1F40D78C8](allocator, formatter, string, rangep);
}

CFDateFormatterRef CFDateFormatterCreateISO8601Formatter(CFAllocatorRef allocator, CFISO8601DateFormatOptions formatOptions)
{
  return (CFDateFormatterRef)MEMORY[0x1F40D78D0](allocator, formatOptions);
}

CFStringRef CFDateFormatterCreateStringWithAbsoluteTime(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFAbsoluteTime at)
{
  return (CFStringRef)MEMORY[0x1F40D78D8](allocator, formatter, at);
}

CFStringRef CFDateFormatterCreateStringWithDate(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFDateRef date)
{
  return (CFStringRef)MEMORY[0x1F40D78E0](allocator, formatter, date);
}

Boolean CFDateFormatterGetAbsoluteTimeFromString(CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep, CFAbsoluteTime *atp)
{
  return MEMORY[0x1F40D78E8](formatter, string, rangep, atp);
}

CFDateFormatterStyle CFDateFormatterGetDateStyle(CFDateFormatterRef formatter)
{
  return MEMORY[0x1F40D78F0](formatter);
}

CFStringRef CFDateFormatterGetFormat(CFDateFormatterRef formatter)
{
  return (CFStringRef)MEMORY[0x1F40D78F8](formatter);
}

CFLocaleRef CFDateFormatterGetLocale(CFDateFormatterRef formatter)
{
  return (CFLocaleRef)MEMORY[0x1F40D7900](formatter);
}

CFDateFormatterStyle CFDateFormatterGetTimeStyle(CFDateFormatterRef formatter)
{
  return MEMORY[0x1F40D7908](formatter);
}

void CFDateFormatterSetFormat(CFDateFormatterRef formatter, CFStringRef formatString)
{
}

void CFDateFormatterSetProperty(CFDateFormatterRef formatter, CFStringRef key, CFTypeRef value)
{
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  MEMORY[0x1F40D7928](theDate);
  return result;
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D79A8](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

uint64_t CFDictionaryGetKeyIfPresent()
{
  return MEMORY[0x1F40D79E0]();
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1F40D7A18](theDict, key, value);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

uint64_t CFErrorCopyCallBackBlockForDomain()
{
  return MEMORY[0x1F40D7A78]();
}

CFDictionaryRef CFErrorCopyUserInfo(CFErrorRef err)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7A90](err);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x1F40D7AA8](err);
}

CFErrorDomain CFErrorGetDomain(CFErrorRef err)
{
  return (CFErrorDomain)MEMORY[0x1F40D7AB8](err);
}

CFTypeID CFErrorGetTypeID(void)
{
  return MEMORY[0x1F40D7AC0]();
}

Boolean CFFileSecurityGetOwner(CFFileSecurityRef fileSec, uid_t *owner)
{
  return MEMORY[0x1F40D7B38](fileSec, owner);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1F40D7B60](cf);
}

CFIndex CFGetRetainCount(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B68](cf);
}

uint64_t CFGetSystemUptime()
{
  return MEMORY[0x1F40D7B70]();
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFAbsoluteTime CFGregorianDateGetAbsoluteTime(CFGregorianDate gdate, CFTimeZoneRef tz)
{
  MEMORY[0x1F40D7B90](*(void *)&gdate.year, *(void *)&gdate.second, tz);
  return result;
}

CFHashCode CFHash(CFTypeRef cf)
{
  return MEMORY[0x1F40D7BA0](cf);
}

uint64_t CFHashBytes()
{
  return MEMORY[0x1F40D7BA8]();
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return (CFLocaleRef)MEMORY[0x1F40D7BB8]();
}

CFStringRef CFLocaleCopyDisplayNameForPropertyValue(CFLocaleRef displayLocale, CFLocaleKey key, CFStringRef value)
{
  return (CFStringRef)MEMORY[0x1F40D7BC0](displayLocale, key, value);
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x1F40D7BE0](allocator, localeIdentifier);
}

CFLocaleIdentifier CFLocaleCreateCanonicalLanguageIdentifierFromString(CFAllocatorRef allocator, CFStringRef localeIdentifier)
{
  return (CFLocaleIdentifier)MEMORY[0x1F40D7BE8](allocator, localeIdentifier);
}

CFLocaleIdentifier CFLocaleCreateCanonicalLocaleIdentifierFromString(CFAllocatorRef allocator, CFStringRef localeIdentifier)
{
  return (CFLocaleIdentifier)MEMORY[0x1F40D7BF8](allocator, localeIdentifier);
}

CFDictionaryRef CFLocaleCreateComponentsFromLocaleIdentifier(CFAllocatorRef allocator, CFLocaleIdentifier localeID)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7C00](allocator, localeID);
}

CFLocaleRef CFLocaleGetSystem(void)
{
  return (CFLocaleRef)MEMORY[0x1F40D7C38]();
}

CFRunLoopSourceRef CFMachPortCreateRunLoopSource(CFAllocatorRef allocator, CFMachPortRef port, CFIndex order)
{
  return (CFRunLoopSourceRef)MEMORY[0x1F40D7C60](allocator, port, order);
}

CFMachPortRef CFMachPortCreateWithPort(CFAllocatorRef allocator, mach_port_t portNum, CFMachPortCallBack callout, CFMachPortContext *context, Boolean *shouldFreeInfo)
{
  return (CFMachPortRef)MEMORY[0x1F40D7C68](allocator, *(void *)&portNum, callout, context, shouldFreeInfo);
}

void CFMachPortGetContext(CFMachPortRef port, CFMachPortContext *context)
{
}

mach_port_t CFMachPortGetPort(CFMachPortRef port)
{
  return MEMORY[0x1F40D7C78](port);
}

CFTypeID CFMachPortGetTypeID(void)
{
  return MEMORY[0x1F40D7C80]();
}

void CFMachPortInvalidate(CFMachPortRef port)
{
}

Boolean CFMachPortIsValid(CFMachPortRef port)
{
  return MEMORY[0x1F40D7C90](port);
}

void CFMachPortSetInvalidationCallBack(CFMachPortRef port, CFMachPortInvalidationCallBack callout)
{
}

uint64_t CFMergeSortArray()
{
  return MEMORY[0x1F40D7CA8]();
}

CFMessagePortRef CFMessagePortCreateLocal(CFAllocatorRef allocator, CFStringRef name, CFMessagePortCallBack callout, CFMessagePortContext *context, Boolean *shouldFreeInfo)
{
  return (CFMessagePortRef)MEMORY[0x1F40D7CB0](allocator, name, callout, context, shouldFreeInfo);
}

CFMessagePortRef CFMessagePortCreateRemote(CFAllocatorRef allocator, CFStringRef name)
{
  return (CFMessagePortRef)MEMORY[0x1F40D7CB8](allocator, name);
}

CFRunLoopSourceRef CFMessagePortCreateRunLoopSource(CFAllocatorRef allocator, CFMessagePortRef local, CFIndex order)
{
  return (CFRunLoopSourceRef)MEMORY[0x1F40D7CC0](allocator, local, order);
}

CFStringRef CFMessagePortGetName(CFMessagePortRef ms)
{
  return (CFStringRef)MEMORY[0x1F40D7CC8](ms);
}

void CFMessagePortInvalidate(CFMessagePortRef ms)
{
}

Boolean CFMessagePortIsValid(CFMessagePortRef ms)
{
  return MEMORY[0x1F40D7CD8](ms);
}

SInt32 CFMessagePortSendRequest(CFMessagePortRef remote, SInt32 msgid, CFDataRef data, CFTimeInterval sendTimeout, CFTimeInterval rcvTimeout, CFStringRef replyMode, CFDataRef *returnData)
{
  return MEMORY[0x1F40D7CE0](remote, *(void *)&msgid, data, replyMode, returnData, sendTimeout, rcvTimeout);
}

Boolean CFMessagePortSetName(CFMessagePortRef ms, CFStringRef newName)
{
  return MEMORY[0x1F40D7CF0](ms, newName);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D08]();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D20]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

CFTypeID CFNullGetTypeID(void)
{
  return MEMORY[0x1F40D7D68]();
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFTypeRef CFNumberFormatterCopyProperty(CFNumberFormatterRef formatter, CFNumberFormatterKey key)
{
  return (CFTypeRef)MEMORY[0x1F40D7D90](formatter, key);
}

CFNumberFormatterRef CFNumberFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFNumberFormatterStyle style)
{
  return (CFNumberFormatterRef)MEMORY[0x1F40D7D98](allocator, locale, style);
}

CFNumberRef CFNumberFormatterCreateNumberFromString(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFStringRef string, CFRange *rangep, CFOptionFlags options)
{
  return (CFNumberRef)MEMORY[0x1F40D7DA0](allocator, formatter, string, rangep, options);
}

CFStringRef CFNumberFormatterCreateStringWithNumber(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFNumberRef number)
{
  return (CFStringRef)MEMORY[0x1F40D7DA8](allocator, formatter, number);
}

CFStringRef CFNumberFormatterGetFormat(CFNumberFormatterRef formatter)
{
  return (CFStringRef)MEMORY[0x1F40D7DC0](formatter);
}

CFLocaleRef CFNumberFormatterGetLocale(CFNumberFormatterRef formatter)
{
  return (CFLocaleRef)MEMORY[0x1F40D7DC8](formatter);
}

CFNumberFormatterStyle CFNumberFormatterGetStyle(CFNumberFormatterRef formatter)
{
  return MEMORY[0x1F40D7DD0](formatter);
}

void CFNumberFormatterSetFormat(CFNumberFormatterRef formatter, CFStringRef formatString)
{
}

void CFNumberFormatterSetProperty(CFNumberFormatterRef formatter, CFNumberFormatterKey key, CFTypeRef value)
{
}

CFIndex CFNumberGetByteSize(CFNumberRef number)
{
  return MEMORY[0x1F40D7DF8](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x1F40D7E30](number);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1F40D7E90](applicationID);
}

Boolean CFPreferencesAppValueIsForced(CFStringRef key, CFStringRef applicationID)
{
  return MEMORY[0x1F40D7E98](key, applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7EA0](key, applicationID);
}

CFArrayRef CFPreferencesCopyApplicationList(CFStringRef userName, CFStringRef hostName)
{
  return (CFArrayRef)MEMORY[0x1F40D7EB0](userName, hostName);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7ED0](key, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE0](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1F40D7F10](applicationID, userName, hostName);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40D7F18](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F50](allocator, data, options, format, error);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F58](allocator, stream, streamLength, options, format, error);
}

Boolean CFPropertyListIsValid(CFPropertyListRef plist, CFPropertyListFormat format)
{
  return MEMORY[0x1F40D7F68](plist, format);
}

CFIndex CFPropertyListWrite(CFPropertyListRef propertyList, CFWriteStreamRef stream, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return MEMORY[0x1F40D7F70](propertyList, stream, format, options, error);
}

CFIndex CFPropertyListWriteToStream(CFPropertyListRef propertyList, CFWriteStreamRef stream, CFPropertyListFormat format, CFStringRef *errorString)
{
  return MEMORY[0x1F40D7F78](propertyList, stream, format, errorString);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
}

CFErrorRef CFReadStreamCopyError(CFReadStreamRef stream)
{
  return (CFErrorRef)MEMORY[0x1F40D7F98](stream);
}

CFTypeRef CFReadStreamCopyProperty(CFReadStreamRef stream, CFStreamPropertyKey propertyName)
{
  return (CFTypeRef)MEMORY[0x1F40D7FA0](stream, propertyName);
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x1F40D7FC0](alloc, fileURL);
}

const UInt8 *__cdecl CFReadStreamGetBuffer(CFReadStreamRef stream, CFIndex maxBytesToRead, CFIndex *numBytesRead)
{
  return (const UInt8 *)MEMORY[0x1F40D7FC8](stream, maxBytesToRead, numBytesRead);
}

CFStreamError CFReadStreamGetError(CFReadStreamRef stream)
{
  CFIndex v1 = MEMORY[0x1F40D7FD0](stream);
  result.error = v2;
  result.domain = v1;
  return result;
}

CFStreamStatus CFReadStreamGetStatus(CFReadStreamRef stream)
{
  return MEMORY[0x1F40D7FE0](stream);
}

CFTypeID CFReadStreamGetTypeID(void)
{
  return MEMORY[0x1F40D7FE8]();
}

Boolean CFReadStreamHasBytesAvailable(CFReadStreamRef stream)
{
  return MEMORY[0x1F40D7FF0](stream);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x1F40D7FF8](stream);
}

CFIndex CFReadStreamRead(CFReadStreamRef stream, UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x1F40D8000](stream, buffer, bufferLength);
}

void CFReadStreamScheduleWithRunLoop(CFReadStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode)
{
}

Boolean CFReadStreamSetClient(CFReadStreamRef stream, CFOptionFlags streamEvents, CFReadStreamClientCallBack clientCB, CFStreamClientContext *clientContext)
{
  return MEMORY[0x1F40D8010](stream, streamEvents, clientCB, clientContext);
}

Boolean CFReadStreamSetProperty(CFReadStreamRef stream, CFStreamPropertyKey propertyName, CFTypeRef propertyValue)
{
  return MEMORY[0x1F40D8020](stream, propertyName, propertyValue);
}

void CFReadStreamUnscheduleFromRunLoop(CFReadStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode)
{
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFRunLoopAddObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode)
{
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFRunLoopAddTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode)
{
}

Boolean CFRunLoopContainsTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode)
{
  return MEMORY[0x1F40D8090](rl, timer, mode);
}

CFArrayRef CFRunLoopCopyAllModes(CFRunLoopRef rl)
{
  return (CFArrayRef)MEMORY[0x1F40D8098](rl);
}

CFRunLoopMode CFRunLoopCopyCurrentMode(CFRunLoopRef rl)
{
  return (CFRunLoopMode)MEMORY[0x1F40D80A0](rl);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B0]();
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B8]();
}

CFAbsoluteTime CFRunLoopGetNextTimerFireDate(CFRunLoopRef rl, CFRunLoopMode mode)
{
  MEMORY[0x1F40D80C8](rl, mode);
  return result;
}

CFRunLoopObserverRef CFRunLoopObserverCreate(CFAllocatorRef allocator, CFOptionFlags activities, Boolean repeats, CFIndex order, CFRunLoopObserverCallBack callout, CFRunLoopObserverContext *context)
{
  return (CFRunLoopObserverRef)MEMORY[0x1F40D80D8](allocator, activities, repeats, order, callout, context);
}

void CFRunLoopObserverGetContext(CFRunLoopObserverRef observer, CFRunLoopObserverContext *context)
{
}

void CFRunLoopObserverInvalidate(CFRunLoopObserverRef observer)
{
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
}

void CFRunLoopRemoveObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode)
{
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFRunLoopRemoveTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode)
{
}

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return MEMORY[0x1F40D8128](mode, returnAfterSourceHandled, seconds);
}

CFRunLoopSourceRef CFRunLoopSourceCreate(CFAllocatorRef allocator, CFIndex order, CFRunLoopSourceContext *context)
{
  return (CFRunLoopSourceRef)MEMORY[0x1F40D8140](allocator, order, context);
}

void CFRunLoopSourceGetContext(CFRunLoopSourceRef source, CFRunLoopSourceContext *context)
{
}

void CFRunLoopSourceInvalidate(CFRunLoopSourceRef source)
{
}

void CFRunLoopSourceSignal(CFRunLoopSourceRef source)
{
}

void CFRunLoopStop(CFRunLoopRef rl)
{
}

CFRunLoopTimerRef CFRunLoopTimerCreate(CFAllocatorRef allocator, CFAbsoluteTime fireDate, CFTimeInterval interval, CFOptionFlags flags, CFIndex order, CFRunLoopTimerCallBack callout, CFRunLoopTimerContext *context)
{
  return (CFRunLoopTimerRef)MEMORY[0x1F40D8180](allocator, flags, order, callout, context, fireDate, interval);
}

void CFRunLoopTimerGetContext(CFRunLoopTimerRef timer, CFRunLoopTimerContext *context)
{
}

CFTimeInterval CFRunLoopTimerGetInterval(CFRunLoopTimerRef timer)
{
  MEMORY[0x1F40D81A0](timer);
  return result;
}

CFAbsoluteTime CFRunLoopTimerGetNextFireDate(CFRunLoopTimerRef timer)
{
  MEMORY[0x1F40D81A8](timer);
  return result;
}

CFTimeInterval CFRunLoopTimerGetTolerance(CFRunLoopTimerRef timer)
{
  MEMORY[0x1F40D81B0](timer);
  return result;
}

CFTypeID CFRunLoopTimerGetTypeID(void)
{
  return MEMORY[0x1F40D81B8]();
}

void CFRunLoopTimerInvalidate(CFRunLoopTimerRef timer)
{
}

Boolean CFRunLoopTimerIsValid(CFRunLoopTimerRef timer)
{
  return MEMORY[0x1F40D81C8](timer);
}

void CFRunLoopTimerSetNextFireDate(CFRunLoopTimerRef timer, CFAbsoluteTime fireDate)
{
}

void CFRunLoopTimerSetTolerance(CFRunLoopTimerRef timer, CFTimeInterval tolerance)
{
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1F40D81F8](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1F40D8210](allocator, capacity, callBacks);
}

const void *__cdecl CFSetGetValue(CFSetRef theSet, const void *value)
{
  return (const void *)MEMORY[0x1F40D8238](theSet, value);
}

void CFSetGetValues(CFSetRef theSet, const void **values)
{
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
}

void CFSetSetValue(CFMutableSetRef theSet, const void *value)
{
}

uint64_t CFSortIndexes()
{
  return MEMORY[0x1F40D82E8]();
}

uint64_t CFStorageCreate()
{
  return MEMORY[0x1F40D82F0]();
}

uint64_t CFStorageCreateWithSubrange()
{
  return MEMORY[0x1F40D82F8]();
}

uint64_t CFStorageDeleteValues()
{
  return MEMORY[0x1F40D8300]();
}

uint64_t CFStorageGetConstValueAtIndex()
{
  return MEMORY[0x1F40D8308]();
}

uint64_t CFStorageGetCount()
{
  return MEMORY[0x1F40D8310]();
}

uint64_t CFStorageGetValueAtIndex()
{
  return MEMORY[0x1F40D8318]();
}

uint64_t CFStorageGetValues()
{
  return MEMORY[0x1F40D8320]();
}

uint64_t CFStorageInsertValues()
{
  return MEMORY[0x1F40D8328]();
}

void CFStreamCreateBoundPair(CFAllocatorRef alloc, CFReadStreamRef *readStream, CFWriteStreamRef *writeStream, CFIndex transferBufferSize)
{
}

void CFStreamCreatePairWithSocketToHost(CFAllocatorRef alloc, CFStringRef host, UInt32 port, CFReadStreamRef *readStream, CFWriteStreamRef *writeStream)
{
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
}

void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

void CFStringCapitalize(CFMutableStringRef theString, CFLocaleRef locale)
{
}

CFComparisonResult CFStringCompareWithOptions(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8390](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions);
}

CFComparisonResult CFStringCompareWithOptionsAndLocale(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions, CFLocaleRef locale)
{
  return MEMORY[0x1F40D8398](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions, locale);
}

CFStringRef CFStringConvertEncodingToIANACharSetName(CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D83A0](*(void *)&encoding);
}

unint64_t CFStringConvertEncodingToNSStringEncoding(CFStringEncoding encoding)
{
  return MEMORY[0x1F40D83A8](*(void *)&encoding);
}

CFStringEncoding CFStringConvertIANACharSetNameToEncoding(CFStringRef theString)
{
  return MEMORY[0x1F40D83B8](theString);
}

CFStringEncoding CFStringConvertNSStringEncodingToEncoding(unint64_t encoding)
{
  return MEMORY[0x1F40D83C0](encoding);
}

CFArrayRef CFStringCreateArrayWithFindResults(CFAllocatorRef alloc, CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return (CFArrayRef)MEMORY[0x1F40D83D8](alloc, theString, stringToFind, rangeToSearch.location, rangeToSearch.length, compareOptions);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x1F40D83E0](alloc, theArray, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1F40D83F0](alloc, theString);
}

CFStringRef CFStringCreateFromExternalRepresentation(CFAllocatorRef alloc, CFDataRef data, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8400](alloc, data, *(void *)&encoding);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8408](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8410](alloc, maxLength, theString);
}

CFMutableStringRef CFStringCreateMutableWithExternalCharactersNoCopy(CFAllocatorRef alloc, UniChar *chars, CFIndex numChars, CFIndex capacity, CFAllocatorRef externalCharactersAllocator)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8418](alloc, chars, numChars, capacity, externalCharactersAllocator);
}

CFStringRef CFStringCreateStringWithValidatedFormatAndArguments(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef validFormatSpecifiers, CFStringRef format, va_list arguments, CFErrorRef *errorPtr)
{
  return (CFStringRef)MEMORY[0x1F40D8428](alloc, formatOptions, validFormatSpecifiers, format, arguments, errorPtr);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1F40D8438](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8440](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation, contentsDeallocator);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8458](alloc, cStr, *(void *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x1F40D8460](alloc, chars, numChars);
}

CFStringRef CFStringCreateWithCharactersNoCopy(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8470](alloc, chars, numChars, contentsDeallocator);
}

CFStringRef CFStringCreateWithFileSystemRepresentation(CFAllocatorRef alloc, const char *buffer)
{
  return (CFStringRef)MEMORY[0x1F40D8478](alloc, buffer);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1F40D8490](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithPascalString(CFAllocatorRef alloc, ConstStr255Param pStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D84A0](alloc, pStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1F40D84A8](alloc, str, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3 = MEMORY[0x1F40D84C8](theString, stringToFind, compareOptions);
  result.length = v4;
  result.location = v3;
  return result;
}

Boolean CFStringFindCharacterFromSet(CFStringRef theString, CFCharacterSetRef theSet, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1F40D84D8](theString, theSet, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1F40D84E0](theString, stringToFind, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

Boolean CFStringFindWithOptionsAndLocale(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFLocaleRef locale, CFRange *result)
{
  return MEMORY[0x1F40D84E8](theString, stringToFind, rangeToSearch.location, rangeToSearch.length, searchOptions, locale, result);
}

void CFStringFold(CFMutableStringRef theString, CFStringCompareFlags theFlags, CFLocaleRef theLocale)
{
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1F40D8500](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1F40D8528](theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1F40D8540](theString);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

const CFStringEncoding *CFStringGetListOfAvailableEncodings(void)
{
  return (const CFStringEncoding *)MEMORY[0x1F40D8588]();
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8590](length, *(void *)&encoding);
}

CFIndex CFStringGetMaximumSizeOfFileSystemRepresentation(CFStringRef string)
{
  return MEMORY[0x1F40D85A0](string);
}

CFStringRef CFStringGetNameOfEncoding(CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D85B0](*(void *)&encoding);
}

uint64_t CFStringGetRangeOfCharacterClusterAtIndex()
{
  return MEMORY[0x1F40D85D0]();
}

CFStringEncoding CFStringGetSystemEncoding(void)
{
  return MEMORY[0x1F40D85E0]();
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

uint64_t CFStringHashCString()
{
  return MEMORY[0x1F40D8610]();
}

uint64_t CFStringHashCharacters()
{
  return MEMORY[0x1F40D8618]();
}

void CFStringInsert(CFMutableStringRef str, CFIndex idx, CFStringRef insertedStr)
{
}

Boolean CFStringIsEncodingAvailable(CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8638](*(void *)&encoding);
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
}

void CFStringNormalize(CFMutableStringRef theString, CFStringNormalizationForm theForm)
{
}

uint64_t CFStringOpenUText()
{
  return MEMORY[0x1F40D8658]();
}

void CFStringPad(CFMutableStringRef theString, CFStringRef padString, CFIndex length, CFIndex indexIntoPad)
{
}

void CFStringReplaceAll(CFMutableStringRef theString, CFStringRef replacement)
{
}

void CFStringSetExternalCharactersNoCopy(CFMutableStringRef theString, UniChar *chars, CFIndex length, CFIndex capacity)
{
}

CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef tokenizer)
{
  return MEMORY[0x1F40D8680](tokenizer);
}

CFStringRef CFStringTokenizerCopyBestStringLanguage(CFStringRef string, CFRange range)
{
  return (CFStringRef)MEMORY[0x1F40D8688](string, range.location, range.length);
}

CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringTokenizerRef)MEMORY[0x1F40D8698](alloc, string, range.location, range.length, options, locale);
}

CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer)
{
  CFIndex v1 = MEMORY[0x1F40D86A8](tokenizer);
  result.length = v2;
  result.location = v1;
  return result;
}

CFStringTokenizerTokenType CFStringTokenizerGoToTokenAtIndex(CFStringTokenizerRef tokenizer, CFIndex index)
{
  return MEMORY[0x1F40D86B0](tokenizer, index);
}

void CFStringTokenizerSetString(CFStringTokenizerRef tokenizer, CFStringRef string, CFRange range)
{
}

Boolean CFStringTransform(CFMutableStringRef string, CFRange *range, CFStringRef transform, Boolean reverse)
{
  return MEMORY[0x1F40D86C0](string, range, transform, reverse);
}

void CFStringUppercase(CFMutableStringRef theString, CFLocaleRef locale)
{
}

CFTimeZoneRef CFTimeZoneCopyDefault(void)
{
  return (CFTimeZoneRef)MEMORY[0x1F40D86E8]();
}

Boolean CFURLCanBeDecomposed(CFURLRef anURL)
{
  return MEMORY[0x1F40D8728](anURL);
}

void CFURLClearResourcePropertyCache(CFURLRef url)
{
}

CFURLRef CFURLCopyAbsoluteURL(CFURLRef relativeURL)
{
  return (CFURLRef)MEMORY[0x1F40D8740](relativeURL);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1F40D8758](anURL, pathStyle);
}

CFStringRef CFURLCopyFragment(CFURLRef anURL, CFStringRef charactersToLeaveEscaped)
{
  return (CFStringRef)MEMORY[0x1F40D8760](anURL, charactersToLeaveEscaped);
}

CFStringRef CFURLCopyHostName(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1F40D8768](anURL);
}

CFStringRef CFURLCopyNetLocation(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1F40D8778](anURL);
}

CFStringRef CFURLCopyParameterString(CFURLRef anURL, CFStringRef charactersToLeaveEscaped)
{
  return (CFStringRef)MEMORY[0x1F40D8780](anURL, charactersToLeaveEscaped);
}

CFStringRef CFURLCopyPath(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1F40D8790](anURL);
}

CFStringRef CFURLCopyQueryString(CFURLRef anURL, CFStringRef charactersToLeaveEscaped)
{
  return (CFStringRef)MEMORY[0x1F40D87A0](anURL, charactersToLeaveEscaped);
}

Boolean CFURLCopyResourcePropertyForKey(CFURLRef url, CFStringRef key, void *propertyValueTypeRefPtr, CFErrorRef *error)
{
  return MEMORY[0x1F40D87B0](url, key, propertyValueTypeRefPtr, error);
}

CFStringRef CFURLCopyResourceSpecifier(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1F40D87B8](anURL);
}

CFStringRef CFURLCopyScheme(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1F40D87C0](anURL);
}

CFStringRef CFURLCopyUserName(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1F40D87D0](anURL);
}

CFURLRef CFURLCreateAbsoluteURLWithBytes(CFAllocatorRef alloc, const UInt8 *relativeURLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL, Boolean useCompatibilityMode)
{
  return (CFURLRef)MEMORY[0x1F40D87D8](alloc, relativeURLBytes, length, *(void *)&encoding, baseURL, useCompatibilityMode);
}

CFURLRef CFURLCreateByResolvingBookmarkData(CFAllocatorRef allocator, CFDataRef bookmark, CFURLBookmarkResolutionOptions options, CFURLRef relativeToURL, CFArrayRef resourcePropertiesToInclude, Boolean *isStale, CFErrorRef *error)
{
  return (CFURLRef)MEMORY[0x1F40D87F0](allocator, bookmark, options, relativeToURL, resourcePropertiesToInclude, isStale, error);
}

CFURLRef CFURLCreateCopyAppendingPathComponent(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D87F8](allocator, url, pathComponent, isDirectory);
}

CFURLRef CFURLCreateCopyAppendingPathExtension(CFAllocatorRef allocator, CFURLRef url, CFStringRef extension)
{
  return (CFURLRef)MEMORY[0x1F40D8800](allocator, url, extension);
}

CFURLRef CFURLCreateCopyDeletingLastPathComponent(CFAllocatorRef allocator, CFURLRef url)
{
  return (CFURLRef)MEMORY[0x1F40D8808](allocator, url);
}

CFURLRef CFURLCreateCopyDeletingPathExtension(CFAllocatorRef allocator, CFURLRef url)
{
  return (CFURLRef)MEMORY[0x1F40D8810](allocator, url);
}

CFURLRef CFURLCreateFromFileSystemRepresentationRelativeToBase(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1F40D8850](allocator, buffer, bufLen, isDirectory, baseURL);
}

CFStringRef CFURLCreateStringByAddingPercentEscapes(CFAllocatorRef allocator, CFStringRef originalString, CFStringRef charactersToLeaveUnescaped, CFStringRef legalURLCharactersToBeEscaped, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8870](allocator, originalString, charactersToLeaveUnescaped, legalURLCharactersToBeEscaped, *(void *)&encoding);
}

CFStringRef CFURLCreateStringByReplacingPercentEscapes(CFAllocatorRef allocator, CFStringRef originalString, CFStringRef charactersToLeaveEscaped)
{
  return (CFStringRef)MEMORY[0x1F40D8878](allocator, originalString, charactersToLeaveEscaped);
}

CFStringRef CFURLCreateStringByReplacingPercentEscapesUsingEncoding(CFAllocatorRef allocator, CFStringRef origString, CFStringRef charsToLeaveEscaped, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8880](allocator, origString, charsToLeaveEscaped, *(void *)&encoding);
}

CFURLRef CFURLCreateWithBytes(CFAllocatorRef allocator, const UInt8 *URLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1F40D8888](allocator, URLBytes, length, *(void *)&encoding, baseURL);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D88A0](allocator, filePath, pathStyle, isDirectory);
}

CFURLRef CFURLCreateWithFileSystemPathRelativeToBase(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1F40D88A8](allocator, filePath, pathStyle, isDirectory, baseURL);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1F40D88C0](allocator, URLString, baseURL);
}

CFURLEnumeratorRef CFURLEnumeratorCreateForDirectoryURL(CFAllocatorRef alloc, CFURLRef directoryURL, CFURLEnumeratorOptions option, CFArrayRef propertyKeys)
{
  return (CFURLEnumeratorRef)MEMORY[0x1F40D88C8](alloc, directoryURL, option, propertyKeys);
}

CFIndex CFURLEnumeratorGetDescendentLevel(CFURLEnumeratorRef enumerator)
{
  return MEMORY[0x1F40D88D8](enumerator);
}

CFURLEnumeratorResult CFURLEnumeratorGetNextURL(CFURLEnumeratorRef enumerator, CFURLRef *url, CFErrorRef *error)
{
  return MEMORY[0x1F40D88E0](enumerator, url, error);
}

void CFURLEnumeratorSkipDescendents(CFURLEnumeratorRef enumerator)
{
}

CFURLRef CFURLGetBaseURL(CFURLRef anURL)
{
  return (CFURLRef)MEMORY[0x1F40D88F0](anURL);
}

CFRange CFURLGetByteRangeForComponent(CFURLRef url, CFURLComponentType component, CFRange *rangeIncludingSeparators)
{
  CFIndex v3 = MEMORY[0x1F40D88F8](url, component, rangeIncludingSeparators);
  result.length = v4;
  result.location = v3;
  return result;
}

CFIndex CFURLGetBytes(CFURLRef url, UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x1F40D8900](url, buffer, bufferLength);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1F40D8908](url, resolveAgainstBase, buffer, maxBufLen);
}

SInt32 CFURLGetPortNumber(CFURLRef anURL)
{
  return MEMORY[0x1F40D8910](anURL);
}

CFStringRef CFURLGetString(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1F40D8918](anURL);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x1F40D8928]();
}

Boolean CFURLHasDirectoryPath(CFURLRef anURL)
{
  return MEMORY[0x1F40D8938](anURL);
}

Boolean CFURLResourceIsReachable(CFURLRef url, CFErrorRef *error)
{
  return MEMORY[0x1F40D8948](url, error);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1F40D8988](alloc);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1F40D89B0](alloc, uuid);
}

uint64_t CFUniCharCompatibilityDecompose()
{
  return MEMORY[0x1F40D89F0]();
}

uint64_t CFUniCharDecomposeCharacter()
{
  return MEMORY[0x1F40D89F8]();
}

Boolean CFWriteStreamCanAcceptBytes(CFWriteStreamRef stream)
{
  return MEMORY[0x1F40D8A78](stream);
}

void CFWriteStreamClose(CFWriteStreamRef stream)
{
}

CFErrorRef CFWriteStreamCopyError(CFWriteStreamRef stream)
{
  return (CFErrorRef)MEMORY[0x1F40D8A88](stream);
}

CFTypeRef CFWriteStreamCopyProperty(CFWriteStreamRef stream, CFStreamPropertyKey propertyName)
{
  return (CFTypeRef)MEMORY[0x1F40D8A90](stream, propertyName);
}

CFWriteStreamRef CFWriteStreamCreateWithAllocatedBuffers(CFAllocatorRef alloc, CFAllocatorRef bufferAllocator)
{
  return (CFWriteStreamRef)MEMORY[0x1F40D8AA0](alloc, bufferAllocator);
}

CFWriteStreamRef CFWriteStreamCreateWithBuffer(CFAllocatorRef alloc, UInt8 *buffer, CFIndex bufferCapacity)
{
  return (CFWriteStreamRef)MEMORY[0x1F40D8AA8](alloc, buffer, bufferCapacity);
}

CFWriteStreamRef CFWriteStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFWriteStreamRef)MEMORY[0x1F40D8AB0](alloc, fileURL);
}

CFStreamError CFWriteStreamGetError(CFWriteStreamRef stream)
{
  CFIndex v1 = MEMORY[0x1F40D8AB8](stream);
  result.error = v2;
  result.domain = v1;
  return result;
}

CFStreamStatus CFWriteStreamGetStatus(CFWriteStreamRef stream)
{
  return MEMORY[0x1F40D8AC0](stream);
}

CFTypeID CFWriteStreamGetTypeID(void)
{
  return MEMORY[0x1F40D8AC8]();
}

Boolean CFWriteStreamOpen(CFWriteStreamRef stream)
{
  return MEMORY[0x1F40D8AD0](stream);
}

void CFWriteStreamScheduleWithRunLoop(CFWriteStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode)
{
}

Boolean CFWriteStreamSetClient(CFWriteStreamRef stream, CFOptionFlags streamEvents, CFWriteStreamClientCallBack clientCB, CFStreamClientContext *clientContext)
{
  return MEMORY[0x1F40D8AE0](stream, streamEvents, clientCB, clientContext);
}

Boolean CFWriteStreamSetProperty(CFWriteStreamRef stream, CFStreamPropertyKey propertyName, CFTypeRef propertyValue)
{
  return MEMORY[0x1F40D8AF0](stream, propertyName, propertyValue);
}

void CFWriteStreamUnscheduleFromRunLoop(CFWriteStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode)
{
}

CFIndex CFWriteStreamWrite(CFWriteStreamRef stream, const UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x1F40D8B08](stream, buffer, bufferLength);
}

IOReturn IOPMAssertionCreateWithName(CFStringRef AssertionType, IOPMAssertionLevel AssertionLevel, CFStringRef AssertionName, IOPMAssertionID *AssertionID)
{
  return MEMORY[0x1F40E8F78](AssertionType, *(void *)&AssertionLevel, AssertionName, AssertionID);
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return MEMORY[0x1F40E8FA8](*(void *)&AssertionID);
}

const char *__cdecl NSGetSizeAndAlignment(const char *typePtr, NSUInteger *sizep, NSUInteger *alignp)
{
  return (const char *)MEMORY[0x1F40D8B10](typePtr, sizep, alignp);
}

void OSSpinLockLock(OSSpinLock *__lock)
{
}

void OSSpinLockUnlock(OSSpinLock *__lock)
{
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

BOOL _Block_has_signature(void *aBlock)
{
  return MEMORY[0x1F40C9A80](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

const char *__cdecl _Block_signature(void *aBlock)
{
  return (const char *)MEMORY[0x1F40C9AB0](aBlock);
}

uint64_t _CFAppVersionCheck()
{
  return MEMORY[0x1F40D8B18]();
}

uint64_t _CFAppVersionCheckLessThan()
{
  return MEMORY[0x1F40D8B20]();
}

uint64_t _CFArraySetCapacity()
{
  return MEMORY[0x1F40D8B28]();
}

uint64_t _CFAttributedStringCheckAndReplace()
{
  return MEMORY[0x1F40D8B30]();
}

uint64_t _CFAttributedStringCheckAndReplaceAttributed()
{
  return MEMORY[0x1F40D8B38]();
}

uint64_t _CFAttributedStringCheckAndSetAttribute()
{
  return MEMORY[0x1F40D8B40]();
}

uint64_t _CFAttributedStringCheckAndSetAttributes()
{
  return MEMORY[0x1F40D8B48]();
}

uint64_t _CFAttributedStringGetLength()
{
  return MEMORY[0x1F40D8B58]();
}

uint64_t _CFAutoreleasePoolAddObject()
{
  return MEMORY[0x1F40D8B70]();
}

uint64_t _CFAutoreleasePoolPop()
{
  return MEMORY[0x1F40D8B78]();
}

uint64_t _CFAutoreleasePoolPrintPools()
{
  return MEMORY[0x1F40D8B80]();
}

uint64_t _CFAutoreleasePoolPush()
{
  return MEMORY[0x1F40D8B88]();
}

uint64_t _CFBagFastEnumeration()
{
  return MEMORY[0x1F40D8B90]();
}

uint64_t _CFBagGetUniqueCount()
{
  return MEMORY[0x1F40D8B98]();
}

uint64_t _CFBundleAddResourceURL()
{
  return MEMORY[0x1F40D8BA0]();
}

uint64_t _CFBundleCopyFilteredLocalizedStringsForAllLocalizations()
{
  return MEMORY[0x1F40D8BC8]();
}

uint64_t _CFBundleCopyFilteredLocalizedStringsForAllLocalizationsForURL()
{
  return MEMORY[0x1F40D8BD0]();
}

uint64_t _CFBundleCopyFindResources()
{
  return MEMORY[0x1F40D8BD8]();
}

uint64_t _CFBundleCopyLocalizedStringForLocalizationAndTableURL()
{
  return MEMORY[0x1F40D8BF0]();
}

uint64_t _CFBundleCopyLocalizedStringForLocalizationTableURLAndMarkdownOption()
{
  return MEMORY[0x1F40D8BF8]();
}

uint64_t _CFBundleCopyLocalizedStringForLocalizations()
{
  return MEMORY[0x1F40D8C00]();
}

uint64_t _CFBundleCopyWrappedBundleURL()
{
  return MEMORY[0x1F40D8C08]();
}

uint64_t _CFBundleCopyWrapperContainerURL()
{
  return MEMORY[0x1F40D8C10]();
}

uint64_t _CFBundleCreateError()
{
  return MEMORY[0x1F40D8C18]();
}

uint64_t _CFBundleCreateUnique()
{
  return MEMORY[0x1F40D8C30]();
}

uint64_t _CFBundleGetBundleWithIdentifierAndLibraryName()
{
  return MEMORY[0x1F40D8C50]();
}

uint64_t _CFBundleGetBundleWithIdentifierWithHint()
{
  return MEMORY[0x1F40D8C58]();
}

uint64_t _CFBundleGetMappedStringsFile()
{
  return MEMORY[0x1F40D8C70]();
}

uint64_t _CFBundleLoadExecutableAndReturnError()
{
  return MEMORY[0x1F40D8C78]();
}

uint64_t _CFBundleRemoveResourceURL()
{
  return MEMORY[0x1F40D8C80]();
}

uint64_t _CFBundleSearchForLocalizedString()
{
  return MEMORY[0x1F40D8C88]();
}

uint64_t _CFBundleSetupXPCBootstrap()
{
  return MEMORY[0x1F40D8C90]();
}

uint64_t _CFBundleSetupXPCBootstrapWithLanguages()
{
  return MEMORY[0x1F40D8C98]();
}

uint64_t _CFCalendarGetMidnightNoteCount()
{
  return MEMORY[0x1F40D8CA0]();
}

uint64_t _CFCalendarGetUnitsFromDateFormat()
{
  return MEMORY[0x1F40D8CA8]();
}

uint64_t _CFCharacterSetCreateKeyedCodingString()
{
  return MEMORY[0x1F40D8CB8]();
}

uint64_t _CFCharacterSetGetKeyedCodingBuiltinType()
{
  return MEMORY[0x1F40D8CC8]();
}

uint64_t _CFCharacterSetGetKeyedCodingRange()
{
  return MEMORY[0x1F40D8CD0]();
}

uint64_t _CFCharacterSetGetKeyedCodingType()
{
  return MEMORY[0x1F40D8CD8]();
}

uint64_t _CFCharacterSetIsInverted()
{
  return MEMORY[0x1F40D8CE0]();
}

uint64_t _CFCharacterSetIsMutable()
{
  return MEMORY[0x1F40D8CE8]();
}

uint64_t _CFCharacterSetIsValidRange()
{
  return MEMORY[0x1F40D8CF0]();
}

uint64_t _CFCharacterSetSetIsInverted()
{
  return MEMORY[0x1F40D8CF8]();
}

uint64_t _CFCopySystemVersionDictionaryValue()
{
  return MEMORY[0x1F40D8D18]();
}

uint64_t _CFCreateArrayStorage()
{
  return MEMORY[0x1F40D8D28]();
}

uint64_t _CFCreateCharacterSetFromUSet()
{
  return MEMORY[0x1F40D8D30]();
}

uint64_t _CFDataFindBytes()
{
  return MEMORY[0x1F40D8D38]();
}

uint64_t _CFDateFormatterCreateAttributedStringAndFieldsWithAbsoluteTime()
{
  return MEMORY[0x1F40D8D40]();
}

uint64_t _CFDateFormatterCreateSkeletonFromTemplate()
{
  return MEMORY[0x1F40D8D48]();
}

uint64_t _CFDictionarySetCapacity()
{
  return MEMORY[0x1F40D8D58]();
}

uint64_t _CFDiscorporateMemoryAllocate()
{
  return MEMORY[0x1F40D8D60]();
}

uint64_t _CFDiscorporateMemoryDeallocate()
{
  return MEMORY[0x1F40D8D68]();
}

uint64_t _CFDiscorporateMemoryDematerialize()
{
  return MEMORY[0x1F40D8D70]();
}

uint64_t _CFDiscorporateMemoryMaterialize()
{
  return MEMORY[0x1F40D8D78]();
}

uint64_t _CFErrorCreateCallStackReturnAddresses()
{
  return MEMORY[0x1F40D8D88]();
}

uint64_t _CFErrorCreateDebugDescription()
{
  return MEMORY[0x1F40D8D90]();
}

uint64_t _CFErrorCreateLocalizedDescription()
{
  return MEMORY[0x1F40D8D98]();
}

uint64_t _CFErrorCreateLocalizedFailureReason()
{
  return MEMORY[0x1F40D8DA0]();
}

uint64_t _CFErrorCreateLocalizedRecoverySuggestion()
{
  return MEMORY[0x1F40D8DA8]();
}

uint64_t _CFErrorCreateRedactedDescription()
{
  return MEMORY[0x1F40D8DB0]();
}

uint64_t _CFExecutableLinkedOnOrAfter()
{
  return MEMORY[0x1F40D8DB8]();
}

uint64_t _CFExtensionUniCharsIsValidToAppend()
{
  return MEMORY[0x1F40D8DC8]();
}

uint64_t _CFGetPathExtensionRangesFromPathComponentUniChars()
{
  return MEMORY[0x1F40D8DF0]();
}

uint64_t _CFGetProgname()
{
  return MEMORY[0x1F40D8E00]();
}

uint64_t _CFGetTSD()
{
  return MEMORY[0x1F40D8E08]();
}

uint64_t _CFHostGetTopLevelDomain()
{
  return MEMORY[0x1F40D5698]();
}

uint64_t _CFIsDeallocating()
{
  return MEMORY[0x1F40D8E18]();
}

uint64_t _CFKeyedArchiverUIDCreate()
{
  return MEMORY[0x1F40D8E20]();
}

uint64_t _CFKeyedArchiverUIDGetTypeID()
{
  return MEMORY[0x1F40D8E28]();
}

uint64_t _CFKeyedArchiverUIDGetValue()
{
  return MEMORY[0x1F40D8E30]();
}

uint64_t _CFListFormatterCreate()
{
  return MEMORY[0x1F40D8E38]();
}

uint64_t _CFListFormatterCreateStringByJoiningStrings()
{
  return MEMORY[0x1F40D8E40]();
}

uint64_t _CFLocaleCopyPreferred()
{
  return MEMORY[0x1F40D8E50]();
}

uint64_t _CFLocaleCopyPreferredLanguagesForCurrentUser()
{
  return MEMORY[0x1F40D8E58]();
}

uint64_t _CFLocaleCopyPreferredMeasurementSystem()
{
  return MEMORY[0x1F40D8E60]();
}

uint64_t _CFLocaleCopyPreferredTemperatureUnit()
{
  return MEMORY[0x1F40D8E68]();
}

uint64_t _CFLocaleGetNoteCount()
{
  return MEMORY[0x1F40D8E80]();
}

uint64_t _CFLogvEx3()
{
  return MEMORY[0x1F40D8E98]();
}

uint64_t _CFMZEnabled()
{
  return MEMORY[0x1F40D8EA0]();
}

uint64_t _CFNetworkErrorCopyLocalizedDescriptionWithHostname()
{
  return MEMORY[0x1F40D56D8]();
}

uint64_t _CFNetworkErrorGetLocalizedFailureReason()
{
  return MEMORY[0x1F40D56E0]();
}

uint64_t _CFNetworkErrorGetLocalizedRecoverySuggestion()
{
  return MEMORY[0x1F40D56E8]();
}

uint64_t _CFNonObjCEqual()
{
  return MEMORY[0x1F40D8EA8]();
}

uint64_t _CFNonObjCRelease()
{
  return MEMORY[0x1F40D8EB8]();
}

uint64_t _CFNonObjCStringGetBytes()
{
  return MEMORY[0x1F40D8EC8]();
}

uint64_t _CFNotificationCenterInitializeDependentNotificationIfNecessary()
{
  return MEMORY[0x1F40D8ED0]();
}

uint64_t _CFNumberGetType2()
{
  return MEMORY[0x1F40D8EE8]();
}

uint64_t _CFOperatingSystemVersionGetCurrent()
{
  return MEMORY[0x1F40D8EF0]();
}

uint64_t _CFOperatingSystemVersionIsAtLeastVersion()
{
  return MEMORY[0x1F40D8EF8]();
}

uint64_t _CFPredicatePolicyData()
{
  return MEMORY[0x1F40D8F00]();
}

uint64_t _CFPredicatePolicyData_getFlags()
{
  return MEMORY[0x1F40D8F08]();
}

uint64_t _CFPredicatePolicyRestrictedClasses()
{
  return MEMORY[0x1F40D8F18]();
}

uint64_t _CFPredicatePolicyRestrictedSelectors()
{
  return MEMORY[0x1F40D8F20]();
}

uint64_t _CFPreferencesAppSynchronizeWithContainer()
{
  return MEMORY[0x1F40D8F38]();
}

uint64_t _CFPreferencesCopyAppValueWithContainer()
{
  return MEMORY[0x1F40D8F40]();
}

uint64_t _CFPreferencesGetAppBooleanValueWithContainer()
{
  return MEMORY[0x1F40D8F68]();
}

uint64_t _CFPreferencesRegisterStandardUserDefaultsExists()
{
  return MEMORY[0x1F40D8F98]();
}

uint64_t _CFPreferencesSetAppValueWithContainer()
{
  return MEMORY[0x1F40D8FB0]();
}

uint64_t _CFPreferencesSetFileProtectionClass()
{
  return MEMORY[0x1F40D8FC8]();
}

uint64_t _CFPreferencesSynchronizeWithContainer()
{
  return MEMORY[0x1F40D8FD8]();
}

uint64_t _CFPrefsCopyAppDictionaryWithContainer()
{
  return MEMORY[0x1F40D8FF0]();
}

uint64_t _CFPrefsSynchronizeForProcessTermination()
{
  return MEMORY[0x1F40D9010]();
}

uint64_t _CFPrefsUnregisterUserDefaultsInstance()
{
  return MEMORY[0x1F40D9018]();
}

uint64_t _CFProcessPath()
{
  return MEMORY[0x1F40D9020]();
}

uint64_t _CFPropertyListCreateFiltered()
{
  return MEMORY[0x1F40D9030]();
}

uint64_t _CFPropertyListCreateFromXMLData()
{
  return MEMORY[0x1F40D9038]();
}

uint64_t _CFPropertyListCreateFromXMLString()
{
  return MEMORY[0x1F40D9040]();
}

uint64_t _CFPropertyListCreateXMLDataWithExtras()
{
  return MEMORY[0x1F40D9050]();
}

uint64_t _CFReadStreamDeallocate()
{
  return MEMORY[0x1F40D9058]();
}

uint64_t _CFReadStreamGetClient()
{
  return MEMORY[0x1F40D9060]();
}

uint64_t _CFReadStreamInitialize()
{
  return MEMORY[0x1F40D9068]();
}

uint64_t _CFRelativeDateTimeFormatterCreate()
{
  return MEMORY[0x1F40D9078]();
}

uint64_t _CFRelativeDateTimeFormatterCreateStringWithCalendarUnit()
{
  return MEMORY[0x1F40D9080]();
}

uint64_t _CFRunLoop01()
{
  return MEMORY[0x1F40D9088]();
}

uint64_t _CFRunLoopFinished()
{
  return MEMORY[0x1F40D9098]();
}

uint64_t _CFRunLoopGet2()
{
  return MEMORY[0x1F40D90A8]();
}

uint64_t _CFRunLoopIsCurrent()
{
  return MEMORY[0x1F40D90B0]();
}

uint64_t _CFRunLoopModeContainsMode()
{
  return MEMORY[0x1F40D90B8]();
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1F40D90D0]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1F40D90E8]();
}

uint64_t _CFSetSetCapacity()
{
  return MEMORY[0x1F40D90F8]();
}

uint64_t _CFSetTSD()
{
  return MEMORY[0x1F40D9100]();
}

uint64_t _CFStringAppendFormatAndArgumentsAux2()
{
  return MEMORY[0x1F40D9108]();
}

uint64_t _CFStringAppendValidatedFormatAndArguments()
{
  return MEMORY[0x1F40D9110]();
}

uint64_t _CFStringCreateByAddingPercentEncodingWithAllowedCharacters()
{
  return MEMORY[0x1F40D9120]();
}

uint64_t _CFStringCreateByRemovingPercentEncoding()
{
  return MEMORY[0x1F40D9128]();
}

uint64_t _CFStringCreateStringWithValidatedFormatAux()
{
  return MEMORY[0x1F40D9130]();
}

uint64_t _CFStringCreateWithFormatAndArgumentsReturningMetadata()
{
  return MEMORY[0x1F40D9150]();
}

uint64_t _CFStringGetFormatSpecifierConfiguration()
{
  return MEMORY[0x1F40D9160]();
}

uint64_t _CFStringValidateFormat()
{
  return MEMORY[0x1F40D91A8]();
}

uint64_t _CFTimeZoneGetNoteCount()
{
  return MEMORY[0x1F40D91D8]();
}

uint64_t _CFTryRetain()
{
  return MEMORY[0x1F40D91E0]();
}

uint64_t _CFURLAttachSecurityScopeToFileURL()
{
  return MEMORY[0x1F40D91E8]();
}

uint64_t _CFURLCopyComponents()
{
  return MEMORY[0x1F40D9238]();
}

uint64_t _CFURLCopyFragment()
{
  return MEMORY[0x1F40D9248]();
}

uint64_t _CFURLCopyHostName()
{
  return MEMORY[0x1F40D9250]();
}

uint64_t _CFURLCopyLogicalURLOfPromiseAtURL()
{
  return MEMORY[0x1F40D9260]();
}

uint64_t _CFURLCopyPassword()
{
  return MEMORY[0x1F40D9268]();
}

uint64_t _CFURLCopyPath()
{
  return MEMORY[0x1F40D9270]();
}

uint64_t _CFURLCopyPropertiesOfPromiseAtURL()
{
  return MEMORY[0x1F40D9280]();
}

uint64_t _CFURLCopyQueryString()
{
  return MEMORY[0x1F40D9290]();
}

uint64_t _CFURLCopySecurityScopeFromFileURL()
{
  return MEMORY[0x1F40D92B0]();
}

uint64_t _CFURLCopyUserName()
{
  return MEMORY[0x1F40D92B8]();
}

uint64_t _CFURLCreateByResolvingAliasFile()
{
  return MEMORY[0x1F40D92C0]();
}

uint64_t _CFURLCreateCopyAppendingPathComponent()
{
  return MEMORY[0x1F40D92C8]();
}

uint64_t _CFURLCreateDisplayPathComponentsArray()
{
  return MEMORY[0x1F40D92D0]();
}

uint64_t _CFURLCreateFromComponents()
{
  return MEMORY[0x1F40D92D8]();
}

uint64_t _CFURLCreateWithFileSystemPathCachingResourcePropertiesForKeys()
{
  return MEMORY[0x1F40D92F0]();
}

uint64_t _CFURLCreateWithRangesAndFlags()
{
  return MEMORY[0x1F40D92F8]();
}

uint64_t _CFURLGetEncoding()
{
  return MEMORY[0x1F40D9330]();
}

uint64_t _CFURLIsFileURL()
{
  return MEMORY[0x1F40D9348]();
}

uint64_t _CFURLIsItemPromiseAtURL()
{
  return MEMORY[0x1F40D9350]();
}

uint64_t _CFURLNoteSecurityScopedResourceMoved()
{
  return MEMORY[0x1F40D9360]();
}

uint64_t _CFURLPromiseCopyPhysicalURL()
{
  return MEMORY[0x1F40D9368]();
}

uint64_t _CFURLPromiseSetPhysicalURL()
{
  return MEMORY[0x1F40D9380]();
}

uint64_t _CFURLReplaceObject()
{
  return MEMORY[0x1F40D93A0]();
}

uint64_t _CFWriteStreamDeallocate()
{
  return MEMORY[0x1F40D93B8]();
}

uint64_t _CFWriteStreamGetClient()
{
  return MEMORY[0x1F40D93C0]();
}

uint64_t _CFWriteStreamInitialize()
{
  return MEMORY[0x1F40D93C8]();
}

uint64_t _CFXNotificationCenterCopyDebugInfo()
{
  return MEMORY[0x1F40D93E0]();
}

uint64_t _CFXNotificationCenterCreate()
{
  return MEMORY[0x1F40D93E8]();
}

uint64_t _CFXNotificationCenterIsEmpty()
{
  return MEMORY[0x1F40D93F0]();
}

uint64_t _CFXNotificationGetTaskCenter()
{
  return MEMORY[0x1F40D9400]();
}

uint64_t _CFXNotificationPost()
{
  return MEMORY[0x1F40D9408]();
}

uint64_t _CFXNotificationRegisterObserver()
{
  return MEMORY[0x1F40D9410]();
}

uint64_t _CFXPreferencesCopyDictionaryForNamedVolatileSource()
{
  return MEMORY[0x1F40D9458]();
}

uint64_t _CFXPreferencesCopyDictionaryForSourceWithBundleID()
{
  return MEMORY[0x1F40D9460]();
}

uint64_t _CFXPreferencesCopyVolatileSourceNames()
{
  return MEMORY[0x1F40D9468]();
}

uint64_t _CFXPreferencesRegisterDefaultValues()
{
  return MEMORY[0x1F40D9470]();
}

uint64_t _CFXPreferencesRemoveNamedVolatileSource()
{
  return MEMORY[0x1F40D9478]();
}

uint64_t _CFXPreferencesReplaceValuesInNamedVolatileSource()
{
  return MEMORY[0x1F40D9480]();
}

uint64_t _CFXPreferencesReplaceValuesInSourceWithBundleIDWithContainer()
{
  return MEMORY[0x1F40D9488]();
}

int *_NSGetArgc(void)
{
  return (int *)MEMORY[0x1F40C9AD0]();
}

char ***_NSGetArgv(void)
{
  return (char ***)MEMORY[0x1F40C9AD8]();
}

char ***_NSGetEnviron(void)
{
  return (char ***)MEMORY[0x1F40C9AE0]();
}

uint64_t _NSIsNSArray()
{
  return MEMORY[0x1F40D9490]();
}

uint64_t _NSIsNSAttributedString()
{
  return MEMORY[0x1F40D9498]();
}

uint64_t _NSIsNSCFConstantString()
{
  return MEMORY[0x1F40D94A0]();
}

uint64_t _NSIsNSData()
{
  return MEMORY[0x1F40D94A8]();
}

uint64_t _NSIsNSDate()
{
  return MEMORY[0x1F40D94B0]();
}

uint64_t _NSIsNSDictionary()
{
  return MEMORY[0x1F40D94B8]();
}

uint64_t _NSIsNSNumber()
{
  return MEMORY[0x1F40D94C0]();
}

uint64_t _NSIsNSObject()
{
  return MEMORY[0x1F40D94C8]();
}

uint64_t _NSIsNSOrderedSet()
{
  return MEMORY[0x1F40D94D0]();
}

uint64_t _NSIsNSSet()
{
  return MEMORY[0x1F40D94D8]();
}

uint64_t _NSIsNSString()
{
  return MEMORY[0x1F40D94E0]();
}

uint64_t _NSIsNSURL()
{
  return MEMORY[0x1F40D94E8]();
}

uint64_t _NSIsNSValue()
{
  return MEMORY[0x1F40D94F0]();
}

uint64_t _NSMessageBuilder()
{
  return MEMORY[0x1F40D94F8]();
}

uint64_t _NSObjectLoadWeak()
{
  return MEMORY[0x1F40D9500]();
}

uint64_t _NSObjectStoreWeak()
{
  return MEMORY[0x1F40D9510]();
}

uint64_t _NSTaggedPointerStringGetBytes()
{
  return MEMORY[0x1F40D9518]();
}

uint64_t _SwiftCreateBridgedString()
{
  return MEMORY[0x1F4186328]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t __CFAllocatorRespectsHintZeroWhenAllocating()
{
  return MEMORY[0x1F40D9520]();
}

uint64_t __CFAttributedStringMtbl()
{
  return MEMORY[0x1F40D9528]();
}

uint64_t __CFBinaryPlistCreateObject()
{
  return MEMORY[0x1F40D9530]();
}

uint64_t __CFBinaryPlistGetOffsetForValueFromArray2()
{
  return MEMORY[0x1F40D9538]();
}

uint64_t __CFBinaryPlistGetOffsetForValueFromDictionary3()
{
  return MEMORY[0x1F40D9540]();
}

uint64_t __CFBinaryPlistGetTopLevelInfo()
{
  return MEMORY[0x1F40D9548]();
}

uint64_t __CFBinaryPlistParseASCIIString()
{
  return MEMORY[0x1F40D9550]();
}

uint64_t __CFBinaryPlistParseUnicode16String()
{
  return MEMORY[0x1F40D9558]();
}

uint64_t __CFBinaryPlistWriteToStreamWithOptions()
{
  return MEMORY[0x1F40D9560]();
}

uint64_t __CFGetNextSearchPathEnumeration()
{
  return MEMORY[0x1F40D9578]();
}

uint64_t __CFInitialize()
{
  return MEMORY[0x1F40D9580]();
}

uint64_t __CFRecordAllocationEvent()
{
  return MEMORY[0x1F40D9588]();
}

uint64_t __CFSafelyReallocateTyped()
{
  return MEMORY[0x1F40D9590]();
}

uint64_t __CFSafelyReallocateWithAllocatorTyped()
{
  return MEMORY[0x1F40D9598]();
}

uint64_t __CFSetLastAllocationEventName()
{
  return MEMORY[0x1F40D95A0]();
}

uint64_t __CFStartSearchPathEnumeration()
{
  return MEMORY[0x1F40D95B8]();
}

uint64_t __CFStrConvertBytesToUnicode()
{
  return MEMORY[0x1F40D95D0]();
}

uint64_t __CFStringComputeEightBitStringEncoding()
{
  return MEMORY[0x1F40D95D8]();
}

uint64_t __CFStringDecodeByteStream3()
{
  return MEMORY[0x1F40D95E0]();
}

uint64_t __CFStringEncodeByteStream()
{
  return MEMORY[0x1F40D95E8]();
}

uint64_t __CFStringIsCF()
{
  return MEMORY[0x1F40D95F0]();
}

uint64_t __CFURLReservedPtr()
{
  return MEMORY[0x1F40D9608]();
}

uint64_t __CFURLSetReservedPtr()
{
  return MEMORY[0x1F40D9618]();
}

uint64_t __CFXPreferencesCopyCurrentApplicationStateWithDeadlockAvoidance()
{
  return MEMORY[0x1F40D9628]();
}

uint64_t __NSMakeSpecialForwardingCaptureBlock()
{
  return MEMORY[0x1F40D9630]();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

double __exp10(double a1)
{
  MEMORY[0x1F40C9B90](a1);
  return result;
}

int __fpclassifyd(double a1)
{
  return MEMORY[0x1F40C9BC8](a1);
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1F40C9C28]();
}

uint64_t __memmove_chk()
{
  return MEMORY[0x1F40C9C30]();
}

uint64_t __pthread_chdir()
{
  return MEMORY[0x1F40C9C68]();
}

uint64_t __pthread_fchdir()
{
  return MEMORY[0x1F40C9C70]();
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x1F40C9C80](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

uint64_t __strlcat_chk()
{
  return MEMORY[0x1F40C9CD0]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1F40C9CD8]();
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9D00](*(void *)&a1);
}

uint64_t __udivti3()
{
  return MEMORY[0x1F40C9D08]();
}

uint64_t _amkrtemp()
{
  return MEMORY[0x1F40C9D40]();
}

uint64_t _cfmp_record_nsmachport_deallocation()
{
  return MEMORY[0x1F40D9638]();
}

uint64_t _cfmp_record_nsmachport_is_interested()
{
  return MEMORY[0x1F40D9640]();
}

uint64_t _class_getIvarMemoryManagement()
{
  return MEMORY[0x1F41813A0]();
}

uint64_t _class_isSwift()
{
  return MEMORY[0x1F41813A8]();
}

uint64_t _dirhelper_relative()
{
  return MEMORY[0x1F40C9D58]();
}

uint32_t _dyld_image_count(void)
{
  return MEMORY[0x1F40C9E60]();
}

uint64_t _mkpath_np()
{
  return MEMORY[0x1F40C9F68]();
}

{
  return MEMORY[0x1F41813D0]();
}

{
  return MEMORY[0x1F41813F0]();
}

uint64_t _objc_getFreedObjectClass()
{
  return MEMORY[0x1F4181420]();
}

uint64_t _objc_registerTaggedPointerClass()
{
  return MEMORY[0x1F4181438]();
}

uint64_t _objc_rootAlloc()
{
  return MEMORY[0x1F4181440]();
}

uint64_t _objc_rootAllocWithZone()
{
  return MEMORY[0x1F4181448]();
}

uint64_t _objc_rootRetain()
{
  return MEMORY[0x1F4181488]();
}

uint64_t _objc_rootRetainCount()
{
  return MEMORY[0x1F4181490]();
}

uint64_t _objc_rootTryRetain()
{
  return MEMORY[0x1F4181498]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _os_log_set_nscf_formatter()
{
  return MEMORY[0x1F40CA000]();
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _protocol_getMethodTypeEncoding()
{
  return MEMORY[0x1F41814B8]();
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

uint64_t _swift_isClassOrObjCExistentialType()
{
  return MEMORY[0x1F4186340]();
}

uint64_t _swift_isObjCTypeNameSerializable()
{
  return MEMORY[0x1F4186348]();
}

uint64_t _swift_reportToDebugger()
{
  return MEMORY[0x1F4186360]();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x1F4186370]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1F4186388]();
}

void abort(void)
{
}

int accept(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x1F40CA200](*(void *)&a1, a2, a3);
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1F40CA210](a1, *(void *)&a2);
}

uint64_t archive_entry_free()
{
  return MEMORY[0x1F417DFF0]();
}

uint64_t archive_entry_new()
{
  return MEMORY[0x1F417DFF8]();
}

uint64_t archive_entry_set_pathname()
{
  return MEMORY[0x1F417E040]();
}

uint64_t archive_errno()
{
  return MEMORY[0x1F417E078]();
}

uint64_t archive_read_disk_entry_from_file()
{
  return MEMORY[0x1F417E0D0]();
}

uint64_t archive_read_disk_new()
{
  return MEMORY[0x1F417E0D8]();
}

uint64_t archive_read_disk_set_standard_lookup()
{
  return MEMORY[0x1F417E0F0]();
}

uint64_t archive_read_free()
{
  return MEMORY[0x1F417E110]();
}

uint64_t archive_write_data()
{
  return MEMORY[0x1F417E1D8]();
}

uint64_t archive_write_free()
{
  return MEMORY[0x1F417E208]();
}

uint64_t archive_write_header()
{
  return MEMORY[0x1F417E210]();
}

uint64_t archive_write_new()
{
  return MEMORY[0x1F417E218]();
}

uint64_t archive_write_open_filename()
{
  return MEMORY[0x1F417E230]();
}

uint64_t archive_write_set_format_zip()
{
  return MEMORY[0x1F417E260]();
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1F40CA440](a1, a2);
}

char **__cdecl backtrace_symbols(void *const *a1, int a2)
{
  return (char **)MEMORY[0x1F40CA508](a1, *(void *)&a2);
}

kern_return_t bootstrap_check_in(mach_port_t bp, const name_t service_name, mach_port_t *sp)
{
  return MEMORY[0x1F40CA538](*(void *)&bp, service_name, sp);
}

uint64_t bootstrap_look_up2()
{
  return MEMORY[0x1F40CA550]();
}

uint64_t bootstrap_register2()
{
  return MEMORY[0x1F40CA560]();
}

void *__cdecl bsearch_b(const void *__key, const void *__base, size_t __nel, size_t __width, void *__compar)
{
  return (void *)MEMORY[0x1F40CA578](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
}

void *__cdecl calloc(size_t __count, size_t __size)
{
  return (void *)MEMORY[0x1F40CA660](__count, __size);
}

int chdir(const char *a1)
{
  return MEMORY[0x1F40CB390](a1);
}

int chflags(const char *a1, __uint32_t a2)
{
  return MEMORY[0x1F40CB398](a1, *(void *)&a2);
}

int chmod(const char *a1, mode_t a2)
{
  return MEMORY[0x1F40CB3A0](a1, a2);
}

int chown(const char *a1, uid_t a2, gid_t a3)
{
  return MEMORY[0x1F40CB3A8](a1, *(void *)&a2, *(void *)&a3);
}

BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return MEMORY[0x1F41814C8](cls, name, imp, types);
}

uint64_t class_addMethodsBulk()
{
  return MEMORY[0x1F41814D0]();
}

BOOL class_conformsToProtocol(Class cls, Protocol *protocol)
{
  return MEMORY[0x1F41814E0](cls, protocol);
}

Protocol **__cdecl class_copyProtocolList(Class cls, unsigned int *outCount)
{
  return (Protocol **)MEMORY[0x1F4181508](cls, outCount);
}

id class_createInstance(Class cls, size_t extraBytes)
{
  return (id)MEMORY[0x1F4181510](cls, extraBytes);
}

Method class_getClassMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x1F4181518](cls, name);
}

const char *__cdecl class_getImageName(Class cls)
{
  return (const char *)MEMORY[0x1F4181520](cls);
}

Method class_getInstanceMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x1F4181528](cls, name);
}

size_t class_getInstanceSize(Class cls)
{
  return MEMORY[0x1F4181530](cls);
}

Ivar class_getInstanceVariable(Class cls, const char *name)
{
  return (Ivar)MEMORY[0x1F4181538](cls, name);
}

IMP class_getMethodImplementation(Class cls, SEL name)
{
  return (IMP)MEMORY[0x1F4181540](cls, name);
}

const char *__cdecl class_getName(Class cls)
{
  return (const char *)MEMORY[0x1F4181548](cls);
}

Class class_getSuperclass(Class cls)
{
  return (Class)MEMORY[0x1F4181558](cls);
}

int class_getVersion(Class cls)
{
  return MEMORY[0x1F4181560](cls);
}

BOOL class_isMetaClass(Class cls)
{
  return MEMORY[0x1F4181568](cls);
}

BOOL class_respondsToSelector(Class cls, SEL sel)
{
  return MEMORY[0x1F4181580](cls, sel);
}

Class class_setSuperclass(Class cls, Class newSuper)
{
  return (Class)MEMORY[0x1F4181588](cls, newSuper);
}

void class_setVersion(Class cls, int version)
{
}

void clearerr(FILE *a1)
{
}

int clock_gettime(clockid_t __clock_id, timespec *__tp)
{
  return MEMORY[0x1F40CB3D0](*(void *)&__clock_id, __tp);
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1F40CB400](a1);
}

compression_status compression_stream_destroy(compression_stream *stream)
{
  return MEMORY[0x1F417F0C0](stream);
}

compression_status compression_stream_init(compression_stream *stream, compression_stream_operation operation, compression_algorithm algorithm)
{
  return MEMORY[0x1F417F0D0](stream, *(void *)&operation, *(void *)&algorithm);
}

compression_status compression_stream_process(compression_stream *stream, int flags)
{
  return MEMORY[0x1F417F0E0](stream, *(void *)&flags);
}

size_t confstr(int a1, char *a2, size_t a3)
{
  return MEMORY[0x1F40CB438](*(void *)&a1, a2, a3);
}

uint64_t container_create_or_lookup_app_group_path_by_app_group_identifier()
{
  return MEMORY[0x1F40CB560]();
}

uint64_t container_create_or_lookup_path_for_current_user()
{
  return MEMORY[0x1F40CB580]();
}

int copyfile(const char *from, const char *to, copyfile_state_t state, copyfile_flags_t flags)
{
  return MEMORY[0x1F40CB880](from, to, state, *(void *)&flags);
}

int dirfd(DIR *dirp)
{
  return MEMORY[0x1F40CB900](dirp);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C0](flags, block);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C8](flags, *(void *)&qos_class, *(void *)&relative_priority, block);
}

BOOL dispatch_data_apply(dispatch_data_t data, dispatch_data_applier_t applier)
{
  return MEMORY[0x1F40CBA00](data, applier);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA10](buffer, size, queue, destructor);
}

dispatch_data_t dispatch_data_create_concat(dispatch_data_t data1, dispatch_data_t data2)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA20](data1, data2);
}

dispatch_data_t dispatch_data_create_subrange(dispatch_data_t data, size_t offset, size_t length)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA38](data, offset, length);
}

size_t dispatch_data_get_size(dispatch_data_t data)
{
  return MEMORY[0x1F40CBA48](data);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_io_close(dispatch_io_t channel, dispatch_io_close_flags_t flags)
{
}

dispatch_io_t dispatch_io_create(dispatch_io_type_t type, dispatch_fd_t fd, dispatch_queue_t queue, void *cleanup_handler)
{
  return (dispatch_io_t)MEMORY[0x1F40CBAD8](type, *(void *)&fd, queue, cleanup_handler);
}

void dispatch_io_read(dispatch_io_t channel, off_t offset, size_t length, dispatch_queue_t queue, dispatch_io_handler_t io_handler)
{
}

void dispatch_io_set_low_water(dispatch_io_t channel, size_t low_water)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

uint64_t dispatch_queue_attr_make_with_overcommit()
{
  return MEMORY[0x1F40CBBB0]();
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBD0](label, attr, target);
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  return (const char *)MEMORY[0x1F40CBBD8](queue);
}

uint64_t dispatch_queue_set_label_nocopy()
{
  return MEMORY[0x1F40CBBF0]();
}

void dispatch_read(dispatch_fd_t fd, size_t length, dispatch_queue_t queue, void *handler)
{
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

uintptr_t dispatch_source_get_data(dispatch_source_t source)
{
  return MEMORY[0x1F40CBCA0](source);
}

uintptr_t dispatch_source_get_mask(dispatch_source_t source)
{
  return MEMORY[0x1F40CBCB0](source);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_registration_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x1F40CBDA0](a1, a2);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

int dup(int a1)
{
  return MEMORY[0x1F40CBDF8](*(void *)&a1);
}

uint64_t dyld_get_program_sdk_version()
{
  return MEMORY[0x1F40CBE28]();
}

uint64_t dyld_image_path_containing_address()
{
  return MEMORY[0x1F40CBE70]();
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1F40CBEC8]();
}

void endpwent(void)
{
}

uint64_t environ_lock_np()
{
  return MEMORY[0x1F40CBF38]();
}

uint64_t environ_unlock_np()
{
  return MEMORY[0x1F40CBF40]();
}

void exit(int a1)
{
}

long double exp(long double __x)
{
  MEMORY[0x1F40CBFE0](__x);
  return result;
}

long double exp2(long double __x)
{
  MEMORY[0x1F40CBFE8](__x);
  return result;
}

int fchmod(int a1, mode_t a2)
{
  return MEMORY[0x1F40CC028](*(void *)&a1, a2);
}

int fchown(int a1, uid_t a2, gid_t a3)
{
  return MEMORY[0x1F40CC038](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1F40CC058](*(void *)&a1, *(void *)&a2);
}

int fcopyfile(int from_fd, int to_fd, copyfile_state_t a3, copyfile_flags_t flags)
{
  return MEMORY[0x1F40CC060](*(void *)&from_fd, *(void *)&to_fd, a3, *(void *)&flags);
}

int ferror(FILE *a1)
{
  return MEMORY[0x1F40CC0A0](a1);
}

int fgetattrlist(int a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x1F40CC0E0](*(void *)&a1, a2, a3, a4, *(void *)&a5);
}

ssize_t fgetxattr(int fd, const char *name, void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1F40CC108](*(void *)&fd, name, value, size, *(void *)&position, *(void *)&options);
}

int fileno(FILE *a1)
{
  return MEMORY[0x1F40CC110](a1);
}

int flsl(uint64_t a1)
{
  return MEMORY[0x1F40CC180](a1);
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x1F40CC1A0](__x, __y);
  return result;
}

const char *__cdecl fmtcheck(const char *a1, const char *a2)
{
  return (const char *)MEMORY[0x1F40CC1B0](a1, a2);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC200](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

void freeaddrinfo(addrinfo *a1)
{
}

void freehostent(hostent *a1)
{
}

int fsetxattr(int fd, const char *name, const void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1F40CC2A8](*(void *)&fd, name, value, size, *(void *)&position, *(void *)&options);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CC2B8](*(void *)&a1, a2);
}

int fstatfs(int a1, statfs *a2)
{
  return MEMORY[0x1F40CC2D0](*(void *)&a1, a2);
}

int fsync(int a1)
{
  return MEMORY[0x1F40CC2D8](*(void *)&a1);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x1F40CC2F0](*(void *)&a1, a2);
}

int fts_close(FTS *a1)
{
  return MEMORY[0x1F40CC2F8](a1);
}

FTS *__cdecl fts_open(char *const *a1, int a2, int (__cdecl *a3)(const FTSENT **, const FTSENT **))
{
  return (FTS *)MEMORY[0x1F40CC300](a1, *(void *)&a2, a3);
}

FTSENT *__cdecl fts_read(FTS *a1)
{
  return (FTSENT *)MEMORY[0x1F40CC308](a1);
}

int fts_set(FTS *a1, FTSENT *a2, int a3)
{
  return MEMORY[0x1F40CC310](a1, a2, *(void *)&a3);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

int getattrlist(const char *a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x1F40CC360](a1, a2, a3, a4, *(void *)&a5);
}

int getc(FILE *a1)
{
  return MEMORY[0x1F40CC388](a1);
}

char *__cdecl getcwd(char *a1, size_t a2)
{
  return (char *)MEMORY[0x1F40CC398](a1, a2);
}

gid_t getegid(void)
{
  return MEMORY[0x1F40CC3A8]();
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CC3B0](a1);
}

uid_t geteuid(void)
{
  return MEMORY[0x1F40CC3B8]();
}

group *__cdecl getgrgid(gid_t a1)
{
  return (group *)MEMORY[0x1F40CC3D8](*(void *)&a1);
}

group *__cdecl getgrnam(const char *a1)
{
  return (group *)MEMORY[0x1F40CC3E0](a1);
}

int getiopolicy_np(int a1, int a2)
{
  return MEMORY[0x1F40CC418](*(void *)&a1, *(void *)&a2);
}

hostent *__cdecl getipnodebyname(const char *a1, int a2, int a3, int *a4)
{
  return (hostent *)MEMORY[0x1F40CC420](a1, *(void *)&a2, *(void *)&a3, a4);
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

passwd *getpwent(void)
{
  return (passwd *)MEMORY[0x1F40CC4D0]();
}

passwd *__cdecl getpwnam(const char *a1)
{
  return (passwd *)MEMORY[0x1F40CC4D8](a1);
}

passwd *__cdecl getpwuid(uid_t a1)
{
  return (passwd *)MEMORY[0x1F40CC4E8](*(void *)&a1);
}

int getrlimit(int a1, rlimit *a2)
{
  return MEMORY[0x1F40CC500](*(void *)&a1, a2);
}

uid_t getuid(void)
{
  return MEMORY[0x1F40CC570]();
}

ssize_t getxattr(const char *path, const char *name, void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1F40CC590](path, name, value, size, *(void *)&position, *(void *)&options);
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return MEMORY[0x1F40CC680](*(void *)&a1, a2, a3);
}

int isatty(int a1)
{
  return MEMORY[0x1F40CC6B0](*(void *)&a1);
}

int issetugid(void)
{
  return MEMORY[0x1F40CC6C0]();
}

int isspace(int _c)
{
  return MEMORY[0x1F40CC6C8](*(void *)&_c);
}

int isxdigit(int _c)
{
  return MEMORY[0x1F40CC6D0](*(void *)&_c);
}

ptrdiff_t ivar_getOffset(Ivar v)
{
  return MEMORY[0x1F41815C0](v);
}

const char *__cdecl ivar_getTypeEncoding(Ivar v)
{
  return (const char *)MEMORY[0x1F41815C8](v);
}

int kill(pid_t a1, int a2)
{
  return MEMORY[0x1F40CC728](*(void *)&a1, *(void *)&a2);
}

uint64_t langid_consume_string()
{
  return MEMORY[0x1F4180810]();
}

uint64_t langid_create()
{
  return MEMORY[0x1F4180818]();
}

uint64_t langid_dispose()
{
  return MEMORY[0x1F4180820]();
}

uint64_t langid_languagecode()
{
  return MEMORY[0x1F4180830]();
}

uint64_t langid_numlanguages()
{
  return MEMORY[0x1F4180838]();
}

int link(const char *a1, const char *a2)
{
  return MEMORY[0x1F40CC830](a1, a2);
}

ssize_t listxattr(const char *path, char *namebuff, size_t size, int options)
{
  return MEMORY[0x1F40CC848](path, namebuff, size, *(void *)&options);
}

long double log(long double __x)
{
  MEMORY[0x1F40CC878](__x);
  return result;
}

long double log10(long double __x)
{
  MEMORY[0x1F40CC880](__x);
  return result;
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x1F40CC8F8](*(void *)&a1, a2, *(void *)&a3);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CC900](a1, a2);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1F40CC910]();
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1F40CC940](*(void *)&error_value);
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return MEMORY[0x1F40CC970](msg, *(void *)&option, *(void *)&send_size, *(void *)&rcv_size, *(void *)&rcv_name, *(void *)&timeout, *(void *)&notify);
}

kern_return_t mach_port_allocate(ipc_space_t task, mach_port_right_t right, mach_port_name_t *name)
{
  return MEMORY[0x1F40CC9A0](*(void *)&task, *(void *)&right, name);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1F40CC9B8](*(void *)&task, *(void *)&name);
}

kern_return_t mach_port_insert_right(ipc_space_t task, mach_port_name_t name, mach_port_t poly, mach_msg_type_name_t polyPoly)
{
  return MEMORY[0x1F40CCA08](*(void *)&task, *(void *)&name, *(void *)&poly, *(void *)&polyPoly);
}

kern_return_t mach_port_mod_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta)
{
  return MEMORY[0x1F40CCA10](*(void *)&task, *(void *)&name, *(void *)&right, *(void *)&delta);
}

kern_return_t mach_port_type(ipc_space_t task, mach_port_name_t name, mach_port_type_t *ptype)
{
  return MEMORY[0x1F40CCA40](*(void *)&task, *(void *)&name, ptype);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40CCA60](info);
}

kern_return_t mach_vm_allocate(vm_map_t target, mach_vm_address_t *address, mach_vm_size_t size, int flags)
{
  return MEMORY[0x1F40CCA68](*(void *)&target, address, size, *(void *)&flags);
}

kern_return_t mach_vm_deallocate(vm_map_t target, mach_vm_address_t address, mach_vm_size_t size)
{
  return MEMORY[0x1F40CCA78](*(void *)&target, address, size);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

malloc_zone_t *__cdecl malloc_create_zone(vm_size_t start_size, unsigned int flags)
{
  return (malloc_zone_t *)MEMORY[0x1F40CCB20](start_size, *(void *)&flags);
}

malloc_zone_t *malloc_default_zone(void)
{
  return (malloc_zone_t *)MEMORY[0x1F40CCB30]();
}

const char *__cdecl malloc_get_zone_name(malloc_zone_t *zone)
{
  return (const char *)MEMORY[0x1F40CCB50](zone);
}

size_t malloc_good_size(size_t size)
{
  return MEMORY[0x1F40CCB58](size);
}

void malloc_set_zone_name(malloc_zone_t *zone, const char *name)
{
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl malloc_type_zone_calloc(malloc_zone_t *zone, size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBB8](zone, count, size, type_id);
}

void *__cdecl malloc_type_zone_malloc(malloc_zone_t *zone, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBC0](zone, size, type_id);
}

void *__cdecl malloc_type_zone_realloc(malloc_zone_t *zone, void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBD8](zone, ptr, size, type_id);
}

uint64_t malloc_zone_claimed_address()
{
  return MEMORY[0x1F40CCC00]();
}

void malloc_zone_free(malloc_zone_t *zone, void *ptr)
{
}

malloc_zone_t *__cdecl malloc_zone_from_ptr(const void *ptr)
{
  return (malloc_zone_t *)MEMORY[0x1F40CCC10](ptr);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x1F40CCD40](__s, __smax, *(void *)&__c, __n);
}

int mergesort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return MEMORY[0x1F40CCD48](__base, __nel, __width, __compar);
}

char *__cdecl method_copyArgumentType(Method m, unsigned int index)
{
  return (char *)MEMORY[0x1F41815D0](m, *(void *)&index);
}

char *__cdecl method_copyReturnType(Method m)
{
  return (char *)MEMORY[0x1F41815D8](m);
}

void method_getArgumentType(Method m, unsigned int index, char *dst, size_t dst_len)
{
}

IMP method_getImplementation(Method m)
{
  return (IMP)MEMORY[0x1F41815F8](m);
}

SEL method_getName(Method m)
{
  return (SEL)MEMORY[0x1F4181600](m);
}

unsigned int method_getNumberOfArguments(Method m)
{
  return MEMORY[0x1F4181608](m);
}

void method_getReturnType(Method m, char *dst, size_t dst_len)
{
}

const char *__cdecl method_getTypeEncoding(Method m)
{
  return (const char *)MEMORY[0x1F4181618](m);
}

void method_invoke(void)
{
}

IMP method_setImplementation(Method m, IMP imp)
{
  return (IMP)MEMORY[0x1F4181628](m, imp);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1F40CCDD0](a1, a2);
}

char *__cdecl mkdtemp(char *a1)
{
  return (char *)MEMORY[0x1F40CCDE0](a1);
}

int mkstemp(char *a1)
{
  return MEMORY[0x1F40CCE08](a1);
}

char *__cdecl mktemp(char *a1)
{
  return (char *)MEMORY[0x1F40CCE28](a1);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1F40CCE40](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

long double modf(long double __x, long double *__y)
{
  MEMORY[0x1F40CCE48](__y, __x);
  return result;
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE88](a1, a2);
}

int nanosleep(const timespec *__rqtp, timespec *__rmtp)
{
  return MEMORY[0x1F40CCEA0](__rqtp, __rmtp);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1F40CD028](*(void *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1F40CD040](*(void *)&token, state64);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

Class objc_allocateClassPair(Class superclass, const char *name, size_t extraBytes)
{
  return (Class)MEMORY[0x1F4181650](superclass, name, extraBytes);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

id objc_constructInstance(Class cls, void *bytes)
{
  return (id)MEMORY[0x1F4181690](cls, bytes);
}

uint64_t objc_copyClassNamesForImageHeader()
{
  return MEMORY[0x1F41816A8]();
}

const char **__cdecl objc_copyImageNames(unsigned int *outCount)
{
  return (const char **)MEMORY[0x1F41816B8](outCount);
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void *__cdecl objc_destructInstance(id obj)
{
  return (void *)MEMORY[0x1F41816D8](obj);
}

Class objc_duplicateClass(Class original, const char *name, size_t extraBytes)
{
  return (Class)MEMORY[0x1F41816E8](original, name, extraBytes);
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

void objc_exception_throw(id exception)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1F4181718](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

Protocol *__cdecl objc_getProtocol(const char *name)
{
  return (Protocol *)MEMORY[0x1F4181750](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_initWeakOrNil(id *location, id val)
{
  return (id)MEMORY[0x1F4181760](location, val);
}

id objc_loadWeak(id *location)
{
  return (id)MEMORY[0x1F4181778](location);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

Class objc_lookUpClass(const char *name)
{
  return (Class)MEMORY[0x1F4181788](name);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_registerClassPair(Class cls)
{
}

void objc_release(id a1)
{
}

void objc_removeAssociatedObjects(id object)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

void objc_terminate(void)
{
}

id object_copy(id a1, size_t a2)
{
  return (id)MEMORY[0x1F4181A48](a1, a2);
}

id object_dispose(id a1)
{
  return (id)MEMORY[0x1F4181A50](a1);
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x1F4181A58](a1);
}

const char *__cdecl object_getClassName(id a1)
{
  return (const char *)MEMORY[0x1F4181A60](a1);
}

void *__cdecl object_getIndexedIvars(id a1)
{
  return (void *)MEMORY[0x1F4181A68](a1);
}

id object_getIvar(id a1, Ivar a2)
{
  return (id)MEMORY[0x1F4181A78](a1, a2);
}

uint64_t object_getMethodImplementation()
{
  return MEMORY[0x1F4181A80]();
}

BOOL object_isClass(id obj)
{
  return MEMORY[0x1F4181A88](obj);
}

Class object_setClass(id a1, Class a2)
{
  return (Class)MEMORY[0x1F4181A90](a1, a2);
}

void object_setIvar(id obj, Ivar ivar, id value)
{
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return MEMORY[0x1F40CD0F0](a1, *(void *)&a2, *(void *)&a3, *(void *)&a4);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x1F40CD120](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1F40CD560](log, ptr);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1F40CD5A0]();
}

void os_unfair_lock_assert_not_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

uint64_t os_unfair_lock_lock_with_options()
{
  return MEMORY[0x1F40CD5E8]();
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_unfair_recursive_lock_lock_with_options()
{
  return MEMORY[0x1F40CD610]();
}

uint64_t os_unfair_recursive_lock_unlock()
{
  return MEMORY[0x1F40CD628]();
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1F40CD650]();
}

int pipe(int a1[2])
{
  return MEMORY[0x1F40CD760](a1);
}

int posix_spawn(pid_t *a1, const char *a2, const posix_spawn_file_actions_t *a3, const posix_spawnattr_t *a4, char *const __argv[], char *const __envp[])
{
  return MEMORY[0x1F40CD790](a1, a2, a3, a4, __argv, __envp);
}

int posix_spawn_file_actions_adddup2(posix_spawn_file_actions_t *a1, int a2, int a3)
{
  return MEMORY[0x1F40CD7A0](a1, *(void *)&a2, *(void *)&a3);
}

int posix_spawn_file_actions_destroy(posix_spawn_file_actions_t *a1)
{
  return MEMORY[0x1F40CD7B8](a1);
}

int posix_spawn_file_actions_init(posix_spawn_file_actions_t *a1)
{
  return MEMORY[0x1F40CD7C0](a1);
}

int posix_spawnattr_destroy(posix_spawnattr_t *a1)
{
  return MEMORY[0x1F40CD7C8](a1);
}

int posix_spawnattr_init(posix_spawnattr_t *a1)
{
  return MEMORY[0x1F40CD7D0](a1);
}

int posix_spawnattr_set_qos_class_np(posix_spawnattr_t *__attr, qos_class_t __qos_class)
{
  return MEMORY[0x1F40CD7D8](__attr, *(void *)&__qos_class);
}

int posix_spawnattr_setbinpref_np(posix_spawnattr_t *a1, size_t a2, cpu_type_t *a3, size_t *a4)
{
  return MEMORY[0x1F40CD7E0](a1, a2, a3, a4);
}

int posix_spawnattr_setflags(posix_spawnattr_t *a1, __int16 a2)
{
  return MEMORY[0x1F40CD7E8](a1, a2);
}

int posix_spawnattr_setsigdefault(posix_spawnattr_t *a1, const sigset_t *a2)
{
  return MEMORY[0x1F40CD7F8](a1, a2);
}

int posix_spawnattr_setsigmask(posix_spawnattr_t *a1, const sigset_t *a2)
{
  return MEMORY[0x1F40CD800](a1, a2);
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1F40CD888](*(void *)&pid, buffer, *(void *)&buffersize);
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return MEMORY[0x1F40CD8A8](*(void *)&pid, *(void *)&flavor, arg, buffer, *(void *)&buffersize);
}

BOOL protocol_conformsToProtocol(Protocol *proto, Protocol *other)
{
  return MEMORY[0x1F4181AE0](proto, other);
}

objc_method_description *__cdecl protocol_copyMethodDescriptionList(Protocol *p, BOOL isRequiredMethod, BOOL isInstanceMethod, unsigned int *outCount)
{
  return (objc_method_description *)MEMORY[0x1F4181AE8](p, isRequiredMethod, isInstanceMethod, outCount);
}

Protocol **__cdecl protocol_copyProtocolList(Protocol *proto, unsigned int *outCount)
{
  return (Protocol **)MEMORY[0x1F4181B00](proto, outCount);
}

objc_method_description protocol_getMethodDescription(Protocol *p, SEL aSel, BOOL isRequiredMethod, BOOL isInstanceMethod)
{
  CFIndex v4 = (const char *)MEMORY[0x1F4181B08](p, aSel, isRequiredMethod, isInstanceMethod);
  result.types = v5;
  result.name = v4;
  return result;
}

const char *__cdecl protocol_getName(Protocol *p)
{
  return (const char *)MEMORY[0x1F4181B10](p);
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return MEMORY[0x1F40CD918](a1);
}

int pthread_attr_getschedparam(const pthread_attr_t *a1, sched_param *a2)
{
  return MEMORY[0x1F40CD920](a1, a2);
}

int pthread_attr_getstacksize(const pthread_attr_t *a1, size_t *a2)
{
  return MEMORY[0x1F40CD928](a1, a2);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x1F40CD930](a1);
}

int pthread_attr_set_qos_class_np(pthread_attr_t *__attr, qos_class_t __qos_class, int __relative_priority)
{
  return MEMORY[0x1F40CD938](__attr, *(void *)&__qos_class, *(void *)&__relative_priority);
}

int pthread_attr_setdetachstate(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x1F40CD940](a1, *(void *)&a2);
}

int pthread_attr_setschedparam(pthread_attr_t *a1, const sched_param *a2)
{
  return MEMORY[0x1F40CD950](a1, a2);
}

int pthread_attr_setschedpolicy(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x1F40CD958](a1, *(void *)&a2);
}

int pthread_attr_setscope(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x1F40CD960](a1, *(void *)&a2);
}

int pthread_attr_setstacksize(pthread_attr_t *a1, size_t a2)
{
  return MEMORY[0x1F40CD968](a1, a2);
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD978](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD980](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1F40CD988](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD990](a1);
}

int pthread_cond_timedwait_relative_np(pthread_cond_t *a1, pthread_mutex_t *a2, const timespec *a3)
{
  return MEMORY[0x1F40CD9A0](a1, a2, a3);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1F40CD9A8](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1F40CD9B8](a1, a2, a3, a4);
}

int pthread_equal(pthread_t a1, pthread_t a2)
{
  return MEMORY[0x1F40CD9E0](a1, a2);
}

void pthread_exit(void *a1)
{
}

int pthread_get_qos_class_np(pthread_t __pthread, qos_class_t *__qos_class, int *__relative_priority)
{
  return MEMORY[0x1F40CD9F8](__pthread, __qos_class, __relative_priority);
}

int pthread_getname_np(pthread_t a1, char *a2, size_t a3)
{
  return MEMORY[0x1F40CDA10](a1, a2, a3);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1F40CDA20](a1);
}

int pthread_getugid_np(uid_t *a1, gid_t *a2)
{
  return MEMORY[0x1F40CDA28](a1, a2);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1F40CDA40](a1, a2);
}

mach_port_t pthread_mach_thread_np(pthread_t a1)
{
  return MEMORY[0x1F40CDA60](a1);
}

int pthread_main_np(void)
{
  return MEMORY[0x1F40CDA68]();
}

uint64_t pthread_main_thread_np()
{
  return MEMORY[0x1F40CDA70]();
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_trylock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA90](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1F40CDAA8](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1F40CDAC0](a1, *(void *)&a2);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1F40CDAC8](a1, a2);
}

int pthread_override_qos_class_end_np(pthread_override_t __override)
{
  return MEMORY[0x1F40CDAD0](__override);
}

pthread_override_t pthread_override_qos_class_start_np(pthread_t __pthread, qos_class_t __qos_class, int __relative_priority)
{
  return (pthread_override_t)MEMORY[0x1F40CDAD8](__pthread, *(void *)&__qos_class, *(void *)&__relative_priority);
}

int pthread_rwlock_destroy(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDAE8](a1);
}

int pthread_rwlock_init(pthread_rwlock_t *a1, const pthread_rwlockattr_t *a2)
{
  return MEMORY[0x1F40CDAF0](a1, a2);
}

int pthread_rwlock_rdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDAF8](a1);
}

int pthread_rwlock_tryrdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDB00](a1);
}

int pthread_rwlock_trywrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDB08](a1);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDB10](a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDB18](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1F40CDB30]();
}

int pthread_set_qos_class_self_np(qos_class_t __qos_class, int __relative_priority)
{
  return MEMORY[0x1F40CDB48](*(void *)&__qos_class, *(void *)&__relative_priority);
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x1F40CDB60](a1);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1F40CDB70](a1, a2);
}

void pthread_yield_np(void)
{
}

int putc(int a1, FILE *a2)
{
  return MEMORY[0x1F40CDBA0](*(void *)&a1, a2);
}

qos_class_t qos_class_main(void)
{
  return MEMORY[0x1F40CDBD0]();
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1F40CDBD8]();
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

int quotactl(const char *a1, int a2, int a3, caddr_t a4)
{
  return MEMORY[0x1F40CDBF8](a1, *(void *)&a2, *(void *)&a3, a4);
}

uint64_t random(void)
{
  return MEMORY[0x1F40CDC18]();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1F40CDC50](*(void *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x1F40CDC60](a1);
}

int readdir_r(DIR *a1, dirent *a2, dirent **a3)
{
  return MEMORY[0x1F40CDC68](a1, a2, a3);
}

ssize_t readlink(const char *a1, char *a2, size_t a3)
{
  return MEMORY[0x1F40CDC70](a1, a2, a3);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1F40CDC88](__ptr, __size);
}

long double remainder(long double __x, long double __y)
{
  MEMORY[0x1F40CDD00](__x, __y);
  return result;
}

int removefile(const char *path, removefile_state_t state, removefile_flags_t flags)
{
  return MEMORY[0x1F40CDD18](path, state, *(void *)&flags);
}

removefile_state_t removefile_state_alloc(void)
{
  return (removefile_state_t)MEMORY[0x1F40CDD20]();
}

int removefile_state_free(removefile_state_t a1)
{
  return MEMORY[0x1F40CDD28](a1);
}

int removefile_state_get(removefile_state_t state, uint32_t key, void *dst)
{
  return MEMORY[0x1F40CDD30](state, *(void *)&key, dst);
}

int removefile_state_set(removefile_state_t state, uint32_t key, const void *value)
{
  return MEMORY[0x1F40CDD38](state, *(void *)&key, value);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
}

int rmdir(const char *a1)
{
  return MEMORY[0x1F40CDD90](a1);
}

uint64_t sandbox_check()
{
  return MEMORY[0x1F40CDDD0]();
}

uint64_t sandbox_check_by_audit_token()
{
  return MEMORY[0x1F40CDDD8]();
}

uint64_t sandbox_extension_consume()
{
  return MEMORY[0x1F40CDDF8]();
}

uint64_t sandbox_extension_issue_file()
{
  return MEMORY[0x1F40CDE00]();
}

uint64_t sandbox_extension_issue_file_to_process()
{
  return MEMORY[0x1F40CDE08]();
}

uint64_t sandbox_extension_release()
{
  return MEMORY[0x1F40CDE50]();
}

const char *__cdecl sel_getName(SEL sel)
{
  return (const char *)MEMORY[0x1F4181B28](sel);
}

SEL sel_getUid(const char *str)
{
  return (SEL)MEMORY[0x1F4181B30](str);
}

uint64_t sel_lookUpByName()
{
  return MEMORY[0x1F4181B40]();
}

SEL sel_registerName(const char *str)
{
  return (SEL)MEMORY[0x1F4181B48](str);
}

int setiopolicy_np(int a1, int a2, int a3)
{
  return MEMORY[0x1F40CDF78](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

void setpwent(void)
{
}

int setrlimit(int a1, const rlimit *a2)
{
  return MEMORY[0x1F40CDFB8](*(void *)&a1, a2);
}

int setvbuf(FILE *a1, char *a2, int a3, size_t a4)
{
  return MEMORY[0x1F40CDFD0](a1, a2, *(void *)&a3, a4);
}

int setxattr(const char *path, const char *name, const void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1F40CDFD8](path, name, value, size, *(void *)&position, *(void *)&options);
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return (void (__cdecl *)(int))MEMORY[0x1F40CE030](*(void *)&a1, a2);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int snprintf_l(char *a1, size_t a2, locale_t a3, const char *a4, ...)
{
  return MEMORY[0x1F40CE088](a1, a2, a3, a4);
}

void srandomdev(void)
{
}

int sscanf_l(const char *a1, locale_t a2, const char *a3, ...)
{
  return MEMORY[0x1F40CE0D8](a1, a2, a3);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

int statfs(const char *a1, statfs *a2)
{
  return MEMORY[0x1F40CE118](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE150](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

size_t strcspn(const char *__s, const char *__charset)
{
  return MEMORY[0x1F40CE170](__s, __charset);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1F40CE178](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1A8](__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncasecmp_l(const char *a1, const char *a2, size_t a3, locale_t a4)
{
  return MEMORY[0x1F40CE1E0](a1, a2, a3, a4);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1F40CE1F8](__dst, __src, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1F40CE208](__s1, __n);
}

size_t strspn(const char *__s, const char *__charset)
{
  return MEMORY[0x1F40CE250](__s, __charset);
}

double strtod_l(const char *a1, char **a2, locale_t a3)
{
  MEMORY[0x1F40CE268](a1, a2, a3);
  return result;
}

float strtof_l(const char *a1, char **a2, locale_t a3)
{
  MEMORY[0x1F40CE278](a1, a2, a3);
  return result;
}

uint64_t strtoll_l(const char *a1, char **a2, int a3, locale_t a4)
{
  return MEMORY[0x1F40CE2C8](a1, a2, *(void *)&a3, a4);
}

unint64_t strtoul_l(const char *a1, char **a2, int a3, locale_t a4)
{
  return MEMORY[0x1F40CE2E8](a1, a2, *(void *)&a3, a4);
}

unint64_t strtoull_l(const char *a1, char **a2, int a3, locale_t a4)
{
  return MEMORY[0x1F40CE2F8](a1, a2, *(void *)&a3, a4);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1F41863D0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1F41863E0]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1F4186410]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1F4186418]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1F4186420]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1F4186428]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1F4186448]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1F4186458]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1F4186460]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x1F4186478]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1F41881F0]();
}

uint64_t swift_continuation_resume()
{
  return MEMORY[0x1F41881F8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1F4186488]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1F41864A0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x1F4188218]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x1F4188220]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1F41864C0]();
}

uint64_t swift_dynamicCastClassUnconditional()
{
  return MEMORY[0x1F41864C8]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x1F41864D0]();
}

uint64_t swift_dynamicCastMetatypeUnconditional()
{
  return MEMORY[0x1F41864D8]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x1F41864E0]();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return MEMORY[0x1F41864E8]();
}

uint64_t swift_dynamicCastTypeToObjCProtocolConditional()
{
  return MEMORY[0x1F4186500]();
}

uint64_t swift_dynamicCastUnknownClass()
{
  return MEMORY[0x1F4186508]();
}

uint64_t swift_dynamicCastUnknownClassUnconditional()
{
  return MEMORY[0x1F4186510]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1F4186530]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1F4186538]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1F4186540]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x1F4186550]();
}

uint64_t swift_getAtPartialKeyPath()
{
  return MEMORY[0x1F4186558]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x1F4186568]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1F4186570]();
}

uint64_t swift_getExtendedExistentialTypeMetadata()
{
  return MEMORY[0x1F4186598]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1F41865A8]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1F41865E0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x1F41865E8]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x1F41865F0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1F41865F8]();
}

uint64_t swift_getObjCClassFromObject()
{
  return MEMORY[0x1F4186600]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1F4186610]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1F4186628]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x1F4186638]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x1F4186648]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1F4186650]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x1F4186658]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1F4186670]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1F4186688]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1F4186690]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x1F41866A0]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1F41866A8]();
}

uint64_t swift_initStaticObject()
{
  return MEMORY[0x1F41866B0]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1F41866B8]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x1F41866C0]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1F41866C8]();
}

uint64_t swift_isUniquelyReferenced_native()
{
  return MEMORY[0x1F41866E8]();
}

uint64_t swift_isUniquelyReferenced_nonNull()
{
  return MEMORY[0x1F41866F0]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1F41866F8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1F4186710]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1F4186760]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1F4186778]();
}

uint64_t swift_setAtWritableKeyPath()
{
  return MEMORY[0x1F4186788]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1F4186790]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1F4186798]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1F41867A0]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1F41867A8]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x1F41867B0]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1F41867B8]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1F4188250]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1F4188258]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1F4188260]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1F41867D8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1F41867E8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1F41867F8]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x1F4186840]();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return MEMORY[0x1F4186848]();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return MEMORY[0x1F4186850]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1F4186858]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1F4186860]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1F4186868]();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return MEMORY[0x1F4186870]();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return MEMORY[0x1F4186878]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1F4186898]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x1F41868A0]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1F41868B8]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1F41868C0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1F41868C8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1F41868E0]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x1F41868E8]();
}

int symlink(const char *a1, const char *a2)
{
  return MEMORY[0x1F40CE360](a1, a2);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1F40CE3C0](a1, *(void *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1F40CE3D0](a1, a2, a3, a4, a5);
}

sysdir_search_path_enumeration_state sysdir_get_next_search_path_enumeration(sysdir_search_path_enumeration_state state, char *path)
{
  return MEMORY[0x1F40CE3E8](*(void *)&state, path);
}

uint64_t sysdir_start_search_path_enumeration_private()
{
  return MEMORY[0x1F40CE3F8]();
}

void syslog(int a1, const char *a2, ...)
{
}

kern_return_t task_get_special_port(task_inspect_t task, int which_port, mach_port_t *special_port)
{
  return MEMORY[0x1F40CE460](*(void *)&task, *(void *)&which_port, special_port);
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x1F40CE470](*(void *)&target_task, *(void *)&flavor, task_info_out, task_info_outCnt);
}

kern_return_t thread_policy_get(thread_inspect_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t *policy_infoCnt, BOOLean_t *get_default)
{
  return MEMORY[0x1F40CE538](*(void *)&thread, *(void *)&flavor, policy_info, policy_infoCnt, get_default);
}

kern_return_t thread_policy_set(thread_act_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t policy_infoCnt)
{
  return MEMORY[0x1F40CE540](*(void *)&thread, *(void *)&flavor, policy_info, *(void *)&policy_infoCnt);
}

uint64_t thread_stack_async_pcs()
{
  return MEMORY[0x1F40CE568]();
}

int32_t u_charDigitValue(UChar32 c)
{
  return MEMORY[0x1F417F6F8](*(void *)&c);
}

void u_charsToUChars(const char *cs, UChar *us, int32_t length)
{
}

const char *__cdecl u_errorName(UErrorCode code)
{
  return (const char *)MEMORY[0x1F417F728](*(void *)&code);
}

int32_t u_getPropertyValueEnum(UProperty property, const char *alias)
{
  return MEMORY[0x1F417F770](*(void *)&property, alias);
}

UBool u_hasBinaryProperty(UChar32 c, UProperty which)
{
  return MEMORY[0x1F417F780](*(void *)&c, *(void *)&which);
}

UBool u_isUWhiteSpace(UChar32 c)
{
  return MEMORY[0x1F417F7A0](*(void *)&c);
}

UBool u_isprint(UChar32 c)
{
  return MEMORY[0x1F417F7D8](*(void *)&c);
}

int32_t u_strlen(const UChar *s)
{
  return MEMORY[0x1F417F890](s);
}

uint64_t u_vformatMessage()
{
  return MEMORY[0x1F417F8D8]();
}

uint64_t uameasfmt_close()
{
  return MEMORY[0x1F417F918]();
}

uint64_t uameasfmt_format()
{
  return MEMORY[0x1F417F920]();
}

uint64_t uameasfmt_formatMultiple()
{
  return MEMORY[0x1F417F928]();
}

uint64_t uameasfmt_getUnitName()
{
  return MEMORY[0x1F417F930]();
}

uint64_t uameasfmt_getUnitsForUsage()
{
  return MEMORY[0x1F417F938]();
}

uint64_t uameasfmt_open()
{
  return MEMORY[0x1F417F940]();
}

uint64_t uatmufmt_close()
{
  return MEMORY[0x1F417F948]();
}

uint64_t uatmufmt_format()
{
  return MEMORY[0x1F417F950]();
}

uint64_t uatmufmt_getListPattern()
{
  return MEMORY[0x1F417F958]();
}

uint64_t uatmufmt_getTimePattern()
{
  return MEMORY[0x1F417F960]();
}

uint64_t uatmufmt_openWithNumberFormat()
{
  return MEMORY[0x1F417F968]();
}

UBlockCode ublock_getCode(UChar32 c)
{
  return MEMORY[0x1F417FA20](*(void *)&c);
}

uint64_t ucal_add()
{
  return MEMORY[0x1F417FAB0]();
}

uint64_t ucal_clear()
{
  return MEMORY[0x1F417FAB8]();
}

uint64_t ucal_clone()
{
  return MEMORY[0x1F417FAC0]();
}

uint64_t ucal_close()
{
  return MEMORY[0x1F417FAC8]();
}

uint64_t ucal_get()
{
  return MEMORY[0x1F417FAD0]();
}

uint64_t ucal_getAttribute()
{
  return MEMORY[0x1F417FAD8]();
}

uint64_t ucal_getCanonicalTimeZoneID()
{
  return MEMORY[0x1F417FAE0]();
}

uint64_t ucal_getDayOfWeekType()
{
  return MEMORY[0x1F417FAF0]();
}

uint64_t ucal_getFieldDifference()
{
  return MEMORY[0x1F417FAF8]();
}

uint64_t ucal_getGregorianChange()
{
  return MEMORY[0x1F417FB00]();
}

uint64_t ucal_getKeywordValuesForLocale()
{
  return MEMORY[0x1F417FB10]();
}

uint64_t ucal_getLimit()
{
  return MEMORY[0x1F417FB18]();
}

uint64_t ucal_getMillis()
{
  return MEMORY[0x1F417FB20]();
}

uint64_t ucal_getNow()
{
  return MEMORY[0x1F417FB28]();
}

uint64_t ucal_getTZDataVersion()
{
  return MEMORY[0x1F417FB30]();
}

uint64_t ucal_getTimeZoneDisplayName()
{
  return MEMORY[0x1F417FB38]();
}

uint64_t ucal_getTimeZoneOffsetFromLocal()
{
  return MEMORY[0x1F417FB40]();
}

uint64_t ucal_getTimeZoneTransitionDate()
{
  return MEMORY[0x1F417FB48]();
}

uint64_t ucal_getWeekendTransition()
{
  return MEMORY[0x1F417FB58]();
}

uint64_t ucal_isWeekend()
{
  return MEMORY[0x1F417FB68]();
}

uint64_t ucal_open()
{
  return MEMORY[0x1F417FB70]();
}

uint64_t ucal_openTimeZones()
{
  return MEMORY[0x1F417FB80]();
}

uint64_t ucal_roll()
{
  return MEMORY[0x1F417FB88]();
}

uint64_t ucal_set()
{
  return MEMORY[0x1F417FB90]();
}

uint64_t ucal_setAttribute()
{
  return MEMORY[0x1F417FB98]();
}

uint64_t ucal_setDateTime()
{
  return MEMORY[0x1F417FBA8]();
}

uint64_t ucal_setGregorianChange()
{
  return MEMORY[0x1F417FBB0]();
}

uint64_t ucal_setMillis()
{
  return MEMORY[0x1F417FBB8]();
}

uint64_t ucasemap_close()
{
  return MEMORY[0x1F417FBC8]();
}

uint64_t ucasemap_open()
{
  return MEMORY[0x1F417FBD0]();
}

uint64_t ucasemap_utf8ToTitle()
{
  return MEMORY[0x1F417FBE0]();
}

uint64_t ucol_getKeywordValues()
{
  return MEMORY[0x1F417FD38]();
}

uint64_t ucol_getKeywordValuesForLocale()
{
  return MEMORY[0x1F417FD40]();
}

uint64_t ucurr_forLocale()
{
  return MEMORY[0x1F417FE38]();
}

uint64_t ucurr_getName()
{
  return MEMORY[0x1F417FE48]();
}

uint64_t ucurr_getNumericCode()
{
  return MEMORY[0x1F417FE50]();
}

uint64_t ucurr_openISOCurrencies()
{
  return MEMORY[0x1F417FE70]();
}

uint64_t udat_applyPattern()
{
  return MEMORY[0x1F417FE78]();
}

uint64_t udat_close()
{
  return MEMORY[0x1F417FE90]();
}

uint64_t udat_countSymbols()
{
  return MEMORY[0x1F417FE98]();
}

uint64_t udat_format()
{
  return MEMORY[0x1F417FEA0]();
}

uint64_t udat_formatForFields()
{
  return MEMORY[0x1F417FEA8]();
}

uint64_t udat_getCalendar()
{
  return MEMORY[0x1F417FEB8]();
}

uint64_t udat_getSymbols()
{
  return MEMORY[0x1F417FEC8]();
}

uint64_t udat_open()
{
  return MEMORY[0x1F417FED8]();
}

uint64_t udat_parseCalendar()
{
  return MEMORY[0x1F417FEE0]();
}

uint64_t udat_patternCharToDateFormatField()
{
  return MEMORY[0x1F417FEE8]();
}

uint64_t udat_set2DigitYearStart()
{
  return MEMORY[0x1F417FEF0]();
}

uint64_t udat_setBooleanAttribute()
{
  return MEMORY[0x1F417FEF8]();
}

uint64_t udat_setCalendar()
{
  return MEMORY[0x1F417FF00]();
}

uint64_t udat_setContext()
{
  return MEMORY[0x1F417FF08]();
}

uint64_t udat_setLenient()
{
  return MEMORY[0x1F417FF10]();
}

uint64_t udat_toCalendarDateField()
{
  return MEMORY[0x1F417FF20]();
}

uint64_t udatpg_clone()
{
  return MEMORY[0x1F417FF40]();
}

uint64_t udatpg_close()
{
  return MEMORY[0x1F417FF48]();
}

uint64_t udatpg_getBestPatternWithOptions()
{
  return MEMORY[0x1F417FF60]();
}

uint64_t udatpg_getDefaultHourCycle()
{
  return MEMORY[0x1F417FF68]();
}

uint64_t udatpg_open()
{
  return MEMORY[0x1F417FF80]();
}

uint64_t udtitvfmt_close()
{
  return MEMORY[0x1F417FF88]();
}

uint64_t udtitvfmt_format()
{
  return MEMORY[0x1F417FF98]();
}

uint64_t udtitvfmt_open()
{
  return MEMORY[0x1F417FFB0]();
}

uint64_t udtitvfmt_setAttribute()
{
  return MEMORY[0x1F417FFC8]();
}

uint64_t uenum_close()
{
  return MEMORY[0x1F417FFD8]();
}

uint64_t uenum_next()
{
  return MEMORY[0x1F417FFE8]();
}

uint64_t uenum_unext()
{
  return MEMORY[0x1F417FFF0]();
}

uint64_t ufieldpositer_close()
{
  return MEMORY[0x1F417FFF8]();
}

uint64_t ufieldpositer_next()
{
  return MEMORY[0x1F4180000]();
}

uint64_t ufieldpositer_open()
{
  return MEMORY[0x1F4180008]();
}

uint64_t ufmt_close()
{
  return MEMORY[0x1F4180010]();
}

uint64_t ufmt_getDecNumChars()
{
  return MEMORY[0x1F4180018]();
}

uint64_t ufmt_open()
{
  return MEMORY[0x1F4180020]();
}

int32_t uidna_nameToASCII(const UIDNA *idna, const UChar *name, int32_t length, UChar *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
{
  return MEMORY[0x1F4180048](idna, name, *(void *)&length, dest, *(void *)&capacity, pInfo, pErrorCode);
}

int32_t uidna_nameToASCII_UTF8(const UIDNA *idna, const char *name, int32_t length, char *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
{
  return MEMORY[0x1F4180050](idna, name, *(void *)&length, dest, *(void *)&capacity, pInfo, pErrorCode);
}

int32_t uidna_nameToUnicode(const UIDNA *idna, const UChar *name, int32_t length, UChar *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
{
  return MEMORY[0x1F4180058](idna, name, *(void *)&length, dest, *(void *)&capacity, pInfo, pErrorCode);
}

int32_t uidna_nameToUnicodeUTF8(const UIDNA *idna, const char *name, int32_t length, char *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
{
  return MEMORY[0x1F4180060](idna, name, *(void *)&length, dest, *(void *)&capacity, pInfo, pErrorCode);
}

UIDNA *__cdecl uidna_openUTS46(uint32_t options, UErrorCode *pErrorCode)
{
  return (UIDNA *)MEMORY[0x1F4180068](*(void *)&options, pErrorCode);
}

uint64_t ulistfmt_close()
{
  return MEMORY[0x1F41800C8]();
}

uint64_t ulistfmt_format()
{
  return MEMORY[0x1F41800D8]();
}

uint64_t ulistfmt_openForType()
{
  return MEMORY[0x1F41800F0]();
}

uint64_t uloc_addLikelySubtags()
{
  return MEMORY[0x1F4180108]();
}

uint64_t uloc_countAvailable()
{
  return MEMORY[0x1F4180118]();
}

uint64_t uloc_getAvailable()
{
  return MEMORY[0x1F4180128]();
}

uint64_t uloc_getCountry()
{
  return MEMORY[0x1F4180140]();
}

uint64_t uloc_getDisplayCountry()
{
  return MEMORY[0x1F4180150]();
}

uint64_t uloc_getDisplayKeywordValue()
{
  return MEMORY[0x1F4180158]();
}

uint64_t uloc_getDisplayScript()
{
  return MEMORY[0x1F4180160]();
}

uint64_t uloc_getDisplayVariant()
{
  return MEMORY[0x1F4180168]();
}

uint64_t uloc_getISO3Language()
{
  return MEMORY[0x1F4180178]();
}

uint64_t uloc_getKeywordValue()
{
  return MEMORY[0x1F4180188]();
}

uint64_t uloc_getLCID()
{
  return MEMORY[0x1F4180190]();
}

uint64_t uloc_getLanguage()
{
  return MEMORY[0x1F4180198]();
}

uint64_t uloc_getLocaleForLCID()
{
  return MEMORY[0x1F41801A0]();
}

uint64_t uloc_getScript()
{
  return MEMORY[0x1F41801A8]();
}

uint64_t uloc_getVariant()
{
  return MEMORY[0x1F41801B0]();
}

uint64_t uloc_openKeywords()
{
  return MEMORY[0x1F41801C0]();
}

uint64_t uloc_setKeywordValue()
{
  return MEMORY[0x1F41801C8]();
}

uint64_t uloc_toLanguageTag()
{
  return MEMORY[0x1F41801D0]();
}

uint64_t uloc_toLegacyKey()
{
  return MEMORY[0x1F41801D8]();
}

uint64_t ulocdata_close()
{
  return MEMORY[0x1F41801E8]();
}

uint64_t ulocdata_getDelimiter()
{
  return MEMORY[0x1F41801F8]();
}

uint64_t ulocdata_getExemplarSet()
{
  return MEMORY[0x1F4180200]();
}

uint64_t ulocdata_getMeasurementSystem()
{
  return MEMORY[0x1F4180208]();
}

uint64_t ulocdata_open()
{
  return MEMORY[0x1F4180210]();
}

mode_t umask(mode_t a1)
{
  return MEMORY[0x1F40CE5C0](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x1F40CE5E0](a1);
}

uint64_t unum_clone()
{
  return MEMORY[0x1F4180288]();
}

uint64_t unum_close()
{
  return MEMORY[0x1F4180290]();
}

uint64_t unum_formatInt64()
{
  return MEMORY[0x1F41802B8]();
}

uint64_t unum_getAttribute()
{
  return MEMORY[0x1F41802C0]();
}

uint64_t unum_getSymbol()
{
  return MEMORY[0x1F41802E0]();
}

uint64_t unum_getTextAttribute()
{
  return MEMORY[0x1F41802E8]();
}

uint64_t unum_open()
{
  return MEMORY[0x1F41802F0]();
}

uint64_t unum_parseDouble()
{
  return MEMORY[0x1F4180308]();
}

uint64_t unum_parseInt64()
{
  return MEMORY[0x1F4180310]();
}

uint64_t unum_parseToUFormattable()
{
  return MEMORY[0x1F4180318]();
}

uint64_t unum_setAttribute()
{
  return MEMORY[0x1F4180320]();
}

uint64_t unum_setContext()
{
  return MEMORY[0x1F4180328]();
}

uint64_t unum_setDoubleAttribute()
{
  return MEMORY[0x1F4180330]();
}

uint64_t unum_setSymbol()
{
  return MEMORY[0x1F4180338]();
}

uint64_t unum_setTextAttribute()
{
  return MEMORY[0x1F4180340]();
}

uint64_t unumf_close()
{
  return MEMORY[0x1F4180350]();
}

uint64_t unumf_closeResult()
{
  return MEMORY[0x1F4180358]();
}

uint64_t unumf_formatDecimal()
{
  return MEMORY[0x1F4180360]();
}

uint64_t unumf_formatDouble()
{
  return MEMORY[0x1F4180368]();
}

uint64_t unumf_formatInt()
{
  return MEMORY[0x1F4180370]();
}

uint64_t unumf_openForSkeletonAndLocale()
{
  return MEMORY[0x1F4180378]();
}

uint64_t unumf_openResult()
{
  return MEMORY[0x1F4180380]();
}

uint64_t unumf_resultGetAllFieldPositions()
{
  return MEMORY[0x1F4180388]();
}

uint64_t unumf_resultToString()
{
  return MEMORY[0x1F4180390]();
}

uint64_t unumsys_close()
{
  return MEMORY[0x1F41803D0]();
}

uint64_t unumsys_getName()
{
  return MEMORY[0x1F41803E0]();
}

uint64_t unumsys_getRadix()
{
  return MEMORY[0x1F41803E8]();
}

uint64_t unumsys_isAlgorithmic()
{
  return MEMORY[0x1F41803F0]();
}

uint64_t unumsys_open()
{
  return MEMORY[0x1F41803F8]();
}

uint64_t unumsys_openAvailableNames()
{
  return MEMORY[0x1F4180400]();
}

uint64_t uplrules_close()
{
  return MEMORY[0x1F4180410]();
}

uint64_t uplrules_open()
{
  return MEMORY[0x1F4180420]();
}

uint64_t uplrules_select()
{
  return MEMORY[0x1F4180430]();
}

URegularExpression *__cdecl uregex_clone(const URegularExpression *regexp, UErrorCode *status)
{
  return (URegularExpression *)MEMORY[0x1F4180458](regexp, status);
}

void uregex_close(URegularExpression *regexp)
{
}

int64_t uregex_end64(URegularExpression *regexp, int32_t groupNum, UErrorCode *status)
{
  return MEMORY[0x1F4180470](regexp, *(void *)&groupNum, status);
}

UBool uregex_findNext(URegularExpression *regexp, UErrorCode *status)
{
  return MEMORY[0x1F4180480](regexp, status);
}

int32_t uregex_groupCount(URegularExpression *regexp, UErrorCode *status)
{
  return MEMORY[0x1F4180490](regexp, status);
}

int32_t uregex_groupNumberFromName(URegularExpression *regexp, const UChar *groupName, int32_t nameLength, UErrorCode *status)
{
  return MEMORY[0x1F4180498](regexp, groupName, *(void *)&nameLength, status);
}

UBool uregex_hitEnd(const URegularExpression *regexp, UErrorCode *status)
{
  return MEMORY[0x1F41804A0](regexp, status);
}

UBool uregex_matches(URegularExpression *regexp, int32_t startIndex, UErrorCode *status)
{
  return MEMORY[0x1F41804B0](regexp, *(void *)&startIndex, status);
}

URegularExpression *__cdecl uregex_open(const UChar *pattern, int32_t patternLength, uint32_t flags, UParseError *pe, UErrorCode *status)
{
  return (URegularExpression *)MEMORY[0x1F41804B8](pattern, *(void *)&patternLength, *(void *)&flags, pe, status);
}

UBool uregex_requireEnd(const URegularExpression *regexp, UErrorCode *status)
{
  return MEMORY[0x1F41804D0](regexp, status);
}

void uregex_setFindProgressCallback(URegularExpression *regexp, URegexFindProgressCallback *callback, const void *context, UErrorCode *status)
{
}

void uregex_setMatchCallback(URegularExpression *regexp, URegexMatchCallback *callback, const void *context, UErrorCode *status)
{
}

void uregex_setRegion64(URegularExpression *regexp, int64_t regionStart, int64_t regionLimit, UErrorCode *status)
{
}

void uregex_setText(URegularExpression *regexp, const UChar *text, int32_t textLength, UErrorCode *status)
{
}

void uregex_setUText(URegularExpression *regexp, UText *text, UErrorCode *status)
{
}

int64_t uregex_start64(URegularExpression *regexp, int32_t groupNum, UErrorCode *status)
{
  return MEMORY[0x1F4180518](regexp, *(void *)&groupNum, status);
}

void uregex_useAnchoringBounds(URegularExpression *regexp, UBool b, UErrorCode *status)
{
}

void uregex_useTransparentBounds(URegularExpression *regexp, UBool b, UErrorCode *status)
{
}

uint64_t uregion_getAvailable()
{
  return MEMORY[0x1F4180530]();
}

uint64_t uregion_getContainedRegions()
{
  return MEMORY[0x1F4180538]();
}

uint64_t uregion_getContainingRegion()
{
  return MEMORY[0x1F4180540]();
}

uint64_t uregion_getContainingRegionOfType()
{
  return MEMORY[0x1F4180548]();
}

uint64_t uregion_getRegionCode()
{
  return MEMORY[0x1F4180550]();
}

uint64_t uregion_getRegionFromCode()
{
  return MEMORY[0x1F4180558]();
}

uint64_t ureldatefmt_close()
{
  return MEMORY[0x1F4180560]();
}

uint64_t ureldatefmt_open()
{
  return MEMORY[0x1F4180578]();
}

uint64_t uscript_getCode()
{
  return MEMORY[0x1F41805C8]();
}

uint64_t uscript_getScript()
{
  return MEMORY[0x1F41805E0]();
}

uint64_t uset_clear()
{
  return MEMORY[0x1F41806B8]();
}

uint64_t uset_close()
{
  return MEMORY[0x1F41806D0]();
}

uint64_t uset_contains()
{
  return MEMORY[0x1F41806E0]();
}

uint64_t uset_containsAllCodePoints()
{
  return MEMORY[0x1F41806E8]();
}

uint64_t uset_getItem()
{
  return MEMORY[0x1F41806F8]();
}

uint64_t uset_getItemCount()
{
  return MEMORY[0x1F4180700]();
}

uint64_t uset_openPattern()
{
  return MEMORY[0x1F4180720]();
}

UText *__cdecl utext_close(UText *ut)
{
  return (UText *)MEMORY[0x1F4180780](ut);
}

int32_t utf8_back1SafeBody(const uint8_t *s, int32_t start, int32_t i)
{
  return MEMORY[0x1F41807E8](s, *(void *)&start, *(void *)&i);
}

int utimes(const char *a1, const timeval *a2)
{
  return MEMORY[0x1F40CE620](a1, a2);
}

void uuid_generate_random(uuid_t out)
{
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  return MEMORY[0x1F40CE660](in, uu);
}

void uuid_unparse_upper(const uuid_t uu, uuid_string_t out)
{
}

int vfprintf_l(FILE *a1, locale_t a2, const char *a3, va_list a4)
{
  return MEMORY[0x1F40CE698](a1, a2, a3, a4);
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return MEMORY[0x1F40CE6A8](*(void *)&target_task, address, size, *(void *)&flags);
}

kern_return_t vm_copy(vm_map_t target_task, vm_address_t source_address, vm_size_t size, vm_address_t dest_address)
{
  return MEMORY[0x1F40CE6B8](*(void *)&target_task, source_address, size, dest_address);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1F40CE6C0](*(void *)&target_task, address, size);
}

uint64_t voucher_adopt()
{
  return MEMORY[0x1F40CE708]();
}

uint64_t voucher_copy()
{
  return MEMORY[0x1F40CE710]();
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1F40CE790](__str, __size, __format, a4);
}

pid_t waitpid(pid_t a1, int *a2, int a3)
{
  return MEMORY[0x1F40CE7C8](*(void *)&a1, a2, *(void *)&a3);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1F40CE928](*(void *)&__fd, __buf, __nbyte);
}

ssize_t writev(int a1, const iovec *a2, int a3)
{
  return MEMORY[0x1F40CE938](*(void *)&a1, a2, *(void *)&a3);
}

xmlParserCtxtPtr xmlCreatePushParserCtxt(xmlSAXHandlerPtr sax, void *user_data, const char *chunk, int size, const char *filename)
{
  return (xmlParserCtxtPtr)MEMORY[0x1F4182620](sax, user_data, chunk, *(void *)&size, filename);
}

xmlErrorPtr xmlCtxtGetLastError(void *ctx)
{
  return (xmlErrorPtr)MEMORY[0x1F4182628](ctx);
}

int xmlCtxtUseOptions(xmlParserCtxtPtr ctxt, int options)
{
  return MEMORY[0x1F4182640](ctxt, *(void *)&options);
}

void xmlFreeDoc(xmlDocPtr cur)
{
}

void xmlFreeEnumeration(xmlEnumerationPtr cur)
{
}

void xmlFreeParserCtxt(xmlParserCtxtPtr ctxt)
{
}

xmlExternalEntityLoader xmlGetExternalEntityLoader(void)
{
  return (xmlExternalEntityLoader)MEMORY[0x1F41826D8]();
}

xmlEntityPtr xmlGetPredefinedEntity(const xmlChar *name)
{
  return (xmlEntityPtr)MEMORY[0x1F41826F8](name);
}

void xmlInitParser(void)
{
}

xmlParserInputPtr xmlNoNetExternalEntityLoader(const char *URL, const char *ID, xmlParserCtxtPtr ctxt)
{
  return (xmlParserInputPtr)MEMORY[0x1F41827A0](URL, ID, ctxt);
}

int xmlParseChunk(xmlParserCtxtPtr ctxt, const char *chunk, int size, int terminate)
{
  return MEMORY[0x1F41827E0](ctxt, chunk, *(void *)&size, *(void *)&terminate);
}

void xmlSAX2EntityDecl(void *ctx, const xmlChar *name, int type, const xmlChar *publicId, const xmlChar *systemId, xmlChar *content)
{
}

void xmlSAX2ExternalSubset(void *ctx, const xmlChar *name, const xmlChar *ExternalID, const xmlChar *SystemID)
{
}

int xmlSAX2GetColumnNumber(void *ctx)
{
  return MEMORY[0x1F4182870](ctx);
}

xmlEntityPtr xmlSAX2GetEntity(void *ctx, const xmlChar *name)
{
  return (xmlEntityPtr)MEMORY[0x1F4182878](ctx, name);
}

int xmlSAX2GetLineNumber(void *ctx)
{
  return MEMORY[0x1F4182880](ctx);
}

void xmlSAX2InternalSubset(void *ctx, const xmlChar *name, const xmlChar *ExternalID, const xmlChar *SystemID)
{
}

void xmlSAX2UnparsedEntityDecl(void *ctx, const xmlChar *name, const xmlChar *publicId, const xmlChar *systemId, const xmlChar *notationName)
{
}

void xmlSetExternalEntityLoader(xmlExternalEntityLoader f)
{
}

void xmlSetStructuredErrorFunc(void *ctx, xmlStructuredErrorFunc handler)
{
}

void xmlStopParser(xmlParserCtxtPtr ctxt)
{
}

xpc_object_t xpc_activity_copy_criteria(xpc_activity_t activity)
{
  return (xpc_object_t)MEMORY[0x1F40CE978](activity);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return MEMORY[0x1F40CE990](activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
}

void xpc_activity_set_criteria(xpc_activity_t activity, xpc_object_t criteria)
{
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return MEMORY[0x1F40CE9D0](activity, state);
}

BOOL xpc_activity_should_defer(xpc_activity_t activity)
{
  return MEMORY[0x1F40CE9E8](activity);
}

void xpc_activity_unregister(const char *identifier)
{
}

uint64_t xpc_add_bundle()
{
  return MEMORY[0x1F40CEA00]();
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEA30](objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1F40CEA58](xarray);
}

const char *__cdecl xpc_array_get_string(xpc_object_t xarray, size_t index)
{
  return (const char *)MEMORY[0x1F40CEA90](xarray, index);
}

xpc_object_t xpc_array_get_value(xpc_object_t xarray, size_t index)
{
  return (xpc_object_t)MEMORY[0x1F40CEAA8](xarray, index);
}

void xpc_connection_activate(xpc_connection_t connection)
{
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

uint64_t xpc_connection_copy_bundle_id()
{
  return MEMORY[0x1F40CEB88]();
}

uint64_t xpc_connection_copy_invalidation_reason()
{
  return MEMORY[0x1F40CEB98]();
}

xpc_connection_t xpc_connection_create(const char *name, dispatch_queue_t targetq)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBA8](name, targetq);
}

xpc_connection_t xpc_connection_create_from_endpoint(xpc_endpoint_t endpoint)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBC0](endpoint);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBD0](name, targetq, flags);
}

au_asid_t xpc_connection_get_asid(xpc_connection_t connection)
{
  return MEMORY[0x1F40CEBE0](connection);
}

uint64_t xpc_connection_get_audit_token()
{
  return MEMORY[0x1F40CEBE8]();
}

gid_t xpc_connection_get_egid(xpc_connection_t connection)
{
  return MEMORY[0x1F40CEC00](connection);
}

uid_t xpc_connection_get_euid(xpc_connection_t connection)
{
  return MEMORY[0x1F40CEC08](connection);
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return MEMORY[0x1F40CEC20](connection);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_barrier(xpc_connection_t connection, dispatch_block_t barrier)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return (xpc_object_t)MEMORY[0x1F40CEC68](connection, message);
}

uint64_t xpc_connection_send_notification()
{
  return MEMORY[0x1F40CEC70]();
}

uint64_t xpc_connection_set_bootstrap()
{
  return MEMORY[0x1F40CEC78]();
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

uint64_t xpc_connection_set_instance()
{
  return MEMORY[0x1F40CECA8]();
}

uint64_t xpc_connection_set_legacy()
{
  return MEMORY[0x1F40CECB0]();
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
}

void xpc_connection_suspend(xpc_connection_t connection)
{
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1F40CED28](object);
}

uint64_t xpc_copy_entitlement_for_token()
{
  return MEMORY[0x1F40CED38]();
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x1F40CED90](bytes, length);
}

xpc_object_t xpc_data_create_with_dispatch_data(dispatch_data_t ddata)
{
  return (xpc_object_t)MEMORY[0x1F40CEDA0](ddata);
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return (const void *)MEMORY[0x1F40CEDB0](xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return MEMORY[0x1F40CEDC0](xdata);
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return MEMORY[0x1F40CEE08](xdict, applier);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return (xpc_object_t)MEMORY[0x1F40CEE40](original);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEE80](xdict, key);
}

const void *__cdecl xpc_dictionary_get_data(xpc_object_t xdict, const char *key, size_t *length)
{
  return (const void *)MEMORY[0x1F40CEE98](xdict, key, length);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEEC8](xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1F40CEEF0](xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEEF8](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEF10](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_endpoint_t xpc_endpoint_create(xpc_connection_t connection)
{
  return (xpc_endpoint_t)MEMORY[0x1F40CF018](connection);
}

xpc_object_t xpc_fd_create(int fd)
{
  return (xpc_object_t)MEMORY[0x1F40CF0B8](*(void *)&fd);
}

int xpc_fd_dup(xpc_object_t xfd)
{
  return MEMORY[0x1F40CF0D0](xfd);
}

uint64_t xpc_get_class4NSXPC()
{
  return MEMORY[0x1F40CF128]();
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1F40CF148](object);
}

void xpc_main(xpc_connection_handler_t handler)
{
}

void xpc_release(xpc_object_t object)
{
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1F40CF248](object);
}

void xpc_transaction_begin(void)
{
}

void xpc_transaction_end(void)
{
}